{"expand":"renderedFields,names,schema,operations,editmeta,changelog,versionedRepresentations","id":"12710489","self":"https://issues.apache.org/jira/rest/api/2/issue/12710489","key":"STORM-297","fields":{"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype","name":"Bug","subtask":false,"avatarId":21133},"timespent":null,"project":{"self":"https://issues.apache.org/jira/rest/api/2/project/12314820","id":"12314820","key":"STORM","name":"Apache Storm","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/projectavatar?pid=12314820&avatarId=21667","24x24":"https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12314820&avatarId=21667","16x16":"https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12314820&avatarId=21667","32x32":"https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12314820&avatarId=21667"},"projectCategory":{"self":"https://issues.apache.org/jira/rest/api/2/projectCategory/13260","id":"13260","description":"Apache Storm Related","name":"Storm"}},"fixVersions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12326452","id":"12326452","name":"0.9.2-incubating","archived":false,"released":true,"releaseDate":"2014-06-25"}],"aggregatetimespent":null,"resolution":{"self":"https://issues.apache.org/jira/rest/api/2/resolution/1","id":"1","description":"A fix for this issue is checked into the tree and tested.","name":"Fixed"},"customfield_12312322":null,"customfield_12310220":"2014-04-25T15:58:53.311+0000","customfield_12312520":null,"customfield_12312323":null,"customfield_12312521":"Fri Jul 24 01:20:06 UTC 2015","customfield_12312320":null,"customfield_12310222":"1_*:*_1_*:*_3923732850_*|*_5_*:*_1_*:*_0","customfield_12310420":"388810","customfield_12312321":null,"resolutiondate":"2014-06-09T13:49:56.806+0000","workratio":-1,"customfield_12312328":null,"customfield_12312329":null,"customfield_12312923":null,"customfield_12312326":null,"customfield_12312920":null,"customfield_12310300":null,"customfield_12312327":null,"customfield_12312921":null,"customfield_12312324":null,"customfield_12312720":null,"customfield_12312325":null,"lastViewed":null,"watches":{"self":"https://issues.apache.org/jira/rest/api/2/issue/STORM-297/watchers","watchCount":13,"isWatching":false},"created":"2014-04-25T03:54:23.995+0000","priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.svg","name":"Major","id":"3"},"labels":["Performance","netty"],"customfield_12312333":null,"customfield_12312334":null,"customfield_12313422":"false","customfield_12310310":"5.0","customfield_12312331":null,"customfield_12312332":null,"timeestimate":null,"aggregatetimeoriginalestimate":null,"customfield_12311120":null,"customfield_12312330":null,"versions":[],"customfield_12312339":null,"issuelinks":[{"id":"12396747","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12396747","type":{"id":"12310000","name":"Duplicate","inward":"is duplicated by","outward":"duplicates","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/12310000"},"outwardIssue":{"id":"12705950","key":"STORM-271","self":"https://issues.apache.org/jira/rest/api/2/issue/12705950","fields":{"summary":"Naming storm threads more meaningful names.","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Done"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/4","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/minor.svg","name":"Minor","id":"4"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/7","id":"7","description":"The sub-task of the issue","iconUrl":"https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype","name":"Sub-task","subtask":true,"avatarId":21146}}}},{"id":"12396746","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12396746","type":{"id":"12310000","name":"Duplicate","inward":"is duplicated by","outward":"duplicates","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/12310000"},"outwardIssue":{"id":"12705951","key":"STORM-272","self":"https://issues.apache.org/jira/rest/api/2/issue/12705951","fields":{"summary":"Make worker receiver thread number configurable","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Done"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/4","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/minor.svg","name":"Minor","id":"4"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/7","id":"7","description":"The sub-task of the issue","iconUrl":"https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype","name":"Sub-task","subtask":true,"avatarId":21146}}}},{"id":"12388596","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12388596","type":{"id":"10030","name":"Reference","inward":"is related to","outward":"relates to","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"},"outwardIssue":{"id":"12715654","key":"STORM-329","self":"https://issues.apache.org/jira/rest/api/2/issue/12715654","fields":{"summary":"Fix cascading Storm failure by improving reconnection strategy and buffering messages","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/5","description":"A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/resolved.png","name":"Resolved","id":"5","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Done"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.svg","name":"Major","id":"3"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/4","id":"4","description":"An improvement or enhancement to an existing feature or task.","iconUrl":"https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype","name":"Improvement","subtask":false,"avatarId":21140}}}}],"assignee":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=clockfly","name":"clockfly","key":"clockfly","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sean Zhong","active":true,"timeZone":"Asia/Shanghai"},"customfield_12312337":null,"customfield_12312338":null,"updated":"2015-10-05T02:18:05.085+0000","customfield_12312335":null,"customfield_12312336":null,"status":{"self":"https://issues.apache.org/jira/rest/api/2/status/5","description":"A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/resolved.png","name":"Resolved","id":"5","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Done"}},"components":[{"self":"https://issues.apache.org/jira/rest/api/2/component/12327950","id":"12327950","name":"storm-core","description":"Core storm daemons and APIs including trident"}],"timeoriginalestimate":null,"description":"We cannot scale up the performance by adding more CPU cores and increasing parallelism.\n\nFor a 2 layer topology Spout ---shuffle grouping--> bolt, when message size is small (around 100 bytes), we can find in the below picture that neither the CPU nor the network is saturated. When message size is 100 bytes, only 40% of CPU is used, only 18% of network is used, although we have a high parallelism (overall we have 144 executors)","customfield_10010":null,"timetracking":{},"customfield_12312026":null,"customfield_12312023":null,"customfield_12312024":null,"attachment":[{"self":"https://issues.apache.org/jira/rest/api/2/attachment/12648279","id":"12648279","filename":"storm_conf.txt","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=clockfly","name":"clockfly","key":"clockfly","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sean Zhong","active":true,"timeZone":"Asia/Shanghai"},"created":"2014-06-04T05:59:03.467+0000","size":4949,"mimeType":"text/plain","content":"https://issues.apache.org/jira/secure/attachment/12648279/storm_conf.txt"},{"self":"https://issues.apache.org/jira/rest/api/2/attachment/12644559","id":"12644559","filename":"storm_Netty_receiver_diagram.png","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=clockfly","name":"clockfly","key":"clockfly","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sean Zhong","active":true,"timeZone":"Asia/Shanghai"},"created":"2014-05-13T05:32:15.240+0000","size":66331,"mimeType":"image/png","content":"https://issues.apache.org/jira/secure/attachment/12644559/storm_Netty_receiver_diagram.png"},{"self":"https://issues.apache.org/jira/rest/api/2/attachment/12641868","id":"12641868","filename":"storm_performance_fix.patch","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=clockfly","name":"clockfly","key":"clockfly","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sean Zhong","active":true,"timeZone":"Asia/Shanghai"},"created":"2014-04-25T04:01:30.269+0000","size":129647,"mimeType":"text/plain","content":"https://issues.apache.org/jira/secure/attachment/12641868/storm_performance_fix.patch"},{"self":"https://issues.apache.org/jira/rest/api/2/attachment/12641867","id":"12641867","filename":"Storm_performance_fix.pdf","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=clockfly","name":"clockfly","key":"clockfly","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sean Zhong","active":true,"timeZone":"Asia/Shanghai"},"created":"2014-04-25T03:55:27.446+0000","size":526221,"mimeType":"application/pdf","content":"https://issues.apache.org/jira/secure/attachment/12641867/Storm_performance_fix.pdf"},{"self":"https://issues.apache.org/jira/rest/api/2/attachment/12648262","id":"12648262","filename":"worker_throughput_without_storm-297.png","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=clockfly","name":"clockfly","key":"clockfly","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sean Zhong","active":true,"timeZone":"Asia/Shanghai"},"created":"2014-06-04T04:12:21.742+0000","size":27511,"mimeType":"image/png","content":"https://issues.apache.org/jira/secure/attachment/12648262/worker_throughput_without_storm-297.png"}],"customfield_12312340":null,"aggregatetimeestimate":null,"customfield_12312341":null,"customfield_12312220":null,"customfield_12312022":null,"customfield_12310921":null,"customfield_12310920":"389058","customfield_12312823":null,"summary":"Storm Performance cannot be scaled up by adding more CPU cores","creator":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=clockfly","name":"clockfly","key":"clockfly","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sean Zhong","active":true,"timeZone":"Asia/Shanghai"},"subtasks":[{"id":"12705950","key":"STORM-271","self":"https://issues.apache.org/jira/rest/api/2/issue/12705950","fields":{"summary":"Naming storm threads more meaningful names.","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Done"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/4","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/minor.svg","name":"Minor","id":"4"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/7","id":"7","description":"The sub-task of the issue","iconUrl":"https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype","name":"Sub-task","subtask":true,"avatarId":21146}}},{"id":"12705951","key":"STORM-272","self":"https://issues.apache.org/jira/rest/api/2/issue/12705951","fields":{"summary":"Make worker receiver thread number configurable","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Done"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/4","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/minor.svg","name":"Minor","id":"4"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/7","id":"7","description":"The sub-task of the issue","iconUrl":"https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype","name":"Sub-task","subtask":true,"avatarId":21146}}}],"reporter":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=clockfly","name":"clockfly","key":"clockfly","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sean Zhong","active":true,"timeZone":"Asia/Shanghai"},"customfield_12310291":null,"customfield_12310290":null,"aggregateprogress":{"progress":0,"total":0},"environment":null,"customfield_12313520":null,"customfield_12311020":null,"duedate":null,"customfield_12310250":null,"progress":{"progress":0,"total":0},"comment":{"comments":[{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/13980663","id":"13980663","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=clockfly","name":"clockfly","key":"clockfly","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sean Zhong","active":true,"timeZone":"Asia/Shanghai"},"body":"We have a fix for this.\n\nPlease check the attachment for problem definition, analysis, fix, and test result.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=clockfly","name":"clockfly","key":"clockfly","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sean Zhong","active":true,"timeZone":"Asia/Shanghai"},"created":"2014-04-25T03:55:27.451+0000","updated":"2014-04-25T03:55:27.451+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/13980664","id":"13980664","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=clockfly","name":"clockfly","key":"clockfly","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sean Zhong","active":true,"timeZone":"Asia/Shanghai"},"body":"link https://issues.apache.org/jira/secure/attachment/12641867/Storm_performance_fix.pdf","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=clockfly","name":"clockfly","key":"clockfly","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sean Zhong","active":true,"timeZone":"Asia/Shanghai"},"created":"2014-04-25T03:57:19.082+0000","updated":"2014-04-25T03:57:19.082+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/13980666","id":"13980666","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=clockfly","name":"clockfly","key":"clockfly","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sean Zhong","active":true,"timeZone":"Asia/Shanghai"},"body":"Some earilier discussion can be found here\nhttp://mail-archives.us.apache.org/mod_mbox/incubator-storm-dev/201404.mbox/%3CCADiMvzUMV7Ab1RvwfV6rJHMqr2ekOg3kdTONsDhZHCmMhYWTsw@mail.gmail.com%3E","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=clockfly","name":"clockfly","key":"clockfly","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sean Zhong","active":true,"timeZone":"Asia/Shanghai"},"created":"2014-04-25T03:57:45.325+0000","updated":"2014-04-25T03:57:45.325+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/13980667","id":"13980667","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=clockfly","name":"clockfly","key":"clockfly","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sean Zhong","active":true,"timeZone":"Asia/Shanghai"},"body":"Demo patch","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=clockfly","name":"clockfly","key":"clockfly","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sean Zhong","active":true,"timeZone":"Asia/Shanghai"},"created":"2014-04-25T04:01:30.273+0000","updated":"2014-04-25T04:01:30.273+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/13980668","id":"13980668","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=clockfly","name":"clockfly","key":"clockfly","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sean Zhong","active":true,"timeZone":"Asia/Shanghai"},"body":"A demo patch is attached at https://issues.apache.org/jira/secure/attachment/12641868/storm_performance_fix.patch\n\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=clockfly","name":"clockfly","key":"clockfly","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sean Zhong","active":true,"timeZone":"Asia/Shanghai"},"created":"2014-04-25T04:03:01.035+0000","updated":"2014-04-25T04:03:01.035+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/13981183","id":"13981183","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=revans2","name":"revans2","key":"revans2","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Robert Joseph Evans","active":true,"timeZone":"America/Chicago"},"body":"The performance numbers look very impressive.  Do you plan on making the demo patch an actual pull request?  Pull requests are just a lot easier to comment on.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=revans2","name":"revans2","key":"revans2","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Robert Joseph Evans","active":true,"timeZone":"America/Chicago"},"created":"2014-04-25T15:58:53.311+0000","updated":"2014-04-25T15:58:53.311+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/13982300","id":"13982300","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=clockfly","name":"clockfly","key":"clockfly","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sean Zhong","active":true,"timeZone":"Asia/Shanghai"},"body":"Thank you! You comments is inspiring!\n\nI will break it down to several pull request for review.\n\n\nOn Sat, Apr 26, 2014 at 12:00 AM, Robert Joseph Evans (JIRA) <\n\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=clockfly","name":"clockfly","key":"clockfly","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sean Zhong","active":true,"timeZone":"Asia/Shanghai"},"created":"2014-04-27T11:47:15.421+0000","updated":"2014-04-27T11:47:15.421+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/13982869","id":"13982869","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=miguno","name":"miguno","key":"miguno","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=miguno&avatarId=26959","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=miguno&avatarId=26959","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=miguno&avatarId=26959","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=miguno&avatarId=26959"},"displayName":"Michael Noll","active":true,"timeZone":"Europe/Amsterdam"},"body":"Let me second Bobby's comment -- many thanks for the detailed report and also your code contribution, Sean.  Much appreciated!","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=miguno","name":"miguno","key":"miguno","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=miguno&avatarId=26959","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=miguno&avatarId=26959","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=miguno&avatarId=26959","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=miguno&avatarId=26959"},"displayName":"Michael Noll","active":true,"timeZone":"Europe/Amsterdam"},"created":"2014-04-28T09:29:45.577+0000","updated":"2014-04-28T09:29:45.577+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/13991506","id":"13991506","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"GitHub user clockfly opened a pull request:\n\n    https://github.com/apache/incubator-storm/pull/103\n\n    STORM-297 Storm Performance cannot be scaled up by adding more CPU cores\n\n    STORM-297:\n    \n    Description and test report can be found at https://issues.apache.org/jira/browse/STORM-297\n    The changes consists of:\n    1. use netty async\n    2. use batch send and batch receiver messaging api\n    3. allow to configure multiple worker receiver threads.\n    4. name the executor and netty threads\n\n\nYou can merge this pull request into a Git repository by running:\n\n    $ git pull https://github.com/clockfly/incubator-storm storm_async_netty_and_batch_api\n\nAlternatively you can review and apply these changes as the patch at:\n\n    https://github.com/apache/incubator-storm/pull/103.patch\n\nTo close this pull request, make a commit to your master/trunk branch\nwith (at least) the following in the commit message:\n\n    This closes #103\n    \n----\ncommit 861a92eab8740cfc0f83ac4d7ade9a2ab04a8b9b\nAuthor: Sean Zhong <clockfly@gmail.com>\nDate:   2014-05-07T03:10:07Z\n\n    1. Async netty message transfer 2. Batch send and batch receive api and implementation 3. allow to configure the number of receiver thread 4. name the threads\n\n----\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-05-07T03:14:42.493+0000","updated":"2014-05-07T03:14:42.493+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/13991508","id":"13991508","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=clockfly","name":"clockfly","key":"clockfly","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sean Zhong","active":true,"timeZone":"Asia/Shanghai"},"body":"UT Result:\nTests run: 156, Assertions: 101460, Failures: 0, Errors: 0","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=clockfly","name":"clockfly","key":"clockfly","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sean Zhong","active":true,"timeZone":"Asia/Shanghai"},"created":"2014-05-07T03:26:39.464+0000","updated":"2014-05-07T03:26:39.464+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/13991580","id":"13991580","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user clockfly commented on a diff in the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#discussion_r12362464\n  \n    --- Diff: storm-core/src/clj/backtype/storm/daemon/executor.clj ---\n    @@ -204,6 +204,7 @@\n             storm-conf (normalized-component-conf (:storm-conf worker) worker-context component-id)\n             executor-type (executor-type worker-context component-id)\n             batch-transfer->worker (disruptor/disruptor-queue\n    +                                  (str \"executor\"  executor-id \"-send-queue\")\n    --- End diff --\n    \n    give queue a name so that the thread for the queue has a reasonable name\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-05-07T06:04:43.259+0000","updated":"2014-05-07T06:04:43.259+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/13991581","id":"13991581","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user clockfly commented on a diff in the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#discussion_r12362548\n  \n    --- Diff: storm-core/src/clj/backtype/storm/daemon/worker.clj ---\n    @@ -109,25 +111,30 @@\n     (defn mk-transfer-fn [worker]\n       (let [local-tasks (-> worker :task-ids set)\n             local-transfer (:transfer-local-fn worker)\n    -        ^DisruptorQueue transfer-queue (:transfer-queue worker)]\n    +        ^DisruptorQueue transfer-queue (:transfer-queue worker)\n    +        task->node+port (:cached-task->node+port worker)]\n         (fn [^KryoTupleSerializer serializer tuple-batch]\n           (let [local (ArrayList.)\n    -            remote (ArrayList.)]\n    +            remoteMap (HashMap.)]\n             (fast-list-iter [[task tuple :as pair] tuple-batch]\n               (if (local-tasks task)\n                 (.add local pair)\n    -            (.add remote pair)\n    -            ))\n    +            (let [node+port (get @task->node+port task)]\n    --- End diff --\n    \n    Move the message grouping(group by node+port) code from worker transfer thread to executor send thread, as we only have ONE worker transfer thread, and it can become the bottleneck.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-05-07T06:10:01.537+0000","updated":"2014-05-07T06:10:01.537+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/13991583","id":"13991583","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user clockfly commented on a diff in the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#discussion_r12362569\n  \n    --- Diff: storm-core/src/clj/backtype/storm/messaging/loader.clj ---\n    @@ -24,45 +24,62 @@\n     (defn mk-local-context []\n       (local/mk-context))\n     \n    --- End diff --\n    \n    support mutiple worker receive threads\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-05-07T06:11:15.233+0000","updated":"2014-05-07T06:11:15.233+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/13991584","id":"13991584","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user clockfly commented on a diff in the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#discussion_r12362591\n  \n    --- Diff: storm-core/src/jvm/backtype/storm/messaging/netty/Context.java ---\n    @@ -47,12 +48,14 @@ public void prepare(Map storm_conf) {\n     \n             //each context will have a single client channel factory\n             int maxWorkers = Utils.getInt(storm_conf.get(Config.STORM_MESSAGING_NETTY_CLIENT_WORKER_THREADS));\n    --- End diff --\n    \n    give netty thread a name\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-05-07T06:12:23.683+0000","updated":"2014-05-07T06:12:23.683+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/13991586","id":"13991586","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user clockfly commented on a diff in the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#discussion_r12362595\n  \n    --- Diff: storm-core/src/jvm/backtype/storm/messaging/netty/MessageDecoder.java ---\n    @@ -34,52 +37,78 @@\n          */\n         protected Object decode(ChannelHandlerContext ctx, Channel channel, ChannelBuffer buf) throws Exception {\n             // Make sure that we have received at least a short \n    -        if (buf.readableBytes() < 2) {\n    +        long available = buf.readableBytes();\n    +        if (available < 2) {\n                 //need more data\n                 return null;\n             }\n     \n    -        // Mark the current buffer position before reading task/len field\n    -        // because the whole frame might not be in the buffer yet.\n    -        // We will reset the buffer position to the marked position if\n    -        // there's not enough bytes in the buffer.\n    -        buf.markReaderIndex();\n    -\n    -        //read the short field\n    -        short code = buf.readShort();\n    -        \n    -        //case 1: Control message\n    -        ControlMessage ctrl_msg = ControlMessage.mkMessage(code);\n    -        if (ctrl_msg != null) return ctrl_msg;\n    -        \n    -        //case 2: task Message\n    -        short task = code;\n    -        \n    -        // Make sure that we have received at least an integer (length) \n    -        if (buf.readableBytes() < 4) {\n    -            //need more data\n    -            buf.resetReaderIndex();\n    -            return null;\n    -        }\n    +        List<Object> ret = new ArrayList<Object>();\n    +\n    +        while (available >= 2) {\n    --- End diff --\n    \n    while loop, try to decode as more messages as possible.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-05-07T06:13:00.440+0000","updated":"2014-05-07T06:13:00.440+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/13991589","id":"13991589","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user clockfly commented on a diff in the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#discussion_r12362613\n  \n    --- Diff: storm-core/src/jvm/backtype/storm/messaging/netty/Client.java ---\n    @@ -128,133 +181,103 @@ private long getSleepTimeMs()\n         }\n     \n         /**\n    -     * Enqueue a task message to be sent to server\n    +     * Enqueue task messages to be sent to server\n          */\n    -    public void send(int task, byte[] message) {\n    -        //throw exception if the client is being closed\n    -        if (being_closed.get()) {\n    +    synchronized public void send(Iterator<TaskMessage> msgs) {\n    +\n    +        // throw exception if the client is being closed\n    +        if (closing) {\n                 throw new RuntimeException(\"Client is being closed, and does not take requests any more\");\n             }\n    -\n    -        try {\n    -            message_queue.put(new TaskMessage(task, message));\n    -\n    -            //resume delivery if it is waiting for requests\n    -            tryDeliverMessages(true);\n    -        } catch (InterruptedException e) {\n    -            throw new RuntimeException(e);\n    +        \n    +        if (null == msgs || !msgs.hasNext()) {\n    +            return;\n             }\n    -    }\n     \n    -    /**\n    -     * Retrieve messages from queue, and delivery to server if any\n    -     */\n    -    synchronized void tryDeliverMessages(boolean only_if_waiting) throws InterruptedException {\n    -        //just skip if delivery only if waiting, and we are not waiting currently\n    -        if (only_if_waiting && !wait_for_requests)  return;\n    -\n    -        //make sure that channel was not closed\n             Channel channel = channelRef.get();\n    -        if (channel == null)  return;\n    -        if (!channel.isOpen()) {\n    -            LOG.info(\"Channel to {} is no longer open.\",remote_addr);\n    -            //The channel is not open yet. Reconnect?\n    -            reconnect();\n    -            return;\n    +        if (null == channel) {\n    +            connect();\n    +            channel = channelRef.get();\n             }\n     \n    -        final MessageBatch requests = tryTakeMessages();\n    -        if (requests==null) {\n    -            wait_for_requests = true;\n    -            return;\n    -        }\n    +        while (msgs.hasNext()) {\n    +            TaskMessage message = msgs.next();\n    +            if (null == messageBatch) {\n    +                messageBatch = new MessageBatch(messageBatchSize);\n    +            }\n     \n    -        //if channel is being closed and we have no outstanding messages,  let's close the channel\n    -        if (requests.isEmpty() && being_closed.get()) {\n    -            close_n_release();\n    -            return;\n    +            messageBatch.add(message);\n    +            if (messageBatch.isFull()) {\n    +                MessageBatch toBeFlushed = messageBatch;\n    +                flushRequest(channel, toBeFlushed, blocking);\n    +                messageBatch = null;\n    +            }\n             }\n     \n    -        //we are busily delivering messages, and will check queue upon response.\n    -        //When send() is called by senders, we should not thus call tryDeliverMessages().\n    -        wait_for_requests = false;\n    -\n    -        //write request into socket channel\n    -        ChannelFuture future = channel.write(requests);\n    -        future.addListener(new ChannelFutureListener() {\n    -            public void operationComplete(ChannelFuture future)\n    -                    throws Exception {\n    -                if (!future.isSuccess()) {\n    -                    LOG.info(\"failed to send \"+requests.size()+\" requests to \"+remote_addr, future.getCause());\n    -                    reconnect();\n    -                } else {\n    -                    LOG.debug(\"{} request(s) sent\", requests.size());\n    -\n    -                    //Now that our requests have been sent, channel could be closed if needed\n    -                    if (being_closed.get())\n    -                        close_n_release();\n    -                }\n    +        if (null != messageBatch && !messageBatch.isEmpty()) {\n    +            if (channel.isWritable()) {\n    --- End diff --\n    \n    when channel is NOT writable, it means the internal netty buffer is full. In this case, we can try to buffer up more incoming messages.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-05-07T06:14:49.561+0000","updated":"2014-05-07T06:14:49.561+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/13991592","id":"13991592","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user clockfly commented on a diff in the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#discussion_r12362647\n  \n    --- Diff: storm-core/src/jvm/backtype/storm/messaging/netty/Server.java ---\n    @@ -31,35 +31,65 @@\n     import org.slf4j.LoggerFactory;\n     \n     import java.net.InetSocketAddress;\n    +import java.util.ArrayList;\n    +import java.util.Arrays;\n    +import java.util.HashMap;\n    +import java.util.Iterator;\n    +import java.util.List;\n     import java.util.Map;\n     import java.util.concurrent.Executors;\n     import java.util.concurrent.LinkedBlockingQueue;\n    +import java.util.concurrent.ThreadFactory;\n     \n     class Server implements IConnection {\n         private static final Logger LOG = LoggerFactory.getLogger(Server.class);\n         @SuppressWarnings(\"rawtypes\")\n         Map storm_conf;\n         int port;\n    -    private LinkedBlockingQueue<TaskMessage> message_queue;\n    +    private LinkedBlockingQueue<ArrayList<TaskMessage>>[] message_queue;\n    --- End diff --\n    \n    Create multiple queues for incoming messages. The size is the number of receiver threads.\n    For message which is sent to same task, it will be stored in the same queue to preserve the message order. \n\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-05-07T06:17:26.789+0000","updated":"2014-05-07T06:17:26.789+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/13991593","id":"13991593","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user clockfly commented on a diff in the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#discussion_r12362656\n  \n    --- Diff: storm-core/src/jvm/backtype/storm/messaging/netty/Server.java ---\n    @@ -31,35 +31,65 @@\n     import org.slf4j.LoggerFactory;\n     \n     import java.net.InetSocketAddress;\n    +import java.util.ArrayList;\n    +import java.util.Arrays;\n    +import java.util.HashMap;\n    +import java.util.Iterator;\n    +import java.util.List;\n     import java.util.Map;\n     import java.util.concurrent.Executors;\n     import java.util.concurrent.LinkedBlockingQueue;\n    +import java.util.concurrent.ThreadFactory;\n     \n     class Server implements IConnection {\n         private static final Logger LOG = LoggerFactory.getLogger(Server.class);\n         @SuppressWarnings(\"rawtypes\")\n         Map storm_conf;\n         int port;\n    -    private LinkedBlockingQueue<TaskMessage> message_queue;\n    +    private LinkedBlockingQueue<ArrayList<TaskMessage>>[] message_queue;\n         volatile ChannelGroup allChannels = new DefaultChannelGroup(\"storm-server\");\n         final ChannelFactory factory;\n         final ServerBootstrap bootstrap;\n    -\n    +    \n    +    private int queueCount;\n    +    HashMap<Integer, Integer> taskToQueueId = null;\n    +    int roundRobinQueueId;\n    +\t\n    +    boolean closing = false;\n    +    List<TaskMessage> closeMessage = Arrays.asList(new TaskMessage(-1, null));\n    +    \n    +    \n         @SuppressWarnings(\"rawtypes\")\n         Server(Map storm_conf, int port) {\n             this.storm_conf = storm_conf;\n             this.port = port;\n    -        message_queue = new LinkedBlockingQueue<TaskMessage>();\n    -\n    +        \n    --- End diff --\n    \n    try to construct the map from taskId -> queueId in round robin manner.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-05-07T06:17:55.374+0000","updated":"2014-05-07T06:17:55.374+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/13991604","id":"13991604","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=Gvain","name":"Gvain","key":"gvain","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jiahong Li","active":true,"timeZone":"Asia/Shanghai"},"body":"Does the performance number includes all components' 'transferred' throught as yahooeng does here http://yahooeng.tumblr.com/post/64758709722/making-storm-fly-with-netty  ? Or only the spouts' 'emitted' throughput counts ?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=Gvain","name":"Gvain","key":"gvain","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jiahong Li","active":true,"timeZone":"Asia/Shanghai"},"created":"2014-05-07T06:48:13.974+0000","updated":"2014-05-07T06:48:13.974+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/13991737","id":"13991737","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user Gvain commented on the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#issuecomment-42414069\n  \n    Does the performance number includes all components' 'transferred' throught as yahooeng does here http://yahooeng.tumblr.com/post/64758709722/making-storm-fly-with-netty ? Or only the spouts' 'emitted' throughput counts ?\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-05-07T11:03:52.565+0000","updated":"2014-05-07T11:03:52.565+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/13991740","id":"13991740","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user clockfly commented on the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#issuecomment-42414269\n  \n    spout \"transfered\" throughput.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-05-07T11:06:46.120+0000","updated":"2014-05-07T11:06:46.120+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/13991762","id":"13991762","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user Gvain commented on the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#issuecomment-42416918\n  \n    Really impressive. \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-05-07T11:42:33.249+0000","updated":"2014-05-07T11:42:33.249+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/13992083","id":"13992083","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user ptgoetz commented on a diff in the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#discussion_r12393972\n  \n    --- Diff: storm-core/src/jvm/backtype/storm/Config.java ---\n    @@ -84,8 +84,27 @@\n          */\n         public static final String STORM_MESSAGING_NETTY_CLIENT_WORKER_THREADS = \"storm.messaging.netty.client_worker_threads\"; \n         public static final Object STORM_MESSAGING_NETTY_CLIENT_WORKER_THREADS_SCHEMA = Number.class;\n    +    \n    +    /**\n    +     * If the Netty messaging layer is busy, the Netty client will try to batch message as more as possible up to the size of STORM_NETTY_MESSAGE_BATCH_SIZE bytes\n    +     */\n    +    public static final String STORM_NETTY_MESSAGE_BATCH_SIZE = \"netty.transfer.batch.size\";\n    +    public static final Object STORM_NETTY_MESSAGE_BATCH_SIZE_SCHEMA = Number.class;\n    --- End diff --\n    \n    This and all other new configuration parameters should be added to `defaults.yaml` with their default values.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-05-07T18:35:13.155+0000","updated":"2014-05-07T18:35:13.155+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/13992093","id":"13992093","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user ptgoetz commented on a diff in the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#discussion_r12394305\n  \n    --- Diff: storm-core/src/jvm/backtype/storm/utils/Utils.java ---\n    @@ -301,15 +303,39 @@ public static ComponentCommon getComponentCommon(StormTopology topology, String\n         }\n         \n         public static Integer getInt(Object o) {\n    -        if(o instanceof Long) {\n    -            return ((Long) o ).intValue();\n    -        } else if (o instanceof Integer) {\n    -            return (Integer) o;\n    -        } else if (o instanceof Short) {\n    -            return ((Short) o).intValue();\n    -        } else {\n    -            throw new IllegalArgumentException(\"Don't know how to convert \" + o + \" + to int\");\n    -        }\n    +      Integer result = getInt(o, null);\n    +      if (null == result) {\n    +        throw new IllegalArgumentException(\"Don't know how to convert null + to int\");\n    +      }\n    +      return result;\n    +    }\n    +    \n    +    public static Integer getInt(Object o, Integer defaultValue) {\n    +      if (null == o) {\n    +        return defaultValue;\n    +      }\n    +      \n    +      if(o instanceof Long) {\n    --- End diff --\n    \n    Very minor point, but this could probably be tightened to:\n    \n    ```java\n    if (o instanceof Number) {\n         return ((Number) o).intValue();\n    } else {\n         throw new IllegalArgumentException(\"Don't know how to convert \" + o + \" + to int\");\n    }\n    ```\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-05-07T18:41:14.755+0000","updated":"2014-05-07T18:41:14.755+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/13992116","id":"13992116","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user ptgoetz commented on a diff in the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#discussion_r12395524\n  \n    --- Diff: storm-core/src/jvm/backtype/storm/utils/Utils.java ---\n    @@ -373,6 +399,25 @@ public static CuratorFramework newCuratorStarted(Map conf, List<String> servers,\n             ret.start();\n             return ret;\n         }\n    +    \n    +    public static void redirectStreamAsync(Process process) {\n    +      redirectStreamAsync(process.getInputStream(), System.out);\n    --- End diff --\n    \n    I don't see this code referenced from anywhere else.\n    \n    I assume this is an attempt at solving the issue where STDOUT can fill buffers and cause workers to hang (e.g. when GC logging is turned on without being directed to a file)?\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-05-07T19:00:19.305+0000","updated":"2014-05-07T19:00:19.305+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/13992155","id":"13992155","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user ptgoetz commented on a diff in the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#discussion_r12398727\n  \n    --- Diff: storm-core/src/jvm/backtype/storm/messaging/netty/Client.java ---\n    @@ -84,43 +93,87 @@\n     \n             // Start the connection attempt.\n             remote_addr = new InetSocketAddress(host, port);\n    -        bootstrap.connect(remote_addr);\n    +        \n    +        Thread flushChecker = new Thread(new Runnable() {\n    +            @Override\n    +            public void run() {\n    +                //make sure we have a connection\n    +                connect();\n    +                \n    +                while(!closing) {\n    +                    long flushCheckTime = flushCheckTimer.get();\n    +                    long now = System.currentTimeMillis();\n    +                    if (now > flushCheckTime) {\n    +                        Channel channel = channelRef.get();\n    +                        if (null != channel && channel.isWritable()) {\n    +                            flush();\n    +                        }\n    +                    }\n    +                    try {\n    +                        Thread.sleep(flushCheckInterval);\n    +                    } catch (InterruptedException e) {\n    +                        break;\n    +                    }\n    +                }\n    +                \n    +            }\n    +        });\n    +        \n    +        flushChecker.setDaemon(true);\n    --- End diff --\n    \n    Do we want to name this thread as well?\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-05-07T19:57:16.723+0000","updated":"2014-05-07T19:57:16.723+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/13992194","id":"13992194","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user ptgoetz commented on the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#issuecomment-42479510\n  \n    In general this looks good to me, but it needs to be reviewed by additional committers familiar with the netty transport. Unit tests pass as did a basic smoke test on a 3-node cluster.\n    \n    As I mentioned in an earlier comment, the additional config parameters need to be added to the `defaults.yaml` file, preferably with some comments/documentation regarding usage and ramifications of certain settings (e.g. sync vs. async). That way users won't have to dig around in source code to determine the default values.\n    \n    I also noticed that some of the changes you mentioned in the pdf doc don't appear in this pull request (e.g. serialization.reserve.tuple.createTime)? I'm just curious as to why you left some things out.\n    \n    Thanks for the contribution!\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-05-07T20:33:54.413+0000","updated":"2014-05-07T20:33:54.413+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/13992376","id":"13992376","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user clockfly commented on a diff in the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#discussion_r12410406\n  \n    --- Diff: storm-core/src/jvm/backtype/storm/utils/Utils.java ---\n    @@ -373,6 +399,25 @@ public static CuratorFramework newCuratorStarted(Map conf, List<String> servers,\n             ret.start();\n             return ret;\n         }\n    +    \n    +    public static void redirectStreamAsync(Process process) {\n    +      redirectStreamAsync(process.getInputStream(), System.out);\n    --- End diff --\n    \n    Hi Taylor,\n    \n    Yes, you are right. it is used to avoid the worker to hang due to stdout full. The original demo patch is very big, so I have to break it down to several patches. The code which use  this function will appear in followup pull request.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-05-08T00:22:11.546+0000","updated":"2014-05-08T00:22:11.546+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/13992377","id":"13992377","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user clockfly commented on a diff in the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#discussion_r12410447\n  \n    --- Diff: storm-core/src/jvm/backtype/storm/messaging/netty/Client.java ---\n    @@ -84,43 +93,87 @@\n     \n             // Start the connection attempt.\n             remote_addr = new InetSocketAddress(host, port);\n    -        bootstrap.connect(remote_addr);\n    +        \n    +        Thread flushChecker = new Thread(new Runnable() {\n    +            @Override\n    +            public void run() {\n    +                //make sure we have a connection\n    +                connect();\n    +                \n    +                while(!closing) {\n    +                    long flushCheckTime = flushCheckTimer.get();\n    +                    long now = System.currentTimeMillis();\n    +                    if (now > flushCheckTime) {\n    +                        Channel channel = channelRef.get();\n    +                        if (null != channel && channel.isWritable()) {\n    +                            flush();\n    +                        }\n    +                    }\n    +                    try {\n    +                        Thread.sleep(flushCheckInterval);\n    +                    } catch (InterruptedException e) {\n    +                        break;\n    +                    }\n    +                }\n    +                \n    +            }\n    +        });\n    +        \n    +        flushChecker.setDaemon(true);\n    --- End diff --\n    \n    I will fix this.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-05-08T00:23:29.181+0000","updated":"2014-05-08T00:23:29.181+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/13992378","id":"13992378","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user clockfly commented on the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#issuecomment-42499434\n  \n    | (e.g. serialization.reserve.tuple.createTime)?\n    This changes a lot of files. I will do this in a followup pull request, to make the code change easier to review.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-05-08T00:25:24.315+0000","updated":"2014-05-08T00:25:24.315+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/13992430","id":"13992430","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user clockfly commented on a diff in the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#discussion_r12413170\n  \n    --- Diff: storm-core/src/jvm/backtype/storm/utils/Utils.java ---\n    @@ -301,15 +303,39 @@ public static ComponentCommon getComponentCommon(StormTopology topology, String\n         }\n         \n         public static Integer getInt(Object o) {\n    -        if(o instanceof Long) {\n    -            return ((Long) o ).intValue();\n    -        } else if (o instanceof Integer) {\n    -            return (Integer) o;\n    -        } else if (o instanceof Short) {\n    -            return ((Short) o).intValue();\n    -        } else {\n    -            throw new IllegalArgumentException(\"Don't know how to convert \" + o + \" + to int\");\n    -        }\n    +      Integer result = getInt(o, null);\n    +      if (null == result) {\n    +        throw new IllegalArgumentException(\"Don't know how to convert null + to int\");\n    +      }\n    +      return result;\n    +    }\n    +    \n    +    public static Integer getInt(Object o, Integer defaultValue) {\n    +      if (null == o) {\n    +        return defaultValue;\n    +      }\n    +      \n    +      if(o instanceof Long) {\n    --- End diff --\n    \n    Negative, Number has subtype of Float, Double, we want to throw for these two types\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-05-08T02:13:46.982+0000","updated":"2014-05-08T02:13:46.982+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/13993409","id":"13993409","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user clockfly commented on the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#issuecomment-42634710\n  \n    Strange, the mail list notification not working.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-05-09T05:30:25.216+0000","updated":"2014-05-09T05:30:25.216+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/13996040","id":"13996040","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user nathanmarz commented on the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#issuecomment-42916013\n  \n    Can you describe how the worker receive thread has been changed in the pull request? In particular, do we still have the guarantee that messages sent from task A to task B are received in the same order they are sent (or not received at all)? For example, if task A sends messages 1, 2, 3, 4, and task B receives 1, 4, 3 that would violate this guarantee. \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-05-13T04:29:59.055+0000","updated":"2014-05-13T04:29:59.055+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/13996068","id":"13996068","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=clockfly","name":"clockfly","key":"clockfly","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sean Zhong","active":true,"timeZone":"Asia/Shanghai"},"body":"show how the message order is reserved when using multiple receiver thread","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=clockfly","name":"clockfly","key":"clockfly","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sean Zhong","active":true,"timeZone":"Asia/Shanghai"},"created":"2014-05-13T05:32:15.258+0000","updated":"2014-05-13T05:32:15.258+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/13996073","id":"13996073","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user clockfly commented on the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#issuecomment-42918783\n  \n    Hi Nathan,\n    \n    Thank you for your comments, I just drew a diagram for your reference.\n    https://issues.apache.org/jira/secure/attachment/12644559/storm_Netty_receiver_diagram.png\n    \n    Sean\n\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-05-13T05:34:02.878+0000","updated":"2014-05-13T05:34:02.878+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/14002184","id":"14002184","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user revans2 commented on a diff in the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#discussion_r12810544\n  \n    --- Diff: conf/defaults.yaml ---\n    @@ -109,6 +112,15 @@ storm.messaging.netty.max_retries: 30\n     storm.messaging.netty.max_wait_ms: 1000\n     storm.messaging.netty.min_wait_ms: 100\n     \n    +# If the Netty messaging layer is busy(netty internal buffer not writable), the Netty client will try to batch message as more as possible up to the size of storm.messaging.netty.transfer.batch.size bytes, otherwise it will try to flush message as soon as possible to reduce latency.\n    +storm.messaging.netty.transfer.batch.size: 262144\n    +\n    +# If storm.messaging.netty.blocking is set to true, the Netty Client will send messages in synchronized way, otherwise it will do it in async way. Set storm.messaging.netty.blocking to false to improve the latency and throughput.\n    --- End diff --\n    \n    If this always improves the latency and throughput why have this as a config option at all?\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-05-19T19:05:49.863+0000","updated":"2014-05-19T19:05:49.863+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/14002212","id":"14002212","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user revans2 commented on a diff in the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#discussion_r12811601\n  \n    --- Diff: storm-core/src/clj/backtype/storm/daemon/worker.clj ---\n    @@ -109,25 +111,30 @@\n     (defn mk-transfer-fn [worker]\n       (let [local-tasks (-> worker :task-ids set)\n             local-transfer (:transfer-local-fn worker)\n    -        ^DisruptorQueue transfer-queue (:transfer-queue worker)]\n    +        ^DisruptorQueue transfer-queue (:transfer-queue worker)\n    +        task->node+port (:cached-task->node+port worker)]\n         (fn [^KryoTupleSerializer serializer tuple-batch]\n           (let [local (ArrayList.)\n    -            remote (ArrayList.)]\n    +            remoteMap (HashMap.)]\n             (fast-list-iter [[task tuple :as pair] tuple-batch]\n               (if (local-tasks task)\n                 (.add local pair)\n    -            (.add remote pair)\n    -            ))\n    +            (let [node+port (get @task->node+port task)]\n    +              (when (not (.get remoteMap node+port))\n    +                (.put remoteMap node+port (ArrayList.)))\n    +              (let [remote (.get remoteMap node+port)]\n    +                (.add remote (TaskMessage. task (.serialize serializer tuple)))\n    +                 ))))\n    --- End diff --\n    \n    The above code does not really feel like it is clojure, as it is updating mutable state.  I would rather have see us do something like a group-by.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-05-19T19:26:23.853+0000","updated":"2014-05-19T19:26:23.853+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/14002215","id":"14002215","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user revans2 commented on a diff in the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#discussion_r12811853\n  \n    --- Diff: storm-core/src/clj/backtype/storm/disruptor.clj ---\n    @@ -89,7 +90,7 @@\n                     (consume-batch-when-available queue handler)\n                     0 )\n                   :kill-fn kill-fn\n    -              :thread-name thread-name\n    +              :thread-name (.getName queue)\n    --- End diff --\n    \n    The function this is a part of takes an optional :thread-name parameter.  We should either remove that parameter or honor it.  I would vote to remove it, because the only place I think it is called you modified as well (just below).\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-05-19T19:32:29.850+0000","updated":"2014-05-19T19:32:29.850+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/14002225","id":"14002225","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user revans2 commented on a diff in the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#discussion_r12812348\n  \n    --- Diff: storm-core/src/jvm/backtype/storm/messaging/netty/Client.java ---\n    @@ -21,52 +21,53 @@\n     import backtype.storm.messaging.IConnection;\n     import backtype.storm.messaging.TaskMessage;\n     import backtype.storm.utils.Utils;\n    -\n     import org.jboss.netty.bootstrap.ClientBootstrap;\n     import org.jboss.netty.channel.Channel;\n     import org.jboss.netty.channel.ChannelFactory;\n    -import org.jboss.netty.channel.socket.nio.NioClientSocketChannelFactory;\n     import org.jboss.netty.channel.ChannelFuture;\n     import org.jboss.netty.channel.ChannelFutureListener;\n     import org.slf4j.Logger;\n     import org.slf4j.LoggerFactory;\n    -\n     import java.net.InetSocketAddress;\n    +import java.util.ArrayList;\n    +import java.util.Iterator;\n    +import java.util.List;\n     import java.util.Map;\n    -import java.util.Timer;\n    -import java.util.TimerTask;\n     import java.util.Random;\n    -import java.util.concurrent.LinkedBlockingQueue;\n    -import java.util.concurrent.atomic.AtomicBoolean;\n    -import java.util.concurrent.atomic.AtomicInteger;\n    +import java.util.concurrent.atomic.AtomicLong;\n     import java.util.concurrent.atomic.AtomicReference;\n     \n    -class Client implements IConnection {\n    +public class Client implements IConnection {\n         private static final Logger LOG = LoggerFactory.getLogger(Client.class);\n    -    private static final Timer TIMER = new Timer(\"netty-client-timer\", true);\n    -\n    +    private static final String PREFIX = \"Netty-Client-\";\n         private final int max_retries;\n         private final long base_sleep_ms;\n         private final long max_sleep_ms;\n    -    private LinkedBlockingQueue<Object> message_queue; //entry should either be TaskMessage or ControlMessage\n         private AtomicReference<Channel> channelRef;\n         private final ClientBootstrap bootstrap;\n    -    InetSocketAddress remote_addr;\n    -    private AtomicInteger retries;\n    +    private InetSocketAddress remote_addr;\n    +    \n         private final Random random = new Random();\n         private final ChannelFactory factory;\n         private final int buffer_size;\n    -    private final AtomicBoolean being_closed;\n    -    private boolean wait_for_requests;\n    +    private boolean closing;\n    +\n    +    private Integer messageBatchSize;\n    +    private Boolean blocking = false;\n    --- End diff --\n    \n    Can we make these to an int and a boolean they should never be null and I would rather have it blow up sooner rather then later.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-05-19T19:42:29.881+0000","updated":"2014-05-19T19:42:29.881+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/14002233","id":"14002233","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user revans2 commented on a diff in the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#discussion_r12812473\n  \n    --- Diff: storm-core/src/jvm/backtype/storm/messaging/netty/Client.java ---\n    @@ -84,43 +93,87 @@\n     \n             // Start the connection attempt.\n             remote_addr = new InetSocketAddress(host, port);\n    -        bootstrap.connect(remote_addr);\n    +        \n    +        Thread flushChecker = new Thread(new Runnable() {\n    --- End diff --\n    \n    Can we make this thread shared between the clients, otherwise we will have a dedicated thread per client, which can cause resource utilization issues, hitting a ulimit with the number of processes allowed per user.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-05-19T19:45:45.480+0000","updated":"2014-05-19T19:45:45.480+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/14002255","id":"14002255","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user revans2 commented on a diff in the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#discussion_r12812760\n  \n    --- Diff: storm-core/src/jvm/backtype/storm/messaging/netty/Client.java ---\n    @@ -84,43 +93,87 @@\n     \n             // Start the connection attempt.\n             remote_addr = new InetSocketAddress(host, port);\n    -        bootstrap.connect(remote_addr);\n    +        \n    +        Thread flushChecker = new Thread(new Runnable() {\n    +            @Override\n    +            public void run() {\n    +                //make sure we have a connection\n    +                connect();\n    +                \n    +                while(!closing) {\n    +                    long flushCheckTime = flushCheckTimer.get();\n    +                    long now = System.currentTimeMillis();\n    +                    if (now > flushCheckTime) {\n    +                        Channel channel = channelRef.get();\n    +                        if (null != channel && channel.isWritable()) {\n    +                            flush();\n    +                        }\n    +                    }\n    +                    try {\n    +                        Thread.sleep(flushCheckInterval);\n    +                    } catch (InterruptedException e) {\n    +                        break;\n    +                    }\n    +                }\n    +                \n    +            }\n    +        }, name() + \"-flush-checker\");\n    +        \n    +        flushChecker.setDaemon(true);\n    +        flushChecker.start();\n         }\n     \n         /**\n          * We will retry connection with exponential back-off policy\n          */\n    -    void reconnect() {\n    -        close_n_release();\n    -\n    -        //reconnect only if it's not being closed\n    -        if (being_closed.get()) return;\n    -\n    -        final int tried_count = retries.incrementAndGet();\n    -        if (tried_count <= max_retries) {\n    -            long sleep = getSleepTimeMs();\n    -            LOG.info(\"Waiting {} ms before trying connection to {}\", sleep, remote_addr);\n    -            TIMER.schedule(new TimerTask() {\n    -                @Override\n    -                public void run() { \n    -                    LOG.info(\"Reconnect ... [{}] to {}\", tried_count, remote_addr);\n    -                    bootstrap.connect(remote_addr);\n    -                }}, sleep);\n    -        } else {\n    -            LOG.warn(remote_addr+\" is not reachable. We will close this client.\");\n    -            close();\n    +    private synchronized void connect() {\n    --- End diff --\n    \n    I don't like the idea of having connect block until the connection is established.  Any thread that tries to send data to a connection that is still being established will block until the connection is established. I think it is more robust to buffer the messages in a data structure and try to handle them later when the connection is finished.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-05-19T19:53:07.982+0000","updated":"2014-05-19T19:53:07.982+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/14002264","id":"14002264","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user revans2 commented on a diff in the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#discussion_r12812919\n  \n    --- Diff: storm-core/src/jvm/backtype/storm/messaging/netty/Client.java ---\n    @@ -128,133 +181,105 @@ private long getSleepTimeMs()\n         }\n     \n         /**\n    -     * Enqueue a task message to be sent to server\n    +     * Enqueue task messages to be sent to server\n          */\n    -    public void send(int task, byte[] message) {\n    -        //throw exception if the client is being closed\n    -        if (being_closed.get()) {\n    +    synchronized public void send(Iterator<TaskMessage> msgs) {\n    +\n    +        // throw exception if the client is being closed\n    +        if (closing) {\n                 throw new RuntimeException(\"Client is being closed, and does not take requests any more\");\n             }\n    -\n    -        try {\n    -            message_queue.put(new TaskMessage(task, message));\n    -\n    -            //resume delivery if it is waiting for requests\n    -            tryDeliverMessages(true);\n    -        } catch (InterruptedException e) {\n    -            throw new RuntimeException(e);\n    +        \n    +        if (null == msgs || !msgs.hasNext()) {\n    +            return;\n             }\n    -    }\n     \n    -    /**\n    -     * Retrieve messages from queue, and delivery to server if any\n    -     */\n    -    synchronized void tryDeliverMessages(boolean only_if_waiting) throws InterruptedException {\n    -        //just skip if delivery only if waiting, and we are not waiting currently\n    -        if (only_if_waiting && !wait_for_requests)  return;\n    -\n    -        //make sure that channel was not closed\n             Channel channel = channelRef.get();\n    -        if (channel == null)  return;\n    -        if (!channel.isOpen()) {\n    -            LOG.info(\"Channel to {} is no longer open.\",remote_addr);\n    -            //The channel is not open yet. Reconnect?\n    -            reconnect();\n    -            return;\n    +        if (null == channel) {\n    +            connect();\n    +            channel = channelRef.get();\n             }\n     \n    -        final MessageBatch requests = tryTakeMessages();\n    -        if (requests==null) {\n    -            wait_for_requests = true;\n    -            return;\n    -        }\n    +        while (msgs.hasNext()) {\n    +            TaskMessage message = msgs.next();\n    +            if (null == messageBatch) {\n    +                messageBatch = new MessageBatch(messageBatchSize);\n    +            }\n     \n    -        //if channel is being closed and we have no outstanding messages,  let's close the channel\n    -        if (requests.isEmpty() && being_closed.get()) {\n    -            close_n_release();\n    -            return;\n    +            messageBatch.add(message);\n    +            if (messageBatch.isFull()) {\n    +                MessageBatch toBeFlushed = messageBatch;\n    +                flushRequest(channel, toBeFlushed, blocking);\n    +                messageBatch = null;\n    +            }\n             }\n     \n    -        //we are busily delivering messages, and will check queue upon response.\n    -        //When send() is called by senders, we should not thus call tryDeliverMessages().\n    -        wait_for_requests = false;\n    -\n    -        //write request into socket channel\n    -        ChannelFuture future = channel.write(requests);\n    -        future.addListener(new ChannelFutureListener() {\n    -            public void operationComplete(ChannelFuture future)\n    -                    throws Exception {\n    -                if (!future.isSuccess()) {\n    -                    LOG.info(\"failed to send \"+requests.size()+\" requests to \"+remote_addr, future.getCause());\n    -                    reconnect();\n    -                } else {\n    -                    LOG.debug(\"{} request(s) sent\", requests.size());\n    -\n    -                    //Now that our requests have been sent, channel could be closed if needed\n    -                    if (being_closed.get())\n    -                        close_n_release();\n    -                }\n    +        if (null != messageBatch && !messageBatch.isEmpty()) {\n    +            if (channel.isWritable()) {\n    +                flushCheckTimer.set(Long.MAX_VALUE);\n    +                \n    +                // Flush as fast as we can to reduce the latency\n    +                MessageBatch toBeFlushed = messageBatch;\n    +                messageBatch = null;\n    +                flushRequest(channel, toBeFlushed, blocking);\n    +                \n    +            } else {\n    +                // when channel is NOT writable, it means the internal netty buffer is full. \n    +                // In this case, we can try to buffer up more incoming messages.\n    +                flushCheckTimer.set(System.currentTimeMillis() + flushCheckInterval);\n                 }\n    -        });\n    +        }\n    +\n         }\n     \n    -    /**\n    -     * Take all enqueued messages from queue\n    -     * @return  batch of messages\n    -     * @throws InterruptedException\n    -     *\n    -     * synchronized ... ensure that messages are delivered in the same order\n    -     * as they are added into queue\n    -     */\n    -    private MessageBatch tryTakeMessages() throws InterruptedException {\n    -        //1st message\n    -        Object msg = message_queue.poll();\n    -        if (msg == null) return null;\n    -\n    -        MessageBatch batch = new MessageBatch(buffer_size);\n    -        //we will discard any message after CLOSE\n    -        if (msg == ControlMessage.CLOSE_MESSAGE) {\n    -            LOG.info(\"Connection to {} is being closed\", remote_addr);\n    -            being_closed.set(true);\n    -            return batch;\n    +    public String name() {\n    +        if (null != remote_addr) {\n    +            return PREFIX + remote_addr.toString();\n             }\n    +        return \"\";\n    +    }\n     \n    -        batch.add((TaskMessage)msg);\n    -        while (!batch.isFull() && ((msg = message_queue.peek())!=null)) {\n    -            //Is it a CLOSE message?\n    -            if (msg == ControlMessage.CLOSE_MESSAGE) {\n    -                message_queue.take();\n    -                LOG.info(\"Connection to {} is being closed\", remote_addr);\n    -                being_closed.set(true);\n    -                break;\n    +    private synchronized void flush() {\n    +        if (!closing) {\n    +            if (null != messageBatch && !messageBatch.isEmpty()) {\n    +                MessageBatch toBeFlushed = messageBatch;\n    +                Channel channel = channelRef.get();\n    +                if (channel != null) {\n    +                    flushCheckTimer.set(Long.MAX_VALUE);\n    +                    flushRequest(channel, toBeFlushed, true);\n    +                }\n    +                messageBatch = null;\n    --- End diff --\n    \n    If Channel is null do we really want to drop the messageBatch?\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-05-19T19:56:30.543+0000","updated":"2014-05-19T19:56:30.543+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/14002273","id":"14002273","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user revans2 commented on a diff in the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#discussion_r12813204\n  \n    --- Diff: storm-core/src/jvm/backtype/storm/messaging/netty/Client.java ---\n    @@ -128,133 +181,105 @@ private long getSleepTimeMs()\n         }\n     \n         /**\n    -     * Enqueue a task message to be sent to server\n    +     * Enqueue task messages to be sent to server\n          */\n    -    public void send(int task, byte[] message) {\n    -        //throw exception if the client is being closed\n    -        if (being_closed.get()) {\n    +    synchronized public void send(Iterator<TaskMessage> msgs) {\n    +\n    +        // throw exception if the client is being closed\n    +        if (closing) {\n                 throw new RuntimeException(\"Client is being closed, and does not take requests any more\");\n             }\n    -\n    -        try {\n    -            message_queue.put(new TaskMessage(task, message));\n    -\n    -            //resume delivery if it is waiting for requests\n    -            tryDeliverMessages(true);\n    -        } catch (InterruptedException e) {\n    -            throw new RuntimeException(e);\n    +        \n    +        if (null == msgs || !msgs.hasNext()) {\n    +            return;\n             }\n    -    }\n     \n    -    /**\n    -     * Retrieve messages from queue, and delivery to server if any\n    -     */\n    -    synchronized void tryDeliverMessages(boolean only_if_waiting) throws InterruptedException {\n    -        //just skip if delivery only if waiting, and we are not waiting currently\n    -        if (only_if_waiting && !wait_for_requests)  return;\n    -\n    -        //make sure that channel was not closed\n             Channel channel = channelRef.get();\n    -        if (channel == null)  return;\n    -        if (!channel.isOpen()) {\n    -            LOG.info(\"Channel to {} is no longer open.\",remote_addr);\n    -            //The channel is not open yet. Reconnect?\n    -            reconnect();\n    -            return;\n    +        if (null == channel) {\n    +            connect();\n    +            channel = channelRef.get();\n             }\n     \n    -        final MessageBatch requests = tryTakeMessages();\n    -        if (requests==null) {\n    -            wait_for_requests = true;\n    -            return;\n    -        }\n    +        while (msgs.hasNext()) {\n    +            TaskMessage message = msgs.next();\n    +            if (null == messageBatch) {\n    +                messageBatch = new MessageBatch(messageBatchSize);\n    +            }\n     \n    -        //if channel is being closed and we have no outstanding messages,  let's close the channel\n    -        if (requests.isEmpty() && being_closed.get()) {\n    -            close_n_release();\n    -            return;\n    +            messageBatch.add(message);\n    +            if (messageBatch.isFull()) {\n    +                MessageBatch toBeFlushed = messageBatch;\n    +                flushRequest(channel, toBeFlushed, blocking);\n    +                messageBatch = null;\n    +            }\n             }\n     \n    -        //we are busily delivering messages, and will check queue upon response.\n    -        //When send() is called by senders, we should not thus call tryDeliverMessages().\n    -        wait_for_requests = false;\n    -\n    -        //write request into socket channel\n    -        ChannelFuture future = channel.write(requests);\n    -        future.addListener(new ChannelFutureListener() {\n    -            public void operationComplete(ChannelFuture future)\n    -                    throws Exception {\n    -                if (!future.isSuccess()) {\n    -                    LOG.info(\"failed to send \"+requests.size()+\" requests to \"+remote_addr, future.getCause());\n    -                    reconnect();\n    -                } else {\n    -                    LOG.debug(\"{} request(s) sent\", requests.size());\n    -\n    -                    //Now that our requests have been sent, channel could be closed if needed\n    -                    if (being_closed.get())\n    -                        close_n_release();\n    -                }\n    +        if (null != messageBatch && !messageBatch.isEmpty()) {\n    +            if (channel.isWritable()) {\n    +                flushCheckTimer.set(Long.MAX_VALUE);\n    +                \n    +                // Flush as fast as we can to reduce the latency\n    +                MessageBatch toBeFlushed = messageBatch;\n    +                messageBatch = null;\n    +                flushRequest(channel, toBeFlushed, blocking);\n    +                \n    +            } else {\n    +                // when channel is NOT writable, it means the internal netty buffer is full. \n    +                // In this case, we can try to buffer up more incoming messages.\n    +                flushCheckTimer.set(System.currentTimeMillis() + flushCheckInterval);\n                 }\n    -        });\n    +        }\n    +\n         }\n     \n    -    /**\n    -     * Take all enqueued messages from queue\n    -     * @return  batch of messages\n    -     * @throws InterruptedException\n    -     *\n    -     * synchronized ... ensure that messages are delivered in the same order\n    -     * as they are added into queue\n    -     */\n    -    private MessageBatch tryTakeMessages() throws InterruptedException {\n    -        //1st message\n    -        Object msg = message_queue.poll();\n    -        if (msg == null) return null;\n    -\n    -        MessageBatch batch = new MessageBatch(buffer_size);\n    -        //we will discard any message after CLOSE\n    -        if (msg == ControlMessage.CLOSE_MESSAGE) {\n    -            LOG.info(\"Connection to {} is being closed\", remote_addr);\n    -            being_closed.set(true);\n    -            return batch;\n    +    public String name() {\n    +        if (null != remote_addr) {\n    +            return PREFIX + remote_addr.toString();\n             }\n    +        return \"\";\n    +    }\n     \n    -        batch.add((TaskMessage)msg);\n    -        while (!batch.isFull() && ((msg = message_queue.peek())!=null)) {\n    -            //Is it a CLOSE message?\n    -            if (msg == ControlMessage.CLOSE_MESSAGE) {\n    -                message_queue.take();\n    -                LOG.info(\"Connection to {} is being closed\", remote_addr);\n    -                being_closed.set(true);\n    -                break;\n    +    private synchronized void flush() {\n    +        if (!closing) {\n    +            if (null != messageBatch && !messageBatch.isEmpty()) {\n    +                MessageBatch toBeFlushed = messageBatch;\n    +                Channel channel = channelRef.get();\n    +                if (channel != null) {\n    +                    flushCheckTimer.set(Long.MAX_VALUE);\n    +                    flushRequest(channel, toBeFlushed, true);\n    +                }\n    +                messageBatch = null;\n                 }\n    -\n    -            //try to add this msg into batch\n    -            if (!batch.tryAdd((TaskMessage) msg))\n    -                break;\n    -\n    -            //remove this message\n    -            message_queue.take();\n             }\n    -\n    -        return batch;\n         }\n    -\n    +    \n         /**\n          * gracefully close this client.\n    -     *\n    -     * We will send all existing requests, and then invoke close_n_release() method\n    +     * \n    +     * We will send all existing requests, and then invoke close_n_release()\n    +     * method\n          */\n    -    public void close() {\n    -        //enqueue a CLOSE message so that shutdown() will be invoked\n    -        try {\n    -            message_queue.put(ControlMessage.CLOSE_MESSAGE);\n    -\n    -            //resume delivery if it is waiting for requests\n    -            tryDeliverMessages(true);\n    -        } catch (InterruptedException e) {\n    -            LOG.info(\"Interrupted Connection to {} is being closed\", remote_addr);\n    -            being_closed.set(true);\n    +    public synchronized void close() {\n    +        if (!closing) {\n    +            closing = true;\n    +            if (null != messageBatch && !messageBatch.isEmpty()) {\n    +                MessageBatch toBeFlushed = messageBatch;\n    +                Channel channel = channelRef.get();\n    +                if (channel != null) {\n    +                    flushRequest(channel, toBeFlushed, true);\n    +                }\n    +                messageBatch = null;\n    +            }\n    +        \n    +            //wait for pendings to exit\n    +            while(pendings.get() != 0) {\n    --- End diff --\n    \n    Can we have a max number of iterations on this? I just feel it is more defensive to try for a while, and then if it does not work out log the message and go on.  After all the worst thing that happens with leaving early is that some messages may not have been acked, which we more or less ignore anyways.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-05-19T20:02:41.966+0000","updated":"2014-05-19T20:02:41.966+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/14002287","id":"14002287","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user revans2 commented on a diff in the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#discussion_r12813461\n  \n    --- Diff: storm-core/src/jvm/backtype/storm/messaging/netty/Server.java ---\n    @@ -31,35 +31,69 @@\n     import org.slf4j.LoggerFactory;\n     \n     import java.net.InetSocketAddress;\n    +import java.util.ArrayList;\n    +import java.util.Arrays;\n    +import java.util.HashMap;\n    +import java.util.Iterator;\n    +import java.util.List;\n     import java.util.Map;\n     import java.util.concurrent.Executors;\n     import java.util.concurrent.LinkedBlockingQueue;\n    +import java.util.concurrent.ThreadFactory;\n     \n     class Server implements IConnection {\n         private static final Logger LOG = LoggerFactory.getLogger(Server.class);\n         @SuppressWarnings(\"rawtypes\")\n         Map storm_conf;\n         int port;\n    -    private LinkedBlockingQueue<TaskMessage> message_queue;\n    +    \n    +    // Create multiple queues for incoming messages. The size equals the number of receiver threads.\n    +    // For message which is sent to same task, it will be stored in the same queue to preserve the message order.\n    +    private LinkedBlockingQueue<ArrayList<TaskMessage>>[] message_queue;\n    +    \n         volatile ChannelGroup allChannels = new DefaultChannelGroup(\"storm-server\");\n         final ChannelFactory factory;\n         final ServerBootstrap bootstrap;\n    -\n    +    \n    +    private int queueCount;\n    +    HashMap<Integer, Integer> taskToQueueId = null;\n    +    int roundRobinQueueId;\n    +\t\n    +    boolean closing = false;\n    +    List<TaskMessage> closeMessage = Arrays.asList(new TaskMessage(-1, null));\n    +    \n    +    \n         @SuppressWarnings(\"rawtypes\")\n         Server(Map storm_conf, int port) {\n             this.storm_conf = storm_conf;\n             this.port = port;\n    -        message_queue = new LinkedBlockingQueue<TaskMessage>();\n    -\n    +        \n    +        queueCount = Utils.getInt(storm_conf.get(\"worker.receiver.thread.count\"), 1);\n    --- End diff --\n    \n    This should be a part of Config.java.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-05-19T20:08:16.135+0000","updated":"2014-05-19T20:08:16.135+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/14002288","id":"14002288","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user revans2 commented on a diff in the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#discussion_r12813477\n  \n    --- Diff: storm-core/src/jvm/backtype/storm/messaging/netty/Server.java ---\n    @@ -31,35 +31,69 @@\n     import org.slf4j.LoggerFactory;\n     \n     import java.net.InetSocketAddress;\n    +import java.util.ArrayList;\n    +import java.util.Arrays;\n    +import java.util.HashMap;\n    +import java.util.Iterator;\n    +import java.util.List;\n     import java.util.Map;\n     import java.util.concurrent.Executors;\n     import java.util.concurrent.LinkedBlockingQueue;\n    +import java.util.concurrent.ThreadFactory;\n     \n     class Server implements IConnection {\n         private static final Logger LOG = LoggerFactory.getLogger(Server.class);\n         @SuppressWarnings(\"rawtypes\")\n         Map storm_conf;\n         int port;\n    -    private LinkedBlockingQueue<TaskMessage> message_queue;\n    +    \n    +    // Create multiple queues for incoming messages. The size equals the number of receiver threads.\n    +    // For message which is sent to same task, it will be stored in the same queue to preserve the message order.\n    +    private LinkedBlockingQueue<ArrayList<TaskMessage>>[] message_queue;\n    +    \n         volatile ChannelGroup allChannels = new DefaultChannelGroup(\"storm-server\");\n         final ChannelFactory factory;\n         final ServerBootstrap bootstrap;\n    -\n    +    \n    +    private int queueCount;\n    +    HashMap<Integer, Integer> taskToQueueId = null;\n    +    int roundRobinQueueId;\n    +\t\n    +    boolean closing = false;\n    +    List<TaskMessage> closeMessage = Arrays.asList(new TaskMessage(-1, null));\n    +    \n    +    \n         @SuppressWarnings(\"rawtypes\")\n         Server(Map storm_conf, int port) {\n             this.storm_conf = storm_conf;\n             this.port = port;\n    -        message_queue = new LinkedBlockingQueue<TaskMessage>();\n    -\n    +        \n    +        queueCount = Utils.getInt(storm_conf.get(\"worker.receiver.thread.count\"), 1);\n    +        roundRobinQueueId = 0;\n    +        taskToQueueId = new HashMap<Integer, Integer>();\n    +    \n    +        message_queue = new LinkedBlockingQueue[queueCount];\n    +\t\t    for (int i = 0; i < queueCount; i++) {\n    --- End diff --\n    \n    Indentation looks off here.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-05-19T20:08:34.499+0000","updated":"2014-05-19T20:08:34.499+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/14002297","id":"14002297","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user revans2 commented on a diff in the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#discussion_r12813684\n  \n    --- Diff: storm-core/src/jvm/backtype/storm/messaging/netty/Server.java ---\n    @@ -72,34 +106,109 @@\n             Channel channel = bootstrap.bind(new InetSocketAddress(port));\n             allChannels.add(channel);\n         }\n    +    \n    +    private ArrayList<TaskMessage>[] groupMessages(List<TaskMessage> msgs) {\n    +      ArrayList<TaskMessage> messageGroups[] = new ArrayList[queueCount];\n    +      \n    +      for (int i = 0; i < msgs.size(); i++) {\n    +        TaskMessage message = msgs.get(i);\n    +        int task = message.task();\n    +        \n    +        if (task == -1) {\n    +          closing = true;\n    +          return null;\n    +        }\n    +        \n    +        Integer queueId = getMessageQueueId(task);\n    +        \n    +        if (null == messageGroups[queueId]) {\n    +          messageGroups[queueId] = new ArrayList<TaskMessage>();\n    +        }\n    +        messageGroups[queueId].add(message);\n    +      }\n    +      return messageGroups;\n    +    }\n    +    \n    +    private Integer getMessageQueueId(int task) {\n    +      // try to construct the map from taskId -> queueId in round robin manner.\n    +      \n    +      Integer queueId = taskToQueueId.get(task);\n    +      if (null == queueId) {\n    +        synchronized(taskToQueueId) {\n    +          //assgin task to queue in round-robin manner\n    +          if (null == taskToQueueId.get(task)) {\n    +            queueId = roundRobinQueueId++;\n    +            \n    +            taskToQueueId.put(task, queueId);\n    +            if (roundRobinQueueId == queueCount) {\n    +              roundRobinQueueId = 0;\n    +            }\n    +          }\n    +        }\n    +      }\n    +      return queueId;\n    +    }\n     \n         /**\n          * enqueue a received message \n          * @param message\n          * @throws InterruptedException\n          */\n    -    protected void enqueue(TaskMessage message) throws InterruptedException {\n    -        message_queue.put(message);\n    -        LOG.debug(\"message received with task: {}, payload size: {}\", message.task(), message.message().length);\n    -    }\n    +    protected void enqueue(List<TaskMessage> msgs) throws InterruptedException {\n    +      \n    +      if (null == msgs || msgs.size() == 0 || closing) {\n    +        return;\n    +      }\n    +      \n    +      ArrayList<TaskMessage> messageGroups[] = groupMessages(msgs);\n    +      \n    +      if (null == messageGroups || closing) {\n    +        return;\n    +      }\n    +      \n    +      for (int receiverId = 0; receiverId < messageGroups.length; receiverId++) {\n    +        ArrayList<TaskMessage> msgGroup = messageGroups[receiverId];\n    +        if (null != msgGroup) {\n    +          message_queue[receiverId].put(msgGroup);\n    +        }\n    +      }\n    +   }\n         \n         /**\n          * fetch a message from message queue synchronously (flags != 1) or asynchronously (flags==1)\n          */\n    -    public TaskMessage recv(int flags)  {\n    -        if ((flags & 0x01) == 0x01) { \n    +    public Iterator<TaskMessage> recv(int flags)  {\n    --- End diff --\n    \n    Is there a reason we still have this API here? it seems like we don't actually want anyone to call this code.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-05-19T20:12:18.260+0000","updated":"2014-05-19T20:12:18.260+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/14002300","id":"14002300","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user revans2 commented on a diff in the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#discussion_r12813729\n  \n    --- Diff: storm-core/src/jvm/backtype/storm/messaging/netty/Server.java ---\n    @@ -133,4 +242,12 @@ public synchronized void close() {\n         public void send(int task, byte[] message) {\n             throw new RuntimeException(\"Server connection should not send any messages\");\n         }\n    +    \n    +    public void send(Iterator<TaskMessage> msgs) {\n    +      throw new RuntimeException(\"Server connection should not send any messages\");\n    +    }\n    +\t\n    +\t public String name() {\n    --- End diff --\n    \n    Indentation appears to be off here.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-05-19T20:13:09.615+0000","updated":"2014-05-19T20:13:09.615+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/14002308","id":"14002308","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user revans2 commented on a diff in the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#discussion_r12813817\n  \n    --- Diff: storm-core/src/jvm/backtype/storm/messaging/netty/StormClientHandler.java ---\n    @@ -18,70 +18,24 @@\n     package backtype.storm.messaging.netty;\n     \n     import java.net.ConnectException;\n    -import java.util.concurrent.atomic.AtomicBoolean;\n     \n    -import org.jboss.netty.channel.Channel;\n    -import org.jboss.netty.channel.ChannelHandlerContext;\n    -import org.jboss.netty.channel.ChannelStateEvent;\n    -import org.jboss.netty.channel.ExceptionEvent;\n    -import org.jboss.netty.channel.MessageEvent;\n    -import org.jboss.netty.channel.SimpleChannelUpstreamHandler;\n    +import org.jboss.netty.channel.*;\n     import org.slf4j.Logger;\n     import org.slf4j.LoggerFactory;\n     \n    -import java.net.ConnectException;\n    -import java.util.concurrent.atomic.AtomicBoolean;\n    -\n     public class StormClientHandler extends SimpleChannelUpstreamHandler  {\n         private static final Logger LOG = LoggerFactory.getLogger(StormClientHandler.class);\n         private Client client;\n    -    long start_time;\n         \n         StormClientHandler(Client client) {\n    --- End diff --\n    \n    If all this code does now is log error messages can we drop the Client from the constructor and rename it to something that describes what it does better?\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-05-19T20:15:09.869+0000","updated":"2014-05-19T20:15:09.869+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/14002311","id":"14002311","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user revans2 commented on a diff in the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#discussion_r12813854\n  \n    --- Diff: storm-core/src/jvm/backtype/storm/messaging/netty/StormServerHandler.java ---\n    @@ -41,30 +45,22 @@ public void channelConnected(ChannelHandlerContext ctx, ChannelStateEvent e) {\n         \n         @Override\n         public void messageReceived(ChannelHandlerContext ctx, MessageEvent e) {\n    -        Object msg = e.getMessage();  \n    -        if (msg == null) return;\n    -\n    -        //end of batch?\n    -        if (msg==ControlMessage.EOB_MESSAGE) {\n    -            Channel channel = ctx.getChannel();\n    -            LOG.debug(\"Send back response ...\");\n    -            if (failure_count.get()==0)\n    -                channel.write(ControlMessage.OK_RESPONSE);\n    -            else channel.write(ControlMessage.FAILURE_RESPONSE);\n    -            return;\n    -        }\n    -        \n    -        //enqueue the received message for processing\n    -        try {\n    -            server.enqueue((TaskMessage)msg);\n    -        } catch (InterruptedException e1) {\n    -            LOG.info(\"failed to enqueue a request message\", e);\n    -            failure_count.incrementAndGet();\n    -        }\n    +      List<TaskMessage> msgs = (List<TaskMessage>) e.getMessage();\n    +      if (msgs == null) {\n    +        return;\n    +      }\n    +      \n    +      try {\n    +        server.enqueue(msgs);\n    +      } catch (InterruptedException e1) {\n    +        LOG.info(\"failed to enqueue a request message\", e);\n    +        failure_count.incrementAndGet();\n    +      }\n         }\n     \n         @Override\n         public void exceptionCaught(ChannelHandlerContext ctx, ExceptionEvent e) {\n    +        e.getCause().printStackTrace();\n    --- End diff --\n    \n    Can we log this properly instead of just printing the stack trace to stderr?\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-05-19T20:15:57.344+0000","updated":"2014-05-19T20:15:57.344+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/14002324","id":"14002324","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user revans2 commented on a diff in the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#discussion_r12814221\n  \n    --- Diff: storm-core/src/jvm/backtype/storm/utils/Utils.java ---\n    @@ -301,15 +303,39 @@ public static ComponentCommon getComponentCommon(StormTopology topology, String\n         }\n         \n         public static Integer getInt(Object o) {\n    -        if(o instanceof Long) {\n    -            return ((Long) o ).intValue();\n    -        } else if (o instanceof Integer) {\n    -            return (Integer) o;\n    -        } else if (o instanceof Short) {\n    -            return ((Short) o).intValue();\n    -        } else {\n    -            throw new IllegalArgumentException(\"Don't know how to convert \" + o + \" + to int\");\n    -        }\n    +      Integer result = getInt(o, null);\n    +      if (null == result) {\n    +        throw new IllegalArgumentException(\"Don't know how to convert null + to int\");\n    +      }\n    +      return result;\n    +    }\n    +    \n    +    public static Integer getInt(Object o, Integer defaultValue) {\n    +      if (null == o) {\n    +        return defaultValue;\n    +      }\n    +      \n    +      if(o instanceof Long) {\n    --- End diff --\n    \n    Why?  If I type in 3.5 for an integer config and I get a 3 out of it, is it a problem?  If so then we need to change Config.java to not just expect a Number for these things, but instead have a proper checker that knows this should be an Integer, and checks ranges etc.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-05-19T20:22:47.637+0000","updated":"2014-05-19T20:22:47.637+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/14002330","id":"14002330","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user revans2 commented on the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#issuecomment-43553213\n  \n    I did a quick pass through the code.  I have some concerns about the blocking nature of a number of the calls, especially connect.  This just feels like it is going to make the worker block until all other workers are up and the connections have been established.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-05-19T20:25:05.968+0000","updated":"2014-05-19T20:25:05.968+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/14002738","id":"14002738","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user clockfly commented on a diff in the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#discussion_r12826580\n  \n    --- Diff: storm-core/src/jvm/backtype/storm/utils/Utils.java ---\n    @@ -301,15 +303,39 @@ public static ComponentCommon getComponentCommon(StormTopology topology, String\n         }\n         \n         public static Integer getInt(Object o) {\n    -        if(o instanceof Long) {\n    -            return ((Long) o ).intValue();\n    -        } else if (o instanceof Integer) {\n    -            return (Integer) o;\n    -        } else if (o instanceof Short) {\n    -            return ((Short) o).intValue();\n    -        } else {\n    -            throw new IllegalArgumentException(\"Don't know how to convert \" + o + \" + to int\");\n    -        }\n    +      Integer result = getInt(o, null);\n    +      if (null == result) {\n    +        throw new IllegalArgumentException(\"Don't know how to convert null + to int\");\n    +      }\n    +      return result;\n    +    }\n    +    \n    +    public static Integer getInt(Object o, Integer defaultValue) {\n    +      if (null == o) {\n    +        return defaultValue;\n    +      }\n    +      \n    +      if(o instanceof Long) {\n    --- End diff --\n    \n    We are consistent with old behavior.\n    If a config expect a integer, then short, int, long are valid; double, float are invalid.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-05-20T03:17:10.853+0000","updated":"2014-05-20T03:17:10.853+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/14002765","id":"14002765","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user clockfly commented on a diff in the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#discussion_r12827274\n  \n    --- Diff: storm-core/src/clj/backtype/storm/disruptor.clj ---\n    @@ -89,7 +90,7 @@\n                     (consume-batch-when-available queue handler)\n                     0 )\n                   :kill-fn kill-fn\n    -              :thread-name thread-name\n    +              :thread-name (.getName queue)\n    --- End diff --\n    \n    fixed with your suggestion, thanks\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-05-20T04:08:39.388+0000","updated":"2014-05-20T04:08:39.388+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/14002767","id":"14002767","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user clockfly commented on a diff in the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#discussion_r12827309\n  \n    --- Diff: conf/defaults.yaml ---\n    @@ -109,6 +112,15 @@ storm.messaging.netty.max_retries: 30\n     storm.messaging.netty.max_wait_ms: 1000\n     storm.messaging.netty.min_wait_ms: 100\n     \n    +# If the Netty messaging layer is busy(netty internal buffer not writable), the Netty client will try to batch message as more as possible up to the size of storm.messaging.netty.transfer.batch.size bytes, otherwise it will try to flush message as soon as possible to reduce latency.\n    +storm.messaging.netty.transfer.batch.size: 262144\n    +\n    +# If storm.messaging.netty.blocking is set to true, the Netty Client will send messages in synchronized way, otherwise it will do it in async way. Set storm.messaging.netty.blocking to false to improve the latency and throughput.\n    --- End diff --\n    \n    fixed\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-05-20T04:11:17.428+0000","updated":"2014-05-20T04:11:17.428+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/14002768","id":"14002768","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user clockfly commented on a diff in the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#discussion_r12827316\n  \n    --- Diff: storm-core/src/clj/backtype/storm/disruptor.clj ---\n    @@ -89,7 +90,7 @@\n                     (consume-batch-when-available queue handler)\n                     0 )\n                   :kill-fn kill-fn\n    -              :thread-name thread-name\n    +              :thread-name (.getName queue)\n    --- End diff --\n    \n    fixed\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-05-20T04:11:31.829+0000","updated":"2014-05-20T04:11:31.829+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/14002769","id":"14002769","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user clockfly commented on a diff in the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#discussion_r12827318\n  \n    --- Diff: storm-core/src/jvm/backtype/storm/messaging/netty/Client.java ---\n    @@ -21,52 +21,53 @@\n     import backtype.storm.messaging.IConnection;\n     import backtype.storm.messaging.TaskMessage;\n     import backtype.storm.utils.Utils;\n    -\n     import org.jboss.netty.bootstrap.ClientBootstrap;\n     import org.jboss.netty.channel.Channel;\n     import org.jboss.netty.channel.ChannelFactory;\n    -import org.jboss.netty.channel.socket.nio.NioClientSocketChannelFactory;\n     import org.jboss.netty.channel.ChannelFuture;\n     import org.jboss.netty.channel.ChannelFutureListener;\n     import org.slf4j.Logger;\n     import org.slf4j.LoggerFactory;\n    -\n     import java.net.InetSocketAddress;\n    +import java.util.ArrayList;\n    +import java.util.Iterator;\n    +import java.util.List;\n     import java.util.Map;\n    -import java.util.Timer;\n    -import java.util.TimerTask;\n     import java.util.Random;\n    -import java.util.concurrent.LinkedBlockingQueue;\n    -import java.util.concurrent.atomic.AtomicBoolean;\n    -import java.util.concurrent.atomic.AtomicInteger;\n    +import java.util.concurrent.atomic.AtomicLong;\n     import java.util.concurrent.atomic.AtomicReference;\n     \n    -class Client implements IConnection {\n    +public class Client implements IConnection {\n         private static final Logger LOG = LoggerFactory.getLogger(Client.class);\n    -    private static final Timer TIMER = new Timer(\"netty-client-timer\", true);\n    -\n    +    private static final String PREFIX = \"Netty-Client-\";\n         private final int max_retries;\n         private final long base_sleep_ms;\n         private final long max_sleep_ms;\n    -    private LinkedBlockingQueue<Object> message_queue; //entry should either be TaskMessage or ControlMessage\n         private AtomicReference<Channel> channelRef;\n         private final ClientBootstrap bootstrap;\n    -    InetSocketAddress remote_addr;\n    -    private AtomicInteger retries;\n    +    private InetSocketAddress remote_addr;\n    +    \n         private final Random random = new Random();\n         private final ChannelFactory factory;\n         private final int buffer_size;\n    -    private final AtomicBoolean being_closed;\n    -    private boolean wait_for_requests;\n    +    private boolean closing;\n    +\n    +    private Integer messageBatchSize;\n    +    private Boolean blocking = false;\n    --- End diff --\n    \n    fixed\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-05-20T04:11:38.722+0000","updated":"2014-05-20T04:11:38.722+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/14002770","id":"14002770","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user clockfly commented on a diff in the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#discussion_r12827323\n  \n    --- Diff: storm-core/src/jvm/backtype/storm/messaging/netty/Client.java ---\n    @@ -128,133 +181,105 @@ private long getSleepTimeMs()\n         }\n     \n         /**\n    -     * Enqueue a task message to be sent to server\n    +     * Enqueue task messages to be sent to server\n          */\n    -    public void send(int task, byte[] message) {\n    -        //throw exception if the client is being closed\n    -        if (being_closed.get()) {\n    +    synchronized public void send(Iterator<TaskMessage> msgs) {\n    +\n    +        // throw exception if the client is being closed\n    +        if (closing) {\n                 throw new RuntimeException(\"Client is being closed, and does not take requests any more\");\n             }\n    -\n    -        try {\n    -            message_queue.put(new TaskMessage(task, message));\n    -\n    -            //resume delivery if it is waiting for requests\n    -            tryDeliverMessages(true);\n    -        } catch (InterruptedException e) {\n    -            throw new RuntimeException(e);\n    +        \n    +        if (null == msgs || !msgs.hasNext()) {\n    +            return;\n             }\n    -    }\n     \n    -    /**\n    -     * Retrieve messages from queue, and delivery to server if any\n    -     */\n    -    synchronized void tryDeliverMessages(boolean only_if_waiting) throws InterruptedException {\n    -        //just skip if delivery only if waiting, and we are not waiting currently\n    -        if (only_if_waiting && !wait_for_requests)  return;\n    -\n    -        //make sure that channel was not closed\n             Channel channel = channelRef.get();\n    -        if (channel == null)  return;\n    -        if (!channel.isOpen()) {\n    -            LOG.info(\"Channel to {} is no longer open.\",remote_addr);\n    -            //The channel is not open yet. Reconnect?\n    -            reconnect();\n    -            return;\n    +        if (null == channel) {\n    +            connect();\n    +            channel = channelRef.get();\n             }\n     \n    -        final MessageBatch requests = tryTakeMessages();\n    -        if (requests==null) {\n    -            wait_for_requests = true;\n    -            return;\n    -        }\n    +        while (msgs.hasNext()) {\n    +            TaskMessage message = msgs.next();\n    +            if (null == messageBatch) {\n    +                messageBatch = new MessageBatch(messageBatchSize);\n    +            }\n     \n    -        //if channel is being closed and we have no outstanding messages,  let's close the channel\n    -        if (requests.isEmpty() && being_closed.get()) {\n    -            close_n_release();\n    -            return;\n    +            messageBatch.add(message);\n    +            if (messageBatch.isFull()) {\n    +                MessageBatch toBeFlushed = messageBatch;\n    +                flushRequest(channel, toBeFlushed, blocking);\n    +                messageBatch = null;\n    +            }\n             }\n     \n    -        //we are busily delivering messages, and will check queue upon response.\n    -        //When send() is called by senders, we should not thus call tryDeliverMessages().\n    -        wait_for_requests = false;\n    -\n    -        //write request into socket channel\n    -        ChannelFuture future = channel.write(requests);\n    -        future.addListener(new ChannelFutureListener() {\n    -            public void operationComplete(ChannelFuture future)\n    -                    throws Exception {\n    -                if (!future.isSuccess()) {\n    -                    LOG.info(\"failed to send \"+requests.size()+\" requests to \"+remote_addr, future.getCause());\n    -                    reconnect();\n    -                } else {\n    -                    LOG.debug(\"{} request(s) sent\", requests.size());\n    -\n    -                    //Now that our requests have been sent, channel could be closed if needed\n    -                    if (being_closed.get())\n    -                        close_n_release();\n    -                }\n    +        if (null != messageBatch && !messageBatch.isEmpty()) {\n    +            if (channel.isWritable()) {\n    +                flushCheckTimer.set(Long.MAX_VALUE);\n    +                \n    +                // Flush as fast as we can to reduce the latency\n    +                MessageBatch toBeFlushed = messageBatch;\n    +                messageBatch = null;\n    +                flushRequest(channel, toBeFlushed, blocking);\n    +                \n    +            } else {\n    +                // when channel is NOT writable, it means the internal netty buffer is full. \n    +                // In this case, we can try to buffer up more incoming messages.\n    +                flushCheckTimer.set(System.currentTimeMillis() + flushCheckInterval);\n                 }\n    -        });\n    +        }\n    +\n         }\n     \n    -    /**\n    -     * Take all enqueued messages from queue\n    -     * @return  batch of messages\n    -     * @throws InterruptedException\n    -     *\n    -     * synchronized ... ensure that messages are delivered in the same order\n    -     * as they are added into queue\n    -     */\n    -    private MessageBatch tryTakeMessages() throws InterruptedException {\n    -        //1st message\n    -        Object msg = message_queue.poll();\n    -        if (msg == null) return null;\n    -\n    -        MessageBatch batch = new MessageBatch(buffer_size);\n    -        //we will discard any message after CLOSE\n    -        if (msg == ControlMessage.CLOSE_MESSAGE) {\n    -            LOG.info(\"Connection to {} is being closed\", remote_addr);\n    -            being_closed.set(true);\n    -            return batch;\n    +    public String name() {\n    +        if (null != remote_addr) {\n    +            return PREFIX + remote_addr.toString();\n             }\n    +        return \"\";\n    +    }\n     \n    -        batch.add((TaskMessage)msg);\n    -        while (!batch.isFull() && ((msg = message_queue.peek())!=null)) {\n    -            //Is it a CLOSE message?\n    -            if (msg == ControlMessage.CLOSE_MESSAGE) {\n    -                message_queue.take();\n    -                LOG.info(\"Connection to {} is being closed\", remote_addr);\n    -                being_closed.set(true);\n    -                break;\n    +    private synchronized void flush() {\n    +        if (!closing) {\n    +            if (null != messageBatch && !messageBatch.isEmpty()) {\n    +                MessageBatch toBeFlushed = messageBatch;\n    +                Channel channel = channelRef.get();\n    +                if (channel != null) {\n    +                    flushCheckTimer.set(Long.MAX_VALUE);\n    +                    flushRequest(channel, toBeFlushed, true);\n    +                }\n    +                messageBatch = null;\n                 }\n    -\n    -            //try to add this msg into batch\n    -            if (!batch.tryAdd((TaskMessage) msg))\n    -                break;\n    -\n    -            //remove this message\n    -            message_queue.take();\n             }\n    -\n    -        return batch;\n         }\n    -\n    +    \n         /**\n          * gracefully close this client.\n    -     *\n    -     * We will send all existing requests, and then invoke close_n_release() method\n    +     * \n    +     * We will send all existing requests, and then invoke close_n_release()\n    +     * method\n          */\n    -    public void close() {\n    -        //enqueue a CLOSE message so that shutdown() will be invoked\n    -        try {\n    -            message_queue.put(ControlMessage.CLOSE_MESSAGE);\n    -\n    -            //resume delivery if it is waiting for requests\n    -            tryDeliverMessages(true);\n    -        } catch (InterruptedException e) {\n    -            LOG.info(\"Interrupted Connection to {} is being closed\", remote_addr);\n    -            being_closed.set(true);\n    +    public synchronized void close() {\n    +        if (!closing) {\n    +            closing = true;\n    +            if (null != messageBatch && !messageBatch.isEmpty()) {\n    +                MessageBatch toBeFlushed = messageBatch;\n    +                Channel channel = channelRef.get();\n    +                if (channel != null) {\n    +                    flushRequest(channel, toBeFlushed, true);\n    +                }\n    +                messageBatch = null;\n    +            }\n    +        \n    +            //wait for pendings to exit\n    +            while(pendings.get() != 0) {\n    --- End diff --\n    \n    fixed\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-05-20T04:12:10.104+0000","updated":"2014-05-20T04:12:10.104+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/14002771","id":"14002771","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user clockfly commented on a diff in the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#discussion_r12827325\n  \n    --- Diff: storm-core/src/jvm/backtype/storm/messaging/netty/Server.java ---\n    @@ -31,35 +31,69 @@\n     import org.slf4j.LoggerFactory;\n     \n     import java.net.InetSocketAddress;\n    +import java.util.ArrayList;\n    +import java.util.Arrays;\n    +import java.util.HashMap;\n    +import java.util.Iterator;\n    +import java.util.List;\n     import java.util.Map;\n     import java.util.concurrent.Executors;\n     import java.util.concurrent.LinkedBlockingQueue;\n    +import java.util.concurrent.ThreadFactory;\n     \n     class Server implements IConnection {\n         private static final Logger LOG = LoggerFactory.getLogger(Server.class);\n         @SuppressWarnings(\"rawtypes\")\n         Map storm_conf;\n         int port;\n    -    private LinkedBlockingQueue<TaskMessage> message_queue;\n    +    \n    +    // Create multiple queues for incoming messages. The size equals the number of receiver threads.\n    +    // For message which is sent to same task, it will be stored in the same queue to preserve the message order.\n    +    private LinkedBlockingQueue<ArrayList<TaskMessage>>[] message_queue;\n    +    \n         volatile ChannelGroup allChannels = new DefaultChannelGroup(\"storm-server\");\n         final ChannelFactory factory;\n         final ServerBootstrap bootstrap;\n    -\n    +    \n    +    private int queueCount;\n    +    HashMap<Integer, Integer> taskToQueueId = null;\n    +    int roundRobinQueueId;\n    +\t\n    +    boolean closing = false;\n    +    List<TaskMessage> closeMessage = Arrays.asList(new TaskMessage(-1, null));\n    +    \n    +    \n         @SuppressWarnings(\"rawtypes\")\n         Server(Map storm_conf, int port) {\n             this.storm_conf = storm_conf;\n             this.port = port;\n    -        message_queue = new LinkedBlockingQueue<TaskMessage>();\n    -\n    +        \n    +        queueCount = Utils.getInt(storm_conf.get(\"worker.receiver.thread.count\"), 1);\n    --- End diff --\n    \n    fixed\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-05-20T04:12:15.839+0000","updated":"2014-05-20T04:12:15.839+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/14002772","id":"14002772","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user clockfly commented on a diff in the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#discussion_r12827326\n  \n    --- Diff: storm-core/src/jvm/backtype/storm/messaging/netty/Server.java ---\n    @@ -31,35 +31,69 @@\n     import org.slf4j.LoggerFactory;\n     \n     import java.net.InetSocketAddress;\n    +import java.util.ArrayList;\n    +import java.util.Arrays;\n    +import java.util.HashMap;\n    +import java.util.Iterator;\n    +import java.util.List;\n     import java.util.Map;\n     import java.util.concurrent.Executors;\n     import java.util.concurrent.LinkedBlockingQueue;\n    +import java.util.concurrent.ThreadFactory;\n     \n     class Server implements IConnection {\n         private static final Logger LOG = LoggerFactory.getLogger(Server.class);\n         @SuppressWarnings(\"rawtypes\")\n         Map storm_conf;\n         int port;\n    -    private LinkedBlockingQueue<TaskMessage> message_queue;\n    +    \n    +    // Create multiple queues for incoming messages. The size equals the number of receiver threads.\n    +    // For message which is sent to same task, it will be stored in the same queue to preserve the message order.\n    +    private LinkedBlockingQueue<ArrayList<TaskMessage>>[] message_queue;\n    +    \n         volatile ChannelGroup allChannels = new DefaultChannelGroup(\"storm-server\");\n         final ChannelFactory factory;\n         final ServerBootstrap bootstrap;\n    -\n    +    \n    +    private int queueCount;\n    +    HashMap<Integer, Integer> taskToQueueId = null;\n    +    int roundRobinQueueId;\n    +\t\n    +    boolean closing = false;\n    +    List<TaskMessage> closeMessage = Arrays.asList(new TaskMessage(-1, null));\n    +    \n    +    \n         @SuppressWarnings(\"rawtypes\")\n         Server(Map storm_conf, int port) {\n             this.storm_conf = storm_conf;\n             this.port = port;\n    -        message_queue = new LinkedBlockingQueue<TaskMessage>();\n    -\n    +        \n    +        queueCount = Utils.getInt(storm_conf.get(\"worker.receiver.thread.count\"), 1);\n    +        roundRobinQueueId = 0;\n    +        taskToQueueId = new HashMap<Integer, Integer>();\n    +    \n    +        message_queue = new LinkedBlockingQueue[queueCount];\n    +\t\t    for (int i = 0; i < queueCount; i++) {\n    --- End diff --\n    \n    fixed\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-05-20T04:12:25.818+0000","updated":"2014-05-20T04:12:25.818+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/14002773","id":"14002773","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user clockfly commented on a diff in the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#discussion_r12827328\n  \n    --- Diff: storm-core/src/jvm/backtype/storm/messaging/netty/Server.java ---\n    @@ -72,34 +106,109 @@\n             Channel channel = bootstrap.bind(new InetSocketAddress(port));\n             allChannels.add(channel);\n         }\n    +    \n    +    private ArrayList<TaskMessage>[] groupMessages(List<TaskMessage> msgs) {\n    +      ArrayList<TaskMessage> messageGroups[] = new ArrayList[queueCount];\n    +      \n    +      for (int i = 0; i < msgs.size(); i++) {\n    +        TaskMessage message = msgs.get(i);\n    +        int task = message.task();\n    +        \n    +        if (task == -1) {\n    +          closing = true;\n    +          return null;\n    +        }\n    +        \n    +        Integer queueId = getMessageQueueId(task);\n    +        \n    +        if (null == messageGroups[queueId]) {\n    +          messageGroups[queueId] = new ArrayList<TaskMessage>();\n    +        }\n    +        messageGroups[queueId].add(message);\n    +      }\n    +      return messageGroups;\n    +    }\n    +    \n    +    private Integer getMessageQueueId(int task) {\n    +      // try to construct the map from taskId -> queueId in round robin manner.\n    +      \n    +      Integer queueId = taskToQueueId.get(task);\n    +      if (null == queueId) {\n    +        synchronized(taskToQueueId) {\n    +          //assgin task to queue in round-robin manner\n    +          if (null == taskToQueueId.get(task)) {\n    +            queueId = roundRobinQueueId++;\n    +            \n    +            taskToQueueId.put(task, queueId);\n    +            if (roundRobinQueueId == queueCount) {\n    +              roundRobinQueueId = 0;\n    +            }\n    +          }\n    +        }\n    +      }\n    +      return queueId;\n    +    }\n     \n         /**\n          * enqueue a received message \n          * @param message\n          * @throws InterruptedException\n          */\n    -    protected void enqueue(TaskMessage message) throws InterruptedException {\n    -        message_queue.put(message);\n    -        LOG.debug(\"message received with task: {}, payload size: {}\", message.task(), message.message().length);\n    -    }\n    +    protected void enqueue(List<TaskMessage> msgs) throws InterruptedException {\n    +      \n    +      if (null == msgs || msgs.size() == 0 || closing) {\n    +        return;\n    +      }\n    +      \n    +      ArrayList<TaskMessage> messageGroups[] = groupMessages(msgs);\n    +      \n    +      if (null == messageGroups || closing) {\n    +        return;\n    +      }\n    +      \n    +      for (int receiverId = 0; receiverId < messageGroups.length; receiverId++) {\n    +        ArrayList<TaskMessage> msgGroup = messageGroups[receiverId];\n    +        if (null != msgGroup) {\n    +          message_queue[receiverId].put(msgGroup);\n    +        }\n    +      }\n    +   }\n         \n         /**\n          * fetch a message from message queue synchronously (flags != 1) or asynchronously (flags==1)\n          */\n    -    public TaskMessage recv(int flags)  {\n    -        if ((flags & 0x01) == 0x01) { \n    +    public Iterator<TaskMessage> recv(int flags)  {\n    --- End diff --\n    \n    fixed\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-05-20T04:12:34.791+0000","updated":"2014-05-20T04:12:34.791+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/14002774","id":"14002774","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user clockfly commented on a diff in the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#discussion_r12827330\n  \n    --- Diff: storm-core/src/jvm/backtype/storm/messaging/netty/Server.java ---\n    @@ -133,4 +242,12 @@ public synchronized void close() {\n         public void send(int task, byte[] message) {\n             throw new RuntimeException(\"Server connection should not send any messages\");\n         }\n    +    \n    +    public void send(Iterator<TaskMessage> msgs) {\n    +      throw new RuntimeException(\"Server connection should not send any messages\");\n    +    }\n    +\t\n    +\t public String name() {\n    --- End diff --\n    \n    fixed\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-05-20T04:12:41.488+0000","updated":"2014-05-20T04:12:41.488+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/14002775","id":"14002775","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user clockfly commented on a diff in the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#discussion_r12827334\n  \n    --- Diff: storm-core/src/jvm/backtype/storm/messaging/netty/StormClientHandler.java ---\n    @@ -18,70 +18,24 @@\n     package backtype.storm.messaging.netty;\n     \n     import java.net.ConnectException;\n    -import java.util.concurrent.atomic.AtomicBoolean;\n     \n    -import org.jboss.netty.channel.Channel;\n    -import org.jboss.netty.channel.ChannelHandlerContext;\n    -import org.jboss.netty.channel.ChannelStateEvent;\n    -import org.jboss.netty.channel.ExceptionEvent;\n    -import org.jboss.netty.channel.MessageEvent;\n    -import org.jboss.netty.channel.SimpleChannelUpstreamHandler;\n    +import org.jboss.netty.channel.*;\n     import org.slf4j.Logger;\n     import org.slf4j.LoggerFactory;\n     \n    -import java.net.ConnectException;\n    -import java.util.concurrent.atomic.AtomicBoolean;\n    -\n     public class StormClientHandler extends SimpleChannelUpstreamHandler  {\n         private static final Logger LOG = LoggerFactory.getLogger(StormClientHandler.class);\n         private Client client;\n    -    long start_time;\n         \n         StormClientHandler(Client client) {\n    --- End diff --\n    \n    fixed\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-05-20T04:12:50.192+0000","updated":"2014-05-20T04:12:50.192+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/14002776","id":"14002776","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user clockfly commented on a diff in the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#discussion_r12827338\n  \n    --- Diff: storm-core/src/jvm/backtype/storm/messaging/netty/StormServerHandler.java ---\n    @@ -41,30 +45,22 @@ public void channelConnected(ChannelHandlerContext ctx, ChannelStateEvent e) {\n         \n         @Override\n         public void messageReceived(ChannelHandlerContext ctx, MessageEvent e) {\n    -        Object msg = e.getMessage();  \n    -        if (msg == null) return;\n    -\n    -        //end of batch?\n    -        if (msg==ControlMessage.EOB_MESSAGE) {\n    -            Channel channel = ctx.getChannel();\n    -            LOG.debug(\"Send back response ...\");\n    -            if (failure_count.get()==0)\n    -                channel.write(ControlMessage.OK_RESPONSE);\n    -            else channel.write(ControlMessage.FAILURE_RESPONSE);\n    -            return;\n    -        }\n    -        \n    -        //enqueue the received message for processing\n    -        try {\n    -            server.enqueue((TaskMessage)msg);\n    -        } catch (InterruptedException e1) {\n    -            LOG.info(\"failed to enqueue a request message\", e);\n    -            failure_count.incrementAndGet();\n    -        }\n    +      List<TaskMessage> msgs = (List<TaskMessage>) e.getMessage();\n    +      if (msgs == null) {\n    +        return;\n    +      }\n    +      \n    +      try {\n    +        server.enqueue(msgs);\n    +      } catch (InterruptedException e1) {\n    +        LOG.info(\"failed to enqueue a request message\", e);\n    +        failure_count.incrementAndGet();\n    +      }\n         }\n     \n         @Override\n         public void exceptionCaught(ChannelHandlerContext ctx, ExceptionEvent e) {\n    +        e.getCause().printStackTrace();\n    --- End diff --\n    \n    fixed\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-05-20T04:12:57.906+0000","updated":"2014-05-20T04:12:57.906+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/14002784","id":"14002784","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user clockfly commented on a diff in the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#discussion_r12827582\n  \n    --- Diff: storm-core/src/jvm/backtype/storm/messaging/netty/Client.java ---\n    @@ -128,133 +181,105 @@ private long getSleepTimeMs()\n         }\n     \n         /**\n    -     * Enqueue a task message to be sent to server\n    +     * Enqueue task messages to be sent to server\n          */\n    -    public void send(int task, byte[] message) {\n    -        //throw exception if the client is being closed\n    -        if (being_closed.get()) {\n    +    synchronized public void send(Iterator<TaskMessage> msgs) {\n    +\n    +        // throw exception if the client is being closed\n    +        if (closing) {\n                 throw new RuntimeException(\"Client is being closed, and does not take requests any more\");\n             }\n    -\n    -        try {\n    -            message_queue.put(new TaskMessage(task, message));\n    -\n    -            //resume delivery if it is waiting for requests\n    -            tryDeliverMessages(true);\n    -        } catch (InterruptedException e) {\n    -            throw new RuntimeException(e);\n    +        \n    +        if (null == msgs || !msgs.hasNext()) {\n    +            return;\n             }\n    -    }\n     \n    -    /**\n    -     * Retrieve messages from queue, and delivery to server if any\n    -     */\n    -    synchronized void tryDeliverMessages(boolean only_if_waiting) throws InterruptedException {\n    -        //just skip if delivery only if waiting, and we are not waiting currently\n    -        if (only_if_waiting && !wait_for_requests)  return;\n    -\n    -        //make sure that channel was not closed\n             Channel channel = channelRef.get();\n    -        if (channel == null)  return;\n    -        if (!channel.isOpen()) {\n    -            LOG.info(\"Channel to {} is no longer open.\",remote_addr);\n    -            //The channel is not open yet. Reconnect?\n    -            reconnect();\n    -            return;\n    +        if (null == channel) {\n    +            connect();\n    +            channel = channelRef.get();\n             }\n     \n    -        final MessageBatch requests = tryTakeMessages();\n    -        if (requests==null) {\n    -            wait_for_requests = true;\n    -            return;\n    -        }\n    +        while (msgs.hasNext()) {\n    +            TaskMessage message = msgs.next();\n    +            if (null == messageBatch) {\n    +                messageBatch = new MessageBatch(messageBatchSize);\n    +            }\n     \n    -        //if channel is being closed and we have no outstanding messages,  let's close the channel\n    -        if (requests.isEmpty() && being_closed.get()) {\n    -            close_n_release();\n    -            return;\n    +            messageBatch.add(message);\n    +            if (messageBatch.isFull()) {\n    +                MessageBatch toBeFlushed = messageBatch;\n    +                flushRequest(channel, toBeFlushed, blocking);\n    +                messageBatch = null;\n    +            }\n             }\n     \n    -        //we are busily delivering messages, and will check queue upon response.\n    -        //When send() is called by senders, we should not thus call tryDeliverMessages().\n    -        wait_for_requests = false;\n    -\n    -        //write request into socket channel\n    -        ChannelFuture future = channel.write(requests);\n    -        future.addListener(new ChannelFutureListener() {\n    -            public void operationComplete(ChannelFuture future)\n    -                    throws Exception {\n    -                if (!future.isSuccess()) {\n    -                    LOG.info(\"failed to send \"+requests.size()+\" requests to \"+remote_addr, future.getCause());\n    -                    reconnect();\n    -                } else {\n    -                    LOG.debug(\"{} request(s) sent\", requests.size());\n    -\n    -                    //Now that our requests have been sent, channel could be closed if needed\n    -                    if (being_closed.get())\n    -                        close_n_release();\n    -                }\n    +        if (null != messageBatch && !messageBatch.isEmpty()) {\n    +            if (channel.isWritable()) {\n    +                flushCheckTimer.set(Long.MAX_VALUE);\n    +                \n    +                // Flush as fast as we can to reduce the latency\n    +                MessageBatch toBeFlushed = messageBatch;\n    +                messageBatch = null;\n    +                flushRequest(channel, toBeFlushed, blocking);\n    +                \n    +            } else {\n    +                // when channel is NOT writable, it means the internal netty buffer is full. \n    +                // In this case, we can try to buffer up more incoming messages.\n    +                flushCheckTimer.set(System.currentTimeMillis() + flushCheckInterval);\n                 }\n    -        });\n    +        }\n    +\n         }\n     \n    -    /**\n    -     * Take all enqueued messages from queue\n    -     * @return  batch of messages\n    -     * @throws InterruptedException\n    -     *\n    -     * synchronized ... ensure that messages are delivered in the same order\n    -     * as they are added into queue\n    -     */\n    -    private MessageBatch tryTakeMessages() throws InterruptedException {\n    -        //1st message\n    -        Object msg = message_queue.poll();\n    -        if (msg == null) return null;\n    -\n    -        MessageBatch batch = new MessageBatch(buffer_size);\n    -        //we will discard any message after CLOSE\n    -        if (msg == ControlMessage.CLOSE_MESSAGE) {\n    -            LOG.info(\"Connection to {} is being closed\", remote_addr);\n    -            being_closed.set(true);\n    -            return batch;\n    +    public String name() {\n    +        if (null != remote_addr) {\n    +            return PREFIX + remote_addr.toString();\n             }\n    +        return \"\";\n    +    }\n     \n    -        batch.add((TaskMessage)msg);\n    -        while (!batch.isFull() && ((msg = message_queue.peek())!=null)) {\n    -            //Is it a CLOSE message?\n    -            if (msg == ControlMessage.CLOSE_MESSAGE) {\n    -                message_queue.take();\n    -                LOG.info(\"Connection to {} is being closed\", remote_addr);\n    -                being_closed.set(true);\n    -                break;\n    +    private synchronized void flush() {\n    +        if (!closing) {\n    +            if (null != messageBatch && !messageBatch.isEmpty()) {\n    +                MessageBatch toBeFlushed = messageBatch;\n    +                Channel channel = channelRef.get();\n    +                if (channel != null) {\n    +                    flushCheckTimer.set(Long.MAX_VALUE);\n    +                    flushRequest(channel, toBeFlushed, true);\n    +                }\n    +                messageBatch = null;\n    --- End diff --\n    \n    fixed. Change flush() to flush(Channel channel), as the caller of flush() already checked the channel to make sure it is not null.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-05-20T04:29:12.928+0000","updated":"2014-05-20T04:29:12.928+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/14002794","id":"14002794","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user clockfly commented on a diff in the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#discussion_r12827649\n  \n    --- Diff: storm-core/src/clj/backtype/storm/daemon/worker.clj ---\n    @@ -109,25 +111,30 @@\n     (defn mk-transfer-fn [worker]\n       (let [local-tasks (-> worker :task-ids set)\n             local-transfer (:transfer-local-fn worker)\n    -        ^DisruptorQueue transfer-queue (:transfer-queue worker)]\n    +        ^DisruptorQueue transfer-queue (:transfer-queue worker)\n    +        task->node+port (:cached-task->node+port worker)]\n         (fn [^KryoTupleSerializer serializer tuple-batch]\n           (let [local (ArrayList.)\n    -            remote (ArrayList.)]\n    +            remoteMap (HashMap.)]\n             (fast-list-iter [[task tuple :as pair] tuple-batch]\n               (if (local-tasks task)\n                 (.add local pair)\n    -            (.add remote pair)\n    -            ))\n    +            (let [node+port (get @task->node+port task)]\n    +              (when (not (.get remoteMap node+port))\n    +                (.put remoteMap node+port (ArrayList.)))\n    +              (let [remote (.get remoteMap node+port)]\n    +                (.add remote (TaskMessage. task (.serialize serializer tuple)))\n    +                 ))))\n    --- End diff --\n    \n    This is on purpose for performance. \n    The ArrayList and HashMap constructed here will be used directly in java. We designed a  customized iterator inside class TransferDrainer, so that we don't need to wrap/unwrap data or copy data from clojure data strucutre to java data structure.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-05-20T04:34:26.119+0000","updated":"2014-05-20T04:34:26.119+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/14002829","id":"14002829","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user clockfly commented on the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#issuecomment-43588816\n  \n    Hi Bobby,\n    \n    Thank you for your comments. I addressed most of the issues, except these three:\n    \n    **issue1:**\n    > \n    ```\n    +    private synchronized void connect() {\n    ```\n    > I don't like the idea of having connect block until the connection is established. Any thread that tries to send data to a connection that is still being established will block until the connection is established. I think it is more robust to buffer the messages in a data structure and try to handle them later when the connection is finished.\n    \n    **reply:** I think it is better to have connection estabilish before we allow message sender to send message. Here is the my obervations when allowing message sender to send message without a established connection:\n    \n    1. Excessive memory usage\n    If  message senders are allow to send message without the connetion being established, the senders are encourged to send as fast as they can. In some profiling, I observed there was sharp increase of heap memory in the beginning, as we will buffer all those message in a unlimited queue in netty client. If the user are using unacked topology or set the topology.max.spout.pending to be a bigger enough value, it will possibly cause the JVM OOM.\n    \n    2. Longer latency\n    The Netty Client queue can turns out to be very long, longer queue means longer latency. For example, suppose Netty Client can at max transfer 10 tuples/second, the Netty Client queue increased to size of 10000 because of this buffering, the spout generates 10 tuple/second, then in this case the queue size will stablize at 10000, the throughput will be 10 tuples/second. The throughput will be the same no matter the queue size is 100, or 1000, or 10000, the latency will be much bigger for queue size 10000. So it is very important to make sure the queue will not increase to too big from the begining.\n    \n    3. Reduced throughput.\n    When the latency is longer, it will reduce the message generation speed of spout, as spout  will wait message to be acked(unacked size controled by topology.max.spout.pending). The longer the initial latency is, the longer it takes for the spout to converge to the balanced speed of tuple generation.  \n      \n    In the code, we will setup the connection in Client constructor asyncly before the send(message) is called to reduce the time that need to be waited by the message sender.\n    ```\n            Thread flushChecker = new Thread(new Runnable() {\n                @Override\n                public void run() {\n                    //make sure we have a connection\n                    connect();  //<-----------------here!\n    ```\n    \n    **issue 2:**\n    >\n    ```\n    storm-core/src/jvm/backtype/storm/messaging/netty/Client\n    +        Thread flushChecker = new Thread(new Runnable() {\n    ```\n    > Can we make this thread shared between the clients, otherwise we will have a dedicated thread per client, which can cause resource utilization issues, hitting a ulimit with the number of processes allowed per user.\n    \n    **Reply:** Can we do this in a followup patch? I have a local patch, but it requires more testing.\n    \n    **issue 3:** \n    >\n    ```\n    +            (let [node+port (get @task->node+port task)]\n    +              (when (not (.get remoteMap node+port))\n    +                (.put remoteMap node+port (ArrayList.)))\n    +              (let [remote (.get remoteMap node+port)]\n    +                (.add remote (TaskMessage. task (.serialize serializer tuple)))\n    +                 ))))\n    ```\n    > The above code does not really feel like it is clojure, as it is updating mutable state. I would rather have see us do something like a group-by.\n    \n    **Reply:** This is on purpose for performance. \n    The ArrayList and HashMap constructed here will be used directly in java. We designed a customized iterator inside class TransferDrainer, so that we don't need to wrap/unwrap data or copy data from clojure data strucutre to java data structure.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-05-20T05:55:00.893+0000","updated":"2014-05-20T05:55:00.893+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/14003180","id":"14003180","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user Gvain commented on the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#issuecomment-43621117\n  \n    Just a hint:\n    What if we use MORE workers per node than just only ONE worker per node without changing the total number of executors ? By doing so, we will have MORE received threads, transfer threads and netty i/o threads for the total 144 executors. Should this increase total CPU usage and network bandwidth usage? \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-05-20T12:53:21.275+0000","updated":"2014-05-20T12:53:21.275+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/14003228","id":"14003228","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user clockfly commented on the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#issuecomment-43625555\n  \n    **issue 2:**\n    \n    >storm-core/src/jvm/backtype/storm/messaging/netty/Client\n    >```\n    +        Thread flushChecker = new Thread(new Runnable() {\n    ```\n    > Can we make this thread shared between the clients, otherwise we will have a dedicated thread per client, which can cause resource utilization issues, hitting a ulimit with the number of processes allowed per user.\n    \n    ~~**Reply**: Can we do this in a followup patch? I have a local patch, but it requires more testing.~~\n    **Update**: This is resolved in latest checkin,\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-05-20T13:33:39.526+0000","updated":"2014-05-20T13:33:39.526+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/14003245","id":"14003245","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user clockfly commented on the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#issuecomment-43627624\n  \n    Gvain,\n    \n    >What if we use MORE workers per node than just only ONE worker per node without changing the total number of executors ? By doing so, we will have MORE received threads, transfer threads and netty i/o threads for the total 144 executors. Should this increase total CPU usage and network bandwidth usage?\n    \n    We tried this approach before, but it won't give us the performance data we want. There were inherit bottleneck there. Besides, receiver.count is not the biggest bottleneck here, netty performance matter more.\n    \n    The logic behind make \"receiver.count\" configurable is that, since we allow user to configure spout/bolt executor count per worker, we should also allow user to configure the receiver thread count to make it consistent with the parallism settings.\n    \n    Besides, increasing worker count will, \n    1. add more cross process or cross machine communication. For tasks inside same worker process,  the message will be **local** dispatched to target task if possible.\n    2. More Netty context switch and contention. Check http://yahooeng.tumblr.com/post/64758709722/making-storm-fly-with-netty\n    3. More outbound acker message count. Usually we will allocate one acker to one worker.\n    \n    So in common practice, each worker will have a moderate size of executors, neither too small, nor too big.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-05-20T13:49:25.107+0000","updated":"2014-05-20T13:49:25.107+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/14003331","id":"14003331","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user clockfly commented on a diff in the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#discussion_r12845130\n  \n    --- Diff: storm-core/src/jvm/backtype/storm/messaging/netty/Client.java ---\n    @@ -84,43 +93,87 @@\n     \n             // Start the connection attempt.\n             remote_addr = new InetSocketAddress(host, port);\n    -        bootstrap.connect(remote_addr);\n    +        \n    +        Thread flushChecker = new Thread(new Runnable() {\n    --- End diff --\n    \n    fixed\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-05-20T14:13:21.616+0000","updated":"2014-05-20T14:13:21.616+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/14003341","id":"14003341","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user clockfly commented on a diff in the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#discussion_r12845167\n  \n    --- Diff: storm-core/src/jvm/backtype/storm/utils/Utils.java ---\n    @@ -373,6 +399,25 @@ public static CuratorFramework newCuratorStarted(Map conf, List<String> servers,\n             ret.start();\n             return ret;\n         }\n    +    \n    +    public static void redirectStreamAsync(Process process) {\n    +      redirectStreamAsync(process.getInputStream(), System.out);\n    --- End diff --\n    \n    Fixed, this part code is removed.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-05-20T14:14:12.717+0000","updated":"2014-05-20T14:14:12.717+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/14003345","id":"14003345","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user revans2 commented on a diff in the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#discussion_r12845322\n  \n    --- Diff: storm-core/src/jvm/backtype/storm/utils/Utils.java ---\n    @@ -301,15 +303,39 @@ public static ComponentCommon getComponentCommon(StormTopology topology, String\n         }\n         \n         public static Integer getInt(Object o) {\n    -        if(o instanceof Long) {\n    -            return ((Long) o ).intValue();\n    -        } else if (o instanceof Integer) {\n    -            return (Integer) o;\n    -        } else if (o instanceof Short) {\n    -            return ((Short) o).intValue();\n    -        } else {\n    -            throw new IllegalArgumentException(\"Don't know how to convert \" + o + \" + to int\");\n    -        }\n    +      Integer result = getInt(o, null);\n    +      if (null == result) {\n    +        throw new IllegalArgumentException(\"Don't know how to convert null + to int\");\n    +      }\n    +      return result;\n    +    }\n    +    \n    +    public static Integer getInt(Object o, Integer defaultValue) {\n    +      if (null == o) {\n    +        return defaultValue;\n    +      }\n    +      \n    +      if(o instanceof Long) {\n    --- End diff --\n    \n    You are correct, I filed\n    \n    https://issues.apache.org/jira/browse/STORM-328\n    \n    To address the issue across the project.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-05-20T14:17:14.664+0000","updated":"2014-05-20T14:17:14.664+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/14003355","id":"14003355","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user revans2 commented on a diff in the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#discussion_r12845484\n  \n    --- Diff: storm-core/src/clj/backtype/storm/daemon/worker.clj ---\n    @@ -109,25 +111,30 @@\n     (defn mk-transfer-fn [worker]\n       (let [local-tasks (-> worker :task-ids set)\n             local-transfer (:transfer-local-fn worker)\n    -        ^DisruptorQueue transfer-queue (:transfer-queue worker)]\n    +        ^DisruptorQueue transfer-queue (:transfer-queue worker)\n    +        task->node+port (:cached-task->node+port worker)]\n         (fn [^KryoTupleSerializer serializer tuple-batch]\n           (let [local (ArrayList.)\n    -            remote (ArrayList.)]\n    +            remoteMap (HashMap.)]\n             (fast-list-iter [[task tuple :as pair] tuple-batch]\n               (if (local-tasks task)\n                 (.add local pair)\n    -            (.add remote pair)\n    -            ))\n    +            (let [node+port (get @task->node+port task)]\n    +              (when (not (.get remoteMap node+port))\n    +                (.put remoteMap node+port (ArrayList.)))\n    +              (let [remote (.get remoteMap node+port)]\n    +                (.add remote (TaskMessage. task (.serialize serializer tuple)))\n    +                 ))))\n    --- End diff --\n    \n    OK, if you could add a quick comment about it, that would help prevent someone like me trying to \"clean it up\" in the future and slowing it down. Something like\n    ```;;Using java objects directly to avoid performance issues in java code```\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-05-20T14:19:45.455+0000","updated":"2014-05-20T14:19:45.455+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/14003360","id":"14003360","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user clockfly commented on a diff in the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#discussion_r12845868\n  \n    --- Diff: storm-core/src/clj/backtype/storm/daemon/worker.clj ---\n    @@ -109,25 +111,30 @@\n     (defn mk-transfer-fn [worker]\n       (let [local-tasks (-> worker :task-ids set)\n             local-transfer (:transfer-local-fn worker)\n    -        ^DisruptorQueue transfer-queue (:transfer-queue worker)]\n    +        ^DisruptorQueue transfer-queue (:transfer-queue worker)\n    +        task->node+port (:cached-task->node+port worker)]\n         (fn [^KryoTupleSerializer serializer tuple-batch]\n           (let [local (ArrayList.)\n    -            remote (ArrayList.)]\n    +            remoteMap (HashMap.)]\n             (fast-list-iter [[task tuple :as pair] tuple-batch]\n               (if (local-tasks task)\n                 (.add local pair)\n    -            (.add remote pair)\n    -            ))\n    +            (let [node+port (get @task->node+port task)]\n    +              (when (not (.get remoteMap node+port))\n    +                (.put remoteMap node+port (ArrayList.)))\n    +              (let [remote (.get remoteMap node+port)]\n    +                (.add remote (TaskMessage. task (.serialize serializer tuple)))\n    +                 ))))\n    --- End diff --\n    \n    fixed, thanks\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-05-20T14:23:57.315+0000","updated":"2014-05-20T14:23:57.315+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/14003369","id":"14003369","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user revans2 commented on the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#issuecomment-43632986\n  \n    @clockfly,\n    \n    Your logic makes since to me on why these calls are blocking.  My biggest concern around the blocking is in the case of a worker crashing.  If a single worker crashes this can block the entire topology from executing until that worker comes back up.  In some cases I can see that being something that you would want.  In other cases I can see speed being the primary concern and some users would like to get partial data fast, rather then accurate data later.\n    \n    Could we make it configurable on a follow up JIRA where we can have a max limit to the buffering that is allowed, before we block, or throw data away (which is what zeromq does)?\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-05-20T14:28:48.591+0000","updated":"2014-05-20T14:28:48.591+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/14003382","id":"14003382","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user clockfly commented on the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#issuecomment-43634626\n  \n    Bobby,\n    \n    Your suggestion makes sense, let's do this in a follow up jira!\n    \n    Sean\n    \n\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-05-20T14:40:06.019+0000","updated":"2014-05-20T14:40:06.019+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/14003396","id":"14003396","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user revans2 commented on the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#issuecomment-43636831\n  \n    Running the unit tests I ran into some errors in backtype.storm.messaging.netty-unit-test (there were 3 failures like this one)\n    \n    It looks like you need to update the test to set Config.TOPOLOGY_WORKERS before creating the context.\n    \n    ```\n    expected: nil\n      actual: java.lang.RuntimeException: Fail to construct messaging plugin from plugin backtype.storm.messaging.netty.Context\n     at backtype.storm.messaging.TransportFactory.makeContext (TransportFactory.java:53)\n        backtype.storm.messaging.netty_unit_test/fn (netty_unit_test.clj:109)\n        clojure.test$test_var$fn__6926.invoke (test.clj:701)\n        clojure.test$test_var.invoke (test.clj:701)\n        clojure.test$test_all_vars$fn__6930$fn__6937.invoke (test.clj:717)\n        clojure.test$default_fixture.invoke (test.clj:671)\n        clojure.test$test_all_vars$fn__6930.invoke (test.clj:717)\n    ...\n    Caused by: java.lang.IllegalArgumentException: Don&apos;t know how to convert null + to int\n     at backtype.storm.utils.Utils.getInt (Utils.java:308)\n        backtype.storm.messaging.netty.Context.prepare (Context.java:66)\n        backtype.storm.messaging.TransportFactory.makeContext (TransportFactory.java:45)\n        backtype.storm.messaging.netty_unit_test/fn (netty_unit_test.clj:109)\n        clojure.test$test_var$fn__6926.invoke (test.clj:701)\n        clojure.test$test_var.invoke (test.clj:701)\n        clojure.test$test_all_vars$fn__6930$fn__6937.invoke (test.clj:717)\n        clojure.test$default_fixture.invoke (test.clj:671)\n        clojure.test$test_all_vars$fn__6930.invoke (test.clj:717)\n        clojure.test$default_fixture.invoke (test.clj:671)\n    ```\n    \n\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-05-20T14:55:38.491+0000","updated":"2014-05-20T14:55:38.491+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/14003418","id":"14003418","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user Gvain commented on the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#issuecomment-43639415\n  \n    \"So in common practice, each worker will have a moderate size of executors, neither too small, nor too big.\"\n    I agree on this. But what size is considered to be too big or too small. Should 36 be too big? Only a few executors failed to heartbeat to nimbus, the whole worker will reload.\n    \n    Besides, By using a SHARED threadpool(its default size is 1) among all netty client within a worker, the netty threads number do not increase as total worker numbers increase. Check [jira][storm-12]. So, increasing worker count may not cause netty context switching problem.\n    \n    \"3. More outbound acker message count. Usually we will allocate one acker to one worker.\"\n    But you allocate 48 ackers to only 4 workers.\n      \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-05-20T15:14:09.204+0000","updated":"2014-05-20T15:14:09.204+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/14003660","id":"14003660","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user clockfly commented on the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#issuecomment-43656390\n  \n    Gvain,\n    \n    > Besides, By using a SHARED threadpool(its default size is 1) among all netty client within a worker,  the netty threads number do not increase as total worker numbers increase. Check [jira][storm-12]. So, increasing worker count may not cause netty context switching problem.\n    \n    Context switch here means netty threads from different worker processes of same machine will compete with each other. \n    \n    > \"3. More outbound acker message count. Usually we will allocate one acker to one worker.\"\n    But you allocate 48 ackers to only 4 workers.\n    \n    Usually one acker one worker will suffice. But for the perfomance benchmarking case, acker becomes a bottleneck, because the message count is huge.\n\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-05-20T17:18:55.913+0000","updated":"2014-05-20T17:18:55.913+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/14003662","id":"14003662","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user clockfly commented on the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#issuecomment-43656469\n  \n    Bobby, \n    \n    Sorry for this regression. Now it is fixed.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-05-20T17:19:36.562+0000","updated":"2014-05-20T17:19:36.562+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/14003720","id":"14003720","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user revans2 commented on the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#issuecomment-43659441\n  \n    The unit tests pass and the code looks OK to me.  I am +1\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-05-20T17:44:09.695+0000","updated":"2014-05-20T17:44:09.695+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/14004192","id":"14004192","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user clockfly commented on the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#issuecomment-43703379\n  \n    Thanks.\n    \n    @miguno, @ptgoetz, @nathanmarz, do you have further comments?\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-05-21T01:35:00.431+0000","updated":"2014-05-21T01:35:00.431+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/14004209","id":"14004209","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user clockfly commented on the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#issuecomment-43704046\n  \n    @revans, \n    \n    I created a jira https://issues.apache.org/jira/browse/STORM-329 to handle the case that worker sudden crashs.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-05-21T01:49:01.368+0000","updated":"2014-05-21T01:49:01.368+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/14004284","id":"14004284","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user Gvain commented on the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#issuecomment-43708724\n  \n    clockfly,\n    \n    Thanks for your patience. \n    Do you mean that allocating one worker per node is better than several workers per node as the netty threads from different worker process will compete with each other ?\n    In production practice, it is properly to allocate only one worker per node ? I don't think so\n    \n    And i think using several netty threads working in sync and non-batch mode may have some what the same effect with using only one netty threads working in async and batch mode. Maybe i should test this out.  By the way, what storm version do you use in the test ?\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-05-21T03:26:26.110+0000","updated":"2014-05-21T03:26:26.110+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/14004413","id":"14004413","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user clockfly commented on the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#issuecomment-43716283\n  \n    > Do you mean that allocating one worker per node is better than several workers per node as the netty threads from different worker process will compete with each other ?\n    \n    It depends. Executor is the basic unit of parallism, suppose executor number is the same, adding a worker will add more traffic, but if it is co-located with other worker, it may also increase the bandwith of intra-worker communication(as we do intra-process communication instead of intra-machine).\n    \n    For example, 1, 1, 1 (means 3 machine, one worker on each) may be faster than co-located 4, 4, 4\n    But co-located 3, 0, 0 may be faster than distributed 1, 1, 1. This requires experiment to verify it is better or worse.\n    \n    >And i think using several netty threads working in sync and non-batch mode may have some what the same effect with using only one netty threads working in async and batch mode. Maybe i should test this out. By the way, what storm version do you use in the test ?\n    \n    Yes, sync-async can only give us pointers about what could be the possible bottleneck, these need continous profile-tune experiments to prove our guess. By the way, I use storm-0.9 release version. \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-05-21T06:25:42.223+0000","updated":"2014-05-21T06:25:42.223+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/14004979","id":"14004979","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user revans2 commented on the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#issuecomment-43791269\n  \n    Yes getting the best performance of a topology really depends on the resources that your topology is using.  If your topology is CPU bound then you want to spread it out so that you have enough cores to handle the parallelism, but if your topology is I/O bound you want to collocate them as much as possible.  The best performance optimization is simply to stop doing something.  So if you can cut out the serialization/deserialization and sending tuples to another process, even over the loopback device, then that potentially becomes a big win.\n    \n    The really difficult part is that parts of your topology may be CPU bound, other parts may be I/O bound, and other parts may be constrained by memory (which has it's own limitations).  Also you may have a different definition of \"best\".  Some users may require a very low latency, and are willing to let most of the cluster sit idle so that they know when something happens they can process it very quickly.  Other times you are willing to sacrifice latency to be sure that everything you want to run fits on a smaller set of hardware.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-05-21T17:50:24.032+0000","updated":"2014-05-21T17:50:24.032+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/14005956","id":"14005956","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user miguno commented on the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#issuecomment-43896389\n  \n    @clockfly Many thanks for your all the hard work and your patience.  It's much appreciated!\n    \n    I don't have anything to add to the discussion at the moment (thanks Bobby & Co.!) except that I, too, can confirm that the Storm test suite passes with Sean's latest code changes.  I tested against the latest commit in Sean's `storm_async_netty_and_batch_api` branch, which at the time of writing was https://github.com/clockfly/incubator-storm/commit/20b4f8b2195a1bf214f63e10b1bbca4690c0290f.\n    \n        $ git checkout master\n        $ gco -b STORM-297\n        $ git pull git@github.com:clockfly/incubator-storm.git storm_async_netty_and_batch_api\n        $ mvn clean install\n    \n        >>> Success.\n    \n    PS: Unfortunately I haven't had the chance yet to run the patched version of Storm in a large-scale environment.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-05-22T14:35:58.500+0000","updated":"2014-05-22T14:35:58.500+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/14006149","id":"14006149","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user nathanmarz commented on the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#issuecomment-43917540\n  \n    I would like to see a test added that tests that messages are received between tasks in the same order they are sent. The test is likely to be probabilistic, in that if the code is wrong it won't always fail, but that's ok. This is a really important property to maintain that this patch, or future modifications on this code, could affect. So it needs better testing. The test should have many workers with many send/receive threads. \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-05-22T17:18:30.341+0000","updated":"2014-05-22T17:18:30.341+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/14006228","id":"14006228","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user clockfly commented on the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#issuecomment-43923944\n  \n    Thank you, @miguno!\n    \n    @nathanmarz, good point! I will add a test case to cover this.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-05-22T18:12:33.840+0000","updated":"2014-05-22T18:12:33.840+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/14010859","id":"14010859","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user Gvain commented on the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#issuecomment-44372134\n  \n    @clockfly \n    \n    I used latest storm to reproduce some of your test. I found that adding a few more workers will increase throughput, as well as CPU usage. I also get a max doubled throughput.\n    \n    Im my test, i used 4 nodes(24 cores each, not power enough than yours), 48 spouts, 48 bolts, 48 ackers, and 4 to 64 workers, SOL benchmark, message size is 100 Bytes. Here is the results:\n    \n    workers |     Throughput |     CPU usage |     NET usage (only IN Bytes)\n    ---------------------------------------------------------------------\n     4          |     320,000 tps |    56%             |    14MB/s\n     8          |     656,000 tps |    89%             |    28MB/s\n     16        |     560,000 tps |    92%             |    26MB/s\n     32        |     353,000 tps |    90%             |    20MB/s\n     64        |     208,000 tps |    90%             |    16MB/s\n    \n    Using 8 workers, the throughput doubled. \n    \n    As we already discussed:\n    (a) Increasing worker count, not too much,  may not cause netty context switching problem. As using a SHARED threadpool(its default size is 1) among all netty client within a worker, the netty threads number do not increase as total worker numbers increase. Check https://github.com/apache/incubator-storm/pull/57\n    \n    (b) Increasing worker count will increase netty threads. Using more netty threads working in sync and non-batch mode may have some what the same effect with using less netty threads working in async and batch mode which is your way.\n    \n    From the test result, it seems like the above point of view (b)  is true. \n    So, maybe, what we need to to is just pulling the https://github.com/apache/incubator-storm/pull/57 and adding a few workers.\n    \n    But i am still curious about if i adding more nodes, should this still work ? \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-05-28T07:02:21.433+0000","updated":"2014-05-28T07:02:21.433+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/14013447","id":"14013447","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user Gvain commented on the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#issuecomment-44629767\n  \n    @clockfly , @revans2 \n    \n    I added more nodes, from 4 nodes to 15 nodes, as well as spouts, bolts, ackers and workers, and keep their parallelism count in the same ratio, eg, for every other 4 nodes, add 48 spouts, 48 bolts, 48 ackers and 8 workers. Here is the test result:\n    \n    nodes | workers | Throughput | CPU usage | NET usage (only IN Bytes)\n    4   | 8   | 656,000 tps    | 89% | 28MB/s\n    8   | 16 | 1,004,000 tps | 82% | 28MB/s\n    12 | 24 | 1,133,000 tps | 72% | 25MB/s\n    15 | 30 | 1,235,000 tps | 69% | 24MB/s\n    \n    for last two rows, the CPU usage decreased, and the throughput increasing speed slows down. I added a few more worker to re-run the test, the result is:\n    \n    nodes | workers | Throughput | CPU usage | NET usage (only IN Bytes)\n    12 | 48 | 1,444,000 tps | 88% | 30MB/s\n    15 | 30 | 1,735,000 tps | 88% | 30MB/s\n    \n    From the result, We can see adding some more workers DO help to scale up performance as adding more CPUs. \n    \n    Finally, maybe we should re-considerate the root cause of this issue \"STORM-297 Storm Performance cannot be scaled up by adding more CPU cores\"\n     \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-05-30T09:13:29.406+0000","updated":"2014-05-30T09:13:29.406+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/14013473","id":"14013473","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user clockfly commented on the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#issuecomment-44634492\n  \n    Hi Gvain,\n    \n    Firstly I apologize for the late reply, I was stuck by a 2-day training.\n    \n    Thank you for sharing your data! It is really awesome that we are using the data to present our points!\n    \n    Before jumping to conclusions, let's make sure we understand the data in the same way and the test can be reproduced, I have some questions about your data.\n    \n    1. what tps here is consist of? Is it solely consist of spout message? or also including acker message? and other message?\n    2. What is the message latency in each test?\n    3. I noticed your network usage is pretty small, is it overall cluster network usage? or is it only single machine network usage? Are you using 1Gb network?\n    4. What is your max spout pending setting? \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-05-30T09:54:57.680+0000","updated":"2014-05-30T09:54:57.680+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/14013488","id":"14013488","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user Gvain commented on the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#issuecomment-44635246\n  \n    Hi, clockfly\n    \n    1) tps here only consists of spout emitted messages, NOT including acker messages or any other messages.\n    3) the network usage is only SINGLE machine network usage, and only the IN direction bytes counts. And I am using two bonded 1Gb network card.\n    4) max.spout.pending is 1000.\n    \n    As for 2), i didn't really stats message latency. All i did is compared the emitted count by spouts and the received count by bolts, they are quite catch up with each other  \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-05-30T10:05:14.578+0000","updated":"2014-05-30T10:05:14.578+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/14013580","id":"14013580","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user Gvain commented on the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#issuecomment-44642174\n  \n    Hi, clockfly\n    \n    You can reproduce my test by checking out the modified storm-perf-test here \n    https://github.com/Gvain/storm-perf-test/tree/spout-throughput\n    and the storm here\n    https://github.com/Gvain/incubator-storm, which is merely a copy from the original apache/incubator-storm several days ago.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-05-30T11:45:04.344+0000","updated":"2014-05-30T11:45:04.344+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/14015988","id":"14015988","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user miofthena commented on the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#issuecomment-44900176\n  \n    Hi, @clockfly \n    In Client.java\n    \n    * submit *flusher* every ~10ms\n    * every *flusher* never stops (if closed == true)\n    * in *flusher* loop we don't park thread \n    \n    → 100% CPU,  uncool =(\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-06-02T22:38:17.253+0000","updated":"2014-06-02T22:38:17.253+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/14016278","id":"14016278","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user clockfly commented on the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#issuecomment-44925955\n  \n    Thanks @miofthena,\n    \n    fixed at 0bca173! I should have done more test on new checkin.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-06-03T06:54:50.942+0000","updated":"2014-06-03T06:54:50.942+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/14017328","id":"14017328","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user clockfly commented on the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#issuecomment-45046513\n  \n    @Gvain, thanks for your detailed description. I care nothing but finding the truth. :Let me try your approach to reproduce the test. \n    \n    \n    \n\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-06-04T02:50:36.693+0000","updated":"2014-06-04T02:50:36.693+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/14017354","id":"14017354","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=clockfly","name":"clockfly","key":"clockfly","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sean Zhong","active":true,"timeZone":"Asia/Shanghai"},"body":"worker scability test without storm-297","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=clockfly","name":"clockfly","key":"clockfly","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sean Zhong","active":true,"timeZone":"Asia/Shanghai"},"created":"2014-06-04T04:12:21.748+0000","updated":"2014-06-04T04:12:21.748+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/14017360","id":"14017360","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user Gvain commented on the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#issuecomment-45050542\n  \n    @clockfly , Just let you know that I keep the topology.executor.send.buffer.size and the topology.executor.receive.buffer.size unchanged which are both 1024. And the netty.server/client.worker_threads are both set to 1, and storm.messaging.netty.buffer_size is set to 5242880\n    \n    I think this discuss will help us understand the issue much better.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-06-04T04:29:01.195+0000","updated":"2014-06-04T04:29:01.195+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/14017384","id":"14017384","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user clockfly commented on the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#issuecomment-45052822\n  \n    Hi @Gvain,\n    \n    First thank you for your insistence! it really helps to gain more understanding of storm.  \n    I run with your approach, the result verified your saying, the throughput does increase as worker number increase.\n    \n    Test\n    -------------\n    \n    **Throughput vs. worker# ①**\n    \n    | Worker# |cluster network IN(MB/s)|spout throughput(msg/s)|overall CPU|user cpu|system cpu|total threads#② |\n    | ------------- |:-------------:| -----:|-----:|-----:|-----:|-----:|-----:|\n    | 4 | 72 | 391860 | 42% | 36% | 6%| 422 |\n    | 8 | 88.3 | 475007 | 42% | 35%\t| 7%\t| 554 | \n    | 12 |\t104 | 555174 | 51% | 40% | 11% | 686 |\n    | 16 | 116 | 603399 | 59% | 46% | 13% | 818 |  \n    | 24 |\t130 | 622938 | 77% | 55% | 22% | 1082 | \n    | 4(storm 297) |\t140 |\t752479 | 74% | 67.80% | 5.20% | 434 |\n    \n    ①\tTest environment: node=4, 48 vcore on each machine, max.spout.pendings = 1000, CPU: E52680, 48 spout, 48 bolt, and 48 ackers.\n    ②\tWe will only count 1 gc thread 1 jit thread for each JVM.\n    \n    \n    \n    ![worker_throughput_without_storm-297](https://cloud.githubusercontent.com/assets/2595532/3169502/82447702-eb9e-11e3-9f97-bc29fde190f3.png)\n    \n    \n    **CPU Usage**\n    \n    ![cpu_worker _scability](https://cloud.githubusercontent.com/assets/2595532/3169503/afdac11c-eb9e-11e3-9207-9d524606f613.png)\n    \n    We can find out both throughput and CPU usage increase when worker number increase.\n    \n    Analysis\n    -------------------\n    The facts revealed by this test strengthened my conviction that it is even better to apply this patch for higher performance:\n    \n    1. **Higher performance with this patch.**\n    \n      | | Worker# |cluster network IN(MB/s)|spout through put(msg/s)|\n    | ------------- |:-------------:| -----:|-----:|-----:|\n    | no storm-297 | 24 |\t130 | 622938 |\n    | with storm 297 | 4 |\t140 |\t752479 |\n    \n      **4 worker** with storm-297 can process **20% more** message than **24 workers** without this patch, with **less** CPU consumption.\n    \n    2. **Storm cannot scale well by changing task parallism solely**\n    \n      As the data in your test showed, for 4 worker, we can only reach 56% CPU. with the facts that there are 36 task parallism for each worker, much lagger than CPU core# 24.\n    \n      **The worker has inherit bottlenecks, ths issues are there. Work-arounds won't fix those issues.**\n    \n    3. **CPU System time increase when worker number increase**\n    \n      | Worker# |user cpu|system cpu|\n    | ------------- | -----:|-----:|\n    | 4 | 36% | 6%| \n    | 8 | 35%\t| 7%\t|\n    | 12 |\t40% | 11% |\n    | 16 | 46% | 13% |  \n    | 24 |\t55% | **22%** |\n    | 4(with storm-297) | 67.80% | 5.20% |\n    \n      Unnormal high system CPU is not good.\n    \n    4. **JVM allocation cost is high.**\n      In the test, there are 16+ threads running for each JVM allocation. The supporting data can be found at  \n    \n    5. **Worker allocation is not cost free**\n    \n     Besides the JVM allocation cost, there are zookeeper related threads(4), hearbeat threads(5), system bolt(2), netty boss and worker threads(6, 2 boss, 2 worker, and 2 timer). Plus with JVM threads, each worker will add at least 33 threads. \n    \n      More threads will add more pressure to central service like nimbus, and zookeeper.\n    \n      More threads means more context switch, it will hurt the performance of all applications running on these server. \n    \n      | Worker# |cluster total threads#|\n    | ------------- |:-------------:|\n    | 4 | 422 |\n    | 8 | 554 | \n    | 12 | 686 |\n    | 16 | 818 |  \n    | 24 | **1082** | \n    | 4(with storm-297) | 434 |\n    (We will only count 1 gc thread 1 jit thread for each JVM) \n    \n      For 24 workers case, the overall thread number is 1082+, with **each machine having more than 270 threads!**\n    \n    \n    6. **Serialization and Deserialization Cost**\n    \n      When the message is delivered from the task in the same process, the tuple won't be serialized. \n    \n      When there are 4 worker(suppose shuffle grouping and task is even distributed), there are 1/4 message that don't need serialization, but for 24 workers, the ratio is 1/24, which means we are now need to serialize 28% more messages.\n    \n     \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-06-04T05:27:43.437+0000","updated":"2014-06-04T05:27:43.437+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/14017391","id":"14017391","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user clockfly commented on the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#issuecomment-45053277\n  \n    Test case for message delivery order is added at 426d143\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-06-04T05:39:15.091+0000","updated":"2014-06-04T05:39:15.091+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/14017402","id":"14017402","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=clockfly","name":"clockfly","key":"clockfly","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sean Zhong","active":true,"timeZone":"Asia/Shanghai"},"body":"general configuration used for this test.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=clockfly","name":"clockfly","key":"clockfly","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sean Zhong","active":true,"timeZone":"Asia/Shanghai"},"created":"2014-06-04T05:59:03.470+0000","updated":"2014-06-04T05:59:03.470+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/14017425","id":"14017425","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user nathanmarz commented on the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#issuecomment-45056169\n  \n    Great work @clockfly. The only additional change I'd like to see is renaming \"worker.receiver.thread.count\" to \"topology.worker.receiver.thread.count\". The \"topology\" prefix is how we indicate confs can be set on a topology-specific level. After that I'm +1. \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-06-04T06:38:41.888+0000","updated":"2014-06-04T06:38:41.888+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/14017428","id":"14017428","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user Gvain commented on the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#issuecomment-45056355\n  \n    @clockfly \n    \n    Thanks for your detailed test. But notice that there is a big difference between our test results. \n    In my test, only using 8 workers, i get the throughput peak which is 656K tps, and adding more workers the throughput drops down. \n    In your test, adding more worker helps increasing throughput, and the throughput peak reached 622K tps when using 24 workers. The worker number is greatly increased and thus the total threads number.\n    \n    I am wondering why this difference exists. \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-06-04T06:42:06.310+0000","updated":"2014-06-04T06:42:06.310+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/14017459","id":"14017459","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user miguno commented on the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#issuecomment-45060188\n  \n    @clockfly Beyond the specific work on this item (STORM-297) what would be your lessons learned after having investigated Storm's performance and scalability so closely, i.e. with regards to potential bottlenecks (= things that are broken and that need fixing) or areas where we still have untapped potential (= where we could optimize further, maybe simply because we haven't focused on a particular piece of the architecture/code/... yet)?\n    \n    For instance, would you say that there are some general design-related decisions that could put an upper bound on Storm's scalability (in theory and/or in practice)?  Or would you say it is, at least at this point in time, more the current implementation of the design?  Just thinking aloud.\n    \n    I'd appreciate any comments -- positive or negative -- you might have in this context.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-06-04T07:41:12.894+0000","updated":"2014-06-04T07:41:12.894+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/14017537","id":"14017537","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user clockfly commented on the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#issuecomment-45072821\n  \n    @Gvain,\n    \n    There are two parts in your question,\n    \n    1. In your test, why throughput drops when worker number increase after reaching a value(8 in your test case)? \n      \n       For this one, it is because your CPU reach limit for worker# = 8 (CPU usage: 89%), In this case, adding more workers will just adding more threads and context switch, hurting performance. While for my case, I have more powerful CPU, and allow more parallel workers.\n    \n    2. why there are performance difference when scaling worker# from 4 to 8, in two different  environment?\n    \n      I don't know the answer. But I guess it may be caused by the difference in hardware. You env is  \"bonded 1Gb network card\"(2Gb)  bandwith is twice mine, and CPU is 24 core, half of mine. \n    \n      Suppose we can model the message transfering pipeline as three layers:\n    \n      netty layer(throughput somewhat impacted by NIC bandwidth) -> intermediate layer( worker intermediate receiving pipes: netty server handler -> decoding-> receiver thread ) -> task processing (througput impact by CPU).\n    \n      For your env, CPU is relative at shortage, effective network bandwidth is rich(effective bandwith is measured by theory_bandwidth * network_efficiency_factor), the performance is throttled by the last layer. While for my environment, CPU is rich, effective network bandwidth is not enough(due to theory_bandwidth is only half), the performance is throttled by the first two layers. \n    \n      The patch mainly solved the first two layers.\n    \n      1. Change netty Api from async -> sync and messaging API change will improve the network_efficiency_factor, thus increasing the effective network bandwidth.\n    \n      2. Adding more receiver thread and optimization in netty server handler will improve the second layer throughput.\n\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-06-04T10:03:34.660+0000","updated":"2014-06-04T10:03:34.660+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/14017695","id":"14017695","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user Gvain commented on the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#issuecomment-45091025\n  \n    @clockfly \n    \n    Thanks for your explanation. The explanation for part 2 seems not so convincing as the CPU and network are not saturated at both env when scaling worker# from 4 to 8. Oops, I don't wanna go any further on this. \n    \n    Anyway, your work is really great.\n    \n    Another thing. Since you use netty to send message in a async way, how can you ensure that  all messages emitted from a fast component are received by a slow component without any loss especially under heavy throughput without any ackers enabled ? To my knowledge, the netty channel may not be writable, and pendings count will increase.       \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-06-04T13:38:01.995+0000","updated":"2014-06-04T13:38:01.995+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/14017702","id":"14017702","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user Gvain commented on a diff in the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#discussion_r13386178\n  \n    --- Diff: storm-core/src/jvm/backtype/storm/messaging/netty/Client.java ---\n    @@ -128,133 +185,114 @@ private long getSleepTimeMs()\n         }\n     \n         /**\n    -     * Enqueue a task message to be sent to server\n    +     * Enqueue task messages to be sent to server\n          */\n    -    public void send(int task, byte[] message) {\n    -        //throw exception if the client is being closed\n    -        if (being_closed.get()) {\n    +    synchronized public void send(Iterator<TaskMessage> msgs) {\n    +\n    +        // throw exception if the client is being closed\n    +        if (closing) {\n                 throw new RuntimeException(\"Client is being closed, and does not take requests any more\");\n             }\n    -\n    -        try {\n    -            message_queue.put(new TaskMessage(task, message));\n    -\n    -            //resume delivery if it is waiting for requests\n    -            tryDeliverMessages(true);\n    -        } catch (InterruptedException e) {\n    -            throw new RuntimeException(e);\n    +        \n    +        if (null == msgs || !msgs.hasNext()) {\n    +            return;\n             }\n    -    }\n    -\n    -    /**\n    -     * Retrieve messages from queue, and delivery to server if any\n    -     */\n    -    synchronized void tryDeliverMessages(boolean only_if_waiting) throws InterruptedException {\n    -        //just skip if delivery only if waiting, and we are not waiting currently\n    -        if (only_if_waiting && !wait_for_requests)  return;\n     \n    -        //make sure that channel was not closed\n             Channel channel = channelRef.get();\n    -        if (channel == null)  return;\n    -        if (!channel.isOpen()) {\n    -            LOG.info(\"Channel to {} is no longer open.\",remote_addr);\n    -            //The channel is not open yet. Reconnect?\n    -            reconnect();\n    -            return;\n    +        if (null == channel) {\n    +            connect();\n    +            channel = channelRef.get();\n             }\n     \n    -        final MessageBatch requests = tryTakeMessages();\n    -        if (requests==null) {\n    -            wait_for_requests = true;\n    -            return;\n    -        }\n    +        while (msgs.hasNext()) {\n    +            TaskMessage message = msgs.next();\n    +            if (null == messageBatch) {\n    +                messageBatch = new MessageBatch(messageBatchSize);\n    +            }\n     \n    -        //if channel is being closed and we have no outstanding messages,  let's close the channel\n    -        if (requests.isEmpty() && being_closed.get()) {\n    -            close_n_release();\n    -            return;\n    +            messageBatch.add(message);\n    +            if (messageBatch.isFull()) {\n    +                MessageBatch toBeFlushed = messageBatch;\n    +                flushRequest(channel, toBeFlushed);\n    --- End diff --\n    \n    What if channel is not writable ? Furthermore, what if messageBatch continuous being filled up under heavy throughput while channel is still not writable as connected peer is a slow component ? \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-06-04T13:44:07.221+0000","updated":"2014-06-04T13:44:07.221+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/14018825","id":"14018825","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user clockfly commented on the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#issuecomment-45226047\n  \n    @miguno, there are several more observations I have\n    \n    1.\tNetwork still not efficient enough\n    \n      We can see from the test report, after this fix, the throughput is still bottlenecked by network(CPU: 72%, network: 45%), because there are still margins in the CPU(28%). That’s weird because only 45% of theory network bandwidth is used.\n    \n    2.\tUneven machine message receive latency\n    \n      In the experiment, I noticed that there are always some machine whose message receive latency is much higher than the others. For example, tuples generated from machine A, are sent to tasks on machine B, C, D, in one run, tasks on B take more time to receive messages, in another run, D may be the slowest.\n    \n      My guess is that some machine has a longer netty receiver queue than the other machines, and the queue length on all machines becomes stable but not equal after some time(new input = new output) . The latency is different because queue length is different. Changing max.spout.pending won’t improve this, because it only control overall message sent from A, it doesn’t treat B, C, D differently.\n    \n    3. better max.spout.pending?\n    I observed, after we tune max.spout.pending to a big enough value, increasing max.spout.pending will only add to latency but not throughput. When spout.pending doubles, the latency doubles.\n    \n      Can we do flow control adaptively so that we stops when there is no further benefit to continue increasing max.spout.pending?\n    \n    4.\tPotential deadlock when all intermediate buffer is full\n    \n      Consider two worker, task1(workerA) deliver message to task3(workerB), task3 deliver to task2(workerA). There is a loop! It is possible that all worker sender/receiver buffer will be full and block. \n    \n      ![vvvv](https://cloud.githubusercontent.com/assets/2595532/3188775/ba645bdc-ecbd-11e3-959b-dfb8208d4d1b.png)\n    \n      The current work-around in storm is tricky, it use a unbounded receiver buffer(LinkedBlockingQueue) for each worker to break the loop. But this is not good, because the receiver buffer can potentially be very long, and latency be very high.\n    \n    5.\tIs it necessary for each task to have a dedicated send queue thread?\n      Currently, each task has a dedicated send queue thread to push data to worker transfer queue. During the profiling, the task send queue thread is usually at wait state. Maybe it is a good idea to use a shared thread pool replace dedicated thread?\n    \n    6.\tAcker workload very high.\n      In the test, I spotted that the acker task is very busy. As each message size is small(100 byte), there are hugh amout of tuples need to be acked. \n    \n      Can this acker cost be reduced? \n    \n      For example, we can group the tuple at spout to time slice, and each time slice will share a same root tuple Id. For example, the time slice can be 100ms, and there are 10, 000 message in this slice, all share same root id, before sending to acker task, we can first XOR all acker message of same root Id locally on each worker. In that case, we may can reduce the acking network and task cost. The drawback is that when a message is lost, we need to reply all message in this slice.\n    \n    7.\tWorker receive thread blocked by task receiver queue\n    \n      In worker receiver thread, it will try to publish the messages to the receive queue of each task sequentially in a blocking way. If one task receiver queue is full, the thread will block and wait.\n\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-06-05T14:29:59.087+0000","updated":"2014-06-05T14:29:59.087+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/14018831","id":"14018831","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user clockfly commented on a diff in the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#discussion_r13443448\n  \n    --- Diff: storm-core/src/jvm/backtype/storm/messaging/netty/Client.java ---\n    @@ -128,133 +185,114 @@ private long getSleepTimeMs()\n         }\n     \n         /**\n    -     * Enqueue a task message to be sent to server\n    +     * Enqueue task messages to be sent to server\n          */\n    -    public void send(int task, byte[] message) {\n    -        //throw exception if the client is being closed\n    -        if (being_closed.get()) {\n    +    synchronized public void send(Iterator<TaskMessage> msgs) {\n    +\n    +        // throw exception if the client is being closed\n    +        if (closing) {\n                 throw new RuntimeException(\"Client is being closed, and does not take requests any more\");\n             }\n    -\n    -        try {\n    -            message_queue.put(new TaskMessage(task, message));\n    -\n    -            //resume delivery if it is waiting for requests\n    -            tryDeliverMessages(true);\n    -        } catch (InterruptedException e) {\n    -            throw new RuntimeException(e);\n    +        \n    +        if (null == msgs || !msgs.hasNext()) {\n    +            return;\n             }\n    -    }\n    -\n    -    /**\n    -     * Retrieve messages from queue, and delivery to server if any\n    -     */\n    -    synchronized void tryDeliverMessages(boolean only_if_waiting) throws InterruptedException {\n    -        //just skip if delivery only if waiting, and we are not waiting currently\n    -        if (only_if_waiting && !wait_for_requests)  return;\n     \n    -        //make sure that channel was not closed\n             Channel channel = channelRef.get();\n    -        if (channel == null)  return;\n    -        if (!channel.isOpen()) {\n    -            LOG.info(\"Channel to {} is no longer open.\",remote_addr);\n    -            //The channel is not open yet. Reconnect?\n    -            reconnect();\n    -            return;\n    +        if (null == channel) {\n    +            connect();\n    +            channel = channelRef.get();\n             }\n     \n    -        final MessageBatch requests = tryTakeMessages();\n    -        if (requests==null) {\n    -            wait_for_requests = true;\n    -            return;\n    -        }\n    +        while (msgs.hasNext()) {\n    +            TaskMessage message = msgs.next();\n    +            if (null == messageBatch) {\n    +                messageBatch = new MessageBatch(messageBatchSize);\n    +            }\n     \n    -        //if channel is being closed and we have no outstanding messages,  let's close the channel\n    -        if (requests.isEmpty() && being_closed.get()) {\n    -            close_n_release();\n    -            return;\n    +            messageBatch.add(message);\n    +            if (messageBatch.isFull()) {\n    +                MessageBatch toBeFlushed = messageBatch;\n    +                flushRequest(channel, toBeFlushed);\n    --- End diff --\n    \n    @Gvain,\n    \n    For an unacked topology, we can either block, drop, or store. before this patch, storm will always store, so there are potential OOM like you described. this patch steps a bit forward, if the downstream machine is down, it will block the upstream from sending thus avoiding OOM. \n    \n    But for the case you mentioned, the downsteam is slow, but not down, it is possible that there will be more message pending at the netty client side or server side. If the network is OK, then it will pend on the server side, if the network is overwhelmed, then the message will be pending at the netty client side. \n    \n    An example is that the spout crazyly generate really big message, but the bandwidth is not enough, it will lead to OOM on the spout worker JVM, and nothing can stop that.\n    \n    Bobby's comment mentioned a similar situation https://github.com/apache/incubator-storm/pull/103#issuecomment-43632986, \n    \n    We should allow user to config to drop message in this case, thus avoiding OOM,  this bug is filed at followup jira https://issues.apache.org/jira/browse/STORM-329 after discussion with Bobby.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-06-05T14:48:30.336+0000","updated":"2014-06-05T14:48:30.336+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/14019611","id":"14019611","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user Gvain commented on a diff in the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#discussion_r13477759\n  \n    --- Diff: storm-core/src/jvm/backtype/storm/messaging/netty/Client.java ---\n    @@ -128,133 +185,114 @@ private long getSleepTimeMs()\n         }\n     \n         /**\n    -     * Enqueue a task message to be sent to server\n    +     * Enqueue task messages to be sent to server\n          */\n    -    public void send(int task, byte[] message) {\n    -        //throw exception if the client is being closed\n    -        if (being_closed.get()) {\n    +    synchronized public void send(Iterator<TaskMessage> msgs) {\n    +\n    +        // throw exception if the client is being closed\n    +        if (closing) {\n                 throw new RuntimeException(\"Client is being closed, and does not take requests any more\");\n             }\n    -\n    -        try {\n    -            message_queue.put(new TaskMessage(task, message));\n    -\n    -            //resume delivery if it is waiting for requests\n    -            tryDeliverMessages(true);\n    -        } catch (InterruptedException e) {\n    -            throw new RuntimeException(e);\n    +        \n    +        if (null == msgs || !msgs.hasNext()) {\n    +            return;\n             }\n    -    }\n    -\n    -    /**\n    -     * Retrieve messages from queue, and delivery to server if any\n    -     */\n    -    synchronized void tryDeliverMessages(boolean only_if_waiting) throws InterruptedException {\n    -        //just skip if delivery only if waiting, and we are not waiting currently\n    -        if (only_if_waiting && !wait_for_requests)  return;\n     \n    -        //make sure that channel was not closed\n             Channel channel = channelRef.get();\n    -        if (channel == null)  return;\n    -        if (!channel.isOpen()) {\n    -            LOG.info(\"Channel to {} is no longer open.\",remote_addr);\n    -            //The channel is not open yet. Reconnect?\n    -            reconnect();\n    -            return;\n    +        if (null == channel) {\n    +            connect();\n    +            channel = channelRef.get();\n             }\n     \n    -        final MessageBatch requests = tryTakeMessages();\n    -        if (requests==null) {\n    -            wait_for_requests = true;\n    -            return;\n    -        }\n    +        while (msgs.hasNext()) {\n    +            TaskMessage message = msgs.next();\n    +            if (null == messageBatch) {\n    +                messageBatch = new MessageBatch(messageBatchSize);\n    +            }\n     \n    -        //if channel is being closed and we have no outstanding messages,  let's close the channel\n    -        if (requests.isEmpty() && being_closed.get()) {\n    -            close_n_release();\n    -            return;\n    +            messageBatch.add(message);\n    +            if (messageBatch.isFull()) {\n    +                MessageBatch toBeFlushed = messageBatch;\n    +                flushRequest(channel, toBeFlushed);\n    --- End diff --\n    \n    @clockfly \n    \n    Thanks for your remind. \n    For an unacked topology. Before your patch, the OOM problem do exists, and I filed it at https://issues.apache.org/jira/browse/STORM-339\n    \n    After your patch, this OOM problem seems still exists just as what you said and filed up at jira https://issues.apache.org/jira/browse/STORM-329. Now, we are stuck on this as we are using unacked topology under heavy throughput, so shall we make this issue's priority higher and fix it in time ?   \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-06-06T06:21:36.425+0000","updated":"2014-06-06T06:21:36.425+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/14019669","id":"14019669","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user clockfly commented on a diff in the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#discussion_r13480579\n  \n    --- Diff: storm-core/src/jvm/backtype/storm/messaging/netty/Client.java ---\n    @@ -128,133 +185,114 @@ private long getSleepTimeMs()\n         }\n     \n         /**\n    -     * Enqueue a task message to be sent to server\n    +     * Enqueue task messages to be sent to server\n          */\n    -    public void send(int task, byte[] message) {\n    -        //throw exception if the client is being closed\n    -        if (being_closed.get()) {\n    +    synchronized public void send(Iterator<TaskMessage> msgs) {\n    +\n    +        // throw exception if the client is being closed\n    +        if (closing) {\n                 throw new RuntimeException(\"Client is being closed, and does not take requests any more\");\n             }\n    -\n    -        try {\n    -            message_queue.put(new TaskMessage(task, message));\n    -\n    -            //resume delivery if it is waiting for requests\n    -            tryDeliverMessages(true);\n    -        } catch (InterruptedException e) {\n    -            throw new RuntimeException(e);\n    +        \n    +        if (null == msgs || !msgs.hasNext()) {\n    +            return;\n             }\n    -    }\n    -\n    -    /**\n    -     * Retrieve messages from queue, and delivery to server if any\n    -     */\n    -    synchronized void tryDeliverMessages(boolean only_if_waiting) throws InterruptedException {\n    -        //just skip if delivery only if waiting, and we are not waiting currently\n    -        if (only_if_waiting && !wait_for_requests)  return;\n     \n    -        //make sure that channel was not closed\n             Channel channel = channelRef.get();\n    -        if (channel == null)  return;\n    -        if (!channel.isOpen()) {\n    -            LOG.info(\"Channel to {} is no longer open.\",remote_addr);\n    -            //The channel is not open yet. Reconnect?\n    -            reconnect();\n    -            return;\n    +        if (null == channel) {\n    +            connect();\n    +            channel = channelRef.get();\n             }\n     \n    -        final MessageBatch requests = tryTakeMessages();\n    -        if (requests==null) {\n    -            wait_for_requests = true;\n    -            return;\n    -        }\n    +        while (msgs.hasNext()) {\n    +            TaskMessage message = msgs.next();\n    +            if (null == messageBatch) {\n    +                messageBatch = new MessageBatch(messageBatchSize);\n    +            }\n     \n    -        //if channel is being closed and we have no outstanding messages,  let's close the channel\n    -        if (requests.isEmpty() && being_closed.get()) {\n    -            close_n_release();\n    -            return;\n    +            messageBatch.add(message);\n    +            if (messageBatch.isFull()) {\n    +                MessageBatch toBeFlushed = messageBatch;\n    +                flushRequest(channel, toBeFlushed);\n    --- End diff --\n    \n    @Gvain,\n    \n    Unacked topology with no flow control is dangerous! \n    \n    There are two concepts, flow control and error control. You don't want acker for its performance penalty, that is no error control. But you do need flow control.\n    \n    But the fact is that current storm flow control method \"max.spout.pending\" depends on error control channel \"acker\", that is the dilemma. Maybe we should seperate \"max.spout.pending\" from error control channel \"acker\" and only serves for flow control.\n    \n    One work-around is that when you emit a message with SpoutOutputCollector, you emit a id with a sampling rate, for example 1%.\n    \n    collector.emit(tuple, messageId), \n    \n    only 1% tuple has messageId, while 99% don't have.\n    \n    In this case, you only have 1% acker traffic, reducing the performance penalty of acker, while still have some basic flow control.\n    \n    Hope this helps!\n    \n    \n     \n    \n    \n\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-06-06T08:32:02.868+0000","updated":"2014-06-06T08:32:02.868+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/14019774","id":"14019774","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user Gvain commented on a diff in the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#discussion_r13485764\n  \n    --- Diff: storm-core/src/jvm/backtype/storm/messaging/netty/Client.java ---\n    @@ -128,133 +185,114 @@ private long getSleepTimeMs()\n         }\n     \n         /**\n    -     * Enqueue a task message to be sent to server\n    +     * Enqueue task messages to be sent to server\n          */\n    -    public void send(int task, byte[] message) {\n    -        //throw exception if the client is being closed\n    -        if (being_closed.get()) {\n    +    synchronized public void send(Iterator<TaskMessage> msgs) {\n    +\n    +        // throw exception if the client is being closed\n    +        if (closing) {\n                 throw new RuntimeException(\"Client is being closed, and does not take requests any more\");\n             }\n    -\n    -        try {\n    -            message_queue.put(new TaskMessage(task, message));\n    -\n    -            //resume delivery if it is waiting for requests\n    -            tryDeliverMessages(true);\n    -        } catch (InterruptedException e) {\n    -            throw new RuntimeException(e);\n    +        \n    +        if (null == msgs || !msgs.hasNext()) {\n    +            return;\n             }\n    -    }\n    -\n    -    /**\n    -     * Retrieve messages from queue, and delivery to server if any\n    -     */\n    -    synchronized void tryDeliverMessages(boolean only_if_waiting) throws InterruptedException {\n    -        //just skip if delivery only if waiting, and we are not waiting currently\n    -        if (only_if_waiting && !wait_for_requests)  return;\n     \n    -        //make sure that channel was not closed\n             Channel channel = channelRef.get();\n    -        if (channel == null)  return;\n    -        if (!channel.isOpen()) {\n    -            LOG.info(\"Channel to {} is no longer open.\",remote_addr);\n    -            //The channel is not open yet. Reconnect?\n    -            reconnect();\n    -            return;\n    +        if (null == channel) {\n    +            connect();\n    +            channel = channelRef.get();\n             }\n     \n    -        final MessageBatch requests = tryTakeMessages();\n    -        if (requests==null) {\n    -            wait_for_requests = true;\n    -            return;\n    -        }\n    +        while (msgs.hasNext()) {\n    +            TaskMessage message = msgs.next();\n    +            if (null == messageBatch) {\n    +                messageBatch = new MessageBatch(messageBatchSize);\n    +            }\n     \n    -        //if channel is being closed and we have no outstanding messages,  let's close the channel\n    -        if (requests.isEmpty() && being_closed.get()) {\n    -            close_n_release();\n    -            return;\n    +            messageBatch.add(message);\n    +            if (messageBatch.isFull()) {\n    +                MessageBatch toBeFlushed = messageBatch;\n    +                flushRequest(channel, toBeFlushed);\n    --- End diff --\n    \n    @clockfly\n    \n    Shall we just use a limited size of message queue in netty-client, if the queue is full, we can block or drop until channel has flushed away some pending messages. The strategy can be configurable just as https://issues.apache.org/jira/browse/STORM-329 described.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-06-06T11:41:51.507+0000","updated":"2014-06-06T11:41:51.507+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/14019833","id":"14019833","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user clockfly commented on a diff in the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#discussion_r13488844\n  \n    --- Diff: storm-core/src/jvm/backtype/storm/messaging/netty/Client.java ---\n    @@ -128,133 +185,114 @@ private long getSleepTimeMs()\n         }\n     \n         /**\n    -     * Enqueue a task message to be sent to server\n    +     * Enqueue task messages to be sent to server\n          */\n    -    public void send(int task, byte[] message) {\n    -        //throw exception if the client is being closed\n    -        if (being_closed.get()) {\n    +    synchronized public void send(Iterator<TaskMessage> msgs) {\n    +\n    +        // throw exception if the client is being closed\n    +        if (closing) {\n                 throw new RuntimeException(\"Client is being closed, and does not take requests any more\");\n             }\n    -\n    -        try {\n    -            message_queue.put(new TaskMessage(task, message));\n    -\n    -            //resume delivery if it is waiting for requests\n    -            tryDeliverMessages(true);\n    -        } catch (InterruptedException e) {\n    -            throw new RuntimeException(e);\n    +        \n    +        if (null == msgs || !msgs.hasNext()) {\n    +            return;\n             }\n    -    }\n    -\n    -    /**\n    -     * Retrieve messages from queue, and delivery to server if any\n    -     */\n    -    synchronized void tryDeliverMessages(boolean only_if_waiting) throws InterruptedException {\n    -        //just skip if delivery only if waiting, and we are not waiting currently\n    -        if (only_if_waiting && !wait_for_requests)  return;\n     \n    -        //make sure that channel was not closed\n             Channel channel = channelRef.get();\n    -        if (channel == null)  return;\n    -        if (!channel.isOpen()) {\n    -            LOG.info(\"Channel to {} is no longer open.\",remote_addr);\n    -            //The channel is not open yet. Reconnect?\n    -            reconnect();\n    -            return;\n    +        if (null == channel) {\n    +            connect();\n    +            channel = channelRef.get();\n             }\n     \n    -        final MessageBatch requests = tryTakeMessages();\n    -        if (requests==null) {\n    -            wait_for_requests = true;\n    -            return;\n    -        }\n    +        while (msgs.hasNext()) {\n    +            TaskMessage message = msgs.next();\n    +            if (null == messageBatch) {\n    +                messageBatch = new MessageBatch(messageBatchSize);\n    +            }\n     \n    -        //if channel is being closed and we have no outstanding messages,  let's close the channel\n    -        if (requests.isEmpty() && being_closed.get()) {\n    -            close_n_release();\n    -            return;\n    +            messageBatch.add(message);\n    +            if (messageBatch.isFull()) {\n    +                MessageBatch toBeFlushed = messageBatch;\n    +                flushRequest(channel, toBeFlushed);\n    --- End diff --\n    \n    Yes, that is what storm-329 want to do. But it may require more thoughts, because introducing another blocking buffer have performance penalty, and may cause deadlock. \n    \n    I think for your unacked topology, the more reasonable method is to introduce a flow control mechanism. Let's have more disucssion in the thread of STORM-329. \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-06-06T13:19:33.535+0000","updated":"2014-06-06T13:19:33.535+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/14020045","id":"14020045","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user revans2 commented on the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#issuecomment-45360004\n  \n    @clockfly and everyone else I love the discussion that is happening here.  I think the code is now at a point where we can merge it in (2 binding +1s), and continue the discussion and development on separate JIRAs.   I tried to go through all of the comments and most of what is left is around possible improvements that are still remaining, but nothing blocking.  If anyone disagrees or has issues they have seen, but not expressed yet please speak up.  Otherwise I plan to merge this in later today.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-06-06T17:00:37.844+0000","updated":"2014-06-06T17:00:37.844+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/14020092","id":"14020092","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user ptgoetz commented on the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#issuecomment-45362633\n  \n    +1\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-06-06T17:26:40.306+0000","updated":"2014-06-06T17:26:40.306+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/14020441","id":"14020441","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user miguno commented on the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#issuecomment-45389078\n  \n    +1\n    \n    > On 06.06.2014, at 19:00, \"Robert (Bobby) Evans\" <notifications@github.com> wrote:\n    > \n    > @clockfly and everyone else I love the discussion that is happening here. I think the code is now at a point where we can merge it in (2 binding +1s), and continue the discussion and development on separate JIRAs. I tried to go through all of the comments and most of what is left is around possible improvements that are still remaining, but nothing blocking. If anyone disagrees or has issues they have seen, but not expressed yet please speak up. Otherwise I plan to merge this in later today.\n    > \n    > —\n    > Reply to this email directly or view it on GitHub.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-06-06T22:06:27.005+0000","updated":"2014-06-06T22:06:27.005+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/14020849","id":"14020849","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user revans2 commented on the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#issuecomment-45413255\n  \n    I tried to merge the pull request into master, and the tests are now failing with the following in the logs (on my mac)\n    ```\n    134871 [Thread-1250-disruptor-worker-transfer-queue] INFO  backtype.storm.util - Halting process: (\"Async loop died!\")\n    ```\n    \n    I have not tried it on Linux, but the tests all pass on master.  @clockfly could you please look into it.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-06-07T15:44:46.055+0000","updated":"2014-06-07T15:44:46.055+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/14020862","id":"14020862","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user clockfly commented on the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#issuecomment-45413952\n  \n    Test pass on my machine,\n    Tests run: 157, Assertions: 101461, Failures: 0, Errors: 0\n    \n    There should have a stacktrace in the log file, it can searched by using \"Async loop died!\" without \"Halting process\"\n    \n                        (catch Throwable t\n                          (log-error t \"Async loop died!\")\n                          (kill-fn t)\n                          ))\n    \n\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-06-07T16:09:38.917+0000","updated":"2014-06-07T16:09:38.917+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/14020867","id":"14020867","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user revans2 commented on the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#issuecomment-45414150\n  \n    OK I'll try to look into it on my side then.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-06-07T16:17:30.113+0000","updated":"2014-06-07T16:17:30.113+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/14020872","id":"14020872","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user clockfly commented on the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#issuecomment-45414524\n  \n    @Bobby, I reproduced this. It is random. I will look into this, thanks.\n    \n    Seems the Netty Client is closed before worker transfer thread is closed.\n    So, transfer thread got an exception.\n    \n    137917 [Thread-549-disruptor-worker-transfer-queue] ERROR backtype.storm.util - Async loop died!\n    java.lang.RuntimeException: java.lang.RuntimeException: Client is being closed, and does not take requests any more\n    \tat backtype.storm.utils.DisruptorQueue.consumeBatchToCursor(DisruptorQueue.java:114) ~[classes/:na]\n    \tat backtype.storm.utils.DisruptorQueue.consumeBatchWhenAvailable(DisruptorQueue.java:85) ~[classes/:na]\n    \tat backtype.storm.disruptor$consume_batch_when_available.invoke(disruptor.clj:78) ~[classes/:na]\n    \tat backtype.storm.disruptor$consume_loop_STAR_$fn__2895.invoke(disruptor.clj:89) ~[classes/:na]\n    \tat backtype.storm.util$async_loop$fn__442.invoke(util.clj:434) ~[classes/:na]\n    \tat clojure.lang.AFn.run(AFn.java:24) [clojure-1.4.0.jar:na]\n    \tat java.lang.Thread.run(Thread.java:679) [na:1.6.0_22]\n    Caused by: java.lang.RuntimeException: Client is being closed, and does not take requests any more\n    \tat backtype.storm.messaging.netty.Client.send(Client.java:194) ~[classes/:na]\n    \tat backtype.storm.utils.TransferDrainer.send(TransferDrainer.java:54) ~[classes/:na]\n    \tat backtype.storm.daemon.worker$mk_transfer_tuples_handler$fn__5765$fn__5766.invoke(worker.clj:322) ~[classes/:na]\n    \tat backtype.storm.daemon.worker$mk_transfer_tuples_handler$fn__5765.invoke(worker.clj:320) ~[classes/:na]\n    \tat backtype.storm.disruptor$clojure_handler$reify__2882.onEvent(disruptor.clj:59) ~[classes/:na]\n    \tat backtype.storm.utils.DisruptorQueue.consumeBatchToCursor(DisruptorQueue.java:111) ~[classes/:na]\n    \t... 6 common frames omitted\n\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-06-07T16:31:34.673+0000","updated":"2014-06-07T16:31:34.673+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/14020894","id":"14020894","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user clockfly commented on the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#issuecomment-45416875\n  \n    fixed.\n    \n    The failed case is under namespace: backtype.storm.messaging-test\n    \n    root cause:\n    The test failure is caused by the bug of local topology simulation. funtion complete-topology will asume topology is finished after all spout return, but it is not always true, the downstream bolts may be still working.\n    \n    direct cause:\n    complete-topology->all spout finish -> shutdown the topology->shutdown worker->shutdown netty client -> bolt still not finished -> bolt try to send mesage to netty client -> client already shutdown -> throw runtime exception.\n    \n    the fix is to add a config to allow this topology to wait a longer time to be killed.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-06-07T18:03:57.657+0000","updated":"2014-06-07T18:03:57.657+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/14020922","id":"14020922","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user nathanmarz commented on the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#issuecomment-45418252\n  \n    -1 Tests should never, ever rely on timing in order to pass. This is the whole reason for doing time simulation in the first place, so that when functionality depends on time it can be properly tested without having to worry about random delays messing up the tests. \n    \n    complete-topology is inherently reliant on detecting topology completion based on the spout saying all its tuples are \"complete\". If you're testing topologies that don't do full tuple acking, then you should be testing using the \"tracked topologies\" utilities in backtype.storm.testing.clj\n    \n    For example, here is how the acking system is tested using tracked topologies: https://github.com/apache/incubator-storm/blob/master/storm-core/test/clj/backtype/storm/integration_test.clj#L213\n    \n    The \"tracked-wait\" function is the key which will only return when both that many tuples have been emitted by the spouts AND the topology is idle (no tuples have been emitted nor will be emitted without further input) You shouldn't use tracked-topologies for topologies that have tick tuples, but that shouldn't be a problem in this case.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-06-07T18:59:01.353+0000","updated":"2014-06-07T18:59:01.353+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/14020940","id":"14020940","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user nathanmarz commented on the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#issuecomment-45419054\n  \n    Additionally, besides having the potential to fail randomly inserting sleeps into test code also slows down the tests.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-06-07T19:32:57.322+0000","updated":"2014-06-07T19:32:57.322+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/14020943","id":"14020943","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user clockfly commented on the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#issuecomment-45419642\n  \n    fixed\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-06-07T19:56:24.901+0000","updated":"2014-06-07T19:56:24.901+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/14021305","id":"14021305","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user nathanmarz commented on the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#issuecomment-45447183\n  \n    +1\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-06-08T20:14:32.450+0000","updated":"2014-06-08T20:14:32.450+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/14021328","id":"14021328","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user miguno commented on the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#issuecomment-45448273\n  \n    FYI: I'll add Nathan's comment on our test methodology to DEVELOPER.md.\n    \n    \n    > On 07.06.2014, at 20:59, Nathan Marz <notifications@github.com> wrote:\n    > \n    > -1 Tests should never, ever rely on timing in order to pass. This is the whole reason for doing time simulation in the first place, so that when functionality depends on time it can be properly tested without having to worry about random delays messing up the tests.\n    > \n    > complete-topology is inherently reliant on detecting topology completion based on the spout saying all its tuples are \"complete\". If you're testing topologies that don't do full tuple acking, then you should be testing using the \"tracked topologies\" utilities in backtype.storm.testing.clj\n    > \n    > For example, here is how the acking system is tested using tracked topologies: https://github.com/apache/incubator-storm/blob/master/storm-core/test/clj/backtype/storm/integration_test.clj#L213\n    > \n    > The \"tracked-wait\" function is the key which will only return when both that many tuples have been emitted by the spouts AND the topology is idle (no tuples have been emitted nor will be emitted without further input) You shouldn't use tracked-topologies for topologies that have tick tuples, but that shouldn't be a problem in this case.\n    > \n    > —\n    > Reply to this email directly or view it on GitHub.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-06-08T20:54:57.751+0000","updated":"2014-06-08T20:54:57.751+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/14025194","id":"14025194","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user revans2 commented on the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#issuecomment-45491833\n  \n    +1 for me too. The tests passed 3 times in a row, and the changes look good. I'll merge this into trunk now.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-06-09T13:47:21.459+0000","updated":"2014-06-09T13:47:21.459+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/14025195","id":"14025195","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user asfgit closed the pull request at:\n\n    https://github.com/apache/incubator-storm/pull/103\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-06-09T13:48:29.885+0000","updated":"2014-06-09T13:48:29.885+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/14025197","id":"14025197","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user clockfly commented on the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#issuecomment-45492048\n  \n    Thank you all!\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-06-09T13:49:36.063+0000","updated":"2014-06-09T13:49:36.063+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/14025198","id":"14025198","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=revans2","name":"revans2","key":"revans2","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Robert Joseph Evans","active":true,"timeZone":"America/Chicago"},"body":"Merged this into master","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=revans2","name":"revans2","key":"revans2","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Robert Joseph Evans","active":true,"timeZone":"America/Chicago"},"created":"2014-06-09T13:49:56.838+0000","updated":"2014-06-09T13:49:56.838+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/14025209","id":"14025209","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user revans2 commented on the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#issuecomment-45494371\n  \n    @clockfly thank you.  This was a huge amount of work, and should make a big difference.  Hopefully you can continue to help improve/support storm going forward.  \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-06-09T14:11:48.287+0000","updated":"2014-06-09T14:11:48.287+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/14026220","id":"14026220","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user miguno commented on the pull request:\n\n    https://github.com/apache/incubator-storm/pull/103#issuecomment-45583294\n  \n    Thanks, @clockfly!\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2014-06-10T07:47:39.720+0000","updated":"2014-06-10T07:47:39.720+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/14638772","id":"14638772","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jia.fu","name":"jia.fu","key":"jia.fu","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"jia.fu","active":true,"timeZone":"Asia/Chongqing"},"body":"I meet this issue yet .anyone has a  solution on production storm cluster ?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jia.fu","name":"jia.fu","key":"jia.fu","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"jia.fu","active":true,"timeZone":"Asia/Chongqing"},"created":"2015-07-23T13:07:17.549+0000","updated":"2015-07-23T13:10:40.102+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12710489/comment/14639778","id":"14639778","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mauzhang","name":"mauzhang","key":"mauzhang","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Manu Zhang","active":true,"timeZone":"Asia/Shanghai"},"body":"[~jia.fu] This jira is resolved. You can get help on the user or dev list with detailed description of your issue.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mauzhang","name":"mauzhang","key":"mauzhang","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Manu Zhang","active":true,"timeZone":"Asia/Shanghai"},"created":"2015-07-24T01:20:06.390+0000","updated":"2015-07-24T01:20:06.390+0000"}],"maxResults":135,"total":135,"startAt":0},"votes":{"self":"https://issues.apache.org/jira/rest/api/2/issue/STORM-297/votes","votes":3,"hasVoted":false},"worklog":{"startAt":0,"maxResults":20,"total":0,"worklogs":[]},"customfield_12311820":"0|i1uz3b:"}}