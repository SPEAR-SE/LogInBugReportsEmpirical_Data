{"expand":"renderedFields,names,schema,operations,editmeta,changelog,versionedRepresentations","id":"13092368","self":"https://issues.apache.org/jira/rest/api/2/issue/13092368","key":"STORM-2678","fields":{"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype","name":"Bug","subtask":false,"avatarId":21133},"timespent":13800,"project":{"self":"https://issues.apache.org/jira/rest/api/2/project/12314820","id":"12314820","key":"STORM","name":"Apache Storm","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/projectavatar?pid=12314820&avatarId=21667","24x24":"https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12314820&avatarId=21667","16x16":"https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12314820&avatarId=21667","32x32":"https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12314820&avatarId=21667"},"projectCategory":{"self":"https://issues.apache.org/jira/rest/api/2/projectCategory/13260","id":"13260","description":"Apache Storm Related","name":"Storm"}},"fixVersions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12334657","id":"12334657","name":"2.0.0","archived":false,"released":false}],"aggregatetimespent":13800,"resolution":{"self":"https://issues.apache.org/jira/rest/api/2/resolution/1","id":"1","description":"A fix for this issue is checked into the tree and tested.","name":"Fixed"},"customfield_12312322":null,"customfield_12310220":"2017-09-07T18:09:57.689+0000","customfield_12312520":null,"customfield_12312323":null,"customfield_12312521":"Thu Sep 07 18:09:57 UTC 2017","customfield_12312320":null,"customfield_12310222":"1_*:*_1_*:*_359192_*|*_3_*:*_1_*:*_2987085041_*|*_5_*:*_1_*:*_0","customfield_12310420":"9223372036854775807","customfield_12312321":null,"resolutiondate":"2017-09-07T18:09:57.638+0000","workratio":-1,"customfield_12312328":null,"customfield_12312329":null,"customfield_12312923":null,"customfield_12312326":null,"customfield_12312920":null,"customfield_12310300":null,"customfield_12312327":null,"customfield_12312921":null,"customfield_12312324":null,"customfield_12312720":null,"customfield_12312325":null,"lastViewed":null,"watches":{"self":"https://issues.apache.org/jira/rest/api/2/issue/STORM-2678/watchers","watchCount":2,"isWatching":false},"created":"2017-08-04T04:19:13.476+0000","priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.svg","name":"Major","id":"3"},"labels":[],"customfield_12312333":null,"customfield_12312334":null,"customfield_12313422":"false","customfield_12310310":"0.0","customfield_12312331":null,"customfield_12312332":null,"timeestimate":0,"aggregatetimeoriginalestimate":null,"customfield_12311120":null,"customfield_12312330":null,"versions":[],"customfield_12312339":null,"issuelinks":[],"assignee":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kabhwan","name":"kabhwan","key":"kabhwan","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jungtaek Lim","active":true,"timeZone":"Asia/Seoul"},"customfield_12312337":null,"customfield_12312338":null,"updated":"2017-09-07T18:10:03.765+0000","customfield_12312335":null,"customfield_12312336":null,"status":{"self":"https://issues.apache.org/jira/rest/api/2/status/5","description":"A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/resolved.png","name":"Resolved","id":"5","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Done"}},"components":[{"self":"https://issues.apache.org/jira/rest/api/2/component/12332475","id":"12332475","name":"storm-client"}],"timeoriginalestimate":null,"description":"While reviewing STORM-2306, I found a room to improve LoadAwareShuffleGrouping, basically taking similar approach with ShuffleGrouping.\n\nThe idea is constructing virtual ring (array) with proper length which tasks are randomly distributed to the ring respecting their loads, and just do sequential access like we do in ShuffleGrouping. Maybe slower to reflect load information due to construct virtual ring but no need to call randInt and additional loop for each tuple emission.\n\nWe may also want to reduce call of System.currentTimeMillis(), and if we get rid of that, it should be better.","customfield_10010":null,"timetracking":{"remainingEstimate":"0h","timeSpent":"3h 50m","remainingEstimateSeconds":0,"timeSpentSeconds":13800},"customfield_12312026":null,"customfield_12312023":null,"customfield_12312024":null,"attachment":[],"customfield_12312340":null,"aggregatetimeestimate":0,"customfield_12312341":null,"customfield_12312220":null,"customfield_12312022":null,"customfield_12310921":null,"customfield_12310920":"9223372036854775807","customfield_12312823":null,"summary":"Improve performance of LoadAwareShuffleGrouping ","creator":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kabhwan","name":"kabhwan","key":"kabhwan","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jungtaek Lim","active":true,"timeZone":"Asia/Seoul"},"subtasks":[],"reporter":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kabhwan","name":"kabhwan","key":"kabhwan","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jungtaek Lim","active":true,"timeZone":"Asia/Seoul"},"customfield_12310291":null,"customfield_12310290":null,"aggregateprogress":{"progress":13800,"total":13800,"percent":100},"environment":null,"customfield_12313520":null,"customfield_12311020":null,"duedate":null,"customfield_12310250":null,"progress":{"progress":13800,"total":13800,"percent":100},"comment":{"comments":[{"self":"https://issues.apache.org/jira/rest/api/2/issue/13092368/comment/16157368","id":"16157368","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=revans2","name":"revans2","key":"revans2","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Robert Joseph Evans","active":true,"timeZone":"America/Chicago"},"body":"Thanks [~kabhwan],\n\nI merged this into master.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=revans2","name":"revans2","key":"revans2","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Robert Joseph Evans","active":true,"timeZone":"America/Chicago"},"created":"2017-09-07T18:09:57.689+0000","updated":"2017-09-07T18:09:57.689+0000"}],"maxResults":1,"total":1,"startAt":0},"votes":{"self":"https://issues.apache.org/jira/rest/api/2/issue/STORM-2678/votes","votes":0,"hasVoted":false},"worklog":{"startAt":0,"maxResults":20,"total":23,"worklogs":[{"self":"https://issues.apache.org/jira/rest/api/2/issue/13092368/worklog/49997","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"GitHub user HeartSaVioR opened a pull request:\n\n    https://github.com/apache/storm/pull/2261\n\n    STORM-2678 Improve performance of LoadAwareShuffleGrouping\n\n    * construct ring which represents distribution of tasks based on load\n    * chooseTasks() just accesses the ring sequentially\n    * port related tests from Clojure to Java\n    \n    I'm not expert of micro-benchmark but I also craft some of simple performance tests which you can see them from LoadAwareShuffleGroupingTest. They are `testBenchmarkLoadAwareShuffleGroupingEvenLoad` and `testBenchmarkLoadAwareShuffleGroupingUnevenLoad `, and I put `@Ignore` to avoid running unless we want to do performance test on.\n    \n    Here's my observation on running them, using old and new LoadAwareShuffleGrouping:\n    \n    > testBenchmarkLoadAwareShuffleGroupingEvenLoad (old)\n    Duration: 114470 ms\n    Duration: 115973 ms\n    Duration: 114807 ms\n    \n    > testBenchmarkLoadAwareShuffleGroupingEvenLoad (new)\n    Duration: 106819 ms\n    Duration: 105857 ms\n    Duration: 106789 ms\n    \n    > testBenchmarkLoadAwareShuffleGroupingUnevenLoad (old)\n    Duration: 113484 ms\n    Duration: 118152 ms\n    Duration: 112664 ms\n    \n    > testBenchmarkLoadAwareShuffleGroupingUnevenLoad (new)\n    Duration: 106071 ms\n    Duration: 105938 ms\n    Duration: 106115 ms\n    \n    You can see that modified LoadAwareShuffleGrouping is faster than before, 5% or more for single threaded access. Maybe would want to do multi-threading performance test, with keeping in mind that  accessing OutputCollector with single-thread is preferred over multi-threads.\n    \n    This still respects thread-safety, and I think respecting thread-safety is better than before, given that we only allow one thread to update the ring, and we replace the new information at once, not updating information on the fly which other threads are referencing.\n    We still don't guard information with mutual-exclusion manner, but I think it is tolerable like we do before.\n    \n    I'm planning to explore some more, mostly about reducing call System.currentTimeMillis() in chooseTasks(). I'll put additional commits if I find any more improvements: it will be easy to revert some if we don't want to.\n\nYou can merge this pull request into a Git repository by running:\n\n    $ git pull https://github.com/HeartSaVioR/storm STORM-2678\n\nAlternatively you can review and apply these changes as the patch at:\n\n    https://github.com/apache/storm/pull/2261.patch\n\nTo close this pull request, make a commit to your master/trunk branch\nwith (at least) the following in the commit message:\n\n    This closes #2261\n    \n----\ncommit 6c693e3a2d57cca3648240335ef6e1862dbbfc4c\nAuthor: Jungtaek Lim <kabhwan@gmail.com>\nDate:   2017-08-04T04:25:27Z\n\n    STORM-2678 Improve performance of LoadAwareShuffleGrouping\n    \n    * construct ring which represents distribution of tasks based on load\n    * chooseTasks() just accesses the ring sequentially\n    * port related tests from Clojure to Java\n\n----\n","created":"2017-08-04T05:20:00.337+0000","updated":"2017-08-04T05:20:00.337+0000","started":"2017-08-04T05:20:00.335+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"49997","issueId":"13092368"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13092368/worklog/50003","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user HeartSaVioR commented on the issue:\n\n    https://github.com/apache/storm/pull/2261\n  \n    Build failure is missing removing CHANGELOG.md to binary distribution pom. I'll address and rebase.\n","created":"2017-08-04T05:41:10.765+0000","updated":"2017-08-04T05:41:10.765+0000","started":"2017-08-04T05:41:10.764+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"50003","issueId":"13092368"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13092368/worklog/50016","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user HeartSaVioR commented on the issue:\n\n    https://github.com/apache/storm/pull/2261\n  \n    From second commits I added performance tests on multi threads: `testBenchmarkLoadAwareShuffleGroupingEvenLoad` and `testBenchmarkLoadAwareShuffleGroupingUnevenLoad`.\n    \n    I started exploring this with 2 threads, and may explore it with more threads if necessary.\n    \n    > testBenchmarkLoadAwareShuffleGroupingEvenLoad (old)\n    Max duration among threads is : 185274 ms\n    Max duration among threads is : 189359 ms\n    \n    > testBenchmarkLoadAwareShuffleGroupingEvenLoad (new)\n    Max duration among threads is : 123411 ms\n    Max duration among threads is : 128937 ms\n    \n    > testBenchmarkLoadAwareShuffleGroupingUnevenLoad (old)\n    Max duration among threads is : 184834 ms\n    Max duration among threads is : 185551 ms\n    \n    > testBenchmarkLoadAwareShuffleGroupingUnevenLoad (new)\n    Max duration among threads is : 123978 ms\n    Max duration among threads is : 124113 ms\n    \n    The test result clearly shows that both are having performance hit on multi-threads but new LASG is affected much less than old LASG.\n","created":"2017-08-04T07:28:29.073+0000","updated":"2017-08-04T07:28:29.073+0000","started":"2017-08-04T07:28:29.072+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"50016","issueId":"13092368"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13092368/worklog/50021","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user HeartSaVioR commented on the issue:\n\n    https://github.com/apache/storm/pull/2261\n  \n    Now I introduce 'skip checking update count' to avoid calling System.currentTimeMillis() every time, but it has clear trade-off, we should call AtomicInteger.incrementAndGet() every time.\n    \n    I set the skip checking update index to 100 for starting value, and re-run tests. Test result is below: \n    \n    > testBenchmarkLoadAwareShuffleGroupingEvenLoad\n    Duration: 39352 ms\n    Duration: 39753 ms\n    Duration: 40604 ms\n    \n    > testBenchmarkLoadAwareShuffleGroupingUnevenLoad\n    Duration: 39615 ms\n    Duration: 39760 ms\n    Duration: 40497 ms\n    \n    > testBenchmarkLoadAwareShuffleGroupingEvenLoadAndMultiThreaded\n    Max duration among threads is : 113115 ms\n    Max duration among threads is : 169270 ms\n    Max duration among threads is : 142175 ms\n    \n    > testBenchmarkLoadAwareShuffleGroupingUnevenLoadAndMultiThreaded\n    Max duration among threads is : 168007 ms\n    Max duration among threads is : 148562 ms\n    Max duration among threads is : 168780 ms\n    \n    Now multi-threads hurts more on performance, but still faster than old LASG's. What we really achieve is performance improvement with single-thread. we reduced more than half of time than before.\n    \n    I expect that greater value of 'skip checking update index' would make single-thread much faster, and maybe multi-threads faster, so there's room to explore, but the value should be reasonable to answer the question: \"Are we OK to delay updating load information if less than N (the value) calls occurred within 1 sec?\"\n    \n    Btw, update duration (M secs) is another variable to explore. Maybe also need to see how often origin load information gets updated, since it is meaningless that LASG updates the information more often then origin load information gets updated.\n","created":"2017-08-04T09:04:48.877+0000","updated":"2017-08-04T09:04:48.877+0000","started":"2017-08-04T09:04:48.875+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"50021","issueId":"13092368"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13092368/worklog/50039","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user HeartSaVioR commented on the issue:\n\n    https://github.com/apache/storm/pull/2261\n  \n    Now I introduce 'skip checking update count' to avoid calling System.currentTimeMillis() every time, but it has clear trade-off, we should call AtomicInteger.incrementAndGet() every time.\n    I set the skip checking update index to 10, 100, 1000, 10000, 100000, and re-run tests. Test result is below:\n    \n    > 10\n    \n    >> testBenchmarkLoadAwareShuffleGroupingEvenLoad\n    Duration: 48650 ms\n    Duration: 49058 ms\n    Duration: 48445 ms\n    \n    >> testBenchmarkLoadAwareShuffleGroupingEvenLoadAndMultiThreaded\n    Max duration among threads is : 159369 ms\n    Max duration among threads is : 130093 ms\n    Max duration among threads is : 138557 ms\n    \n    > 100\n    \n    >> testBenchmarkLoadAwareShuffleGroupingEvenLoad\n    Duration: 41093 ms\n    Duration: 40393 ms\n    Duration: 40524 ms\n    \n    >> testBenchmarkLoadAwareShuffleGroupingEvenLoadAndMultiThreaded\n    Max duration among threads is : 142575 ms\n    Max duration among threads is : 139276 ms\n    Max duration among threads is : 145470 ms\n    \n    > 1000\n    \n    >> testBenchmarkLoadAwareShuffleGroupingEvenLoad\n    Duration: 40238 ms\n    Duration: 39715 ms\n    Duration: 39242 ms\n    \n    >> testBenchmarkLoadAwareShuffleGroupingEvenLoadAndMultiThreaded\n    Max duration among threads is : 168089 ms\n    Max duration among threads is : 161082 ms\n    Max duration among threads is : 169998 ms\n    \n    > 10000\n    \n    >> testBenchmarkLoadAwareShuffleGroupingEvenLoad\n    Duration: 40535 ms\n    Duration: 39319 ms\n    Duration: 46815 ms\n    \n    >> testBenchmarkLoadAwareShuffleGroupingEvenLoadAndMultiThreaded\n    Max duration among threads is : 140426 ms\n    Max duration among threads is : 166214 ms\n    Max duration among threads is : 169368 ms\n    \n    > 100000\n    \n    >> testBenchmarkLoadAwareShuffleGroupingEvenLoad\n    Duration: 39801 ms\n    Duration: 39535 ms\n    Duration: 39537 ms\n    \n    >> testBenchmarkLoadAwareShuffleGroupingEvenLoadAndMultiThreaded\n    Max duration among threads is : 147115 ms\n    Max duration among threads is : 140722 ms\n    Max duration among threads is : 172955 ms\n    \n    Test result seems to fluctuate, but we can see that the change is good roughly.\n    \n    Now multi-threads fluctuates more and hurts on performance compared to before, but still faster than old LASG's. What we really get is performance improvement with single-thread: we reduced more than half of time than before.\n    \n    The value of ‘skip checking update count' should be reasonable to answer the question: \"Are we OK to delay updating load information if less than N (the value) calls occurred within 1 sec?\" We may want to put better efforts to find the value (given that test results was not stable enough), but at least from test result, 100 seems be a good value. Higher value doesn't show linear performance improvement.\n    \n    Btw, update duration (M secs) is another variable to explore. Maybe also need to see how often origin load information gets updated, since it is meaningless that LASG updates the information more often then origin load information gets updated.\n","created":"2017-08-04T13:34:17.455+0000","updated":"2017-08-04T13:34:17.455+0000","started":"2017-08-04T13:34:17.453+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"50039","issueId":"13092368"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13092368/worklog/50161","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user HeartSaVioR commented on the issue:\n\n    https://github.com/apache/storm/pull/2261\n  \n    I just take opposite approach, pushing updated load mapping when load updater timer is activated. We no longer need any tricks or optimizations to reduce checking, and even no need to check updating duration.\n    \n    This is based on fact that `LoadAwareShuffleGrouping.updateRing()` doesn't break other threads calling `LoadAwareShuffleGrouping.chooseTasks()` concurrently.\n    \n    I guess we couldn't optimize better easily unless we change some specifications like allowing non-thread-safety or so.\n    \n    > testBenchmarkLoadAwareShuffleGroupingEvenLoad\n    Duration: 27596 ms\n    Duration: 27772 ms\n    \n    > testBenchmarkLoadAwareShuffleGroupingEvenLoadAndMultiThreaded\n    Max duration among threads is : 89274 ms\n    Max duration among threads is : 86466 ms\n    \n    Given that it changes some interfaces, I would like to see many reviewers reviewing and providing opinions.\n","created":"2017-08-07T15:12:47.576+0000","updated":"2017-08-07T15:12:47.576+0000","started":"2017-08-07T15:12:47.576+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"50161","issueId":"13092368"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13092368/worklog/50285","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user HeartSaVioR commented on the issue:\n\n    https://github.com/apache/storm/pull/2261\n  \n    I explored and applied more changes:\n    * change ArrayList to pre-allocated array (they're only allocated from `prepare()`)\n    * fixed length of `chooses` length: 1000\n      * at first I set this to 100, and some tests were failing due to distribution\n    \n    This might use a bit more memory, but will reduce object allocation on each updating loads.\n","created":"2017-08-09T04:25:59.594+0000","updated":"2017-08-09T04:25:59.594+0000","started":"2017-08-09T04:25:59.592+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"50285","issueId":"13092368"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13092368/worklog/50956","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user HeartSaVioR commented on the issue:\n\n    https://github.com/apache/storm/pull/2261\n  \n    Now I have another numbers to persuade this patch.\n    \n    I just take same approach to what @Ethanlm is done with his patch #2270 \n    Performance testing on ConstSpoutNullBoltTopo with ACKing disabled.\n    \n    1. Config: topology.message.timeout: 300; topology.max.spout.pending: 5000; topology.acker.executors: 0\n    1. 1 VM from AWS c4.xlarge, `dedicated` to get more accurate result\n    1. Launched 1 workers, 1 spout task and 1 bolt task. ACKing disabled.\n    1. All experiments ran 300s.\n    1. For clarity, only show the outputs at 240s.\n    1. tested 3 times for each case, and pick one which showed median result\n    1. Numbers fluctuate slightly during the experiments.\n    \n    Used 08038b6 (last commit) for this patch, and 77354fe for baseline (master).\n    \n    Grouping | transferred (messages) | transfer rate (message/s) | spout_transferred | spout_acks | spout_throughput (acks/s)\n    -- | -- | -- | -- | -- | --\n    New LocalOrShuffle (patch) | 167984520 | 2799742 | 167984520 | 167984520 | 2799742\n    LocalOrShuffle (master) | 130891240 | 2181520 | 130891240 | 130891260 | 2181520\n    LocalOrShuffle with loadaware disabled (master) | 161410760 | 2690179 | 161410760 | 161410740 | 2690179\n    \n    So the new LoadAwareShuffleGrouping is definitely faster than current LoadAwareShuffleGrouping (about 28%), and *even faster* than current ShuffleGrouping (about 4%).\n","created":"2017-08-22T07:01:49.021+0000","updated":"2017-08-22T07:01:49.021+0000","started":"2017-08-22T07:01:49.019+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"50956","issueId":"13092368"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13092368/worklog/50959","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user HeartSaVioR commented on the issue:\n\n    https://github.com/apache/storm/pull/2261\n  \n    I got back to 8f63d5a which doesn't touch any interfaces and do same tests:\n    \n    Grouping | transferred (messages) | transfer rate (message/s) | spout_transferred | spout_acks | spout_throughput (acks/s)\n    -- | -- | -- | -- | -- | --\n    New LocalOrShuffle (patch) | 160441600 | 2674026 | 160441600 | 160441580 | 2674026\n    \n    Now it is a bit slower than ShuffleGrouping but still faster than LoadAwareShuffleGrouping (about 22%).\n    \n    So we can choose either better improvement with touching multiple parts or still great improvement without touching other parts.\n    \n    I have tested another thing, replacing List with Array in ShuffleGrouping. Test result is below:\n    \n    Grouping | transferred (messages) | transfer rate (message/s) | spout_transferred | spout_acks | spout_throughput (acks/s)\n    -- | -- | -- | -- | -- | --\n    LocalOrShuffle with loadaware disabled (master) | 161437800 | 2690630 | 161437800 | 161437760 | 2690630\n    \n    It doesn't seem to bring noticeable improvement.\n    \n    The difference may be the length of the array: the array is too small (would have 1 element) in test and had to call another `set()` in addition to `incrementAndGet()` for every time. Please note that the length of array in the patch is 1000, so `set()` is called every 1000 times.\n    \n    We could grow the array in `prepare()` to get better performance, but that's going to be a micro-optimization and I'm not clear we would need to apply.\n","created":"2017-08-22T08:50:19.080+0000","updated":"2017-08-22T08:50:19.080+0000","started":"2017-08-22T08:50:19.079+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"50959","issueId":"13092368"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13092368/worklog/50960","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user HeartSaVioR commented on the issue:\n\n    https://github.com/apache/storm/pull/2261\n  \n    Raw numbers are here: https://gist.github.com/HeartSaVioR/5e80ab3a58b3e8cf40bab9c6da482639\n","created":"2017-08-22T08:52:17.129+0000","updated":"2017-08-22T08:52:17.129+0000","started":"2017-08-22T08:52:17.128+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"50960","issueId":"13092368"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13092368/worklog/50962","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user HeartSaVioR commented on the issue:\n\n    https://github.com/apache/storm/pull/2261\n  \n    @revans2 @roshannaik \n    I know you're busy, but could you have time to take a look at the change? I guess it is clear improvement and I provide raw numbers to see the difference.\n","created":"2017-08-22T09:01:40.530+0000","updated":"2017-08-22T09:01:40.530+0000","started":"2017-08-22T09:01:40.529+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"50962","issueId":"13092368"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13092368/worklog/51011","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user roshannaik commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/2261#discussion_r134640202\n  \n    --- Diff: storm-client/src/jvm/org/apache/storm/grouping/LoadAwareShuffleGrouping.java ---\n    @@ -52,25 +78,92 @@ public void prepare(WorkerTopologyContext context, GlobalStreamId stream, List<I\n         }\n     \n         @Override\n    +    public void refreshLoad(LoadMapping loadMapping) {\n    +        updateRing(loadMapping);\n    +    }\n    +\n    +    @Override\n         public List<Integer> chooseTasks(int taskId, List<Object> values, LoadMapping load) {\n    -        if ((lastUpdate + 1000) < System.currentTimeMillis()) {\n    -            int local_total = 0;\n    -            for (int i = 0; i < targets.length; i++) {\n    -                int val = (int)(101 - (load.get(targets[i]) * 100));\n    -                loads[i] = val;\n    -                local_total += val;\n    +        int rightNow;\n    +        while (true) {\n    +            rightNow = current.incrementAndGet();\n    +            if (rightNow < CAPACITY) {\n    +                return rets[choices[rightNow]];\n    +            } else if (rightNow == CAPACITY) {\n    +                current.set(0);\n    --- End diff --\n    \n    If you are trying to make this thread safe, i suspect this `current.set(0)`  is a race condition. not sure if its an acceptable race condition or not.\n","created":"2017-08-23T01:39:01.784+0000","updated":"2017-08-23T01:39:01.784+0000","started":"2017-08-23T01:39:01.782+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"51011","issueId":"13092368"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13092368/worklog/51012","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user roshannaik commented on the issue:\n\n    https://github.com/apache/storm/pull/2261\n  \n    The impact of loadAware that you show here seems inline with what I have seen. Encouraging to see these improvements. \n    Reviewed only the core chooseTasks() implementation and left one comment there.\n","created":"2017-08-23T01:41:38.376+0000","updated":"2017-08-23T01:41:38.376+0000","started":"2017-08-23T01:41:38.375+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"51012","issueId":"13092368"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13092368/worklog/51013","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user HeartSaVioR commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/2261#discussion_r134644598\n  \n    --- Diff: storm-client/src/jvm/org/apache/storm/grouping/LoadAwareShuffleGrouping.java ---\n    @@ -52,25 +78,92 @@ public void prepare(WorkerTopologyContext context, GlobalStreamId stream, List<I\n         }\n     \n         @Override\n    +    public void refreshLoad(LoadMapping loadMapping) {\n    +        updateRing(loadMapping);\n    +    }\n    +\n    +    @Override\n         public List<Integer> chooseTasks(int taskId, List<Object> values, LoadMapping load) {\n    -        if ((lastUpdate + 1000) < System.currentTimeMillis()) {\n    -            int local_total = 0;\n    -            for (int i = 0; i < targets.length; i++) {\n    -                int val = (int)(101 - (load.get(targets[i]) * 100));\n    -                loads[i] = val;\n    -                local_total += val;\n    +        int rightNow;\n    +        while (true) {\n    +            rightNow = current.incrementAndGet();\n    +            if (rightNow < CAPACITY) {\n    +                return rets[choices[rightNow]];\n    +            } else if (rightNow == CAPACITY) {\n    +                current.set(0);\n    --- End diff --\n    \n    I borrowed this from ShuffleGrouping, and even I'm not clear whether it makes race condition, I think it is acceptable since race condition scenarios don't incur out of index, just letting some threads selecting same index and maybe skip some indices.\n    Moreover this patch contains tests which addresses multi-thread safety.\n    \n    We can still replace `set` with `getAndSet` to make it fully thread-safe, but we need to do more experiments if we would want to. Same applies to ShuffleGrouping.\n","created":"2017-08-23T02:26:28.392+0000","updated":"2017-08-23T02:26:28.392+0000","started":"2017-08-23T02:26:28.387+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"51013","issueId":"13092368"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13092368/worklog/51014","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user HeartSaVioR commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/2261#discussion_r134644962\n  \n    --- Diff: storm-client/src/jvm/org/apache/storm/grouping/LoadAwareShuffleGrouping.java ---\n    @@ -20,30 +20,56 @@\n     import java.io.Serializable;\n     import java.util.ArrayList;\n     import java.util.Arrays;\n    +import java.util.Collections;\n     import java.util.List;\n     import java.util.Random;\n    +import java.util.concurrent.atomic.AtomicBoolean;\n    +import java.util.concurrent.atomic.AtomicInteger;\n     \n    +import com.google.common.annotations.VisibleForTesting;\n    +import org.apache.commons.lang.ArrayUtils;\n     import org.apache.storm.generated.GlobalStreamId;\n     import org.apache.storm.task.WorkerTopologyContext;\n     \n     public class LoadAwareShuffleGrouping implements LoadAwareCustomStreamGrouping, Serializable {\n    +    private static final int CAPACITY = 1000;\n    +\n         private Random random;\n         private List<Integer>[] rets;\n         private int[] targets;\n         private int[] loads;\n    -    private int total;\n    -    private long lastUpdate = 0;\n    +    private int[] unassigned;\n    +    private int[] choices;\n    +    private int[] prepareChoices;\n    +    private AtomicInteger current;\n     \n         @Override\n         public void prepare(WorkerTopologyContext context, GlobalStreamId stream, List<Integer> targetTasks) {\n             random = new Random();\n    +\n             rets = (List<Integer>[])new List<?>[targetTasks.size()];\n             targets = new int[targetTasks.size()];\n             for (int i = 0; i < targets.length; i++) {\n                 rets[i] = Arrays.asList(targetTasks.get(i));\n                 targets[i] = targetTasks.get(i);\n             }\n    +\n    +        // can't leave choices to be empty, so initiate it similar as ShuffleGrouping\n    +        choices = new int[CAPACITY];\n    +\n    +        for (int i = 0 ; i < CAPACITY ; i++) {\n    +            choices[i] = i % rets.length;\n    +        }\n    +\n    +        shuffleArray(choices);\n    +        current = new AtomicInteger(0);\n    --- End diff --\n    \n    Logically this should be -1 because we **increment and get**, but it doesn't hurt much.\n    (Same applies to ShuffleGrouping)\n","created":"2017-08-23T02:30:17.549+0000","updated":"2017-08-23T02:30:17.549+0000","started":"2017-08-23T02:30:17.548+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"51014","issueId":"13092368"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13092368/worklog/51015","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user HeartSaVioR commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/2261#discussion_r134645082\n  \n    --- Diff: storm-client/src/jvm/org/apache/storm/grouping/LoadAwareShuffleGrouping.java ---\n    @@ -52,25 +78,92 @@ public void prepare(WorkerTopologyContext context, GlobalStreamId stream, List<I\n         }\n     \n         @Override\n    +    public void refreshLoad(LoadMapping loadMapping) {\n    +        updateRing(loadMapping);\n    +    }\n    +\n    +    @Override\n         public List<Integer> chooseTasks(int taskId, List<Object> values, LoadMapping load) {\n    -        if ((lastUpdate + 1000) < System.currentTimeMillis()) {\n    -            int local_total = 0;\n    -            for (int i = 0; i < targets.length; i++) {\n    -                int val = (int)(101 - (load.get(targets[i]) * 100));\n    -                loads[i] = val;\n    -                local_total += val;\n    +        int rightNow;\n    +        while (true) {\n    +            rightNow = current.incrementAndGet();\n    +            if (rightNow < CAPACITY) {\n    +                return rets[choices[rightNow]];\n    +            } else if (rightNow == CAPACITY) {\n    +                current.set(0);\n    +                return rets[choices[0]];\n                 }\n    -            total = local_total;\n    -            lastUpdate = System.currentTimeMillis();\n    +            //race condition with another thread, and we lost\n    +            // try again\n             }\n    -        int selected = random.nextInt(total);\n    -        int sum = 0;\n    -        for (int i = 0; i < targets.length; i++) {\n    -            sum += loads[i];\n    -            if (selected < sum) {\n    -                return rets[i];\n    +    }\n    +\n    +    private void updateRing(LoadMapping load) {\n    +        int localTotal = 0;\n    +        for (int i = 0 ; i < targets.length; i++) {\n    +            int val = (int)(101 - (load.get(targets[i]) * 100));\n    +            loads[i] = val;\n    +            localTotal += val;\n    +        }\n    +\n    +        int currentIdx = 0;\n    +        int unassignedIdx = 0;\n    +        for (int i = 0 ; i < loads.length ; i++) {\n    +            if (currentIdx == CAPACITY) {\n    +                break;\n                 }\n    +\n    +            int loadForTask = loads[i];\n    +            int amount = Math.round(loadForTask * 1.0f * CAPACITY / localTotal);\n    +            // assign at least one for task\n    +            if (amount == 0) {\n    +                unassigned[unassignedIdx++] = i;\n    +            }\n    +            for (int j = 0; j < amount; j++) {\n    +                if (currentIdx == CAPACITY) {\n    +                    break;\n    +                }\n    +\n    +                prepareChoices[currentIdx++] = i;\n    +            }\n    +        }\n    +\n    +        if (currentIdx < CAPACITY) {\n    +            // if there're some rooms, give unassigned tasks a chance to be included\n    +            // this should be really small amount, so just add them sequentially\n    +            if (unassignedIdx > 0) {\n    +                for (int i = currentIdx ; i < CAPACITY ; i++) {\n    +                    prepareChoices[i] = unassigned[(i - currentIdx) % unassignedIdx];\n    +                }\n    +            } else {\n    +                // just pick random\n    +                for (int i = currentIdx ; i < CAPACITY ; i++) {\n    +                    prepareChoices[i] = random.nextInt(loads.length);\n    +                }\n    +            }\n    +        }\n    +\n    +        shuffleArray(prepareChoices);\n    +\n    +        // swapping two arrays\n    +        int[] tempForSwap = choices;\n    +        choices = prepareChoices;\n    +        prepareChoices = tempForSwap;\n    +\n    +        current.set(0);\n    --- End diff --\n    \n    Again logically this should be -1 because we **increment and get** and unlike in `chooseTasks()` we don't read the value in this method, but it doesn't hurt much anyway.\n","created":"2017-08-23T02:31:26.407+0000","updated":"2017-08-23T02:31:26.407+0000","started":"2017-08-23T02:31:26.406+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"51015","issueId":"13092368"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13092368/worklog/51050","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user revans2 commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/2261#discussion_r134778874\n  \n    --- Diff: storm-client/src/jvm/org/apache/storm/grouping/LoadAwareCustomStreamGrouping.java ---\n    @@ -20,5 +20,6 @@\n     import java.util.List;\n     \n     public interface LoadAwareCustomStreamGrouping extends CustomStreamGrouping {\n    +   void refreshLoad(LoadMapping loadMapping);\n        List<Integer> chooseTasks(int taskId, List<Object> values, LoadMapping load);\n    --- End diff --\n    \n    If we are going to refresh the load out of band then lets delete the LoadMapping from the parameters passed into chooseTask.\n","created":"2017-08-23T15:06:03.827+0000","updated":"2017-08-23T15:06:03.827+0000","started":"2017-08-23T15:06:03.824+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"51050","issueId":"13092368"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13092368/worklog/51053","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user revans2 commented on the issue:\n\n    https://github.com/apache/storm/pull/2261\n  \n    From a code perspective the changes look fine to me.  It would be nice to possibly clean up the load aware grouping Interface some.\n    \n    From a performance perspective it is a bit of a wash from what I am seeing.\n    \n    I ran ThroughputVsLatency with 1 spout, 1 splitter, and 1 counter.  I also did the same with 2 splitters, so there was a choice to be made.\n    \n    From a cost perspective I saw that for the 1 splitter case everything appeared to be within the noise range.  For the 2 splitter case I saw the new version taking up about 5% more CPU than the old version, so I would like to explore this a bit more.\n    \n    Similarly for latency at the mean, 99%ile and 99.9%ile latency measurements.  The original one was slightly better, around 5%, when there were 2 splitters.\n    \n    I do want to explore these a bit more, because it seams counter the benchmarks that others have run.\n\n","created":"2017-08-23T15:18:37.847+0000","updated":"2017-08-23T15:18:37.847+0000","started":"2017-08-23T15:18:37.846+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"51053","issueId":"13092368"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13092368/worklog/51056","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user revans2 commented on the issue:\n\n    https://github.com/apache/storm/pull/2261\n  \n    I spent the last few hours running more tests and I get the same results.  I am not too concerned about it.  The overhead appears to be rather low if any.\n","created":"2017-08-23T17:16:07.820+0000","updated":"2017-08-23T17:16:07.820+0000","started":"2017-08-23T17:16:07.817+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"51056","issueId":"13092368"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13092368/worklog/51065","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user HeartSaVioR commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/2261#discussion_r134876831\n  \n    --- Diff: storm-client/src/jvm/org/apache/storm/grouping/LoadAwareCustomStreamGrouping.java ---\n    @@ -20,5 +20,6 @@\n     import java.util.List;\n     \n     public interface LoadAwareCustomStreamGrouping extends CustomStreamGrouping {\n    +   void refreshLoad(LoadMapping loadMapping);\n        List<Integer> chooseTasks(int taskId, List<Object> values, LoadMapping load);\n    --- End diff --\n    \n    OK. I was just waiting for reviewing to see if we are OK with changing the way of providing LoadMapping. Looks like you're OK with pushing so I'll remove the method.\n","created":"2017-08-23T21:33:17.618+0000","updated":"2017-08-23T21:33:17.618+0000","started":"2017-08-23T21:33:17.617+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"51065","issueId":"13092368"}]},"customfield_12311820":"0|i3ielr:"}}