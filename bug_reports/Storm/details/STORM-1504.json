{"expand":"renderedFields,names,schema,operations,editmeta,changelog,versionedRepresentations","id":"12934317","self":"https://issues.apache.org/jira/rest/api/2/issue/12934317","key":"STORM-1504","fields":{"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype","name":"Bug","subtask":false,"avatarId":21133},"timespent":null,"project":{"self":"https://issues.apache.org/jira/rest/api/2/project/12314820","id":"12314820","key":"STORM","name":"Apache Storm","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/projectavatar?pid=12314820&avatarId=21667","24x24":"https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12314820&avatarId=21667","16x16":"https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12314820&avatarId=21667","32x32":"https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12314820&avatarId=21667"},"projectCategory":{"self":"https://issues.apache.org/jira/rest/api/2/projectCategory/13260","id":"13260","description":"Apache Storm Related","name":"Storm"}},"fixVersions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12329843","id":"12329843","name":"1.0.0","archived":false,"released":true,"releaseDate":"2016-04-12"}],"aggregatetimespent":null,"resolution":{"self":"https://issues.apache.org/jira/rest/api/2/resolution/1","id":"1","description":"A fix for this issue is checked into the tree and tested.","name":"Fixed"},"customfield_12312322":null,"customfield_12310220":"2016-01-27T16:54:07.086+0000","customfield_12312520":null,"customfield_12312323":null,"customfield_12312521":"Tue Feb 02 18:58:43 UTC 2016","customfield_12312320":null,"customfield_12310222":"1_*:*_1_*:*_675245676_*|*_5_*:*_1_*:*_0","customfield_12310420":"9223372036854775807","customfield_12312321":null,"resolutiondate":"2016-02-03T22:15:37.938+0000","workratio":-1,"customfield_12312328":null,"customfield_12312329":null,"customfield_12312923":null,"customfield_12312326":null,"customfield_12312920":null,"customfield_12310300":null,"customfield_12312327":null,"customfield_12312921":null,"customfield_12312324":null,"customfield_12312720":null,"customfield_12312325":null,"lastViewed":null,"watches":{"self":"https://issues.apache.org/jira/rest/api/2/issue/STORM-1504/watchers","watchCount":2,"isWatching":false},"created":"2016-01-27T02:41:32.303+0000","priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/2","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/critical.svg","name":"Critical","id":"2"},"labels":[],"customfield_12312333":null,"customfield_12312334":null,"customfield_12313422":"false","customfield_12310310":"0.0","customfield_12312331":null,"customfield_12312332":null,"timeestimate":null,"aggregatetimeoriginalestimate":null,"customfield_12311120":"STORM-1491","customfield_12312330":null,"versions":[],"customfield_12312339":null,"issuelinks":[{"id":"12456482","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12456482","type":{"id":"12310010","name":"Incorporates","inward":"is part of","outward":"incorporates","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/12310010"},"outwardIssue":{"id":"12936112","key":"STORM-1518","self":"https://issues.apache.org/jira/rest/api/2/issue/12936112","fields":{"summary":"Backport STORM-1504 to 1.0 branch","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/5","description":"A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/resolved.png","name":"Resolved","id":"5","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Done"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.svg","name":"Major","id":"3"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype","name":"Bug","subtask":false,"avatarId":21133}}}}],"assignee":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dossett%40gmail.com","name":"dossett@gmail.com","key":"dossett@gmail.com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Aaron Dossett","active":true,"timeZone":"America/Chicago"},"customfield_12312337":null,"customfield_12312338":null,"updated":"2016-02-05T05:50:26.912+0000","customfield_12312335":null,"customfield_12312336":null,"status":{"self":"https://issues.apache.org/jira/rest/api/2/status/5","description":"A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/resolved.png","name":"Resolved","id":"5","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Done"}},"components":[],"timeoriginalestimate":null,"description":"It receives Avro GenericRecord objects, which leads to serialization errors in a multi-worker topology.  Specifically, GenericData.Record will throw a serialization error.\n\nA serializer for this class should be added and registered.","customfield_10010":null,"timetracking":{},"customfield_12312026":null,"customfield_12312023":null,"customfield_12312024":null,"attachment":[],"customfield_12312340":null,"aggregatetimeestimate":null,"customfield_12312341":null,"customfield_12312220":null,"customfield_12312022":null,"customfield_12310921":null,"customfield_12310920":"9223372036854775807","customfield_12312823":null,"summary":"AvroGenericRecordBolt will not work in a topology with multiple workers","creator":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dossett%40gmail.com","name":"dossett@gmail.com","key":"dossett@gmail.com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Aaron Dossett","active":true,"timeZone":"America/Chicago"},"subtasks":[],"reporter":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dossett%40gmail.com","name":"dossett@gmail.com","key":"dossett@gmail.com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Aaron Dossett","active":true,"timeZone":"America/Chicago"},"customfield_12310291":null,"customfield_12310290":null,"aggregateprogress":{"progress":0,"total":0},"environment":null,"customfield_12313520":null,"customfield_12311020":null,"duedate":null,"customfield_12310250":null,"progress":{"progress":0,"total":0},"comment":{"comments":[{"self":"https://issues.apache.org/jira/rest/api/2/issue/12934317/comment/15119768","id":"15119768","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"GitHub user dossett opened a pull request:\n\n    https://github.com/apache/storm/pull/1052\n\n    STORM-1504: Add Serializer and instruction for AvroGenericRecordBolt\n\n    This was new for me, so some questions I have:\n    \n    - Would be better to automatically register this serializer instead of providing developer instructions?\n    - What's the best practice for exception handling in a serializer? Throwing a RunTimeException seemed like the best option.\n    \n    Provided this PR is accepted, I would also vote for backporting this to 1.0.0 since the AvroGenericRecordBolt is unusable without it in a multi-worker topology.\n\n\nYou can merge this pull request into a Git repository by running:\n\n    $ git pull https://github.com/dossett/storm STORM-1504\n\nAlternatively you can review and apply these changes as the patch at:\n\n    https://github.com/apache/storm/pull/1052.patch\n\nTo close this pull request, make a commit to your master/trunk branch\nwith (at least) the following in the commit message:\n\n    This closes #1052\n    \n----\ncommit eda0bfa07abe07d2b77a42e3f9496ac55959c909\nAuthor: Aaron Dossett <aaron.dossett@target.com>\nDate:   2016-01-27T16:49:19Z\n\n    STORM-1504: Add Serializer and instruction for AvroGenericRecordBolt\n\n----\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2016-01-27T16:54:07.086+0000","updated":"2016-01-27T16:54:07.086+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12934317/comment/15119926","id":"15119926","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user abhishekagarwal87 commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/1052#discussion_r51025554\n  \n    --- Diff: external/storm-hdfs/src/main/java/org/apache/storm/hdfs/common/AvroGenericSerializer.java ---\n    @@ -0,0 +1,70 @@\n    +/**\n    + * Licensed to the Apache Software Foundation (ASF) under one\n    + * or more contributor license agreements.  See the NOTICE file\n    + * distributed with this work for additional information\n    + * regarding copyright ownership.  The ASF licenses this file\n    + * to you under the Apache License, Version 2.0 (the\n    + * \"License\"); you may not use this file except in compliance\n    + * with the License.  You may obtain a copy of the License at\n    + *\n    + * http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +package org.apache.storm.hdfs.common;\n    +\n    +import com.esotericsoftware.kryo.Kryo;\n    +import com.esotericsoftware.kryo.Serializer;\n    +import com.esotericsoftware.kryo.io.Input;\n    +import com.esotericsoftware.kryo.io.Output;\n    +import org.apache.avro.Schema;\n    +import org.apache.avro.generic.GenericContainer;\n    +import org.apache.avro.generic.GenericDatumReader;\n    +import org.apache.avro.generic.GenericDatumWriter;\n    +import org.apache.avro.io.BinaryEncoder;\n    +import org.apache.avro.io.Decoder;\n    +import org.apache.avro.io.DecoderFactory;\n    +import org.apache.avro.io.EncoderFactory;\n    +\n    +import java.io.IOException;\n    +\n    +//Generously adapted from:\n    +//https://github.com/kijiproject/kiji-express/blob/master/kiji-express/src/main/scala/org/kiji/express/flow/framework/serialization/AvroSerializer.scala\n    +//Which has as an ASL2.0 license\n    +public class AvroGenericSerializer extends Serializer<GenericContainer> {\n    +    @Override\n    +    public void write(Kryo kryo, Output output, GenericContainer record) {\n    +        output.writeString(record.getSchema().toString());\n    +        GenericDatumWriter<GenericContainer> writer = new GenericDatumWriter<>(record.getSchema());\n    +\n    +        BinaryEncoder encoder = EncoderFactory\n    +                .get()\n    +                .directBinaryEncoder(output, null);\n    +        try {\n    +            writer.write(record, encoder);\n    +        } catch (IOException e) {\n    +            throw new RuntimeException(e);\n    +        }\n    +    }\n    +\n    +    @Override\n    +    public GenericContainer read(Kryo kryo, Input input, Class<GenericContainer> aClass) {\n    +        Schema theSchema = new Schema.Parser().parse(input.readString());\n    --- End diff --\n    \n    This can lead to higher GC depending on how frequently it is called.\n    https://github.com/apache/avro/blob/trunk/lang/java/avro/src/main/java/org/apache/avro/generic/GenericDatumReader.java#L107\n    GenericDataumReader internally keeps a map of <ActualSchema, ExpectedSchema, ResolvingDecoder>. The resolving decoder objects are expensive to create. Map being used is an IdentityHashMap. So even though schema may be same, a different object will lead to creation of different ResolvingDecoder. \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2016-01-27T18:20:51.302+0000","updated":"2016-01-27T18:20:51.302+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12934317/comment/15120057","id":"15120057","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user dossett commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/1052#discussion_r51038995\n  \n    --- Diff: external/storm-hdfs/src/main/java/org/apache/storm/hdfs/common/AvroGenericSerializer.java ---\n    @@ -0,0 +1,70 @@\n    +/**\n    + * Licensed to the Apache Software Foundation (ASF) under one\n    + * or more contributor license agreements.  See the NOTICE file\n    + * distributed with this work for additional information\n    + * regarding copyright ownership.  The ASF licenses this file\n    + * to you under the Apache License, Version 2.0 (the\n    + * \"License\"); you may not use this file except in compliance\n    + * with the License.  You may obtain a copy of the License at\n    + *\n    + * http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +package org.apache.storm.hdfs.common;\n    +\n    +import com.esotericsoftware.kryo.Kryo;\n    +import com.esotericsoftware.kryo.Serializer;\n    +import com.esotericsoftware.kryo.io.Input;\n    +import com.esotericsoftware.kryo.io.Output;\n    +import org.apache.avro.Schema;\n    +import org.apache.avro.generic.GenericContainer;\n    +import org.apache.avro.generic.GenericDatumReader;\n    +import org.apache.avro.generic.GenericDatumWriter;\n    +import org.apache.avro.io.BinaryEncoder;\n    +import org.apache.avro.io.Decoder;\n    +import org.apache.avro.io.DecoderFactory;\n    +import org.apache.avro.io.EncoderFactory;\n    +\n    +import java.io.IOException;\n    +\n    +//Generously adapted from:\n    +//https://github.com/kijiproject/kiji-express/blob/master/kiji-express/src/main/scala/org/kiji/express/flow/framework/serialization/AvroSerializer.scala\n    +//Which has as an ASL2.0 license\n    +public class AvroGenericSerializer extends Serializer<GenericContainer> {\n    +    @Override\n    +    public void write(Kryo kryo, Output output, GenericContainer record) {\n    +        output.writeString(record.getSchema().toString());\n    +        GenericDatumWriter<GenericContainer> writer = new GenericDatumWriter<>(record.getSchema());\n    +\n    +        BinaryEncoder encoder = EncoderFactory\n    +                .get()\n    +                .directBinaryEncoder(output, null);\n    +        try {\n    +            writer.write(record, encoder);\n    +        } catch (IOException e) {\n    +            throw new RuntimeException(e);\n    +        }\n    +    }\n    +\n    +    @Override\n    +    public GenericContainer read(Kryo kryo, Input input, Class<GenericContainer> aClass) {\n    +        Schema theSchema = new Schema.Parser().parse(input.readString());\n    --- End diff --\n    \n    Thanks, do you have suggestions for a different approach?\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2016-01-27T19:46:06.834+0000","updated":"2016-01-27T19:46:06.834+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12934317/comment/15120116","id":"15120116","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user revans2 commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/1052#discussion_r51045767\n  \n    --- Diff: external/storm-hdfs/src/main/java/org/apache/storm/hdfs/common/AvroGenericSerializer.java ---\n    @@ -0,0 +1,70 @@\n    +/**\n    + * Licensed to the Apache Software Foundation (ASF) under one\n    + * or more contributor license agreements.  See the NOTICE file\n    + * distributed with this work for additional information\n    + * regarding copyright ownership.  The ASF licenses this file\n    + * to you under the Apache License, Version 2.0 (the\n    + * \"License\"); you may not use this file except in compliance\n    + * with the License.  You may obtain a copy of the License at\n    + *\n    + * http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +package org.apache.storm.hdfs.common;\n    +\n    +import com.esotericsoftware.kryo.Kryo;\n    +import com.esotericsoftware.kryo.Serializer;\n    +import com.esotericsoftware.kryo.io.Input;\n    +import com.esotericsoftware.kryo.io.Output;\n    +import org.apache.avro.Schema;\n    +import org.apache.avro.generic.GenericContainer;\n    +import org.apache.avro.generic.GenericDatumReader;\n    +import org.apache.avro.generic.GenericDatumWriter;\n    +import org.apache.avro.io.BinaryEncoder;\n    +import org.apache.avro.io.Decoder;\n    +import org.apache.avro.io.DecoderFactory;\n    +import org.apache.avro.io.EncoderFactory;\n    +\n    +import java.io.IOException;\n    +\n    +//Generously adapted from:\n    +//https://github.com/kijiproject/kiji-express/blob/master/kiji-express/src/main/scala/org/kiji/express/flow/framework/serialization/AvroSerializer.scala\n    +//Which has as an ASL2.0 license\n    +public class AvroGenericSerializer extends Serializer<GenericContainer> {\n    +    @Override\n    +    public void write(Kryo kryo, Output output, GenericContainer record) {\n    +        output.writeString(record.getSchema().toString());\n    +        GenericDatumWriter<GenericContainer> writer = new GenericDatumWriter<>(record.getSchema());\n    +\n    +        BinaryEncoder encoder = EncoderFactory\n    +                .get()\n    +                .directBinaryEncoder(output, null);\n    +        try {\n    +            writer.write(record, encoder);\n    +        } catch (IOException e) {\n    +            throw new RuntimeException(e);\n    +        }\n    +    }\n    +\n    +    @Override\n    +    public GenericContainer read(Kryo kryo, Input input, Class<GenericContainer> aClass) {\n    +        Schema theSchema = new Schema.Parser().parse(input.readString());\n    --- End diff --\n    \n    The problem here is that the schema is large (JSON) and the data is small (no tags which is why you need the schema).  If we send the schema each time we send the data we are wasting a lot of resources.  The only real way around this is to have a cheap way to get the schema while sending minimal data, ideally also caching the parsed schema so we don't have to parse it each time.\n    \n    The best way I know of would be to have an external schema registry and send a reference to the original schema with the data. That is what we do at Yahoo, but the registry is unlikely to ever be open sourced (sorry about that not my code).\n    \n    My proposal would be to create a SchemaRegistry API that lets you do something like.\n    \n    ```\n    public interface AvroSchemaRegistry {\n        public String getKey(Schema schema);\n    \n        public Schema getSchema(String key);\n    }\n    ```\n    \n    We could then have two default implementations, or even a hybrid one.  The generic one that would work each time would do exactly what this code does.  Turns the schema into a string and the deserializes it on the other side.  You could do some caching if you wanted to.\n    \n    A cheaper version would not serialize/deserialize it each time, but go off of a checksum like avro RPC does. It could then look to see if a special schema file exists in the topology jar that matches the checksum, or possibly full name + version and it computes the checksum.  From that it could send the checksum, or fullname + version instead of the full schema. The read code would read the checksum/version lookup the file read/parse/cache the schema and return it.\n    \n    A hybrid would first try the cached copy, then the checksum/jar and if it could not find it fall back to the full/slow schema.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2016-01-27T20:35:06.164+0000","updated":"2016-01-27T20:35:06.164+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12934317/comment/15120330","id":"15120330","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user dossett commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/1052#discussion_r51063276\n  \n    --- Diff: external/storm-hdfs/src/main/java/org/apache/storm/hdfs/common/AvroGenericSerializer.java ---\n    @@ -0,0 +1,70 @@\n    +/**\n    + * Licensed to the Apache Software Foundation (ASF) under one\n    + * or more contributor license agreements.  See the NOTICE file\n    + * distributed with this work for additional information\n    + * regarding copyright ownership.  The ASF licenses this file\n    + * to you under the Apache License, Version 2.0 (the\n    + * \"License\"); you may not use this file except in compliance\n    + * with the License.  You may obtain a copy of the License at\n    + *\n    + * http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +package org.apache.storm.hdfs.common;\n    +\n    +import com.esotericsoftware.kryo.Kryo;\n    +import com.esotericsoftware.kryo.Serializer;\n    +import com.esotericsoftware.kryo.io.Input;\n    +import com.esotericsoftware.kryo.io.Output;\n    +import org.apache.avro.Schema;\n    +import org.apache.avro.generic.GenericContainer;\n    +import org.apache.avro.generic.GenericDatumReader;\n    +import org.apache.avro.generic.GenericDatumWriter;\n    +import org.apache.avro.io.BinaryEncoder;\n    +import org.apache.avro.io.Decoder;\n    +import org.apache.avro.io.DecoderFactory;\n    +import org.apache.avro.io.EncoderFactory;\n    +\n    +import java.io.IOException;\n    +\n    +//Generously adapted from:\n    +//https://github.com/kijiproject/kiji-express/blob/master/kiji-express/src/main/scala/org/kiji/express/flow/framework/serialization/AvroSerializer.scala\n    +//Which has as an ASL2.0 license\n    +public class AvroGenericSerializer extends Serializer<GenericContainer> {\n    +    @Override\n    +    public void write(Kryo kryo, Output output, GenericContainer record) {\n    +        output.writeString(record.getSchema().toString());\n    +        GenericDatumWriter<GenericContainer> writer = new GenericDatumWriter<>(record.getSchema());\n    +\n    +        BinaryEncoder encoder = EncoderFactory\n    +                .get()\n    +                .directBinaryEncoder(output, null);\n    +        try {\n    +            writer.write(record, encoder);\n    +        } catch (IOException e) {\n    +            throw new RuntimeException(e);\n    +        }\n    +    }\n    +\n    +    @Override\n    +    public GenericContainer read(Kryo kryo, Input input, Class<GenericContainer> aClass) {\n    +        Schema theSchema = new Schema.Parser().parse(input.readString());\n    --- End diff --\n    \n    Thanks for the thoughtful comments @revans2. I think I understand what you're describing but want to make sure.\n    \n    - A generic registry would just treat the schema as the key and vice versa, so it's always passed around.\n    \n    ```\n    class GenericAvroSchemaRegistry implements AvroSchemaRegistry {\n       public String getKey(Schema schema) {\n          return schema.toString();\n       }\n    \n        public Schema getSchema(String key) {\n           return new Schema.Parser().parse(key);\n       }\n    ```\n    \n    - A jar-based registry approach could be used for schemas that are known in advance and worth  persisting across the entire topology, but fall back on the generic approach above if an unknown schema is used.\n    - You might choose to implement your own own which relies on your proprietary registry, which is truly external to Storm\n    - At Target we could implement our own since we also use an external schema registry, albeit one that is already open sourced.\n    \n    Do I have the gist of it?\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2016-01-27T22:47:12.458+0000","updated":"2016-01-27T22:47:12.458+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12934317/comment/15120820","id":"15120820","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user abhishekagarwal87 commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/1052#discussion_r51082690\n  \n    --- Diff: external/storm-hdfs/src/main/java/org/apache/storm/hdfs/common/AvroGenericSerializer.java ---\n    @@ -0,0 +1,70 @@\n    +/**\n    + * Licensed to the Apache Software Foundation (ASF) under one\n    + * or more contributor license agreements.  See the NOTICE file\n    + * distributed with this work for additional information\n    + * regarding copyright ownership.  The ASF licenses this file\n    + * to you under the Apache License, Version 2.0 (the\n    + * \"License\"); you may not use this file except in compliance\n    + * with the License.  You may obtain a copy of the License at\n    + *\n    + * http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +package org.apache.storm.hdfs.common;\n    +\n    +import com.esotericsoftware.kryo.Kryo;\n    +import com.esotericsoftware.kryo.Serializer;\n    +import com.esotericsoftware.kryo.io.Input;\n    +import com.esotericsoftware.kryo.io.Output;\n    +import org.apache.avro.Schema;\n    +import org.apache.avro.generic.GenericContainer;\n    +import org.apache.avro.generic.GenericDatumReader;\n    +import org.apache.avro.generic.GenericDatumWriter;\n    +import org.apache.avro.io.BinaryEncoder;\n    +import org.apache.avro.io.Decoder;\n    +import org.apache.avro.io.DecoderFactory;\n    +import org.apache.avro.io.EncoderFactory;\n    +\n    +import java.io.IOException;\n    +\n    +//Generously adapted from:\n    +//https://github.com/kijiproject/kiji-express/blob/master/kiji-express/src/main/scala/org/kiji/express/flow/framework/serialization/AvroSerializer.scala\n    +//Which has as an ASL2.0 license\n    +public class AvroGenericSerializer extends Serializer<GenericContainer> {\n    +    @Override\n    +    public void write(Kryo kryo, Output output, GenericContainer record) {\n    +        output.writeString(record.getSchema().toString());\n    +        GenericDatumWriter<GenericContainer> writer = new GenericDatumWriter<>(record.getSchema());\n    +\n    +        BinaryEncoder encoder = EncoderFactory\n    +                .get()\n    +                .directBinaryEncoder(output, null);\n    +        try {\n    +            writer.write(record, encoder);\n    +        } catch (IOException e) {\n    +            throw new RuntimeException(e);\n    +        }\n    +    }\n    +\n    +    @Override\n    +    public GenericContainer read(Kryo kryo, Input input, Class<GenericContainer> aClass) {\n    +        Schema theSchema = new Schema.Parser().parse(input.readString());\n    --- End diff --\n    \n    The approach sounds right. Though I will suggest not to use the above version of schema registry as default one as it is costly. \n    `\n    class GenericAvroSchemaRegistry2 implements AvroSchemaRegistry {\n      private BiMap<String,Schema> schemaMap; //This is populated while building the topology. It should be serializable. \n       public String getKey(Schema schema) {\n          return schemaMap.get(schema);\n       }\n    \n        public Schema getSchema(String key) {\n           return schemaMap.get(key);\n       }\n    `\n    Multiple implementations of the registry can be shipped. However, default one should be safest option to use.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2016-01-28T05:53:44.320+0000","updated":"2016-01-28T05:53:44.320+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12934317/comment/15120826","id":"15120826","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user abhishekagarwal87 commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/1052#discussion_r51082926\n  \n    --- Diff: external/storm-hdfs/src/main/java/org/apache/storm/hdfs/common/AvroGenericSerializer.java ---\n    @@ -0,0 +1,70 @@\n    +/**\n    + * Licensed to the Apache Software Foundation (ASF) under one\n    + * or more contributor license agreements.  See the NOTICE file\n    + * distributed with this work for additional information\n    + * regarding copyright ownership.  The ASF licenses this file\n    + * to you under the Apache License, Version 2.0 (the\n    + * \"License\"); you may not use this file except in compliance\n    + * with the License.  You may obtain a copy of the License at\n    + *\n    + * http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +package org.apache.storm.hdfs.common;\n    +\n    +import com.esotericsoftware.kryo.Kryo;\n    +import com.esotericsoftware.kryo.Serializer;\n    +import com.esotericsoftware.kryo.io.Input;\n    +import com.esotericsoftware.kryo.io.Output;\n    +import org.apache.avro.Schema;\n    +import org.apache.avro.generic.GenericContainer;\n    +import org.apache.avro.generic.GenericDatumReader;\n    +import org.apache.avro.generic.GenericDatumWriter;\n    +import org.apache.avro.io.BinaryEncoder;\n    +import org.apache.avro.io.Decoder;\n    +import org.apache.avro.io.DecoderFactory;\n    +import org.apache.avro.io.EncoderFactory;\n    +\n    +import java.io.IOException;\n    +\n    +//Generously adapted from:\n    +//https://github.com/kijiproject/kiji-express/blob/master/kiji-express/src/main/scala/org/kiji/express/flow/framework/serialization/AvroSerializer.scala\n    +//Which has as an ASL2.0 license\n    +public class AvroGenericSerializer extends Serializer<GenericContainer> {\n    +    @Override\n    +    public void write(Kryo kryo, Output output, GenericContainer record) {\n    +        output.writeString(record.getSchema().toString());\n    +        GenericDatumWriter<GenericContainer> writer = new GenericDatumWriter<>(record.getSchema());\n    +\n    +        BinaryEncoder encoder = EncoderFactory\n    +                .get()\n    +                .directBinaryEncoder(output, null);\n    +        try {\n    +            writer.write(record, encoder);\n    +        } catch (IOException e) {\n    +            throw new RuntimeException(e);\n    +        }\n    +    }\n    +\n    +    @Override\n    +    public GenericContainer read(Kryo kryo, Input input, Class<GenericContainer> aClass) {\n    +        Schema theSchema = new Schema.Parser().parse(input.readString());\n    --- End diff --\n    \n    Key need not be supplied externally if schema fingerprint is used as the key. \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2016-01-28T05:57:51.752+0000","updated":"2016-01-28T05:57:51.752+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12934317/comment/15121542","id":"15121542","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user dossett commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/1052#discussion_r51127135\n  \n    --- Diff: external/storm-hdfs/src/main/java/org/apache/storm/hdfs/common/AvroGenericSerializer.java ---\n    @@ -0,0 +1,70 @@\n    +/**\n    + * Licensed to the Apache Software Foundation (ASF) under one\n    + * or more contributor license agreements.  See the NOTICE file\n    + * distributed with this work for additional information\n    + * regarding copyright ownership.  The ASF licenses this file\n    + * to you under the Apache License, Version 2.0 (the\n    + * \"License\"); you may not use this file except in compliance\n    + * with the License.  You may obtain a copy of the License at\n    + *\n    + * http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +package org.apache.storm.hdfs.common;\n    +\n    +import com.esotericsoftware.kryo.Kryo;\n    +import com.esotericsoftware.kryo.Serializer;\n    +import com.esotericsoftware.kryo.io.Input;\n    +import com.esotericsoftware.kryo.io.Output;\n    +import org.apache.avro.Schema;\n    +import org.apache.avro.generic.GenericContainer;\n    +import org.apache.avro.generic.GenericDatumReader;\n    +import org.apache.avro.generic.GenericDatumWriter;\n    +import org.apache.avro.io.BinaryEncoder;\n    +import org.apache.avro.io.Decoder;\n    +import org.apache.avro.io.DecoderFactory;\n    +import org.apache.avro.io.EncoderFactory;\n    +\n    +import java.io.IOException;\n    +\n    +//Generously adapted from:\n    +//https://github.com/kijiproject/kiji-express/blob/master/kiji-express/src/main/scala/org/kiji/express/flow/framework/serialization/AvroSerializer.scala\n    +//Which has as an ASL2.0 license\n    +public class AvroGenericSerializer extends Serializer<GenericContainer> {\n    +    @Override\n    +    public void write(Kryo kryo, Output output, GenericContainer record) {\n    +        output.writeString(record.getSchema().toString());\n    +        GenericDatumWriter<GenericContainer> writer = new GenericDatumWriter<>(record.getSchema());\n    +\n    +        BinaryEncoder encoder = EncoderFactory\n    +                .get()\n    +                .directBinaryEncoder(output, null);\n    +        try {\n    +            writer.write(record, encoder);\n    +        } catch (IOException e) {\n    +            throw new RuntimeException(e);\n    +        }\n    +    }\n    +\n    +    @Override\n    +    public GenericContainer read(Kryo kryo, Input input, Class<GenericContainer> aClass) {\n    +        Schema theSchema = new Schema.Parser().parse(input.readString());\n    --- End diff --\n    \n    Thanks @abhishekagarwal87. I like that implementation when all the schemas are known in advance.  The use case I've been writing this for needs to support arbitrary schema evolution over the life of the topology, so I have not thought about it from that perspective.\n    \n    As to the default, I think the safest option is the one that doesn't require the user to do anything, but I would be interested in hearing other opinions on that as well.\n    \n    Thanks for the feedback everyone, I hope to have some code added to this PR soon.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2016-01-28T14:19:16.961+0000","updated":"2016-01-28T14:19:16.961+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12934317/comment/15121558","id":"15121558","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user revans2 commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/1052#discussion_r51127995\n  \n    --- Diff: external/storm-hdfs/src/main/java/org/apache/storm/hdfs/common/AvroGenericSerializer.java ---\n    @@ -0,0 +1,70 @@\n    +/**\n    + * Licensed to the Apache Software Foundation (ASF) under one\n    + * or more contributor license agreements.  See the NOTICE file\n    + * distributed with this work for additional information\n    + * regarding copyright ownership.  The ASF licenses this file\n    + * to you under the Apache License, Version 2.0 (the\n    + * \"License\"); you may not use this file except in compliance\n    + * with the License.  You may obtain a copy of the License at\n    + *\n    + * http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +package org.apache.storm.hdfs.common;\n    +\n    +import com.esotericsoftware.kryo.Kryo;\n    +import com.esotericsoftware.kryo.Serializer;\n    +import com.esotericsoftware.kryo.io.Input;\n    +import com.esotericsoftware.kryo.io.Output;\n    +import org.apache.avro.Schema;\n    +import org.apache.avro.generic.GenericContainer;\n    +import org.apache.avro.generic.GenericDatumReader;\n    +import org.apache.avro.generic.GenericDatumWriter;\n    +import org.apache.avro.io.BinaryEncoder;\n    +import org.apache.avro.io.Decoder;\n    +import org.apache.avro.io.DecoderFactory;\n    +import org.apache.avro.io.EncoderFactory;\n    +\n    +import java.io.IOException;\n    +\n    +//Generously adapted from:\n    +//https://github.com/kijiproject/kiji-express/blob/master/kiji-express/src/main/scala/org/kiji/express/flow/framework/serialization/AvroSerializer.scala\n    +//Which has as an ASL2.0 license\n    +public class AvroGenericSerializer extends Serializer<GenericContainer> {\n    +    @Override\n    +    public void write(Kryo kryo, Output output, GenericContainer record) {\n    +        output.writeString(record.getSchema().toString());\n    +        GenericDatumWriter<GenericContainer> writer = new GenericDatumWriter<>(record.getSchema());\n    +\n    +        BinaryEncoder encoder = EncoderFactory\n    +                .get()\n    +                .directBinaryEncoder(output, null);\n    +        try {\n    +            writer.write(record, encoder);\n    +        } catch (IOException e) {\n    +            throw new RuntimeException(e);\n    +        }\n    +    }\n    +\n    +    @Override\n    +    public GenericContainer read(Kryo kryo, Input input, Class<GenericContainer> aClass) {\n    +        Schema theSchema = new Schema.Parser().parse(input.readString());\n    --- End diff --\n    \n    @dossett yes you got exactly what I was thinking.  If you do have code to support an open source schema registry I would love to see that include in here too.  And changing key to fingerprint sounds like a better name to me.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2016-01-28T14:25:39.427+0000","updated":"2016-01-28T14:25:39.427+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12934317/comment/15122128","id":"15122128","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user dossett commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/1052#discussion_r51171090\n  \n    --- Diff: external/storm-hdfs/src/main/java/org/apache/storm/hdfs/common/AvroGenericSerializer.java ---\n    @@ -0,0 +1,70 @@\n    +/**\n    + * Licensed to the Apache Software Foundation (ASF) under one\n    + * or more contributor license agreements.  See the NOTICE file\n    + * distributed with this work for additional information\n    + * regarding copyright ownership.  The ASF licenses this file\n    + * to you under the Apache License, Version 2.0 (the\n    + * \"License\"); you may not use this file except in compliance\n    + * with the License.  You may obtain a copy of the License at\n    + *\n    + * http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +package org.apache.storm.hdfs.common;\n    +\n    +import com.esotericsoftware.kryo.Kryo;\n    +import com.esotericsoftware.kryo.Serializer;\n    +import com.esotericsoftware.kryo.io.Input;\n    +import com.esotericsoftware.kryo.io.Output;\n    +import org.apache.avro.Schema;\n    +import org.apache.avro.generic.GenericContainer;\n    +import org.apache.avro.generic.GenericDatumReader;\n    +import org.apache.avro.generic.GenericDatumWriter;\n    +import org.apache.avro.io.BinaryEncoder;\n    +import org.apache.avro.io.Decoder;\n    +import org.apache.avro.io.DecoderFactory;\n    +import org.apache.avro.io.EncoderFactory;\n    +\n    +import java.io.IOException;\n    +\n    +//Generously adapted from:\n    +//https://github.com/kijiproject/kiji-express/blob/master/kiji-express/src/main/scala/org/kiji/express/flow/framework/serialization/AvroSerializer.scala\n    +//Which has as an ASL2.0 license\n    +public class AvroGenericSerializer extends Serializer<GenericContainer> {\n    +    @Override\n    +    public void write(Kryo kryo, Output output, GenericContainer record) {\n    +        output.writeString(record.getSchema().toString());\n    +        GenericDatumWriter<GenericContainer> writer = new GenericDatumWriter<>(record.getSchema());\n    +\n    +        BinaryEncoder encoder = EncoderFactory\n    +                .get()\n    +                .directBinaryEncoder(output, null);\n    +        try {\n    +            writer.write(record, encoder);\n    +        } catch (IOException e) {\n    +            throw new RuntimeException(e);\n    +        }\n    +    }\n    +\n    +    @Override\n    +    public GenericContainer read(Kryo kryo, Input input, Class<GenericContainer> aClass) {\n    +        Schema theSchema = new Schema.Parser().parse(input.readString());\n    --- End diff --\n    \n    I pushed a commit that includes a lot of the above, but is not complete.\n    \n    @revans2 I included support for Confluent's registry.  Some basic testing in our (Target's) dev environments seemed good.\n    @abhishekagarwal87 I haven't used BiMaps before, so I'm sure that part could be greatly improved.\n    \n    Still to be done:\n    - make the the unit tests more robust and parameterized.\n    - add capability to inject different AvroSchemaRegistry implementations into the generic serializer, which might be challenging\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2016-01-28T19:11:43.066+0000","updated":"2016-01-28T19:11:43.066+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12934317/comment/15123055","id":"15123055","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user abhishekagarwal87 commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/1052#discussion_r51229667\n  \n    --- Diff: external/storm-hdfs/pom.xml ---\n    @@ -35,6 +35,13 @@\n             </developer>\n         </developers>\n     \n    +    <repositories>\n    --- End diff --\n    \n    indentation can be corrected here.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2016-01-29T06:26:38.314+0000","updated":"2016-01-29T06:26:38.314+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12934317/comment/15123085","id":"15123085","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user abhishekagarwal87 commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/1052#discussion_r51230736\n  \n    --- Diff: external/storm-hdfs/src/main/java/org/apache/storm/hdfs/avro/DefinedAvroSchemaRegistry.java ---\n    @@ -0,0 +1,59 @@\n    +/**\n    + * Licensed to the Apache Software Foundation (ASF) under one\n    + * or more contributor license agreements.  See the NOTICE file\n    + * distributed with this work for additional information\n    + * regarding copyright ownership.  The ASF licenses this file\n    + * to you under the Apache License, Version 2.0 (the\n    + * \"License\"); you may not use this file except in compliance\n    + * with the License.  You may obtain a copy of the License at\n    + *\n    + * http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +package org.apache.storm.hdfs.avro;\n    +\n    +import com.google.common.collect.BiMap;\n    --- End diff --\n    \n    storm packs the guava classes in shaded jar. should you refer to them? \n    e.g. org.apache.storm.guava.collect.BiMap. \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2016-01-29T06:51:00.490+0000","updated":"2016-01-29T06:51:00.490+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12934317/comment/15123089","id":"15123089","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user abhishekagarwal87 commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/1052#discussion_r51230998\n  \n    --- Diff: external/storm-hdfs/src/main/java/org/apache/storm/hdfs/avro/DefinedAvroSchemaRegistry.java ---\n    @@ -0,0 +1,59 @@\n    +/**\n    + * Licensed to the Apache Software Foundation (ASF) under one\n    + * or more contributor license agreements.  See the NOTICE file\n    + * distributed with this work for additional information\n    + * regarding copyright ownership.  The ASF licenses this file\n    + * to you under the Apache License, Version 2.0 (the\n    + * \"License\"); you may not use this file except in compliance\n    + * with the License.  You may obtain a copy of the License at\n    + *\n    + * http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +package org.apache.storm.hdfs.avro;\n    +\n    +import com.google.common.collect.BiMap;\n    +import com.google.common.collect.HashBiMap;\n    +import org.apache.avro.Schema;\n    +import org.apache.avro.SchemaNormalization;\n    +\n    +import java.security.NoSuchAlgorithmException;\n    +import java.util.List;\n    +import java.util.Map;\n    +\n    +public class DefinedAvroSchemaRegistry implements AvroSchemaRegistry{\n    +\n    +    private final static String FP_ALGO = \"SHA-256\";\n    +    final BiMap<String, Schema> fingerprint2schemaMap;\n    +    final BiMap<Schema, String> schema2fingerprintMap;\n    +\n    +    DefinedAvroSchemaRegistry(final Map<String, Schema> definedSchemas) {\n    +        fingerprint2schemaMap = HashBiMap.create(definedSchemas);\n    +        schema2fingerprintMap = fingerprint2schemaMap.inverse();\n    +    }\n    +\n    +    DefinedAvroSchemaRegistry(List<Schema> schemaList) throws NoSuchAlgorithmException {\n    +        fingerprint2schemaMap = HashBiMap.create();\n    +        for (Schema schema : schemaList) {\n    +            String fingerPrint = new String(SchemaNormalization.parsingFingerprint(FP_ALGO, schema));\n    --- End diff --\n    \n    I am not sure about constructing a string out of non-text bytes and then reading it back. What you write may be different from what you read back due to encoding/decoding difference. can you use a byte[] array as type instead of string for fingerprint? or if you really want to use string as the key, fingerprint can be base64 encoded and returned as string. \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2016-01-29T06:57:53.377+0000","updated":"2016-01-29T06:57:53.377+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12934317/comment/15123090","id":"15123090","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user abhishekagarwal87 commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/1052#discussion_r51231057\n  \n    --- Diff: external/storm-hdfs/src/main/java/org/apache/storm/hdfs/avro/DefinedAvroSchemaRegistry.java ---\n    @@ -0,0 +1,59 @@\n    +/**\n    + * Licensed to the Apache Software Foundation (ASF) under one\n    + * or more contributor license agreements.  See the NOTICE file\n    + * distributed with this work for additional information\n    + * regarding copyright ownership.  The ASF licenses this file\n    + * to you under the Apache License, Version 2.0 (the\n    + * \"License\"); you may not use this file except in compliance\n    + * with the License.  You may obtain a copy of the License at\n    + *\n    + * http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +package org.apache.storm.hdfs.avro;\n    +\n    +import com.google.common.collect.BiMap;\n    +import com.google.common.collect.HashBiMap;\n    +import org.apache.avro.Schema;\n    +import org.apache.avro.SchemaNormalization;\n    +\n    +import java.security.NoSuchAlgorithmException;\n    +import java.util.List;\n    +import java.util.Map;\n    +\n    +public class DefinedAvroSchemaRegistry implements AvroSchemaRegistry{\n    +\n    +    private final static String FP_ALGO = \"SHA-256\";\n    --- End diff --\n    \n    this will generate 32 bytes fingerprint. CRC-64-AVRO should be good enough I think. At the max, user can override the algorithm himself. \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2016-01-29T06:59:11.904+0000","updated":"2016-01-29T06:59:11.904+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12934317/comment/15123101","id":"15123101","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user abhishekagarwal87 commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/1052#discussion_r51231303\n  \n    --- Diff: external/storm-hdfs/src/main/java/org/apache/storm/hdfs/avro/AvroGenericSerializer.java ---\n    @@ -0,0 +1,79 @@\n    +/**\n    + * Licensed to the Apache Software Foundation (ASF) under one\n    + * or more contributor license agreements.  See the NOTICE file\n    + * distributed with this work for additional information\n    + * regarding copyright ownership.  The ASF licenses this file\n    + * to you under the Apache License, Version 2.0 (the\n    + * \"License\"); you may not use this file except in compliance\n    + * with the License.  You may obtain a copy of the License at\n    + *\n    + * http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +package org.apache.storm.hdfs.avro;\n    +\n    +import com.esotericsoftware.kryo.Kryo;\n    +import com.esotericsoftware.kryo.Serializer;\n    +import com.esotericsoftware.kryo.io.Input;\n    +import com.esotericsoftware.kryo.io.Output;\n    +import org.apache.avro.Schema;\n    +import org.apache.avro.generic.GenericContainer;\n    +import org.apache.avro.generic.GenericDatumReader;\n    +import org.apache.avro.generic.GenericDatumWriter;\n    +import org.apache.avro.io.BinaryEncoder;\n    +import org.apache.avro.io.Decoder;\n    +import org.apache.avro.io.DecoderFactory;\n    +import org.apache.avro.io.EncoderFactory;\n    +\n    +import java.io.IOException;\n    +\n    +//Generously adapted from:\n    +//https://github.com/kijiproject/kiji-express/blob/master/kiji-express/src/main/scala/org/kiji/express/flow/framework/serialization/AvroSerializer.scala\n    +//Which has as an ASL2.0 license\n    +public class AvroGenericSerializer extends Serializer<GenericContainer> {\n    +\n    +    AvroSchemaRegistry registry = new GenericAvroSchemaRegistry();\n    --- End diff --\n    \n    I would advise against using GenericAvroSchemaRegistry as default. It looks to be very costly. you can try a test run with sufficient input load and verify it.. \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2016-01-29T07:03:14.907+0000","updated":"2016-01-29T07:03:14.907+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12934317/comment/15123105","id":"15123105","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user abhishekagarwal87 commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/1052#discussion_r51231410\n  \n    --- Diff: external/storm-hdfs/src/main/java/org/apache/storm/hdfs/avro/ConfluentAvroSchemaRegistry.java ---\n    @@ -0,0 +1,74 @@\n    +/**\n    + * Licensed to the Apache Software Foundation (ASF) under one\n    + * or more contributor license agreements.  See the NOTICE file\n    + * distributed with this work for additional information\n    + * regarding copyright ownership.  The ASF licenses this file\n    + * to you under the Apache License, Version 2.0 (the\n    + * \"License\"); you may not use this file except in compliance\n    + * with the License.  You may obtain a copy of the License at\n    + *\n    + * http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +package org.apache.storm.hdfs.avro;\n    +\n    +import io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient;\n    +import io.confluent.kafka.schemaregistry.client.SchemaRegistryClient;\n    +import io.confluent.kafka.schemaregistry.client.rest.exceptions.RestClientException;\n    +import org.apache.avro.Schema;\n    +\n    +import java.io.IOException;\n    +\n    +/**\n    + *\n    + */\n    +public class ConfluentAvroSchemaRegistry implements AvroSchemaRegistry {\n    +\n    +    SchemaRegistryClient theClient;\n    +    final String url;\n    +\n    +    public ConfluentAvroSchemaRegistry(String url) {\n    +        this.url = url;\n    +    }\n    +\n    +    @Override\n    +    public String getFingerprint(Schema schema) {\n    +        if (theClient == null)\n    +        {\n    +            theClient = initializeClient();\n    +        }\n    +        String subject = schema.getName();\n    +        final int version;\n    +        try {\n    +            version = theClient.register(subject, schema);\n    --- End diff --\n    \n    is it a schema version or schema identifier? \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2016-01-29T07:05:42.180+0000","updated":"2016-01-29T07:05:42.180+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12934317/comment/15123554","id":"15123554","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user dossett commented on the pull request:\n\n    https://github.com/apache/storm/pull/1052#issuecomment-176801519\n  \n    Thanks everyone for the feedback on the code.  I am beginning to appreciate some of the challenges of serialization, in particular whatever serializer is registered with kryo can only be invoked with a default constructor, so my naive implementation, which relies on initializations via constructors in some spots will not work. The meaning of @revans2's comments about reading data from a special file in the jar are also becoming clearer to me -- that's a way to get information needed for initialization without relying on constructor parameters.  I'll take another pass at cleaning up at least some of these issues and fixing/addressing comments.  There's some excitement here about using our Confluent registry to speed up serialization, so I really want to make this work.\n    \n    These are some new corners of java for me, so in the worst case scenario I'll simply have learned a lot.  Thanks everyone!\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2016-01-29T15:07:37.314+0000","updated":"2016-01-29T15:07:37.314+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12934317/comment/15124998","id":"15124998","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user dossett commented on the pull request:\n\n    https://github.com/apache/storm/pull/1052#issuecomment-177263999\n  \n    @revans2 @abhishekagarwal87 Addressed your comments and made the serializer scheme usable by kryo.  Removed the ConfluentAvroSerializer unit test because I can not yet get a usable, test-local schema registry up and running, but it does work fine in my dev environment.\n    \n    @abhishekagarwal87 I could not compile with that shaded package name, but I am also not an advanced user of shade, so I could be missing something.  Also, I left the GenericSerializer as the default for now.  I would rather have a slow default that works and then guide them to better options in documentation, but I'm open to counter-arguments.\n    \n    Still to do, based on additional feedback:\n    - refine unit tests one more time\n    - add documentation\n    \n    Thanks!\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2016-01-30T18:06:48.456+0000","updated":"2016-01-30T18:06:48.456+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12934317/comment/15125019","id":"15125019","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user abhishekagarwal87 commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/1052#discussion_r51349345\n  \n    --- Diff: external/storm-hdfs/src/main/java/org/apache/storm/hdfs/avro/ConfluentAvroSerializer.java ---\n    @@ -0,0 +1,81 @@\n    +/**\n    + * Licensed to the Apache Software Foundation (ASF) under one\n    + * or more contributor license agreements.  See the NOTICE file\n    + * distributed with this work for additional information\n    + * regarding copyright ownership.  The ASF licenses this file\n    + * to you under the Apache License, Version 2.0 (the\n    + * \"License\"); you may not use this file except in compliance\n    + * with the License.  You may obtain a copy of the License at\n    + *\n    + * http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +package org.apache.storm.hdfs.avro;\n    +\n    +import io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient;\n    +import io.confluent.kafka.schemaregistry.client.SchemaRegistryClient;\n    +import io.confluent.kafka.schemaregistry.client.rest.exceptions.RestClientException;\n    +import org.apache.avro.Schema;\n    +\n    +import java.io.BufferedReader;\n    +import java.io.IOException;\n    +import java.io.InputStream;\n    +import java.io.InputStreamReader;\n    +\n    +/**\n    + *\n    + */\n    +public class ConfluentAvroSerializer extends AbstractAvroSerializer {\n    +\n    +    private SchemaRegistryClient theClient;\n    +    final private String url;\n    +\n    +    public ConfluentAvroSerializer() throws IOException {\n    +        //Empty\n    +        InputStream in = this.getClass().getClassLoader().getResourceAsStream(\"ConfluentAvroSerializer.config\");\n    +        BufferedReader reader = new BufferedReader(new InputStreamReader(in));\n    +        url = reader.readLine();\n    +    }\n    +\n    +    @Override\n    +    public String getFingerprint(Schema schema) {\n    +        if (theClient == null)\n    +        {\n    +            theClient = initializeClient();\n    +        }\n    +        String subject = schema.getName();\n    +        final int guid;\n    +        try {\n    +            guid = theClient.register(subject, schema);\n    +            System.out.println(\"GUID: [\" + guid + \"]\");\n    --- End diff --\n    \n    this should be removed\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2016-01-30T19:15:14.070+0000","updated":"2016-01-30T19:15:14.070+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12934317/comment/15125021","id":"15125021","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user abhishekagarwal87 commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/1052#discussion_r51349431\n  \n    --- Diff: external/storm-hdfs/src/main/java/org/apache/storm/hdfs/avro/ConfluentAvroSerializer.java ---\n    @@ -0,0 +1,81 @@\n    +/**\n    + * Licensed to the Apache Software Foundation (ASF) under one\n    + * or more contributor license agreements.  See the NOTICE file\n    + * distributed with this work for additional information\n    + * regarding copyright ownership.  The ASF licenses this file\n    + * to you under the Apache License, Version 2.0 (the\n    + * \"License\"); you may not use this file except in compliance\n    + * with the License.  You may obtain a copy of the License at\n    + *\n    + * http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +package org.apache.storm.hdfs.avro;\n    +\n    +import io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient;\n    +import io.confluent.kafka.schemaregistry.client.SchemaRegistryClient;\n    +import io.confluent.kafka.schemaregistry.client.rest.exceptions.RestClientException;\n    +import org.apache.avro.Schema;\n    +\n    +import java.io.BufferedReader;\n    +import java.io.IOException;\n    +import java.io.InputStream;\n    +import java.io.InputStreamReader;\n    +\n    +/**\n    + *\n    + */\n    +public class ConfluentAvroSerializer extends AbstractAvroSerializer {\n    +\n    +    private SchemaRegistryClient theClient;\n    +    final private String url;\n    +\n    +    public ConfluentAvroSerializer() throws IOException {\n    +        //Empty\n    --- End diff --\n    \n    can the url be simple passed as storm configuration?\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2016-01-30T19:21:09.350+0000","updated":"2016-01-30T19:21:09.350+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12934317/comment/15125022","id":"15125022","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user dossett commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/1052#discussion_r51349470\n  \n    --- Diff: external/storm-hdfs/src/main/java/org/apache/storm/hdfs/avro/ConfluentAvroSerializer.java ---\n    @@ -0,0 +1,81 @@\n    +/**\n    + * Licensed to the Apache Software Foundation (ASF) under one\n    + * or more contributor license agreements.  See the NOTICE file\n    + * distributed with this work for additional information\n    + * regarding copyright ownership.  The ASF licenses this file\n    + * to you under the Apache License, Version 2.0 (the\n    + * \"License\"); you may not use this file except in compliance\n    + * with the License.  You may obtain a copy of the License at\n    + *\n    + * http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +package org.apache.storm.hdfs.avro;\n    +\n    +import io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient;\n    +import io.confluent.kafka.schemaregistry.client.SchemaRegistryClient;\n    +import io.confluent.kafka.schemaregistry.client.rest.exceptions.RestClientException;\n    +import org.apache.avro.Schema;\n    +\n    +import java.io.BufferedReader;\n    +import java.io.IOException;\n    +import java.io.InputStream;\n    +import java.io.InputStreamReader;\n    +\n    +/**\n    + *\n    + */\n    +public class ConfluentAvroSerializer extends AbstractAvroSerializer {\n    +\n    +    private SchemaRegistryClient theClient;\n    +    final private String url;\n    +\n    +    public ConfluentAvroSerializer() throws IOException {\n    +        //Empty\n    +        InputStream in = this.getClass().getClassLoader().getResourceAsStream(\"ConfluentAvroSerializer.config\");\n    +        BufferedReader reader = new BufferedReader(new InputStreamReader(in));\n    +        url = reader.readLine();\n    +    }\n    +\n    +    @Override\n    +    public String getFingerprint(Schema schema) {\n    +        if (theClient == null)\n    +        {\n    +            theClient = initializeClient();\n    +        }\n    +        String subject = schema.getName();\n    +        final int guid;\n    +        try {\n    +            guid = theClient.register(subject, schema);\n    +            System.out.println(\"GUID: [\" + guid + \"]\");\n    --- End diff --\n    \n    Oops, thanks.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2016-01-30T19:24:29.984+0000","updated":"2016-01-30T19:24:29.984+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12934317/comment/15125023","id":"15125023","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user dossett commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/1052#discussion_r51349531\n  \n    --- Diff: external/storm-hdfs/src/main/java/org/apache/storm/hdfs/avro/ConfluentAvroSerializer.java ---\n    @@ -0,0 +1,81 @@\n    +/**\n    + * Licensed to the Apache Software Foundation (ASF) under one\n    + * or more contributor license agreements.  See the NOTICE file\n    + * distributed with this work for additional information\n    + * regarding copyright ownership.  The ASF licenses this file\n    + * to you under the Apache License, Version 2.0 (the\n    + * \"License\"); you may not use this file except in compliance\n    + * with the License.  You may obtain a copy of the License at\n    + *\n    + * http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +package org.apache.storm.hdfs.avro;\n    +\n    +import io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient;\n    +import io.confluent.kafka.schemaregistry.client.SchemaRegistryClient;\n    +import io.confluent.kafka.schemaregistry.client.rest.exceptions.RestClientException;\n    +import org.apache.avro.Schema;\n    +\n    +import java.io.BufferedReader;\n    +import java.io.IOException;\n    +import java.io.InputStream;\n    +import java.io.InputStreamReader;\n    +\n    +/**\n    + *\n    + */\n    +public class ConfluentAvroSerializer extends AbstractAvroSerializer {\n    +\n    +    private SchemaRegistryClient theClient;\n    +    final private String url;\n    +\n    +    public ConfluentAvroSerializer() throws IOException {\n    +        //Empty\n    --- End diff --\n    \n    I'd like to, but it wasn't obvious how I could expose the global config to that class since kryo will only use the default constructor.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2016-01-30T19:29:35.753+0000","updated":"2016-01-30T19:29:35.753+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12934317/comment/15125030","id":"15125030","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user abhishekagarwal87 commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/1052#discussion_r51349785\n  \n    --- Diff: external/storm-hdfs/src/main/java/org/apache/storm/hdfs/avro/ConfluentAvroSerializer.java ---\n    @@ -0,0 +1,81 @@\n    +/**\n    + * Licensed to the Apache Software Foundation (ASF) under one\n    + * or more contributor license agreements.  See the NOTICE file\n    + * distributed with this work for additional information\n    + * regarding copyright ownership.  The ASF licenses this file\n    + * to you under the Apache License, Version 2.0 (the\n    + * \"License\"); you may not use this file except in compliance\n    + * with the License.  You may obtain a copy of the License at\n    + *\n    + * http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +package org.apache.storm.hdfs.avro;\n    +\n    +import io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient;\n    +import io.confluent.kafka.schemaregistry.client.SchemaRegistryClient;\n    +import io.confluent.kafka.schemaregistry.client.rest.exceptions.RestClientException;\n    +import org.apache.avro.Schema;\n    +\n    +import java.io.BufferedReader;\n    +import java.io.IOException;\n    +import java.io.InputStream;\n    +import java.io.InputStreamReader;\n    +\n    +/**\n    + *\n    + */\n    +public class ConfluentAvroSerializer extends AbstractAvroSerializer {\n    +\n    +    private SchemaRegistryClient theClient;\n    +    final private String url;\n    +\n    +    public ConfluentAvroSerializer() throws IOException {\n    +        //Empty\n    --- End diff --\n    \n    I did a quick search to find if there are serializers which use global configuration. Here is one example - \n    https://github.com/apache/storm/blob/master/storm-core/src/jvm/org/apache/storm/security/serialization/BlowfishTupleSerializer.java\n    \n    Here is how the serializers are initialized - \n    https://github.com/apache/storm/blob/master/storm-core/src/jvm/org/apache/storm/serialization/SerializationFactory.java#L168\n    \n    If you have a constructor with same signature as in the BlowFishTupleSerializer, I am sure it should work. can you try?\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2016-01-30T19:43:38.345+0000","updated":"2016-01-30T19:43:38.345+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12934317/comment/15125062","id":"15125062","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user revans2 commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/1052#discussion_r51350285\n  \n    --- Diff: external/storm-hdfs/src/main/java/org/apache/storm/hdfs/avro/AvroUtils.java ---\n    @@ -0,0 +1,18 @@\n    +package org.apache.storm.hdfs.avro;\n    --- End diff --\n    \n    Needs an Apache Header\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2016-01-30T20:20:33.673+0000","updated":"2016-01-30T20:20:33.673+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12934317/comment/15125063","id":"15125063","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user revans2 commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/1052#discussion_r51350300\n  \n    --- Diff: external/storm-hdfs/src/main/java/org/apache/storm/hdfs/avro/ConfluentAvroSerializer.java ---\n    @@ -0,0 +1,81 @@\n    +/**\n    + * Licensed to the Apache Software Foundation (ASF) under one\n    + * or more contributor license agreements.  See the NOTICE file\n    + * distributed with this work for additional information\n    + * regarding copyright ownership.  The ASF licenses this file\n    + * to you under the Apache License, Version 2.0 (the\n    + * \"License\"); you may not use this file except in compliance\n    + * with the License.  You may obtain a copy of the License at\n    + *\n    + * http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +package org.apache.storm.hdfs.avro;\n    +\n    +import io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient;\n    +import io.confluent.kafka.schemaregistry.client.SchemaRegistryClient;\n    +import io.confluent.kafka.schemaregistry.client.rest.exceptions.RestClientException;\n    +import org.apache.avro.Schema;\n    +\n    +import java.io.BufferedReader;\n    +import java.io.IOException;\n    +import java.io.InputStream;\n    +import java.io.InputStreamReader;\n    +\n    +/**\n    + *\n    + */\n    +public class ConfluentAvroSerializer extends AbstractAvroSerializer {\n    +\n    +    private SchemaRegistryClient theClient;\n    +    final private String url;\n    +\n    +    public ConfluentAvroSerializer() throws IOException {\n    +        //Empty\n    --- End diff --\n    \n    Yes we should document that a lot better.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2016-01-30T20:22:21.254+0000","updated":"2016-01-30T20:22:21.254+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12934317/comment/15125064","id":"15125064","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user revans2 commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/1052#discussion_r51350311\n  \n    --- Diff: external/storm-hdfs/src/main/java/org/apache/storm/hdfs/avro/ConfluentAvroSerializer.java ---\n    @@ -0,0 +1,81 @@\n    +/**\n    + * Licensed to the Apache Software Foundation (ASF) under one\n    + * or more contributor license agreements.  See the NOTICE file\n    + * distributed with this work for additional information\n    + * regarding copyright ownership.  The ASF licenses this file\n    + * to you under the Apache License, Version 2.0 (the\n    + * \"License\"); you may not use this file except in compliance\n    + * with the License.  You may obtain a copy of the License at\n    + *\n    + * http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +package org.apache.storm.hdfs.avro;\n    +\n    +import io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient;\n    +import io.confluent.kafka.schemaregistry.client.SchemaRegistryClient;\n    +import io.confluent.kafka.schemaregistry.client.rest.exceptions.RestClientException;\n    +import org.apache.avro.Schema;\n    +\n    +import java.io.BufferedReader;\n    +import java.io.IOException;\n    +import java.io.InputStream;\n    +import java.io.InputStreamReader;\n    +\n    +/**\n    + *\n    + */\n    +public class ConfluentAvroSerializer extends AbstractAvroSerializer {\n    --- End diff --\n    \n    Can we either have real javadocs or remove the empty comment?\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2016-01-30T20:23:02.999+0000","updated":"2016-01-30T20:23:02.999+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12934317/comment/15125068","id":"15125068","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user revans2 commented on the pull request:\n\n    https://github.com/apache/storm/pull/1052#issuecomment-177294606\n  \n    Done with a first pass.  You need to upmerge.  We have moved to org.apache.storm from backtype.storm and the CI is failing because of it.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2016-01-30T20:30:06.747+0000","updated":"2016-01-30T20:30:06.747+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12934317/comment/15125203","id":"15125203","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user dossett commented on the pull request:\n\n    https://github.com/apache/storm/pull/1052#issuecomment-177363506\n  \n    Code upmerged and commits squashed.  @abhishekagarwal87 Your pointer to the serialization examples was terrific, thank you!  It worked perfectly and really cleaned up that class.\n    \n    Documentation still to come, assuming the interface has stabilized.  Thanks!\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2016-01-31T02:34:43.986+0000","updated":"2016-01-31T02:34:43.986+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12934317/comment/15125237","id":"15125237","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user abhishekagarwal87 commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/1052#discussion_r51356078\n  \n    --- Diff: external/storm-hdfs/src/main/java/org/apache/storm/hdfs/avro/DefinedAvroSerializer.java ---\n    @@ -0,0 +1,62 @@\n    +/**\n    + * Licensed to the Apache Software Foundation (ASF) under one\n    + * or more contributor license agreements.  See the NOTICE file\n    + * distributed with this work for additional information\n    + * regarding copyright ownership.  The ASF licenses this file\n    + * to you under the Apache License, Version 2.0 (the\n    + * \"License\"); you may not use this file except in compliance\n    + * with the License.  You may obtain a copy of the License at\n    + *\n    + * http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +package org.apache.storm.hdfs.avro;\n    +\n    +import org.apache.avro.Schema;\n    +import org.apache.avro.SchemaNormalization;\n    +import org.apache.commons.codec.binary.Base64;\n    +\n    +import java.io.BufferedReader;\n    +import java.io.IOException;\n    +import java.io.InputStream;\n    +import java.io.InputStreamReader;\n    +import java.security.NoSuchAlgorithmException;\n    +import java.util.HashMap;\n    +import java.util.Map;\n    +\n    +public class DefinedAvroSerializer extends AbstractAvroSerializer {\n    +\n    +    private final static String FP_ALGO = \"CRC-64-AVRO\";\n    +    final Map<String, Schema> fingerprint2schemaMap = new HashMap<>();\n    +    final Map<Schema, String> schema2fingerprintMap = new HashMap<>();\n    +\n    +    public DefinedAvroSerializer() throws IOException, NoSuchAlgorithmException {\n    --- End diff --\n    \n    this class still uses the default constructor. Apart from this, +1 non-binding from me. \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2016-01-31T06:24:28.021+0000","updated":"2016-01-31T06:24:28.021+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12934317/comment/15126278","id":"15126278","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user dossett commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/1052#discussion_r51421641\n  \n    --- Diff: external/storm-hdfs/src/main/java/org/apache/storm/hdfs/avro/DefinedAvroSerializer.java ---\n    @@ -0,0 +1,62 @@\n    +/**\n    + * Licensed to the Apache Software Foundation (ASF) under one\n    + * or more contributor license agreements.  See the NOTICE file\n    + * distributed with this work for additional information\n    + * regarding copyright ownership.  The ASF licenses this file\n    + * to you under the Apache License, Version 2.0 (the\n    + * \"License\"); you may not use this file except in compliance\n    + * with the License.  You may obtain a copy of the License at\n    + *\n    + * http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +package org.apache.storm.hdfs.avro;\n    +\n    +import org.apache.avro.Schema;\n    +import org.apache.avro.SchemaNormalization;\n    +import org.apache.commons.codec.binary.Base64;\n    +\n    +import java.io.BufferedReader;\n    +import java.io.IOException;\n    +import java.io.InputStream;\n    +import java.io.InputStreamReader;\n    +import java.security.NoSuchAlgorithmException;\n    +import java.util.HashMap;\n    +import java.util.Map;\n    +\n    +public class DefinedAvroSerializer extends AbstractAvroSerializer {\n    +\n    +    private final static String FP_ALGO = \"CRC-64-AVRO\";\n    +    final Map<String, Schema> fingerprint2schemaMap = new HashMap<>();\n    +    final Map<Schema, String> schema2fingerprintMap = new HashMap<>();\n    +\n    +    public DefinedAvroSerializer() throws IOException, NoSuchAlgorithmException {\n    --- End diff --\n    \n    @abhishekagarwal87 In this case, getting the pre-defined schemas from a file felt like the right thing to do.  A user could specify an arbitrary number of schemas, each of arbitrary size.  That didn't feel right to put in the global storm config.  Happy to hear other opinions on that though.  Thanks!\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2016-02-01T14:10:59.784+0000","updated":"2016-02-01T14:10:59.784+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12934317/comment/15126333","id":"15126333","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user abhishekagarwal87 commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/1052#discussion_r51426989\n  \n    --- Diff: external/storm-hdfs/src/main/java/org/apache/storm/hdfs/avro/DefinedAvroSerializer.java ---\n    @@ -0,0 +1,62 @@\n    +/**\n    + * Licensed to the Apache Software Foundation (ASF) under one\n    + * or more contributor license agreements.  See the NOTICE file\n    + * distributed with this work for additional information\n    + * regarding copyright ownership.  The ASF licenses this file\n    + * to you under the Apache License, Version 2.0 (the\n    + * \"License\"); you may not use this file except in compliance\n    + * with the License.  You may obtain a copy of the License at\n    + *\n    + * http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +package org.apache.storm.hdfs.avro;\n    +\n    +import org.apache.avro.Schema;\n    +import org.apache.avro.SchemaNormalization;\n    +import org.apache.commons.codec.binary.Base64;\n    +\n    +import java.io.BufferedReader;\n    +import java.io.IOException;\n    +import java.io.InputStream;\n    +import java.io.InputStreamReader;\n    +import java.security.NoSuchAlgorithmException;\n    +import java.util.HashMap;\n    +import java.util.Map;\n    +\n    +public class DefinedAvroSerializer extends AbstractAvroSerializer {\n    +\n    +    private final static String FP_ALGO = \"CRC-64-AVRO\";\n    +    final Map<String, Schema> fingerprint2schemaMap = new HashMap<>();\n    +    final Map<Schema, String> schema2fingerprintMap = new HashMap<>();\n    +\n    +    public DefinedAvroSerializer() throws IOException, NoSuchAlgorithmException {\n    --- End diff --\n    \n    you can provide a static method like this\n    DefinedAvroSerializer.registerSchema(Map conf)\n    ```\n    public static void registerSchema(Map conf, Schema schema) {\n    Map<String, String> schemaMap = conf.get(\"topology.avro.schemas\")\n    if (null == schemaMap) {\n     schemaMap = new HashMap();\n    }\n    schemaMap.put(getFingerprint(schema),  schema.toString())\n    conf.put(\"topology.avro.schemas\", schemaMap)\n    }\n    ```\n    \n    In the constructor, you can check if the key \"topology.avro.schemas\" is present. If not fall back to the method which you are already using. \n    That is one suggestion though. Other approaches are welcome. \n    Also class can be renamed since DefinedAvroSerializer doesn't describe the class well. \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2016-02-01T14:56:28.983+0000","updated":"2016-02-01T14:56:28.983+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12934317/comment/15126629","id":"15126629","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user dossett commented on the pull request:\n\n    https://github.com/apache/storm/pull/1052#issuecomment-178093239\n  \n    Documentation added and DefinedAvroSerializer renamed to FixedAvroSerializer.\n    \n    The travis failures seem unrelated to this change?\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2016-02-01T17:50:08.307+0000","updated":"2016-02-01T17:50:08.307+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12934317/comment/15126970","id":"15126970","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user revans2 commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/1052#discussion_r51475643\n  \n    --- Diff: external/storm-hdfs/src/main/java/org/apache/storm/hdfs/bolt/AvroGenericRecordBolt.java ---\n    @@ -17,8 +17,9 @@\n      */\n     package org.apache.storm.hdfs.bolt;\n     \n    +import org.apache.avro.generic.GenericData;\n     import org.apache.storm.Config;\n    -import org.apache.storm.Constants;\n    +import org.apache.storm.hdfs.avro.AbstractAvroSerializer;\n    --- End diff --\n    \n    The deletes look OK but these new imports are not used, can we remove them or revert the file?\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2016-02-01T20:28:44.049+0000","updated":"2016-02-01T20:28:44.049+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12934317/comment/15126978","id":"15126978","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user revans2 commented on the pull request:\n\n    https://github.com/apache/storm/pull/1052#issuecomment-178174157\n  \n    The build is complaining that `external/storm-hdfs/src/test/resources/FixedAvroSerializer.config` does not have an apache license header in it.\n    \n    Because it cannot have a header in it, please update the rat profile in pom.xml to exclude it.\n    \n    After that I am +1 for this change, with or without the small nit on the imports. \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2016-02-01T20:33:52.567+0000","updated":"2016-02-01T20:33:52.567+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12934317/comment/15127068","id":"15127068","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user dossett commented on the pull request:\n\n    https://github.com/apache/storm/pull/1052#issuecomment-178200940\n  \n    rat exclusions updated, imports fixed, commits squashed.\n    \n    Thank you again @revans2 and @abhishekagarwal87 for the feedback. I ended up learning way more from this exercise than I expected.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2016-02-01T21:25:07.620+0000","updated":"2016-02-01T21:25:07.620+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12934317/comment/15128399","id":"15128399","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user revans2 commented on the pull request:\n\n    https://github.com/apache/storm/pull/1052#issuecomment-178637591\n  \n    @dossett \n    \n    storm-starter failed the same way in travis for both JDK8 and JDK7 something odd with logging.  I will try to reproduce it and see if it is just a fluke or if it is an actual issue.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2016-02-02T15:30:55.996+0000","updated":"2016-02-02T15:30:55.996+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12934317/comment/15128420","id":"15128420","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user revans2 commented on the pull request:\n\n    https://github.com/apache/storm/pull/1052#issuecomment-178645013\n  \n    @dossett yes I have been able to reproduce the error, and it appears to somehow be related to this pull request.\n    \n    ```\n    mvn clean install -DskipTests\n    cd examples/strom-starter\n    mvn clean test\n    ```\n    \n    The above works on master but fails 100% of the time with this pull request.  I see some ClassDef like issues so my guess is that the dependencies are somehow messed up, probably with log4j.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2016-02-02T15:44:06.158+0000","updated":"2016-02-02T15:44:06.158+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12934317/comment/15128425","id":"15128425","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user dossett commented on the pull request:\n\n    https://github.com/apache/storm/pull/1052#issuecomment-178648710\n  \n    Thanks @revans2, I will check it out.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2016-02-02T15:48:19.720+0000","updated":"2016-02-02T15:48:19.720+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12934317/comment/15128428","id":"15128428","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user revans2 commented on the pull request:\n\n    https://github.com/apache/storm/pull/1052#issuecomment-178649925\n  \n    @dossett I did a difference for running mvn dependency:tree between master and this pull just in storm starter and this is what showed up.\n    \n    ```\n    -[INFO] |  \\- org.apache.hadoop:hadoop-auth:jar:2.6.1:compile\n    +[INFO] |  +- org.apache.hadoop:hadoop-auth:jar:2.6.1:compile\n    +[INFO] |  \\- io.confluent:kafka-avro-serializer:jar:1.0:compile\n    +[INFO] |     \\- io.confluent:kafka-schema-registry-client:jar:1.0:compile\n    +[INFO] |        \\- org.slf4j:slf4j-log4j12:jar:1.6.6:compile\n    ```\n    \n    looks like we added in a dependency on org.slf4j:slf4j-log4j12:jar:1.6.6:compile I think if you exclude that dependency it should work fine.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2016-02-02T15:50:50.275+0000","updated":"2016-02-02T15:50:50.275+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12934317/comment/15128496","id":"15128496","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user dossett commented on the pull request:\n\n    https://github.com/apache/storm/pull/1052#issuecomment-178672701\n  \n    @revans2 Spot on, I just pushed that change. Thanks for catching that. If the travis builds pass, I will commit today.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2016-02-02T16:28:54.041+0000","updated":"2016-02-02T16:28:54.041+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12934317/comment/15128669","id":"15128669","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user ptgoetz commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/1052#discussion_r51607023\n  \n    --- Diff: external/storm-hdfs/README.md ---\n    @@ -315,6 +314,18 @@ An `org.apache.avro.Schema` object cannot be directly provided since it does not\n     The AvroGenericRecordBolt expects to receive tuples containing an Avro GenericRecord that conforms to the provided\n     schema.\n     \n    +To use this bolt you **must** register the appropriate Kryo serializers with your topology configuration.  A convenience\n    +method is provided for this:\n    +\n    +```AvroGenericRecordBolt.addAvroKryoSerializations(conf);```\n    +\n    +By default Storm will use the ```GenericAvroSerializer``` to handle serialization.  This will work, but there are much \n    +faster options available if you can pre-define the schemas you will be using or utilize an external schema registry. An\n    +implementation using the Confluent Schema Registry is provided, but others can be implemented and provided to Storm.\n    +Please see the javadoc for classes in org.apache.storm.hdfs.avro for information about using the built-in options or\n    +creating your own.\n    +\n    --- End diff --\n    \n    Something's off with the markdown formatting here, such that the content below is all rendered as code/preformatted.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2016-02-02T17:57:44.138+0000","updated":"2016-02-02T17:57:44.138+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12934317/comment/15128673","id":"15128673","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user ptgoetz commented on the pull request:\n\n    https://github.com/apache/storm/pull/1052#issuecomment-178722021\n  \n    One minor issue with the markdown formatting in the README, but I'm +1 once that's fixed.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2016-02-02T17:59:07.054+0000","updated":"2016-02-02T17:59:07.054+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12934317/comment/15128699","id":"15128699","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user dossett commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/1052#discussion_r51609059\n  \n    --- Diff: external/storm-hdfs/README.md ---\n    @@ -315,6 +314,18 @@ An `org.apache.avro.Schema` object cannot be directly provided since it does not\n     The AvroGenericRecordBolt expects to receive tuples containing an Avro GenericRecord that conforms to the provided\n     schema.\n     \n    +To use this bolt you **must** register the appropriate Kryo serializers with your topology configuration.  A convenience\n    +method is provided for this:\n    +\n    +```AvroGenericRecordBolt.addAvroKryoSerializations(conf);```\n    +\n    +By default Storm will use the ```GenericAvroSerializer``` to handle serialization.  This will work, but there are much \n    +faster options available if you can pre-define the schemas you will be using or utilize an external schema registry. An\n    +implementation using the Confluent Schema Registry is provided, but others can be implemented and provided to Storm.\n    +Please see the javadoc for classes in org.apache.storm.hdfs.avro for information about using the built-in options or\n    +creating your own.\n    +\n    --- End diff --\n    \n    It looked good in IntelliJ, thanks for checking it here. Should be fixed now.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2016-02-02T18:11:53.068+0000","updated":"2016-02-02T18:11:53.068+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12934317/comment/15128718","id":"15128718","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user ptgoetz commented on the pull request:\n\n    https://github.com/apache/storm/pull/1052#issuecomment-178734184\n  \n    Looks good. +1\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2016-02-02T18:20:32.216+0000","updated":"2016-02-02T18:20:32.216+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12934317/comment/15128792","id":"15128792","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user asfgit closed the pull request at:\n\n    https://github.com/apache/storm/pull/1052\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2016-02-02T18:58:43.057+0000","updated":"2016-02-02T18:58:43.057+0000"}],"maxResults":45,"total":45,"startAt":0},"votes":{"self":"https://issues.apache.org/jira/rest/api/2/issue/STORM-1504/votes","votes":0,"hasVoted":false},"worklog":{"startAt":0,"maxResults":20,"total":0,"worklogs":[]},"customfield_12311820":"0|i2s0en:"}}