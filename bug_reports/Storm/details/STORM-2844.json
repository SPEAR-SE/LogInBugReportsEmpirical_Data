{"expand":"renderedFields,names,schema,operations,editmeta,changelog,versionedRepresentations","id":"13123018","self":"https://issues.apache.org/jira/rest/api/2/issue/13123018","key":"STORM-2844","fields":{"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype","name":"Bug","subtask":false,"avatarId":21133},"timespent":67200,"project":{"self":"https://issues.apache.org/jira/rest/api/2/project/12314820","id":"12314820","key":"STORM","name":"Apache Storm","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/projectavatar?pid=12314820&avatarId=21667","24x24":"https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12314820&avatarId=21667","16x16":"https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12314820&avatarId=21667","32x32":"https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12314820&avatarId=21667"},"projectCategory":{"self":"https://issues.apache.org/jira/rest/api/2/projectCategory/13260","id":"13260","description":"Apache Storm Related","name":"Storm"}},"fixVersions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12334657","id":"12334657","name":"2.0.0","archived":false,"released":false},{"self":"https://issues.apache.org/jira/rest/api/2/version/12341047","id":"12341047","name":"1.2.0","archived":false,"released":true,"releaseDate":"2018-02-15"}],"aggregatetimespent":67200,"resolution":{"self":"https://issues.apache.org/jira/rest/api/2/resolution/1","id":"1","description":"A fix for this issue is checked into the tree and tested.","name":"Fixed"},"customfield_12312322":null,"customfield_12310220":"2017-12-06T16:05:39.103+0000","customfield_12312520":null,"customfield_12312323":null,"customfield_12312521":"Wed Dec 27 22:02:58 UTC 2017","customfield_12312320":null,"customfield_12310222":"1_*:*_1_*:*_1039736_*|*_3_*:*_1_*:*_1771869173_*|*_5_*:*_1_*:*_0","customfield_12310420":"9223372036854775807","customfield_12312321":null,"resolutiondate":"2017-12-26T10:51:47.511+0000","workratio":-1,"customfield_12312328":null,"customfield_12312329":null,"customfield_12312923":null,"customfield_12312326":null,"customfield_12312920":null,"customfield_12310300":null,"customfield_12312327":null,"customfield_12312921":null,"customfield_12312324":null,"customfield_12312720":null,"customfield_12312325":null,"lastViewed":null,"watches":{"self":"https://issues.apache.org/jira/rest/api/2/issue/STORM-2844/watchers","watchCount":3,"isWatching":false},"created":"2017-12-05T22:23:18.682+0000","priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/2","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/critical.svg","name":"Critical","id":"2"},"labels":["pull-request-available"],"customfield_12312333":null,"customfield_12312334":null,"customfield_12313422":"false","customfield_12310310":"0.0","customfield_12312331":null,"customfield_12312332":null,"timeestimate":0,"aggregatetimeoriginalestimate":null,"customfield_12311120":"STORM-2710","customfield_12312330":null,"versions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12334657","id":"12334657","name":"2.0.0","archived":false,"released":false},{"self":"https://issues.apache.org/jira/rest/api/2/version/12341047","id":"12341047","name":"1.2.0","archived":false,"released":true,"releaseDate":"2018-02-15"}],"customfield_12312339":null,"issuelinks":[{"id":"12523146","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12523146","type":{"id":"10030","name":"Reference","inward":"is related to","outward":"relates to","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"},"inwardIssue":{"id":"13091442","key":"STORM-2666","self":"https://issues.apache.org/jira/rest/api/2/issue/13091442","fields":{"summary":"Storm-kafka-client spout can sometimes emit messages that were already committed. ","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/5","description":"A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/resolved.png","name":"Resolved","id":"5","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Done"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.svg","name":"Major","id":"3"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype","name":"Bug","subtask":false,"avatarId":21133}}}}],"assignee":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hmclouro","name":"hmclouro","key":"hmclouro","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Hugo Louro","active":true,"timeZone":"Etc/UTC"},"customfield_12312337":null,"customfield_12312338":null,"updated":"2017-12-27T23:43:43.774+0000","customfield_12312335":null,"customfield_12312336":null,"status":{"self":"https://issues.apache.org/jira/rest/api/2/status/5","description":"A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/resolved.png","name":"Resolved","id":"5","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Done"}},"components":[{"self":"https://issues.apache.org/jira/rest/api/2/component/12331080","id":"12331080","name":"storm-kafka-client"}],"timeoriginalestimate":null,"description":"This [code|https://github.com/apache/storm/blob/1.x-branch/external/storm-kafka-client/src/main/java/org/apache/storm/kafka/spout/KafkaSpout.java#L407-L409], which was committed to fix [STORM-2666|https://issues.apache.org/jira/browse/STORM-2666] throws IllegalStateException when the KafkaSpout commits to Kafka and is restarted with the same consumer group id and first poll strategy is set to EARLIEST.\r\n\r\nFor example consider the following sequence:\r\n# KafkaSpout with consumer_group_id=TEST polls and commits offsets 1-5 \r\n# KafkaSpout with consumer_group_id=TEST is restarted with first poll strategy set to EARLIEST\r\n\r\n==> IllegalStateException will be thrown\r\n\r\nThis bug could be a blocker. I am setting it to Critical because assigning a different consumer id serves as a workaround to the problem.\r\n\r\n","customfield_10010":null,"timetracking":{"remainingEstimate":"0h","timeSpent":"18h 40m","remainingEstimateSeconds":0,"timeSpentSeconds":67200},"customfield_12312026":null,"customfield_12312023":null,"customfield_12312024":null,"attachment":[],"customfield_12312340":null,"aggregatetimeestimate":0,"customfield_12312341":null,"customfield_12312220":null,"customfield_12312022":null,"customfield_12310921":null,"customfield_12310920":"9223372036854775807","customfield_12312823":null,"summary":"KafkaSpout Throws IllegalStateException After Committing to Kafka When First Poll Strategy Set to EARLIEST","creator":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hmclouro","name":"hmclouro","key":"hmclouro","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Hugo Louro","active":true,"timeZone":"Etc/UTC"},"subtasks":[],"reporter":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hmclouro","name":"hmclouro","key":"hmclouro","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Hugo Louro","active":true,"timeZone":"Etc/UTC"},"customfield_12310291":null,"customfield_12310290":null,"aggregateprogress":{"progress":67200,"total":67200,"percent":100},"environment":null,"customfield_12313520":null,"customfield_12311020":null,"duedate":null,"customfield_12310250":null,"progress":{"progress":67200,"total":67200,"percent":100},"comment":{"comments":[{"self":"https://issues.apache.org/jira/rest/api/2/issue/13123018/comment/16280384","id":"16280384","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=Srdo","name":"Srdo","key":"srdo","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Stig Rohde DÃ¸ssing","active":true,"timeZone":"Europe/Copenhagen"},"body":"[~hmclouro] I took another look at the STORM-2666 fix, and I think there is another case where that fix is incomplete.\r\n\r\nSTORM-2666 was supposed to ensure that once offset _n_ is committed in the OffsetManager, any offset _k_ < _n_ won't be emitted again. STORM-2666 adjusts the KafkaConsumer position when tuples are committed to prevent this. \r\n\r\nI missed that waitingToEmit might contain records that are behind the committed offset. We need to make sure that once offsets get committed, any records behind the committed offset are removed from waitingToEmit as well. I'd raise a new issue for this and fix it, but I'm wondering if you want to handle it in the PR for this as well, since it's likely going to involve some of the same code?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=Srdo","name":"Srdo","key":"srdo","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Stig Rohde DÃ¸ssing","active":true,"timeZone":"Europe/Copenhagen"},"created":"2017-12-06T16:05:39.103+0000","updated":"2017-12-06T16:05:39.103+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13123018/comment/16280753","id":"16280753","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hmclouro","name":"hmclouro","key":"hmclouro","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Hugo Louro","active":true,"timeZone":"Etc/UTC"},"body":"[~Srdo] I can take a look. If my patch does not address this we can then create a follow up JIRA.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hmclouro","name":"hmclouro","key":"hmclouro","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Hugo Louro","active":true,"timeZone":"Etc/UTC"},"created":"2017-12-06T19:31:47.339+0000","updated":"2017-12-06T19:31:47.339+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13123018/comment/16280850","id":"16280850","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hmclouro","name":"hmclouro","key":"hmclouro","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Hugo Louro","active":true,"timeZone":"Etc/UTC"},"body":"[~Srdo] it is unrelated with this ticket but I was looking into the code as part of the fix. \r\n\r\nDo you know what is the reasoning behind having totalTaskCount+1 in the following line of [code| https://github.com/apache/storm/blob/1.x-branch/external/storm-kafka-client/src/main/java/org/apache/storm/kafka/spout/RoundRobinManualPartitioner.java#L45]? Is it possible for totalTaskCount to be zero? Thanks.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hmclouro","name":"hmclouro","key":"hmclouro","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Hugo Louro","active":true,"timeZone":"Etc/UTC"},"created":"2017-12-06T20:24:15.678+0000","updated":"2017-12-06T20:24:15.678+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13123018/comment/16280858","id":"16280858","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=Srdo","name":"Srdo","key":"srdo","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Stig Rohde DÃ¸ssing","active":true,"timeZone":"Europe/Copenhagen"},"body":"No, I don't know why it adds 1. It doesn't make sense for totalTaskCount to be 0 as far as I can tell. ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=Srdo","name":"Srdo","key":"srdo","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Stig Rohde DÃ¸ssing","active":true,"timeZone":"Europe/Copenhagen"},"created":"2017-12-06T20:32:15.971+0000","updated":"2017-12-06T20:32:15.971+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13123018/comment/16297678","id":"16297678","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=erikdw","name":"erikdw","key":"erikdw","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=erikdw&avatarId=26098","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=erikdw&avatarId=26098","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=erikdw&avatarId=26098","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=erikdw&avatarId=26098"},"displayName":"Erik Weathers","active":true,"timeZone":"Etc/UTC"},"body":"[~hmclouro]: this ticket indicates the affected versions as 1.2.0 and 2.0.0, but the ticket that introduced the problem (STORM-2666) indicates that it is targeted for 1.1.2 as well (1.1.2 is in the Fix Versions field, and I see the commit in the 1.1.x-branch).  So I think this ticket (STORM-2844) should be backported to the 1.1.x-branch as well.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=erikdw","name":"erikdw","key":"erikdw","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=erikdw&avatarId=26098","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=erikdw&avatarId=26098","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=erikdw&avatarId=26098","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=erikdw&avatarId=26098"},"displayName":"Erik Weathers","active":true,"timeZone":"Etc/UTC"},"created":"2017-12-20T00:13:54.686+0000","updated":"2017-12-20T00:14:04.343+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13123018/comment/16302599","id":"16302599","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hmclouro","name":"hmclouro","key":"hmclouro","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Hugo Louro","active":true,"timeZone":"Etc/UTC"},"body":"[~erikdw] The 1.2.0 and 1.1.x branches have diverged quite a bit and it is difficult to backport every change. I think it that it is reasonable to expect that some fixes will be included only in minor versions, and therefore require a minor upgrade. I don't think it is in the plan to backport this change.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hmclouro","name":"hmclouro","key":"hmclouro","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Hugo Louro","active":true,"timeZone":"Etc/UTC"},"created":"2017-12-23T22:06:49.747+0000","updated":"2017-12-23T22:06:49.747+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13123018/comment/16303756","id":"16303756","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=Srdo","name":"Srdo","key":"srdo","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Stig Rohde DÃ¸ssing","active":true,"timeZone":"Europe/Copenhagen"},"body":"Thanks [~hmclouro], merged both PRs.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=Srdo","name":"Srdo","key":"srdo","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Stig Rohde DÃ¸ssing","active":true,"timeZone":"Europe/Copenhagen"},"created":"2017-12-26T10:51:47.567+0000","updated":"2017-12-26T10:51:47.567+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13123018/comment/16304829","id":"16304829","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=erikdw","name":"erikdw","key":"erikdw","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=erikdw&avatarId=26098","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=erikdw&avatarId=26098","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=erikdw&avatarId=26098","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=erikdw&avatarId=26098"},"displayName":"Erik Weathers","active":true,"timeZone":"Etc/UTC"},"body":"[~hmclouro]: I'm sympathetic to the problem in general, but I have a few responses:\r\n# This seems like a really bad problem from the description.  Am I correct in interpreting that it means users on 1.1.x branches cannot use EARLIEST with Kafka?  If so then choosing to not backport this fix is effectively killing Storm 1.1.x for users of Kafka.\r\n# The difficulty of backporting a fix is certainly a factor that should be considered, but also the impact of the fixes.  Specifically, the change that introduced this problem *was* backported, so I'm not entirely sure why the fix for that change wouldn't be backported too.  i.e., the original change that introduced the problem which STORM-2844 is fixing (STORM-2666) seemed like a \"nice to have\" from the description (prevent some duplicates from flowing through the topology), whereas this seems like a \"must have\" (crashing the worker).","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=erikdw","name":"erikdw","key":"erikdw","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=erikdw&avatarId=26098","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=erikdw&avatarId=26098","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=erikdw&avatarId=26098","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=erikdw&avatarId=26098"},"displayName":"Erik Weathers","active":true,"timeZone":"Etc/UTC"},"created":"2017-12-27T22:02:58.653+0000","updated":"2017-12-27T22:05:24.783+0000"}],"maxResults":8,"total":8,"startAt":0},"votes":{"self":"https://issues.apache.org/jira/rest/api/2/issue/STORM-2844/votes","votes":0,"hasVoted":false},"worklog":{"startAt":0,"maxResults":20,"total":123,"worklogs":[{"self":"https://issues.apache.org/jira/rest/api/2/issue/13123018/worklog/61748","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"GitHub user hmcl opened a pull request:\n\n    https://github.com/apache/storm/pull/2465\n\n    STORM-2844: KafkaSpout Throws IllegalStateException After Committing to Kafka When First Poll Strategy Set to EARLIEST\n\n    \r\n     - Serialize KafkaSpoutMessageId to JSON and add it as part of OffsetAndMetadata\r\n     - Check if commits to Kafka were committed by this topology to correctly enforce FirstPollOffsetStrategy\n\nYou can merge this pull request into a Git repository by running:\n\n    $ git pull https://github.com/hmcl/storm-apache 1.x-branch_STORM-2844_ISEEarliest\n\nAlternatively you can review and apply these changes as the patch at:\n\n    https://github.com/apache/storm/pull/2465.patch\n\nTo close this pull request, make a commit to your master/trunk branch\nwith (at least) the following in the commit message:\n\n    This closes #2465\n    \n----\ncommit 0b3f294129e83908d5a8fdc2030937f915af044d\nAuthor: Hugo Louro <hmclouro@gmail.com>\nDate:   2017-12-15T23:05:50Z\n\n    STORM-2844: KafkaSpout Throws IllegalStateException After Committing to Kafka When First Poll Strategy Set to EARLIEST\n    \n     - Serialize KafkaSpoutMessageId to JSON and add it as part of OffsetAndMetadata\n     - Check if commits to Kafka were committed by this topology to correctly enforce FirstPollOffsetStrategy\n\n----\n","created":"2017-12-16T16:20:24.267+0000","updated":"2017-12-16T16:20:24.267+0000","started":"2017-12-16T16:20:24.267+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"61748","issueId":"13123018"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13123018/worklog/61749","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user hmcl commented on the issue:\n\n    https://github.com/apache/storm/pull/2465\n  \n    @srdo can you please do a first pass review. In the meantime I will address the 2 or 3 TODO with minor cleanups. The following tests are also failing. I am working on fixing them, but if you know from the top of your head how to fix these failures (I don't think they are bugs added by the patch), I would appreciate your tips. Thanks.\r\n    \r\n    ``` java\r\n    Tests in error:\r\n      KafkaSpoutRebalanceTest.spoutMustIgnoreFailsForTuplesItIsNotAssignedAfterRebalance:184 InvalidUseOfMatchers\r\n      KafkaSpoutRebalanceTest.testReassignPartitionSeeksForOnlyNewPartitions:244 Â» Runtime\r\n      MaxUncommittedOffsetTest.testNextTupleCanEmitMoreMessagesWhenDroppingBelowMaxUncommittedOffsetsDueToCommit:120 Â» NullPointer\r\n      MaxUncommittedOffsetTest.testNextTupleWillNotEmitMoreThanMaxUncommittedOffsetsPlusMaxPollRecordsMessages:187->failAllExceptTheFirstMessageThenCommit:170 Â» NullPointer\r\n    ```\n","created":"2017-12-16T16:24:21.989+0000","updated":"2017-12-16T16:24:21.989+0000","started":"2017-12-16T16:24:21.989+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"61749","issueId":"13123018"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13123018/worklog/61762","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user srdo commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/2465#discussion_r157346484\n  \n    --- Diff: external/storm-kafka-client/src/main/java/org/apache/storm/kafka/spout/KafkaSpout.java ---\n    @@ -399,14 +429,16 @@ private void emitIfWaitingNotEmitted() {\n          */\n         private boolean emitOrRetryTuple(ConsumerRecord<K, V> record) {\n             final TopicPartition tp = new TopicPartition(record.topic(), record.partition());\n    -        final KafkaSpoutMessageId msgId = retryService.getMessageId(record);\n    +        final KafkaSpoutMessageId msgId = retryService.getMessageId(record, context);\n     \n             if (offsetManagers.containsKey(tp) && offsetManagers.get(tp).contains(msgId)) {   // has been acked\n                 LOG.trace(\"Tuple for record [{}] has already been acked. Skipping\", record);\n             } else if (emitted.contains(msgId)) {   // has been emitted and it is pending ack or fail\n                 LOG.trace(\"Tuple for record [{}] has already been emitted. Skipping\", record);\n             } else {\n    -            if (kafkaConsumer.committed(tp) != null && (kafkaConsumer.committed(tp).offset() >= kafkaConsumer.position(tp))) {\n    +            final OffsetAndMetadata committedOffset = kafkaConsumer.committed(tp);\n    +            if (isOffsetCommittedByThisTopology(committedOffset) && committedOffset.offset() > kafkaConsumer.position(tp)) {\n    +                // this check should pass if commit was done by another topology such that FirstPollOffsetStrategy == EARLIEST is honored (STORM-2844)\n    --- End diff --\n    \n    Nit: Describe when this check is valid instead. e.g. \"It should never be possible for the consumer position to fall behind the offset committed by this topology\"\n","created":"2017-12-16T17:35:32.155+0000","updated":"2017-12-16T17:35:32.155+0000","started":"2017-12-16T17:35:32.155+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"61762","issueId":"13123018"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13123018/worklog/61763","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user srdo commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/2465#discussion_r157346228\n  \n    --- Diff: external/storm-kafka-client/src/main/java/org/apache/storm/kafka/spout/KafkaSpout.java ---\n    @@ -225,6 +237,23 @@ private long doSeek(TopicPartition tp, OffsetAndMetadata committedOffset) {\n             }\n         }\n     \n    +    /**\n    +     * Checks If {@link OffsetAndMetadata} was committed by this topology, either by this or another spout instance.\n    +     * This info is used to decide if {@link FirstPollOffsetStrategy} should be applied\n    +     *\n    +     * @param committedOffset {@link OffsetAndMetadata} info committed to Kafka\n    +     * @return true if this topology committed this {@link OffsetAndMetadata}, false otherwise\n    +     */\n    +    private boolean isOffsetCommittedByThisTopology(OffsetAndMetadata committedOffset) {\n    +        try {\n    +            return committedOffset != null && JSON_MAPPER.readValue(committedOffset.metadata(), KafkaSpoutMessageId.class)\n    --- End diff --\n    \n    Nit: Move the null check outside this method, it's already checked before using this function at one call site, and in the other I don't think it makes the code more readable that it's moved in here. Also consider putting the message id in a variable before doing the .getTopologyId, that way it's easier to tell what's happening in case we get an NPE from this method.\n","created":"2017-12-16T17:35:32.174+0000","updated":"2017-12-16T17:35:32.174+0000","started":"2017-12-16T17:35:32.173+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"61763","issueId":"13123018"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13123018/worklog/61764","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user srdo commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/2465#discussion_r157346634\n  \n    --- Diff: external/storm-kafka-client/src/main/java/org/apache/storm/kafka/spout/KafkaSpoutMessageId.java ---\n    @@ -18,36 +18,88 @@\n     \n     package org.apache.storm.kafka.spout;\n     \n    +import java.io.IOException;\n    --- End diff --\n    \n    I think maybe we should split this object. We don't need half of the fields for metadata, and several fields aren't needed for emit/ack handling either. Maybe have an object with thread name and topology id for metadata, and have KafkaSpoutMessageId only contain the data we need for ack handling? That way we can also avoid doing stuff like storing the topic partition and offset in metadata, which IMO makes no sense.\n","created":"2017-12-16T17:35:32.319+0000","updated":"2017-12-16T17:35:32.319+0000","started":"2017-12-16T17:35:32.318+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"61764","issueId":"13123018"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13123018/worklog/61765","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user srdo commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/2465#discussion_r157346509\n  \n    --- Diff: external/storm-kafka-client/src/main/java/org/apache/storm/kafka/spout/KafkaSpoutRetryExponentialBackoff.java ---\n    @@ -290,8 +291,8 @@ public int readyMessageCount() {\n         }\n     \n         @Override\n    -    public KafkaSpoutMessageId getMessageId(ConsumerRecord<?, ?> record) {\n    -        KafkaSpoutMessageId msgId = new KafkaSpoutMessageId(record);\n    +    public KafkaSpoutMessageId getMessageId(ConsumerRecord<?, ?> record, TopologyContext context) {\n    --- End diff --\n    \n    I'm fine with this in 2.x, but for 1.2.0 I think we should try to avoid breaking changes (RetryService is a public API, it's the same reason this method still takes a ConsumerRecord instead of just the partition and offset).\n","created":"2017-12-16T17:35:32.321+0000","updated":"2017-12-16T17:35:32.321+0000","started":"2017-12-16T17:35:32.320+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"61765","issueId":"13123018"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13123018/worklog/61766","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user srdo commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/2465#discussion_r157346294\n  \n    --- Diff: external/storm-kafka-client/src/main/java/org/apache/storm/kafka/spout/KafkaSpout.java ---\n    @@ -225,6 +237,23 @@ private long doSeek(TopicPartition tp, OffsetAndMetadata committedOffset) {\n             }\n         }\n     \n    +    /**\n    +     * Checks If {@link OffsetAndMetadata} was committed by this topology, either by this or another spout instance.\n    --- End diff --\n    \n    Nit: Something like \"Checks if OffsetAndMetadata was committed by a KafkaSpout in this topology.\" might be clearer.\n","created":"2017-12-16T17:35:32.399+0000","updated":"2017-12-16T17:35:32.399+0000","started":"2017-12-16T17:35:32.398+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"61766","issueId":"13123018"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13123018/worklog/61767","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user srdo commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/2465#discussion_r157346574\n  \n    --- Diff: external/storm-kafka-client/src/main/java/org/apache/storm/kafka/spout/KafkaSpoutMessageId.java ---\n    @@ -18,36 +18,88 @@\n     \n     package org.apache.storm.kafka.spout;\n     \n    +import java.io.IOException;\n     import java.io.Serializable;\n    +\n    +import com.fasterxml.jackson.annotation.JsonCreator;\n    +import com.fasterxml.jackson.annotation.JsonProperty;\n    +import com.fasterxml.jackson.core.JsonGenerator;\n    +import com.fasterxml.jackson.core.JsonParser;\n    +import com.fasterxml.jackson.core.JsonProcessingException;\n    +import com.fasterxml.jackson.databind.DeserializationContext;\n    +import com.fasterxml.jackson.databind.JsonNode;\n    +import com.fasterxml.jackson.databind.ObjectMapper;\n    +import com.fasterxml.jackson.databind.SerializerProvider;\n    +import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n    +import com.fasterxml.jackson.databind.deser.std.StdDeserializer;\n    +import com.fasterxml.jackson.databind.module.SimpleModule;\n    +import com.fasterxml.jackson.databind.ser.std.StdSerializer;\n     import org.apache.kafka.clients.consumer.ConsumerRecord;\n     import org.apache.kafka.common.TopicPartition;\n    +import org.apache.storm.task.TopologyContext;\n     \n     public class KafkaSpoutMessageId implements Serializable {\n    +    public static final ObjectMapper JSON_MAPPER;\n    +\n    +    @JsonDeserialize(using = TopicPartitionJsonDeserializer.class)\n         private final TopicPartition topicPart;\n         private final long offset;\n    +    private final String thread;\n    +    private final String topologyId;    //TODO: rename\n    +\n         private int numFails = 0;\n         /**\n          * true if the record was emitted using a form of collector.emit(...). false\n          * when skipping null tuples as configured by the user in KafkaSpoutConfig\n          */\n         private boolean emitted;\n     \n    -    public KafkaSpoutMessageId(ConsumerRecord<?, ?> consumerRecord) {\n    -        this(consumerRecord, true);\n    +    static {\n    +        JSON_MAPPER = new ObjectMapper();\n    +\n    +        SimpleModule module = new SimpleModule();\n    +        module.addSerializer(TopicPartition.class, new TopicPartitionJsonSerializer(TopicPartition.class));\n    +        module.addDeserializer(TopicPartition.class, new TopicPartitionJsonDeserializer(TopicPartition.class));\n    +\n    +        JSON_MAPPER.registerModule(module);\n         }\n     \n    -    public KafkaSpoutMessageId(ConsumerRecord<?, ?> consumerRecord, boolean emitted) {\n    -        this(new TopicPartition(consumerRecord.topic(), consumerRecord.partition()), consumerRecord.offset(), emitted);\n    +    //TODO Revisit constructors\n    +    public KafkaSpoutMessageId(ConsumerRecord<?, ?> consumerRecord, TopologyContext context) {\n    +        this(consumerRecord, true, context);\n         }\n     \n    -    public KafkaSpoutMessageId(TopicPartition topicPart, long offset) {\n    -        this(topicPart, offset, true);\n    +    public KafkaSpoutMessageId(ConsumerRecord<?, ?> consumerRecord, boolean emitted, TopologyContext context) {\n    +        this(new TopicPartition(consumerRecord.topic(), consumerRecord.partition()), consumerRecord.offset(), context);\n         }\n     \n    -    public KafkaSpoutMessageId(TopicPartition topicPart, long offset, boolean emitted) {\n    +    public KafkaSpoutMessageId(TopicPartition topicPart, long offset, TopologyContext context) {\n    +        this(topicPart, offset, true, context);\n    +    }\n    +\n    +    public KafkaSpoutMessageId(TopicPartition topicPart, long offset, boolean emitted, TopologyContext context) {\n    +        this(topicPart, offset, emitted, Thread.currentThread().getName(), context.getStormId());\n    +    }\n    +\n    +    public KafkaSpoutMessageId(TopicPartition topicPart, long offset, boolean emitted, String thread, String topologyId) {\n    +        this(topicPart, offset, emitted, thread, topologyId, 0);\n    +    }\n    +\n    +    // Used for JSON Deserialization\n    +    @JsonCreator\n    +    private KafkaSpoutMessageId(@JsonProperty(\"topicPartition\") TopicPartition topicPart,\n    +                                @JsonProperty(\"offset\")long offset,\n    +                                @JsonProperty(\"emitted\") boolean emitted,\n    +                                @JsonProperty(\"thread\") String thread,\n    +                                @JsonProperty(\"topologyId\") String topologyId,\n    +                                @JsonProperty(\"numFails\") int numFails) {\n    +\n             this.topicPart = topicPart;\n             this.offset = offset;\n             this.emitted = emitted;\n    +        this.thread = thread;\n    +        this.topologyId = topologyId;\n    +        this.numFails = numFails;\n    --- End diff --\n    \n    We don't need to store/restore numFails and emitted in metadata.\n","created":"2017-12-16T17:35:32.421+0000","updated":"2017-12-16T17:35:32.421+0000","started":"2017-12-16T17:35:32.420+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"61767","issueId":"13123018"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13123018/worklog/61768","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user srdo commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/2465#discussion_r157346366\n  \n    --- Diff: external/storm-kafka-client/src/main/java/org/apache/storm/kafka/spout/KafkaSpout.java ---\n    @@ -225,6 +237,23 @@ private long doSeek(TopicPartition tp, OffsetAndMetadata committedOffset) {\n             }\n         }\n     \n    +    /**\n    +     * Checks If {@link OffsetAndMetadata} was committed by this topology, either by this or another spout instance.\n    +     * This info is used to decide if {@link FirstPollOffsetStrategy} should be applied\n    +     *\n    +     * @param committedOffset {@link OffsetAndMetadata} info committed to Kafka\n    +     * @return true if this topology committed this {@link OffsetAndMetadata}, false otherwise\n    +     */\n    +    private boolean isOffsetCommittedByThisTopology(OffsetAndMetadata committedOffset) {\n    +        try {\n    +            return committedOffset != null && JSON_MAPPER.readValue(committedOffset.metadata(), KafkaSpoutMessageId.class)\n    --- End diff --\n    \n    Also I think this will crash the spout when starting up on a topic that already has commits from before this change. We should probably warn in the log and pick some reasonable default instead of erroring out if there's no message id in the metadata.\n","created":"2017-12-16T17:35:32.433+0000","updated":"2017-12-16T17:35:32.433+0000","started":"2017-12-16T17:35:32.432+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"61768","issueId":"13123018"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13123018/worklog/61771","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user srdo commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/2465#discussion_r157346877\n  \n    --- Diff: external/storm-kafka-client/src/main/java/org/apache/storm/kafka/spout/KafkaSpout.java ---\n    @@ -225,6 +237,23 @@ private long doSeek(TopicPartition tp, OffsetAndMetadata committedOffset) {\n             }\n         }\n     \n    +    /**\n    +     * Checks If {@link OffsetAndMetadata} was committed by this topology, either by this or another spout instance.\n    --- End diff --\n    \n    Also we might want to add notes to EARLIEST and LATEST to clarify that they only restart when the topology is redeployed.\n","created":"2017-12-16T17:40:20.930+0000","updated":"2017-12-16T17:40:20.930+0000","started":"2017-12-16T17:40:20.929+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"61771","issueId":"13123018"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13123018/worklog/61774","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user srdo commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/2465#discussion_r157346946\n  \n    --- Diff: external/storm-kafka-client/src/test/java/org/apache/storm/kafka/spout/KafkaSpoutRebalanceTest.java ---\n    @@ -181,16 +181,16 @@ public void spoutMustIgnoreFailsForTuplesItIsNotAssignedAfterRebalance() throws\n             TopicPartition partitionThatWillBeRevoked = new TopicPartition(topic, 1);\n             TopicPartition assignedPartition = new TopicPartition(topic, 2);\n     \n    -        when(retryServiceMock.getMessageId(Mockito.any(ConsumerRecord.class)))\n    -            .thenReturn(new KafkaSpoutMessageId(partitionThatWillBeRevoked, 0))\n    -            .thenReturn(new KafkaSpoutMessageId(assignedPartition, 0));\n    +        when(retryServiceMock.getMessageId(Mockito.any(ConsumerRecord.class), contextMock))\n    +            .thenReturn(new KafkaSpoutMessageId(partitionThatWillBeRevoked, 0, contextMock))\n    +            .thenReturn(new KafkaSpoutMessageId(assignedPartition, 0, contextMock));\n     \n             //Emit a message on each partition and revoke the first partition\n             List<KafkaSpoutMessageId> emittedMessageIds = emitOneMessagePerPartitionThenRevokeOnePartition(\n                 spout, partitionThatWillBeRevoked, assignedPartition, rebalanceListenerCapture);\n     \n             //Check that only two message ids were generated\n    -        verify(retryServiceMock, times(2)).getMessageId(Mockito.any(ConsumerRecord.class));\n    +        verify(retryServiceMock, times(2)).getMessageId(Mockito.any(ConsumerRecord.class), contextMock);\n    --- End diff --\n    \n    You need to put eq around contextmock here or you'll get an error\n","created":"2017-12-16T17:43:30.009+0000","updated":"2017-12-16T17:43:30.009+0000","started":"2017-12-16T17:43:30.008+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"61774","issueId":"13123018"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13123018/worklog/61787","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user hmcl commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/2465#discussion_r157347281\n  \n    --- Diff: external/storm-kafka-client/src/main/java/org/apache/storm/kafka/spout/KafkaSpout.java ---\n    @@ -225,6 +237,23 @@ private long doSeek(TopicPartition tp, OffsetAndMetadata committedOffset) {\n             }\n         }\n     \n    +    /**\n    +     * Checks If {@link OffsetAndMetadata} was committed by this topology, either by this or another spout instance.\n    +     * This info is used to decide if {@link FirstPollOffsetStrategy} should be applied\n    +     *\n    +     * @param committedOffset {@link OffsetAndMetadata} info committed to Kafka\n    +     * @return true if this topology committed this {@link OffsetAndMetadata}, false otherwise\n    +     */\n    +    private boolean isOffsetCommittedByThisTopology(OffsetAndMetadata committedOffset) {\n    +        try {\n    +            return committedOffset != null && JSON_MAPPER.readValue(committedOffset.metadata(), KafkaSpoutMessageId.class)\n    --- End diff --\n    \n    Agree. Up to this point this was a bug. I guess we should default to the previous behavior before this fix, both in 1.x and 2.x. What do you think?\n","created":"2017-12-16T17:58:26.388+0000","updated":"2017-12-16T17:58:26.388+0000","started":"2017-12-16T17:58:26.387+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"61787","issueId":"13123018"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13123018/worklog/61789","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user hmcl commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/2465#discussion_r157347380\n  \n    --- Diff: external/storm-kafka-client/src/main/java/org/apache/storm/kafka/spout/KafkaSpoutRetryExponentialBackoff.java ---\n    @@ -290,8 +291,8 @@ public int readyMessageCount() {\n         }\n     \n         @Override\n    -    public KafkaSpoutMessageId getMessageId(ConsumerRecord<?, ?> record) {\n    -        KafkaSpoutMessageId msgId = new KafkaSpoutMessageId(record);\n    +    public KafkaSpoutMessageId getMessageId(ConsumerRecord<?, ?> record, TopologyContext context) {\n    --- End diff --\n    \n    I guess the only non-backwards compatible changes are in case the user implemented their own version of KafkaSpoutRetryService. Right? I will check if it is possible to make this fix without this change. If possible I will do.\n","created":"2017-12-16T18:02:13.216+0000","updated":"2017-12-16T18:02:13.216+0000","started":"2017-12-16T18:02:13.216+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"61789","issueId":"13123018"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13123018/worklog/61791","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user hmcl commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/2465#discussion_r157347412\n  \n    --- Diff: external/storm-kafka-client/src/test/java/org/apache/storm/kafka/spout/KafkaSpoutRebalanceTest.java ---\n    @@ -181,16 +181,16 @@ public void spoutMustIgnoreFailsForTuplesItIsNotAssignedAfterRebalance() throws\n             TopicPartition partitionThatWillBeRevoked = new TopicPartition(topic, 1);\n             TopicPartition assignedPartition = new TopicPartition(topic, 2);\n     \n    -        when(retryServiceMock.getMessageId(Mockito.any(ConsumerRecord.class)))\n    -            .thenReturn(new KafkaSpoutMessageId(partitionThatWillBeRevoked, 0))\n    -            .thenReturn(new KafkaSpoutMessageId(assignedPartition, 0));\n    +        when(retryServiceMock.getMessageId(Mockito.any(ConsumerRecord.class), contextMock))\n    +            .thenReturn(new KafkaSpoutMessageId(partitionThatWillBeRevoked, 0, contextMock))\n    +            .thenReturn(new KafkaSpoutMessageId(assignedPartition, 0, contextMock));\n     \n             //Emit a message on each partition and revoke the first partition\n             List<KafkaSpoutMessageId> emittedMessageIds = emitOneMessagePerPartitionThenRevokeOnePartition(\n                 spout, partitionThatWillBeRevoked, assignedPartition, rebalanceListenerCapture);\n     \n             //Check that only two message ids were generated\n    -        verify(retryServiceMock, times(2)).getMessageId(Mockito.any(ConsumerRecord.class));\n    +        verify(retryServiceMock, times(2)).getMessageId(Mockito.any(ConsumerRecord.class), contextMock);\n    --- End diff --\n    \n    OK. I think I tried that but it didn't quite work. I will address the tests after I make the changes you suggest. I will keep you posted on how it goes.\n","created":"2017-12-16T18:02:57.487+0000","updated":"2017-12-16T18:02:57.487+0000","started":"2017-12-16T18:02:57.486+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"61791","issueId":"13123018"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13123018/worklog/61792","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user hmcl commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/2465#discussion_r157347438\n  \n    --- Diff: external/storm-kafka-client/src/main/java/org/apache/storm/kafka/spout/KafkaSpout.java ---\n    @@ -225,6 +237,23 @@ private long doSeek(TopicPartition tp, OffsetAndMetadata committedOffset) {\n             }\n         }\n     \n    +    /**\n    +     * Checks If {@link OffsetAndMetadata} was committed by this topology, either by this or another spout instance.\n    --- End diff --\n    \n    You mean EARLIEST, LATEST only apply when a topology (with a given id) is started for the first time, and not when it is activated/deactivated?\n","created":"2017-12-16T18:04:14.679+0000","updated":"2017-12-16T18:04:14.679+0000","started":"2017-12-16T18:04:14.679+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"61792","issueId":"13123018"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13123018/worklog/61795","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user hmcl commented on the issue:\n\n    https://github.com/apache/storm/pull/2465\n  \n    @srdo I plan on submitting a patch to master, but why does the patch need to go on master first? For example, there could be bugs in 1.x that no longer exist in master because of other changes, and in that case the change will only go in 1.x.\n","created":"2017-12-16T18:06:16.618+0000","updated":"2017-12-16T18:06:16.618+0000","started":"2017-12-16T18:06:16.617+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"61795","issueId":"13123018"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13123018/worklog/61805","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user srdo commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/2465#discussion_r157349371\n  \n    --- Diff: external/storm-kafka-client/src/main/java/org/apache/storm/kafka/spout/KafkaSpout.java ---\n    @@ -225,6 +237,23 @@ private long doSeek(TopicPartition tp, OffsetAndMetadata committedOffset) {\n             }\n         }\n     \n    +    /**\n    +     * Checks If {@link OffsetAndMetadata} was committed by this topology, either by this or another spout instance.\n    --- End diff --\n    \n    Sort of. I believe the storm id will be new every time you deploy a topology. According to the javadoc for getStormId it's the topology name + a nonce. So EARLIEST and LATEST will apply when you deploy the topology, but not when activating/deactivating the topology, and it won't apply if the spout crashes either.\n","created":"2017-12-16T19:30:53.414+0000","updated":"2017-12-16T19:30:53.414+0000","started":"2017-12-16T19:30:53.414+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"61805","issueId":"13123018"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13123018/worklog/61806","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user srdo commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/2465#discussion_r157349402\n  \n    --- Diff: external/storm-kafka-client/src/main/java/org/apache/storm/kafka/spout/KafkaSpout.java ---\n    @@ -225,6 +237,23 @@ private long doSeek(TopicPartition tp, OffsetAndMetadata committedOffset) {\n             }\n         }\n     \n    +    /**\n    +     * Checks If {@link OffsetAndMetadata} was committed by this topology, either by this or another spout instance.\n    +     * This info is used to decide if {@link FirstPollOffsetStrategy} should be applied\n    +     *\n    +     * @param committedOffset {@link OffsetAndMetadata} info committed to Kafka\n    +     * @return true if this topology committed this {@link OffsetAndMetadata}, false otherwise\n    +     */\n    +    private boolean isOffsetCommittedByThisTopology(OffsetAndMetadata committedOffset) {\n    +        try {\n    +            return committedOffset != null && JSON_MAPPER.readValue(committedOffset.metadata(), KafkaSpoutMessageId.class)\n    --- End diff --\n    \n    I'd probably just return false from this method. Since the topology id is new for each deployment we know for certain that if there's no message id in the meta, then it wasn't committed by this topology.\n","created":"2017-12-16T19:32:21.505+0000","updated":"2017-12-16T19:32:21.505+0000","started":"2017-12-16T19:32:21.504+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"61806","issueId":"13123018"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13123018/worklog/61807","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user srdo commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/2465#discussion_r157349435\n  \n    --- Diff: external/storm-kafka-client/src/main/java/org/apache/storm/kafka/spout/KafkaSpoutRetryExponentialBackoff.java ---\n    @@ -290,8 +291,8 @@ public int readyMessageCount() {\n         }\n     \n         @Override\n    -    public KafkaSpoutMessageId getMessageId(ConsumerRecord<?, ?> record) {\n    -        KafkaSpoutMessageId msgId = new KafkaSpoutMessageId(record);\n    +    public KafkaSpoutMessageId getMessageId(ConsumerRecord<?, ?> record, TopologyContext context) {\n    --- End diff --\n    \n    I think if we split KafkaSpoutMessageId we won't need the context here, so hopefully it won't be a problem to fix.\n","created":"2017-12-16T19:33:48.354+0000","updated":"2017-12-16T19:33:48.354+0000","started":"2017-12-16T19:33:48.354+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"61807","issueId":"13123018"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13123018/worklog/61808","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user srdo commented on the issue:\n\n    https://github.com/apache/storm/pull/2465\n  \n    @hmcl I don't know that there's a hard rule that it has to be that way, but it seems like a good way to me to ensure that master is the \"most fixed\"/best state of the code. It's been done this way in the other PRs I've seen.\r\n    \r\n    This doesn't apply to patches that fix issues that don't exist in later branches, but this issue isn't one of those.\n","created":"2017-12-16T19:44:34.787+0000","updated":"2017-12-16T19:44:34.787+0000","started":"2017-12-16T19:44:34.786+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"61808","issueId":"13123018"}]},"customfield_12311820":"0|i3nkon:"}}