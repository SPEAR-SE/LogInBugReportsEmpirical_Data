{"expand":"renderedFields,names,schema,operations,editmeta,changelog,versionedRepresentations","id":"13077986","self":"https://issues.apache.org/jira/rest/api/2/issue/13077986","key":"STORM-2544","fields":{"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype","name":"Bug","subtask":false,"avatarId":21133},"timespent":11400,"project":{"self":"https://issues.apache.org/jira/rest/api/2/project/12314820","id":"12314820","key":"STORM","name":"Apache Storm","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/projectavatar?pid=12314820&avatarId=21667","24x24":"https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12314820&avatarId=21667","16x16":"https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12314820&avatarId=21667","32x32":"https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12314820&avatarId=21667"},"projectCategory":{"self":"https://issues.apache.org/jira/rest/api/2/projectCategory/13260","id":"13260","description":"Apache Storm Related","name":"Storm"}},"fixVersions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12334657","id":"12334657","name":"2.0.0","archived":false,"released":false},{"self":"https://issues.apache.org/jira/rest/api/2/version/12339656","id":"12339656","name":"1.1.1","archived":false,"released":true,"releaseDate":"2017-08-01"},{"self":"https://issues.apache.org/jira/rest/api/2/version/12341047","id":"12341047","name":"1.2.0","archived":false,"released":true,"releaseDate":"2018-02-15"}],"aggregatetimespent":11400,"resolution":{"self":"https://issues.apache.org/jira/rest/api/2/resolution/1","id":"1","description":"A fix for this issue is checked into the tree and tested.","name":"Fixed"},"customfield_12312322":null,"customfield_12310220":null,"customfield_12312520":null,"customfield_12312323":null,"customfield_12312521":"2017-06-07 13:00:45.15","customfield_12312320":null,"customfield_12310222":"1_*:*_1_*:*_2026339665_*|*_3_*:*_1_*:*_1502446326_*|*_5_*:*_1_*:*_0","customfield_12310420":"9223372036854775807","customfield_12312321":null,"resolutiondate":"2017-07-18T09:13:51.094+0000","workratio":-1,"customfield_12312328":null,"customfield_12312329":null,"customfield_12312923":null,"customfield_12312326":null,"customfield_12312920":null,"customfield_12310300":null,"customfield_12312327":null,"customfield_12312921":null,"customfield_12312324":null,"customfield_12312720":null,"customfield_12312325":null,"lastViewed":null,"watches":{"self":"https://issues.apache.org/jira/rest/api/2/issue/STORM-2544/watchers","watchCount":1,"isWatching":false},"created":"2017-06-07T13:00:45.150+0000","priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.svg","name":"Major","id":"3"},"labels":[],"customfield_12312333":null,"customfield_12312334":null,"customfield_12313422":"false","customfield_12310310":"0.0","customfield_12312331":null,"customfield_12312332":null,"timeestimate":0,"aggregatetimeoriginalestimate":null,"customfield_12311120":null,"customfield_12312330":null,"versions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12335748","id":"12335748","name":"1.1.0","archived":false,"released":true,"releaseDate":"2017-03-29"}],"customfield_12312339":null,"issuelinks":[],"assignee":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=ranganp","name":"ranganp","key":"ranganp","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Prasanna Ranganathan","active":true,"timeZone":"Etc/UTC"},"customfield_12312337":null,"customfield_12312338":null,"updated":"2017-07-18T14:26:32.667+0000","customfield_12312335":null,"customfield_12312336":null,"status":{"self":"https://issues.apache.org/jira/rest/api/2/status/5","description":"A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/resolved.png","name":"Resolved","id":"5","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Done"}},"components":[{"self":"https://issues.apache.org/jira/rest/api/2/component/12331080","id":"12331080","name":"storm-kafka-client"}],"timeoriginalestimate":null,"description":"Situation: Spout configured to use manual commit with a finite number of retries.\n\nIn the above scenario if and when a tuple fails repeatedly and hits the retry limit, it will neither be scheduled for an attempt again nor properly accounted for in the ack() method and in OffsetManager. This will block commits for the partition that the tuple belongs to.","customfield_10010":null,"timetracking":{"remainingEstimate":"0h","timeSpent":"3h 10m","remainingEstimateSeconds":0,"timeSpentSeconds":11400},"customfield_12312026":null,"customfield_12312023":null,"customfield_12312024":null,"attachment":[],"customfield_12312340":null,"aggregatetimeestimate":0,"customfield_12312341":null,"customfield_12312220":null,"customfield_12312022":null,"customfield_12310921":null,"customfield_12310920":"9223372036854775807","customfield_12312823":null,"summary":"Bugs in the Kafka Spout retry logic when using manual commit","creator":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=ranganp","name":"ranganp","key":"ranganp","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Prasanna Ranganathan","active":true,"timeZone":"Etc/UTC"},"subtasks":[],"reporter":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=ranganp","name":"ranganp","key":"ranganp","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Prasanna Ranganathan","active":true,"timeZone":"Etc/UTC"},"customfield_12310291":null,"customfield_12310290":null,"aggregateprogress":{"progress":11400,"total":11400,"percent":100},"environment":null,"customfield_12313520":null,"customfield_12311020":null,"duedate":null,"customfield_12310250":null,"progress":{"progress":11400,"total":11400,"percent":100},"comment":{"comments":[],"maxResults":0,"total":0,"startAt":0},"votes":{"self":"https://issues.apache.org/jira/rest/api/2/issue/STORM-2544/votes","votes":0,"hasVoted":false},"worklog":{"startAt":0,"maxResults":20,"total":20,"worklogs":[{"self":"https://issues.apache.org/jira/rest/api/2/issue/13077986/worklog/44363","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"GitHub user askprasanna opened a pull request:\n\n    https://github.com/apache/storm/pull/2153\n\n    [STORM-2544] Fixing issue in acking of tuples that hit retry limit under manual commit mode\n\n    Situation: Spout configured to use manual commit with a finite number of retries.\n    \n    In the above scenario if and when a tuple fails repeatedly and hits the retry limit, it will neither be scheduled for an attempt again nor properly accounted for in the ack() method and in OffsetManager. This will block commits for the partition that the tuple belongs to.\n\nYou can merge this pull request into a Git repository by running:\n\n    $ git pull https://github.com/askprasanna/storm STORM-2544\n\nAlternatively you can review and apply these changes as the patch at:\n\n    https://github.com/apache/storm/pull/2153.patch\n\nTo close this pull request, make a commit to your master/trunk branch\nwith (at least) the following in the commit message:\n\n    This closes #2153\n    \n----\ncommit 614c1bbded2d08224293e99cdd5d6090b22392f0\nAuthor: Prasanna Ranganathan <prasanna.ranga@flipkart.com>\nDate:   2017-06-07T13:07:24Z\n\n    [STORM-2544] Fixing issue in acking of tuples that hit retry limit under manual commit mode\n\n----\n","created":"2017-06-07T13:08:55.516+0000","updated":"2017-06-07T13:08:55.516+0000","started":"2017-06-07T13:08:55.515+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"44363","issueId":"13077986"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13077986/worklog/44403","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user srdo commented on the issue:\n\n    https://github.com/apache/storm/pull/2153\n  \n    This LGTM. I'm wondering if you would be up for adding a unit test of this as well? (e.g. set up a spout with a RetryService that allows no retries, fail a tuple then verify that it gets committed. See KafkaSpoutEmitTest for an example of unit testing the spout)\n    \n    If not that's fine too.\n","created":"2017-06-07T16:10:01.598+0000","updated":"2017-06-07T16:10:01.598+0000","started":"2017-06-07T16:10:01.598+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"44403","issueId":"13077986"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13077986/worklog/44406","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user askprasanna commented on the issue:\n\n    https://github.com/apache/storm/pull/2153\n  \n    Will try and add the test as suggested soon. \n","created":"2017-06-07T16:27:35.463+0000","updated":"2017-06-07T16:27:35.463+0000","started":"2017-06-07T16:27:35.463+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"44406","issueId":"13077986"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13077986/worklog/44588","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user askprasanna commented on the issue:\n\n    https://github.com/apache/storm/pull/2153\n  \n    Have added the unit test as suggested. Kindly review.\n","created":"2017-06-09T13:03:11.217+0000","updated":"2017-06-09T13:03:11.217+0000","started":"2017-06-09T13:03:11.217+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"44588","issueId":"13077986"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13077986/worklog/44620","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user srdo commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/2153#discussion_r121163277\n  \n    --- Diff: external/storm-kafka-client/src/test/java/org/apache/storm/kafka/spout/KafkaSpoutRetryLimitTest.java ---\n    @@ -0,0 +1,126 @@\n    +/*\n    + * Copyright 2017 The Apache Software Foundation.\n    + *\n    + * Licensed under the Apache License, Version 2.0 (the \"License\");\n    + * you may not use this file except in compliance with the License.\n    + * You may obtain a copy of the License at\n    + *\n    + *      http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +package org.apache.storm.kafka.spout;\n    +\n    +import static org.apache.storm.kafka.spout.builders.SingleTopicKafkaSpoutConfiguration.getKafkaSpoutConfigBuilder;\n    +import static org.junit.Assert.assertEquals;\n    +import static org.junit.Assert.assertTrue;\n    +import static org.mockito.Matchers.*;\n    +import static org.mockito.Mockito.inOrder;\n    +import static org.mockito.Mockito.mock;\n    +import static org.mockito.Mockito.times;\n    +import static org.mockito.Mockito.verify;\n    +import static org.mockito.Mockito.when;\n    +\n    +import java.util.ArrayList;\n    +import java.util.Collections;\n    +import java.util.HashMap;\n    +import java.util.List;\n    +import java.util.Map;\n    +import java.util.Set;\n    +\n    +import org.apache.kafka.clients.consumer.*;\n    +import org.apache.kafka.common.TopicPartition;\n    +import org.apache.storm.kafka.spout.builders.SingleTopicKafkaSpoutConfiguration;\n    +import org.apache.storm.kafka.spout.internal.KafkaConsumerFactory;\n    +import org.apache.storm.spout.SpoutOutputCollector;\n    +import org.apache.storm.task.TopologyContext;\n    +import org.apache.storm.utils.Time;\n    +import org.apache.storm.utils.Time.SimulatedTime;\n    +import org.junit.Test;\n    +import org.mockito.ArgumentCaptor;\n    +import org.mockito.InOrder;\n    +\n    +public class KafkaSpoutRetryLimitTest {\n    +\n    +    private final long offsetCommitPeriodMs = 2_000;\n    +    private final TopologyContext contextMock = mock(TopologyContext.class);\n    +    private final SpoutOutputCollector collectorMock = mock(SpoutOutputCollector.class);\n    +    private final Map<String, Object> conf = new HashMap<>();\n    +    private final TopicPartition partition = new TopicPartition(SingleTopicKafkaSpoutConfiguration.TOPIC, 1);\n    +    private KafkaConsumer<String, String> consumerMock;\n    +    private KafkaSpout<String, String> spout;\n    +    private KafkaSpoutConfig spoutConfig;\n    +\n    +    public static final KafkaSpoutRetryService ZERO_RETRIES_RETRY_SERVICE =\n    +            new KafkaSpoutRetryExponentialBackoff(KafkaSpoutRetryExponentialBackoff.TimeInterval.seconds(0), KafkaSpoutRetryExponentialBackoff.TimeInterval.milliSeconds(0),\n    +                    0, KafkaSpoutRetryExponentialBackoff.TimeInterval.milliSeconds(0));\n    +\n    +    private void setupSpoutWithNoRetry(Set<TopicPartition> assignedPartitions) {\n    +        spoutConfig = getKafkaSpoutConfigBuilder(-1)\n    +                .setOffsetCommitPeriodMs(offsetCommitPeriodMs)\n    +                .setRetry(ZERO_RETRIES_RETRY_SERVICE)\n    +                .build();\n    +\n    +        consumerMock = mock(KafkaConsumer.class);\n    +        KafkaConsumerFactory<String, String> consumerFactory = (kafkaSpoutConfig) -> consumerMock;\n    +\n    +        //Set up a spout listening to 1 topic partition\n    +        spout = new KafkaSpout<>(spoutConfig, consumerFactory);\n    +\n    +        spout.open(conf, contextMock, collectorMock);\n    +        spout.activate();\n    +\n    +        ArgumentCaptor<ConsumerRebalanceListener> rebalanceListenerCapture = ArgumentCaptor.forClass(ConsumerRebalanceListener.class);\n    +        verify(consumerMock).subscribe(anyCollection(), rebalanceListenerCapture.capture());\n    +\n    +        //Assign partitions to the spout\n    +        ConsumerRebalanceListener consumerRebalanceListener = rebalanceListenerCapture.getValue();\n    +        consumerRebalanceListener.onPartitionsAssigned(assignedPartitions);\n    +    }\n    +\n    +    @Test\n    +    public void testFailingTupleCompletesAckAfterRetryLimitIsMet() {\n    +        //Spout should ack failed messages after they hit the retry limit\n    +        try (SimulatedTime simulatedTime = new SimulatedTime()) {\n    +            setupSpoutWithNoRetry(Collections.singleton(partition));\n    +            Map<TopicPartition, List<ConsumerRecord<String, String>>> records = new HashMap<>();\n    +            List<ConsumerRecord<String, String>> recordsForPartition = new ArrayList<>();\n    +            for (int i = 0; i < 1; i++) {\n    --- End diff --\n    \n    Nit: The for loop could be removed\n","created":"2017-06-09T16:05:57.984+0000","updated":"2017-06-09T16:05:57.984+0000","started":"2017-06-09T16:05:57.982+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"44620","issueId":"13077986"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13077986/worklog/44735","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user askprasanna commented on the issue:\n\n    https://github.com/apache/storm/pull/2153\n  \n    Is this PR good to merge? Anything else that I can help with?\n","created":"2017-06-12T07:40:01.015+0000","updated":"2017-06-12T07:40:01.015+0000","started":"2017-06-12T07:40:01.014+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"44735","issueId":"13077986"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13077986/worklog/47933","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user srdo commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/2153#discussion_r127539975\n  \n    --- Diff: external/storm-kafka-client/src/test/java/org/apache/storm/kafka/spout/KafkaSpoutRetryLimitTest.java ---\n    @@ -0,0 +1,127 @@\n    +/*\n    + * Copyright 2017 The Apache Software Foundation.\n    + *\n    + * Licensed under the Apache License, Version 2.0 (the \"License\");\n    + * you may not use this file except in compliance with the License.\n    + * You may obtain a copy of the License at\n    + *\n    + *      http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +package org.apache.storm.kafka.spout;\n    +\n    +import static org.apache.storm.kafka.spout.builders.SingleTopicKafkaSpoutConfiguration.getKafkaSpoutConfigBuilder;\n    +import static org.junit.Assert.assertEquals;\n    +import static org.junit.Assert.assertTrue;\n    +import static org.mockito.Matchers.*;\n    +import static org.mockito.Mockito.inOrder;\n    +import static org.mockito.Mockito.mock;\n    +import static org.mockito.Mockito.times;\n    +import static org.mockito.Mockito.verify;\n    +import static org.mockito.Mockito.when;\n    +\n    +import java.util.ArrayList;\n    +import java.util.Collections;\n    +import java.util.HashMap;\n    +import java.util.List;\n    +import java.util.Map;\n    +import java.util.Set;\n    +\n    +import org.apache.kafka.clients.consumer.*;\n    +import org.apache.kafka.common.TopicPartition;\n    +import org.apache.storm.kafka.spout.builders.SingleTopicKafkaSpoutConfiguration;\n    +import org.apache.storm.kafka.spout.internal.KafkaConsumerFactory;\n    +import org.apache.storm.spout.SpoutOutputCollector;\n    +import org.apache.storm.task.TopologyContext;\n    +import org.apache.storm.utils.Time;\n    +import org.apache.storm.utils.Time.SimulatedTime;\n    +import org.junit.Test;\n    +import org.mockito.ArgumentCaptor;\n    +import org.mockito.InOrder;\n    +\n    +public class KafkaSpoutRetryLimitTest {\n    +\n    +    private final long offsetCommitPeriodMs = 2_000;\n    +    private final TopologyContext contextMock = mock(TopologyContext.class);\n    +    private final SpoutOutputCollector collectorMock = mock(SpoutOutputCollector.class);\n    +    private final Map<String, Object> conf = new HashMap<>();\n    +    private final TopicPartition partition = new TopicPartition(SingleTopicKafkaSpoutConfiguration.TOPIC, 1);\n    +    private KafkaConsumer<String, String> consumerMock;\n    +    private KafkaSpout<String, String> spout;\n    +    private KafkaSpoutConfig spoutConfig;\n    +\n    +    public static final KafkaSpoutRetryService ZERO_RETRIES_RETRY_SERVICE =\n    +            new KafkaSpoutRetryExponentialBackoff(KafkaSpoutRetryExponentialBackoff.TimeInterval.seconds(0), KafkaSpoutRetryExponentialBackoff.TimeInterval.milliSeconds(0),\n    +                    0, KafkaSpoutRetryExponentialBackoff.TimeInterval.milliSeconds(0));\n    +\n    +    private void setupSpoutWithNoRetry(Set<TopicPartition> assignedPartitions) {\n    +        spoutConfig = getKafkaSpoutConfigBuilder(-1)\n    +                .setOffsetCommitPeriodMs(offsetCommitPeriodMs)\n    +                .setRetry(ZERO_RETRIES_RETRY_SERVICE)\n    +                .build();\n    +\n    +        consumerMock = mock(KafkaConsumer.class);\n    +        KafkaConsumerFactory<String, String> consumerFactory = (kafkaSpoutConfig) -> consumerMock;\n    +\n    +        //Set up a spout listening to 1 topic partition\n    +        spout = new KafkaSpout<>(spoutConfig, consumerFactory);\n    +\n    +        spout.open(conf, contextMock, collectorMock);\n    +        spout.activate();\n    +\n    +        ArgumentCaptor<ConsumerRebalanceListener> rebalanceListenerCapture = ArgumentCaptor.forClass(ConsumerRebalanceListener.class);\n    +        verify(consumerMock).subscribe(anyCollection(), rebalanceListenerCapture.capture());\n    +\n    +        //Assign partitions to the spout\n    +        ConsumerRebalanceListener consumerRebalanceListener = rebalanceListenerCapture.getValue();\n    +        consumerRebalanceListener.onPartitionsAssigned(assignedPartitions);\n    +    }\n    +\n    +    @Test\n    +    public void testFailingTupleCompletesAckAfterRetryLimitIsMet() {\n    +        //Spout should ack failed messages after they hit the retry limit\n    +        try (SimulatedTime simulatedTime = new SimulatedTime()) {\n    +            setupSpoutWithNoRetry(Collections.singleton(partition));\n    +            Map<TopicPartition, List<ConsumerRecord<String, String>>> records = new HashMap<>();\n    +            List<ConsumerRecord<String, String>> recordsForPartition = new ArrayList<>();\n    +            int lastOffset = 3;\n    +            for (int i = 0; i <= lastOffset; i++) {\n    +                recordsForPartition.add(new ConsumerRecord(partition.topic(), partition.partition(), i, \"key\", \"value\"));\n    +            }\n    +            records.put(partition, recordsForPartition);\n    +\n    +            when(consumerMock.poll(anyLong()))\n    +                    .thenReturn(new ConsumerRecords(records));\n    +\n    +            for (int i = 0; i < recordsForPartition.size(); i++) {\n    +                spout.nextTuple();\n    +            }\n    +\n    +            ArgumentCaptor<KafkaSpoutMessageId> messageIds = ArgumentCaptor.forClass(KafkaSpoutMessageId.class);\n    +            verify(collectorMock, times(recordsForPartition.size())).emit(anyObject(), anyObject(), messageIds.capture());\n    +\n    +            for (KafkaSpoutMessageId messageId : messageIds.getAllValues()) {\n    +                spout.fail(messageId);\n    +            }\n    +\n    +            // Advance time and then trigger call to kafka consumer commit\n    +            Time.advanceTime(KafkaSpout.TIMER_DELAY_MS + offsetCommitPeriodMs);\n    +            spout.nextTuple();\n    +\n    +            ArgumentCaptor<Map> committedOffsets=ArgumentCaptor.forClass(Map.class);\n    +            InOrder inOrder = inOrder(consumerMock);\n    +            inOrder.verify(consumerMock).commitSync(committedOffsets.capture());\n    +            inOrder.verify(consumerMock).poll(anyLong());\n    +\n    +            //verify that Offset 0 was committed for the given TopicPartition\n    --- End diff --\n    \n    Isn't it offset 3?\n","created":"2017-07-14T20:18:34.444+0000","updated":"2017-07-14T20:18:34.444+0000","started":"2017-07-14T20:18:34.443+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"47933","issueId":"13077986"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13077986/worklog/47934","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user srdo commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/2153#discussion_r127539919\n  \n    --- Diff: external/storm-kafka-client/src/test/java/org/apache/storm/kafka/spout/KafkaSpoutRetryLimitTest.java ---\n    @@ -0,0 +1,127 @@\n    +/*\n    + * Copyright 2017 The Apache Software Foundation.\n    + *\n    + * Licensed under the Apache License, Version 2.0 (the \"License\");\n    + * you may not use this file except in compliance with the License.\n    + * You may obtain a copy of the License at\n    + *\n    + *      http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +package org.apache.storm.kafka.spout;\n    +\n    +import static org.apache.storm.kafka.spout.builders.SingleTopicKafkaSpoutConfiguration.getKafkaSpoutConfigBuilder;\n    +import static org.junit.Assert.assertEquals;\n    +import static org.junit.Assert.assertTrue;\n    +import static org.mockito.Matchers.*;\n    +import static org.mockito.Mockito.inOrder;\n    +import static org.mockito.Mockito.mock;\n    +import static org.mockito.Mockito.times;\n    +import static org.mockito.Mockito.verify;\n    +import static org.mockito.Mockito.when;\n    +\n    +import java.util.ArrayList;\n    +import java.util.Collections;\n    +import java.util.HashMap;\n    +import java.util.List;\n    +import java.util.Map;\n    +import java.util.Set;\n    +\n    +import org.apache.kafka.clients.consumer.*;\n    +import org.apache.kafka.common.TopicPartition;\n    +import org.apache.storm.kafka.spout.builders.SingleTopicKafkaSpoutConfiguration;\n    +import org.apache.storm.kafka.spout.internal.KafkaConsumerFactory;\n    +import org.apache.storm.spout.SpoutOutputCollector;\n    +import org.apache.storm.task.TopologyContext;\n    +import org.apache.storm.utils.Time;\n    +import org.apache.storm.utils.Time.SimulatedTime;\n    +import org.junit.Test;\n    +import org.mockito.ArgumentCaptor;\n    +import org.mockito.InOrder;\n    +\n    +public class KafkaSpoutRetryLimitTest {\n    +\n    +    private final long offsetCommitPeriodMs = 2_000;\n    +    private final TopologyContext contextMock = mock(TopologyContext.class);\n    +    private final SpoutOutputCollector collectorMock = mock(SpoutOutputCollector.class);\n    +    private final Map<String, Object> conf = new HashMap<>();\n    +    private final TopicPartition partition = new TopicPartition(SingleTopicKafkaSpoutConfiguration.TOPIC, 1);\n    +    private KafkaConsumer<String, String> consumerMock;\n    +    private KafkaSpout<String, String> spout;\n    +    private KafkaSpoutConfig spoutConfig;\n    +\n    +    public static final KafkaSpoutRetryService ZERO_RETRIES_RETRY_SERVICE =\n    +            new KafkaSpoutRetryExponentialBackoff(KafkaSpoutRetryExponentialBackoff.TimeInterval.seconds(0), KafkaSpoutRetryExponentialBackoff.TimeInterval.milliSeconds(0),\n    +                    0, KafkaSpoutRetryExponentialBackoff.TimeInterval.milliSeconds(0));\n    +\n    +    private void setupSpoutWithNoRetry(Set<TopicPartition> assignedPartitions) {\n    +        spoutConfig = getKafkaSpoutConfigBuilder(-1)\n    +                .setOffsetCommitPeriodMs(offsetCommitPeriodMs)\n    +                .setRetry(ZERO_RETRIES_RETRY_SERVICE)\n    +                .build();\n    +\n    +        consumerMock = mock(KafkaConsumer.class);\n    +        KafkaConsumerFactory<String, String> consumerFactory = (kafkaSpoutConfig) -> consumerMock;\n    +\n    +        //Set up a spout listening to 1 topic partition\n    +        spout = new KafkaSpout<>(spoutConfig, consumerFactory);\n    +\n    +        spout.open(conf, contextMock, collectorMock);\n    +        spout.activate();\n    +\n    +        ArgumentCaptor<ConsumerRebalanceListener> rebalanceListenerCapture = ArgumentCaptor.forClass(ConsumerRebalanceListener.class);\n    +        verify(consumerMock).subscribe(anyCollection(), rebalanceListenerCapture.capture());\n    +\n    +        //Assign partitions to the spout\n    +        ConsumerRebalanceListener consumerRebalanceListener = rebalanceListenerCapture.getValue();\n    +        consumerRebalanceListener.onPartitionsAssigned(assignedPartitions);\n    +    }\n    +\n    +    @Test\n    +    public void testFailingTupleCompletesAckAfterRetryLimitIsMet() {\n    +        //Spout should ack failed messages after they hit the retry limit\n    +        try (SimulatedTime simulatedTime = new SimulatedTime()) {\n    +            setupSpoutWithNoRetry(Collections.singleton(partition));\n    +            Map<TopicPartition, List<ConsumerRecord<String, String>>> records = new HashMap<>();\n    +            List<ConsumerRecord<String, String>> recordsForPartition = new ArrayList<>();\n    +            int lastOffset = 3;\n    +            for (int i = 0; i <= lastOffset; i++) {\n    +                recordsForPartition.add(new ConsumerRecord(partition.topic(), partition.partition(), i, \"key\", \"value\"));\n    +            }\n    +            records.put(partition, recordsForPartition);\n    +\n    +            when(consumerMock.poll(anyLong()))\n    +                    .thenReturn(new ConsumerRecords(records));\n    +\n    +            for (int i = 0; i < recordsForPartition.size(); i++) {\n    +                spout.nextTuple();\n    +            }\n    +\n    +            ArgumentCaptor<KafkaSpoutMessageId> messageIds = ArgumentCaptor.forClass(KafkaSpoutMessageId.class);\n    +            verify(collectorMock, times(recordsForPartition.size())).emit(anyObject(), anyObject(), messageIds.capture());\n    +\n    +            for (KafkaSpoutMessageId messageId : messageIds.getAllValues()) {\n    +                spout.fail(messageId);\n    +            }\n    +\n    +            // Advance time and then trigger call to kafka consumer commit\n    +            Time.advanceTime(KafkaSpout.TIMER_DELAY_MS + offsetCommitPeriodMs);\n    +            spout.nextTuple();\n    +\n    +            ArgumentCaptor<Map> committedOffsets=ArgumentCaptor.forClass(Map.class);\n    +            InOrder inOrder = inOrder(consumerMock);\n    +            inOrder.verify(consumerMock).commitSync(committedOffsets.capture());\n    +            inOrder.verify(consumerMock).poll(anyLong());\n    --- End diff --\n    \n    Nit: If this poll isn't important to the test, I'd remove it\n","created":"2017-07-14T20:18:34.445+0000","updated":"2017-07-14T20:18:34.445+0000","started":"2017-07-14T20:18:34.445+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"47934","issueId":"13077986"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13077986/worklog/47935","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user srdo commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/2153#discussion_r127539677\n  \n    --- Diff: external/storm-kafka-client/src/test/java/org/apache/storm/kafka/spout/KafkaSpoutRetryLimitTest.java ---\n    @@ -0,0 +1,127 @@\n    +/*\n    + * Copyright 2017 The Apache Software Foundation.\n    + *\n    + * Licensed under the Apache License, Version 2.0 (the \"License\");\n    + * you may not use this file except in compliance with the License.\n    + * You may obtain a copy of the License at\n    + *\n    + *      http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +package org.apache.storm.kafka.spout;\n    +\n    +import static org.apache.storm.kafka.spout.builders.SingleTopicKafkaSpoutConfiguration.getKafkaSpoutConfigBuilder;\n    +import static org.junit.Assert.assertEquals;\n    +import static org.junit.Assert.assertTrue;\n    +import static org.mockito.Matchers.*;\n    +import static org.mockito.Mockito.inOrder;\n    +import static org.mockito.Mockito.mock;\n    +import static org.mockito.Mockito.times;\n    +import static org.mockito.Mockito.verify;\n    +import static org.mockito.Mockito.when;\n    +\n    +import java.util.ArrayList;\n    +import java.util.Collections;\n    +import java.util.HashMap;\n    +import java.util.List;\n    +import java.util.Map;\n    +import java.util.Set;\n    +\n    +import org.apache.kafka.clients.consumer.*;\n    +import org.apache.kafka.common.TopicPartition;\n    +import org.apache.storm.kafka.spout.builders.SingleTopicKafkaSpoutConfiguration;\n    +import org.apache.storm.kafka.spout.internal.KafkaConsumerFactory;\n    +import org.apache.storm.spout.SpoutOutputCollector;\n    +import org.apache.storm.task.TopologyContext;\n    +import org.apache.storm.utils.Time;\n    +import org.apache.storm.utils.Time.SimulatedTime;\n    +import org.junit.Test;\n    +import org.mockito.ArgumentCaptor;\n    +import org.mockito.InOrder;\n    +\n    +public class KafkaSpoutRetryLimitTest {\n    +\n    +    private final long offsetCommitPeriodMs = 2_000;\n    +    private final TopologyContext contextMock = mock(TopologyContext.class);\n    +    private final SpoutOutputCollector collectorMock = mock(SpoutOutputCollector.class);\n    +    private final Map<String, Object> conf = new HashMap<>();\n    +    private final TopicPartition partition = new TopicPartition(SingleTopicKafkaSpoutConfiguration.TOPIC, 1);\n    +    private KafkaConsumer<String, String> consumerMock;\n    +    private KafkaSpout<String, String> spout;\n    +    private KafkaSpoutConfig spoutConfig;\n    +\n    +    public static final KafkaSpoutRetryService ZERO_RETRIES_RETRY_SERVICE =\n    +            new KafkaSpoutRetryExponentialBackoff(KafkaSpoutRetryExponentialBackoff.TimeInterval.seconds(0), KafkaSpoutRetryExponentialBackoff.TimeInterval.milliSeconds(0),\n    +                    0, KafkaSpoutRetryExponentialBackoff.TimeInterval.milliSeconds(0));\n    +\n    +    private void setupSpoutWithNoRetry(Set<TopicPartition> assignedPartitions) {\n    +        spoutConfig = getKafkaSpoutConfigBuilder(-1)\n    +                .setOffsetCommitPeriodMs(offsetCommitPeriodMs)\n    +                .setRetry(ZERO_RETRIES_RETRY_SERVICE)\n    +                .build();\n    +\n    +        consumerMock = mock(KafkaConsumer.class);\n    +        KafkaConsumerFactory<String, String> consumerFactory = (kafkaSpoutConfig) -> consumerMock;\n    +\n    +        //Set up a spout listening to 1 topic partition\n    --- End diff --\n    \n    Nit: This is only true if assignedPartitions only has one entry\n","created":"2017-07-14T20:18:34.547+0000","updated":"2017-07-14T20:18:34.547+0000","started":"2017-07-14T20:18:34.546+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"47935","issueId":"13077986"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13077986/worklog/47936","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user askprasanna commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/2153#discussion_r127540789\n  \n    --- Diff: external/storm-kafka-client/src/test/java/org/apache/storm/kafka/spout/KafkaSpoutRetryLimitTest.java ---\n    @@ -0,0 +1,127 @@\n    +/*\n    + * Copyright 2017 The Apache Software Foundation.\n    + *\n    + * Licensed under the Apache License, Version 2.0 (the \"License\");\n    + * you may not use this file except in compliance with the License.\n    + * You may obtain a copy of the License at\n    + *\n    + *      http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +package org.apache.storm.kafka.spout;\n    +\n    +import static org.apache.storm.kafka.spout.builders.SingleTopicKafkaSpoutConfiguration.getKafkaSpoutConfigBuilder;\n    +import static org.junit.Assert.assertEquals;\n    +import static org.junit.Assert.assertTrue;\n    +import static org.mockito.Matchers.*;\n    +import static org.mockito.Mockito.inOrder;\n    +import static org.mockito.Mockito.mock;\n    +import static org.mockito.Mockito.times;\n    +import static org.mockito.Mockito.verify;\n    +import static org.mockito.Mockito.when;\n    +\n    +import java.util.ArrayList;\n    +import java.util.Collections;\n    +import java.util.HashMap;\n    +import java.util.List;\n    +import java.util.Map;\n    +import java.util.Set;\n    +\n    +import org.apache.kafka.clients.consumer.*;\n    +import org.apache.kafka.common.TopicPartition;\n    +import org.apache.storm.kafka.spout.builders.SingleTopicKafkaSpoutConfiguration;\n    +import org.apache.storm.kafka.spout.internal.KafkaConsumerFactory;\n    +import org.apache.storm.spout.SpoutOutputCollector;\n    +import org.apache.storm.task.TopologyContext;\n    +import org.apache.storm.utils.Time;\n    +import org.apache.storm.utils.Time.SimulatedTime;\n    +import org.junit.Test;\n    +import org.mockito.ArgumentCaptor;\n    +import org.mockito.InOrder;\n    +\n    +public class KafkaSpoutRetryLimitTest {\n    +\n    +    private final long offsetCommitPeriodMs = 2_000;\n    +    private final TopologyContext contextMock = mock(TopologyContext.class);\n    +    private final SpoutOutputCollector collectorMock = mock(SpoutOutputCollector.class);\n    +    private final Map<String, Object> conf = new HashMap<>();\n    +    private final TopicPartition partition = new TopicPartition(SingleTopicKafkaSpoutConfiguration.TOPIC, 1);\n    +    private KafkaConsumer<String, String> consumerMock;\n    +    private KafkaSpout<String, String> spout;\n    +    private KafkaSpoutConfig spoutConfig;\n    +\n    +    public static final KafkaSpoutRetryService ZERO_RETRIES_RETRY_SERVICE =\n    +            new KafkaSpoutRetryExponentialBackoff(KafkaSpoutRetryExponentialBackoff.TimeInterval.seconds(0), KafkaSpoutRetryExponentialBackoff.TimeInterval.milliSeconds(0),\n    +                    0, KafkaSpoutRetryExponentialBackoff.TimeInterval.milliSeconds(0));\n    +\n    +    private void setupSpoutWithNoRetry(Set<TopicPartition> assignedPartitions) {\n    +        spoutConfig = getKafkaSpoutConfigBuilder(-1)\n    +                .setOffsetCommitPeriodMs(offsetCommitPeriodMs)\n    +                .setRetry(ZERO_RETRIES_RETRY_SERVICE)\n    +                .build();\n    +\n    +        consumerMock = mock(KafkaConsumer.class);\n    +        KafkaConsumerFactory<String, String> consumerFactory = (kafkaSpoutConfig) -> consumerMock;\n    +\n    +        //Set up a spout listening to 1 topic partition\n    --- End diff --\n    \n    will remove this comment\n","created":"2017-07-14T20:21:33.550+0000","updated":"2017-07-14T20:21:33.550+0000","started":"2017-07-14T20:21:33.549+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"47936","issueId":"13077986"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13077986/worklog/47937","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user askprasanna commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/2153#discussion_r127541772\n  \n    --- Diff: external/storm-kafka-client/src/test/java/org/apache/storm/kafka/spout/KafkaSpoutRetryLimitTest.java ---\n    @@ -0,0 +1,127 @@\n    +/*\n    + * Copyright 2017 The Apache Software Foundation.\n    + *\n    + * Licensed under the Apache License, Version 2.0 (the \"License\");\n    + * you may not use this file except in compliance with the License.\n    + * You may obtain a copy of the License at\n    + *\n    + *      http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +package org.apache.storm.kafka.spout;\n    +\n    +import static org.apache.storm.kafka.spout.builders.SingleTopicKafkaSpoutConfiguration.getKafkaSpoutConfigBuilder;\n    +import static org.junit.Assert.assertEquals;\n    +import static org.junit.Assert.assertTrue;\n    +import static org.mockito.Matchers.*;\n    +import static org.mockito.Mockito.inOrder;\n    +import static org.mockito.Mockito.mock;\n    +import static org.mockito.Mockito.times;\n    +import static org.mockito.Mockito.verify;\n    +import static org.mockito.Mockito.when;\n    +\n    +import java.util.ArrayList;\n    +import java.util.Collections;\n    +import java.util.HashMap;\n    +import java.util.List;\n    +import java.util.Map;\n    +import java.util.Set;\n    +\n    +import org.apache.kafka.clients.consumer.*;\n    +import org.apache.kafka.common.TopicPartition;\n    +import org.apache.storm.kafka.spout.builders.SingleTopicKafkaSpoutConfiguration;\n    +import org.apache.storm.kafka.spout.internal.KafkaConsumerFactory;\n    +import org.apache.storm.spout.SpoutOutputCollector;\n    +import org.apache.storm.task.TopologyContext;\n    +import org.apache.storm.utils.Time;\n    +import org.apache.storm.utils.Time.SimulatedTime;\n    +import org.junit.Test;\n    +import org.mockito.ArgumentCaptor;\n    +import org.mockito.InOrder;\n    +\n    +public class KafkaSpoutRetryLimitTest {\n    +\n    +    private final long offsetCommitPeriodMs = 2_000;\n    +    private final TopologyContext contextMock = mock(TopologyContext.class);\n    +    private final SpoutOutputCollector collectorMock = mock(SpoutOutputCollector.class);\n    +    private final Map<String, Object> conf = new HashMap<>();\n    +    private final TopicPartition partition = new TopicPartition(SingleTopicKafkaSpoutConfiguration.TOPIC, 1);\n    +    private KafkaConsumer<String, String> consumerMock;\n    +    private KafkaSpout<String, String> spout;\n    +    private KafkaSpoutConfig spoutConfig;\n    +\n    +    public static final KafkaSpoutRetryService ZERO_RETRIES_RETRY_SERVICE =\n    +            new KafkaSpoutRetryExponentialBackoff(KafkaSpoutRetryExponentialBackoff.TimeInterval.seconds(0), KafkaSpoutRetryExponentialBackoff.TimeInterval.milliSeconds(0),\n    +                    0, KafkaSpoutRetryExponentialBackoff.TimeInterval.milliSeconds(0));\n    +\n    +    private void setupSpoutWithNoRetry(Set<TopicPartition> assignedPartitions) {\n    +        spoutConfig = getKafkaSpoutConfigBuilder(-1)\n    +                .setOffsetCommitPeriodMs(offsetCommitPeriodMs)\n    +                .setRetry(ZERO_RETRIES_RETRY_SERVICE)\n    +                .build();\n    +\n    +        consumerMock = mock(KafkaConsumer.class);\n    +        KafkaConsumerFactory<String, String> consumerFactory = (kafkaSpoutConfig) -> consumerMock;\n    +\n    +        //Set up a spout listening to 1 topic partition\n    +        spout = new KafkaSpout<>(spoutConfig, consumerFactory);\n    +\n    +        spout.open(conf, contextMock, collectorMock);\n    +        spout.activate();\n    +\n    +        ArgumentCaptor<ConsumerRebalanceListener> rebalanceListenerCapture = ArgumentCaptor.forClass(ConsumerRebalanceListener.class);\n    +        verify(consumerMock).subscribe(anyCollection(), rebalanceListenerCapture.capture());\n    +\n    +        //Assign partitions to the spout\n    +        ConsumerRebalanceListener consumerRebalanceListener = rebalanceListenerCapture.getValue();\n    +        consumerRebalanceListener.onPartitionsAssigned(assignedPartitions);\n    +    }\n    +\n    +    @Test\n    +    public void testFailingTupleCompletesAckAfterRetryLimitIsMet() {\n    +        //Spout should ack failed messages after they hit the retry limit\n    +        try (SimulatedTime simulatedTime = new SimulatedTime()) {\n    +            setupSpoutWithNoRetry(Collections.singleton(partition));\n    +            Map<TopicPartition, List<ConsumerRecord<String, String>>> records = new HashMap<>();\n    +            List<ConsumerRecord<String, String>> recordsForPartition = new ArrayList<>();\n    +            int lastOffset = 3;\n    +            for (int i = 0; i <= lastOffset; i++) {\n    +                recordsForPartition.add(new ConsumerRecord(partition.topic(), partition.partition(), i, \"key\", \"value\"));\n    +            }\n    +            records.put(partition, recordsForPartition);\n    +\n    +            when(consumerMock.poll(anyLong()))\n    +                    .thenReturn(new ConsumerRecords(records));\n    +\n    +            for (int i = 0; i < recordsForPartition.size(); i++) {\n    +                spout.nextTuple();\n    +            }\n    +\n    +            ArgumentCaptor<KafkaSpoutMessageId> messageIds = ArgumentCaptor.forClass(KafkaSpoutMessageId.class);\n    +            verify(collectorMock, times(recordsForPartition.size())).emit(anyObject(), anyObject(), messageIds.capture());\n    +\n    +            for (KafkaSpoutMessageId messageId : messageIds.getAllValues()) {\n    +                spout.fail(messageId);\n    +            }\n    +\n    +            // Advance time and then trigger call to kafka consumer commit\n    +            Time.advanceTime(KafkaSpout.TIMER_DELAY_MS + offsetCommitPeriodMs);\n    +            spout.nextTuple();\n    +\n    +            ArgumentCaptor<Map> committedOffsets=ArgumentCaptor.forClass(Map.class);\n    +            InOrder inOrder = inOrder(consumerMock);\n    +            inOrder.verify(consumerMock).commitSync(committedOffsets.capture());\n    +            inOrder.verify(consumerMock).poll(anyLong());\n    +\n    +            //verify that Offset 0 was committed for the given TopicPartition\n    --- End diff --\n    \n    yes. will update comment.\n","created":"2017-07-14T20:27:24.277+0000","updated":"2017-07-14T20:27:24.277+0000","started":"2017-07-14T20:27:24.277+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"47937","issueId":"13077986"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13077986/worklog/47938","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user askprasanna commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/2153#discussion_r127543142\n  \n    --- Diff: external/storm-kafka-client/src/test/java/org/apache/storm/kafka/spout/KafkaSpoutRetryLimitTest.java ---\n    @@ -0,0 +1,127 @@\n    +/*\n    + * Copyright 2017 The Apache Software Foundation.\n    + *\n    + * Licensed under the Apache License, Version 2.0 (the \"License\");\n    + * you may not use this file except in compliance with the License.\n    + * You may obtain a copy of the License at\n    + *\n    + *      http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +package org.apache.storm.kafka.spout;\n    +\n    +import static org.apache.storm.kafka.spout.builders.SingleTopicKafkaSpoutConfiguration.getKafkaSpoutConfigBuilder;\n    +import static org.junit.Assert.assertEquals;\n    +import static org.junit.Assert.assertTrue;\n    +import static org.mockito.Matchers.*;\n    +import static org.mockito.Mockito.inOrder;\n    +import static org.mockito.Mockito.mock;\n    +import static org.mockito.Mockito.times;\n    +import static org.mockito.Mockito.verify;\n    +import static org.mockito.Mockito.when;\n    +\n    +import java.util.ArrayList;\n    +import java.util.Collections;\n    +import java.util.HashMap;\n    +import java.util.List;\n    +import java.util.Map;\n    +import java.util.Set;\n    +\n    +import org.apache.kafka.clients.consumer.*;\n    +import org.apache.kafka.common.TopicPartition;\n    +import org.apache.storm.kafka.spout.builders.SingleTopicKafkaSpoutConfiguration;\n    +import org.apache.storm.kafka.spout.internal.KafkaConsumerFactory;\n    +import org.apache.storm.spout.SpoutOutputCollector;\n    +import org.apache.storm.task.TopologyContext;\n    +import org.apache.storm.utils.Time;\n    +import org.apache.storm.utils.Time.SimulatedTime;\n    +import org.junit.Test;\n    +import org.mockito.ArgumentCaptor;\n    +import org.mockito.InOrder;\n    +\n    +public class KafkaSpoutRetryLimitTest {\n    +\n    +    private final long offsetCommitPeriodMs = 2_000;\n    +    private final TopologyContext contextMock = mock(TopologyContext.class);\n    +    private final SpoutOutputCollector collectorMock = mock(SpoutOutputCollector.class);\n    +    private final Map<String, Object> conf = new HashMap<>();\n    +    private final TopicPartition partition = new TopicPartition(SingleTopicKafkaSpoutConfiguration.TOPIC, 1);\n    +    private KafkaConsumer<String, String> consumerMock;\n    +    private KafkaSpout<String, String> spout;\n    +    private KafkaSpoutConfig spoutConfig;\n    +\n    +    public static final KafkaSpoutRetryService ZERO_RETRIES_RETRY_SERVICE =\n    +            new KafkaSpoutRetryExponentialBackoff(KafkaSpoutRetryExponentialBackoff.TimeInterval.seconds(0), KafkaSpoutRetryExponentialBackoff.TimeInterval.milliSeconds(0),\n    +                    0, KafkaSpoutRetryExponentialBackoff.TimeInterval.milliSeconds(0));\n    +\n    +    private void setupSpoutWithNoRetry(Set<TopicPartition> assignedPartitions) {\n    +        spoutConfig = getKafkaSpoutConfigBuilder(-1)\n    +                .setOffsetCommitPeriodMs(offsetCommitPeriodMs)\n    +                .setRetry(ZERO_RETRIES_RETRY_SERVICE)\n    +                .build();\n    +\n    +        consumerMock = mock(KafkaConsumer.class);\n    +        KafkaConsumerFactory<String, String> consumerFactory = (kafkaSpoutConfig) -> consumerMock;\n    +\n    +        //Set up a spout listening to 1 topic partition\n    +        spout = new KafkaSpout<>(spoutConfig, consumerFactory);\n    +\n    +        spout.open(conf, contextMock, collectorMock);\n    +        spout.activate();\n    +\n    +        ArgumentCaptor<ConsumerRebalanceListener> rebalanceListenerCapture = ArgumentCaptor.forClass(ConsumerRebalanceListener.class);\n    +        verify(consumerMock).subscribe(anyCollection(), rebalanceListenerCapture.capture());\n    +\n    +        //Assign partitions to the spout\n    +        ConsumerRebalanceListener consumerRebalanceListener = rebalanceListenerCapture.getValue();\n    +        consumerRebalanceListener.onPartitionsAssigned(assignedPartitions);\n    +    }\n    +\n    +    @Test\n    +    public void testFailingTupleCompletesAckAfterRetryLimitIsMet() {\n    +        //Spout should ack failed messages after they hit the retry limit\n    +        try (SimulatedTime simulatedTime = new SimulatedTime()) {\n    +            setupSpoutWithNoRetry(Collections.singleton(partition));\n    +            Map<TopicPartition, List<ConsumerRecord<String, String>>> records = new HashMap<>();\n    +            List<ConsumerRecord<String, String>> recordsForPartition = new ArrayList<>();\n    +            int lastOffset = 3;\n    +            for (int i = 0; i <= lastOffset; i++) {\n    +                recordsForPartition.add(new ConsumerRecord(partition.topic(), partition.partition(), i, \"key\", \"value\"));\n    +            }\n    +            records.put(partition, recordsForPartition);\n    +\n    +            when(consumerMock.poll(anyLong()))\n    +                    .thenReturn(new ConsumerRecords(records));\n    +\n    +            for (int i = 0; i < recordsForPartition.size(); i++) {\n    +                spout.nextTuple();\n    +            }\n    +\n    +            ArgumentCaptor<KafkaSpoutMessageId> messageIds = ArgumentCaptor.forClass(KafkaSpoutMessageId.class);\n    +            verify(collectorMock, times(recordsForPartition.size())).emit(anyObject(), anyObject(), messageIds.capture());\n    +\n    +            for (KafkaSpoutMessageId messageId : messageIds.getAllValues()) {\n    +                spout.fail(messageId);\n    +            }\n    +\n    +            // Advance time and then trigger call to kafka consumer commit\n    +            Time.advanceTime(KafkaSpout.TIMER_DELAY_MS + offsetCommitPeriodMs);\n    +            spout.nextTuple();\n    +\n    +            ArgumentCaptor<Map> committedOffsets=ArgumentCaptor.forClass(Map.class);\n    +            InOrder inOrder = inOrder(consumerMock);\n    +            inOrder.verify(consumerMock).commitSync(committedOffsets.capture());\n    +            inOrder.verify(consumerMock).poll(anyLong());\n    --- End diff --\n    \n    There is a fair bit of logic around calling commit and poll on the kafka consumer once the call to nextTuple() is made. Feel it is good to verify the flow till poll is called. \n","created":"2017-07-14T20:35:23.813+0000","updated":"2017-07-14T20:35:23.813+0000","started":"2017-07-14T20:35:23.812+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"47938","issueId":"13077986"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13077986/worklog/47940","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user srdo commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/2153#discussion_r127544434\n  \n    --- Diff: external/storm-kafka-client/src/test/java/org/apache/storm/kafka/spout/KafkaSpoutRetryLimitTest.java ---\n    @@ -0,0 +1,127 @@\n    +/*\n    + * Copyright 2017 The Apache Software Foundation.\n    + *\n    + * Licensed under the Apache License, Version 2.0 (the \"License\");\n    + * you may not use this file except in compliance with the License.\n    + * You may obtain a copy of the License at\n    + *\n    + *      http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +package org.apache.storm.kafka.spout;\n    +\n    +import static org.apache.storm.kafka.spout.builders.SingleTopicKafkaSpoutConfiguration.getKafkaSpoutConfigBuilder;\n    +import static org.junit.Assert.assertEquals;\n    +import static org.junit.Assert.assertTrue;\n    +import static org.mockito.Matchers.*;\n    +import static org.mockito.Mockito.inOrder;\n    +import static org.mockito.Mockito.mock;\n    +import static org.mockito.Mockito.times;\n    +import static org.mockito.Mockito.verify;\n    +import static org.mockito.Mockito.when;\n    +\n    +import java.util.ArrayList;\n    +import java.util.Collections;\n    +import java.util.HashMap;\n    +import java.util.List;\n    +import java.util.Map;\n    +import java.util.Set;\n    +\n    +import org.apache.kafka.clients.consumer.*;\n    +import org.apache.kafka.common.TopicPartition;\n    +import org.apache.storm.kafka.spout.builders.SingleTopicKafkaSpoutConfiguration;\n    +import org.apache.storm.kafka.spout.internal.KafkaConsumerFactory;\n    +import org.apache.storm.spout.SpoutOutputCollector;\n    +import org.apache.storm.task.TopologyContext;\n    +import org.apache.storm.utils.Time;\n    +import org.apache.storm.utils.Time.SimulatedTime;\n    +import org.junit.Test;\n    +import org.mockito.ArgumentCaptor;\n    +import org.mockito.InOrder;\n    +\n    +public class KafkaSpoutRetryLimitTest {\n    +\n    +    private final long offsetCommitPeriodMs = 2_000;\n    +    private final TopologyContext contextMock = mock(TopologyContext.class);\n    +    private final SpoutOutputCollector collectorMock = mock(SpoutOutputCollector.class);\n    +    private final Map<String, Object> conf = new HashMap<>();\n    +    private final TopicPartition partition = new TopicPartition(SingleTopicKafkaSpoutConfiguration.TOPIC, 1);\n    +    private KafkaConsumer<String, String> consumerMock;\n    +    private KafkaSpout<String, String> spout;\n    +    private KafkaSpoutConfig spoutConfig;\n    +\n    +    public static final KafkaSpoutRetryService ZERO_RETRIES_RETRY_SERVICE =\n    +            new KafkaSpoutRetryExponentialBackoff(KafkaSpoutRetryExponentialBackoff.TimeInterval.seconds(0), KafkaSpoutRetryExponentialBackoff.TimeInterval.milliSeconds(0),\n    +                    0, KafkaSpoutRetryExponentialBackoff.TimeInterval.milliSeconds(0));\n    +\n    +    private void setupSpoutWithNoRetry(Set<TopicPartition> assignedPartitions) {\n    +        spoutConfig = getKafkaSpoutConfigBuilder(-1)\n    +                .setOffsetCommitPeriodMs(offsetCommitPeriodMs)\n    +                .setRetry(ZERO_RETRIES_RETRY_SERVICE)\n    +                .build();\n    +\n    +        consumerMock = mock(KafkaConsumer.class);\n    +        KafkaConsumerFactory<String, String> consumerFactory = (kafkaSpoutConfig) -> consumerMock;\n    +\n    +        //Set up a spout listening to 1 topic partition\n    +        spout = new KafkaSpout<>(spoutConfig, consumerFactory);\n    +\n    +        spout.open(conf, contextMock, collectorMock);\n    +        spout.activate();\n    +\n    +        ArgumentCaptor<ConsumerRebalanceListener> rebalanceListenerCapture = ArgumentCaptor.forClass(ConsumerRebalanceListener.class);\n    +        verify(consumerMock).subscribe(anyCollection(), rebalanceListenerCapture.capture());\n    +\n    +        //Assign partitions to the spout\n    +        ConsumerRebalanceListener consumerRebalanceListener = rebalanceListenerCapture.getValue();\n    +        consumerRebalanceListener.onPartitionsAssigned(assignedPartitions);\n    +    }\n    +\n    +    @Test\n    +    public void testFailingTupleCompletesAckAfterRetryLimitIsMet() {\n    +        //Spout should ack failed messages after they hit the retry limit\n    +        try (SimulatedTime simulatedTime = new SimulatedTime()) {\n    +            setupSpoutWithNoRetry(Collections.singleton(partition));\n    +            Map<TopicPartition, List<ConsumerRecord<String, String>>> records = new HashMap<>();\n    +            List<ConsumerRecord<String, String>> recordsForPartition = new ArrayList<>();\n    +            int lastOffset = 3;\n    +            for (int i = 0; i <= lastOffset; i++) {\n    +                recordsForPartition.add(new ConsumerRecord(partition.topic(), partition.partition(), i, \"key\", \"value\"));\n    +            }\n    +            records.put(partition, recordsForPartition);\n    +\n    +            when(consumerMock.poll(anyLong()))\n    +                    .thenReturn(new ConsumerRecords(records));\n    +\n    +            for (int i = 0; i < recordsForPartition.size(); i++) {\n    +                spout.nextTuple();\n    +            }\n    +\n    +            ArgumentCaptor<KafkaSpoutMessageId> messageIds = ArgumentCaptor.forClass(KafkaSpoutMessageId.class);\n    +            verify(collectorMock, times(recordsForPartition.size())).emit(anyObject(), anyObject(), messageIds.capture());\n    +\n    +            for (KafkaSpoutMessageId messageId : messageIds.getAllValues()) {\n    +                spout.fail(messageId);\n    +            }\n    +\n    +            // Advance time and then trigger call to kafka consumer commit\n    +            Time.advanceTime(KafkaSpout.TIMER_DELAY_MS + offsetCommitPeriodMs);\n    +            spout.nextTuple();\n    +\n    +            ArgumentCaptor<Map> committedOffsets=ArgumentCaptor.forClass(Map.class);\n    +            InOrder inOrder = inOrder(consumerMock);\n    +            inOrder.verify(consumerMock).commitSync(committedOffsets.capture());\n    +            inOrder.verify(consumerMock).poll(anyLong());\n    --- End diff --\n    \n    I agree. Sorry, I misremembered, I thought we already had tests for checking this order. Turns out the ones I thought of were checking seek-poll, not commit-poll. Nevermind :)\n","created":"2017-07-14T20:42:51.113+0000","updated":"2017-07-14T20:42:51.113+0000","started":"2017-07-14T20:42:51.113+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"47940","issueId":"13077986"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13077986/worklog/48059","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"GitHub user bharathguvvala opened a pull request:\n\n    https://github.com/apache/storm/pull/2221\n\n    STORM-2544: [1.x-branch] Fixing issue in acking of tuples that hit retry limit under manual commit mode\n\n    \n\nYou can merge this pull request into a Git repository by running:\n\n    $ git pull https://github.com/bharathguvvala/storm 1.x-STORM-2544\n\nAlternatively you can review and apply these changes as the patch at:\n\n    https://github.com/apache/storm/pull/2221.patch\n\nTo close this pull request, make a commit to your master/trunk branch\nwith (at least) the following in the commit message:\n\n    This closes #2221\n    \n----\ncommit 11bcf2bfbefbd331ab352135b60e8d81bcb3414c\nAuthor: Prasanna Ranganathan <prasanna.ranga@flipkart.com>\nDate:   2017-06-07T13:07:24Z\n\n    [STORM-2544] Fixing issue in acking of tuples that hit retry limit under manual commit mode\n\n----\n","created":"2017-07-18T07:24:16.131+0000","updated":"2017-07-18T07:24:16.131+0000","started":"2017-07-18T07:24:16.120+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"48059","issueId":"13077986"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13077986/worklog/48060","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user askprasanna commented on the issue:\n\n    https://github.com/apache/storm/pull/2153\n  \n    Created PR https://github.com/apache/storm/pull/2221 for 1.x-branch (cc @bharathguvvala)\n","created":"2017-07-18T07:25:18.027+0000","updated":"2017-07-18T07:25:18.027+0000","started":"2017-07-18T07:25:18.027+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"48060","issueId":"13077986"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13077986/worklog/48064","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user asfgit closed the pull request at:\n\n    https://github.com/apache/storm/pull/2153\n","created":"2017-07-18T09:11:17.930+0000","updated":"2017-07-18T09:11:17.930+0000","started":"2017-07-18T09:11:17.930+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"48064","issueId":"13077986"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13077986/worklog/48065","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user srdo commented on the issue:\n\n    https://github.com/apache/storm/pull/2153\n  \n    Thanks @askprasanna. Will merge the 1.x version as soon as possible (there's a 24 hour waiting period)\n","created":"2017-07-18T09:13:12.968+0000","updated":"2017-07-18T09:13:12.968+0000","started":"2017-07-18T09:13:12.967+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"48065","issueId":"13077986"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13077986/worklog/48066","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user srdo commented on the issue:\n\n    https://github.com/apache/storm/pull/2221\n  \n    +1\n","created":"2017-07-18T09:15:45.524+0000","updated":"2017-07-18T09:15:45.524+0000","started":"2017-07-18T09:15:45.524+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"48066","issueId":"13077986"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13077986/worklog/48081","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user asfgit closed the pull request at:\n\n    https://github.com/apache/storm/pull/2221\n","created":"2017-07-18T14:04:05.153+0000","updated":"2017-07-18T14:04:05.153+0000","started":"2017-07-18T14:04:05.153+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"48081","issueId":"13077986"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13077986/worklog/48082","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user srdo commented on the issue:\n\n    https://github.com/apache/storm/pull/2221\n  \n    @bharathguvvala Thanks for the fix. The commit doesn't apply cleanly to 1.0.x-branch, so please open another PR if you'd like it to go on that branch as well.\n","created":"2017-07-18T14:04:46.716+0000","updated":"2017-07-18T14:04:46.716+0000","started":"2017-07-18T14:04:46.715+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"48082","issueId":"13077986"}]},"customfield_12311820":"0|i3fzcn:"}}