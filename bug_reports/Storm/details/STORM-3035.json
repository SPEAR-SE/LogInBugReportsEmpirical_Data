{"expand":"renderedFields,names,schema,operations,editmeta,changelog,versionedRepresentations","id":"13153779","self":"https://issues.apache.org/jira/rest/api/2/issue/13153779","key":"STORM-3035","fields":{"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype","name":"Bug","subtask":false,"avatarId":21133},"timespent":16200,"project":{"self":"https://issues.apache.org/jira/rest/api/2/project/12314820","id":"12314820","key":"STORM","name":"Apache Storm","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/projectavatar?pid=12314820&avatarId=21667","24x24":"https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12314820&avatarId=21667","16x16":"https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12314820&avatarId=21667","32x32":"https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12314820&avatarId=21667"},"projectCategory":{"self":"https://issues.apache.org/jira/rest/api/2/projectCategory/13260","id":"13260","description":"Apache Storm Related","name":"Storm"}},"fixVersions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12334657","id":"12334657","name":"2.0.0","archived":false,"released":false}],"aggregatetimespent":16200,"resolution":{"self":"https://issues.apache.org/jira/rest/api/2/resolution/1","id":"1","description":"A fix for this issue is checked into the tree and tested.","name":"Fixed"},"customfield_12312322":null,"customfield_12310220":"2018-05-14T02:09:21.643+0000","customfield_12312520":null,"customfield_12312323":null,"customfield_12312521":"Mon May 14 02:09:21 UTC 2018","customfield_12312320":null,"customfield_12310222":"1_*:*_1_*:*_2104473200_*|*_5_*:*_1_*:*_0","customfield_12310420":"9223372036854775807","customfield_12312321":null,"resolutiondate":"2018-05-14T02:09:21.613+0000","workratio":-1,"customfield_12312328":null,"customfield_12312329":null,"customfield_12312923":null,"customfield_12312326":null,"customfield_12312920":null,"customfield_12310300":null,"customfield_12312327":null,"customfield_12312921":null,"customfield_12312324":null,"customfield_12312720":null,"customfield_12312325":null,"lastViewed":null,"watches":{"self":"https://issues.apache.org/jira/rest/api/2/issue/STORM-3035/watchers","watchCount":1,"isWatching":false},"created":"2018-04-19T17:34:48.461+0000","priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.svg","name":"Major","id":"3"},"labels":["pull-request-available"],"customfield_12312333":null,"customfield_12312334":null,"customfield_12313422":"false","customfield_12310310":"0.0","customfield_12312331":null,"customfield_12312332":null,"timeestimate":0,"aggregatetimeoriginalestimate":null,"customfield_12311120":null,"customfield_12312330":null,"versions":[],"customfield_12312339":null,"issuelinks":[],"assignee":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=arunmahadevan","name":"arunmahadevan","key":"arunmahadevan","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Arun Mahadevan","active":true,"timeZone":"Asia/Kolkata"},"customfield_12312337":null,"customfield_12312338":null,"updated":"2018-05-14T02:09:21.652+0000","customfield_12312335":null,"customfield_12312336":null,"status":{"self":"https://issues.apache.org/jira/rest/api/2/status/5","description":"A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/resolved.png","name":"Resolved","id":"5","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Done"}},"components":[],"timeoriginalestimate":null,"description":"JMS Spout ack method assumes that the set \"toCommit\" is always non-empty but if a fail is invoked (that clears the \"toCommit\") followed by an ack, it can cause failure.\r\n\r\n \r\n{noformat}\r\n2018-03-09 08:43:03,220 GMT-0500 MCO-432882-L2 [Thread-36-inboundSpout-executor[5 5]] 7.0.0 ERROR \r\nlogging$eval1$fn__7.invoke Async loop died! java.lang.RuntimeException: java.util.NoSuchElementException at \r\norg.apache.storm.utils.DisruptorQueue.consumeBatchToCursor(DisruptorQueue.java:485) ~[storm-core-1.1.0.2.6.3.0-\r\n235.jar:1.1.0.2.6.3.0-235] at \r\norg.apache.storm.utils.DisruptorQueue.consumeBatchWhenAvailable(DisruptorQueue.java:451) ~[storm-core-\r\n1.1.0.2.6.3.0-235.jar:1.1.0.2.6.3.0-235] at \r\norg.apache.storm.utils.DisruptorQueue.consumeBatch(DisruptorQueue.java:441) ~[storm-core-1.1.0.2.6.3.0-\r\n235.jar:1.1.0.2.6.3.0-235] at org.apache.storm.disruptor$consume_batch.invoke(disruptor.clj:69) ~[storm-core-\r\n1.1.0.2.6.3.0-235.jar:1.1.0.2.6.3.0-235] at \r\norg.apache.storm.daemon.executor$fn__6856$fn__6871$fn__6902.invoke(executor.clj:627) ~[storm-core-1.1.0.2.6.3.0-\r\n235.jar:1.1.0.2.6.3.0-235] at org.apache.storm.util$async_loop$fn__555.invoke(util.clj:484) [storm-core-\r\n1.1.0.2.6.3.0-235.jar:1.1.0.2.6.3.0-235] at clojure.lang.AFn.run(AFn.java:22) [clojure-1.7.0.jar:?] at \r\njava.lang.Thread.run(Thread.java:745) [?:1.8.0_111] Caused by: java.util.NoSuchElementException at \r\njava.util.TreeMap.key(TreeMap.java:1327) ~[?:1.8.0_111] at java.util.TreeMap.firstKey(TreeMap.java:290) ~\r\n[?:1.8.0_111] at java.util.TreeSet.first(TreeSet.java:394) ~[?:1.8.0_111] at \r\norg.apache.storm.jms.spout.JmsSpout.ack(JmsSpout.java:251) ~[classes/:?] at \r\norg.apache.storm.daemon.executor$ack_spout_msg.invoke(executor.clj:446) ~[storm-core-1.1.0.2.6.3.0-235.jar:1.1.0.2.6.3.0-235] at org.apache.storm.daemon.executor$fn__6856$tuple_action_fn__6862.invoke(executor.clj:535) ~[storm-core-1.1.0.2.6.3.0-235.jar:1.1.0.2.6.3.0-235] at org.apache.storm.daemon.executor$mk_task_receiver$fn__6845.invoke(executor.clj:462) ~[storm-core-1.1.0.2.6.3.0-235.jar:1.1.0.2.6.3.0-235] at org.apache.storm.disruptor$clojure_handler$reify__6558.onEvent(disruptor.clj:40) ~[storm-core-1.1.0.2.6.3.0-235.jar:1.1.0.2.6.3.0-235] at org.apache.storm.utils.DisruptorQueue.consumeBatchToCursor(DisruptorQueue.java:472) ~[storm-core-1.1.0.2.6.3.0-235.jar:1.1.0.2.6.3.0-235] ... 7 more\r\n\r\n{noformat}","customfield_10010":null,"timetracking":{"remainingEstimate":"0h","timeSpent":"4.5h","remainingEstimateSeconds":0,"timeSpentSeconds":16200},"customfield_12312026":null,"customfield_12312023":null,"customfield_12312024":null,"attachment":[],"customfield_12312340":null,"aggregatetimeestimate":0,"customfield_12312341":null,"customfield_12312220":null,"customfield_12312022":null,"customfield_12310921":null,"customfield_12310920":"9223372036854775807","customfield_12312823":null,"summary":"JMS Spout ack method causes failure in some cases","creator":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=arunmahadevan","name":"arunmahadevan","key":"arunmahadevan","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Arun Mahadevan","active":true,"timeZone":"Asia/Kolkata"},"subtasks":[],"reporter":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=arunmahadevan","name":"arunmahadevan","key":"arunmahadevan","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Arun Mahadevan","active":true,"timeZone":"Asia/Kolkata"},"customfield_12310291":null,"customfield_12310290":null,"aggregateprogress":{"progress":16200,"total":16200,"percent":100},"environment":null,"customfield_12313520":null,"customfield_12311020":null,"duedate":null,"customfield_12310250":null,"progress":{"progress":16200,"total":16200,"percent":100},"comment":{"comments":[{"self":"https://issues.apache.org/jira/rest/api/2/issue/13153779/comment/16473693","id":"16473693","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kabhwan","name":"kabhwan","key":"kabhwan","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jungtaek Lim","active":true,"timeZone":"Asia/Seoul"},"body":"Thanks [~arunmahadevan], merged into master.\r\n\r\n\r\nThere're some conflict on 1.x-branch so I don't port it back. If you think it makes sense to port back to 1.x version line, could you please raise a patch against 1.x-branch resolving conflicts as well as deprecating `setRecoveryPeriodMs`?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kabhwan","name":"kabhwan","key":"kabhwan","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jungtaek Lim","active":true,"timeZone":"Asia/Seoul"},"created":"2018-05-14T02:09:21.643+0000","updated":"2018-05-14T02:09:21.643+0000"}],"maxResults":1,"total":1,"startAt":0},"votes":{"self":"https://issues.apache.org/jira/rest/api/2/issue/STORM-3035/votes","votes":0,"hasVoted":false},"worklog":{"startAt":0,"maxResults":20,"total":28,"worklogs":[{"self":"https://issues.apache.org/jira/rest/api/2/issue/13153779/worklog/92756","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"GitHub user arunmahadevan opened a pull request:\n\n    https://github.com/apache/storm/pull/2639\n\n    STORM-3035: fix the issue in JmsSpout.ack when toCommit is empty\n\n    \n\nYou can merge this pull request into a Git repository by running:\n\n    $ git pull https://github.com/arunmahadevan/storm STORM-3035\n\nAlternatively you can review and apply these changes as the patch at:\n\n    https://github.com/apache/storm/pull/2639.patch\n\nTo close this pull request, make a commit to your master/trunk branch\nwith (at least) the following in the commit message:\n\n    This closes #2639\n    \n----\ncommit f091f0ffda8bf6b1fc52981f38cca757d9c98559\nAuthor: Arun Mahadevan <arunm@...>\nDate:   2018-04-19T17:52:38Z\n\n    STORM-3035: fix the issue in JmsSpout.ack when toCommit is empty\n\n----\n","created":"2018-04-19T17:58:43.596+0000","updated":"2018-04-19T17:58:43.596+0000","started":"2018-04-19T17:58:43.595+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"92756","issueId":"13153779"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13153779/worklog/93779","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user HeartSaVioR commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/2639#discussion_r183233219\n  \n    --- Diff: external/storm-jms/src/main/java/org/apache/storm/jms/spout/JmsSpout.java ---\n    @@ -339,26 +339,26 @@ public void nextTuple() {\n          */\n         @Override\n         public void ack(Object msgId) {\n    -\n             Message msg = this.pendingMessages.remove(msgId);\n    -        JmsMessageID oldest = this.toCommit.first();\n    -        if (msgId.equals(oldest)) {\n    -            if (msg != null) {\n    -                try {\n    -                    LOG.debug(\"Committing...\");\n    -                    msg.acknowledge();\n    -                    LOG.debug(\"JMS Message acked: \" + msgId);\n    -                    this.toCommit.remove(msgId);\n    -                } catch (JMSException e) {\n    -                    LOG.warn(\"Error acknowldging JMS message: \" + msgId, e);\n    +        if (!toCommit.isEmpty()) {\n    --- End diff --\n    \n    Might be better to leave the log message which messages are dropped in `fail()` too.\n","created":"2018-04-22T11:39:24.230+0000","updated":"2018-04-22T11:39:24.230+0000","started":"2018-04-22T11:39:24.230+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"93779","issueId":"13153779"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13153779/worklog/93780","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user HeartSaVioR commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/2639#discussion_r183233200\n  \n    --- Diff: external/storm-jms/src/main/java/org/apache/storm/jms/spout/JmsSpout.java ---\n    @@ -339,26 +339,26 @@ public void nextTuple() {\n          */\n         @Override\n         public void ack(Object msgId) {\n    -\n             Message msg = this.pendingMessages.remove(msgId);\n    -        JmsMessageID oldest = this.toCommit.first();\n    -        if (msgId.equals(oldest)) {\n    -            if (msg != null) {\n    -                try {\n    -                    LOG.debug(\"Committing...\");\n    -                    msg.acknowledge();\n    -                    LOG.debug(\"JMS Message acked: \" + msgId);\n    -                    this.toCommit.remove(msgId);\n    -                } catch (JMSException e) {\n    -                    LOG.warn(\"Error acknowldging JMS message: \" + msgId, e);\n    +        if (!toCommit.isEmpty()) {\n    --- End diff --\n    \n    Could we leave the log message (at least DEBUG) so that we can see which messages are ignored while acking due to previous failure?\n","created":"2018-04-22T11:39:24.242+0000","updated":"2018-04-22T11:39:24.242+0000","started":"2018-04-22T11:39:24.241+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"93780","issueId":"13153779"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13153779/worklog/93781","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user HeartSaVioR commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/2639#discussion_r183233537\n  \n    --- Diff: external/storm-jms/src/main/java/org/apache/storm/jms/spout/JmsSpout.java ---\n    @@ -339,26 +339,26 @@ public void nextTuple() {\n          */\n         @Override\n         public void ack(Object msgId) {\n    -\n             Message msg = this.pendingMessages.remove(msgId);\n    -        JmsMessageID oldest = this.toCommit.first();\n    -        if (msgId.equals(oldest)) {\n    -            if (msg != null) {\n    -                try {\n    -                    LOG.debug(\"Committing...\");\n    -                    msg.acknowledge();\n    -                    LOG.debug(\"JMS Message acked: \" + msgId);\n    -                    this.toCommit.remove(msgId);\n    -                } catch (JMSException e) {\n    -                    LOG.warn(\"Error acknowldging JMS message: \" + msgId, e);\n    +        if (!toCommit.isEmpty()) {\n    +            JmsMessageID oldest = this.toCommit.first();\n    +            if (msgId.equals(oldest)) {\n    +                if (msg != null) {\n    +                    try {\n    +                        LOG.debug(\"Committing...\");\n    +                        msg.acknowledge();\n    --- End diff --\n    \n    I'm sorry I'm not familiar with JMS, but could you explain how this approach guarantee ack are done for all messages? Looks like it just removes the message from `toCommit` if late ack messages come earlier.\n","created":"2018-04-22T11:39:24.269+0000","updated":"2018-04-22T11:39:24.269+0000","started":"2018-04-22T11:39:24.269+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"93781","issueId":"13153779"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13153779/worklog/94291","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user arunmahadevan commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/2639#discussion_r183531789\n  \n    --- Diff: external/storm-jms/src/main/java/org/apache/storm/jms/spout/JmsSpout.java ---\n    @@ -339,26 +339,26 @@ public void nextTuple() {\n          */\n         @Override\n         public void ack(Object msgId) {\n    -\n             Message msg = this.pendingMessages.remove(msgId);\n    -        JmsMessageID oldest = this.toCommit.first();\n    -        if (msgId.equals(oldest)) {\n    -            if (msg != null) {\n    -                try {\n    -                    LOG.debug(\"Committing...\");\n    -                    msg.acknowledge();\n    -                    LOG.debug(\"JMS Message acked: \" + msgId);\n    -                    this.toCommit.remove(msgId);\n    -                } catch (JMSException e) {\n    -                    LOG.warn(\"Error acknowldging JMS message: \" + msgId, e);\n    +        if (!toCommit.isEmpty()) {\n    +            JmsMessageID oldest = this.toCommit.first();\n    +            if (msgId.equals(oldest)) {\n    +                if (msg != null) {\n    +                    try {\n    +                        LOG.debug(\"Committing...\");\n    +                        msg.acknowledge();\n    --- End diff --\n    \n    This piece of code was already there. I am guessing its based on the JMS acknowledgement mode.\r\n    \r\n    See - https://docs.oracle.com/cd/E19798-01/821-1841/bncfw/index.html\r\n    \r\n    In `Session.CLIENT_ACKNOWLEDGE` - Acknowledging a consumed message automatically acknowledges the receipt of all messages that have been consumed by its session, so this logic seems fine. \r\n    \r\n    The spout is ignoring Auto acknowledgement mode, but I am not sure about the other modes like `DUPS_OK_ACKNOWLEDGE` or `SESSION_TRANSACTED` work. cc @ptgoetz who might have more context around this.\n","created":"2018-04-23T20:44:53.708+0000","updated":"2018-04-23T20:44:53.708+0000","started":"2018-04-23T20:44:53.707+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"94291","issueId":"13153779"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13153779/worklog/94301","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user arunmahadevan commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/2639#discussion_r183539214\n  \n    --- Diff: external/storm-jms/src/main/java/org/apache/storm/jms/spout/JmsSpout.java ---\n    @@ -339,26 +339,26 @@ public void nextTuple() {\n          */\n         @Override\n         public void ack(Object msgId) {\n    -\n             Message msg = this.pendingMessages.remove(msgId);\n    -        JmsMessageID oldest = this.toCommit.first();\n    -        if (msgId.equals(oldest)) {\n    -            if (msg != null) {\n    -                try {\n    -                    LOG.debug(\"Committing...\");\n    -                    msg.acknowledge();\n    -                    LOG.debug(\"JMS Message acked: \" + msgId);\n    -                    this.toCommit.remove(msgId);\n    -                } catch (JMSException e) {\n    -                    LOG.warn(\"Error acknowldging JMS message: \" + msgId, e);\n    +        if (!toCommit.isEmpty()) {\n    +            JmsMessageID oldest = this.toCommit.first();\n    +            if (msgId.equals(oldest)) {\n    +                if (msg != null) {\n    +                    try {\n    +                        LOG.debug(\"Committing...\");\n    +                        msg.acknowledge();\n    --- End diff --\n    \n    I am not sure acking the oldest message in JMS is correct even for `CLIENT_ACKNOWLEDGE`. This would ack the new messages that have been consumed in the session (and possibly emitted) even before the spout received the ACK for the message. I guess we should keep removing the message from `toCommit` and invoke the JMS ack when its the last message in `toCommit`. (assuming we dont consume any other message in the meanwhile).\n","created":"2018-04-23T21:11:56.433+0000","updated":"2018-04-23T21:11:56.433+0000","started":"2018-04-23T21:11:56.432+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"94301","issueId":"13153779"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13153779/worklog/100766","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user arunmahadevan commented on the issue:\n\n    https://github.com/apache/storm/pull/2639\n  \n    This started out as a fix to handle the exceptions in \"ack\" when toCommit was empty. However during the review process and testing, figured out many more issues with the current approach. Also some JMS providers like Tibco supports ACK ing individual messages, which could not be handled with the existing code. The async mode of consuming the messages was also problematic to ensure at-least once delivery even with locks/synchronization since ack-ing an individual JMS message in CLIENT_ACK mode was going to ack the messages received in the listener (even if the listener did not return).\r\n    \r\n    To handle all the issues, I have refactored quite and bit and changed the approach of consuming the messages from async (listener based) to sync (receive) and introduced MessageHandlers to handle the emit/ack/fail in different ways based on the mode.\r\n    \r\n    @HeartSaVioR , can you review it again and let me know what you think?\n","created":"2018-05-10T18:56:18.529+0000","updated":"2018-05-10T18:56:18.529+0000","started":"2018-05-10T18:56:18.529+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"100766","issueId":"13153779"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13153779/worklog/100905","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user HeartSaVioR commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/2639#discussion_r187484538\n  \n    --- Diff: external/storm-jms/pom.xml ---\n    @@ -94,7 +94,7 @@\n                     <artifactId>maven-checkstyle-plugin</artifactId>\n                     <!--Note - the version would be inherited-->\n                     <configuration>\n    -                    <maxAllowedViolations>63</maxAllowedViolations>\n    +                    <maxAllowedViolations>73</maxAllowedViolations>\n    --- End diff --\n    \n    We should not increase the number, decrease or no change is only allowed. Please fix checkstyle violations based on checkstyle report and keep the number.\n","created":"2018-05-10T23:50:43.319+0000","updated":"2018-05-10T23:50:43.319+0000","started":"2018-05-10T23:50:43.319+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"100905","issueId":"13153779"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13153779/worklog/100906","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user HeartSaVioR commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/2639#discussion_r187484768\n  \n    --- Diff: external/storm-jms/src/main/java/org/apache/storm/jms/spout/JmsSpout.java ---\n    @@ -18,164 +18,124 @@\n     \n     package org.apache.storm.jms.spout;\n     \n    -import java.io.Serializable;\n    -import java.util.HashMap;\n    -import java.util.Map;\n    -import java.util.Timer;\n    -import java.util.TimerTask;\n    -import java.util.TreeSet;\n    -import java.util.concurrent.LinkedBlockingQueue;\n    -import java.util.concurrent.TimeUnit;\n    -import javax.jms.Connection;\n    -import javax.jms.ConnectionFactory;\n    -import javax.jms.Destination;\n    -import javax.jms.JMSException;\n    -import javax.jms.Message;\n    -import javax.jms.MessageConsumer;\n    -import javax.jms.MessageListener;\n    -import javax.jms.Session;\n    -import org.apache.storm.Config;\n     import org.apache.storm.jms.JmsProvider;\n     import org.apache.storm.jms.JmsTupleProducer;\n     import org.apache.storm.spout.SpoutOutputCollector;\n     import org.apache.storm.task.TopologyContext;\n     import org.apache.storm.topology.OutputFieldsDeclarer;\n     import org.apache.storm.topology.base.BaseRichSpout;\n     import org.apache.storm.tuple.Values;\n    -import org.apache.storm.utils.Utils;\n     import org.slf4j.Logger;\n     import org.slf4j.LoggerFactory;\n     \n    +import javax.jms.Connection;\n    --- End diff --\n    \n    Reorganizing imports happens now, and it looks like one of checkstyle violation.\n","created":"2018-05-10T23:50:43.341+0000","updated":"2018-05-10T23:50:43.341+0000","started":"2018-05-10T23:50:43.340+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"100906","issueId":"13153779"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13153779/worklog/100907","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user HeartSaVioR commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/2639#discussion_r187485457\n  \n    --- Diff: external/storm-jms/src/main/java/org/apache/storm/jms/spout/JmsSpout.java ---\n    @@ -18,164 +18,124 @@\n     \n     package org.apache.storm.jms.spout;\n     \n    -import java.io.Serializable;\n    -import java.util.HashMap;\n    -import java.util.Map;\n    -import java.util.Timer;\n    -import java.util.TimerTask;\n    -import java.util.TreeSet;\n    -import java.util.concurrent.LinkedBlockingQueue;\n    -import java.util.concurrent.TimeUnit;\n    -import javax.jms.Connection;\n    -import javax.jms.ConnectionFactory;\n    -import javax.jms.Destination;\n    -import javax.jms.JMSException;\n    -import javax.jms.Message;\n    -import javax.jms.MessageConsumer;\n    -import javax.jms.MessageListener;\n    -import javax.jms.Session;\n    -import org.apache.storm.Config;\n     import org.apache.storm.jms.JmsProvider;\n     import org.apache.storm.jms.JmsTupleProducer;\n     import org.apache.storm.spout.SpoutOutputCollector;\n     import org.apache.storm.task.TopologyContext;\n     import org.apache.storm.topology.OutputFieldsDeclarer;\n     import org.apache.storm.topology.base.BaseRichSpout;\n     import org.apache.storm.tuple.Values;\n    -import org.apache.storm.utils.Utils;\n     import org.slf4j.Logger;\n     import org.slf4j.LoggerFactory;\n     \n    +import javax.jms.Connection;\n    +import javax.jms.ConnectionFactory;\n    +import javax.jms.Destination;\n    +import javax.jms.JMSException;\n    +import javax.jms.Message;\n    +import javax.jms.MessageConsumer;\n    +import javax.jms.Session;\n    +import java.util.HashMap;\n    +import java.util.Map;\n    +\n     \n     /**\n    - * A Storm <code>Spout</code> implementation that listens to a JMS topic or queue and outputs tuples based on the messages it receives.\n    + * A Storm <code>Spout</code> implementation that listens to a JMS topic or\n    + * queue and outputs tuples based on the messages it receives.\n      *\n      * <p><code>JmsSpout</code> instances rely on <code>JmsProducer</code>\n      * implementations to obtain the JMS\n      * <code>ConnectionFactory</code> and <code>Destination</code> objects necessary\n      * to connect to a JMS topic/queue.\n      *\n    - * <p>When a <code>JmsSpout</code> receives a JMS message, it delegates to an\n    - * internal <code>JmsTupleProducer</code> instance to create a Storm tuple from the incoming message.\n    + * <p>When a {@code JmsSpout} receives a JMS message, it delegates to an\n    + * internal {@code JmsTupleProducer} instance to create a Storm tuple from\n    + * the incoming message.\n      *\n      * <p>Typically, developers will supply a custom <code>JmsTupleProducer</code>\n      * implementation appropriate for the expected message content.\n      */\n     @SuppressWarnings(\"serial\")\n    -public class JmsSpout extends BaseRichSpout implements MessageListener {\n    +public class JmsSpout extends BaseRichSpout {\n     \n    -    /**\n    -     * The logger object instance for this class.\n    -     */\n    +    /** The logger object instance for this class. */\n         private static final Logger LOG = LoggerFactory.getLogger(JmsSpout.class);\n     \n    -    /**\n    -     * The logger of the recovery task.\n    -     */\n    -    private static final Logger RECOVERY_TASK_LOG = LoggerFactory.getLogger(RecoveryTask.class);\n    -\n    -    /**\n    -     * Time to sleep between queue polling attempts.\n    -     */\n    +    /** Time to sleep between queue polling attempts. */\n         private static final int POLL_INTERVAL_MS = 50;\n     \n    -    /**\n    -     * The default value for {@link Config#TOPOLOGY_MESSAGE_TIMEOUT_SECS}.\n    -     */\n    -    private static final int DEFAULT_MESSAGE_TIMEOUT_SECS = 30;\n    -\n    -    /**\n    -     * Time to wait before queuing the first recovery task.\n    -     */\n    -    private static final int RECOVERY_DELAY_MS = 10;\n    -    /**\n    -     * Used to safely recover failed JMS sessions across instances.\n    -     */\n    -    private final Serializable recoveryMutex = \"RECOVERY_MUTEX\";\n         /**\n          * The acknowledgment mode used for this instance.\n          *\n          * @see Session\n          */\n         private int jmsAcknowledgeMode = Session.AUTO_ACKNOWLEDGE;\n    -    /**\n    -     * Indicates whether or not this spout should run as a singleton.\n    -     */\n    +\n    +    /** Sets up the way we want to handle the emit, ack and fails. */\n    +    private transient MessageHandler messageHandler = new MessageHandler();\n    --- End diff --\n    \n    This must not be `transient`, because assigning `messageHandler` happens before serialization and Spout will lose the assigned value when deserialization happens. Are any of implementations of MessageHandler non-serializable?\n","created":"2018-05-10T23:50:43.390+0000","updated":"2018-05-10T23:50:43.390+0000","started":"2018-05-10T23:50:43.389+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"100907","issueId":"13153779"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13153779/worklog/100908","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user HeartSaVioR commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/2639#discussion_r187486786\n  \n    --- Diff: external/storm-jms/src/main/java/org/apache/storm/jms/spout/JmsSpout.java ---\n    @@ -18,164 +18,124 @@\n     \n     package org.apache.storm.jms.spout;\n     \n    -import java.io.Serializable;\n    -import java.util.HashMap;\n    -import java.util.Map;\n    -import java.util.Timer;\n    -import java.util.TimerTask;\n    -import java.util.TreeSet;\n    -import java.util.concurrent.LinkedBlockingQueue;\n    -import java.util.concurrent.TimeUnit;\n    -import javax.jms.Connection;\n    -import javax.jms.ConnectionFactory;\n    -import javax.jms.Destination;\n    -import javax.jms.JMSException;\n    -import javax.jms.Message;\n    -import javax.jms.MessageConsumer;\n    -import javax.jms.MessageListener;\n    -import javax.jms.Session;\n    -import org.apache.storm.Config;\n     import org.apache.storm.jms.JmsProvider;\n     import org.apache.storm.jms.JmsTupleProducer;\n     import org.apache.storm.spout.SpoutOutputCollector;\n     import org.apache.storm.task.TopologyContext;\n     import org.apache.storm.topology.OutputFieldsDeclarer;\n     import org.apache.storm.topology.base.BaseRichSpout;\n     import org.apache.storm.tuple.Values;\n    -import org.apache.storm.utils.Utils;\n     import org.slf4j.Logger;\n     import org.slf4j.LoggerFactory;\n     \n    +import javax.jms.Connection;\n    +import javax.jms.ConnectionFactory;\n    +import javax.jms.Destination;\n    +import javax.jms.JMSException;\n    +import javax.jms.Message;\n    +import javax.jms.MessageConsumer;\n    +import javax.jms.Session;\n    +import java.util.HashMap;\n    +import java.util.Map;\n    +\n     \n     /**\n    - * A Storm <code>Spout</code> implementation that listens to a JMS topic or queue and outputs tuples based on the messages it receives.\n    + * A Storm <code>Spout</code> implementation that listens to a JMS topic or\n    + * queue and outputs tuples based on the messages it receives.\n      *\n      * <p><code>JmsSpout</code> instances rely on <code>JmsProducer</code>\n      * implementations to obtain the JMS\n      * <code>ConnectionFactory</code> and <code>Destination</code> objects necessary\n      * to connect to a JMS topic/queue.\n      *\n    - * <p>When a <code>JmsSpout</code> receives a JMS message, it delegates to an\n    - * internal <code>JmsTupleProducer</code> instance to create a Storm tuple from the incoming message.\n    + * <p>When a {@code JmsSpout} receives a JMS message, it delegates to an\n    + * internal {@code JmsTupleProducer} instance to create a Storm tuple from\n    + * the incoming message.\n      *\n      * <p>Typically, developers will supply a custom <code>JmsTupleProducer</code>\n      * implementation appropriate for the expected message content.\n      */\n     @SuppressWarnings(\"serial\")\n    -public class JmsSpout extends BaseRichSpout implements MessageListener {\n    +public class JmsSpout extends BaseRichSpout {\n     \n    -    /**\n    -     * The logger object instance for this class.\n    -     */\n    +    /** The logger object instance for this class. */\n         private static final Logger LOG = LoggerFactory.getLogger(JmsSpout.class);\n     \n    -    /**\n    -     * The logger of the recovery task.\n    -     */\n    -    private static final Logger RECOVERY_TASK_LOG = LoggerFactory.getLogger(RecoveryTask.class);\n    -\n    -    /**\n    -     * Time to sleep between queue polling attempts.\n    -     */\n    +    /** Time to sleep between queue polling attempts. */\n         private static final int POLL_INTERVAL_MS = 50;\n     \n    -    /**\n    -     * The default value for {@link Config#TOPOLOGY_MESSAGE_TIMEOUT_SECS}.\n    -     */\n    -    private static final int DEFAULT_MESSAGE_TIMEOUT_SECS = 30;\n    -\n    -    /**\n    -     * Time to wait before queuing the first recovery task.\n    -     */\n    -    private static final int RECOVERY_DELAY_MS = 10;\n    -    /**\n    -     * Used to safely recover failed JMS sessions across instances.\n    -     */\n    -    private final Serializable recoveryMutex = \"RECOVERY_MUTEX\";\n         /**\n          * The acknowledgment mode used for this instance.\n          *\n          * @see Session\n          */\n         private int jmsAcknowledgeMode = Session.AUTO_ACKNOWLEDGE;\n    -    /**\n    -     * Indicates whether or not this spout should run as a singleton.\n    -     */\n    +\n    +    /** Sets up the way we want to handle the emit, ack and fails. */\n    +    private transient MessageHandler messageHandler = new MessageHandler();\n    +\n    +    /** Indicates whether or not this spout should run as a singleton. */\n         private boolean distributed = true;\n    -    /**\n    -     * Used to generate tuples from incoming messages.\n    -     */\n    +\n    +    /** Used to generate tuples from incoming messages. */\n         private JmsTupleProducer tupleProducer;\n    -    /**\n    -     * Encapsulates jms related classes needed to communicate with the mq.\n    -     */\n    +\n    +    /** Encapsulates jms related classes needed to communicate with the mq. */\n         private JmsProvider jmsProvider;\n    -    /**\n    -     * Stores incoming messages for later sending.\n    -     */\n    -    private LinkedBlockingQueue<Message> queue;\n    -    /**\n    -     * Contains all message ids of messages that were not yet acked.\n    -     */\n    -    private TreeSet<JmsMessageID> toCommit;\n    -    /**\n    -     * Maps between message ids of not-yet acked messages, and the messages.\n    -     */\n    -    private HashMap<JmsMessageID, Message> pendingMessages;\n    -    /**\n    -     * Counter of handled messages.\n    -     */\n    +\n    +    /** Counter of handled messages. */\n         private long messageSequence = 0;\n    -    /**\n    -     * The collector used to emit tuples.\n    -     */\n    +\n    +    /** The collector used to emit tuples. */\n         private SpoutOutputCollector collector;\n    -    /**\n    -     * Connection to the jms queue.\n    -     */\n    +\n    +    /** Connection to the jms queue. */\n         private transient Connection connection;\n    -    /**\n    -     * The active jms session.\n    -     */\n    +\n    +    /** The active jms session. */\n         private transient Session session;\n    -    /**\n    -     * Indicates whether or not a message failed to be processed.\n    -     */\n    -    private boolean hasFailures = false;\n    -    /**\n    -     * Schedules recovery tasks periodically.\n    -     */\n    -    private Timer recoveryTimer = null;\n     \n         /**\n    -     * Time to wait between recovery attempts.\n    +     * The message consumer.\n          */\n    -    private long recoveryPeriodMs = -1; // default to disabled\n    +    private MessageConsumer consumer;\n     \n         /**\n    -     * Translate the {@code int} value of an acknowledgment to a {@code String}.\n    +     * Sets the JMS Session acknowledgement mode for the JMS session.\n          *\n    -     * @param deliveryMode the mode to translate.\n    -     * @return its {@code String} explanation (name).\n    +     * <p>Possible values:\n    +     * <ul>\n    +     * <li>javax.jms.Session.AUTO_ACKNOWLEDGE</li>\n    +     * <li>javax.jms.Session.CLIENT_ACKNOWLEDGE</li>\n    +     * <li>javax.jms.Session.DUPS_OK_ACKNOWLEDGE</li>\n    +     * </ul>\n          *\n    -     * @see Session\n    +     * Any other vendor specific modes are not supported.\n    +     *\n    +     * @param mode JMS Session Acknowledgement mode\n          */\n    -    private static String toDeliveryModeString(int deliveryMode) {\n    -        switch (deliveryMode) {\n    +    public void setJmsAcknowledgeMode(final int mode) {\n    +        switch (mode) {\n                 case Session.AUTO_ACKNOWLEDGE:\n    -                return \"AUTO_ACKNOWLEDGE\";\n    -            case Session.CLIENT_ACKNOWLEDGE:\n    -                return \"CLIENT_ACKNOWLEDGE\";\n                 case Session.DUPS_OK_ACKNOWLEDGE:\n    -                return \"DUPS_OK_ACKNOWLEDGE\";\n    +                messageHandler = new MessageHandler();\n    +                break;\n    +            case Session.CLIENT_ACKNOWLEDGE:\n    +                messageHandler = new ClientAckHandler();\n    +                break;\n    +            case Session.SESSION_TRANSACTED:\n    +                messageHandler = new TransactedSessionMessageHandler();\n    +                break;\n                 default:\n    -                return \"UNKNOWN\";\n    -\n    +                LOG.warn(\"Unsupported Acknowledge mode: \"\n    --- End diff --\n    \n    So we are allowing non-JMS standard mode to parameter, right? I agree this is needed to support specific JMS implementation which **extends** session acknowledge mode.\n","created":"2018-05-10T23:50:43.422+0000","updated":"2018-05-10T23:50:43.422+0000","started":"2018-05-10T23:50:43.422+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"100908","issueId":"13153779"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13153779/worklog/100909","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user HeartSaVioR commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/2639#discussion_r187487737\n  \n    --- Diff: external/storm-jms/src/main/java/org/apache/storm/jms/spout/JmsSpout.java ---\n    @@ -262,42 +189,26 @@ public void onMessage(Message msg) {\n          * topic/queue.\n          */\n         @Override\n    -    public void open(Map<String, Object> conf,\n    -                     TopologyContext context,\n    -                     SpoutOutputCollector collector) {\n    +    public void open(final Map<String, Object> conf,\n    +                     final TopologyContext context,\n    +                     final SpoutOutputCollector spoutOutputCollector) {\n     \n    -        if (this.jmsProvider == null) {\n    -            throw new IllegalStateException(\"JMS provider has not been set.\");\n    -        }\n    -        if (this.tupleProducer == null) {\n    -            throw new IllegalStateException(\"JMS Tuple Producer has not been set.\");\n    +        if (jmsProvider == null) {\n    +            throw new IllegalStateException(\n    +                \"JMS provider has not been set.\");\n             }\n    -        // TODO get the default value from storm instead of hard coding 30 secs\n    -        Long topologyTimeout =\n    -            ((Number) conf.getOrDefault(Config.TOPOLOGY_MESSAGE_TIMEOUT_SECS, DEFAULT_MESSAGE_TIMEOUT_SECS)).longValue();\n    -        if ((TimeUnit.SECONDS.toMillis(topologyTimeout)) > this.recoveryPeriodMs) {\n    -            LOG.warn(\"*** WARNING *** : \"\n    -                     + \"Recovery period (\" + this.recoveryPeriodMs + \" ms.) is less then the configured \"\n    -                     + \"'topology.message.timeout.secs' of \" + topologyTimeout\n    -                     + \" secs. This could lead to a message replay flood!\");\n    +        if (tupleProducer == null) {\n    +            throw new IllegalStateException(\n    +                \"JMS Tuple Producer has not been set.\");\n             }\n    -        this.queue = new LinkedBlockingQueue<Message>();\n    -        this.toCommit = new TreeSet<JmsMessageID>();\n    -        this.pendingMessages = new HashMap<JmsMessageID, Message>();\n    -        this.collector = collector;\n    +        collector = spoutOutputCollector;\n             try {\n    -            ConnectionFactory cf = this.jmsProvider.connectionFactory();\n    -            Destination dest = this.jmsProvider.destination();\n    -            this.connection = cf.createConnection();\n    -            this.session = connection.createSession(false, this.jmsAcknowledgeMode);\n    -            MessageConsumer consumer = session.createConsumer(dest);\n    -            consumer.setMessageListener(this);\n    -            this.connection.start();\n    -            if (this.isDurableSubscription() && this.recoveryPeriodMs > 0) {\n    -                this.recoveryTimer = new Timer();\n    -                this.recoveryTimer.scheduleAtFixedRate(new RecoveryTask(), RECOVERY_DELAY_MS, this.recoveryPeriodMs);\n    -            }\n    -\n    +            ConnectionFactory cf = jmsProvider.connectionFactory();\n    +            Destination dest = jmsProvider.destination();\n    +            connection = cf.createConnection();\n    +            session = messageHandler.createSession(connection);\n    --- End diff --\n    \n    We may want to consider the case: users provide mode which is not in JMS standard, and also setIndividualAck() is not called.\r\n    \r\n    Now the case is handled as same as AUTO_ACKNOWLEDGE because of providing default value of messageHandler. Is it intended? We prevented the case with IllegalArgumentException.\n","created":"2018-05-10T23:50:43.459+0000","updated":"2018-05-10T23:50:43.459+0000","started":"2018-05-10T23:50:43.458+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"100909","issueId":"13153779"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13153779/worklog/100910","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user HeartSaVioR commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/2639#discussion_r187488104\n  \n    --- Diff: external/storm-jms/src/main/java/org/apache/storm/jms/spout/JmsSpout.java ---\n    @@ -403,50 +274,31 @@ public void ack(Object msgId) {\n          * <p>Will only be called if we're transactional or not AUTO_ACKNOWLEDGE\n          */\n         @Override\n    -    public void fail(Object msgId) {\n    +    public void fail(final Object msgId) {\n             LOG.warn(\"Message failed: \" + msgId);\n    -        this.pendingMessages.clear();\n    -        this.toCommit.clear();\n    -        synchronized (this.recoveryMutex) {\n    -            this.hasFailures = true;\n    -        }\n    +        messageHandler.fail(msgId);\n         }\n     \n         /**\n    -     * Use the {@link #tupleProducer} to determine which fields are about to be emitted.\n    +     * Use the {@link #tupleProducer} to determine which fields are about\n    +     * to be emitted.\n          *\n    -     * <p>Note that {@link #nextTuple()} always emits to the default stream, and thus only fields declared\n    -     * for this stream are used.\n    +     * <p>Note that {@link #nextTuple()} always emits to the default stream,\n    +     * and thus only fields declared for this stream are used.\n          */\n         @Override\n    -    public void declareOutputFields(OutputFieldsDeclarer declarer) {\n    +    public void declareOutputFields(final OutputFieldsDeclarer declarer) {\n             this.tupleProducer.declareOutputFields(declarer);\n     \n         }\n     \n         /**\n    -     * Returns <code>true</code> if the spout has received failures from which it has not yet recovered.\n    -     *\n    -     * @return {@code true} if there were failures, {@code false} otherwise.\n    -     */\n    -    public boolean hasFailures() {\n    -        return this.hasFailures;\n    -    }\n    -\n    -    /**\n    -     * Marks a healthy session state.\n    -     */\n    -    protected void recovered() {\n    -        this.hasFailures = false;\n    -    }\n    -\n    -    /**\n    -     * Sets the periodicity of the timer task that checks for failures and recovers the JMS session.\n    +     * Sets the periodicity of the timer task that\n    +     * checks for failures and recovers the JMS session.\n          *\n          * @param period desired wait period\n          */\n    -    public void setRecoveryPeriodMs(long period) {\n    -        this.recoveryPeriodMs = period;\n    +    public void setRecoveryPeriodMs(final long period) {\n    --- End diff --\n    \n    This method can be removed.\n","created":"2018-05-10T23:50:43.459+0000","updated":"2018-05-10T23:50:43.459+0000","started":"2018-05-10T23:50:43.459+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"100910","issueId":"13153779"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13153779/worklog/100924","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user arunmahadevan commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/2639#discussion_r187495978\n  \n    --- Diff: external/storm-jms/pom.xml ---\n    @@ -94,7 +94,7 @@\n                     <artifactId>maven-checkstyle-plugin</artifactId>\n                     <!--Note - the version would be inherited-->\n                     <configuration>\n    -                    <maxAllowedViolations>63</maxAllowedViolations>\n    +                    <maxAllowedViolations>73</maxAllowedViolations>\n    --- End diff --\n    \n    Actually I can see more violations in JMSSpout.java in master branch (43) vs the patch (2). I am not sure why. Will fix it anyways.\n","created":"2018-05-11T00:37:40.902+0000","updated":"2018-05-11T00:37:40.902+0000","started":"2018-05-11T00:37:40.902+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"100924","issueId":"13153779"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13153779/worklog/100926","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user arunmahadevan commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/2639#discussion_r187496062\n  \n    --- Diff: external/storm-jms/src/main/java/org/apache/storm/jms/spout/JmsSpout.java ---\n    @@ -18,164 +18,124 @@\n     \n     package org.apache.storm.jms.spout;\n     \n    -import java.io.Serializable;\n    -import java.util.HashMap;\n    -import java.util.Map;\n    -import java.util.Timer;\n    -import java.util.TimerTask;\n    -import java.util.TreeSet;\n    -import java.util.concurrent.LinkedBlockingQueue;\n    -import java.util.concurrent.TimeUnit;\n    -import javax.jms.Connection;\n    -import javax.jms.ConnectionFactory;\n    -import javax.jms.Destination;\n    -import javax.jms.JMSException;\n    -import javax.jms.Message;\n    -import javax.jms.MessageConsumer;\n    -import javax.jms.MessageListener;\n    -import javax.jms.Session;\n    -import org.apache.storm.Config;\n     import org.apache.storm.jms.JmsProvider;\n     import org.apache.storm.jms.JmsTupleProducer;\n     import org.apache.storm.spout.SpoutOutputCollector;\n     import org.apache.storm.task.TopologyContext;\n     import org.apache.storm.topology.OutputFieldsDeclarer;\n     import org.apache.storm.topology.base.BaseRichSpout;\n     import org.apache.storm.tuple.Values;\n    -import org.apache.storm.utils.Utils;\n     import org.slf4j.Logger;\n     import org.slf4j.LoggerFactory;\n     \n    +import javax.jms.Connection;\n    +import javax.jms.ConnectionFactory;\n    +import javax.jms.Destination;\n    +import javax.jms.JMSException;\n    +import javax.jms.Message;\n    +import javax.jms.MessageConsumer;\n    +import javax.jms.Session;\n    +import java.util.HashMap;\n    +import java.util.Map;\n    +\n     \n     /**\n    - * A Storm <code>Spout</code> implementation that listens to a JMS topic or queue and outputs tuples based on the messages it receives.\n    + * A Storm <code>Spout</code> implementation that listens to a JMS topic or\n    + * queue and outputs tuples based on the messages it receives.\n      *\n      * <p><code>JmsSpout</code> instances rely on <code>JmsProducer</code>\n      * implementations to obtain the JMS\n      * <code>ConnectionFactory</code> and <code>Destination</code> objects necessary\n      * to connect to a JMS topic/queue.\n      *\n    - * <p>When a <code>JmsSpout</code> receives a JMS message, it delegates to an\n    - * internal <code>JmsTupleProducer</code> instance to create a Storm tuple from the incoming message.\n    + * <p>When a {@code JmsSpout} receives a JMS message, it delegates to an\n    + * internal {@code JmsTupleProducer} instance to create a Storm tuple from\n    + * the incoming message.\n      *\n      * <p>Typically, developers will supply a custom <code>JmsTupleProducer</code>\n      * implementation appropriate for the expected message content.\n      */\n     @SuppressWarnings(\"serial\")\n    -public class JmsSpout extends BaseRichSpout implements MessageListener {\n    +public class JmsSpout extends BaseRichSpout {\n     \n    -    /**\n    -     * The logger object instance for this class.\n    -     */\n    +    /** The logger object instance for this class. */\n         private static final Logger LOG = LoggerFactory.getLogger(JmsSpout.class);\n     \n    -    /**\n    -     * The logger of the recovery task.\n    -     */\n    -    private static final Logger RECOVERY_TASK_LOG = LoggerFactory.getLogger(RecoveryTask.class);\n    -\n    -    /**\n    -     * Time to sleep between queue polling attempts.\n    -     */\n    +    /** Time to sleep between queue polling attempts. */\n         private static final int POLL_INTERVAL_MS = 50;\n     \n    -    /**\n    -     * The default value for {@link Config#TOPOLOGY_MESSAGE_TIMEOUT_SECS}.\n    -     */\n    -    private static final int DEFAULT_MESSAGE_TIMEOUT_SECS = 30;\n    -\n    -    /**\n    -     * Time to wait before queuing the first recovery task.\n    -     */\n    -    private static final int RECOVERY_DELAY_MS = 10;\n    -    /**\n    -     * Used to safely recover failed JMS sessions across instances.\n    -     */\n    -    private final Serializable recoveryMutex = \"RECOVERY_MUTEX\";\n         /**\n          * The acknowledgment mode used for this instance.\n          *\n          * @see Session\n          */\n         private int jmsAcknowledgeMode = Session.AUTO_ACKNOWLEDGE;\n    -    /**\n    -     * Indicates whether or not this spout should run as a singleton.\n    -     */\n    +\n    +    /** Sets up the way we want to handle the emit, ack and fails. */\n    +    private transient MessageHandler messageHandler = new MessageHandler();\n    --- End diff --\n    \n    Good catch. Yes I should make the MessageHandler serializable.\n","created":"2018-05-11T00:38:32.531+0000","updated":"2018-05-11T00:38:32.531+0000","started":"2018-05-11T00:38:32.531+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"100926","issueId":"13153779"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13153779/worklog/100927","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user arunmahadevan commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/2639#discussion_r187496121\n  \n    --- Diff: external/storm-jms/src/main/java/org/apache/storm/jms/spout/JmsSpout.java ---\n    @@ -18,164 +18,124 @@\n     \n     package org.apache.storm.jms.spout;\n     \n    -import java.io.Serializable;\n    -import java.util.HashMap;\n    -import java.util.Map;\n    -import java.util.Timer;\n    -import java.util.TimerTask;\n    -import java.util.TreeSet;\n    -import java.util.concurrent.LinkedBlockingQueue;\n    -import java.util.concurrent.TimeUnit;\n    -import javax.jms.Connection;\n    -import javax.jms.ConnectionFactory;\n    -import javax.jms.Destination;\n    -import javax.jms.JMSException;\n    -import javax.jms.Message;\n    -import javax.jms.MessageConsumer;\n    -import javax.jms.MessageListener;\n    -import javax.jms.Session;\n    -import org.apache.storm.Config;\n     import org.apache.storm.jms.JmsProvider;\n     import org.apache.storm.jms.JmsTupleProducer;\n     import org.apache.storm.spout.SpoutOutputCollector;\n     import org.apache.storm.task.TopologyContext;\n     import org.apache.storm.topology.OutputFieldsDeclarer;\n     import org.apache.storm.topology.base.BaseRichSpout;\n     import org.apache.storm.tuple.Values;\n    -import org.apache.storm.utils.Utils;\n     import org.slf4j.Logger;\n     import org.slf4j.LoggerFactory;\n     \n    +import javax.jms.Connection;\n    +import javax.jms.ConnectionFactory;\n    +import javax.jms.Destination;\n    +import javax.jms.JMSException;\n    +import javax.jms.Message;\n    +import javax.jms.MessageConsumer;\n    +import javax.jms.Session;\n    +import java.util.HashMap;\n    +import java.util.Map;\n    +\n     \n     /**\n    - * A Storm <code>Spout</code> implementation that listens to a JMS topic or queue and outputs tuples based on the messages it receives.\n    + * A Storm <code>Spout</code> implementation that listens to a JMS topic or\n    + * queue and outputs tuples based on the messages it receives.\n      *\n      * <p><code>JmsSpout</code> instances rely on <code>JmsProducer</code>\n      * implementations to obtain the JMS\n      * <code>ConnectionFactory</code> and <code>Destination</code> objects necessary\n      * to connect to a JMS topic/queue.\n      *\n    - * <p>When a <code>JmsSpout</code> receives a JMS message, it delegates to an\n    - * internal <code>JmsTupleProducer</code> instance to create a Storm tuple from the incoming message.\n    + * <p>When a {@code JmsSpout} receives a JMS message, it delegates to an\n    + * internal {@code JmsTupleProducer} instance to create a Storm tuple from\n    + * the incoming message.\n      *\n      * <p>Typically, developers will supply a custom <code>JmsTupleProducer</code>\n      * implementation appropriate for the expected message content.\n      */\n     @SuppressWarnings(\"serial\")\n    -public class JmsSpout extends BaseRichSpout implements MessageListener {\n    +public class JmsSpout extends BaseRichSpout {\n     \n    -    /**\n    -     * The logger object instance for this class.\n    -     */\n    +    /** The logger object instance for this class. */\n         private static final Logger LOG = LoggerFactory.getLogger(JmsSpout.class);\n     \n    -    /**\n    -     * The logger of the recovery task.\n    -     */\n    -    private static final Logger RECOVERY_TASK_LOG = LoggerFactory.getLogger(RecoveryTask.class);\n    -\n    -    /**\n    -     * Time to sleep between queue polling attempts.\n    -     */\n    +    /** Time to sleep between queue polling attempts. */\n         private static final int POLL_INTERVAL_MS = 50;\n     \n    -    /**\n    -     * The default value for {@link Config#TOPOLOGY_MESSAGE_TIMEOUT_SECS}.\n    -     */\n    -    private static final int DEFAULT_MESSAGE_TIMEOUT_SECS = 30;\n    -\n    -    /**\n    -     * Time to wait before queuing the first recovery task.\n    -     */\n    -    private static final int RECOVERY_DELAY_MS = 10;\n    -    /**\n    -     * Used to safely recover failed JMS sessions across instances.\n    -     */\n    -    private final Serializable recoveryMutex = \"RECOVERY_MUTEX\";\n         /**\n          * The acknowledgment mode used for this instance.\n          *\n          * @see Session\n          */\n         private int jmsAcknowledgeMode = Session.AUTO_ACKNOWLEDGE;\n    -    /**\n    -     * Indicates whether or not this spout should run as a singleton.\n    -     */\n    +\n    +    /** Sets up the way we want to handle the emit, ack and fails. */\n    +    private transient MessageHandler messageHandler = new MessageHandler();\n    +\n    +    /** Indicates whether or not this spout should run as a singleton. */\n         private boolean distributed = true;\n    -    /**\n    -     * Used to generate tuples from incoming messages.\n    -     */\n    +\n    +    /** Used to generate tuples from incoming messages. */\n         private JmsTupleProducer tupleProducer;\n    -    /**\n    -     * Encapsulates jms related classes needed to communicate with the mq.\n    -     */\n    +\n    +    /** Encapsulates jms related classes needed to communicate with the mq. */\n         private JmsProvider jmsProvider;\n    -    /**\n    -     * Stores incoming messages for later sending.\n    -     */\n    -    private LinkedBlockingQueue<Message> queue;\n    -    /**\n    -     * Contains all message ids of messages that were not yet acked.\n    -     */\n    -    private TreeSet<JmsMessageID> toCommit;\n    -    /**\n    -     * Maps between message ids of not-yet acked messages, and the messages.\n    -     */\n    -    private HashMap<JmsMessageID, Message> pendingMessages;\n    -    /**\n    -     * Counter of handled messages.\n    -     */\n    +\n    +    /** Counter of handled messages. */\n         private long messageSequence = 0;\n    -    /**\n    -     * The collector used to emit tuples.\n    -     */\n    +\n    +    /** The collector used to emit tuples. */\n         private SpoutOutputCollector collector;\n    -    /**\n    -     * Connection to the jms queue.\n    -     */\n    +\n    +    /** Connection to the jms queue. */\n         private transient Connection connection;\n    -    /**\n    -     * The active jms session.\n    -     */\n    +\n    +    /** The active jms session. */\n         private transient Session session;\n    -    /**\n    -     * Indicates whether or not a message failed to be processed.\n    -     */\n    -    private boolean hasFailures = false;\n    -    /**\n    -     * Schedules recovery tasks periodically.\n    -     */\n    -    private Timer recoveryTimer = null;\n     \n         /**\n    -     * Time to wait between recovery attempts.\n    +     * The message consumer.\n          */\n    -    private long recoveryPeriodMs = -1; // default to disabled\n    +    private MessageConsumer consumer;\n     \n         /**\n    -     * Translate the {@code int} value of an acknowledgment to a {@code String}.\n    +     * Sets the JMS Session acknowledgement mode for the JMS session.\n          *\n    -     * @param deliveryMode the mode to translate.\n    -     * @return its {@code String} explanation (name).\n    +     * <p>Possible values:\n    +     * <ul>\n    +     * <li>javax.jms.Session.AUTO_ACKNOWLEDGE</li>\n    +     * <li>javax.jms.Session.CLIENT_ACKNOWLEDGE</li>\n    +     * <li>javax.jms.Session.DUPS_OK_ACKNOWLEDGE</li>\n    +     * </ul>\n          *\n    -     * @see Session\n    +     * Any other vendor specific modes are not supported.\n    +     *\n    +     * @param mode JMS Session Acknowledgement mode\n          */\n    -    private static String toDeliveryModeString(int deliveryMode) {\n    -        switch (deliveryMode) {\n    +    public void setJmsAcknowledgeMode(final int mode) {\n    +        switch (mode) {\n                 case Session.AUTO_ACKNOWLEDGE:\n    -                return \"AUTO_ACKNOWLEDGE\";\n    -            case Session.CLIENT_ACKNOWLEDGE:\n    -                return \"CLIENT_ACKNOWLEDGE\";\n                 case Session.DUPS_OK_ACKNOWLEDGE:\n    -                return \"DUPS_OK_ACKNOWLEDGE\";\n    +                messageHandler = new MessageHandler();\n    +                break;\n    +            case Session.CLIENT_ACKNOWLEDGE:\n    +                messageHandler = new ClientAckHandler();\n    +                break;\n    +            case Session.SESSION_TRANSACTED:\n    +                messageHandler = new TransactedSessionMessageHandler();\n    +                break;\n                 default:\n    -                return \"UNKNOWN\";\n    -\n    +                LOG.warn(\"Unsupported Acknowledge mode: \"\n    --- End diff --\n    \n    Yes. Its the only way to support provider extensions.\n","created":"2018-05-11T00:39:06.329+0000","updated":"2018-05-11T00:39:06.329+0000","started":"2018-05-11T00:39:06.328+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"100927","issueId":"13153779"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13153779/worklog/100928","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user arunmahadevan commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/2639#discussion_r187496258\n  \n    --- Diff: external/storm-jms/src/main/java/org/apache/storm/jms/spout/JmsSpout.java ---\n    @@ -262,42 +189,26 @@ public void onMessage(Message msg) {\n          * topic/queue.\n          */\n         @Override\n    -    public void open(Map<String, Object> conf,\n    -                     TopologyContext context,\n    -                     SpoutOutputCollector collector) {\n    +    public void open(final Map<String, Object> conf,\n    +                     final TopologyContext context,\n    +                     final SpoutOutputCollector spoutOutputCollector) {\n     \n    -        if (this.jmsProvider == null) {\n    -            throw new IllegalStateException(\"JMS provider has not been set.\");\n    -        }\n    -        if (this.tupleProducer == null) {\n    -            throw new IllegalStateException(\"JMS Tuple Producer has not been set.\");\n    +        if (jmsProvider == null) {\n    +            throw new IllegalStateException(\n    +                \"JMS provider has not been set.\");\n             }\n    -        // TODO get the default value from storm instead of hard coding 30 secs\n    -        Long topologyTimeout =\n    -            ((Number) conf.getOrDefault(Config.TOPOLOGY_MESSAGE_TIMEOUT_SECS, DEFAULT_MESSAGE_TIMEOUT_SECS)).longValue();\n    -        if ((TimeUnit.SECONDS.toMillis(topologyTimeout)) > this.recoveryPeriodMs) {\n    -            LOG.warn(\"*** WARNING *** : \"\n    -                     + \"Recovery period (\" + this.recoveryPeriodMs + \" ms.) is less then the configured \"\n    -                     + \"'topology.message.timeout.secs' of \" + topologyTimeout\n    -                     + \" secs. This could lead to a message replay flood!\");\n    +        if (tupleProducer == null) {\n    +            throw new IllegalStateException(\n    +                \"JMS Tuple Producer has not been set.\");\n             }\n    -        this.queue = new LinkedBlockingQueue<Message>();\n    -        this.toCommit = new TreeSet<JmsMessageID>();\n    -        this.pendingMessages = new HashMap<JmsMessageID, Message>();\n    -        this.collector = collector;\n    +        collector = spoutOutputCollector;\n             try {\n    -            ConnectionFactory cf = this.jmsProvider.connectionFactory();\n    -            Destination dest = this.jmsProvider.destination();\n    -            this.connection = cf.createConnection();\n    -            this.session = connection.createSession(false, this.jmsAcknowledgeMode);\n    -            MessageConsumer consumer = session.createConsumer(dest);\n    -            consumer.setMessageListener(this);\n    -            this.connection.start();\n    -            if (this.isDurableSubscription() && this.recoveryPeriodMs > 0) {\n    -                this.recoveryTimer = new Timer();\n    -                this.recoveryTimer.scheduleAtFixedRate(new RecoveryTask(), RECOVERY_DELAY_MS, this.recoveryPeriodMs);\n    -            }\n    -\n    +            ConnectionFactory cf = jmsProvider.connectionFactory();\n    +            Destination dest = jmsProvider.destination();\n    +            connection = cf.createConnection();\n    +            session = messageHandler.createSession(connection);\n    --- End diff --\n    \n    We can throw an exception if `setIndividualAck` is invoked and the ACK mode is still the standard ones.\n","created":"2018-05-11T00:40:33.898+0000","updated":"2018-05-11T00:40:33.898+0000","started":"2018-05-11T00:40:33.898+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"100928","issueId":"13153779"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13153779/worklog/100929","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user arunmahadevan commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/2639#discussion_r187496374\n  \n    --- Diff: external/storm-jms/src/main/java/org/apache/storm/jms/spout/JmsSpout.java ---\n    @@ -403,50 +274,31 @@ public void ack(Object msgId) {\n          * <p>Will only be called if we're transactional or not AUTO_ACKNOWLEDGE\n          */\n         @Override\n    -    public void fail(Object msgId) {\n    +    public void fail(final Object msgId) {\n             LOG.warn(\"Message failed: \" + msgId);\n    -        this.pendingMessages.clear();\n    -        this.toCommit.clear();\n    -        synchronized (this.recoveryMutex) {\n    -            this.hasFailures = true;\n    -        }\n    +        messageHandler.fail(msgId);\n         }\n     \n         /**\n    -     * Use the {@link #tupleProducer} to determine which fields are about to be emitted.\n    +     * Use the {@link #tupleProducer} to determine which fields are about\n    +     * to be emitted.\n          *\n    -     * <p>Note that {@link #nextTuple()} always emits to the default stream, and thus only fields declared\n    -     * for this stream are used.\n    +     * <p>Note that {@link #nextTuple()} always emits to the default stream,\n    +     * and thus only fields declared for this stream are used.\n          */\n         @Override\n    -    public void declareOutputFields(OutputFieldsDeclarer declarer) {\n    +    public void declareOutputFields(final OutputFieldsDeclarer declarer) {\n             this.tupleProducer.declareOutputFields(declarer);\n     \n         }\n     \n         /**\n    -     * Returns <code>true</code> if the spout has received failures from which it has not yet recovered.\n    -     *\n    -     * @return {@code true} if there were failures, {@code false} otherwise.\n    -     */\n    -    public boolean hasFailures() {\n    -        return this.hasFailures;\n    -    }\n    -\n    -    /**\n    -     * Marks a healthy session state.\n    -     */\n    -    protected void recovered() {\n    -        this.hasFailures = false;\n    -    }\n    -\n    -    /**\n    -     * Sets the periodicity of the timer task that checks for failures and recovers the JMS session.\n    +     * Sets the periodicity of the timer task that\n    +     * checks for failures and recovers the JMS session.\n          *\n          * @param period desired wait period\n          */\n    -    public void setRecoveryPeriodMs(long period) {\n    -        this.recoveryPeriodMs = period;\n    +    public void setRecoveryPeriodMs(final long period) {\n    --- End diff --\n    \n    I just left it since its breaking the public API and if someone is using this in their code.\n","created":"2018-05-11T00:41:47.329+0000","updated":"2018-05-11T00:41:47.329+0000","started":"2018-05-11T00:41:47.329+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"100929","issueId":"13153779"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13153779/worklog/100955","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user arunmahadevan commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/2639#discussion_r187500706\n  \n    --- Diff: external/storm-jms/pom.xml ---\n    @@ -94,7 +94,7 @@\n                     <artifactId>maven-checkstyle-plugin</artifactId>\n                     <!--Note - the version would be inherited-->\n                     <configuration>\n    -                    <maxAllowedViolations>63</maxAllowedViolations>\n    +                    <maxAllowedViolations>73</maxAllowedViolations>\n    --- End diff --\n    \n    I cant figure out why checkstyle keeps complaining. Running \"mvn checkstyle:check\" doesnt throw any warnings for JMSSpout.java. I have set it to 64 for the build to pass.\r\n    \r\n    And the rules we have seems too restrictive. (Java-doc for each variable/method and line length of 80). Should probably relook so that its not a time waste.\n","created":"2018-05-11T01:23:39.948+0000","updated":"2018-05-11T01:23:39.948+0000","started":"2018-05-11T01:23:39.947+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"100955","issueId":"13153779"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13153779/worklog/100956","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user arunmahadevan commented on the issue:\n\n    https://github.com/apache/storm/pull/2639\n  \n    @HeartSaVioR , please check it again. \n","created":"2018-05-11T01:23:55.334+0000","updated":"2018-05-11T01:23:55.334+0000","started":"2018-05-11T01:23:55.333+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"100956","issueId":"13153779"}]},"customfield_12311820":"0|i3ss1r:"}}