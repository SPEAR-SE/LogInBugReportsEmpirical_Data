{"expand":"renderedFields,names,schema,operations,editmeta,changelog,versionedRepresentations","id":"13039301","self":"https://issues.apache.org/jira/rest/api/2/issue/13039301","key":"STORM-2334","fields":{"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype","name":"Bug","subtask":false,"avatarId":21133},"timespent":22800,"project":{"self":"https://issues.apache.org/jira/rest/api/2/project/12314820","id":"12314820","key":"STORM","name":"Apache Storm","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/projectavatar?pid=12314820&avatarId=21667","24x24":"https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12314820&avatarId=21667","16x16":"https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12314820&avatarId=21667","32x32":"https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12314820&avatarId=21667"},"projectCategory":{"self":"https://issues.apache.org/jira/rest/api/2/projectCategory/13260","id":"13260","description":"Apache Storm Related","name":"Storm"}},"fixVersions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12334657","id":"12334657","name":"2.0.0","archived":false,"released":false},{"self":"https://issues.apache.org/jira/rest/api/2/version/12335748","id":"12335748","name":"1.1.0","archived":false,"released":true,"releaseDate":"2017-03-29"}],"aggregatetimespent":22800,"resolution":{"self":"https://issues.apache.org/jira/rest/api/2/resolution/1","id":"1","description":"A fix for this issue is checked into the tree and tested.","name":"Fixed"},"customfield_12312322":null,"customfield_12310220":"2017-02-24T08:52:23.726+0000","customfield_12312520":null,"customfield_12312323":null,"customfield_12312521":"Fri Feb 24 08:52:23 UTC 2017","customfield_12312320":null,"customfield_12310222":"1_*:*_1_*:*_99208658_*|*_3_*:*_1_*:*_1929460857_*|*_4_*:*_1_*:*_29599_*|*_5_*:*_1_*:*_0_*|*_6_*:*_1_*:*_33150507","customfield_12310420":"9223372036854775807","customfield_12312321":null,"resolutiondate":"2017-02-24T18:05:23.814+0000","workratio":-1,"customfield_12312328":null,"customfield_12312329":null,"customfield_12312923":null,"customfield_12312326":null,"customfield_12312920":null,"customfield_12310300":null,"customfield_12312327":null,"customfield_12312921":null,"customfield_12312324":null,"customfield_12312720":null,"customfield_12312325":null,"lastViewed":null,"watches":{"self":"https://issues.apache.org/jira/rest/api/2/issue/STORM-2334/watchers","watchCount":3,"isWatching":false},"created":"2017-01-31T21:21:14.225+0000","priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.svg","name":"Major","id":"3"},"labels":[],"customfield_12312333":null,"customfield_12312334":null,"customfield_12313422":"false","customfield_12310310":"0.0","customfield_12312331":null,"customfield_12312332":null,"timeestimate":0,"aggregatetimeoriginalestimate":null,"customfield_12311120":null,"customfield_12312330":null,"versions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12334657","id":"12334657","name":"2.0.0","archived":false,"released":false},{"self":"https://issues.apache.org/jira/rest/api/2/version/12338104","id":"12338104","name":"1.x","archived":false,"released":false}],"customfield_12312339":null,"issuelinks":[],"assignee":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=roshan_naik","name":"roshan_naik","key":"roshan_naik","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Roshan Naik","active":true,"timeZone":"America/Los_Angeles"},"customfield_12312337":null,"customfield_12312338":null,"updated":"2017-02-24T18:39:24.954+0000","customfield_12312335":null,"customfield_12312336":null,"status":{"self":"https://issues.apache.org/jira/rest/api/2/status/5","description":"A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/resolved.png","name":"Resolved","id":"5","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Done"}},"components":[],"timeoriginalestimate":null,"description":"Create a general purpose windowed bolt that performs Joins on multiple data streams.\n\nSince, depending on the topo config,  the bolt could be receiving data either on 'default' streams or on named streams .... join bolt should be able to differentiate the incoming data based on names of upstream components as well as stream names.\n\n*Example:*\n\nThe following SQL style join involving 4 tables :\n\n{code}\nselect  userId, key4, key2, key3\nfrom stream1 \njoin       stream2  on stream2.userId =  stream1.key1\njoin       stream3  on stream3.key3   =  stream2.userId\nleft join  stream4  on stream4.key4   =  stream3.key3\n{code}\n\nCould be expressed using the Join Bolt over 4 named streams as :\n\n{code}\nnew JoinBolt(STREAM, \"stream1\", \"key1\") //'STREAM' arg indicates that stream1/2/3/4 are names of streams. 'key1' is the key on which \n     .join     (\"stream2\", \"userId\",  \"stream1\") //join stream2 on stream2.userId=stream1.key1\n     .join     (\"stream3\", \"key3\",    \"stream2\") //join stream3 on stream3.key3=stream2.userId   \n     .leftjoin (\"stream4\", \"key4\",    \"stream3\") //left join stream4 on stream4.key4=stream3.key3\n     .select(\"userId, key4, key2, key3\")         // chose output fields\n     .withWindowLength(..)\n     .withSlidingInterval(..);\n{code}\n\nOr based on named source components :\n\n{code}\nnew JoinBolt(SOURCE, \"kafkaSpout1\", \"key1\") //'SOURCE' arg indicates that kafkaSpout1, hdfsSpout3 etc are names of upstream components \n     .join     (\"kafkaSpout2\", \"userId\",    \"kafkaSpout1\" )    \n     .join     (\"hdfsSpout3\",  \"key3\",      \"kafkaSpout2\")\n     .leftjoin (\"mqttSpout1\",  \"key4\",      \"hdfsSpout3\")\n     .select (\"userId, key4, key2, key3\")\n     .withWindowLength(..)\n     .withSlidingInterval(..);\n{code}\n\n\nIn order for the tuples to  be joined correctly, 'fields grouping' should be employed on the incoming streams. Each stream should be grouped on the same key using which it will be joined against other streams.  This is a restriction compared to SQL which allows join a table with others on any key and any number of keys.\n\n*For example:* If a 'Stream1' is Fields Grouped on 'key1', we cannot use a different 'key2' on 'Stream1' to join it with other streams. However, 'Stream1' can be joined using the same key with multiple other streams as show in this SQL.\n\n{code}\nselect ....\nfrom stream1 \njoin  stream2  on stream2.userId =  stream1.key1\njoin  stream3  on stream3.key3   =  stream1.key2  // not supportable in Join Bolt \n{code}\n\nConsequently the join bolt's syntax is a bit simplified compared to SQL. The key name for any given stream only appears once, as soon the stream is introduced for the first time in the join. Thereafter that key is implicitly used for joining. See the case of 'stream3' being joined with both 'stream2' and 'stream4' in the first example.\n","customfield_10010":null,"timetracking":{"remainingEstimate":"0h","timeSpent":"6h 20m","remainingEstimateSeconds":0,"timeSpentSeconds":22800},"customfield_12312026":null,"customfield_12312023":null,"customfield_12312024":null,"attachment":[],"customfield_12312340":null,"aggregatetimeestimate":0,"customfield_12312341":null,"customfield_12312220":null,"customfield_12312022":null,"customfield_12310921":null,"customfield_12310920":"9223372036854775807","customfield_12312823":null,"summary":"Bolt for Joining streams","creator":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=roshan_naik","name":"roshan_naik","key":"roshan_naik","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Roshan Naik","active":true,"timeZone":"America/Los_Angeles"},"subtasks":[],"reporter":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=roshan_naik","name":"roshan_naik","key":"roshan_naik","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Roshan Naik","active":true,"timeZone":"America/Los_Angeles"},"customfield_12310291":null,"customfield_12310290":null,"aggregateprogress":{"progress":22800,"total":22800,"percent":100},"environment":null,"customfield_12313520":null,"customfield_12311020":null,"duedate":null,"customfield_12310250":null,"progress":{"progress":22800,"total":22800,"percent":100},"comment":{"comments":[{"self":"https://issues.apache.org/jira/rest/api/2/issue/13039301/comment/15882242","id":"15882242","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=arunmahadevan","name":"arunmahadevan","key":"arunmahadevan","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Arun Mahadevan","active":true,"timeZone":"Asia/Kolkata"},"body":"Merged to master and 1.x branch","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=arunmahadevan","name":"arunmahadevan","key":"arunmahadevan","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Arun Mahadevan","active":true,"timeZone":"Asia/Kolkata"},"created":"2017-02-24T08:52:23.726+0000","updated":"2017-02-24T08:52:23.726+0000"}],"maxResults":1,"total":1,"startAt":0},"votes":{"self":"https://issues.apache.org/jira/rest/api/2/issue/STORM-2334/votes","votes":0,"hasVoted":false},"worklog":{"startAt":0,"maxResults":20,"total":41,"worklogs":[{"self":"https://issues.apache.org/jira/rest/api/2/issue/13039301/worklog/36558","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"GitHub user roshannaik opened a pull request:\n\n    https://github.com/apache/storm/pull/1912\n\n    Storm 2334 - Bolt for joining multiple streams\n\n    Detailed description given in [STORM-2334](https://issues.apache.org/jira/browse/STORM-2334)\n\nYou can merge this pull request into a Git repository by running:\n\n    $ git pull https://github.com/roshannaik/storm STORM-2334\n\nAlternatively you can review and apply these changes as the patch at:\n\n    https://github.com/apache/storm/pull/1912.patch\n\nTo close this pull request, make a commit to your master/trunk branch\nwith (at least) the following in the commit message:\n\n    This closes #1912\n    \n----\ncommit 34d608b2f1ca263b7b7728ea593e673bfeeccc31\nAuthor: Robert (Bobby) Evans <revans2@gmail.com>\nDate:   2016-11-01T14:13:56Z\n\n    Merge pull request #7 from srdo/STORM-2175-1.x-disable-shutdown-timeout-in-local-mode\n    \n    Remove time limit on Slot shutdown when running in local mode\n\ncommit 9f981e533f2da6cb387658cc0f84b84a1054883e\nAuthor: Robert (Bobby) Evans <evans@yahoo-inc.com>\nDate:   2016-11-01T15:26:06Z\n\n    STORM-2175: Allow for longer timeout and different operations on failures\n\ncommit 1d7aeaaee17b2233ec5b16235f67ddb81a218e4f\nAuthor: Jungtaek Lim <kabhwan@gmail.com>\nDate:   2016-11-02T23:48:15Z\n\n    also add STORM-2018 to 1.0.3\n\ncommit 4fb52c830b7b1cf0b619be64157f238edfc6cbf4\nAuthor: Jungtaek Lim <kabhwan@gmail.com>\nDate:   2016-11-03T00:08:04Z\n\n    Merge branch 'STORM-2175-1.x' of https://github.com/revans2/incubator-storm into STORM-2175-1.x\n\ncommit 10944800537fc562948c13247df486e127c1f8bf\nAuthor: Jungtaek Lim <kabhwan@gmail.com>\nDate:   2016-11-03T00:08:34Z\n\n    add STORM-2175 to CHANGELOG\n\ncommit 0920b6d4d291e5b0d67f0eb38fa23e38122d997f\nAuthor: vesense <best.wangxin@163.com>\nDate:   2016-10-28T05:38:42Z\n\n    STORM-2103: Introduce new sql external module: storm-sql-mongodb\n\ncommit ff61fdf366d29741727e7aa25d962e9476b860b1\nAuthor: Jungtaek Lim <kabhwan@gmail.com>\nDate:   2016-11-05T01:55:13Z\n\n    Merge branch 'STORM-2103-1.x-merge' into 1.x-branch\n\ncommit c760e13959f29ad6d387a093057777c513a88c2d\nAuthor: Jungtaek Lim <kabhwan@gmail.com>\nDate:   2016-11-05T01:55:35Z\n\n    add STORM-2103 to CHANGELOG\n\ncommit e18f0ae63dad71af31971ab5801495ba9c0ce2e3\nAuthor: Kyle Nusbaum <knusbaum@yahoo-inc.com>\nDate:   2016-11-02T20:29:53Z\n\n    STORM-2185: Storm Supervisor doesn't delete directories properly sometimes\n    \n    * Closes #1759\n\ncommit 21a36376be8ca3fa79d3b71ca2b9c7c221470ed8\nAuthor: Jungtaek Lim <kabhwan@gmail.com>\nDate:   2016-11-07T14:02:57Z\n\n    Merge branch 'STORM-2185-1.x-merge' into 1.x-branch\n\ncommit bf8437c20e65134801ee4b8eeb77e81f8b17e09a\nAuthor: Jungtaek Lim <kabhwan@gmail.com>\nDate:   2016-11-07T14:03:19Z\n\n    add STORM-2185 to CHANGELOG\n\ncommit 10b165a2d0e9c5253395af7d8c086f4f979e6e1b\nAuthor: Stig Rohde Døssing <sdo@it-minds.dk>\nDate:   2016-11-02T17:36:44Z\n\n    STORM-2184: Don't wakeup KafkaConsumer on shutdown, spout methods are not called by multiple threads at a time\n\ncommit 8b19d0e45b49032db9c86dedcaf1ae978a5076bf\nAuthor: Jungtaek Lim <kabhwan@gmail.com>\nDate:   2016-11-07T14:16:31Z\n\n    Merge branch 'STORM-2184-1.x-merge' into 1.x-branch\n\ncommit 0a1f433100d3f8189fd783e364625e5f1606223e\nAuthor: Jungtaek Lim <kabhwan@gmail.com>\nDate:   2016-11-07T14:16:50Z\n\n    add STORM-2184 to CHANGELOG\n\ncommit 841feafe90afa6951fcc8c33355ffce1f8a8d354\nAuthor: Sriharsha Chintalapani <harsha@hortonworks.com>\nDate:   2016-11-07T18:57:57Z\n\n    Minor: storm-sql-mongodb parent version change.\n\ncommit 8d1b61a5f83b9bdf3ece2e94b2aaaf46da040e5a\nAuthor: Li Wang <wangli1426@gmail.com>\nDate:   2016-11-07T03:03:05Z\n\n    [STORM-2189] RAS_Node::freeCPU outputs incorrect info\n    \n    CPU trying to free should be ``_availCPU + amount`` rather than ``_availMemory + amount``.\n\ncommit 62264e15612b7deeefc32154559c843fc3c053d2\nAuthor: Jungtaek Lim <kabhwan@gmail.com>\nDate:   2016-11-09T00:34:53Z\n\n    Merge branch 'STORM-2189-1.x-merge' into 1.x-branch\n\ncommit 08b0074c42c357ba78ac276bd21d6f9e2fdee1e0\nAuthor: Jungtaek Lim <kabhwan@gmail.com>\nDate:   2016-11-09T00:35:13Z\n\n    add STORM-2189 to CHANGELOG\n\ncommit eda583a0cf3ddf99a7879a37bc21f866b6d6a323\nAuthor: Satish Duggana <sduggana@hortonworks.com>\nDate:   2016-11-10T04:05:31Z\n\n    STORM-2197: Fix for NimbusClient connectins leak due to ThriftClient connection's leakage in case of errors.\n\ncommit 44ea6ad7579307b26a5e675ee06086c46abcc9a9\nAuthor: Satish Duggana <sduggana@hortonworks.com>\nDate:   2016-11-11T10:00:15Z\n\n    Merge branch 'STORM-2197' of https://github.com/satishd/storm into STORM-2197-1.x\n\ncommit 334fcef221e522c6009b9bec4af0f369cdc39723\nAuthor: Satish Duggana <sduggana@hortonworks.com>\nDate:   2016-11-11T10:07:02Z\n\n    Added STORM-2197 to CHANGELOG\n\ncommit ada5a5b34cd908ee7bb329b17d8b8c2389ffc4c7\nAuthor: Xin Wang <best.wangxin@163.com>\nDate:   2016-11-11T15:12:31Z\n\n    [STORM-2172][SQL] Support Avro as input / output format\n\ncommit 8e9d4c37b2f8e0c9665cad090d487dc68986575f\nAuthor: Xin Wang <best.wangxin@163.com>\nDate:   2016-11-11T15:17:01Z\n\n    [STORM-2172][SQL] version fix\n\ncommit d86039dae56b3e8fad4d265fb345dd89f97cec3c\nAuthor: Jungtaek Lim <kabhwan@gmail.com>\nDate:   2016-11-13T04:42:02Z\n\n    Merge branch 'STORM-2172-1.x' of https://github.com/vesense/storm into STORM-2172-1.x-merge\n\ncommit 7c28273c43ac2059be9435e045fc952f130b4a18\nAuthor: Jungtaek Lim <kabhwan@gmail.com>\nDate:   2016-11-13T05:30:48Z\n\n    add STORM-2172 to CHANGELOG\n\ncommit 93b09c2c242e1e2f4638a459cf0670dcfa78c3cc\nAuthor: Li Wang <wangli1426@gmail.com>\nDate:   2016-11-10T04:48:26Z\n\n    [STORM-2196] A typo in RAS_Node::consumeCPU\n    \n    Fixed a typo in RAS_Node::consumeCPU()\n\ncommit 5626853a7fdf678d0d3e4254406706ac195a8058\nAuthor: Jungtaek Lim <kabhwan@gmail.com>\nDate:   2016-11-14T02:20:59Z\n\n    Merge branch 'STORM-2196-1.x-merge' into 1.x-branch\n\ncommit fe03b706fd06ec399630b7b1ceb40f48b16024c2\nAuthor: Jungtaek Lim <kabhwan@gmail.com>\nDate:   2016-11-14T02:21:20Z\n\n    add STORM-2196 to CHANGELOG\n\ncommit c967c170c0f2d29aa642afa621b1157bb7c2e2d2\nAuthor: Jungtaek Lim <kabhwan@gmail.com>\nDate:   2016-11-14T10:02:57Z\n\n    Merge branch 'STORM-2177' of https://github.com/vesense/storm into STORM-2173-2177-merge\n\ncommit 5009f7887c206cb81c071b08d4379ecf58e04a3e\nAuthor: Jungtaek Lim <kabhwan@gmail.com>\nDate:   2016-11-14T12:49:51Z\n\n    STORM-2173 & STORM-2177 test fix for JDK 1.7\n\n----\n","created":"2017-02-02T00:54:26.205+0000","updated":"2017-02-02T00:54:26.205+0000","started":"2017-02-02T00:54:26.197+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"36558","issueId":"13039301"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13039301/worklog/36583","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user roshannaik closed the pull request at:\n\n    https://github.com/apache/storm/pull/1912\n","created":"2017-02-02T09:40:20.607+0000","updated":"2017-02-02T09:40:20.607+0000","started":"2017-02-02T09:40:20.600+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"36583","issueId":"13039301"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13039301/worklog/36584","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"GitHub user roshannaik opened a pull request:\n\n    https://github.com/apache/storm/pull/1914\n\n    STORM-2334 - Join Bolt implementation with unit tests\n\n    For details see : \n    https://issues.apache.org/jira/browse/STORM-2334\n\nYou can merge this pull request into a Git repository by running:\n\n    $ git pull https://github.com/roshannaik/storm STORM-2334\n\nAlternatively you can review and apply these changes as the patch at:\n\n    https://github.com/apache/storm/pull/1914.patch\n\nTo close this pull request, make a commit to your master/trunk branch\nwith (at least) the following in the commit message:\n\n    This closes #1914\n    \n----\ncommit f193e266a5f2701c2a91fa8e73778d6e4c2fa3d7\nAuthor: Roshan Naik <roshan@hortonworks.com>\nDate:   2017-02-01T01:21:46Z\n\n    STORM-2334 Join Bolt implementation with unit tests\n\n----\n","created":"2017-02-02T09:42:43.219+0000","updated":"2017-02-02T09:42:43.219+0000","started":"2017-02-02T09:42:43.218+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"36584","issueId":"13039301"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13039301/worklog/36589","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user raghavgautam commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/1914#discussion_r99135627\n  \n    --- Diff: storm-core/src/jvm/org/apache/storm/bolt/JoinBolt.java ---\n    @@ -0,0 +1,428 @@\n    +/**\n    + * Licensed to the Apache Software Foundation (ASF) under one\n    + * or more contributor license agreements.  See the NOTICE file\n    + * distributed with this work for additional information\n    + * regarding copyright ownership.  The ASF licenses this file\n    + * to you under the Apache License, Version 2.0 (the\n    + * \"License\"); you may not use this file except in compliance\n    + * with the License.  You may obtain a copy of the License at\n    + *\n    + * http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +package org.apache.storm.bolt;\n    +\n    +\n    +import org.apache.storm.task.OutputCollector;\n    +import org.apache.storm.task.TopologyContext;\n    +import org.apache.storm.topology.OutputFieldsDeclarer;\n    +import org.apache.storm.topology.base.BaseWindowedBolt;\n    +import org.apache.storm.tuple.Fields;\n    +import org.apache.storm.tuple.Tuple;\n    +import org.apache.storm.windowing.TupleWindow;\n    +\n    +import java.io.Serializable;\n    +import java.util.ArrayList;\n    +import java.util.Collection;\n    +import java.util.HashMap;\n    +import java.util.LinkedHashMap;\n    +import java.util.List;\n    +import java.util.Map;\n    +\n    +\n    +public class JoinBolt extends BaseWindowedBolt {\n    +\n    +    private OutputCollector collector;\n    +\n    +    // Map[StreamName -> Map[Key -> List<Tuple>]  ]\n    +    HashMap<String, HashMap<Object, ArrayList<Tuple> >> hashedInputs = new HashMap<>(); // holds remaining streams\n    +\n    +    // Map[StreamName -> JoinInfo]\n    +    protected LinkedHashMap<String, JoinInfo> joinCriteria = new LinkedHashMap<>();\n    +    protected String[][] outputKeys;  // specified via bolt.select() ... used in declaring Output fields\n    +    protected String[] dotSeparatedOutputKeyNames; // flattened (de nested) keyNames, used for naming output fields\n    +    protected String outputStreamName;\n    +\n    +    // Use streamId, source component name OR field in tuple to distinguish incoming tuple streams\n    +    public enum Selector { STREAM, SOURCE }\n    +    protected final Selector selectorType;\n    +\n    +\n    +    /**\n    +     * StreamId to start the join with. Equivalent SQL ...\n    +     *       select .... from streamId ...\n    +     * @param type Specifies whether 'streamId' refers to stream name/source component\n    +     * @param streamId name of stream/source component\n    +     * @param key the fieldName to use as key for the stream (used for performing joins)\n    +     */\n    +    public JoinBolt(Selector type, String streamId, String key) {\n    +        selectorType = type;\n    +        joinCriteria.put(streamId, new JoinInfo(key) );\n    +    }\n    +\n    +    /**\n    +     * Defines the name of the output stream\n    +     */\n    +    public JoinBolt withOutputStream(String streamName) {\n    +        this.outputStreamName = streamName;\n    +        return this;\n    +    }\n    +\n    +    /**\n    +     * Performs inner Join.\n    +     *  SQL    :   from priorStream inner join newStream on newStream.key = priorStream.key1\n    +     *  same as:   new WindowedQueryBolt(priorStream,key1). join(newStream, key, priorStream);\n    +     *\n    +     *  Note: priorStream must be previously joined.\n    +     *    Valid ex:    new WindowedQueryBolt(s1,k1). join(s2,k2, s1). join(s3,k3, s2);\n    --- End diff --\n    \n    It would be probably better if the user could specify joins by saying:\n    new WindowedQueryBolt(s1,k1). join(s2,k2). join(s3,k3);\n    (note missing s1, s2 parameters in the join method)\n    This will be less error prone and more in line with SQL expectation where user specifies:\n    table1.key1 = table2.key2\n","created":"2017-02-02T14:55:54.905+0000","updated":"2017-02-02T14:55:54.905+0000","started":"2017-02-02T14:55:54.905+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"36589","issueId":"13039301"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13039301/worklog/36609","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user harshach commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/1914#discussion_r99169659\n  \n    --- Diff: storm-core/src/jvm/org/apache/storm/bolt/JoinBolt.java ---\n    @@ -0,0 +1,428 @@\n    +/**\n    + * Licensed to the Apache Software Foundation (ASF) under one\n    + * or more contributor license agreements.  See the NOTICE file\n    + * distributed with this work for additional information\n    + * regarding copyright ownership.  The ASF licenses this file\n    + * to you under the Apache License, Version 2.0 (the\n    + * \"License\"); you may not use this file except in compliance\n    + * with the License.  You may obtain a copy of the License at\n    + *\n    + * http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +package org.apache.storm.bolt;\n    +\n    +\n    +import org.apache.storm.task.OutputCollector;\n    +import org.apache.storm.task.TopologyContext;\n    +import org.apache.storm.topology.OutputFieldsDeclarer;\n    +import org.apache.storm.topology.base.BaseWindowedBolt;\n    +import org.apache.storm.tuple.Fields;\n    +import org.apache.storm.tuple.Tuple;\n    +import org.apache.storm.windowing.TupleWindow;\n    +\n    +import java.io.Serializable;\n    +import java.util.ArrayList;\n    +import java.util.Collection;\n    +import java.util.HashMap;\n    +import java.util.LinkedHashMap;\n    +import java.util.List;\n    +import java.util.Map;\n    +\n    +\n    +public class JoinBolt extends BaseWindowedBolt {\n    +\n    +    private OutputCollector collector;\n    +\n    +    // Map[StreamName -> Map[Key -> List<Tuple>]  ]\n    +    HashMap<String, HashMap<Object, ArrayList<Tuple> >> hashedInputs = new HashMap<>(); // holds remaining streams\n    +\n    +    // Map[StreamName -> JoinInfo]\n    +    protected LinkedHashMap<String, JoinInfo> joinCriteria = new LinkedHashMap<>();\n    +    protected String[][] outputKeys;  // specified via bolt.select() ... used in declaring Output fields\n    +    protected String[] dotSeparatedOutputKeyNames; // flattened (de nested) keyNames, used for naming output fields\n    +    protected String outputStreamName;\n    +\n    +    // Use streamId, source component name OR field in tuple to distinguish incoming tuple streams\n    +    public enum Selector { STREAM, SOURCE }\n    +    protected final Selector selectorType;\n    +\n    +\n    +    /**\n    +     * StreamId to start the join with. Equivalent SQL ...\n    +     *       select .... from streamId ...\n    +     * @param type Specifies whether 'streamId' refers to stream name/source component\n    +     * @param streamId name of stream/source component\n    +     * @param key the fieldName to use as key for the stream (used for performing joins)\n    +     */\n    +    public JoinBolt(Selector type, String streamId, String key) {\n    +        selectorType = type;\n    +        joinCriteria.put(streamId, new JoinInfo(key) );\n    +    }\n    +\n    +    /**\n    +     * Defines the name of the output stream\n    +     */\n    +    public JoinBolt withOutputStream(String streamName) {\n    +        this.outputStreamName = streamName;\n    +        return this;\n    +    }\n    +\n    +    /**\n    +     * Performs inner Join.\n    +     *  SQL    :   from priorStream inner join newStream on newStream.key = priorStream.key1\n    +     *  same as:   new WindowedQueryBolt(priorStream,key1). join(newStream, key, priorStream);\n    +     *\n    +     *  Note: priorStream must be previously joined.\n    +     *    Valid ex:    new WindowedQueryBolt(s1,k1). join(s2,k2, s1). join(s3,k3, s2);\n    +     *    Invalid ex:  new WindowedQueryBolt(s1,k1). join(s3,k3, s2). join(s2,k2, s1);\n    +     */\n    +    public JoinBolt join(String newStream, String key, String priorStream) {\n    +        return join_common(newStream, key, priorStream, JoinType.INNER);\n    +    }\n    +\n    +    /**\n    +     * Performs left Join.\n    +     *  SQL    :   from stream1  left join stream2  on stream2.key = stream1.key1\n    +     *  same as:   new  WindowedQueryBolt(stream1, key1). leftJoin(stream2, key, stream1);\n    +     *\n    +     *  Note: priorStream must be previously joined\n    +     *    Valid ex:    new WindowedQueryBolt(s1,k1). leftJoin(s2,k2, s1). leftJoin(s3,k3, s2);\n    +     *    Invalid ex:  new WindowedQueryBolt(s1,k1). leftJoin(s3,k3, s2). leftJoin(s2,k2, s1);\n    +     */\n    +    public JoinBolt leftJoin(String newStream, String key, String priorStream) {\n    +        return join_common(newStream, key, priorStream, JoinType.LEFT);\n    +    }\n    +\n    +    private JoinBolt join_common(String newStream, String key, String priorStream, JoinType joinType) {\n    --- End diff --\n    \n    can we keep the method names to camelcase like joinCommon\n","created":"2017-02-02T17:07:05.612+0000","updated":"2017-02-02T17:07:05.612+0000","started":"2017-02-02T17:07:05.611+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"36609","issueId":"13039301"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13039301/worklog/36635","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user roshannaik commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/1914#discussion_r99227816\n  \n    --- Diff: storm-core/src/jvm/org/apache/storm/bolt/JoinBolt.java ---\n    @@ -0,0 +1,428 @@\n    +/**\n    + * Licensed to the Apache Software Foundation (ASF) under one\n    + * or more contributor license agreements.  See the NOTICE file\n    + * distributed with this work for additional information\n    + * regarding copyright ownership.  The ASF licenses this file\n    + * to you under the Apache License, Version 2.0 (the\n    + * \"License\"); you may not use this file except in compliance\n    + * with the License.  You may obtain a copy of the License at\n    + *\n    + * http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +package org.apache.storm.bolt;\n    +\n    +\n    +import org.apache.storm.task.OutputCollector;\n    +import org.apache.storm.task.TopologyContext;\n    +import org.apache.storm.topology.OutputFieldsDeclarer;\n    +import org.apache.storm.topology.base.BaseWindowedBolt;\n    +import org.apache.storm.tuple.Fields;\n    +import org.apache.storm.tuple.Tuple;\n    +import org.apache.storm.windowing.TupleWindow;\n    +\n    +import java.io.Serializable;\n    +import java.util.ArrayList;\n    +import java.util.Collection;\n    +import java.util.HashMap;\n    +import java.util.LinkedHashMap;\n    +import java.util.List;\n    +import java.util.Map;\n    +\n    +\n    +public class JoinBolt extends BaseWindowedBolt {\n    +\n    +    private OutputCollector collector;\n    +\n    +    // Map[StreamName -> Map[Key -> List<Tuple>]  ]\n    +    HashMap<String, HashMap<Object, ArrayList<Tuple> >> hashedInputs = new HashMap<>(); // holds remaining streams\n    +\n    +    // Map[StreamName -> JoinInfo]\n    +    protected LinkedHashMap<String, JoinInfo> joinCriteria = new LinkedHashMap<>();\n    +    protected String[][] outputKeys;  // specified via bolt.select() ... used in declaring Output fields\n    +    protected String[] dotSeparatedOutputKeyNames; // flattened (de nested) keyNames, used for naming output fields\n    +    protected String outputStreamName;\n    +\n    +    // Use streamId, source component name OR field in tuple to distinguish incoming tuple streams\n    +    public enum Selector { STREAM, SOURCE }\n    +    protected final Selector selectorType;\n    +\n    +\n    +    /**\n    +     * StreamId to start the join with. Equivalent SQL ...\n    +     *       select .... from streamId ...\n    +     * @param type Specifies whether 'streamId' refers to stream name/source component\n    +     * @param streamId name of stream/source component\n    +     * @param key the fieldName to use as key for the stream (used for performing joins)\n    +     */\n    +    public JoinBolt(Selector type, String streamId, String key) {\n    +        selectorType = type;\n    +        joinCriteria.put(streamId, new JoinInfo(key) );\n    +    }\n    +\n    +    /**\n    +     * Defines the name of the output stream\n    +     */\n    +    public JoinBolt withOutputStream(String streamName) {\n    +        this.outputStreamName = streamName;\n    +        return this;\n    +    }\n    +\n    +    /**\n    +     * Performs inner Join.\n    +     *  SQL    :   from priorStream inner join newStream on newStream.key = priorStream.key1\n    +     *  same as:   new WindowedQueryBolt(priorStream,key1). join(newStream, key, priorStream);\n    +     *\n    +     *  Note: priorStream must be previously joined.\n    +     *    Valid ex:    new WindowedQueryBolt(s1,k1). join(s2,k2, s1). join(s3,k3, s2);\n    --- End diff --\n    \n    It is necessary to specify which stream s3 should be joined with (s2 or s1?) .... as the results will differ accordingly.\n","created":"2017-02-02T21:46:41.253+0000","updated":"2017-02-02T21:46:41.253+0000","started":"2017-02-02T21:46:41.253+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"36635","issueId":"13039301"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13039301/worklog/36636","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user roshannaik commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/1914#discussion_r99227905\n  \n    --- Diff: storm-core/src/jvm/org/apache/storm/bolt/JoinBolt.java ---\n    @@ -0,0 +1,428 @@\n    +/**\n    + * Licensed to the Apache Software Foundation (ASF) under one\n    + * or more contributor license agreements.  See the NOTICE file\n    + * distributed with this work for additional information\n    + * regarding copyright ownership.  The ASF licenses this file\n    + * to you under the Apache License, Version 2.0 (the\n    + * \"License\"); you may not use this file except in compliance\n    + * with the License.  You may obtain a copy of the License at\n    + *\n    + * http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +package org.apache.storm.bolt;\n    +\n    +\n    +import org.apache.storm.task.OutputCollector;\n    +import org.apache.storm.task.TopologyContext;\n    +import org.apache.storm.topology.OutputFieldsDeclarer;\n    +import org.apache.storm.topology.base.BaseWindowedBolt;\n    +import org.apache.storm.tuple.Fields;\n    +import org.apache.storm.tuple.Tuple;\n    +import org.apache.storm.windowing.TupleWindow;\n    +\n    +import java.io.Serializable;\n    +import java.util.ArrayList;\n    +import java.util.Collection;\n    +import java.util.HashMap;\n    +import java.util.LinkedHashMap;\n    +import java.util.List;\n    +import java.util.Map;\n    +\n    +\n    +public class JoinBolt extends BaseWindowedBolt {\n    +\n    +    private OutputCollector collector;\n    +\n    +    // Map[StreamName -> Map[Key -> List<Tuple>]  ]\n    +    HashMap<String, HashMap<Object, ArrayList<Tuple> >> hashedInputs = new HashMap<>(); // holds remaining streams\n    +\n    +    // Map[StreamName -> JoinInfo]\n    +    protected LinkedHashMap<String, JoinInfo> joinCriteria = new LinkedHashMap<>();\n    +    protected String[][] outputKeys;  // specified via bolt.select() ... used in declaring Output fields\n    +    protected String[] dotSeparatedOutputKeyNames; // flattened (de nested) keyNames, used for naming output fields\n    +    protected String outputStreamName;\n    +\n    +    // Use streamId, source component name OR field in tuple to distinguish incoming tuple streams\n    +    public enum Selector { STREAM, SOURCE }\n    +    protected final Selector selectorType;\n    +\n    +\n    +    /**\n    +     * StreamId to start the join with. Equivalent SQL ...\n    +     *       select .... from streamId ...\n    +     * @param type Specifies whether 'streamId' refers to stream name/source component\n    +     * @param streamId name of stream/source component\n    +     * @param key the fieldName to use as key for the stream (used for performing joins)\n    +     */\n    +    public JoinBolt(Selector type, String streamId, String key) {\n    +        selectorType = type;\n    +        joinCriteria.put(streamId, new JoinInfo(key) );\n    +    }\n    +\n    +    /**\n    +     * Defines the name of the output stream\n    +     */\n    +    public JoinBolt withOutputStream(String streamName) {\n    +        this.outputStreamName = streamName;\n    +        return this;\n    +    }\n    +\n    +    /**\n    +     * Performs inner Join.\n    +     *  SQL    :   from priorStream inner join newStream on newStream.key = priorStream.key1\n    +     *  same as:   new WindowedQueryBolt(priorStream,key1). join(newStream, key, priorStream);\n    +     *\n    +     *  Note: priorStream must be previously joined.\n    +     *    Valid ex:    new WindowedQueryBolt(s1,k1). join(s2,k2, s1). join(s3,k3, s2);\n    +     *    Invalid ex:  new WindowedQueryBolt(s1,k1). join(s3,k3, s2). join(s2,k2, s1);\n    +     */\n    +    public JoinBolt join(String newStream, String key, String priorStream) {\n    +        return join_common(newStream, key, priorStream, JoinType.INNER);\n    +    }\n    +\n    +    /**\n    +     * Performs left Join.\n    +     *  SQL    :   from stream1  left join stream2  on stream2.key = stream1.key1\n    +     *  same as:   new  WindowedQueryBolt(stream1, key1). leftJoin(stream2, key, stream1);\n    +     *\n    +     *  Note: priorStream must be previously joined\n    +     *    Valid ex:    new WindowedQueryBolt(s1,k1). leftJoin(s2,k2, s1). leftJoin(s3,k3, s2);\n    +     *    Invalid ex:  new WindowedQueryBolt(s1,k1). leftJoin(s3,k3, s2). leftJoin(s2,k2, s1);\n    +     */\n    +    public JoinBolt leftJoin(String newStream, String key, String priorStream) {\n    +        return join_common(newStream, key, priorStream, JoinType.LEFT);\n    +    }\n    +\n    +    private JoinBolt join_common(String newStream, String key, String priorStream, JoinType joinType) {\n    --- End diff --\n    \n    indeed.\n","created":"2017-02-02T21:47:05.221+0000","updated":"2017-02-02T21:47:05.221+0000","started":"2017-02-02T21:47:05.221+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"36636","issueId":"13039301"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13039301/worklog/36638","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user ptgoetz commented on the issue:\n\n    https://github.com/apache/storm/pull/1914\n  \n    @roshannaik Can you add some documentation for this similar to what we have for Windowing?\n","created":"2017-02-02T21:57:22.966+0000","updated":"2017-02-02T21:57:22.966+0000","started":"2017-02-02T21:57:22.966+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"36638","issueId":"13039301"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13039301/worklog/36641","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user roshannaik commented on the issue:\n\n    https://github.com/apache/storm/pull/1914\n  \n    @ptgoetz yes ... I was thinking about that myself... thinking of creating a Join.md under the top level docs directory.\n","created":"2017-02-02T22:28:25.386+0000","updated":"2017-02-02T22:28:25.386+0000","started":"2017-02-02T22:28:25.386+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"36641","issueId":"13039301"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13039301/worklog/36642","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user raghavgautam commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/1914#discussion_r99237976\n  \n    --- Diff: storm-core/src/jvm/org/apache/storm/bolt/JoinBolt.java ---\n    @@ -0,0 +1,428 @@\n    +/**\n    + * Licensed to the Apache Software Foundation (ASF) under one\n    + * or more contributor license agreements.  See the NOTICE file\n    + * distributed with this work for additional information\n    + * regarding copyright ownership.  The ASF licenses this file\n    + * to you under the Apache License, Version 2.0 (the\n    + * \"License\"); you may not use this file except in compliance\n    + * with the License.  You may obtain a copy of the License at\n    + *\n    + * http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +package org.apache.storm.bolt;\n    +\n    +\n    +import org.apache.storm.task.OutputCollector;\n    +import org.apache.storm.task.TopologyContext;\n    +import org.apache.storm.topology.OutputFieldsDeclarer;\n    +import org.apache.storm.topology.base.BaseWindowedBolt;\n    +import org.apache.storm.tuple.Fields;\n    +import org.apache.storm.tuple.Tuple;\n    +import org.apache.storm.windowing.TupleWindow;\n    +\n    +import java.io.Serializable;\n    +import java.util.ArrayList;\n    +import java.util.Collection;\n    +import java.util.HashMap;\n    +import java.util.LinkedHashMap;\n    +import java.util.List;\n    +import java.util.Map;\n    +\n    +\n    +public class JoinBolt extends BaseWindowedBolt {\n    +\n    +    private OutputCollector collector;\n    +\n    +    // Map[StreamName -> Map[Key -> List<Tuple>]  ]\n    +    HashMap<String, HashMap<Object, ArrayList<Tuple> >> hashedInputs = new HashMap<>(); // holds remaining streams\n    +\n    +    // Map[StreamName -> JoinInfo]\n    +    protected LinkedHashMap<String, JoinInfo> joinCriteria = new LinkedHashMap<>();\n    +    protected String[][] outputKeys;  // specified via bolt.select() ... used in declaring Output fields\n    +    protected String[] dotSeparatedOutputKeyNames; // flattened (de nested) keyNames, used for naming output fields\n    +    protected String outputStreamName;\n    +\n    +    // Use streamId, source component name OR field in tuple to distinguish incoming tuple streams\n    +    public enum Selector { STREAM, SOURCE }\n    +    protected final Selector selectorType;\n    +\n    +\n    +    /**\n    +     * StreamId to start the join with. Equivalent SQL ...\n    +     *       select .... from streamId ...\n    +     * @param type Specifies whether 'streamId' refers to stream name/source component\n    +     * @param streamId name of stream/source component\n    +     * @param key the fieldName to use as key for the stream (used for performing joins)\n    +     */\n    +    public JoinBolt(Selector type, String streamId, String key) {\n    +        selectorType = type;\n    +        joinCriteria.put(streamId, new JoinInfo(key) );\n    +    }\n    +\n    +    /**\n    +     * Defines the name of the output stream\n    +     */\n    +    public JoinBolt withOutputStream(String streamName) {\n    +        this.outputStreamName = streamName;\n    +        return this;\n    +    }\n    +\n    +    /**\n    +     * Performs inner Join.\n    +     *  SQL    :   from priorStream inner join newStream on newStream.key = priorStream.key1\n    +     *  same as:   new WindowedQueryBolt(priorStream,key1). join(newStream, key, priorStream);\n    +     *\n    +     *  Note: priorStream must be previously joined.\n    +     *    Valid ex:    new WindowedQueryBolt(s1,k1). join(s2,k2, s1). join(s3,k3, s2);\n    --- End diff --\n    \n    Discussed this offline with @roshannaik , this is necessary when we have left outer join. Consider a join of tables T1, T2, T3. If join of T1 and T2 is left outer join it can lead to intermediate table which looks like:\n    \n    T1.K1| T2.K1\n    -----|-------\n     Y     | NULL \n    Now consider the case, when we have to do inner join with T3.K1 (with value Y) the resulting table might change depending on whether it is join on T1.K1 or T2.K1\n","created":"2017-02-02T22:38:04.417+0000","updated":"2017-02-02T22:38:04.417+0000","started":"2017-02-02T22:38:04.416+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"36642","issueId":"13039301"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13039301/worklog/36749","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user arunmahadevan commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/1914#discussion_r99575982\n  \n    --- Diff: docs/Joins.md ---\n    @@ -0,0 +1,102 @@\n    +---\n    +title: Joining Streams in Storm Core\n    +layout: documentation\n    +documentation: true\n    +---\n    +\n    +Storm core supports joining multiple data streams into one with the help of `JoinBolt`.\n    +`JoinBolt` is a Windowed bolt, i.e. it waits for the configured window duration to match up the\n    +tuples among the streams being joined. This helps align the streams within the Window boundary.\n    +\n    +Each of `JoinBolt`'s incoming data streams must be Fields Grouped on a single field. A stream \n    +should only be joined with the other streams using the field on which it has been FieldsGrouped.  \n    +Knowing this will help understand the join syntax described below.  \n    +\n    +## Performing Joins\n    +Consider the following SQL join involving 4 tables called: stream1, stream2, stream3 & stream4:\n    +\n    +```sql\n    +select  userId, key4, key2, key3\n    +from    stream1 \n    +join       stream2  on stream2.userId =  stream1.key1\n    +join       stream3  on stream3.key3   =  stream2.userId\n    +left join  stream4  on stream4.key4   =  stream3.key3\n    +```\n    +\n    +This could be expressed using `JoinBolt` over 4 similarly named streams as: \n    +\n    +```java\n    +new JoinBolt(JoinBolt.Selector.STREAM, \"stream1\", \"key1\")               // from stream1  \n    +                            .join     (\"stream2\", \"userId\",  \"stream1\") // join      stream2  on stream2.userId = stream1.key1\n    --- End diff --\n    \n    How to Join on a combination of fields (e.g. `s1.f1 == s2.f1 && s1.f2 == s2.f2`) ? Similarly on partial values of fields.\n    \n    The above could be done if users are writing custom bolts for join, see \"Join\" section - https://github.com/apache/storm/blob/master/docs/Common-patterns.md, so a good idea to support it.\n     \n","created":"2017-02-06T12:36:38.105+0000","updated":"2017-02-06T12:36:38.105+0000","started":"2017-02-06T12:36:38.092+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"36749","issueId":"13039301"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13039301/worklog/36750","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user arunmahadevan commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/1914#discussion_r99572676\n  \n    --- Diff: docs/Joins.md ---\n    @@ -0,0 +1,102 @@\n    +---\n    +title: Joining Streams in Storm Core\n    +layout: documentation\n    +documentation: true\n    +---\n    +\n    +Storm core supports joining multiple data streams into one with the help of `JoinBolt`.\n    +`JoinBolt` is a Windowed bolt, i.e. it waits for the configured window duration to match up the\n    +tuples among the streams being joined. This helps align the streams within the Window boundary.\n    +\n    +Each of `JoinBolt`'s incoming data streams must be Fields Grouped on a single field. A stream \n    +should only be joined with the other streams using the field on which it has been FieldsGrouped.  \n    +Knowing this will help understand the join syntax described below.  \n    +\n    +## Performing Joins\n    +Consider the following SQL join involving 4 tables called: stream1, stream2, stream3 & stream4:\n    +\n    +```sql\n    +select  userId, key4, key2, key3\n    +from    stream1 \n    +join       stream2  on stream2.userId =  stream1.key1\n    +join       stream3  on stream3.key3   =  stream2.userId\n    +left join  stream4  on stream4.key4   =  stream3.key3\n    +```\n    +\n    +This could be expressed using `JoinBolt` over 4 similarly named streams as: \n    +\n    +```java\n    +new JoinBolt(JoinBolt.Selector.STREAM, \"stream1\", \"key1\")               // from stream1  \n    --- End diff --\n    \n    How do you ensure \"stream1\" exists ? i.e. some spout or bolt should have declared \"stream1\" and JoinBolt should subscribe to that spout/bolt's output via fields grouping on the join key. Assume it would throw RuntimeException at topology construction time.\n","created":"2017-02-06T12:36:38.105+0000","updated":"2017-02-06T12:36:38.105+0000","started":"2017-02-06T12:36:38.094+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"36750","issueId":"13039301"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13039301/worklog/36751","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user arunmahadevan commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/1914#discussion_r99571544\n  \n    --- Diff: docs/Joins.md ---\n    @@ -0,0 +1,102 @@\n    +---\n    +title: Joining Streams in Storm Core\n    +layout: documentation\n    +documentation: true\n    +---\n    +\n    +Storm core supports joining multiple data streams into one with the help of `JoinBolt`.\n    +`JoinBolt` is a Windowed bolt, i.e. it waits for the configured window duration to match up the\n    +tuples among the streams being joined. This helps align the streams within the Window boundary.\n    +\n    +Each of `JoinBolt`'s incoming data streams must be Fields Grouped on a single field. A stream \n    --- End diff --\n    \n    How is it enforced ? \n    RuntimeException at topology construction time ?\n    Best if the field groupings on the join keys are automatically handled by the api than relying on user to define it correctly.\n","created":"2017-02-06T12:36:38.105+0000","updated":"2017-02-06T12:36:38.105+0000","started":"2017-02-06T12:36:38.092+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"36751","issueId":"13039301"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13039301/worklog/36752","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user arunmahadevan commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/1914#discussion_r99571904\n  \n    --- Diff: docs/Joins.md ---\n    @@ -0,0 +1,102 @@\n    +---\n    +title: Joining Streams in Storm Core\n    +layout: documentation\n    +documentation: true\n    +---\n    +\n    +Storm core supports joining multiple data streams into one with the help of `JoinBolt`.\n    +`JoinBolt` is a Windowed bolt, i.e. it waits for the configured window duration to match up the\n    +tuples among the streams being joined. This helps align the streams within the Window boundary.\n    +\n    +Each of `JoinBolt`'s incoming data streams must be Fields Grouped on a single field. A stream \n    +should only be joined with the other streams using the field on which it has been FieldsGrouped.  \n    +Knowing this will help understand the join syntax described below.  \n    +\n    +## Performing Joins\n    +Consider the following SQL join involving 4 tables called: stream1, stream2, stream3 & stream4:\n    +\n    +```sql\n    +select  userId, key4, key2, key3\n    +from    stream1 \n    +join       stream2  on stream2.userId =  stream1.key1\n    +join       stream3  on stream3.key3   =  stream2.userId\n    +left join  stream4  on stream4.key4   =  stream3.key3\n    +```\n    +\n    +This could be expressed using `JoinBolt` over 4 similarly named streams as: \n    +\n    +```java\n    +new JoinBolt(JoinBolt.Selector.STREAM, \"stream1\", \"key1\")               // from stream1  \n    +                            .join     (\"stream2\", \"userId\",  \"stream1\") // join      stream2  on stream2.userId = stream1.key1\n    +                            .join     (\"stream3\", \"key3\",    \"stream2\") // join      stream3  on stream3.key3   = stream2.userId   \n    +                            .leftjoin (\"stream4\", \"key4\",    \"stream3\") // left join stream4  on stream4.key4   = stream3.key3\n    +                            .select(\"userId, key4, key2, key3\")         // chose output fields\n    --- End diff --\n    \n    1. why is it not a `List<String>`\n    2. How does one select keys having the same name from different streams (e.g. stream2.key1, stream3.key1) ?\n","created":"2017-02-06T12:36:38.108+0000","updated":"2017-02-06T12:36:38.108+0000","started":"2017-02-06T12:36:38.108+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"36752","issueId":"13039301"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13039301/worklog/36840","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user roshannaik commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/1914#discussion_r99711705\n  \n    --- Diff: docs/Joins.md ---\n    @@ -0,0 +1,102 @@\n    +---\n    +title: Joining Streams in Storm Core\n    +layout: documentation\n    +documentation: true\n    +---\n    +\n    +Storm core supports joining multiple data streams into one with the help of `JoinBolt`.\n    +`JoinBolt` is a Windowed bolt, i.e. it waits for the configured window duration to match up the\n    +tuples among the streams being joined. This helps align the streams within the Window boundary.\n    +\n    +Each of `JoinBolt`'s incoming data streams must be Fields Grouped on a single field. A stream \n    +should only be joined with the other streams using the field on which it has been FieldsGrouped.  \n    +Knowing this will help understand the join syntax described below.  \n    +\n    +## Performing Joins\n    +Consider the following SQL join involving 4 tables called: stream1, stream2, stream3 & stream4:\n    +\n    +```sql\n    +select  userId, key4, key2, key3\n    +from    stream1 \n    +join       stream2  on stream2.userId =  stream1.key1\n    +join       stream3  on stream3.key3   =  stream2.userId\n    +left join  stream4  on stream4.key4   =  stream3.key3\n    +```\n    +\n    +This could be expressed using `JoinBolt` over 4 similarly named streams as: \n    +\n    +```java\n    +new JoinBolt(JoinBolt.Selector.STREAM, \"stream1\", \"key1\")               // from stream1  \n    --- End diff --\n    \n    Absence of the definition of a specific stream upstream is equivalent to not receiving any data from that stream from the Bolt. Conversely, if a upstream component sends it data on a stream that the bolt is not aware of, it will ignore that stream. Bolt doesn't examine the entire topology definition scanning for incorrect wiring.\n","created":"2017-02-06T23:27:38.117+0000","updated":"2017-02-06T23:27:38.117+0000","started":"2017-02-06T23:27:38.115+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"36840","issueId":"13039301"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13039301/worklog/36841","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user roshannaik commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/1914#discussion_r99712278\n  \n    --- Diff: docs/Joins.md ---\n    @@ -0,0 +1,102 @@\n    +---\n    +title: Joining Streams in Storm Core\n    +layout: documentation\n    +documentation: true\n    +---\n    +\n    +Storm core supports joining multiple data streams into one with the help of `JoinBolt`.\n    +`JoinBolt` is a Windowed bolt, i.e. it waits for the configured window duration to match up the\n    +tuples among the streams being joined. This helps align the streams within the Window boundary.\n    +\n    +Each of `JoinBolt`'s incoming data streams must be Fields Grouped on a single field. A stream \n    --- End diff --\n    \n    answered in next comment...\n","created":"2017-02-06T23:31:42.556+0000","updated":"2017-02-06T23:31:42.556+0000","started":"2017-02-06T23:31:42.555+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"36841","issueId":"13039301"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13039301/worklog/36842","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user roshannaik commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/1914#discussion_r99713201\n  \n    --- Diff: docs/Joins.md ---\n    @@ -0,0 +1,102 @@\n    +---\n    +title: Joining Streams in Storm Core\n    +layout: documentation\n    +documentation: true\n    +---\n    +\n    +Storm core supports joining multiple data streams into one with the help of `JoinBolt`.\n    +`JoinBolt` is a Windowed bolt, i.e. it waits for the configured window duration to match up the\n    +tuples among the streams being joined. This helps align the streams within the Window boundary.\n    +\n    +Each of `JoinBolt`'s incoming data streams must be Fields Grouped on a single field. A stream \n    +should only be joined with the other streams using the field on which it has been FieldsGrouped.  \n    +Knowing this will help understand the join syntax described below.  \n    +\n    +## Performing Joins\n    +Consider the following SQL join involving 4 tables called: stream1, stream2, stream3 & stream4:\n    +\n    +```sql\n    +select  userId, key4, key2, key3\n    +from    stream1 \n    +join       stream2  on stream2.userId =  stream1.key1\n    +join       stream3  on stream3.key3   =  stream2.userId\n    +left join  stream4  on stream4.key4   =  stream3.key3\n    +```\n    +\n    +This could be expressed using `JoinBolt` over 4 similarly named streams as: \n    +\n    +```java\n    +new JoinBolt(JoinBolt.Selector.STREAM, \"stream1\", \"key1\")               // from stream1  \n    +                            .join     (\"stream2\", \"userId\",  \"stream1\") // join      stream2  on stream2.userId = stream1.key1\n    +                            .join     (\"stream3\", \"key3\",    \"stream2\") // join      stream3  on stream3.key3   = stream2.userId   \n    +                            .leftjoin (\"stream4\", \"key4\",    \"stream3\") // left join stream4  on stream4.key4   = stream3.key3\n    +                            .select(\"userId, key4, key2, key3\")         // chose output fields\n    --- End diff --\n    \n    1. Conversion it to list is done internally.  Chose CSV string instead of list to make it easier for end users (less typing) ... without loss of functionality. \n    \n    2. I think .. as of now its not supported.. let me take a look and add it if not there already.\n","created":"2017-02-06T23:38:02.115+0000","updated":"2017-02-06T23:38:02.115+0000","started":"2017-02-06T23:38:02.114+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"36842","issueId":"13039301"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13039301/worklog/36843","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user roshannaik commented on the issue:\n\n    https://github.com/apache/storm/pull/1914\n  \n    @arunmahadevan  yes..  good idea... i will add an example into storm-starter.\n","created":"2017-02-06T23:39:31.625+0000","updated":"2017-02-06T23:39:31.625+0000","started":"2017-02-06T23:39:31.625+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"36843","issueId":"13039301"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13039301/worklog/36846","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user roshannaik commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/1914#discussion_r99724571\n  \n    --- Diff: docs/Joins.md ---\n    @@ -0,0 +1,102 @@\n    +---\n    +title: Joining Streams in Storm Core\n    +layout: documentation\n    +documentation: true\n    +---\n    +\n    +Storm core supports joining multiple data streams into one with the help of `JoinBolt`.\n    +`JoinBolt` is a Windowed bolt, i.e. it waits for the configured window duration to match up the\n    +tuples among the streams being joined. This helps align the streams within the Window boundary.\n    +\n    +Each of `JoinBolt`'s incoming data streams must be Fields Grouped on a single field. A stream \n    +should only be joined with the other streams using the field on which it has been FieldsGrouped.  \n    +Knowing this will help understand the join syntax described below.  \n    +\n    +## Performing Joins\n    +Consider the following SQL join involving 4 tables called: stream1, stream2, stream3 & stream4:\n    +\n    +```sql\n    +select  userId, key4, key2, key3\n    +from    stream1 \n    +join       stream2  on stream2.userId =  stream1.key1\n    +join       stream3  on stream3.key3   =  stream2.userId\n    +left join  stream4  on stream4.key4   =  stream3.key3\n    +```\n    +\n    +This could be expressed using `JoinBolt` over 4 similarly named streams as: \n    +\n    +```java\n    +new JoinBolt(JoinBolt.Selector.STREAM, \"stream1\", \"key1\")               // from stream1  \n    +                            .join     (\"stream2\", \"userId\",  \"stream1\") // join      stream2  on stream2.userId = stream1.key1\n    --- End diff --\n    \n    Yes good question. As of now, grouping on single key and consequently joining on 1 key only is supported ...  noted in the doc, \n    \n    To get the effect of joining on multiple fields you need to combine two/more fields into one, somewhere upstream. Then you can join on that merged field. Perhaps worth mentioning this in docs.\n    \n    To be more inline with SQL abilities, I started supporting streams grouped on multiple fields for joins initially, but later scaled it back to single key. Saw a few issues with opening up grouping and joins on multiple fields. Let me try to summarize...\n    \n    It easily gives users the wrong impression that they can do many SQL-type things .. like\n    \n    Assuming S1 is grouped on both f1 & f2:\n    ```\n    from s1\n    join s2   s2.f1 == s1.f1 && s2.f2 == s1.f2     // uses both f1 & f2 form s1\n    join s3   s3.f1 == s1.f1 && s3.f2 == s2.f2     // one field from s1 and another from s2\n    ```\n    which cannot work correctly due to FG.\n    \n    Another example is  grouping S1 on f1 and f2 and then trying to do this...\n    ```\n    from s1\n    join s2   s2.f1 == s1.f1    // use s1.f1 \n    join s3   s3.f1 == s1.f2   // but s1.f2 here\n    ```\n    \n    **In short:** The extent to which multi field joins can be correctly supported is limited to whatever can be achieved by merging those fields into one before joining. Going beyond it complicated the interface and the internal checking... in addition to easily setting up wrong user expectations.\n    \n    The downside of current approach is an additional step to merge the fields in such cases. Thats the trade off I settled for.\n","created":"2017-02-07T01:08:19.558+0000","updated":"2017-02-07T01:08:19.558+0000","started":"2017-02-07T01:08:19.556+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"36846","issueId":"13039301"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13039301/worklog/36852","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user arunmahadevan commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/1914#discussion_r99744089\n  \n    --- Diff: docs/Joins.md ---\n    @@ -0,0 +1,102 @@\n    +---\n    +title: Joining Streams in Storm Core\n    +layout: documentation\n    +documentation: true\n    +---\n    +\n    +Storm core supports joining multiple data streams into one with the help of `JoinBolt`.\n    +`JoinBolt` is a Windowed bolt, i.e. it waits for the configured window duration to match up the\n    +tuples among the streams being joined. This helps align the streams within the Window boundary.\n    +\n    +Each of `JoinBolt`'s incoming data streams must be Fields Grouped on a single field. A stream \n    --- End diff --\n    \n    based on the next comment, checks are not  done and applying the right grouping is up to the user. \n    IMO, adding as many validations as possible and automatically handling the groupings would make it less error prone. But this may require changes in the topology builder, so for now may be just add some relevant code that shows the fields grouping (`builder.setBolt(joinBolt).fieldsGrouping(..)`) in the docs.\n","created":"2017-02-07T04:30:37.139+0000","updated":"2017-02-07T04:30:37.139+0000","started":"2017-02-07T04:30:37.137+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"36852","issueId":"13039301"}]},"customfield_12311820":"0|i39fr3:"}}