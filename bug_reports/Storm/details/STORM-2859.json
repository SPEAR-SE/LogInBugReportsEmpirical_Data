{"expand":"renderedFields,names,schema,operations,editmeta,changelog,versionedRepresentations","id":"13125350","self":"https://issues.apache.org/jira/rest/api/2/issue/13125350","key":"STORM-2859","fields":{"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype","name":"Bug","subtask":false,"avatarId":21133},"timespent":12000,"project":{"self":"https://issues.apache.org/jira/rest/api/2/project/12314820","id":"12314820","key":"STORM","name":"Apache Storm","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/projectavatar?pid=12314820&avatarId=21667","24x24":"https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12314820&avatarId=21667","16x16":"https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12314820&avatarId=21667","32x32":"https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12314820&avatarId=21667"},"projectCategory":{"self":"https://issues.apache.org/jira/rest/api/2/projectCategory/13260","id":"13260","description":"Apache Storm Related","name":"Storm"}},"fixVersions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12334657","id":"12334657","name":"2.0.0","archived":false,"released":false}],"aggregatetimespent":12000,"resolution":{"self":"https://issues.apache.org/jira/rest/api/2/resolution/1","id":"1","description":"A fix for this issue is checked into the tree and tested.","name":"Fixed"},"customfield_12312322":null,"customfield_12310220":"2018-01-08T21:21:37.199+0000","customfield_12312520":null,"customfield_12312323":null,"customfield_12312521":"Mon Jan 08 21:21:37 UTC 2018","customfield_12312320":null,"customfield_12310222":"1_*:*_1_*:*_153592_*|*_3_*:*_1_*:*_2069263249_*|*_5_*:*_1_*:*_0","customfield_12310420":"9223372036854775807","customfield_12312321":null,"resolutiondate":"2018-01-08T21:21:37.155+0000","workratio":-1,"customfield_12312328":null,"customfield_12312329":null,"customfield_12312923":null,"customfield_12312326":null,"customfield_12312920":null,"customfield_12310300":null,"customfield_12312327":null,"customfield_12312921":null,"customfield_12312324":null,"customfield_12312720":null,"customfield_12312325":null,"lastViewed":null,"watches":{"self":"https://issues.apache.org/jira/rest/api/2/issue/STORM-2859/watchers","watchCount":2,"isWatching":false},"created":"2017-12-15T22:31:20.381+0000","priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.svg","name":"Major","id":"3"},"labels":["pull-request-available"],"customfield_12312333":null,"customfield_12312334":null,"customfield_12313422":"false","customfield_12310310":"0.0","customfield_12312331":null,"customfield_12312332":null,"timeestimate":0,"aggregatetimeoriginalestimate":null,"customfield_12311120":null,"customfield_12312330":null,"versions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12334657","id":"12334657","name":"2.0.0","archived":false,"released":false}],"customfield_12312339":null,"issuelinks":[],"assignee":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=Srdo","name":"Srdo","key":"srdo","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Stig Rohde Døssing","active":true,"timeZone":"Europe/Copenhagen"},"customfield_12312337":null,"customfield_12312338":null,"updated":"2018-01-08T21:21:47.141+0000","customfield_12312335":null,"customfield_12312336":null,"status":{"self":"https://issues.apache.org/jira/rest/api/2/status/5","description":"A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/resolved.png","name":"Resolved","id":"5","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Done"}},"components":[{"self":"https://issues.apache.org/jira/rest/api/2/component/12332924","id":"12332924","name":"storm-server"}],"timeoriginalestimate":null,"description":null,"customfield_10010":null,"timetracking":{"remainingEstimate":"0h","timeSpent":"3h 20m","remainingEstimateSeconds":0,"timeSpentSeconds":12000},"customfield_12312026":null,"customfield_12312023":null,"customfield_12312024":null,"attachment":[],"customfield_12312340":null,"aggregatetimeestimate":0,"customfield_12312341":null,"customfield_12312220":null,"customfield_12312022":null,"customfield_12310921":null,"customfield_12310920":"9223372036854775807","customfield_12312823":null,"summary":"NormalizedResources has some bugs in special cases where 0 of a resource is available.","creator":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=Srdo","name":"Srdo","key":"srdo","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Stig Rohde Døssing","active":true,"timeZone":"Europe/Copenhagen"},"subtasks":[],"reporter":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=Srdo","name":"Srdo","key":"srdo","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Stig Rohde Døssing","active":true,"timeZone":"Europe/Copenhagen"},"customfield_12310291":null,"customfield_12310290":null,"aggregateprogress":{"progress":12000,"total":12000,"percent":100},"environment":null,"customfield_12313520":null,"customfield_12311020":null,"duedate":null,"customfield_12310250":null,"progress":{"progress":12000,"total":12000,"percent":100},"comment":{"comments":[{"self":"https://issues.apache.org/jira/rest/api/2/issue/13125350/comment/16317096","id":"16317096","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=revans2","name":"revans2","key":"revans2","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Robert Joseph Evans","active":true,"timeZone":"America/Chicago"},"body":"Thanks [~Srdo],\r\n\r\nI merged this into master.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=revans2","name":"revans2","key":"revans2","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Robert Joseph Evans","active":true,"timeZone":"America/Chicago"},"created":"2018-01-08T21:21:37.199+0000","updated":"2018-01-08T21:21:37.199+0000"}],"maxResults":1,"total":1,"startAt":0},"votes":{"self":"https://issues.apache.org/jira/rest/api/2/issue/STORM-2859/votes","votes":0,"hasVoted":false},"worklog":{"startAt":0,"maxResults":20,"total":20,"worklogs":[{"self":"https://issues.apache.org/jira/rest/api/2/issue/13125350/worklog/61580","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"GitHub user srdo opened a pull request:\n\n    https://github.com/apache/storm/pull/2463\n\n    STORM-2859: Fix a number of issues with NormalizedResources, and prev…\n\n    …ent it from leaking static state in tests.\r\n    \r\n    This is part of making the build run on the new Travis Ubuntu image. Travis is probably running the tests in a slightly different order than before.\r\n    \r\n    NormalizedResources had a static field used to track the generic resource types registered for supervisors. It was leaking from the GenericResourceAwareSchedulerTest to DefaultResourceAwareSchedulerTest, where it was causing a test failure. When the unused resource type showed up in the test, NormalizedResources would return 0.0 from calculateMinPercentageUsedBy for all racks because there was a resource type where the cluster had 0 of that resource in total. This breaks rack sorting and causes the test to fail.\r\n    \r\n    I'm not entirely sure why NormalizedResources used the static field + double arrays for tracking resources, but I've replaced it with regular resourceName -> resourceValue maps. Let me know if this is a problem.\r\n    \r\n    Other issues fixed:\r\n    * calculateMinPercentageUsedBy threw division by 0 error if total cpu or memory was 0.\r\n    * Removed static map between resource names and array indices. It was causing tests to leak information to each other. Rewrote parts of NormalizedResources to make this map unnecessary.\r\n    * Added check that all resources in a rack/node are also present in the total.\r\n    * calculateAvg was being inconsistent about the divisor in the average between cpu/memory and other resources. Fixed so skipped resources are never counted in the divisor. \r\n    * calculateMin didn't handle resource totals being 0 very well. The method defined (anyNumber)/0 to result in 0, so if any resource in the total had a 0 value, all racks/nodes would be prioritized equally. Change calculateMin and calculateAvg to simply skip any resources where the total is 0 in the calculation. I think it makes sense to disregard such resources and fall back on prioritizing by any remaining non-0 resources. It was already done for CPU and memory in calculateAvg. In case there are no non-0 resources, we can just return 100% for both average and minimum to disable prioritization, since any rack/node is as good as any other.\r\n    * Fixed up NormalizedResources constructor so it doesn't call an overridable method.\n\nYou can merge this pull request into a Git repository by running:\n\n    $ git pull https://github.com/srdo/storm STORM-2859\n\nAlternatively you can review and apply these changes as the patch at:\n\n    https://github.com/apache/storm/pull/2463.patch\n\nTo close this pull request, make a commit to your master/trunk branch\nwith (at least) the following in the commit message:\n\n    This closes #2463\n    \n----\ncommit b654a4f065a496a273601e05888e79b35a991653\nAuthor: Stig Rohde Døssing <srdo@apache.org>\nDate:   2017-12-13T15:47:31Z\n\n    STORM-2859: Fix a number of issues with NormalizedResources, and prevent it from leaking static state in tests.\n\n----\n","created":"2017-12-15T23:20:52.067+0000","updated":"2017-12-15T23:20:52.067+0000","started":"2017-12-15T23:20:52.046+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"61580","issueId":"13125350"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13125350/worklog/61583","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user srdo commented on the issue:\n\n    https://github.com/apache/storm/pull/2463\n  \n    There's also a TODO I'd like some input on https://github.com/apache/storm/pull/2463/files#diff-0f94945ef866045b8717f781620fd59dR190\n","created":"2017-12-15T23:21:33.876+0000","updated":"2017-12-15T23:21:33.876+0000","started":"2017-12-15T23:21:33.851+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"61583","issueId":"13125350"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13125350/worklog/61585","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user srdo commented on the issue:\n\n    https://github.com/apache/storm/pull/2463\n  \n    Here's the run from a branch that contains this branch, STORM-2858 and some minor travis.yml changes. https://travis-ci.org/srdo/storm/builds/317153261\n","created":"2017-12-15T23:31:30.607+0000","updated":"2017-12-15T23:31:30.607+0000","started":"2017-12-15T23:31:30.607+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"61585","issueId":"13125350"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13125350/worklog/62855","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user revans2 commented on the issue:\n\n    https://github.com/apache/storm/pull/2463\n  \n    @srdo One of the issues I was trying to address with using the array was both performance and memory usage.  Maps are very slow and use lots of memory compared to an array.  Hadoop did a very similar thing as part of their generic resource work for similar reasons.  They tend to do a lot more computation on their resources looking at fairness etc.\r\n    \r\n    We are fining that the performance of the scheduler loop in general is our biggest bottleneck to scaling our clusters larger.  It directly correlates to how responsive a cluster is to user requests.  So for cases where they want to kill a topology and launch a new one, if they cannot do it quickly because of scheduling they are not very happy.\n","created":"2017-12-21T17:28:45.982+0000","updated":"2017-12-21T17:28:45.982+0000","started":"2017-12-21T17:28:45.981+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"62855","issueId":"13125350"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13125350/worklog/62861","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user srdo commented on the issue:\n\n    https://github.com/apache/storm/pull/2463\n  \n    @revans2 That makes sense. How about we fix the issue by doing as you suggest in https://github.com/apache/storm/pull/2477, and I'll try to pick out the changes from this I think would still be relevant for a later PR? \n","created":"2017-12-21T17:40:40.565+0000","updated":"2017-12-21T17:40:40.565+0000","started":"2017-12-21T17:40:40.565+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"62861","issueId":"13125350"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13125350/worklog/62875","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user revans2 commented on the issue:\n\n    https://github.com/apache/storm/pull/2463\n  \n    @srdo that sounds fine to me.\n","created":"2017-12-21T18:12:09.067+0000","updated":"2017-12-21T18:12:09.067+0000","started":"2017-12-21T18:12:09.066+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"62875","issueId":"13125350"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13125350/worklog/62881","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user srdo commented on the issue:\n\n    https://github.com/apache/storm/pull/2463\n  \n    Closing in favor of https://github.com/apache/storm/pull/2477, will figure out which parts of this are still relevant and reopen at some point.\n","created":"2017-12-21T18:47:00.986+0000","updated":"2017-12-21T18:47:00.986+0000","started":"2017-12-21T18:47:00.978+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"62881","issueId":"13125350"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13125350/worklog/62882","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user srdo closed the pull request at:\n\n    https://github.com/apache/storm/pull/2463\n","created":"2017-12-21T18:47:01.781+0000","updated":"2017-12-21T18:47:01.781+0000","started":"2017-12-21T18:47:01.780+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"62882","issueId":"13125350"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13125350/worklog/63945","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"GitHub user srdo opened a pull request:\n\n    https://github.com/apache/storm/pull/2485\n\n    STORM-2859: Fix a number of issues with NormalizedResources when reso…\n\n    …urce totals are zero\r\n    \r\n    Issues fixed:\r\n    * calculateMinPercentageUsedBy threw division by 0 error if total cpu or memory was 0.\r\n    * remove was quietly skipping any resources that was present in only one resource list. I think we should make sure to cover all resources in the input list, so add/remove behave like normal vector addition. \r\n    * Added check that all resources in a rack/node are also present in the total when doing calculateAvg and calculateMin.\r\n    * calculateAvg was being inconsistent about the divisor in the average between cpu/memory and other resources. Fixed so resources that are not accounted for in the total are also not counted in the divisor. \r\n    * calculateMin didn't handle resource totals being 0 very well. The method defined `a/0 = 0`, so if any resource in the total had a 0 value, the method would return 0 and all racks/nodes would end up being prioritized equally. Changed calculateMin and calculateAvg to skip any resources where the total of that resource is 0. I think it makes sense to disregard such resources and fall back on prioritizing by any remaining non-0 resources. calculateAvg actually already did this for cpu and memory. In case there are no non-0 resources in the total, we can just return 100% for both average and minimum to disable prioritization, since any rack/node is as good as any other.\r\n    * Fixed up NormalizedResources constructor so it doesn't call an overridable method.\n\nYou can merge this pull request into a Git repository by running:\n\n    $ git pull https://github.com/srdo/storm STORM-2859\n\nAlternatively you can review and apply these changes as the patch at:\n\n    https://github.com/apache/storm/pull/2485.patch\n\nTo close this pull request, make a commit to your master/trunk branch\nwith (at least) the following in the commit message:\n\n    This closes #2485\n    \n----\ncommit 8f2a66d23e382d22fdc6a4ee32a53b442f2e153a\nAuthor: Stig Rohde Døssing <srdo@...>\nDate:   2017-12-13T15:47:31Z\n\n    STORM-2859: Fix a number of issues with NormalizedResources when resource totals are zero\n\n----\n","created":"2017-12-28T14:57:54.888+0000","updated":"2017-12-28T14:57:54.888+0000","started":"2017-12-28T14:57:54.887+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"63945","issueId":"13125350"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13125350/worklog/64777","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user revans2 commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/2485#discussion_r159734646\n  \n    --- Diff: storm-server/src/main/java/org/apache/storm/scheduler/resource/NormalizedResources.java ---\n    @@ -184,30 +191,25 @@ public void remove(NormalizedResources other) {\n             int otherLength = other.otherResources.length;\n             int length = otherResources.length;\n             if (otherLength > length) {\n    -            double [] newResources = new double[otherLength];\n    +            double[] newResources = new double[otherLength];\n                 System.arraycopy(newResources, 0, otherResources, 0, length);\n                 otherResources = newResources;\n             }\n    -        for (int i = 0; i < Math.min(length, otherLength); i++) {\n    +        for (int i = 0; i < otherLength; i++) {\n    --- End diff --\n    \n    I think that other may have a longer array, and if that happens then we will get an ArrayIndexOutOfBoundsException.\r\n    \r\n    ```\r\n    NormalizedResources A = new NormalizedResources({\"cpu\": 1});\r\n    NormalizedResources B = new NormalizedResources({\"cpu\":1, \"foo\": 100});\r\n    \r\n    A.remove(B);\r\n    ```\n","created":"2018-01-04T19:42:38.616+0000","updated":"2018-01-04T19:42:38.616+0000","started":"2018-01-04T19:42:38.616+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"64777","issueId":"13125350"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13125350/worklog/64778","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user revans2 commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/2485#discussion_r159736224\n  \n    --- Diff: storm-server/src/main/java/org/apache/storm/scheduler/resource/NormalizedResources.java ---\n    @@ -246,59 +259,133 @@ public boolean couldHoldIgnoringSharedMemory(NormalizedResources other) {\n             return true;\n         }\n     \n    +    private void throwBecauseResourceIsMissingFromTotal(int resourceIndex) {\n    +        String resourceName = null;\n    +        for (Map.Entry<String, Integer> entry : resourceNames.entrySet()) {\n    +            int index = entry.getValue();\n    +            if (index == resourceIndex) {\n    +                resourceName = entry.getKey();\n    +                break;\n    +            }\n    +        }\n    +        if (resourceName == null) {\n    +            throw new IllegalStateException(\"Array index \" + resourceIndex + \" is not mapped in the resource names map.\"\n    +                + \" This should not be possible, and is likely a bug in the Storm code.\");\n    +        }\n    +        throw new IllegalArgumentException(\"Total resources does not contain resource '\"\n    +            + resourceName\n    +            + \"'. All resources should be represented in the total. This is likely a bug in the Storm code\");\n    +    }\n    +\n         /**\n    -     * Calculate the average resource usage percentage with this being the total resources and\n    -     * used being the amounts used.\n    +     * Calculate the average resource usage percentage with this being the total resources and used being the amounts used.\n    +     *\n          * @param used the amount of resources used.\n    -     * @return the average percentage used 0.0 to 100.0.\n    +     * @return the average percentage used 0.0 to 100.0. Clamps to 100.0 in case there are no available resources in the total\n          */\n         public double calculateAveragePercentageUsedBy(NormalizedResources used) {\n    +        int skippedResourceTypes = 0;\n             double total = 0.0;\n             double totalMemory = getTotalMemoryMb();\n             if (totalMemory != 0.0) {\n                 total += used.getTotalMemoryMb() / totalMemory;\n    +        } else {\n    +            skippedResourceTypes++;\n             }\n             double totalCpu = getTotalCpu();\n             if (totalCpu != 0.0) {\n                 total += used.getTotalCpu() / getTotalCpu();\n    +        } else {\n    +            skippedResourceTypes++;\n             }\n    -        //If total is 0 we add in a 0% used, so we can just skip over anything that is not in both.\n    -        int length = Math.min(used.otherResources.length, otherResources.length);\n    -        for (int i = 0; i < length; i++) {\n    -            if (otherResources[i] != 0.0) {\n    -                total += used.otherResources[i] / otherResources[i];\n    +        if (LOG.isTraceEnabled()) {\n    +            LOG.trace(\"Calculating avg percentage used by. Used CPU: {} Total CPU: {} Used Mem: {} Total Mem: {}\"\n    +                + \" Other Used: {} Other Total: {}\", totalCpu, used.getTotalCpu(), totalMemory, used.getTotalMemoryMb(),\n    +                this.toNormalizedOtherResources(), used.toNormalizedOtherResources());\n    +        }\n    +\n    +        if (used.otherResources.length > otherResources.length) {\n    +            throwBecauseResourceIsMissingFromTotal(used.otherResources.length);\n    +        }\n    +\n    +        for (int i = 0; i < otherResources.length; i++) {\n    +            double totalValue = otherResources[i];\n    +            if (totalValue == 0.0) {\n    +                //Skip any resources where the total is 0, the percent used for this resource isn't meaningful.\n    +                //We fall back to prioritizing by cpu, memory and any other resources by ignoring this value\n    +                skippedResourceTypes++;\n    +                continue;\n                 }\n    +            double usedValue;\n    +            if (i >= used.otherResources.length) {\n    +                //Resources missing from used are using none of that resource\n    +                usedValue = 0.0;\n    +            } else {\n    +                usedValue = used.otherResources[i];\n    +            }\n    +            total += usedValue / totalValue;\n    +        }\n    +        //Adjust the divisor for the average to account for any skipped resources (those where the total was 0)\n    +        int divisor = 2 + otherResources.length - skippedResourceTypes;\n    +        if (divisor == 0) {\n    +            /*This is an arbitrary choice to make the result consistent with calculateMin.\n    +             Any value would be valid here, becase there are no (non-zero) resources in the total set of resources,\n    +             so we're trying to average 0 values.\n    +             */\n    +            return 100.0;\n    +        } else {\n    +            return (total * 100.0) / divisor;\n             }\n    -        //To get the count we divide by we need to take the maximum length because we are doing an average.\n    -        return (total * 100.0) / (2 + Math.max(otherResources.length, used.otherResources.length));\n         }\n     \n         /**\n    -     * Calculate the minimum resource usage percentage with this being the total resources and\n    -     * used being the amounts used.\n    +     * Calculate the minimum resource usage percentage with this being the total resources and used being the amounts used.\n    +     *\n          * @param used the amount of resources used.\n    -     * @return the minimum percentage used 0.0 to 100.0.\n    +     * @return the minimum percentage used 0.0 to 100.0. Clamps to 100.0 in case there are no available resources in the total.\n          */\n         public double calculateMinPercentageUsedBy(NormalizedResources used) {\n             double totalMemory = getTotalMemoryMb();\n             double totalCpu = getTotalCpu();\n    +\n    +        if (LOG.isTraceEnabled()) {\n    +            LOG.trace(\"Calculating min percentage used by. Used CPU: {} Total CPU: {} Used Mem: {} Total Mem: {}\"\n    +                + \" Other Used: {} Other Total: {}\", totalCpu, used.getTotalCpu(), totalMemory, used.getTotalMemoryMb(),\n    +                toNormalizedOtherResources(), used.toNormalizedOtherResources());\n    +        }\n    +\n    +        if (used.otherResources.length > otherResources.length) {\n    +            throwBecauseResourceIsMissingFromTotal(used.otherResources.length);\n    +        }\n    +\n             if (used.otherResources.length != otherResources.length\n                 || totalMemory == 0.0\n                 || totalCpu == 0.0) {\n                 //If the lengths don't match one of the resources will be 0, which means we would calculate the percentage to be 0.0\n                 // and so the min would be 0.0 (assuming that we can never go negative on a resource being used.\n                 return 0.0;\n             }\n    -        double min = used.getTotalMemoryMb() / totalMemory;\n    -        min = Math.min(min, used.getTotalCpu() / getTotalCpu());\n    +\n    +        double min = 100.0;\n    +        if (totalMemory != 0.0) {\n    +            min = Math.min(min, used.getTotalMemoryMb() / totalMemory);\n    +        }\n    +        if (totalCpu != 0.0) {\n    --- End diff --\n    \n    Again the math looks OK, but could you explain that 0 % used is ignored in the javadocs, because it is not obvious to me that it what will happen.\n","created":"2018-01-04T19:42:38.651+0000","updated":"2018-01-04T19:42:38.651+0000","started":"2018-01-04T19:42:38.650+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"64778","issueId":"13125350"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13125350/worklog/64779","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user revans2 commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/2485#discussion_r159735761\n  \n    --- Diff: storm-server/src/main/java/org/apache/storm/scheduler/resource/NormalizedResources.java ---\n    @@ -246,59 +259,133 @@ public boolean couldHoldIgnoringSharedMemory(NormalizedResources other) {\n             return true;\n         }\n     \n    +    private void throwBecauseResourceIsMissingFromTotal(int resourceIndex) {\n    +        String resourceName = null;\n    +        for (Map.Entry<String, Integer> entry : resourceNames.entrySet()) {\n    +            int index = entry.getValue();\n    +            if (index == resourceIndex) {\n    +                resourceName = entry.getKey();\n    +                break;\n    +            }\n    +        }\n    +        if (resourceName == null) {\n    +            throw new IllegalStateException(\"Array index \" + resourceIndex + \" is not mapped in the resource names map.\"\n    +                + \" This should not be possible, and is likely a bug in the Storm code.\");\n    +        }\n    +        throw new IllegalArgumentException(\"Total resources does not contain resource '\"\n    +            + resourceName\n    +            + \"'. All resources should be represented in the total. This is likely a bug in the Storm code\");\n    +    }\n    +\n         /**\n    -     * Calculate the average resource usage percentage with this being the total resources and\n    -     * used being the amounts used.\n    +     * Calculate the average resource usage percentage with this being the total resources and used being the amounts used.\n    +     *\n          * @param used the amount of resources used.\n    -     * @return the average percentage used 0.0 to 100.0.\n    +     * @return the average percentage used 0.0 to 100.0. Clamps to 100.0 in case there are no available resources in the total\n          */\n         public double calculateAveragePercentageUsedBy(NormalizedResources used) {\n    +        int skippedResourceTypes = 0;\n             double total = 0.0;\n             double totalMemory = getTotalMemoryMb();\n             if (totalMemory != 0.0) {\n                 total += used.getTotalMemoryMb() / totalMemory;\n    +        } else {\n    +            skippedResourceTypes++;\n             }\n             double totalCpu = getTotalCpu();\n             if (totalCpu != 0.0) {\n                 total += used.getTotalCpu() / getTotalCpu();\n    +        } else {\n    +            skippedResourceTypes++;\n             }\n    -        //If total is 0 we add in a 0% used, so we can just skip over anything that is not in both.\n    -        int length = Math.min(used.otherResources.length, otherResources.length);\n    -        for (int i = 0; i < length; i++) {\n    -            if (otherResources[i] != 0.0) {\n    -                total += used.otherResources[i] / otherResources[i];\n    +        if (LOG.isTraceEnabled()) {\n    +            LOG.trace(\"Calculating avg percentage used by. Used CPU: {} Total CPU: {} Used Mem: {} Total Mem: {}\"\n    +                + \" Other Used: {} Other Total: {}\", totalCpu, used.getTotalCpu(), totalMemory, used.getTotalMemoryMb(),\n    +                this.toNormalizedOtherResources(), used.toNormalizedOtherResources());\n    +        }\n    +\n    +        if (used.otherResources.length > otherResources.length) {\n    +            throwBecauseResourceIsMissingFromTotal(used.otherResources.length);\n    --- End diff --\n    \n    My assumption was that if a resource is not around then it's value is 0.  It looks like in this case, that if a resources is missing an exception will be thrown.  I am not sure that this will not happen in normal operation, or if a user submits a topology with a resource that is not currently supported.\n","created":"2018-01-04T19:42:38.679+0000","updated":"2018-01-04T19:42:38.679+0000","started":"2018-01-04T19:42:38.679+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"64779","issueId":"13125350"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13125350/worklog/64780","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user revans2 commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/2485#discussion_r159735958\n  \n    --- Diff: storm-server/src/main/java/org/apache/storm/scheduler/resource/NormalizedResources.java ---\n    @@ -246,59 +259,133 @@ public boolean couldHoldIgnoringSharedMemory(NormalizedResources other) {\n             return true;\n         }\n     \n    +    private void throwBecauseResourceIsMissingFromTotal(int resourceIndex) {\n    +        String resourceName = null;\n    +        for (Map.Entry<String, Integer> entry : resourceNames.entrySet()) {\n    +            int index = entry.getValue();\n    +            if (index == resourceIndex) {\n    +                resourceName = entry.getKey();\n    +                break;\n    +            }\n    +        }\n    +        if (resourceName == null) {\n    +            throw new IllegalStateException(\"Array index \" + resourceIndex + \" is not mapped in the resource names map.\"\n    +                + \" This should not be possible, and is likely a bug in the Storm code.\");\n    +        }\n    +        throw new IllegalArgumentException(\"Total resources does not contain resource '\"\n    +            + resourceName\n    +            + \"'. All resources should be represented in the total. This is likely a bug in the Storm code\");\n    +    }\n    +\n         /**\n    -     * Calculate the average resource usage percentage with this being the total resources and\n    -     * used being the amounts used.\n    +     * Calculate the average resource usage percentage with this being the total resources and used being the amounts used.\n    +     *\n          * @param used the amount of resources used.\n    -     * @return the average percentage used 0.0 to 100.0.\n    +     * @return the average percentage used 0.0 to 100.0. Clamps to 100.0 in case there are no available resources in the total\n          */\n         public double calculateAveragePercentageUsedBy(NormalizedResources used) {\n    +        int skippedResourceTypes = 0;\n             double total = 0.0;\n             double totalMemory = getTotalMemoryMb();\n             if (totalMemory != 0.0) {\n                 total += used.getTotalMemoryMb() / totalMemory;\n    +        } else {\n    +            skippedResourceTypes++;\n             }\n             double totalCpu = getTotalCpu();\n             if (totalCpu != 0.0) {\n                 total += used.getTotalCpu() / getTotalCpu();\n    +        } else {\n    +            skippedResourceTypes++;\n             }\n    -        //If total is 0 we add in a 0% used, so we can just skip over anything that is not in both.\n    -        int length = Math.min(used.otherResources.length, otherResources.length);\n    -        for (int i = 0; i < length; i++) {\n    -            if (otherResources[i] != 0.0) {\n    -                total += used.otherResources[i] / otherResources[i];\n    +        if (LOG.isTraceEnabled()) {\n    +            LOG.trace(\"Calculating avg percentage used by. Used CPU: {} Total CPU: {} Used Mem: {} Total Mem: {}\"\n    +                + \" Other Used: {} Other Total: {}\", totalCpu, used.getTotalCpu(), totalMemory, used.getTotalMemoryMb(),\n    +                this.toNormalizedOtherResources(), used.toNormalizedOtherResources());\n    +        }\n    +\n    +        if (used.otherResources.length > otherResources.length) {\n    +            throwBecauseResourceIsMissingFromTotal(used.otherResources.length);\n    +        }\n    +\n    +        for (int i = 0; i < otherResources.length; i++) {\n    +            double totalValue = otherResources[i];\n    +            if (totalValue == 0.0) {\n    +                //Skip any resources where the total is 0, the percent used for this resource isn't meaningful.\n    +                //We fall back to prioritizing by cpu, memory and any other resources by ignoring this value\n    +                skippedResourceTypes++;\n    --- End diff --\n    \n    This looks fine to me, but could we explain in the javadoc for this method that 0 values are handled differently then might be expected?\n","created":"2018-01-04T19:42:38.795+0000","updated":"2018-01-04T19:42:38.795+0000","started":"2018-01-04T19:42:38.794+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"64780","issueId":"13125350"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13125350/worklog/64980","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user srdo commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/2485#discussion_r159952878\n  \n    --- Diff: storm-server/src/main/java/org/apache/storm/scheduler/resource/NormalizedResources.java ---\n    @@ -184,30 +191,25 @@ public void remove(NormalizedResources other) {\n             int otherLength = other.otherResources.length;\n             int length = otherResources.length;\n             if (otherLength > length) {\n    -            double [] newResources = new double[otherLength];\n    +            double[] newResources = new double[otherLength];\n                 System.arraycopy(newResources, 0, otherResources, 0, length);\n                 otherResources = newResources;\n             }\n    -        for (int i = 0; i < Math.min(length, otherLength); i++) {\n    +        for (int i = 0; i < otherLength; i++) {\n    --- End diff --\n    \n    Yes. I'm not sure how we should handle removes if `other` contains values not in `this`. The function was previously just ignoring the \"foo\" value in B, which I don't think makes that much sense. \r\n    \r\n    It makes add/remove act unlike regular set addition/subtraction, `A.remove(B).add(B) != A` for example. Behavior is also different between having 0 of a resource, and not having the resource, e.g. if `A = {\"cpu\": 1, \"foo\": 0}`, we would instead get an assertion error when removing B.\r\n    \r\n    If we want to actually subtract \"foo\" from A, we need to allow negative values in the result. Maybe we could delay the no-negative-values check to some other point, so we just disallow negative values in a final result but not in intermediate calculations?\r\n    \r\n    What do you think we should do?\n","created":"2018-01-05T18:53:39.756+0000","updated":"2018-01-05T18:53:39.756+0000","started":"2018-01-05T18:53:39.755+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"64980","issueId":"13125350"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13125350/worklog/64985","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user srdo commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/2485#discussion_r159957666\n  \n    --- Diff: storm-server/src/main/java/org/apache/storm/scheduler/resource/NormalizedResources.java ---\n    @@ -246,59 +259,133 @@ public boolean couldHoldIgnoringSharedMemory(NormalizedResources other) {\n             return true;\n         }\n     \n    +    private void throwBecauseResourceIsMissingFromTotal(int resourceIndex) {\n    +        String resourceName = null;\n    +        for (Map.Entry<String, Integer> entry : resourceNames.entrySet()) {\n    +            int index = entry.getValue();\n    +            if (index == resourceIndex) {\n    +                resourceName = entry.getKey();\n    +                break;\n    +            }\n    +        }\n    +        if (resourceName == null) {\n    +            throw new IllegalStateException(\"Array index \" + resourceIndex + \" is not mapped in the resource names map.\"\n    +                + \" This should not be possible, and is likely a bug in the Storm code.\");\n    +        }\n    +        throw new IllegalArgumentException(\"Total resources does not contain resource '\"\n    +            + resourceName\n    +            + \"'. All resources should be represented in the total. This is likely a bug in the Storm code\");\n    +    }\n    +\n         /**\n    -     * Calculate the average resource usage percentage with this being the total resources and\n    -     * used being the amounts used.\n    +     * Calculate the average resource usage percentage with this being the total resources and used being the amounts used.\n    +     *\n          * @param used the amount of resources used.\n    -     * @return the average percentage used 0.0 to 100.0.\n    +     * @return the average percentage used 0.0 to 100.0. Clamps to 100.0 in case there are no available resources in the total\n          */\n         public double calculateAveragePercentageUsedBy(NormalizedResources used) {\n    +        int skippedResourceTypes = 0;\n             double total = 0.0;\n             double totalMemory = getTotalMemoryMb();\n             if (totalMemory != 0.0) {\n                 total += used.getTotalMemoryMb() / totalMemory;\n    +        } else {\n    +            skippedResourceTypes++;\n             }\n             double totalCpu = getTotalCpu();\n             if (totalCpu != 0.0) {\n                 total += used.getTotalCpu() / getTotalCpu();\n    +        } else {\n    +            skippedResourceTypes++;\n             }\n    -        //If total is 0 we add in a 0% used, so we can just skip over anything that is not in both.\n    -        int length = Math.min(used.otherResources.length, otherResources.length);\n    -        for (int i = 0; i < length; i++) {\n    -            if (otherResources[i] != 0.0) {\n    -                total += used.otherResources[i] / otherResources[i];\n    +        if (LOG.isTraceEnabled()) {\n    +            LOG.trace(\"Calculating avg percentage used by. Used CPU: {} Total CPU: {} Used Mem: {} Total Mem: {}\"\n    +                + \" Other Used: {} Other Total: {}\", totalCpu, used.getTotalCpu(), totalMemory, used.getTotalMemoryMb(),\n    +                this.toNormalizedOtherResources(), used.toNormalizedOtherResources());\n    +        }\n    +\n    +        if (used.otherResources.length > otherResources.length) {\n    +            throwBecauseResourceIsMissingFromTotal(used.otherResources.length);\n    --- End diff --\n    \n    I could only find references to this method and calculateMin in the two resource aware strategies, where they seem to be used to estimate how large a percentage of total cluster resources a rack or node represents. That's why I assumed that hitting this case would always be a bug, because the total cluster resources should contain all the resources of the racks.\r\n    \r\n    I'm happy to instead pretend that otherResources has been padded with zeroes, and skip the zero values like we do a few lines down.\n","created":"2018-01-05T19:16:26.084+0000","updated":"2018-01-05T19:16:26.084+0000","started":"2018-01-05T19:16:26.083+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"64985","issueId":"13125350"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13125350/worklog/64987","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user srdo commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/2485#discussion_r159957760\n  \n    --- Diff: storm-server/src/main/java/org/apache/storm/scheduler/resource/NormalizedResources.java ---\n    @@ -246,59 +259,133 @@ public boolean couldHoldIgnoringSharedMemory(NormalizedResources other) {\n             return true;\n         }\n     \n    +    private void throwBecauseResourceIsMissingFromTotal(int resourceIndex) {\n    +        String resourceName = null;\n    +        for (Map.Entry<String, Integer> entry : resourceNames.entrySet()) {\n    +            int index = entry.getValue();\n    +            if (index == resourceIndex) {\n    +                resourceName = entry.getKey();\n    +                break;\n    +            }\n    +        }\n    +        if (resourceName == null) {\n    +            throw new IllegalStateException(\"Array index \" + resourceIndex + \" is not mapped in the resource names map.\"\n    +                + \" This should not be possible, and is likely a bug in the Storm code.\");\n    +        }\n    +        throw new IllegalArgumentException(\"Total resources does not contain resource '\"\n    +            + resourceName\n    +            + \"'. All resources should be represented in the total. This is likely a bug in the Storm code\");\n    +    }\n    +\n         /**\n    -     * Calculate the average resource usage percentage with this being the total resources and\n    -     * used being the amounts used.\n    +     * Calculate the average resource usage percentage with this being the total resources and used being the amounts used.\n    +     *\n          * @param used the amount of resources used.\n    -     * @return the average percentage used 0.0 to 100.0.\n    +     * @return the average percentage used 0.0 to 100.0. Clamps to 100.0 in case there are no available resources in the total\n          */\n         public double calculateAveragePercentageUsedBy(NormalizedResources used) {\n    +        int skippedResourceTypes = 0;\n             double total = 0.0;\n             double totalMemory = getTotalMemoryMb();\n             if (totalMemory != 0.0) {\n                 total += used.getTotalMemoryMb() / totalMemory;\n    +        } else {\n    +            skippedResourceTypes++;\n             }\n             double totalCpu = getTotalCpu();\n             if (totalCpu != 0.0) {\n                 total += used.getTotalCpu() / getTotalCpu();\n    +        } else {\n    +            skippedResourceTypes++;\n             }\n    -        //If total is 0 we add in a 0% used, so we can just skip over anything that is not in both.\n    -        int length = Math.min(used.otherResources.length, otherResources.length);\n    -        for (int i = 0; i < length; i++) {\n    -            if (otherResources[i] != 0.0) {\n    -                total += used.otherResources[i] / otherResources[i];\n    +        if (LOG.isTraceEnabled()) {\n    +            LOG.trace(\"Calculating avg percentage used by. Used CPU: {} Total CPU: {} Used Mem: {} Total Mem: {}\"\n    +                + \" Other Used: {} Other Total: {}\", totalCpu, used.getTotalCpu(), totalMemory, used.getTotalMemoryMb(),\n    +                this.toNormalizedOtherResources(), used.toNormalizedOtherResources());\n    +        }\n    +\n    +        if (used.otherResources.length > otherResources.length) {\n    +            throwBecauseResourceIsMissingFromTotal(used.otherResources.length);\n    +        }\n    +\n    +        for (int i = 0; i < otherResources.length; i++) {\n    +            double totalValue = otherResources[i];\n    +            if (totalValue == 0.0) {\n    +                //Skip any resources where the total is 0, the percent used for this resource isn't meaningful.\n    +                //We fall back to prioritizing by cpu, memory and any other resources by ignoring this value\n    +                skippedResourceTypes++;\n    --- End diff --\n    \n    Yes, I'll add a note to both methods.\n","created":"2018-01-05T19:16:48.477+0000","updated":"2018-01-05T19:16:48.477+0000","started":"2018-01-05T19:16:48.476+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"64987","issueId":"13125350"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13125350/worklog/65015","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user revans2 commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/2485#discussion_r159972982\n  \n    --- Diff: storm-server/src/main/java/org/apache/storm/scheduler/resource/NormalizedResources.java ---\n    @@ -184,30 +191,25 @@ public void remove(NormalizedResources other) {\n             int otherLength = other.otherResources.length;\n             int length = otherResources.length;\n             if (otherLength > length) {\n    -            double [] newResources = new double[otherLength];\n    +            double[] newResources = new double[otherLength];\n                 System.arraycopy(newResources, 0, otherResources, 0, length);\n                 otherResources = newResources;\n             }\n    -        for (int i = 0; i < Math.min(length, otherLength); i++) {\n    +        for (int i = 0; i < otherLength; i++) {\n    --- End diff --\n    \n    With where remove is used it should never go negative, so I would be fine with blowing up for all negative values so long as we call it out in the javadocs, and treat something that is not there as a 0.  I agree there is a lot about the code that is not ideal.\n","created":"2018-01-05T20:30:35.623+0000","updated":"2018-01-05T20:30:35.623+0000","started":"2018-01-05T20:30:35.622+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"65015","issueId":"13125350"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13125350/worklog/65016","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user revans2 commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/2485#discussion_r159973149\n  \n    --- Diff: storm-server/src/main/java/org/apache/storm/scheduler/resource/NormalizedResources.java ---\n    @@ -246,59 +259,133 @@ public boolean couldHoldIgnoringSharedMemory(NormalizedResources other) {\n             return true;\n         }\n     \n    +    private void throwBecauseResourceIsMissingFromTotal(int resourceIndex) {\n    +        String resourceName = null;\n    +        for (Map.Entry<String, Integer> entry : resourceNames.entrySet()) {\n    +            int index = entry.getValue();\n    +            if (index == resourceIndex) {\n    +                resourceName = entry.getKey();\n    +                break;\n    +            }\n    +        }\n    +        if (resourceName == null) {\n    +            throw new IllegalStateException(\"Array index \" + resourceIndex + \" is not mapped in the resource names map.\"\n    +                + \" This should not be possible, and is likely a bug in the Storm code.\");\n    +        }\n    +        throw new IllegalArgumentException(\"Total resources does not contain resource '\"\n    +            + resourceName\n    +            + \"'. All resources should be represented in the total. This is likely a bug in the Storm code\");\n    +    }\n    +\n         /**\n    -     * Calculate the average resource usage percentage with this being the total resources and\n    -     * used being the amounts used.\n    +     * Calculate the average resource usage percentage with this being the total resources and used being the amounts used.\n    +     *\n          * @param used the amount of resources used.\n    -     * @return the average percentage used 0.0 to 100.0.\n    +     * @return the average percentage used 0.0 to 100.0. Clamps to 100.0 in case there are no available resources in the total\n          */\n         public double calculateAveragePercentageUsedBy(NormalizedResources used) {\n    +        int skippedResourceTypes = 0;\n             double total = 0.0;\n             double totalMemory = getTotalMemoryMb();\n             if (totalMemory != 0.0) {\n                 total += used.getTotalMemoryMb() / totalMemory;\n    +        } else {\n    +            skippedResourceTypes++;\n             }\n             double totalCpu = getTotalCpu();\n             if (totalCpu != 0.0) {\n                 total += used.getTotalCpu() / getTotalCpu();\n    +        } else {\n    +            skippedResourceTypes++;\n             }\n    -        //If total is 0 we add in a 0% used, so we can just skip over anything that is not in both.\n    -        int length = Math.min(used.otherResources.length, otherResources.length);\n    -        for (int i = 0; i < length; i++) {\n    -            if (otherResources[i] != 0.0) {\n    -                total += used.otherResources[i] / otherResources[i];\n    +        if (LOG.isTraceEnabled()) {\n    +            LOG.trace(\"Calculating avg percentage used by. Used CPU: {} Total CPU: {} Used Mem: {} Total Mem: {}\"\n    +                + \" Other Used: {} Other Total: {}\", totalCpu, used.getTotalCpu(), totalMemory, used.getTotalMemoryMb(),\n    +                this.toNormalizedOtherResources(), used.toNormalizedOtherResources());\n    +        }\n    +\n    +        if (used.otherResources.length > otherResources.length) {\n    +            throwBecauseResourceIsMissingFromTotal(used.otherResources.length);\n    --- End diff --\n    \n    This is fine, just make sure the java docs explain how this should be used and when it will throw an exception.\n","created":"2018-01-05T20:31:34.726+0000","updated":"2018-01-05T20:31:34.726+0000","started":"2018-01-05T20:31:34.622+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"65016","issueId":"13125350"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13125350/worklog/65080","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user srdo commented on the issue:\n\n    https://github.com/apache/storm/pull/2485\n  \n    @revans2 I took another look after some of your last comments, and found some more bugs. I spent some time splitting up NormalizedResources so it was easier to test. Your comments should also have been addressed. \r\n    \r\n    Most of the classes related to NormalizedResources have been moved to a new package. The move is in the last commit, so it's probably easier to exclude that one from the diff.\r\n    \r\n    If you have an idea for a better place to put the static fields in NormalizedResources, I'd be happy to move them. They are referred to from a lot of different classes, and it would be better if we could create the classes somewhere during startup and inject them into the classes that need them instead of referring to these static fields.\n","created":"2018-01-07T17:39:18.851+0000","updated":"2018-01-07T17:39:18.851+0000","started":"2018-01-07T17:39:18.850+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"65080","issueId":"13125350"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13125350/worklog/65243","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user asfgit closed the pull request at:\n\n    https://github.com/apache/storm/pull/2485\n","created":"2018-01-08T21:21:47.136+0000","updated":"2018-01-08T21:21:47.136+0000","started":"2018-01-08T21:21:47.136+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"65243","issueId":"13125350"}]},"customfield_12311820":"0|i3nz0n:"}}