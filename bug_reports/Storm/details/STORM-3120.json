{"expand":"renderedFields,names,schema,operations,editmeta,changelog,versionedRepresentations","id":"13167864","self":"https://issues.apache.org/jira/rest/api/2/issue/13167864","key":"STORM-3120","fields":{"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype","name":"Bug","subtask":false,"avatarId":21133},"timespent":7800,"project":{"self":"https://issues.apache.org/jira/rest/api/2/project/12314820","id":"12314820","key":"STORM","name":"Apache Storm","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/projectavatar?pid=12314820&avatarId=21667","24x24":"https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12314820&avatarId=21667","16x16":"https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12314820&avatarId=21667","32x32":"https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12314820&avatarId=21667"},"projectCategory":{"self":"https://issues.apache.org/jira/rest/api/2/projectCategory/13260","id":"13260","description":"Apache Storm Related","name":"Storm"}},"fixVersions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12334657","id":"12334657","name":"2.0.0","archived":false,"released":false}],"aggregatetimespent":7800,"resolution":{"self":"https://issues.apache.org/jira/rest/api/2/resolution/1","id":"1","description":"A fix for this issue is checked into the tree and tested.","name":"Fixed"},"customfield_12312322":null,"customfield_12310220":"2018-06-27T17:36:18.608+0000","customfield_12312520":null,"customfield_12312323":null,"customfield_12312521":"Wed Jun 27 17:36:18 UTC 2018","customfield_12312320":null,"customfield_12310222":"1_*:*_1_*:*_284212166_*|*_5_*:*_1_*:*_0","customfield_12310420":"9223372036854775807","customfield_12312321":null,"resolutiondate":"2018-06-27T17:36:18.585+0000","workratio":-1,"customfield_12312328":null,"customfield_12312329":null,"customfield_12312923":null,"customfield_12312326":null,"customfield_12312920":null,"customfield_12310300":null,"customfield_12312327":null,"customfield_12312921":null,"customfield_12312324":null,"customfield_12312720":null,"customfield_12312325":null,"lastViewed":null,"watches":{"self":"https://issues.apache.org/jira/rest/api/2/issue/STORM-3120/watchers","watchCount":1,"isWatching":false},"created":"2018-06-24T10:39:26.454+0000","priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.svg","name":"Major","id":"3"},"labels":["pull-request-available"],"customfield_12312333":null,"customfield_12312334":null,"customfield_12313422":"false","customfield_12310310":"0.0","customfield_12312331":null,"customfield_12312332":null,"timeestimate":0,"aggregatetimeoriginalestimate":null,"customfield_12311120":null,"customfield_12312330":null,"versions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12334657","id":"12334657","name":"2.0.0","archived":false,"released":false}],"customfield_12312339":null,"issuelinks":[],"assignee":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=Srdo","name":"Srdo","key":"srdo","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Stig Rohde Døssing","active":true,"timeZone":"Europe/Copenhagen"},"customfield_12312337":null,"customfield_12312338":null,"updated":"2018-06-27T17:36:41.147+0000","customfield_12312335":null,"customfield_12312336":null,"status":{"self":"https://issues.apache.org/jira/rest/api/2/status/5","description":"A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/resolved.png","name":"Resolved","id":"5","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Done"}},"components":[],"timeoriginalestimate":null,"description":null,"customfield_10010":null,"timetracking":{"remainingEstimate":"0h","timeSpent":"2h 10m","remainingEstimateSeconds":0,"timeSpentSeconds":7800},"customfield_12312026":null,"customfield_12312023":null,"customfield_12312024":null,"attachment":[],"customfield_12312340":null,"aggregatetimeestimate":0,"customfield_12312341":null,"customfield_12312220":null,"customfield_12312022":null,"customfield_12310921":null,"customfield_12310920":"9223372036854775807","customfield_12312823":null,"summary":"Clean up leftover null checks in Time, ensure idle threads get to run when cluster time is advanced","creator":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=Srdo","name":"Srdo","key":"srdo","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Stig Rohde Døssing","active":true,"timeZone":"Europe/Copenhagen"},"subtasks":[],"reporter":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=Srdo","name":"Srdo","key":"srdo","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Stig Rohde Døssing","active":true,"timeZone":"Europe/Copenhagen"},"customfield_12310291":null,"customfield_12310290":null,"aggregateprogress":{"progress":7800,"total":7800,"percent":100},"environment":null,"customfield_12313520":null,"customfield_12311020":null,"duedate":null,"customfield_12310250":null,"progress":{"progress":7800,"total":7800,"percent":100},"comment":{"comments":[{"self":"https://issues.apache.org/jira/rest/api/2/issue/13167864/comment/16525341","id":"16525341","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=revans2","name":"revans2","key":"revans2","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Robert Joseph Evans","active":true,"timeZone":"America/Chicago"},"body":"Thanks [~Srdo],\r\n\r\n \r\n\r\nI merged this into master.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=revans2","name":"revans2","key":"revans2","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Robert Joseph Evans","active":true,"timeZone":"America/Chicago"},"created":"2018-06-27T17:36:18.608+0000","updated":"2018-06-27T17:36:18.608+0000"}],"maxResults":1,"total":1,"startAt":0},"votes":{"self":"https://issues.apache.org/jira/rest/api/2/issue/STORM-3120/votes","votes":0,"hasVoted":false},"worklog":{"startAt":0,"maxResults":20,"total":13,"worklogs":[{"self":"https://issues.apache.org/jira/rest/api/2/issue/13167864/worklog/115156","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"GitHub user srdo opened a pull request:\n\n    https://github.com/apache/storm/pull/2734\n\n    STORM-3120: Clean up leftover null checks in Time, ensure idle thread…\n\n    …s get to run when cluster time is advanced\r\n    \r\n    https://issues.apache.org/jira/browse/STORM-3120\r\n    \r\n    Some of the Time code didn't make sense, e.g. checking for null on the final THREAD_SLEEP_TIMES_NANOS map. It was left over from an earlier refactor of Time. Cleaned it up, and deleted the deprecated Time methods. Also made sure that when simulated time is advanced, idle threads are removed from the THREAD_SLEEP_TIMES_NANOS immediately. When the LocalCluster waits for the topology to be idle, it checks whether all timer threads are in the THREAD_SLEEP_TIMES_NANOS map. It looks to me like there was no guarantee that sleeping threads actually got a chance to run when time was advanced, because they remained in the THREAD_SLEEP_TIMES_NANOS map until they happened to be scheduled. With bad luck, a thread might end up being counted as idle when it just hadn't exited the Time.sleepUntilNanos loop yet.\n\nYou can merge this pull request into a Git repository by running:\n\n    $ git pull https://github.com/srdo/storm STORM-3120\n\nAlternatively you can review and apply these changes as the patch at:\n\n    https://github.com/apache/storm/pull/2734.patch\n\nTo close this pull request, make a commit to your master/trunk branch\nwith (at least) the following in the commit message:\n\n    This closes #2734\n    \n----\ncommit 47009495913316dcfe0a034c8d70868101cad7ab\nAuthor: Stig Rohde Døssing <srdo@...>\nDate:   2018-06-24T10:47:42Z\n\n    STORM-3120: Clean up leftover null checks in Time, ensure idle threads get to run when cluster time is advanced\n\n----\n","created":"2018-06-24T11:26:25.195+0000","updated":"2018-06-24T11:26:25.195+0000","started":"2018-06-24T11:26:25.194+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"115156","issueId":"13167864"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13167864/worklog/115219","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user HeartSaVioR commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/2734#discussion_r197652064\n  \n    --- Diff: storm-server/src/main/java/org/apache/storm/LocalCluster.java ---\n    @@ -196,6 +196,9 @@ private LocalCluster(Builder builder) throws Exception {\n                 this.tmpDirs.add(nimbusTmp);\n                 stormHomeBackup = System.getProperty(ConfigUtils.STORM_HOME);\n                 TmpPath stormHome = new TmpPath();\n    +            if (!stormHome.getFile().mkdirs()) {\n    --- End diff --\n    \n    I might be going to too strict, but this looks like follow-up of STORM-3116 (not relevant to Time) which would be better to have individual PR. The change is minor so no need to file a new issue. Just would like to avoid things getting mixed up in a commit.\r\n    \r\n    Will continue reviewing other change in PR.\n","created":"2018-06-24T20:29:50.568+0000","updated":"2018-06-24T20:29:50.568+0000","started":"2018-06-24T20:29:50.568+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"115219","issueId":"13167864"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13167864/worklog/115223","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user srdo commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/2734#discussion_r197652495\n  \n    --- Diff: storm-server/src/main/java/org/apache/storm/LocalCluster.java ---\n    @@ -196,6 +196,9 @@ private LocalCluster(Builder builder) throws Exception {\n                 this.tmpDirs.add(nimbusTmp);\n                 stormHomeBackup = System.getProperty(ConfigUtils.STORM_HOME);\n                 TmpPath stormHome = new TmpPath();\n    +            if (!stormHome.getFile().mkdirs()) {\n    --- End diff --\n    \n    Yes, it is. Do you want me to put this into a STORM-3116 PR, or what do you mean?\n","created":"2018-06-24T20:48:22.593+0000","updated":"2018-06-24T20:48:22.593+0000","started":"2018-06-24T20:48:22.593+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"115223","issueId":"13167864"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13167864/worklog/115249","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user HeartSaVioR commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/2734#discussion_r197657251\n  \n    --- Diff: storm-client/src/jvm/org/apache/storm/utils/Time.java ---\n    @@ -82,45 +66,49 @@ public static void sleepUntilNanos(long targetTimeNanos) throws InterruptedExcep\n         private static void simulatedSleepUntilNanos(long targetTimeNanos) throws InterruptedException {\n             try {\n                 synchronized (SLEEP_TIMES_LOCK) {\n    -                if (THREAD_SLEEP_TIMES_NANOS == null) {\n    +                if (!SIMULATING.get()) {\n                         LOG.debug(\"{} is still sleeping after simulated time disabled.\", Thread.currentThread(),\n    -                              new RuntimeException(\"STACK TRACE\"));\n    +                        new RuntimeException(\"STACK TRACE\"));\n                         throw new InterruptedException();\n                     }\n                     THREAD_SLEEP_TIMES_NANOS.put(Thread.currentThread(), new AtomicLong(targetTimeNanos));\n                 }\n                 while (SIMULATED_CURR_TIME_NANOS.get() < targetTimeNanos) {\n                     synchronized (SLEEP_TIMES_LOCK) {\n    -                    if (THREAD_SLEEP_TIMES_NANOS == null) {\n    +                    if (!SIMULATING.get()) {\n                             LOG.debug(\"{} is still sleeping after simulated time disabled.\", Thread.currentThread(),\n                                       new RuntimeException(\"STACK TRACE\"));\n                             throw new InterruptedException();\n                         }\n    -                }\n    -                long autoAdvance = AUTO_ADVANCE_NANOS_ON_SLEEP.get();\n    -                if (autoAdvance > 0) {\n    -                    advanceTimeNanos(autoAdvance);\n    +                    long autoAdvance = AUTO_ADVANCE_NANOS_ON_SLEEP.get();\n    +                    if (autoAdvance > 0) {\n    +                        advanceTimeNanos(autoAdvance);\n    +                    }\n                     }\n                     Thread.sleep(10);\n                 }\n             } finally {\n    -            synchronized (SLEEP_TIMES_LOCK) {\n    -                if (SIMULATING.get() && THREAD_SLEEP_TIMES_NANOS != null) {\n    -                    THREAD_SLEEP_TIMES_NANOS.remove(Thread.currentThread());\n    -                }\n    -            }\n    +            THREAD_SLEEP_TIMES_NANOS.remove(Thread.currentThread());\n             }\n         }\n    -\n    +    \n         public static void sleep(long ms) throws InterruptedException {\n             if (ms > 0) {\n    -            sleepUntil(currentTimeMillis() + ms);\n    +            if (SIMULATING.get()) {\n    --- End diff --\n    \n    Is there any reason to not use `sleepUntil`? If you think `sleepUntil` is broken, the method must be fixed since the method is exposed to `public`. If not, why not using `sleepUntil`?\n","created":"2018-06-24T23:58:57.860+0000","updated":"2018-06-24T23:58:57.860+0000","started":"2018-06-24T23:58:57.860+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"115249","issueId":"13167864"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13167864/worklog/115250","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user HeartSaVioR commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/2734#discussion_r197657288\n  \n    --- Diff: storm-client/src/jvm/org/apache/storm/utils/Time.java ---\n    @@ -82,45 +66,49 @@ public static void sleepUntilNanos(long targetTimeNanos) throws InterruptedExcep\n         private static void simulatedSleepUntilNanos(long targetTimeNanos) throws InterruptedException {\n             try {\n                 synchronized (SLEEP_TIMES_LOCK) {\n    -                if (THREAD_SLEEP_TIMES_NANOS == null) {\n    +                if (!SIMULATING.get()) {\n                         LOG.debug(\"{} is still sleeping after simulated time disabled.\", Thread.currentThread(),\n    -                              new RuntimeException(\"STACK TRACE\"));\n    +                        new RuntimeException(\"STACK TRACE\"));\n                         throw new InterruptedException();\n                     }\n                     THREAD_SLEEP_TIMES_NANOS.put(Thread.currentThread(), new AtomicLong(targetTimeNanos));\n                 }\n                 while (SIMULATED_CURR_TIME_NANOS.get() < targetTimeNanos) {\n                     synchronized (SLEEP_TIMES_LOCK) {\n    -                    if (THREAD_SLEEP_TIMES_NANOS == null) {\n    +                    if (!SIMULATING.get()) {\n                             LOG.debug(\"{} is still sleeping after simulated time disabled.\", Thread.currentThread(),\n                                       new RuntimeException(\"STACK TRACE\"));\n                             throw new InterruptedException();\n                         }\n    -                }\n    -                long autoAdvance = AUTO_ADVANCE_NANOS_ON_SLEEP.get();\n    -                if (autoAdvance > 0) {\n    -                    advanceTimeNanos(autoAdvance);\n    +                    long autoAdvance = AUTO_ADVANCE_NANOS_ON_SLEEP.get();\n    +                    if (autoAdvance > 0) {\n    +                        advanceTimeNanos(autoAdvance);\n    +                    }\n                     }\n                     Thread.sleep(10);\n                 }\n             } finally {\n    -            synchronized (SLEEP_TIMES_LOCK) {\n    -                if (SIMULATING.get() && THREAD_SLEEP_TIMES_NANOS != null) {\n    -                    THREAD_SLEEP_TIMES_NANOS.remove(Thread.currentThread());\n    -                }\n    -            }\n    +            THREAD_SLEEP_TIMES_NANOS.remove(Thread.currentThread());\n             }\n         }\n    -\n    +    \n         public static void sleep(long ms) throws InterruptedException {\n             if (ms > 0) {\n    -            sleepUntil(currentTimeMillis() + ms);\n    +            if (SIMULATING.get()) {\n    +                simulatedSleepUntilNanos(millisToNanos(currentTimeMillis() + ms));\n    +            } else {\n    +                Thread.sleep(ms);\n    +            }\n             }\n         }\n     \n    -    public static void sleepNanos(long nanos) throws InterruptedException {\n    +    public static void parkNanos(long nanos) throws InterruptedException {\n             if (nanos > 0) {\n    -            sleepUntilNanos(nanoTime() + nanos);\n    +            if (SIMULATING.get()) {\n    --- End diff --\n    \n    Same here, and we may note that we're renaming public method, though Time class is more likely internal class though.\n","created":"2018-06-24T23:58:57.886+0000","updated":"2018-06-24T23:58:57.886+0000","started":"2018-06-24T23:58:57.886+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"115250","issueId":"13167864"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13167864/worklog/115251","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user HeartSaVioR commented on the issue:\n\n    https://github.com/apache/storm/pull/2734\n  \n    Looks good to me overall except two comments above. (I forgot to comment...)\n","created":"2018-06-24T23:59:33.140+0000","updated":"2018-06-24T23:59:33.140+0000","started":"2018-06-24T23:59:33.139+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"115251","issueId":"13167864"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13167864/worklog/115317","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user srdo commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/2734#discussion_r197686035\n  \n    --- Diff: storm-client/src/jvm/org/apache/storm/utils/Time.java ---\n    @@ -82,45 +66,49 @@ public static void sleepUntilNanos(long targetTimeNanos) throws InterruptedExcep\n         private static void simulatedSleepUntilNanos(long targetTimeNanos) throws InterruptedException {\n             try {\n                 synchronized (SLEEP_TIMES_LOCK) {\n    -                if (THREAD_SLEEP_TIMES_NANOS == null) {\n    +                if (!SIMULATING.get()) {\n                         LOG.debug(\"{} is still sleeping after simulated time disabled.\", Thread.currentThread(),\n    -                              new RuntimeException(\"STACK TRACE\"));\n    +                        new RuntimeException(\"STACK TRACE\"));\n                         throw new InterruptedException();\n                     }\n                     THREAD_SLEEP_TIMES_NANOS.put(Thread.currentThread(), new AtomicLong(targetTimeNanos));\n                 }\n                 while (SIMULATED_CURR_TIME_NANOS.get() < targetTimeNanos) {\n                     synchronized (SLEEP_TIMES_LOCK) {\n    -                    if (THREAD_SLEEP_TIMES_NANOS == null) {\n    +                    if (!SIMULATING.get()) {\n                             LOG.debug(\"{} is still sleeping after simulated time disabled.\", Thread.currentThread(),\n                                       new RuntimeException(\"STACK TRACE\"));\n                             throw new InterruptedException();\n                         }\n    -                }\n    -                long autoAdvance = AUTO_ADVANCE_NANOS_ON_SLEEP.get();\n    -                if (autoAdvance > 0) {\n    -                    advanceTimeNanos(autoAdvance);\n    +                    long autoAdvance = AUTO_ADVANCE_NANOS_ON_SLEEP.get();\n    +                    if (autoAdvance > 0) {\n    +                        advanceTimeNanos(autoAdvance);\n    +                    }\n                     }\n                     Thread.sleep(10);\n                 }\n             } finally {\n    -            synchronized (SLEEP_TIMES_LOCK) {\n    -                if (SIMULATING.get() && THREAD_SLEEP_TIMES_NANOS != null) {\n    -                    THREAD_SLEEP_TIMES_NANOS.remove(Thread.currentThread());\n    -                }\n    -            }\n    +            THREAD_SLEEP_TIMES_NANOS.remove(Thread.currentThread());\n             }\n         }\n    -\n    +    \n         public static void sleep(long ms) throws InterruptedException {\n             if (ms > 0) {\n    -            sleepUntil(currentTimeMillis() + ms);\n    +            if (SIMULATING.get()) {\n    --- End diff --\n    \n    `sleepUntil` works fine. It's just a little silly in the case where we aren't simulating, because this method would calculate `currentTimeMillis() + ms`, and `sleepUntil` would then do the reverse to calculate how many ms to pass to `Thread.sleep`.\n","created":"2018-06-25T06:02:43.990+0000","updated":"2018-06-25T06:02:43.990+0000","started":"2018-06-25T06:02:43.989+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"115317","issueId":"13167864"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13167864/worklog/115318","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user srdo commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/2734#discussion_r197686220\n  \n    --- Diff: storm-client/src/jvm/org/apache/storm/utils/Time.java ---\n    @@ -82,45 +66,49 @@ public static void sleepUntilNanos(long targetTimeNanos) throws InterruptedExcep\n         private static void simulatedSleepUntilNanos(long targetTimeNanos) throws InterruptedException {\n             try {\n                 synchronized (SLEEP_TIMES_LOCK) {\n    -                if (THREAD_SLEEP_TIMES_NANOS == null) {\n    +                if (!SIMULATING.get()) {\n                         LOG.debug(\"{} is still sleeping after simulated time disabled.\", Thread.currentThread(),\n    -                              new RuntimeException(\"STACK TRACE\"));\n    +                        new RuntimeException(\"STACK TRACE\"));\n                         throw new InterruptedException();\n                     }\n                     THREAD_SLEEP_TIMES_NANOS.put(Thread.currentThread(), new AtomicLong(targetTimeNanos));\n                 }\n                 while (SIMULATED_CURR_TIME_NANOS.get() < targetTimeNanos) {\n                     synchronized (SLEEP_TIMES_LOCK) {\n    -                    if (THREAD_SLEEP_TIMES_NANOS == null) {\n    +                    if (!SIMULATING.get()) {\n                             LOG.debug(\"{} is still sleeping after simulated time disabled.\", Thread.currentThread(),\n                                       new RuntimeException(\"STACK TRACE\"));\n                             throw new InterruptedException();\n                         }\n    -                }\n    -                long autoAdvance = AUTO_ADVANCE_NANOS_ON_SLEEP.get();\n    -                if (autoAdvance > 0) {\n    -                    advanceTimeNanos(autoAdvance);\n    +                    long autoAdvance = AUTO_ADVANCE_NANOS_ON_SLEEP.get();\n    +                    if (autoAdvance > 0) {\n    +                        advanceTimeNanos(autoAdvance);\n    +                    }\n                     }\n                     Thread.sleep(10);\n                 }\n             } finally {\n    -            synchronized (SLEEP_TIMES_LOCK) {\n    -                if (SIMULATING.get() && THREAD_SLEEP_TIMES_NANOS != null) {\n    -                    THREAD_SLEEP_TIMES_NANOS.remove(Thread.currentThread());\n    -                }\n    -            }\n    +            THREAD_SLEEP_TIMES_NANOS.remove(Thread.currentThread());\n             }\n         }\n    -\n    +    \n         public static void sleep(long ms) throws InterruptedException {\n             if (ms > 0) {\n    -            sleepUntil(currentTimeMillis() + ms);\n    +            if (SIMULATING.get()) {\n    +                simulatedSleepUntilNanos(millisToNanos(currentTimeMillis() + ms));\n    +            } else {\n    +                Thread.sleep(ms);\n    +            }\n             }\n         }\n     \n    -    public static void sleepNanos(long nanos) throws InterruptedException {\n    +    public static void parkNanos(long nanos) throws InterruptedException {\n             if (nanos > 0) {\n    -            sleepUntilNanos(nanoTime() + nanos);\n    +            if (SIMULATING.get()) {\n    --- End diff --\n    \n    In this case, I'd like to use `LockSupport.parkNanos` if we're not simulating, rather than sleeping for the closest number of milliseconds as the method did before.\n","created":"2018-06-25T06:03:47.054+0000","updated":"2018-06-25T06:03:47.054+0000","started":"2018-06-25T06:03:47.053+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"115318","issueId":"13167864"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13167864/worklog/115468","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user srdo commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/2734#discussion_r197838009\n  \n    --- Diff: storm-client/src/jvm/org/apache/storm/utils/Time.java ---\n    @@ -82,45 +66,49 @@ public static void sleepUntilNanos(long targetTimeNanos) throws InterruptedExcep\n         private static void simulatedSleepUntilNanos(long targetTimeNanos) throws InterruptedException {\n             try {\n                 synchronized (SLEEP_TIMES_LOCK) {\n    -                if (THREAD_SLEEP_TIMES_NANOS == null) {\n    +                if (!SIMULATING.get()) {\n                         LOG.debug(\"{} is still sleeping after simulated time disabled.\", Thread.currentThread(),\n    -                              new RuntimeException(\"STACK TRACE\"));\n    +                        new RuntimeException(\"STACK TRACE\"));\n                         throw new InterruptedException();\n                     }\n                     THREAD_SLEEP_TIMES_NANOS.put(Thread.currentThread(), new AtomicLong(targetTimeNanos));\n                 }\n                 while (SIMULATED_CURR_TIME_NANOS.get() < targetTimeNanos) {\n                     synchronized (SLEEP_TIMES_LOCK) {\n    -                    if (THREAD_SLEEP_TIMES_NANOS == null) {\n    +                    if (!SIMULATING.get()) {\n                             LOG.debug(\"{} is still sleeping after simulated time disabled.\", Thread.currentThread(),\n                                       new RuntimeException(\"STACK TRACE\"));\n                             throw new InterruptedException();\n                         }\n    -                }\n    -                long autoAdvance = AUTO_ADVANCE_NANOS_ON_SLEEP.get();\n    -                if (autoAdvance > 0) {\n    -                    advanceTimeNanos(autoAdvance);\n    +                    long autoAdvance = AUTO_ADVANCE_NANOS_ON_SLEEP.get();\n    +                    if (autoAdvance > 0) {\n    +                        advanceTimeNanos(autoAdvance);\n    +                    }\n                     }\n                     Thread.sleep(10);\n                 }\n             } finally {\n    -            synchronized (SLEEP_TIMES_LOCK) {\n    -                if (SIMULATING.get() && THREAD_SLEEP_TIMES_NANOS != null) {\n    -                    THREAD_SLEEP_TIMES_NANOS.remove(Thread.currentThread());\n    -                }\n    -            }\n    +            THREAD_SLEEP_TIMES_NANOS.remove(Thread.currentThread());\n             }\n         }\n    -\n    +    \n         public static void sleep(long ms) throws InterruptedException {\n             if (ms > 0) {\n    -            sleepUntil(currentTimeMillis() + ms);\n    +            if (SIMULATING.get()) {\n    +                simulatedSleepUntilNanos(millisToNanos(currentTimeMillis() + ms));\n    +            } else {\n    +                Thread.sleep(ms);\n    +            }\n             }\n         }\n     \n    -    public static void sleepNanos(long nanos) throws InterruptedException {\n    +    public static void parkNanos(long nanos) throws InterruptedException {\n             if (nanos > 0) {\n    -            sleepUntilNanos(nanoTime() + nanos);\n    +            if (SIMULATING.get()) {\n    --- End diff --\n    \n    Whoops, forgot to respond to the renaming bit: Yes, the method is renamed. If we want to port this to 1.x, we can easily deprecate sleepNanos and provide both methods.\n","created":"2018-06-25T15:24:15.495+0000","updated":"2018-06-25T15:24:15.495+0000","started":"2018-06-25T15:24:15.494+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"115468","issueId":"13167864"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13167864/worklog/115470","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user revans2 commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/2734#discussion_r197839735\n  \n    --- Diff: storm-client/src/jvm/org/apache/storm/utils/Time.java ---\n    @@ -185,8 +173,17 @@ public static void advanceTimeNanos(long nanos) {\n             if (nanos < 0) {\n                 throw new IllegalArgumentException(\"advanceTime only accepts positive time as an argument\");\n             }\n    -        long newTime = SIMULATED_CURR_TIME_NANOS.addAndGet(nanos);\n    -        LOG.debug(\"Advanced simulated time to {}\", newTime);\n    +        synchronized (SLEEP_TIMES_LOCK) {\n    +            long newTime = SIMULATED_CURR_TIME_NANOS.addAndGet(nanos);\n    +            Iterator<AtomicLong> sleepTimesIter = THREAD_SLEEP_TIMES_NANOS.values().iterator();\n    +            while (sleepTimesIter.hasNext()) {\n    +                AtomicLong curr = sleepTimesIter.next();\n    +                if (SIMULATED_CURR_TIME_NANOS.get() >= curr.get()) {\n    +                    sleepTimesIter.remove();\n    +                }\n    +            }\n    +            LOG.debug(\"Advanced simulated time to {}\", newTime);\n    +        }\n    --- End diff --\n    \n    nit: I don't think this code change is needed, as you fixed the bug with checking for THREAD_SLEEP_TIMES_NANOS == null, so the finally should work.  If it does not work, then java itself has some bugs in it.\n","created":"2018-06-25T15:29:22.491+0000","updated":"2018-06-25T15:29:22.491+0000","started":"2018-06-25T15:29:22.491+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"115470","issueId":"13167864"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13167864/worklog/115492","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user srdo commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/2734#discussion_r197856612\n  \n    --- Diff: storm-client/src/jvm/org/apache/storm/utils/Time.java ---\n    @@ -185,8 +173,17 @@ public static void advanceTimeNanos(long nanos) {\n             if (nanos < 0) {\n                 throw new IllegalArgumentException(\"advanceTime only accepts positive time as an argument\");\n             }\n    -        long newTime = SIMULATED_CURR_TIME_NANOS.addAndGet(nanos);\n    -        LOG.debug(\"Advanced simulated time to {}\", newTime);\n    +        synchronized (SLEEP_TIMES_LOCK) {\n    +            long newTime = SIMULATED_CURR_TIME_NANOS.addAndGet(nanos);\n    +            Iterator<AtomicLong> sleepTimesIter = THREAD_SLEEP_TIMES_NANOS.values().iterator();\n    +            while (sleepTimesIter.hasNext()) {\n    +                AtomicLong curr = sleepTimesIter.next();\n    +                if (SIMULATED_CURR_TIME_NANOS.get() >= curr.get()) {\n    +                    sleepTimesIter.remove();\n    +                }\n    +            }\n    +            LOG.debug(\"Advanced simulated time to {}\", newTime);\n    +        }\n    --- End diff --\n    \n    That's not why this change is added. I want to make sure that when a test does `LocalCluster.advanceClusterTime`, all sleeping threads that are supposed to wake up actually get a chance to run before `waitForIdle` is checked again. The issue is that if we don't remove the thread from the map here, there isn't (as far as I can tell) a guarantee that the sleeping threads actually woke up.\r\n    \r\n    For example, if a test has a loop\r\n    ```\r\n    while (some condition)\r\n      some code \r\n      LocalCluster.advanceClusterTime\r\n    ```\r\n    the first call to advanceClusterTime will wait until all threads are sleeping. If thread 1 is told to sleep for 1ms, it will enter the THREAD_SLEEP_TIMES_NANOS map. On the next iteration, `LocalCluster.advanceClusterTime` will increment the time, which should cause thread 1 to wake up. If the testing thread is \"too fast\", it might recheck `waitForIdle` and catch thread 1 before it manages to wake up and remove itself from THREAD_SLEEP_TIMES_NANOS. This causes LocalCluster.advanceClusterTime to return before the cluster is actually idle, because thread 1 will wake up and start running again after advanceClusterTime returns.\r\n    \r\n    The effect is you can't be sure that all threads are actually idle once LocalCluster.advanceClusterTime returns.\n","created":"2018-06-25T16:19:36.779+0000","updated":"2018-06-25T16:19:36.779+0000","started":"2018-06-25T16:19:36.779+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"115492","issueId":"13167864"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13167864/worklog/116494","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user revans2 commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/2734#discussion_r198569630\n  \n    --- Diff: storm-client/src/jvm/org/apache/storm/utils/Time.java ---\n    @@ -185,8 +173,17 @@ public static void advanceTimeNanos(long nanos) {\n             if (nanos < 0) {\n                 throw new IllegalArgumentException(\"advanceTime only accepts positive time as an argument\");\n             }\n    -        long newTime = SIMULATED_CURR_TIME_NANOS.addAndGet(nanos);\n    -        LOG.debug(\"Advanced simulated time to {}\", newTime);\n    +        synchronized (SLEEP_TIMES_LOCK) {\n    +            long newTime = SIMULATED_CURR_TIME_NANOS.addAndGet(nanos);\n    +            Iterator<AtomicLong> sleepTimesIter = THREAD_SLEEP_TIMES_NANOS.values().iterator();\n    +            while (sleepTimesIter.hasNext()) {\n    +                AtomicLong curr = sleepTimesIter.next();\n    +                if (SIMULATED_CURR_TIME_NANOS.get() >= curr.get()) {\n    +                    sleepTimesIter.remove();\n    +                }\n    +            }\n    +            LOG.debug(\"Advanced simulated time to {}\", newTime);\n    +        }\n    --- End diff --\n    \n    OK +1\n","created":"2018-06-27T17:02:30.834+0000","updated":"2018-06-27T17:02:30.834+0000","started":"2018-06-27T17:02:30.833+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"116494","issueId":"13167864"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13167864/worklog/116502","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user asfgit closed the pull request at:\n\n    https://github.com/apache/storm/pull/2734\n","created":"2018-06-27T17:36:41.132+0000","updated":"2018-06-27T17:36:41.132+0000","started":"2018-06-27T17:36:41.131+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"116502","issueId":"13167864"}]},"customfield_12311820":"0|i3v667:"}}