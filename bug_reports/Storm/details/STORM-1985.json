{"expand":"renderedFields,names,schema,operations,editmeta,changelog,versionedRepresentations","id":"12990991","self":"https://issues.apache.org/jira/rest/api/2/issue/12990991","key":"STORM-1985","fields":{"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype","name":"Bug","subtask":false,"avatarId":21133},"timespent":14400,"project":{"self":"https://issues.apache.org/jira/rest/api/2/project/12314820","id":"12314820","key":"STORM","name":"Apache Storm","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/projectavatar?pid=12314820&avatarId=21667","24x24":"https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12314820&avatarId=21667","16x16":"https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12314820&avatarId=21667","32x32":"https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12314820&avatarId=21667"},"projectCategory":{"self":"https://issues.apache.org/jira/rest/api/2/projectCategory/13260","id":"13260","description":"Apache Storm Related","name":"Storm"}},"fixVersions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12334657","id":"12334657","name":"2.0.0","archived":false,"released":false}],"aggregatetimespent":14400,"resolution":{"self":"https://issues.apache.org/jira/rest/api/2/resolution/1","id":"1","description":"A fix for this issue is checked into the tree and tested.","name":"Fixed"},"customfield_12312322":null,"customfield_12310220":"2016-08-15T13:21:42.494+0000","customfield_12312520":null,"customfield_12312323":null,"customfield_12312521":"Tue Oct 25 18:34:45 UTC 2016","customfield_12312320":null,"customfield_12310222":"1_*:*_1_*:*_8432786197_*|*_6_*:*_1_*:*_0","customfield_12310420":"9223372036854775807","customfield_12312321":null,"resolutiondate":"2016-10-25T18:34:44.966+0000","workratio":-1,"customfield_12312328":null,"customfield_12312329":null,"customfield_12312923":null,"customfield_12312326":null,"customfield_12312920":null,"customfield_12310300":null,"customfield_12312327":null,"customfield_12312921":null,"customfield_12312324":null,"customfield_12312720":null,"customfield_12312325":null,"lastViewed":null,"watches":{"self":"https://issues.apache.org/jira/rest/api/2/issue/STORM-1985/watchers","watchCount":3,"isWatching":false},"created":"2016-07-20T04:08:19.898+0000","priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.svg","name":"Major","id":"3"},"labels":["newbie"],"customfield_12312333":null,"customfield_12312334":null,"customfield_12313422":"false","customfield_12310310":"2.0","customfield_12312331":null,"customfield_12312332":null,"timeestimate":0,"aggregatetimeoriginalestimate":null,"customfield_12311120":null,"customfield_12312330":null,"versions":[],"customfield_12312339":null,"issuelinks":[],"assignee":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bkamal","name":"bkamal","key":"bkamal","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kamal","active":true,"timeZone":"Etc/UTC"},"customfield_12312337":null,"customfield_12312338":null,"updated":"2016-10-25T18:34:46.061+0000","customfield_12312335":null,"customfield_12312336":null,"status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Done"}},"components":[{"self":"https://issues.apache.org/jira/rest/api/2/component/12327950","id":"12327950","name":"storm-core","description":"Core storm daemons and APIs including trident"}],"timeoriginalestimate":null,"description":"After STORM-1976, Nimbus doesn't clean up corrupted topologies.\n(corrupted topology means the topology whose codes are not available on blobstore.)\n\nAlso after STORM-1977, no Nimbus is gaining leadership if one or more topologies are corrupted, which means all nimbuses will be no-op.\n\nSo we should provide a tool to kill specific topology without accessing leader nimbus (because there's no leader nimbus at that time). The tool should also determine which topologies are corrupted, and show its list or clean up automatically.","customfield_10010":null,"timetracking":{"remainingEstimate":"0h","timeSpent":"4h","remainingEstimateSeconds":0,"timeSpentSeconds":14400},"customfield_12312026":null,"customfield_12312023":null,"customfield_12312024":null,"attachment":[{"self":"https://issues.apache.org/jira/rest/api/2/attachment/12825880","id":"12825880","filename":"AdminCommands.java","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bkamal","name":"bkamal","key":"bkamal","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kamal","active":true,"timeZone":"Etc/UTC"},"created":"2016-08-27T18:09:33.834+0000","size":3910,"mimeType":"text/x-java-source","content":"https://issues.apache.org/jira/secure/attachment/12825880/AdminCommands.java"},{"self":"https://issues.apache.org/jira/rest/api/2/attachment/12824748","id":"12824748","filename":"proposal_admin_tool_design.docx","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bkamal","name":"bkamal","key":"bkamal","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kamal","active":true,"timeZone":"Etc/UTC"},"created":"2016-08-21T21:01:18.736+0000","size":82148,"mimeType":"application/vnd.openxmlformats-officedocument.wordprocessingml.document","content":"https://issues.apache.org/jira/secure/attachment/12824748/proposal_admin_tool_design.docx"}],"customfield_12312340":null,"aggregatetimeestimate":0,"customfield_12312341":null,"customfield_12312220":null,"customfield_12312022":null,"customfield_12310921":null,"customfield_12310920":"9223372036854775807","customfield_12312823":null,"summary":"Provide a tool for showing and killing corrupted topology","creator":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kabhwan","name":"kabhwan","key":"kabhwan","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jungtaek Lim","active":true,"timeZone":"Asia/Seoul"},"subtasks":[],"reporter":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kabhwan","name":"kabhwan","key":"kabhwan","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jungtaek Lim","active":true,"timeZone":"Asia/Seoul"},"customfield_12310291":null,"customfield_12310290":null,"aggregateprogress":{"progress":14400,"total":14400,"percent":100},"environment":null,"customfield_12313520":null,"customfield_12311020":null,"duedate":null,"customfield_12310250":null,"progress":{"progress":14400,"total":14400,"percent":100},"comment":{"comments":[{"self":"https://issues.apache.org/jira/rest/api/2/issue/12990991/comment/15385289","id":"15385289","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kabhwan","name":"kabhwan","key":"kabhwan","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jungtaek Lim","active":true,"timeZone":"Asia/Seoul"},"body":"I'd like to add 'newbie' label, since this can be done with only understanding of cleanup-corrupt-topologies!\n\nhttps://github.com/apache/storm/pull/1572/files","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kabhwan","name":"kabhwan","key":"kabhwan","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jungtaek Lim","active":true,"timeZone":"Asia/Seoul"},"created":"2016-07-20T04:12:23.868+0000","updated":"2016-07-20T04:12:23.868+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12990991/comment/15420963","id":"15420963","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=revans2","name":"revans2","key":"revans2","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Robert Joseph Evans","active":true,"timeZone":"America/Chicago"},"body":"It was asked on the mailing list where this code should live.  This was my answer.\n\nbq. My guess is that this is going to be a new tool.  I think we want to start looking into supporting a storm admin tool that will give users that have access to super user credentials access to directly examine/modify the state of a running storm cluster, zookeeper, blobstore, and local state. I don't expect you to do all of that work, but at least starting a place for a storm admin command in my opinion is the best place for this.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=revans2","name":"revans2","key":"revans2","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Robert Joseph Evans","active":true,"timeZone":"America/Chicago"},"created":"2016-08-15T13:21:42.494+0000","updated":"2016-08-15T13:21:42.494+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12990991/comment/15421377","id":"15421377","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bkamal","name":"bkamal","key":"bkamal","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kamal","active":true,"timeZone":"Etc/UTC"},"body":"Hi Bobby,\n\nThanks for answering my query. \n\nDoes it make sense to have this admin tool as part of Storm UI or it should be altogether a new command line tool.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bkamal","name":"bkamal","key":"bkamal","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kamal","active":true,"timeZone":"Etc/UTC"},"created":"2016-08-15T18:01:41.048+0000","updated":"2016-08-15T18:01:41.048+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12990991/comment/15421384","id":"15421384","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=revans2","name":"revans2","key":"revans2","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Robert Joseph Evans","active":true,"timeZone":"America/Chicago"},"body":"I would start off with command line, if you are feeling ambitious you could look at adding a UI component to it.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=revans2","name":"revans2","key":"revans2","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Robert Joseph Evans","active":true,"timeZone":"America/Chicago"},"created":"2016-08-15T18:04:41.769+0000","updated":"2016-08-15T18:04:41.769+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12990991/comment/15423897","id":"15423897","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bkamal","name":"bkamal","key":"bkamal","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kamal","active":true,"timeZone":"Etc/UTC"},"body":"I agree to your point. Being a newbie I would prefer to start with smaller steps and first work on command line tool. I'll think over and validate  my approach with you soon.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bkamal","name":"bkamal","key":"bkamal","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kamal","active":true,"timeZone":"Etc/UTC"},"created":"2016-08-17T05:10:37.266+0000","updated":"2016-08-17T05:10:37.266+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12990991/comment/15429897","id":"15429897","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bkamal","name":"bkamal","key":"bkamal","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kamal","active":true,"timeZone":"Etc/UTC"},"body":"I tried to think over the admin tool design and put down my thoughts in the attached document. Please look into this and let me know your views.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bkamal","name":"bkamal","key":"bkamal","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kamal","active":true,"timeZone":"Etc/UTC"},"created":"2016-08-21T21:01:18.770+0000","updated":"2016-08-21T21:01:18.770+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12990991/comment/15430399","id":"15430399","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kabhwan","name":"kabhwan","key":"kabhwan","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jungtaek Lim","active":true,"timeZone":"Asia/Seoul"},"body":"[~bkamal]\nThanks for working on this. Since Storm already has several daemons and also REST API server, I'd like to see admin tool by not adding more daemons. My intention was just a command line tool which directly communicates with ZK, Nimbus, or so (need to address authentication) but originally this was an idea from [~revans2] so would like to see his opinion regarding this.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kabhwan","name":"kabhwan","key":"kabhwan","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jungtaek Lim","active":true,"timeZone":"Asia/Seoul"},"created":"2016-08-22T09:23:43.429+0000","updated":"2016-08-22T09:23:43.429+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12990991/comment/15430751","id":"15430751","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=revans2","name":"revans2","key":"revans2","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Robert Joseph Evans","active":true,"timeZone":"America/Chicago"},"body":"I personally would prefer a tool that pretends to be Nimbus and acts like Nimbus.  Meaning it would connect to zookeeper, blobstore, local caches, etc. just as if it were the nimbus daemon. We have run into situations in the past where nimbus is down because of bad state stored somewhere.  Having a tool that can do everything nimbus does is important.  Having a separate daemon to do this feels too complicated, and also exposes a lot more potential for attack.  At the beginning I would say just have a command line tool that will create a [ClusterState|https://github.com/apache/storm/blob/master/storm-core/src/jvm/org/apache/storm/cluster/IStormClusterState.java] a [BlobStore|https://github.com/apache/storm/blob/master/storm-core/src/jvm/org/apache/storm/blobstore/BlobStore.java] and possibly a [LocalState|https://github.com/apache/storm/blob/master/storm-core/src/jvm/org/apache/storm/utils/LocalState.java] like nimbus currently does.  Once those are created for this project we would just then run through some code very similar to [cleanup-corrupt-topologies!|https://github.com/apache/storm/pull/1572/files].\n\nIn the future we could have it do many more things.  Having a UI in the future would probably need a separate daemon for security reasons, but we use this type of operation so rarely that I don't see much value in setting up an RPC daemon for it.  If we want a UI have the UI be baked into the admin command so it would be a web process that is running with the same privlages as nimbus, and there is no need for RPC at all, just run it locally.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=revans2","name":"revans2","key":"revans2","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Robert Joseph Evans","active":true,"timeZone":"America/Chicago"},"created":"2016-08-22T13:31:38.554+0000","updated":"2016-08-22T13:31:38.554+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12990991/comment/15441997","id":"15441997","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bkamal","name":"bkamal","key":"bkamal","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kamal","active":true,"timeZone":"Etc/UTC"},"body":"Thanks Jungtaek and Bobby for the clarification. I tried to write skeleton class based on your input. Please review the attached class and I'll further work on this based on your comments. \n\nPlease also let me know which package this class should reside.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bkamal","name":"bkamal","key":"bkamal","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kamal","active":true,"timeZone":"Etc/UTC"},"created":"2016-08-27T18:09:33.840+0000","updated":"2016-08-27T18:09:33.840+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12990991/comment/15449339","id":"15449339","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=revans2","name":"revans2","key":"revans2","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Robert Joseph Evans","active":true,"timeZone":"America/Chicago"},"body":"Please put the class in org.apache.storm.command.  A pull request against https://github.com/apache/storm is preferable to posting a patch in the JIRA.  Just make sure to include the jira number (STORM-1985) in the title of the pull request.\n\nThere are a number of design/usability choices that I would like to see fixed.\n\nhttps://github.com/apache/storm/blob/master/storm-core/src/jvm/org/apache/storm/command/Blobstore.java\n\nHas a better framework for having a single command with multiple sub commands.  I would prefer to see admin be similar, having a special hard coded string with spaces in it does not fit with the rest of storm.\n\nThe code you posed is not complete and has a big TODO in it.\n\nThe code that you do have looks correct.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=revans2","name":"revans2","key":"revans2","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Robert Joseph Evans","active":true,"timeZone":"America/Chicago"},"created":"2016-08-30T15:39:59.450+0000","updated":"2016-08-30T15:39:59.450+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12990991/comment/15469414","id":"15469414","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bkamal","name":"bkamal","key":"bkamal","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kamal","active":true,"timeZone":"Etc/UTC"},"body":"Thanks for the input and sorry for the delay as some travel came up for me.\n\nPlease review the pull request\nhttps://github.com/apache/storm/pull/1677\n\nHope it is correct as I have created it first time.\n\nAlso please suggest in case we need to implement more admin commands.\n\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bkamal","name":"bkamal","key":"bkamal","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kamal","active":true,"timeZone":"Etc/UTC"},"created":"2016-09-07T03:39:44.995+0000","updated":"2016-09-07T03:40:44.885+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12990991/comment/15494102","id":"15494102","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bkamal","name":"bkamal","key":"bkamal","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kamal","active":true,"timeZone":"Etc/UTC"},"body":"Applied the review comments. Please take a look.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bkamal","name":"bkamal","key":"bkamal","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kamal","active":true,"timeZone":"Etc/UTC"},"created":"2016-09-15T18:04:42.856+0000","updated":"2016-09-15T18:04:42.856+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12990991/comment/15606097","id":"15606097","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=revans2","name":"revans2","key":"revans2","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Robert Joseph Evans","active":true,"timeZone":"America/Chicago"},"body":"Thanks [~bkamal],\n\nI merged this into master.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=revans2","name":"revans2","key":"revans2","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Robert Joseph Evans","active":true,"timeZone":"America/Chicago"},"created":"2016-10-25T18:34:45.955+0000","updated":"2016-10-25T18:34:45.955+0000"}],"maxResults":13,"total":13,"startAt":0},"votes":{"self":"https://issues.apache.org/jira/rest/api/2/issue/STORM-1985/votes","votes":0,"hasVoted":false},"worklog":{"startAt":0,"maxResults":20,"total":27,"worklogs":[{"self":"https://issues.apache.org/jira/rest/api/2/issue/12990991/worklog/28258","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"GitHub user kamleshbhatt opened a pull request:\n\n    https://github.com/apache/storm/pull/1677\n\n    STORM-1985: Admin Commands\n\n    \n\nYou can merge this pull request into a Git repository by running:\n\n    $ git pull https://github.com/kamleshbhatt/storm master\n\nAlternatively you can review and apply these changes as the patch at:\n\n    https://github.com/apache/storm/pull/1677.patch\n\nTo close this pull request, make a commit to your master/trunk branch\nwith (at least) the following in the commit message:\n\n    This closes #1677\n    \n----\ncommit 5414768a1f03f03efb3b18cf1f13c28a1d661331\nAuthor: kamleshbhatt <kbhatt2005@gmail.com>\nDate:   2016-08-06T05:35:31Z\n\n    Merge pull request #1 from apache/master\n    \n    Update\n\ncommit a6f807d259382093ed474d89148fa82a90117693\nAuthor: kamleshbhatt <kbhatt2005@gmail.com>\nDate:   2016-09-06T16:21:09Z\n\n    Merge pull request #2 from apache/master\n    \n    Update\n\ncommit 8ebb8ca96784b565be4659fe0c9e7b19cdc6978e\nAuthor: kamleshbhatt <kbhatt2005@gmail.com>\nDate:   2016-09-07T02:57:35Z\n\n    Admin Commands\n\ncommit 1ab0a0fa49acec384da46b7c3f557b5ed453e289\nAuthor: kamleshbhatt <kbhatt2005@gmail.com>\nDate:   2016-09-07T02:59:55Z\n\n    Merge branch 'master' of https://github.com/kamleshbhatt/storm\n\n----\n","created":"2016-09-07T03:10:23.889+0000","updated":"2016-09-07T03:10:23.889+0000","started":"2016-09-07T03:10:23.889+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"28258","issueId":"12990991"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12990991/worklog/28310","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user revans2 commented on the issue:\n\n    https://github.com/apache/storm/pull/1677\n  \n    For reference the original code that this is replacing was\n    ```\n    (defn cleanup-corrupt-topologies! [nimbus]\n      (let [storm-cluster-state (:storm-cluster-state nimbus)\n            blob-store (:blob-store nimbus)\n            code-ids (set (code-ids blob-store))\n            active-topologies (set (.active-storms storm-cluster-state))\n            corrupt-topologies (set/difference active-topologies code-ids)]\n        (doseq [corrupt corrupt-topologies]\n          (log-message \"Corrupt topology \" corrupt \" has state on zookeeper but doesn't have a local dir on Nimbus. Cleaning up...\")\n          (.remove-storm! storm-cluster-state corrupt)\n          (if (instance? LocalFsBlobStore blob-store)\n            (doseq [blob-key (get-key-list-from-id (:conf nimbus) corrupt)]\n              (.remove-blobstore-key! storm-cluster-state blob-key))))))\n    ```\n","created":"2016-09-07T17:21:06.734+0000","updated":"2016-09-07T17:21:06.734+0000","started":"2016-09-07T17:21:06.733+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"28310","issueId":"12990991"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12990991/worklog/28314","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user revans2 commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/1677#discussion_r77867791\n  \n    --- Diff: storm-core/src/jvm/org/apache/storm/command/AdminCommands.java ---\n    @@ -0,0 +1,114 @@\n    +/**\n    + * Licensed to the Apache Software Foundation (ASF) under one\n    + * or more contributor license agreements.  See the NOTICE file\n    + * distributed with this work for additional information\n    + * regarding copyright ownership.  The ASF licenses this file\n    + * to you under the Apache License, Version 2.0 (the\n    + * \"License\"); you may not use this file except in compliance\n    + * with the License.  You may obtain a copy of the License at\n    + *\n    + * http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +package org.apache.storm.command;\n    +\n    +import com.google.common.base.Joiner;\n    +import com.google.common.collect.Sets;\n    +import org.apache.curator.framework.CuratorFramework;\n    +import org.apache.storm.Config;\n    +import org.apache.storm.blobstore.ClientBlobStore;\n    +import org.apache.storm.callback.DefaultWatcherCallBack;\n    +import org.apache.storm.cluster.ClusterStateContext;\n    +import org.apache.storm.cluster.ClusterUtils;\n    +import org.apache.storm.cluster.DaemonType;\n    +import org.apache.storm.cluster.IStormClusterState;\n    +import org.apache.storm.utils.Utils;\n    +import org.apache.storm.zookeeper.Zookeeper;\n    +import org.apache.zookeeper.ZooDefs;\n    +import org.apache.zookeeper.data.ACL;\n    +import org.slf4j.Logger;\n    +import org.slf4j.LoggerFactory;\n    +import org.apache.storm.utils.ConfigUtils;\n    +\n    +import java.util.*;\n    +\n    +public class AdminCommands {\n    +\n    +    private static final Logger LOG = LoggerFactory.getLogger(Deactivate.class);\n    +    private static ClientBlobStore clientBlobStore;\n    +    private static IStormClusterState stormClusterState;\n    +    private static CuratorFramework zk;\n    +    private static Map conf;\n    +\n    +    public static void main(String [] args) throws Exception {\n    +\n    +        if (args.length == 0) {\n    +            throw new IllegalArgumentException(\"Missing command.\");\n    +        }\n    +        initialize();\n    +        String command = args[0];\n    +        String[] newArgs = Arrays.copyOfRange(args, 1, args.length);\n    +        switch (command) {\n    +            case \"remove_corrupt_topologies\":\n    +                removeCorruptTopologies();\n    +                break;\n    +            default:\n    +                throw new RuntimeException(\"\" + command + \" is not a supported admin command\");\n    +        }\n    +\n    +    }\n    +\n    +    private static void initialize() {\n    +        Map conf = ConfigUtils.readStormConfig();\n    +        ClientBlobStore clientBlobStore = Utils.getClientBlobStore(conf);\n    --- End diff --\n    \n    The original code produced a nimbus blob store, not a client blob store.\n    ```\n    blob-store (Utils/getNimbusBlobStore conf (NimbusInfo/fromConf conf))\n    ```\n    \n    The nimbus blob store gives you super user privlages and when nimbus is down it will still work.\n","created":"2016-09-07T17:26:05.558+0000","updated":"2016-09-07T17:26:05.558+0000","started":"2016-09-07T17:26:05.557+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"28314","issueId":"12990991"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12990991/worklog/28317","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user revans2 commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/1677#discussion_r77868535\n  \n    --- Diff: storm-core/src/jvm/org/apache/storm/command/AdminCommands.java ---\n    @@ -0,0 +1,114 @@\n    +/**\n    + * Licensed to the Apache Software Foundation (ASF) under one\n    + * or more contributor license agreements.  See the NOTICE file\n    + * distributed with this work for additional information\n    + * regarding copyright ownership.  The ASF licenses this file\n    + * to you under the Apache License, Version 2.0 (the\n    + * \"License\"); you may not use this file except in compliance\n    + * with the License.  You may obtain a copy of the License at\n    + *\n    + * http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +package org.apache.storm.command;\n    +\n    +import com.google.common.base.Joiner;\n    +import com.google.common.collect.Sets;\n    +import org.apache.curator.framework.CuratorFramework;\n    +import org.apache.storm.Config;\n    +import org.apache.storm.blobstore.ClientBlobStore;\n    +import org.apache.storm.callback.DefaultWatcherCallBack;\n    +import org.apache.storm.cluster.ClusterStateContext;\n    +import org.apache.storm.cluster.ClusterUtils;\n    +import org.apache.storm.cluster.DaemonType;\n    +import org.apache.storm.cluster.IStormClusterState;\n    +import org.apache.storm.utils.Utils;\n    +import org.apache.storm.zookeeper.Zookeeper;\n    +import org.apache.zookeeper.ZooDefs;\n    +import org.apache.zookeeper.data.ACL;\n    +import org.slf4j.Logger;\n    +import org.slf4j.LoggerFactory;\n    +import org.apache.storm.utils.ConfigUtils;\n    +\n    +import java.util.*;\n    +\n    +public class AdminCommands {\n    +\n    +    private static final Logger LOG = LoggerFactory.getLogger(Deactivate.class);\n    +    private static ClientBlobStore clientBlobStore;\n    +    private static IStormClusterState stormClusterState;\n    +    private static CuratorFramework zk;\n    +    private static Map conf;\n    +\n    +    public static void main(String [] args) throws Exception {\n    +\n    +        if (args.length == 0) {\n    +            throw new IllegalArgumentException(\"Missing command.\");\n    +        }\n    +        initialize();\n    +        String command = args[0];\n    +        String[] newArgs = Arrays.copyOfRange(args, 1, args.length);\n    +        switch (command) {\n    +            case \"remove_corrupt_topologies\":\n    +                removeCorruptTopologies();\n    +                break;\n    +            default:\n    +                throw new RuntimeException(\"\" + command + \" is not a supported admin command\");\n    +        }\n    +\n    +    }\n    +\n    +    private static void initialize() {\n    +        Map conf = ConfigUtils.readStormConfig();\n    +        ClientBlobStore clientBlobStore = Utils.getClientBlobStore(conf);\n    +        List<String> servers = (List<String>) conf.get(Config.STORM_ZOOKEEPER_SERVERS);\n    +        Object port = conf.get(Config.STORM_ZOOKEEPER_PORT);\n    +        List<ACL> acls = null;\n    +        if (Utils.isZkAuthenticationConfiguredStormServer(conf)) {\n    +            acls = adminZkAcls();\n    +        }\n    +        try {\n    +            IStormClusterState stormClusterState = ClusterUtils.mkStormClusterState(conf, acls, new ClusterStateContext(DaemonType.UNKNOWN));\n    --- End diff --\n    \n    This should be `DaemonType.NIMBUS`  We are pretending to be nimbus.  For now it should not make much of a difference, but in the future it might.\n","created":"2016-09-07T17:30:43.732+0000","updated":"2016-09-07T17:30:43.732+0000","started":"2016-09-07T17:30:43.732+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"28317","issueId":"12990991"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12990991/worklog/28318","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user revans2 commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/1677#discussion_r77868697\n  \n    --- Diff: storm-core/src/jvm/org/apache/storm/command/AdminCommands.java ---\n    @@ -0,0 +1,114 @@\n    +/**\n    + * Licensed to the Apache Software Foundation (ASF) under one\n    + * or more contributor license agreements.  See the NOTICE file\n    + * distributed with this work for additional information\n    + * regarding copyright ownership.  The ASF licenses this file\n    + * to you under the Apache License, Version 2.0 (the\n    + * \"License\"); you may not use this file except in compliance\n    + * with the License.  You may obtain a copy of the License at\n    + *\n    + * http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +package org.apache.storm.command;\n    +\n    +import com.google.common.base.Joiner;\n    +import com.google.common.collect.Sets;\n    +import org.apache.curator.framework.CuratorFramework;\n    +import org.apache.storm.Config;\n    +import org.apache.storm.blobstore.ClientBlobStore;\n    +import org.apache.storm.callback.DefaultWatcherCallBack;\n    +import org.apache.storm.cluster.ClusterStateContext;\n    +import org.apache.storm.cluster.ClusterUtils;\n    +import org.apache.storm.cluster.DaemonType;\n    +import org.apache.storm.cluster.IStormClusterState;\n    +import org.apache.storm.utils.Utils;\n    +import org.apache.storm.zookeeper.Zookeeper;\n    +import org.apache.zookeeper.ZooDefs;\n    +import org.apache.zookeeper.data.ACL;\n    +import org.slf4j.Logger;\n    +import org.slf4j.LoggerFactory;\n    +import org.apache.storm.utils.ConfigUtils;\n    +\n    +import java.util.*;\n    +\n    +public class AdminCommands {\n    +\n    +    private static final Logger LOG = LoggerFactory.getLogger(Deactivate.class);\n    +    private static ClientBlobStore clientBlobStore;\n    +    private static IStormClusterState stormClusterState;\n    +    private static CuratorFramework zk;\n    +    private static Map conf;\n    +\n    +    public static void main(String [] args) throws Exception {\n    +\n    +        if (args.length == 0) {\n    +            throw new IllegalArgumentException(\"Missing command.\");\n    +        }\n    +        initialize();\n    +        String command = args[0];\n    +        String[] newArgs = Arrays.copyOfRange(args, 1, args.length);\n    +        switch (command) {\n    +            case \"remove_corrupt_topologies\":\n    +                removeCorruptTopologies();\n    +                break;\n    +            default:\n    +                throw new RuntimeException(\"\" + command + \" is not a supported admin command\");\n    +        }\n    +\n    +    }\n    +\n    +    private static void initialize() {\n    +        Map conf = ConfigUtils.readStormConfig();\n    +        ClientBlobStore clientBlobStore = Utils.getClientBlobStore(conf);\n    +        List<String> servers = (List<String>) conf.get(Config.STORM_ZOOKEEPER_SERVERS);\n    +        Object port = conf.get(Config.STORM_ZOOKEEPER_PORT);\n    +        List<ACL> acls = null;\n    +        if (Utils.isZkAuthenticationConfiguredStormServer(conf)) {\n    +            acls = adminZkAcls();\n    +        }\n    +        try {\n    +            IStormClusterState stormClusterState = ClusterUtils.mkStormClusterState(conf, acls, new ClusterStateContext(DaemonType.UNKNOWN));\n    +        } catch (Exception e) {\n    +            LOG.error(\"admin can't create stormClusterState\");\n    +            throw Utils.wrapInRuntime(e);\n    --- End diff --\n    \n    We were wrapping things in runtime exceptions originally because clojure does not honor/support the Exception declarations.  Here we are pure java so there is no need to wrap things in Runtime.\n","created":"2016-09-07T17:31:49.297+0000","updated":"2016-09-07T17:31:49.297+0000","started":"2016-09-07T17:31:49.297+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"28318","issueId":"12990991"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12990991/worklog/28319","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user revans2 commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/1677#discussion_r77869312\n  \n    --- Diff: storm-core/src/jvm/org/apache/storm/command/AdminCommands.java ---\n    @@ -0,0 +1,114 @@\n    +/**\n    + * Licensed to the Apache Software Foundation (ASF) under one\n    + * or more contributor license agreements.  See the NOTICE file\n    + * distributed with this work for additional information\n    + * regarding copyright ownership.  The ASF licenses this file\n    + * to you under the Apache License, Version 2.0 (the\n    + * \"License\"); you may not use this file except in compliance\n    + * with the License.  You may obtain a copy of the License at\n    + *\n    + * http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +package org.apache.storm.command;\n    +\n    +import com.google.common.base.Joiner;\n    +import com.google.common.collect.Sets;\n    +import org.apache.curator.framework.CuratorFramework;\n    +import org.apache.storm.Config;\n    +import org.apache.storm.blobstore.ClientBlobStore;\n    +import org.apache.storm.callback.DefaultWatcherCallBack;\n    +import org.apache.storm.cluster.ClusterStateContext;\n    +import org.apache.storm.cluster.ClusterUtils;\n    +import org.apache.storm.cluster.DaemonType;\n    +import org.apache.storm.cluster.IStormClusterState;\n    +import org.apache.storm.utils.Utils;\n    +import org.apache.storm.zookeeper.Zookeeper;\n    +import org.apache.zookeeper.ZooDefs;\n    +import org.apache.zookeeper.data.ACL;\n    +import org.slf4j.Logger;\n    +import org.slf4j.LoggerFactory;\n    +import org.apache.storm.utils.ConfigUtils;\n    +\n    +import java.util.*;\n    +\n    +public class AdminCommands {\n    +\n    +    private static final Logger LOG = LoggerFactory.getLogger(Deactivate.class);\n    +    private static ClientBlobStore clientBlobStore;\n    +    private static IStormClusterState stormClusterState;\n    +    private static CuratorFramework zk;\n    +    private static Map conf;\n    +\n    +    public static void main(String [] args) throws Exception {\n    +\n    +        if (args.length == 0) {\n    +            throw new IllegalArgumentException(\"Missing command.\");\n    +        }\n    +        initialize();\n    +        String command = args[0];\n    +        String[] newArgs = Arrays.copyOfRange(args, 1, args.length);\n    +        switch (command) {\n    +            case \"remove_corrupt_topologies\":\n    +                removeCorruptTopologies();\n    +                break;\n    +            default:\n    +                throw new RuntimeException(\"\" + command + \" is not a supported admin command\");\n    +        }\n    +\n    +    }\n    +\n    +    private static void initialize() {\n    +        Map conf = ConfigUtils.readStormConfig();\n    +        ClientBlobStore clientBlobStore = Utils.getClientBlobStore(conf);\n    +        List<String> servers = (List<String>) conf.get(Config.STORM_ZOOKEEPER_SERVERS);\n    +        Object port = conf.get(Config.STORM_ZOOKEEPER_PORT);\n    +        List<ACL> acls = null;\n    +        if (Utils.isZkAuthenticationConfiguredStormServer(conf)) {\n    +            acls = adminZkAcls();\n    +        }\n    +        try {\n    +            IStormClusterState stormClusterState = ClusterUtils.mkStormClusterState(conf, acls, new ClusterStateContext(DaemonType.UNKNOWN));\n    +        } catch (Exception e) {\n    +            LOG.error(\"admin can't create stormClusterState\");\n    +            throw Utils.wrapInRuntime(e);\n    +        }\n    +        CuratorFramework zk = Zookeeper.mkClient(conf, servers, port, \"\", new DefaultWatcherCallBack(),conf);\n    +    }\n    +\n    +    // we might think of moving this method in Utils class\n    +    private static List<ACL> adminZkAcls() {\n    +        final List<ACL> acls = new ArrayList<>();\n    +        acls.add(ZooDefs.Ids.CREATOR_ALL_ACL.get(0));\n    +        acls.add(new ACL((ZooDefs.Perms.READ ^ ZooDefs.Perms.CREATE), ZooDefs.Ids.ANYONE_ID_UNSAFE));\n    +        return acls;\n    +    }\n    +\n    +    private static void removeCorruptTopologies( ) {\n    +        Iterator<String> corruptTopologies = listCorruptTopologies();\n    +        while(corruptTopologies.hasNext()) {\n    +            stormClusterState.removeStorm(corruptTopologies.next());\n    --- End diff --\n    \n    In the original code we also deleted the blobs.\n    \n    ```\n          (if (instance? LocalFsBlobStore blob-store)\n            (doseq [blob-key (get-key-list-from-id (:conf nimbus) corrupt)]\n              (.remove-blobstore-key! storm-cluster-state blob-key))))))\n    ```\n","created":"2016-09-07T17:35:19.623+0000","updated":"2016-09-07T17:35:19.623+0000","started":"2016-09-07T17:35:19.623+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"28319","issueId":"12990991"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12990991/worklog/28322","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user revans2 commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/1677#discussion_r77869729\n  \n    --- Diff: storm-core/src/jvm/org/apache/storm/command/AdminCommands.java ---\n    @@ -0,0 +1,114 @@\n    +/**\n    + * Licensed to the Apache Software Foundation (ASF) under one\n    + * or more contributor license agreements.  See the NOTICE file\n    + * distributed with this work for additional information\n    + * regarding copyright ownership.  The ASF licenses this file\n    + * to you under the Apache License, Version 2.0 (the\n    + * \"License\"); you may not use this file except in compliance\n    + * with the License.  You may obtain a copy of the License at\n    + *\n    + * http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +package org.apache.storm.command;\n    +\n    +import com.google.common.base.Joiner;\n    +import com.google.common.collect.Sets;\n    +import org.apache.curator.framework.CuratorFramework;\n    +import org.apache.storm.Config;\n    +import org.apache.storm.blobstore.ClientBlobStore;\n    +import org.apache.storm.callback.DefaultWatcherCallBack;\n    +import org.apache.storm.cluster.ClusterStateContext;\n    +import org.apache.storm.cluster.ClusterUtils;\n    +import org.apache.storm.cluster.DaemonType;\n    +import org.apache.storm.cluster.IStormClusterState;\n    +import org.apache.storm.utils.Utils;\n    +import org.apache.storm.zookeeper.Zookeeper;\n    +import org.apache.zookeeper.ZooDefs;\n    +import org.apache.zookeeper.data.ACL;\n    +import org.slf4j.Logger;\n    +import org.slf4j.LoggerFactory;\n    +import org.apache.storm.utils.ConfigUtils;\n    +\n    +import java.util.*;\n    +\n    +public class AdminCommands {\n    +\n    +    private static final Logger LOG = LoggerFactory.getLogger(Deactivate.class);\n    +    private static ClientBlobStore clientBlobStore;\n    +    private static IStormClusterState stormClusterState;\n    +    private static CuratorFramework zk;\n    +    private static Map conf;\n    +\n    +    public static void main(String [] args) throws Exception {\n    +\n    +        if (args.length == 0) {\n    +            throw new IllegalArgumentException(\"Missing command.\");\n    +        }\n    +        initialize();\n    +        String command = args[0];\n    +        String[] newArgs = Arrays.copyOfRange(args, 1, args.length);\n    +        switch (command) {\n    +            case \"remove_corrupt_topologies\":\n    +                removeCorruptTopologies();\n    +                break;\n    +            default:\n    +                throw new RuntimeException(\"\" + command + \" is not a supported admin command\");\n    +        }\n    +\n    +    }\n    +\n    +    private static void initialize() {\n    +        Map conf = ConfigUtils.readStormConfig();\n    +        ClientBlobStore clientBlobStore = Utils.getClientBlobStore(conf);\n    +        List<String> servers = (List<String>) conf.get(Config.STORM_ZOOKEEPER_SERVERS);\n    +        Object port = conf.get(Config.STORM_ZOOKEEPER_PORT);\n    +        List<ACL> acls = null;\n    +        if (Utils.isZkAuthenticationConfiguredStormServer(conf)) {\n    +            acls = adminZkAcls();\n    +        }\n    +        try {\n    +            IStormClusterState stormClusterState = ClusterUtils.mkStormClusterState(conf, acls, new ClusterStateContext(DaemonType.UNKNOWN));\n    +        } catch (Exception e) {\n    +            LOG.error(\"admin can't create stormClusterState\");\n    +            throw Utils.wrapInRuntime(e);\n    +        }\n    +        CuratorFramework zk = Zookeeper.mkClient(conf, servers, port, \"\", new DefaultWatcherCallBack(),conf);\n    +    }\n    +\n    +    // we might think of moving this method in Utils class\n    +    private static List<ACL> adminZkAcls() {\n    +        final List<ACL> acls = new ArrayList<>();\n    +        acls.add(ZooDefs.Ids.CREATOR_ALL_ACL.get(0));\n    +        acls.add(new ACL((ZooDefs.Perms.READ ^ ZooDefs.Perms.CREATE), ZooDefs.Ids.ANYONE_ID_UNSAFE));\n    +        return acls;\n    +    }\n    +\n    +    private static void removeCorruptTopologies( ) {\n    +        Iterator<String> corruptTopologies = listCorruptTopologies();\n    +        while(corruptTopologies.hasNext()) {\n    +            stormClusterState.removeStorm(corruptTopologies.next());\n    +        }\n    +    }\n    +\n    +    private static Iterator<String> listCorruptTopologies() {\n    +        Iterator<String> blobStoreTopologyIds = clientBlobStore.listKeys();\n    --- End diff --\n    \n    This is very different from the code-ids function\n    ```\n    (defn code-ids [blob-store]\n      (let [to-id (reify KeyFilter\n                    (filter [this key] (ConfigUtils/getIdFromBlobKey key)))]\n    (set (.filterAndListKeys blob-store to-id))))\n    ```\n    \n    This lists all of the keys in the blob store.  code-ids Converts the key into a topology id.\n","created":"2016-09-07T17:37:59.157+0000","updated":"2016-09-07T17:37:59.157+0000","started":"2016-09-07T17:37:59.157+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"28322","issueId":"12990991"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12990991/worklog/28324","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user revans2 commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/1677#discussion_r77870589\n  \n    --- Diff: storm-core/src/jvm/org/apache/storm/command/AdminCommands.java ---\n    @@ -0,0 +1,114 @@\n    +/**\n    + * Licensed to the Apache Software Foundation (ASF) under one\n    + * or more contributor license agreements.  See the NOTICE file\n    + * distributed with this work for additional information\n    + * regarding copyright ownership.  The ASF licenses this file\n    + * to you under the Apache License, Version 2.0 (the\n    + * \"License\"); you may not use this file except in compliance\n    + * with the License.  You may obtain a copy of the License at\n    + *\n    + * http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +package org.apache.storm.command;\n    +\n    +import com.google.common.base.Joiner;\n    +import com.google.common.collect.Sets;\n    +import org.apache.curator.framework.CuratorFramework;\n    +import org.apache.storm.Config;\n    +import org.apache.storm.blobstore.ClientBlobStore;\n    +import org.apache.storm.callback.DefaultWatcherCallBack;\n    +import org.apache.storm.cluster.ClusterStateContext;\n    +import org.apache.storm.cluster.ClusterUtils;\n    +import org.apache.storm.cluster.DaemonType;\n    +import org.apache.storm.cluster.IStormClusterState;\n    +import org.apache.storm.utils.Utils;\n    +import org.apache.storm.zookeeper.Zookeeper;\n    +import org.apache.zookeeper.ZooDefs;\n    +import org.apache.zookeeper.data.ACL;\n    +import org.slf4j.Logger;\n    +import org.slf4j.LoggerFactory;\n    +import org.apache.storm.utils.ConfigUtils;\n    +\n    +import java.util.*;\n    +\n    +public class AdminCommands {\n    +\n    +    private static final Logger LOG = LoggerFactory.getLogger(Deactivate.class);\n    +    private static ClientBlobStore clientBlobStore;\n    +    private static IStormClusterState stormClusterState;\n    +    private static CuratorFramework zk;\n    +    private static Map conf;\n    +\n    +    public static void main(String [] args) throws Exception {\n    +\n    +        if (args.length == 0) {\n    +            throw new IllegalArgumentException(\"Missing command.\");\n    +        }\n    +        initialize();\n    +        String command = args[0];\n    +        String[] newArgs = Arrays.copyOfRange(args, 1, args.length);\n    +        switch (command) {\n    +            case \"remove_corrupt_topologies\":\n    +                removeCorruptTopologies();\n    +                break;\n    +            default:\n    +                throw new RuntimeException(\"\" + command + \" is not a supported admin command\");\n    +        }\n    +\n    +    }\n    +\n    +    private static void initialize() {\n    +        Map conf = ConfigUtils.readStormConfig();\n    +        ClientBlobStore clientBlobStore = Utils.getClientBlobStore(conf);\n    +        List<String> servers = (List<String>) conf.get(Config.STORM_ZOOKEEPER_SERVERS);\n    +        Object port = conf.get(Config.STORM_ZOOKEEPER_PORT);\n    +        List<ACL> acls = null;\n    +        if (Utils.isZkAuthenticationConfiguredStormServer(conf)) {\n    +            acls = adminZkAcls();\n    +        }\n    +        try {\n    +            IStormClusterState stormClusterState = ClusterUtils.mkStormClusterState(conf, acls, new ClusterStateContext(DaemonType.UNKNOWN));\n    +        } catch (Exception e) {\n    +            LOG.error(\"admin can't create stormClusterState\");\n    +            throw Utils.wrapInRuntime(e);\n    +        }\n    +        CuratorFramework zk = Zookeeper.mkClient(conf, servers, port, \"\", new DefaultWatcherCallBack(),conf);\n    +    }\n    +\n    +    // we might think of moving this method in Utils class\n    +    private static List<ACL> adminZkAcls() {\n    +        final List<ACL> acls = new ArrayList<>();\n    +        acls.add(ZooDefs.Ids.CREATOR_ALL_ACL.get(0));\n    +        acls.add(new ACL((ZooDefs.Perms.READ ^ ZooDefs.Perms.CREATE), ZooDefs.Ids.ANYONE_ID_UNSAFE));\n    +        return acls;\n    +    }\n    +\n    +    private static void removeCorruptTopologies( ) {\n    +        Iterator<String> corruptTopologies = listCorruptTopologies();\n    +        while(corruptTopologies.hasNext()) {\n    +            stormClusterState.removeStorm(corruptTopologies.next());\n    +        }\n    +    }\n    +\n    +    private static Iterator<String> listCorruptTopologies() {\n    +        Iterator<String> blobStoreTopologyIds = clientBlobStore.listKeys();\n    +        Set<String> activeTopologyIds = new HashSet<>(Zookeeper.getChildren(zk, conf.get(Config.STORM_ZOOKEEPER_ROOT) + ClusterUtils.STORMS_SUBTREE, false));\n    --- End diff --\n    \n    Lets not go to Zookeeper directly this is removing the IStormClusterState abstraction.\n    \n    ```\n            Set<String> activeTopologyIds = new HashSet<>(stormClusterState.activeStorms());\n    ```\n","created":"2016-09-07T17:42:51.393+0000","updated":"2016-09-07T17:42:51.393+0000","started":"2016-09-07T17:42:51.393+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"28324","issueId":"12990991"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12990991/worklog/28325","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user revans2 commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/1677#discussion_r77870908\n  \n    --- Diff: storm-core/src/jvm/org/apache/storm/command/AdminCommands.java ---\n    @@ -0,0 +1,114 @@\n    +/**\n    + * Licensed to the Apache Software Foundation (ASF) under one\n    + * or more contributor license agreements.  See the NOTICE file\n    + * distributed with this work for additional information\n    + * regarding copyright ownership.  The ASF licenses this file\n    + * to you under the Apache License, Version 2.0 (the\n    + * \"License\"); you may not use this file except in compliance\n    + * with the License.  You may obtain a copy of the License at\n    + *\n    + * http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +package org.apache.storm.command;\n    +\n    +import com.google.common.base.Joiner;\n    +import com.google.common.collect.Sets;\n    +import org.apache.curator.framework.CuratorFramework;\n    +import org.apache.storm.Config;\n    +import org.apache.storm.blobstore.ClientBlobStore;\n    +import org.apache.storm.callback.DefaultWatcherCallBack;\n    +import org.apache.storm.cluster.ClusterStateContext;\n    +import org.apache.storm.cluster.ClusterUtils;\n    +import org.apache.storm.cluster.DaemonType;\n    +import org.apache.storm.cluster.IStormClusterState;\n    +import org.apache.storm.utils.Utils;\n    +import org.apache.storm.zookeeper.Zookeeper;\n    +import org.apache.zookeeper.ZooDefs;\n    +import org.apache.zookeeper.data.ACL;\n    +import org.slf4j.Logger;\n    +import org.slf4j.LoggerFactory;\n    +import org.apache.storm.utils.ConfigUtils;\n    +\n    +import java.util.*;\n    +\n    +public class AdminCommands {\n    +\n    +    private static final Logger LOG = LoggerFactory.getLogger(Deactivate.class);\n    +    private static ClientBlobStore clientBlobStore;\n    +    private static IStormClusterState stormClusterState;\n    +    private static CuratorFramework zk;\n    +    private static Map conf;\n    +\n    +    public static void main(String [] args) throws Exception {\n    +\n    +        if (args.length == 0) {\n    +            throw new IllegalArgumentException(\"Missing command.\");\n    +        }\n    +        initialize();\n    +        String command = args[0];\n    +        String[] newArgs = Arrays.copyOfRange(args, 1, args.length);\n    +        switch (command) {\n    +            case \"remove_corrupt_topologies\":\n    +                removeCorruptTopologies();\n    +                break;\n    +            default:\n    +                throw new RuntimeException(\"\" + command + \" is not a supported admin command\");\n    +        }\n    +\n    +    }\n    +\n    +    private static void initialize() {\n    +        Map conf = ConfigUtils.readStormConfig();\n    +        ClientBlobStore clientBlobStore = Utils.getClientBlobStore(conf);\n    +        List<String> servers = (List<String>) conf.get(Config.STORM_ZOOKEEPER_SERVERS);\n    +        Object port = conf.get(Config.STORM_ZOOKEEPER_PORT);\n    +        List<ACL> acls = null;\n    +        if (Utils.isZkAuthenticationConfiguredStormServer(conf)) {\n    +            acls = adminZkAcls();\n    +        }\n    +        try {\n    +            IStormClusterState stormClusterState = ClusterUtils.mkStormClusterState(conf, acls, new ClusterStateContext(DaemonType.UNKNOWN));\n    +        } catch (Exception e) {\n    +            LOG.error(\"admin can't create stormClusterState\");\n    +            throw Utils.wrapInRuntime(e);\n    +        }\n    +        CuratorFramework zk = Zookeeper.mkClient(conf, servers, port, \"\", new DefaultWatcherCallBack(),conf);\n    +    }\n    +\n    +    // we might think of moving this method in Utils class\n    +    private static List<ACL> adminZkAcls() {\n    +        final List<ACL> acls = new ArrayList<>();\n    +        acls.add(ZooDefs.Ids.CREATOR_ALL_ACL.get(0));\n    +        acls.add(new ACL((ZooDefs.Perms.READ ^ ZooDefs.Perms.CREATE), ZooDefs.Ids.ANYONE_ID_UNSAFE));\n    +        return acls;\n    +    }\n    +\n    +    private static void removeCorruptTopologies( ) {\n    +        Iterator<String> corruptTopologies = listCorruptTopologies();\n    +        while(corruptTopologies.hasNext()) {\n    +            stormClusterState.removeStorm(corruptTopologies.next());\n    +        }\n    +    }\n    +\n    +    private static Iterator<String> listCorruptTopologies() {\n    +        Iterator<String> blobStoreTopologyIds = clientBlobStore.listKeys();\n    +        Set<String> activeTopologyIds = new HashSet<>(Zookeeper.getChildren(zk, conf.get(Config.STORM_ZOOKEEPER_ROOT) + ClusterUtils.STORMS_SUBTREE, false));\n    +        HashSet<String> blobTopologyIds = Sets.newHashSet(blobStoreTopologyIds);\n    +        Sets.SetView<String> diffTopology = Sets.difference(activeTopologyIds, blobTopologyIds);\n    +        LOG.info(\"active-topology-ids [{}] blob-topology-ids [{}] diff-topology [{}]\",\n    +                generateJoinedString(activeTopologyIds), generateJoinedString(blobTopologyIds),\n    +                generateJoinedString(diffTopology));\n    +        return diffTopology.iterator();\n    +    }\n    +\n    +    private static String generateJoinedString(Set<String> activeTopologyIds) {\n    --- End diff --\n    \n    I'm not sure we need this.  toString of most sets already return this information.\n","created":"2016-09-07T17:44:47.205+0000","updated":"2016-09-07T17:44:47.205+0000","started":"2016-09-07T17:44:47.204+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"28325","issueId":"12990991"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12990991/worklog/28327","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user revans2 commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/1677#discussion_r77871179\n  \n    --- Diff: storm-core/src/jvm/org/apache/storm/command/AdminCommands.java ---\n    @@ -0,0 +1,114 @@\n    +/**\n    + * Licensed to the Apache Software Foundation (ASF) under one\n    + * or more contributor license agreements.  See the NOTICE file\n    + * distributed with this work for additional information\n    + * regarding copyright ownership.  The ASF licenses this file\n    + * to you under the Apache License, Version 2.0 (the\n    + * \"License\"); you may not use this file except in compliance\n    + * with the License.  You may obtain a copy of the License at\n    + *\n    + * http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +package org.apache.storm.command;\n    +\n    +import com.google.common.base.Joiner;\n    +import com.google.common.collect.Sets;\n    +import org.apache.curator.framework.CuratorFramework;\n    +import org.apache.storm.Config;\n    +import org.apache.storm.blobstore.ClientBlobStore;\n    +import org.apache.storm.callback.DefaultWatcherCallBack;\n    +import org.apache.storm.cluster.ClusterStateContext;\n    +import org.apache.storm.cluster.ClusterUtils;\n    +import org.apache.storm.cluster.DaemonType;\n    +import org.apache.storm.cluster.IStormClusterState;\n    +import org.apache.storm.utils.Utils;\n    +import org.apache.storm.zookeeper.Zookeeper;\n    +import org.apache.zookeeper.ZooDefs;\n    +import org.apache.zookeeper.data.ACL;\n    +import org.slf4j.Logger;\n    +import org.slf4j.LoggerFactory;\n    +import org.apache.storm.utils.ConfigUtils;\n    +\n    +import java.util.*;\n    +\n    +public class AdminCommands {\n    +\n    +    private static final Logger LOG = LoggerFactory.getLogger(Deactivate.class);\n    +    private static ClientBlobStore clientBlobStore;\n    +    private static IStormClusterState stormClusterState;\n    +    private static CuratorFramework zk;\n    +    private static Map conf;\n    --- End diff --\n    \n    I don't really like static global values.  For now this is fine, but if we add in more commands this could become a real mess, and I think it would be a lot cleaner to have an inner class that we instantiate to preform the operation for different sub commands.  \n","created":"2016-09-07T17:46:29.268+0000","updated":"2016-09-07T17:46:29.268+0000","started":"2016-09-07T17:46:29.267+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"28327","issueId":"12990991"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12990991/worklog/28328","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user revans2 commented on the issue:\n\n    https://github.com/apache/storm/pull/1677\n  \n    I am done going through the code.  Beyond this we need to update storm.py to add in this command, and documentation on how to use it.\n","created":"2016-09-07T17:47:43.222+0000","updated":"2016-09-07T17:47:43.222+0000","started":"2016-09-07T17:47:43.221+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"28328","issueId":"12990991"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12990991/worklog/29143","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user kamleshbhatt commented on the issue:\n\n    https://github.com/apache/storm/pull/1677\n  \n    Applied the review comments. Please take a look.\n","created":"2016-09-15T17:59:22.924+0000","updated":"2016-09-15T17:59:22.924+0000","started":"2016-09-15T17:59:22.924+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"29143","issueId":"12990991"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12990991/worklog/29438","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user revans2 commented on the issue:\n\n    https://github.com/apache/storm/pull/1677\n  \n    Looks good to me.  I have a few tests that I want to run, but in general it looks good.\n","created":"2016-09-21T14:15:38.691+0000","updated":"2016-09-21T14:15:38.691+0000","started":"2016-09-21T14:15:38.690+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"29438","issueId":"12990991"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12990991/worklog/29455","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user revans2 commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/1677#discussion_r79897541\n  \n    --- Diff: bin/storm.py ---\n    @@ -572,6 +572,22 @@ def kill_workers(*args):\n             jvmtype=\"-client\",\n             extrajars=[USER_CONF_DIR, os.path.join(STORM_DIR, \"bin\")])\n     \n    +def admin_command(*args):\n    --- End diff --\n    \n    can we rename this just admin, instead of admin_command?\n","created":"2016-09-21T18:18:13.345+0000","updated":"2016-09-21T18:18:13.345+0000","started":"2016-09-21T18:18:13.345+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"29455","issueId":"12990991"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12990991/worklog/29454","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user revans2 commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/1677#discussion_r79897599\n  \n    --- Diff: bin/storm.py ---\n    @@ -572,6 +572,22 @@ def kill_workers(*args):\n             jvmtype=\"-client\",\n             extrajars=[USER_CONF_DIR, os.path.join(STORM_DIR, \"bin\")])\n     \n    +def admin_command(*args):\n    +    \"\"\"Syntax: [storm admin_command cmd]\n    +\n    +    This is a proxy of nimbus and allow to execute admin commands. As of now it supports\n    +    command to remove corrupt topologies.\n    +    Nimbus doesn't clean up corrupted topologies automatically. This command should clean\n    +    up corrupt topologies i.e.topologies whose codes are not available on blobstore.\n    +    In future this command would support more admin commnds.\n    +    \"\"\"\n    --- End diff --\n    \n    Can we list the sub commands here?\n","created":"2016-09-21T18:18:13.345+0000","updated":"2016-09-21T18:18:13.345+0000","started":"2016-09-21T18:18:13.345+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"29454","issueId":"12990991"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12990991/worklog/29457","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user revans2 commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/1677#discussion_r79898747\n  \n    --- Diff: storm-core/src/jvm/org/apache/storm/command/AdminCommands.java ---\n    @@ -0,0 +1,133 @@\n    +/**\n    + * Licensed to the Apache Software Foundation (ASF) under one\n    + * or more contributor license agreements.  See the NOTICE file\n    + * distributed with this work for additional information\n    + * regarding copyright ownership.  The ASF licenses this file\n    + * to you under the Apache License, Version 2.0 (the\n    + * \"License\"); you may not use this file except in compliance\n    + * with the License.  You may obtain a copy of the License at\n    + *\n    + * http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +package org.apache.storm.command;\n    +\n    +import com.google.common.base.Joiner;\n    +import com.google.common.collect.Sets;\n    +import org.apache.curator.framework.CuratorFramework;\n    +import org.apache.storm.Config;\n    +import org.apache.storm.blobstore.BlobStore;\n    +import org.apache.storm.blobstore.ClientBlobStore;\n    +import org.apache.storm.blobstore.KeyFilter;\n    +import org.apache.storm.blobstore.LocalFsBlobStore;\n    +import org.apache.storm.callback.DefaultWatcherCallBack;\n    +import org.apache.storm.cluster.ClusterStateContext;\n    +import org.apache.storm.cluster.ClusterUtils;\n    +import org.apache.storm.cluster.DaemonType;\n    +import org.apache.storm.cluster.IStormClusterState;\n    +import org.apache.storm.nimbus.NimbusInfo;\n    +import org.apache.storm.utils.Utils;\n    +import org.apache.storm.zookeeper.Zookeeper;\n    +import org.apache.zookeeper.ZooDefs;\n    +import org.apache.zookeeper.data.ACL;\n    +import org.slf4j.Logger;\n    +import org.slf4j.LoggerFactory;\n    +import org.apache.storm.utils.ConfigUtils;\n    +\n    +import java.util.*;\n    +\n    +public class AdminCommands {\n    +\n    +    private static final Logger LOG = LoggerFactory.getLogger(Deactivate.class);\n    +    private static BlobStore nimbusBlobStore;\n    +    private static IStormClusterState stormClusterState;\n    +    private static CuratorFramework zk;\n    +    private static Map conf;\n    +\n    +    public static void main(String [] args) throws Exception {\n    +\n    +        if (args.length == 0) {\n    +            throw new IllegalArgumentException(\"Missing command.\");\n    +        }\n    +        initialize();\n    +        String command = args[0];\n    +        String[] newArgs = Arrays.copyOfRange(args, 1, args.length);\n    +        switch (command) {\n    +            case \"remove_corrupt_topologies\":\n    +                removeCorruptTopologies();\n    +                break;\n    +            default:\n    --- End diff --\n    \n    Also the Exception itself is surrounded by lots and lots of log messages that make it hard to see what is happening or why a command failed.  Might be nice to print some things out with white space around them to help distinguish what is happening.\n","created":"2016-09-21T18:18:13.387+0000","updated":"2016-09-21T18:18:13.387+0000","started":"2016-09-21T18:18:13.387+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"29457","issueId":"12990991"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12990991/worklog/29456","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user revans2 commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/1677#discussion_r79897811\n  \n    --- Diff: storm-core/src/jvm/org/apache/storm/command/AdminCommands.java ---\n    @@ -0,0 +1,133 @@\n    +/**\n    + * Licensed to the Apache Software Foundation (ASF) under one\n    + * or more contributor license agreements.  See the NOTICE file\n    + * distributed with this work for additional information\n    + * regarding copyright ownership.  The ASF licenses this file\n    + * to you under the Apache License, Version 2.0 (the\n    + * \"License\"); you may not use this file except in compliance\n    + * with the License.  You may obtain a copy of the License at\n    + *\n    + * http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +package org.apache.storm.command;\n    +\n    +import com.google.common.base.Joiner;\n    +import com.google.common.collect.Sets;\n    +import org.apache.curator.framework.CuratorFramework;\n    +import org.apache.storm.Config;\n    +import org.apache.storm.blobstore.BlobStore;\n    +import org.apache.storm.blobstore.ClientBlobStore;\n    +import org.apache.storm.blobstore.KeyFilter;\n    +import org.apache.storm.blobstore.LocalFsBlobStore;\n    +import org.apache.storm.callback.DefaultWatcherCallBack;\n    +import org.apache.storm.cluster.ClusterStateContext;\n    +import org.apache.storm.cluster.ClusterUtils;\n    +import org.apache.storm.cluster.DaemonType;\n    +import org.apache.storm.cluster.IStormClusterState;\n    +import org.apache.storm.nimbus.NimbusInfo;\n    +import org.apache.storm.utils.Utils;\n    +import org.apache.storm.zookeeper.Zookeeper;\n    +import org.apache.zookeeper.ZooDefs;\n    +import org.apache.zookeeper.data.ACL;\n    +import org.slf4j.Logger;\n    +import org.slf4j.LoggerFactory;\n    +import org.apache.storm.utils.ConfigUtils;\n    +\n    +import java.util.*;\n    +\n    +public class AdminCommands {\n    +\n    +    private static final Logger LOG = LoggerFactory.getLogger(Deactivate.class);\n    +    private static BlobStore nimbusBlobStore;\n    +    private static IStormClusterState stormClusterState;\n    +    private static CuratorFramework zk;\n    +    private static Map conf;\n    +\n    +    public static void main(String [] args) throws Exception {\n    +\n    +        if (args.length == 0) {\n    +            throw new IllegalArgumentException(\"Missing command.\");\n    +        }\n    +        initialize();\n    +        String command = args[0];\n    +        String[] newArgs = Arrays.copyOfRange(args, 1, args.length);\n    +        switch (command) {\n    +            case \"remove_corrupt_topologies\":\n    +                removeCorruptTopologies();\n    +                break;\n    +            default:\n    --- End diff --\n    \n    Can we list the sub commands here before throwing the exception.\n","created":"2016-09-21T18:18:13.387+0000","updated":"2016-09-21T18:18:13.387+0000","started":"2016-09-21T18:18:13.387+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"29456","issueId":"12990991"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12990991/worklog/29458","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user revans2 commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/1677#discussion_r79898829\n  \n    --- Diff: storm-core/src/jvm/org/apache/storm/command/AdminCommands.java ---\n    @@ -0,0 +1,133 @@\n    +/**\n    + * Licensed to the Apache Software Foundation (ASF) under one\n    + * or more contributor license agreements.  See the NOTICE file\n    + * distributed with this work for additional information\n    + * regarding copyright ownership.  The ASF licenses this file\n    + * to you under the Apache License, Version 2.0 (the\n    + * \"License\"); you may not use this file except in compliance\n    + * with the License.  You may obtain a copy of the License at\n    + *\n    + * http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +package org.apache.storm.command;\n    +\n    +import com.google.common.base.Joiner;\n    +import com.google.common.collect.Sets;\n    +import org.apache.curator.framework.CuratorFramework;\n    +import org.apache.storm.Config;\n    +import org.apache.storm.blobstore.BlobStore;\n    +import org.apache.storm.blobstore.ClientBlobStore;\n    +import org.apache.storm.blobstore.KeyFilter;\n    +import org.apache.storm.blobstore.LocalFsBlobStore;\n    +import org.apache.storm.callback.DefaultWatcherCallBack;\n    +import org.apache.storm.cluster.ClusterStateContext;\n    +import org.apache.storm.cluster.ClusterUtils;\n    +import org.apache.storm.cluster.DaemonType;\n    +import org.apache.storm.cluster.IStormClusterState;\n    +import org.apache.storm.nimbus.NimbusInfo;\n    +import org.apache.storm.utils.Utils;\n    +import org.apache.storm.zookeeper.Zookeeper;\n    +import org.apache.zookeeper.ZooDefs;\n    +import org.apache.zookeeper.data.ACL;\n    +import org.slf4j.Logger;\n    +import org.slf4j.LoggerFactory;\n    +import org.apache.storm.utils.ConfigUtils;\n    +\n    +import java.util.*;\n    +\n    +public class AdminCommands {\n    +\n    +    private static final Logger LOG = LoggerFactory.getLogger(Deactivate.class);\n    +    private static BlobStore nimbusBlobStore;\n    +    private static IStormClusterState stormClusterState;\n    +    private static CuratorFramework zk;\n    +    private static Map conf;\n    +\n    +    public static void main(String [] args) throws Exception {\n    +\n    +        if (args.length == 0) {\n    +            throw new IllegalArgumentException(\"Missing command.\");\n    +        }\n    +        initialize();\n    +        String command = args[0];\n    +        String[] newArgs = Arrays.copyOfRange(args, 1, args.length);\n    +        switch (command) {\n    +            case \"remove_corrupt_topologies\":\n    +                removeCorruptTopologies();\n    +                break;\n    +            default:\n    --- End diff --\n    \n    Or not initialize until you know which command you are going to run.\n","created":"2016-09-21T18:18:42.145+0000","updated":"2016-09-21T18:18:42.145+0000","started":"2016-09-21T18:18:42.144+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"29458","issueId":"12990991"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12990991/worklog/29459","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user revans2 commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/1677#discussion_r79898972\n  \n    --- Diff: storm-core/src/jvm/org/apache/storm/command/AdminCommands.java ---\n    @@ -0,0 +1,133 @@\n    +/**\n    + * Licensed to the Apache Software Foundation (ASF) under one\n    + * or more contributor license agreements.  See the NOTICE file\n    + * distributed with this work for additional information\n    + * regarding copyright ownership.  The ASF licenses this file\n    + * to you under the Apache License, Version 2.0 (the\n    + * \"License\"); you may not use this file except in compliance\n    + * with the License.  You may obtain a copy of the License at\n    + *\n    + * http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +package org.apache.storm.command;\n    +\n    +import com.google.common.base.Joiner;\n    +import com.google.common.collect.Sets;\n    +import org.apache.curator.framework.CuratorFramework;\n    +import org.apache.storm.Config;\n    +import org.apache.storm.blobstore.BlobStore;\n    +import org.apache.storm.blobstore.ClientBlobStore;\n    +import org.apache.storm.blobstore.KeyFilter;\n    +import org.apache.storm.blobstore.LocalFsBlobStore;\n    +import org.apache.storm.callback.DefaultWatcherCallBack;\n    +import org.apache.storm.cluster.ClusterStateContext;\n    +import org.apache.storm.cluster.ClusterUtils;\n    +import org.apache.storm.cluster.DaemonType;\n    +import org.apache.storm.cluster.IStormClusterState;\n    +import org.apache.storm.nimbus.NimbusInfo;\n    +import org.apache.storm.utils.Utils;\n    +import org.apache.storm.zookeeper.Zookeeper;\n    +import org.apache.zookeeper.ZooDefs;\n    +import org.apache.zookeeper.data.ACL;\n    +import org.slf4j.Logger;\n    +import org.slf4j.LoggerFactory;\n    +import org.apache.storm.utils.ConfigUtils;\n    +\n    +import java.util.*;\n    +\n    +public class AdminCommands {\n    +\n    +    private static final Logger LOG = LoggerFactory.getLogger(Deactivate.class);\n    +    private static BlobStore nimbusBlobStore;\n    +    private static IStormClusterState stormClusterState;\n    +    private static CuratorFramework zk;\n    +    private static Map conf;\n    +\n    +    public static void main(String [] args) throws Exception {\n    +\n    +        if (args.length == 0) {\n    +            throw new IllegalArgumentException(\"Missing command.\");\n    +        }\n    +        initialize();\n    +        String command = args[0];\n    +        String[] newArgs = Arrays.copyOfRange(args, 1, args.length);\n    +        switch (command) {\n    +            case \"remove_corrupt_topologies\":\n    +                removeCorruptTopologies();\n    +                break;\n    +            default:\n    +                throw new RuntimeException(\"\" + command + \" is not a supported admin command\");\n    +        }\n    +\n    +    }\n    +\n    +    private static void initialize() {\n    +        Map conf = ConfigUtils.readStormConfig();\n    +        BlobStore nimbusBlobStore = Utils.getNimbusBlobStore (conf, NimbusInfo.fromConf(conf));\n    +        List<String> servers = (List<String>) conf.get(Config.STORM_ZOOKEEPER_SERVERS);\n    +        Object port = conf.get(Config.STORM_ZOOKEEPER_PORT);\n    +        List<ACL> acls = null;\n    +        if (Utils.isZkAuthenticationConfiguredStormServer(conf)) {\n    +            acls = adminZkAcls();\n    +        }\n    +        try {\n    +            IStormClusterState stormClusterState = ClusterUtils.mkStormClusterState(conf, acls, new ClusterStateContext(DaemonType.NIMBUS));\n    +        } catch (Exception e) {\n    +            LOG.error(\"admin can't create stormClusterState\");\n    +            new RuntimeException(e);\n    +        }\n    +        CuratorFramework zk = Zookeeper.mkClient(conf, servers, port, \"\", new DefaultWatcherCallBack(),conf);\n    +    }\n    +\n    +    // we might think of moving this method in Utils class\n    +    private static List<ACL> adminZkAcls() {\n    +        final List<ACL> acls = new ArrayList<>();\n    +        acls.add(ZooDefs.Ids.CREATOR_ALL_ACL.get(0));\n    +        acls.add(new ACL((ZooDefs.Perms.READ ^ ZooDefs.Perms.CREATE), ZooDefs.Ids.ANYONE_ID_UNSAFE));\n    +        return acls;\n    +    }\n    +\n    +    private static Set<String> getKeyListFromId( String corruptId) {\n    +        Set<String> keyLists = new HashSet<>();\n    +        keyLists.add(ConfigUtils.masterStormCodeKey(corruptId));\n    +        keyLists.add(ConfigUtils.masterStormConfKey(corruptId));\n    +        if(!ConfigUtils.isLocalMode(conf)) {\n    +            ConfigUtils.masterStormJarKey(corruptId);\n    +        }\n    +        return keyLists;\n    +    }\n    +\n    +    private static void removeCorruptTopologies( ) {\n    +        Iterator<String> corruptTopologies = listCorruptTopologies();\n    +        while(corruptTopologies.hasNext()) {\n    +            String corruptId = corruptTopologies.next();\n    +            stormClusterState.removeStorm(corruptId);\n    +            if(nimbusBlobStore instanceof LocalFsBlobStore) {\n    +                Iterator<String> blobKeys = getKeyListFromId(corruptId).iterator();\n    +                while(blobKeys.hasNext()) {\n    +                    stormClusterState.removeBlobstoreKey(blobKeys.next());\n    +                }\n    +            }\n    +        }\n    +    }\n    +\n    +    private static Iterator<String> listCorruptTopologies() {\n    +        Set<String> blobStoreTopologyIds = nimbusBlobStore.filterAndListKeys(new KeyFilter<String>() {\n    --- End diff --\n    \n    I am getting an NPE here when I run this.  Not totally sure why.\n","created":"2016-09-21T18:21:22.209+0000","updated":"2016-09-21T18:21:22.209+0000","started":"2016-09-21T18:21:22.208+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"29459","issueId":"12990991"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12990991/worklog/29626","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user kamleshbhatt commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/1677#discussion_r80293802\n  \n    --- Diff: bin/storm.py ---\n    @@ -572,6 +572,22 @@ def kill_workers(*args):\n             jvmtype=\"-client\",\n             extrajars=[USER_CONF_DIR, os.path.join(STORM_DIR, \"bin\")])\n     \n    +def admin_command(*args):\n    +    \"\"\"Syntax: [storm admin_command cmd]\n    +\n    +    This is a proxy of nimbus and allow to execute admin commands. As of now it supports\n    +    command to remove corrupt topologies.\n    +    Nimbus doesn't clean up corrupted topologies automatically. This command should clean\n    +    up corrupt topologies i.e.topologies whose codes are not available on blobstore.\n    +    In future this command would support more admin commnds.\n    +    \"\"\"\n    --- End diff --\n    \n    Done.\n","created":"2016-09-23T17:53:52.907+0000","updated":"2016-09-23T17:53:52.907+0000","started":"2016-09-23T17:53:52.907+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"29626","issueId":"12990991"}]},"customfield_12311820":"0|i318m7:"}}