{"expand":"renderedFields,names,schema,operations,editmeta,changelog,versionedRepresentations","id":"12839443","self":"https://issues.apache.org/jira/rest/api/2/issue/12839443","key":"STORM-904","fields":{"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype","name":"Bug","subtask":false,"avatarId":21133},"timespent":null,"project":{"self":"https://issues.apache.org/jira/rest/api/2/project/12314820","id":"12314820","key":"STORM","name":"Apache Storm","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/projectavatar?pid=12314820&avatarId=21667","24x24":"https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12314820&avatarId=21667","16x16":"https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12314820&avatarId=21667","32x32":"https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12314820&avatarId=21667"},"projectCategory":{"self":"https://issues.apache.org/jira/rest/api/2/projectCategory/13260","id":"13260","description":"Apache Storm Related","name":"Storm"}},"fixVersions":[],"aggregatetimespent":null,"resolution":null,"customfield_12312322":null,"customfield_12310220":"2015-07-09T20:53:32.693+0000","customfield_12312520":null,"customfield_12312323":null,"customfield_12312521":"Fri Dec 04 19:41:04 UTC 2015","customfield_12312320":null,"customfield_12310222":null,"customfield_12310420":"9223372036854775807","customfield_12312321":null,"resolutiondate":null,"workratio":-1,"customfield_12312328":null,"customfield_12312329":null,"customfield_12312923":null,"customfield_12312326":null,"customfield_12312920":null,"customfield_12310300":null,"customfield_12312327":null,"customfield_12312921":null,"customfield_12312324":null,"customfield_12312720":null,"customfield_12312325":null,"lastViewed":null,"watches":{"self":"https://issues.apache.org/jira/rest/api/2/issue/STORM-904/watchers","watchCount":3,"isWatching":false},"created":"2015-06-22T04:13:57.434+0000","priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.svg","name":"Major","id":"3"},"labels":[],"customfield_12312333":null,"customfield_12312334":null,"customfield_12313422":"false","customfield_12310310":"0.0","customfield_12312331":null,"customfield_12312332":null,"timeestimate":null,"aggregatetimeoriginalestimate":null,"customfield_12311120":null,"customfield_12312330":null,"versions":[],"customfield_12312339":null,"issuelinks":[{"id":"12430209","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12430209","type":{"id":"10030","name":"Reference","inward":"is related to","outward":"relates to","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"},"inwardIssue":{"id":"12736724","key":"STORM-473","self":"https://issues.apache.org/jira/rest/api/2/issue/12736724","fields":{"summary":"Provide BASH script (storm.sh)","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/5","description":"A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/resolved.png","name":"Resolved","id":"5","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Done"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/5","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/trivial.svg","name":"Trivial","id":"5"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/4","id":"4","description":"An improvement or enhancement to an existing feature or task.","iconUrl":"https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype","name":"Improvement","subtask":false,"avatarId":21140}}}}],"assignee":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=pshah","name":"pshah","key":"pshah","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Priyank Shah","active":true,"timeZone":"America/Los_Angeles"},"customfield_12312337":null,"customfield_12312338":null,"updated":"2015-12-04T19:41:04.305+0000","customfield_12312335":null,"customfield_12312336":null,"status":{"self":"https://issues.apache.org/jira/rest/api/2/status/1","description":"The issue is open and ready for the assignee to start work on it.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/open.png","name":"Open","id":"1","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/2","id":2,"key":"new","colorName":"blue-gray","name":"To Do"}},"components":[{"self":"https://issues.apache.org/jira/rest/api/2/component/12327950","id":"12327950","name":"storm-core","description":"Core storm daemons and APIs including trident"}],"timeoriginalestimate":null,"description":"Currently we have python and .cmd implementation for windows. This is becoming increasing difficult upkeep both versions. Lets make all the main code of starting daemons etc. to java and provider wrapper scripts in shell and batch for linux and windows respectively. ","customfield_10010":null,"timetracking":{},"customfield_12312026":null,"customfield_12312023":null,"customfield_12312024":null,"attachment":[],"customfield_12312340":null,"aggregatetimeestimate":null,"customfield_12312341":null,"customfield_12312220":null,"customfield_12312022":null,"customfield_12310921":null,"customfield_12310920":"9223372036854775807","customfield_12312823":null,"summary":"move storm bin commands to java and provide appropriate bindings for windows and linux","creator":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=sriharsha","name":"sriharsha","key":"sriharsha","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sriharsha Chintalapani","active":true,"timeZone":"America/Los_Angeles"},"subtasks":[],"reporter":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=sriharsha","name":"sriharsha","key":"sriharsha","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sriharsha Chintalapani","active":true,"timeZone":"America/Los_Angeles"},"customfield_12310291":null,"customfield_12310290":null,"aggregateprogress":{"progress":0,"total":0},"environment":null,"customfield_12313520":null,"customfield_12311020":null,"duedate":null,"customfield_12310250":null,"progress":{"progress":0,"total":0},"comment":{"comments":[{"self":"https://issues.apache.org/jira/rest/api/2/issue/12839443/comment/14621248","id":"14621248","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=pshah","name":"pshah","key":"pshah","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Priyank Shah","active":true,"timeZone":"America/Los_Angeles"},"body":"[~harsha_ch] what is the directory where i can find all the python and cmd scripts?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=pshah","name":"pshah","key":"pshah","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Priyank Shah","active":true,"timeZone":"America/Los_Angeles"},"created":"2015-07-09T20:53:32.693+0000","updated":"2015-07-09T20:53:32.693+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12839443/comment/14621252","id":"14621252","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=pshah","name":"pshah","key":"pshah","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Priyank Shah","active":true,"timeZone":"America/Los_Angeles"},"body":"[~harsha_ch] please ignore the previous comment. You already mentioned it in the subject and i found it. storm.py and storm.cmd in bin folder of storm git repo source code.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=pshah","name":"pshah","key":"pshah","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Priyank Shah","active":true,"timeZone":"America/Los_Angeles"},"created":"2015-07-09T20:56:17.052+0000","updated":"2015-07-09T20:56:17.052+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12839443/comment/14649599","id":"14649599","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"GitHub user priyank5485 opened a pull request:\n\n    https://github.com/apache/storm/pull/662\n\n    STORM-904: Move bin/storm command line to java.\n\n    \n\nYou can merge this pull request into a Git repository by running:\n\n    $ git pull https://github.com/priyank5485/storm storm-904\n\nAlternatively you can review and apply these changes as the patch at:\n\n    https://github.com/apache/storm/pull/662.patch\n\nTo close this pull request, make a commit to your master/trunk branch\nwith (at least) the following in the commit message:\n\n    This closes #662\n    \n----\ncommit 193f59e027a8ab95d72c8e386d66f0b90f9b86f9\nAuthor: Priyank <pshah@hortonworks.com>\nDate:   2015-07-17T23:45:13Z\n\n    Remove python and add a java class to support storm cli.\n    \n    Add a java class that encapsulates storm cli functionality currently\n    coded in two different places. storm, storm.py for bash and storm.cmd\n    for windows. Now both storm and storm.cmd will call the java class\n    eliminating python code and putting all the code in one place for bash\n    and windows respectively.\n\ncommit 793781cfd55c56f7184910fd744341351f6cc4bf\nAuthor: Priyank <pshah@hortonworks.com>\nDate:   2015-07-20T23:04:48Z\n\n    Add apace commons cli library for command line parsing\n\ncommit a425fc50ab9b518337d0c095ae80e9d78221e3fd\nAuthor: Priyank <pshah@hortonworks.com>\nDate:   2015-07-21T17:44:30Z\n\n    Adding version for dependency in pom file.\n\ncommit 5a4ec36ac17af69297dfc73aaa682b8e43edf5de\nAuthor: Priyank <pshah@hortonworks.com>\nDate:   2015-07-21T21:23:54Z\n\n    Sample code to test for apache commons cli.\n\ncommit 1a8240a558516110a5c14d3a4bb0b177ab76090b\nAuthor: Priyank <pshah@hortonworks.com>\nDate:   2015-07-22T23:40:40Z\n\n    Removing apache commons cli, renaming and some intiialization code.\n\ncommit b69e295e81216e992187737cc069ff66d2e74687\nAuthor: Priyank <pshah@hortonworks.com>\nDate:   2015-07-23T10:14:48Z\n\n    Some redesigning/refactoring.\n\ncommit 8c2fbeadbf699b5b286479649d133623c92bc85c\nAuthor: Priyank <pshah@hortonworks.com>\nDate:   2015-07-23T21:49:43Z\n\n    Add printUsage mainly.\n\ncommit 74f45c7c9d6ae813635c91ba14fdb1cd3dd24c74\nAuthor: Priyank <pshah@hortonworks.com>\nDate:   2015-07-24T18:49:15Z\n\n    Call storm command methods using reflection.\n\ncommit 10ba25f8c81e2fdc34f4ae3e0e2cdf9ecd142a4a\nAuthor: Priyank <pshah@hortonworks.com>\nDate:   2015-07-24T19:25:01Z\n\n    Add method boxes without code for other storm commands.\n\ncommit fb2022db8dda7a5183ee5a2cc64a7ef035006c80\nAuthor: Priyank <pshah@hortonworks.com>\nDate:   2015-07-27T17:59:20Z\n\n    Initial executeStorm method creating a new process.\n    \n    Need to test storm daemons if they can be killed using shutdown hooks.\n\ncommit 493b0dfeb7be2daa0a54e7dec2f3f716d0af0e26\nAuthor: Priyank <pshah@hortonworks.com>\nDate:   2015-07-29T07:02:49Z\n\n    Ship some more code over from python.\n\ncommit 3082d4f5ea2d66babe232e5ff49506b322385473\nAuthor: Priyank <pshah@hortonworks.com>\nDate:   2015-07-29T18:49:57Z\n\n    Fix an exception which failed to start the nimbus command.\n\ncommit c616068d90dd47fa61fbb670c2853805d7ccb324\nAuthor: Priyank <pshah@hortonworks.com>\nDate:   2015-07-29T21:53:27Z\n\n    Use exec to replace current process rather than creating a new one.\n\ncommit 06f4dcc17d8dcf3c81094557ed97ff117d6410ed\nAuthor: Priyank <pshah@hortonworks.com>\nDate:   2015-07-30T08:37:08Z\n\n    Add some commented code.\n\ncommit da0ad60438841a1f874c115cef27190a59401f4f\nAuthor: Priyank <pshah@hortonworks.com>\nDate:   2015-07-30T15:45:52Z\n\n    Add nil check for strings returned from conclave\n\ncommit 0b242adf0bc261e9140c3587b3eedd2141e31718\nAuthor: Priyank <pshah@hortonworks.com>\nDate:   2015-07-30T19:04:35Z\n\n    Fix an issue with passing options to storm command,\n\ncommit 0bb15782c171d336be905d2f5143865e288a8239\nAuthor: Priyank <pshah@hortonworks.com>\nDate:   2015-07-31T00:37:07Z\n\n    STORM-904: Add shutdown hook thread to kill subprocess.\n    \n    Does not work for kill -9. Need to debug.\n\n----\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2015-07-31T18:24:35.803+0000","updated":"2015-07-31T18:24:35.803+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12839443/comment/14649624","id":"14649624","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user priyank5485 commented on the pull request:\n\n    https://github.com/apache/storm/pull/662#issuecomment-126779134\n  \n    This PR aims at factoring out the logic for storm command line client which currently resides in two places. One in storm bash script and storm.py for Unix and storm.cmd for Windows. Idea is to create a java program that will be called from storm.cmd and storm bash script which will have all the logic from storm.py and storm.cmd in one place. This will help us maintain the storm client better since we will have only one file to change and in most cases only the base class that both Windows and Unix classes inherit from. I have already removed storm.py. I am working on finishing up the java file and also removing the storm.cmd file. Just putting it out there to elicit response to this approach from the community.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2015-07-31T18:37:14.946+0000","updated":"2015-07-31T18:37:14.946+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12839443/comment/14655066","id":"14655066","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user caofangkun commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/662#discussion_r36284000\n  \n    --- Diff: storm-core/src/jvm/backtype/storm/utils/StormCommandExecutor.java ---\n    @@ -0,0 +1,785 @@\n    +package backtype.storm.utils;\n    +\n    +import java.io.BufferedReader;\n    +import java.io.File;\n    +import java.io.InputStream;\n    +import java.io.InputStreamReader;\n    +import java.lang.reflect.InvocationTargetException;\n    +import java.lang.reflect.Method;\n    +import java.nio.charset.StandardCharsets;\n    +import java.util.*;\n    +\n    +import clojure.lang.IFn;\n    +import org.apache.commons.lang.StringUtils;\n    +import org.apache.commons.lang.SystemUtils;\n    +\n    +/**\n    + * Created by pshah on 7/17/15.\n    + */\n    +abstract class StormCommandExecutor {\n    +    final String NIMBUS_CLASS = \"backtype.storm.daemon.nimbus\";\n    +    final String SUPERVISOR_CLASS = \"backtype.storm.daemon.supervisor\";\n    +    final String UI_CLASS = \"backtype.storm.ui.core\";\n    +    final String LOGVIEWER_CLASS = \"backtype.storm.daemon.logviewer\";\n    +    final String DRPC_CLASS = \"backtype.storm.daemon.drpc\";\n    +    final String REPL_CLASS = \"clojure.main\";\n    +    final String ACTIVATE_CLASS = \"backtype.storm.command.activate\";\n    +    final String DEACTIVATE_CLASS = \"backtype.storm.command.deactivate\";\n    +    final String REBALANCE_CLASS = \"backtype.storm.command.rebalance\";\n    +    final String LIST_CLASS = \"backtype.storm.command.list\";\n    +    String stormHomeDirectory;\n    +    String userConfDirectory;\n    +    String stormConfDirectory;\n    +    String clusterConfDirectory;\n    +    String stormLibDirectory;\n    +    String stormBinDirectory;\n    +    String stormLog4jConfDirectory;\n    +    String configFile = \"\";\n    +    String javaCommand;\n    +    List<String> configOptions = new ArrayList<String>();\n    +    String stormExternalClasspath;\n    +    String stormExternalClasspathDaemon;\n    +    String fileSeparator;\n    +    final List<String> COMMANDS = Arrays.asList(\"jar\", \"kill\", \"shell\",\n    +            \"nimbus\", \"ui\", \"logviewer\", \"drpc\", \"supervisor\",\n    +            \"localconfvalue\",  \"remoteconfvalue\", \"repl\", \"classpath\",\n    +            \"activate\", \"deactivate\", \"rebalance\", \"help\",  \"list\",\n    +            \"dev-zookeeper\", \"version\", \"monitor\", \"upload-credentials\",\n    +            \"get-errors\");\n    +\n    +    public static void main (String[] args) {\n    +        for (String arg : args) {\n    +            System.out.println(\"Argument ++ is \" + arg);\n    +        }\n    +        StormCommandExecutor stormCommandExecutor;\n    +        if (System.getProperty(\"os.name\").startsWith(\"Windows\")) {\n    +            stormCommandExecutor = new WindowsStormCommandExecutor();\n    +        } else {\n    +            stormCommandExecutor = new UnixStormCommandExecutor();\n    +        }\n    +        stormCommandExecutor.initialize();\n    +        stormCommandExecutor.execute(args);\n    +    }\n    +\n    +    StormCommandExecutor () {\n    +\n    +    }\n    +\n    +    abstract void initialize ();\n    +\n    +    abstract void execute (String[] args);\n    +\n    +    void callMethod (String command, List<String> args) {\n    +        Class implementation = this.getClass();\n    +        String methodName = command.replace(\"-\", \"\") + \"Command\";\n    +        try {\n    +            Method method = implementation.getDeclaredMethod(methodName, List\n    +                    .class);\n    +            method.invoke(this, args);\n    +        } catch (NoSuchMethodException ex) {\n    +            System.out.println(\"No such method exception occured while trying\" +\n    +                    \" to run storm method \" + command);\n    +        } catch (IllegalAccessException ex) {\n    +            System.out.println(\"Illegal access exception occured while trying\" +\n    +                    \" to run storm method \" + command);\n    +        } catch (IllegalArgumentException ex) {\n    +            System.out.println(\"Illegal argument exception occured while \" +\n    +                    \"trying\" + \" to run storm method \" + command);\n    +        } catch (InvocationTargetException ex) {\n    +            System.out.println(\"Invocation target exception occured while \" +\n    +                    \"trying\" + \" to run storm method \" + command);\n    +        }\n    +    }\n    +}\n    +\n    +class UnixStormCommandExecutor extends StormCommandExecutor {\n    +\n    +    UnixStormCommandExecutor () {\n    +\n    +    }\n    +\n    +    void initialize () {\n    +        Collections.sort(this.COMMANDS);\n    +        this.fileSeparator = System .getProperty (\"file.separator\");\n    +        this.stormHomeDirectory = System.getenv(\"STORM_BASE_DIR\");\n    +        this.userConfDirectory = System.getProperty(\"user.home\") +\n    +                this.fileSeparator + \"\" +\n    +                \".storm\";\n    +        this.stormConfDirectory = System.getenv(\"STORM_CONF_DIR\");\n    +        this.clusterConfDirectory = this.stormConfDirectory == null ?  (this\n    +                .stormHomeDirectory + this.fileSeparator + \"conf\") : this\n    +                .stormConfDirectory;\n    +        File f = new File(this.userConfDirectory + this.fileSeparator +\n    +                \"storm.yaml\");\n    +        if (!f.isFile()) {\n    +            this.userConfDirectory = this.clusterConfDirectory;\n    +        }\n    +        this.stormLibDirectory = this.stormHomeDirectory + this.fileSeparator +\n    +                \"lib\";\n    +        this.stormBinDirectory = this.stormHomeDirectory + this.fileSeparator +\n    +                \"bin\";\n    +        this.stormLog4jConfDirectory = this.stormHomeDirectory +\n    +                this.fileSeparator + \"log4j2\";\n    +        if (System.getenv(\"JAVA_HOME\") != null) {\n    +            this.javaCommand = System.getenv(\"JAVA_HOME\") + this.fileSeparator +\n    +                    \"bin\" + this.fileSeparator + \"java\";\n    +            if (!(new File(this.javaCommand).exists())) {\n    +                System.out.println(\"ERROR:  JAVA_HOME is invalid.  Could not \" +\n    +                        \"find \" + this.javaCommand);\n    +                System.exit(1);\n    +            }\n    +        } else {\n    +            this.javaCommand = \"java\";\n    +        }\n    +        this.stormExternalClasspath = System.getenv(\"STORM_EXT_CLASSPATH\");\n    +        this.stormExternalClasspathDaemon = System.getenv\n    +                (\"STORM_EXT_CLASSPATH_DAEMON\");\n    +        if (!(new File(this.stormLibDirectory).exists())) {\n    +            System.out.println(\"******************************************\");\n    +            System.out.println(\"The storm client can only be run from within \" +\n    +                    \"a release. \" + \"You appear to be trying to run the client\" +\n    +                    \" from a checkout of Storm's source code.\");\n    +            System.out.println(\"You can download a Storm release at \" +\n    +                    \"http://storm-project.net/downloads.html\");\n    +            System.out.println(\"******************************************\");\n    +            System.exit(1);\n    +        }\n    +        //System.getProperties().list(System.out);\n    +    }\n    +\n    +    void execute (String[] args) {\n    +        if (args.length == 0) {\n    +            this.printUsage();\n    +            System.exit(-1);\n    +        }\n    +        List<String> commandArgs = new ArrayList<String>();\n    +        for (int i = 0; i < args.length; ++i) {\n    +            if (args[i] == \"-c\") {\n    +                this.configOptions.add(args[++i]);\n    +            } else if (args[i] == \"--config\") {\n    +                this.configFile = args[++i];\n    +            } else {\n    +                commandArgs.add(args[i]);\n    +            }\n    +        }\n    +        if ((commandArgs.size() == 0)  || (!this.COMMANDS.contains\n    +                (commandArgs.get(0)))) {\n    +            System.out.println(\"Unknown command: [storm \" + StringUtils.join\n    +                    (args, \" \") +  \"]\");\n    +            this.printUsage();\n    +            System.exit(254);\n    +\n    +        }\n    +        this.callMethod(commandArgs.get(0), commandArgs.subList(1,\n    +                commandArgs.size()));\n    +\n    +    }\n    +\n    +    String getConfigOptions() {\n    +        String configOptions = \"-Dstorm.options=\";\n    +        //TODO  - do urlencode here. python does quote_plus to each configoption\n    +        return configOptions + StringUtils.join(this.configOptions, ',');\n    +\n    +    }\n    +\n    +    List<String> getJarsFull (String directory) {\n    +        List<String> fullJarFiles = new ArrayList<String>();\n    +        File file = new File(directory);\n    +        File[] files = file.listFiles();\n    +        if (files != null) {\n    +            for (File f : files) {\n    +                if (f.getName().endsWith(\".jar\")) {\n    +                    fullJarFiles.add(f.getPath());\n    +                }\n    +            }\n    +        }\n    +        return fullJarFiles;\n    +    }\n    +\n    +    String getClassPath (List<String> extraJars, boolean daemon) {\n    +        List<String> classPaths = this.getJarsFull(this.stormHomeDirectory);\n    +        classPaths.addAll(this.getJarsFull(this.stormLibDirectory));\n    +        classPaths.addAll(this.getJarsFull(this.stormHomeDirectory + this\n    +                .fileSeparator + \"extlib\"));\n    +        if (daemon == true) {\n    +            classPaths.addAll(this.getJarsFull(this.stormHomeDirectory + this\n    +                    .fileSeparator + \"extlib-daemon\"));\n    +        }\n    +        if (this.stormExternalClasspath != null) {\n    +            classPaths.add(this.stormExternalClasspath);\n    +        }\n    +        if (this.stormExternalClasspathDaemon != null) {\n    +            classPaths.add(this.stormExternalClasspathDaemon);\n    +        }\n    +        classPaths.addAll(extraJars);\n    +        return StringUtils.join(classPaths, System.getProperty(\"path\" +\n    +                \".separator\"));\n    +    }\n    +\n    +    String confValue (String name, List<String> extraPaths, boolean daemon) {\n    +        // The original code from python started a process that started a jvm\n    +        // with backtype.storm.command.config_value main method that would\n    +        // read the conf value and print it out to an output stream. python\n    +        // tapped on to the output stream of that subprocess and returned the\n    +        // confvalue for the name. Because the pythong code has been shipped\n    +        // to java now it should not spawn a new process which is a jvm since\n    +        // we are already in jvm. Instead it should just be doing as the code\n    +        // commeneted below.\n    +        // However looking at the pythong code it was\n    +        // starting a jvm with -cp argument that had classpaths which might\n    +        // not be available to this java process. Hence there is a chance\n    +        // that the below code might break existing scripts. As a result I\n    +        // have decided to still spawn a new process from java just like\n    +        // python with similar classpaths being constructed for the jvm\n    +        // execution\n    +        /*IFn fn = Utils.loadClojureFn(\"backtype.storm.config\",\n    +                \"read-storm-config\");\n    +        Object o = fn.invoke();\n    +        return ((Map) o).get(name).toString();*/\n    +        String confValue = \"\";\n    +        ProcessBuilder processBuilder = new ProcessBuilder(this.javaCommand,\n    +                \"-client\", this.getConfigOptions(), \"-Dstorm.conf.file=\" +\n    +                this.configFile, \"-cp\", this.getClassPath(extraPaths, daemon),\n    +                \"backtype.storm.command.config_value\", name);\n    +        BufferedReader br;\n    +        try {\n    +            Process process = processBuilder.start();\n    +            br = new BufferedReader(new InputStreamReader(process\n    +                    .getInputStream(), StandardCharsets.UTF_8));\n    +            process.waitFor();\n    +            String line;\n    +            while ((line = br.readLine()) != null) {\n    +                String[] tokens = line.split(\" \");\n    +                if (\"VALUE:\".equals(tokens[0])) {\n    +                    confValue = StringUtils.join(Arrays.copyOfRange(tokens, 1,\n    +                            tokens.length), \" \");\n    +                    break;\n    +                }\n    +            }\n    +            br.close();\n    +        } catch (Exception ex) {\n    +            System.out.println(\"Exception occured while starting process via \" +\n    +                    \"processbuilder \" + ex.getMessage());\n    +        }\n    +        return confValue;\n    +    }\n    +\n    +    void executeStormClass (String className, String jvmType, List<String>\n    +            jvmOptions, List<String> extraJars, List<String> args, boolean\n    +            fork, boolean daemon, String daemonName) {\n    +        List<String> extraPaths = new ArrayList<>();\n    +        extraPaths.add(this.clusterConfDirectory);\n    +        String stormLogDirectory = this.confValue(\"storm.log.dir\",\n    +                extraPaths, daemon);\n    +        if ((stormLogDirectory == null) || (\"\".equals(stormLogDirectory)) ||\n    +                (\"nil\".equals(stormLogDirectory))) {\n    +            stormLogDirectory = this.stormHomeDirectory + this.fileSeparator\n    +                    + \"logs\";\n    +        }\n    +        List<String> commandList = new ArrayList<String>();\n    +        commandList.add(this.javaCommand);\n    +        commandList.add(jvmType);\n    +        commandList.add(\"-Ddaemon.name=\" + daemonName);\n    +        commandList.add(this.getConfigOptions());\n    +        commandList.add(\"-Dstorm.home=\" + this.stormHomeDirectory);\n    +        commandList.add(\"-Dstorm.log.dir=\" + stormLogDirectory);\n    +        commandList.add(\"-Djava.library.path=\" + this\n    +                .confValue(\"java.library.path\", extraJars, daemon));\n    +        commandList.add(\"-Dstorm.conf.file=\" + this.configFile);\n    +        commandList.add(\"-cp\");\n    +        commandList.add(this.getClassPath(extraJars, daemon));\n    +        commandList.addAll(jvmOptions);\n    +        commandList.add(className);\n    +        commandList.addAll(args);\n    +        ProcessBuilder processBuilder = new ProcessBuilder(commandList);\n    +        processBuilder.inheritIO();\n    +        try {\n    +            Process process = processBuilder.start();\n    +            System.out.println(\"Executing the command: \");\n    +            String commandLine = StringUtils.join(commandList, \" \");\n    +            System.out.println(commandLine);\n    +            if (daemon == true) {\n    +                Runtime.getRuntime().addShutdownHook(new ShutdownHookThread\n    +                        (process, commandLine));\n    +            }\n    +            System.out.println(\"Waiting for subprocess to finish\");\n    +            process.waitFor();\n    +            System.out.println(\"subprocess finished\");\n    +            System.out.println(\"Exit value from subprocess is :\" + process\n    +                    .exitValue());\n    +        } catch (Exception ex) {\n    +            System.out.println(\"Exception occured while starting process via \" +\n    +                    \"processbuilder \" + ex.getMessage());\n    +        }\n    +    }\n    +\n    +    void jarCommand (List<String> args) {\n    +        System.out.println(\"Called jarCommand using reflection\");\n    +        System.out.println(\"Arguments are : \");\n    +        for (String s: args) {\n    +            System.out.println(s);\n    +        }\n    +        if ((args == null) || (args.size() < 2)) {\n    +            System.out.println(\"Not enough arguments for storm jar command\");\n    +            System.out.println(\"Please pass a jar file location and the \" +\n    +                    \"topology class for jar command\");\n    +            //TODO print usage for jar command here\n    +            System.exit(-1);\n    +        }\n    +        String jarJvmOptions = System.getenv(\"STORM_JAR_JVM_OPTS\");\n    +        List<String> jvmOptions = new ArrayList<String>();\n    +        if (jarJvmOptions != null) {\n    +            //TODO the python code to parse STORM_JAR_JVM_OPTIONS uses shlex\n    +            // .split to get the different jvm options for the jar. For now\n    +            // keeping it simple and splitting on space. Need to be in synch\n    +            // with python. Not sure though if we really need to use a\n    +            // lexical parser\n    +            jvmOptions.addAll(Arrays.asList(jarJvmOptions.split(\" \")));\n    +        }\n    +        jvmOptions.add(\"-Dstorm.jar=\" + args.get(0));\n    +        List<String> extraPaths = new ArrayList<String>();\n    +        extraPaths.add(args.get(0));\n    +        extraPaths.add(this.userConfDirectory);\n    +        extraPaths.add(this.stormBinDirectory);\n    +        this.executeStormClass(args.get(1), \"-client\", jvmOptions,\n    +                extraPaths, args.subList(2, args.size()), false, false, \"\");\n    +        return;\n    +    }\n    +\n    +    void killCommand (List<String> args) {\n    +        System.out.println(\"Called killCommand using reflection\");\n    +        System.out.println(\"Arguments are : \");\n    +        for (String s: args) {\n    +            System.out.println(s);\n    +        }\n    +        if ((args == null) || (args.size() < 1)) {\n    +            System.out.println(\"Not enough arguments for storm kill command\");\n    +            //TODO print usage for kill command here\n    +            System.exit(2);\n    +        }\n    +        List<String> extraPaths = new ArrayList<String>();\n    +        extraPaths.add(this.userConfDirectory);\n    +        extraPaths.add(this.stormBinDirectory);\n    +        this.executeStormClass(\"backtype.storm.command.kill_topology\",\n    +                \"-client\", new ArrayList<String>(), extraPaths, args, false,\n    +                false, \"\");\n    +        return;\n    +    }\n    +\n    +    //TODO implement shell command after understanding more about it\n    +    void shellCommand (List<String> args) {\n    +        System.out.println(\"Called shellCommand using reflection\");\n    +        System.out.println(\"Arguments are : \");\n    +        for (String s: args) {\n    +            System.out.println(s);\n    +        }\n    +        return;\n    +    }\n    +\n    +    void nimbusCommand (List<String> args) {\n    +        System.out.println(\"Called nimbusCommand using reflection\");\n    +        System.out.println(\"Arguments are : \");\n    +        for (String s: args) {\n    +            System.out.println(s);\n    +        }\n    +        List<String> jvmOptions = new ArrayList<String>();\n    +        List<String> extraPaths = new ArrayList<String>();\n    +        extraPaths.add(this.clusterConfDirectory);\n    +        String nimbusOptions = this.confValue(\"nimbus.childopts\", extraPaths,\n    +                true);\n    +        // below line is different from original python script storm.py where\n    +        // it called parse_args method on nimbusOptions. Now we just call a\n    +        // split with a space.  Hence this will have different behavior and\n    +        // a buggy one if the nimbusOptions string in the config file has a\n    +        // space. TODO need to fix this\n    +        jvmOptions.addAll(Arrays.asList(nimbusOptions.split(\" \")));\n    +        jvmOptions.add(\"-Dlogfile.name=nimbus.log\");\n    +        jvmOptions.add(\"-Dlog4j.configurationFile=\" + this\n    +                .getLog4jConfigDirectory() + this.fileSeparator + \"cluster\" +\n    +                \".xml\");\n    +        this.executeStormClass(this.NIMBUS_CLASS, \"-server\", jvmOptions,\n    +                extraPaths, new ArrayList<String>(), false, true, \"nimbus\");\n    +        return;\n    +    }\n    +\n    +    void uiCommand (List<String> args) {\n    +        System.out.println(\"Called uiCommand using reflection\");\n    +        System.out.println(\"Arguments are : \");\n    +        for (String s: args) {\n    +            System.out.println(s);\n    +        }\n    +        List<String> jvmOptions = new ArrayList<String>();\n    +        List<String> extraPaths = new ArrayList<String>();\n    +        extraPaths.add(this.clusterConfDirectory);\n    +        String uiOptions = this.confValue(\"ui.childopts\", extraPaths,\n    +                true);\n    +        // below line is different from original python script storm.py where\n    +        // it called parse_args method on nimbusOptions. Now we just call a\n    +        // split with a space.  Hence this will have different behavior and\n    +        // a buggy one if the nimbusOptions string in the config file has a\n    +        // space. TODO need to fix this\n    +        jvmOptions.addAll(Arrays.asList(uiOptions.split(\" \")));\n    +        jvmOptions.add(\"-Dlogfile.name=ui.log\");\n    +        jvmOptions.add(\"-Dlog4j.configurationFile=\" + this\n    +                .getLog4jConfigDirectory() + this.fileSeparator + \"cluster\" +\n    +                \".xml\");\n    +        extraPaths.add(0, this.stormHomeDirectory);\n    +        this.executeStormClass(this.UI_CLASS, \"-server\", jvmOptions,\n    +                extraPaths, new ArrayList<String>(), false, true, \"ui\");\n    +        return;\n    +    }\n    +\n    +    void logviewerCommand (List<String> args) {\n    +        System.out.println(\"Called logviewerCommand using reflection\");\n    +        System.out.println(\"Arguments are : \");\n    +        for (String s: args) {\n    +            System.out.println(s);\n    +        }\n    +        List<String> jvmOptions = new ArrayList<String>();\n    +        List<String> extraPaths = new ArrayList<String>();\n    +        extraPaths.add(this.clusterConfDirectory);\n    +        String logviewerOptions = this.confValue(\"logviewer.childopts\",\n    +                extraPaths, true);\n    +        // below line is different from original python script storm.py where\n    +        // it called parse_args method on nimbusOptions. Now we just call a\n    +        // split with a space.  Hence this will have different behavior and\n    +        // a buggy one if the nimbusOptions string in the config file has a\n    +        // space. TODO need to fix this\n    +        jvmOptions.addAll(Arrays.asList(logviewerOptions.split(\" \")));\n    +        jvmOptions.add(\"-Dlogfile.name=logviewer.log\");\n    +        jvmOptions.add(\"-Dlog4j.configurationFile=\" + this\n    +                .getLog4jConfigDirectory() + this.fileSeparator + \"cluster\" +\n    +                \".xml\");\n    +        extraPaths.add(0, this.stormHomeDirectory);\n    +        this.executeStormClass(this.LOGVIEWER_CLASS, \"-server\", jvmOptions,\n    +                extraPaths, new ArrayList<String>(), false, true, \"logviewer\");\n    +        return;\n    +    }\n    +\n    +    void drpcCommand (List<String> args) {\n    +        System.out.println(\"Called drpcCommand using reflection\");\n    +        System.out.println(\"Arguments are : \");\n    +        for (String s: args) {\n    +            System.out.println(s);\n    +        }\n    +        List<String> jvmOptions = new ArrayList<String>();\n    +        List<String> extraPaths = new ArrayList<String>();\n    +        extraPaths.add(this.clusterConfDirectory);\n    +        String drpcOptions = this.confValue(\"drpc.childopts\", extraPaths,\n    +                true);\n    +        // below line is different from original python script storm.py where\n    +        // it called parse_args method on nimbusOptions. Now we just call a\n    +        // split with a space.  Hence this will have different behavior and\n    +        // a buggy one if the nimbusOptions string in the config file has a\n    +        // space. TODO need to fix this\n    +        jvmOptions.addAll(Arrays.asList(drpcOptions.split(\" \")));\n    +        jvmOptions.add(\"-Dlogfile.name=drpc.log\");\n    +        jvmOptions.add(\"-Dlog4j.configurationFile=\" + this\n    +                .getLog4jConfigDirectory() + this.fileSeparator + \"cluster\" +\n    +                \".xml\");\n    +        this.executeStormClass(this.DRPC_CLASS, \"-server\", jvmOptions,\n    +                extraPaths, new ArrayList<String>(), false, true, \"drpc\");\n    +        return;\n    +    }\n    +\n    +    void supervisorCommand (List<String> args) {\n    +        System.out.println(\"Called supervisorCommand using reflection\");\n    +        System.out.println(\"Arguments are : \");\n    +        for (String s: args) {\n    +            System.out.println(s);\n    +        }\n    +        List<String> jvmOptions = new ArrayList<String>();\n    +        List<String> extraPaths = new ArrayList<String>();\n    +        extraPaths.add(this.clusterConfDirectory);\n    +        String supervisorOptions = this.confValue(\"supervisor.childopts\",\n    +                extraPaths,\n    +                true);\n    +        // below line is different from original python script storm.py where\n    +        // it called parse_args method on nimbusOptions. Now we just call a\n    +        // split with a space.  Hence this will have different behavior and\n    +        // a buggy one if the nimbusOptions string in the config file has a\n    +        // space. TODO need to fix this\n    +        jvmOptions.addAll(Arrays.asList(supervisorOptions.split(\" \")));\n    +        jvmOptions.add(\"-Dlogfile.name=supervisor.log\");\n    +        jvmOptions.add(\"-Dlog4j.configurationFile=\" + this\n    +                .getLog4jConfigDirectory() + this.fileSeparator + \"cluster\" +\n    +                \".xml\");\n    +        this.executeStormClass(this.SUPERVISOR_CLASS, \"-server\", jvmOptions,\n    +                extraPaths, new ArrayList<String>(), false, true, \"supervisor\");\n    +        return;\n    +    }\n    +\n    +    void localconfvalueCommand (List<String> args) {\n    +        System.out.println(\"Called localconfvalueCommand using reflection\");\n    +        System.out.println(\"Arguments are : \");\n    +        for (String s: args) {\n    +            System.out.println(s);\n    +        }\n    +        if ((args == null) || (args.size() == 0)) {\n    +            System.out.println(\"Not enough arguments for localconfvalue \" +\n    +                    \"command\");\n    +            System.out.println(\"Please pass the name of the config value you \" +\n    +                    \"want to be printed\");\n    +            //TODO print command help for localconfvalue command\n    +            System.exit(2);\n    +        }\n    +        List<String> extraPaths = new ArrayList<String>();\n    +        extraPaths.add(this.userConfDirectory);\n    +        System.out.println(args.get(0) + \": \" + this.confValue(args.get(0),\n    +                extraPaths,\n    +                true));\n    +        return;\n    +    }\n    +\n    +    void remoteconfvalueCommand (List<String> args) {\n    +        System.out.println(\"Called remoteconfvalueCommand using reflection\");\n    +        System.out.println(\"Arguments are : \");\n    +        for (String s: args) {\n    +            System.out.println(s);\n    +        }\n    +        if ((args == null) || (args.size() == 0)) {\n    +            System.out.println(\"Not enough arguments for remoteconfvalue \" +\n    +                    \"command\");\n    +            System.out.println(\"Please pass the name of the config value you \" +\n    +                    \"want to be printed\");\n    +            //TODO print command help for remoteconfvalue command\n    +            System.exit(2);\n    +        }\n    +        List<String> extraPaths = new ArrayList<String>();\n    +        extraPaths.add(this.clusterConfDirectory);\n    +        System.out.println(args.get(0) + \": \" + this.confValue(args.get(0),\n    +                extraPaths,\n    +                true));\n    +        return;\n    +    }\n    +\n    +    void replCommand (List<String> args) {\n    +        System.out.println(\"Called replCommand using reflection\");\n    +        System.out.println(\"Arguments are : \");\n    +        for (String s: args) {\n    +            System.out.println(s);\n    +        }\n    +        List<String> extraPaths = new ArrayList<String>();\n    +        extraPaths.add(this.clusterConfDirectory);\n    +        this.executeStormClass(this.REPL_CLASS, \"-client\", new\n    +                        ArrayList<String>(), extraPaths, new ArrayList<String>(),\n    +                false, true, \"\");\n    +        return;\n    +    }\n    +\n    +    void classpathCommand (List<String> args) {\n    +        System.out.println(\"Called classpathCommand using reflection\");\n    +        System.out.println(\"Arguments are : \");\n    +        for (String s: args) {\n    +            System.out.println(s);\n    +        }\n    +        System.out.println(this.getClassPath(new ArrayList<String>(), true));\n    +        return;\n    +    }\n    +\n    +    void activateCommand (List<String> args) {\n    +        System.out.println(\"Called activateCommand using reflection\");\n    +        System.out.println(\"Arguments are : \");\n    +        for (String s: args) {\n    +            System.out.println(s);\n    +        }\n    +        if ((args == null) || (args.size() < 1)) {\n    +            System.out.println(\"Not enough arguments for activate command\");\n    +            System.out.println(\"Please pass the topology name to activate\");\n    +            //TODO print usage for activate command here\n    +            System.exit(2);\n    +        }\n    +        List<String> extraPaths = new ArrayList<String>();\n    +        extraPaths.add(this.userConfDirectory);\n    +        extraPaths.add(this.stormBinDirectory);\n    +        this.executeStormClass(this.ACTIVATE_CLASS, \"-client\", new\n    +                ArrayList<String>(), extraPaths, args, false, false, \"\");\n    +        return;\n    +    }\n    +\n    +    void deactivateCommand (List<String> args) {\n    +        System.out.println(\"Called deactivateCommand using reflection\");\n    +        System.out.println(\"Arguments are : \");\n    +        for (String s: args) {\n    +            System.out.println(s);\n    +        }\n    +        if ((args == null) || (args.size() < 1)) {\n    +            System.out.println(\"Not enough arguments for deactivate command\");\n    +            System.out.println(\"Please pass the topology name to deactivate\");\n    +            //TODO print usage for deactivate command here\n    +            System.exit(2);\n    +        }\n    +        List<String> extraPaths = new ArrayList<String>();\n    +        extraPaths.add(this.userConfDirectory);\n    +        extraPaths.add(this.stormBinDirectory);\n    +        this.executeStormClass(this.DEACTIVATE_CLASS, \"-client\", new\n    +                ArrayList<String>(), extraPaths, args, false, false, \"\");\n    +        return;\n    +    }\n    +\n    +    void rebalanceCommand (List<String> args) {\n    +        System.out.println(\"Called rebalanceCommand using reflection\");\n    +        System.out.println(\"Arguments are : \");\n    +        for (String s: args) {\n    +            System.out.println(s);\n    +        }\n    +        if ((args == null) || (args.size() < 1)) {\n    +            System.out.println(\"Not enough arguments for rebalance command\");\n    +            System.out.println(\"Please pass the topology name to rebalance\");\n    +            //TODO print usage for rebalance command here\n    +            System.exit(2);\n    +        }\n    +        List<String> extraPaths = new ArrayList<String>();\n    +        extraPaths.add(this.userConfDirectory);\n    +        extraPaths.add(this.stormBinDirectory);\n    +        this.executeStormClass(this.REBALANCE_CLASS, \"-client\", new\n    +                ArrayList<String>(), extraPaths, args, false, false, \"\");\n    +        return;\n    +    }\n    +\n    +    void helpCommand (List<String> args) {\n    +        System.out.println(\"Called helpCommand using reflection\");\n    +        System.out.println(\"Arguments are : \");\n    +        for (String s: args) {\n    +            System.out.println(s);\n    +        }\n    +        if ((args == null) || (args.size() == 0)) {\n    +            this.printUsage();\n    +        } else {\n    +            if ((!this.COMMANDS.contains(args.get(0)))) {\n    +                System.out.println(args.get(0) + \" is not a valid command\");\n    +            } else {\n    +                //TODO print indivudual commands help here\n    +                System.out.println(\"Print command specific help here\");\n    +            }\n    +        }\n    +        return;\n    +    }\n    +\n    +    void listCommand (List<String> args) {\n    +        System.out.println(\"Called listCommand using reflection\");\n    +        System.out.println(\"Arguments are : \");\n    +        for (String s: args) {\n    +            System.out.println(s);\n    +        }\n    +        List<String> extraPaths = new ArrayList<String>();\n    +        extraPaths.add(this.userConfDirectory);\n    +        extraPaths.add(this.stormBinDirectory);\n    +        this.executeStormClass(this.LIST_CLASS, \"-client\", new\n    +                ArrayList<String>(), extraPaths, args, false, false, \"\");\n    +        return;\n    +    }\n    +\n    +    void devzookeeperCommand (List<String> args) {\n    +        System.out.println(\"Called devzookeeperCommand using reflection\");\n    +        System.out.println(\"Arguments are : \");\n    +        for (String s: args) {\n    +            System.out.println(s);\n    +        }\n    +        return;\n    +    }\n    +\n    +    void versionCommand (List<String> args) {\n    +        System.out.println(\"Called versionCommand using reflection\");\n    +        System.out.println(\"Arguments are : \");\n    +        for (String s: args) {\n    +            System.out.println(s);\n    +        }\n    +        return;\n    +    }\n    +\n    +    void monitorCommand (List<String> args) {\n    +        System.out.println(\"Called monitorCommand using reflection\");\n    +        System.out.println(\"Arguments are : \");\n    +        for (String s: args) {\n    +            System.out.println(s);\n    +        }\n    +        return;\n    +    }\n    +\n    +    void uploadcredentialsCommand (List<String> args) {\n    +        System.out.println(\"Called uploadcredentialsCommand using reflection\");\n    +        System.out.println(\"Arguments are : \");\n    +        for (String s: args) {\n    +            System.out.println(s);\n    +        }\n    +        return;\n    +    }\n    +\n    +    void geterrorsCommand (List<String> args) {\n    +        System.out.println(\"Called geterrorsCommand using reflection\");\n    +        System.out.println(\"Arguments are : \");\n    +        for (String s: args) {\n    +            System.out.println(s);\n    +        }\n    +        return;\n    +    }\n    +\n    +    String getLog4jConfigDirectory () {\n    +        List<String> extraPaths = new ArrayList<String>();\n    +        extraPaths.add(this.clusterConfDirectory);\n    +        String log4jDirectory = this.confValue(\"storm.logback.conf.dir\",\n    +                extraPaths, true);\n    +        if ((log4jDirectory == null) || (\"\".equals(log4jDirectory)) ||\n    +                (\"nil\".equals(log4jDirectory))) {\n    +            log4jDirectory = this.stormLog4jConfDirectory;\n    +        }\n    +        return log4jDirectory;\n    +    }\n    +\n    +    private void printUsage () {\n    +        String commands = StringUtils.join(this.COMMANDS, \"\\n\\t\");\n    +        System.out.println(\"Commands:\\n\\t\" + commands);\n    +        System.out.println(\"\\nHelp: \\n\\thelp \\n\\thelp <command>\\n\");\n    +        System.out.println(\"Documentation for the storm client can be found\" +\n    +                \" at \"  +\n    +                \"http://storm.incubator.apache\" +\n    +                \".org/documentation/Command-line-client.html\\n\");\n    +        System.out.println(\"Configs can be overridden using one or more -c \" +\n    +                \"flags, e.g. \" +\n    +                \"\\\"storm list -c nimbus.host=nimbus.mycompany.com\\\"\\n\");\n    +    }\n    +\n    +    private void executeHelpCommand () {\n    +        System.out.println(\"Print storm help here\");\n    +    }\n    +\n    +}\n    +\n    +class WindowsStormCommandExecutor extends StormCommandExecutor {\n    +\n    +    WindowsStormCommandExecutor () {\n    +\n    +    }\n    +\n    +    void initialize () {\n    +        return;\n    +    }\n    +\n    +    void execute (String[] args) {\n    --- End diff --\n    \n    If run on Windows ,do nothing but  return ？ \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2015-08-05T09:31:36.185+0000","updated":"2015-08-05T09:31:36.185+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12839443/comment/14658501","id":"14658501","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user priyank5485 commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/662#discussion_r36324914\n  \n    --- Diff: storm-core/src/jvm/backtype/storm/utils/StormCommandExecutor.java ---\n    @@ -0,0 +1,785 @@\n    +package backtype.storm.utils;\n    +\n    +import java.io.BufferedReader;\n    +import java.io.File;\n    +import java.io.InputStream;\n    +import java.io.InputStreamReader;\n    +import java.lang.reflect.InvocationTargetException;\n    +import java.lang.reflect.Method;\n    +import java.nio.charset.StandardCharsets;\n    +import java.util.*;\n    +\n    +import clojure.lang.IFn;\n    +import org.apache.commons.lang.StringUtils;\n    +import org.apache.commons.lang.SystemUtils;\n    +\n    +/**\n    + * Created by pshah on 7/17/15.\n    + */\n    +abstract class StormCommandExecutor {\n    +    final String NIMBUS_CLASS = \"backtype.storm.daemon.nimbus\";\n    +    final String SUPERVISOR_CLASS = \"backtype.storm.daemon.supervisor\";\n    +    final String UI_CLASS = \"backtype.storm.ui.core\";\n    +    final String LOGVIEWER_CLASS = \"backtype.storm.daemon.logviewer\";\n    +    final String DRPC_CLASS = \"backtype.storm.daemon.drpc\";\n    +    final String REPL_CLASS = \"clojure.main\";\n    +    final String ACTIVATE_CLASS = \"backtype.storm.command.activate\";\n    +    final String DEACTIVATE_CLASS = \"backtype.storm.command.deactivate\";\n    +    final String REBALANCE_CLASS = \"backtype.storm.command.rebalance\";\n    +    final String LIST_CLASS = \"backtype.storm.command.list\";\n    +    String stormHomeDirectory;\n    +    String userConfDirectory;\n    +    String stormConfDirectory;\n    +    String clusterConfDirectory;\n    +    String stormLibDirectory;\n    +    String stormBinDirectory;\n    +    String stormLog4jConfDirectory;\n    +    String configFile = \"\";\n    +    String javaCommand;\n    +    List<String> configOptions = new ArrayList<String>();\n    +    String stormExternalClasspath;\n    +    String stormExternalClasspathDaemon;\n    +    String fileSeparator;\n    +    final List<String> COMMANDS = Arrays.asList(\"jar\", \"kill\", \"shell\",\n    +            \"nimbus\", \"ui\", \"logviewer\", \"drpc\", \"supervisor\",\n    +            \"localconfvalue\",  \"remoteconfvalue\", \"repl\", \"classpath\",\n    +            \"activate\", \"deactivate\", \"rebalance\", \"help\",  \"list\",\n    +            \"dev-zookeeper\", \"version\", \"monitor\", \"upload-credentials\",\n    +            \"get-errors\");\n    +\n    +    public static void main (String[] args) {\n    +        for (String arg : args) {\n    +            System.out.println(\"Argument ++ is \" + arg);\n    +        }\n    +        StormCommandExecutor stormCommandExecutor;\n    +        if (System.getProperty(\"os.name\").startsWith(\"Windows\")) {\n    +            stormCommandExecutor = new WindowsStormCommandExecutor();\n    +        } else {\n    +            stormCommandExecutor = new UnixStormCommandExecutor();\n    +        }\n    +        stormCommandExecutor.initialize();\n    +        stormCommandExecutor.execute(args);\n    +    }\n    +\n    +    StormCommandExecutor () {\n    +\n    +    }\n    +\n    +    abstract void initialize ();\n    +\n    +    abstract void execute (String[] args);\n    +\n    +    void callMethod (String command, List<String> args) {\n    +        Class implementation = this.getClass();\n    +        String methodName = command.replace(\"-\", \"\") + \"Command\";\n    +        try {\n    +            Method method = implementation.getDeclaredMethod(methodName, List\n    +                    .class);\n    +            method.invoke(this, args);\n    +        } catch (NoSuchMethodException ex) {\n    +            System.out.println(\"No such method exception occured while trying\" +\n    +                    \" to run storm method \" + command);\n    +        } catch (IllegalAccessException ex) {\n    +            System.out.println(\"Illegal access exception occured while trying\" +\n    +                    \" to run storm method \" + command);\n    +        } catch (IllegalArgumentException ex) {\n    +            System.out.println(\"Illegal argument exception occured while \" +\n    +                    \"trying\" + \" to run storm method \" + command);\n    +        } catch (InvocationTargetException ex) {\n    +            System.out.println(\"Invocation target exception occured while \" +\n    +                    \"trying\" + \" to run storm method \" + command);\n    +        }\n    +    }\n    +}\n    +\n    +class UnixStormCommandExecutor extends StormCommandExecutor {\n    +\n    +    UnixStormCommandExecutor () {\n    +\n    +    }\n    +\n    +    void initialize () {\n    +        Collections.sort(this.COMMANDS);\n    +        this.fileSeparator = System .getProperty (\"file.separator\");\n    +        this.stormHomeDirectory = System.getenv(\"STORM_BASE_DIR\");\n    +        this.userConfDirectory = System.getProperty(\"user.home\") +\n    +                this.fileSeparator + \"\" +\n    +                \".storm\";\n    +        this.stormConfDirectory = System.getenv(\"STORM_CONF_DIR\");\n    +        this.clusterConfDirectory = this.stormConfDirectory == null ?  (this\n    +                .stormHomeDirectory + this.fileSeparator + \"conf\") : this\n    +                .stormConfDirectory;\n    +        File f = new File(this.userConfDirectory + this.fileSeparator +\n    +                \"storm.yaml\");\n    +        if (!f.isFile()) {\n    +            this.userConfDirectory = this.clusterConfDirectory;\n    +        }\n    +        this.stormLibDirectory = this.stormHomeDirectory + this.fileSeparator +\n    +                \"lib\";\n    +        this.stormBinDirectory = this.stormHomeDirectory + this.fileSeparator +\n    +                \"bin\";\n    +        this.stormLog4jConfDirectory = this.stormHomeDirectory +\n    +                this.fileSeparator + \"log4j2\";\n    +        if (System.getenv(\"JAVA_HOME\") != null) {\n    +            this.javaCommand = System.getenv(\"JAVA_HOME\") + this.fileSeparator +\n    +                    \"bin\" + this.fileSeparator + \"java\";\n    +            if (!(new File(this.javaCommand).exists())) {\n    +                System.out.println(\"ERROR:  JAVA_HOME is invalid.  Could not \" +\n    +                        \"find \" + this.javaCommand);\n    +                System.exit(1);\n    +            }\n    +        } else {\n    +            this.javaCommand = \"java\";\n    +        }\n    +        this.stormExternalClasspath = System.getenv(\"STORM_EXT_CLASSPATH\");\n    +        this.stormExternalClasspathDaemon = System.getenv\n    +                (\"STORM_EXT_CLASSPATH_DAEMON\");\n    +        if (!(new File(this.stormLibDirectory).exists())) {\n    +            System.out.println(\"******************************************\");\n    +            System.out.println(\"The storm client can only be run from within \" +\n    +                    \"a release. \" + \"You appear to be trying to run the client\" +\n    +                    \" from a checkout of Storm's source code.\");\n    +            System.out.println(\"You can download a Storm release at \" +\n    +                    \"http://storm-project.net/downloads.html\");\n    +            System.out.println(\"******************************************\");\n    +            System.exit(1);\n    +        }\n    +        //System.getProperties().list(System.out);\n    +    }\n    +\n    +    void execute (String[] args) {\n    +        if (args.length == 0) {\n    +            this.printUsage();\n    +            System.exit(-1);\n    +        }\n    +        List<String> commandArgs = new ArrayList<String>();\n    +        for (int i = 0; i < args.length; ++i) {\n    +            if (args[i] == \"-c\") {\n    +                this.configOptions.add(args[++i]);\n    +            } else if (args[i] == \"--config\") {\n    +                this.configFile = args[++i];\n    +            } else {\n    +                commandArgs.add(args[i]);\n    +            }\n    +        }\n    +        if ((commandArgs.size() == 0)  || (!this.COMMANDS.contains\n    +                (commandArgs.get(0)))) {\n    +            System.out.println(\"Unknown command: [storm \" + StringUtils.join\n    +                    (args, \" \") +  \"]\");\n    +            this.printUsage();\n    +            System.exit(254);\n    +\n    +        }\n    +        this.callMethod(commandArgs.get(0), commandArgs.subList(1,\n    +                commandArgs.size()));\n    +\n    +    }\n    +\n    +    String getConfigOptions() {\n    +        String configOptions = \"-Dstorm.options=\";\n    +        //TODO  - do urlencode here. python does quote_plus to each configoption\n    +        return configOptions + StringUtils.join(this.configOptions, ',');\n    +\n    +    }\n    +\n    +    List<String> getJarsFull (String directory) {\n    +        List<String> fullJarFiles = new ArrayList<String>();\n    +        File file = new File(directory);\n    +        File[] files = file.listFiles();\n    +        if (files != null) {\n    +            for (File f : files) {\n    +                if (f.getName().endsWith(\".jar\")) {\n    +                    fullJarFiles.add(f.getPath());\n    +                }\n    +            }\n    +        }\n    +        return fullJarFiles;\n    +    }\n    +\n    +    String getClassPath (List<String> extraJars, boolean daemon) {\n    +        List<String> classPaths = this.getJarsFull(this.stormHomeDirectory);\n    +        classPaths.addAll(this.getJarsFull(this.stormLibDirectory));\n    +        classPaths.addAll(this.getJarsFull(this.stormHomeDirectory + this\n    +                .fileSeparator + \"extlib\"));\n    +        if (daemon == true) {\n    +            classPaths.addAll(this.getJarsFull(this.stormHomeDirectory + this\n    +                    .fileSeparator + \"extlib-daemon\"));\n    +        }\n    +        if (this.stormExternalClasspath != null) {\n    +            classPaths.add(this.stormExternalClasspath);\n    +        }\n    +        if (this.stormExternalClasspathDaemon != null) {\n    +            classPaths.add(this.stormExternalClasspathDaemon);\n    +        }\n    +        classPaths.addAll(extraJars);\n    +        return StringUtils.join(classPaths, System.getProperty(\"path\" +\n    +                \".separator\"));\n    +    }\n    +\n    +    String confValue (String name, List<String> extraPaths, boolean daemon) {\n    +        // The original code from python started a process that started a jvm\n    +        // with backtype.storm.command.config_value main method that would\n    +        // read the conf value and print it out to an output stream. python\n    +        // tapped on to the output stream of that subprocess and returned the\n    +        // confvalue for the name. Because the pythong code has been shipped\n    +        // to java now it should not spawn a new process which is a jvm since\n    +        // we are already in jvm. Instead it should just be doing as the code\n    +        // commeneted below.\n    +        // However looking at the pythong code it was\n    +        // starting a jvm with -cp argument that had classpaths which might\n    +        // not be available to this java process. Hence there is a chance\n    +        // that the below code might break existing scripts. As a result I\n    +        // have decided to still spawn a new process from java just like\n    +        // python with similar classpaths being constructed for the jvm\n    +        // execution\n    +        /*IFn fn = Utils.loadClojureFn(\"backtype.storm.config\",\n    +                \"read-storm-config\");\n    +        Object o = fn.invoke();\n    +        return ((Map) o).get(name).toString();*/\n    +        String confValue = \"\";\n    +        ProcessBuilder processBuilder = new ProcessBuilder(this.javaCommand,\n    +                \"-client\", this.getConfigOptions(), \"-Dstorm.conf.file=\" +\n    +                this.configFile, \"-cp\", this.getClassPath(extraPaths, daemon),\n    +                \"backtype.storm.command.config_value\", name);\n    +        BufferedReader br;\n    +        try {\n    +            Process process = processBuilder.start();\n    +            br = new BufferedReader(new InputStreamReader(process\n    +                    .getInputStream(), StandardCharsets.UTF_8));\n    +            process.waitFor();\n    +            String line;\n    +            while ((line = br.readLine()) != null) {\n    +                String[] tokens = line.split(\" \");\n    +                if (\"VALUE:\".equals(tokens[0])) {\n    +                    confValue = StringUtils.join(Arrays.copyOfRange(tokens, 1,\n    +                            tokens.length), \" \");\n    +                    break;\n    +                }\n    +            }\n    +            br.close();\n    +        } catch (Exception ex) {\n    +            System.out.println(\"Exception occured while starting process via \" +\n    +                    \"processbuilder \" + ex.getMessage());\n    +        }\n    +        return confValue;\n    +    }\n    +\n    +    void executeStormClass (String className, String jvmType, List<String>\n    +            jvmOptions, List<String> extraJars, List<String> args, boolean\n    +            fork, boolean daemon, String daemonName) {\n    +        List<String> extraPaths = new ArrayList<>();\n    +        extraPaths.add(this.clusterConfDirectory);\n    +        String stormLogDirectory = this.confValue(\"storm.log.dir\",\n    +                extraPaths, daemon);\n    +        if ((stormLogDirectory == null) || (\"\".equals(stormLogDirectory)) ||\n    +                (\"nil\".equals(stormLogDirectory))) {\n    +            stormLogDirectory = this.stormHomeDirectory + this.fileSeparator\n    +                    + \"logs\";\n    +        }\n    +        List<String> commandList = new ArrayList<String>();\n    +        commandList.add(this.javaCommand);\n    +        commandList.add(jvmType);\n    +        commandList.add(\"-Ddaemon.name=\" + daemonName);\n    +        commandList.add(this.getConfigOptions());\n    +        commandList.add(\"-Dstorm.home=\" + this.stormHomeDirectory);\n    +        commandList.add(\"-Dstorm.log.dir=\" + stormLogDirectory);\n    +        commandList.add(\"-Djava.library.path=\" + this\n    +                .confValue(\"java.library.path\", extraJars, daemon));\n    +        commandList.add(\"-Dstorm.conf.file=\" + this.configFile);\n    +        commandList.add(\"-cp\");\n    +        commandList.add(this.getClassPath(extraJars, daemon));\n    +        commandList.addAll(jvmOptions);\n    +        commandList.add(className);\n    +        commandList.addAll(args);\n    +        ProcessBuilder processBuilder = new ProcessBuilder(commandList);\n    +        processBuilder.inheritIO();\n    +        try {\n    +            Process process = processBuilder.start();\n    +            System.out.println(\"Executing the command: \");\n    +            String commandLine = StringUtils.join(commandList, \" \");\n    +            System.out.println(commandLine);\n    +            if (daemon == true) {\n    +                Runtime.getRuntime().addShutdownHook(new ShutdownHookThread\n    +                        (process, commandLine));\n    +            }\n    +            System.out.println(\"Waiting for subprocess to finish\");\n    +            process.waitFor();\n    +            System.out.println(\"subprocess finished\");\n    +            System.out.println(\"Exit value from subprocess is :\" + process\n    +                    .exitValue());\n    +        } catch (Exception ex) {\n    +            System.out.println(\"Exception occured while starting process via \" +\n    +                    \"processbuilder \" + ex.getMessage());\n    +        }\n    +    }\n    +\n    +    void jarCommand (List<String> args) {\n    +        System.out.println(\"Called jarCommand using reflection\");\n    +        System.out.println(\"Arguments are : \");\n    +        for (String s: args) {\n    +            System.out.println(s);\n    +        }\n    +        if ((args == null) || (args.size() < 2)) {\n    +            System.out.println(\"Not enough arguments for storm jar command\");\n    +            System.out.println(\"Please pass a jar file location and the \" +\n    +                    \"topology class for jar command\");\n    +            //TODO print usage for jar command here\n    +            System.exit(-1);\n    +        }\n    +        String jarJvmOptions = System.getenv(\"STORM_JAR_JVM_OPTS\");\n    +        List<String> jvmOptions = new ArrayList<String>();\n    +        if (jarJvmOptions != null) {\n    +            //TODO the python code to parse STORM_JAR_JVM_OPTIONS uses shlex\n    +            // .split to get the different jvm options for the jar. For now\n    +            // keeping it simple and splitting on space. Need to be in synch\n    +            // with python. Not sure though if we really need to use a\n    +            // lexical parser\n    +            jvmOptions.addAll(Arrays.asList(jarJvmOptions.split(\" \")));\n    +        }\n    +        jvmOptions.add(\"-Dstorm.jar=\" + args.get(0));\n    +        List<String> extraPaths = new ArrayList<String>();\n    +        extraPaths.add(args.get(0));\n    +        extraPaths.add(this.userConfDirectory);\n    +        extraPaths.add(this.stormBinDirectory);\n    +        this.executeStormClass(args.get(1), \"-client\", jvmOptions,\n    +                extraPaths, args.subList(2, args.size()), false, false, \"\");\n    +        return;\n    +    }\n    +\n    +    void killCommand (List<String> args) {\n    +        System.out.println(\"Called killCommand using reflection\");\n    +        System.out.println(\"Arguments are : \");\n    +        for (String s: args) {\n    +            System.out.println(s);\n    +        }\n    +        if ((args == null) || (args.size() < 1)) {\n    +            System.out.println(\"Not enough arguments for storm kill command\");\n    +            //TODO print usage for kill command here\n    +            System.exit(2);\n    +        }\n    +        List<String> extraPaths = new ArrayList<String>();\n    +        extraPaths.add(this.userConfDirectory);\n    +        extraPaths.add(this.stormBinDirectory);\n    +        this.executeStormClass(\"backtype.storm.command.kill_topology\",\n    +                \"-client\", new ArrayList<String>(), extraPaths, args, false,\n    +                false, \"\");\n    +        return;\n    +    }\n    +\n    +    //TODO implement shell command after understanding more about it\n    +    void shellCommand (List<String> args) {\n    +        System.out.println(\"Called shellCommand using reflection\");\n    +        System.out.println(\"Arguments are : \");\n    +        for (String s: args) {\n    +            System.out.println(s);\n    +        }\n    +        return;\n    +    }\n    +\n    +    void nimbusCommand (List<String> args) {\n    +        System.out.println(\"Called nimbusCommand using reflection\");\n    +        System.out.println(\"Arguments are : \");\n    +        for (String s: args) {\n    +            System.out.println(s);\n    +        }\n    +        List<String> jvmOptions = new ArrayList<String>();\n    +        List<String> extraPaths = new ArrayList<String>();\n    +        extraPaths.add(this.clusterConfDirectory);\n    +        String nimbusOptions = this.confValue(\"nimbus.childopts\", extraPaths,\n    +                true);\n    +        // below line is different from original python script storm.py where\n    +        // it called parse_args method on nimbusOptions. Now we just call a\n    +        // split with a space.  Hence this will have different behavior and\n    +        // a buggy one if the nimbusOptions string in the config file has a\n    +        // space. TODO need to fix this\n    +        jvmOptions.addAll(Arrays.asList(nimbusOptions.split(\" \")));\n    +        jvmOptions.add(\"-Dlogfile.name=nimbus.log\");\n    +        jvmOptions.add(\"-Dlog4j.configurationFile=\" + this\n    +                .getLog4jConfigDirectory() + this.fileSeparator + \"cluster\" +\n    +                \".xml\");\n    +        this.executeStormClass(this.NIMBUS_CLASS, \"-server\", jvmOptions,\n    +                extraPaths, new ArrayList<String>(), false, true, \"nimbus\");\n    +        return;\n    +    }\n    +\n    +    void uiCommand (List<String> args) {\n    +        System.out.println(\"Called uiCommand using reflection\");\n    +        System.out.println(\"Arguments are : \");\n    +        for (String s: args) {\n    +            System.out.println(s);\n    +        }\n    +        List<String> jvmOptions = new ArrayList<String>();\n    +        List<String> extraPaths = new ArrayList<String>();\n    +        extraPaths.add(this.clusterConfDirectory);\n    +        String uiOptions = this.confValue(\"ui.childopts\", extraPaths,\n    +                true);\n    +        // below line is different from original python script storm.py where\n    +        // it called parse_args method on nimbusOptions. Now we just call a\n    +        // split with a space.  Hence this will have different behavior and\n    +        // a buggy one if the nimbusOptions string in the config file has a\n    +        // space. TODO need to fix this\n    +        jvmOptions.addAll(Arrays.asList(uiOptions.split(\" \")));\n    +        jvmOptions.add(\"-Dlogfile.name=ui.log\");\n    +        jvmOptions.add(\"-Dlog4j.configurationFile=\" + this\n    +                .getLog4jConfigDirectory() + this.fileSeparator + \"cluster\" +\n    +                \".xml\");\n    +        extraPaths.add(0, this.stormHomeDirectory);\n    +        this.executeStormClass(this.UI_CLASS, \"-server\", jvmOptions,\n    +                extraPaths, new ArrayList<String>(), false, true, \"ui\");\n    +        return;\n    +    }\n    +\n    +    void logviewerCommand (List<String> args) {\n    +        System.out.println(\"Called logviewerCommand using reflection\");\n    +        System.out.println(\"Arguments are : \");\n    +        for (String s: args) {\n    +            System.out.println(s);\n    +        }\n    +        List<String> jvmOptions = new ArrayList<String>();\n    +        List<String> extraPaths = new ArrayList<String>();\n    +        extraPaths.add(this.clusterConfDirectory);\n    +        String logviewerOptions = this.confValue(\"logviewer.childopts\",\n    +                extraPaths, true);\n    +        // below line is different from original python script storm.py where\n    +        // it called parse_args method on nimbusOptions. Now we just call a\n    +        // split with a space.  Hence this will have different behavior and\n    +        // a buggy one if the nimbusOptions string in the config file has a\n    +        // space. TODO need to fix this\n    +        jvmOptions.addAll(Arrays.asList(logviewerOptions.split(\" \")));\n    +        jvmOptions.add(\"-Dlogfile.name=logviewer.log\");\n    +        jvmOptions.add(\"-Dlog4j.configurationFile=\" + this\n    +                .getLog4jConfigDirectory() + this.fileSeparator + \"cluster\" +\n    +                \".xml\");\n    +        extraPaths.add(0, this.stormHomeDirectory);\n    +        this.executeStormClass(this.LOGVIEWER_CLASS, \"-server\", jvmOptions,\n    +                extraPaths, new ArrayList<String>(), false, true, \"logviewer\");\n    +        return;\n    +    }\n    +\n    +    void drpcCommand (List<String> args) {\n    +        System.out.println(\"Called drpcCommand using reflection\");\n    +        System.out.println(\"Arguments are : \");\n    +        for (String s: args) {\n    +            System.out.println(s);\n    +        }\n    +        List<String> jvmOptions = new ArrayList<String>();\n    +        List<String> extraPaths = new ArrayList<String>();\n    +        extraPaths.add(this.clusterConfDirectory);\n    +        String drpcOptions = this.confValue(\"drpc.childopts\", extraPaths,\n    +                true);\n    +        // below line is different from original python script storm.py where\n    +        // it called parse_args method on nimbusOptions. Now we just call a\n    +        // split with a space.  Hence this will have different behavior and\n    +        // a buggy one if the nimbusOptions string in the config file has a\n    +        // space. TODO need to fix this\n    +        jvmOptions.addAll(Arrays.asList(drpcOptions.split(\" \")));\n    +        jvmOptions.add(\"-Dlogfile.name=drpc.log\");\n    +        jvmOptions.add(\"-Dlog4j.configurationFile=\" + this\n    +                .getLog4jConfigDirectory() + this.fileSeparator + \"cluster\" +\n    +                \".xml\");\n    +        this.executeStormClass(this.DRPC_CLASS, \"-server\", jvmOptions,\n    +                extraPaths, new ArrayList<String>(), false, true, \"drpc\");\n    +        return;\n    +    }\n    +\n    +    void supervisorCommand (List<String> args) {\n    +        System.out.println(\"Called supervisorCommand using reflection\");\n    +        System.out.println(\"Arguments are : \");\n    +        for (String s: args) {\n    +            System.out.println(s);\n    +        }\n    +        List<String> jvmOptions = new ArrayList<String>();\n    +        List<String> extraPaths = new ArrayList<String>();\n    +        extraPaths.add(this.clusterConfDirectory);\n    +        String supervisorOptions = this.confValue(\"supervisor.childopts\",\n    +                extraPaths,\n    +                true);\n    +        // below line is different from original python script storm.py where\n    +        // it called parse_args method on nimbusOptions. Now we just call a\n    +        // split with a space.  Hence this will have different behavior and\n    +        // a buggy one if the nimbusOptions string in the config file has a\n    +        // space. TODO need to fix this\n    +        jvmOptions.addAll(Arrays.asList(supervisorOptions.split(\" \")));\n    +        jvmOptions.add(\"-Dlogfile.name=supervisor.log\");\n    +        jvmOptions.add(\"-Dlog4j.configurationFile=\" + this\n    +                .getLog4jConfigDirectory() + this.fileSeparator + \"cluster\" +\n    +                \".xml\");\n    +        this.executeStormClass(this.SUPERVISOR_CLASS, \"-server\", jvmOptions,\n    +                extraPaths, new ArrayList<String>(), false, true, \"supervisor\");\n    +        return;\n    +    }\n    +\n    +    void localconfvalueCommand (List<String> args) {\n    +        System.out.println(\"Called localconfvalueCommand using reflection\");\n    +        System.out.println(\"Arguments are : \");\n    +        for (String s: args) {\n    +            System.out.println(s);\n    +        }\n    +        if ((args == null) || (args.size() == 0)) {\n    +            System.out.println(\"Not enough arguments for localconfvalue \" +\n    +                    \"command\");\n    +            System.out.println(\"Please pass the name of the config value you \" +\n    +                    \"want to be printed\");\n    +            //TODO print command help for localconfvalue command\n    +            System.exit(2);\n    +        }\n    +        List<String> extraPaths = new ArrayList<String>();\n    +        extraPaths.add(this.userConfDirectory);\n    +        System.out.println(args.get(0) + \": \" + this.confValue(args.get(0),\n    +                extraPaths,\n    +                true));\n    +        return;\n    +    }\n    +\n    +    void remoteconfvalueCommand (List<String> args) {\n    +        System.out.println(\"Called remoteconfvalueCommand using reflection\");\n    +        System.out.println(\"Arguments are : \");\n    +        for (String s: args) {\n    +            System.out.println(s);\n    +        }\n    +        if ((args == null) || (args.size() == 0)) {\n    +            System.out.println(\"Not enough arguments for remoteconfvalue \" +\n    +                    \"command\");\n    +            System.out.println(\"Please pass the name of the config value you \" +\n    +                    \"want to be printed\");\n    +            //TODO print command help for remoteconfvalue command\n    +            System.exit(2);\n    +        }\n    +        List<String> extraPaths = new ArrayList<String>();\n    +        extraPaths.add(this.clusterConfDirectory);\n    +        System.out.println(args.get(0) + \": \" + this.confValue(args.get(0),\n    +                extraPaths,\n    +                true));\n    +        return;\n    +    }\n    +\n    +    void replCommand (List<String> args) {\n    +        System.out.println(\"Called replCommand using reflection\");\n    +        System.out.println(\"Arguments are : \");\n    +        for (String s: args) {\n    +            System.out.println(s);\n    +        }\n    +        List<String> extraPaths = new ArrayList<String>();\n    +        extraPaths.add(this.clusterConfDirectory);\n    +        this.executeStormClass(this.REPL_CLASS, \"-client\", new\n    +                        ArrayList<String>(), extraPaths, new ArrayList<String>(),\n    +                false, true, \"\");\n    +        return;\n    +    }\n    +\n    +    void classpathCommand (List<String> args) {\n    +        System.out.println(\"Called classpathCommand using reflection\");\n    +        System.out.println(\"Arguments are : \");\n    +        for (String s: args) {\n    +            System.out.println(s);\n    +        }\n    +        System.out.println(this.getClassPath(new ArrayList<String>(), true));\n    +        return;\n    +    }\n    +\n    +    void activateCommand (List<String> args) {\n    +        System.out.println(\"Called activateCommand using reflection\");\n    +        System.out.println(\"Arguments are : \");\n    +        for (String s: args) {\n    +            System.out.println(s);\n    +        }\n    +        if ((args == null) || (args.size() < 1)) {\n    +            System.out.println(\"Not enough arguments for activate command\");\n    +            System.out.println(\"Please pass the topology name to activate\");\n    +            //TODO print usage for activate command here\n    +            System.exit(2);\n    +        }\n    +        List<String> extraPaths = new ArrayList<String>();\n    +        extraPaths.add(this.userConfDirectory);\n    +        extraPaths.add(this.stormBinDirectory);\n    +        this.executeStormClass(this.ACTIVATE_CLASS, \"-client\", new\n    +                ArrayList<String>(), extraPaths, args, false, false, \"\");\n    +        return;\n    +    }\n    +\n    +    void deactivateCommand (List<String> args) {\n    +        System.out.println(\"Called deactivateCommand using reflection\");\n    +        System.out.println(\"Arguments are : \");\n    +        for (String s: args) {\n    +            System.out.println(s);\n    +        }\n    +        if ((args == null) || (args.size() < 1)) {\n    +            System.out.println(\"Not enough arguments for deactivate command\");\n    +            System.out.println(\"Please pass the topology name to deactivate\");\n    +            //TODO print usage for deactivate command here\n    +            System.exit(2);\n    +        }\n    +        List<String> extraPaths = new ArrayList<String>();\n    +        extraPaths.add(this.userConfDirectory);\n    +        extraPaths.add(this.stormBinDirectory);\n    +        this.executeStormClass(this.DEACTIVATE_CLASS, \"-client\", new\n    +                ArrayList<String>(), extraPaths, args, false, false, \"\");\n    +        return;\n    +    }\n    +\n    +    void rebalanceCommand (List<String> args) {\n    +        System.out.println(\"Called rebalanceCommand using reflection\");\n    +        System.out.println(\"Arguments are : \");\n    +        for (String s: args) {\n    +            System.out.println(s);\n    +        }\n    +        if ((args == null) || (args.size() < 1)) {\n    +            System.out.println(\"Not enough arguments for rebalance command\");\n    +            System.out.println(\"Please pass the topology name to rebalance\");\n    +            //TODO print usage for rebalance command here\n    +            System.exit(2);\n    +        }\n    +        List<String> extraPaths = new ArrayList<String>();\n    +        extraPaths.add(this.userConfDirectory);\n    +        extraPaths.add(this.stormBinDirectory);\n    +        this.executeStormClass(this.REBALANCE_CLASS, \"-client\", new\n    +                ArrayList<String>(), extraPaths, args, false, false, \"\");\n    +        return;\n    +    }\n    +\n    +    void helpCommand (List<String> args) {\n    +        System.out.println(\"Called helpCommand using reflection\");\n    +        System.out.println(\"Arguments are : \");\n    +        for (String s: args) {\n    +            System.out.println(s);\n    +        }\n    +        if ((args == null) || (args.size() == 0)) {\n    +            this.printUsage();\n    +        } else {\n    +            if ((!this.COMMANDS.contains(args.get(0)))) {\n    +                System.out.println(args.get(0) + \" is not a valid command\");\n    +            } else {\n    +                //TODO print indivudual commands help here\n    +                System.out.println(\"Print command specific help here\");\n    +            }\n    +        }\n    +        return;\n    +    }\n    +\n    +    void listCommand (List<String> args) {\n    +        System.out.println(\"Called listCommand using reflection\");\n    +        System.out.println(\"Arguments are : \");\n    +        for (String s: args) {\n    +            System.out.println(s);\n    +        }\n    +        List<String> extraPaths = new ArrayList<String>();\n    +        extraPaths.add(this.userConfDirectory);\n    +        extraPaths.add(this.stormBinDirectory);\n    +        this.executeStormClass(this.LIST_CLASS, \"-client\", new\n    +                ArrayList<String>(), extraPaths, args, false, false, \"\");\n    +        return;\n    +    }\n    +\n    +    void devzookeeperCommand (List<String> args) {\n    +        System.out.println(\"Called devzookeeperCommand using reflection\");\n    +        System.out.println(\"Arguments are : \");\n    +        for (String s: args) {\n    +            System.out.println(s);\n    +        }\n    +        return;\n    +    }\n    +\n    +    void versionCommand (List<String> args) {\n    +        System.out.println(\"Called versionCommand using reflection\");\n    +        System.out.println(\"Arguments are : \");\n    +        for (String s: args) {\n    +            System.out.println(s);\n    +        }\n    +        return;\n    +    }\n    +\n    +    void monitorCommand (List<String> args) {\n    +        System.out.println(\"Called monitorCommand using reflection\");\n    +        System.out.println(\"Arguments are : \");\n    +        for (String s: args) {\n    +            System.out.println(s);\n    +        }\n    +        return;\n    +    }\n    +\n    +    void uploadcredentialsCommand (List<String> args) {\n    +        System.out.println(\"Called uploadcredentialsCommand using reflection\");\n    +        System.out.println(\"Arguments are : \");\n    +        for (String s: args) {\n    +            System.out.println(s);\n    +        }\n    +        return;\n    +    }\n    +\n    +    void geterrorsCommand (List<String> args) {\n    +        System.out.println(\"Called geterrorsCommand using reflection\");\n    +        System.out.println(\"Arguments are : \");\n    +        for (String s: args) {\n    +            System.out.println(s);\n    +        }\n    +        return;\n    +    }\n    +\n    +    String getLog4jConfigDirectory () {\n    +        List<String> extraPaths = new ArrayList<String>();\n    +        extraPaths.add(this.clusterConfDirectory);\n    +        String log4jDirectory = this.confValue(\"storm.logback.conf.dir\",\n    +                extraPaths, true);\n    +        if ((log4jDirectory == null) || (\"\".equals(log4jDirectory)) ||\n    +                (\"nil\".equals(log4jDirectory))) {\n    +            log4jDirectory = this.stormLog4jConfDirectory;\n    +        }\n    +        return log4jDirectory;\n    +    }\n    +\n    +    private void printUsage () {\n    +        String commands = StringUtils.join(this.COMMANDS, \"\\n\\t\");\n    +        System.out.println(\"Commands:\\n\\t\" + commands);\n    +        System.out.println(\"\\nHelp: \\n\\thelp \\n\\thelp <command>\\n\");\n    +        System.out.println(\"Documentation for the storm client can be found\" +\n    +                \" at \"  +\n    +                \"http://storm.incubator.apache\" +\n    +                \".org/documentation/Command-line-client.html\\n\");\n    +        System.out.println(\"Configs can be overridden using one or more -c \" +\n    +                \"flags, e.g. \" +\n    +                \"\\\"storm list -c nimbus.host=nimbus.mycompany.com\\\"\\n\");\n    +    }\n    +\n    +    private void executeHelpCommand () {\n    +        System.out.println(\"Print storm help here\");\n    +    }\n    +\n    +}\n    +\n    +class WindowsStormCommandExecutor extends StormCommandExecutor {\n    +\n    +    WindowsStormCommandExecutor () {\n    +\n    +    }\n    +\n    +    void initialize () {\n    +        return;\n    +    }\n    +\n    +    void execute (String[] args) {\n    --- End diff --\n    \n    @caofangkun thanks for checking this out. The code is still not complete. I need to put the windows implementation as well. Most of the code in the UnixStormCommandExecutor will move to abstract base class so that WindowsStormCommandLineExecutor can reuse. It will only have code that is specific to windows.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2015-08-05T16:52:26.376+0000","updated":"2015-08-05T16:52:26.376+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12839443/comment/14695899","id":"14695899","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user knusbaum commented on the pull request:\n\n    https://github.com/apache/storm/pull/662#issuecomment-130832806\n  \n    I have a little confusion about why we're moving the python to java instead of just having the storm.cmd run the existing storm.py.\n    \n    I'm all in favor of de-duplicating the storm.py and storm.cmd commands, but rather than reimplementing storm.py, I'd rather reuse it.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2015-08-13T20:37:57.207+0000","updated":"2015-08-13T20:37:57.207+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12839443/comment/14695915","id":"14695915","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user harshach commented on the pull request:\n\n    https://github.com/apache/storm/pull/662#issuecomment-130838110\n  \n    @knusbaum it will make lot easier for commands to be in java and we can have just wrappers for windows & nix* os. We don't need to have python dependency and in our experience of running python to execute java command to start a jvm takes lot of time and in larger clusters Ambari times out these commands.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2015-08-13T20:49:44.940+0000","updated":"2015-08-13T20:49:44.940+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12839443/comment/15008779","id":"15008779","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user ptgoetz commented on the pull request:\n\n    https://github.com/apache/storm/pull/662#issuecomment-157395059\n  \n    Any update on this PR? It would seem it at least needs an upmerge and additional review.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2015-11-17T15:02:35.932+0000","updated":"2015-11-17T15:02:35.932+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12839443/comment/15009320","id":"15009320","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=pshah","name":"pshah","key":"pshah","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Priyank Shah","active":true,"timeZone":"America/Los_Angeles"},"body":"I have not worked on this in a while. The windows implementation is not done yet. Besides, the Unix based implementation will also need to be updated based on any additions to the command line. It needs an upmerge and additional review as well. I have updated the JIRA to Stop Progress for now. Sorry for not doing it sooner. ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=pshah","name":"pshah","key":"pshah","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Priyank Shah","active":true,"timeZone":"America/Los_Angeles"},"created":"2015-11-17T19:24:36.924+0000","updated":"2015-11-17T19:24:36.924+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12839443/comment/15010812","id":"15010812","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user hustfxj commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/662#discussion_r45188898\n  \n    --- Diff: storm-core/src/jvm/backtype/storm/utils/StormCommandExecutor.java ---\n    @@ -0,0 +1,868 @@\n    +package backtype.storm.utils;\n    +\n    +import java.io.BufferedReader;\n    +import java.io.File;\n    +import java.io.InputStream;\n    +import java.io.InputStreamReader;\n    +import java.lang.reflect.InvocationTargetException;\n    +import java.lang.reflect.Method;\n    +import java.nio.charset.StandardCharsets;\n    +import java.util.*;\n    +\n    +import clojure.lang.IFn;\n    +import org.apache.commons.lang.StringUtils;\n    +import org.apache.commons.lang.SystemUtils;\n    +\n    +/**\n    + * Created by pshah on 7/17/15.\n    + */\n    +abstract class StormCommandExecutor {\n    +    final String NIMBUS_CLASS = \"backtype.storm.daemon.nimbus\";\n    +    final String SUPERVISOR_CLASS = \"backtype.storm.daemon.supervisor\";\n    +    final String UI_CLASS = \"backtype.storm.ui.core\";\n    +    final String LOGVIEWER_CLASS = \"backtype.storm.daemon.logviewer\";\n    +    final String DRPC_CLASS = \"backtype.storm.daemon.drpc\";\n    +    final String REPL_CLASS = \"clojure.main\";\n    +    final String ACTIVATE_CLASS = \"backtype.storm.command.activate\";\n    +    final String DEACTIVATE_CLASS = \"backtype.storm.command.deactivate\";\n    +    final String REBALANCE_CLASS = \"backtype.storm.command.rebalance\";\n    +    final String LIST_CLASS = \"backtype.storm.command.list\";\n    +    final String DEVZOOKEEPER_CLASS = \"backtype.storm.command.dev_zookeeper\";\n    +    final String VERSION_CLASS = \"backtype.storm.utils.VersionInfo\";\n    +    final String MONITOR_CLASS = \"backtype.storm.command.monitor\";\n    +    final String UPLOADCREDENTIALS_CLASS = \"backtype.storm.command\" +\n    +            \".upload_credentials\";\n    +    final String GETERRORS_CLASS = \"backtype.storm.command.get_errors\";\n    +    final String SHELL_CLASS = \"backtype.storm.command.shell_submission\";\n    +    String stormHomeDirectory;\n    +    String userConfDirectory;\n    +    String stormConfDirectory;\n    +    String clusterConfDirectory;\n    +    String stormLibDirectory;\n    +    String stormBinDirectory;\n    +    String stormLog4jConfDirectory;\n    +    String configFile = \"\";\n    +    String javaCommand;\n    +    List<String> configOptions = new ArrayList<String>();\n    +    String stormExternalClasspath;\n    +    String stormExternalClasspathDaemon;\n    +    String fileSeparator;\n    +    final List<String> COMMANDS = Arrays.asList(\"jar\", \"kill\", \"shell\",\n    +            \"nimbus\", \"ui\", \"logviewer\", \"drpc\", \"supervisor\",\n    +            \"localconfvalue\",  \"remoteconfvalue\", \"repl\", \"classpath\",\n    +            \"activate\", \"deactivate\", \"rebalance\", \"help\",  \"list\",\n    +            \"dev-zookeeper\", \"version\", \"monitor\", \"upload-credentials\",\n    +            \"get-errors\");\n    +\n    +    public static void main (String[] args) {\n    +        for (String arg : args) {\n    +            System.out.println(\"Argument ++ is \" + arg);\n    +        }\n    +        StormCommandExecutor stormCommandExecutor;\n    +        if (System.getProperty(\"os.name\").startsWith(\"Windows\")) {\n    +            stormCommandExecutor = new WindowsStormCommandExecutor();\n    +        } else {\n    +            stormCommandExecutor = new UnixStormCommandExecutor();\n    +        }\n    +        stormCommandExecutor.initialize();\n    +        stormCommandExecutor.execute(args);\n    +    }\n    +\n    +    StormCommandExecutor () {\n    +\n    +    }\n    +\n    +    abstract void initialize ();\n    +\n    +    abstract void execute (String[] args);\n    +\n    +    void callMethod (String command, List<String> args) {\n    +        Class implementation = this.getClass();\n    +        String methodName = command.replace(\"-\", \"\") + \"Command\";\n    +        try {\n    +            Method method = implementation.getDeclaredMethod(methodName, List\n    +                    .class);\n    +            method.invoke(this, args);\n    +        } catch (NoSuchMethodException ex) {\n    +            System.out.println(\"No such method exception occured while trying\" +\n    +                    \" to run storm method \" + command);\n    +        } catch (IllegalAccessException ex) {\n    +            System.out.println(\"Illegal access exception occured while trying\" +\n    +                    \" to run storm method \" + command);\n    +        } catch (IllegalArgumentException ex) {\n    +            System.out.println(\"Illegal argument exception occured while \" +\n    +                    \"trying\" + \" to run storm method \" + command);\n    +        } catch (InvocationTargetException ex) {\n    +            System.out.println(\"Invocation target exception occured while \" +\n    +                    \"trying\" + \" to run storm method \" + command);\n    +        }\n    +    }\n    +}\n    +\n    +class UnixStormCommandExecutor extends StormCommandExecutor {\n    +\n    +    UnixStormCommandExecutor () {\n    +\n    +    }\n    +\n    +    void initialize () {\n    +        Collections.sort(this.COMMANDS);\n    +        this.fileSeparator = System .getProperty (\"file.separator\");\n    +        this.stormHomeDirectory = System.getenv(\"STORM_BASE_DIR\");\n    +        this.userConfDirectory = System.getProperty(\"user.home\") +\n    +                this.fileSeparator + \"\" +\n    +                \".storm\";\n    +        this.stormConfDirectory = System.getenv(\"STORM_CONF_DIR\");\n    +        this.clusterConfDirectory = this.stormConfDirectory == null ?  (this\n    +                .stormHomeDirectory + this.fileSeparator + \"conf\") : this\n    +                .stormConfDirectory;\n    +        File f = new File(this.userConfDirectory + this.fileSeparator +\n    +                \"storm.yaml\");\n    +        if (!f.isFile()) {\n    +            this.userConfDirectory = this.clusterConfDirectory;\n    +        }\n    +        this.stormLibDirectory = this.stormHomeDirectory + this.fileSeparator +\n    +                \"lib\";\n    +        this.stormBinDirectory = this.stormHomeDirectory + this.fileSeparator +\n    +                \"bin\";\n    +        this.stormLog4jConfDirectory = this.stormHomeDirectory +\n    +                this.fileSeparator + \"log4j2\";\n    +        if (System.getenv(\"JAVA_HOME\") != null) {\n    +            this.javaCommand = System.getenv(\"JAVA_HOME\") + this.fileSeparator +\n    +                    \"bin\" + this.fileSeparator + \"java\";\n    +            if (!(new File(this.javaCommand).exists())) {\n    +                System.out.println(\"ERROR:  JAVA_HOME is invalid.  Could not \" +\n    +                        \"find \" + this.javaCommand);\n    +                System.exit(1);\n    +            }\n    +        } else {\n    +            this.javaCommand = \"java\";\n    +        }\n    +        this.stormExternalClasspath = System.getenv(\"STORM_EXT_CLASSPATH\");\n    +        this.stormExternalClasspathDaemon = System.getenv\n    +                (\"STORM_EXT_CLASSPATH_DAEMON\");\n    +        if (!(new File(this.stormLibDirectory).exists())) {\n    +            System.out.println(\"******************************************\");\n    +            System.out.println(\"The storm client can only be run from within \" +\n    +                    \"a release. \" + \"You appear to be trying to run the client\" +\n    +                    \" from a checkout of Storm's source code.\");\n    +            System.out.println(\"You can download a Storm release at \" +\n    +                    \"http://storm-project.net/downloads.html\");\n    +            System.out.println(\"******************************************\");\n    +            System.exit(1);\n    +        }\n    +        //System.getProperties().list(System.out);\n    +    }\n    +\n    +    void execute (String[] args) {\n    +        if (args.length == 0) {\n    +            this.printUsage();\n    +            System.exit(-1);\n    +        }\n    +        List<String> commandArgs = new ArrayList<String>();\n    +        for (int i = 0; i < args.length; ++i) {\n    +            if (args[i] == \"-c\") {\n    +                this.configOptions.add(args[++i]);\n    +            } else if (args[i] == \"--config\") {\n    +                this.configFile = args[++i];\n    +            } else {\n    +                commandArgs.add(args[i]);\n    +            }\n    +        }\n    +        if ((commandArgs.size() == 0)  || (!this.COMMANDS.contains\n    +                (commandArgs.get(0)))) {\n    +            System.out.println(\"Unknown command: [storm \" + StringUtils.join\n    +                    (args, \" \") +  \"]\");\n    +            this.printUsage();\n    +            System.exit(254);\n    +\n    +        }\n    +        this.callMethod(commandArgs.get(0), commandArgs.subList(1,\n    +                commandArgs.size()));\n    +\n    +    }\n    +\n    +    String getConfigOptions() {\n    +        String configOptions = \"-Dstorm.options=\";\n    +        //TODO  - do urlencode here. python does quote_plus to each configoption\n    +        return configOptions + StringUtils.join(this.configOptions, ',');\n    +\n    +    }\n    +\n    +    List<String> getJarsFull (String directory) {\n    +        List<String> fullJarFiles = new ArrayList<String>();\n    +        File file = new File(directory);\n    +        File[] files = file.listFiles();\n    +        if (files != null) {\n    +            for (File f : files) {\n    +                if (f.getName().endsWith(\".jar\")) {\n    +                    fullJarFiles.add(f.getPath());\n    +                }\n    +            }\n    +        }\n    +        return fullJarFiles;\n    +    }\n    +\n    +    String getClassPath (List<String> extraJars, boolean daemon) {\n    +        List<String> classPaths = this.getJarsFull(this.stormHomeDirectory);\n    +        classPaths.addAll(this.getJarsFull(this.stormLibDirectory));\n    +        classPaths.addAll(this.getJarsFull(this.stormHomeDirectory + this\n    +                .fileSeparator + \"extlib\"));\n    +        if (daemon == true) {\n    +            classPaths.addAll(this.getJarsFull(this.stormHomeDirectory + this\n    +                    .fileSeparator + \"extlib-daemon\"));\n    +        }\n    +        if (this.stormExternalClasspath != null) {\n    +            classPaths.add(this.stormExternalClasspath);\n    +        }\n    +        if (this.stormExternalClasspathDaemon != null) {\n    +            classPaths.add(this.stormExternalClasspathDaemon);\n    +        }\n    +        classPaths.addAll(extraJars);\n    +        return StringUtils.join(classPaths, System.getProperty(\"path\" +\n    +                \".separator\"));\n    +    }\n    +\n    +    String confValue (String name, List<String> extraPaths, boolean daemon) {\n    +        // The original code from python started a process that started a jvm\n    +        // with backtype.storm.command.config_value main method that would\n    +        // read the conf value and print it out to an output stream. python\n    +        // tapped on to the output stream of that subprocess and returned the\n    +        // confvalue for the name. Because the pythong code has been shipped\n    +        // to java now it should not spawn a new process which is a jvm since\n    +        // we are already in jvm. Instead it should just be doing as the code\n    +        // commeneted below.\n    +        // However looking at the pythong code it was\n    +        // starting a jvm with -cp argument that had classpaths which might\n    +        // not be available to this java process. Hence there is a chance\n    +        // that the below code might break existing scripts. As a result I\n    +        // have decided to still spawn a new process from java just like\n    +        // python with similar classpaths being constructed for the jvm\n    +        // execution\n    +        /*IFn fn = Utils.loadClojureFn(\"backtype.storm.config\",\n    +                \"read-storm-config\");\n    +        Object o = fn.invoke();\n    +        return ((Map) o).get(name).toString();*/\n    +        String confValue = \"\";\n    +        ProcessBuilder processBuilder = new ProcessBuilder(this.javaCommand,\n    +                \"-client\", this.getConfigOptions(), \"-Dstorm.conf.file=\" +\n    +                this.configFile, \"-cp\", this.getClassPath(extraPaths, daemon),\n    +                \"backtype.storm.command.config_value\", name);\n    +        BufferedReader br;\n    +        try {\n    +            Process process = processBuilder.start();\n    +            br = new BufferedReader(new InputStreamReader(process\n    +                    .getInputStream(), StandardCharsets.UTF_8));\n    +            process.waitFor();\n    +            String line;\n    +            while ((line = br.readLine()) != null) {\n    +                String[] tokens = line.split(\" \");\n    +                if (\"VALUE:\".equals(tokens[0])) {\n    +                    confValue = StringUtils.join(Arrays.copyOfRange(tokens, 1,\n    +                            tokens.length), \" \");\n    +                    break;\n    +                }\n    +            }\n    +            br.close();\n    +        } catch (Exception ex) {\n    +            System.out.println(\"Exception occured while starting process via \" +\n    +                    \"processbuilder \" + ex.getMessage());\n    +        }\n    +        return confValue;\n    +    }\n    +\n    +    void executeStormClass (String className, String jvmType, List<String>\n    +            jvmOptions, List<String> extraJars, List<String> args, boolean\n    +            fork, boolean daemon, String daemonName) {\n    +        List<String> extraPaths = new ArrayList<>();\n    +        extraPaths.add(this.clusterConfDirectory);\n    +        String stormLogDirectory = this.confValue(\"storm.log.dir\",\n    +                extraPaths, daemon);\n    +        if ((stormLogDirectory == null) || (\"\".equals(stormLogDirectory)) ||\n    +                (\"nil\".equals(stormLogDirectory))) {\n    +            stormLogDirectory = this.stormHomeDirectory + this.fileSeparator\n    +                    + \"logs\";\n    +        }\n    +        List<String> commandList = new ArrayList<String>();\n    +        commandList.add(this.javaCommand);\n    +        commandList.add(jvmType);\n    +        commandList.add(\"-Ddaemon.name=\" + daemonName);\n    +        commandList.add(this.getConfigOptions());\n    +        commandList.add(\"-Dstorm.home=\" + this.stormHomeDirectory);\n    +        commandList.add(\"-Dstorm.log.dir=\" + stormLogDirectory);\n    +        commandList.add(\"-Djava.library.path=\" + this\n    +                .confValue(\"java.library.path\", extraJars, daemon));\n    +        commandList.add(\"-Dstorm.conf.file=\" + this.configFile);\n    +        commandList.add(\"-cp\");\n    +        commandList.add(this.getClassPath(extraJars, daemon));\n    +        commandList.addAll(jvmOptions);\n    +        commandList.add(className);\n    +        commandList.addAll(args);\n    +        ProcessBuilder processBuilder = new ProcessBuilder(commandList);\n    +        processBuilder.inheritIO();\n    +        try {\n    +            Process process = processBuilder.start();\n    +            System.out.println(\"Executing the command: \");\n    +            String commandLine = StringUtils.join(commandList, \" \");\n    +            System.out.println(commandLine);\n    +            if (daemon == true) {\n    +                Runtime.getRuntime().addShutdownHook(new ShutdownHookThread\n    +                        (process, commandLine));\n    +            }\n    +            System.out.println(\"Waiting for subprocess to finish\");\n    +            process.waitFor();\n    +            System.out.println(\"subprocess finished\");\n    +            System.out.println(\"Exit value from subprocess is :\" + process\n    +                    .exitValue());\n    +        } catch (Exception ex) {\n    +            System.out.println(\"Exception occured while starting process via \" +\n    +                    \"processbuilder \" + ex.getMessage());\n    +        }\n    --- End diff --\n    \n    not all process need waitfor(). maybe you can add option. Like this:\n    \n        public static java.lang.Process launch_process(final String command, final Map<String, String> environment, boolean backend) throws IOException {\n    \n            if (backend == true) {\n                new Thread(new Runnable() {\n    \n                    @Override\n                    public void run() {\n                        String[] cmdlist = (new String(\"nohup \" + command + \" &\")).split(\" \");\n                        try {\n                            launchProcess(cmdlist, environment);\n                        } catch (IOException e) {\n                            LOG.error(\"Failed to run \" + command + \":\" + e.getCause(), e);\n                        }\n                    }\n                }).start();\n                return null;\n            } else {\n                String[] cmdlist = command.split(\" \");\n                return launchProcess(cmdlist, environment);\n            }\n        }\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2015-11-18T11:35:44.740+0000","updated":"2015-11-18T11:35:44.740+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12839443/comment/15010827","id":"15010827","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user longdafeng commented on the pull request:\n\n    https://github.com/apache/storm/pull/662#issuecomment-157686065\n  \n    @priyank5485 \n    \n    I don't prefer switch storm.py from python to java. Because  I often add debug point in the storm.py, it is very easy to debug in online system(especially when environment is bad or jvm parameter is wrong). if we change to java version, it is very hard to debug. \n    \n    Another point is that python's code is more easy to add new functions in the script. \n    \n\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2015-11-18T11:41:40.684+0000","updated":"2015-11-18T11:41:40.684+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12839443/comment/15011555","id":"15011555","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user priyank5485 commented on the pull request:\n\n    https://github.com/apache/storm/pull/662#issuecomment-157804563\n  \n    @hustfxj  I might have missed something and its been a long time since i did this. I could not find any storm command that would not need a waitFor. Can you give an example? If we do need that flag it should be easy to add and I can change that.\n    \n    @longdafeng I am not sure I understand the point about debugging. You can still put a break point in this java version of storm command line. I agree with you that its easier to write new functions in script. But the whole point of this JIRA is to have one client that works for Unix based systems and Windows platform. The last time I was working on it we had storm.py for Unix and storm batch client for windows. Both of them also had a separate file for environment variables. It is hard to maintain two scripts anytime we want to change the storm command. We can ask others about their opinion and what they think is better between the two approaches.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2015-11-18T18:05:44.460+0000","updated":"2015-11-18T18:05:44.460+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12839443/comment/15011585","id":"15011585","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user priyank5485 commented on the pull request:\n\n    https://github.com/apache/storm/pull/662#issuecomment-157808005\n  \n    @longdafeng Also please see one of the previous comments about why not to use python.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2015-11-18T18:18:28.187+0000","updated":"2015-11-18T18:18:28.187+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12839443/comment/15035960","id":"15035960","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"GitHub user dossett opened a pull request:\n\n    https://github.com/apache/storm/pull/913\n\n    Fix typo in get_jars_full\n\n    I was considering writing a python unit test to go with this change, but given the discussion in STORM-904 that doesn't seem useful if this will be migrated to java soon.\n\nYou can merge this pull request into a Git repository by running:\n\n    $ git pull https://github.com/dossett/storm patch-1\n\nAlternatively you can review and apply these changes as the patch at:\n\n    https://github.com/apache/storm/pull/913.patch\n\nTo close this pull request, make a commit to your master/trunk branch\nwith (at least) the following in the commit message:\n\n    This closes #913\n    \n----\ncommit 27b5cd9eae56ed69cfb23fbc3d0e1d165fdff89e\nAuthor: Aaron Niskode-Dossett <aaron.dossett@target.com>\nDate:   2015-12-02T15:27:02Z\n\n    Fix typo in get_jars_full\n\n----\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2015-12-02T15:28:21.843+0000","updated":"2015-12-02T15:28:21.843+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12839443/comment/15042077","id":"15042077","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user dossett closed the pull request at:\n\n    https://github.com/apache/storm/pull/913\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2015-12-04T19:41:04.305+0000","updated":"2015-12-04T19:41:04.305+0000"}],"maxResults":16,"total":16,"startAt":0},"votes":{"self":"https://issues.apache.org/jira/rest/api/2/issue/STORM-904/votes","votes":0,"hasVoted":false},"worklog":{"startAt":0,"maxResults":20,"total":0,"worklogs":[]},"customfield_12311820":"0|i2gbhj:"}}