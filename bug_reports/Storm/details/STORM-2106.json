{"expand":"renderedFields,names,schema,operations,editmeta,changelog,versionedRepresentations","id":"13006240","self":"https://issues.apache.org/jira/rest/api/2/issue/13006240","key":"STORM-2106","fields":{"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype","name":"Bug","subtask":false,"avatarId":21133},"timespent":null,"project":{"self":"https://issues.apache.org/jira/rest/api/2/project/12314820","id":"12314820","key":"STORM","name":"Apache Storm","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/projectavatar?pid=12314820&avatarId=21667","24x24":"https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12314820&avatarId=21667","16x16":"https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12314820&avatarId=21667","32x32":"https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12314820&avatarId=21667"},"projectCategory":{"self":"https://issues.apache.org/jira/rest/api/2/projectCategory/13260","id":"13260","description":"Apache Storm Related","name":"Storm"}},"fixVersions":[],"aggregatetimespent":null,"resolution":{"self":"https://issues.apache.org/jira/rest/api/2/resolution/8","id":"8","description":"The described issue is not actually a problem - it is as designed.","name":"Not A Problem"},"customfield_12312322":null,"customfield_12310220":"2016-09-20T18:08:12.064+0000","customfield_12312520":null,"customfield_12312323":null,"customfield_12312521":"Tue Sep 20 20:43:37 UTC 2016","customfield_12312320":null,"customfield_12310222":"1_*:*_1_*:*_10851359_*|*_6_*:*_1_*:*_0","customfield_12310420":"9223372036854775807","customfield_12312321":null,"resolutiondate":"2016-09-20T20:32:37.114+0000","workratio":-1,"customfield_12312328":null,"customfield_12312329":null,"customfield_12312923":null,"customfield_12312326":null,"customfield_12312920":null,"customfield_12310300":null,"customfield_12312327":null,"customfield_12312921":null,"customfield_12312324":null,"customfield_12312720":null,"customfield_12312325":null,"lastViewed":null,"watches":{"self":"https://issues.apache.org/jira/rest/api/2/issue/STORM-2106/watchers","watchCount":2,"isWatching":false},"created":"2016-09-20T17:31:46.031+0000","priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.svg","name":"Major","id":"3"},"labels":[],"customfield_12312333":null,"customfield_12312334":null,"customfield_12313422":"false","customfield_12310310":"0.0","customfield_12312331":null,"customfield_12312332":null,"timeestimate":null,"aggregatetimeoriginalestimate":null,"customfield_12311120":null,"customfield_12312330":null,"versions":[],"customfield_12312339":null,"issuelinks":[],"assignee":null,"customfield_12312337":null,"customfield_12312338":null,"updated":"2016-09-20T20:43:37.002+0000","customfield_12312335":null,"customfield_12312336":null,"status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Done"}},"components":[],"timeoriginalestimate":null,"description":"With the changes in STORM-2087, the kafka 10 spout will limited to emitting tuples that are within the poll() size for kafka. This means that if the first tuple in a batch from kafka is failed, the spout will not emit more than the size of the batch from kafka until the tuple is either processed successfully or given up on. This behavior is exacerbated by the exponential backoff retry policy.  \n\nThere probably needs to be bookkeeping for the next emittable offset.","customfield_10010":null,"timetracking":{},"customfield_12312026":null,"customfield_12312023":null,"customfield_12312024":null,"attachment":[],"customfield_12312340":null,"aggregatetimeestimate":null,"customfield_12312341":null,"customfield_12312220":null,"customfield_12312022":null,"customfield_12310921":null,"customfield_12310920":"9223372036854775807","customfield_12312823":null,"summary":"Storm Kafka Client is paused while failed tuples are replayed","creator":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jfenc91","name":"jfenc91","key":"jfenc91","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jeff Fenchel","active":true,"timeZone":"Etc/UTC"},"subtasks":[],"reporter":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jfenc91","name":"jfenc91","key":"jfenc91","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jeff Fenchel","active":true,"timeZone":"Etc/UTC"},"customfield_12310291":null,"customfield_12310290":null,"aggregateprogress":{"progress":0,"total":0},"environment":null,"customfield_12313520":null,"customfield_12311020":null,"duedate":null,"customfield_12310250":null,"progress":{"progress":0,"total":0},"comment":{"comments":[{"self":"https://issues.apache.org/jira/rest/api/2/issue/13006240/comment/15507304","id":"15507304","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=Srdo","name":"Srdo","key":"srdo","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Stig Rohde Døssing","active":true,"timeZone":"Europe/Copenhagen"},"body":"Are you sure this is an issue? I get that the spout will restart at the failed offset if it crashes or partitions are reassigned and another spout has to restart at the last committed offset, but as far as I can tell it should progress past the failed tuple when it's reemitted or the retry service decides to delay it. doSeekRetriableTopicPartitions only seeks on those partitions that have failed tuples ready to retry (i.e. whose retry delays have expired).\n\nIf you have a sequence of offsets x...y and x has failed, x-1 was committed and everything up to y has been acked, doSeekRetriableTopicPartitions should seek to x and retry it. The offsets between x and y will then be skipped by emitTupleIfNotEmitted because they've already been acked. On the next call to nextTuple after skipping ]x...y[, the spout should poll Kafka again at y because waitingToEmit is empty (x was emitted and the others were already acked). If x gets acked there's no problem. If x fails again and the retry service decides to delay it, doSeekRetriableTopicPartitions won't seek back to x until the backoff expires. In the meantime new offsets get processed. When x's retry delay expires, the spout will just seek back to x, emit it again and skip past ]x...y...z[ (z being the last message it managed to ack before seeking back to x).\n\nThere are a few other factors in play here like maxUncommittedOffsets, but I don't really see the issue you're describing.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=Srdo","name":"Srdo","key":"srdo","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Stig Rohde Døssing","active":true,"timeZone":"Europe/Copenhagen"},"created":"2016-09-20T18:08:12.064+0000","updated":"2016-09-20T18:08:12.064+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13006240/comment/15507512","id":"15507512","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jfenc91","name":"jfenc91","key":"jfenc91","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jeff Fenchel","active":true,"timeZone":"Etc/UTC"},"body":"[~Srdo] I don't think it quite works that way. In the case you provided, I agree with you that x+1..y will be skipped while x is processing. However in doSeekRetriableTopicPartitions we seek to the next offset that may be committed based on acked messages. So in this case, since x is still processing it seeks back to x and filters out all of x-y again because x is processing and the rest are acked. The result is nothing gets emitted until x finishes processing. \n\nFor me the batch size kafka provide (~300) was << maxUncommittedOffsets which severely crippled the throughput of my topology. \n\nI agree that we should poll kafka again at y and that is why I made this ticket. \n\n----\nCode snippet: \n{code}\n    private void doSeekRetriableTopicPartitions() {\n        final Set<TopicPartition> retriableTopicPartitions = retryService.retriableTopicPartitions();\n\n        for (TopicPartition rtp : retriableTopicPartitions) {\n            final OffsetAndMetadata offsetAndMeta = acked.get(rtp).findNextCommitOffset();\n            if (offsetAndMeta != null) {\n                kafkaConsumer.seek(rtp, offsetAndMeta.offset() + 1);  // seek to the next offset that is ready to commit in next commit cycle\n            } else {\n                kafkaConsumer.seek(rtp, acked.get(rtp).committedOffset + 1);    // Seek to last committed offset\n            }\n        }\n    }\n{code}\n\n\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jfenc91","name":"jfenc91","key":"jfenc91","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jeff Fenchel","active":true,"timeZone":"Etc/UTC"},"created":"2016-09-20T19:20:59.407+0000","updated":"2016-09-20T19:20:59.407+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13006240/comment/15507662","id":"15507662","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=Srdo","name":"Srdo","key":"srdo","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Stig Rohde Døssing","active":true,"timeZone":"Europe/Copenhagen"},"body":"[~jfenc91] I don't think it works that way. doSeekRetriableTopicPartitions only seeks to the committed offset if retryService.retriableTopicPartitions returns x's TopicPartition (since the for-loop otherwise doesn't include x's TopicPartition), which it only does if there are failed tuples ready for retry on that TopicPartition. When x is ready for retry, retryService.retriableTopicPartitions will return x's TopicPartition, the consumer seeks to x and the consumer is polled. x should then be emitted. When x is emitted, emitTupleIfNotEmitted removes the messageId from retryService, which should prevent retryService.retriableTopicPartitions from returning x's TopicPartition until x (or some other message on x's TopicPartition) fails again.\n\nWhile x is still processing the spout shouldn't seek back to x (and doesn't as far as I can tell). Is it possible that you were limited by something else, like maxSpoutPending, retrying a large number of tuples or partition reassignments/worker restarts? \n\nSee https://github.com/apache/storm/blob/master/external/storm-kafka-client/src/main/java/org/apache/storm/kafka/spout/KafkaSpout.java#L294 and https://github.com/apache/storm/blob/master/external/storm-kafka-client/src/main/java/org/apache/storm/kafka/spout/KafkaSpoutRetryExponentialBackoff.java#L164\n\nedit: I suppose if you have a failed tuple reasonably far back in the tuple stream with a bunch of acked tuples you need to skip, you might end up wasting a bunch of time waiting for Storm to skip the acked tuples because Storm waits 1 ms between calls to nextTuple by default if nothing is emitted. Maybe that was why calling emitTupleIfNotEmitted in a loop made a difference (assuming it made a difference)?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=Srdo","name":"Srdo","key":"srdo","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Stig Rohde Døssing","active":true,"timeZone":"Europe/Copenhagen"},"created":"2016-09-20T20:09:00.799+0000","updated":"2016-09-20T20:29:57.475+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13006240/comment/15507712","id":"15507712","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jfenc91","name":"jfenc91","key":"jfenc91","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jeff Fenchel","active":true,"timeZone":"Etc/UTC"},"body":"[~Srdo] Thank you so much for the explanation here! You are 100% correct. As it turns out, I did this to myself in hacking around some exceptions caused by rebalance. I'll close the ticket. Thanks again for your time here!","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jfenc91","name":"jfenc91","key":"jfenc91","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jeff Fenchel","active":true,"timeZone":"Etc/UTC"},"created":"2016-09-20T20:31:48.816+0000","updated":"2016-09-20T20:31:48.816+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13006240/comment/15507741","id":"15507741","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=Srdo","name":"Srdo","key":"srdo","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Stig Rohde Døssing","active":true,"timeZone":"Europe/Copenhagen"},"body":"My pleasure :)","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=Srdo","name":"Srdo","key":"srdo","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Stig Rohde Døssing","active":true,"timeZone":"Europe/Copenhagen"},"created":"2016-09-20T20:43:37.002+0000","updated":"2016-09-20T20:43:37.002+0000"}],"maxResults":5,"total":5,"startAt":0},"votes":{"self":"https://issues.apache.org/jira/rest/api/2/issue/STORM-2106/votes","votes":0,"hasVoted":false},"worklog":{"startAt":0,"maxResults":20,"total":0,"worklogs":[]},"customfield_12311820":"0|i33unj:"}}