{"expand":"renderedFields,names,schema,operations,editmeta,changelog,versionedRepresentations","id":"13070653","self":"https://issues.apache.org/jira/rest/api/2/issue/13070653","key":"STORM-2507","fields":{"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype","name":"Bug","subtask":false,"avatarId":21133},"timespent":6000,"project":{"self":"https://issues.apache.org/jira/rest/api/2/project/12314820","id":"12314820","key":"STORM","name":"Apache Storm","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/projectavatar?pid=12314820&avatarId=21667","24x24":"https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12314820&avatarId=21667","16x16":"https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12314820&avatarId=21667","32x32":"https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12314820&avatarId=21667"},"projectCategory":{"self":"https://issues.apache.org/jira/rest/api/2/projectCategory/13260","id":"13260","description":"Apache Storm Related","name":"Storm"}},"fixVersions":[],"aggregatetimespent":6000,"resolution":null,"customfield_12312322":null,"customfield_12310220":"2017-05-12T08:09:41.399+0000","customfield_12312520":null,"customfield_12312323":null,"customfield_12312521":"Fri May 12 08:09:41 UTC 2017","customfield_12312320":null,"customfield_12310222":null,"customfield_12310420":"9223372036854775807","customfield_12312321":null,"resolutiondate":null,"workratio":-1,"customfield_12312328":null,"customfield_12312329":null,"customfield_12312923":null,"customfield_12312326":null,"customfield_12312920":null,"customfield_12310300":null,"customfield_12312327":null,"customfield_12312921":null,"customfield_12312324":null,"customfield_12312720":null,"customfield_12312325":null,"lastViewed":null,"watches":{"self":"https://issues.apache.org/jira/rest/api/2/issue/STORM-2507/watchers","watchCount":2,"isWatching":false},"created":"2017-05-10T01:24:49.752+0000","priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/4","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/minor.svg","name":"Minor","id":"4"},"labels":["build"],"customfield_12312333":null,"customfield_12312334":null,"customfield_12313422":"false","customfield_12310310":"0.0","customfield_12312331":null,"customfield_12312332":null,"timeestimate":0,"aggregatetimeoriginalestimate":null,"customfield_12311120":null,"customfield_12312330":null,"versions":[],"customfield_12312339":null,"issuelinks":[{"id":"12503391","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12503391","type":{"id":"10030","name":"Reference","inward":"is related to","outward":"relates to","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"},"inwardIssue":{"id":"13071423","key":"STORM-2510","self":"https://issues.apache.org/jira/rest/api/2/issue/13071423","fields":{"summary":"adjust checkstyle configurations to decrease violations","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/5","description":"A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/resolved.png","name":"Resolved","id":"5","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Done"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.svg","name":"Major","id":"3"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/4","id":"4","description":"An improvement or enhancement to an existing feature or task.","iconUrl":"https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype","name":"Improvement","subtask":false,"avatarId":21140}}}}],"assignee":null,"customfield_12312337":null,"customfield_12312338":null,"updated":"2017-05-12T09:12:49.739+0000","customfield_12312335":null,"customfield_12312336":null,"status":{"self":"https://issues.apache.org/jira/rest/api/2/status/1","description":"The issue is open and ready for the assignee to start work on it.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/open.png","name":"Open","id":"1","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/2","id":2,"key":"new","colorName":"blue-gray","name":"To Do"}},"components":[],"timeoriginalestimate":null,"description":"Master branch build failure due to additional checkstyle violations in storm-webapp module\n\n[ERROR] Failed to execute goal org.apache.maven.plugins:maven-checkstyle-plugin:2.17:check (validate) on project storm-webapp: You have 314 Checkstyle violations. The maximum number of allowed violations is 290. -> [Help 1]","customfield_10010":null,"timetracking":{"remainingEstimate":"0h","timeSpent":"1h 40m","remainingEstimateSeconds":0,"timeSpentSeconds":6000},"customfield_12312026":null,"customfield_12312023":null,"customfield_12312024":null,"attachment":[],"customfield_12312340":null,"aggregatetimeestimate":0,"customfield_12312341":null,"customfield_12312220":null,"customfield_12312022":null,"customfield_12310921":null,"customfield_12310920":"9223372036854775807","customfield_12312823":null,"summary":"Master branch build failure due to additional checkstyle violations in storm-webapp module","creator":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=vinodkc","name":"vinodkc","key":"vinodkc","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10445","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10445","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10445","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10445"},"displayName":"Vinod KC","active":true,"timeZone":"Asia/Kolkata"},"subtasks":[],"reporter":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=vinodkc","name":"vinodkc","key":"vinodkc","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10445","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10445","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10445","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10445"},"displayName":"Vinod KC","active":true,"timeZone":"Asia/Kolkata"},"customfield_12310291":null,"customfield_12310290":null,"aggregateprogress":{"progress":6000,"total":6000,"percent":100},"environment":null,"customfield_12313520":null,"customfield_12311020":null,"duedate":null,"customfield_12310250":null,"progress":{"progress":6000,"total":6000,"percent":100},"comment":{"comments":[{"self":"https://issues.apache.org/jira/rest/api/2/issue/13070653/comment/16007778","id":"16007778","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=erikdw","name":"erikdw","key":"erikdw","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=erikdw&avatarId=26098","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=erikdw&avatarId=26098","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=erikdw&avatarId=26098","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=erikdw&avatarId=26098"},"displayName":"Erik Weathers","active":true,"timeZone":"Etc/UTC"},"body":"The change I'm working on for STORM-2510 will fix this.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=erikdw","name":"erikdw","key":"erikdw","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=erikdw&avatarId=26098","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=erikdw&avatarId=26098","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=erikdw&avatarId=26098","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=erikdw&avatarId=26098"},"displayName":"Erik Weathers","active":true,"timeZone":"Etc/UTC"},"created":"2017-05-12T08:09:41.399+0000","updated":"2017-05-12T08:09:41.399+0000"}],"maxResults":1,"total":1,"startAt":0},"votes":{"self":"https://issues.apache.org/jira/rest/api/2/issue/STORM-2507/votes","votes":0,"hasVoted":false},"worklog":{"startAt":0,"maxResults":20,"total":10,"worklogs":[{"self":"https://issues.apache.org/jira/rest/api/2/issue/13070653/worklog/42650","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"GitHub user vinodkc opened a pull request:\n\n    https://github.com/apache/storm/pull/2105\n\n    [STORM-2507] Master branch build failure due to additional checkstyle violations in storm-webapp module\n\n    Using google-java-format IntelliJ plugin , autoformated storm-webapp module\n\nYou can merge this pull request into a Git repository by running:\n\n    $ git pull https://github.com/vinodkc/storm-1 br_autoformatstorm-web\n\nAlternatively you can review and apply these changes as the patch at:\n\n    https://github.com/apache/storm/pull/2105.patch\n\nTo close this pull request, make a commit to your master/trunk branch\nwith (at least) the following in the commit message:\n\n    This closes #2105\n    \n----\ncommit b9ab1aeb6eb4bba534643efe5586dd2f7ea61b9f\nAuthor: vinodkc <vinod.kc.in@gmail.com>\nDate:   2017-05-10T01:08:18Z\n\n    Using google-java-format IntelliJ plugin , autoformated storm-webapp module to reduce checkstyle issue count\n\n----\n","created":"2017-05-10T01:27:05.242+0000","updated":"2017-05-10T01:27:05.242+0000","started":"2017-05-10T01:27:05.240+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"42650","issueId":"13070653"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13070653/worklog/42651","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user erikdw commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/2105#discussion_r115638968\n  \n    --- Diff: storm-webapp/src/main/java/org/apache/storm/daemon/drpc/DRPCServer.java ---\n    @@ -45,170 +46,180 @@\n     import org.slf4j.Logger;\n     import org.slf4j.LoggerFactory;\n     \n    -import com.codahale.metrics.Meter;\n    -import com.google.common.annotations.VisibleForTesting;\n    -\n     public class DRPCServer implements AutoCloseable {\n    -    private static final Logger LOG = LoggerFactory.getLogger(DRPCServer.class);\n    -    private final static Meter meterShutdownCalls = StormMetricsRegistry.registerMeter(\"drpc:num-shutdown-calls\");\n    -   \n    -    //TODO in the future this might be better in a common webapp location\n    -    public static void addRequestContextFilter(ServletContextHandler context, String configName, Map<String, Object> conf) {\n    -        IHttpCredentialsPlugin auth = AuthUtils.GetHttpCredentialsPlugin(conf, (String)conf.get(configName));\n    -        ReqContextFilter filter = new ReqContextFilter(auth);\n    -        context.addFilter(new FilterHolder(filter), \"/*\", FilterMapping.ALL);\n    -    }\n    - \n    -    private static ThriftServer mkHandlerServer(final DistributedRPC.Iface service, Integer port, Map<String, Object> conf) {\n    -        ThriftServer ret = null;\n    -        if (port != null && port >= 0) {\n    -            ret = new ThriftServer(conf, new DistributedRPC.Processor<>(service),\n    -                    ThriftConnectionType.DRPC);\n    -        }\n    -        return ret;\n    -    }\n     \n    -    private static ThriftServer mkInvokeServer(final DistributedRPCInvocations.Iface service, int port, Map<String, Object> conf) {\n    -        return new ThriftServer(conf, new DistributedRPCInvocations.Processor<>(service),\n    -                ThriftConnectionType.DRPC_INVOCATIONS);\n    -    }\n    -    \n    -    private static Server mkHttpServer(Map<String, Object> conf, DRPC drpc) {\n    -        Integer drpcHttpPort = (Integer) conf.get(DaemonConfig.DRPC_HTTP_PORT);\n    -        Server ret = null;\n    -        if (drpcHttpPort != null && drpcHttpPort >= 0) {\n    -            LOG.info(\"Starting RPC HTTP servers...\");\n    -            String filterClass = (String) (conf.get(DaemonConfig.DRPC_HTTP_FILTER));\n    -            @SuppressWarnings(\"unchecked\")\n    -            Map<String, String> filterParams = (Map<String, String>) (conf.get(DaemonConfig.DRPC_HTTP_FILTER_PARAMS));\n    -            FilterConfiguration filterConfiguration = new FilterConfiguration(filterClass, filterParams);\n    -            final List<FilterConfiguration> filterConfigurations = Arrays.asList(filterConfiguration);\n    -            final Integer httpsPort = ObjectReader.getInt(conf.get(DaemonConfig.DRPC_HTTPS_PORT), 0);\n    -            final String httpsKsPath = (String) (conf.get(DaemonConfig.DRPC_HTTPS_KEYSTORE_PATH));\n    -            final String httpsKsPassword = (String) (conf.get(DaemonConfig.DRPC_HTTPS_KEYSTORE_PASSWORD));\n    -            final String httpsKsType = (String) (conf.get(DaemonConfig.DRPC_HTTPS_KEYSTORE_TYPE));\n    -            final String httpsKeyPassword = (String) (conf.get(DaemonConfig.DRPC_HTTPS_KEY_PASSWORD));\n    -            final String httpsTsPath = (String) (conf.get(DaemonConfig.DRPC_HTTPS_TRUSTSTORE_PATH));\n    -            final String httpsTsPassword = (String) (conf.get(DaemonConfig.DRPC_HTTPS_TRUSTSTORE_PASSWORD));\n    -            final String httpsTsType = (String) (conf.get(DaemonConfig.DRPC_HTTPS_TRUSTSTORE_TYPE));\n    -            final Boolean httpsWantClientAuth = (Boolean) (conf.get(DaemonConfig.DRPC_HTTPS_WANT_CLIENT_AUTH));\n    -            final Boolean httpsNeedClientAuth = (Boolean) (conf.get(DaemonConfig.DRPC_HTTPS_NEED_CLIENT_AUTH));\n    -\n    -            //TODO a better way to do this would be great.\n    -            DRPCApplication.setup(drpc);\n    -            ret = UIHelpers.jettyCreateServer(drpcHttpPort, null, httpsPort);\n    -            \n    -            UIHelpers.configSsl(ret, httpsPort, httpsKsPath, httpsKsPassword, httpsKsType, httpsKeyPassword, httpsTsPath, httpsTsPassword, httpsTsType,\n    -                    httpsNeedClientAuth, httpsWantClientAuth);\n    -            \n    -            ServletContextHandler context = new ServletContextHandler(ServletContextHandler.NO_SESSIONS);\n    -            context.setContextPath(\"/\");\n    -            ret.setHandler(context);\n    -\n    -            ServletHolder jerseyServlet = context.addServlet(ServletContainer.class, \"/*\");\n    -            jerseyServlet.setInitOrder(1);\n    -            jerseyServlet.setInitParameter(\"javax.ws.rs.Application\", DRPCApplication.class.getName());\n    -            \n    -            UIHelpers.configFilters(context, filterConfigurations);\n    -            addRequestContextFilter(context, Config.DRPC_HTTP_CREDS_PLUGIN, conf);\n    -        }\n    -        return ret;\n    -    }\n    -    \n    -    private final DRPC _drpc;\n    -    private final ThriftServer _handlerServer;\n    -    private final ThriftServer _invokeServer;\n    -    private final Server _httpServer;\n    -    private Thread _handlerServerThread;\n    -    private boolean _closed = false;\n    -\n    -    public DRPCServer(Map<String, Object> conf) {\n    -        _drpc = new DRPC(conf);\n    -        DRPCThrift thrift = new DRPCThrift(_drpc);\n    -        _handlerServer = mkHandlerServer(thrift, ObjectReader.getInt(conf.get(Config.DRPC_PORT), null), conf);\n    -        _invokeServer = mkInvokeServer(thrift, ObjectReader.getInt(conf.get(Config.DRPC_INVOCATIONS_PORT), 3773), conf);\n    -        _httpServer = mkHttpServer(conf, _drpc);\n    -    }\n    +  private static final Logger LOG = LoggerFactory.getLogger(DRPCServer.class);\n    +  private final static Meter meterShutdownCalls = StormMetricsRegistry\n    +      .registerMeter(\"drpc:num-shutdown-calls\");\n    +  private final DRPC _drpc;\n    +  private final ThriftServer _handlerServer;\n    +  private final ThriftServer _invokeServer;\n    +  private final Server _httpServer;\n    +  private Thread _handlerServerThread;\n    +  private boolean _closed = false;\n    +  public DRPCServer(Map<String, Object> conf) {\n    --- End diff --\n    \n    This auto-generated formatting this is *SOOOOO* much less readable to me.  Is this because of our checkstyle settings?   Removing a newline that separates lines is just wrong, and having method calls with their parameters way to the left of the method names is no bueno.\n","created":"2017-05-10T01:34:40.085+0000","updated":"2017-05-10T01:34:40.085+0000","started":"2017-05-10T01:34:40.084+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"42651","issueId":"13070653"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13070653/worklog/42652","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user vinodkc commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/2105#discussion_r115639960\n  \n    --- Diff: storm-webapp/src/main/java/org/apache/storm/daemon/drpc/DRPCServer.java ---\n    @@ -45,170 +46,180 @@\n     import org.slf4j.Logger;\n     import org.slf4j.LoggerFactory;\n     \n    -import com.codahale.metrics.Meter;\n    -import com.google.common.annotations.VisibleForTesting;\n    -\n     public class DRPCServer implements AutoCloseable {\n    -    private static final Logger LOG = LoggerFactory.getLogger(DRPCServer.class);\n    -    private final static Meter meterShutdownCalls = StormMetricsRegistry.registerMeter(\"drpc:num-shutdown-calls\");\n    -   \n    -    //TODO in the future this might be better in a common webapp location\n    -    public static void addRequestContextFilter(ServletContextHandler context, String configName, Map<String, Object> conf) {\n    -        IHttpCredentialsPlugin auth = AuthUtils.GetHttpCredentialsPlugin(conf, (String)conf.get(configName));\n    -        ReqContextFilter filter = new ReqContextFilter(auth);\n    -        context.addFilter(new FilterHolder(filter), \"/*\", FilterMapping.ALL);\n    -    }\n    - \n    -    private static ThriftServer mkHandlerServer(final DistributedRPC.Iface service, Integer port, Map<String, Object> conf) {\n    -        ThriftServer ret = null;\n    -        if (port != null && port >= 0) {\n    -            ret = new ThriftServer(conf, new DistributedRPC.Processor<>(service),\n    -                    ThriftConnectionType.DRPC);\n    -        }\n    -        return ret;\n    -    }\n     \n    -    private static ThriftServer mkInvokeServer(final DistributedRPCInvocations.Iface service, int port, Map<String, Object> conf) {\n    -        return new ThriftServer(conf, new DistributedRPCInvocations.Processor<>(service),\n    -                ThriftConnectionType.DRPC_INVOCATIONS);\n    -    }\n    -    \n    -    private static Server mkHttpServer(Map<String, Object> conf, DRPC drpc) {\n    -        Integer drpcHttpPort = (Integer) conf.get(DaemonConfig.DRPC_HTTP_PORT);\n    -        Server ret = null;\n    -        if (drpcHttpPort != null && drpcHttpPort >= 0) {\n    -            LOG.info(\"Starting RPC HTTP servers...\");\n    -            String filterClass = (String) (conf.get(DaemonConfig.DRPC_HTTP_FILTER));\n    -            @SuppressWarnings(\"unchecked\")\n    -            Map<String, String> filterParams = (Map<String, String>) (conf.get(DaemonConfig.DRPC_HTTP_FILTER_PARAMS));\n    -            FilterConfiguration filterConfiguration = new FilterConfiguration(filterClass, filterParams);\n    -            final List<FilterConfiguration> filterConfigurations = Arrays.asList(filterConfiguration);\n    -            final Integer httpsPort = ObjectReader.getInt(conf.get(DaemonConfig.DRPC_HTTPS_PORT), 0);\n    -            final String httpsKsPath = (String) (conf.get(DaemonConfig.DRPC_HTTPS_KEYSTORE_PATH));\n    -            final String httpsKsPassword = (String) (conf.get(DaemonConfig.DRPC_HTTPS_KEYSTORE_PASSWORD));\n    -            final String httpsKsType = (String) (conf.get(DaemonConfig.DRPC_HTTPS_KEYSTORE_TYPE));\n    -            final String httpsKeyPassword = (String) (conf.get(DaemonConfig.DRPC_HTTPS_KEY_PASSWORD));\n    -            final String httpsTsPath = (String) (conf.get(DaemonConfig.DRPC_HTTPS_TRUSTSTORE_PATH));\n    -            final String httpsTsPassword = (String) (conf.get(DaemonConfig.DRPC_HTTPS_TRUSTSTORE_PASSWORD));\n    -            final String httpsTsType = (String) (conf.get(DaemonConfig.DRPC_HTTPS_TRUSTSTORE_TYPE));\n    -            final Boolean httpsWantClientAuth = (Boolean) (conf.get(DaemonConfig.DRPC_HTTPS_WANT_CLIENT_AUTH));\n    -            final Boolean httpsNeedClientAuth = (Boolean) (conf.get(DaemonConfig.DRPC_HTTPS_NEED_CLIENT_AUTH));\n    -\n    -            //TODO a better way to do this would be great.\n    -            DRPCApplication.setup(drpc);\n    -            ret = UIHelpers.jettyCreateServer(drpcHttpPort, null, httpsPort);\n    -            \n    -            UIHelpers.configSsl(ret, httpsPort, httpsKsPath, httpsKsPassword, httpsKsType, httpsKeyPassword, httpsTsPath, httpsTsPassword, httpsTsType,\n    -                    httpsNeedClientAuth, httpsWantClientAuth);\n    -            \n    -            ServletContextHandler context = new ServletContextHandler(ServletContextHandler.NO_SESSIONS);\n    -            context.setContextPath(\"/\");\n    -            ret.setHandler(context);\n    -\n    -            ServletHolder jerseyServlet = context.addServlet(ServletContainer.class, \"/*\");\n    -            jerseyServlet.setInitOrder(1);\n    -            jerseyServlet.setInitParameter(\"javax.ws.rs.Application\", DRPCApplication.class.getName());\n    -            \n    -            UIHelpers.configFilters(context, filterConfigurations);\n    -            addRequestContextFilter(context, Config.DRPC_HTTP_CREDS_PLUGIN, conf);\n    -        }\n    -        return ret;\n    -    }\n    -    \n    -    private final DRPC _drpc;\n    -    private final ThriftServer _handlerServer;\n    -    private final ThriftServer _invokeServer;\n    -    private final Server _httpServer;\n    -    private Thread _handlerServerThread;\n    -    private boolean _closed = false;\n    -\n    -    public DRPCServer(Map<String, Object> conf) {\n    -        _drpc = new DRPC(conf);\n    -        DRPCThrift thrift = new DRPCThrift(_drpc);\n    -        _handlerServer = mkHandlerServer(thrift, ObjectReader.getInt(conf.get(Config.DRPC_PORT), null), conf);\n    -        _invokeServer = mkInvokeServer(thrift, ObjectReader.getInt(conf.get(Config.DRPC_INVOCATIONS_PORT), 3773), conf);\n    -        _httpServer = mkHttpServer(conf, _drpc);\n    -    }\n    +  private static final Logger LOG = LoggerFactory.getLogger(DRPCServer.class);\n    +  private final static Meter meterShutdownCalls = StormMetricsRegistry\n    +      .registerMeter(\"drpc:num-shutdown-calls\");\n    +  private final DRPC _drpc;\n    +  private final ThriftServer _handlerServer;\n    +  private final ThriftServer _invokeServer;\n    +  private final Server _httpServer;\n    +  private Thread _handlerServerThread;\n    +  private boolean _closed = false;\n    +  public DRPCServer(Map<String, Object> conf) {\n    --- End diff --\n    \n    Recently we have integrated google_checks.xml and because of that checkstyle rules it is formatting code  like that. Most of the changes are reordering methods/fields and removal of extra tabs from beginning of line .\n    Please give your suggestions on whether to add project specific checkstyle rules in storm\n","created":"2017-05-10T01:46:21.260+0000","updated":"2017-05-10T01:46:21.260+0000","started":"2017-05-10T01:46:21.260+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"42652","issueId":"13070653"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13070653/worklog/42653","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user vinodkc commented on the issue:\n\n    https://github.com/apache/storm/pull/2105\n  \n    retest this please\n","created":"2017-05-10T02:07:54.882+0000","updated":"2017-05-10T02:07:54.882+0000","started":"2017-05-10T02:07:54.882+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"42653","issueId":"13070653"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13070653/worklog/42654","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user vinodkc commented on the issue:\n\n    https://github.com/apache/storm/pull/2105\n  \n    retest this please\n","created":"2017-05-10T02:58:12.177+0000","updated":"2017-05-10T02:58:12.177+0000","started":"2017-05-10T02:58:12.174+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"42654","issueId":"13070653"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13070653/worklog/42657","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user erikdw commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/2105#discussion_r115647872\n  \n    --- Diff: storm-webapp/src/main/java/org/apache/storm/daemon/drpc/DRPCServer.java ---\n    @@ -45,170 +46,180 @@\n     import org.slf4j.Logger;\n     import org.slf4j.LoggerFactory;\n     \n    -import com.codahale.metrics.Meter;\n    -import com.google.common.annotations.VisibleForTesting;\n    -\n     public class DRPCServer implements AutoCloseable {\n    -    private static final Logger LOG = LoggerFactory.getLogger(DRPCServer.class);\n    -    private final static Meter meterShutdownCalls = StormMetricsRegistry.registerMeter(\"drpc:num-shutdown-calls\");\n    -   \n    -    //TODO in the future this might be better in a common webapp location\n    -    public static void addRequestContextFilter(ServletContextHandler context, String configName, Map<String, Object> conf) {\n    -        IHttpCredentialsPlugin auth = AuthUtils.GetHttpCredentialsPlugin(conf, (String)conf.get(configName));\n    -        ReqContextFilter filter = new ReqContextFilter(auth);\n    -        context.addFilter(new FilterHolder(filter), \"/*\", FilterMapping.ALL);\n    -    }\n    - \n    -    private static ThriftServer mkHandlerServer(final DistributedRPC.Iface service, Integer port, Map<String, Object> conf) {\n    -        ThriftServer ret = null;\n    -        if (port != null && port >= 0) {\n    -            ret = new ThriftServer(conf, new DistributedRPC.Processor<>(service),\n    -                    ThriftConnectionType.DRPC);\n    -        }\n    -        return ret;\n    -    }\n     \n    -    private static ThriftServer mkInvokeServer(final DistributedRPCInvocations.Iface service, int port, Map<String, Object> conf) {\n    -        return new ThriftServer(conf, new DistributedRPCInvocations.Processor<>(service),\n    -                ThriftConnectionType.DRPC_INVOCATIONS);\n    -    }\n    -    \n    -    private static Server mkHttpServer(Map<String, Object> conf, DRPC drpc) {\n    -        Integer drpcHttpPort = (Integer) conf.get(DaemonConfig.DRPC_HTTP_PORT);\n    -        Server ret = null;\n    -        if (drpcHttpPort != null && drpcHttpPort >= 0) {\n    -            LOG.info(\"Starting RPC HTTP servers...\");\n    -            String filterClass = (String) (conf.get(DaemonConfig.DRPC_HTTP_FILTER));\n    -            @SuppressWarnings(\"unchecked\")\n    -            Map<String, String> filterParams = (Map<String, String>) (conf.get(DaemonConfig.DRPC_HTTP_FILTER_PARAMS));\n    -            FilterConfiguration filterConfiguration = new FilterConfiguration(filterClass, filterParams);\n    -            final List<FilterConfiguration> filterConfigurations = Arrays.asList(filterConfiguration);\n    -            final Integer httpsPort = ObjectReader.getInt(conf.get(DaemonConfig.DRPC_HTTPS_PORT), 0);\n    -            final String httpsKsPath = (String) (conf.get(DaemonConfig.DRPC_HTTPS_KEYSTORE_PATH));\n    -            final String httpsKsPassword = (String) (conf.get(DaemonConfig.DRPC_HTTPS_KEYSTORE_PASSWORD));\n    -            final String httpsKsType = (String) (conf.get(DaemonConfig.DRPC_HTTPS_KEYSTORE_TYPE));\n    -            final String httpsKeyPassword = (String) (conf.get(DaemonConfig.DRPC_HTTPS_KEY_PASSWORD));\n    -            final String httpsTsPath = (String) (conf.get(DaemonConfig.DRPC_HTTPS_TRUSTSTORE_PATH));\n    -            final String httpsTsPassword = (String) (conf.get(DaemonConfig.DRPC_HTTPS_TRUSTSTORE_PASSWORD));\n    -            final String httpsTsType = (String) (conf.get(DaemonConfig.DRPC_HTTPS_TRUSTSTORE_TYPE));\n    -            final Boolean httpsWantClientAuth = (Boolean) (conf.get(DaemonConfig.DRPC_HTTPS_WANT_CLIENT_AUTH));\n    -            final Boolean httpsNeedClientAuth = (Boolean) (conf.get(DaemonConfig.DRPC_HTTPS_NEED_CLIENT_AUTH));\n    -\n    -            //TODO a better way to do this would be great.\n    -            DRPCApplication.setup(drpc);\n    -            ret = UIHelpers.jettyCreateServer(drpcHttpPort, null, httpsPort);\n    -            \n    -            UIHelpers.configSsl(ret, httpsPort, httpsKsPath, httpsKsPassword, httpsKsType, httpsKeyPassword, httpsTsPath, httpsTsPassword, httpsTsType,\n    -                    httpsNeedClientAuth, httpsWantClientAuth);\n    -            \n    -            ServletContextHandler context = new ServletContextHandler(ServletContextHandler.NO_SESSIONS);\n    -            context.setContextPath(\"/\");\n    -            ret.setHandler(context);\n    -\n    -            ServletHolder jerseyServlet = context.addServlet(ServletContainer.class, \"/*\");\n    -            jerseyServlet.setInitOrder(1);\n    -            jerseyServlet.setInitParameter(\"javax.ws.rs.Application\", DRPCApplication.class.getName());\n    -            \n    -            UIHelpers.configFilters(context, filterConfigurations);\n    -            addRequestContextFilter(context, Config.DRPC_HTTP_CREDS_PLUGIN, conf);\n    -        }\n    -        return ret;\n    -    }\n    -    \n    -    private final DRPC _drpc;\n    -    private final ThriftServer _handlerServer;\n    -    private final ThriftServer _invokeServer;\n    -    private final Server _httpServer;\n    -    private Thread _handlerServerThread;\n    -    private boolean _closed = false;\n    -\n    -    public DRPCServer(Map<String, Object> conf) {\n    -        _drpc = new DRPC(conf);\n    -        DRPCThrift thrift = new DRPCThrift(_drpc);\n    -        _handlerServer = mkHandlerServer(thrift, ObjectReader.getInt(conf.get(Config.DRPC_PORT), null), conf);\n    -        _invokeServer = mkInvokeServer(thrift, ObjectReader.getInt(conf.get(Config.DRPC_INVOCATIONS_PORT), 3773), conf);\n    -        _httpServer = mkHttpServer(conf, _drpc);\n    -    }\n    +  private static final Logger LOG = LoggerFactory.getLogger(DRPCServer.class);\n    +  private final static Meter meterShutdownCalls = StormMetricsRegistry\n    +      .registerMeter(\"drpc:num-shutdown-calls\");\n    +  private final DRPC _drpc;\n    +  private final ThriftServer _handlerServer;\n    +  private final ThriftServer _invokeServer;\n    +  private final Server _httpServer;\n    +  private Thread _handlerServerThread;\n    +  private boolean _closed = false;\n    +  public DRPCServer(Map<String, Object> conf) {\n    --- End diff --\n    \n    My experience has been that auto-formatting tools all suck.  But I'll try to set aside some time to figure out how to make this one suck a little bit less.  I really cannot stand this output, I cannot read it.\n","created":"2017-05-10T03:27:04.524+0000","updated":"2017-05-10T03:27:04.524+0000","started":"2017-05-10T03:27:04.523+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"42657","issueId":"13070653"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13070653/worklog/42658","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"GitHub user vinodkc opened a pull request:\n\n    https://github.com/apache/storm/pull/2106\n\n    [STORM-2507]  Temp Fix-Master branch build failure due to additional checkstyle violations in storm-webapp module\n\n    This is a temporary fix to make the master branch build up . Updated storm-webapp maxAllowedViolations to 314.\n    Long term solution is to clean up code and reduce checkstyle violations\n\nYou can merge this pull request into a Git repository by running:\n\n    $ git pull https://github.com/vinodkc/storm-1 br_temp_fixmasterbuildfailure\n\nAlternatively you can review and apply these changes as the patch at:\n\n    https://github.com/apache/storm/pull/2106.patch\n\nTo close this pull request, make a commit to your master/trunk branch\nwith (at least) the following in the commit message:\n\n    This closes #2106\n    \n----\ncommit 7599c915a3f4c5f1ff1b028d5464942c33a758a2\nAuthor: vinodkc <vinod.kc.in@gmail.com>\nDate:   2017-05-10T04:18:05Z\n\n    Updated storm-webapp maxAllowedViolations to 314\n\n----\n","created":"2017-05-10T04:35:11.716+0000","updated":"2017-05-10T04:35:11.716+0000","started":"2017-05-10T04:35:11.714+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"42658","issueId":"13070653"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13070653/worklog/42666","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user erikdw commented on the issue:\n\n    https://github.com/apache/storm/pull/2106\n  \n    \uD83D\uDC4D \n","created":"2017-05-10T08:19:16.212+0000","updated":"2017-05-10T08:19:16.212+0000","started":"2017-05-10T08:19:16.210+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"42666","issueId":"13070653"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13070653/worklog/42813","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user vinodkc closed the pull request at:\n\n    https://github.com/apache/storm/pull/2105\n","created":"2017-05-12T09:12:22.243+0000","updated":"2017-05-12T09:12:22.243+0000","started":"2017-05-12T09:12:22.243+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"42813","issueId":"13070653"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13070653/worklog/42814","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user vinodkc closed the pull request at:\n\n    https://github.com/apache/storm/pull/2106\n","created":"2017-05-12T09:12:49.731+0000","updated":"2017-05-12T09:12:49.731+0000","started":"2017-05-12T09:12:49.731+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"42814","issueId":"13070653"}]},"customfield_12311820":"0|i3eqx3:"}}