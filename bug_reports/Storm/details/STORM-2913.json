{"expand":"renderedFields,names,schema,operations,editmeta,changelog,versionedRepresentations","id":"13134157","self":"https://issues.apache.org/jira/rest/api/2/issue/13134157","key":"STORM-2913","fields":{"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype","name":"Bug","subtask":false,"avatarId":21133},"timespent":19800,"project":{"self":"https://issues.apache.org/jira/rest/api/2/project/12314820","id":"12314820","key":"STORM","name":"Apache Storm","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/projectavatar?pid=12314820&avatarId=21667","24x24":"https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12314820&avatarId=21667","16x16":"https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12314820&avatarId=21667","32x32":"https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12314820&avatarId=21667"},"projectCategory":{"self":"https://issues.apache.org/jira/rest/api/2/projectCategory/13260","id":"13260","description":"Apache Storm Related","name":"Storm"}},"fixVersions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12334657","id":"12334657","name":"2.0.0","archived":false,"released":false},{"self":"https://issues.apache.org/jira/rest/api/2/version/12341047","id":"12341047","name":"1.2.0","archived":false,"released":true,"releaseDate":"2018-02-15"}],"aggregatetimespent":19800,"resolution":{"self":"https://issues.apache.org/jira/rest/api/2/resolution/1","id":"1","description":"A fix for this issue is checked into the tree and tested.","name":"Fixed"},"customfield_12312322":null,"customfield_12310220":"2018-01-27T17:56:45.473+0000","customfield_12312520":null,"customfield_12312323":null,"customfield_12312521":"Mon Feb 05 03:03:13 UTC 2018","customfield_12312320":null,"customfield_12310222":"1_*:*_1_*:*_45044538_*|*_3_*:*_1_*:*_834536985_*|*_5_*:*_1_*:*_0","customfield_12310420":"9223372036854775807","customfield_12312321":null,"resolutiondate":"2018-02-06T04:51:08.543+0000","workratio":-1,"customfield_12312328":null,"customfield_12312329":null,"customfield_12312923":null,"customfield_12312326":null,"customfield_12312920":null,"customfield_12310300":null,"customfield_12312327":null,"customfield_12312921":null,"customfield_12312324":null,"customfield_12312720":null,"customfield_12312325":null,"lastViewed":null,"watches":{"self":"https://issues.apache.org/jira/rest/api/2/issue/STORM-2913/watchers","watchCount":4,"isWatching":false},"created":"2018-01-27T00:31:27.048+0000","priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/1","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/blocker.svg","name":"Blocker","id":"1"},"labels":["pull-request-available"],"customfield_12312333":null,"customfield_12312334":null,"customfield_12313422":"false","customfield_12310310":"0.0","customfield_12312331":null,"customfield_12312332":null,"timeestimate":0,"aggregatetimeoriginalestimate":null,"customfield_12311120":"STORM-2710","customfield_12312330":null,"versions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12334657","id":"12334657","name":"2.0.0","archived":false,"released":false},{"self":"https://issues.apache.org/jira/rest/api/2/version/12341047","id":"12341047","name":"1.2.0","archived":false,"released":true,"releaseDate":"2018-02-15"}],"customfield_12312339":null,"issuelinks":[{"id":"12525461","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12525461","type":{"id":"10030","name":"Reference","inward":"is related to","outward":"relates to","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"},"outwardIssue":{"id":"13134220","key":"STORM-2914","self":"https://issues.apache.org/jira/rest/api/2/issue/13134220","fields":{"summary":"Remove enable.auto.commit support from storm-kafka-client","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/5","description":"A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/resolved.png","name":"Resolved","id":"5","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Done"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.svg","name":"Major","id":"3"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/4","id":"4","description":"An improvement or enhancement to an existing feature or task.","iconUrl":"https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype","name":"Improvement","subtask":false,"avatarId":21140}}}}],"assignee":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=Srdo","name":"Srdo","key":"srdo","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Stig Rohde Døssing","active":true,"timeZone":"Europe/Copenhagen"},"customfield_12312337":null,"customfield_12312338":null,"updated":"2018-02-06T04:51:08.561+0000","customfield_12312335":null,"customfield_12312336":null,"status":{"self":"https://issues.apache.org/jira/rest/api/2/status/5","description":"A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/resolved.png","name":"Resolved","id":"5","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Done"}},"components":[{"self":"https://issues.apache.org/jira/rest/api/2/component/12331080","id":"12331080","name":"storm-kafka-client"}],"timeoriginalestimate":null,"description":"The mechanism added in https://issues.apache.org/jira/browse/STORM-2844 to allow us to check whether a committed offset was committed by the currently running topology requires that we commit some metadata along with the offset.\r\n\r\nWe are using this metadata for two things: Only applying the FirstPollOffsetStrategy when the topology is deployed, rather than when the worker is restarted, and an (IMO fairly unimportant) runtime check that the spout offset tracking is not in a bad state.\r\n\r\nAutocommit spouts don't include this metadata, and we also don't include it when committing offsets in at-most-once mode. We can fix at-most-once by switching to committing a custom OffsetAndMetadata, rather than using the no-arg commitSync variant. \r\n\r\nI'm not sure what we should do to fix the autocommit case. There doesn't seem to be a way to include metadata in autocommits, so I don't think we can support this mechanism for autocommits. \r\n\r\nIf we can't fix the autocommit case, I see two options for fixing this:\r\n* Make doSeek have the old behavior for autocommits only (i.e. apply the FirstPollOffsetStrategy on every worker restart), and keep the new behavior for at-least-once/at-most-once. I think this behavior could be a little confusing.\r\n* Revert doSeek to the old behavior in all cases, and throw out the runtime check that uses the metadata. This also isn't a great option, because the new seek behavior is more useful than restarting on every worker reboot.\r\n\r\nWhat do you think [~hmclouro]? I'm leaning toward the first option.","customfield_10010":null,"timetracking":{"remainingEstimate":"0h","timeSpent":"5.5h","remainingEstimateSeconds":0,"timeSpentSeconds":19800},"customfield_12312026":null,"customfield_12312023":null,"customfield_12312024":null,"attachment":[],"customfield_12312340":null,"aggregatetimeestimate":0,"customfield_12312341":null,"customfield_12312220":null,"customfield_12312022":null,"customfield_12310921":null,"customfield_12310920":"9223372036854775807","customfield_12312823":null,"summary":"STORM-2844 made autocommit and at-most-once storm-kafka-client spouts log warnings on every emit, because those modes don't commit the right metadata to Kafka","creator":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=Srdo","name":"Srdo","key":"srdo","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Stig Rohde Døssing","active":true,"timeZone":"Europe/Copenhagen"},"subtasks":[],"reporter":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=Srdo","name":"Srdo","key":"srdo","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Stig Rohde Døssing","active":true,"timeZone":"Europe/Copenhagen"},"customfield_12310291":null,"customfield_12310290":null,"aggregateprogress":{"progress":19800,"total":19800,"percent":100},"environment":null,"customfield_12313520":null,"customfield_12311020":null,"duedate":null,"customfield_12310250":null,"progress":{"progress":19800,"total":19800,"percent":100},"comment":{"comments":[{"self":"https://issues.apache.org/jira/rest/api/2/issue/13134157/comment/16342146","id":"16342146","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=Srdo","name":"Srdo","key":"srdo","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Stig Rohde Døssing","active":true,"timeZone":"Europe/Copenhagen"},"body":"Came up with what I think is a better option: https://issues.apache.org/jira/browse/STORM-2914. Once that is resolved, we should be able to fix this by updating the at-most-once commitSync call.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=Srdo","name":"Srdo","key":"srdo","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Stig Rohde Døssing","active":true,"timeZone":"Europe/Copenhagen"},"created":"2018-01-27T14:07:41.445+0000","updated":"2018-01-27T14:07:41.445+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13134157/comment/16342244","id":"16342244","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hmclouro","name":"hmclouro","key":"hmclouro","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Hugo Louro","active":true,"timeZone":"Etc/UTC"},"body":"[~Srdo] I am currently with limited Internet access. I will get my input on this by tomorrow. Thanks.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hmclouro","name":"hmclouro","key":"hmclouro","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Hugo Louro","active":true,"timeZone":"Etc/UTC"},"created":"2018-01-27T17:56:45.473+0000","updated":"2018-01-27T17:56:45.473+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13134157/comment/16352005","id":"16352005","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kabhwan","name":"kabhwan","key":"kabhwan","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jungtaek Lim","active":true,"timeZone":"Asia/Seoul"},"body":"Thanks [~Srdo], merged into master.\r\n\r\nSince there's some diverge between master and 1.x-branch for storm-kafka-client, I'd like to wait for [~Srdo] to submit pull request against 1.x branch. We can merge it afterwards.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kabhwan","name":"kabhwan","key":"kabhwan","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jungtaek Lim","active":true,"timeZone":"Asia/Seoul"},"created":"2018-02-05T03:03:13.312+0000","updated":"2018-02-05T03:03:13.312+0000"}],"maxResults":3,"total":3,"startAt":0},"votes":{"self":"https://issues.apache.org/jira/rest/api/2/issue/STORM-2913/votes","votes":1,"hasVoted":false},"worklog":{"startAt":0,"maxResults":20,"total":38,"worklogs":[{"self":"https://issues.apache.org/jira/rest/api/2/issue/13134157/worklog/68366","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"GitHub user srdo opened a pull request:\n\n    https://github.com/apache/storm/pull/2538\n\n     STORM-2913: Add metadata to at-most-once and at-least-once commits \n\n    https://issues.apache.org/jira/browse/STORM-2913\r\n    \r\n    This builds on STORM-2914.\r\n    \r\n    I believe we can resolve STORM-2913 by committing metadata in all processing guarantee modes, rather than just AT_LEAST_ONCE. This change simply adds metadata to the AT_MOST_ONCE and NONE commit statements.\n\nYou can merge this pull request into a Git repository by running:\n\n    $ git pull https://github.com/srdo/storm STORM-2913\n\nAlternatively you can review and apply these changes as the patch at:\n\n    https://github.com/apache/storm/pull/2538.patch\n\nTo close this pull request, make a commit to your master/trunk branch\nwith (at least) the following in the commit message:\n\n    This closes #2538\n    \n----\ncommit 3e09a1d718f8d40424e7ac5d574efe7a74706cf8\nAuthor: Stig Rohde Døssing <srdo@...>\nDate:   2018-01-27T18:22:07Z\n\n    STORM-2914: Implement ProcessingGuarantee.NONE in the spout instead of using enable.auto.commit\n\ncommit 99c7a30bf38c523a1f97411e7a42dbb44017f9f0\nAuthor: Stig Rohde Døssing <srdo@...>\nDate:   2018-01-27T14:15:45Z\n\n    STORM-2913: Add metadata to at-most-once and at-least-once commits\n\n----\n","created":"2018-01-27T19:21:19.869+0000","updated":"2018-01-27T19:21:19.869+0000","started":"2018-01-27T19:21:19.868+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"68366","issueId":"13134157"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13134157/worklog/69174","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user hmcl commented on the issue:\n\n    https://github.com/apache/storm/pull/2538\n  \n    @srdo there is a discrepancy between the title of this pull request and the title of the associated JIRA. What problem are you trying to solve in this patch? Add meatada, or remove warnings?\r\n    \r\n    If the goal is to solve the recurring WARN messages that get printed, in my opinion the obvious thing to do is to simply not log the message unless the processing guarantee is AT_LEAST_ONCE. This would be a one line change\r\n    \r\n    Can you please also clarify what is the need to add metadata when running the spout in AT-MOST-ONCE mode ? Also, I think it is quite dangerous to try to mimic the behavior Kafka does by simply calling commitAsync(...) in auto.commit mode. Besides the WARN messages, is there any other problem associated with letting Kafka handle everything in auto.commit mode?\r\n    \r\n    \r\n    \r\n\n","created":"2018-01-31T01:47:20.855+0000","updated":"2018-01-31T01:47:20.855+0000","started":"2018-01-31T01:47:20.854+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"69174","issueId":"13134157"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13134157/worklog/70619","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user hmcl commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/2538#discussion_r165852989\n  \n    --- Diff: external/storm-kafka-client/src/main/java/org/apache/storm/kafka/spout/internal/CommitMetadataManager.java ---\n    @@ -0,0 +1,90 @@\n    +/*\n    + * Copyright 2018 The Apache Software Foundation.\n    + *\n    + * Licensed under the Apache License, Version 2.0 (the \"License\");\n    + * you may not use this file except in compliance with the License.\n    + * You may obtain a copy of the License at\n    + *\n    + *      http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +\n    +package org.apache.storm.kafka.spout.internal;\n    +\n    +import com.fasterxml.jackson.core.JsonProcessingException;\n    +import com.fasterxml.jackson.databind.ObjectMapper;\n    +import java.io.IOException;\n    +import java.util.Map;\n    +import org.apache.kafka.clients.consumer.OffsetAndMetadata;\n    +import org.apache.kafka.common.TopicPartition;\n    +import org.apache.storm.kafka.spout.KafkaSpout;\n    +import org.apache.storm.kafka.spout.KafkaSpoutConfig.ProcessingGuarantee;\n    +import org.apache.storm.task.TopologyContext;\n    +import org.slf4j.Logger;\n    +import org.slf4j.LoggerFactory;\n    +\n    +/**\n    + * Generates and reads commit metadata.\n    + */\n    +public class CommitMetadataManager {\n    +\n    +    private static final ObjectMapper JSON_MAPPER = new ObjectMapper();\n    +    private static final Logger LOG = LoggerFactory.getLogger(CommitMetadata.class);\n    +    // Metadata information to commit to Kafka. It is unique per spout instance.\n    +    private final String commitMetadata;\n    +    private final ProcessingGuarantee processingGuarantee;\n    +    private final TopologyContext context;\n    +\n    +    /**\n    +     * Create a manager with the given context.\n    +     */\n    +    public CommitMetadataManager(TopologyContext context, ProcessingGuarantee processingGuarantee) {\n    +        this.context = context;\n    +        try {\n    +            commitMetadata = JSON_MAPPER.writeValueAsString(new CommitMetadata(\n    --- End diff --\n    \n    Ideally commitMetadata would be passed in the constructor to facilitate unit testing. We could have a factory method in this class itself with this code\r\n    \r\n    ```java\r\n    public CommitMetadataManager(TopologyContext context, ProcessingGuarantee processingGuarantee, String commitMetadata)\r\n    ```\r\n    \r\n    ```java\r\n    public static CommitMetadataManager newInstance(TopologyContext context, ProcessingGuarantee processingGuarantee) {\r\n        return new CommitMetadataManager(context, processingGuarantee, JSON_MAPPER.writeValueAsString(new CommitMetadata(context.getStormId(), context.getThisTaskId(), Thread.currentThread().getName())));\r\n    }\r\n    ```\r\n    \r\n    handling the JsonProcessingException in the factory method\n","created":"2018-02-04T18:37:12.799+0000","updated":"2018-02-04T18:37:12.799+0000","started":"2018-02-04T18:37:12.799+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"70619","issueId":"13134157"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13134157/worklog/70620","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user hmcl commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/2538#discussion_r165852670\n  \n    --- Diff: external/storm-kafka-client/src/main/java/org/apache/storm/kafka/spout/KafkaSpout.java ---\n    @@ -396,7 +361,10 @@ private void setWaitingToEmit(ConsumerRecords<K, V> consumerRecords) {\n                     numPolledRecords);\n                 if (kafkaSpoutConfig.getProcessingGuarantee() == KafkaSpoutConfig.ProcessingGuarantee.AT_MOST_ONCE) {\n                     //Commit polled records immediately to ensure delivery is at-most-once.\n    -                kafkaConsumer.commitSync();\n    +                Map<TopicPartition, OffsetAndMetadata> offsetsToCommit = \n    +                    createOffsetsToCommitForConsumedOffsets(kafkaConsumer.assignment());\n    +                kafkaConsumer.commitSync(offsetsToCommit);\n    --- End diff --\n    \n    createFetchedOffsetsMetadata\n","created":"2018-02-04T18:37:12.800+0000","updated":"2018-02-04T18:37:12.800+0000","started":"2018-02-04T18:37:12.800+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"70620","issueId":"13134157"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13134157/worklog/70621","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user hmcl commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/2538#discussion_r165852737\n  \n    --- Diff: external/storm-kafka-client/src/main/java/org/apache/storm/kafka/spout/KafkaSpout.java ---\n    @@ -469,11 +437,14 @@ private boolean emitOrRetryTuple(ConsumerRecord<K, V> record) {\n                 LOG.trace(\"Tuple for record [{}] has already been emitted. Skipping\", record);\n             } else {\n                 final OffsetAndMetadata committedOffset = kafkaConsumer.committed(tp);\n    -            if (committedOffset != null && isOffsetCommittedByThisTopology(tp, committedOffset)\n    +            if (isAtLeastOnceProcessing()\n    +                && committedOffset != null \n    +                && commitMetadataManager.isOffsetCommittedByThisTopology(tp, committedOffset, offsetManagers)\n                     && committedOffset.offset() > record.offset()) {\n                     // Ensures that after a topology with this id is started, the consumer fetch\n                     // position never falls behind the committed offset (STORM-2844)\n    -                throw new IllegalStateException(\"Attempting to emit a message that has already been committed.\");\n    +                throw new IllegalStateException(\"Attempting to emit a message that has already been committed.\"\n    +                    + \" This should never occur in at-least-once mode.\");\n    --- End diff --\n    \n    for at-least-once semantics.\n","created":"2018-02-04T18:37:12.826+0000","updated":"2018-02-04T18:37:12.826+0000","started":"2018-02-04T18:37:12.825+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"70621","issueId":"13134157"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13134157/worklog/70622","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user hmcl commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/2538#discussion_r165852272\n  \n    --- Diff: external/storm-kafka-client/src/main/java/org/apache/storm/kafka/spout/KafkaSpout.java ---\n    @@ -142,7 +139,7 @@ public void open(Map<String, Object> conf, TopologyContext context, SpoutOutputC\n             offsetManagers = new HashMap<>();\n             emitted = new HashSet<>();\n             waitingToEmit = new HashMap<>();\n    -        setCommitMetadata(context);\n    +        commitMetadataManager = new CommitMetadataManager(context, kafkaSpoutConfig.getProcessingGuarantee());\n    --- End diff --\n    \n    I wonder if this should become available to the KakfaSpout through KafkaSpoutConfig, perhaps using a factory such that we could make it pluggable, in case there is need to support a different behavior in the future.\r\n    \r\n    We can also wait to do that until we need it. Just wanted to get your thoughts on it.\n","created":"2018-02-04T18:37:12.844+0000","updated":"2018-02-04T18:37:12.844+0000","started":"2018-02-04T18:37:12.844+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"70622","issueId":"13134157"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13134157/worklog/70623","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user hmcl commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/2538#discussion_r165852696\n  \n    --- Diff: external/storm-kafka-client/src/main/java/org/apache/storm/kafka/spout/KafkaSpout.java ---\n    @@ -396,7 +361,10 @@ private void setWaitingToEmit(ConsumerRecords<K, V> consumerRecords) {\n                     numPolledRecords);\n                 if (kafkaSpoutConfig.getProcessingGuarantee() == KafkaSpoutConfig.ProcessingGuarantee.AT_MOST_ONCE) {\n                     //Commit polled records immediately to ensure delivery is at-most-once.\n    -                kafkaConsumer.commitSync();\n    +                Map<TopicPartition, OffsetAndMetadata> offsetsToCommit = \n    +                    createOffsetsToCommitForConsumedOffsets(kafkaConsumer.assignment());\n    +                kafkaConsumer.commitSync(offsetsToCommit);\n    +                LOG.debug(\"Committed offsets {} to Kafka\", offsetsToCommit);\n    --- End diff --\n    \n    Committed offsets {} synchronously to Kafka\n","created":"2018-02-04T18:37:12.857+0000","updated":"2018-02-04T18:37:12.857+0000","started":"2018-02-04T18:37:12.857+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"70623","issueId":"13134157"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13134157/worklog/70624","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user hmcl commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/2538#discussion_r165853160\n  \n    --- Diff: external/storm-kafka-client/src/main/java/org/apache/storm/kafka/spout/internal/CommitMetadataManager.java ---\n    @@ -0,0 +1,90 @@\n    +/*\n    + * Copyright 2018 The Apache Software Foundation.\n    + *\n    + * Licensed under the Apache License, Version 2.0 (the \"License\");\n    + * you may not use this file except in compliance with the License.\n    + * You may obtain a copy of the License at\n    + *\n    + *      http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +\n    +package org.apache.storm.kafka.spout.internal;\n    +\n    +import com.fasterxml.jackson.core.JsonProcessingException;\n    +import com.fasterxml.jackson.databind.ObjectMapper;\n    +import java.io.IOException;\n    +import java.util.Map;\n    +import org.apache.kafka.clients.consumer.OffsetAndMetadata;\n    +import org.apache.kafka.common.TopicPartition;\n    +import org.apache.storm.kafka.spout.KafkaSpout;\n    +import org.apache.storm.kafka.spout.KafkaSpoutConfig.ProcessingGuarantee;\n    +import org.apache.storm.task.TopologyContext;\n    +import org.slf4j.Logger;\n    +import org.slf4j.LoggerFactory;\n    +\n    +/**\n    + * Generates and reads commit metadata.\n    + */\n    +public class CommitMetadataManager {\n    +\n    +    private static final ObjectMapper JSON_MAPPER = new ObjectMapper();\n    +    private static final Logger LOG = LoggerFactory.getLogger(CommitMetadata.class);\n    +    // Metadata information to commit to Kafka. It is unique per spout instance.\n    +    private final String commitMetadata;\n    +    private final ProcessingGuarantee processingGuarantee;\n    +    private final TopologyContext context;\n    +\n    +    /**\n    +     * Create a manager with the given context.\n    +     */\n    +    public CommitMetadataManager(TopologyContext context, ProcessingGuarantee processingGuarantee) {\n    +        this.context = context;\n    +        try {\n    +            commitMetadata = JSON_MAPPER.writeValueAsString(new CommitMetadata(\n    +                context.getStormId(), context.getThisTaskId(), Thread.currentThread().getName()));\n    +            this.processingGuarantee = processingGuarantee;\n    +        } catch (JsonProcessingException e) {\n    +            LOG.error(\"Failed to create Kafka commit metadata due to JSON serialization error\", e);\n    +            throw new RuntimeException(e);\n    +        }\n    +    }\n    +\n    +    /**\n    +     * Checks if {@link OffsetAndMetadata} was committed by a {@link KafkaSpout} instance in this topology.\n    +     *\n    +     * @param tp The topic partition the commit metadata belongs to.\n    +     * @param committedOffset {@link OffsetAndMetadata} info committed to Kafka\n    +     * @param offsetManagers The offset managers.\n    +     * @return true if this topology committed this {@link OffsetAndMetadata}, false otherwise\n    +     */\n    +    public boolean isOffsetCommittedByThisTopology(TopicPartition tp, OffsetAndMetadata committedOffset,\n    +        Map<TopicPartition, OffsetManager> offsetManagers) {\n    +        try {\n    +            if (processingGuarantee == ProcessingGuarantee.AT_LEAST_ONCE\n    +                && offsetManagers.containsKey(tp)\n    +                && offsetManagers.get(tp).hasCommitted()) {\n    +                return true;\n    +            }\n    +\n    +            final CommitMetadata committedMetadata = JSON_MAPPER.readValue(committedOffset.metadata(), CommitMetadata.class);\n    +            return committedMetadata.getTopologyId().equals(context.getStormId());\n    +        } catch (IOException e) {\n    +            LOG.warn(\"Failed to deserialize [{}]. Error likely occurred because the last commit \"\n    --- End diff --\n    \n    We should either write in the README or as part of this message that this WARN is expected the first time a user starts this or an earlier version of the spout with commits to Kafka done by an older version of the spout.\n","created":"2018-02-04T18:37:12.903+0000","updated":"2018-02-04T18:37:12.903+0000","started":"2018-02-04T18:37:12.903+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"70624","issueId":"13134157"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13134157/worklog/70625","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user hmcl commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/2538#discussion_r165853341\n  \n    --- Diff: external/storm-kafka-client/src/main/java/org/apache/storm/kafka/spout/internal/CommitMetadataManager.java ---\n    @@ -0,0 +1,90 @@\n    +/*\n    + * Copyright 2018 The Apache Software Foundation.\n    + *\n    + * Licensed under the Apache License, Version 2.0 (the \"License\");\n    + * you may not use this file except in compliance with the License.\n    + * You may obtain a copy of the License at\n    + *\n    + *      http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +\n    +package org.apache.storm.kafka.spout.internal;\n    +\n    +import com.fasterxml.jackson.core.JsonProcessingException;\n    +import com.fasterxml.jackson.databind.ObjectMapper;\n    +import java.io.IOException;\n    +import java.util.Map;\n    +import org.apache.kafka.clients.consumer.OffsetAndMetadata;\n    +import org.apache.kafka.common.TopicPartition;\n    +import org.apache.storm.kafka.spout.KafkaSpout;\n    +import org.apache.storm.kafka.spout.KafkaSpoutConfig.ProcessingGuarantee;\n    +import org.apache.storm.task.TopologyContext;\n    +import org.slf4j.Logger;\n    +import org.slf4j.LoggerFactory;\n    +\n    +/**\n    + * Generates and reads commit metadata.\n    + */\n    +public class CommitMetadataManager {\n    --- End diff --\n    \n    All the methods and constructors in this class should be package protected\n","created":"2018-02-04T18:37:12.938+0000","updated":"2018-02-04T18:37:12.938+0000","started":"2018-02-04T18:37:12.938+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"70625","issueId":"13134157"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13134157/worklog/70626","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user hmcl commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/2538#discussion_r165852835\n  \n    --- Diff: external/storm-kafka-client/src/main/java/org/apache/storm/kafka/spout/internal/CommitMetadataManager.java ---\n    @@ -0,0 +1,90 @@\n    +/*\n    + * Copyright 2018 The Apache Software Foundation.\n    + *\n    + * Licensed under the Apache License, Version 2.0 (the \"License\");\n    + * you may not use this file except in compliance with the License.\n    + * You may obtain a copy of the License at\n    + *\n    + *      http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +\n    +package org.apache.storm.kafka.spout.internal;\n    +\n    +import com.fasterxml.jackson.core.JsonProcessingException;\n    +import com.fasterxml.jackson.databind.ObjectMapper;\n    +import java.io.IOException;\n    +import java.util.Map;\n    +import org.apache.kafka.clients.consumer.OffsetAndMetadata;\n    +import org.apache.kafka.common.TopicPartition;\n    +import org.apache.storm.kafka.spout.KafkaSpout;\n    +import org.apache.storm.kafka.spout.KafkaSpoutConfig.ProcessingGuarantee;\n    +import org.apache.storm.task.TopologyContext;\n    +import org.slf4j.Logger;\n    +import org.slf4j.LoggerFactory;\n    +\n    +/**\n    + * Generates and reads commit metadata.\n    + */\n    +public class CommitMetadataManager {\n    +\n    +    private static final ObjectMapper JSON_MAPPER = new ObjectMapper();\n    --- End diff --\n    \n    Do we want one ObjectMapper for all the KafkaSpout instances (executors), or one per executor? This will share it across all the instances. Perhaps we should have one per instance.\n","created":"2018-02-04T18:37:12.940+0000","updated":"2018-02-04T18:37:12.940+0000","started":"2018-02-04T18:37:12.939+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"70626","issueId":"13134157"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13134157/worklog/70627","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user hmcl commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/2538#discussion_r165853240\n  \n    --- Diff: external/storm-kafka-client/src/main/java/org/apache/storm/kafka/spout/KafkaSpout.java ---\n    @@ -311,7 +273,10 @@ public void nextTuple() {\n                     if (isAtLeastOnceProcessing()) {\n                         commitOffsetsForAckedTuples(kafkaConsumer.assignment());\n                     } else if (kafkaSpoutConfig.getProcessingGuarantee() == ProcessingGuarantee.NONE) {\n    -                    commitConsumedOffsets(kafkaConsumer.assignment());\n    +                    Map<TopicPartition, OffsetAndMetadata> offsetsToCommit = \n    +                        createOffsetsToCommitForConsumedOffsets(kafkaConsumer.assignment());\n    +                    kafkaConsumer.commitAsync(offsetsToCommit, null);\n    --- End diff --\n    \n    createFetchedOffsetsMetadata\n","created":"2018-02-04T18:37:12.961+0000","updated":"2018-02-04T18:37:12.961+0000","started":"2018-02-04T18:37:12.960+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"70627","issueId":"13134157"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13134157/worklog/70628","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user hmcl commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/2538#discussion_r165853046\n  \n    --- Diff: external/storm-kafka-client/src/main/java/org/apache/storm/kafka/spout/KafkaSpout.java ---\n    @@ -469,11 +437,14 @@ private boolean emitOrRetryTuple(ConsumerRecord<K, V> record) {\n                 LOG.trace(\"Tuple for record [{}] has already been emitted. Skipping\", record);\n             } else {\n                 final OffsetAndMetadata committedOffset = kafkaConsumer.committed(tp);\n    -            if (committedOffset != null && isOffsetCommittedByThisTopology(tp, committedOffset)\n    +            if (isAtLeastOnceProcessing()\n    +                && committedOffset != null \n    +                && commitMetadataManager.isOffsetCommittedByThisTopology(tp, committedOffset, offsetManagers)\n    --- End diff --\n    \n    Collections.unmodifiableMap(offsetManagers)\n","created":"2018-02-04T18:37:12.976+0000","updated":"2018-02-04T18:37:12.976+0000","started":"2018-02-04T18:37:12.976+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"70628","issueId":"13134157"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13134157/worklog/70629","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user hmcl commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/2538#discussion_r165852864\n  \n    --- Diff: external/storm-kafka-client/src/main/java/org/apache/storm/kafka/spout/internal/CommitMetadataManager.java ---\n    @@ -0,0 +1,90 @@\n    +/*\n    + * Copyright 2018 The Apache Software Foundation.\n    + *\n    + * Licensed under the Apache License, Version 2.0 (the \"License\");\n    + * you may not use this file except in compliance with the License.\n    + * You may obtain a copy of the License at\n    + *\n    + *      http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +\n    +package org.apache.storm.kafka.spout.internal;\n    +\n    +import com.fasterxml.jackson.core.JsonProcessingException;\n    +import com.fasterxml.jackson.databind.ObjectMapper;\n    +import java.io.IOException;\n    +import java.util.Map;\n    +import org.apache.kafka.clients.consumer.OffsetAndMetadata;\n    +import org.apache.kafka.common.TopicPartition;\n    +import org.apache.storm.kafka.spout.KafkaSpout;\n    +import org.apache.storm.kafka.spout.KafkaSpoutConfig.ProcessingGuarantee;\n    +import org.apache.storm.task.TopologyContext;\n    +import org.slf4j.Logger;\n    +import org.slf4j.LoggerFactory;\n    +\n    +/**\n    + * Generates and reads commit metadata.\n    + */\n    +public class CommitMetadataManager {\n    +\n    +    private static final ObjectMapper JSON_MAPPER = new ObjectMapper();\n    +    private static final Logger LOG = LoggerFactory.getLogger(CommitMetadata.class);\n    +    // Metadata information to commit to Kafka. It is unique per spout instance.\n    --- End diff --\n    \n    Do you mean CommitMetadataManager.class ?\n","created":"2018-02-04T18:37:12.985+0000","updated":"2018-02-04T18:37:12.985+0000","started":"2018-02-04T18:37:12.984+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"70629","issueId":"13134157"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13134157/worklog/70631","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user srdo commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/2538#discussion_r165853784\n  \n    --- Diff: external/storm-kafka-client/src/main/java/org/apache/storm/kafka/spout/KafkaSpout.java ---\n    @@ -142,7 +139,7 @@ public void open(Map<String, Object> conf, TopologyContext context, SpoutOutputC\n             offsetManagers = new HashMap<>();\n             emitted = new HashSet<>();\n             waitingToEmit = new HashMap<>();\n    -        setCommitMetadata(context);\n    +        commitMetadataManager = new CommitMetadataManager(context, kafkaSpoutConfig.getProcessingGuarantee());\n    --- End diff --\n    \n    I think we should wait. Let's do it if someone needs it, but introducing more extension points than we need is likely to cause us more headaches down the road, because once the extension point is public it's harder for us to change if we need to because we have to consider that other people may be implementing the interface.\n","created":"2018-02-04T18:52:26.983+0000","updated":"2018-02-04T18:52:26.983+0000","started":"2018-02-04T18:52:26.983+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"70631","issueId":"13134157"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13134157/worklog/70632","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user srdo commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/2538#discussion_r165853798\n  \n    --- Diff: external/storm-kafka-client/src/main/java/org/apache/storm/kafka/spout/KafkaSpout.java ---\n    @@ -396,7 +361,10 @@ private void setWaitingToEmit(ConsumerRecords<K, V> consumerRecords) {\n                     numPolledRecords);\n                 if (kafkaSpoutConfig.getProcessingGuarantee() == KafkaSpoutConfig.ProcessingGuarantee.AT_MOST_ONCE) {\n                     //Commit polled records immediately to ensure delivery is at-most-once.\n    -                kafkaConsumer.commitSync();\n    +                Map<TopicPartition, OffsetAndMetadata> offsetsToCommit = \n    +                    createOffsetsToCommitForConsumedOffsets(kafkaConsumer.assignment());\n    +                kafkaConsumer.commitSync(offsetsToCommit);\n    --- End diff --\n    \n    Will rename\n","created":"2018-02-04T18:52:49.905+0000","updated":"2018-02-04T18:52:49.905+0000","started":"2018-02-04T18:52:49.904+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"70632","issueId":"13134157"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13134157/worklog/70633","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user srdo commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/2538#discussion_r165853833\n  \n    --- Diff: external/storm-kafka-client/src/main/java/org/apache/storm/kafka/spout/internal/CommitMetadataManager.java ---\n    @@ -0,0 +1,90 @@\n    +/*\n    + * Copyright 2018 The Apache Software Foundation.\n    + *\n    + * Licensed under the Apache License, Version 2.0 (the \"License\");\n    + * you may not use this file except in compliance with the License.\n    + * You may obtain a copy of the License at\n    + *\n    + *      http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +\n    +package org.apache.storm.kafka.spout.internal;\n    +\n    +import com.fasterxml.jackson.core.JsonProcessingException;\n    +import com.fasterxml.jackson.databind.ObjectMapper;\n    +import java.io.IOException;\n    +import java.util.Map;\n    +import org.apache.kafka.clients.consumer.OffsetAndMetadata;\n    +import org.apache.kafka.common.TopicPartition;\n    +import org.apache.storm.kafka.spout.KafkaSpout;\n    +import org.apache.storm.kafka.spout.KafkaSpoutConfig.ProcessingGuarantee;\n    +import org.apache.storm.task.TopologyContext;\n    +import org.slf4j.Logger;\n    +import org.slf4j.LoggerFactory;\n    +\n    +/**\n    + * Generates and reads commit metadata.\n    + */\n    +public class CommitMetadataManager {\n    --- End diff --\n    \n    It's in the internal package, so if we make it package private the spout can't see it. I think it's up to users to figure out that if the class is in a package called \"internal\", they probably shouldn't use it. Once we start looking at Java 9 modularization we can make sure not to export this.\n","created":"2018-02-04T18:54:26.464+0000","updated":"2018-02-04T18:54:26.464+0000","started":"2018-02-04T18:54:26.463+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"70633","issueId":"13134157"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13134157/worklog/70634","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user srdo commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/2538#discussion_r165854105\n  \n    --- Diff: external/storm-kafka-client/src/main/java/org/apache/storm/kafka/spout/internal/CommitMetadataManager.java ---\n    @@ -0,0 +1,90 @@\n    +/*\n    + * Copyright 2018 The Apache Software Foundation.\n    + *\n    + * Licensed under the Apache License, Version 2.0 (the \"License\");\n    + * you may not use this file except in compliance with the License.\n    + * You may obtain a copy of the License at\n    + *\n    + *      http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +\n    +package org.apache.storm.kafka.spout.internal;\n    +\n    +import com.fasterxml.jackson.core.JsonProcessingException;\n    +import com.fasterxml.jackson.databind.ObjectMapper;\n    +import java.io.IOException;\n    +import java.util.Map;\n    +import org.apache.kafka.clients.consumer.OffsetAndMetadata;\n    +import org.apache.kafka.common.TopicPartition;\n    +import org.apache.storm.kafka.spout.KafkaSpout;\n    +import org.apache.storm.kafka.spout.KafkaSpoutConfig.ProcessingGuarantee;\n    +import org.apache.storm.task.TopologyContext;\n    +import org.slf4j.Logger;\n    +import org.slf4j.LoggerFactory;\n    +\n    +/**\n    + * Generates and reads commit metadata.\n    + */\n    +public class CommitMetadataManager {\n    +\n    +    private static final ObjectMapper JSON_MAPPER = new ObjectMapper();\n    --- End diff --\n    \n    Objectmappers are thread safe. I don't see anywhere in the documentation that mentions whether there are internal locks being used in the ObjectMapper, but this post suggests there aren't https://stackoverflow.com/questions/18611565/how-do-i-correctly-reuse-jackson-objectmapper#comment27462917_18618918. A quick google also suggests that it should be fine to use ObjectMapper as a singleton.\n","created":"2018-02-04T19:05:04.624+0000","updated":"2018-02-04T19:05:04.624+0000","started":"2018-02-04T19:05:04.623+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"70634","issueId":"13134157"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13134157/worklog/70635","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user srdo commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/2538#discussion_r165854164\n  \n    --- Diff: external/storm-kafka-client/src/main/java/org/apache/storm/kafka/spout/internal/CommitMetadataManager.java ---\n    @@ -0,0 +1,90 @@\n    +/*\n    + * Copyright 2018 The Apache Software Foundation.\n    + *\n    + * Licensed under the Apache License, Version 2.0 (the \"License\");\n    + * you may not use this file except in compliance with the License.\n    + * You may obtain a copy of the License at\n    + *\n    + *      http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +\n    +package org.apache.storm.kafka.spout.internal;\n    +\n    +import com.fasterxml.jackson.core.JsonProcessingException;\n    +import com.fasterxml.jackson.databind.ObjectMapper;\n    +import java.io.IOException;\n    +import java.util.Map;\n    +import org.apache.kafka.clients.consumer.OffsetAndMetadata;\n    +import org.apache.kafka.common.TopicPartition;\n    +import org.apache.storm.kafka.spout.KafkaSpout;\n    +import org.apache.storm.kafka.spout.KafkaSpoutConfig.ProcessingGuarantee;\n    +import org.apache.storm.task.TopologyContext;\n    +import org.slf4j.Logger;\n    +import org.slf4j.LoggerFactory;\n    +\n    +/**\n    + * Generates and reads commit metadata.\n    + */\n    +public class CommitMetadataManager {\n    +\n    +    private static final ObjectMapper JSON_MAPPER = new ObjectMapper();\n    +    private static final Logger LOG = LoggerFactory.getLogger(CommitMetadata.class);\n    +    // Metadata information to commit to Kafka. It is unique per spout instance.\n    --- End diff --\n    \n    No, the metadata is the same if you create two CommitMetadataManagers from the same spout instance. \n","created":"2018-02-04T19:07:11.916+0000","updated":"2018-02-04T19:07:11.916+0000","started":"2018-02-04T19:07:11.915+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"70635","issueId":"13134157"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13134157/worklog/70636","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user srdo commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/2538#discussion_r165854399\n  \n    --- Diff: external/storm-kafka-client/src/main/java/org/apache/storm/kafka/spout/internal/CommitMetadataManager.java ---\n    @@ -0,0 +1,90 @@\n    +/*\n    + * Copyright 2018 The Apache Software Foundation.\n    + *\n    + * Licensed under the Apache License, Version 2.0 (the \"License\");\n    + * you may not use this file except in compliance with the License.\n    + * You may obtain a copy of the License at\n    + *\n    + *      http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +\n    +package org.apache.storm.kafka.spout.internal;\n    +\n    +import com.fasterxml.jackson.core.JsonProcessingException;\n    +import com.fasterxml.jackson.databind.ObjectMapper;\n    +import java.io.IOException;\n    +import java.util.Map;\n    +import org.apache.kafka.clients.consumer.OffsetAndMetadata;\n    +import org.apache.kafka.common.TopicPartition;\n    +import org.apache.storm.kafka.spout.KafkaSpout;\n    +import org.apache.storm.kafka.spout.KafkaSpoutConfig.ProcessingGuarantee;\n    +import org.apache.storm.task.TopologyContext;\n    +import org.slf4j.Logger;\n    +import org.slf4j.LoggerFactory;\n    +\n    +/**\n    + * Generates and reads commit metadata.\n    + */\n    +public class CommitMetadataManager {\n    +\n    +    private static final ObjectMapper JSON_MAPPER = new ObjectMapper();\n    +    private static final Logger LOG = LoggerFactory.getLogger(CommitMetadata.class);\n    +    // Metadata information to commit to Kafka. It is unique per spout instance.\n    +    private final String commitMetadata;\n    +    private final ProcessingGuarantee processingGuarantee;\n    +    private final TopologyContext context;\n    +\n    +    /**\n    +     * Create a manager with the given context.\n    +     */\n    +    public CommitMetadataManager(TopologyContext context, ProcessingGuarantee processingGuarantee) {\n    +        this.context = context;\n    +        try {\n    +            commitMetadata = JSON_MAPPER.writeValueAsString(new CommitMetadata(\n    +                context.getStormId(), context.getThisTaskId(), Thread.currentThread().getName()));\n    +            this.processingGuarantee = processingGuarantee;\n    +        } catch (JsonProcessingException e) {\n    +            LOG.error(\"Failed to create Kafka commit metadata due to JSON serialization error\", e);\n    +            throw new RuntimeException(e);\n    +        }\n    +    }\n    +\n    +    /**\n    +     * Checks if {@link OffsetAndMetadata} was committed by a {@link KafkaSpout} instance in this topology.\n    +     *\n    +     * @param tp The topic partition the commit metadata belongs to.\n    +     * @param committedOffset {@link OffsetAndMetadata} info committed to Kafka\n    +     * @param offsetManagers The offset managers.\n    +     * @return true if this topology committed this {@link OffsetAndMetadata}, false otherwise\n    +     */\n    +    public boolean isOffsetCommittedByThisTopology(TopicPartition tp, OffsetAndMetadata committedOffset,\n    +        Map<TopicPartition, OffsetManager> offsetManagers) {\n    +        try {\n    +            if (processingGuarantee == ProcessingGuarantee.AT_LEAST_ONCE\n    +                && offsetManagers.containsKey(tp)\n    +                && offsetManagers.get(tp).hasCommitted()) {\n    +                return true;\n    +            }\n    +\n    +            final CommitMetadata committedMetadata = JSON_MAPPER.readValue(committedOffset.metadata(), CommitMetadata.class);\n    +            return committedMetadata.getTopologyId().equals(context.getStormId());\n    +        } catch (IOException e) {\n    +            LOG.warn(\"Failed to deserialize [{}]. Error likely occurred because the last commit \"\n    --- End diff --\n    \n    Yes, I'll update this message\n","created":"2018-02-04T19:14:06.605+0000","updated":"2018-02-04T19:14:06.605+0000","started":"2018-02-04T19:14:06.503+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"70636","issueId":"13134157"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13134157/worklog/70637","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user srdo commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/2538#discussion_r165854458\n  \n    --- Diff: external/storm-kafka-client/src/main/java/org/apache/storm/kafka/spout/internal/CommitMetadataManager.java ---\n    @@ -0,0 +1,90 @@\n    +/*\n    + * Copyright 2018 The Apache Software Foundation.\n    + *\n    + * Licensed under the Apache License, Version 2.0 (the \"License\");\n    + * you may not use this file except in compliance with the License.\n    + * You may obtain a copy of the License at\n    + *\n    + *      http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +\n    +package org.apache.storm.kafka.spout.internal;\n    +\n    +import com.fasterxml.jackson.core.JsonProcessingException;\n    +import com.fasterxml.jackson.databind.ObjectMapper;\n    +import java.io.IOException;\n    +import java.util.Map;\n    +import org.apache.kafka.clients.consumer.OffsetAndMetadata;\n    +import org.apache.kafka.common.TopicPartition;\n    +import org.apache.storm.kafka.spout.KafkaSpout;\n    +import org.apache.storm.kafka.spout.KafkaSpoutConfig.ProcessingGuarantee;\n    +import org.apache.storm.task.TopologyContext;\n    +import org.slf4j.Logger;\n    +import org.slf4j.LoggerFactory;\n    +\n    +/**\n    + * Generates and reads commit metadata.\n    + */\n    +public class CommitMetadataManager {\n    +\n    +    private static final ObjectMapper JSON_MAPPER = new ObjectMapper();\n    +    private static final Logger LOG = LoggerFactory.getLogger(CommitMetadata.class);\n    +    // Metadata information to commit to Kafka. It is unique per spout instance.\n    +    private final String commitMetadata;\n    +    private final ProcessingGuarantee processingGuarantee;\n    +    private final TopologyContext context;\n    +\n    +    /**\n    +     * Create a manager with the given context.\n    +     */\n    +    public CommitMetadataManager(TopologyContext context, ProcessingGuarantee processingGuarantee) {\n    +        this.context = context;\n    +        try {\n    +            commitMetadata = JSON_MAPPER.writeValueAsString(new CommitMetadata(\n    --- End diff --\n    \n    I would agree if CommitMetadata weren't a POJO. It doesn't have any behavior, why do we need to stub it?\n","created":"2018-02-04T19:16:20.213+0000","updated":"2018-02-04T19:16:20.213+0000","started":"2018-02-04T19:16:20.212+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"70637","issueId":"13134157"}]},"customfield_12311820":"0|i3pfr3:"}}