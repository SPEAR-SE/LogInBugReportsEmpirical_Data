{"expand":"renderedFields,names,schema,operations,editmeta,changelog,versionedRepresentations","id":"13183419","self":"https://issues.apache.org/jira/rest/api/2/issue/13183419","key":"STORM-3215","fields":{"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype","name":"Bug","subtask":false,"avatarId":21133},"timespent":2400,"project":{"self":"https://issues.apache.org/jira/rest/api/2/project/12314820","id":"12314820","key":"STORM","name":"Apache Storm","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/projectavatar?pid=12314820&avatarId=21667","24x24":"https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12314820&avatarId=21667","16x16":"https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12314820&avatarId=21667","32x32":"https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12314820&avatarId=21667"},"projectCategory":{"self":"https://issues.apache.org/jira/rest/api/2/projectCategory/13260","id":"13260","description":"Apache Storm Related","name":"Storm"}},"fixVersions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12334657","id":"12334657","name":"2.0.0","archived":false,"released":false}],"aggregatetimespent":2400,"resolution":{"self":"https://issues.apache.org/jira/rest/api/2/resolution/1","id":"1","description":"A fix for this issue is checked into the tree and tested.","name":"Fixed"},"customfield_12312322":null,"customfield_12310220":null,"customfield_12312520":null,"customfield_12312323":null,"customfield_12312521":"2018-09-06 15:15:52.448","customfield_12312320":null,"customfield_12310222":"1_*:*_1_*:*_108992675_*|*_5_*:*_1_*:*_0","customfield_12310420":"9223372036854775807","customfield_12312321":null,"resolutiondate":"2018-09-07T21:32:25.106+0000","workratio":-1,"customfield_12312328":null,"customfield_12312329":null,"customfield_12312923":null,"customfield_12312326":null,"customfield_12312920":null,"customfield_12310300":null,"customfield_12312327":null,"customfield_12312921":null,"customfield_12312324":null,"customfield_12312720":null,"customfield_12312325":null,"lastViewed":null,"watches":{"self":"https://issues.apache.org/jira/rest/api/2/issue/STORM-3215/watchers","watchCount":1,"isWatching":false},"created":"2018-09-06T15:15:52.448+0000","priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.svg","name":"Major","id":"3"},"labels":["pull-request-available"],"customfield_12312333":null,"customfield_12312334":null,"customfield_12313422":"false","customfield_12310310":"0.0","customfield_12312331":null,"customfield_12312332":null,"timeestimate":0,"aggregatetimeoriginalestimate":null,"customfield_12311120":null,"customfield_12312330":null,"versions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12334657","id":"12334657","name":"2.0.0","archived":false,"released":false}],"customfield_12312339":null,"issuelinks":[],"assignee":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=revans2","name":"revans2","key":"revans2","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Robert Joseph Evans","active":true,"timeZone":"America/Chicago"},"customfield_12312337":null,"customfield_12312338":null,"updated":"2018-09-07T21:32:39.387+0000","customfield_12312335":null,"customfield_12312336":null,"status":{"self":"https://issues.apache.org/jira/rest/api/2/status/5","description":"A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/resolved.png","name":"Resolved","id":"5","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Done"}},"components":[{"self":"https://issues.apache.org/jira/rest/api/2/component/12332926","id":"12332926","name":"storm-webapp"}],"timeoriginalestimate":null,"description":"The new UI switched APIs that it used to get the nimbus client.Â  Turns out that the APIs are inconsistent on using ReqContext or not.","customfield_10010":null,"timetracking":{"remainingEstimate":"0h","timeSpent":"40m","remainingEstimateSeconds":0,"timeSpentSeconds":2400},"customfield_12312026":null,"customfield_12312023":null,"customfield_12312024":null,"attachment":[],"customfield_12312340":null,"aggregatetimeestimate":0,"customfield_12312341":null,"customfield_12312220":null,"customfield_12312022":null,"customfield_12310921":null,"customfield_12310920":"9223372036854775807","customfield_12312823":null,"summary":"New UI is not impersonating user","creator":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=revans2","name":"revans2","key":"revans2","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Robert Joseph Evans","active":true,"timeZone":"America/Chicago"},"subtasks":[],"reporter":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=revans2","name":"revans2","key":"revans2","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Robert Joseph Evans","active":true,"timeZone":"America/Chicago"},"customfield_12310291":null,"customfield_12310290":null,"aggregateprogress":{"progress":2400,"total":2400,"percent":100},"environment":null,"customfield_12313520":null,"customfield_12311020":null,"duedate":null,"customfield_12310250":null,"progress":{"progress":2400,"total":2400,"percent":100},"comment":{"comments":[],"maxResults":0,"total":0,"startAt":0},"votes":{"self":"https://issues.apache.org/jira/rest/api/2/issue/STORM-3215/votes","votes":0,"hasVoted":false},"worklog":{"startAt":0,"maxResults":20,"total":4,"worklogs":[{"self":"https://issues.apache.org/jira/rest/api/2/issue/13183419/worklog/141826","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"GitHub user revans2 opened a pull request:\n\n    https://github.com/apache/storm/pull/2820\n\n    STORM-3215: Add back in impersonation to UI\n\n    \n\nYou can merge this pull request into a Git repository by running:\n\n    $ git pull https://github.com/revans2/incubator-storm STORM-3215\n\nAlternatively you can review and apply these changes as the patch at:\n\n    https://github.com/apache/storm/pull/2820.patch\n\nTo close this pull request, make a commit to your master/trunk branch\nwith (at least) the following in the commit message:\n\n    This closes #2820\n    \n----\ncommit 4300e944a0d453191c23ef4d818956a8f84eb5f0\nAuthor: Robert (Bobby) Evans <evans@...>\nDate:   2018-09-06T15:57:05Z\n\n    STORM-3215: Add back in impersonation to UI\n\n----\n","created":"2018-09-06T15:59:59.086+0000","updated":"2018-09-06T15:59:59.086+0000","started":"2018-09-06T15:59:59.086+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"141826","issueId":"13183419"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13183419/worklog/141834","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user Ethanlm commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/2820#discussion_r215690566\n  \n    --- Diff: storm-client/src/jvm/org/apache/storm/utils/NimbusClient.java ---\n    @@ -22,74 +22,128 @@\n     import org.apache.storm.security.auth.ReqContext;\n     import org.apache.storm.security.auth.ThriftClient;\n     import org.apache.storm.security.auth.ThriftConnectionType;\n    -import org.apache.storm.shade.com.google.common.collect.Lists;\n    -import org.apache.storm.shade.org.apache.commons.lang.StringUtils;\n     import org.apache.storm.thrift.transport.TTransportException;\n     import org.slf4j.Logger;\n     import org.slf4j.LoggerFactory;\n     \n    +/**\n    + * Client used for connecting to nimbus.  Typically you want to use a variant of the\n    + * `getConfiguredClient` static method to get a client to use, as directly putting in\n    + * a host and port does not support nimbus high availability.\n    + */\n     public class NimbusClient extends ThriftClient {\n         private static final Logger LOG = LoggerFactory.getLogger(NimbusClient.class);\n         private static volatile Nimbus.Iface _localOverrideClient = null;\n         private static String oldLeader = \"\";\n         /**\n          * Indicates if this is a special client that is overwritten for local mode.\n          */\n    -    public final boolean _isLocal;\n    -    private Nimbus.Iface _client;\n    +    public final boolean isLocal;\n    +    private final Nimbus.Iface client;\n     \n    +    /**\n    +     * Constructor, Please try to use `getConfiguredClient` instead of calling this directly.\n    +     * @param conf the conf for the client.\n    +     * @param host the host the client is to talk to.\n    +     * @param port the port the client is to talk to.\n    +     * @throws TTransportException on any error.\n    +     */\n    +    @Deprecated\n         public NimbusClient(Map<String, Object> conf, String host, int port) throws TTransportException {\n             this(conf, host, port, null, null);\n         }\n     \n    +    /**\n    +     * Constructor, Please try to use `getConfiguredClient` instead of calling this directly.\n    +     * @param conf the conf for the client.\n    +     * @param host the host the client is to talk to.\n    +     * @param port the port the client is to talk to.\n    +     * @param timeout the timeout to use when connecting.\n    +     * @throws TTransportException on any error.\n    +     */\n         public NimbusClient(Map<String, Object> conf, String host, int port, Integer timeout) throws TTransportException {\n             super(conf, ThriftConnectionType.NIMBUS, host, port, timeout, null);\n    -        _client = new Nimbus.Client(_protocol);\n    -        _isLocal = false;\n    +        client = new Nimbus.Client(_protocol);\n    +        isLocal = false;\n         }\n     \n    +    /**\n    +     * Constructor, Please try to use `getConfiguredClientAs` instead of calling this directly.\n    +     * @param conf the conf for the client.\n    +     * @param host the host the client is to talk to.\n    +     * @param port the port the client is to talk to.\n    +     * @param timeout the timeout to use when connecting.\n    +     * @param asUser the name of the user you want to impersonate (use with caution as it is not always supported).\n    +     * @throws TTransportException on any error.\n    +     */\n         public NimbusClient(Map<String, Object> conf, String host, Integer port, Integer timeout, String asUser) throws TTransportException {\n             super(conf, ThriftConnectionType.NIMBUS, host, port, timeout, asUser);\n    -        _client = new Nimbus.Client(_protocol);\n    -        _isLocal = false;\n    +        client = new Nimbus.Client(_protocol);\n    +        isLocal = false;\n         }\n     \n    +    /**\n    +     * Constructor, Please try to use `getConfiguredClient` instead of calling this directly.\n    +     * @param conf the conf for the client.\n    +     * @param host the host the client is to talk to.\n    +     * @throws TTransportException on any error.\n    +     */\n         public NimbusClient(Map<String, Object> conf, String host) throws TTransportException {\n             super(conf, ThriftConnectionType.NIMBUS, host, null, null, null);\n    -        _client = new Nimbus.Client(_protocol);\n    -        _isLocal = false;\n    +        client = new Nimbus.Client(_protocol);\n    +        isLocal = false;\n         }\n     \n         private NimbusClient(Nimbus.Iface client) {\n             super(new HashMap<>(), ThriftConnectionType.LOCAL_FAKE, \"localhost\", null, null, null);\n    -        _client = client;\n    -        _isLocal = true;\n    +        this.client = client;\n    +        isLocal = true;\n         }\n     \n         /**\n    +     * Is the local override set or not.\n          * @return true of new clients will be overridden to connect to a local cluster and not the configured remote cluster.\n          */\n         public static boolean isLocalOverride() {\n             return _localOverrideClient != null;\n         }\n     \n    +    /**\n    +     * Execute cb with a configured nimbus client that will be closed one cb returns.\n    +     * @param cb the callback to send to nimbus.\n    +     * @throws Exception on any kind of error.\n    +     */\n         public static void withConfiguredClient(WithNimbus cb) throws Exception {\n             withConfiguredClient(cb, ConfigUtils.readStormConfig());\n         }\n     \n    +    /**\n    +     * Execute cb with a configured nimbus client that will be closed one cb returns.\n    --- End diff --\n    \n    nit: once\n","created":"2018-09-06T16:27:33.487+0000","updated":"2018-09-06T16:27:33.487+0000","started":"2018-09-06T16:27:33.486+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"141834","issueId":"13183419"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13183419/worklog/141835","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user Ethanlm commented on a diff in the pull request:\n\n    https://github.com/apache/storm/pull/2820#discussion_r215690394\n  \n    --- Diff: storm-client/src/jvm/org/apache/storm/utils/NimbusClient.java ---\n    @@ -22,74 +22,128 @@\n     import org.apache.storm.security.auth.ReqContext;\n     import org.apache.storm.security.auth.ThriftClient;\n     import org.apache.storm.security.auth.ThriftConnectionType;\n    -import org.apache.storm.shade.com.google.common.collect.Lists;\n    -import org.apache.storm.shade.org.apache.commons.lang.StringUtils;\n     import org.apache.storm.thrift.transport.TTransportException;\n     import org.slf4j.Logger;\n     import org.slf4j.LoggerFactory;\n     \n    +/**\n    + * Client used for connecting to nimbus.  Typically you want to use a variant of the\n    + * `getConfiguredClient` static method to get a client to use, as directly putting in\n    + * a host and port does not support nimbus high availability.\n    + */\n     public class NimbusClient extends ThriftClient {\n         private static final Logger LOG = LoggerFactory.getLogger(NimbusClient.class);\n         private static volatile Nimbus.Iface _localOverrideClient = null;\n         private static String oldLeader = \"\";\n         /**\n          * Indicates if this is a special client that is overwritten for local mode.\n          */\n    -    public final boolean _isLocal;\n    -    private Nimbus.Iface _client;\n    +    public final boolean isLocal;\n    +    private final Nimbus.Iface client;\n     \n    +    /**\n    +     * Constructor, Please try to use `getConfiguredClient` instead of calling this directly.\n    +     * @param conf the conf for the client.\n    +     * @param host the host the client is to talk to.\n    +     * @param port the port the client is to talk to.\n    +     * @throws TTransportException on any error.\n    +     */\n    +    @Deprecated\n         public NimbusClient(Map<String, Object> conf, String host, int port) throws TTransportException {\n             this(conf, host, port, null, null);\n         }\n     \n    +    /**\n    +     * Constructor, Please try to use `getConfiguredClient` instead of calling this directly.\n    +     * @param conf the conf for the client.\n    +     * @param host the host the client is to talk to.\n    +     * @param port the port the client is to talk to.\n    +     * @param timeout the timeout to use when connecting.\n    +     * @throws TTransportException on any error.\n    +     */\n         public NimbusClient(Map<String, Object> conf, String host, int port, Integer timeout) throws TTransportException {\n             super(conf, ThriftConnectionType.NIMBUS, host, port, timeout, null);\n    -        _client = new Nimbus.Client(_protocol);\n    -        _isLocal = false;\n    +        client = new Nimbus.Client(_protocol);\n    +        isLocal = false;\n         }\n     \n    +    /**\n    +     * Constructor, Please try to use `getConfiguredClientAs` instead of calling this directly.\n    +     * @param conf the conf for the client.\n    +     * @param host the host the client is to talk to.\n    +     * @param port the port the client is to talk to.\n    +     * @param timeout the timeout to use when connecting.\n    +     * @param asUser the name of the user you want to impersonate (use with caution as it is not always supported).\n    +     * @throws TTransportException on any error.\n    +     */\n         public NimbusClient(Map<String, Object> conf, String host, Integer port, Integer timeout, String asUser) throws TTransportException {\n             super(conf, ThriftConnectionType.NIMBUS, host, port, timeout, asUser);\n    -        _client = new Nimbus.Client(_protocol);\n    -        _isLocal = false;\n    +        client = new Nimbus.Client(_protocol);\n    +        isLocal = false;\n         }\n     \n    +    /**\n    +     * Constructor, Please try to use `getConfiguredClient` instead of calling this directly.\n    +     * @param conf the conf for the client.\n    +     * @param host the host the client is to talk to.\n    +     * @throws TTransportException on any error.\n    +     */\n         public NimbusClient(Map<String, Object> conf, String host) throws TTransportException {\n             super(conf, ThriftConnectionType.NIMBUS, host, null, null, null);\n    -        _client = new Nimbus.Client(_protocol);\n    -        _isLocal = false;\n    +        client = new Nimbus.Client(_protocol);\n    +        isLocal = false;\n         }\n     \n         private NimbusClient(Nimbus.Iface client) {\n             super(new HashMap<>(), ThriftConnectionType.LOCAL_FAKE, \"localhost\", null, null, null);\n    -        _client = client;\n    -        _isLocal = true;\n    +        this.client = client;\n    +        isLocal = true;\n         }\n     \n         /**\n    +     * Is the local override set or not.\n          * @return true of new clients will be overridden to connect to a local cluster and not the configured remote cluster.\n          */\n         public static boolean isLocalOverride() {\n             return _localOverrideClient != null;\n         }\n     \n    +    /**\n    +     * Execute cb with a configured nimbus client that will be closed one cb returns.\n    --- End diff --\n    \n    nit: once\n","created":"2018-09-06T16:27:33.620+0000","updated":"2018-09-06T16:27:33.620+0000","started":"2018-09-06T16:27:33.620+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"141835","issueId":"13183419"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13183419/worklog/142327","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user asfgit closed the pull request at:\n\n    https://github.com/apache/storm/pull/2820\n","created":"2018-09-07T21:32:39.383+0000","updated":"2018-09-07T21:32:39.383+0000","started":"2018-09-07T21:32:39.383+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"142327","issueId":"13183419"}]},"customfield_12311820":"0|i3xt1r:"}}