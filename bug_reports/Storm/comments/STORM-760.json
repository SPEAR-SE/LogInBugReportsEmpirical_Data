[There is one place else which is backtype.storm.utils.LocalState which currently writes the state to localdisk and uses java serialization. It is ok because it writes java's hashtable so I haven't seen it causing any issues but it might be better to convert that into Json as well., GitHub user revans2 opened a pull request:

    https://github.com/apache/storm/pull/513

    STORM-760: Use JSON for serialized conf

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/revans2/incubator-storm STORM-760

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/storm/pull/513.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #513
    
----
commit 99aaaae2734281d483a50a2adbc4b43111621abf
Author: Robert (Bobby) Evans <evans@yahoo-inc.com>
Date:   2015-04-07T19:15:09Z

    STORM-760: Use JSON for serialized conf

----
, That is right, LocalState uses java serialization.  My only concern is about what else is stored in the map.  We have had cases where local state files needed to be cleaned out so we could go on.  I'll look into seeing if there is something we can do about that., Looking at what LocalState is currently used for I am a bit nervous that we might be in trouble.

The following are some examples of what I found being written to a LocalState
{code}
{local-assignments={1024 #backtype.storm.daemon.supervisor.LocalAssignment{:storm-id "topologytest-0e9ff9c4-2e3a-403d-b334-0ce687bcee1a-1-0", :executors ([8 8] [12 12] [2 2] [7 7] [3 3] [1 1] [6 6] [9 9] [11 11] [5 5] [10 10] [4 4])}}, approved-workers={"ce732ff5-761c-42b5-ba3b-3f5f3c6e78ad" 1024}}

{worker-heartbeat={:time-secs 1, :storm-id "topologytest-a497a6c9-1eda-4abb-858f-4c276d82c1ff-1-0", :executors #{[8 8] [12 12] [2 2] [7 7] [3 3] [1 1] [6 6] [9 9] [11 11] [-1 -1] [13 13] [5 5] [10 10] [4 4]}, :port 1024}}
{code}

Even though LocalState is storing a map.  Inside the map are clojure {persistent maps, symbols, lists, vectors, and sets}  There is also a LocalAssignment (which is a defrecord, that will have a different serialization id if ever modified).  I'm not sure if we want to convert all of this to thrift too?  or if we just want to move LocalAssignment over to be a map.  If we think clojure will not maintain serialized compatability, then we probably want to go to thrift.  If we think that they will maintain compatibility, then we could do something much more simply.

In our experience at least, when we moved from clojure 1.5 to 1.6 we saw the following errors during rolling upgrade testing (reading in local state).

{code}
java.lang.RuntimeException: java.io.InvalidClassException: clojure.lang.APersistentVector; local class incompatible: stream classdesc serialVersionUID = -2689426146225009349, local class serialVersionUID = 4667575149454420891
{code}

To me this means that clojure is not trying to maintain compatability for serialized objects, like vector.  So I personally would rather move to Thrift for the serialization of local state if possible.  I am going to file a new JIRA just for this work, as it is large enough I think it should be separated from this JIRA., I Filed STORM-765 for changing LocalState., When I tested the rolling upgrade feature I did not upgrade clojure. I built and deployed a topology on a cluster, rebuilt the storm jar and replaced the old jar with new jar, bounced nimbus/ui/workers and supervisors and the same topology was working fine. 

But I agree that any kind of dependency change should be rolling upgradable. , Github user ptgoetz commented on the pull request:

    https://github.com/apache/storm/pull/513#issuecomment-108988119
  
    +1
, Github user Parth-Brahmbhatt commented on the pull request:

    https://github.com/apache/storm/pull/513#issuecomment-108988779
  
    +1.
, Github user asfgit closed the pull request at:

    https://github.com/apache/storm/pull/513
]