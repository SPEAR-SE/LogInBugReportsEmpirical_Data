[[~rudra.sharma], if this was seen on master, was the topology submitted using an old client?  I had thought in the latest version of storm the StormSubmitter submits topology jars in chunks of about 30kb at a time., OK, looking at this some more: It is not the size of the jar file that matters here, it is the size of the topology config and the topology instance when serialized. If those are too big, then as [~kishorvpatil] noted, there is a 16MB max limit in thrift that we are not correctly overriding with the config mentioned above. Nimbus should launch with a thrift server that has the max buffer size configured correctly, instead of always using the default of 16MB., GitHub user kishorvpatil opened a pull request:

    https://github.com/apache/storm/pull/1173

    [STORM-1469] Adding Plain Sasl Transport Plugin

    Since `org.apache.storm.security.auth.SimpleTransportPlugin` creates `TFramedTransport` with maxBufferSize, but that conflicts with serialized topology of size exceeded 16MB - default `THsHaServer` allowed max buffer size. So the better option is to implement `PlainSaslTransportPlugin` which avoids using any default values for max-buffer-size. 

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/kishorvpatil/incubator-storm storm1469

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/storm/pull/1173.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1173
    
----
commit b1e4c94269dbcf2ba01aee89e468c744887c53de
Author: Kishor Patil <kpatil@yahoo-inc.com>
Date:   2016-02-29T20:44:52Z

    Adding Plain Sasl Transport Plugin

----
, Github user d2r commented on a diff in the pull request:

    https://github.com/apache/storm/pull/1173#discussion_r54649628
  
    --- Diff: conf/defaults.yaml ---
    @@ -39,7 +39,7 @@ storm.exhibitor.port: 8080
     storm.exhibitor.poll.uripath: "/exhibitor/v1/cluster/list"
     storm.cluster.mode: "distributed" # can be distributed or local
     storm.local.mode.zmq: false
    -storm.thrift.transport: "org.apache.storm.security.auth.SimpleTransportPlugin"
    +storm.thrift.transport: "org.apache.storm.security.auth.plain.PlainSaslTransportPlugin"
    --- End diff --
    
    What is the rationale for the `.plain` portion of this config? The class already says it is Plain.
, Github user d2r commented on a diff in the pull request:

    https://github.com/apache/storm/pull/1173#discussion_r54649974
  
    --- Diff: storm-core/src/jvm/org/apache/storm/security/auth/plain/PlainClientCallbackHandler.java ---
    @@ -0,0 +1,80 @@
    +/**
    + * Licensed to the Apache Software Foundation (ASF) under one
    + * or more contributor license agreements.  See the NOTICE file
    + * distributed with this work for additional information
    + * regarding copyright ownership.  The ASF licenses this file
    + * to you under the Apache License, Version 2.0 (the
    + * "License"); you may not use this file except in compliance
    + * with the License.  You may obtain a copy of the License at
    + *
    + * http://www.apache.org/licenses/LICENSE-2.0
    + *
    + * Unless required by applicable law or agreed to in writing, software
    + * distributed under the License is distributed on an "AS IS" BASIS,
    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    + * See the License for the specific language governing permissions and
    + * limitations under the License.
    + */
    +package org.apache.storm.security.auth.plain;
    +
    +import java.io.IOException;
    +import javax.security.auth.callback.Callback;
    +import javax.security.auth.callback.CallbackHandler;
    +import javax.security.auth.callback.NameCallback;
    +import javax.security.auth.callback.PasswordCallback;
    +import javax.security.auth.callback.UnsupportedCallbackException;
    +import javax.security.sasl.AuthorizeCallback;
    +import javax.security.sasl.RealmCallback;
    +
    +
    +import org.slf4j.Logger;
    +import org.slf4j.LoggerFactory;
    +
    +/**
    + *  client side callback handler.
    + */
    +public class PlainClientCallbackHandler implements CallbackHandler {
    +    private static final String USERNAME = "username";
    +    private static final String PASSWORD = "password";
    +    private static final Logger LOG = LoggerFactory.getLogger(PlainClientCallbackHandler.class);
    +    private String _username = "username";
    +    private String _password = "password";
    +
    +    /**
    +     * This method is invoked by SASL for authentication challenges
    +     * @param callbacks a collection of challenge callbacks 
    +     */
    +    public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException {
    +        for (Callback c : callbacks) {
    +            if (c instanceof NameCallback) {
    +                LOG.debug("name callback");
    +                NameCallback nc = (NameCallback) c;
    +                nc.setName(_username);
    +            } else if (c instanceof PasswordCallback) {
    +                LOG.debug("password callback");
    +                PasswordCallback pc = (PasswordCallback)c;
    +                if (_password != null) {
    +                    pc.setPassword(_password.toCharArray());
    +                } 
    +            } else if (c instanceof AuthorizeCallback) {
    +                LOG.debug("authorization callback");
    +                AuthorizeCallback ac = (AuthorizeCallback) c;
    +                String authid = ac.getAuthenticationID();
    +                String authzid = ac.getAuthorizationID();
    +                if (authid.equals(authzid)) {
    +                    ac.setAuthorized(true);
    +                } else {
    +                    ac.setAuthorized(false);
    +                }
    +                if (ac.isAuthorized()) {
    +                    ac.setAuthorizedID(authzid);
    +                }
    --- End diff --
    
    We can just `setAuthorizedID` above when we `setAuthorized`.
, Github user d2r commented on a diff in the pull request:

    https://github.com/apache/storm/pull/1173#discussion_r54650057
  
    --- Diff: storm-core/src/jvm/org/apache/storm/security/auth/plain/PlainClientCallbackHandler.java ---
    @@ -0,0 +1,80 @@
    +/**
    + * Licensed to the Apache Software Foundation (ASF) under one
    + * or more contributor license agreements.  See the NOTICE file
    + * distributed with this work for additional information
    + * regarding copyright ownership.  The ASF licenses this file
    + * to you under the Apache License, Version 2.0 (the
    + * "License"); you may not use this file except in compliance
    + * with the License.  You may obtain a copy of the License at
    + *
    + * http://www.apache.org/licenses/LICENSE-2.0
    + *
    + * Unless required by applicable law or agreed to in writing, software
    + * distributed under the License is distributed on an "AS IS" BASIS,
    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    + * See the License for the specific language governing permissions and
    + * limitations under the License.
    + */
    +package org.apache.storm.security.auth.plain;
    +
    +import java.io.IOException;
    +import javax.security.auth.callback.Callback;
    +import javax.security.auth.callback.CallbackHandler;
    +import javax.security.auth.callback.NameCallback;
    +import javax.security.auth.callback.PasswordCallback;
    +import javax.security.auth.callback.UnsupportedCallbackException;
    +import javax.security.sasl.AuthorizeCallback;
    +import javax.security.sasl.RealmCallback;
    +
    +
    +import org.slf4j.Logger;
    +import org.slf4j.LoggerFactory;
    +
    +/**
    + *  client side callback handler.
    + */
    +public class PlainClientCallbackHandler implements CallbackHandler {
    +    private static final String USERNAME = "username";
    +    private static final String PASSWORD = "password";
    +    private static final Logger LOG = LoggerFactory.getLogger(PlainClientCallbackHandler.class);
    +    private String _username = "username";
    +    private String _password = "password";
    +
    +    /**
    +     * This method is invoked by SASL for authentication challenges
    +     * @param callbacks a collection of challenge callbacks 
    +     */
    +    public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException {
    +        for (Callback c : callbacks) {
    +            if (c instanceof NameCallback) {
    +                LOG.debug("name callback");
    +                NameCallback nc = (NameCallback) c;
    +                nc.setName(_username);
    +            } else if (c instanceof PasswordCallback) {
    +                LOG.debug("password callback");
    +                PasswordCallback pc = (PasswordCallback)c;
    +                if (_password != null) {
    +                    pc.setPassword(_password.toCharArray());
    +                } 
    +            } else if (c instanceof AuthorizeCallback) {
    +                LOG.debug("authorization callback");
    +                AuthorizeCallback ac = (AuthorizeCallback) c;
    +                String authid = ac.getAuthenticationID();
    +                String authzid = ac.getAuthorizationID();
    +                if (authid.equals(authzid)) {
    +                    ac.setAuthorized(true);
    +                } else {
    +                    ac.setAuthorized(false);
    +                }
    +                if (ac.isAuthorized()) {
    +                    ac.setAuthorizedID(authzid);
    +                }
    +            } else if (c instanceof RealmCallback) {
    --- End diff --
    
    Minor: there is no LOG.debug here as with the other callbacks. Is that intentional?
, Github user d2r commented on a diff in the pull request:

    https://github.com/apache/storm/pull/1173#discussion_r54650134
  
    --- Diff: storm-core/src/jvm/org/apache/storm/security/auth/plain/PlainClientCallbackHandler.java ---
    @@ -0,0 +1,80 @@
    +/**
    + * Licensed to the Apache Software Foundation (ASF) under one
    + * or more contributor license agreements.  See the NOTICE file
    + * distributed with this work for additional information
    + * regarding copyright ownership.  The ASF licenses this file
    + * to you under the Apache License, Version 2.0 (the
    + * "License"); you may not use this file except in compliance
    + * with the License.  You may obtain a copy of the License at
    + *
    + * http://www.apache.org/licenses/LICENSE-2.0
    + *
    + * Unless required by applicable law or agreed to in writing, software
    + * distributed under the License is distributed on an "AS IS" BASIS,
    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    + * See the License for the specific language governing permissions and
    + * limitations under the License.
    + */
    +package org.apache.storm.security.auth.plain;
    +
    +import java.io.IOException;
    +import javax.security.auth.callback.Callback;
    +import javax.security.auth.callback.CallbackHandler;
    +import javax.security.auth.callback.NameCallback;
    +import javax.security.auth.callback.PasswordCallback;
    +import javax.security.auth.callback.UnsupportedCallbackException;
    +import javax.security.sasl.AuthorizeCallback;
    +import javax.security.sasl.RealmCallback;
    +
    +
    +import org.slf4j.Logger;
    +import org.slf4j.LoggerFactory;
    +
    +/**
    + *  client side callback handler.
    + */
    +public class PlainClientCallbackHandler implements CallbackHandler {
    +    private static final String USERNAME = "username";
    +    private static final String PASSWORD = "password";
    +    private static final Logger LOG = LoggerFactory.getLogger(PlainClientCallbackHandler.class);
    +    private String _username = "username";
    +    private String _password = "password";
    +
    +    /**
    +     * This method is invoked by SASL for authentication challenges
    +     * @param callbacks a collection of challenge callbacks 
    +     */
    +    public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException {
    +        for (Callback c : callbacks) {
    +            if (c instanceof NameCallback) {
    +                LOG.debug("name callback");
    +                NameCallback nc = (NameCallback) c;
    +                nc.setName(_username);
    +            } else if (c instanceof PasswordCallback) {
    +                LOG.debug("password callback");
    +                PasswordCallback pc = (PasswordCallback)c;
    +                if (_password != null) {
    +                    pc.setPassword(_password.toCharArray());
    +                } 
    +            } else if (c instanceof AuthorizeCallback) {
    +                LOG.debug("authorization callback");
    +                AuthorizeCallback ac = (AuthorizeCallback) c;
    +                String authid = ac.getAuthenticationID();
    +                String authzid = ac.getAuthorizationID();
    +                if (authid.equals(authzid)) {
    +                    ac.setAuthorized(true);
    +                } else {
    +                    ac.setAuthorized(false);
    +                }
    +                if (ac.isAuthorized()) {
    +                    ac.setAuthorizedID(authzid);
    +                }
    +            } else if (c instanceof RealmCallback) {
    +                RealmCallback rc = (RealmCallback) c;
    +                ((RealmCallback) c).setText(rc.getDefaultText());
    --- End diff --
    
    Can we not reuse `rc` instead of casting twice?
, Github user d2r commented on a diff in the pull request:

    https://github.com/apache/storm/pull/1173#discussion_r54650921
  
    --- Diff: storm-core/src/jvm/org/apache/storm/security/auth/plain/PlainClientCallbackHandler.java ---
    @@ -0,0 +1,80 @@
    +/**
    + * Licensed to the Apache Software Foundation (ASF) under one
    + * or more contributor license agreements.  See the NOTICE file
    + * distributed with this work for additional information
    + * regarding copyright ownership.  The ASF licenses this file
    + * to you under the Apache License, Version 2.0 (the
    + * "License"); you may not use this file except in compliance
    + * with the License.  You may obtain a copy of the License at
    + *
    + * http://www.apache.org/licenses/LICENSE-2.0
    + *
    + * Unless required by applicable law or agreed to in writing, software
    + * distributed under the License is distributed on an "AS IS" BASIS,
    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    + * See the License for the specific language governing permissions and
    + * limitations under the License.
    + */
    +package org.apache.storm.security.auth.plain;
    +
    +import java.io.IOException;
    +import javax.security.auth.callback.Callback;
    +import javax.security.auth.callback.CallbackHandler;
    +import javax.security.auth.callback.NameCallback;
    +import javax.security.auth.callback.PasswordCallback;
    +import javax.security.auth.callback.UnsupportedCallbackException;
    +import javax.security.sasl.AuthorizeCallback;
    +import javax.security.sasl.RealmCallback;
    +
    +
    +import org.slf4j.Logger;
    +import org.slf4j.LoggerFactory;
    +
    +/**
    + *  client side callback handler.
    + */
    +public class PlainClientCallbackHandler implements CallbackHandler {
    +    private static final String USERNAME = "username";
    +    private static final String PASSWORD = "password";
    +    private static final Logger LOG = LoggerFactory.getLogger(PlainClientCallbackHandler.class);
    +    private String _username = "username";
    +    private String _password = "password";
    --- End diff --
    
    Let's get rid of the private members and just use the constants already defined above.
    
    We also want to reference these hard-coded user/pass in the other classes.
, Github user d2r commented on a diff in the pull request:

    https://github.com/apache/storm/pull/1173#discussion_r54651094
  
    --- Diff: storm-core/src/jvm/org/apache/storm/security/auth/plain/PlainSaslTransportPlugin.java ---
    @@ -0,0 +1,80 @@
    +/**
    + * Licensed to the Apache Software Foundation (ASF) under one
    + * or more contributor license agreements.  See the NOTICE file
    + * distributed with this work for additional information
    + * regarding copyright ownership.  The ASF licenses this file
    + * to you under the Apache License, Version 2.0 (the
    + * "License"); you may not use this file except in compliance
    + * with the License.  You may obtain a copy of the License at
    + *
    + * http://www.apache.org/licenses/LICENSE-2.0
    + *
    + * Unless required by applicable law or agreed to in writing, software
    + * distributed under the License is distributed on an "AS IS" BASIS,
    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    + * See the License for the specific language governing permissions and
    + * limitations under the License.
    + */
    +package org.apache.storm.security.auth.plain;
    +
    +import org.apache.storm.security.auth.AuthUtils;
    +import org.apache.storm.security.auth.SaslTransportPlugin;
    +import org.apache.storm.utils.ExtendedThreadPoolExecutor;
    +import org.apache.thrift.TProcessor;
    +import org.apache.thrift.protocol.TBinaryProtocol;
    +import org.apache.thrift.server.TServer;
    +import org.apache.thrift.server.TThreadPoolServer;
    +import org.apache.thrift.transport.TSaslClientTransport;
    +import org.apache.thrift.transport.TSaslServerTransport;
    +import org.apache.thrift.transport.TServerSocket;
    +import org.apache.thrift.transport.TTransport;
    +import org.apache.thrift.transport.TTransportException;
    +import org.apache.thrift.transport.TTransportFactory;
    +import org.slf4j.Logger;
    +import org.slf4j.LoggerFactory;
    +
    +import javax.security.auth.callback.CallbackHandler;
    +import java.io.IOException;
    +import java.security.Security;
    +import java.util.concurrent.ArrayBlockingQueue;
    +import java.util.concurrent.BlockingQueue;
    +import java.util.concurrent.SynchronousQueue;
    +import java.util.concurrent.ThreadPoolExecutor;
    +import java.util.concurrent.TimeUnit;
    +
    +public class PlainSaslTransportPlugin extends SaslTransportPlugin {
    +    public static final String PLAIN = "PLAIN";
    +    private static final Logger LOG = LoggerFactory.getLogger(PlainSaslTransportPlugin.class);
    +
    +    @Override
    +    protected TTransportFactory getServerTransportFactory() throws IOException {
    +        //create an authentication callback handler
    +        CallbackHandler serer_callback_handler = new PlainServerCallbackHandler();
    +        Security.addProvider(new SaslPlainServer.SecurityProvider());
    +        //create a transport factory that will invoke our auth callback for digest
    +        TSaslServerTransport.Factory factory = new TSaslServerTransport.Factory();
    +        factory.addServerDefinition(PLAIN, AuthUtils.SERVICE, "localhost", null, serer_callback_handler);
    +
    +        LOG.info("SASL PLAIN transport factory will be used");
    +        return factory;
    +    }
    +
    +    @Override
    +    public TTransport connect(TTransport transport, String serverHost, String asUser) throws IOException, TTransportException {
    +        PlainClientCallbackHandler client_callback_handler = new PlainClientCallbackHandler();
    +        TSaslClientTransport wrapper_transport = new TSaslClientTransport(PLAIN,
    +            null,
    +            AuthUtils.SERVICE,
    +            serverHost,
    +            null,
    +            client_callback_handler,
    +            transport);
    +
    +        wrapper_transport.open();
    +        LOG.debug("SASL PLAIN client transport has been established");
    +
    +        return wrapper_transport;
    +
    +    }
    +
    --- End diff --
    
    nit: blank lines
, Github user d2r commented on a diff in the pull request:

    https://github.com/apache/storm/pull/1173#discussion_r54651160
  
    --- Diff: storm-core/src/jvm/org/apache/storm/security/auth/plain/PlainServerCallbackHandler.java ---
    @@ -0,0 +1,108 @@
    +/**
    + * Licensed to the Apache Software Foundation (ASF) under one
    + * or more contributor license agreements.  See the NOTICE file
    + * distributed with this work for additional information
    + * regarding copyright ownership.  The ASF licenses this file
    + * to you under the Apache License, Version 2.0 (the
    + * "License"); you may not use this file except in compliance
    + * with the License.  You may obtain a copy of the License at
    + *
    + * http://www.apache.org/licenses/LICENSE-2.0
    + *
    + * Unless required by applicable law or agreed to in writing, software
    + * distributed under the License is distributed on an "AS IS" BASIS,
    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    + * See the License for the specific language governing permissions and
    + * limitations under the License.
    + */
    +package org.apache.storm.security.auth.plain;
    +
    +import java.io.IOException;
    +import java.util.HashMap;
    +import java.util.Map;
    +
    +import org.apache.storm.security.auth.ReqContext;
    +import org.apache.storm.security.auth.SaslTransportPlugin;
    +import org.slf4j.Logger;
    +import org.slf4j.LoggerFactory;
    +
    +import javax.security.auth.callback.Callback;
    +import javax.security.auth.callback.CallbackHandler;
    +import javax.security.auth.callback.NameCallback;
    +import javax.security.auth.callback.PasswordCallback;
    +import javax.security.auth.callback.UnsupportedCallbackException;
    +import javax.security.sasl.AuthorizeCallback;
    +import javax.security.sasl.RealmCallback;
    +
    +/**
    + * SASL server side callback handler
    + */
    +public class PlainServerCallbackHandler implements CallbackHandler {
    +    private static final Logger LOG = LoggerFactory.getLogger(PlainServerCallbackHandler.class);
    +    private static final String SYSPROP_SUPER_PASSWORD = "storm.SASLAuthenticationProvider.superPassword";
    --- End diff --
    
    Do we need a superuser password?  I thought this was all hard-coded to use constants?
, Github user d2r commented on a diff in the pull request:

    https://github.com/apache/storm/pull/1173#discussion_r54651204
  
    --- Diff: storm-core/src/jvm/org/apache/storm/security/auth/plain/PlainServerCallbackHandler.java ---
    @@ -0,0 +1,108 @@
    +/**
    + * Licensed to the Apache Software Foundation (ASF) under one
    + * or more contributor license agreements.  See the NOTICE file
    + * distributed with this work for additional information
    + * regarding copyright ownership.  The ASF licenses this file
    + * to you under the Apache License, Version 2.0 (the
    + * "License"); you may not use this file except in compliance
    + * with the License.  You may obtain a copy of the License at
    + *
    + * http://www.apache.org/licenses/LICENSE-2.0
    + *
    + * Unless required by applicable law or agreed to in writing, software
    + * distributed under the License is distributed on an "AS IS" BASIS,
    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    + * See the License for the specific language governing permissions and
    + * limitations under the License.
    + */
    +package org.apache.storm.security.auth.plain;
    +
    +import java.io.IOException;
    +import java.util.HashMap;
    +import java.util.Map;
    +
    +import org.apache.storm.security.auth.ReqContext;
    +import org.apache.storm.security.auth.SaslTransportPlugin;
    +import org.slf4j.Logger;
    +import org.slf4j.LoggerFactory;
    +
    +import javax.security.auth.callback.Callback;
    +import javax.security.auth.callback.CallbackHandler;
    +import javax.security.auth.callback.NameCallback;
    +import javax.security.auth.callback.PasswordCallback;
    +import javax.security.auth.callback.UnsupportedCallbackException;
    +import javax.security.sasl.AuthorizeCallback;
    +import javax.security.sasl.RealmCallback;
    +
    +/**
    + * SASL server side callback handler
    + */
    +public class PlainServerCallbackHandler implements CallbackHandler {
    +    private static final Logger LOG = LoggerFactory.getLogger(PlainServerCallbackHandler.class);
    +    private static final String SYSPROP_SUPER_PASSWORD = "storm.SASLAuthenticationProvider.superPassword";
    +
    +    private String userName="username";
    +    private final Map<String,String> credentials = new HashMap<>();
    +
    +    public PlainServerCallbackHandler() throws IOException {
    +        credentials.put("username", "password");
    +    }
    --- End diff --
    
    Here we probably want to reference constants.
, Github user d2r commented on a diff in the pull request:

    https://github.com/apache/storm/pull/1173#discussion_r54651338
  
    --- Diff: storm-core/src/jvm/org/apache/storm/security/auth/plain/PlainServerCallbackHandler.java ---
    @@ -0,0 +1,108 @@
    +/**
    + * Licensed to the Apache Software Foundation (ASF) under one
    + * or more contributor license agreements.  See the NOTICE file
    + * distributed with this work for additional information
    + * regarding copyright ownership.  The ASF licenses this file
    + * to you under the Apache License, Version 2.0 (the
    + * "License"); you may not use this file except in compliance
    + * with the License.  You may obtain a copy of the License at
    + *
    + * http://www.apache.org/licenses/LICENSE-2.0
    + *
    + * Unless required by applicable law or agreed to in writing, software
    + * distributed under the License is distributed on an "AS IS" BASIS,
    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    + * See the License for the specific language governing permissions and
    + * limitations under the License.
    + */
    +package org.apache.storm.security.auth.plain;
    +
    +import java.io.IOException;
    +import java.util.HashMap;
    +import java.util.Map;
    +
    +import org.apache.storm.security.auth.ReqContext;
    +import org.apache.storm.security.auth.SaslTransportPlugin;
    +import org.slf4j.Logger;
    +import org.slf4j.LoggerFactory;
    +
    +import javax.security.auth.callback.Callback;
    +import javax.security.auth.callback.CallbackHandler;
    +import javax.security.auth.callback.NameCallback;
    +import javax.security.auth.callback.PasswordCallback;
    +import javax.security.auth.callback.UnsupportedCallbackException;
    +import javax.security.sasl.AuthorizeCallback;
    +import javax.security.sasl.RealmCallback;
    +
    +/**
    + * SASL server side callback handler
    + */
    +public class PlainServerCallbackHandler implements CallbackHandler {
    +    private static final Logger LOG = LoggerFactory.getLogger(PlainServerCallbackHandler.class);
    +    private static final String SYSPROP_SUPER_PASSWORD = "storm.SASLAuthenticationProvider.superPassword";
    +
    +    private String userName="username";
    +    private final Map<String,String> credentials = new HashMap<>();
    +
    +    public PlainServerCallbackHandler() throws IOException {
    +        credentials.put("username", "password");
    +    }
    +
    +    public void handle(Callback[] callbacks) throws UnsupportedCallbackException {
    +        for (Callback callback : callbacks) {
    +            if (callback instanceof NameCallback) {
    +                handleNameCallback((NameCallback) callback);
    +            } else if (callback instanceof PasswordCallback) {
    +                handlePasswordCallback((PasswordCallback) callback);
    +            } else if (callback instanceof RealmCallback) {
    +                handleRealmCallback((RealmCallback) callback);
    +            } else if (callback instanceof AuthorizeCallback) {
    +                handleAuthorizeCallback((AuthorizeCallback) callback);
    +            }
    +        }
    +    }
    +
    +    private void handleNameCallback(NameCallback nc) {
    +        LOG.debug("handleNameCallback");
    +        userName = nc.getDefaultName();
    +        nc.setName(nc.getDefaultName());
    +    }
    +
    +    private void handlePasswordCallback(PasswordCallback pc) {
    +        LOG.debug("handlePasswordCallback");
    +        if ("super".equals(this.userName) && System.getProperty(SYSPROP_SUPER_PASSWORD) != null) {
    +            // superuser: use Java system property for password, if available.
    +            pc.setPassword(System.getProperty(SYSPROP_SUPER_PASSWORD).toCharArray());
    +        } else if (credentials.containsKey(userName) ) {
    +            pc.setPassword(credentials.get(userName).toCharArray());
    +        } else {
    +            LOG.warn("No password found for user: " + userName);
    +        }
    +    }
    --- End diff --
    
    Same question here.  Not sure we want the concept of a superuser.
, Github user d2r commented on a diff in the pull request:

    https://github.com/apache/storm/pull/1173#discussion_r54651434
  
    --- Diff: storm-core/src/jvm/org/apache/storm/security/auth/plain/PlainServerCallbackHandler.java ---
    @@ -0,0 +1,108 @@
    +/**
    + * Licensed to the Apache Software Foundation (ASF) under one
    + * or more contributor license agreements.  See the NOTICE file
    + * distributed with this work for additional information
    + * regarding copyright ownership.  The ASF licenses this file
    + * to you under the Apache License, Version 2.0 (the
    + * "License"); you may not use this file except in compliance
    + * with the License.  You may obtain a copy of the License at
    + *
    + * http://www.apache.org/licenses/LICENSE-2.0
    + *
    + * Unless required by applicable law or agreed to in writing, software
    + * distributed under the License is distributed on an "AS IS" BASIS,
    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    + * See the License for the specific language governing permissions and
    + * limitations under the License.
    + */
    +package org.apache.storm.security.auth.plain;
    +
    +import java.io.IOException;
    +import java.util.HashMap;
    +import java.util.Map;
    +
    +import org.apache.storm.security.auth.ReqContext;
    +import org.apache.storm.security.auth.SaslTransportPlugin;
    +import org.slf4j.Logger;
    +import org.slf4j.LoggerFactory;
    +
    +import javax.security.auth.callback.Callback;
    +import javax.security.auth.callback.CallbackHandler;
    +import javax.security.auth.callback.NameCallback;
    +import javax.security.auth.callback.PasswordCallback;
    +import javax.security.auth.callback.UnsupportedCallbackException;
    +import javax.security.sasl.AuthorizeCallback;
    +import javax.security.sasl.RealmCallback;
    +
    +/**
    + * SASL server side callback handler
    + */
    +public class PlainServerCallbackHandler implements CallbackHandler {
    +    private static final Logger LOG = LoggerFactory.getLogger(PlainServerCallbackHandler.class);
    +    private static final String SYSPROP_SUPER_PASSWORD = "storm.SASLAuthenticationProvider.superPassword";
    +
    +    private String userName="username";
    +    private final Map<String,String> credentials = new HashMap<>();
    +
    +    public PlainServerCallbackHandler() throws IOException {
    +        credentials.put("username", "password");
    +    }
    +
    +    public void handle(Callback[] callbacks) throws UnsupportedCallbackException {
    +        for (Callback callback : callbacks) {
    +            if (callback instanceof NameCallback) {
    +                handleNameCallback((NameCallback) callback);
    +            } else if (callback instanceof PasswordCallback) {
    +                handlePasswordCallback((PasswordCallback) callback);
    +            } else if (callback instanceof RealmCallback) {
    +                handleRealmCallback((RealmCallback) callback);
    +            } else if (callback instanceof AuthorizeCallback) {
    +                handleAuthorizeCallback((AuthorizeCallback) callback);
    +            }
    +        }
    +    }
    +
    +    private void handleNameCallback(NameCallback nc) {
    +        LOG.debug("handleNameCallback");
    +        userName = nc.getDefaultName();
    +        nc.setName(nc.getDefaultName());
    +    }
    +
    +    private void handlePasswordCallback(PasswordCallback pc) {
    +        LOG.debug("handlePasswordCallback");
    +        if ("super".equals(this.userName) && System.getProperty(SYSPROP_SUPER_PASSWORD) != null) {
    +            // superuser: use Java system property for password, if available.
    +            pc.setPassword(System.getProperty(SYSPROP_SUPER_PASSWORD).toCharArray());
    +        } else if (credentials.containsKey(userName) ) {
    +            pc.setPassword(credentials.get(userName).toCharArray());
    +        } else {
    +            LOG.warn("No password found for user: " + userName);
    +        }
    +    }
    +
    +    private void handleRealmCallback(RealmCallback rc) {
    +        LOG.debug("handleRealmCallback: "+ rc.getDefaultText());
    +        rc.setText(rc.getDefaultText());
    +    }
    +
    +    private void handleAuthorizeCallback(AuthorizeCallback ac) {
    +        String authenticationID = ac.getAuthenticationID();
    +        LOG.info("Successfully authenticated client: authenticationID = " + authenticationID + " authorizationID = " + ac.getAuthorizationID());
    +
    +        //if authorizationId is not set, set it to authenticationId.
    +        if(ac.getAuthorizationID() == null) {
    +            ac.setAuthorizedID(authenticationID);
    +        }
    +
    +        //When authNid and authZid are not equal , authNId is attempting to impersonate authZid, We
    +        //add the authNid as the real user in reqContext's subject which will be used during authorization.
    +        if(!authenticationID.equals(ac.getAuthorizationID())) {
    +            LOG.info("Impersonation attempt  authenticationID = " + ac.getAuthenticationID() + " authorizationID = " + ac.getAuthorizationID());
    --- End diff --
    
    minor: use format strings `{}` like in other log statements.
, Github user d2r commented on a diff in the pull request:

    https://github.com/apache/storm/pull/1173#discussion_r54651499
  
    --- Diff: storm-core/src/jvm/org/apache/storm/security/auth/plain/SaslPlainServer.java ---
    @@ -0,0 +1,154 @@
    +/**
    + * Licensed to the Apache Software Foundation (ASF) under one
    + * or more contributor license agreements.  See the NOTICE file
    + * distributed with this work for additional information
    + * regarding copyright ownership.  The ASF licenses this file
    + * to you under the Apache License, Version 2.0 (the
    + * "License"); you may not use this file except in compliance
    + * with the License.  You may obtain a copy of the License at
    + *
    + *     http://www.apache.org/licenses/LICENSE-2.0
    + *
    + * Unless required by applicable law or agreed to in writing, software
    + * distributed under the License is distributed on an "AS IS" BASIS,
    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    + * See the License for the specific language governing permissions and
    + * limitations under the License.
    + */
    +
    +package org.apache.storm.security.auth.plain;
    +
    +import java.security.Provider;
    +import java.util.Map;
    +
    +import javax.security.auth.callback.*;
    --- End diff --
    
    I would be nice to expand all imports.
, Github user kishorvpatil commented on a diff in the pull request:

    https://github.com/apache/storm/pull/1173#discussion_r54651550
  
    --- Diff: conf/defaults.yaml ---
    @@ -39,7 +39,7 @@ storm.exhibitor.port: 8080
     storm.exhibitor.poll.uripath: "/exhibitor/v1/cluster/list"
     storm.cluster.mode: "distributed" # can be distributed or local
     storm.local.mode.zmq: false
    -storm.thrift.transport: "org.apache.storm.security.auth.SimpleTransportPlugin"
    +storm.thrift.transport: "org.apache.storm.security.auth.plain.PlainSaslTransportPlugin"
    --- End diff --
    
    Under `org.apache.storm.security.auth` package we have sub-package by mechanism e.g. `digest`, `kerberos`. Hence the package name `plain`
, Github user d2r commented on a diff in the pull request:

    https://github.com/apache/storm/pull/1173#discussion_r54651672
  
    --- Diff: storm-core/src/jvm/org/apache/storm/security/auth/plain/SaslPlainServer.java ---
    @@ -0,0 +1,154 @@
    +/**
    + * Licensed to the Apache Software Foundation (ASF) under one
    + * or more contributor license agreements.  See the NOTICE file
    + * distributed with this work for additional information
    + * regarding copyright ownership.  The ASF licenses this file
    + * to you under the Apache License, Version 2.0 (the
    + * "License"); you may not use this file except in compliance
    + * with the License.  You may obtain a copy of the License at
    + *
    + *     http://www.apache.org/licenses/LICENSE-2.0
    + *
    + * Unless required by applicable law or agreed to in writing, software
    + * distributed under the License is distributed on an "AS IS" BASIS,
    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    + * See the License for the specific language governing permissions and
    + * limitations under the License.
    + */
    +
    +package org.apache.storm.security.auth.plain;
    +
    +import java.security.Provider;
    +import java.util.Map;
    +
    +import javax.security.auth.callback.*;
    +import javax.security.sasl.AuthorizeCallback;
    +import javax.security.sasl.Sasl;
    +import javax.security.sasl.SaslException;
    +import javax.security.sasl.SaslServer;
    +import javax.security.sasl.SaslServerFactory;
    +
    +public class SaslPlainServer implements SaslServer {
    +  @SuppressWarnings("serial")
    +  public static class SecurityProvider extends Provider {
    +    public SecurityProvider() {
    +      super("SaslPlainServer", 1.0, "SASL PLAIN Authentication Server");
    +      put("SaslServerFactory.PLAIN",
    +          SaslPlainServerFactory.class.getName());
    --- End diff --
    
    Just `"SaslPlainServerFactory"` ?
, Github user d2r commented on the pull request:

    https://github.com/apache/storm/pull/1173#issuecomment-190954323
  
    @kishorvpatil Some of this looks like borrowed code that is not tailored specifically to storm. Is that the case?
, Github user kishorvpatil commented on the pull request:

    https://github.com/apache/storm/pull/1173#issuecomment-190969675
  
    @d2r That's right. The `SaslPlainServer` is implementation borrowed from [hadoop](https://github.com/apache/hadoop/blob/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/SaslPlainServer.java). And `CallBackHandler` implementations are mostly clones from digest package with minor changes.
, Github user kishorvpatil commented on the pull request:

    https://github.com/apache/storm/pull/1173#issuecomment-191083880
  
    @d2r i have tried to address all your comments, including refactoring two abstract classed `AbstractSaslClientCallbackHandler.java` and `AbstractSaslServerCallbackHandler.java` to place common methods for DIGEST and PLAIN in one place.
, Github user kishorvpatil closed the pull request at:

    https://github.com/apache/storm/pull/1173
, GitHub user kishorvpatil reopened a pull request:

    https://github.com/apache/storm/pull/1173

    [STORM-1469] Adding Plain Sasl Transport Plugin

    Since `org.apache.storm.security.auth.SimpleTransportPlugin` creates `TFramedTransport` with maxBufferSize, but that conflicts with serialized topology of size exceeded 16MB - default `THsHaServer` allowed max buffer size. So the better option is to implement `PlainSaslTransportPlugin` which avoids using any default values for max-buffer-size. 

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/kishorvpatil/incubator-storm storm1469

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/storm/pull/1173.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1173
    
----
commit b1e4c94269dbcf2ba01aee89e468c744887c53de
Author: Kishor Patil <kpatil@yahoo-inc.com>
Date:   2016-02-29T20:44:52Z

    Adding Plain Sasl Transport Plugin

commit cccb9766eb6b01477b44cd35e836997811464632
Author: Kishor Patil <kpatil@yahoo-inc.com>
Date:   2016-03-02T06:12:57Z

    Refactoring SaslServerCallbackHandler and SaslClientCallbackHandler

----
, Github user abhishekagarwal87 commented on a diff in the pull request:

    https://github.com/apache/storm/pull/1173#discussion_r54689200
  
    --- Diff: storm-core/src/jvm/org/apache/storm/security/auth/plain/PlainSaslTransportPlugin.java ---
    @@ -0,0 +1,69 @@
    +/**
    + * Licensed to the Apache Software Foundation (ASF) under one
    + * or more contributor license agreements.  See the NOTICE file
    + * distributed with this work for additional information
    + * regarding copyright ownership.  The ASF licenses this file
    + * to you under the Apache License, Version 2.0 (the
    + * "License"); you may not use this file except in compliance
    + * with the License.  You may obtain a copy of the License at
    + *
    + * http://www.apache.org/licenses/LICENSE-2.0
    + *
    + * Unless required by applicable law or agreed to in writing, software
    + * distributed under the License is distributed on an "AS IS" BASIS,
    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    + * See the License for the specific language governing permissions and
    + * limitations under the License.
    + */
    +package org.apache.storm.security.auth.plain;
    +
    +import org.apache.storm.security.auth.AuthUtils;
    +import org.apache.storm.security.auth.SaslTransportPlugin;
    +import org.apache.thrift.transport.TSaslClientTransport;
    +import org.apache.thrift.transport.TSaslServerTransport;
    +import org.apache.thrift.transport.TTransport;
    +import org.apache.thrift.transport.TTransportException;
    +import org.apache.thrift.transport.TTransportFactory;
    +import org.slf4j.Logger;
    +import org.slf4j.LoggerFactory;
    +
    +import javax.security.auth.callback.CallbackHandler;
    +import java.io.IOException;
    +import java.security.Security;
    +
    +public class PlainSaslTransportPlugin extends SaslTransportPlugin {
    +    public static final String PLAIN = "PLAIN";
    +    private static final Logger LOG = LoggerFactory.getLogger(PlainSaslTransportPlugin.class);
    +
    +    @Override
    +    protected TTransportFactory getServerTransportFactory() throws IOException {
    +        //create an authentication callback handler
    +        CallbackHandler server_callback_handler = new PlainServerCallbackHandler();
    --- End diff --
    
    minor: could use camelCase convention. 
, Github user revans2 commented on a diff in the pull request:

    https://github.com/apache/storm/pull/1173#discussion_r54727772
  
    --- Diff: conf/defaults.yaml ---
    @@ -39,7 +39,7 @@ storm.exhibitor.port: 8080
     storm.exhibitor.poll.uripath: "/exhibitor/v1/cluster/list"
     storm.cluster.mode: "distributed" # can be distributed or local
     storm.local.mode.zmq: false
    -storm.thrift.transport: "org.apache.storm.security.auth.SimpleTransportPlugin"
    +storm.thrift.transport: "org.apache.storm.security.auth.plain.PlainSaslTransportPlugin"
    --- End diff --
    
    This breaks wire compatibility, so it will not be a rolling upgrade.  I am OK with that, but I want to be sure that it is documented.
, Github user revans2 commented on a diff in the pull request:

    https://github.com/apache/storm/pull/1173#discussion_r54727990
  
    --- Diff: storm-core/src/jvm/org/apache/storm/security/auth/AbstractSaslClientCallbackHandler.java ---
    @@ -0,0 +1,76 @@
    +/**
    + * Licensed to the Apache Software Foundation (ASF) under one
    + * or more contributor license agreements.  See the NOTICE file
    + * distributed with this work for additional information
    + * regarding copyright ownership.  The ASF licenses this file
    + * to you under the Apache License, Version 2.0 (the
    + * "License"); you may not use this file except in compliance
    + * with the License.  You may obtain a copy of the License at
    + *
    + * http://www.apache.org/licenses/LICENSE-2.0
    + *
    + * Unless required by applicable law or agreed to in writing, software
    + * distributed under the License is distributed on an "AS IS" BASIS,
    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    + * See the License for the specific language governing permissions and
    + * limitations under the License.
    + */
    +package org.apache.storm.security.auth;
    +
    +import org.slf4j.Logger;
    +import org.slf4j.LoggerFactory;
    +
    +import javax.security.auth.callback.Callback;
    +import javax.security.auth.callback.CallbackHandler;
    +import javax.security.auth.callback.NameCallback;
    +import javax.security.auth.callback.PasswordCallback;
    +import javax.security.auth.callback.UnsupportedCallbackException;
    +import javax.security.sasl.AuthorizeCallback;
    +import javax.security.sasl.RealmCallback;
    +import java.io.IOException;
    +
    +public abstract class AbstractSaslClientCallbackHandler implements CallbackHandler {
    +    protected static final String USERNAME = "username";
    +    protected static final String PASSWORD = "password";
    +    private static final Logger LOG = LoggerFactory.getLogger(AbstractSaslClientCallbackHandler.class);
    +    protected String _username = null;
    +    protected String _password = null;
    +
    +    /**
    +     * This method is invoked by SASL for authentication challenges
    +     * @param callbacks a collection of challenge callbacks
    +     */
    +    public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException {
    +        for (Callback c : callbacks) {
    +            if (c instanceof NameCallback) {
    +                LOG.debug("name callback");
    +                NameCallback nc = (NameCallback) c;
    +                nc.setName(_username);
    --- End diff --
    
    So we are always going to set the name to null???
, Github user revans2 commented on a diff in the pull request:

    https://github.com/apache/storm/pull/1173#discussion_r54728287
  
    --- Diff: storm-core/src/jvm/org/apache/storm/security/auth/AbstractSaslServerCallbackHandler.java ---
    @@ -0,0 +1,77 @@
    +package org.apache.storm.security.auth;
    +
    +import org.slf4j.Logger;
    +import org.slf4j.LoggerFactory;
    +
    +import javax.security.auth.callback.Callback;
    +import javax.security.auth.callback.CallbackHandler;
    +import javax.security.auth.callback.NameCallback;
    +import javax.security.auth.callback.PasswordCallback;
    +import javax.security.auth.callback.UnsupportedCallbackException;
    +import javax.security.sasl.AuthorizeCallback;
    +import javax.security.sasl.RealmCallback;
    +import java.util.HashMap;
    +import java.util.Map;
    +
    +public abstract class AbstractSaslServerCallbackHandler implements CallbackHandler {
    +    private static final Logger LOG = LoggerFactory.getLogger(AbstractSaslServerCallbackHandler.class);
    +    protected final Map<String,String> credentials = new HashMap<>();
    +    protected String userName;
    +
    +    public void handle(Callback[] callbacks) throws UnsupportedCallbackException {
    +        for (Callback callback : callbacks) {
    +            if (callback instanceof NameCallback) {
    +                handleNameCallback((NameCallback) callback);
    +            } else if (callback instanceof PasswordCallback) {
    +                handlePasswordCallback((PasswordCallback) callback);
    +            } else if (callback instanceof RealmCallback) {
    +                handleRealmCallback((RealmCallback) callback);
    +            } else if (callback instanceof AuthorizeCallback) {
    +                handleAuthorizeCallback((AuthorizeCallback) callback);
    +            }
    +        }
    +    }
    +
    +    private void handleNameCallback(NameCallback nc) {
    +        LOG.debug("handleNameCallback");
    +        userName = nc.getDefaultName();
    +        nc.setName(nc.getDefaultName());
    +    }
    +
    +    protected void handlePasswordCallback(PasswordCallback pc) {
    +        LOG.debug("handlePasswordCallback");
    +        if (credentials.containsKey(userName) ) {
    +            pc.setPassword(credentials.get(userName).toCharArray());
    +        } else {
    +            LOG.warn("No password found for user: " + userName);
    +        }
    +    }
    +
    +    private void handleRealmCallback(RealmCallback rc) {
    +        LOG.debug("handleRealmCallback: "+ rc.getDefaultText());
    --- End diff --
    
    Lets use the "{}" syntax here.
, Github user revans2 commented on a diff in the pull request:

    https://github.com/apache/storm/pull/1173#discussion_r54728326
  
    --- Diff: storm-core/src/jvm/org/apache/storm/security/auth/AbstractSaslServerCallbackHandler.java ---
    @@ -0,0 +1,77 @@
    +package org.apache.storm.security.auth;
    +
    +import org.slf4j.Logger;
    +import org.slf4j.LoggerFactory;
    +
    +import javax.security.auth.callback.Callback;
    +import javax.security.auth.callback.CallbackHandler;
    +import javax.security.auth.callback.NameCallback;
    +import javax.security.auth.callback.PasswordCallback;
    +import javax.security.auth.callback.UnsupportedCallbackException;
    +import javax.security.sasl.AuthorizeCallback;
    +import javax.security.sasl.RealmCallback;
    +import java.util.HashMap;
    +import java.util.Map;
    +
    +public abstract class AbstractSaslServerCallbackHandler implements CallbackHandler {
    +    private static final Logger LOG = LoggerFactory.getLogger(AbstractSaslServerCallbackHandler.class);
    +    protected final Map<String,String> credentials = new HashMap<>();
    +    protected String userName;
    +
    +    public void handle(Callback[] callbacks) throws UnsupportedCallbackException {
    +        for (Callback callback : callbacks) {
    +            if (callback instanceof NameCallback) {
    +                handleNameCallback((NameCallback) callback);
    +            } else if (callback instanceof PasswordCallback) {
    +                handlePasswordCallback((PasswordCallback) callback);
    +            } else if (callback instanceof RealmCallback) {
    +                handleRealmCallback((RealmCallback) callback);
    +            } else if (callback instanceof AuthorizeCallback) {
    +                handleAuthorizeCallback((AuthorizeCallback) callback);
    +            }
    +        }
    +    }
    +
    +    private void handleNameCallback(NameCallback nc) {
    +        LOG.debug("handleNameCallback");
    +        userName = nc.getDefaultName();
    +        nc.setName(nc.getDefaultName());
    +    }
    +
    +    protected void handlePasswordCallback(PasswordCallback pc) {
    +        LOG.debug("handlePasswordCallback");
    +        if (credentials.containsKey(userName) ) {
    +            pc.setPassword(credentials.get(userName).toCharArray());
    +        } else {
    +            LOG.warn("No password found for user: " + userName);
    --- End diff --
    
    "{}" syntax
, Github user revans2 commented on a diff in the pull request:

    https://github.com/apache/storm/pull/1173#discussion_r54728782
  
    --- Diff: storm-core/src/jvm/org/apache/storm/security/auth/plain/PlainSaslTransportPlugin.java ---
    @@ -0,0 +1,69 @@
    +/**
    + * Licensed to the Apache Software Foundation (ASF) under one
    + * or more contributor license agreements.  See the NOTICE file
    + * distributed with this work for additional information
    + * regarding copyright ownership.  The ASF licenses this file
    + * to you under the Apache License, Version 2.0 (the
    + * "License"); you may not use this file except in compliance
    + * with the License.  You may obtain a copy of the License at
    + *
    + * http://www.apache.org/licenses/LICENSE-2.0
    + *
    + * Unless required by applicable law or agreed to in writing, software
    + * distributed under the License is distributed on an "AS IS" BASIS,
    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    + * See the License for the specific language governing permissions and
    + * limitations under the License.
    + */
    +package org.apache.storm.security.auth.plain;
    +
    +import org.apache.storm.security.auth.AuthUtils;
    +import org.apache.storm.security.auth.SaslTransportPlugin;
    +import org.apache.thrift.transport.TSaslClientTransport;
    +import org.apache.thrift.transport.TSaslServerTransport;
    +import org.apache.thrift.transport.TTransport;
    +import org.apache.thrift.transport.TTransportException;
    +import org.apache.thrift.transport.TTransportFactory;
    +import org.slf4j.Logger;
    +import org.slf4j.LoggerFactory;
    +
    +import javax.security.auth.callback.CallbackHandler;
    +import java.io.IOException;
    +import java.security.Security;
    +
    +public class PlainSaslTransportPlugin extends SaslTransportPlugin {
    +    public static final String PLAIN = "PLAIN";
    +    private static final Logger LOG = LoggerFactory.getLogger(PlainSaslTransportPlugin.class);
    +
    +    @Override
    +    protected TTransportFactory getServerTransportFactory() throws IOException {
    +        //create an authentication callback handler
    +        CallbackHandler server_callback_handler = new PlainServerCallbackHandler();
    +        Security.addProvider(new SaslPlainServer.SecurityProvider());
    --- End diff --
    
    What happens if we add this multiple times?
, Github user revans2 commented on a diff in the pull request:

    https://github.com/apache/storm/pull/1173#discussion_r54728926
  
    --- Diff: storm-core/src/jvm/org/apache/storm/security/auth/plain/SaslPlainServer.java ---
    @@ -0,0 +1,154 @@
    +/**
    + * Licensed to the Apache Software Foundation (ASF) under one
    + * or more contributor license agreements.  See the NOTICE file
    + * distributed with this work for additional information
    + * regarding copyright ownership.  The ASF licenses this file
    + * to you under the Apache License, Version 2.0 (the
    + * "License"); you may not use this file except in compliance
    + * with the License.  You may obtain a copy of the License at
    + *
    + *     http://www.apache.org/licenses/LICENSE-2.0
    + *
    + * Unless required by applicable law or agreed to in writing, software
    + * distributed under the License is distributed on an "AS IS" BASIS,
    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    + * See the License for the specific language governing permissions and
    + * limitations under the License.
    + */
    +
    +package org.apache.storm.security.auth.plain;
    +
    +import java.security.Provider;
    +import java.util.Map;
    +
    +import javax.security.auth.callback.*;
    +import javax.security.sasl.AuthorizeCallback;
    +import javax.security.sasl.Sasl;
    +import javax.security.sasl.SaslException;
    +import javax.security.sasl.SaslServer;
    +import javax.security.sasl.SaslServerFactory;
    +
    +public class SaslPlainServer implements SaslServer {
    +  @SuppressWarnings("serial")
    +  public static class SecurityProvider extends Provider {
    +    public SecurityProvider() {
    +      super("SaslPlainServer", 1.0, "SASL PLAIN Authentication Server");
    +      put("SaslServerFactory.PLAIN",
    +          SaslPlainServerFactory.class.getName());
    --- End diff --
    
    This ensures that if the package changes or something else like it changes we get a compile error, not a runtime error.
, Github user revans2 commented on the pull request:

    https://github.com/apache/storm/pull/1173#issuecomment-191261944
  
    Overall it looks fairly good, but you have a problem with RAT somewhere.
, Github user revans2 commented on a diff in the pull request:

    https://github.com/apache/storm/pull/1173#discussion_r54730042
  
    --- Diff: storm-core/src/jvm/org/apache/storm/security/auth/AbstractSaslServerCallbackHandler.java ---
    @@ -0,0 +1,77 @@
    +package org.apache.storm.security.auth;
    --- End diff --
    
    Needs an Apache header.
, Github user revans2 commented on a diff in the pull request:

    https://github.com/apache/storm/pull/1173#discussion_r54736725
  
    --- Diff: storm-core/src/jvm/org/apache/storm/security/auth/plain/PlainClientCallbackHandler.java ---
    @@ -0,0 +1,31 @@
    +/**
    + * Licensed to the Apache Software Foundation (ASF) under one
    + * or more contributor license agreements.  See the NOTICE file
    + * distributed with this work for additional information
    + * regarding copyright ownership.  The ASF licenses this file
    + * to you under the Apache License, Version 2.0 (the
    + * "License"); you may not use this file except in compliance
    + * with the License.  You may obtain a copy of the License at
    + *
    + * http://www.apache.org/licenses/LICENSE-2.0
    + *
    + * Unless required by applicable law or agreed to in writing, software
    + * distributed under the License is distributed on an "AS IS" BASIS,
    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    + * See the License for the specific language governing permissions and
    + * limitations under the License.
    + */
    +package org.apache.storm.security.auth.plain;
    +
    +import org.apache.storm.security.auth.AbstractSaslClientCallbackHandler;
    +
    +public class PlainClientCallbackHandler extends AbstractSaslClientCallbackHandler {
    +
    +    /*
    +     * For plain, using constants for a pair of user name and password.
    +     */
    +    public PlainClientCallbackHandler() {
    +        _username = USERNAME;
    --- End diff --
    
    I forgot to ask before is the user this always reports to nimbus/etc now "username"?  If so I really would prefer to pass in the user name of the current user on this system, or even better have the server set the user to null like we were doing before.
, Github user kishorvpatil commented on a diff in the pull request:

    https://github.com/apache/storm/pull/1173#discussion_r54740640
  
    --- Diff: storm-core/src/jvm/org/apache/storm/security/auth/plain/PlainSaslTransportPlugin.java ---
    @@ -0,0 +1,69 @@
    +/**
    + * Licensed to the Apache Software Foundation (ASF) under one
    + * or more contributor license agreements.  See the NOTICE file
    + * distributed with this work for additional information
    + * regarding copyright ownership.  The ASF licenses this file
    + * to you under the Apache License, Version 2.0 (the
    + * "License"); you may not use this file except in compliance
    + * with the License.  You may obtain a copy of the License at
    + *
    + * http://www.apache.org/licenses/LICENSE-2.0
    + *
    + * Unless required by applicable law or agreed to in writing, software
    + * distributed under the License is distributed on an "AS IS" BASIS,
    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    + * See the License for the specific language governing permissions and
    + * limitations under the License.
    + */
    +package org.apache.storm.security.auth.plain;
    +
    +import org.apache.storm.security.auth.AuthUtils;
    +import org.apache.storm.security.auth.SaslTransportPlugin;
    +import org.apache.thrift.transport.TSaslClientTransport;
    +import org.apache.thrift.transport.TSaslServerTransport;
    +import org.apache.thrift.transport.TTransport;
    +import org.apache.thrift.transport.TTransportException;
    +import org.apache.thrift.transport.TTransportFactory;
    +import org.slf4j.Logger;
    +import org.slf4j.LoggerFactory;
    +
    +import javax.security.auth.callback.CallbackHandler;
    +import java.io.IOException;
    +import java.security.Security;
    +
    +public class PlainSaslTransportPlugin extends SaslTransportPlugin {
    +    public static final String PLAIN = "PLAIN";
    +    private static final Logger LOG = LoggerFactory.getLogger(PlainSaslTransportPlugin.class);
    +
    +    @Override
    +    protected TTransportFactory getServerTransportFactory() throws IOException {
    +        //create an authentication callback handler
    +        CallbackHandler server_callback_handler = new PlainServerCallbackHandler();
    +        Security.addProvider(new SaslPlainServer.SecurityProvider());
    --- End diff --
    
    I will add it to constructor with additional check on if provider is already registered.
, Github user kishorvpatil commented on a diff in the pull request:

    https://github.com/apache/storm/pull/1173#discussion_r54749129
  
    --- Diff: conf/defaults.yaml ---
    @@ -39,7 +39,7 @@ storm.exhibitor.port: 8080
     storm.exhibitor.poll.uripath: "/exhibitor/v1/cluster/list"
     storm.cluster.mode: "distributed" # can be distributed or local
     storm.local.mode.zmq: false
    -storm.thrift.transport: "org.apache.storm.security.auth.SimpleTransportPlugin"
    +storm.thrift.transport: "org.apache.storm.security.auth.plain.PlainSaslTransportPlugin"
    --- End diff --
    
    Since there is not good place to document this. I am simply going without any chances to default on "storm.thrift.tranport" so we can pull this in 1.x-branch as well. I will create two separate pull requests - 
    1. to change default and deprecate  `SimpleTransportPlugin`  and configuration on 1.x-branch.
    2. To remove `SimpleTransportPlugin` and configuration in master.
, Github user kishorvpatil commented on a diff in the pull request:

    https://github.com/apache/storm/pull/1173#discussion_r54769352
  
    --- Diff: storm-core/src/jvm/org/apache/storm/security/auth/AbstractSaslServerCallbackHandler.java ---
    @@ -0,0 +1,77 @@
    +package org.apache.storm.security.auth;
    --- End diff --
    
    added
, Github user kishorvpatil commented on a diff in the pull request:

    https://github.com/apache/storm/pull/1173#discussion_r54772909
  
    --- Diff: storm-core/src/jvm/org/apache/storm/security/auth/plain/PlainClientCallbackHandler.java ---
    @@ -0,0 +1,31 @@
    +/**
    + * Licensed to the Apache Software Foundation (ASF) under one
    + * or more contributor license agreements.  See the NOTICE file
    + * distributed with this work for additional information
    + * regarding copyright ownership.  The ASF licenses this file
    + * to you under the Apache License, Version 2.0 (the
    + * "License"); you may not use this file except in compliance
    + * with the License.  You may obtain a copy of the License at
    + *
    + * http://www.apache.org/licenses/LICENSE-2.0
    + *
    + * Unless required by applicable law or agreed to in writing, software
    + * distributed under the License is distributed on an "AS IS" BASIS,
    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    + * See the License for the specific language governing permissions and
    + * limitations under the License.
    + */
    +package org.apache.storm.security.auth.plain;
    +
    +import org.apache.storm.security.auth.AbstractSaslClientCallbackHandler;
    +
    +public class PlainClientCallbackHandler extends AbstractSaslClientCallbackHandler {
    +
    +    /*
    +     * For plain, using constants for a pair of user name and password.
    +     */
    +    public PlainClientCallbackHandler() {
    +        _username = USERNAME;
    --- End diff --
    
    Fixed by using System.getProperty("user.name").
, Github user revans2 commented on the pull request:

    https://github.com/apache/storm/pull/1173#issuecomment-191407577
  
    Looks good to me.  The test failures look unrelated to this.  +1
, Github user d2r commented on the pull request:

    https://github.com/apache/storm/pull/1173#issuecomment-191419837
  
    Seems good to me. +1
, GitHub user kishorvpatil opened a pull request:

    https://github.com/apache/storm/pull/1178

    [STORM-1469] Remove SimpleTransportPlugin and configuration

    This pull request awaits merging in #1173 

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/kishorvpatil/incubator-storm storm1469-removeSimple

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/storm/pull/1178.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1178
    
----
commit b1e4c94269dbcf2ba01aee89e468c744887c53de
Author: Kishor Patil <kpatil@yahoo-inc.com>
Date:   2016-02-29T20:44:52Z

    Adding Plain Sasl Transport Plugin

commit cccb9766eb6b01477b44cd35e836997811464632
Author: Kishor Patil <kpatil@yahoo-inc.com>
Date:   2016-03-02T06:12:57Z

    Refactoring SaslServerCallbackHandler and SaslClientCallbackHandler

commit 4e04ce8dcdc33d488a3d15f7a47ab8af15136db4
Author: Kishor Patil <kpatil@yahoo-inc.com>
Date:   2016-03-02T16:27:56Z

    Addressing review comments

commit 5e2d44df8c342d29d723ac4ac90d0e1efb6884bb
Author: Kishor Patil <kpatil@yahoo-inc.com>
Date:   2016-03-02T18:32:00Z

    Using real user-id in the ReqContext instead of username in PlainSaslTransportPlugin

commit 1dbdfb1769979a8391348b5275bfd4bd2a4edf18
Author: Kishor Patil <kpatil@yahoo-inc.com>
Date:   2016-03-02T18:48:48Z

    Renaming local variable to camelCase

commit b133d52043a5f97c019d796a27ded81523120428
Author: Kishor Patil <kpatil@yahoo-inc.com>
Date:   2016-03-03T04:46:48Z

    Remove SimpleTransportPlugin and configurations

----
, GitHub user kishorvpatil opened a pull request:

    https://github.com/apache/storm/pull/1179

    [STORM-1469] Decommissioning SimpleTransportPlugin and configuration

    This pull request awaits merging in #1173 merged into 1.x-branch as well.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/kishorvpatil/incubator-storm storm1469-simpledecom

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/storm/pull/1179.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1179
    
----
commit 59b29b218357aaf39ae70e829ad5ff20e0732431
Author: Kishor Patil <kpatil@yahoo-inc.com>
Date:   2016-03-03T05:36:32Z

    Decommissioning SimpleTransportPlugin

----
, Github user kishorvpatil commented on the pull request:

    https://github.com/apache/storm/pull/1173#issuecomment-191596685
  
    Created two pull requests as follow-up
    
    #1178  Remove SimpleTransportPlugin and configuration and 
    #1179 Decommissioning SimpleTransportPlugin and configuration ( on 1.x-branch.)
, Github user revans2 commented on the pull request:

    https://github.com/apache/storm/pull/1179#issuecomment-191949144
  
    +1 not sure why travis failed.  Didn't even try to build in most cases.
, Github user revans2 commented on the pull request:

    https://github.com/apache/storm/pull/1178#issuecomment-191949380
  
    Please rebase
, Github user kishorvpatil closed the pull request at:

    https://github.com/apache/storm/pull/1179
, GitHub user kishorvpatil reopened a pull request:

    https://github.com/apache/storm/pull/1179

    [STORM-1469] Decommissioning SimpleTransportPlugin and configuration

    This pull request awaits merging in #1173 merged into 1.x-branch as well.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/kishorvpatil/incubator-storm storm1469-simpledecom

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/storm/pull/1179.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1179
    
----
commit 59b29b218357aaf39ae70e829ad5ff20e0732431
Author: Kishor Patil <kpatil@yahoo-inc.com>
Date:   2016-03-03T05:36:32Z

    Decommissioning SimpleTransportPlugin

----
, Github user asfgit closed the pull request at:

    https://github.com/apache/storm/pull/1173
, Thanks [~kishorvpatil],

I merged this into master and 1.x-branch., Reopning, as we need to merge https://github.com/apache/storm/pull/1178 and https://github.com/apache/storm/pull/1179, Github user ptgoetz commented on the pull request:

    https://github.com/apache/storm/pull/1179#issuecomment-193971785
  
    +1. The travis failures seem like a red herring. All tests passed in my environment.
, Github user d2r commented on the pull request:

    https://github.com/apache/storm/pull/1179#issuecomment-193972813
  
    +1
, Github user ptgoetz commented on the pull request:

    https://github.com/apache/storm/pull/1179#issuecomment-194497883
  
    Merged #1179 to 1.x-branch.
, Github user asfgit closed the pull request at:

    https://github.com/apache/storm/pull/1179
, Github user revans2 commented on the pull request:

    https://github.com/apache/storm/pull/1178#issuecomment-194507679
  
    +1
, Github user revans2 commented on the pull request:

    https://github.com/apache/storm/pull/1178#issuecomment-194507988
  
    oops I missed that org.apache.storm.security.auth.auth-test / testname: digest-authentication-test is failing thinking that it want plane.  
, Removing from 1.0 release epic since this has been fixed in the 1.x-branch., Github user abhishekagarwal87 commented on the pull request:

    https://github.com/apache/storm/pull/1178#issuecomment-205824333
  
    @kishorvpatil can you rebase it? Also, I see that default transport plugin in 1.x is still SimpleTransportPlugin even though it is deprecated. Is it intended? 
, Github user kishorvpatil commented on the pull request:

    https://github.com/apache/storm/pull/1178#issuecomment-205829598
  
    @abhishekagarwal87 I supposed we did not merge this PR in time. I think we should change default plugin to `PlainSaslTransportPlugin`. Let me upmerge this.
, Dear all,

I have encountered this issue, and I changed in all storm instances (nimbus, supervisor, manager) the thrift protocol PlainSaslTransportPlugin. I managed to launch a topology this time, but in my supervisor there is another issue. It cannot download the Jar:

2017-02-27 17:08:03.649 o.a.s.t.t.TSaslTransport [DEBUG] CLIENT: Writing message with status START and payload length 5
2017-02-27 17:08:03.649 o.a.s.t.t.TSaslTransport [DEBUG] CLIENT: Writing message with status COMPLETE and payload length 15
2017-02-27 17:08:03.649 o.a.s.t.t.TSaslTransport [DEBUG] CLIENT: Start message handled
2017-02-27 17:08:03.649 o.a.s.t.t.TSaslTransport [DEBUG] CLIENT: Main negotiation loop complete
2017-02-27 17:08:03.649 o.a.s.t.t.TSaslTransport [DEBUG] CLIENT: SASL Client receiving last message
2017-02-27 17:08:03.650 o.a.s.t.t.TSaslTransport [DEBUG] CLIENT: Received message with status COMPLETE and payload length 0
2017-02-27 17:08:03.650 o.a.s.s.a.p.PlainSaslTransportPlugin [DEBUG] SASL PLAIN client transport has been established
2017-02-27 17:08:03.759 o.a.s.t.t.TSaslTransport [DEBUG] writing data length: 90
2017-02-27 17:08:03.765 o.a.s.t.t.TSaslTransport [DEBUG] CLIENT: reading data length: 134
2017-02-27 17:08:03.766 o.a.s.u.Utils [ERROR] An exception happened while downloading /space/StormData/storm-data/supervisor/tmp/e1fb749e-7149-4786-9b5f-2466e6c6f7a2/stormjar.jar from blob store.
AuthorizationException(msg:[storm] does not have [READ ] access to [...........TopologyName........]-stormjar.jar)
        at org.apache.storm.generated.Nimbus$beginBlobDownload_result$beginBlobDownload_resultStandardScheme.read(Nimbus.java:25754)
        at org.apache.storm.generated.Nimbus$beginBlobDownload_result$beginBlobDownload_resultStandardScheme.read(Nimbus.java:25731)
        at org.apache.storm.generated.Nimbus$beginBlobDownload_result.read(Nimbus.java:25662)
        at org.apache.storm.thrift.TServiceClient.receiveBase(TServiceClient.java:86)
        at org.apache.storm.generated.Nimbus$Client.recv_beginBlobDownload(Nimbus.java:825)
        at org.apache.storm.generated.Nimbus$Client.beginBlobDownload(Nimbus.java:812)
        at org.apache.storm.blobstore.NimbusBlobStore.getBlob(NimbusBlobStore.java:357)
        at org.apache.storm.utils.Utils.downloadResourcesAsSupervisorAttempt(Utils.java:516)
        at org.apache.storm.utils.Utils.downloadResourcesAsSupervisor(Utils.java:497)
        at org.apache.storm.daemon.supervisor$fn__9317.invoke(supervisor.clj:948)
        at clojure.lang.MultiFn.invoke(MultiFn.java:243)
        at org.apache.storm.daemon.supervisor$mk_synchronize_supervisor$this__9078$fn__9096.invoke(supervisor.clj:582)
        at org.apache.storm.daemon.supervisor$mk_synchronize_supervisor$this__9078.invoke(supervisor.clj:581)
        at org.apache.storm.event$event_manager$fn__8630.invoke(event.clj:40)
        at clojure.lang.AFn.run(AFn.java:22)
        at java.lang.Thread.run(Thread.java:745)
2017-02-27 17:08:03.867 o.a.s.t.t.TSaslTransport [DEBUG] writing data length: 90
2017-02-27 17:08:03.872 o.a.s.t.t.TSaslTransport [DEBUG] CLIENT: reading data length: 134
, And I checked, there are still space left, and the storm user (which is storm), can write data in this tmp dir., In 1.0.1, using PlainSaslTransportPlugin will break supervisors with an ACL error. I suspect the uberjar couldn't be put in the blobstore.
The STORM-1661 fix this by putting permissive Acl in blobstore.
However, I do not consider this issue to be fixed until a proper merge has been done in official storm git repository. The minimum is that https://github.com/apache/storm/blob/master/conf/defaults.yaml contains this default plugin..
I can also add that by using default plugin Simple..., the value 16MB is hard-coded and cannot be changed. The properties nimbus and drpc for maxbuffer are read, but not in the class related to thrift transport., Is there a workaround for this issue that I could apply on my production environment now ?

I believe that I am being affected by this issue.
Running Storm 1.0.3 Redhat linux AWS with java.version=1.8.0_121 
The jar file being submitted has 47MB.

######exception at the Ninbus.log################# 

2017-03-29 22:13:16.349 pool-15-thread-32 o.a.s.cluster [INFO] setup-path/blobstore/<TOPOLOGYNAME>-1-1490839996-stormjar.jar/stormnimbusprod1:6627-1 
2017-03-29 22:13:16.349 pool-15-thread-32-EventThread o.a.s.s.o.a.z.ClientCnxn [INFO] EventThread shut down 
2017-03-29 22:13:16.389 pool-15-thread-32 o.a.s.d.nimbus [WARN] Topology submission exception. (topology name='<TOPOLOGYNAME>') #error { 
 :cause No such file or directory 
 :via 
 [{:type java.lang.RuntimeException 
   :message java.io.IOException: No such file or directory 
   :at [org.apache.storm.blobstore.LocalFsBlobStore createBlob LocalFsBlobStore.java 117]} 
  {:type java.io.IOException 
   :message No such file or directory 
   :at [java.io.UnixFileSystem createFileExclusively UnixFileSystem.java -2]}] 
 :trace 
 [[java.io.UnixFileSystem createFileExclusively UnixFileSystem.java -2] 
  [java.io.File createNewFile File.java 1012] 
  [org.apache.storm.blobstore.LocalFsBlobStoreFile getOutputStream LocalFsBlobStoreFile.java 109] 
  [org.apache.storm.blobstore.BlobStore$BlobStoreFileOutputStream <init> BlobStore.java 316] 
  [org.apache.storm.blobstore.LocalFsBlobStore createBlob LocalFsBlobStore.java 111] 
  [org.apache.storm.blobstore.BlobStore createBlob BlobStore.java 217] 
  [sun.reflect.NativeMethodAccessorImpl invoke0 NativeMethodAccessorImpl.java -2] 
  [sun.reflect.NativeMethodAccessorImpl invoke NativeMethodAccessorImpl.java 62] 
  [sun.reflect.DelegatingMethodAccessorImpl invoke DelegatingMethodAccessorImpl.java 43] 
  [java.lang.reflect.Method invoke Method.java 498] 
  [clojure.lang.Reflector invokeMatchingMethod Reflector.java 93] 
  [clojure.lang.Reflector invokeInstanceMethod Reflector.java 28] 
  [org.apache.storm.daemon.nimbus$setup_storm_code invoke nimbus.clj 474] 
  [org.apache.storm.daemon.nimbus$fn__9109$exec_fn__1371__auto__$reify__9138 submitTopologyWithOpts nimbus.clj 1525] 
  [org.apache.storm.daemon.nimbus$fn__9109$exec_fn__1371__auto__$reify__9138 submitTopology nimbus.clj 1541] 
  [org.apache.storm.generated.Nimbus$Processor$submitTopology getResult Nimbus.java 2912] 
  [org.apache.storm.generated.Nimbus$Processor$submitTopology getResult Nimbus.java 2896] 
  [org.apache.storm.thrift.ProcessFunction process ProcessFunction.java 39] 
  [org.apache.storm.thrift.TBaseProcessor process TBaseProcessor.java 39] 
  [org.apache.storm.security.auth.SimpleTransportPlugin$SimpleWrapProcessor process SimpleTransportPlugin.java 162] 
  [org.apache.storm.thrift.server.AbstractNonblockingServer$FrameBuffer invoke AbstractNonblockingServer.java 518] 
  [org.apache.storm.thrift.server.Invocation run Invocation.java 18] 
  [java.util.concurrent.ThreadPoolExecutor runWorker ThreadPoolExecutor.java 1142] 
  [java.util.concurrent.ThreadPoolExecutor$Worker run ThreadPoolExecutor.java 617] 
  [java.lang.Thread run Thread.java 745]]} 
2017-03-29 22:13:16.389 pool-15-thread-32 o.a.s.t.s.AbstractNonblockingServer$FrameBuffer [ERROR] Unexpected throwable while invoking! 
java.lang.RuntimeException: java.io.IOException: No such file or directory 
at org.apache.storm.blobstore.LocalFsBlobStore.createBlob(LocalFsBlobStore.java:117) 
at org.apache.storm.blobstore.BlobStore.createBlob(BlobStore.java:217) 
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) 
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 
at java.lang.reflect.Method.invoke(Method.java:498) 
at clojure.lang.Reflector.invokeMatchingMethod(Reflector.java:93) 
at clojure.lang.Reflector.invokeInstanceMethod(Reflector.java:28) 
at org.apache.storm.daemon.nimbus$setup_storm_code.invoke(nimbus.clj:474) 
at org.apache.storm.daemon.nimbus$fn__9109$exec_fn__1371__auto__$reify__9138.submitTopologyWithOpts(nimbus.clj:1525) 
at org.apache.storm.daemon.nimbus$fn__9109$exec_fn__1371__auto__$reify__9138.submitTopology(nimbus.clj:1541) 
at org.apache.storm.generated.Nimbus$Processor$submitTopology.getResult(Nimbus.java:2912) 
at org.apache.storm.generated.Nimbus$Processor$submitTopology.getResult(Nimbus.java:2896) 
at org.apache.storm.thrift.ProcessFunction.process(ProcessFunction.java:39) 
at org.apache.storm.thrift.TBaseProcessor.process(TBaseProcessor.java:39) 
at org.apache.storm.security.auth.SimpleTransportPlugin$SimpleWrapProcessor.process(SimpleTransportPlugin.java:162) 
at org.apache.storm.thrift.server.AbstractNonblockingServer$FrameBuffer.invoke(AbstractNonblockingServer.java:518) 
at org.apache.storm.thrift.server.Invocation.run(Invocation.java:18) 
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) 
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) 
at java.lang.Thread.run(Thread.java:745) 
Caused by: java.io.IOException: No such file or directory 
at java.io.UnixFileSystem.createFileExclusively(Native Method) 
at java.io.File.createNewFile(File.java:1012) 
at org.apache.storm.blobstore.LocalFsBlobStoreFile.getOutputStream(LocalFsBlobStoreFile.java:109) 
at org.apache.storm.blobstore.BlobStore$BlobStoreFileOutputStream.<init>(BlobStore.java:316) 
at org.apache.storm.blobstore.LocalFsBlobStore.createBlob(LocalFsBlobStore.java:111) 
... 20 more 

#####exception when submitting the topology at the supervisor command line ( this exception does not show up on supervisor.log)  

012 [main] INFO  o.a.s.StormSubmitter - Generated ZooKeeper secret payload for MD5-digest: -9206962661854850720:-6919200339480855527 
1111 [main] INFO  o.a.s.s.a.AuthUtils - Got AutoCreds [] 
1158 [main] INFO  o.a.s.u.NimbusClient - Found leader nimbus : stormnimbusprod1:6627 
1167 [main] INFO  o.a.s.u.NimbusClient - Found leader nimbus : stormnimbusprod1:6627 
1172 [main] INFO  o.a.s.StormSubmitter - Uploading topology jar <JARNAME>.jar to assigned location: /opt/storm/storm-local/nimbus/inbox/stormjar-99668ef8-4136-468f-bc67-cbb5a8da9ae3.jar 
1679 [main] INFO  o.a.s.StormSubmitter - Successfully uploaded topology jar to assigned location: /opt/storm/storm-local/nimbus/inbox/stormjar-99668ef8-4136-468f-bc67-cbb5a8da9ae3.jar 
1684 [main] INFO  o.a.s.u.NimbusClient - Found leader nimbus : stormnimbusprod1:6627 
1685 [main] INFO  o.a.s.StormSubmitter - Submitting topology <TOPOLOGYNAME> in distributed mode with conf {"storm.zookeeper.topology.auth.scheme":"digest","storm.zookeeper.topology.auth.payload":"-9206962661854850720:-6919200339480855527","topology.workers":1,"topology.debug":false} 
Exception in thread "main" java.lang.RuntimeException: org.apache.storm.thrift.transport.TTransportException 
at org.apache.storm.StormSubmitter.submitTopologyAs(StormSubmitter.java:255) 
at org.apache.storm.StormSubmitter.submitTopology(StormSubmitter.java:310) 
at org.apache.storm.StormSubmitter.submitTopology(StormSubmitter.java:157) 
at <my package>.<TOPOLOGYNAME>.main(<TOPOLOGYNAME>.java:46) 
Caused by: org.apache.storm.thrift.transport.TTransportException 
at org.apache.storm.thrift.transport.TIOStreamTransport.read(TIOStreamTransport.java:132) 
at org.apache.storm.thrift.transport.TTransport.readAll(TTransport.java:86) 
at org.apache.storm.thrift.transport.TFramedTransport.readFrame(TFramedTransport.java:129) 
at org.apache.storm.thrift.transport.TFramedTransport.read(TFramedTransport.java:101) 
at org.apache.storm.thrift.transport.TTransport.readAll(TTransport.java:86) 
at org.apache.storm.thrift.protocol.TBinaryProtocol.readAll(TBinaryProtocol.java:429) 
at org.apache.storm.thrift.protocol.TBinaryProtocol.readI32(TBinaryProtocol.java:318) 
at org.apache.storm.thrift.protocol.TBinaryProtocol.readMessageBegin(TBinaryProtocol.java:219) 
at org.apache.storm.thrift.TServiceClient.receiveBase(TServiceClient.java:77) 
at org.apache.storm.generated.Nimbus$Client.recv_submitTopology(Nimbus.java:294) 
at org.apache.storm.generated.Nimbus$Client.submitTopology(Nimbus.java:278) 
at org.apache.storm.StormSubmitter.submitTopologyAs(StormSubmitter.java:243) 
... 3 more 

, I am not totally sure what is happening here, but it looks like you are getting an ACL permission issue when trying to download the blob.

{code}
2017-02-27 17:08:03.766 o.a.s.u.Utils [ERROR] An exception happened while downloading /space/StormData/storm-data/supervisor/tmp/e1fb749e-7149-4786-9b5f-2466e6c6f7a2/stormjar.jar from blob store.
AuthorizationException(msg:[storm] does not have [READ ] access to [...........TopologyName........]-stormjar.jar)
at org.apache.storm.generated.Nimbus$beginBlobDownload_result$beginBlobDownload_resultStandardScheme.read(Nimbus.java:25754)
at org.apache.storm.generated.Nimbus$beginBlobDownload_result$beginBlobDownload_resultStandardScheme.read(Nimbus.java:25731)
at org.apache.storm.generated.Nimbus$beginBlobDownload_result.read(Nimbus.java:25662)
at org.apache.storm.thrift.TServiceClient.receiveBase(TServiceClient.java:86)
at org.apache.storm.generated.Nimbus$Client.recv_beginBlobDownload(Nimbus.java:825)
at org.apache.storm.generated.Nimbus$Client.beginBlobDownload(Nimbus.java:812)
at org.apache.storm.blobstore.NimbusBlobStore.getBlob(NimbusBlobStore.java:357)
at org.apache.storm.utils.Utils.downloadResourcesAsSupervisorAttempt(Utils.java:516)
at org.apache.storm.utils.Utils.downloadResourcesAsSupervisor(Utils.java:497)
at org.apache.storm.daemon.supervisor$fn__9317.invoke(supervisor.clj:948)
at clojure.lang.MultiFn.invoke(MultiFn.java:243)
at org.apache.storm.daemon.supervisor$mk_synchronize_supervisor$this_9078$fn_9096.invoke(supervisor.clj:582)
at org.apache.storm.daemon.supervisor$mk_synchronize_supervisor$this__9078.invoke(supervisor.clj:581)
at org.apache.storm.event$event_manager$fn__8630.invoke(event.clj:40)
at clojure.lang.AFn.run(AFn.java:22)
at java.lang.Thread.run(Thread.java:745)
{code}

indicates that the supervisor was trying to download the topology and was rejected.  If you have security disabled then this should not be happening, please let me know.  If you have security turned on then it looks like the user you supervisor is running as does not have permission to read that blob.  If you have set {{"nimbus.supervisor.users"}} correctly the blob ACL handler should let the request through.  If that is not working you could also add that user as a nimbus admin user, but that is something you should do with caution, because it gives the supervisor much more power. , [~ipvp]

Your issue looks different from the other one.  Your exception is on submission.  The previous one was when the supervisor tried to download the jar.  looking at the code around the error.

https://github.com/apache/storm/blob/v1.0.3/storm-core/src/jvm/org/apache/storm/blobstore/LocalFsBlobStoreFile.java#L109

It looks like you don't have permission to create the blob store directories.  The line above the exception is trying to do a mkdirs.  But mkdirs does not throw an exception just returns a boolean, so it looks like the mkdirs failed and we ignored it, but when we went to create the file the exception was thrown saying that the directory does not exist.  You need to make sure that the nimbus user has permission to write to wherever {{setup-path}} is., Robert Joseph Evans
 
thanks for helping.

The entire setup-path(/opt/storm)  is already set to 777.
The owner is storm:storm.
supersivorctl is starting the service as storm:storm.

Are the blob store directories created under the setup-path by default?
OR
Are the blob store directories created on some temporary folder outside the setup-path? Should I give access to the storm storm somewhere else outside the setup-path ?

security was not turned on. 
, [~ipvp],

Actually I could be wrong.  Looking more closely at the stack trace the line numbers don't actually line up with stock 1.0.3.  I'm not sure what is happening on nimbus, because I cannot really tell where the error is coming from.  Specifically

{{org.apache.storm.blobstore.LocalFsBlobStore.createBlob(LocalFsBlobStore.java:117)}}

points to https://github.com/apache/storm/blob/v1.0.3/storm-core/src/jvm/org/apache/storm/blobstore/LocalFsBlobStoreFile.java#L117

which is an annotation and should never appear in a stack trace.


That being said did you replace {{/opt/storm}} with {{setup-path}} in the exception stack trace like you did with {{<TOPOLOGYNAME>}}?  If not it looks like you have a config that is literately set to {{setup-path}} and is causing issues.  Otherwise I really don't know what is happening.

Otherwise I really don't know what is happening.]