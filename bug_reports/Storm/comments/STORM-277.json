[Also the kafka having partitions number is same as number of parallelism of kafka-spout, still the same behavior., Amol,

from what I understand this issue is rather a problem in the Kafka spout of wurstmeister, not in Storm itself.  Hence I'd suggest for the moment to raise a bug report at wurstmeister's storm-kafka-0.8-plus project on GitHub: https://github.com/wurstmeister/storm-kafka-0.8-plus

I briefly checked the Issues page there, and I didn't see a ticket of yours yet.  Would you mind raising your bug report directly at wurstmeister's?, Also, make sure you are not running into the Kafka 0.8 "issue" where, when you don't provide a partition key in your Kafka message, the Kafka producer will "stick" to a given partition for a certain amount of time instead of the more intuitive behavior of picking a new partition at random for each new message.  So depending on your setup your Kafka producer may have decided to send its messages to only one of N partitions, and thus the Kafka spout may also not be able to benefit from parallelism > 1.

See the related [discussion on wurstmeister's kafka-spout repo|https://github.com/wurstmeister/storm-kafka-0.8-plus/commit/2f45866c8e011ac4804c940ff9e1d7c147591761#commitcomment-5861615] as well as the Kafka FAQ entry [Why is data not evenly distributed among partitions when a partitioning key is not specified?|https://cwiki.apache.org/confluence/display/KAFKA/FAQ#FAQ-Whyisdatanotevenlydistributedamongpartitionswhenapartitioningkeyisnotspecified?|], Thanks Michael,

I have reported this bug on wurstmeister's storm-kafka-0.8-plus project on GitHub.
Also I have checked my kafka producer setup it all aligned with number of partitions.

Regards,
Amol]