[[~longtimer] I agree that we should have an error if jar is not found.  When you run {code}storm jar{code} it sets the classpath to be more or less the same as 

{code}
`storm classpath`:$JAR
{code}

so if you specified your class name properly java should blow up with a class not found exception. The only way I can think of to make it run an older version of your code it to explicitly point it to an older version of the code, but I could be wrong. Also when we run a  worker process the jar used is associated with the topology-id.  We cache it, but only for workers that are a part o the exact same topology instance.  Do you have a reproducible use case that we can use to debug this?, A simple example to demonstrate the problem is the following:

Use a version of the ExclamationTopology class where the ExclamationBolt is extracted to its own class. Create one jar, Exclamation.jar, with both classes included. Create a second jar, Exclamation2.jar, with only the ExclamationTopology class included.

Run the first jar in storm and then kill it from the UI after a few minutes from the UI:

storm jar /home/jason/storm/application/Exclamation.jar com.server.analyzing.test.ExclamationTopology test

Next run the second jar in storm and then kill it from the UI after a few minutes from the UI:

storm jar /home/jason/storm/application/Exclamation2.jar com.server.analyzing.test.ExclamationTopology test

The second jar lacks the important ExclamationBolt class but runs in my installation on debian because it references some cached version of the class. No error is raised that I see. The storm installation is simply a download and extract of the tar.gz from the apache storm website.

This is not the only scenario, but a simple one to create. The more difficult scenario is when a class is updated with new functionality but an old version of the class runs instead of the updated version. I am running with the Oracle JDK., I think I have figured this out, but I am not totally sure.  Where do you have storm installed? and where have you placed your copies of Exclamation.jar and Exclamation2.jar?

both storm classpath and storm jar will add all jars in STORM_HOME and STORM_HOME/lib to the classpath.  For me when I downloaded your jars that meant that both Exclamation jars were at the head of the classpath.  When I moved them to a different directory everything worked as expected., I am not sure what STORM_HOME refers to. There is no environment variable that I see like that. Do you mean STORM_DIR as per the storm python script? In any case, I have storm in /usr/local/bin/apache-storm-0.9.2-incubating and it contains bin, lib, conf, README.markdown, etc.

The test files are in a subdirectory of my home directory /home/jason/storm/application and storm.local.dir from the storm.yaml file is set to be /home/jason/storm.

However, if I move my code out of /home/jason/storm/application to /tmp/application and launch pointing to the new location, the problem still remains and I am able to launch even though the class is not present. Even if I remove the jar containing the class completely from the node, the topology still runs with a cached version of the bolt class., Yes sorry STORM_HOME I saw referring to the location where storm is installed STORM_DIR.

Thanks for responding then what I found is not what you are seeing and I have not been able to reproduce the problem yet.  I will keep trying., I think that this is an issue of cache cleanup. However, if there is a possibility for mismatches due to merged classpaths, it would make sense to actively seek these out and issue a warning given the number of classes that storm will load on its own. I remember seeing an application sometime back that just populated a HashMap with the fully qualified class name as the key and the source directory of the jar as the value. When hashing found a duplicate, a warning was raised so that a person knew which two jars conflicted. Just a thought.]