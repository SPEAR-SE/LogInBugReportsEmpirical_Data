[[~hmclouro] I took another look at the STORM-2666 fix, and I think there is another case where that fix is incomplete.

STORM-2666 was supposed to ensure that once offset _n_ is committed in the OffsetManager, any offset _k_ < _n_ won't be emitted again. STORM-2666 adjusts the KafkaConsumer position when tuples are committed to prevent this. 

I missed that waitingToEmit might contain records that are behind the committed offset. We need to make sure that once offsets get committed, any records behind the committed offset are removed from waitingToEmit as well. I'd raise a new issue for this and fix it, but I'm wondering if you want to handle it in the PR for this as well, since it's likely going to involve some of the same code?, [~Srdo] I can take a look. If my patch does not address this we can then create a follow up JIRA., [~Srdo] it is unrelated with this ticket but I was looking into the code as part of the fix. 

Do you know what is the reasoning behind having totalTaskCount+1 in the following line of [code| https://github.com/apache/storm/blob/1.x-branch/external/storm-kafka-client/src/main/java/org/apache/storm/kafka/spout/RoundRobinManualPartitioner.java#L45]? Is it possible for totalTaskCount to be zero? Thanks., No, I don't know why it adds 1. It doesn't make sense for totalTaskCount to be 0 as far as I can tell. , [~hmclouro]: this ticket indicates the affected versions as 1.2.0 and 2.0.0, but the ticket that introduced the problem (STORM-2666) indicates that it is targeted for 1.1.2 as well (1.1.2 is in the Fix Versions field, and I see the commit in the 1.1.x-branch).  So I think this ticket (STORM-2844) should be backported to the 1.1.x-branch as well., [~erikdw] The 1.2.0 and 1.1.x branches have diverged quite a bit and it is difficult to backport every change. I think it that it is reasonable to expect that some fixes will be included only in minor versions, and therefore require a minor upgrade. I don't think it is in the plan to backport this change., Thanks [~hmclouro], merged both PRs., [~hmclouro]: I'm sympathetic to the problem in general, but I have a few responses:
# This seems like a really bad problem from the description.  Am I correct in interpreting that it means users on 1.1.x branches cannot use EARLIEST with Kafka?  If so then choosing to not backport this fix is effectively killing Storm 1.1.x for users of Kafka.
# The difficulty of backporting a fix is certainly a factor that should be considered, but also the impact of the fixes.  Specifically, the change that introduced this problem *was* backported, so I'm not entirely sure why the fix for that change wouldn't be backported too.  i.e., the original change that introduced the problem which STORM-2844 is fixing (STORM-2666) seemed like a "nice to have" from the description (prevent some duplicates from flowing through the topology), whereas this seems like a "must have" (crashing the worker).]