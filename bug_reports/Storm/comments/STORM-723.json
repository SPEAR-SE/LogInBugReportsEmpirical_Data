[[~dashengju] [~revans2]
I'd like to hear your opinion about RedisStateSetUpdater and RedisStateSetCountQuerier.
If it cannot be replaced with other logic, how about removing these classes?

If we have to support 'expires on value', it may be better to support only String type from Trident., Actually there's one workaround to accomplish same things.

1. Use Sorted Set instead of Set.
2. Use timestamp which represents "expire time" to score.
3. When all operations about key occur, call zrembyscore with current timestamp to remove expired, and call actual requests.

Maybe we should use Lua script from 3. to make it atomic, which seems to be more complicated.
So I think we need to confirm we should leave this functionality., [~kabhwan] 
I checked the code, it was a bug to use setex and set. And we have no test case on RedisStateSetUpdater and RedisStateSetCountQuerier.

so I agree with you to remove those two classes. 
, [~dashengju] 
Thanks!
Btw, I'd like to hear your first thought of being introduced 'expire'.
I did read Trident documents once, but I can't remember expiration is necessary.

Maybe we can't apply both various types and expiration., [~kabhwan]

I do not know what is the difference about 'expire on key' or 'expire on value'.

As Trident, sometimes we need expire. 
For example, we count a url's PV(page view) and UV(user view), we use Trident and RedisClusterState.
Since PV and UV is counted by day, the redis key is appended by date as subfix. for example: pv_20150325. So we want old days pv(pv_20150321) is expire., [~dashengju] 
There's one difference, with 'expire on key' key (string, hash, list, sorted set, and so on) itself will be expired which means all elements are expired, too.
In other word, we can't control each element's expiration on data types.
(When we use container data types, it'll make a difference.)

Btw, with your scenario, if you don't need to store user information it's better to use 'incr' and 'get' instead of using Set operation.
(Did you want this?)
We can add new CountUpdater / CountQuerier to accomplish this, or we can let user implement it. 

Actually only storm-redis supports expiration of state, and with expire feature we can't apply various data types cause users may not think storm-redis expires whole elements in key regardless of data types.

Wish to hear your thought., I think expiration of state is a important feature to storm-redis. Or else, we need other tools to delete old data(For example, in storm-jdbc).

As support more data types operation(updater/querier), whether we support expiration can according the specific data type. For example, 
STRING, LIST, SET, SORTED SET, we can support expiration, and expiration is a optional config;
But with HASH or HLL, we do not support expiration;

Wish to hear your thought., Other way, we can document expiration feature to 'applied to key, so if you store your datas into container data type, you lose all of elements in key'.
I'm not 100% sure that explanation makes us innocent, but it will work, and we can support both various data types and expiration feature at same time.

[~dashengju] [~revans2] How about this? Do you feel uncomfortable or inconvenience?, I don't have a strong opinion on this.  But I agree with you we don't want to release broken code especially not in the first release of it., Removing RedisStateSetUpdater / RedisStateSetCountQuerier is now in reviewing.
https://github.com/apache/storm/pull/482, Besides document expiration feature, shall we change Updater interface?

For example, 
public RedisStateUpdater(String redisKeyPrefix, TupleMapper tupleMapper, int expireIntervalSec);

we can change to :
public RedisStateUpdater(String redisKeyPrefix, TupleMapper tupleMapper);
public setKeyExpireInterval(int keyExpireIntervalSec);

we ask the user to set expire on key explicitly., Github user dashengju commented on the pull request:

    https://github.com/apache/storm/pull/482#issuecomment-86293223
  
    +1
, Great! It makes better clarification.

Btw, maybe we could make it method chaining.
{code}new RedisStateUpdater(...).withExpire(...){code}

How about this? I'm OK to add setter, too., I reviewed RedisStateUpdater and RedisStateQuerier, and wish to discuss below.

How about having 2 mappers which one is for converting tuple to key/value, and another one is for converting value from Redis to Storm Values?
Seems like key prefix is less powerful.
You can refer https://github.com/apache/storm/blob/master/external/storm-hbase/src/main/java/org/apache/storm/hbase/trident/state/HBaseState.java to understand what I'm saying.
, Github user revans2 commented on the pull request:

    https://github.com/apache/storm/pull/482#issuecomment-86521810
  
    I am +1 on the change, but my only question is do we want to do this only for all branches? or only for 0.10.X?
, Github user HeartSaVioR commented on the pull request:

    https://github.com/apache/storm/pull/482#issuecomment-86526814
  
    I think we should remove these 2 files from all branches, since we'll introduce new classes if we need.
, I'm ok with withExpire() method., good idea, Github user revans2 commented on the pull request:

    https://github.com/apache/storm/pull/482#issuecomment-86539867
  
    OK, I'll merge this in.
, Thanks! I'll give it a try., Github user asfgit closed the pull request at:

    https://github.com/apache/storm/pull/482
, Github user HeartSaVioR commented on the pull request:

    https://github.com/apache/storm/pull/482#issuecomment-86541464
  
    @revans2 Thanks for merging! Especially I know that cherry-picking commits is not a easy way to do. ;)
, Github user revans2 commented on the pull request:

    https://github.com/apache/storm/pull/482#issuecomment-86542171
  
    @HeartSaVioR yes, but this is a very easy cherry-pick, when we are depleting code. I am running the tests on 0.10.x-branch now to be sure everything looks good, and then I will merge it in and resolve the JIRA.
, [~kabhwan],

I merged this into 0.10.x-branch and master. Thanks for your quick work on this.  I look forward to seeing the new APIs soon., [~kabhwan]  we should change the Updater/Querier interface use withExpire() quickly. storm-redis release in 0.10.x should use the new interface.]