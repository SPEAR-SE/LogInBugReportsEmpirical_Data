[For what it's worth, I think the original design here assumed that nimbus and supervisors would both use a common (privileged) cluster user.  If we want to support supervisors and nimbus running as different users, we can add another ACL entry to the znodes?, [~dagit] yes thats what causing this issue. In general most of the users I've seen like to keep the principals for StormServer and StormClient different . Example StormServer running nimbus/_HOST and StormClient running as Storm/_HOST.
Adding StormServer  as another ACL entry will work., [~dagit] [~revans2]  Looked more into the issue , it doesn't look like adding another ACL would solve this issue.  We use zookeeperAuthInfo which adds topology.owner payload as auth than sets the ACL's on /transactional nodes as "sasl:storm" also the digest . When the user kills  we don't erase /transactional data upon killing of a topology. After user re-deploys the topology even if its the same user the auth digest will change and which will cause it thrown an ACL exception when trying to access previous transactional data.

1) add topology_name under /transactional . currenlty it uses /transacational/spou1 . 
2) delete /transactional/topology_name data if user kills a topology.

deleting the /transactional nodes probably not a good option . Since most users if they are upgrading they will kill a topology and upgrade storm cluster and re-deploy the topology . In this case deleting /transacational/topology_name data wouldn't allow them recover from where they left off

, The way to work around this, and what we have been doing is having trident topologies override the randomly generated secret with their own secret that persists across relaunches of a topology.
{code}storm jar ... -c 'storm.zookeeper.auth.payload="user-part:password-part"'{code}

I know it is far from ideal, but it works.  In the ideal world nimbus would recognize the two trident topologies were related and could then update the ACLs accordingly, if they were owned by an appropriate user.  The issue is that nimbus is not actually aware of the transactional state in any way.  Trident is really a library sitting on top of core storm, and the transactional state could even be updated to point to a different ZK instance that nimbus is not aware of.  These are the reasons why we went with the quick and dirty solution.

I thought I had updated the documentation to include this, but looking at it now I see I didn't.  I'm really sorry about that., [~revans2] I think users need to pass in  storm.zookeeper.topology.auth.payload ? . ZookeerpAuthInfo picks this first if its available than look for storm.zookeeper.auth.payload if previous one is not available. , Your right, I mixed up the two., Closing due to inactivity. It is also based on the version we don't track as of now.]