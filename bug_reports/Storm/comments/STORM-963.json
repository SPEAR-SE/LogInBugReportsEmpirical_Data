[Could you reproduce this issue every time?
When circumstance appears again, could you dump each worker processes including subprocess?
(Dumping worker process can be done with jstack <PID>, dumping python process can be done with kill -SIGABRT <PID>.)

You may can't get multilang subprocess's dump since it is redirected to ShellBolt worker's stdin.

Dump log could help us., Hi [~kabhwan],

We're not able to reproduce it when we want. It just happens every now and then, but it's quite frequent, so we're able to provide some test results.

Executing {{kill -SIGABRT <PID>}} in one of the Python processes writes this into the worker's log:

{code}
2015-08-03T14:41:30.315+0200 b.s.t.ShellBolt [ERROR] Halting process: ShellBolt died.
java.lang.RuntimeException: subprocess heartbeat timeout
	at backtype.storm.task.ShellBolt$BoltHeartbeatTimerTask.run(ShellBolt.java:305) [storm-core-0.9.5.jar:0.9.5]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [na:1.8.0_45]
	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308) [na:1.8.0_45]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180) [na:1.8.0_45]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294) [na:1.8.0_45]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_45]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_45]
	at java.lang.Thread.run(Thread.java:745) [na:1.8.0_45]
2015-08-03T14:41:30.315+0200 b.s.d.executor [ERROR] 
java.lang.RuntimeException: subprocess heartbeat timeout
	at backtype.storm.task.ShellBolt$BoltHeartbeatTimerTask.run(ShellBolt.java:305) [storm-core-0.9.5.jar:0.9.5]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [na:1.8.0_45]
	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308) [na:1.8.0_45]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180) [na:1.8.0_45]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294) [na:1.8.0_45]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_45]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_45]
	at java.lang.Thread.run(Thread.java:745) [na:1.8.0_45]
2015-08-03T14:41:30.317+0200 b.s.t.ShellBolt [ERROR] Halting process: ShellBolt died.
java.lang.RuntimeException: backtype.storm.multilang.NoOutputException: Pipe to subprocess seems to be broken! No output read.
Serializer Exception:


	at backtype.storm.utils.ShellProcess.readShellMsg(ShellProcess.java:101) ~[storm-core-0.9.5.jar:0.9.5]
	at backtype.storm.task.ShellBolt$BoltReaderRunnable.run(ShellBolt.java:318) ~[storm-core-0.9.5.jar:0.9.5]
	at java.lang.Thread.run(Thread.java:745) [na:1.8.0_45]
2015-08-03T14:41:30.318+0200 b.s.d.executor [ERROR] 
java.lang.RuntimeException: backtype.storm.multilang.NoOutputException: Pipe to subprocess seems to be broken! No output read.
Serializer Exception:


	at backtype.storm.utils.ShellProcess.readShellMsg(ShellProcess.java:101) ~[storm-core-0.9.5.jar:0.9.5]
	at backtype.storm.task.ShellBolt$BoltReaderRunnable.run(ShellBolt.java:318) ~[storm-core-0.9.5.jar:0.9.5]
	at java.lang.Thread.run(Thread.java:745) [na:1.8.0_45]
2015-08-03T14:41:30.320+0200 b.s.t.ShellBolt [ERROR] Halting process: ShellBolt died.
java.io.IOException: Broken pipe
	at java.io.FileOutputStream.writeBytes(Native Method) ~[na:1.8.0_45]
	at java.io.FileOutputStream.write(FileOutputStream.java:326) ~[na:1.8.0_45]
	at java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:82) ~[na:1.8.0_45]
	at java.io.BufferedOutputStream.flush(BufferedOutputStream.java:140) ~[na:1.8.0_45]
	at java.io.DataOutputStream.flush(DataOutputStream.java:123) ~[na:1.8.0_45]
	at backtype.storm.multilang.JsonSerializer.writeString(JsonSerializer.java:96) ~[storm-core-0.9.5.jar:0.9.5]
	at backtype.storm.multilang.JsonSerializer.writeMessage(JsonSerializer.java:89) ~[storm-core-0.9.5.jar:0.9.5]
	at backtype.storm.multilang.JsonSerializer.writeBoltMsg(JsonSerializer.java:74) ~[storm-core-0.9.5.jar:0.9.5]
	at backtype.storm.utils.ShellProcess.writeBoltMsg(ShellProcess.java:106) ~[storm-core-0.9.5.jar:0.9.5]
	at backtype.storm.task.ShellBolt$BoltWriterRunnable.run(ShellBolt.java:355) ~[storm-core-0.9.5.jar:0.9.5]
	at java.lang.Thread.run(Thread.java:745) [na:1.8.0_45]
2015-08-03T14:41:30.320+0200 b.s.d.executor [ERROR] 
java.io.IOException: Broken pipe
	at java.io.FileOutputStream.writeBytes(Native Method) ~[na:1.8.0_45]
	at java.io.FileOutputStream.write(FileOutputStream.java:326) ~[na:1.8.0_45]
	at java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:82) ~[na:1.8.0_45]
	at java.io.BufferedOutputStream.flush(BufferedOutputStream.java:140) ~[na:1.8.0_45]
	at java.io.DataOutputStream.flush(DataOutputStream.java:123) ~[na:1.8.0_45]
	at backtype.storm.multilang.JsonSerializer.writeString(JsonSerializer.java:96) ~[storm-core-0.9.5.jar:0.9.5]
	at backtype.storm.multilang.JsonSerializer.writeMessage(JsonSerializer.java:89) ~[storm-core-0.9.5.jar:0.9.5]
	at backtype.storm.multilang.JsonSerializer.writeBoltMsg(JsonSerializer.java:74) ~[storm-core-0.9.5.jar:0.9.5]
	at backtype.storm.utils.ShellProcess.writeBoltMsg(ShellProcess.java:106) ~[storm-core-0.9.5.jar:0.9.5]
	at backtype.storm.task.ShellBolt$BoltWriterRunnable.run(ShellBolt.java:355) ~[storm-core-0.9.5.jar:0.9.5]
	at java.lang.Thread.run(Thread.java:745) [na:1.8.0_45]
2015-08-03T14:41:30.357+0200 b.s.d.worker [INFO] Shutting down worker my-topology-47-1438604011 63b8c93e-7d6e-4d67-b4f8-957c9650e7ba 6700
2015-08-03T14:41:30.358+0200 b.s.m.n.Client [INFO] closing Netty Client Netty-Client-vm05.v5tech.local/172.28.69.111:6700
2015-08-03T14:41:30.358+0200 b.s.m.n.Client [INFO] waiting up to 600000 ms to send 0 pending messages to Netty-Client-vm05.v5tech.local/172.28.69.111:6700
2015-08-03T14:41:30.359+0200 b.s.m.n.Client [INFO] closing Netty Client Netty-Client-vm05.v5tech.local/172.28.69.111:6701
2015-08-03T14:41:30.360+0200 b.s.m.n.Client [INFO] waiting up to 600000 ms to send 0 pending messages to Netty-Client-vm05.v5tech.local/172.28.69.111:6701
2015-08-03T14:41:30.360+0200 b.s.d.worker [INFO] Shutting down receive thread
2015-08-03T14:41:30.360+0200 b.s.m.n.Client [INFO] creating Netty Client, connecting to localhost:6700, bufferSize: 5242880
2015-08-03T14:41:30.360+0200 o.a.s.c.r.ExponentialBackoffRetry [WARN] maxRetries too large (300). Pinning to 29
2015-08-03T14:41:30.360+0200 b.s.u.StormBoundedExponentialBackoffRetry [INFO] The baseSleepTimeMs [100] the maxSleepTimeMs [1000] the maxRetries [300]
2015-08-03T14:41:30.360+0200 b.s.m.n.Client [INFO] connection attempt 1 to Netty-Client-localhost/127.0.0.1:6700 scheduled to run in 0 ms
2015-08-03T14:41:30.361+0200 b.s.m.loader [INFO] Shutting down receiving-thread: [my-topology-47-1438604011, 6700]
2015-08-03T14:41:30.361+0200 b.s.m.n.Client [ERROR] connection to Netty-Client-localhost/127.0.0.1:6700 is unavailable
2015-08-03T14:41:30.361+0200 b.s.m.n.Client [ERROR] dropping 1 message(s) destined for Netty-Client-localhost/127.0.0.1:6700
2015-08-03T14:41:30.361+0200 b.s.m.n.Client [INFO] closing Netty Client Netty-Client-localhost/127.0.0.1:6700
2015-08-03T14:41:30.361+0200 b.s.m.n.Client [INFO] waiting up to 600000 ms to send 0 pending messages to Netty-Client-localhost/127.0.0.1:6700
2015-08-03T14:41:30.361+0200 b.s.m.loader [INFO] Waiting for receiving-thread:[my-topology-47-1438604011, 6700] to die
2015-08-03T14:41:30.365+0200 b.s.m.n.Client [INFO] connection established to Netty-Client-localhost/127.0.0.1:6700
2015-08-03T14:41:30.366+0200 b.s.m.loader [INFO] Shutdown receiving-thread: [my-topology-47-1438604011, 6700]
2015-08-03T14:41:30.366+0200 b.s.d.worker [INFO] Shut down receive thread
2015-08-03T14:41:30.366+0200 b.s.d.worker [INFO] Terminating messaging context
2015-08-03T14:41:30.366+0200 b.s.d.worker [INFO] Shutting down executors
2015-08-03T14:41:30.368+0200 b.s.d.executor [INFO] Shutting down executor processBolt:[2 2]
2015-08-03T14:41:30.368+0200 b.s.util [INFO] Async loop interrupted!
2015-08-03T14:41:30.368+0200 b.s.util [INFO] Async loop interrupted!
2015-08-03T14:41:30.370+0200 b.s.d.executor [INFO] Shut down executor processBolt:[2 2]
2015-08-03T14:41:30.370+0200 b.s.d.executor [INFO] Shutting down executor processBolt:[5 5]
2015-08-03T14:41:30.371+0200 b.s.util [INFO] Async loop interrupted!
{code}

In the supervisor's log:

{code}
2015-08-03T14:42:01.542+0200 b.s.d.supervisor [INFO] Shutting down and clearing state for id f2111c3b-31e5-4e72-b16b-ff5897148844. Current supervisor time: 1438605721. State: :timed-out, Heartbeat: #backtype.storm.daemon.common.WorkerHeartbeat{:time-secs 1438605690, :storm-id "my-topology-47-1438604011", :executors #{[2 2] [5 5] [8 8] [11 11] [14 14] [-1 -1]}, :port 6700}
2015-08-03T14:42:01.542+0200 b.s.d.supervisor [INFO] Shutting down 63b8c93e-7d6e-4d67-b4f8-957c9650e7ba:f2111c3b-31e5-4e72-b16b-ff5897148844
2015-08-03T14:42:01.544+0200 b.s.util [INFO] Error when trying to kill 63473. Process is probably already dead.
2015-08-03T14:42:01.546+0200 b.s.util [INFO] Error when trying to kill 63466. Process is probably already dead.
2015-08-03T14:42:01.548+0200 b.s.util [INFO] Error when trying to kill 63481. Process is probably already dead.
2015-08-03T14:42:01.549+0200 b.s.util [INFO] Error when trying to kill 63465. Process is probably already dead.
2015-08-03T14:42:01.554+0200 b.s.util [INFO] Error when trying to kill 63414. Process is probably already dead.
2015-08-03T14:42:02.556+0200 b.s.util [INFO] Error when trying to kill 63473. Process is probably already dead.
2015-08-03T14:42:02.558+0200 b.s.util [INFO] Error when trying to kill 63466. Process is probably already dead.
2015-08-03T14:42:02.562+0200 b.s.util [INFO] Error when trying to kill 63481. Process is probably already dead.
2015-08-03T14:42:02.563+0200 b.s.util [INFO] Error when trying to kill 63465. Process is probably already dead.
2015-08-03T14:42:02.566+0200 b.s.util [INFO] Error when trying to kill 63414. Process is probably already dead.
2015-08-03T14:42:02.569+0200 b.s.d.supervisor [INFO] Shut down 63b8c93e-7d6e-4d67-b4f8-957c9650e7ba:f2111c3b-31e5-4e72-b16b-ff5897148844
2015-08-03T14:42:02.570+0200 b.s.d.supervisor [INFO] Launching worker with assignment #backtype.storm.daemon.supervisor.LocalAssignment{:storm-id "my-topology-47-1438604011", :executors ([2 2] [5 5] [8 8] [11 11] [14 14])} for this supervisor 63b8c93e-7d6e-4d67-b4f8-957c9650e7ba on port 6700 with id e75a75ff-2eed-430d-bd77-8cd707667b1d
2015-08-03T14:42:02.571+0200 b.s.d.supervisor [INFO] Launching worker with command: '/opt/java/latest/bin/java' '-server' '-Xmx6144m' '-Djava.library.path=/var/lib/storm/supervisor/stormdist/my-topology-47-1438604011/resources/Linux-amd64:/var/lib/storm/supervisor/stormdist/my-topology-47-1438604011/resources:/usr/local/lib:/opt/local/lib:/usr/lib' '-Dlogfile.name=worker-6700.log' '-Dstorm.home=/opt/mydir/apache-storm-0.9.5' '-Dstorm.conf.file=' '-Dstorm.options=' '-Dstorm.log.dir=/opt/mydir/apache-storm-0.9.5/logs' '-Dlogback.configurationFile=/opt/mydir/apache-storm-0.9.5/logback/cluster.xml' '-Dstorm.id=my-topology-47-1438604011' '-Dworker.id=e75a75ff-2eed-430d-bd77-8cd707667b1d' '-Dworker.port=6700' '-cp' '/opt/mydir/apache-storm-0.9.5/lib/minlog-1.2.jar:/opt/mydir/apache-storm-0.9.5/lib/carbonite-1.4.0.jar:/opt/mydir/apache-storm-0.9.5/lib/json-simple-1.1.jar:/opt/mydir/apache-storm-0.9.5/lib/slf4j-api-1.7.5.jar:/opt/mydir/apache-storm-0.9.5/lib/kryo-2.21.jar:/opt/mydir/apache-storm-0.9.5/lib/tools.logging-0.2.3.jar:/opt/mydir/apache-storm-0.9.5/lib/ring-servlet-0.3.11.jar:/opt/mydir/apache-storm-0.9.5/lib/tools.cli-0.2.4.jar:/opt/mydir/apache-storm-0.9.5/lib/disruptor-2.10.1.jar:/opt/mydir/apache-storm-0.9.5/lib/clj-stacktrace-0.2.2.jar:/opt/mydir/apache-storm-0.9.5/lib/math.numeric-tower-0.0.1.jar:/opt/ymdir/apache-storm-0.9.5/lib/ring-jetty-adapter-0.3.11.jar:/opt/mydir/apache-storm-0.9.5/lib/commons-io-2.4.jar:/opt/mydir/apache-storm-0.9.5/lib/servlet-api-2.5.jar:/opt/mydir/apache-storm-0.9.5/lib/log4j-over-slf4j-1.6.6.jar:/opt/mydir/apache-storm-0.9.5/lib/core.incubator-0.1.0.jar:/opt/mydir/apache-storm-0.9.5/lib/asm-4.0.jar:/opt/mydir/apache-storm-0.9.5/lib/hiccup-0.3.6.jar:/opt/mydir/apache-storm-0.9.5/lib/jetty-util-6.1.26.jar:/opt/mydir/apache-storm-0.9.5/lib/tools.macro-0.1.0.jar:/opt/mydir/apache-storm-0.9.5/lib/ring-devel-0.3.11.jar:/opt/mydir/apache-storm-0.9.5/lib/commons-exec-1.1.jar:/opt/mydir/apache-storm-0.9.5/lib/ring-core-1.1.5.jar:/opt/mydir/apache-storm-0.9.5/lib/clout-1.0.1.jar:/opt/mydir/apache-storm-0.9.5/lib/jetty-6.1.26.jar:/opt/mydir/apache-storm-0.9.5/lib/objenesis-1.2.jar:/opt/mydir/apache-storm-0.9.5/lib/logback-core-1.0.13.jar:/opt/mydir/apache-storm-0.9.5/lib/jgrapht-core-0.9.0.jar:/opt/mydir/apache-storm-0.9.5/lib/commons-codec-1.6.jar:/opt/mydir/apache-storm-0.9.5/lib/commons-lang-2.5.jar:/opt/mydir/apache-storm-0.9.5/lib/clojure-1.5.1.jar:/opt/mydir/apache-storm-0.9.5/lib/storm-core-0.9.5.jar:/opt/mydir/apache-storm-0.9.5/lib/chill-java-0.3.5.jar:/opt/mydir/apache-storm-0.9.5/lib/reflectasm-1.07-shaded.jar:/opt/mydir/apache-storm-0.9.5/lib/joda-time-2.0.jar:/opt/mydir/apache-storm-0.9.5/lib/commons-logging-1.1.3.jar:/opt/mydir/apache-storm-0.9.5/lib/compojure-1.1.3.jar:/opt/mydir/apache-storm-0.9.5/lib/clj-time-0.4.1.jar:/opt/mydir/apache-storm-0.9.5/lib/jline-2.11.jar:/opt/mydir/apache-storm-0.9.5/lib/commons-fileupload-1.2.1.jar:/opt/mydir/apache-storm-0.9.5/lib/logback-classic-1.0.13.jar:/opt/mydir/apache-storm-0.9.5/lib/snakeyaml-1.11.jar:/opt/mydir/apache-storm-0.9.5/conf:/var/lib/storm/supervisor/stormdist/my-topology-47-1438604011/stormjar.jar' 'backtype.storm.daemon.worker' 'my-topology-47-1438604011' '63b8c93e-7d6e-4d67-b4f8-957c9650e7ba' '6700' 'e75a75ff-2eed-430d-bd77-8cd707667b1d'
2015-08-03T14:42:02.571+0200 b.s.d.supervisor [INFO] e75a75ff-2eed-430d-bd77-8cd707667b1d still hasn't started
2015-08-03T14:42:03.072+0200 b.s.d.supervisor [INFO] e75a75ff-2eed-430d-bd77-8cd707667b1d still hasn't started
2015-08-03T14:42:03.572+0200 b.s.d.supervisor [INFO] e75a75ff-2eed-430d-bd77-8cd707667b1d still hasn't started
{code}

And nimbus' log:

{code}
2015-08-03T14:42:03.959+0200 b.s.d.nimbus [INFO] Executor my-topology-47-1438604011:[2 2] not alive
2015-08-03T14:42:03.959+0200 b.s.d.nimbus [INFO] Executor my-topology-47-1438604011:[5 5] not alive
2015-08-03T14:42:03.959+0200 b.s.d.nimbus [INFO] Executor my-topology-47-1438604011:[8 8] not alive
2015-08-03T14:42:03.959+0200 b.s.d.nimbus [INFO] Executor my-topology-47-1438604011:[11 11] not alive
2015-08-03T14:42:03.959+0200 b.s.d.nimbus [INFO] Executor my-topology-47-1438604011:[14 14] not alive
2015-08-03T14:42:03.964+0200 b.s.s.EvenScheduler [INFO] Available slots: (["3e795735-aa1d-483d-8140-1faa9eb9161c" 6702] ["3e795735-aa1d-483d-8140-1faa9eb9161c" 6703] ["63b8c93e-7d6e-4d67-b4f8-957c9650e7ba" 6701] ["63b8c93e-7d6e-4d67-b4f8-957c9650e7ba" 6702] ["63b8c93e-7d6e-4d67-b4f8-957c9650e7ba" 6703] ["1dbdec2d-9e91-42e5-beac-2f2848667e14" 6700] ["1dbdec2d-9e91-42e5-beac-2f2848667e14" 6701] ["1dbdec2d-9e91-42e5-beac-2f2848667e14" 6702] ["1dbdec2d-9e91-42e5-beac-2f2848667e14" 6703])
2015-08-03T14:42:03.964+0200 b.s.d.nimbus [INFO] Reassigning my-topology-47-1438604011 to 3 slots
2015-08-03T14:42:03.964+0200 b.s.d.nimbus [INFO] Reassign executors: [[2 2] [5 5] [8 8] [11 11] [14 14]]
2015-08-03T14:42:03.969+0200 b.s.d.nimbus [INFO] Setting new assignment for topology id my-topology-47-1438604011: #backtype.storm.daemon.common.Assignment{:master-code-dir "/var/lib/storm/nimbus/stormdist/my-topology-47-1438604011", :node->host {"1dbdec2d-9e91-42e5-beac-2f2848667e14" "vm06.v5tech.local", "3e795735-aa1d-483d-8140-1faa9eb9161c" "vm05.v5tech.local"}, :executor->node+port {[2 2] ["1dbdec2d-9e91-42e5-beac-2f2848667e14" 6700], [3 3] ["3e795735-aa1d-483d-8140-1faa9eb9161c" 6700], [4 4] ["3e795735-aa1d-483d-8140-1faa9eb9161c" 6701], [5 5] ["1dbdec2d-9e91-42e5-beac-2f2848667e14" 6700], [6 6] ["3e795735-aa1d-483d-8140-1faa9eb9161c" 6700], [7 7] ["3e795735-aa1d-483d-8140-1faa9eb9161c" 6701], [8 8] ["1dbdec2d-9e91-42e5-beac-2f2848667e14" 6700], [9 9] ["3e795735-aa1d-483d-8140-1faa9eb9161c" 6700], [10 10] ["3e795735-aa1d-483d-8140-1faa9eb9161c" 6701], [11 11] ["1dbdec2d-9e91-42e5-beac-2f2848667e14" 6700], [12 12] ["3e795735-aa1d-483d-8140-1faa9eb9161c" 6700], [13 13] ["3e795735-aa1d-483d-8140-1faa9eb9161c" 6701], [14 14] ["1dbdec2d-9e91-42e5-beac-2f2848667e14" 6700], [15 15] ["3e795735-aa1d-483d-8140-1faa9eb9161c" 6700], [1 1] ["3e795735-aa1d-483d-8140-1faa9eb9161c" 6701]}, :executor->start-time-secs {[2 2] 1438605723, [3 3] 1438605182, [4 4] 1438605573, [5 5] 1438605723, [6 6] 1438605182, [7 7] 1438605573, [8 8] 1438605723, [9 9] 1438605182, [10 10] 1438605573, [11 11] 1438605723, [12 12] 1438605182, [13 13] 1438605573, [14 14] 1438605723, [15 15] 1438605182, [1 1] 1438605573}}
{code}

Basically, it rebalances the topology removing the node where we executed the {{kill}} command. That produces a lot of error messages and some Netty related stuff. After that, everything seems to work again. In fact, we can rebalance again the topology (via UI) and everything works fine for a random amount of time (minutes or hours).

Right now, after 15 min, it's frozen and we don't find a single line in the logs:

{code}
2015-08-03T14:51:22.028+0200 b.s.t.ShellBolt [INFO] ShellLog pid:64304, name:processBolt I'm doing something
2015-08-03T14:51:50.981+0200 b.s.t.ShellBolt [INFO] ShellLog pid:64304, name:processBolt I'm doing something
2015-08-03T14:51:51.211+0200 b.s.t.ShellBolt [INFO] ShellLog pid:64304, name:processBolt I'm doing something
2015-08-03T14:51:52.289+0200 b.s.t.ShellBolt [INFO] ShellLog pid:64304, name:processBolt I'm doing something
2015-08-03T14:51:58.181+0200 s.k.ZkCoordinator [INFO] Task [3/3] Refreshing partition manager connections
2015-08-03T14:51:58.183+0200 s.k.DynamicBrokersReader [INFO] Read partition info from zookeeper: GlobalPartitionInformation{partitionMap={0=kafka1:9092, 1=kafka2:9092, 2=kafka3:9092}}
2015-08-03T14:51:58.183+0200 s.k.KafkaUtils [INFO] Task [3/3] assigned [Partition{host=kafka3:9092, partition=2}]
2015-08-03T14:51:58.183+0200 s.k.ZkCoordinator [INFO] Task [3/3] Deleted partition managers: []
2015-08-03T14:51:58.183+0200 s.k.ZkCoordinator [INFO] Task [3/3] New partition managers: []
2015-08-03T14:51:58.183+0200 s.k.ZkCoordinator [INFO] Task [3/3] Finished refreshing
2015-08-03T14:52:22.251+0200 b.s.t.ShellBolt [INFO] ShellLog pid:64304, name:processBolt I'm doing something
2015-08-03T14:52:22.278+0200 b.s.t.ShellBolt [INFO] ShellLog pid:64304, name:processBolt I'm doing something
2015-08-03T14:52:22.289+0200 b.s.t.ShellBolt [INFO] ShellLog pid:64304, name:processBolt I'm doing something

2015-08-03T14:52:58.184+0200 s.k.ZkCoordinator [INFO] Task [3/3] Refreshing partition manager connections
2015-08-03T14:52:58.187+0200 s.k.DynamicBrokersReader [INFO] Read partition info from zookeeper: GlobalPartitionInformation{partitionMap={0=kafka1:9092, 1=kafka2:9092, 2=kafka3:9092}}
2015-08-03T14:52:58.187+0200 s.k.KafkaUtils [INFO] Task [3/3] assigned [Partition{host=kafka12.v5tech.local:9092, partition=2}]
2015-08-03T14:52:58.187+0200 s.k.ZkCoordinator [INFO] Task [3/3] Deleted partition managers: []
2015-08-03T14:52:58.187+0200 s.k.ZkCoordinator [INFO] Task [3/3] New partition managers: []
2015-08-03T14:52:58.187+0200 s.k.ZkCoordinator [INFO] Task [3/3] Finished refreshing


2015-08-03T14:53:58.189+0200 s.k.ZkCoordinator [INFO] Task [3/3] Refreshing partition manager connections
2015-08-03T14:53:58.192+0200 s.k.DynamicBrokersReader [INFO] Read partition info from zookeeper: GlobalPartitionInformation{partitionMap={0=kafka1:9092, 1=kafka2:9092, 2=kafka3:9092}}
2015-08-03T14:53:58.193+0200 s.k.KafkaUtils [INFO] Task [3/3] assigned [Partition{host=kafka3:9092, partition=2}]
2015-08-03T14:53:58.193+0200 s.k.ZkCoordinator [INFO] Task [3/3] Deleted partition managers: []
2015-08-03T14:53:58.193+0200 s.k.ZkCoordinator [INFO] Task [3/3] New partition managers: []
2015-08-03T14:53:58.193+0200 s.k.ZkCoordinator [INFO] Task [3/3] Finished refreshing
2015-08-03T14:54:58.194+0200 s.k.ZkCoordinator [INFO] Task [3/3] Refreshing partition manager connections
2015-08-03T14:54:58.198+0200 s.k.DynamicBrokersReader [INFO] Read partition info from zookeeper: GlobalPartitionInformation{partitionMap={0=kafka1:9092, 1=kafka2:9092, 2=kafka3:9092}}
2015-08-03T14:54:58.199+0200 s.k.KafkaUtils [INFO] Task [3/3] assigned [Partition{host=kafka3:9092, partition=2}]
2015-08-03T14:54:58.199+0200 s.k.ZkCoordinator [INFO] Task [3/3] Deleted partition managers: []
2015-08-03T14:54:58.199+0200 s.k.ZkCoordinator [INFO] Task [3/3] New partition managers: []
2015-08-03T14:54:58.199+0200 s.k.ZkCoordinator [INFO] Task [3/3] Finished refreshing
{code}

I'll add the {{jstack}} results later on.

I can provide you with full logs from a fresh topology deploy if a secure upload URL is provided.

Hope this information helps a little bit.
, No luck with a {{jstack}} execution:

{code}
> ps aux|grep java| grep storm | grep worker
storm      850 24.9 46.1 11092720 4736148 ?    Sl   15:04   3:58 /opt/java/latest/bin/java -server -Xmx6144m -Djava.library.path=/var/lib/storm/supervisor/stormdist/my-topology-48-1438607054/resources/Linux-amd64:/var/lib/storm/supervisor/stormdist/my-topology-48-1438607054/resources:/usr/local/lib:/opt/local/lib:/usr/lib -Dlogfile.name=worker-6700.log -Dstorm.home=/opt/mydir/apache-storm-0.9.5 -Dstorm.conf.file= -Dstorm.options= -Dstorm.log.dir=/opt/mydir/apache-storm-0.9.5/logs -Dlogback.configurationFile=/opt/mydir/apache-storm-0.9.5/logback/cluster.xml -Dstorm.id=my-topology-48-1438607054 -Dworker.id=3904443c-7532-4b76-a0f3-63a873bae8f0 -Dworker.port=6700 -cp /opt/mydir/apache-storm-0.9.5/lib/minlog-1.2.jar:/opt/mydir/apache-storm-0.9.5/lib/carbonite-1.4.0.jar:/opt/mydir/apache-storm-0.9.5/lib/json-simple-1.1.jar:/opt/mydir/apache-storm-0.9.5/lib/slf4j-api-1.7.5.jar:/opt/mydir/apache-storm-0.9.5/lib/kryo-2.21.jar:/opt/mydir/apache-storm-0.9.5/lib/tools.logging-0.2.3.jar:/opt/mydir/apache-storm-0.9.5/lib/ring-servlet-0.3.11.jar:/opt/mydir/apache-storm-0.9.5/lib/tools.cli-0.2.4.jar:/opt/mydir/apache-storm-0.9.5/lib/disruptor-2.10.1.jar:/opt/mydir/apache-storm-0.9.5/lib/clj-stacktrace-0.2.2.jar:/opt/mydir/apache-storm-0.9.5/lib/math.numeric-tower-0.0.1.jar:/opt/mydir/apache-storm-0.9.5/lib/ring-jetty-adapter-0.3.11.jar:/opt/mydir/apache-storm-0.9.5/lib/commons-io-2.4.jar:/opt/mydir/apache-storm-0.9.5/lib/servlet-api-2.5.jar:/opt/mydir/apache-storm-0.9.5/lib/log4j-over-slf4j-1.6.6.jar:/opt/mydir/apache-storm-0.9.5/lib/core.incubator-0.1.0.jar:/opt/mydir/apache-storm-0.9.5/lib/asm-4.0.jar:/opt/mydir/apache-storm-0.9.5/lib/hiccup-0.3.6.jar:/opt/mydir/apache-storm-0.9.5/lib/jetty-util-6.1.26.jar:/opt/mydir/apache-storm-0.9.5/lib/tools.macro-0.1.0.jar:/opt/mydir/apache-storm-0.9.5/lib/ring-devel-0.3.11.jar:/opt/mydir/apache-storm-0.9.5/lib/commons-exec-1.1.jar:/opt/mydir/apache-storm-0.9.5/lib/ring-core-1.1.5.jar:/opt/mydir/apache-storm-0.9.5/lib/clout-1.0.1.jar:/opt/mydir/apache-storm-0.9.5/lib/jetty-6.1.26.jar:/opt/mydir/apache-storm-0.9.5/lib/objenesis-1.2.jar:/opt/mydir/apache-storm-0.9.5/lib/logback-core-1.0.13.jar:/opt/mydir/apache-storm-0.9.5/lib/jgrapht-core-0.9.0.jar:/opt/mydir/apache-storm-0.9.5/lib/commons-codec-1.6.jar:/opt/mydir/apache-storm-0.9.5/lib/commons-lang-2.5.jar:/opt/mydir/apache-storm-0.9.5/lib/clojure-1.5.1.jar:/opt/mydir/apache-storm-0.9.5/lib/storm-core-0.9.5.jar:/opt/mydir/apache-storm-0.9.5/lib/chill-java-0.3.5.jar:/opt/mydir/apache-storm-0.9.5/lib/reflectasm-1.07-shaded.jar:/opt/mydir/apache-storm-0.9.5/lib/joda-time-2.0.jar:/opt/mydir/apache-storm-0.9.5/lib/commons-logging-1.1.3.jar:/opt/mydir/apache-storm-0.9.5/lib/compojure-1.1.3.jar:/opt/mydir/apache-storm-0.9.5/lib/clj-time-0.4.1.jar:/opt/mydir/apache-storm-0.9.5/lib/jline-2.11.jar:/opt/mydir/apache-storm-0.9.5/lib/commons-fileupload-1.2.1.jar:/opt/mydir/apache-storm-0.9.5/lib/logback-classic-1.0.13.jar:/opt/mydir/apache-storm-0.9.5/lib/snakeyaml-1.11.jar:/opt/mydir/apache-storm-0.9.5/conf:/var/lib/storm/supervisor/stormdist/my-topology-48-1438607054/stormjar.jar backtype.storm.daemon.worker my-topology-48-1438607054 63b8c93e-7d6e-4d67-b4f8-957c9650e7ba 6700 3904443c-7532-4b76-a0f3-63a873bae8f0

> jstack 850
850: Unable to open socket file: target process not responding or HotSpot VM not loaded
The -F option can be used when the target process is not responding
{code}

And after some minutes the worker process dies, as can be seen in the supervisor's log:

{code}
2015-08-03T15:20:56.584+0200 b.s.d.supervisor [INFO] Shutting down and clearing state for id 3904443c-7532-4b76-a0f3-63a873bae8f0. Current supervisor time: 1438608056. State: :timed-out, Heartbeat: #backtype.storm.daemon.common.WorkerHeartbeat{:time-secs 1438608025, :storm-id "my-topology-48-1438607054", :executors #{[2 2] [5 5] [8 8] [11 11] [14 14] [-1 -1]}, :port 6700}
2015-08-03T15:20:56.584+0200 b.s.d.supervisor [INFO] Shutting down 63b8c93e-7d6e-4d67-b4f8-957c9650e7ba:3904443c-7532-4b76-a0f3-63a873bae8f0
2015-08-03T15:20:57.606+0200 b.s.util [INFO] Error when trying to kill 936. Process is probably already dead.
2015-08-03T15:20:57.610+0200 b.s.util [INFO] Error when trying to kill 937. Process is probably already dead.
2015-08-03T15:20:57.618+0200 b.s.util [INFO] Error when trying to kill 938. Process is probably already dead.
2015-08-03T15:20:57.619+0200 b.s.util [INFO] Error when trying to kill 939. Process is probably already dead.
2015-08-03T15:20:57.623+0200 b.s.d.supervisor [INFO] Shut down 63b8c93e-7d6e-4d67-b4f8-957c9650e7ba:3904443c-7532-4b76-a0f3-63a873bae8f0
2015-08-03T15:20:57.624+0200 b.s.d.supervisor [INFO] Launching worker with assignment #backtype.storm.daemon.supervisor.LocalAssignment{:storm-id "my-topology-48-1438607054", :executors ([2 2] [5 5] [8 8] [11 11] [14 14])} for this supervisor 63b8c93e-7d6e-4d67-b4f8-957c9650e7ba on port 6700 with id 22528582-09ee-411a-bfbd-65ffecd69be4
2015-08-03T15:20:57.625+0200 b.s.d.supervisor [INFO] Launching worker with command: '/opt/java/latest/bin/java' '-server' '-Xmx6144m' '-Djava.library.path=/var/lib/storm/supervisor/stormdist/my-topology-48-1438607054/resources/Linux-amd64:/var/lib/storm/supervisor/stormdist/my-topology-48-1438607054/resources:/usr/local/lib:/opt/local/lib:/usr/lib' '-Dlogfile.name=worker-6700.log' '-Dstorm.home=/opt/mydir/apache-storm-0.9.5' '-Dstorm.conf.file=' '-Dstorm.options=' '-Dstorm.log.dir=/opt/mydir/apache-storm-0.9.5/logs' '-Dlogback.configurationFile=/opt/mydir/apache-storm-0.9.5/logback/cluster.xml' '-Dstorm.id=my-topology-48-1438607054' '-Dworker.id=22528582-09ee-411a-bfbd-65ffecd69be4' '-Dworker.port=6700' '-cp' '/opt/mydir/apache-storm-0.9.5/lib/minlog-1.2.jar:/opt/mydir/apache-storm-0.9.5/lib/carbonite-1.4.0.jar:/opt/mydir/apache-storm-0.9.5/lib/json-simple-1.1.jar:/opt/mydir/apache-storm-0.9.5/lib/slf4j-api-1.7.5.jar:/opt/mydir/apache-storm-0.9.5/lib/kryo-2.21.jar:/opt/mydir/apache-storm-0.9.5/lib/tools.logging-0.2.3.jar:/opt/mydir/apache-storm-0.9.5/lib/ring-servlet-0.3.11.jar:/opt/mydir/apache-storm-0.9.5/lib/tools.cli-0.2.4.jar:/opt/mydir/apache-storm-0.9.5/lib/disruptor-2.10.1.jar:/opt/mydir/apache-storm-0.9.5/lib/clj-stacktrace-0.2.2.jar:/opt/mydir/apache-storm-0.9.5/lib/math.numeric-tower-0.0.1.jar:/opt/mydir/apache-storm-0.9.5/lib/ring-jetty-adapter-0.3.11.jar:/opt/mydir/apache-storm-0.9.5/lib/commons-io-2.4.jar:/opt/mydir/apache-storm-0.9.5/lib/servlet-api-2.5.jar:/opt/mydir/apache-storm-0.9.5/lib/log4j-over-slf4j-1.6.6.jar:/opt/mydir/apache-storm-0.9.5/lib/core.incubator-0.1.0.jar:/opt/mydir/apache-storm-0.9.5/lib/asm-4.0.jar:/opt/mydir/apache-storm-0.9.5/lib/hiccup-0.3.6.jar:/opt/mydir/apache-storm-0.9.5/lib/jetty-util-6.1.26.jar:/opt/mydir/apache-storm-0.9.5/lib/tools.macro-0.1.0.jar:/opt/mydir/apache-storm-0.9.5/lib/ring-devel-0.3.11.jar:/opt/mydir/apache-storm-0.9.5/lib/commons-exec-1.1.jar:/opt/mydir/apache-storm-0.9.5/lib/ring-core-1.1.5.jar:/opt/mydir/apache-storm-0.9.5/lib/clout-1.0.1.jar:/opt/mydir/apache-storm-0.9.5/lib/jetty-6.1.26.jar:/opt/mydir/apache-storm-0.9.5/lib/objenesis-1.2.jar:/opt/mydir/apache-storm-0.9.5/lib/logback-core-1.0.13.jar:/opt/mydir/apache-storm-0.9.5/lib/jgrapht-core-0.9.0.jar:/opt/mydir/apache-storm-0.9.5/lib/commons-codec-1.6.jar:/opt/mydir/apache-storm-0.9.5/lib/commons-lang-2.5.jar:/opt/mydir/apache-storm-0.9.5/lib/clojure-1.5.1.jar:/opt/mydir/apache-storm-0.9.5/lib/storm-core-0.9.5.jar:/opt/mydir/apache-storm-0.9.5/lib/chill-java-0.3.5.jar:/opt/mydir/apache-storm-0.9.5/lib/reflectasm-1.07-shaded.jar:/opt/mydir/apache-storm-0.9.5/lib/joda-time-2.0.jar:/opt/mydir/apache-storm-0.9.5/lib/commons-logging-1.1.3.jar:/opt/mydir/apache-storm-0.9.5/lib/compojure-1.1.3.jar:/opt/mydir/apache-storm-0.9.5/lib/clj-time-0.4.1.jar:/opt/mydir/apache-storm-0.9.5/lib/jline-2.11.jar:/opt/mydir/apache-storm-0.9.5/lib/commons-fileupload-1.2.1.jar:/opt/mydir/apache-storm-0.9.5/lib/logback-classic-1.0.13.jar:/opt/mydir/apache-storm-0.9.5/lib/snakeyaml-1.11.jar:/opt/mydir/apache-storm-0.9.5/conf:/var/lib/storm/supervisor/stormdist/my-topology-48-1438607054/stormjar.jar' 'backtype.storm.daemon.worker' 'my-topology-48-1438607054' '63b8c93e-7d6e-4d67-b4f8-957c9650e7ba' '6700' '22528582-09ee-411a-bfbd-65ffecd69be4'
2015-08-03T15:20:57.626+0200 b.s.d.supervisor [INFO] 22528582-09ee-411a-bfbd-65ffecd69be4 still hasn't started
2015-08-03T15:20:58.126+0200 b.s.d.supervisor [INFO] 22528582-09ee-411a-bfbd-65ffecd69be4 still hasn't started
{code}, jstack with -F option forces leaving thread dump. 
When you meet circumstance again, try jstack with -F option. It should be a good bet., Could you please refer my e-mail address from profile and send full logs? Thanks in advance!, Hi [~kabhwan], did you reviece my email?, Hi Alex, sorry I forgot to respond.
I received your email but I didn't have a time to take a look.
I'll have a look when I have some leisure time. Thanks!, You seems not handle heartbeat tuple from multilang bolt process.
Please refer http://storm.apache.org/documentation/Multilang-protocol.html to how to handle heartbeat.
storm-multilang supports it, and AFAIK some 3rd party libraries support it.

Here's related log from jstack. It calls ShellBolt.die() because of heartbeat timeout.
{code}
Thread 3735: (state = IN_NATIVE)
 - java.io.FileInputStream.readBytes(byte[], int, int) @bci=0 (Compiled frame; information may be imprecise)
 - java.io.FileInputStream.read(byte[], int, int) @bci=4, line=255 (Compiled frame)
 - java.io.BufferedInputStream.read1(byte[], int, int) @bci=39, line=284 (Compiled frame)
 - java.io.BufferedInputStream.read(byte[], int, int) @bci=49, line=345 (Compiled frame)
 - sun.nio.cs.StreamDecoder.readBytes() @bci=135, line=284 (Compiled frame)
 - sun.nio.cs.StreamDecoder.implRead(char[], int, int) @bci=112, line=326 (Compiled frame)
 - sun.nio.cs.StreamDecoder.read(char[], int, int) @bci=180, line=178 (Compiled frame)
 - java.io.InputStreamReader.read(char[], int, int) @bci=7, line=184 (Compiled frame)
 - java.io.Reader.read(char[]) @bci=5, line=140 (Interpreted frame)
 - org.apache.commons.io.IOUtils.copyLarge(java.io.Reader, java.io.Writer, char[]) @bci=8, line=2001 (Interpreted frame)
 - org.apache.commons.io.IOUtils.copyLarge(java.io.Reader, java.io.Writer) @bci=7, line=1980 (Interpreted frame)
 - org.apache.commons.io.IOUtils.copy(java.io.Reader, java.io.Writer) @bci=2, line=1957 (Interpreted frame)
 - org.apache.commons.io.IOUtils.copy(java.io.InputStream, java.io.Writer, java.nio.charset.Charset) @bci=15, line=1907 (Interpreted frame)
 - org.apache.commons.io.IOUtils.toString(java.io.InputStream, java.nio.charset.Charset) @bci=11, line=778 (Interpreted frame)
 - org.apache.commons.io.IOUtils.toString(java.io.InputStream) @bci=4, line=759 (Interpreted frame)
 - backtype.storm.utils.ShellProcess.getErrorsString() @bci=11, line=138 (Interpreted frame)
 - backtype.storm.utils.ShellProcess.getProcessTerminationInfoString() @bci=19, line=180 (Interpreted frame)
 - backtype.storm.task.ShellBolt.die(java.lang.Throwable) @bci=21, line=280 (Interpreted frame)
 - backtype.storm.task.ShellBolt.access$400(backtype.storm.task.ShellBolt, java.lang.Throwable) @bci=2, line=69 (Compiled frame)
 - backtype.storm.task.ShellBolt$BoltHeartbeatTimerTask.run() @bci=81, line=305 (Compiled frame)
 - java.util.concurrent.Executors$RunnableAdapter.call() @bci=4, line=511 (Compiled frame)
 - java.util.concurrent.FutureTask.runAndReset() @bci=47, line=308 (Compiled frame)
 - java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask) @bci=1, line=180 (Compiled frame)
 - java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run() @bci=37, line=294 (Compiled frame)
 - java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker) @bci=95, line=1142 (Interpreted frame)
 - java.util.concurrent.ThreadPoolExecutor$Worker.run() @bci=5, line=617 (Interpreted frame)
 - java.lang.Thread.run() @bci=11, line=745 (Interpreted frame)
{code}

And here's related log from worker log.
{code}
2015-08-03T16:01:25.762+0200 b.s.t.ShellBolt [ERROR] Halting process: ShellBolt died.
java.lang.RuntimeException: subprocess heartbeat timeout
	at backtype.storm.task.ShellBolt$BoltHeartbeatTimerTask.run(ShellBolt.java:305) [storm-core-0.9.5.jar:0.9.5]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [na:1.8.0_45]
	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308) [na:1.8.0_45]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180) [na:1.8.0_45]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294) [na:1.8.0_45]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_45]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_45]
	at java.lang.Thread.run(Thread.java:745) [na:1.8.0_45]
{code}

In other words, topology is not frozen, but workers were suicided themselves cause of heartbeat timeout., Hi [~kabhwan],

We're using https://github.com/apache/storm/blob/master/storm-multilang/python/src/main/resources/resources/storm.py and it handles heartbeat tuples. In fact, we're able to run the topology for hours sometimes. I don't believe it's a heartbeat problem, otherwise it'd be reproduced every time we deploy the topology.

I think that heartbeat problem was caused by the {{kill -SIGABRT}} to the python process. If we don't execute the {{kill}}, that info is not present in the logs., OK, then could you run jstack when topology seems frozen, without signal to python process?, Sure, no problem. I'll post it here ASAP. Thanks :), Done. This is the result:

{code}
Attaching to process ID 7636, please wait...
Debugger attached successfully.
Server compiler detected.
JVM version is 25.45-b02
Deadlock Detection:

No deadlocks found.

Thread 7761: (state = BLOCKED)
 - sun.misc.Unsafe.park(boolean, long) @bci=0 (Compiled frame; information may be imprecise)
 - java.util.concurrent.locks.LockSupport.park(java.lang.Object) @bci=14, line=175 (Compiled frame)
 - java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await() @bci=42, line=2039 (Compiled frame)
 - java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take() @bci=100, line=1088 (Compiled frame)
 - java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take() @bci=1, line=809 (Compiled frame)
 - java.util.concurrent.ThreadPoolExecutor.getTask() @bci=149, line=1067 (Compiled frame)
 - java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker) @bci=26, line=1127 (Interpreted frame)
 - java.util.concurrent.ThreadPoolExecutor$Worker.run() @bci=5, line=617 (Interpreted frame)
 - java.lang.Thread.run() @bci=11, line=745 (Interpreted frame)


Thread 7760: (state = BLOCKED)
 - sun.misc.Unsafe.park(boolean, long) @bci=0 (Compiled frame; information may be imprecise)
 - java.util.concurrent.locks.LockSupport.parkNanos(java.lang.Object, long) @bci=20, line=215 (Compiled frame)
 - java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(long) @bci=78, line=2078 (Compiled frame)
 - java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take() @bci=124, line=1093 (Compiled frame)
 - java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take() @bci=1, line=809 (Compiled frame)
 - java.util.concurrent.ThreadPoolExecutor.getTask() @bci=149, line=1067 (Compiled frame)
 - java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker) @bci=26, line=1127 (Interpreted frame)
 - java.util.concurrent.ThreadPoolExecutor$Worker.run() @bci=5, line=617 (Interpreted frame)
 - java.lang.Thread.run() @bci=11, line=745 (Interpreted frame)


Thread 7759: (state = BLOCKED)
 - sun.misc.Unsafe.park(boolean, long) @bci=0 (Compiled frame; information may be imprecise)
 - java.util.concurrent.locks.LockSupport.park(java.lang.Object) @bci=14, line=175 (Interpreted frame)
 - java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await() @bci=42, line=2039 (Interpreted frame)
 - java.util.concurrent.DelayQueue.take() @bci=28, line=211 (Interpreted frame)
 - java.util.concurrent.DelayQueue.take() @bci=1, line=70 (Interpreted frame)
 - org.apache.curator.framework.imps.CuratorFrameworkImpl.backgroundOperationsLoop() @bci=10, line=781 (Interpreted frame)
 - org.apache.curator.framework.imps.CuratorFrameworkImpl.access$400(org.apache.curator.framework.imps.CuratorFrameworkImpl) @bci=1, line=57 (Interpreted frame)
 - org.apache.curator.framework.imps.CuratorFrameworkImpl$4.call() @bci=4, line=275 (Interpreted frame)
 - java.util.concurrent.FutureTask.run() @bci=42, line=266 (Interpreted frame)
 - java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker) @bci=95, line=1142 (Interpreted frame)
 - java.util.concurrent.ThreadPoolExecutor$Worker.run() @bci=5, line=617 (Interpreted frame)
 - java.lang.Thread.run() @bci=11, line=745 (Interpreted frame)


Thread 7758: (state = BLOCKED)
 - sun.misc.Unsafe.park(boolean, long) @bci=0 (Compiled frame; information may be imprecise)
 - java.util.concurrent.locks.LockSupport.park(java.lang.Object) @bci=14, line=175 (Interpreted frame)
 - java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await() @bci=42, line=2039 (Interpreted frame)
 - java.util.concurrent.LinkedBlockingQueue.take() @bci=29, line=442 (Interpreted frame)
 - org.apache.zookeeper.ClientCnxn$EventThread.run() @bci=9, line=494 (Interpreted frame)


Thread 7757: (state = IN_NATIVE)
 - sun.nio.ch.EPollArrayWrapper.epollWait(long, int, long, int) @bci=0 (Compiled frame; information may be imprecise)
 - sun.nio.ch.EPollArrayWrapper.poll(long) @bci=18, line=269 (Compiled frame)
 - sun.nio.ch.EPollSelectorImpl.doSelect(long) @bci=28, line=79 (Compiled frame)
 - sun.nio.ch.SelectorImpl.lockAndDoSelect(long) @bci=37, line=86 (Compiled frame)
 - sun.nio.ch.SelectorImpl.select(long) @bci=30, line=97 (Compiled frame)
 - org.apache.zookeeper.ClientCnxnSocketNIO.doTransport(int, java.util.List, java.util.LinkedList, org.apache.zookeeper.ClientCnxn) @bci=6, line=349 (Compiled frame)
 - org.apache.zookeeper.ClientCnxn$SendThread.run() @bci=604, line=1081 (Interpreted frame)


Thread 7756: (state = BLOCKED)
 - sun.misc.Unsafe.park(boolean, long) @bci=0 (Compiled frame; information may be imprecise)
 - java.util.concurrent.locks.LockSupport.park(java.lang.Object) @bci=14, line=175 (Interpreted frame)
 - java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await() @bci=42, line=2039 (Interpreted frame)
 - java.util.concurrent.ArrayBlockingQueue.take() @bci=20, line=403 (Interpreted frame)
 - org.apache.curator.framework.state.ConnectionStateManager.processEvents() @bci=13, line=208 (Interpreted frame)
 - org.apache.curator.framework.state.ConnectionStateManager.access$000(org.apache.curator.framework.state.ConnectionStateManager) @bci=1, line=42 (Interpreted frame)
 - org.apache.curator.framework.state.ConnectionStateManager$1.call() @bci=4, line=110 (Interpreted frame)
 - java.util.concurrent.FutureTask.run() @bci=42, line=266 (Interpreted frame)
 - java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker) @bci=95, line=1142 (Interpreted frame)
 - java.util.concurrent.ThreadPoolExecutor$Worker.run() @bci=5, line=617 (Interpreted frame)
 - java.lang.Thread.run() @bci=11, line=745 (Interpreted frame)


Thread 7755: (state = IN_NATIVE)
 - java.io.FileInputStream.readBytes(byte[], int, int) @bci=0 (Compiled frame; information may be imprecise)
 - java.io.FileInputStream.read(byte[], int, int) @bci=4, line=255 (Compiled frame)
 - java.io.BufferedInputStream.read1(byte[], int, int) @bci=39, line=284 (Compiled frame)
 - java.io.BufferedInputStream.read(byte[], int, int) @bci=49, line=345 (Compiled frame)
 - sun.nio.cs.StreamDecoder.readBytes() @bci=135, line=284 (Compiled frame)
 - sun.nio.cs.StreamDecoder.implRead(char[], int, int) @bci=112, line=326 (Compiled frame)
 - sun.nio.cs.StreamDecoder.read(char[], int, int) @bci=180, line=178 (Compiled frame)
 - java.io.InputStreamReader.read(char[], int, int) @bci=7, line=184 (Compiled frame)
 - java.io.Reader.read(char[]) @bci=5, line=140 (Interpreted frame)
 - org.apache.commons.io.IOUtils.copyLarge(java.io.Reader, java.io.Writer, char[]) @bci=8, line=2001 (Interpreted frame)
 - org.apache.commons.io.IOUtils.copyLarge(java.io.Reader, java.io.Writer) @bci=7, line=1980 (Interpreted frame)
 - org.apache.commons.io.IOUtils.copy(java.io.Reader, java.io.Writer) @bci=2, line=1957 (Interpreted frame)
 - org.apache.commons.io.IOUtils.copy(java.io.InputStream, java.io.Writer, java.nio.charset.Charset) @bci=15, line=1907 (Interpreted frame)
 - org.apache.commons.io.IOUtils.toString(java.io.InputStream, java.nio.charset.Charset) @bci=11, line=778 (Interpreted frame)
 - org.apache.commons.io.IOUtils.toString(java.io.InputStream) @bci=4, line=759 (Interpreted frame)
 - backtype.storm.utils.ShellProcess.getErrorsString() @bci=11, line=138 (Interpreted frame)
 - backtype.storm.utils.ShellProcess.getProcessTerminationInfoString() @bci=19, line=180 (Interpreted frame)
 - backtype.storm.task.ShellBolt.die(java.lang.Throwable) @bci=21, line=280 (Interpreted frame)
 - backtype.storm.task.ShellBolt.access$400(backtype.storm.task.ShellBolt, java.lang.Throwable) @bci=2, line=69 (Interpreted frame)
 - backtype.storm.task.ShellBolt$BoltHeartbeatTimerTask.run() @bci=81, line=305 (Interpreted frame)
 - java.util.concurrent.Executors$RunnableAdapter.call() @bci=4, line=511 (Compiled frame)
 - java.util.concurrent.FutureTask.runAndReset() @bci=47, line=308 (Compiled frame)
 - java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask) @bci=1, line=180 (Compiled frame)
 - java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run() @bci=37, line=294 (Compiled frame)
 - java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker) @bci=95, line=1142 (Compiled frame)
 - java.util.concurrent.ThreadPoolExecutor$Worker.run() @bci=5, line=617 (Interpreted frame)
 - java.lang.Thread.run() @bci=11, line=745 (Interpreted frame)


Thread 7754: (state = BLOCKED)
 - java.io.BufferedInputStream.available() @bci=0, line=409 (Compiled frame)
 - backtype.storm.utils.ShellProcess.logErrorStream() @bci=4, line=125 (Compiled frame)
 - backtype.storm.utils.ShellProcess.writeBoltMsg(backtype.storm.multilang.BoltMsg) @bci=11, line=108 (Compiled frame)
 - backtype.storm.task.ShellBolt$BoltWriterRunnable.run() @bci=108, line=361 (Compiled frame)
 - java.lang.Thread.run() @bci=11, line=745 (Interpreted frame)


Thread 7753: (state = IN_NATIVE)
 - java.io.FileInputStream.readBytes(byte[], int, int) @bci=0 (Compiled frame; information may be imprecise)
 - java.io.FileInputStream.read(byte[], int, int) @bci=4, line=255 (Compiled frame)
 - java.io.BufferedInputStream.read1(byte[], int, int) @bci=39, line=284 (Compiled frame)
 - java.io.BufferedInputStream.read(byte[], int, int) @bci=49, line=345 (Compiled frame)
 - sun.nio.cs.StreamDecoder.readBytes() @bci=135, line=284 (Compiled frame)
 - sun.nio.cs.StreamDecoder.implRead(char[], int, int) @bci=112, line=326 (Compiled frame)
 - sun.nio.cs.StreamDecoder.read(char[], int, int) @bci=180, line=178 (Compiled frame)
 - java.io.InputStreamReader.read(char[], int, int) @bci=7, line=184 (Compiled frame)
 - java.io.BufferedReader.fill() @bci=145, line=161 (Compiled frame)
 - java.io.BufferedReader.readLine(boolean) @bci=44, line=324 (Compiled frame)
 - java.io.BufferedReader.readLine() @bci=2, line=389 (Compiled frame)
 - backtype.storm.multilang.JsonSerializer.readString() @bci=12, line=179 (Compiled frame)
 - backtype.storm.multilang.JsonSerializer.readMessage() @bci=1, line=166 (Compiled frame)
 - backtype.storm.multilang.JsonSerializer.readShellMsg() @bci=1, line=100 (Compiled frame)
 - backtype.storm.utils.ShellProcess.readShellMsg() @bci=4, line=99 (Compiled frame)
 - backtype.storm.task.ShellBolt$BoltReaderRunnable.run() @bci=17, line=318 (Compiled frame)
 - java.lang.Thread.run() @bci=11, line=745 (Interpreted frame)


Thread 7752: (state = IN_NATIVE)
 - java.io.FileInputStream.readBytes(byte[], int, int) @bci=0 (Compiled frame; information may be imprecise)
 - java.io.FileInputStream.read(byte[], int, int) @bci=4, line=255 (Compiled frame)
 - java.io.BufferedInputStream.read1(byte[], int, int) @bci=39, line=284 (Compiled frame)
 - java.io.BufferedInputStream.read(byte[], int, int) @bci=49, line=345 (Compiled frame)
 - sun.nio.cs.StreamDecoder.readBytes() @bci=135, line=284 (Compiled frame)
 - sun.nio.cs.StreamDecoder.implRead(char[], int, int) @bci=112, line=326 (Compiled frame)
 - sun.nio.cs.StreamDecoder.read(char[], int, int) @bci=180, line=178 (Compiled frame)
 - java.io.InputStreamReader.read(char[], int, int) @bci=7, line=184 (Compiled frame)
 - java.io.Reader.read(char[]) @bci=5, line=140 (Interpreted frame)
 - org.apache.commons.io.IOUtils.copyLarge(java.io.Reader, java.io.Writer, char[]) @bci=8, line=2001 (Interpreted frame)
 - org.apache.commons.io.IOUtils.copyLarge(java.io.Reader, java.io.Writer) @bci=7, line=1980 (Interpreted frame)
 - org.apache.commons.io.IOUtils.copy(java.io.Reader, java.io.Writer) @bci=2, line=1957 (Interpreted frame)
 - org.apache.commons.io.IOUtils.copy(java.io.InputStream, java.io.Writer, java.nio.charset.Charset) @bci=15, line=1907 (Interpreted frame)
 - org.apache.commons.io.IOUtils.toString(java.io.InputStream, java.nio.charset.Charset) @bci=11, line=778 (Interpreted frame)
 - org.apache.commons.io.IOUtils.toString(java.io.InputStream) @bci=4, line=759 (Interpreted frame)
 - backtype.storm.utils.ShellProcess.getErrorsString() @bci=11, line=138 (Interpreted frame)
 - backtype.storm.utils.ShellProcess.getProcessTerminationInfoString() @bci=19, line=180 (Interpreted frame)
 - backtype.storm.task.ShellBolt.die(java.lang.Throwable) @bci=21, line=280 (Interpreted frame)
 - backtype.storm.task.ShellBolt.access$400(backtype.storm.task.ShellBolt, java.lang.Throwable) @bci=2, line=69 (Interpreted frame)
 - backtype.storm.task.ShellBolt$BoltHeartbeatTimerTask.run() @bci=81, line=305 (Interpreted frame)
 - java.util.concurrent.Executors$RunnableAdapter.call() @bci=4, line=511 (Compiled frame)
 - java.util.concurrent.FutureTask.runAndReset() @bci=47, line=308 (Compiled frame)
 - java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask) @bci=1, line=180 (Compiled frame)
 - java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run() @bci=37, line=294 (Compiled frame)
 - java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker) @bci=95, line=1142 (Compiled frame)
 - java.util.concurrent.ThreadPoolExecutor$Worker.run() @bci=5, line=617 (Interpreted frame)
 - java.lang.Thread.run() @bci=11, line=745 (Interpreted frame)


Thread 7751: (state = BLOCKED)
 - java.io.BufferedInputStream.available() @bci=0, line=409 (Compiled frame)
 - backtype.storm.utils.ShellProcess.logErrorStream() @bci=4, line=125 (Compiled frame)
 - backtype.storm.utils.ShellProcess.writeBoltMsg(backtype.storm.multilang.BoltMsg) @bci=11, line=108 (Compiled frame)
 - backtype.storm.task.ShellBolt$BoltWriterRunnable.run() @bci=108, line=361 (Compiled frame)
 - java.lang.Thread.run() @bci=11, line=745 (Interpreted frame)


Thread 7750: (state = IN_NATIVE)
 - java.io.FileInputStream.readBytes(byte[], int, int) @bci=0 (Compiled frame; information may be imprecise)
 - java.io.FileInputStream.read(byte[], int, int) @bci=4, line=255 (Compiled frame)
 - java.io.BufferedInputStream.read1(byte[], int, int) @bci=39, line=284 (Compiled frame)
 - java.io.BufferedInputStream.read(byte[], int, int) @bci=49, line=345 (Compiled frame)
 - sun.nio.cs.StreamDecoder.readBytes() @bci=135, line=284 (Compiled frame)
 - sun.nio.cs.StreamDecoder.implRead(char[], int, int) @bci=112, line=326 (Compiled frame)
 - sun.nio.cs.StreamDecoder.read(char[], int, int) @bci=180, line=178 (Compiled frame)
 - java.io.InputStreamReader.read(char[], int, int) @bci=7, line=184 (Compiled frame)
 - java.io.BufferedReader.fill() @bci=145, line=161 (Compiled frame)
 - java.io.BufferedReader.readLine(boolean) @bci=44, line=324 (Compiled frame)
 - java.io.BufferedReader.readLine() @bci=2, line=389 (Compiled frame)
 - backtype.storm.multilang.JsonSerializer.readString() @bci=12, line=179 (Compiled frame)
 - backtype.storm.multilang.JsonSerializer.readMessage() @bci=1, line=166 (Compiled frame)
 - backtype.storm.multilang.JsonSerializer.readShellMsg() @bci=1, line=100 (Compiled frame)
 - backtype.storm.utils.ShellProcess.readShellMsg() @bci=4, line=99 (Compiled frame)
 - backtype.storm.task.ShellBolt$BoltReaderRunnable.run() @bci=17, line=318 (Compiled frame)
 - java.lang.Thread.run() @bci=11, line=745 (Interpreted frame)


Thread 7749: (state = BLOCKED)
 - sun.misc.Unsafe.park(boolean, long) @bci=0 (Compiled frame; information may be imprecise)
 - java.util.concurrent.locks.LockSupport.park(java.lang.Object) @bci=14, line=175 (Interpreted frame)
 - java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await() @bci=42, line=2039 (Interpreted frame)
 - java.util.concurrent.DelayQueue.take() @bci=28, line=211 (Interpreted frame)
 - java.util.concurrent.DelayQueue.take() @bci=1, line=70 (Interpreted frame)
 - org.apache.curator.framework.imps.CuratorFrameworkImpl.backgroundOperationsLoop() @bci=10, line=781 (Interpreted frame)
 - org.apache.curator.framework.imps.CuratorFrameworkImpl.access$400(org.apache.curator.framework.imps.CuratorFrameworkImpl) @bci=1, line=57 (Interpreted frame)
 - org.apache.curator.framework.imps.CuratorFrameworkImpl$4.call() @bci=4, line=275 (Interpreted frame)
 - java.util.concurrent.FutureTask.run() @bci=42, line=266 (Interpreted frame)
 - java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker) @bci=95, line=1142 (Interpreted frame)
 - java.util.concurrent.ThreadPoolExecutor$Worker.run() @bci=5, line=617 (Interpreted frame)
 - java.lang.Thread.run() @bci=11, line=745 (Interpreted frame)


Thread 7748: (state = BLOCKED)
 - sun.misc.Unsafe.park(boolean, long) @bci=0 (Compiled frame; information may be imprecise)
 - java.util.concurrent.locks.LockSupport.park(java.lang.Object) @bci=14, line=175 (Interpreted frame)
 - java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await() @bci=42, line=2039 (Interpreted frame)
 - java.util.concurrent.LinkedBlockingQueue.take() @bci=29, line=442 (Interpreted frame)
 - org.apache.zookeeper.ClientCnxn$EventThread.run() @bci=9, line=494 (Interpreted frame)


Thread 7747: (state = IN_NATIVE)
 - sun.nio.ch.EPollArrayWrapper.epollWait(long, int, long, int) @bci=0 (Compiled frame; information may be imprecise)
 - sun.nio.ch.EPollArrayWrapper.poll(long) @bci=18, line=269 (Compiled frame)
 - sun.nio.ch.EPollSelectorImpl.doSelect(long) @bci=28, line=79 (Compiled frame)
 - sun.nio.ch.SelectorImpl.lockAndDoSelect(long) @bci=37, line=86 (Compiled frame)
 - sun.nio.ch.SelectorImpl.select(long) @bci=30, line=97 (Compiled frame)
 - org.apache.zookeeper.ClientCnxnSocketNIO.doTransport(int, java.util.List, java.util.LinkedList, org.apache.zookeeper.ClientCnxn) @bci=6, line=349 (Compiled frame)
 - org.apache.zookeeper.ClientCnxn$SendThread.run() @bci=604, line=1081 (Interpreted frame)


Thread 7746: (state = BLOCKED)
 - sun.misc.Unsafe.park(boolean, long) @bci=0 (Compiled frame; information may be imprecise)
 - java.util.concurrent.locks.LockSupport.park(java.lang.Object) @bci=14, line=175 (Interpreted frame)
 - java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await() @bci=42, line=2039 (Interpreted frame)
 - java.util.concurrent.ArrayBlockingQueue.take() @bci=20, line=403 (Interpreted frame)
 - org.apache.curator.framework.state.ConnectionStateManager.processEvents() @bci=13, line=208 (Interpreted frame)
 - org.apache.curator.framework.state.ConnectionStateManager.access$000(org.apache.curator.framework.state.ConnectionStateManager) @bci=1, line=42 (Interpreted frame)
 - org.apache.curator.framework.state.ConnectionStateManager$1.call() @bci=4, line=110 (Interpreted frame)
 - java.util.concurrent.FutureTask.run() @bci=42, line=266 (Interpreted frame)
 - java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker) @bci=95, line=1142 (Interpreted frame)
 - java.util.concurrent.ThreadPoolExecutor$Worker.run() @bci=5, line=617 (Interpreted frame)
 - java.lang.Thread.run() @bci=11, line=745 (Interpreted frame)


Thread 7745: (state = BLOCKED)
 - sun.misc.Unsafe.park(boolean, long) @bci=0 (Compiled frame; information may be imprecise)
 - java.util.concurrent.locks.LockSupport.park(java.lang.Object) @bci=14, line=175 (Interpreted frame)
 - java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await() @bci=42, line=2039 (Interpreted frame)
 - java.util.concurrent.DelayQueue.take() @bci=28, line=211 (Interpreted frame)
 - java.util.concurrent.DelayQueue.take() @bci=1, line=70 (Interpreted frame)
 - org.apache.curator.framework.imps.CuratorFrameworkImpl.backgroundOperationsLoop() @bci=10, line=781 (Interpreted frame)
 - org.apache.curator.framework.imps.CuratorFrameworkImpl.access$400(org.apache.curator.framework.imps.CuratorFrameworkImpl) @bci=1, line=57 (Interpreted frame)
 - org.apache.curator.framework.imps.CuratorFrameworkImpl$4.call() @bci=4, line=275 (Interpreted frame)
 - java.util.concurrent.FutureTask.run() @bci=42, line=266 (Interpreted frame)
 - java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker) @bci=95, line=1142 (Interpreted frame)
 - java.util.concurrent.ThreadPoolExecutor$Worker.run() @bci=5, line=617 (Interpreted frame)
 - java.lang.Thread.run() @bci=11, line=745 (Interpreted frame)


Thread 7744: (state = BLOCKED)
 - sun.misc.Unsafe.park(boolean, long) @bci=0 (Compiled frame; information may be imprecise)
 - java.util.concurrent.locks.LockSupport.park(java.lang.Object) @bci=14, line=175 (Interpreted frame)
 - java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await() @bci=42, line=2039 (Interpreted frame)
 - java.util.concurrent.LinkedBlockingQueue.take() @bci=29, line=442 (Interpreted frame)
 - org.apache.zookeeper.ClientCnxn$EventThread.run() @bci=9, line=494 (Interpreted frame)


Thread 7743: (state = IN_NATIVE)
 - sun.nio.ch.EPollArrayWrapper.epollWait(long, int, long, int) @bci=0 (Compiled frame; information may be imprecise)
 - sun.nio.ch.EPollArrayWrapper.poll(long) @bci=18, line=269 (Compiled frame)
 - sun.nio.ch.EPollSelectorImpl.doSelect(long) @bci=28, line=79 (Compiled frame)
 - sun.nio.ch.SelectorImpl.lockAndDoSelect(long) @bci=37, line=86 (Compiled frame)
 - sun.nio.ch.SelectorImpl.select(long) @bci=30, line=97 (Compiled frame)
 - org.apache.zookeeper.ClientCnxnSocketNIO.doTransport(int, java.util.List, java.util.LinkedList, org.apache.zookeeper.ClientCnxn) @bci=6, line=349 (Compiled frame)
 - org.apache.zookeeper.ClientCnxn$SendThread.run() @bci=604, line=1081 (Interpreted frame)


Thread 7738: (state = BLOCKED)
 - sun.misc.Unsafe.park(boolean, long) @bci=0 (Compiled frame; information may be imprecise)
 - java.util.concurrent.locks.LockSupport.park(java.lang.Object) @bci=14, line=175 (Interpreted frame)
 - java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await() @bci=42, line=2039 (Interpreted frame)
 - java.util.concurrent.ArrayBlockingQueue.take() @bci=20, line=403 (Interpreted frame)
 - org.apache.curator.framework.state.ConnectionStateManager.processEvents() @bci=13, line=208 (Interpreted frame)
 - org.apache.curator.framework.state.ConnectionStateManager.access$000(org.apache.curator.framework.state.ConnectionStateManager) @bci=1, line=42 (Interpreted frame)
 - org.apache.curator.framework.state.ConnectionStateManager$1.call() @bci=4, line=110 (Interpreted frame)
 - java.util.concurrent.FutureTask.run() @bci=42, line=266 (Interpreted frame)
 - java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker) @bci=95, line=1142 (Interpreted frame)
 - java.util.concurrent.ThreadPoolExecutor$Worker.run() @bci=5, line=617 (Interpreted frame)
 - java.lang.Thread.run() @bci=11, line=745 (Interpreted frame)


Thread 7737: (state = BLOCKED)
 - sun.misc.Unsafe.park(boolean, long) @bci=0 (Compiled frame; information may be imprecise)
 - java.util.concurrent.locks.LockSupport.parkNanos(java.lang.Object, long) @bci=20, line=215 (Compiled frame)
 - java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(long) @bci=78, line=2078 (Compiled frame)
 - java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take() @bci=124, line=1093 (Compiled frame)
 - java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take() @bci=1, line=809 (Compiled frame)
 - java.util.concurrent.ThreadPoolExecutor.getTask() @bci=149, line=1067 (Compiled frame)
 - java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker) @bci=26, line=1127 (Compiled frame)
 - java.util.concurrent.ThreadPoolExecutor$Worker.run() @bci=5, line=617 (Interpreted frame)
 - java.lang.Thread.run() @bci=11, line=745 (Interpreted frame)


Thread 7736: (state = BLOCKED)
 - sun.misc.Unsafe.park(boolean, long) @bci=0 (Compiled frame; information may be imprecise)
 - java.util.concurrent.locks.LockSupport.parkNanos(java.lang.Object, long) @bci=20, line=215 (Compiled frame)
 - java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(long) @bci=78, line=2078 (Compiled frame)
 - java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take() @bci=124, line=1093 (Compiled frame)
 - java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take() @bci=1, line=809 (Compiled frame)
 - java.util.concurrent.ThreadPoolExecutor.getTask() @bci=149, line=1067 (Compiled frame)
 - java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker) @bci=26, line=1127 (Compiled frame)
 - java.util.concurrent.ThreadPoolExecutor$Worker.run() @bci=5, line=617 (Interpreted frame)
 - java.lang.Thread.run() @bci=11, line=745 (Interpreted frame)


Thread 7735: (state = IN_NATIVE)
 - java.lang.UNIXProcess.waitForProcessExit(int) @bci=0 (Interpreted frame)
 - java.lang.UNIXProcess.lambda$initStreams$266() @bci=5, line=290 (Interpreted frame)
 - java.lang.UNIXProcess$$Lambda$9.run() @bci=4 (Interpreted frame)
 - java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker) @bci=95, line=1142 (Interpreted frame)
 - java.util.concurrent.ThreadPoolExecutor$Worker.run() @bci=5, line=617 (Interpreted frame)
 - java.lang.Thread.run() @bci=11, line=745 (Interpreted frame)


Thread 7733: (state = BLOCKED)
 - sun.misc.Unsafe.park(boolean, long) @bci=0 (Compiled frame; information may be imprecise)
 - java.util.concurrent.locks.LockSupport.parkNanos(java.lang.Object, long) @bci=20, line=215 (Compiled frame)
 - java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(long) @bci=78, line=2078 (Compiled frame)
 - java.util.concurrent.LinkedBlockingQueue.poll(long, java.util.concurrent.TimeUnit) @bci=62, line=467 (Compiled frame)
 - backtype.storm.task.ShellBolt$BoltWriterRunnable.run() @bci=86, line=359 (Compiled frame)
 - java.lang.Thread.run() @bci=11, line=745 (Interpreted frame)


Thread 7732: (state = BLOCKED)
 - sun.misc.Unsafe.park(boolean, long) @bci=0 (Compiled frame; information may be imprecise)
 - java.util.concurrent.locks.LockSupport.parkNanos(java.lang.Object, long) @bci=20, line=215 (Compiled frame)
 - java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(long) @bci=78, line=2078 (Compiled frame)
 - java.util.concurrent.LinkedBlockingQueue.poll(long, java.util.concurrent.TimeUnit) @bci=62, line=467 (Compiled frame)
 - backtype.storm.task.ShellBolt$BoltWriterRunnable.run() @bci=86, line=359 (Compiled frame)
 - java.lang.Thread.run() @bci=11, line=745 (Interpreted frame)


Thread 7731: (state = IN_NATIVE)
 - java.io.FileInputStream.readBytes(byte[], int, int) @bci=0 (Compiled frame; information may be imprecise)
 - java.io.FileInputStream.read(byte[], int, int) @bci=4, line=255 (Compiled frame)
 - java.io.BufferedInputStream.read1(byte[], int, int) @bci=39, line=284 (Compiled frame)
 - java.io.BufferedInputStream.read(byte[], int, int) @bci=49, line=345 (Compiled frame)
 - sun.nio.cs.StreamDecoder.readBytes() @bci=135, line=284 (Compiled frame)
 - sun.nio.cs.StreamDecoder.implRead(char[], int, int) @bci=112, line=326 (Compiled frame)
 - sun.nio.cs.StreamDecoder.read(char[], int, int) @bci=180, line=178 (Compiled frame)
 - java.io.InputStreamReader.read(char[], int, int) @bci=7, line=184 (Compiled frame)
 - java.io.BufferedReader.fill() @bci=145, line=161 (Compiled frame)
 - java.io.BufferedReader.readLine(boolean) @bci=44, line=324 (Compiled frame)
 - java.io.BufferedReader.readLine() @bci=2, line=389 (Compiled frame)
 - backtype.storm.multilang.JsonSerializer.readString() @bci=12, line=179 (Compiled frame)
 - backtype.storm.multilang.JsonSerializer.readMessage() @bci=1, line=166 (Compiled frame)
 - backtype.storm.multilang.JsonSerializer.readShellMsg() @bci=1, line=100 (Compiled frame)
 - backtype.storm.utils.ShellProcess.readShellMsg() @bci=4, line=99 (Compiled frame)
 - backtype.storm.task.ShellBolt$BoltReaderRunnable.run() @bci=17, line=318 (Compiled frame)
 - java.lang.Thread.run() @bci=11, line=745 (Interpreted frame)


Thread 7730: (state = IN_NATIVE)
 - java.io.FileInputStream.readBytes(byte[], int, int) @bci=0 (Compiled frame; information may be imprecise)
 - java.io.FileInputStream.read(byte[], int, int) @bci=4, line=255 (Compiled frame)
 - java.io.BufferedInputStream.read1(byte[], int, int) @bci=39, line=284 (Compiled frame)
 - java.io.BufferedInputStream.read(byte[], int, int) @bci=49, line=345 (Compiled frame)
 - sun.nio.cs.StreamDecoder.readBytes() @bci=135, line=284 (Compiled frame)
 - sun.nio.cs.StreamDecoder.implRead(char[], int, int) @bci=112, line=326 (Compiled frame)
 - sun.nio.cs.StreamDecoder.read(char[], int, int) @bci=180, line=178 (Compiled frame)
 - java.io.InputStreamReader.read(char[], int, int) @bci=7, line=184 (Compiled frame)
 - java.io.BufferedReader.fill() @bci=145, line=161 (Compiled frame)
 - java.io.BufferedReader.readLine(boolean) @bci=44, line=324 (Compiled frame)
 - java.io.BufferedReader.readLine() @bci=2, line=389 (Compiled frame)
 - backtype.storm.multilang.JsonSerializer.readString() @bci=12, line=179 (Compiled frame)
 - backtype.storm.multilang.JsonSerializer.readMessage() @bci=1, line=166 (Compiled frame)
 - backtype.storm.multilang.JsonSerializer.readShellMsg() @bci=1, line=100 (Compiled frame)
 - backtype.storm.utils.ShellProcess.readShellMsg() @bci=4, line=99 (Compiled frame)
 - backtype.storm.task.ShellBolt$BoltReaderRunnable.run() @bci=17, line=318 (Compiled frame)
 - java.lang.Thread.run() @bci=11, line=745 (Interpreted frame)


Thread 7729: (state = IN_NATIVE)
 - java.lang.UNIXProcess.waitForProcessExit(int) @bci=0 (Interpreted frame)
 - java.lang.UNIXProcess.lambda$initStreams$266() @bci=5, line=290 (Interpreted frame)
 - java.lang.UNIXProcess$$Lambda$9.run() @bci=4 (Interpreted frame)
 - java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker) @bci=95, line=1142 (Interpreted frame)
 - java.util.concurrent.ThreadPoolExecutor$Worker.run() @bci=5, line=617 (Interpreted frame)
 - java.lang.Thread.run() @bci=11, line=745 (Interpreted frame)


Thread 7723: (state = IN_NATIVE)
 - java.lang.UNIXProcess.waitForProcessExit(int) @bci=0 (Interpreted frame)
 - java.lang.UNIXProcess.lambda$initStreams$266() @bci=5, line=290 (Interpreted frame)
 - java.lang.UNIXProcess$$Lambda$9.run() @bci=4 (Interpreted frame)
 - java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker) @bci=95, line=1142 (Interpreted frame)
 - java.util.concurrent.ThreadPoolExecutor$Worker.run() @bci=5, line=617 (Interpreted frame)
 - java.lang.Thread.run() @bci=11, line=745 (Interpreted frame)


Thread 7722: (state = IN_NATIVE)
 - java.lang.UNIXProcess.waitForProcessExit(int) @bci=0 (Interpreted frame)
 - java.lang.UNIXProcess.lambda$initStreams$266() @bci=5, line=290 (Interpreted frame)
 - java.lang.UNIXProcess$$Lambda$9.run() @bci=4 (Interpreted frame)
 - java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker) @bci=95, line=1142 (Interpreted frame)
 - java.util.concurrent.ThreadPoolExecutor$Worker.run() @bci=5, line=617 (Interpreted frame)
 - java.lang.Thread.run() @bci=11, line=745 (Interpreted frame)


Thread 7637: (state = BLOCKED)


Thread 7719: (state = BLOCKED)
 - sun.misc.Unsafe.park(boolean, long) @bci=0 (Compiled frame; information may be imprecise)
 - java.util.concurrent.locks.LockSupport.parkNanos(java.lang.Object, long) @bci=20, line=215 (Compiled frame)
 - java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(long, java.util.concurrent.TimeUnit) @bci=97, line=2163 (Compiled frame)
 - com.lmax.disruptor.BlockingWaitStrategy.waitFor(long, com.lmax.disruptor.Sequence, com.lmax.disruptor.Sequence[], com.lmax.disruptor.SequenceBarrier, long, java.util.concurrent.TimeUnit) @bci=58, line=87 (Compiled frame)
 - com.lmax.disruptor.ProcessingSequenceBarrier.waitFor(long, long, java.util.concurrent.TimeUnit) @bci=21, line=54 (Compiled frame)
 - backtype.storm.utils.DisruptorQueue.consumeBatchWhenAvailable(com.lmax.disruptor.EventHandler) @bci=21, line=97 (Compiled frame)
 - backtype.storm.disruptor$consume_batch_when_available.invoke(java.lang.Object, java.lang.Object) @bci=12, line=80 (Compiled frame)
 - backtype.storm.disruptor$consume_loop_STAR_$fn__1618.invoke() @bci=17, line=94 (Compiled frame)
 - backtype.storm.util$async_loop$fn__459.invoke() @bci=39, line=463 (Compiled frame)
 - clojure.lang.AFn.run() @bci=1, line=24 (Interpreted frame)
 - java.lang.Thread.run() @bci=11, line=745 (Interpreted frame)


Thread 7718: (state = BLOCKED)
 - sun.misc.Unsafe.park(boolean, long) @bci=0 (Compiled frame; information may be imprecise)
 - java.util.concurrent.locks.LockSupport.parkNanos(java.lang.Object, long) @bci=20, line=215 (Compiled frame)
 - java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(long, java.util.concurrent.TimeUnit) @bci=97, line=2163 (Compiled frame)
 - com.lmax.disruptor.BlockingWaitStrategy.waitFor(long, com.lmax.disruptor.Sequence, com.lmax.disruptor.Sequence[], com.lmax.disruptor.SequenceBarrier, long, java.util.concurrent.TimeUnit) @bci=58, line=87 (Compiled frame)
 - com.lmax.disruptor.ProcessingSequenceBarrier.waitFor(long, long, java.util.concurrent.TimeUnit) @bci=21, line=54 (Compiled frame)
 - backtype.storm.utils.DisruptorQueue.consumeBatchWhenAvailable(com.lmax.disruptor.EventHandler) @bci=21, line=97 (Compiled frame)
 - backtype.storm.disruptor$consume_batch_when_available.invoke(java.lang.Object, java.lang.Object) @bci=12, line=80 (Compiled frame)
 - backtype.storm.daemon.executor$fn__6647$fn__6659$fn__6706.invoke() @bci=17, line=748 (Compiled frame)
 - backtype.storm.util$async_loop$fn__459.invoke() @bci=39, line=463 (Compiled frame)
 - clojure.lang.AFn.run() @bci=1, line=24 (Interpreted frame)
 - java.lang.Thread.run() @bci=11, line=745 (Interpreted frame)


Thread 7717: (state = BLOCKED)
 - sun.misc.Unsafe.park(boolean, long) @bci=0 (Compiled frame; information may be imprecise)
 - java.util.concurrent.locks.LockSupport.parkNanos(java.lang.Object, long) @bci=20, line=215 (Compiled frame)
 - java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(long, java.util.concurrent.TimeUnit) @bci=97, line=2163 (Compiled frame)
 - com.lmax.disruptor.BlockingWaitStrategy.waitFor(long, com.lmax.disruptor.Sequence, com.lmax.disruptor.Sequence[], com.lmax.disruptor.SequenceBarrier, long, java.util.concurrent.TimeUnit) @bci=58, line=87 (Compiled frame)
 - com.lmax.disruptor.ProcessingSequenceBarrier.waitFor(long, long, java.util.concurrent.TimeUnit) @bci=21, line=54 (Compiled frame)
 - backtype.storm.utils.DisruptorQueue.consumeBatchWhenAvailable(com.lmax.disruptor.EventHandler) @bci=21, line=97 (Compiled frame)
 - backtype.storm.disruptor$consume_batch_when_available.invoke(java.lang.Object, java.lang.Object) @bci=12, line=80 (Compiled frame)
 - backtype.storm.disruptor$consume_loop_STAR_$fn__1618.invoke() @bci=17, line=94 (Compiled frame)
 - backtype.storm.util$async_loop$fn__459.invoke() @bci=39, line=463 (Compiled frame)
 - clojure.lang.AFn.run() @bci=1, line=24 (Interpreted frame)
 - java.lang.Thread.run() @bci=11, line=745 (Interpreted frame)


Thread 7716: (state = BLOCKED)
 - java.lang.Thread.sleep(long) @bci=0 (Compiled frame; information may be imprecise)
 - backtype.storm.spout.SleepSpoutWaitStrategy.emptyEmit(long) @bci=4, line=36 (Compiled frame)
 - backtype.storm.daemon.executor$fn__6579$fn__6594$fn__6623.invoke() @bci=1143, line=575 (Compiled frame)
 - backtype.storm.util$async_loop$fn__459.invoke() @bci=39, line=463 (Compiled frame)
 - clojure.lang.AFn.run() @bci=1, line=24 (Interpreted frame)
 - java.lang.Thread.run() @bci=11, line=745 (Interpreted frame)


Thread 7715: (state = BLOCKED)
 - sun.misc.Unsafe.park(boolean, long) @bci=0 (Compiled frame; information may be imprecise)
 - java.util.concurrent.locks.LockSupport.parkNanos(long) @bci=11, line=338 (Compiled frame)
 - com.lmax.disruptor.AbstractMultithreadedClaimStrategy.waitForFreeSlotAt(long, com.lmax.disruptor.Sequence[], com.lmax.disruptor.util.MutableLong) @bci=34, line=99 (Compiled frame)
 - com.lmax.disruptor.AbstractMultithreadedClaimStrategy.incrementAndGet(com.lmax.disruptor.Sequence[]) @bci=21, line=49 (Compiled frame)
 - com.lmax.disruptor.Sequencer.next() @bci=26, line=127 (Interpreted frame)
 - backtype.storm.utils.DisruptorQueue.publishDirect(java.lang.Object, boolean) @bci=8, line=174 (Interpreted frame)
 - backtype.storm.utils.DisruptorQueue.publish(java.lang.Object, boolean) @bci=69, line=167 (Compiled frame)
 - backtype.storm.disruptor$publish.invoke(java.lang.Object, java.lang.Object, java.lang.Object) @bci=18, line=66 (Compiled frame)
 - backtype.storm.disruptor$publish.invoke(java.lang.Object, java.lang.Object) @bci=18, line=68 (Compiled frame)
 - backtype.storm.daemon.worker$mk_transfer_local_fn$fn__6748.invoke(java.lang.Object) @bci=180, line=108 (Compiled frame)
 - backtype.storm.daemon.worker$mk_transfer_fn$fn__6755.invoke(java.lang.Object, java.lang.Object) @bci=604, line=134 (Compiled frame)
 - backtype.storm.daemon.executor$start_batch_transfer__GT_worker_handler_BANG_$fn__6489.invoke(java.lang.Object, java.lang.Object, java.lang.Object) @bci=65, line=258 (Compiled frame)
 - backtype.storm.disruptor$clojure_handler$reify__1605.onEvent(java.lang.Object, long, boolean) @bci=28, line=58 (Compiled frame)
 - backtype.storm.utils.DisruptorQueue.consumeBatchToCursor(long, com.lmax.disruptor.EventHandler) @bci=125, line=125 (Compiled frame)
 - backtype.storm.utils.DisruptorQueue.consumeBatchWhenAvailable(com.lmax.disruptor.EventHandler) @bci=39, line=99 (Compiled frame)
 - backtype.storm.disruptor$consume_batch_when_available.invoke(java.lang.Object, java.lang.Object) @bci=12, line=80 (Compiled frame)
 - backtype.storm.disruptor$consume_loop_STAR_$fn__1618.invoke() @bci=17, line=94 (Compiled frame)
 - backtype.storm.util$async_loop$fn__459.invoke() @bci=39, line=463 (Compiled frame)
 - clojure.lang.AFn.run() @bci=1, line=24 (Interpreted frame)
 - java.lang.Thread.run() @bci=11, line=745 (Interpreted frame)


Thread 7714: (state = BLOCKED)
 - sun.misc.Unsafe.park(boolean, long) @bci=0 (Compiled frame; information may be imprecise)
 - java.util.concurrent.locks.LockSupport.parkNanos(java.lang.Object, long) @bci=20, line=215 (Compiled frame)
 - java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(long, java.util.concurrent.TimeUnit) @bci=97, line=2163 (Compiled frame)
 - com.lmax.disruptor.BlockingWaitStrategy.waitFor(long, com.lmax.disruptor.Sequence, com.lmax.disruptor.Sequence[], com.lmax.disruptor.SequenceBarrier, long, java.util.concurrent.TimeUnit) @bci=58, line=87 (Compiled frame)
 - com.lmax.disruptor.ProcessingSequenceBarrier.waitFor(long, long, java.util.concurrent.TimeUnit) @bci=21, line=54 (Compiled frame)
 - backtype.storm.utils.DisruptorQueue.consumeBatchWhenAvailable(com.lmax.disruptor.EventHandler) @bci=21, line=97 (Compiled frame)
 - backtype.storm.disruptor$consume_batch_when_available.invoke(java.lang.Object, java.lang.Object) @bci=12, line=80 (Compiled frame)
 - backtype.storm.daemon.executor$fn__6647$fn__6659$fn__6706.invoke() @bci=17, line=748 (Compiled frame)
 - backtype.storm.util$async_loop$fn__459.invoke() @bci=39, line=463 (Compiled frame)
 - clojure.lang.AFn.run() @bci=1, line=24 (Interpreted frame)
 - java.lang.Thread.run() @bci=11, line=745 (Interpreted frame)


Thread 7713: (state = BLOCKED)
 - sun.misc.Unsafe.park(boolean, long) @bci=0 (Compiled frame; information may be imprecise)
 - java.util.concurrent.locks.LockSupport.parkNanos(java.lang.Object, long) @bci=20, line=215 (Compiled frame)
 - java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(long, java.util.concurrent.TimeUnit) @bci=97, line=2163 (Compiled frame)
 - com.lmax.disruptor.BlockingWaitStrategy.waitFor(long, com.lmax.disruptor.Sequence, com.lmax.disruptor.Sequence[], com.lmax.disruptor.SequenceBarrier, long, java.util.concurrent.TimeUnit) @bci=58, line=87 (Compiled frame)
 - com.lmax.disruptor.ProcessingSequenceBarrier.waitFor(long, long, java.util.concurrent.TimeUnit) @bci=21, line=54 (Compiled frame)
 - backtype.storm.utils.DisruptorQueue.consumeBatchWhenAvailable(com.lmax.disruptor.EventHandler) @bci=21, line=97 (Compiled frame)
 - backtype.storm.disruptor$consume_batch_when_available.invoke(java.lang.Object, java.lang.Object) @bci=12, line=80 (Compiled frame)
 - backtype.storm.disruptor$consume_loop_STAR_$fn__1618.invoke() @bci=17, line=94 (Compiled frame)
 - backtype.storm.util$async_loop$fn__459.invoke() @bci=39, line=463 (Compiled frame)
 - clojure.lang.AFn.run() @bci=1, line=24 (Interpreted frame)
 - java.lang.Thread.run() @bci=11, line=745 (Interpreted frame)


Thread 7712: (state = BLOCKED)
 - sun.misc.Unsafe.park(boolean, long) @bci=0 (Compiled frame; information may be imprecise)
 - java.util.concurrent.locks.LockSupport.parkNanos(java.lang.Object, long) @bci=20, line=215 (Compiled frame)
 - java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(long, java.util.concurrent.TimeUnit) @bci=97, line=2163 (Compiled frame)
 - com.lmax.disruptor.BlockingWaitStrategy.waitFor(long, com.lmax.disruptor.Sequence, com.lmax.disruptor.Sequence[], com.lmax.disruptor.SequenceBarrier, long, java.util.concurrent.TimeUnit) @bci=58, line=87 (Compiled frame)
 - com.lmax.disruptor.ProcessingSequenceBarrier.waitFor(long, long, java.util.concurrent.TimeUnit) @bci=21, line=54 (Compiled frame)
 - backtype.storm.utils.DisruptorQueue.consumeBatchWhenAvailable(com.lmax.disruptor.EventHandler) @bci=21, line=97 (Compiled frame)
 - backtype.storm.disruptor$consume_batch_when_available.invoke(java.lang.Object, java.lang.Object) @bci=12, line=80 (Compiled frame)
 - backtype.storm.daemon.executor$fn__6647$fn__6659$fn__6706.invoke() @bci=17, line=748 (Compiled frame)
 - backtype.storm.util$async_loop$fn__459.invoke() @bci=39, line=463 (Compiled frame)
 - clojure.lang.AFn.run() @bci=1, line=24 (Interpreted frame)
 - java.lang.Thread.run() @bci=11, line=745 (Interpreted frame)


Thread 7711: (state = BLOCKED)
 - sun.misc.Unsafe.park(boolean, long) @bci=0 (Compiled frame; information may be imprecise)
 - java.util.concurrent.locks.LockSupport.parkNanos(java.lang.Object, long) @bci=20, line=215 (Compiled frame)
 - java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(long, java.util.concurrent.TimeUnit) @bci=97, line=2163 (Compiled frame)
 - com.lmax.disruptor.BlockingWaitStrategy.waitFor(long, com.lmax.disruptor.Sequence, com.lmax.disruptor.Sequence[], com.lmax.disruptor.SequenceBarrier, long, java.util.concurrent.TimeUnit) @bci=58, line=87 (Compiled frame)
 - com.lmax.disruptor.ProcessingSequenceBarrier.waitFor(long, long, java.util.concurrent.TimeUnit) @bci=21, line=54 (Compiled frame)
 - backtype.storm.utils.DisruptorQueue.consumeBatchWhenAvailable(com.lmax.disruptor.EventHandler) @bci=21, line=97 (Compiled frame)
 - backtype.storm.disruptor$consume_batch_when_available.invoke(java.lang.Object, java.lang.Object) @bci=12, line=80 (Compiled frame)
 - backtype.storm.disruptor$consume_loop_STAR_$fn__1618.invoke() @bci=17, line=94 (Compiled frame)
 - backtype.storm.util$async_loop$fn__459.invoke() @bci=39, line=463 (Compiled frame)
 - clojure.lang.AFn.run() @bci=1, line=24 (Interpreted frame)
 - java.lang.Thread.run() @bci=11, line=745 (Interpreted frame)


Thread 7710: (state = BLOCKED)
 - sun.misc.Unsafe.park(boolean, long) @bci=0 (Compiled frame; information may be imprecise)
 - java.util.concurrent.locks.LockSupport.park(java.lang.Object) @bci=14, line=175 (Compiled frame)
 - java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await() @bci=42, line=2039 (Compiled frame)
 - java.util.concurrent.LinkedBlockingQueue.put(java.lang.Object) @bci=56, line=350 (Compiled frame)
 - backtype.storm.task.ShellBolt.execute(backtype.storm.tuple.Tuple) @bci=54, line=145 (Compiled frame)
 - backtype.storm.daemon.executor$fn__6647$tuple_action_fn__6649.invoke(java.lang.Object, java.lang.Object) @bci=354, line=633 (Compiled frame)
 - backtype.storm.daemon.executor$mk_task_receiver$fn__6570.invoke(java.lang.Object, java.lang.Object, java.lang.Object) @bci=357, line=401 (Compiled frame)
 - backtype.storm.disruptor$clojure_handler$reify__1605.onEvent(java.lang.Object, long, boolean) @bci=28, line=58 (Compiled frame)
 - backtype.storm.utils.DisruptorQueue.consumeBatchToCursor(long, com.lmax.disruptor.EventHandler) @bci=125, line=125 (Compiled frame)
 - backtype.storm.utils.DisruptorQueue.consumeBatchWhenAvailable(com.lmax.disruptor.EventHandler) @bci=39, line=99 (Compiled frame)
 - backtype.storm.disruptor$consume_batch_when_available.invoke(java.lang.Object, java.lang.Object) @bci=12, line=80 (Compiled frame)
 - backtype.storm.daemon.executor$fn__6647$fn__6659$fn__6706.invoke() @bci=17, line=748 (Compiled frame)
 - backtype.storm.util$async_loop$fn__459.invoke() @bci=39, line=463 (Compiled frame)
 - clojure.lang.AFn.run() @bci=1, line=24 (Interpreted frame)
 - java.lang.Thread.run() @bci=11, line=745 (Interpreted frame)


Thread 7709: (state = BLOCKED)
 - sun.misc.Unsafe.park(boolean, long) @bci=0 (Compiled frame; information may be imprecise)
 - java.util.concurrent.locks.LockSupport.parkNanos(java.lang.Object, long) @bci=20, line=215 (Compiled frame)
 - java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(long, java.util.concurrent.TimeUnit) @bci=97, line=2163 (Compiled frame)
 - com.lmax.disruptor.BlockingWaitStrategy.waitFor(long, com.lmax.disruptor.Sequence, com.lmax.disruptor.Sequence[], com.lmax.disruptor.SequenceBarrier, long, java.util.concurrent.TimeUnit) @bci=58, line=87 (Compiled frame)
 - com.lmax.disruptor.ProcessingSequenceBarrier.waitFor(long, long, java.util.concurrent.TimeUnit) @bci=21, line=54 (Compiled frame)
 - backtype.storm.utils.DisruptorQueue.consumeBatchWhenAvailable(com.lmax.disruptor.EventHandler) @bci=21, line=97 (Compiled frame)
 - backtype.storm.disruptor$consume_batch_when_available.invoke(java.lang.Object, java.lang.Object) @bci=12, line=80 (Compiled frame)
 - backtype.storm.disruptor$consume_loop_STAR_$fn__1618.invoke() @bci=17, line=94 (Compiled frame)
 - backtype.storm.util$async_loop$fn__459.invoke() @bci=39, line=463 (Compiled frame)
 - clojure.lang.AFn.run() @bci=1, line=24 (Interpreted frame)
 - java.lang.Thread.run() @bci=11, line=745 (Interpreted frame)


Thread 7708: (state = BLOCKED)
 - sun.misc.Unsafe.park(boolean, long) @bci=0 (Compiled frame; information may be imprecise)
 - java.util.concurrent.locks.LockSupport.park(java.lang.Object) @bci=14, line=175 (Compiled frame)
 - java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await() @bci=42, line=2039 (Compiled frame)
 - java.util.concurrent.LinkedBlockingQueue.put(java.lang.Object) @bci=56, line=350 (Compiled frame)
 - backtype.storm.task.ShellBolt.execute(backtype.storm.tuple.Tuple) @bci=54, line=145 (Compiled frame)
 - backtype.storm.daemon.executor$fn__6647$tuple_action_fn__6649.invoke(java.lang.Object, java.lang.Object) @bci=354, line=633 (Compiled frame)
 - backtype.storm.daemon.executor$mk_task_receiver$fn__6570.invoke(java.lang.Object, java.lang.Object, java.lang.Object) @bci=357, line=401 (Compiled frame)
 - backtype.storm.disruptor$clojure_handler$reify__1605.onEvent(java.lang.Object, long, boolean) @bci=28, line=58 (Compiled frame)
 - backtype.storm.utils.DisruptorQueue.consumeBatchToCursor(long, com.lmax.disruptor.EventHandler) @bci=125, line=125 (Compiled frame)
 - backtype.storm.utils.DisruptorQueue.consumeBatchWhenAvailable(com.lmax.disruptor.EventHandler) @bci=39, line=99 (Compiled frame)
 - backtype.storm.disruptor$consume_batch_when_available.invoke(java.lang.Object, java.lang.Object) @bci=12, line=80 (Compiled frame)
 - backtype.storm.daemon.executor$fn__6647$fn__6659$fn__6706.invoke() @bci=17, line=748 (Compiled frame)
 - backtype.storm.util$async_loop$fn__459.invoke() @bci=39, line=463 (Compiled frame)
 - clojure.lang.AFn.run() @bci=1, line=24 (Interpreted frame)
 - java.lang.Thread.run() @bci=11, line=745 (Interpreted frame)


Thread 7707: (state = BLOCKED)
 - sun.misc.Unsafe.park(boolean, long) @bci=0 (Compiled frame; information may be imprecise)
 - java.util.concurrent.locks.LockSupport.parkNanos(java.lang.Object, long) @bci=20, line=215 (Compiled frame)
 - java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(long, java.util.concurrent.TimeUnit) @bci=97, line=2163 (Compiled frame)
 - com.lmax.disruptor.BlockingWaitStrategy.waitFor(long, com.lmax.disruptor.Sequence, com.lmax.disruptor.Sequence[], com.lmax.disruptor.SequenceBarrier, long, java.util.concurrent.TimeUnit) @bci=58, line=87 (Compiled frame)
 - com.lmax.disruptor.ProcessingSequenceBarrier.waitFor(long, long, java.util.concurrent.TimeUnit) @bci=21, line=54 (Compiled frame)
 - backtype.storm.utils.DisruptorQueue.consumeBatchWhenAvailable(com.lmax.disruptor.EventHandler) @bci=21, line=97 (Compiled frame)
 - backtype.storm.disruptor$consume_batch_when_available.invoke(java.lang.Object, java.lang.Object) @bci=12, line=80 (Compiled frame)
 - backtype.storm.disruptor$consume_loop_STAR_$fn__1618.invoke() @bci=17, line=94 (Compiled frame)
 - backtype.storm.util$async_loop$fn__459.invoke() @bci=39, line=463 (Compiled frame)
 - clojure.lang.AFn.run() @bci=1, line=24 (Interpreted frame)
 - java.lang.Thread.run() @bci=11, line=745 (Interpreted frame)


Thread 7706: (state = BLOCKED)
 - sun.misc.Unsafe.park(boolean, long) @bci=0 (Compiled frame; information may be imprecise)
 - java.util.concurrent.locks.LockSupport.parkNanos(java.lang.Object, long) @bci=20, line=215 (Compiled frame)
 - java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(long) @bci=78, line=2078 (Compiled frame)
 - java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take() @bci=124, line=1093 (Compiled frame)
 - java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take() @bci=1, line=809 (Compiled frame)
 - java.util.concurrent.ThreadPoolExecutor.getTask() @bci=149, line=1067 (Compiled frame)
 - java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker) @bci=26, line=1127 (Compiled frame)
 - java.util.concurrent.ThreadPoolExecutor$Worker.run() @bci=5, line=617 (Interpreted frame)
 - java.lang.Thread.run() @bci=11, line=745 (Interpreted frame)


Thread 7705: (state = BLOCKED)
 - java.lang.Thread.sleep(long) @bci=0 (Compiled frame; information may be imprecise)
 - org.apache.storm.netty.util.HashedWheelTimer$Worker.waitForNextTick() @bci=84, line=483 (Compiled frame)
 - org.apache.storm.netty.util.HashedWheelTimer$Worker.run() @bci=49, line=392 (Compiled frame)
 - org.apache.storm.netty.util.ThreadRenamingRunnable.run() @bci=55, line=108 (Interpreted frame)
 - java.lang.Thread.run() @bci=11, line=745 (Interpreted frame)


Thread 7704: (state = BLOCKED)
 - sun.misc.Unsafe.park(boolean, long) @bci=0 (Compiled frame; information may be imprecise)
 - java.util.concurrent.locks.LockSupport.park(java.lang.Object) @bci=14, line=175 (Compiled frame)
 - java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await() @bci=42, line=2039 (Compiled frame)
 - java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take() @bci=100, line=1088 (Compiled frame)
 - java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take() @bci=1, line=809 (Compiled frame)
 - java.util.concurrent.ThreadPoolExecutor.getTask() @bci=149, line=1067 (Compiled frame)
 - java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker) @bci=26, line=1127 (Compiled frame)
 - java.util.concurrent.ThreadPoolExecutor$Worker.run() @bci=5, line=617 (Interpreted frame)
 - java.lang.Thread.run() @bci=11, line=745 (Interpreted frame)


Thread 7703: (state = BLOCKED)
 - sun.misc.Unsafe.park(boolean, long) @bci=0 (Compiled frame; information may be imprecise)
 - java.util.concurrent.locks.LockSupport.parkNanos(long) @bci=11, line=338 (Compiled frame)
 - com.lmax.disruptor.AbstractMultithreadedClaimStrategy.waitForFreeSlotAt(long, com.lmax.disruptor.Sequence[], com.lmax.disruptor.util.MutableLong) @bci=34, line=99 (Compiled frame)
 - com.lmax.disruptor.AbstractMultithreadedClaimStrategy.incrementAndGet(com.lmax.disruptor.Sequence[]) @bci=21, line=49 (Interpreted frame)
 - com.lmax.disruptor.Sequencer.next() @bci=26, line=127 (Interpreted frame)
 - backtype.storm.utils.DisruptorQueue.publishDirect(java.lang.Object, boolean) @bci=8, line=174 (Interpreted frame)
 - backtype.storm.utils.DisruptorQueue.publish(java.lang.Object, boolean) @bci=69, line=167 (Compiled frame)
 - backtype.storm.disruptor$publish.invoke(java.lang.Object, java.lang.Object, java.lang.Object) @bci=18, line=66 (Compiled frame)
 - backtype.storm.disruptor$publish.invoke(java.lang.Object, java.lang.Object) @bci=18, line=68 (Compiled frame)
 - backtype.storm.daemon.worker$mk_transfer_local_fn$fn__6748.invoke(java.lang.Object) @bci=180, line=108 (Compiled frame)
 - backtype.storm.messaging.loader$mk_receive_thread$fn__1626$fn__1627.invoke() @bci=600, line=49 (Compiled frame)
 - backtype.storm.util$async_loop$fn__459.invoke() @bci=39, line=463 (Compiled frame)
 - clojure.lang.AFn.run() @bci=1, line=24 (Interpreted frame)
 - java.lang.Thread.run() @bci=11, line=745 (Interpreted frame)


Thread 7702: (state = IN_NATIVE)
 - sun.nio.ch.EPollArrayWrapper.epollWait(long, int, long, int) @bci=0 (Interpreted frame)
 - sun.nio.ch.EPollArrayWrapper.poll(long) @bci=18, line=269 (Interpreted frame)
 - sun.nio.ch.EPollSelectorImpl.doSelect(long) @bci=28, line=79 (Interpreted frame)
 - sun.nio.ch.SelectorImpl.lockAndDoSelect(long) @bci=37, line=86 (Interpreted frame)
 - sun.nio.ch.SelectorImpl.select(long) @bci=30, line=97 (Interpreted frame)
 - sun.nio.ch.SelectorImpl.select() @bci=2, line=101 (Interpreted frame)
 - org.apache.storm.netty.channel.socket.nio.NioServerBoss.select(java.nio.channels.Selector) @bci=1, line=163 (Interpreted frame)
 - org.apache.storm.netty.channel.socket.nio.AbstractNioSelector.run() @bci=56, line=212 (Interpreted frame)
 - org.apache.storm.netty.channel.socket.nio.NioServerBoss.run() @bci=1, line=42 (Interpreted frame)
 - org.apache.storm.netty.util.ThreadRenamingRunnable.run() @bci=55, line=108 (Interpreted frame)
 - org.apache.storm.netty.util.internal.DeadLockProofWorker$1.run() @bci=14, line=42 (Interpreted frame)
 - java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker) @bci=95, line=1142 (Interpreted frame)
 - java.util.concurrent.ThreadPoolExecutor$Worker.run() @bci=5, line=617 (Interpreted frame)
 - java.lang.Thread.run() @bci=11, line=745 (Interpreted frame)


Thread 7701: (state = IN_NATIVE)
 - sun.nio.ch.EPollArrayWrapper.epollWait(long, int, long, int) @bci=0 (Compiled frame; information may be imprecise)
 - sun.nio.ch.EPollArrayWrapper.poll(long) @bci=18, line=269 (Compiled frame)
 - sun.nio.ch.EPollSelectorImpl.doSelect(long) @bci=28, line=79 (Compiled frame)
 - sun.nio.ch.SelectorImpl.lockAndDoSelect(long) @bci=37, line=86 (Compiled frame)
 - sun.nio.ch.SelectorImpl.select(long) @bci=30, line=97 (Compiled frame)
 - org.apache.storm.netty.channel.socket.nio.SelectorUtil.select(java.nio.channels.Selector) @bci=4, line=68 (Compiled frame)
 - org.apache.storm.netty.channel.socket.nio.AbstractNioSelector.select(java.nio.channels.Selector) @bci=1, line=415 (Compiled frame)
 - org.apache.storm.netty.channel.socket.nio.AbstractNioSelector.run() @bci=56, line=212 (Compiled frame)
 - org.apache.storm.netty.channel.socket.nio.AbstractNioWorker.run() @bci=1, line=89 (Interpreted frame)
 - org.apache.storm.netty.channel.socket.nio.NioWorker.run() @bci=1, line=178 (Interpreted frame)
 - org.apache.storm.netty.util.ThreadRenamingRunnable.run() @bci=55, line=108 (Interpreted frame)
 - org.apache.storm.netty.util.internal.DeadLockProofWorker$1.run() @bci=14, line=42 (Interpreted frame)
 - java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker) @bci=95, line=1142 (Interpreted frame)
 - java.util.concurrent.ThreadPoolExecutor$Worker.run() @bci=5, line=617 (Interpreted frame)
 - java.lang.Thread.run() @bci=11, line=745 (Interpreted frame)


Thread 7700: (state = BLOCKED)
 - sun.misc.Unsafe.park(boolean, long) @bci=0 (Compiled frame; information may be imprecise)
 - java.util.concurrent.locks.LockSupport.parkNanos(long) @bci=11, line=338 (Compiled frame)
 - com.lmax.disruptor.AbstractMultithreadedClaimStrategy.waitForFreeSlotAt(long, com.lmax.disruptor.Sequence[], com.lmax.disruptor.util.MutableLong) @bci=34, line=99 (Compiled frame)
 - com.lmax.disruptor.AbstractMultithreadedClaimStrategy.incrementAndGet(com.lmax.disruptor.Sequence[]) @bci=21, line=49 (Compiled frame)
 - com.lmax.disruptor.Sequencer.next() @bci=26, line=127 (Interpreted frame)
 - backtype.storm.utils.DisruptorQueue.publishDirect(java.lang.Object, boolean) @bci=8, line=174 (Interpreted frame)
 - backtype.storm.utils.DisruptorQueue.publish(java.lang.Object, boolean) @bci=69, line=167 (Compiled frame)
 - backtype.storm.disruptor$publish.invoke(java.lang.Object, java.lang.Object, java.lang.Object) @bci=18, line=66 (Compiled frame)
 - backtype.storm.disruptor$publish.invoke(java.lang.Object, java.lang.Object) @bci=18, line=68 (Compiled frame)
 - backtype.storm.daemon.executor$setup_metrics_BANG_$fn__6499.invoke() @bci=80, line=274 (Compiled frame)
 - backtype.storm.timer$schedule_recurring$this__1807.invoke() @bci=7, line=99 (Compiled frame)
 - backtype.storm.timer$mk_timer$fn__1790$fn__1791.invoke() @bci=174, line=50 (Compiled frame)
 - backtype.storm.timer$mk_timer$fn__1790.invoke() @bci=54, line=42 (Interpreted frame)
 - clojure.lang.AFn.run() @bci=1, line=24 (Interpreted frame)
 - java.lang.Thread.run() @bci=11, line=745 (Interpreted frame)


Thread 7699: (state = BLOCKED)
 - java.lang.Thread.sleep(long) @bci=0 (Compiled frame; information may be imprecise)
 - backtype.storm.utils.Time.sleepUntil(long) @bci=173, line=76 (Compiled frame)
 - backtype.storm.utils.Time.sleep(long) @bci=5, line=81 (Compiled frame)
 - backtype.storm.timer$mk_timer$fn__1790$fn__1791.invoke() @bci=220, line=57 (Compiled frame)
 - backtype.storm.timer$mk_timer$fn__1790.invoke() @bci=54, line=42 (Interpreted frame)
 - clojure.lang.AFn.run() @bci=1, line=24 (Interpreted frame)
 - java.lang.Thread.run() @bci=11, line=745 (Interpreted frame)


Thread 7698: (state = BLOCKED)
 - java.lang.Thread.sleep(long) @bci=0 (Compiled frame; information may be imprecise)
 - backtype.storm.utils.Time.sleepUntil(long) @bci=173, line=76 (Compiled frame)
 - backtype.storm.utils.Time.sleep(long) @bci=5, line=81 (Compiled frame)
 - backtype.storm.timer$mk_timer$fn__1790$fn__1791.invoke() @bci=220, line=57 (Compiled frame)
 - backtype.storm.timer$mk_timer$fn__1790.invoke() @bci=54, line=42 (Interpreted frame)
 - clojure.lang.AFn.run() @bci=1, line=24 (Interpreted frame)
 - java.lang.Thread.run() @bci=11, line=745 (Interpreted frame)


Thread 7697: (state = BLOCKED)
 - java.lang.Thread.sleep(long) @bci=0 (Compiled frame; information may be imprecise)
 - backtype.storm.utils.Time.sleepUntil(long) @bci=173, line=76 (Compiled frame)
 - backtype.storm.utils.Time.sleep(long) @bci=5, line=81 (Compiled frame)
 - backtype.storm.timer$mk_timer$fn__1790$fn__1791.invoke() @bci=220, line=57 (Compiled frame)
 - backtype.storm.timer$mk_timer$fn__1790.invoke() @bci=54, line=42 (Interpreted frame)
 - clojure.lang.AFn.run() @bci=1, line=24 (Interpreted frame)
 - java.lang.Thread.run() @bci=11, line=745 (Interpreted frame)


Thread 7696: (state = BLOCKED)
 - java.lang.Thread.sleep(long) @bci=0 (Compiled frame; information may be imprecise)
 - backtype.storm.utils.Time.sleepUntil(long) @bci=173, line=76 (Compiled frame)
 - backtype.storm.utils.Time.sleep(long) @bci=5, line=81 (Compiled frame)
 - backtype.storm.timer$mk_timer$fn__1790$fn__1791.invoke() @bci=220, line=57 (Compiled frame)
 - backtype.storm.timer$mk_timer$fn__1790.invoke() @bci=54, line=42 (Interpreted frame)
 - clojure.lang.AFn.run() @bci=1, line=24 (Interpreted frame)
 - java.lang.Thread.run() @bci=11, line=745 (Interpreted frame)


Thread 7695: (state = IN_NATIVE)
 - sun.nio.ch.EPollArrayWrapper.epollWait(long, int, long, int) @bci=0 (Compiled frame; information may be imprecise)
 - sun.nio.ch.EPollArrayWrapper.poll(long) @bci=18, line=269 (Compiled frame)
 - sun.nio.ch.EPollSelectorImpl.doSelect(long) @bci=28, line=79 (Compiled frame)
 - sun.nio.ch.SelectorImpl.lockAndDoSelect(long) @bci=37, line=86 (Compiled frame)
 - sun.nio.ch.SelectorImpl.select(long) @bci=30, line=97 (Compiled frame)
 - org.apache.storm.netty.channel.socket.nio.SelectorUtil.select(java.nio.channels.Selector) @bci=4, line=68 (Compiled frame)
 - org.apache.storm.netty.channel.socket.nio.AbstractNioSelector.select(java.nio.channels.Selector) @bci=1, line=415 (Compiled frame)
 - org.apache.storm.netty.channel.socket.nio.AbstractNioSelector.run() @bci=56, line=212 (Compiled frame)
 - org.apache.storm.netty.channel.socket.nio.NioClientBoss.run() @bci=1, line=42 (Interpreted frame)
 - org.apache.storm.netty.util.ThreadRenamingRunnable.run() @bci=55, line=108 (Interpreted frame)
 - org.apache.storm.netty.util.internal.DeadLockProofWorker$1.run() @bci=14, line=42 (Interpreted frame)
 - java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker) @bci=95, line=1142 (Interpreted frame)
 - java.util.concurrent.ThreadPoolExecutor$Worker.run() @bci=5, line=617 (Interpreted frame)
 - java.lang.Thread.run() @bci=11, line=745 (Interpreted frame)


Thread 7694: (state = IN_NATIVE)
 - sun.nio.ch.EPollArrayWrapper.epollWait(long, int, long, int) @bci=0 (Compiled frame; information may be imprecise)
 - sun.nio.ch.EPollArrayWrapper.poll(long) @bci=18, line=269 (Compiled frame)
 - sun.nio.ch.EPollSelectorImpl.doSelect(long) @bci=28, line=79 (Compiled frame)
 - sun.nio.ch.SelectorImpl.lockAndDoSelect(long) @bci=37, line=86 (Compiled frame)
 - sun.nio.ch.SelectorImpl.select(long) @bci=30, line=97 (Compiled frame)
 - org.apache.storm.netty.channel.socket.nio.SelectorUtil.select(java.nio.channels.Selector) @bci=4, line=68 (Compiled frame)
 - org.apache.storm.netty.channel.socket.nio.AbstractNioSelector.select(java.nio.channels.Selector) @bci=1, line=415 (Compiled frame)
 - org.apache.storm.netty.channel.socket.nio.AbstractNioSelector.run() @bci=56, line=212 (Compiled frame)
 - org.apache.storm.netty.channel.socket.nio.AbstractNioWorker.run() @bci=1, line=89 (Interpreted frame)
 - org.apache.storm.netty.channel.socket.nio.NioWorker.run() @bci=1, line=178 (Interpreted frame)
 - org.apache.storm.netty.util.ThreadRenamingRunnable.run() @bci=55, line=108 (Interpreted frame)
 - org.apache.storm.netty.util.internal.DeadLockProofWorker$1.run() @bci=14, line=42 (Interpreted frame)
 - java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker) @bci=95, line=1142 (Interpreted frame)
 - java.util.concurrent.ThreadPoolExecutor$Worker.run() @bci=5, line=617 (Interpreted frame)
 - java.lang.Thread.run() @bci=11, line=745 (Interpreted frame)


Thread 7693: (state = BLOCKED)
 - sun.misc.Unsafe.park(boolean, long) @bci=0 (Interpreted frame)
 - java.util.concurrent.locks.LockSupport.park(java.lang.Object) @bci=14, line=175 (Interpreted frame)
 - java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await() @bci=42, line=2039 (Interpreted frame)
 - java.util.concurrent.DelayQueue.take() @bci=28, line=211 (Interpreted frame)
 - java.util.concurrent.DelayQueue.take() @bci=1, line=70 (Interpreted frame)
 - org.apache.storm.curator.framework.imps.CuratorFrameworkImpl.backgroundOperationsLoop() @bci=10, line=781 (Interpreted frame)
 - org.apache.storm.curator.framework.imps.CuratorFrameworkImpl.access$400(org.apache.storm.curator.framework.imps.CuratorFrameworkImpl) @bci=1, line=57 (Interpreted frame)
 - org.apache.storm.curator.framework.imps.CuratorFrameworkImpl$4.call() @bci=4, line=275 (Interpreted frame)
 - java.util.concurrent.FutureTask.run() @bci=42, line=266 (Interpreted frame)
 - java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker) @bci=95, line=1142 (Interpreted frame)
 - java.util.concurrent.ThreadPoolExecutor$Worker.run() @bci=5, line=617 (Interpreted frame)
 - java.lang.Thread.run() @bci=11, line=745 (Interpreted frame)


Thread 7692: (state = BLOCKED)
 - sun.misc.Unsafe.park(boolean, long) @bci=0 (Interpreted frame)
 - java.util.concurrent.locks.LockSupport.park(java.lang.Object) @bci=14, line=175 (Interpreted frame)
 - java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await() @bci=42, line=2039 (Interpreted frame)
 - java.util.concurrent.LinkedBlockingQueue.take() @bci=29, line=442 (Interpreted frame)
 - org.apache.storm.zookeeper.ClientCnxn$EventThread.run() @bci=9, line=494 (Interpreted frame)


Thread 7691: (state = IN_NATIVE)
 - sun.nio.ch.EPollArrayWrapper.epollWait(long, int, long, int) @bci=0 (Compiled frame; information may be imprecise)
 - sun.nio.ch.EPollArrayWrapper.poll(long) @bci=18, line=269 (Compiled frame)
 - sun.nio.ch.EPollSelectorImpl.doSelect(long) @bci=28, line=79 (Compiled frame)
 - sun.nio.ch.SelectorImpl.lockAndDoSelect(long) @bci=37, line=86 (Compiled frame)
 - sun.nio.ch.SelectorImpl.select(long) @bci=30, line=97 (Compiled frame)
 - org.apache.storm.zookeeper.ClientCnxnSocketNIO.doTransport(int, java.util.List, java.util.LinkedList, org.apache.storm.zookeeper.ClientCnxn) @bci=6, line=349 (Compiled frame)
 - org.apache.storm.zookeeper.ClientCnxn$SendThread.run() @bci=615, line=1081 (Interpreted frame)


Thread 7690: (state = BLOCKED)
 - sun.misc.Unsafe.park(boolean, long) @bci=0 (Interpreted frame)
 - java.util.concurrent.locks.LockSupport.park(java.lang.Object) @bci=14, line=175 (Interpreted frame)
 - java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await() @bci=42, line=2039 (Interpreted frame)
 - java.util.concurrent.ArrayBlockingQueue.take() @bci=20, line=403 (Interpreted frame)
 - org.apache.storm.curator.framework.state.ConnectionStateManager.processEvents() @bci=13, line=208 (Interpreted frame)
 - org.apache.storm.curator.framework.state.ConnectionStateManager.access$000(org.apache.storm.curator.framework.state.ConnectionStateManager) @bci=1, line=42 (Interpreted frame)
 - org.apache.storm.curator.framework.state.ConnectionStateManager$1.call() @bci=4, line=110 (Interpreted frame)
 - java.util.concurrent.FutureTask.run() @bci=42, line=266 (Interpreted frame)
 - java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker) @bci=95, line=1142 (Interpreted frame)
 - java.util.concurrent.ThreadPoolExecutor$Worker.run() @bci=5, line=617 (Interpreted frame)
 - java.lang.Thread.run() @bci=11, line=745 (Interpreted frame)


Thread 7647: (state = BLOCKED)


Thread 7646: (state = BLOCKED)
 - java.lang.Object.wait(long) @bci=0 (Compiled frame; information may be imprecise)
 - java.lang.ref.ReferenceQueue.remove(long) @bci=59, line=143 (Compiled frame)
 - java.lang.ref.ReferenceQueue.remove() @bci=2, line=164 (Compiled frame)
 - java.lang.ref.Finalizer$FinalizerThread.run() @bci=36, line=209 (Interpreted frame)


Thread 7645: (state = BLOCKED)
 - java.lang.Object.wait(long) @bci=0 (Compiled frame; information may be imprecise)
 - java.lang.Object.wait() @bci=2, line=502 (Compiled frame)
 - java.lang.ref.Reference$ReferenceHandler.run() @bci=36, line=157 (Compiled frame)
{code}

It's from a worker process.

Nothing is written inside the logs :-\ And {{kafkaSpout}} offset is not being updated in Zookeeper., Jstack output still says subprocess heartbeat is not properly handled.

Maybe you're hitting https://issues.apache.org/jira/browse/STORM-742 since now ShellBolt doesn't treat any messages to heartbeat. It only treats "sync" to heartbeat, so it couldn't be in time when process latency of subprocess is getting higher., Uhm... It makes sense, though it talks about ACK's (we removed them from the topology). It's true that our python bolt is a "heavy" and "intense" bolt and that the processing of a tuple might take so long that the process isn't heartbeating properly. Although it's kind of weird, since it sometimes works for several hours (~16h) and sometimes just minutes (~10m).

Please [~kabhwan], can you answer me this questions?
- Is it only a multi-lang issue? If we implement the bolt in Java, it'd work?
- Any idea of how we could avoid this issue? (aside from implementing the bolt in Java) I'm thinking in adding more bolts and make the tuples go through more little stages, hoping we don't get heartbeat timeouts

Thanks!, I'm surprised that one tuple takes hours to complete!

Let me answer your question.

a) Yes, it's only a multi-lang issue. But you still need to consider message timeout value when you enable ack.
b) 
You can increase SUPERVISOR_WORKER_TIMEOUT_SECS to loose heartbeat timeouts. 
But it also affects whole workers in topology, so please keep in mind before adjusting., I seem to have run into similar issue. I am using kafka spout along with a bolt written in java. There is only one bolt in topology. I see no errors at all in the logs. However, it behaves as if the spout thread has died. Kafka spout nextTuple is not being called at all. 

Luckily I took the jstack. I have attached it to JIRA. , We are facing similar issue in production where storm worker just hangs and we see complete latency increases drastically.This happened 3 times in last 2 months.If I try to take the thread dump worker process just dies. Once i was able to get the thread dump and see lot of block threads in it. I'm attaching thread dump to JIRA.We are using 0.9.5 and spout pending size is set to 1000. , We are using only java in our cluster & have faced the same issue. This doesn't seem to be multi-lang issue. Everything is running fine after we have killed & re-deployed the topologies. I will provide the jstack result if I face the issue again., Hi! I have the same.

Storm v. 0. 9. 4. Pure Java. A simplistic Trident topology reading from Kafka. SINGLE NODE (i. e. only one worker and parallelism of one - this is important).

The topology consists just of an OpaqueTridentKafkaSpout and a standard Debug filter. They are translated into standard Storm spout and three bolts: $mastercoord-bg0, $spoutcoord-spout0, spout0, b-0. The topology is doing nothing no matter what I send to the Kafka topic. Silence in the logs. The sun is shining. Birds are singing.

This very same issue appeared from time to time. Some time ago I deployed a new topology and soon realized it was processing just a single batch every minute and between those batches it was idle. Then I created the simplistic one with a single Debug filter but with two workers in a three node cluster (Nimbus + two Supervisors). The behavior was reproduced. What I observed was that those batches with the one minute delays between them were processed on a different node than the one where my spout was deployed.

Then I simplified the configuration down to a single worker and voila! The topology became idle and even redeploying it didn't help. So I hacked Trident code a little bit by adding log output to several classes and found the following: $mastercoord-bg0 works just fine and so does $spoutcoord-spout0 but then the tuples get lost on the way to spout0. The only tuples spout0 is able to see are ticks but Kafka broker info emitted from $spoutcoord-spout0 never reaches its destination. After 60 secs which are Storm's sync timeout $mastercoord-bg0 fails its transaction attempt.

My hand made log output from Trident classes looks like this:

2016-03-05T03:32:39.695+0100 storm.trident.topology.MasterBatchCoordinator [DEBUG] Emitted: 14813273:110
2016-03-05T03:32:39.695+0100 storm.trident.spout.TridentSpoutCoordinator [DEBUG] Got a transaction: 14813273:110
2016-03-05T03:32:39.697+0100 storm.trident.spout.TridentSpoutCoordinator [DEBUG] The transaction 14813273 triggers a new batch with metadata GlobalPartitionInformation{partitionMap={0=test-kafka3:9092}}
2016-03-05T03:32:39.934+0100 storm.trident.topology.TridentBoltExecutor [DEBUG] Got a tuple: source: __system:-1, stream: __tick, id: {}, [5]
2016-03-05T03:32:44.935+0100 storm.trident.topology.TridentBoltExecutor [DEBUG] Got a tuple: source: __system:-1, stream: __tick, id: {}, [5]
2016-03-05T03:32:49.935+0100 storm.trident.topology.TridentBoltExecutor [DEBUG] Got a tuple: source: __system:-1, stream: __tick, id: {}, [5]
2016-03-05T03:32:54.935+0100 storm.trident.topology.TridentBoltExecutor [DEBUG] Got a tuple: source: __system:-1, stream: __tick, id: {}, [5]
2016-03-05T03:32:59.935+0100 storm.trident.topology.TridentBoltExecutor [DEBUG] Got a tuple: source: __system:-1, stream: __tick, id: {}, [5]
2016-03-05T03:33:04.936+0100 storm.trident.topology.TridentBoltExecutor [DEBUG] Got a tuple: source: __system:-1, stream: __tick, id: {}, [5]
2016-03-05T03:33:09.935+0100 storm.trident.topology.TridentBoltExecutor [DEBUG] Got a tuple: source: __system:-1, stream: __tick, id: {}, [5]
2016-03-05T03:33:14.936+0100 storm.trident.topology.TridentBoltExecutor [DEBUG] Got a tuple: source: __system:-1, stream: __tick, id: {}, [5]
2016-03-05T03:33:19.936+0100 storm.trident.topology.TridentBoltExecutor [DEBUG] Got a tuple: source: __system:-1, stream: __tick, id: {}, [5]
2016-03-05T03:33:24.936+0100 storm.trident.topology.TridentBoltExecutor [DEBUG] Got a tuple: source: __system:-1, stream: __tick, id: {}, [5]
2016-03-05T03:33:29.936+0100 storm.trident.topology.TridentBoltExecutor [DEBUG] Got a tuple: source: __system:-1, stream: __tick, id: {}, [5]
2016-03-05T03:33:34.937+0100 storm.trident.topology.TridentBoltExecutor [DEBUG] Got a tuple: source: __system:-1, stream: __tick, id: {}, [5]
2016-03-05T03:33:39.693+0100 storm.trident.topology.MasterBatchCoordinator [DEBUG] Failed the transaction 14813273
2016-03-05T03:33:39.696+0100 storm.trident.topology.MasterBatchCoordinator [DEBUG] Emitted: 14813273:111
2016-03-05T03:33:39.696+0100 storm.trident.spout.TridentSpoutCoordinator [DEBUG] Got a transaction: 14813273:111
2016-03-05T03:33:39.700+0100 storm.trident.spout.TridentSpoutCoordinator [DEBUG] The transaction 14813273 triggers a new batch with metadata GlobalPartitionInformation{partitionMap={0=test-kafka3:9092}}
.....................

Also I noticed that every time I submit the topology to the cluster, I see the following in its worker-670*.log:

2016-03-05T01:41:49.057+0100 b.s.m.n.Client [ERROR] connection to Netty-Client-localhost/127.0.0.1:6706 is unavailable
2016-03-05T01:41:49.057+0100 b.s.m.n.Client [ERROR] dropping 1 message(s) destined for Netty-Client-localhost/127.0.0.1:6706

I don't know if it's relevant or not...

Attaching also jstack's output (jstack-bopcat.txt).

The topology is still frozen btw after several days and many redeploys.
]