[[~revans2],
Since the current implementation violates intended storm usage and failures lost in race condition would never be replayed, I would think breaking backward compatibility would only help add warning to API users. I would think it is fine to NOT maintain backward compatibility.

About 1.x branch throwing exception if this situation is present, I think we should create a separate JIRA and get your patches as part this JIRA.
, Personally I think if its broken and no easy fix removing the functionality seems ok to me.    Throwing the exception would make it clear to the user it was removed.  If someone is actually using that functionality and requires it they will see it and can do the work to add it back correctly., Added to 1.1.0 release epic., [~revans2] I agree that this is serious and needs to be fixed. I think some degree of backward incompatibility is warranted., Ok I will look at creating a port of https://github.com/apache/storm/pull/1808 for 1.x, but do my best to maintain backwards compatibility, but reject the bad case., I'm OK to break backward compatibility even on 1.x since storm-kafka-client module is fairly new, and it's kind of evolving. Btw, we should've marked storm-kafka-client as 'evolving' opposite to 'stable' for several release periods., [~revans2]
I just start reading storm-kafka-client code, and seeing none of KafkaSpoutStreams implementations allow one topic associated to multiple streams, since *topicToStream* is a HashMap.

- 1.x branch: https://github.com/apache/storm/blob/1.x-branch/external/storm-kafka-client/src/main/java/org/apache/storm/kafka/spout/KafkaSpoutStreamsNamedTopics.java#L110
- 1.0.x branch: https://github.com/apache/storm/blob/1.0.x-branch/external/storm-kafka-client/src/main/java/org/apache/storm/kafka/spout/KafkaSpoutStreamsNamedTopics.java#L99

So if my understanding is correct, TOPICS\[2] is only assigned to STREAMS\[2], not also STREAMS\[0].
(a bit confusing though... even example code and comment are wrong.)

Given that a topic doesn't map to multiple streams, there's no chance for multiple tuples to have same KafkaSpoutMessageId (unless there's a problem with fetching and replaying), and in result, current implementation is valid.
STORM-2225 seems to be needed, but this issue seems not be valid and no longer a blocker.

[~hmclouro] Could you confirm this issue given that this is a blocker issue?, [~kabhwan],

I am find if you want to drop this from being a blocker to critical.  I may have missed the part of the code where it will get eaten by the map so we silently ignore previous requests, even though we have them in our tests and examples.  I just want to be sure that we get a better API + examples in place soon.  I have a pull request up for the changes and there are only a few minor nits that I should have fixed today., [~revans2]
I just would like to validate this issue and making progress (keep or mark as invalid), not for dropping priority.
(Btw, STORM-2176 is marked as 'Critical' but acts as 'Blocker' for releasing 1.1.0.)

Even though it turns out that STORM-2228 is not valid, I'm OK to raise priority of STORM-2225 as 'Blocker' and add STORM-2225 to 1.1.0 epic if we need the change., Sorry I got the review comments fixed, but STORM-2236 went into master and it is not going to be a simple merge by any means., Marking as 'Resolved' since STORM-2225 is resolved.]