[Hi there, I'm a newbie and I want to solve this newbie bug. I have read the related codes. Is it a real bug? 
Should I just simply add a new Utils.getFloat? Or I add Utils.getFloat and Utils.getNumber then replace all getInt with getNumber?

I ran 
{code}
egrep -ir --include=*.{java,clj} "getInt\(" . | less
{code}
and I got output: 
{code}
./backtype/storm/drpc/DRPCSpout.java:            int port = Utils.getInt(conf.get(Config.DRPC_INVOCATIONS_PORT));
./backtype/storm/drpc/ReturnResults.java:            final int port = Utils.getInt(retMap.get("port"));
./backtype/storm/messaging/netty/Client.java:        buffer_size = Utils.getInt(storm_conf.get(Config.STORM_MESSAGING_NETTY_BUFFER_SIZE));
./backtype/storm/messaging/netty/Client.java:        max_retries = Math.min(30, Utils.getInt(storm_conf.get(Config.STORM_MESSAGING_NETTY_MAX_RETRIES)));
./backtype/storm/messaging/netty/Client.java:        base_sleep_ms = Utils.getInt(storm_conf.get(Config.STORM_MESSAGING_NETTY_MIN_SLEEP_MS));
./backtype/storm/messaging/netty/Client.java:        max_sleep_ms = Utils.getInt(storm_conf.get(Config.STORM_MESSAGING_NETTY_MAX_SLEEP_MS));
./backtype/storm/messaging/netty/Client.java:        this.messageBatchSize = Utils.getInt(storm_conf.get(Config.STORM_NETTY_MESSAGE_BATCH_SIZE), 262144);
./backtype/storm/messaging/netty/Client.java:        flushCheckInterval = Utils.getInt(storm_conf.get(Config.STORM_NETTY_FLUSH_CHECK_INTERVAL_MS), 10); // default 10 ms
./backtype/storm/messaging/netty/Context.java:        int maxWorkers = Utils.getInt(storm_conf.get(Config.STORM_MESSAGING_NETTY_CLIENT_WORKER_THREADS));
./backtype/storm/messaging/netty/Context.java:        int otherWorkers = Utils.getInt(storm_conf.get(Config.TOPOLOGY_WORKERS), 1) - 1;
./backtype/storm/messaging/netty/Server.java:        queueCount = Utils.getInt(storm_conf.get(Config.WORKER_RECEIVER_THREAD_COUNT), 1);
./backtype/storm/messaging/netty/Server.java:        int buffer_size = Utils.getInt(storm_conf.get(Config.STORM_MESSAGING_NETTY_BUFFER_SIZE));
./backtype/storm/messaging/netty/Server.java:        int maxWorkers = Utils.getInt(storm_conf.get(Config.STORM_MESSAGING_NETTY_SERVER_WORKER_THREADS));
./backtype/storm/task/GeneralTopologyContext.java:        Integer max = Utils.getInt(_stormConf.get(Config.TOPOLOGY_MESSAGE_TIMEOUT_SECS));
./backtype/storm/task/GeneralTopologyContext.java:                    max = Math.max(Utils.getInt(comp), max);
./backtype/storm/testing/MemoryTransactionalSpout.java:            else _maxSpoutPending = Utils.getInt(c);
./backtype/storm/testing/OpaqueMemoryTransactionalSpout.java:            else _maxSpoutPending = Utils.getInt(c);
./backtype/storm/transactional/TransactionalSpoutCoordinator.java:            _maxTransactionActive = Utils.getInt(active);
./backtype/storm/utils/NimbusClient.java:            int nimbusPort = Utils.getInt(conf.get(Config.NIMBUS_THRIFT_PORT));
./backtype/storm/utils/Utils.java:    public static Integer getInt(Object o) {
./backtype/storm/utils/Utils.java:      Integer result = getInt(o, null);
./backtype/storm/utils/Utils.java:    public static Integer getInt(Object o, Integer defaultValue) {
./backtype/storm/utils/Utils.java:            serverPorts.add(zkServer + ":" + Utils.getInt(port));
./backtype/storm/utils/Utils.java:                .connectionTimeoutMs(Utils.getInt(conf.get(Config.STORM_ZOOKEEPER_CONNECTION_TIMEOUT)))
./backtype/storm/utils/Utils.java:                .sessionTimeoutMs(Utils.getInt(conf.get(Config.STORM_ZOOKEEPER_SESSION_TIMEOUT)))
./backtype/storm/utils/Utils.java:                            Utils.getInt(conf.get(Config.STORM_ZOOKEEPER_RETRY_INTERVAL)),
./backtype/storm/utils/Utils.java:                            Utils.getInt(conf.get(Config.STORM_ZOOKEEPER_RETRY_TIMES)),
./backtype/storm/utils/Utils.java:                            Utils.getInt(conf.get(Config.STORM_ZOOKEEPER_RETRY_INTERVAL_CEILING))));
./storm/trident/drpc/ReturnResultsReducer.java:            final int port = Utils.getInt(retMap.get("port"));
{code}, I'm also investigating this issue.

Definitely using Utils.getInt() with long value leads problem.

{quote}
        System.out.println(new Long(Long.MAX_VALUE));
        System.out.println(new Long(Long.MAX_VALUE).intValue());

        System.out.println(new Long(Long.MIN_VALUE));
        System.out.println(new Long(Long.MIN_VALUE).intValue());
{quote}

prints below
{quote}
9223372036854775807
-1
-9223372036854775808
0
{quote}
(My develop environment is OSX 10.8 with JDK 1.7.0_55.)

Implementation of Long.intValue(), it just type-cast long value to int.
It means type-casting picks lower 4 bytes from long but many situations we don't intend to.

http://www.myhowto.org/java/60-understanding-the-primitive-numeric-type-conversions-in-java/, Also, there're no Utils.getLong().
There's only Utils.getInt() so all number parameters goes to integer.
It means we're having issues when long value is present. It would converted to  narrow and it maybe weird value., And we would lose precision when we convert integer or long to float, or long to double by explicit type-casting.
http://www.informit.com/articles/article.aspx?p=1932926&seqNum=5

Since type-casting is not safe with some situation, I think we should present getInt / getLong / getFloat / getDouble (Do we need getShort / getByte?), and let Config more strict., Like I said when I filed the JIRA there are two possibilities to fix this.  We can either update Config.java to properly enforce ranges for different numbers, based off of how they will be interpreted.  Or we need to update Utils.get{Int,Long,Etc.} to handle numbers outside of the allowed range in a sensible way. Possibly something like If the number is too big to fit, make it MAX whatever. If it is too small to fit make it MIN whatever.

I think I would prefer to have Config be more restrictive, than to have the interpretation of the values be more lenient.

It should not be hard to come up with an IntegerValidator, LongValidator, etc. And replace all of the instances of Number.class with one of these two.  Or DoubleValidator, etc. if we find that they are being used that way instead.

There already is an PowerOf2Validator in ConfigValidation that you can use as a staring point.
https://github.com/apache/incubator-storm/blob/master/storm-core/src/jvm/backtype/storm/ConfigValidation.java#L87-105
, I agree. I think applying user's intention without modifying is better, so I'll try to restrict type.
Currently all things(configure params) seems to fine with Integer., GitHub user HeartSaVioR opened a pull request:

    https://github.com/apache/incubator-storm/pull/187

    STORM-328 : More restrictive to Config, strict range check within Utils.getInt()

    Related Issue : https://issues.apache.org/jira/browse/STORM-328
    
    There're some reasons to make this change.
    
    1. We use Utils.getInt() to read configuration parameters.
    2. Utils.getInt() uses Long.intValue(). It just convert long to int by narrow conversion, using lowest 4 bytes so it would be weird value.
    http://www.myhowto.org/java/60-understanding-the-primitive-numeric-type-conversions-in-java/
    3. based on 2. we need to restrict configuration parameters using strict type validation.
    (clojure seems to use long instead of int, so it should be with range check.)
    
    I checked parameter's type.
    int is enough for most of these, topology sample rate needs double.
    So I introduce IntegerValidator, IntegersValidator (for ports, etc), DoubleValidator.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/HeartSaVioR/incubator-storm STORM-328

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/incubator-storm/pull/187.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #187
    
----
commit 214ee7454548b884c591991b1faea770d1478cec
Author: Jungtaek Lim <kabhwan@gmail.com>
Date:   2014-07-11T15:59:01Z

    STORM-328 More restrictive to Config, strict range check within Utils.getInt

----
, I've post pull request to handle this issue.

https://github.com/apache/incubator-storm/pull/187, Github user revans2 commented on the pull request:

    https://github.com/apache/incubator-storm/pull/187#issuecomment-48760269
  
    Looks good to me +1.  Because the patch is new we need to wait 2 days to give everyone else a chance to comment too. I'll try to merge this in Monday or Tuesday, if I forget please yell at me so I remember.
, Github user d2r commented on a diff in the pull request:

    https://github.com/apache/incubator-storm/pull/187#discussion_r14834365
  
    --- Diff: storm-core/src/jvm/backtype/storm/ConfigValidation.java ---
    @@ -82,6 +82,76 @@ public void validateField(String name, Object field)
         public static Object MapsValidator = FieldListValidatorFactory(Map.class);
     
         /**
    +     * Validates a Integer.
    +     */
    +    public static Object IntegerValidator = new FieldValidator() {
    +        @Override
    +        public void validateField(String name, Object o) throws IllegalArgumentException {
    +            if (o == null) {
    +                // A null value is acceptable.
    --- End diff --
    
    Before this change, a null value for these fields would throw an exception:
    https://github.com/apache/incubator-storm/blob/master/storm-core/src/clj/backtype/storm/config.clj#L51
    
    Now, when it is null, it will pass validation.
    
    This is probably fine, but wanted to bring it up since it is a change.
    
    (This is not the case with the new `IntegersValidator` below.)
, Github user d2r commented on a diff in the pull request:

    https://github.com/apache/incubator-storm/pull/187#discussion_r14834476
  
    --- Diff: storm-core/test/clj/backtype/storm/config_test.clj ---
    @@ -65,13 +65,41 @@
                     (.validateField validator "test" x)
                     (catch Exception e e)))))))
     
    -(deftest test-topology-workers-is-number
    +(deftest test-integer-validator
    +   (let [validator ConfigValidation/IntegerValidator]
    +        (.validateField validator "test" 1000)
    +        (is (thrown-cause? java.lang.IllegalArgumentException
    +           (.validateField validator "test" 1.34)))
    +        (is (thrown-cause? java.lang.IllegalArgumentException
    +           (.validateField validator "test" 9223372036854775807)))))
    --- End diff --
    
    Could use `(inc Integer/MAX_VALUE)` here, but not really a big deal.
, Github user d2r commented on the pull request:

    https://github.com/apache/incubator-storm/pull/187#issuecomment-48768039
  
    +1 Have a couple of comments, but they are very minor.
, Github user HeartSaVioR commented on a diff in the pull request:

    https://github.com/apache/incubator-storm/pull/187#discussion_r14849803
  
    --- Diff: storm-core/src/jvm/backtype/storm/ConfigValidation.java ---
    @@ -82,6 +82,76 @@ public void validateField(String name, Object field)
         public static Object MapsValidator = FieldListValidatorFactory(Map.class);
     
         /**
    +     * Validates a Integer.
    +     */
    +    public static Object IntegerValidator = new FieldValidator() {
    +        @Override
    +        public void validateField(String name, Object o) throws IllegalArgumentException {
    +            if (o == null) {
    +                // A null value is acceptable.
    --- End diff --
    
    @d2r I'm not familiar with clojure, but it seems that line 51 you commented is about Class, not value.
    
    ````
    (defmethod get-FieldValidator Object
      [klass]
      {:pre [(not (nil? klass))]}
      (reify ConfigValidation$FieldValidator
        (validateField [this name v]
                       (if (and (not (nil? v))
                                (not (instance? klass v)))
                         (throw (IllegalArgumentException.
                                  (str "field " name " '" v "' must be a '" (.getName klass) "'")))))))
    ````
    
    Actually it have been allowed null value.
    It throws IllegalArgumentException when value is not null and value is not instance of Class.
, Github user HeartSaVioR commented on a diff in the pull request:

    https://github.com/apache/incubator-storm/pull/187#discussion_r14850130
  
    --- Diff: storm-core/test/clj/backtype/storm/config_test.clj ---
    @@ -65,13 +65,41 @@
                     (.validateField validator "test" x)
                     (catch Exception e e)))))))
     
    -(deftest test-topology-workers-is-number
    +(deftest test-integer-validator
    +   (let [validator ConfigValidation/IntegerValidator]
    +        (.validateField validator "test" 1000)
    +        (is (thrown-cause? java.lang.IllegalArgumentException
    +           (.validateField validator "test" 1.34)))
    +        (is (thrown-cause? java.lang.IllegalArgumentException
    +           (.validateField validator "test" 9223372036854775807)))))
    --- End diff --
    
    @d2r I replaced magic numbers to actual meaning. 
    It would be more easy to understand. Thank you for comment!
, Github user d2r commented on a diff in the pull request:

    https://github.com/apache/incubator-storm/pull/187#discussion_r14906679
  
    --- Diff: storm-core/src/jvm/backtype/storm/ConfigValidation.java ---
    @@ -82,6 +82,76 @@ public void validateField(String name, Object field)
         public static Object MapsValidator = FieldListValidatorFactory(Map.class);
     
         /**
    +     * Validates a Integer.
    +     */
    +    public static Object IntegerValidator = new FieldValidator() {
    +        @Override
    +        public void validateField(String name, Object o) throws IllegalArgumentException {
    +            if (o == null) {
    +                // A null value is acceptable.
    --- End diff --
    
    @HeartSaVioR, you are correct, the null check was for the field's class and not its value as you stated.  I misremembered and misread my own code. :)
    
    And I see in cc5f1f6 that you have added test code to cover the nil value case for Integer, Integers, and Double.
, Github user d2r commented on the pull request:

    https://github.com/apache/incubator-storm/pull/187#issuecomment-48964845
  
    +1 looks good.  Tests pass for me.
, Github user HeartSaVioR commented on the pull request:

    https://github.com/apache/incubator-storm/pull/187#issuecomment-48969984
  
    @d2r Thanks for reviewing! :)
    @revans2 At this time I think PR can be merged. :)
, Github user mjzshd commented on the pull request:

    https://github.com/apache/incubator-storm/pull/187#issuecomment-48980409
  
    (**Off-topic**) Can somebody tell me how to test a single Clojure test, for example the `config-test.clj`?
, Github user d2r commented on the pull request:

    https://github.com/apache/incubator-storm/pull/187#issuecomment-49031014
  
    > (Off-topic) Can somebody tell me how to test a single Clojure test, for example the config-test.clj?
    
    https://github.com/apache/incubator-storm/pull/14#issuecomment-31481945
    
    We could definitely use a custom clojure test runner that would do this based on arguments to maven CLI.  Right now it simply runs any test that it finds.
, [~kabhwan] thanks for the contribution.  I have merged your pull request into master.  Keep up the good work., Github user asfgit closed the pull request at:

    https://github.com/apache/incubator-storm/pull/187
, Github user HeartSaVioR commented on the pull request:

    https://github.com/apache/incubator-storm/pull/187#issuecomment-49101256
  
    @revans2 Thanks for merging! :)
]