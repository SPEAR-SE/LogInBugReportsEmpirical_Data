[[~hmclouro] I definitely don't want system test to be run as maven target. My idea behind system tests is to use ducktape to spin up vagrant nodes and run system tests on actual cluster. Lets talk., [~sriharsha] sure! I was looking at what is done in Kafka, and I know what  you mean. But let's talk nevertheless.

I have renamed the summary to a more accurate name., Re: "Let's talk."

Please make sure the results of any private discussion are echoed either here or on the mailing list., [~ptgoetz] we will update the jira on which direction we should go with system tests and whats this JIRA intends to do., I am agree with you.

In the current JStorm daily tests, there are a lot of tests such kill nimbus/kill supervisor/reboot node action, these test can't be run as maven target.  It should be run on actual cluster.




, [~hmclouro]  There are more than 40 JStorm tests cases. most of test  will check several points, not a single.

Do we need to open umbrella issue for it??  or open one sub project ?

[~Wang Tong] , [~longda] For now we are looking at what are all the test cases you've  can you just add the list of cases you cover as a sub-task jira in this https://issues.apache.org/jira/browse/STORM-1186, Perhaps we need to define better what types of tests we want and how do we want to run them.

I see several different levels/types of testing that should be run at different frequencies.  All of these are things that we need to do, but may not all fully be a part of the community for various reasons.

1) True unit tests.  They run fast enough that they should not be a burden to have on by default and be a part of any build.  They should frequently mock out dependencies and try to concentrate on only executing/testing a relatively small defined piece of code.
2) LocalCluster integration tests.  These are tests that put all of the parts of storm-core together and validate that it works as a system.  Some things that are hard to test on their own may need to be in here too.  Currently way too many of our tests are like this.  These should be able to test various configuration scenarios for correctness. I personally feel that these don't need to run as part of the build by default, but should be run as a part of CI.
3) Cluster Integration tests.  This is where ductape comes in.  These should spin up not just storm, but the other components that storm can talk to.  H-Base, HDFS, Redis, Elastisearch, Kerberos, etc.  These don't need to be exhaustive tests trying lots of different configurations, as spinning up a cluster and running a topology can be rather slow.  These should mostly test that everything can still talk to each other and we can get the expected output.  I would love to see these as a part of CI, but I don't see travis-ci supporting it.
4) Failure/Stress tests.  These should ideally use ductape too.  They should take a set of topologies and run through various situations, especially around trident, where we kill things, wait for recovery and verify we didn't do the wrong thing.  These can be extended in the future to include slow network, etc as we begin to support mitigations for these situations.  These too I would love to to see as a part of CI, but again I don't see travis CI supporting it.
5) Performance tests, probably using some of ductape to set things up but maybe not.  These I would see as an extended version of ThroughputVsLatency.  Ideally we could have one that does trident and one that can work with acking disabled, and perhaps even a more real world test that interacts with other systems.  These are looking at what the maximum throughput is that we can support for a given latency.  These are things that are not simple to automatically evaluate, and really should be run on the same hardware each time so that results can be truly comparable.  Ideally the code is in open source, but actually running them may have to be done outside of the community CI.
6) Scale tests.  How large of a cluster can we support and how large of an individual topology can we support.  This is probably similar to the performance tests, but running at a much larger scale.  We should be looking at the performance of topologies, and various operations, specifically nimbus and UI for a very large cluster.  I would love to see some/all of the code for this be in open source, but running it regularly will probably have to be done outside of the community because of a lack of hardware, and the need for manual evaluation of the results.

I think we should concentrate on the first three, with the first two covered by this JIRA, and the third covered by a separate JIRA.  We can then branch off into automating the others once the first three are done, and we have developed experience with ductape, or whatever system we decide to use. , [~revans2] +1 on splitting tests as you described., +1 on the the tests format proposed by [~revans2]

[~revans2], is it correct to assume that your idea is to have a maven profile for the category of tests in 2) and run these tests from maven passing the desired profile using a CLI property? These tests could be annotated with *@LocalClusterIntegrationTest* and not be run by default when executing mvn clean install. 

To run the tests annotated by *@LocalClusterIntegrationTest* the user would execute something like: *mvn clean install -P local-cluster-integration-tests*, [~hmclouro] That sounds good to me. Instead of LocalClusterIntegrationTest can we just call it as IntegrationTest ., Sounds good, I am not hung up on the name though.

[~hmclouro],

One thing to be aware of is that most of our tests are clojure tests currently and not JUnit tests.  So annotations are not really going to work for that.  If that is the best way to do this, then perhaps we should hold off on this part until after the JStorm merger happens., [~sriharsha], [~revans2], [~LongdaFeng] patch has been committed for review, Github user harshach commented on the pull request:

    https://github.com/apache/storm/pull/930#issuecomment-162757495
  
    @hmcl can you amend the commit message to reflect STORM-1179. Create Maven Profiles for Integration Tests.
, Github user hmcl commented on the pull request:

    https://github.com/apache/storm/pull/930#issuecomment-163363035
  
    Currently, by default no Java or Clojure integration tests get run when executing `mvn clean install`. Only unit tests get executed. The user must run maven with one of the following profiles to run the integration tests: `integration-tests-only` or `all-tests`.
, Github user harshach commented on the pull request:

    https://github.com/apache/storm/pull/930#issuecomment-163382318
  
    +1. @hmcl  can you upmerge it.
, Github user harshach commented on the pull request:

    https://github.com/apache/storm/pull/930#issuecomment-164316721
  
    @revans2 can you take a look at as well.
, Github user Parth-Brahmbhatt commented on the pull request:

    https://github.com/apache/storm/pull/930#issuecomment-164586572
  
    +1.
, Github user rfarivar commented on the pull request:

    https://github.com/apache/storm/pull/930#issuecomment-164613029
  
    LGTM. +1
, Github user unsleepy22 commented on the pull request:

    https://github.com/apache/storm/pull/930#issuecomment-164674438
  
    +1
    I have a question, does this change affect travis ci since I don't see ci scripts changed.
, Github user satishd commented on the pull request:

    https://github.com/apache/storm/pull/930#issuecomment-164766816
  
    +1
, Github user harshach commented on the pull request:

    https://github.com/apache/storm/pull/930#issuecomment-164794521
  
    Thanks @hmcl merged into master.
, Github user asfgit closed the pull request at:

    https://github.com/apache/storm/pull/930
, Merged into trunk]