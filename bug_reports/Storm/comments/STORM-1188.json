[[~dan.blanchard]
How do you define the topology with accessing PartialKeyGrouping outside of JVM? I guess if PartialKeyGrouping is accessible and initializable, Fields is expected to be accessible too, hence asking the question.

Btw, I'm not familiar with backward-compatibility manner of Thrift, so I'm sure I might be missing here, but as far as I googled it (sad) adding field into "union" doesn't look like backward compatible. For "struct" we are adding new things as "optional" but "union" doesn't provide that option., [~kabhwan]

I can't currently define a topology as a PartialKeyGrouping outside of the JVM, but I would be able to if PartialKeyGrouping had an additional constructor that took a list of strings instead of a list of Fields. If such a constructor were available, I'd be able to use a PartialKeyGrouping via the [streamparse topology DSL|http://streamparse.readthedocs.io/en/stable/topologies.html#topology-dsl] like:

{code:none}
from collections import Counter
from itertools import cycle

from streamparse import Bolt, Grouping, Spout, Topology


# In real life, this would go in another file for cleanliness
class WordSpout(Spout):
    outputs = ['word']

    def initialize(self, stormconf, context):
        self.words = cycle(['dog', 'cat', 'zebra', 'elephant'])

    def next_tuple(self):
        word = next(self.words)
        self.emit([word])


# In real life, this would go in another file for cleanliness
class WordCountBolt(Bolt):
    outputs = ['word', 'count']

    def initialize(self, conf, ctx):
        self.counter = Counter()
        self.total = 0

    def process(self, tup):
        word = tup.values.word
        # Increment only dog by 10 so it is more obvious this works
        inc_by = 10 if word == "dog" else 1
        self.counter[word] += inc_by
        self.total += inc_by
        if self.total % 1000 == 0:
            self.logger.info("counted %i words", self.total)
        self.emit([word, self.counter[word]])


class PartialKeyTestTopo(Topology):
    word_spout = WordSpout.spec(par=5)
    count_bolt = WordCountBolt.spec(inputs={word_spout: 
                                            Grouping.custom_object('org.apache.storm.grouping.PartialKeyGrouping',
                                                                   ['word'])})
{code}

With that additional constructor, no changes to the Thrift layer would be needed at all., [~dan.blanchard]
I have a patch, but actually setting up environment looks much harder than making a patch.
So I'd like to ask you to test the change.

jar files are attached.

The changeset is linked here: https://github.com/HeartSaVioR/storm/commit/19df6bf393c5c0acd0d26129e7a23188fb654b55]