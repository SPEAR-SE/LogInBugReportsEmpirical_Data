[[~revans2] I missed few comments on the storm-kafka-client PR to take out kafka-clients as provided scope.
This would cause limitation on users side if they want to include kafka-clients version other than the one we are shipping. 
We make all the dependencies for all the connectors that we've as provided. If we want to run examples and other modules we should include the kafka-clients there and make storm-kafka-client's module as provided., No it will not.  Maven does a breadth first search in resolving dependencies.

https://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html

Specifically it says 

{quote}
   * Dependency mediation - this determines what version of a dependency will be used when multiple versions of an artifact are encountered. Currently, Maven 2.0 only supports using the "nearest definition" which means that it will use the version of the closest dependency to your project in the tree of dependencies. You can always guarantee a version by declaring it explicitly in your project's POM. Note that if two dependency versions are at the same depth in the dependency tree, until Maven 2.0.8 it was not defined which one would win, but since Maven 2.0.9 it's the order in the declaration that counts: the first declaration wins.
   ** "nearest definition" means that the version used will be the closest one to your project in the tree of dependencies, eg. if dependencies for A, B, and C are defined as A -> B -> C -> D 2.0 and A -> E -> D 1.0, then D 1.0 will be used when building A because the path from A to D through E is shorter. You could explicitly add a dependency to D 2.0 in A to force the use of D 2.0
{quote}

So all a user needs to do if they want a different version of kafka is to include that version of kafka in the pom.xml.  Just like they are doing now, but after this change it will be optional for them to do it., [~revans2] sure thats works. But we are inconsistent with this approach with other connectors and also we are packaging external dependencies into connectors as well. If the issue only with running examples than we should include it in the module rather than the other way., I think that marking them as provided is the outlier.  The majority of storm-* don't mark their dependencies as provided.  In general though we should work towards doing a much better job of managing the system classpath, dependencies, and making it consistent everywhere.  Hopefully we can do that as part of this JIRA.

Right now the only things that storm "provides" on the system classpath are storm-core and it's non-shaded dependencies, and storm-rename-hack.  Nothing else is truly provided by storm.

I ran {{find . -iname pom.xml | xargs grep -B 3 provided | grep artifactId | egrep -v 'storm-core|storm-rename-hack'}} to find everywhere that we list something as provided that really isn't

{code}
./examples/storm-starter/pom.xml-        <artifactId>storm-clojure</artifactId>
./examples/storm-starter/pom.xml-      <artifactId>storm-kafka</artifactId>
./examples/storm-starter/pom.xml-      <artifactId>${kafka.artifact.id}</artifactId>
./external/sql/storm-sql-core/pom.xml-            <artifactId>storm-sql-runtime</artifactId>
./external/sql/storm-sql-kafka/pom.xml-            <artifactId>storm-sql-runtime</artifactId>
./external/sql/storm-sql-kafka/pom.xml-            <artifactId>storm-kafka</artifactId>
./external/sql/storm-sql-kafka/pom.xml-            <artifactId>${kafka.artifact.id}</artifactId>
./external/storm-cassandra/pom.xml-            <artifactId>cassandra-driver-core</artifactId>
./external/storm-kafka/pom.xml-            <artifactId>${kafka.artifact.id}</artifactId>
./storm-buildtools/maven-shade-clojure-transformer/pom.xml-            <artifactId>maven-shade-plugin</artifactId>
./storm-buildtools/storm-maven-plugins/pom.xml-      <artifactId>maven-plugin-annotations</artifactId>
{code}

storm-clojure is new in 2.0 and should not be provided.  It is not in lib.
storm-kafka and kafka.artifact.id is what this jira is about.  storm-sql-* had some issues where it was on the classpath even though it should not have been, so they need to be updated accordingly too.

Looks like storm-cassandra should have the cassandra-driver-core fixed as well.  Then all that is left is the build-tools, which are not part of a topology jar and can be ignored.

As such I will update the title of this JIRA to indicate that we should fix storm-cassandra and strom-starter's dependency on storm-clojure.]