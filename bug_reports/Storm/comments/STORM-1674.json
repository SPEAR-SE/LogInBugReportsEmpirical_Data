[Github user moesol commented on the pull request:

    https://github.com/apache/storm/pull/1287#issuecomment-204239216
  
    KafkaConfig has socketTimeoutMs which I assume maps to socket.timeout.ms. It's passed along to the SimpleConsumer's constructor.
    
    I'm not sure yet where rebalance.max.retries etc. would need to get applied. They are not a part of the FetchRequest. My vote is to keep this pull request focused on fixing the issue at hand and have a different pull request to implement the comprehensive list of configurations. 
    
    Also, I thought I saw some work to create a KafkaSpout that uses the Kafka 0.9 client. Perhaps the comprehensive list of configurations should be coupled with that work.
    

, Github user abhishekagarwal87 commented on the pull request:

    https://github.com/apache/storm/pull/1287#issuecomment-204266196
  
    This should also go to 1.x-branch given that it is bug and can improve the network bandwidth for lower load topologies
, Github user moesol commented on the pull request:

    https://github.com/apache/storm/pull/1287#issuecomment-210955517
  
    @knusbaum I added the JIRA ticket and updated the title a while ago. Are you the person who will actually perform the merge?
, Github user HeartSaVioR commented on the pull request:

    https://github.com/apache/storm/pull/1287#issuecomment-216483408
  
    @moesol Sorry to participate too lately.
    Could you craft the pull request based on master, 1.x-branch, and 0.10.x-branch? If you mind to craft several pull requests for the same, you can craft only one PR which is against the master branch.
    
    FYI, IMO, since we release Apache Storm 1.0.0, we can't handle 4 main version lines concurrently so fixing this at 0.9.x-branch doesn't make sense for now.
, Sure, in progress., GitHub user moesol opened a pull request:

    https://github.com/apache/storm/pull/1391

    (STORM-1674) Idle KafkaSpout consumes more bandwidth than needed

    * Allows minBytes in fetch request to be configured
      from KafkaConfig.fetchMinBytes.
    * Defaults new configuration KafkaConfig.fetchMinBytes to 1.
    * Defaults fetchMaxWait to 100ms instead of 10000ms.
    
    Discovered 30 megabits of traffic flowing between a set of KafkaSpouts
    and our kafka servers even though no Kafka messages were moving.
    Using the wireshark kafka dissector, we were able to see that
    each FetchRequest had maxWait set to 10000
    and minBytes set to 0. When binBytes is set to 0 the kafka server
    responds immediately when there are no messages. In turn the KafkaSpout
    polls without any delay causing a constant stream of FetchRequest/
    FetchResponse messages. Using a non-KafkaSpout client had a similar
    traffic pattern with two key differences
    1) minBytes was 1
    2) maxWait was 100
    With these FetchRequest parameters and no messages flowing,
    the kafka server delays the FetchResponse by 100 ms. This reduces
    the network traffic from megabits to the low kilobits. It also
    reduced the CPU utilization of our kafka server from 140% to 2%.
    
    Hopefully the risk of this change is low because
    the old behavior can be restored using the API by setting
    KafkaConfig.fetchMaxWait to 10000
    KafkaConfig.fetchMinBytes to 0

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/MoebiusSolutions/storm 0.10.x-branch

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/storm/pull/1391.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1391
    
----
commit ea1d3189c8113cc2888366fa5b24579776279886
Author: Robert Hastings <rhastings@moesol.com>
Date:   2016-03-31T23:14:47Z

    Addresses network flood from KafkaSpout to kafka server.
    
    * Allows minBytes in fetch request to be configured
      from KafkaConfig.fetchMinBytes.
    * Defaults new configuration KafkaConfig.fetchMinBytes to 1.
    * Defaults fetchMaxWait to 100ms instead of 10000ms.
    
    Discovered 30 megabits of traffic flowing between a set of KafkaSpouts
    and our kafka servers even though no Kafka messages were moving.
    Using the wireshark kafka dissector, we were able to see that
    each FetchRequest had maxWait set to 10000
    and minBytes set to 0. When binBytes is set to 0 the kafka server
    responds immediately when there are no messages. In turn the KafkaSpout
    polls without any delay causing a constant stream of FetchRequest/
    FetchResponse messages. Using a non-KafkaSpout client had a similar
    traffic pattern with two key differences
    1) minBytes was 1
    2) maxWait was 100
    With these FetchRequest parameters and no messages flowing,
    the kafka server delays the FetchResponse by 100 ms. This reduces
    the network traffic from megabits to the low kilobits. It also
    reduced the CPU utilization of our kafka server from 140% to 2%.
    
    Hopefully the risk of this change is low because
    the old behavior can be restored using the API by setting
    KafkaConfig.fetchMaxWait to 10000
    KafkaConfig.fetchMinBytes to 0

----
, Github user harshach commented on the pull request:

    https://github.com/apache/storm/pull/1391#issuecomment-216663883
  
    @moesol there is patch that merged into 1.0 release https://github.com/apache/storm/pull/1309/files . Does that changes work for you. Any reason for the MaxWait to be at 100
, Github user moesol commented on the pull request:

    https://github.com/apache/storm/pull/1391#issuecomment-216666896
  
    Without the MaxWait being set to 100, it is set to 10000, which means that the bolt will waiting for 10 seconds when no messages are available. On the 1.x branch, I was going to use:
    
    +    public int fetchMaxWait = FetchRequest.DefaultMaxWait();
    +    public int fetchMinBytes = FetchRequest.DefaultMinBytes();
    
    to get Kafka default behavior of 100/1.

, GitHub user moesol opened a pull request:

    https://github.com/apache/storm/pull/1393

    (STORM-1674) Idle KafkaSpout consumes more bandwidth than needed

     * Allows minBytes in fetch request to be configured
          from KafkaConfig.fetchMinBytes.
        * Defaults new configuration KafkaConfig.fetchMinBytes to 1.
        * Defaults fetchMaxWait to 100ms instead of 10000ms.
    
        Discovered 30 megabits of traffic flowing between a set of KafkaSpouts
        and our kafka servers even though no Kafka messages were moving.
        Using the wireshark kafka dissector, we were able to see that
        each FetchRequest had maxWait set to 10000
        and minBytes set to 0. When binBytes is set to 0 the kafka server
        responds immediately when there are no messages. In turn the KafkaSpout
        polls without any delay causing a constant stream of FetchRequest/
        FetchResponse messages. Using a non-KafkaSpout client had a similar
        traffic pattern with two key differences
        1) minBytes was 1
        2) maxWait was 100
        With these FetchRequest parameters and no messages flowing,
        the kafka server delays the FetchResponse by 100 ms. This reduces
        the network traffic from megabits to the low kilobits. It also
        reduced the CPU utilization of our kafka server from 140% to 2%.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/MoebiusSolutions/storm 1.x-branch

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/storm/pull/1393.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1393
    
----
commit ff43309e39fb1db2bf2ae5a3d7d0972440880dca
Author: Robert Hastings <rhastings@moesol.com>
Date:   2016-05-03T20:40:56Z

    Addresses network flood from KafkaSpout to kafka server.
    
    * Allows minBytes in fetch request to be configured
      from KafkaConfig.fetchMinBytes.
    * Defaults new configuration KafkaConfig.fetchMinBytes to 1.
    * Defaults fetchMaxWait to 100ms instead of 10000ms.
    
    Discovered 30 megabits of traffic flowing between a set of KafkaSpouts
    and our kafka servers even though no Kafka messages were moving.
    Using the wireshark kafka dissector, we were able to see that
    each FetchRequest had maxWait set to 10000
    and minBytes set to 0. When binBytes is set to 0 the kafka server
    responds immediately when there are no messages. In turn the KafkaSpout
    polls without any delay causing a constant stream of FetchRequest/
    FetchResponse messages. Using a non-KafkaSpout client had a similar
    traffic pattern with two key differences
    1) minBytes was 1
    2) maxWait was 100
    With these FetchRequest parameters and no messages flowing,
    the kafka server delays the FetchResponse by 100 ms. This reduces
    the network traffic from megabits to the low kilobits. It also
    reduced the CPU utilization of our kafka server from 140% to 2%.
    
    Hopefully the risk of this change is low because
    the old behavior can be restored using the API by setting
    KafkaConfig.fetchMaxWait to 10000
    KafkaConfig.fetchMinBytes to 0
    
    Conflicts:
    	external/storm-kafka/src/jvm/storm/kafka/KafkaConfig.java
    	external/storm-kafka/src/jvm/storm/kafka/KafkaUtils.java

commit d936ad78169283fcd8e0b8923eefc4063b59f074
Author: Robert Hastings <rhastings@moesol.com>
Date:   2016-05-03T21:19:21Z

    Merge remote-tracking branch 'apache/1.x-branch' into 1.x-branch
    
    Conflicts:
    	external/storm-kafka/src/jvm/org/apache/storm/kafka/KafkaUtils.java

----
, Github user harshach commented on the pull request:

    https://github.com/apache/storm/pull/1393#issuecomment-219730884
  
    +1
, Github user ptgoetz commented on the pull request:

    https://github.com/apache/storm/pull/1393#issuecomment-220683696
  
    +1 Nice catch!
, Github user ptgoetz commented on the pull request:

    https://github.com/apache/storm/pull/1393#issuecomment-220692188
  
    I'm in the process of merging this. Other committers please hold off. More info to follow...
, Github user asfgit closed the pull request at:

    https://github.com/apache/storm/pull/1393
, Github user ptgoetz commented on the pull request:

    https://github.com/apache/storm/pull/1393#issuecomment-220705013
  
    Thanks @moesol I merged this into master, 1.x-branch and 1.0.x-branch.
    
    Note that with 1.0.x-branch this created a conflict, as `KafkaConfig.minFetchByte` had been introduced to do the same thing as your `KafkaConfig.fetchMinBytes` variable. These are public variables, so they make up part of the API.
    
    Since 1.0.1 had already been released with the `minFetchByte` varibable, to ensure backward compatibility I used the `minFetchByte` variable name across branches.
    
    While I prefer the variable name you chose, I think it's more important to ensure backward compatibility. :)
    
    Thanks again!
, Github user moesol commented on the pull request:

    https://github.com/apache/storm/pull/1393#issuecomment-220727660
  
    I think it's awesome that this change is getting in! I'll be looking out for the next release that contains this PR.<br> 
    
    Robert Hastings, Lab SDL: 619-553-0826, Cell: 858-395-4436, Moebius: 858-455-5431x210 
    SIPR: hasting@spawar.navy.smil.mil 
    JWICS: hasting@spawar.navy.ic.gov 
    
    
    From: "P. Taylor Goetz" <notifications@github.com> 
    To: "apache/storm" <storm@noreply.github.com> 
    Cc: "rhastings" <rhastings@moesol.com>, "Mention" <mention@noreply.github.com> 
    Sent: Friday, May 20, 2016 1:03:11 PM 
    Subject: Re: [apache/storm] (STORM-1674) Idle KafkaSpout consumes more bandwidth than needed (#1393) 
    
    
    
    Thanks @moesol I merged this into master, 1.x-branch and 1.0.x-branch. 
    
    Note that with 1.0.x-branch this created a conflict, as KafkaConfig.minFetchByte had been introduced to do the same thing as your KafkaConfig.fetchMinBytes variable. These are public variables, so they make up part of the API. 
    
    Since 1.0.1 had already been released with the minFetchByte varibable, to ensure backward compatibility I used the minFetchByte variable name across branches. 
    
    While I prefer the variable name you chose, I think it's more important to ensure backward compatibility. :) 
    
    Thanks again! 
    
    — 
    You are receiving this because you were mentioned. 
    Reply to this email directly or view it on GitHub 
    

, Github user harshach commented on the issue:

    https://github.com/apache/storm/pull/1287
  
    @moesol can you please close this PR . Its already merged here https://github.com/apache/storm/commit/f069cfb08099a54448bba3f96f20c5b929ea6af3
, Github user moesol commented on the issue:

    https://github.com/apache/storm/pull/1287
  
    Merged via different PR. Closing this PR.
, Github user moesol closed the pull request at:

    https://github.com/apache/storm/pull/1287
]