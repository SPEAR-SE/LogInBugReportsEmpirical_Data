[I was able to reproduce the issue with following code snippet (should be added to [netty_unit_test.clj|https://github.com/apache/storm/blob/master/storm-core/test/clj/backtype/storm/messaging/netty_unit_test.clj]):
{code}
(deftest test-server-failed-permanently
  (let [req_msg (String. "0123456789abcdefghijklmnopqrstuvwxyz")
        storm-conf {STORM-MESSAGING-TRANSPORT "backtype.storm.messaging.netty.Context"
                    STORM-MESSAGING-NETTY-BUFFER-SIZE 1024
                    STORM-MESSAGING-NETTY-MAX-RETRIES 10
                    STORM-MESSAGING-NETTY-MIN-SLEEP-MS 1000
                    STORM-MESSAGING-NETTY-MAX-SLEEP-MS 5000
                    STORM-MESSAGING-NETTY-SERVER-WORKER-THREADS 1
                    STORM-MESSAGING-NETTY-CLIENT-WORKER-THREADS 1
                    }
        context (TransportFactory/makeContext storm-conf)
        client (.connect context nil "localhost" port)

        server (Thread.
                 (fn []
                   (let [server (.bind context nil port)
                         iter (.recv server 0 0)
                         resp (.next iter)]
                     (is (= task (.task resp)))
                     (is (= req_msg (String. (.message resp))))
                     (.close server)
                     )))
        _ (.start server)
        _ (println "Let the client to connect to server initially")
        _ (.send client task (.getBytes req_msg))
        _ (Thread/sleep 5000)
        _ (println "Permanently stopping the server")
        _ (.stop server)
        _ (Thread/sleep 5000)
        _ (println "Sending a message to the server")
        _ (.send client task (.getBytes req_msg))
        _ (println "We would expect to see RuntimeException(RuntimeException(\"connection failed \" + name(), e) here")
        _ (.send client task (.getBytes req_msg))
        _ (println "But it wasn't raised. Indeed, we're trying to reconnect on every consequetive message")
        _ (.send client task (.getBytes req_msg))
        _ (.send client task (.getBytes req_msg))
        _ (.send client task (.getBytes req_msg))
        _ (.send client task (.getBytes req_msg))
        _ (.send client task (.getBytes req_msg))
        _ (.send client task (.getBytes req_msg))
        ]
    (.close client)
    (.join server)
    (.term context)))
{code}
Note, this is not a complete test yet. 

The reconnect actually happens not infinitely but only STORM-NETTY-MESSAGE-BATCH-SIZE count (which is quite long time). Then if finally fails with ClosedChannelException when tries to write to the closed channel..., GitHub user Sergeant007 opened a pull request:

    https://github.com/apache/storm/pull/304

    [STORM-537] A worker reconnects infinitely to another dead worker

    A fix for [STORM-537](https://issues.apache.org/jira/browse/STORM-537). The bug is that a worker reconnects to another dead worker infinitely when it tries to send a batch of messages. Each message in a batch causes a new reconnect. More details are in the jira issue.
    
    Pull request contains a simple fix and tests. Actually there is "test-reconnect-to-permanently-failed-server" which is exactly for this bug. There is also "test-reconnect-to-temporarily-failed-server" which was written just-for-fun, because this functionality is not covered by other tests.
    
    Note, that storm with applied fix works well and fixed the issue on our staging environment.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/Sergeant007/storm storm-537-infinite-reconnection

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/storm/pull/304.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #304
    
----
commit 1aacccf286829e9289d86a6ed10b23cb2b21bc47
Author: Sergey Tryuber <stryuber@gmail.com>
Date:   2014-10-29T15:27:56Z

    [STORM-537] A worker reconnects infinitely to another dead worker

----
, Created a pull request with fix + tests: [https://github.com/apache/storm/pull/304], Github user Sergeant007 commented on the pull request:

    https://github.com/apache/storm/pull/304#issuecomment-61226979
  
    @d2r , @harshach , @HeartSaVioR 
    Could you, please, take a look on this pull request?
, Github user HeartSaVioR commented on a diff in the pull request:

    https://github.com/apache/storm/pull/304#discussion_r19668982
  
    --- Diff: storm-core/src/jvm/backtype/storm/messaging/netty/Client.java ---
    @@ -153,6 +153,7 @@ private synchronized void connect() {
                     if (!future.isSuccess()) {
                         if (null != current) {
                             current.close();
    +                        channel = null;
    --- End diff --
    
    I think it's more natural to move it to line 143 or 144.
    Your PR fixes situation with precondition - channel is not null but not connected, and we cannot connect later.
    Moving it to before while statement helps to explain loop's precondition.
    And actually we don't need to assign channel to null for each failed retry, because if it succeed, we assign channel to actual connection and "break" loop.
, Github user HeartSaVioR commented on the pull request:

    https://github.com/apache/storm/pull/304#issuecomment-61267951
  
    In Netty Client modification, Looks good to me.
    But I cannot review your unit test because I can't read/write Clojure yet.
    
    Btw, I'm wondering why you mention me, since I'm not committer so my verification cannot bind.
    Anyway, as a user/contributor of Storm, thanks for fixing missed spot.
, Github user HeartSaVioR commented on the pull request:

    https://github.com/apache/storm/pull/304#issuecomment-61268442
  
    Committer list is written to README.md, and you can also mention @ptgoetz and @revans2 who review many PRs.
, Github user Sergeant007 commented on a diff in the pull request:

    https://github.com/apache/storm/pull/304#discussion_r19671046
  
    --- Diff: storm-core/src/jvm/backtype/storm/messaging/netty/Client.java ---
    @@ -153,6 +153,7 @@ private synchronized void connect() {
                     if (!future.isSuccess()) {
                         if (null != current) {
                             current.close();
    +                        channel = null;
    --- End diff --
    
    Yes, makes sense. Committed the change
, Github user Sergeant007 commented on the pull request:

    https://github.com/apache/storm/pull/304#issuecomment-61273506
  
    Thanks, @HeartSaVioR 
    @ptgoetz, @revans2, @jason_j, @anfeng, @mrflip, @davidlao2k, @ptgoetz, @revans2, @miguno, @kishorvpatil, could anyone of you review this, please? Especially clojure tests, because those are my first lines of code in clojure.

, Github user clockfly commented on the pull request:

    https://github.com/apache/storm/pull/304#issuecomment-61605751
  
    @Sergeant007,
    
    Nice find about the channel = null.
    
    I am a little scared by the complexity of the test code, 
    
    I am +1 if you:
    1. add a comment on top of ```channel = null;```, such as "set it to null to make sure we thrown when reconnection fail'
    2. remove the complex test or replace with clean one.
, Github user clockfly commented on the pull request:

    https://github.com/apache/storm/pull/304#issuecomment-61605948
  
    Also, 
    
    can you remove the braket "[]" around the storm id.
    github cannot link with apache jira if you have that.
, Oh, with [] it can work, sorry., Github user Sergeant007 commented on the pull request:

    https://github.com/apache/storm/pull/304#issuecomment-61764038
  
    Thanks for the review, @clockfly 
    
    I have added necessary comment and removed the tests. Sorry, I wasn't able to simplify them - if they were in simple synchronous mode, the tests would hang infinitely if smth. is wrong instead of failures. So I've implemented them in quite complicated (since I'm new in Clojure), but robust way. Another issue was in complexity of reproducing of the bug: 1. you should be already connected and 2. it is reproduced only if you send several messages at once. Anyway, I have removed the tests as you asked me. Please, review.
, Github user ptgoetz commented on the pull request:

    https://github.com/apache/storm/pull/304#issuecomment-61883299
  
    +1
, Github user clockfly commented on the pull request:

    https://github.com/apache/storm/pull/304#issuecomment-61921292
  
    +1
, Github user ptgoetz commented on the pull request:

    https://github.com/apache/storm/pull/304#issuecomment-61923239
  
    @clockfly thanks for participating in the review. Let's hold off on merging until others have had a chance to weigh in (we span many time zones).
, Github user harshach commented on the pull request:

    https://github.com/apache/storm/pull/304#issuecomment-61927140
  
    @Sergeant007  thanks for the patch. Is there anything changed in storm-core/test/clj/backtype/storm/messaging/netty_unit_test.clj. It looks to me from the PR the content seems to be the same.
, Github user Sergeant007 commented on the pull request:

    https://github.com/apache/storm/pull/304#issuecomment-61949580
  
    @harshach 
    > Is there anything changed in storm-core/test/clj/backtype/storm/messaging/netty_unit_test.clj
    
    Since I've removed overcomplicated tests, as @clockfly asked me, there are no changes at all except of automatically removed by IDE extra whitespaces at the end of a few lines. I do believe this change is also helpful, but if you ask me, I'll completely revert the whole file.
, Github user Sergeant007 commented on the pull request:

    https://github.com/apache/storm/pull/304#issuecomment-62714754
  
    Guys, it there any update on this pull request? As for me, the bug it fixes is rather critical and the fix is simple enough (without refactoring, etc) to be merged faster.
, merged, thanks for your contribution., Github user asfgit closed the pull request at:

    https://github.com/apache/storm/pull/304
, Github user Sergeant007 commented on the pull request:

    https://github.com/apache/storm/pull/304#issuecomment-62875666
  
    Thanks for merging, Sean!
]