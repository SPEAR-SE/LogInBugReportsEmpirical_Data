[The reason this is happening is because of how we are doing shading.

We are shading joda-time but we are not shading clj-time.  This means that the clj-time code is being rewritten to point to the shaded joda-time classes, but are left in the original namespace they were in before.  So any end user who wants to use clj-time will get incompatibilities.  We have a few other clojure dependencies that this happened to.  If we really do want to support coljure for end users this feels like a blocker. , I marked it as Critical instead of a blocker but I am open to changing it., Some of clj-time works, however. It's specifically only clj-time.local that's failing. Here's an extended example:

clojure-sandbox.core> (require '[clj-time.core :as tme])
nil
clojure-sandbox.core> (tme/now)
#<DateTime 2015-09-10T21:28:57.878Z>
clojure-sandbox.core> (require '[clj-time.coerce :as tc])
nil
clojure-sandbox.core> (tc/to-date-time (tme/now))
#<DateTime 2015-09-10T21:29:24.358Z>
clojure-sandbox.core> (require '[clj-time.format :as tf])
nil
clojure-sandbox.core> (tf/parse "2015-09-10")
#<DateTime 2015-09-10T00:00:00.000Z>
clojure-sandbox.core> (require '[clj-time.local :as l])
CompilerException java.lang.ClassCastException: org.apache.storm.joda.time.format.DateTimeFormatter cannot be cast to org.joda.time.format.DateTimeFormatter, compiling:(local.clj:35:3) , Also, this issue appears to be a regression. The error does not happen in 0.9.5.

From 0.9.5:
clojure-sandbox.core> (require '[clj-time.core :as tme])
nil
clojure-sandbox.core> (tme/now)
#<DateTime 2015-09-11T01:00:48.222Z>
clojure-sandbox.core> (require '[clj-time.coerce :as tc])
nil
clojure-sandbox.core> (tc/to-date-time (tme/now))
#<DateTime 2015-09-11T01:00:58.118Z>
clojure-sandbox.core> (require '[clj-time.format :as tf])
nil
clojure-sandbox.core> (tf/parse "2015-09-10")
#<DateTime 2015-09-10T00:00:00.000Z>
clojure-sandbox.core> (require '[clj-time.local :as l])
nil, Yes this is a regression because of how we are doing shading.  However I am running into a number of issues actually shading clojure code.  I am playing around with things to see if I can make it work., I have the shading working, but the dependency reduced pom is not getting setup correctly.]