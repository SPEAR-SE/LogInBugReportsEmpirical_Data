[After the patch:
kill -15 supervisor_pid 
tail -20f $STORM_HOME/logs/supervisor.log 
2013-12-20 10:34:47 b.s.d.supervisor [INFO] Shutting down supervisor ae96c39c-5e62-4e88-824d-3e5b05ac31bf
2013-12-20 10:34:47 b.s.event [INFO] Event manager interrupted
2013-12-20 10:34:47 b.s.event [INFO] Event manager interrupted
2013-12-20 10:34:47 o.a.z.ZooKeeper [INFO] Session: 0x1430dbb25c00027 closed
2013-12-20 10:34:47 o.a.z.ClientCnxn [INFO] EventThread shut down


kill -9 worker_pid 
tail -100f $STORM_HOME/logs/worker-6101.log 
2013-12-20 10:35:01 b.s.d.worker [INFO] Shutting down receive thread
2013-12-20 10:35:01 b.s.m.loader [INFO] Shutting down receiving-thread: [WordCountTopology-1-1387364272, 39931]
2013-12-20 10:35:01 b.s.m.loader [INFO] Receiving-thread:[WordCountTopology-1-1387364272, 39931] received shutdown notice
2013-12-20 10:35:01 b.s.m.loader [INFO] Waiting for receiving-thread:[WordCountTopology-1-1387364272, 39931] to die
2013-12-20 10:35:01 b.s.m.loader [INFO] Shutdown receiving-thread: [WordCountTopology-1-1387364272, 39931]
2013-12-20 10:35:01 b.s.d.worker [INFO] Shut down receive thread
2013-12-20 10:35:01 b.s.d.worker [INFO] Terminating messaging context
2013-12-20 10:35:01 b.s.d.worker [INFO] Shutting down executors
2013-12-20 10:35:01 b.s.d.executor [INFO] Shutting down executor __acker:[3 3]
2013-12-20 10:35:01 b.s.util [INFO] Async loop interrupted!
2013-12-20 10:35:01 b.s.util [INFO] Async loop interrupted!
2013-12-20 10:35:01 b.s.d.executor [INFO] Shut down executor __acker:[3 3]
2013-12-20 10:35:01 b.s.d.executor [INFO] Shutting down executor count:[7 7]
2013-12-20 10:35:01 b.s.util [INFO] Async loop interrupted!
2013-12-20 10:35:01 b.s.util [INFO] Async loop interrupted!
2013-12-20 10:35:01 b.s.d.executor [INFO] Shut down executor count:[7 7]
2013-12-20 10:35:01 b.s.d.executor [INFO] Shutting down executor count:[11 11]
2013-12-20 10:35:01 b.s.util [INFO] Async loop interrupted!
2013-12-20 10:35:01 b.s.util [INFO] Async loop interrupted!
2013-12-20 10:35:01 b.s.d.executor [INFO] Shut down executor count:[11 11]
2013-12-20 10:35:01 b.s.d.executor [INFO] Shutting down executor count:[15 15]
2013-12-20 10:35:01 b.s.util [INFO] Async loop interrupted!
2013-12-20 10:35:01 b.s.util [INFO] Async loop interrupted!
2013-12-20 10:35:01 b.s.d.executor [INFO] Shut down executor count:[15 15]
2013-12-20 10:35:01 b.s.d.executor [INFO] Shutting down executor split:[19 19]
2013-12-20 10:35:01 b.s.util [INFO] Async loop interrupted!
2013-12-20 10:35:01 b.s.util [INFO] Async loop interrupted!
2013-12-20 10:35:01 b.s.d.executor [INFO] Shut down executor split:[19 19]
2013-12-20 10:35:01 b.s.d.executor [INFO] Shutting down executor split:[23 23]
2013-12-20 10:35:01 b.s.util [INFO] Async loop interrupted!
2013-12-20 10:35:01 b.s.util [INFO] Async loop interrupted!
2013-12-20 10:35:01 b.s.d.executor [INFO] Shut down executor split:[23 23]
2013-12-20 10:35:01 b.s.d.executor [INFO] Shutting down executor spout:[27 27]
2013-12-20 10:35:01 b.s.util [INFO] Async loop interrupted!
2013-12-20 10:35:01 b.s.util [INFO] Async loop interrupted!
2013-12-20 10:35:01 b.s.d.executor [INFO] Shut down executor spout:[27 27]
2013-12-20 10:35:01 b.s.d.executor [INFO] Shutting down executor __system:[-1 -1]
2013-12-20 10:35:01 b.s.util [INFO] Async loop interrupted!
2013-12-20 10:35:01 b.s.util [INFO] Async loop interrupted!
2013-12-20 10:35:01 b.s.d.executor [INFO] Shut down executor __system:[-1 -1]
2013-12-20 10:35:01 b.s.d.worker [INFO] Shut down executors
2013-12-20 10:35:01 b.s.d.worker [INFO] Shutting down transfer thread
2013-12-20 10:35:01 b.s.util [INFO] Async loop interrupted!
2013-12-20 10:35:01 b.s.d.worker [INFO] Shut down transfer thread
2013-12-20 10:35:01 b.s.d.worker [INFO] Shutting down default resources
2013-12-20 10:35:01 b.s.d.worker [INFO] Shut down default resources
2013-12-20 10:35:01 b.s.d.worker [INFO] Disconnecting from storm cluster state context
2013-12-20 10:35:01 o.a.z.ClientCnxn [INFO] EventThread shut down
2013-12-20 10:35:01 o.a.z.ZooKeeper [INFO] Session: 0x1430dbb25c00031 closed
2013-12-20 10:35:01 b.s.d.worker [INFO] Shut down worker WordCountTopology-1-1387364272 ae96c39c-5e62-4e88-824d-3e5b05ac31bf 39931, My only issue here is that we really would want to back up the kill -15 with a kill -9 a little while later.  We cannot be sure that the process is down unless we use the -9.  But this would either mean that we have to wait a certain amount of time no matter what in between the two calls or we need a way to check if the process is still up.  I can see the check being added in later if needed, but I don't want to rely on user code to always exit cleanly when asked politely., GitHub user Parth-Brahmbhatt opened a pull request:

    https://github.com/apache/incubator-storm/pull/139

     STORM-183: supervisor and worker should rugister with runtime for shutd...

    ...own hooks. Supervisors should use kill -15 before kill -9 to allow workers to perform cleanup.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/Parth-Brahmbhatt/incubator-storm STORM-183

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/incubator-storm/pull/139.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #139
    
----
commit f15714c0a8342147c9cfe4410c86c0a325d30a4b
Author: Parth-Brahmbhatt <pbrahmbhatt@hw10960.local>
Date:   2014-06-12T22:54:34Z

     STORM-183: supervisor and worker should rugister with runtime for shutdown hooks. Supervisors should use kill -15 before kill -9 to allow workers to perform cleanup.

----
, Github user Parth-Brahmbhatt commented on the pull request:

    https://github.com/apache/incubator-storm/pull/139#issuecomment-46036698
  
    Some changes were not pushed with the last commit so pushed them and resending now.
, Github user revans2 commented on a diff in the pull request:

    https://github.com/apache/incubator-storm/pull/139#discussion_r13763330
  
    --- Diff: storm-core/src/clj/backtype/storm/util.clj ---
    @@ -412,6 +404,41 @@
     (defn sleep-until-secs [target-secs]
       (Time/sleepUntil (* (long target-secs) 1000)))
     
    +(def ^:const sig-kill 9)
    +
    +(def ^:const sig-term 15)
    +
    +(defn send-signal-to-process [pid signum]
    --- End diff --
    
    With the new coding guidelines, could you put the parameter list on a separate line?
    
    ```
    (defn send-signal-to-process
      [pid signum]
      ...)
    ```
, Github user revans2 commented on a diff in the pull request:

    https://github.com/apache/incubator-storm/pull/139#discussion_r13765591
  
    --- Diff: storm-core/src/clj/backtype/storm/daemon/worker.clj ---
    @@ -448,4 +448,6 @@
     (defn -main [storm-id assignment-id port-str worker-id]  
       (let [conf (read-storm-config)]
         (validate-distributed-mode! conf)
    -    (mk-worker conf nil storm-id assignment-id (Integer/parseInt port-str) worker-id)))
    +    (.addShutdownHook (Runtime/getRuntime)
    --- End diff --
    
    I'm not sure that this shutdown hook will be called in all cases.  Most places the worker code calls Runtime.halt on error, which does not call any of the shutdown hooks.  It just exits.  I think that was done because shutdown hooks can lock up, and if they do the process does not exit.  So we could get zombie processes.  Typically I have seen this addressed by installing a shutdown hook that will let the other shutdown hooks run for a maximum amount of time, at which point it calls Runtime.halt.
, Github user Parth-Brahmbhatt commented on a diff in the pull request:

    https://github.com/apache/incubator-storm/pull/139#discussion_r13766558
  
    --- Diff: storm-core/src/clj/backtype/storm/util.clj ---
    @@ -412,6 +404,41 @@
     (defn sleep-until-secs [target-secs]
       (Time/sleepUntil (* (long target-secs) 1000)))
     
    +(def ^:const sig-kill 9)
    +
    +(def ^:const sig-term 15)
    +
    +(defn send-signal-to-process [pid signum]
    --- End diff --
    
    adding this, can you also point me to the guidelines you are referring to.
, Github user revans2 commented on a diff in the pull request:

    https://github.com/apache/incubator-storm/pull/139#discussion_r13768469
  
    --- Diff: storm-core/src/clj/backtype/storm/util.clj ---
    @@ -412,6 +404,41 @@
     (defn sleep-until-secs [target-secs]
       (Time/sleepUntil (* (long target-secs) 1000)))
     
    +(def ^:const sig-kill 9)
    +
    +(def ^:const sig-term 15)
    +
    +(defn send-signal-to-process [pid signum]
    --- End diff --
    
    This was just recently merged in. The guidelines are under
    https://github.com/apache/incubator-storm/blob/master/DEVELOPER.md#contribute-code
    In the paragraph starting with 'Please use idiomatic Clojure style'
    
    For the most part it is place parameters in a separate line from the function name.  Use document strings as needed.  Don't have closing ')' on their own line.  I know we don't follow it everywhere, but we are trying to start.
, Github user Parth-Brahmbhatt commented on the pull request:

    https://github.com/apache/incubator-storm/pull/139#issuecomment-46065430
  
    addressed comments , Would appreciate any suggestions for a better and less verbose name for function add-shutdown-hook-with-force-kill-in-1-sec.
, Github user revans2 commented on the pull request:

    https://github.com/apache/incubator-storm/pull/139#issuecomment-46197891
  
    There are a number of merge conflicts now.  Could you please upmerge to master.
, Github user Parth-Brahmbhatt commented on the pull request:

    https://github.com/apache/incubator-storm/pull/139#issuecomment-46238986
  
    Ran into some weird git issues so just forked off a new repo and created a new pull request, https://github.com/apache/incubator-storm/pull/143. The fork was created like an hour ago so should not have any merge conflicts. I can merge to my master if it makes any easier for you to review.
, Github user revans2 commented on the pull request:

    https://github.com/apache/incubator-storm/pull/139#issuecomment-46241120
  
    Could you close this pull request then, and add STORM-183 to the other one?
, Github user Parth-Brahmbhatt closed the pull request at:

    https://github.com/apache/incubator-storm/pull/139
, Github user Parth-Brahmbhatt commented on the pull request:

    https://github.com/apache/incubator-storm/pull/139#issuecomment-46241965
  
    closed this one, not sure what you mean by add STORM-183, do you mean adding "STORM-183" text as prefix to pull request and commit message?
, Github user revans2 commented on a diff in the pull request:

    https://github.com/apache/incubator-storm/pull/143#discussion_r13833165
  
    --- Diff: storm-core/src/clj/backtype/storm/util.clj ---
    @@ -388,13 +388,51 @@
         (catch IOException e
           (log-message "Could not extract " dir " from " jarpath))))
     
    -(defn ensure-process-killed! [pid]
    +(defn sleep-secs [secs]
    +  (when (pos? secs)
    +    (Time/sleep (* (long secs) 1000))))
    +
    +(defn sleep-until-secs [target-secs]
    +  (Time/sleepUntil (* (long target-secs) 1000)))
    +
    +(def ^:const sig-kill 9)
    +
    +(def ^:const sig-term 15)
    +
    +(defn send-signal-to-process
    +  [pid signum]
    +  (try-cause
    +    (exec-command! (str (if on-windows?
    +                          (if (== signum sig-kill) "taskkill /f /pid " "taskkill /pid ")
    +                          (str "kill -" signum " "))
    +                     pid))
    +    (catch ExecuteException e
    +      (log-message "Error when trying to kill " pid ". Process is probably already dead."))))
    +
    +(defn force-kill-process
    +  [pid]
    +  (send-signal-to-process pid sig-kill))
    +
    +(defn kill-process-with-sig-term
    +  [pid]
    +  (send-signal-to-process pid sig-term))
    +
    +(defn ensure-process-killed!
    +  [pid]
       ;; TODO: should probably do a ps ax of some sort to make sure it was killed
       (try-cause
    -    (exec-command! (str (if on-windows? "taskkill /f /pid " "kill -9 ") pid))
    +    (kill-process-with-sig-term pid)
         (catch ExecuteException e
           (log-message "Error when trying to kill " pid ". Process is probably already dead."))))
     
    +(defn add-shutdown-hook-with-force-kill-in-1-sec
    --- End diff --
    
    I was thinking that this would not run some other function before calling sleep.  The Shutdown hook runs when the process is going to exit, if the other function gets stuck (which I was able to do in my testing) then the process never exits.
, Github user revans2 commented on a diff in the pull request:

    https://github.com/apache/incubator-storm/pull/143#discussion_r13833188
  
    --- Diff: storm-core/src/clj/backtype/storm/util.clj ---
    @@ -388,13 +388,51 @@
         (catch IOException e
           (log-message "Could not extract " dir " from " jarpath))))
     
    -(defn ensure-process-killed! [pid]
    +(defn sleep-secs [secs]
    +  (when (pos? secs)
    +    (Time/sleep (* (long secs) 1000))))
    +
    +(defn sleep-until-secs [target-secs]
    +  (Time/sleepUntil (* (long target-secs) 1000)))
    +
    +(def ^:const sig-kill 9)
    +
    +(def ^:const sig-term 15)
    +
    +(defn send-signal-to-process
    +  [pid signum]
    +  (try-cause
    +    (exec-command! (str (if on-windows?
    +                          (if (== signum sig-kill) "taskkill /f /pid " "taskkill /pid ")
    +                          (str "kill -" signum " "))
    +                     pid))
    +    (catch ExecuteException e
    +      (log-message "Error when trying to kill " pid ". Process is probably already dead."))))
    +
    +(defn force-kill-process
    +  [pid]
    +  (send-signal-to-process pid sig-kill))
    +
    +(defn kill-process-with-sig-term
    +  [pid]
    +  (send-signal-to-process pid sig-term))
    +
    +(defn ensure-process-killed!
    +  [pid]
       ;; TODO: should probably do a ps ax of some sort to make sure it was killed
       (try-cause
    -    (exec-command! (str (if on-windows? "taskkill /f /pid " "kill -9 ") pid))
    +    (kill-process-with-sig-term pid)
         (catch ExecuteException e
           (log-message "Error when trying to kill " pid ". Process is probably already dead."))))
     
    +(defn add-shutdown-hook-with-force-kill-in-1-sec
    +  "adds the user supplied function as a shutdown hook for cleanup.
    +   Also adds a function that sleeps for a second and then sends kill -9 to process to avoid any zombie process in case
    +   cleanup function hangs."
    +  [func]
    +  (.addShutdownHook (Runtime/getRuntime) (Thread. #((func)
    +                                                     (sleep-secs 1)
    +                                                     (force-kill-process (process-pid))))))
    --- End diff --
    
    I would prefer to do a Runtime.halt here instead of force-kill-process.  I think it is more future proof.
, Github user ptgoetz commented on the pull request:

    https://github.com/apache/incubator-storm/pull/139#issuecomment-46244421
  
    Yes, just prefix the title with the JIRA ID.
, Github user Parth-Brahmbhatt commented on a diff in the pull request:

    https://github.com/apache/incubator-storm/pull/143#discussion_r13833622
  
    --- Diff: storm-core/src/clj/backtype/storm/util.clj ---
    @@ -388,13 +388,51 @@
         (catch IOException e
           (log-message "Could not extract " dir " from " jarpath))))
     
    -(defn ensure-process-killed! [pid]
    +(defn sleep-secs [secs]
    +  (when (pos? secs)
    +    (Time/sleep (* (long secs) 1000))))
    +
    +(defn sleep-until-secs [target-secs]
    +  (Time/sleepUntil (* (long target-secs) 1000)))
    +
    +(def ^:const sig-kill 9)
    +
    +(def ^:const sig-term 15)
    +
    +(defn send-signal-to-process
    +  [pid signum]
    +  (try-cause
    +    (exec-command! (str (if on-windows?
    +                          (if (== signum sig-kill) "taskkill /f /pid " "taskkill /pid ")
    +                          (str "kill -" signum " "))
    +                     pid))
    +    (catch ExecuteException e
    +      (log-message "Error when trying to kill " pid ". Process is probably already dead."))))
    +
    +(defn force-kill-process
    +  [pid]
    +  (send-signal-to-process pid sig-kill))
    +
    +(defn kill-process-with-sig-term
    +  [pid]
    +  (send-signal-to-process pid sig-term))
    +
    +(defn ensure-process-killed!
    +  [pid]
       ;; TODO: should probably do a ps ax of some sort to make sure it was killed
       (try-cause
    -    (exec-command! (str (if on-windows? "taskkill /f /pid " "kill -9 ") pid))
    +    (kill-process-with-sig-term pid)
         (catch ExecuteException e
           (log-message "Error when trying to kill " pid ". Process is probably already dead."))))
     
    +(defn add-shutdown-hook-with-force-kill-in-1-sec
    --- End diff --
    
    You are right, I want to avoid a model where people have to call (.addShutdownHook blah blah) and then remember to call (add-shutdown-hook-with-force-kill-in-1-sec). 
    How about adding the use function and the actual forcing function as two seperate shutdown hook threads? 
    (defn add-shutdown-hook-with-force-kill-in-1-sec
      [func]
      (.addShutdownHook (Runtime/getRuntime) (Thread. #(func)))
      (.addShutdownHook (Runtime/getRuntime) (Thread. #((sleep-secs 1)
                                                        (.halt (RunTime/getRunTime) 20)))))
, Github user Parth-Brahmbhatt commented on a diff in the pull request:

    https://github.com/apache/incubator-storm/pull/143#discussion_r13833623
  
    --- Diff: storm-core/src/clj/backtype/storm/util.clj ---
    @@ -388,13 +388,51 @@
         (catch IOException e
           (log-message "Could not extract " dir " from " jarpath))))
     
    -(defn ensure-process-killed! [pid]
    +(defn sleep-secs [secs]
    +  (when (pos? secs)
    +    (Time/sleep (* (long secs) 1000))))
    +
    +(defn sleep-until-secs [target-secs]
    +  (Time/sleepUntil (* (long target-secs) 1000)))
    +
    +(def ^:const sig-kill 9)
    +
    +(def ^:const sig-term 15)
    +
    +(defn send-signal-to-process
    +  [pid signum]
    +  (try-cause
    +    (exec-command! (str (if on-windows?
    +                          (if (== signum sig-kill) "taskkill /f /pid " "taskkill /pid ")
    +                          (str "kill -" signum " "))
    +                     pid))
    +    (catch ExecuteException e
    +      (log-message "Error when trying to kill " pid ". Process is probably already dead."))))
    +
    +(defn force-kill-process
    +  [pid]
    +  (send-signal-to-process pid sig-kill))
    +
    +(defn kill-process-with-sig-term
    +  [pid]
    +  (send-signal-to-process pid sig-term))
    +
    +(defn ensure-process-killed!
    +  [pid]
       ;; TODO: should probably do a ps ax of some sort to make sure it was killed
       (try-cause
    -    (exec-command! (str (if on-windows? "taskkill /f /pid " "kill -9 ") pid))
    +    (kill-process-with-sig-term pid)
         (catch ExecuteException e
           (log-message "Error when trying to kill " pid ". Process is probably already dead."))))
     
    +(defn add-shutdown-hook-with-force-kill-in-1-sec
    +  "adds the user supplied function as a shutdown hook for cleanup.
    +   Also adds a function that sleeps for a second and then sends kill -9 to process to avoid any zombie process in case
    +   cleanup function hangs."
    +  [func]
    +  (.addShutdownHook (Runtime/getRuntime) (Thread. #((func)
    +                                                     (sleep-secs 1)
    +                                                     (force-kill-process (process-pid))))))
    --- End diff --
    
    done.
, Github user revans2 commented on the pull request:

    https://github.com/apache/incubator-storm/pull/143#issuecomment-46245056
  
    I have also hit a few situations where the kill -9 never came out.  I saw the kill -15 but not the final death blow.  I can reproduce it by launching several word count applications on a 1 node cluster, and then killing them 1 at a time (whichever one has the full 3 workers running)  Eventually I am left with several workers that refuse to die.
, Github user Parth-Brahmbhatt commented on the pull request:

    https://github.com/apache/incubator-storm/pull/143#issuecomment-46246787
  
    i am trying to reproduce this but in my case the worker always ends up killing, I am testing with the new change where the force-shutdown runs in a separate thread so it is not blocked by the other shutdown hook function. How r u killing the workers? Did you make any other code changes locally to ensure workers hang around longer?
, Github user revans2 commented on the pull request:

    https://github.com/apache/incubator-storm/pull/143#issuecomment-46248380
  
    When I ran I did run jstack on the workers and all of them were stuck somewhere in the shutdown.  So if you fixed the worker you would not see this.
    
    ```"Thread-23" #51 prio=5 os_prio=31 tid=0x00007f91a1059000 nid=0xb103 in Object.wait() [0x0000000193600000]
       java.lang.Thread.State: WAITING (on object monitor)
    	at java.lang.Object.wait(Native Method)
    	at java.lang.Thread.join(Thread.java:1244)
    	- locked <0x000000011a65d4f8> (a java.lang.Thread)
    	at java.lang.Thread.join(Thread.java:1318)
    	at backtype.storm.util$async_loop$reify__1051.join(util.clj:486)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at clojure.lang.Reflector.invokeMatchingMethod(Reflector.java:93)
    	at clojure.lang.Reflector.invokeNoArgInstanceMember(Reflector.java:298)
    	at backtype.storm.daemon.executor$mk_executor$reify__5504.shutdown(executor.clj:353)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at clojure.lang.Reflector.invokeMatchingMethod(Reflector.java:93)
    	at clojure.lang.Reflector.invokeNoArgInstanceMember(Reflector.java:298)
    	at backtype.storm.daemon.worker$fn__5930$exec_fn__2806__auto____5931$shutdown_STAR___5949.invoke(worker.clj:392)
    	at backtype.storm.daemon.worker$fn__5930$exec_fn__2806__auto__$reify__5975.shutdown(worker.clj:423)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at clojure.lang.Reflector.invokeMatchingMethod(Reflector.java:93)
    	at clojure.lang.Reflector.invokeNoArgInstanceMember(Reflector.java:298)
    	at backtype.storm.daemon.worker$_main$fn__6002.invoke(worker.clj:455)
    	at backtype.storm.util$add_shutdown_hook_with_force_kill_in_1_sec$fn__975.invoke(util.clj:433)
    	at clojure.lang.AFn.run(AFn.java:24)
    	at java.lang.Thread.run(Thread.java:744)```
    

, Github user Parth-Brahmbhatt commented on the pull request:

    https://github.com/apache/incubator-storm/pull/143#issuecomment-46250710
  
    I have tried with both old and new code and I still can not reproduce this. I have tried killing the process with both SIGTERM and SIGINT, in both cases the process terminates.
    
    If you are killing in some other way or if you have some other local code change to make workers sleep during shutdown phase then let me know. 
    
    I have checked in the change to make the final shutdown blow run in a separate thread.
, Github user revans2 commented on the pull request:

    https://github.com/apache/incubator-storm/pull/143#issuecomment-46302266
  
    I do like combining the two shutdown hooks together.
    
    I understand what is happening now with the leaked processes now.  I was confused about exactly what the code was supposed to be doing.
    
    I thought that the supervisor would send a sig term to the process, and then wait a while and send a sig kill to it.  I didn't realize that instead it was just sending a sigterm, and letting the worker send the sigkill to itself.
    
    The issue with not having the supervisor force-kill the child is that a bug in the worker, or in a child process the worker forks, could result in the process being leaked.  
    
    I don't want to do the sleep right after the sigterm, because if there are multiple workers the sleeps will add up.  I think we want to modify sync-processes in the supervisor to do 2 passes over the workers that need to be killed.  The first pass would ask the worker to exit (sigterm).  The second pass would force-kill the worker and cleanup the directories associated with it.  There could be a 1 second sleep in between if any workers were being killed (I don't want to sleep if no workers are shutting down). 
    
    Does that sound reasonable?
, Github user Parth-Brahmbhatt commented on the pull request:

    https://github.com/apache/incubator-storm/pull/143#issuecomment-46333200
  
    Not sure why a bug in the worker would cause leaked processes even when we already have a shutdown hook in workers that should kill it in a second but I am no expert on unix  signal processing so I will trust you on that. Added the supervisor sequence to do what you have proposed. 
, It is mostly to cover all possible situations.  In unix a process can install a handler for SIGTERM and actually ignore it entirely.  But SIGKILL cannot be ignored.  The OS will not give the user process any chance to handle it.  Java handles SIGTERM and calls System.exit when it happens.  But if the shutdown handlers lock up for some reason we have effectively ignored the SIGTERM.  In my case something happened so the executor would not exit, not sure why, but this caused the shutdown to never finish. , Github user Parth-Brahmbhatt commented on the pull request:

    https://github.com/apache/incubator-storm/pull/143#issuecomment-46592535
  
    @revans2  When you have a chance can you please review the latest change? I have implemented what you proposed in your last comment.
, Github user revans2 commented on the pull request:

    https://github.com/apache/incubator-storm/pull/143#issuecomment-46615057
  
    Thanks for the update.  It looks good, but a few minor things to rearrange. Thanks for sticking with this it will be a huge benefit to storm once it is in.
, Github user revans2 commented on the pull request:

    https://github.com/apache/incubator-storm/pull/143#issuecomment-46622640
  
    Thanks for clarifying that, I forgot that is what it was doing. Looking forward to your update reordering the supervisor cleanup order.
, Github user Parth-Brahmbhatt commented on the pull request:

    https://github.com/apache/incubator-storm/pull/143#issuecomment-46717551
  
    Superviosr cleanup order has been updated. 
, Github user revans2 commented on the pull request:

    https://github.com/apache/incubator-storm/pull/143#issuecomment-46732024
  
    I am a +1.  Everything seems to be working OK.
, Github user ptgoetz commented on the pull request:

    https://github.com/apache/incubator-storm/pull/143#issuecomment-47037071
  
    +1
, Github user revans2 commented on the pull request:

    https://github.com/apache/incubator-storm/pull/143#issuecomment-47103756
  
    @Parth-Brahmbhatt I am going to merge this in, but I want to make sure I give the proper credit, both in the README and on the JIRA.  For now I am just including your github account, but if you want me to assign the JIRA to you and update the README please let me know which JIRA account to use.
, Github user asfgit closed the pull request at:

    https://github.com/apache/incubator-storm/pull/143
, I merged this into master, Thanks Parth-Brahmbhatt for the pull request.]