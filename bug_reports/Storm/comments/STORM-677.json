[on https://github.com/apache/storm/pull/429 [~marz] said

bq. Nimbus only knows a worker is having trouble when it stops sending heartbeats. If a worker gets into a bad state, the worst thing to do is have it continue trying to limp along in that bad state. It should instead suicide as quickly as possible. It seems counterintuitive, but this aggressive suiciding behavior actually makes things more robust as it prevents processes from getting into weird, potentially undefined states. This has been a crucial design principle in Storm from the beginning. One consequence of it is that any crucial system thread that receives an unrecoverable exception must suicide the process rather than die quietly.

bq. For the connection retry problem, it's a tricky situation since it may not be able to connect because the other worker is still getting set up. So the retry policy should be somehow related to the launch timeouts for worker processes specified in the configuration. Not being able to connect after the launch timeout + a certain number of attempts + a buffer period would certainly qualify as a weird state, so the process should suicide in that case. Suiciding and restarting gets the worker back to a known state.

bq. So in this case, I am heavily in favor of Option 2. I don't care about killing the other tasks in the worker because this is a rare situation. It is infinitely more important to get the worker back to a known, robust state than risk leaving it in a weird state permanently.

bq. I would like to see these issues addressed as part of this patch.

I see your point and think option 2 is preferable long term as it sends a signal to nimbus that something is potentially wrong so it can take appropriate steps.  Ultimately all the options end up looking very similar. The connection is not being established so we do some things in between and try to establish the connection again.  The issue for me is the things that we do in between giving up on making a connection and trying to establish the connection again.  If that itself can cause other workers to give up on a connection it could result in the topology never reaching a stable state.  I don't see this happening in practice without the system being over loaded, which at least for us is more common then I like.     , [~marz] FYI: I copied your feedback on the max retries issue to this ticket (STORM-677)., I will reply to the matter at hand in a separate comment.  For now I'd like to ask a question that may or may not be related to this issue:  How does a worker (or a Netty client) determine that it is actually connected to correct remote worker (Netty server)?  While debugging STORM-329 I noticed that under certain conditions (think: connection/restart race condition) a worker may end up connecting to the wrong remote worker., Option 2 doesn't have to be long term as it should be easy to implement. I do not view the options as looking very similar as I think Option 2 will be significantly more robust – getting out of a weird state as fast as possible is really important.

"If that itself can cause other workers to give up on a connection it could result in the topology never reaching a stable state." –> This is exactly why the amount of time attempting to make a connection must be related to the start timeout for a worker. , Periodically, every 10 seconds at least, the current compiled topology is downloaded, if it changed, by all workers from zookeeper and the routing/connections are updated.  Connections not needed any longer are closed, and new connections are created.  If a worker receives any tuples that are not for it, they are discarded and an error message is logged.  If a connection is to the wrong worker, in my experience, it has always been because workers were reassigned and the remote supervisor launched new workers faster then the current worker could update the routing.  This is also why it is important that the send method in the client not bock, because of the way locking is handled in storm if it does block, it can block the routing/connections from being updated and incorrect connections can persist longer than the typical 10 second maximum.

Also secure versions of storm optionally use SASL when creating connections, so any connection to a worker of a different topology will never be established in the first place., Thanks for the explanation, Bobby!

> If a connection is to the wrong worker, in my experience,
> it has always been because workers were reassigned and the
> remote supervisor launched new workers faster then the
> current worker could update the routing.

Yes, this has been my experience, too.

> If a worker receives any tuples that are not for it,
> they are discarded and an error message is logged.

Do you have a pointer to the relevant code to see how exactly this check/discarding is being performed?]