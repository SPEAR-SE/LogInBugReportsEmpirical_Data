[I'm using sbt. I've been trying to exclude any and all logging dependencies. This error will not go away and has now cost me days of development time., By default the packaging we suggest groups to use is the maven-assembly-plugin with jar-with-dependencies

http://maven.apache.org/plugins/maven-assembly-plugin/descriptor-refs.html#jar-with-dependencies

You can manually exclude the slf4j-log4j12 in your pom under all of the dependencies, or you can create your own assembly config that excludes them there.  The main difference here is that logging may cause some problems in your unit tests (NOTE: I just threw this together and have not tested it}

{code:xml}
<assembly xmlns="http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.0" 
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.0 http://maven.apache.org/xsd/assembly-1.1.0.xsd">
  <id>jar-with-dependencies-but-no-log4j</id>
  <formats>
    <format>jar</format>
  </formats>
  <includeBaseDirectory>false</includeBaseDirectory>
  <dependencySets>
    <dependencySet>
      <outputDirectory>/</outputDirectory>
      <useProjectArtifact>true</useProjectArtifact>
      <unpack>true</unpack>
      <scope>runtime</scope>
      <excludes>
        <exclude>org.slf4j:slf4j-log4j12</exclude>
        <exclude>log4j:log4j</exclude>
      </excludes>
    </dependencySet>
  </dependencySets>
</assembly>
{code}

The other thing to be aware of is that running 
{code}
mvn dependency:tree
{code}

Will print out exactly which dependencies are being pulled in and where they are coming from.  Be aware that once you squash one version of a dependency with an exclude, you need to run the command again, because it only prints out a dependency once, and if multiple things are pulling it in, the next one will bubble up to the top., Do you think it would be enough to document this so it is simpler to fix topologies? Or are you looking for us to switch back to log4j? Or do you want something radical/scary like munge with submitted topology jars and try to strip out problematic classes? , I ended up manually excluding all log4j dependencies from included libraries that required them and removing all log4j code from the codebase. I think that better documenting this would be a good way to move forward. The things that I tried before this caused very strange behavior in storm (I tried things like munging classpaths and jars).

Here is a sample from the build.sbt
{code:title=build.sbt}
"com.datastax.cassandra" % "cassandra-driver-core" % "1.0.3"
    exclude ("org.slf4j", "slf4j-api")
    exclude ("org.slf4j", "slf4j-log4j12")
    exclude ("log4j", "log4j"),
...
{code}

I found them with sbt dependency-graph combined with a command like
{code}
find ~/.ivy2/cache/ -exec grep -ln slf4j {} \;
{code}

I hope that helps anyone else that might hit this issue]