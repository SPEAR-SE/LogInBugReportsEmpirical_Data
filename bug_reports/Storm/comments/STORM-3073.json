[For the spout executors I don't think this is a big issue, because as far as I can tell it only happens if the spout emits from non-nextTuple method, if the spout is blocked for so long that it receives 1024 metrics ticks while being unable to flush, or if it emits many tuples in one nextTuple call (which is a bad idea anyway because it prevents maxSpoutPending from working properly). "Fixing" this by allowing pendingEmits to grow unbounded would likely just lead to unbounded growth and OOME for cases like spouts emitting from fail().

I think it might be an issue for bolts though, since this puts a cap on how many tuples a bolt can safely emit per input tuple, without potentially crashing the worker. For example, I modified ExclamationTopology so the bolt emits 2048 copies of the input tuple, and this crashes the worker if the bolt executor happens to need to put the tuples in pendingEmits.

We should be able to fix this by uncapping the pendingEmits size (maybe just for bolts, not sure there's a good reason to do it for spouts).]