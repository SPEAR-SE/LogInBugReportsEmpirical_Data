[Compaction in Kafka topics creates gaps in the offsets that are permanent and visible to all consumers all the time.

While Delete policy does not create permanent holes in the kafka topic offsets, spout/consumer could still see gaps under a combination of the following factors:

 - Kafka topic with short retention period
 - Storm topology that consumes from such a topic with a slow processing rate
 - Spout offset fetch strategy of earliest OR uncommitted_earliest

Given the above it is possible that while the spout/consumer is busy processing messages fetched from a particular partition, the async cleaner has run and cleaned up expired logs on the Kafka broker managing that partition. Now when the spout fetches the next batch during a subsequent poll it is likely to see message offsets that are not sequential to the ones it received in the previous batch.

Version info:
Kafka brokers - 0.10.0.1
Kafka Client in spout - 0.10.2]