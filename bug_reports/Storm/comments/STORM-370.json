[GitHub user kishorvpatil opened a pull request:

    https://github.com/apache/incubator-storm/pull/160

    [STORM-370] Add check for empty table before sorting dom in UI

    To avoid ```tablesorter``` from throwing exception - requires additional check to ensure that table sorter is not invoked on empty recordset.  

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/kishorvpatil/incubator-storm fix-blank-ui-comps

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/incubator-storm/pull/160.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #160
    
----
commit 31c786c6634052d89ca62c57c428d95124a3a465
Author: Kishor Patil <kpatil@yahoo-inc.com>
Date:   2014-06-24T18:51:01Z

    Add check for empty table before sorting

----
, GitHub user kishorvpatil opened a pull request:

    https://github.com/apache/incubator-storm/pull/161

    [STORM-370] Add check for empty table before sorting dom in UI on security

    To avoid ```tablesorter``` from throwing exception - requires additional check to ensure that table sorter is not invoked on empty recordset.  

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/kishorvpatil/incubator-storm fix-blank-ui-comps-security

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/incubator-storm/pull/161.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #161
    
----
commit 28c168fd7d0272f88d586f6f572eab937b874f22
Author: Kishor Patil <kpatil@yahoo-inc.com>
Date:   2014-06-24T19:12:56Z

    Add check for empty table before sorting on security

----
, Github user d2r commented on a diff in the pull request:

    https://github.com/apache/incubator-storm/pull/160#discussion_r14150233
  
    --- Diff: storm-core/src/ui/public/component.html ---
    @@ -73,22 +73,32 @@
                 componentSummary.append(Mustache.render($(template).filter("#component-summary-template").html(),response));
                 if(response["componentType"] == "spout") {
                     componentStatsDetail.append(Mustache.render($(template).filter("#spout-stats-detail-template").html(),response));
    -                $("#spout-stats-table").tablesorter({ sortList: [[0,0]], headers: {0: { sorter: "stormtimestr"}}});
    +                if(response["spoutSummary"].length > 0) {
    +                    $("#spout-stats-table").tablesorter({ sortList: [[0,0]], headers: {0: { sorter: "stormtimestr"}}});
    +                }
                     outputStats.append(Mustache.render($(template).filter("#output-stats-template").html(),response));
    -                $("#output-stats-table").tablesorter({ sortList: [[0,0]], headers: {0: { sorter: "stormtimestr"}}});
    +                if(response["outputStats"].length > 0) {
    +                    $("#output-stats-table").tablesorter({ sortList: [[0,0]], headers: {0: { sorter: "stormtimestr"}}});
    +                }
                     executorStats.append(Mustache.render($(template).filter("#executor-stats-template").html(),response));
    -                $("#executor-stats-table").tablesorter({ sortList: [[0,0]], headers: {1: { sorter: "stormtimestr"}}});
    +                if(response["executorStats"].length > 0) {
    +                    $("#executor-stats-table").tablesorter({ sortList: [[0,0]], headers: {1: { sorter: "stormtimestr"}}});
    +                }
                 } else {
                     componentStatsDetail.append(Mustache.render($(template).filter("#bolt-stats-template").html(),response));
    -                $("#bolt-stats-table").tablesorter({ sortList: [[0,0]], headers: {0: { sorter: "stormtimestr"}}});
    +                if(response["boltStats"].length > 0) {
    +                    $("#bolt-stats-table").tablesorter({ sortList: [[0,0]], headers: {0: { sorter: "stormtimestr"}}});
    +                }
                     inputStats.append(Mustache.render($(template).filter("#bolt-input-stats-template").html(),response));
                     if (response["inputStats"].length > 0) {
                         $("#bolt-input-stats-table").tablesorter({ sortList: [[0,0]], headers: {}});
                     }
                     outputStats.append(Mustache.render($(template).filter("#bolt-output-stats-template").html(),response));
    -                $("#bolt-output-stats-table").tablesorter({ sortList: [[0,0]], headers: {}});
    -                executorStats.append(Mustache.render($(template).filter("#bolt-executor-template").html(),response));
                     if(response["outputStats"].length > 0) {
    +                    $("#bolt-output-stats-table").tablesorter({ sortList: [[0,0]], headers: {}});
    +                }
    +                executorStats.append(Mustache.render($(template).filter("#bolt-executor-template").html(),response));
    +                if(response["executorStats"].length > 0) {
    --- End diff --
    
    Most of these changes look like additions of conditional checks, but this one looks like we changed the key in `response` that is actually being checked.
    
    Formerly, we checked `outputStats` before sorting `#bolt-executor-table`.
    After the change, we check `executorStats` before sorting `#bolt-executor-table`.
    
    Was the key incorrect before the change?
, Github user kishorvpatil commented on a diff in the pull request:

    https://github.com/apache/incubator-storm/pull/160#discussion_r14151166
  
    --- Diff: storm-core/src/ui/public/component.html ---
    @@ -73,22 +73,32 @@
                 componentSummary.append(Mustache.render($(template).filter("#component-summary-template").html(),response));
                 if(response["componentType"] == "spout") {
                     componentStatsDetail.append(Mustache.render($(template).filter("#spout-stats-detail-template").html(),response));
    -                $("#spout-stats-table").tablesorter({ sortList: [[0,0]], headers: {0: { sorter: "stormtimestr"}}});
    +                if(response["spoutSummary"].length > 0) {
    +                    $("#spout-stats-table").tablesorter({ sortList: [[0,0]], headers: {0: { sorter: "stormtimestr"}}});
    +                }
                     outputStats.append(Mustache.render($(template).filter("#output-stats-template").html(),response));
    -                $("#output-stats-table").tablesorter({ sortList: [[0,0]], headers: {0: { sorter: "stormtimestr"}}});
    +                if(response["outputStats"].length > 0) {
    +                    $("#output-stats-table").tablesorter({ sortList: [[0,0]], headers: {0: { sorter: "stormtimestr"}}});
    +                }
                     executorStats.append(Mustache.render($(template).filter("#executor-stats-template").html(),response));
    -                $("#executor-stats-table").tablesorter({ sortList: [[0,0]], headers: {1: { sorter: "stormtimestr"}}});
    +                if(response["executorStats"].length > 0) {
    +                    $("#executor-stats-table").tablesorter({ sortList: [[0,0]], headers: {1: { sorter: "stormtimestr"}}});
    +                }
                 } else {
                     componentStatsDetail.append(Mustache.render($(template).filter("#bolt-stats-template").html(),response));
    -                $("#bolt-stats-table").tablesorter({ sortList: [[0,0]], headers: {0: { sorter: "stormtimestr"}}});
    +                if(response["boltStats"].length > 0) {
    +                    $("#bolt-stats-table").tablesorter({ sortList: [[0,0]], headers: {0: { sorter: "stormtimestr"}}});
    +                }
                     inputStats.append(Mustache.render($(template).filter("#bolt-input-stats-template").html(),response));
                     if (response["inputStats"].length > 0) {
                         $("#bolt-input-stats-table").tablesorter({ sortList: [[0,0]], headers: {}});
                     }
                     outputStats.append(Mustache.render($(template).filter("#bolt-output-stats-template").html(),response));
    -                $("#bolt-output-stats-table").tablesorter({ sortList: [[0,0]], headers: {}});
    -                executorStats.append(Mustache.render($(template).filter("#bolt-executor-template").html(),response));
                     if(response["outputStats"].length > 0) {
    +                    $("#bolt-output-stats-table").tablesorter({ sortList: [[0,0]], headers: {}});
    +                }
    +                executorStats.append(Mustache.render($(template).filter("#bolt-executor-template").html(),response));
    +                if(response["executorStats"].length > 0) {
    --- End diff --
    
    It was wrong before .The ```bolt-executor-table``` table loops over dataset ```#executorStats``` while we were checking ```outputStats```
, Github user d2r commented on a diff in the pull request:

    https://github.com/apache/incubator-storm/pull/160#discussion_r14151409
  
    --- Diff: storm-core/src/ui/public/component.html ---
    @@ -73,22 +73,32 @@
                 componentSummary.append(Mustache.render($(template).filter("#component-summary-template").html(),response));
                 if(response["componentType"] == "spout") {
                     componentStatsDetail.append(Mustache.render($(template).filter("#spout-stats-detail-template").html(),response));
    -                $("#spout-stats-table").tablesorter({ sortList: [[0,0]], headers: {0: { sorter: "stormtimestr"}}});
    +                if(response["spoutSummary"].length > 0) {
    +                    $("#spout-stats-table").tablesorter({ sortList: [[0,0]], headers: {0: { sorter: "stormtimestr"}}});
    +                }
                     outputStats.append(Mustache.render($(template).filter("#output-stats-template").html(),response));
    -                $("#output-stats-table").tablesorter({ sortList: [[0,0]], headers: {0: { sorter: "stormtimestr"}}});
    +                if(response["outputStats"].length > 0) {
    +                    $("#output-stats-table").tablesorter({ sortList: [[0,0]], headers: {0: { sorter: "stormtimestr"}}});
    +                }
                     executorStats.append(Mustache.render($(template).filter("#executor-stats-template").html(),response));
    -                $("#executor-stats-table").tablesorter({ sortList: [[0,0]], headers: {1: { sorter: "stormtimestr"}}});
    +                if(response["executorStats"].length > 0) {
    +                    $("#executor-stats-table").tablesorter({ sortList: [[0,0]], headers: {1: { sorter: "stormtimestr"}}});
    +                }
                 } else {
                     componentStatsDetail.append(Mustache.render($(template).filter("#bolt-stats-template").html(),response));
    -                $("#bolt-stats-table").tablesorter({ sortList: [[0,0]], headers: {0: { sorter: "stormtimestr"}}});
    +                if(response["boltStats"].length > 0) {
    +                    $("#bolt-stats-table").tablesorter({ sortList: [[0,0]], headers: {0: { sorter: "stormtimestr"}}});
    +                }
                     inputStats.append(Mustache.render($(template).filter("#bolt-input-stats-template").html(),response));
                     if (response["inputStats"].length > 0) {
                         $("#bolt-input-stats-table").tablesorter({ sortList: [[0,0]], headers: {}});
                     }
                     outputStats.append(Mustache.render($(template).filter("#bolt-output-stats-template").html(),response));
    -                $("#bolt-output-stats-table").tablesorter({ sortList: [[0,0]], headers: {}});
    -                executorStats.append(Mustache.render($(template).filter("#bolt-executor-template").html(),response));
                     if(response["outputStats"].length > 0) {
    +                    $("#bolt-output-stats-table").tablesorter({ sortList: [[0,0]], headers: {}});
    +                }
    +                executorStats.append(Mustache.render($(template).filter("#bolt-executor-template").html(),response));
    +                if(response["executorStats"].length > 0) {
    --- End diff --
    
    OK, that makes sense then.
, Github user d2r commented on the pull request:

    https://github.com/apache/incubator-storm/pull/160#issuecomment-47022879
  
    Looks good to me.  +1
, Github user revans2 commented on the pull request:

    https://github.com/apache/incubator-storm/pull/160#issuecomment-47575962
  
    I am +1 too.
, Github user asfgit closed the pull request at:

    https://github.com/apache/incubator-storm/pull/160
, Thanks Kishor, I merged this into master.  I expect to merge the security version in shortly., Github user asfgit closed the pull request at:

    https://github.com/apache/incubator-storm/pull/161
]