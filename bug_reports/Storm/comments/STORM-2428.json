[+1 on this.. I think you should be shading those dependencies into different packages. If you look at _storm-core_, the shaded packages are under _org.apache.storm.shade_ which works really well.

[~jnioche] the way I'm getting around this is the ordering within my pom.. if you put the dependency (that is in the jar but not the version you want to use) before the flux dependencies, the classpath ordering is maintained by maven. I haven't tried it in the shaded jar (for deployment) but there it's pretty ez to just strip out the non-shaded dependencies from within the flux-core jars on that but maybe the shade jar also considers the order of the dependencies (again don't know just yet), I solved this issue by extracting / filtering this dependencies in the shading process:
{code:java}
<filter>
 <!-- we need to exclude some shaded and old stuff here which comes in a modern version via ES artifacts-->
 <artifact>org.apache.storm:flux-core</artifact>
 <excludes>
 <exclude>org/apache/commons/**</exclude>
 <exclude>org/apache/http/**</exclude>
 <exclude>org/yaml/**</exclude>
 </excludes>
</filter>{code}
However, I think that making flux-core a fat jar with some (very old) dependencies is not a good solution., Also found this being a fat jar confusing. That it includes flux-wrappers as a dependency, which the docs say should be added to your project independently if being used, is also a bit perplexing when trying to work out why build tools are getting file conflicts (even if they auto-resolve). :/]