{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "fields": {
        "aggregateprogress": {
            "progress": 0,
            "total": 0
        },
        "aggregatetimeestimate": null,
        "aggregatetimeoriginalestimate": null,
        "aggregatetimespent": null,
        "assignee": {
            "active": true,
            "avatarUrls": {
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452",
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452"
            },
            "displayName": "Gary Tully",
            "key": "gtully",
            "name": "gtully",
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=gtully",
            "timeZone": "Etc/UTC"
        },
        "components": [
            {
                "id": "12313892",
                "name": "Broker",
                "self": "https://issues.apache.org/jira/rest/api/2/component/12313892"
            },
            {
                "id": "12313896",
                "name": "JMS client",
                "self": "https://issues.apache.org/jira/rest/api/2/component/12313896"
            }
        ],
        "created": "2015-06-19T15:36:33.000+0000",
        "creator": {
            "active": true,
            "avatarUrls": {
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452",
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452"
            },
            "displayName": "Michael",
            "key": "michael.s",
            "name": "michael.s",
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=michael.s",
            "timeZone": "Etc/UTC"
        },
        "customfield_10010": null,
        "customfield_12310041": null,
        "customfield_12310080": null,
        "customfield_12310220": "2015-08-10T17:07:31.218+0000",
        "customfield_12310222": "1_*:*_1_*:*_8721397255_*|*_5_*:*_1_*:*_0",
        "customfield_12310250": null,
        "customfield_12310290": null,
        "customfield_12310291": null,
        "customfield_12310300": null,
        "customfield_12310310": "3.0",
        "customfield_12310420": "9223372036854775807",
        "customfield_12310920": "9223372036854775807",
        "customfield_12310921": null,
        "customfield_12311020": null,
        "customfield_12311024": null,
        "customfield_12311120": null,
        "customfield_12311820": "0|i2g9qf:",
        "customfield_12312022": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "customfield_12312026": null,
        "customfield_12312220": null,
        "customfield_12312320": null,
        "customfield_12312321": null,
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312324": null,
        "customfield_12312325": null,
        "customfield_12312326": null,
        "customfield_12312327": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312330": null,
        "customfield_12312331": null,
        "customfield_12312332": null,
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12312335": null,
        "customfield_12312336": null,
        "customfield_12312337": null,
        "customfield_12312338": null,
        "customfield_12312339": null,
        "customfield_12312340": null,
        "customfield_12312341": null,
        "customfield_12312520": null,
        "customfield_12312521": "Sun Nov 22 18:37:16 UTC 2015",
        "customfield_12312720": null,
        "customfield_12312823": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "customfield_12312923": null,
        "customfield_12313422": "false",
        "customfield_12313520": null,
        "description": "Use case :\n                With Spring DMLC, Read a jms message in a queue, produce a jms message in an output queue and write data in database.\n\nProblem description :\n\n                Due to hight CPU usage, the inactity monitor closes connections between clients and broker while 16 messages were processed.\n\n{noformat}\n2015-06-01 04:39:01,130 | WARN  | Transport Connection to: tcp://*** failed: org.apache.activemq.transport.InactivityIOException: Channel was inactive for too (>30000) long: tcp://*** | org.apache.activemq.broker.TransportConnection.Transport | ActiveMQ InactivityMonitor Worker\n{noformat}\n                15 messages are rolled back and redilevered to another consummer.\n\n                In the log we got 15 warnings :\n{noformat}\nActiveMQMessageConsumer   |WARN |jmsContainer-173|rolling back transaction (XID:***) post failover recovery. 1 previously delivered message(s) not replayed to consumer: ***\n{noformat}\n                But one message is not rolled back (the transaction commit) and is also redileverd to another consummer. So it's processed twice by two different consummers (two inserts in database and two output JMS messages generated) and is not deduplicated.\n\n                In the activeMq log we got the message :\n\n{noformat}\nWARN  | Async error occurred:  | org.apache.activemq.broker.TransportConnection.Service | ActiveMQ Transport: tcp:///***\n                       javax.jms.JMSException: Unmatched acknowledge: MessageAck {commandId = 6665, responseRequired = false, ackType = 2, consumerId = ID:***, firstMessageId = ID:***-50800-1433109620591-1:2:31356:1:1, lastMessageId = ID:***-50800-1433109620591-1:2:31356:1:1, destination = queue://***, transactionId = XID:[1096044365,globalId=47524f55505f3030303038736572766963657472616974656d656e7431363536373030343133,branchId=47524f55505f3030303038736572766963657472616974656d656e743137343737], messageCount = 1, poisonCause = null}; Could not find Message-ID ID:***-50800-1433109620591-1:2:31356:1:1 in dispatched-list (start of ack)\n{noformat}\n\n                For this duplicated message, the failover occur during prepare phase of commit :\n\n{noformat}\n[{2015/06/01 04:39:50,322 |FailoverTransport         |WARN |jmsContainer-152|Transport (tcp://***) failed, reason:  , attempting to automatically reconnect}]\norg.apache.activemq.transport.InactivityIOException: Cannot send, channel has already failed: ***\n                at org.apache.activemq.transport.AbstractInactivityMonitor.doOnewaySend(AbstractInactivityMonitor.java:297)\n                at org.apache.activemq.transport.AbstractInactivityMonitor.oneway(AbstractInactivityMonitor.java:286)\n                at org.apache.activemq.transport.TransportFilter.oneway(TransportFilter.java:85)\n                at org.apache.activemq.transport.WireFormatNegotiator.oneway(WireFormatNegotiator.java:104)\n                at org.apache.activemq.transport.failover.FailoverTransport.oneway(FailoverTransport.java:658)\n                at org.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:68)\n                at org.apache.activemq.transport.ResponseCorrelator.oneway(ResponseCorrelator.java:60)\n                at org.apache.activemq.ActiveMQConnection.doAsyncSendPacket(ActiveMQConnection.java:1321)\n                at org.apache.activemq.ActiveMQConnection.asyncSendPacket(ActiveMQConnection.java:1315)\n                at org.apache.activemq.ActiveMQSession.asyncSendPacket(ActiveMQSession.java:1933)\n                at org.apache.activemq.ActiveMQSession.sendAck(ActiveMQSession.java:2099)\n                at org.apache.activemq.ActiveMQSession.sendAck(ActiveMQSession.java:2094)\n                at org.apache.activemq.ActiveMQMessageConsumer.acknowledge(ActiveMQMessageConsumer.java:1083)\n                at org.apache.activemq.ActiveMQMessageConsumer$5.beforeEnd(ActiveMQMessageConsumer.java:1041)\n                at org.apache.activemq.TransactionContext.beforeEnd(TransactionContext.java:202)\n                at org.apache.activemq.TransactionContext.end(TransactionContext.java:409)\n                at com.atomikos.datasource.xa.XAResourceTransaction.suspend(XAResourceTransaction.java:457)\n                at com.atomikos.datasource.xa.XAResourceTransaction.prepare(XAResourceTransaction.java:608)\n                at com.atomikos.icatch.imp.PrepareMessage.send(PrepareMessage.java:61)\n                at com.atomikos.icatch.imp.PropagationMessage.submit(PropagationMessage.java:111)\n                at com.atomikos.icatch.imp.Propagator$PropagatorThread.run(Propagator.java:87)\n                at com.atomikos.icatch.imp.Propagator.submitPropagationMessage(Propagator.java:66)\n                at com.atomikos.icatch.imp.ActiveStateHandler.prepare(ActiveStateHandler.java:173)\n                at com.atomikos.icatch.imp.CoordinatorImp.prepare(CoordinatorImp.java:832)\n                at com.atomikos.icatch.imp.CoordinatorImp.terminate(CoordinatorImp.java:1159)\n                at com.atomikos.icatch.imp.CompositeTerminatorImp.commit(CompositeTerminatorImp.java:92)\n                at com.atomikos.icatch.jta.TransactionImp.commit(TransactionImp.java:236)\n                at com.atomikos.icatch.jta.TransactionManagerImp.commit(TransactionManagerImp.java:498)\n                at com.atomikos.icatch.jta.UserTransactionImp.commit(UserTransactionImp.java:129)\n                at org.springframework.transaction.jta.JtaTransactionManager.doCommit(JtaTransactionManager.java:1011)\n                at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:755)\n                at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:724)\n                at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:257)\n                at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:1101)\n                at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:995)\n                at java.lang.Thread.run(Thread.java:761)\n{noformat}\n\nOur analysis :\n\n                We think that the duplicate message is caused by the failover during the prepare phase of the commit so we modify the source code to reproduce the case.\n\n                Our modifications in config to produce failovers:\n                               broker : transport.useKeepAlive=false\n                               client : wireFormat.maxInactivityDuration=5000\n\n\n                We add Thread.sleep in the source code of org.apache.activemq.ActiveMQMessageConsumer to force failover to be done exactly where we think it causes problems :\n\n{code:title=org.apache.activemq.ActiveMQMessageConsumer#acknowledge()|borderStyle=solid}                \n\n                    public void acknowledge() throws JMSException {\n                               clearDeliveredList();\n                               waitForRedeliveries();\n                               synchronized(deliveredMessages) {\n\n                                   // BEGIN MODIFIED CODE\n                                   LOG.warn(\"start sleeping 20 seconds to test failover\");\n                                   try{\n                                       Thread.sleep(1000 * 20 );\n                                   }catch (InterruptedException e){\n                                       LOG.error(\"Exception :\",e);\n                                   }\n                                   LOG.warn(\"end sleeping 20 seconds to test failover\");\n                                   // END MODIFIED CODE\n\n                                   // Acknowledge all messages so far.\n                                   MessageAck ack = makeAckForAllDeliveredMessages(MessageAck.STANDARD_ACK_TYPE);\n                                   if (ack == null)\n                                       return; // no msgs\n\n                                   if (session.getTransacted()) {\n                                       rollbackOnFailedRecoveryRedelivery();\n                                       session.doStartTransaction();\n                                       ack.setTransactionId(session.getTransactionContext().getTransactionId());\n                                   }\n\n                                   pendingAck = null;\n                                    session.sendAck(ack);\n\n                                   // Adjust the counters\n                                   deliveredCounter = Math.max(0, deliveredCounter - deliveredMessages.size());\n                                   additionalWindowSize = Math.max(0, additionalWindowSize - deliveredMessages.size());\n\n                                   if (!session.getTransacted()) {\n                                       deliveredMessages.clear();\n                                   }\n                               }\n                    }\n{code}                               \n                \n                With these changes on the configuration and the code, the problem is easily reproduced.\n\n                We also try with transactedIndividualAck=true, and we add a Thread.sleep in the code :\n\n{code:title=org.apache.activemq.ActiveMQMessageConsumer#registerSync()|borderStyle=solid}                \n                    private void registerSync() throws JMSException {\n                               session.doStartTransaction();\n                               if (!synchronizationRegistered) {\n                                   synchronizationRegistered = true;\n                                   session.getTransactionContext().addSynchronization(new Synchronization() {\n                                       @Override\n                                       public void beforeEnd() throws Exception {\n                                           if (transactedIndividualAck) {\n                                               clearDeliveredList();\n                                               waitForRedeliveries();\n                                               synchronized(deliveredMessages) {\n                                                   \n                                                   // BEGIN MODIFIED CODE\n                                                   LOG.warn(\"start sleeping 20 seconds to test failover\");\n                                                   try{\n                                                       Thread.sleep(1000 * 20 );\n                                                   }catch (InterruptedException e){\n                                                       LOG.error(\"Exception :\",e);\n                                                   }\n                                                   LOG.warn(\"end sleeping 20 seconds to test failover\");\n                                                   // END MODIFIED CODE                            \n\n                                                   rollbackOnFailedRecoveryRedelivery();\n                                               }\n                                           } else {\n                                               acknowledge();\n                                           }\n                                           synchronizationRegistered = false;\n                                       }\n\n                                       @Override\n                                       public void afterCommit() throws Exception {\n                                           commit();\n                                           synchronizationRegistered = false;\n                                       }\n\n                                       @Override\n                                       public void afterRollback() throws Exception {\n                                           rollback();\n                                           synchronizationRegistered = false;\n                                       }\n                                   });\n                               }\n                    }\n{code}                                               \n                With these modifications, we still get duplicates messages.\n\n                We think that the problem is that the statement synchronized(deliveredMessages) prevents the call of clearDeliveredList() by another ActiveMQConnection thread that clears messages in progress.\n                By adding logs we observe that a thread is waiting deliveredMessages \u2018s lock in clearDeliveredList() method.\n\n                \nQuestion :\n                \n                We tried fixes described in https://issues.apache.org/jira/browse/AMQ-5068 and https://issues.apache.org/jira/browse/AMQ-3519 but it doesn\u2019t help to solve our problem.\n                Is there a workaround or a config parameter that can help to prevent this problem ?\n                \n                We are working on our side to find a correction. An option may be to force rolling back transaction if there is a failover during the prepare phase of commit in ConnectionStateTracker.restoreTransactions().\n\n\n",
        "duedate": null,
        "environment": "Ubuntu or AIX\nActiveMQ 5.9.1 (problem is reproduced in 5.10.2 and 5.11.1)\nSpring DMLC\nXA transactions with atomikos 3.7.0 (problem is also reproduced with 3.9.15)\nPersistent messages\nMultithreading (this problem occur when there is at least 2 consummers on a queue)\n",
        "fixVersions": [{
            "archived": false,
            "id": "12329848",
            "name": "5.13.0",
            "releaseDate": "2015-12-03",
            "released": true,
            "self": "https://issues.apache.org/jira/rest/api/2/version/12329848"
        }],
        "issuelinks": [],
        "issuetype": {
            "avatarId": 21133,
            "description": "A problem which impairs or prevents the functions of the product.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
            "id": "1",
            "name": "Bug",
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
            "subtask": false
        },
        "labels": [],
        "lastViewed": null,
        "priority": {
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "id": "3",
            "name": "Major",
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3"
        },
        "progress": {
            "progress": 0,
            "total": 0
        },
        "project": {
            "avatarUrls": {
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12311210&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12311210&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12311210&avatarId=10011",
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12311210&avatarId=10011"
            },
            "id": "12311210",
            "key": "AMQ",
            "name": "ActiveMQ",
            "projectCategory": {
                "description": "ActiveMQ",
                "id": "11160",
                "name": "ActiveMQ",
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/11160"
            },
            "self": "https://issues.apache.org/jira/rest/api/2/project/12311210"
        },
        "reporter": {
            "active": true,
            "avatarUrls": {
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452",
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452"
            },
            "displayName": "Michael",
            "key": "michael.s",
            "name": "michael.s",
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=michael.s",
            "timeZone": "Etc/UTC"
        },
        "resolution": {
            "description": "A fix for this issue is checked into the tree and tested.",
            "id": "1",
            "name": "Fixed",
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1"
        },
        "resolutiondate": "2015-09-28T14:13:10.000+0000",
        "status": {
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "id": "5",
            "name": "Resolved",
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "statusCategory": {
                "colorName": "green",
                "id": 3,
                "key": "done",
                "name": "Done",
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3"
            }
        },
        "subtasks": [],
        "summary": "Duplicate messages when failover is done during prepare phase of two phase commit.",
        "timeestimate": null,
        "timeoriginalestimate": null,
        "timespent": null,
        "updated": "2015-11-22T18:37:16.000+0000",
        "versions": [
            {
                "archived": false,
                "id": "12326455",
                "name": "5.9.1",
                "releaseDate": "2014-04-04",
                "released": true,
                "self": "https://issues.apache.org/jira/rest/api/2/version/12326455"
            },
            {
                "archived": false,
                "id": "12329390",
                "name": "5.10.2",
                "releaseDate": "2015-02-17",
                "released": true,
                "self": "https://issues.apache.org/jira/rest/api/2/version/12329390"
            },
            {
                "archived": false,
                "id": "12329382",
                "name": "5.11.1",
                "releaseDate": "2015-02-17",
                "released": true,
                "self": "https://issues.apache.org/jira/rest/api/2/version/12329382"
            }
        ],
        "votes": {
            "hasVoted": false,
            "self": "https://issues.apache.org/jira/rest/api/2/issue/AMQ-5854/votes",
            "votes": 1
        },
        "watches": {
            "isWatching": false,
            "self": "https://issues.apache.org/jira/rest/api/2/issue/AMQ-5854/watchers",
            "watchCount": 8
        },
        "workratio": -1
    },
    "id": "12839158",
    "key": "AMQ-5854",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/12839158"
}