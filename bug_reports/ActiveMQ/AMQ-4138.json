{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "fields": {
        "aggregateprogress": {
            "progress": 0,
            "total": 0
        },
        "aggregatetimeestimate": null,
        "aggregatetimeoriginalestimate": null,
        "aggregatetimespent": null,
        "assignee": null,
        "components": [],
        "created": "2012-10-26T21:31:04.000+0000",
        "creator": {
            "active": true,
            "avatarUrls": {
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452",
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452"
            },
            "displayName": "Stirling Chow",
            "key": "stirlingc",
            "name": "stirlingc",
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=stirlingc",
            "timeZone": "Etc/UTC"
        },
        "customfield_10010": null,
        "customfield_12310041": null,
        "customfield_12310080": null,
        "customfield_12310220": null,
        "customfield_12310222": null,
        "customfield_12310250": null,
        "customfield_12310290": null,
        "customfield_12310291": null,
        "customfield_12310300": null,
        "customfield_12310310": "2.0",
        "customfield_12310420": "252466",
        "customfield_12310920": "72668",
        "customfield_12310921": null,
        "customfield_12311020": null,
        "customfield_12311024": null,
        "customfield_12311120": null,
        "customfield_12311820": "0|i0ct5r:",
        "customfield_12312022": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "customfield_12312026": null,
        "customfield_12312220": null,
        "customfield_12312320": null,
        "customfield_12312321": null,
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312324": null,
        "customfield_12312325": null,
        "customfield_12312326": null,
        "customfield_12312327": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312330": null,
        "customfield_12312331": null,
        "customfield_12312332": null,
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12312335": null,
        "customfield_12312336": null,
        "customfield_12312337": null,
        "customfield_12312338": null,
        "customfield_12312339": null,
        "customfield_12312340": null,
        "customfield_12312341": null,
        "customfield_12312520": null,
        "customfield_12312521": "Fri Oct 26 21:54:46 UTC 2012",
        "customfield_12312720": null,
        "customfield_12312823": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "customfield_12312923": null,
        "customfield_12313422": "false",
        "customfield_12313520": null,
        "description": "Symptom\n=======\nWe have a network of 4 brokers that share messages using distributed queues via demand forwarding bridges.  We were validating the behaviour of the system when memory usage approached and exceeded the out-of-box memory limit (64MB).\n\nWe discovered that with great frequency the bridges would appear to stop functioning --- no messages were being produced or consumed.  We've experienced similar behaviour when producer flow control is activated, but in our tests, we'd turned producer flow control off (both to avoid bridges stalling due to producer flow control and so that we could produce enough messages to exceed the memory limit).\n\nThe system would never recover from this deadlock. \n\nCause\n=====\nWe found a number of threads looping indefinitely with the following stack:\n\n{code}\nDaemon Thread [ActiveMQ VMTransport: vm://broker1#7-1] (Suspended)\t\n\towns: Topic  (id=109)\t\n\twaiting for: Object  (id=110)\t\n\tObject.wait(long) line: not available [native method]\t\n\tTopicSubscription.add(MessageReference) line: 135\t\n\tSimpleDispatchPolicy.dispatch(MessageReference, MessageEvaluationContext, List<Subscription>) line: 48\t\n\tTopic.dispatch(ConnectionContext, Message) line: 680\t\n\tTopic.doMessageSend(ProducerBrokerExchange, Message) line: 491\t\n\tTopic.send(ProducerBrokerExchange, Message) line: 427\t\n\tManagedTopicRegion(AbstractRegion).send(ProducerBrokerExchange, Message) line: 407\t\n\tManagedRegionBroker(RegionBroker).send(ProducerBrokerExchange, Message) line: 503\t\n\tManagedRegionBroker.send(ProducerBrokerExchange, Message) line: 311\t\n\tAdvisoryBroker.fireAdvisory(ConnectionContext, ActiveMQTopic, Command, ConsumerId, ActiveMQMessage) line: 551\t\n\tAdvisoryBroker.fireConsumerAdvisory(ConnectionContext, ActiveMQDestination, ActiveMQTopic, Command, ConsumerId) line: 500\t\n\tAdvisoryBroker.fireConsumerAdvisory(ConnectionContext, ActiveMQDestination, ActiveMQTopic, Command) line: 486\t\n\tAdvisoryBroker.addConsumer(ConnectionContext, ConsumerInfo) line: 98\t\n\tCompositeDestinationBroker(BrokerFilter).addConsumer(ConnectionContext, ConsumerInfo) line: 89\t\n\tTransactionBroker(BrokerFilter).addConsumer(ConnectionContext, ConsumerInfo) line: 89\t\n\tBrokerService$5(MutableBrokerFilter).addConsumer(ConnectionContext, ConsumerInfo) line: 95\t\n\tManagedTransportConnection(TransportConnection).processAddConsumer(ConsumerInfo) line: 562\t\n\tConsumerInfo.visit(CommandVisitor) line: 332\t\n\tManagedTransportConnection(TransportConnection).service(Command) line: 294\t\n\tTransportConnection$1.onCommand(Object) line: 152\t\n\tResponseCorrelator.onCommand(Object) line: 116\t\n\tMutexTransport.onCommand(Object) line: 50\t\n\tVMTransport.iterate() line: 241\t\n\tPooledTaskRunner.runTask() line: 129\t\n\tPooledTaskRunner$1.run() line: 47\t\n\tThreadPoolExecutor$Worker.runTask(Runnable) line: 886\t\n\tThreadPoolExecutor$Worker.run() line: 908\t\n\tThread.run() line: 662\t\n{code}\n\nThe spinning threads were associated with the VMTransport TaskRunner from {{DemandForwardingBridgeSupport.localBroker}}.  Since the TaskRunner was essentially blocked processing one message, all other messages being forwarded from the remote end of the bridge (e.g., ACKs) were getting queued, but not processed, which made the bridge appear to be stalled.\n\nThe message being processed by the spinning thread was a ConsumerInfo representing a demand subscription from the remote broker, and was being forwarded to a subscription on the associated consumer advisory topic.  The subscription was waiting for memory to become available in the {{matchedListMutex}} loop:\n\n{code:title=TopicSubscription.java}\n    public void add(MessageReference node) throws Exception {\n        if (isDuplicate(node)) {\n            return;\n        }\n        enqueueCounter.incrementAndGet();\n        if (!isFull() && matched.isEmpty()  && !isSlave()) {\n            // if maximumPendingMessages is set we will only discard messages which\n            // have not been dispatched (i.e. we allow the prefetch buffer to be filled)\n            dispatch(node);\n            setSlowConsumer(false);\n        } else {\n            if (info.getPrefetchSize() > 1 && matched.size() > info.getPrefetchSize()) {\n                // Slow consumers should log and set their state as such.\n                if (!isSlowConsumer()) {\n                    LOG.warn(toString() + \": has twice its prefetch limit pending, without an ack; it appears to be slow\");\n                    setSlowConsumer(true);\n                    for (Destination dest: destinations) {\n                        dest.slowConsumer(getContext(), this);\n                    }\n                }\n            }\n            if (maximumPendingMessages != 0) {\n                boolean warnedAboutWait = false;\n                while (active) {\n                    synchronized (matchedListMutex) {\n                        while (matched.isFull()) {\n                            if (getContext().getStopping().get()) {\n                                LOG.warn(toString() + \": stopped waiting for space in pendingMessage cursor for: \"\n                                        + node.getMessageId());\n                                enqueueCounter.decrementAndGet();\n                                return;\n                            }\n                            if (!warnedAboutWait) {\n                                LOG.info(toString() + \": Pending message cursor [\" + matched\n                                        + \"] is full, temp usage (\"\n                                        + +matched.getSystemUsage().getTempUsage().getPercentUsage()\n                                        + \"%) or memory usage (\"\n                                        + matched.getSystemUsage().getMemoryUsage().getPercentUsage()\n                                        + \"%) limit reached, blocking message add() pending the release of resources.\");\n                                warnedAboutWait = true;\n                            }\n                            matchedListMutex.wait(20);\n                        }\n                        // Temporary storage could be full - so just try to add the message\n                        // see https://issues.apache.org/activemq/browse/AMQ-2475\n                        if (matched.tryAddMessageLast(node, 10)) {\n                            break;\n                        }\n                    }\n                }\n{code}\n\nThe {{matched.isFull()}} check that was keeping the thread in the loop is only cleared once the memory usage is reduced:\n\n{code:title=AbstractPendingMessageCursor.java}\npublic boolean isFull() {\n    return systemUsage != null ? systemUsage.getMemoryUsage().isFull() : false;\n}\n{code}\n\nSince the looping thread is essentially stalling the VMTransport on the local side of the bridge, no dispatch ACKs can be processed for messages sent from the local bridge to the remote broker.  If all consumers are on the remote broker and ACKs are not being processed, then memory usage on the local broker is never reduced, thus creating a deadlock.\n\nIn order for {{TopicSubscription.add(...)}} to enter the (essentially infinite) loop, the following conditions must *not* be met:\n{code:title=TopicSubscription.java}\npublic void add(MessageReference node) throws Exception {\n        if (isDuplicate(node)) {\n            return;\n        }\n        enqueueCounter.incrementAndGet();\n        if (!isFull() && matched.isEmpty()  && !isSlave()) {\n{code}\n\n{{isFull()}} is true if the number of unacknowledged messages dispatched to the subscription is greater than the subscription's prefetch size.  So for the deadlock to occur, two things must happen:\n\n# There must be multiple consumers being added to the queue, thus generating multiple adds to the consumer advisory topic subscription\n# There must be a delay in processing ACKs to the topic subscription so that it becomes full\n\nFor reasons to do with distribution management, our network connectors have a prefetch size of 1, so under load, the deadlock occurs easily.\n\nI've attached a test case that clearly demonstrates the deadlock.  The test case is simple:\n\n# Two brokers (broker1 and broker2) are bidirectionally bridged with a network prefetch of 1\n# broker1 (with producer flow control disabled), produces enough messages to a test queue so that the memory limit is exceeded\n# broker2 starts two consumers of the test queue, and the broker1->broker2 bridge forwards two demand subscriptions to broker1\n# broker1 processes the demand subscriptions and starts dispatching messages to broker2\n# Since broker2 has a bridge back to broker1, broker1's processing of the demand subscriptions generates two consumer advisory messages that are sent over the consumer advisory topic to broker2 (of course, broker2 ignores them since they represent its consumers)\n# As messages are dispatched to broker2's instance of the test queue, ACKs are forwarded by the broker1->broker2 bridge and processed by broker1, reducing the memory usage\n# Eventually all messages are consumed by broker2 and broker1's memory usage is 0.\n\nThis test case generally passes since the deadlock requires a specific race condition: namely, the first consumer advisory message needs to be \"in flight\" when the second consumer advisory message is sent.  Since the network prefetch is 1, when the second advisory message is processed, the topic subscription is \"full\", and the thread sending the advisory will wait for matched.isFull() to be false.\n\nIn order to increase the chance that the first consumer advisory message is \"in flight\", simply add a small sleep to TopicSubscription's acknowledge method:\n\n{code:title=TopicSubscription.java}\npublic synchronized void acknowledge(final ConnectionContext context, final MessageAck ack) throws Exception {\n    LOG.info(\"Acknowledge subscription to \" + ack.getDestination().getPhysicalName());\n    Thread.sleep(1000);\n{code}\n\nThe sleep increases the window and pretty much guarantees that the test case will fail (i.e., messages remain in broker1's test queue since the bridge is stalled).\n\nEven with the sleep in place, if the number of consumers on broker2 is reduced to 1, the test case will pass.  Again, this is because at least two consumer advisory messages are needed to fill the subscription prefetch.\n\nThe use of prefetch=1 for the network connector is simply so that the unit test can demonstrate the deadlock with 2 consumers.  The deadlock can occur with any prefetch if the number of consumers is at least prefetch + 1.\n\nThis is a serious issue for us as our deployment involves many networked brokers and a lot of dynamic consumer creation, which produces frequent consumer advisory messages.  When a network bridge locks up, it cripples our system.\n\nSolution\n========\nThe essential problem is that sending a consumer advisory message to a topic can take an indefinite amount of time (i.e., waits indefinitely until memory is available), and during this time, no other messages sent to the VMTransport are processed.\n\nThe principle tenant of the TaskRunners used in AMQ is that they implement \"cooperative multi-tasking\", this means that task execution has to be reasonably quick so that other tasks can be run.  A task that runs indefinitely breaks the utility of the model.\n\nWhile it would be possible to use {{TopicSubscription.maximumPendingMessages}} to prevent the {{matchedListMutex}} loop from being entered, this would result in the consumer advisory message being discarded thus the loss of any demand subscriptions that would have resulted --- so it's not an option.\n\nUnfortunately, without understanding the system further, I can't offer a specific solution.\n\n\n\n",
        "duedate": null,
        "environment": null,
        "fixVersions": [],
        "issuelinks": [],
        "issuetype": {
            "avatarId": 21133,
            "description": "A problem which impairs or prevents the functions of the product.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
            "id": "1",
            "name": "Bug",
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
            "subtask": false
        },
        "labels": [],
        "lastViewed": null,
        "priority": {
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/critical.svg",
            "id": "2",
            "name": "Critical",
            "self": "https://issues.apache.org/jira/rest/api/2/priority/2"
        },
        "progress": {
            "progress": 0,
            "total": 0
        },
        "project": {
            "avatarUrls": {
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12311210&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12311210&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12311210&avatarId=10011",
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12311210&avatarId=10011"
            },
            "id": "12311210",
            "key": "AMQ",
            "name": "ActiveMQ",
            "projectCategory": {
                "description": "ActiveMQ",
                "id": "11160",
                "name": "ActiveMQ",
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/11160"
            },
            "self": "https://issues.apache.org/jira/rest/api/2/project/12311210"
        },
        "reporter": {
            "active": true,
            "avatarUrls": {
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452",
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452"
            },
            "displayName": "Stirling Chow",
            "key": "stirlingc",
            "name": "stirlingc",
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=stirlingc",
            "timeZone": "Etc/UTC"
        },
        "resolution": null,
        "resolutiondate": null,
        "status": {
            "description": "The issue is open and ready for the assignee to start work on it.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
            "id": "1",
            "name": "Open",
            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
            "statusCategory": {
                "colorName": "blue-gray",
                "id": 2,
                "key": "new",
                "name": "To Do",
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2"
            }
        },
        "subtasks": [],
        "summary": "Network bridges can deadlock when memory limit exceeded",
        "timeestimate": null,
        "timeoriginalestimate": null,
        "timespent": null,
        "updated": "2012-10-26T22:05:31.000+0000",
        "versions": [{
            "archived": false,
            "description": "Next v5 maintenance release",
            "id": "12321258",
            "name": "5.7.0",
            "releaseDate": "2012-10-08",
            "released": true,
            "self": "https://issues.apache.org/jira/rest/api/2/version/12321258"
        }],
        "votes": {
            "hasVoted": false,
            "self": "https://issues.apache.org/jira/rest/api/2/issue/AMQ-4138/votes",
            "votes": 3
        },
        "watches": {
            "isWatching": false,
            "self": "https://issues.apache.org/jira/rest/api/2/issue/AMQ-4138/watchers",
            "watchCount": 6
        },
        "workratio": -1
    },
    "id": "12613718",
    "key": "AMQ-4138",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/12613718"
}