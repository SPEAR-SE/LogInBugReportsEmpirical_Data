{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "fields": {
        "aggregateprogress": {
            "progress": 0,
            "total": 0
        },
        "aggregatetimeestimate": null,
        "aggregatetimeoriginalestimate": null,
        "aggregatetimespent": null,
        "assignee": {
            "active": true,
            "avatarUrls": {
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=tabish121&avatarId=25249",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=tabish121&avatarId=25249",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=tabish121&avatarId=25249",
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=tabish121&avatarId=25249"
            },
            "displayName": "Timothy Bish",
            "key": "tabish121",
            "name": "tabish121",
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=tabish121",
            "timeZone": "America/Havana"
        },
        "components": [],
        "created": "2012-11-03T22:40:25.000+0000",
        "creator": {
            "active": true,
            "avatarUrls": {
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452",
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452"
            },
            "displayName": "Stirling Chow",
            "key": "stirlingc",
            "name": "stirlingc",
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=stirlingc",
            "timeZone": "Etc/UTC"
        },
        "customfield_10010": null,
        "customfield_12310041": [{
            "id": "10042",
            "self": "https://issues.apache.org/jira/rest/api/2/customFieldOption/10042",
            "value": "Patch Available"
        }],
        "customfield_12310080": null,
        "customfield_12310220": "2012-11-05T15:07:37.689+0000",
        "customfield_12310222": "1_*:*_1_*:*_147157912_*|*_5_*:*_2_*:*_166242077_*|*_4_*:*_1_*:*_3145975860",
        "customfield_12310250": null,
        "customfield_12310290": null,
        "customfield_12310291": null,
        "customfield_12310300": null,
        "customfield_12310310": "2.0",
        "customfield_12310420": "255090",
        "customfield_12310920": "83811",
        "customfield_12310921": null,
        "customfield_12311020": null,
        "customfield_12311024": null,
        "customfield_12311120": null,
        "customfield_12311820": "0|i0eozr:",
        "customfield_12312022": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "customfield_12312026": null,
        "customfield_12312220": null,
        "customfield_12312320": null,
        "customfield_12312321": null,
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312324": null,
        "customfield_12312325": null,
        "customfield_12312326": null,
        "customfield_12312327": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312330": null,
        "customfield_12312331": null,
        "customfield_12312332": null,
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12312335": null,
        "customfield_12312336": null,
        "customfield_12312337": null,
        "customfield_12312338": null,
        "customfield_12312339": null,
        "customfield_12312340": null,
        "customfield_12312341": null,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Dec 13 23:36:41 UTC 2012",
        "customfield_12312720": null,
        "customfield_12312823": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "customfield_12312923": null,
        "customfield_12313422": "false",
        "customfield_12313520": null,
        "description": "Symptom\n=======\nI was diagnosing a deadlock issue in {{DiscoveryNetworkConnector}} and noticed that during one of the tests, concurrent calls were being made to {{DiscoveryNetworkConnector.onServiceAdd(...)}} for the same {{DiscoveryEvent}}.  This was unexpected because only a single service (URL) had been given to {{SimpleDiscoveryAgent}}.  In fact, during one of the tests I observed dozens of concurrent calls.\n\nConcurrent attempts to establish a bridge to the *same* remote broker are problematic because they expose a number of race conditions in {{DiscoveryNetworkConnector}} and {{RegionBroker}} that can lead to permanent bridge failure (see AMQ-4160), as well as unnecessary thread pool execution/resource usage and logging.\n\nThe issues with {{DiscoveryNetworkConnector}} and {{RegionBroker}} will be filed as separate issues.  This issue specifically addresses the bug that causes {{SimpleDiscoveryAgent}} to uncontrollably multiply bridge connection attempts.\n\nCause\n=====\nWhen {{DemandForwardingBridgeSupport}} handles exceptions from either the local or remote sides of the the bridge, it fires a \"bridge failed\" event:\n\n{code:title=DemandForwardingBridgeSupport.java}\npublic void serviceLocalException(Throwable error) {\n    if (!disposed.get()) {\n        LOG.info(\"Network connection between \" + localBroker + \" and \" + remoteBroker + \" shutdown due to a local error: \" + error);\n        LOG.debug(\"The local Exception was:\" + error, error);\n        brokerService.getTaskRunnerFactory().execute(new Runnable() {\n            public void run() {\n                ServiceSupport.dispose(getControllingService());\n            }\n        });\n        fireBridgeFailed();\n    }\n}\n\n\npublic void serviceRemoteException(Throwable error) {\n    if (!disposed.get()) {\n        if (error instanceof SecurityException || error instanceof GeneralSecurityException) {\n            LOG.error(\"Network connection between \" + localBroker + \" and \" + remoteBroker + \" shutdown due to a remote error: \" + error);\n        } else {\n            LOG.warn(\"Network connection between \" + localBroker + \" and \" + remoteBroker + \" shutdown due to a remote error: \" + error);\n        }\n        LOG.debug(\"The remote Exception was: \" + error, error);\n        brokerService.getTaskRunnerFactory().execute(new Runnable() {\n            public void run() {\n                ServiceSupport.dispose(getControllingService());\n            }\n        });\n        fireBridgeFailed();\n    }\n}\n\nprivate void fireBridgeFailed() {\n    NetworkBridgeListener l = this.networkBridgeListener;\n    if (l != null) {\n        l.bridgeFailed();\n    }\n}\n{code}\n\n{{DiscoveryNetworkConnector}} is the {{NetworkBridgeListener}}, and its {{bridgeFailed()}} method calls back to {{SimpleDiscoveryAgent.serviceFailed(...)}}:\n\n{code:title=DiscoveryNetworkConnectol.java}\nprotected NetworkBridge createBridge(Transport localTransport, Transport remoteTransport, final DiscoveryEvent event) {\n    class DiscoverNetworkBridgeListener extends MBeanNetworkListener {\n\n        public DiscoverNetworkBridgeListener(BrokerService brokerService, ObjectName connectorName) {\n            super(brokerService, connectorName);\n        }\n\n        public void bridgeFailed() {\n            if (!serviceSupport.isStopped()) {\n                try {\n                    discoveryAgent.serviceFailed(event);\n                } catch (IOException e) {\n                }\n            }\n\n        }\n    }\n...\n{code}\n\nIn response, {{SimpleDiscoveryAgent.serviceFailed(...)}} pauses for the {{reconnectDelay}} before attempting to re-establish the bridge via {{DiscoveryNetworkConnector.onServiceAdd(...)}}:\n\n{code:title=SimpleDiscoveryAgent.java}\npublic void serviceFailed(DiscoveryEvent devent) throws IOException {\n\n    final SimpleDiscoveryEvent event = (SimpleDiscoveryEvent)devent;\n    if (sevent.failed.compareAndSet(false, true)) {\n\n        listener.onServiceRemove(sevent);\n        taskRunner.execute(new Runnable() {\n            public void run() {\n                // We detect a failed connection attempt because the service\n                // fails right\n                // away.\n                if (event.connectTime + minConnectTime > System.currentTimeMillis()) {\n                    LOG.debug(\"Failure occurred soon after the discovery event was generated.  It will be classified as a connection failure: \"+event);\n...\n                    synchronized (sleepMutex) {\n                        try {\n                            if (!running.get()) {\n                                LOG.debug(\"Reconnecting disabled: stopped\");\n                                return;\n                            }\n\n                            LOG.debug(\"Waiting \"+event.reconnectDelay+\" ms before attempting to reconnect.\");\n                            sleepMutex.wait(event.reconnectDelay);\n                        } catch (InterruptedException ie) {\n                            LOG.debug(\"Reconnecting disabled: \" + ie);\n                            Thread.currentThread().interrupt();\n                            return;\n                        }\n                    }\n...\n                event.connectTime = System.currentTimeMillis();\n                event.failed.set(false);\n                listener.onServiceAdd(event);\n            }\n        }, \"Simple Discovery Agent\");\n    }\n}\n{code}\n\n*NOTE*: the call to {{listener.onServiceAdd(...)}} is made by a new thread!\n\nThere are two race conditions that allow {{SimpleDiscoveryAgent.serviceFailed(...)}} to launch more than one thread, each attempting to re-restablish the same bridge.\n\nFirst, note that {{DemandForwardingBridgeSupport.serviceLocal/RemoteException(...)}} launches a separate thread that stops the bridge:\n\n{code:title=DemandForwardingBridgeSupport.java}\npublic void serviceRemoteException(Throwable error) {\n    if (!disposed.get()) {\n        if (error instanceof SecurityException || error instanceof GeneralSecurityException) {\n            LOG.error(\"Network connection between \" + localBroker + \" and \" + remoteBroker + \" shutdown due to a remote error: \" + error);\n        } else {\n            LOG.warn(\"Network connection between \" + localBroker + \" and \" + remoteBroker + \" shutdown due to a remote error: \" + error);\n        } \n        LOG.debug(\"The remote Exception was: \" + error, error);\n        brokerService.getTaskRunnerFactory().execute(new Runnable() {\n            public void run() {\n                ServiceSupport.dispose(getControllingService());\n            }\n        });\n        fireBridgeFailed();\n    }\n}\n\npublic void stop() throws Exception {\n    if (started.compareAndSet(true, false)) {\n        if (disposed.compareAndSet(false, true)) {\n            LOG.debug(\" stopping \" + configuration.getBrokerName() + \" bridge to \" + remoteBrokerName);\n            NetworkBridgeListener l = this.networkBridgeListener;\n            if (l != null) {\n                l.onStop(this);\n            }\n{code}\n\nWhen the bridge stops, the {{disposed}} flag is set, which prevents subsequent calls to {{serviceLocal/RemoteException(...)}} from calling {{fireBridgeFailed()}}.  However, since the call to {{DemandForwardingBridgeSupport.stop()}} is made by a separate thread, multiple {{serviceLocal/RemoteException(...)}} calls that are made in quick succession can result in multiple calls to {{fireBridgeFailed()}}.\n\nThis is the first race condition: multiple calls can be made to {{DiscoveryNetworkConnector.bridgeFailed()}} for the same bridge.  By transitivity, this results in multiple calls to {{SimpleDiscoveryAgent.serviceFailed(...)}}.\n\n{{SimpleDiscoveryAgent.serviceFailed(...)}} has a guard class, {{event.failed.compareAndSet(false, true)}}, which should only allow the first call to launch a bridge reconnect thread.  However, once the {{reconnectDelay}} expires, {{event.failed}} is reset to {{false}}, which allows re-entry to the failure handling logic, and the possibile launching of additional bridge reconnect threads if the {{reconnectDelay}} is short or the threads calling {{serviceFailed(...)}} are delayed.\n\nThis is the second race condition: the guard clause in {{SimpleDiscoveryAgent.serviceFailed(...)}} can be reset before the subsequent redundant calls have been filtered out.\n\nThese two race conditions allow a single call to {{DiscoveryNetworkConnector.onServiceAdd(...)}} to result in multiple subsequent concurrent (re)calls, and these concurrent calls can spawn their own multiple concurrent calls.  The result can be an unlimited number of concurrent calls to {{onServiceAdd(...)}}.\n\nUnit Test\n=========\nThe attached unit test demonstrates this bug by simulating a bridge failure that has yet to be detected by the remote broker (i.e., before the {{InactivityMonitor}} closes the connection).  The local broker attempts to re-establish the bridge, but its call to {{DemandForwardingBridge.startRemoteBroker()}} fails because the remote broker rejects the new connection since the old one still exists.  Since {{startRemoteBroker}} sends multiple messages to the remote broker, multiple exceptions are generated:\n\n{code:title=DemandForwardingBridgeSupport.java}\nprotected void startRemoteBridge() throws Exception {\n...\n                remoteBroker.oneway(brokerInfo);\n...\n            remoteBroker.oneway(remoteConnectionInfo);\n...\n            remoteBroker.oneway(producerInfo);\n...\n                remoteBroker.oneway(demandConsumerInfo);\n}\n{code}\n\nThe multiple exceptions result in multiple calls to {{DemandForwardingBridgeSupport.serviceRemoteException(...)}}, which allows the first race condition to be exhibited.  \n\nThe first unit test has a 1s {{reconnectDelay}}, which is sufficient to make the second race condition improbable; therefore, this test generally passes. \n\nThe second unit test has a 0s {{reconnectDelay}}; on my system, this makes the timing of multiple calls to {{DemandForwardingBridgeSupport.serviceRemoteException(...)}} such that the second race condition is reliably exhibited, resulting in the unit test failing because it detects concurrent calls to {{DiscoveryNetworkConnector.onServiceAdd(...)}}.\n\nSolution\n========\nWhile it would be possible to add a {{failed.compareAndSet(false,true)}} guard clause to {{DemandForwardingBridgeSupport.fireBridgeFailed()}}, and prevent the first race condition from allowing multiple calls to {{SimpleDiscoveryAgent.serviceFailed()}}, the root problem is the race condition in {{serviceFailed}}.  This can be trivially addressed by making a copy of the {{DiscoveryEvent}}, which prevents the original {{event.failed}} guard clause from being reset:\n\n{code:title=Patched SimpleDiscoveryAgent.java}\npublic void serviceFailed(DiscoveryEvent devent) throws IOException {\n\n    final SimpleDiscoveryEvent sevent = (SimpleDiscoveryEvent)devent;\n    if (sevent.failed.compareAndSet(false, true)) {\n\n        listener.onServiceRemove(sevent);\n        taskRunner.execute(new Runnable() {\n            public void run() {\n                SimpleDiscoveryEvent event = new SimpleDiscoveryEvent(sevent);\n\n...\n                event.connectTime = System.currentTimeMillis();\n                event.failed.set(false);\n                listener.onServiceAdd(event);\n            }\n        }, \"Simple Discovery Agent\");\n    }\n}\n{code} ",
        "duedate": null,
        "environment": null,
        "fixVersions": [{
            "archived": false,
            "description": "Maintenance release with new AMQP support and smaller modules",
            "id": "12323282",
            "name": "5.8.0",
            "releaseDate": "2013-02-11",
            "released": true,
            "self": "https://issues.apache.org/jira/rest/api/2/version/12323282"
        }],
        "issuelinks": [
            {
                "id": "12359835",
                "inwardIssue": {
                    "fields": {
                        "issuetype": {
                            "avatarId": 21133,
                            "description": "A problem which impairs or prevents the functions of the product.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
                            "id": "1",
                            "name": "Bug",
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
                            "subtask": false
                        },
                        "priority": {
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/critical.svg",
                            "id": "2",
                            "name": "Critical",
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/2"
                        },
                        "status": {
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "id": "5",
                            "name": "Resolved",
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "statusCategory": {
                                "colorName": "green",
                                "id": 3,
                                "key": "done",
                                "name": "Done",
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3"
                            }
                        },
                        "summary": "DiscoveryNetworkConnector can lose track of active bridges, resulting in permanent bridge failure or continued attempts to re-connect existing bridges"
                    },
                    "id": "12614725",
                    "key": "AMQ-4160",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/12614725"
                },
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12359835",
                "type": {
                    "id": "10030",
                    "inward": "is related to",
                    "name": "Reference",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                }
            },
            {
                "id": "12361863",
                "inwardIssue": {
                    "fields": {
                        "issuetype": {
                            "avatarId": 21133,
                            "description": "A problem which impairs or prevents the functions of the product.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
                            "id": "1",
                            "name": "Bug",
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
                            "subtask": false
                        },
                        "priority": {
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "id": "3",
                            "name": "Major",
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3"
                        },
                        "status": {
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "id": "5",
                            "name": "Resolved",
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "statusCategory": {
                                "colorName": "green",
                                "id": 3,
                                "key": "done",
                                "name": "Done",
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3"
                            }
                        },
                        "summary": "NetworkBridge sometimes stops trying to reconnect after connection is lost"
                    },
                    "id": "12605058",
                    "key": "AMQ-3993",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/12605058"
                },
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12361863",
                "type": {
                    "id": "10030",
                    "inward": "is related to",
                    "name": "Reference",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                }
            }
        ],
        "issuetype": {
            "avatarId": 21133,
            "description": "A problem which impairs or prevents the functions of the product.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
            "id": "1",
            "name": "Bug",
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
            "subtask": false
        },
        "labels": [],
        "lastViewed": null,
        "priority": {
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/critical.svg",
            "id": "2",
            "name": "Critical",
            "self": "https://issues.apache.org/jira/rest/api/2/priority/2"
        },
        "progress": {
            "progress": 0,
            "total": 0
        },
        "project": {
            "avatarUrls": {
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12311210&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12311210&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12311210&avatarId=10011",
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12311210&avatarId=10011"
            },
            "id": "12311210",
            "key": "AMQ",
            "name": "ActiveMQ",
            "projectCategory": {
                "description": "ActiveMQ",
                "id": "11160",
                "name": "ActiveMQ",
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/11160"
            },
            "self": "https://issues.apache.org/jira/rest/api/2/project/12311210"
        },
        "reporter": {
            "active": true,
            "avatarUrls": {
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452",
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452"
            },
            "displayName": "Stirling Chow",
            "key": "stirlingc",
            "name": "stirlingc",
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=stirlingc",
            "timeZone": "Etc/UTC"
        },
        "resolution": {
            "description": "A fix for this issue is checked into the tree and tested.",
            "id": "1",
            "name": "Fixed",
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1"
        },
        "resolutiondate": "2012-12-13T23:36:41.000+0000",
        "status": {
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "id": "5",
            "name": "Resolved",
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "statusCategory": {
                "colorName": "green",
                "id": 3,
                "key": "done",
                "name": "Done",
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3"
            }
        },
        "subtasks": [],
        "summary": "Race condition in SimpleDiscoveryAgent creates multiple concurrent threads attempting to connect to the same bridge --- can result in deadlock",
        "timeestimate": null,
        "timeoriginalestimate": null,
        "timespent": null,
        "updated": "2013-05-02T02:30:56.000+0000",
        "versions": [{
            "archived": false,
            "description": "Maintenance release with new AMQP support and smaller modules",
            "id": "12323282",
            "name": "5.8.0",
            "releaseDate": "2013-02-11",
            "released": true,
            "self": "https://issues.apache.org/jira/rest/api/2/version/12323282"
        }],
        "votes": {
            "hasVoted": false,
            "self": "https://issues.apache.org/jira/rest/api/2/issue/AMQ-4159/votes",
            "votes": 0
        },
        "watches": {
            "isWatching": false,
            "self": "https://issues.apache.org/jira/rest/api/2/issue/AMQ-4159/watchers",
            "watchCount": 6
        },
        "workratio": -1
    },
    "id": "12614669",
    "key": "AMQ-4159",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/12614669"
}