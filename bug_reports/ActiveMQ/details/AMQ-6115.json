{"expand":"renderedFields,names,schema,operations,editmeta,changelog,versionedRepresentations","id":"12928635","self":"https://issues.apache.org/jira/rest/api/2/issue/12928635","key":"AMQ-6115","fields":{"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype","name":"Bug","subtask":false,"avatarId":21133},"timespent":null,"project":{"self":"https://issues.apache.org/jira/rest/api/2/project/12311210","id":"12311210","key":"AMQ","name":"ActiveMQ","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/projectavatar?pid=12311210&avatarId=10011","24x24":"https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12311210&avatarId=10011","16x16":"https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12311210&avatarId=10011","32x32":"https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12311210&avatarId=10011"},"projectCategory":{"self":"https://issues.apache.org/jira/rest/api/2/projectCategory/11160","id":"11160","description":"ActiveMQ","name":"ActiveMQ"}},"fixVersions":[],"aggregatetimespent":null,"resolution":null,"customfield_12312322":null,"customfield_12310220":null,"customfield_12312520":null,"customfield_12312323":null,"customfield_12312521":"Wed Jan 13 15:45:32 UTC 2016","customfield_12310420":"9223372036854775807","customfield_12312320":null,"customfield_12310222":null,"customfield_12312321":null,"resolutiondate":null,"workratio":-1,"customfield_12312328":null,"customfield_12312329":null,"customfield_12312923":null,"customfield_12312326":null,"customfield_12312920":null,"customfield_12310300":null,"customfield_12312327":null,"customfield_12312921":null,"customfield_12312324":null,"customfield_12312720":null,"customfield_12312325":null,"lastViewed":null,"watches":{"self":"https://issues.apache.org/jira/rest/api/2/issue/AMQ-6115/watchers","watchCount":4,"isWatching":false},"created":"2016-01-08T13:10:15.496+0000","priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.svg","name":"Major","id":"3"},"labels":[],"customfield_12312333":null,"customfield_12312334":null,"customfield_12313422":"false","customfield_12310310":"2.0","customfield_12312331":null,"customfield_12312332":null,"timeestimate":null,"aggregatetimeoriginalestimate":null,"customfield_12311120":null,"customfield_12312330":null,"versions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12318549","id":"12318549","name":"5.5.1","archived":false,"released":true,"releaseDate":"2011-10-16"},{"self":"https://issues.apache.org/jira/rest/api/2/version/12329669","id":"12329669","name":"5.11.2","archived":false,"released":true,"releaseDate":"2015-08-10"},{"self":"https://issues.apache.org/jira/rest/api/2/version/12329848","id":"12329848","name":"5.13.0","archived":false,"released":true,"releaseDate":"2015-12-03"}],"issuelinks":[],"customfield_12312339":null,"assignee":null,"customfield_12312337":null,"customfield_12312338":null,"updated":"2016-01-13T15:48:52.881+0000","customfield_12312335":null,"customfield_12312336":null,"status":{"self":"https://issues.apache.org/jira/rest/api/2/status/1","description":"The issue is open and ready for the assignee to start work on it.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/open.png","name":"Open","id":"1","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/2","id":2,"key":"new","colorName":"blue-gray","name":"To Do"}},"components":[{"self":"https://issues.apache.org/jira/rest/api/2/component/12320200","id":"12320200","name":"activemq-leveldb-store","description":"LevelDB based message store"},{"self":"https://issues.apache.org/jira/rest/api/2/component/12313892","id":"12313892","name":"Broker"},{"self":"https://issues.apache.org/jira/rest/api/2/component/12325017","id":"12325017","name":"KahaDB"}],"timeoriginalestimate":null,"customfield_12310080":null,"description":"We are currently facing a problem when Using ActiveMQ with a large number of Persistence Queues (250) รก 1000 persistent TextMessages รก 10 KB.\nOur scenario requires these messages to remain in the storage over a long time (days), until they are consumed (large amounts of data are staged for distribution for many consumer, that could be offline for some days).\n\nThis issue is independent of the JVM,  OS and PersistentAdapter (KahaDB, LevelDB) with enough free space and memory.\nWe tested this behaviour with ActiveMQ: 5.11.2, 5.13.0 and 5.5.1.\n\nAfter the Persistence Store is filled with these Messages (we use a simple unit test for production always the same message) and a broker restart, we can browse/consume some Queues  _until_ the #checkpoint call after 30 seconds.\n\nThis call causes the broker to use all available memory and never releases it for other tasks such as Queue browse/consume. Internally the MessageCursor seems to decide, that there is not enough memory and stops delivery of queue content to browsers/consumers.\n\n=> Is there a way to avoid this behaviour of fix this? \nThe expectation is, that we can consume/browse any queue under all circumstances.\n\nBesides the above mentioned settings we use the following settings for the broker (btw: changing the memoryLimit to a lower value like 1mb does not change the situation):\n{code:xml}\n        <destinationPolicy>\n            <policyMap>\n              <policyEntries>\n                <policyEntry queue=\">\" producerFlowControl=\"false\"\noptimizedDispatch=\"true\" memoryLimit=\"128mb\">\n                  <dispatchPolicy>\n                    <strictOrderDispatchPolicy />\n                  </dispatchPolicy>\n                  <pendingQueuePolicy>\n                    <storeCursor/>\n                  </pendingQueuePolicy>\n                </policyEntry>\n              </policyEntries>\n            </policyMap>\n        </destinationPolicy>\n\n        <systemUsage>\n            <systemUsage sendFailIfNoSpace=\"true\">\n                <memoryUsage>\n                    <memoryUsage limit=\"500 mb\"/>\n                </memoryUsage>\n                <storeUsage>\n                    <storeUsage limit=\"80000 mb\"/>\n                </storeUsage>\n                <tempUsage>\n                    <tempUsage limit=\"1000 mb\"/>\n                </tempUsage>\n            </systemUsage>\n        </systemUsage>\n{code}\n\nIf we set the *cursorMemoryHighWaterMark* in the destinationPolicy to a higher value like *150* or *600* depending on the difference between memoryUsage and the available heap space relieves the situation a bit for a workaround, but this is not really an option for production systems in my point of view.\n\nAttached some information from Oracle Mission Control and JProfiler showing those ActiveMQTextMessage instances that are never released from memory.\n\nh4. 2016013 - F'up due to our solution described in the comments (setting useCache=\"false\" and expireMessagesPeriod=\"0\") :\n\nIn my point of view, it's worth to discuss the one and only memoryLimit parameter used for both the regular browse/consume threads and the checkpoint/cleanup threads. \nThere should always be enough space to browse/consume any queue at least with prefetch 1 resp. one of the next pending messages.\nMaybe - in this case - 2 well-balanced memoryLimit parameters with priority on consumption instead of checkpoint/cleanup are helpful for a a better regulation. Or something near it.\n\n","customfield_10010":null,"timetracking":{},"customfield_12312026":null,"customfield_12312023":null,"customfield_12312024":null,"customfield_12312340":null,"attachment":[{"self":"https://issues.apache.org/jira/rest/api/2/attachment/12781210","id":"12781210","filename":"Bildschirmfoto 2016-01-08 um 12.09.34.png","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jforge","name":"jforge","key":"jforge","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Klaus Pittig","active":true,"timeZone":"Europe/Berlin"},"created":"2016-01-08T13:15:30.438+0000","size":125782,"mimeType":"image/png","content":"https://issues.apache.org/jira/secure/attachment/12781210/Bildschirmfoto+2016-01-08+um+12.09.34.png"},{"self":"https://issues.apache.org/jira/rest/api/2/attachment/12781209","id":"12781209","filename":"Bildschirmfoto 2016-01-08 um 13.29.08.png","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jforge","name":"jforge","key":"jforge","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Klaus Pittig","active":true,"timeZone":"Europe/Berlin"},"created":"2016-01-08T13:13:45.413+0000","size":75893,"mimeType":"image/png","content":"https://issues.apache.org/jira/secure/attachment/12781209/Bildschirmfoto+2016-01-08+um+13.29.08.png"}],"aggregatetimeestimate":null,"customfield_12312341":null,"customfield_12312220":null,"customfield_12312022":null,"customfield_12310041":null,"customfield_12310921":null,"customfield_12310920":"9223372036854775807","customfield_12312823":null,"summary":"No more browse/consume possible after #checkpoint run","creator":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jforge","name":"jforge","key":"jforge","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Klaus Pittig","active":true,"timeZone":"Europe/Berlin"},"subtasks":[],"customfield_12310291":null,"reporter":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jforge","name":"jforge","key":"jforge","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Klaus Pittig","active":true,"timeZone":"Europe/Berlin"},"customfield_12310290":null,"aggregateprogress":{"progress":0,"total":0},"customfield_12311024":null,"environment":"OS=Linux,MacOS,Windows, Java=1.7,1.8, Xmx=1024m, SystemUsage Memory Limit 500 MB, Temp Limit 1 GB, Storage 80 GB","customfield_12313520":null,"customfield_12311020":null,"duedate":null,"customfield_12310250":null,"progress":{"progress":0,"total":0},"comment":{"comments":[{"self":"https://issues.apache.org/jira/rest/api/2/issue/12928635/comment/15089184","id":"15089184","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jforge","name":"jforge","key":"jforge","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Klaus Pittig","active":true,"timeZone":"Europe/Berlin"},"body":"Oracle Mission Control JOverflow Analysis showing unreleasable ActiveMQTextMessages\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jforge","name":"jforge","key":"jforge","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Klaus Pittig","active":true,"timeZone":"Europe/Berlin"},"created":"2016-01-08T13:13:45.417+0000","updated":"2016-01-08T13:13:45.417+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12928635/comment/15089187","id":"15089187","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jforge","name":"jforge","key":"jforge","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Klaus Pittig","active":true,"timeZone":"Europe/Berlin"},"body":"JProfiler .hprof heapmem comparison before and after #checkpoint\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jforge","name":"jforge","key":"jforge","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Klaus Pittig","active":true,"timeZone":"Europe/Berlin"},"created":"2016-01-08T13:15:30.442+0000","updated":"2016-01-08T13:15:30.442+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12928635/comment/15091644","id":"15091644","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jforge","name":"jforge","key":"jforge","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Klaus Pittig","active":true,"timeZone":"Europe/Berlin"},"body":"Corresponding mailing list thread: http://activemq.2283324.n4.nabble.com/How-to-avoid-blocking-of-queue-browsing-after-ActiveMQ-checkpoint-call-td4705696.html\n\nTim Bain requested some more information\n{quote}\nIf you increase your JVM size (4GB, 8GB, etc., the biggest your OS and \nhardware will support), does the behavior change?  Does it truly take all \navailable memory, or just all the memory that you've made available to it \n(which isn't tiny but really isn't all that big)? \n\nAlso, how do you know that the \nMessageCursor seems to decide that there is not enough memory and stops \ndelivery of queue content to browsers/consumers?  What symptom tells you \nthat? \n{quote}\n\nIf I increase the JVM max heap size (4GB), the behavior does not change. \nIn my point of view, the configured memoryLimit (500 MB) works as \nexpected (heapdump shows same max. size for the TextMessage content, \ni.e. 55002 byte[] instances containing 539 MB total). \n\nHowever, trying to browse a queue shows no content, even if there is \nenough heap memory available. \n\nAs far as i understand the sourcecode, this also due to the configured \nmemoryLimit, because - i hope this is the answer you expect - the \ncalculation for available causes hasSpace = false. \n\nI found this here: \n{code}\nAbstractPendingMessageCursor { \npublic boolean hasSpace() { \nreturn systemUsage != null ? \n(!systemUsage.getMemoryUsage().isFull(memoryUsageHighWaterMark)) : true; \n} \npublic boolean isFull() { \nreturn systemUsage != null ? systemUsage.getMemoryUsage().isFull() : \nfalse; \n} \n} \n{code}\n\n#hasSpace is in this case called during a click on a queue in the \nWebconsole; see the 2 stacks during this workflow: \n\n{noformat}\nDaemon Thread [Queue:aaa114] (Suspended (breakpoint at line 107 in QueueStorePrefetch)) \nowns: QueueStorePrefetch (id=6036) \nowns: StoreQueueCursor (id=6037) \nowns: Object (id=6038) \nQueueStorePrefetch.doFillBatch() line: 107 \nQueueStorePrefetch(AbstractStoreCursor).fillBatch() line: 381 \nQueueStorePrefetch(AbstractStoreCursor).reset() line: 142 \nStoreQueueCursor.reset() line: 159 \nQueue.doPageInForDispatch(boolean, boolean) line: 1897 \nQueue.pageInMessages(boolean) line: 2119 \nQueue.iterate() line: 1596 \nDedicatedTaskRunner.runTask() line: 112 \nDedicatedTaskRunner$1.run() line: 42 \n{noformat}\n\n{noformat}\nDaemon Thread [ActiveMQ VMTransport: vm://localhost#1] (Suspended (breakpoint at line 107 in QueueStorePrefetch)) \nowns: QueueStorePrefetch (id=5974) \nowns: StoreQueueCursor (id=5975) \nowns: Object (id=5976) \nowns: Object (id=5977) \nQueueStorePrefetch.doFillBatch() line: 107 \nQueueStorePrefetch(AbstractStoreCursor).fillBatch() line: 381 \nQueueStorePrefetch(AbstractStoreCursor).reset() line: 142 \nStoreQueueCursor.reset() line: 159 \nQueue.doPageInForDispatch(boolean, boolean) line: 1897 \nQueue.pageInMessages(boolean) line: 2119 \nQueue.iterate() line: 1596 \nQueue.wakeup() line: 1822 \nQueue.addSubscription(ConnectionContext, Subscription) line: 491 \nManagedQueueRegion(AbstractRegion).addConsumer(ConnectionContext, ConsumerInfo) line: 399 \nManagedRegionBroker(RegionBroker).addConsumer(ConnectionContext, ConsumerInfo) line: 427 \nManagedRegionBroker.addConsumer(ConnectionContext, ConsumerInfo) line: 244 \nAdvisoryBroker(BrokerFilter).addConsumer(ConnectionContext, ConsumerInfo) line: 102 \nAdvisoryBroker.addConsumer(ConnectionContext, ConsumerInfo) line: 104 \nCompositeDestinationBroker(BrokerFilter).addConsumer(ConnectionContext, ConsumerInfo) line: 102 \nTransactionBroker(BrokerFilter).addConsumer(ConnectionContext, ConsumerInfo) line: 102 \nStatisticsBroker(BrokerFilter).addConsumer(ConnectionContext, ConsumerInfo) line: 102 \nBrokerService$5(MutableBrokerFilter).addConsumer(ConnectionContext,ConsumerInfo) line: 107 \nTransportConnection.processAddConsumer(ConsumerInfo) line: 663 \nConsumerInfo.visit(CommandVisitor) line: 348 \nTransportConnection.service(Command) line: 334 \nTransportConnection$1.onCommand(Object) line: 188 \nResponseCorrelator.onCommand(Object) line: 116 \nMutexTransport.onCommand(Object) line: 50 \nVMTransport.iterate() line: 248 \nDedicatedTaskRunner.runTask() line: 112 \nDedicatedTaskRunner$1.run() line: 42 \n{noformat}\n\nSetting queueBrowsePrefetch=\"1\" and queuePrefetch=\"1\" in the \nPolicyEntry for queue=\">\" also has no effect. \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jforge","name":"jforge","key":"jforge","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Klaus Pittig","active":true,"timeZone":"Europe/Berlin"},"created":"2016-01-11T09:14:35.448+0000","updated":"2016-01-11T09:14:35.448+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12928635/comment/15096370","id":"15096370","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jforge","name":"jforge","key":"jforge","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Klaus Pittig","active":true,"timeZone":"Europe/Berlin"},"body":"Just to complete the known information used for the corresponding mailing list thread: http://activemq.2283324.n4.nabble.com/How-to-avoid-blocking-of-queue-browsing-after-ActiveMQ-checkpoint-call-td4705696.html\n\nTim Bain:\n{quote}\nI believe you are correct: browsing a persistent queue uses bytes from the \nmemory store, because those bytes must be read from the persistence store \ninto the memory store before they can be handed off to browsers or \nconsumers.  If all available bytes in the memory store are already in use, \nthe messages can't be paged into the memory store, and so the operation \nthat required them to be paged in will hang/fail. \n\nYou can work around the problem by increasing your memory store size via \ntrial-and-error until the problem goes away.  Note that the broker itself \nneeds some amount of memory, so you can't give the whole heap over to the \nmemory store or you'll risk getting OOMs, which means you may need to \nincrease the heap size as well.  You can estimate how much memory the \nbroker needs aside from the memory store by subtracting the bytes used for \nthe memory store (539 MB) from the total heap bytes used as measured via \nJConsole or similar tools.  I'd double (or more) that number to be safe, if \nit was me; the last thing I want to deal with in a production application \n(ActiveMQ or anything else) is running out of memory because I tried to cut \nthe memory limits too close just to save a little RAM. \n\nAll of that is how to work around the fact that before you try to browse \nyour queue, something else has already consumed all available bytes in the \nmemory store.  If you want to dig into why that's happening, we'd need to \ntry to figure out what those bytes are being used for and whether it's \npossible to change configuration values to reduce the usage so it fits into \nyour current limit.  There will definitely be more effort required than \nsimply increasing the memory limit (and max heap size), but we can try if \nyou're not able to increase the limits enough to fix the problem. \n\nIf you want to go down that path, one thread to pull on is your observation \nthat you \"can browse/consume some Queues  _until_ the #checkpoint call \nafter 30 seconds.\"  I assume from your reference to checkpointing that \nyou're using KahaDB as your persistence store.  Can you post the KahaDB \nportion of your config? \n\nYour statements here and in your StackOverflow post ( \nhttp://stackoverflow.com/questions/34679854/how-to-avoid-blocking-of-queue-browsing-after-activemq-checkpoint-call) \nindicate that you think that the problem is that memory isn't getting \ngarbage collected after the operation that needed it (i.e. the checkpoint) \ncompletes, but it's also possible that the checkpoint operation isn't \ncompleting because it can't get enough messages read into the memory \nstore.  Have you confirmed via the thread dump that there is not a \ncheckpoint operation still in progress?  Also, how large are your journal \nfiles that are getting checkpointed?  If they're large enough that all \nmessages for one file won't fit into the memory store, you might be able to \nprevent the problem by using smaller files. \n{quote}\n\na.) Regarding your last answer (thanks for your effort by the way):\n\nI'm aware of the relation between the heap and the systemUsage memoryLimit and we make sure that there are no illogical settings.\nThe primary requirement is to have a stable system running 'forever' w/o any memory issues at any time independent from the load/throughput.\nNo one really wants to deal with memory settings on the edge of limits.\n\nYou're right: the memory is completely consumed. And I can't guarantee the checkpoint/cleanup to be finished completely, so the system can be stalled without giving GC a chance to release some memory.\n\nIt's the expiry check causing this. The persistent stores themselves seem to be managed as expected (no issues, no inconsistency, no loss);\nour situation is independent of the storage (reproducable for leveldb and kahadb). For KahaDB we use 16mb for journal files since years (helps to save a huge amount of space required for pending messages not consumed for some days due to offline situations on client side).\nAnyway, here is our current configuration you requested:\n\n{code:xml}\n<persistenceAdapter>\n<kahaDB directory=\"${activemq.base}/data/kahadb\" enableIndexWriteAsync=\"true\" journalMaxFileLength=\"16mb\" indexWriteBatchSize=\"10000\" indexCacheSize=\"10000\" />\n<!--\n<levelDB directory=\"${activemq.base}/data/leveldb\" logSize=\"33554432\" />\n-->\n</persistenceAdapter>\n{code}\n\nb.) Some proposal concerning AMQ-6115:\n\nIn my point of view, it's worth to discuss the one and only memoryLimit parameter used for both the regular browse/consume threads and the checkpoint/cleanup threads.\nThere should always be enough space to browse/consume any queue at least with prefetch 1 resp. one of the next pending messages.\nMaybe - in this case - 2 well-balanced memoryLimit parameters with priority on consumption instead of checkpoint/cleanup are helpful for a a better regulation. Or something near it.\n\n\nc.) Our results and an acceptable solution so far:\n\nAfter a thorough investigation (w/o changing ActiveMQ source code) the result is for now that we need to accept the limitations defined by the single memoryLimit parameter used both for the #checkpoint/cleanup process and browsing/consuming queues.\n\n**1.) Memory**\n\nThere is not a problem, if we use a much higher memoryLimit (together\nwith a higher max-heap) to support both the message caching per\ndestination during the #checkpoint/cleanup workflow and our requirements to browse/consume messages.\n\nBut more memory is not an option in our scenario, we need to deal with 1024m max-heap and 500m memoryLimit.\n\nBesides this, constantly setting higher memoryLimits just because of more persistent queues containing hundreds/thousands of pending messages together with certain offline/inactive consumer scenarios should be discussed in detail (IMHO).\n\n\n**2.) Persistent Adapters**\n\nWe ruled out persistent adapters as the cause of the problem, because the behaviour doesn't change, if we switch different types of persistent stores (KahaDB, LevelDB, JDBC-PostgreSQL).\n\nDuring the debugging sessions with KahaDB we also see regular checkpoint handling, the storage is managed as expected.\n\n\n**3.) Destination Policy / Expiration Check**\n\nOur problem completely disappears, if we disable caching and the expiration check, which is the actual cause of the problem.\n\nThe corresponding properties are documented and there is a nice blog article about Message Priorities with a description quite suitable for our scenario:\n\n- http://activemq.apache.org/how-can-i-support-priority-queues.html\n- http://blog.christianposta.com/activemq/activemq-message-priorities-how-it-works/\n\nWe simply added useCache=\"false\" and expireMessagesPeriod=\"0\" to the\npolicyEntry:\n\n{code:xml}\n<destinationPolicy>\n<policyMap>\n<policyEntries>\n<policyEntry queue=\">\" producerFlowControl=\"false\" optimizedDispatch=\"true\" memoryLimit=\"128mb\" timeBeforeDispatchStarts=\"1000\"\nuseCache=\"false\" expireMessagesPeriod=\"0\">\n<dispatchPolicy>\n<strictOrderDispatchPolicy />\n</dispatchPolicy>\n<pendingQueuePolicy>\n<storeCursor />\n</pendingQueuePolicy>\n</policyEntry>\n</policyEntries>\n</policyMap>\n</destinationPolicy>\n{code}\n\nThe consequences are clear, if we don't use in-mem caching anymore and never check for message expiration.\n\nFor we neither use message expiration nor message priorities and the current message dispatching is fast enough for us, this trade-off is acceptable regarding given system limitations.\n\nOne should also think about well-defined prefetch limits for memory consumption during specific workflows. Message sizes in our scenario can be 2 Bytes up to approx. 100 KB, so more individual policyEntries and client consumer configurations could be helpful to optimize system behaviour concerning performance and memory usage (see http://activemq.apache.org/per-destination-policies.html).\n\n\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jforge","name":"jforge","key":"jforge","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Klaus Pittig","active":true,"timeZone":"Europe/Berlin"},"created":"2016-01-13T15:45:32.104+0000","updated":"2016-01-13T15:45:32.104+0000"}],"maxResults":4,"total":4,"startAt":0},"votes":{"self":"https://issues.apache.org/jira/rest/api/2/issue/AMQ-6115/votes","votes":1,"hasVoted":false},"worklog":{"startAt":0,"maxResults":20,"total":0,"worklogs":[]},"customfield_12311820":"0|i2r1ef:"}}