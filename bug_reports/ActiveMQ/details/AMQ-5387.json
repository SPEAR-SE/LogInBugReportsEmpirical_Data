{"expand":"renderedFields,names,schema,operations,editmeta,changelog,versionedRepresentations","id":"12747412","self":"https://issues.apache.org/jira/rest/api/2/issue/12747412","key":"AMQ-5387","fields":{"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype","name":"Bug","subtask":false,"avatarId":21133},"timespent":null,"project":{"self":"https://issues.apache.org/jira/rest/api/2/project/12311210","id":"12311210","key":"AMQ","name":"ActiveMQ","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/projectavatar?pid=12311210&avatarId=10011","24x24":"https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12311210&avatarId=10011","16x16":"https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12311210&avatarId=10011","32x32":"https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12311210&avatarId=10011"},"projectCategory":{"self":"https://issues.apache.org/jira/rest/api/2/projectCategory/11160","id":"11160","description":"ActiveMQ","name":"ActiveMQ"}},"fixVersions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12324951","id":"12324951","name":"5.11.0","archived":false,"released":true,"releaseDate":"2015-02-04"}],"aggregatetimespent":null,"resolution":{"self":"https://issues.apache.org/jira/rest/api/2/resolution/1","id":"1","description":"A fix for this issue is checked into the tree and tested.","name":"Fixed"},"customfield_12312322":null,"customfield_12310220":"2014-10-10T22:18:01.269+0000","customfield_12312520":null,"customfield_12312323":null,"customfield_12312521":"Thu Oct 23 23:11:54 UTC 2014","customfield_12310420":"9223372036854775807","customfield_12312320":null,"customfield_12310222":"1_*:*_1_*:*_950526203_*|*_5_*:*_1_*:*_0","customfield_12312321":null,"resolutiondate":"2014-10-21T21:15:14.876+0000","workratio":0,"customfield_12312328":null,"customfield_12312329":null,"customfield_12312923":null,"customfield_12312326":null,"customfield_12312920":null,"customfield_12310300":null,"customfield_12312327":null,"customfield_12312921":null,"customfield_12312324":null,"customfield_12312720":null,"customfield_12312325":null,"lastViewed":null,"watches":{"self":"https://issues.apache.org/jira/rest/api/2/issue/AMQ-5387/watchers","watchCount":4,"isWatching":false},"created":"2014-10-10T21:13:08.758+0000","priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.svg","name":"Major","id":"3"},"labels":[],"customfield_12312333":null,"customfield_12312334":null,"customfield_12313422":"false","customfield_12310310":"1.0","customfield_12312331":null,"customfield_12312332":null,"timeestimate":0,"aggregatetimeoriginalestimate":0,"customfield_12311120":null,"customfield_12312330":null,"versions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12324951","id":"12324951","name":"5.11.0","archived":false,"released":true,"releaseDate":"2015-02-04"}],"issuelinks":[],"customfield_12312339":null,"assignee":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=tabish121","name":"tabish121","key":"tabish121","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=tabish121&avatarId=25249","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=tabish121&avatarId=25249","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=tabish121&avatarId=25249","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=tabish121&avatarId=25249"},"displayName":"Timothy Bish","active":true,"timeZone":"America/Havana"},"customfield_12312337":null,"customfield_12312338":null,"updated":"2014-10-23T23:11:54.170+0000","customfield_12312335":null,"customfield_12312336":null,"status":{"self":"https://issues.apache.org/jira/rest/api/2/status/5","description":"A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/resolved.png","name":"Resolved","id":"5","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Done"}},"components":[{"self":"https://issues.apache.org/jira/rest/api/2/component/12318701","id":"12318701","name":"MQTT","description":"MQTT Transport"}],"timeoriginalestimate":0,"customfield_12310080":null,"description":"{noformat}\n**\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.activemq.transport.mqtt;\n\nimport static org.junit.Assert.*;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.OutputStream;\nimport java.util.ArrayList;\nimport java.util.concurrent.atomic.AtomicInteger;\n\nimport org.apache.commons.net.util.Base64;\nimport org.eclipse.paho.client.mqttv3.IMqttDeliveryToken;\nimport org.eclipse.paho.client.mqttv3.MqttCallback;\nimport org.eclipse.paho.client.mqttv3.MqttClient;\nimport org.eclipse.paho.client.mqttv3.MqttConnectOptions;\nimport org.eclipse.paho.client.mqttv3.MqttException;\nimport org.eclipse.paho.client.mqttv3.MqttMessage;\nimport org.eclipse.paho.client.mqttv3.MqttPersistenceException;\nimport org.eclipse.paho.client.mqttv3.MqttSecurityException;\nimport org.eclipse.paho.client.mqttv3.persist.MemoryPersistence;\nimport org.junit.Test;\n\n\n\n/**\n * Test the NIO transport with this Test group\n */\npublic class PahoMQTTNIOTest extends PahoMQTTTest  implements MqttCallback {\n\n    AtomicInteger m_receiveCounter = new AtomicInteger();\n    String BigMessagen    static ArrayList<MqttClient> mqttClients = null;\n    static final Integer staticSyncObj = new Integer(1); \n    String messagePayload = null;\n    \n    public final int numberOfThreads = 500;\n    static ArrayList<pubThreadBitMsg> arrThreads = new ArrayList<pubThreadBitMsg>();\n    \n    boolean f_messageReceived = false;\n    boolean f_ackReceived = false;\n    boolean f_lost = false;\n\n    /**\n     * \n     * \n     * @param client\n     * @param location\n     * @param accountId\n     * @param userId\n     * @param clientId\n     * @param token\n     * @param nameSpace\n     * @param message\n     * @param qos\n     * @param f_retained\n     * @param f_keepOpen\n     * @return\n     * @throws MqttException\n     */\n    private MqttClient pubNameSpace(MqttClient client,  \n                                    String    location, \n                                    String    accountId, \n                                    String    userId, \n                                    String    clientId,\n                                    String    token, \n                                    String    nameSpace, \n                                    String    message, \n                                    int       qos, \n                                    boolean   f_retained,  \n                                    boolean   f_keepOpen) throws MqttException\n    {\n\n        try\n        {        \n            boolean f_wasConnected = true; \n            \n            if (client == null)\n            {\n                f_wasConnected = false; \n                client = new MqttClient(location, clientId/*, persistence*/);\n            }\n            \n            if (!f_wasConnected)\n            {\n                MqttConnectOptions options = new MqttConnectOptions();\n                options.setKeepAliveInterval(60);\n                options.setConnectionTimeout(120);\n                options.setPassword(token.toCharArray());\n                options.setUserName(accountId+\":\"+userId);\n                client.connect(options);\n                client.setCallback(this);\n            }\n    \n            MqttMessage mqttMessage = new MqttMessage();\n            mqttMessage.setPayload(message.getBytes());\n            mqttMessage.setQos(qos);\n            mqttMessage.setRetained(f_retained);\n    \n            \n            client.publish(nameSpace, mqttMessage);\n            \n            if (!f_keepOpen)\n            {\n                client.disconnect();\n                client.close();\n                client = null; \n            }\n            return client; \n        }\n        catch (MqttPersistenceException e)\n        {\n            System.err.println(\"pubNameSpace : YOU CAN'T USE THE SAME CLIENTID MULTIPLE TIMES IN A PERSISTENT WAY Excpetion  - \"+e.getMessage());\n            if (client != null)\n            {\n                client.disconnect(); \n                client.close();\n                client = null;\n            }\n        }\n        catch (Exception e)\n        {\n            e.printStackTrace();\n            System.err.println(\"Exception e = \"+e.getMessage());\n            if (client != null)\n            {\n                client.disconnect(); \n                client.close();\n                client = null;\n            }\n        }\n        return null;\n    }\n    /**\n     * \n     * @param location\n     * @param accountId\n     * @param userId\n     * @param clientId\n     * @param token\n     * @param nameSpace\n     * @param message\n     * @param qos\n     * @param f_retained\n     * @param f_keepOpen\n     * @return\n     * @throws MqttException\n     */\n    private MqttClient pubNameSpace(String    location, \n                                    String    accountId, \n                                    String    userId, \n                                    String    clientId,\n                                    String    token, \n                                    String    nameSpace, \n                                    String    message, \n                                    int       qos, \n                                    boolean   f_retained,  \n                                    boolean   f_keepOpen) throws MqttException\n    {\n\n        try\n        {        \n            MqttClient client = new MqttClient(location, clientId/*, persistence*/);\n            client.setCallback(this);\n            MqttConnectOptions options = new MqttConnectOptions();\n            options.setKeepAliveInterval(60);\n            options.setConnectionTimeout(120);\n            options.setPassword(token.toCharArray());\n            options.setUserName(accountId+\":\"+userId);\n    \n            MqttMessage mqttMessage = new MqttMessage();\n            mqttMessage.setPayload(message.getBytes());\n            mqttMessage.setQos(qos);\n            mqttMessage.setRetained(f_retained);\n    \n            client.connect(options);\n            client.publish(nameSpace, mqttMessage);\n            \n            if (!f_keepOpen)\n            {\n                client.disconnect();\n                client.close();\n            }\n            return client; \n        }\n        catch (MqttPersistenceException e)\n        {\n            System.err.println(\"YOU CAN'T USE THE SAME CLIENTID MULTIPLE TIMES IN A PERSISTENT WAY : \"+e.getMessage());\n            assertTrue(false);\n        }\n        catch (Exception e)\n        {\n            e.printStackTrace();\n            System.err.println(\"Exceptoin e = \"+e.getMessage()); \n            assertTrue(false);\n        }\n        return null;\n    }\n   \n    \n    /**\n     * \n     * @param input\n     * @param output\n     * @return\n     * @throws IOException\n     */\n    public static long copyLarge(InputStream input, OutputStream output) throws IOException \n    {\n      byte[] buffer = new byte[4096];\n      long count = 0L;\n      int n = 0;\n      while (-1 != (n = input.read(buffer))) {\n       output.write(buffer, 0, n);\n       count += n;\n      }\n      return count;\n    }\n    \n    /**\n     * \n     * @param p\n     * @throws IOException\n     */\n    public static void outputResults (Process p) throws IOException\n    {\n        BufferedReader stdInput = new BufferedReader(new\n                                         InputStreamReader(p.getInputStream()));\n\n        BufferedReader stdError = new BufferedReader(new\n                        InputStreamReader(p.getErrorStream()));\n\n        String s; \n        while ((s = stdInput.readLine()) != null) \n        {\n            System.out.println(s);\n        }\n        while ((s = stdError.readLine()) != null) \n        {\n            System.out.println(s);\n        }\n    }\n    \n    /**\n     * HELPER\n     * @param msec\n     * @throws InterruptedException\n     */\n    void pause_til_done_or_time(int msec) throws InterruptedException\n    {\n        int pauseTime = 100; \n        while (!f_messageReceived && msec > 0 && !f_lost)\n        {\n            Thread.sleep(pauseTime);\n            msec -= pauseTime;\n        }\n        \n    }\n\n    static Integer numberOfMessages = 0; \n    public void clearMessageCount()\n    {\n        numberOfMessages = 0; \n    }\n    public Integer getMessageCount()\n    {\n        return numberOfMessages; \n    }\n    /**\n     * \n     * @param msec\n     */\n    private void waitForItAck(int msec)\n    {\n        while (!f_ackReceived)\n        {\n            \n            try { Thread.sleep(1000); } catch (Exception e){}\n            \n            msec= msec-1000;\n                            \n            if (msec < 0)\n            {\n                break;\n            }\n        }\n    }\n    \n    @Override\n    public String getProtocolScheme() {\n        return \"mqtt+nio\";\n    }\n\n    @Override\n    public boolean isUseSSL() {\n        return false;\n    }\n\n    public class PahoCallback implements MqttCallback {\n\n        @Override\n        public void connectionLost(Throwable cause) {\n            // TODO Auto-generated method stub\n            \n        }\n\n        @Override\n        public void messageArrived(String topic, MqttMessage message)\n                throws Exception {\n            m_receiveCounter.incrementAndGet();\n        }\n\n        @Override\n        public void deliveryComplete(IMqttDeliveryToken token) {\n            // TODO Auto-generated method stub\n            \n        }\n        \n    }\n \n    static   MqttClient BalstTestClient = null;\n    String   loc = \"tcp://localhost:1883\";\n\n    public class pubThreadBitMsg extends Thread {\n        \n        public pubThreadBitMsg()\n        {\n            synchronized (staticSyncObj)\n            {\n                try\n                {\n                    System.out.println(\"---- pubTheadBitMsg - constructor\"); \n                    if (BalstTestClient == null)\n                    {\n                        BalstTestClient = pubNameSpace(loc, \"cjutzi\", \n                                        \"someone\", \n                                         \"myclientid_cjutzi_pub\", \n                                         \"hello\",\n                                         \"/accounts/cjutzi/users/curt/test\", \n                                         \"Starting Client\", 1, false, true);\n                        System.out.println(\"---- pubTheadBitMsg - init\"); \n                    }\n                } \n                catch (MqttException e)\n                {\n                    // TODO Auto-generated catch block\n                    e.printStackTrace();\n                }\n            }\n        }\n\n        public void run()\n        {\n//            synchronized (staticSyncObj) \n            {\n            try\n            {\n                System.out.println(\"---- pubTheadBitMsg - send\"); \n                pubNameSpace(BalstTestClient, loc, \"cjutzi\", \n                              \"someone\", \n                               \"myclientid_cjutzi_pub\", \n                               \"hello\",\n                               \"/accounts/cjutzi/users/curt/test\", \n                               BigMessage, 1, false, true);\n                } catch (MqttException e)\n                {\n                    // TODO Auto-generated catch block\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n    \n    @Test\n    public void test_AckOnOldListenerQos1Blast100B10KBlocks() throws MqttException, InterruptedException\n    {\n        MqttClient subClient = new MqttClient(\"tcp://localhost:1883\",\n                \"niosubclient\",\n                new MemoryPersistence());\n        MqttConnectOptions cOpts = new MqttConnectOptions();\n        cOpts.setCleanSession(true);\n        cOpts.setUserName(\"curt\");\n        cOpts.setPassword(\"hello\".toCharArray());\n        \n       \n        subClient.setCallback(new PahoCallback());\n        subClient.connect(cOpts);\n        subClient.subscribe(\"nio/test\");\n       \n        \n        for (int i = 0; i < numberOfThreads; i++) \n        {\n            arrThreads.add(new pubThreadBitMsg());\n        }\n        System.out.println(\"--started\"); \n        for (int i = 0; i < numberOfThreads; i++) \n        {\n            arrThreads.get(i).start(); \n        }\n        System.out.println(\"-- waiting\"); \n        Thread.sleep(10000);\n        assertTrue(numberOfThreads == m_receiveCounter.get());\n    }\n    \n    \n    /**\n     * \n     */\n    private void resetFlag()\n    {\n        f_messageReceived = false; \n        f_ackReceived = false; \n    }\n    /***************************************************************/\n    /**              CALL BACKS FOR MQTT                           */\n    /***************************************************************/\n   \n    \n\n    \n    /**\n     * \n     */\n      public void connectionLost(Throwable arg0)\n      {\n          System.out.println(\"MQTT - Connection Lost\");\n//          f_terminate = true;\n          f_lost = true;\n      }\n\n      /**\n       * \n       */\n      public void deliveryComplete(IMqttDeliveryToken arg0)\n      {\n          System.out.println(\"MQTT - delivery complete: Delivery Tokeh = \"+arg0.isComplete());\n          f_ackReceived = true;\n      }\n      \n      /**\n       * \n       */\n      public void messageArrived(String arg0, MqttMessage arg1) throws Exception\n      {\n          synchronized (numberOfMessages)\n          {\n              numberOfMessages++;   \n              System.out.println(\"MQTT - messageArrived \"+arg0+\"\\nMessage: \\t[\"+arg1+\"] QoS: [\"+arg1.getQos()+\"] isDup [\"+arg1.isDuplicate()+\"] nameSpace = \");\n//            System.out.print(arg1.isDuplicate()?\"*\":\".\");\n              byte[] payloadBytes = arg1.getPayload(); \n              if (payloadBytes.length >0 )\n              {\n                  messagePayload = new String(payloadBytes); \n              }\n              System.out.println(\"Message Recieved...\"); \n              f_messageReceived = true;\n          } \n      }\n      \n}\n\n\n{noformat}","customfield_10010":null,"timetracking":{"originalEstimate":"0h","remainingEstimate":"0h","originalEstimateSeconds":0,"remainingEstimateSeconds":0},"customfield_12312026":null,"customfield_12312023":null,"customfield_12312024":null,"customfield_12312340":null,"attachment":[{"self":"https://issues.apache.org/jira/rest/api/2/attachment/12674260","id":"12674260","filename":"MQTTCode.java.patch","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=cjutzi","name":"cjutzi","key":"cjutzi","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Curt Jutzi","active":true,"timeZone":"Etc/UTC"},"created":"2014-10-10T21:16:28.896+0000","size":867,"mimeType":"text/plain","content":"https://issues.apache.org/jira/secure/attachment/12674260/MQTTCode.java.patch"}],"aggregatetimeestimate":0,"customfield_12312341":null,"customfield_12312220":null,"customfield_12312022":null,"customfield_12310041":[{"self":"https://issues.apache.org/jira/rest/api/2/customFieldOption/10042","value":"Patch Available","id":"10042"}],"customfield_12310921":null,"customfield_12310920":"9223372036854775807","customfield_12312823":null,"summary":"MQTT Codec - buffer mis-alignment on NIO when Back-2-Back packets are received","creator":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=cjutzi","name":"cjutzi","key":"cjutzi","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Curt Jutzi","active":true,"timeZone":"Etc/UTC"},"subtasks":[],"customfield_12310291":null,"reporter":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=cjutzi","name":"cjutzi","key":"cjutzi","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Curt Jutzi","active":true,"timeZone":"Etc/UTC"},"customfield_12310290":null,"aggregateprogress":{"progress":0,"total":0},"customfield_12311024":null,"environment":"Paho as client ","customfield_12313520":null,"customfield_12311020":null,"duedate":null,"customfield_12310250":null,"progress":{"progress":0,"total":0},"comment":{"comments":[{"self":"https://issues.apache.org/jira/rest/api/2/issue/12747412/comment/14167526","id":"14167526","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=cjutzi","name":"cjutzi","key":"cjutzi","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Curt Jutzi","active":true,"timeZone":"Etc/UTC"},"body":"Reseting of the readSize was incorrect.  It was using the payLoadRead which could span buffers.. In the case it did.. it would result in a bad state in the codec object, and the following frame would be bad (mis aligned) ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=cjutzi","name":"cjutzi","key":"cjutzi","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Curt Jutzi","active":true,"timeZone":"Etc/UTC"},"created":"2014-10-10T21:16:28.906+0000","updated":"2014-10-10T21:55:59.787+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12747412/comment/14167653","id":"14167653","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=tabish121","name":"tabish121","key":"tabish121","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=tabish121&avatarId=25249","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=tabish121&avatarId=25249","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=tabish121&avatarId=25249","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=tabish121&avatarId=25249"},"displayName":"Timothy Bish","active":true,"timeZone":"America/Havana"},"body":"It's simpler if you just attach the test case as a file instead of a large comment block.  ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=tabish121","name":"tabish121","key":"tabish121","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=tabish121&avatarId=25249","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=tabish121&avatarId=25249","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=tabish121&avatarId=25249","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=tabish121&avatarId=25249"},"displayName":"Timothy Bish","active":true,"timeZone":"America/Havana"},"created":"2014-10-10T22:18:01.269+0000","updated":"2014-10-10T22:18:01.269+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12747412/comment/14167734","id":"14167734","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=cjutzi","name":"cjutzi","key":"cjutzi","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Curt Jutzi","active":true,"timeZone":"Etc/UTC"},"body":"will do.. \nThx\nCurt","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=cjutzi","name":"cjutzi","key":"cjutzi","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Curt Jutzi","active":true,"timeZone":"Etc/UTC"},"created":"2014-10-10T23:04:01.464+0000","updated":"2014-10-10T23:04:01.464+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12747412/comment/14179115","id":"14179115","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=tabish121","name":"tabish121","key":"tabish121","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=tabish121&avatarId=25249","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=tabish121&avatarId=25249","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=tabish121&avatarId=25249","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=tabish121&avatarId=25249"},"displayName":"Timothy Bish","active":true,"timeZone":"America/Havana"},"body":"Fixed on trunk.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=tabish121","name":"tabish121","key":"tabish121","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=tabish121&avatarId=25249","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=tabish121&avatarId=25249","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=tabish121&avatarId=25249","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=tabish121&avatarId=25249"},"displayName":"Timothy Bish","active":true,"timeZone":"America/Havana"},"created":"2014-10-21T21:15:14.915+0000","updated":"2014-10-21T21:15:14.915+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12747412/comment/14182153","id":"14182153","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=surfnerd","name":"surfnerd","key":"surfnerd","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Surf","active":true,"timeZone":"America/Los_Angeles"},"body":"Thank you [~cjutzi] I was trying to figure out same issue !","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=surfnerd","name":"surfnerd","key":"surfnerd","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Surf","active":true,"timeZone":"America/Los_Angeles"},"created":"2014-10-23T23:11:54.170+0000","updated":"2014-10-23T23:11:54.170+0000"}],"maxResults":5,"total":5,"startAt":0},"votes":{"self":"https://issues.apache.org/jira/rest/api/2/issue/AMQ-5387/votes","votes":0,"hasVoted":false},"worklog":{"startAt":0,"maxResults":20,"total":0,"worklogs":[]},"customfield_12311820":"0|i211vr:"}}