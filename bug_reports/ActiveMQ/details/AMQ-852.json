{"expand":"renderedFields,names,schema,operations,editmeta,changelog,versionedRepresentations","id":"12482238","self":"https://issues.apache.org/jira/rest/api/2/issue/12482238","key":"AMQ-852","fields":{"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype","name":"Bug","subtask":false,"avatarId":21133},"timespent":null,"project":{"self":"https://issues.apache.org/jira/rest/api/2/project/12311210","id":"12311210","key":"AMQ","name":"ActiveMQ","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/projectavatar?pid=12311210&avatarId=10011","24x24":"https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12311210&avatarId=10011","16x16":"https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12311210&avatarId=10011","32x32":"https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12311210&avatarId=10011"},"projectCategory":{"self":"https://issues.apache.org/jira/rest/api/2/projectCategory/11160","id":"11160","description":"ActiveMQ","name":"ActiveMQ"}},"fixVersions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12315620","id":"12315620","description":"","name":"5.3.0","archived":false,"released":true,"releaseDate":"2009-10-13"}],"aggregatetimespent":null,"resolution":{"self":"https://issues.apache.org/jira/rest/api/2/resolution/1","id":"1","description":"A fix for this issue is checked into the tree and tested.","name":"Fixed"},"customfield_12312322":null,"customfield_12310220":null,"customfield_12312520":null,"customfield_12312323":null,"customfield_12312521":"2006-07-31 14:17:13.0","customfield_12310420":"84395","customfield_12312320":null,"customfield_12310222":"1_*:*_1_*:*_98135313672_*|*_5_*:*_1_*:*_0","customfield_12312321":null,"resolutiondate":"2009-09-09T10:05:46.672+0000","workratio":0,"customfield_12312328":null,"customfield_12312329":null,"customfield_12312923":null,"customfield_12312326":null,"customfield_12312920":null,"customfield_12310300":null,"customfield_12312327":null,"customfield_12312921":null,"customfield_12312324":null,"customfield_12312720":null,"customfield_12312325":null,"lastViewed":null,"watches":{"self":"https://issues.apache.org/jira/rest/api/2/issue/AMQ-852/watchers","watchCount":0,"isWatching":false},"created":"2006-07-31T14:17:13.000+0000","priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.svg","name":"Major","id":"3"},"labels":[],"customfield_12312333":null,"customfield_12312334":null,"customfield_12313422":"false","customfield_12310310":"0.0","customfield_12312331":null,"customfield_12312332":null,"timeestimate":2419200,"aggregatetimeoriginalestimate":2419200,"customfield_12311120":null,"customfield_12312330":null,"versions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12315611","id":"12315611","description":"","name":"4.0.1","archived":false,"released":true,"releaseDate":"2006-06-16"}],"issuelinks":[],"customfield_12312339":null,"assignee":null,"customfield_12312337":null,"customfield_12312338":null,"updated":"2009-09-09T10:05:46.583+0000","customfield_12312335":null,"customfield_12312336":null,"status":{"self":"https://issues.apache.org/jira/rest/api/2/status/5","description":"A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/resolved.png","name":"Resolved","id":"5","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Done"}},"components":[{"self":"https://issues.apache.org/jira/rest/api/2/component/12313892","id":"12313892","name":"Broker"}],"timeoriginalestimate":2419200,"customfield_12310080":null,"description":"When you run \"my test program\" and end this process  with Ctrl+C/ kill/ kill -9 ( i mostly used Ctrl+C) sometimes during let say 100 iteration \"communication between client and broker is damaged\". This results in situation when after restart ( new pid ) client program is unable to create producer.  call to   consumer = rec_session->createConsumer( rec_queue );\n hangs client program. Sometimes this results with exception as you can see in output of my program. I think that this only occurs when the session is in ClienAckMode. From my point of view is there incorrect handling of situation when client receives message from broker and than terminates connection without ack/nack this receive in certatin circumstances ...\n\noutput:\n ./amqtest tcp://lxstaflik:61616 PH_Q_IN_10 PH_Q_OUT_10\nSetting connection URL to 'tcp://lxstaflik:61616'\nSetting receive queue name to 'PH_Q_IN_10'\nSetting send queue name to 'PH_Q_OUT_10'\nInit ...\nCreating connection factory ...\nConnection factory created, creating connection ...\nConnection created, creating receive session...\nreceive session created, creating sending session ...\nsend session created, creating receive queue...'PH_Q_IN_10'\nreceive queue created, creating consumer for this queue ...\nsetting listener ...\nError on connection Unmarshal failed; unknown data structure type 49, at src/main/cpp/activemq/protocol/openwire/OpenWireMarshaller.cpp line 711Exiting read loop due to exception: Unmarshal failed; unknown data structure type 49, at src/main/cpp/activemq/protocol/openwire/OpenWireMarshaller.cpp line 711\n\n\nHere is source code of my example:\n#include <stdio.h>\n#include <unistd.h>\n\n#include <exception>\n#include <iostream>\n#include <map>\n#include <string>\n\n#include \"cms/IConnection.hpp\"\n#include \"cms/IConnectionFactory.hpp\"\n#include \"activemq/ConnectionFactory.hpp\"\n#include \"activemq/Connection.hpp\"\n#include \"activemq/Session.hpp\"\n#include \"ppr/TraceException.hpp\"\n#include \"ppr/net/Uri.hpp\"\n#include \"ppr/util/ifr/p\"\n\nusing namespace apache::activemq;\nusing namespace apache::cms;\nusing namespace apache::ppr;\nusing namespace apache::ppr::net;\nusing namespace ifr;\nusing namespace std;\n\n\nclass ActiveMQTest : public IExceptionListener, public IMessageListener {\n  private:\n        p<Uri>                  uri;\n        p<IConnectionFactory>   factory;\n        p<IConnection>          connection;\n        p<ISession>             rec_session;\n        p<ISession>             snd_session;\n        p<IQueue>               rec_queue;\n        p<IQueue>               snd_queue;\n        p<IMessageProducer>     producer;\n        p<IMessageConsumer>     consumer;\n        p<ITextMessage>         txtmsg;\n        char szRecQueue[128];\n        char szSndQueue[128];\n  public:\n        ActiveMQTest();\n        virtual ~ActiveMQTest();\n        virtual void setUri(const char *);\n        virtual void init();\n        virtual void done();\n        virtual void onException(exception& error);\n        virtual void onMessage(p<IMessage> message);\n        virtual void ActiveMQTest::setSndQueue(const char *szQueue);\n        virtual void ActiveMQTest::setRecQueue(const char *szQueue);\n};\n\nvoid ActiveMQTest::onMessage( p<IMessage> message) {\n   p<ITextMessage>      snd_message;\n\n   this->txtmsg = p_dyncast<ITextMessage>(message);\n\n   p<string> string_request = txtmsg->getText();\n\n   if (string_request != NULL ) {\n     printf(\"Received message : %s\",string_request->c_str());\n   }\n\n   sleep(10);\n\n   message->acknowledge();\n\n   snd_message = snd_session->createTextMessage() ;\n   snd_message->setText(\"TEST\\n\") ;\n   snd_message->setJMSPersistent(1);\n   // Send message\n   producer->send(message) ;\n}\n\nvoid ActiveMQTest::done() {\n   rec_session->close();\n   snd_session->close();\n}\n\nvoid ActiveMQTest::setUri(const char * uri) {\n    this->uri = new Uri(uri) ;\n}\n\nvoid ActiveMQTest::setSndQueue(const char *szQueue) {\n  strcpy(szSndQueue,szQueue);\n}\n\nvoid ActiveMQTest::setRecQueue(const char *szQueue) {\n  strcpy(szRecQueue,szQueue);\n}\n\nActiveMQTest::ActiveMQTest() {\n  this->connection = NULL;\n  this->rec_session = NULL;\n  this->snd_session = NULL;\n  memset(szRecQueue,0x0,sizeof(szRecQueue));\n  memset(szSndQueue,0x0,sizeof(szSndQueue));\n}\n\nActiveMQTest::~ActiveMQTest() {\n}\n\nvoid ActiveMQTest::init() {\n  try {\n    cout.rdbuf(cerr.rdbuf());\n    printf(\"1 Creating connection factory ... \\n\");\n    factory = new ConnectionFactory( uri );\n\n    printf(\"Connection factory created, creating connection ...\\n\");\n    connection = factory->createConnection();\n\n    printf(\"Connection created, creating receive session...\\n\");\n    p_cast<Connection>(connection)->setExceptionListener( smartify( this ) );\n    //rec_session = connection->createSession(AutoAckMode);\n    rec_session = connection->createSession(ClientAckMode);\n\n    printf(\"receive session created, creating sending session ...\\n\");\n    snd_session = connection->createSession(AutoAckMode);\n\n    printf(\"send session created, creating receive queue...'%s'\\n\",szRecQueue);\n    rec_queue = rec_session->getQueue( szRecQueue );\n\n\n    printf(\"receive queue created, creating consumer for this queue ...\\n\");\n    consumer = rec_session->createConsumer( rec_queue );\n\n\n    printf(\"setting listener ...\\n\");\n    snd_queue = snd_session->getQueue( szSndQueue );\n    consumer->setMessageListener( smartify( this ) );\n    producer = snd_session->createProducer( snd_queue );\n\n    (p_dyncast<apache::activemq::Session>(rec_session))->dispatch(0);\n\n    printf(\"Init Ok.\\n\");\n\n  } catch ( TraceException& e ) {\n    printf(\"Error during init  ... \\n\");\n  }\n}\n\nvoid ActiveMQTest::onException( exception& error ) {\n  printf(\"Error on connection %s\", error.what() );\n}\n\n\nint main(int argc,char *argv[]) {\n  ActiveMQTest* myAq;\n\n\n  if ( argc < 3 ) {\n    printf(\"Usage: amqtest <connection_url> <receive_queue> <send_queue>\\n\");\n    exit(0);\n  }\n\n  myAq = new ActiveMQTest;\n\n  printf(\"Setting connection URL to '%s'\\n\",argv[1]);\n  myAq->setUri(argv[1]);\n\n  printf(\"Setting receive queue name to '%s'\\n\",argv[2]);\n  myAq->setRecQueue( argv[2] );\n\n  printf(\"Setting send queue name to '%s'\\n\",argv[3]);\n  myAq->setSndQueue( argv[3] );\n\n  printf(\"Init ...\\n\");\n  myAq->init();\n\n\nint i=0;\n  while( i < 3000 ) {\n    printf(\"Idle ... \\n\");\n    sleep( 1 );\n    i++;\n  }\n\n  myAq->done();\n\n  return 0;\n}\n\n\n","customfield_10010":null,"timetracking":{"originalEstimate":"672h","remainingEstimate":"672h","originalEstimateSeconds":2419200,"remainingEstimateSeconds":2419200},"customfield_12312026":null,"customfield_12312023":null,"customfield_12312024":null,"customfield_12312340":null,"attachment":[],"aggregatetimeestimate":2419200,"customfield_12312341":null,"customfield_12312220":null,"customfield_12312022":null,"customfield_12310041":null,"customfield_12310921":null,"customfield_12310920":"254857","customfield_12312823":null,"summary":"Incorrect handling of disconecting client in ClientAckMode","creator":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bigsam72","name":"bigsam72","key":"bigsam72","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Radek Sedmak","active":true,"timeZone":"Etc/UTC"},"subtasks":[],"customfield_12310291":null,"reporter":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bigsam72","name":"bigsam72","key":"bigsam72","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Radek Sedmak","active":true,"timeZone":"Etc/UTC"},"customfield_12310290":null,"aggregateprogress":{"progress":0,"total":2419200,"percent":0},"customfield_12311024":null,"environment":"Linux IA32/RHEL AS 4.0 ( Broker version 4.0.1 ) and client program uses OpenWire protocol (C++) CMS devel version. ","customfield_12313520":null,"customfield_12311020":null,"duedate":null,"customfield_12310250":null,"progress":{"progress":0,"total":2419200,"percent":0},"comment":{"comments":[],"maxResults":0,"total":0,"startAt":0},"votes":{"self":"https://issues.apache.org/jira/rest/api/2/issue/AMQ-852/votes","votes":0,"hasVoted":false},"worklog":{"startAt":0,"maxResults":20,"total":0,"worklogs":[]},"customfield_12311820":"0|i180c7:"}}