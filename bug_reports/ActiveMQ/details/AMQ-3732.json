{"expand":"renderedFields,names,schema,operations,editmeta,changelog,versionedRepresentations","id":"12543589","self":"https://issues.apache.org/jira/rest/api/2/issue/12543589","key":"AMQ-3732","fields":{"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype","name":"Bug","subtask":false,"avatarId":21133},"timespent":null,"project":{"self":"https://issues.apache.org/jira/rest/api/2/project/12311210","id":"12311210","key":"AMQ","name":"ActiveMQ","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/projectavatar?pid=12311210&avatarId=10011","24x24":"https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12311210&avatarId=10011","16x16":"https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12311210&avatarId=10011","32x32":"https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12311210&avatarId=10011"},"projectCategory":{"self":"https://issues.apache.org/jira/rest/api/2/projectCategory/11160","id":"11160","description":"ActiveMQ","name":"ActiveMQ"}},"fixVersions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12317974","id":"12317974","description":"Next v5 maintenance release","name":"5.6.0","archived":false,"released":true,"releaseDate":"2012-05-07"}],"aggregatetimespent":null,"resolution":{"self":"https://issues.apache.org/jira/rest/api/2/resolution/1","id":"1","description":"A fix for this issue is checked into the tree and tested.","name":"Fixed"},"customfield_12312322":null,"customfield_12310220":"2012-02-22T13:58:16.406+0000","customfield_12312520":null,"customfield_12312323":null,"customfield_12312521":"Mon Mar 05 22:09:16 UTC 2012","customfield_12310420":"228828","customfield_12312320":null,"customfield_12310222":"1_*:*_1_*:*_1119326528_*|*_5_*:*_1_*:*_0","customfield_12312321":null,"resolutiondate":"2012-03-05T22:09:16.184+0000","workratio":-1,"customfield_12312328":null,"customfield_12312329":null,"customfield_12312923":null,"customfield_12312326":null,"customfield_12312920":null,"customfield_12310300":null,"customfield_12312327":null,"customfield_12312921":null,"customfield_12312324":null,"customfield_12312720":null,"customfield_12312325":null,"lastViewed":null,"watches":{"self":"https://issues.apache.org/jira/rest/api/2/issue/AMQ-3732/watchers","watchCount":1,"isWatching":false},"created":"2012-02-21T23:13:49.720+0000","priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.svg","name":"Major","id":"3"},"labels":["concurrency"],"customfield_12312333":null,"customfield_12312334":null,"customfield_12313422":"false","customfield_12310310":"0.0","customfield_12312331":null,"customfield_12312332":null,"timeestimate":null,"aggregatetimeoriginalestimate":null,"customfield_12311120":null,"customfield_12312330":null,"versions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12318549","id":"12318549","name":"5.5.1","archived":false,"released":true,"releaseDate":"2011-10-16"}],"issuelinks":[],"customfield_12312339":null,"assignee":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=tabish121","name":"tabish121","key":"tabish121","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=tabish121&avatarId=25249","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=tabish121&avatarId=25249","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=tabish121&avatarId=25249","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=tabish121&avatarId=25249"},"displayName":"Timothy Bish","active":true,"timeZone":"America/Havana"},"customfield_12312337":null,"customfield_12312338":null,"updated":"2012-03-05T22:09:16.228+0000","customfield_12312335":null,"customfield_12312336":null,"status":{"self":"https://issues.apache.org/jira/rest/api/2/status/5","description":"A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/resolved.png","name":"Resolved","id":"5","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Done"}},"components":[{"self":"https://issues.apache.org/jira/rest/api/2/component/12313892","id":"12313892","name":"Broker"}],"timeoriginalestimate":null,"customfield_12310080":null,"description":"org.apache.activemq.broker.region.PrefetchSubscription.prefetchExtension is changed while guarded by a mutex on this (PrefetchSubscription) in PrefetchSubscription.pullMessage(...) and PrefetchSubscription.dispatchLock in PrefetchSubscription.acknowledge(...). \n\nThis can lead to the corruption of the prefetchExtension variable (eg, prefetchExtension++ in pullMessage() is not an atomic operation so prefetchExtension may change in acknowledge() mid-way through this operation).","customfield_10010":null,"timetracking":{},"customfield_12312026":null,"customfield_12312023":null,"customfield_12312024":null,"customfield_12312340":null,"attachment":[],"aggregatetimeestimate":null,"customfield_12312341":null,"customfield_12312220":null,"customfield_12312022":null,"customfield_12310041":null,"customfield_12310921":null,"customfield_12310920":"59214","customfield_12312823":null,"summary":"Different methods synchronizing on different mutexes when changing the same field","creator":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=philliph","name":"philliph","key":"philliph","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Phillip Henry","active":true,"timeZone":"Etc/UTC"},"subtasks":[],"customfield_12310291":null,"reporter":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=philliph","name":"philliph","key":"philliph","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Phillip Henry","active":true,"timeZone":"Etc/UTC"},"customfield_12310290":null,"aggregateprogress":{"progress":0,"total":0},"customfield_12311024":null,"environment":"Darwin phillip.local 9.8.0 Darwin Kernel Version 9.8.0: Wed Jul 15 16:55:01 PDT 2009; root:xnu-1228.15.4~1/RELEASE_I386 i386 i386","customfield_12313520":null,"customfield_12311020":null,"duedate":null,"customfield_12310250":null,"progress":{"progress":0,"total":0},"comment":{"comments":[{"self":"https://issues.apache.org/jira/rest/api/2/issue/12543589/comment/13213625","id":"13213625","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=tabish121","name":"tabish121","key":"tabish121","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=tabish121&avatarId=25249","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=tabish121&avatarId=25249","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=tabish121&avatarId=25249","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=tabish121&avatarId=25249"},"displayName":"Timothy Bish","active":true,"timeZone":"America/Havana"},"body":"Do you have a junit test case that shows the issue here.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=tabish121","name":"tabish121","key":"tabish121","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=tabish121&avatarId=25249","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=tabish121&avatarId=25249","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=tabish121&avatarId=25249","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=tabish121&avatarId=25249"},"displayName":"Timothy Bish","active":true,"timeZone":"America/Havana"},"created":"2012-02-22T13:58:16.406+0000","updated":"2012-02-22T13:58:16.406+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12543589/comment/13213979","id":"13213979","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=philliph","name":"philliph","key":"philliph","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Phillip Henry","active":true,"timeZone":"Etc/UTC"},"body":"Hard to show in a unit test as it's not deterministic.\n\nI noticed it while I was trying to work out why we had non-deterministic behaviour in our AMQ stack. (Not found what the problem is yet. May very well be a misconfiguration at our end...).","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=philliph","name":"philliph","key":"philliph","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Phillip Henry","active":true,"timeZone":"Etc/UTC"},"created":"2012-02-22T20:32:13.700+0000","updated":"2012-02-22T20:32:13.700+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12543589/comment/13217443","id":"13217443","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=philliph","name":"philliph","key":"philliph","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Phillip Henry","active":true,"timeZone":"Etc/UTC"},"body":"OK, it's not quite a unit test - it's a stress test that uses JUnit - but it illustrates the point.\n\nThis code fails on my Mac (2.66GHz Intel Core 2 Duo) after a non-deterministic number of iterations. \n\nMost of the code is just simple stub implementations of ActiveMQ classes and interfaces with one or two methods implemented or overriden. (I tried using JMock but it didn't seem multi-threaded friendly). Basically, it starts two threads - one to pull a message, one to acknowledge. The pulling thread should increase prefetchExtension in pullMessage() thus:\n{code}\n        \tsynchronized(this) {\n        \t\tprefetchExtension++;\n        \t\tdispatchCounterBeforePull = dispatchCounter;\n        \t}\n{code}\nThe other thread calls acknowledge with the stubbed objects and PrefetchSubscription object itself in such a state that this line is executed:\n{code}\n                            prefetchExtension = Math.max(prefetchExtension, index + 1);\n{code}\nwhere index is the index of the number of dispatched MessageReference collection. This should never be more than 0 since only message is ever dispatch()-ed by the test. All objects are instantiated anew on each iteration.\n\nGiven this, prefetchExtension should only ever be 0 (neither test has hit their target code) or 1 (from prefetchExtension++ or Math.max(prefetchExtension, 1) because index is always 0).\n\nHowever, the test demonstrates that occasionally prefetchExtension is 2. I posit that this is because the threads can sometimes execute their lines at the same time; prefetchExtension++ is not atomic (it's actually prefetchExtension = prefetchExtension + 1); and changing it is not guarded by the same mutex. \n\nFor example, the order might look like:\n\nStep 1. PULL THREAD: add 1 to prefetchExtension. To do this, find out what prefetchExtension is. But before this thread can do so, context switches to the thread executing acknowledge() in step 2, immediately below.\n\nStep 2. ACK THREAD: prefetchExtension is the maximum of its current value and 1. It looks like its current value is 0 so set prefetchExtension to 1.\n\nStep 3. PULL THREAD: has found that prefetchExtension is 1 and adds one to it giving a total of 2.\n\n\nTest case:\n{code}\npackage org.apache.activemq.broker.region;\n\nimport java.io.IOException;\nimport java.net.URI;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.concurrent.ThreadPoolExecutor;\n\nimport javax.jms.InvalidSelectorException;\nimport javax.jms.JMSException;\n\nimport org.apache.activemq.broker.Broker;\nimport org.apache.activemq.broker.BrokerService;\nimport org.apache.activemq.broker.Connection;\nimport org.apache.activemq.broker.ConnectionContext;\nimport org.apache.activemq.broker.Connector;\nimport org.apache.activemq.broker.ConsumerBrokerExchange;\nimport org.apache.activemq.broker.ProducerBrokerExchange;\nimport org.apache.activemq.broker.region.policy.DeadLetterStrategy;\nimport org.apache.activemq.broker.region.policy.SlowConsumerStrategy;\nimport org.apache.activemq.command.ActiveMQDestination;\nimport org.apache.activemq.command.BrokerId;\nimport org.apache.activemq.command.BrokerInfo;\nimport org.apache.activemq.command.Command;\nimport org.apache.activemq.command.ConnectionControl;\nimport org.apache.activemq.command.ConnectionInfo;\nimport org.apache.activemq.command.ConsumerControl;\nimport org.apache.activemq.command.ConsumerId;\nimport org.apache.activemq.command.ConsumerInfo;\nimport org.apache.activemq.command.DestinationInfo;\nimport org.apache.activemq.command.Message;\nimport org.apache.activemq.command.MessageAck;\nimport org.apache.activemq.command.MessageDispatch;\nimport org.apache.activemq.command.MessageDispatchNotification;\nimport org.apache.activemq.command.MessageId;\nimport org.apache.activemq.command.MessagePull;\nimport org.apache.activemq.command.ProducerInfo;\nimport org.apache.activemq.command.RemoveSubscriptionInfo;\nimport org.apache.activemq.command.Response;\nimport org.apache.activemq.command.SessionInfo;\nimport org.apache.activemq.command.TransactionId;\nimport org.apache.activemq.state.CommandVisitor;\nimport org.apache.activemq.store.MessageStore;\nimport org.apache.activemq.store.kahadb.plist.PListStore;\nimport org.apache.activemq.thread.Scheduler;\nimport org.apache.activemq.usage.MemoryUsage;\nimport org.apache.activemq.usage.SystemUsage;\nimport org.apache.activemq.usage.Usage;\n\nimport junit.framework.TestCase;\n\npublic class PrefetchSubscriptionStressTest extends TestCase {\n\n\tprivate PrefetchSubscriptionStub toTest;\n\tprivate final MessageId messageId = new MessageId();\n\tprivate MessageAck ack;\n\tprivate MessageReference node;\n\n\tprotected void setUp() throws Exception {\n\t\tsuper.setUp();\n\t}\n\t\n\tpublic void testMultiThreadedAccessToPrefetchExtension() throws InterruptedException, InvalidSelectorException {\n\t\tfinal int callsPerThread = 1;\n\t\tfinal int numIterations = 1000;\n\t\t\n\t\tfor (int i = 0 ; i < numIterations ; i++) {\n\t\t\tfinal MessagePull pull = initializeStubs();\n\t\t\t\n\t\t\tThread messagePuller = new Thread(new MessagePuller(callsPerThread, pull));\n\t\t\tThread dispatchAndAcknowledger = new Thread(new DispatchAndAcknowledger(ack, node, callsPerThread));\n\t\t\n\t\t\tstartThreads(messagePuller, dispatchAndAcknowledger);\n\t\t\t\n\t\t\twaitForThreadsToStop(messagePuller, dispatchAndAcknowledger);\n\t\t\t\n\t\t\tint actualPrefetchExtensions = toTest.getPrefetchExtension();\n\t\t\tassertEquals(\"failed on iteration: \" + i, 1, actualPrefetchExtensions);\n\t\t}\n\t}\n\t\n\tprivate void waitForThreadsToStop(Thread messagePuller, Thread dispatchAndAcknowledger) throws InterruptedException {\n\t\tdispatchAndAcknowledger.join();\n\t\tmessagePuller.join();\t\n\t}\n\n\tprivate void startThreads(Thread messagePuller, Thread dispatchAndAcknowledger) {\n\t\tmessagePuller.start();\n\t\tdispatchAndAcknowledger.start();\n\t}\n\n\tprivate MessagePull initializeStubs() throws InvalidSelectorException {\n\t\tinitialise();\n\t\tprimeMessagesAndDestinations();\n\t\tfinal MessagePull pull = primeForPullMessage();\n\t\treturn pull;\n\t}\n\n\tprivate void dispatchAndAcknowledge(final MessageAck ack, final MessageReference node, final int numToDispatch)\n\t\t\tthrows IOException, Exception {\n\t\tConnectionContext context = null;\n\t\tfor (int i = 0 ; i < numToDispatch ; i++) {\n\t\t\ttoTest.dispatch(node);\n\t\t}\n\t\ttoTest.acknowledge(context , ack);\n\t}\n\t\n\tpublic class MessagePuller implements Runnable {\n\t\t\n\t\tprivate final int totalRuns;\n\t\tprivate final MessagePull pull;\n\t\t\n\t\tpublic MessagePuller(int totalRuns, MessagePull pull) {\n\t\t\tsuper();\n\t\t\tthis.totalRuns = totalRuns;\n\t\t\tthis.pull = pull;\n\t\t}\n\t\t\n\t\t@Override\n\t\tpublic void run() {\n\t\t\tfor (int i = 0 ; i < totalRuns ; i++) {\n\t\t\t\ttry {\n\t\t\t\t\tpullMessage(pull);\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t}\n\n\tprivate void pullMessage(final MessagePull pull) throws Exception {\n\t\tConnectionContext context = null;\n\t\ttoTest.pullMessage(context, pull);\n\t}\n\n\tprivate MessagePull primeForPullMessage() {\n\t\tfinal MessagePull pull = new MessagePull() {\n\t\t\t@Override\n\t\t\tpublic long getTimeout() {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t};\n\t\treturn pull;\n\t}\n\n\t\n\tpublic class DispatchAndAcknowledger implements Runnable {\n\t\t\n\t\tprivate final MessageAck ack;\n\t\tprivate final MessageReference node;\n\t\tprivate final int totalRuns;\n\t\t\n\t\tpublic DispatchAndAcknowledger(MessageAck ack, MessageReference node, int totalRuns) {\n\t\t\tsuper();\n\t\t\tthis.ack = ack;\n\t\t\tthis.node = node;\n\t\t\tthis.totalRuns = totalRuns;\n\t\t}\n\n\t\t@Override\n\t\tpublic void run() {\n\t\t\tfor (int i = 0 ; i < totalRuns ; i++) {\n\t\t\t\ttry {\n\t\t\t\t\tdispatchAndAcknowledge(ack, node, 1);\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate void initialise() throws InvalidSelectorException {\n\t\tSystemUsage usageManager = null;\n\t\t\n\t\tfinal Connection connection = new Connection() {\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void stop() throws Exception {\t\t\t}\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void start() throws Exception {\t\t\t}\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void updateClient(ConnectionControl control) {\t\t\t}\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void serviceExceptionAsync(IOException e) {\t\t\t}\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void serviceException(Throwable error) {\t\t\t}\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic Response service(Command command) { return null; }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic boolean isSlow() { return false; }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic boolean isNetworkConnection() { return false; }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic boolean isManageable() { return false; }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic boolean isFaultTolerantConnection() { return false; }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic boolean isConnected() { return false; }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic boolean isBlocked() { return false; }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic boolean isActive() { return false; }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic ConnectionStatistics getStatistics() { return null; }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic String getRemoteAddress() { return null; }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic int getDispatchQueueSize() { return 0; }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic Connector getConnector() { return null; }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic String getConnectionId() { return null; }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void dispatchSync(Command message) { }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void dispatchAsync(Command command) { }\n\t\t};\n\t\t\n\t\tfinal ConnectionContext context = new ConnectionContext() {\n\t\t\t@Override\n\t\t    public Connection getConnection() {\n\t\t        return connection;\n\t\t    }\n\t\t}; \n\t\t\n\t\tfinal Broker broker = new Broker() {\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void stop() throws Exception { }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void start() throws Exception { }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void send(ProducerBrokerExchange producerExchange, Message message)\n\t\t\t\t\tthrows Exception { }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void removeSubscription(ConnectionContext context,\n\t\t\t\t\tRemoveSubscriptionInfo info) throws Exception { }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void removeDestination(ConnectionContext context,\n\t\t\t\t\tActiveMQDestination destination, long timeout) throws Exception { }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void removeConsumer(ConnectionContext context, ConsumerInfo info)\n\t\t\t\t\tthrows Exception { }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void processDispatchNotification(\n\t\t\t\t\tMessageDispatchNotification messageDispatchNotification)\n\t\t\t\t\tthrows Exception { }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void processConsumerControl(ConsumerBrokerExchange consumerExchange,\n\t\t\t\t\tConsumerControl control) { }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic Response messagePull(ConnectionContext context, MessagePull pull)\n\t\t\t\t\tthrows Exception { return null; }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic Set<Destination> getDestinations(ActiveMQDestination destination) { return null; }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic Map<ActiveMQDestination, Destination> getDestinationMap() { return null; }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void gc() { }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic Destination addDestination(ConnectionContext context,\n\t\t\t\t\tActiveMQDestination destination, boolean createIfTemporary)\n\t\t\t\t\tthrows Exception { return null; }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic Subscription addConsumer(ConnectionContext context, ConsumerInfo info)\n\t\t\t\t\tthrows Exception { return null; }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void acknowledge(ConsumerBrokerExchange consumerExchange,\n\t\t\t\t\tMessageAck ack) throws Exception { }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void slowConsumer(ConnectionContext context,\n\t\t\t\t\tDestination destination, Subscription subs) { }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void setAdminConnectionContext(\n\t\t\t\t\tConnectionContext adminConnectionContext) { }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void sendToDeadLetterQueue(ConnectionContext context,\n\t\t\t\t\tMessageReference messageReference, Subscription subscription) { }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void rollbackTransaction(ConnectionContext context, TransactionId xid)\n\t\t\t\t\tthrows Exception { }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void removeSession(ConnectionContext context, SessionInfo info)\n\t\t\t\t\tthrows Exception { }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void removeProducer(ConnectionContext context, ProducerInfo info)\n\t\t\t\t\tthrows Exception { }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void removeDestinationInfo(ConnectionContext context,\n\t\t\t\t\tDestinationInfo info) throws Exception { }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void removeConnection(ConnectionContext context,\n\t\t\t\t\tConnectionInfo info, Throwable error) throws Exception { }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void removeBroker(Connection connection, BrokerInfo info) { }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic int prepareTransaction(ConnectionContext context, TransactionId xid)\n\t\t\t\t\tthrows Exception { return 0; }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void preProcessDispatch(MessageDispatch messageDispatch) { }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void postProcessDispatch(MessageDispatch messageDispatch) { }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void nowMasterBroker() { }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void networkBridgeStopped(BrokerInfo brokerInfo) { }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void networkBridgeStarted(BrokerInfo brokerInfo,\n\t\t\t\t\tboolean createdByDuplex, String remoteIp) { }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void messageExpired(ConnectionContext context,\n\t\t\t\t\tMessageReference messageReference, Subscription subscription) { }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void messageDiscarded(ConnectionContext context, Subscription sub,\n\t\t\t\t\tMessageReference messageReference) { }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void messageDelivered(ConnectionContext context,\n\t\t\t\t\tMessageReference messageReference) { }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void messageConsumed(ConnectionContext context,\n\t\t\t\t\tMessageReference messageReference) { }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic boolean isStopped() { return false; }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void isFull(ConnectionContext context, Destination destination,\n\t\t\t\t\tUsage usage) { }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic boolean isFaultTolerantConfiguration() { return false; }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic boolean isExpired(MessageReference messageReference) { return false; }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic URI getVmConnectorURI() { return null; }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic PListStore getTempDataStore() { return null; }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic Scheduler getScheduler() { return null; }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic Broker getRoot() { return null; }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic TransactionId[] getPreparedTransactions(ConnectionContext context)\n\t\t\t\t\tthrows Exception { return null; }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic BrokerInfo[] getPeerBrokerInfos() { return null; }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic ThreadPoolExecutor getExecutor() { return null; }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic Set<ActiveMQDestination> getDurableDestinations() { return null; }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic ActiveMQDestination[] getDestinations() throws Exception { return null; }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic Connection[] getClients() throws Exception { return null; }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic BrokerService getBrokerService() { return null; }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic long getBrokerSequenceId() { return 0; }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic String getBrokerName() { return null; }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic BrokerId getBrokerId() { return null; }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic ConnectionContext getAdminConnectionContext() { return null; }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic Broker getAdaptor(Class type) { return null; }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void forgetTransaction(ConnectionContext context,\n\t\t\t\t\tTransactionId transactionId) throws Exception { }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void fastProducer(ConnectionContext context,\n\t\t\t\t\tProducerInfo producerInfo) { }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void commitTransaction(ConnectionContext context, TransactionId xid,\n\t\t\t\t\tboolean onePhase) throws Exception { }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void brokerServiceStarted() { }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void beginTransaction(ConnectionContext context, TransactionId xid)\n\t\t\t\t\tthrows Exception { }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void addSession(ConnectionContext context, SessionInfo info)\n\t\t\t\t\tthrows Exception { }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void addProducer(ConnectionContext context, ProducerInfo info)\n\t\t\t\t\tthrows Exception { }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void addDestinationInfo(ConnectionContext context,\n\t\t\t\t\tDestinationInfo info) throws Exception { }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void addConnection(ConnectionContext context, ConnectionInfo info)\n\t\t\t\t\tthrows Exception { }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void addBroker(Connection connection, BrokerInfo info) { }\n\t\t};\n\t\t\n\t\tfinal ActiveMQDestination activeMQDestination = new ActiveMQDestination() {\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic byte getDataStructureType() {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\t\n\t\t\t@Override\n\t\t\tprotected String getQualifiedPrefix() {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic byte getDestinationType() {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic String getPhysicalName() { \n\t\t\t\treturn \"test\";\n\t\t\t}\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic boolean isComposite() {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t};\n\t\t\n\t\tfinal ConsumerInfo info = new ConsumerInfo() {\n\t\t\t@Override\n\t\t\tpublic ActiveMQDestination getDestination() {\n\t\t\t\treturn activeMQDestination;\n\t\t\t}\n\t\t};\n\t\t\n\n\t\ttoTest = new PrefetchSubscriptionStub(broker, usageManager, context, info);\n\t}\n\t\n\tprivate class PrefetchSubscriptionStub extends PrefetchSubscription {\n\n\t\tpublic PrefetchSubscriptionStub(Broker broker,\n\t\t\t\tSystemUsage usageManager, ConnectionContext context,\n\t\t\t\tConsumerInfo info) throws InvalidSelectorException {\n\t\t\tsuper(broker, usageManager, context, info);\n\t\t}\n\n\t\t@Override\n\t\tpublic void destroy() {\n\t\t\t// TODO Auto-generated method stub\n\n\t\t}\n\n\t\t@Override\n\t\tprotected boolean isDropped(MessageReference node) {\n\t\t\t// TODO Auto-generated method stub\n\t\t\treturn false;\n\t\t}\n\n\t\t@Override\n\t\tprotected boolean canDispatch(MessageReference node)\n\t\t\t\tthrows IOException {\n\t\t\t// TODO Auto-generated method stub\n\t\t\treturn false;\n\t\t}\n\n\t\t@Override\n\t\tprotected void acknowledge(ConnectionContext context,\n\t\t\t\tMessageAck ack, MessageReference node) throws IOException {\n\t\t\t// TODO Auto-generated method stub\n\n\t\t}\n\n\t\t@Override\n\t\tpublic boolean isSlave() {\n\t\t\treturn false;\n\t\t}\n\n\t\t@Override\n\t\tpublic int getPrefetchSize() {\n\t\t\treturn 0;\n\t\t}\n\n\t\t@Override\n\t\tprotected void onDispatch(final MessageReference node, final Message message) {\n\t\t\t\n\t\t}\n\t\t\n\t\t@Override\n\t\tprotected void dispatchPending() throws IOException {\n\t\t\t\n\t\t}\n\t\t\n\t\tpublic int getPrefetchExtension() {\n\t\t\treturn prefetchExtension;\n\t\t}\n\t}\n\n\tprivate void primeMessagesAndDestinations() {\n\t\tfinal Message message = new Message() {\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic byte getDataStructureType() { return 0; }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic Response visit(CommandVisitor visitor) throws Exception { return null; }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic Message copy() { return null; }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void clearBody() throws JMSException { }\n\t\t};\n\t\tfinal Destination destination = new Destination() {\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic boolean iterate() { return false; }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void stop() throws Exception { }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void start() throws Exception { }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void wakeup() { }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void slowConsumer(ConnectionContext context, Subscription subs) { }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void setUseCache(boolean useCache) { }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void setProducerFlowControl(boolean value) { }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void setMinimumMessageSize(int minimumMessageSize) { }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void setMaxProducersToAudit(int maxProducersToAudit) { }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void setMaxPageSize(int maxPageSize) { }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void setMaxBrowsePageSize(int maxPageSize) { }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void setMaxAuditDepth(int maxAuditDepth) { }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void setLazyDispatch(boolean value) { }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void setEnableAudit(boolean enableAudit) { }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void setCursorMemoryHighWaterMark(int cursorMemoryHighWaterMark) { }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void setBlockedProducerWarningInterval(\n\t\t\t\t\tlong blockedProducerWarningInterval) { }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void setAlwaysRetroactive(boolean value) { }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void send(ProducerBrokerExchange producerExchange,\n\t\t\t\t\tMessage messageSend) throws Exception { }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void removeSubscription(ConnectionContext context, Subscription sub,\n\t\t\t\t\tlong lastDeliveredSequenceId) throws Exception { }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void removeProducer(ConnectionContext context, ProducerInfo info)\n\t\t\t\t\tthrows Exception { }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void processDispatchNotification(\n\t\t\t\t\tMessageDispatchNotification messageDispatchNotification)\n\t\t\t\t\tthrows Exception { }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void messageExpired(ConnectionContext context, Subscription subs,\n\t\t\t\t\tMessageReference node) { }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void messageDiscarded(ConnectionContext context, Subscription sub,\n\t\t\t\t\tMessageReference messageReference) { }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void messageDelivered(ConnectionContext context,\n\t\t\t\t\tMessageReference messageReference) { }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void messageConsumed(ConnectionContext context,\n\t\t\t\t\tMessageReference messageReference) { \t}\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void markForGC(long timeStamp) { }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic boolean isUseCache() { return false; }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic boolean isProducerFlowControl() { return false; }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic boolean isPrioritizedMessages() { return false; }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic boolean isLazyDispatch() { return false; }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void isFull(ConnectionContext context, Usage<?> usage) { }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic boolean isEnableAudit() { return false; }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic boolean isDisposed() { return false; }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic boolean isAlwaysRetroactive() { return false; }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic boolean isActive() { return false; }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic SlowConsumerStrategy getSlowConsumerStrategy() { return null; }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic String getName() { return null; }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic int getMinimumMessageSize() { return 0; }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic MessageStore getMessageStore() { return null; }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic MemoryUsage getMemoryUsage() { return null; }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic int getMaxProducersToAudit() { return 0; }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic int getMaxPageSize() { return 0; }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic int getMaxBrowsePageSize() { return 0; }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic int getMaxAuditDepth() { \treturn 0; }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic long getInactiveTimoutBeforeGC() { return 0; }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic DestinationStatistics getDestinationStatistics() { return null; }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic DeadLetterStrategy getDeadLetterStrategy() { return null; }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic int getCursorMemoryHighWaterMark() { return 0; }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic List<Subscription> getConsumers() { return null; }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic long getBlockedProducerWarningInterval() { return 0; }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic ActiveMQDestination getActiveMQDestination() { return null; \t}\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void gc() { \t}\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void fastProducer(ConnectionContext context,\n\t\t\t\t\tProducerInfo producerInfo) { }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void dispose(ConnectionContext context) throws IOException { }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic boolean canGC() { return false; }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic Message[] browse() { return null; }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void addSubscription(ConnectionContext context, Subscription sub)\n\t\t\t\t\tthrows Exception { }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void addProducer(ConnectionContext context, ProducerInfo info)\n\t\t\t\t\tthrows Exception { }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void acknowledge(ConnectionContext context, Subscription sub,\n\t\t\t\t\tMessageAck ack, MessageReference node) throws IOException { }\n\t\t};\n\t\t\n\t\tack = new MessageAck() {\n\n\t\t\t@Override\n\t\t\tpublic boolean isDeliveredAck() {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\t@Override\n\t\t\tpublic MessageId getLastMessageId() {\n\t\t\t\treturn messageId;\n\t\t\t}\n\t\t\t\n\t\t};\n\t\tnode = new MessageReference() {\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic boolean isPersistent() {return false; }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic boolean isExpired() { \n\t\t\t\treturn false; \n\t\t\t}\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic boolean isDropped() { return false; }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic boolean isAdvisory() { return false; }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic int incrementReferenceCount() { return 0; }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void incrementRedeliveryCounter() { }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic ConsumerId getTargetConsumerId() { return null; }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic int getSize() { return 0; }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic Destination getRegionDestination() { return destination; }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic int getReferenceCount() { return 0; }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic int getRedeliveryCounter() { return 0; \t}\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic MessageId getMessageId() { return messageId; }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic Message getMessageHardRef() { return null; }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic Message getMessage() { return message; }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic int getGroupSequence() { return 0; \t}\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic String getGroupID() { return null; }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic long getExpiration() { return 0; }\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic int decrementReferenceCount() { return 0; }\n\t\t};\n\t}\n}\n{code}","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=philliph","name":"philliph","key":"philliph","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Phillip Henry","active":true,"timeZone":"Etc/UTC"},"created":"2012-02-27T19:37:59.233+0000","updated":"2012-02-27T19:37:59.233+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12543589/comment/13222657","id":"13222657","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=tabish121","name":"tabish121","key":"tabish121","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=tabish121&avatarId=25249","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=tabish121&avatarId=25249","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=tabish121&avatarId=25249","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=tabish121&avatarId=25249"},"displayName":"Timothy Bish","active":true,"timeZone":"America/Havana"},"body":"Fixed on trunk.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=tabish121","name":"tabish121","key":"tabish121","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=tabish121&avatarId=25249","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=tabish121&avatarId=25249","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=tabish121&avatarId=25249","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=tabish121&avatarId=25249"},"displayName":"Timothy Bish","active":true,"timeZone":"America/Havana"},"created":"2012-03-05T22:09:16.209+0000","updated":"2012-03-05T22:09:16.209+0000"}],"maxResults":4,"total":4,"startAt":0},"votes":{"self":"https://issues.apache.org/jira/rest/api/2/issue/AMQ-3732/votes","votes":0,"hasVoted":false},"worklog":{"startAt":0,"maxResults":20,"total":0,"worklogs":[]},"customfield_12311820":"0|i0ai5j:"}}