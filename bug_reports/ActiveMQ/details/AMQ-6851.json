{"expand":"renderedFields,names,schema,operations,editmeta,changelog,versionedRepresentations","id":"13112104","self":"https://issues.apache.org/jira/rest/api/2/issue/13112104","key":"AMQ-6851","fields":{"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype","name":"Bug","subtask":false,"avatarId":21133},"timespent":null,"project":{"self":"https://issues.apache.org/jira/rest/api/2/project/12311210","id":"12311210","key":"AMQ","name":"ActiveMQ","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/projectavatar?pid=12311210&avatarId=10011","24x24":"https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12311210&avatarId=10011","16x16":"https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12311210&avatarId=10011","32x32":"https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12311210&avatarId=10011"},"projectCategory":{"self":"https://issues.apache.org/jira/rest/api/2/projectCategory/11160","id":"11160","description":"ActiveMQ","name":"ActiveMQ"}},"fixVersions":[],"aggregatetimespent":null,"resolution":{"self":"https://issues.apache.org/jira/rest/api/2/resolution/10010","id":"10010","description":"Feedback Received","name":"Feedback Received"},"customfield_12312322":null,"customfield_12310220":"2017-10-26T09:48:07.418+0000","customfield_12312520":null,"customfield_12312323":null,"customfield_12312521":"Fri Oct 27 09:21:58 UTC 2017","customfield_12310420":"9223372036854775807","customfield_12312320":null,"customfield_12310222":"1_*:*_1_*:*_130045968_*|*_5_*:*_1_*:*_0","customfield_12312321":null,"resolutiondate":"2017-10-27T09:22:56.393+0000","workratio":-1,"customfield_12312328":null,"customfield_12312329":null,"customfield_12312923":null,"customfield_12312326":null,"customfield_12312920":null,"customfield_12310300":null,"customfield_12312327":null,"customfield_12312921":null,"customfield_12312324":null,"customfield_12312720":null,"customfield_12312325":null,"lastViewed":null,"watches":{"self":"https://issues.apache.org/jira/rest/api/2/issue/AMQ-6851/watchers","watchCount":2,"isWatching":false},"created":"2017-10-25T21:15:30.467+0000","priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.svg","name":"Major","id":"3"},"labels":[],"customfield_12312333":null,"customfield_12312334":null,"customfield_12313422":"false","customfield_12310310":"0.0","customfield_12312331":null,"customfield_12312332":null,"timeestimate":null,"aggregatetimeoriginalestimate":null,"customfield_12311120":null,"customfield_12312330":null,"versions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12329258","id":"12329258","name":"5.12.0","archived":false,"released":true,"releaseDate":"2015-08-13"},{"self":"https://issues.apache.org/jira/rest/api/2/version/12341669","id":"12341669","name":"5.15.2","archived":false,"released":true,"releaseDate":"2017-10-21"}],"issuelinks":[],"customfield_12312339":null,"assignee":null,"customfield_12312337":null,"customfield_12312338":null,"updated":"2017-10-27T09:22:56.430+0000","customfield_12312335":null,"customfield_12312336":null,"status":{"self":"https://issues.apache.org/jira/rest/api/2/status/5","description":"A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/resolved.png","name":"Resolved","id":"5","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Done"}},"components":[{"self":"https://issues.apache.org/jira/rest/api/2/component/12313892","id":"12313892","name":"Broker"}],"timeoriginalestimate":null,"customfield_12310080":null,"description":"The default broker behavior for message groups uses a CachedMessageGroupMap with a least-recently-used cache with a capacity of 1024. When more that 1024 group IDs are used messages can be consumed out-of-order.\r\n\r\nScenario.\r\nConfigure two consumers for a queue.\r\nSend a message with group ID '0' that requires a long time to consume.\r\nSend 1024 additional messages with group IDs '1' through '1024' that require a short time to consume.\r\nSend a message of group ID '0' that requires a short time to consume.\r\n\r\nExpected:\r\nThe second message in group '0' is consumed *after* the first message in group '0'\r\n\r\nActual:\r\nThe second message in group '0' is consumed *before* the first message in group '0' has finished.\r\n\r\nThe LRU cache is evicting the group to consumer mapping for group '0' before the second message arrives, allowing the second message in group '0' to be processed by a different consumer than the first message.\r\nUsing the MessageGroupHashBucket or the SimpleMessageGroupMap results in the expected behavior.\r\n\r\n{code}\r\npackage com.example.outoforderjms;\r\n\r\nimport java.io.Serializable;\r\nimport java.time.Instant;\r\nimport java.time.ZoneId;\r\nimport java.time.format.DateTimeFormatter;\r\nimport java.util.Locale;\r\nimport javax.jms.ConnectionFactory;\r\nimport org.apache.activemq.ActiveMQConnectionFactory;\r\nimport org.apache.activemq.pool.PooledConnectionFactory;\r\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.jms.annotation.EnableJms;\r\nimport org.springframework.jms.annotation.JmsListener;\r\nimport org.springframework.jms.config.DefaultJmsListenerContainerFactory;\r\nimport org.springframework.jms.core.JmsTemplate;\r\nimport org.springframework.jms.core.MessagePostProcessor;\r\n\r\n@EnableJms\r\n@Configuration\r\npublic class OutOfOrderJms {\r\n\r\n  private static final int MODULUS = 1025;\r\n  private static final int COUNT = MODULUS + 1;\r\n  private static final String QUEUE_NAME = \"MessageGroupTest\";\r\n\r\n  public static void main(String[] args) {\r\n    AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();\r\n\r\n    ctx.register(OutOfOrderJms.class);\r\n    ctx.refresh();\r\n\r\n    JmsTemplate template = new JmsTemplate();\r\n    template.setConnectionFactory(CONNECTION_FACTORY);\r\n    for (int i = 0; i < COUNT; i++) {\r\n      SomeMessage someMessage = new SomeMessage(i, Integer.toString(i % MODULUS));\r\n      if (someMessage.getGroup().equals(\"0\")) {\r\n        System.out.println(getTimeStamp() + \" \" + Thread.currentThread().getName() + \" producing message \" + someMessage);\r\n      }\r\n      template.convertAndSend(QUEUE_NAME, someMessage, getMessageGroupPostProcessor(someMessage));\r\n    }\r\n  }\r\n\r\n  private static String getTimeStamp() {\r\n    DateTimeFormatter formatter =\r\n        DateTimeFormatter.ofPattern(\"hh:mm:ss:SSSS\")\r\n            .withLocale(Locale.US)\r\n            .withZone(ZoneId.systemDefault());\r\n    return formatter.format(Instant.now());\r\n  }\r\n\r\n  private static MessagePostProcessor getMessageGroupPostProcessor(Serializable object) {\r\n    return message -> {\r\n      SomeMessage m = ((SomeMessage) object);\r\n      message.setStringProperty(\r\n          \"JMSXGroupID\", m.getGroup());\r\n      return message;\r\n    };\r\n  }\r\n\r\n  @JmsListener(destination = QUEUE_NAME, containerFactory = \"containerFactory\")\r\n  private void process(SomeMessage someMessage) throws InterruptedException {\r\n  //  Simulate long-processing message for first message produced.\r\n  if (someMessage.getMessage() == 0) {\r\n      for (int i = 10; i > 0; i--) {\r\n        Thread.sleep(1000);\r\n        System.out.println(i + \" \");\r\n      }\r\n    }\r\n    if (someMessage.getGroup().equals(\"0\") || someMessage.getGroup().equals(\"1\")) {\r\n      System.out.println(getTimeStamp() + \" \" + Thread.currentThread().getName() + \" consuming message \" + someMessage);\r\n    }\r\n  }\r\n\r\n  @Bean\r\n  public DefaultJmsListenerContainerFactory containerFactory() {\r\n    DefaultJmsListenerContainerFactory factory = new DefaultJmsListenerContainerFactory();\r\n    factory.setConnectionFactory(CONNECTION_FACTORY);\r\n    factory.setConcurrency(\"1-2\");\r\n    return factory;\r\n  }\r\n\r\n  private static ConnectionFactory CONNECTION_FACTORY = new PooledConnectionFactory(\r\n      new ActiveMQConnectionFactory(\r\n          \"admin\",\r\n          \"admin\",\r\n          \"failover:tcp://localhost:61616\")\r\n  );\r\n\r\n  private static class SomeMessage implements Serializable {\r\n    private final int message;\r\n    private final String group;\r\n\r\n    private SomeMessage(int message, String group) {\r\n      this.message = message;\r\n      this.group = group;\r\n    }\r\n\r\n\r\n    int getMessage() {\r\n      return message;\r\n    }\r\n\r\n    String getGroup() {\r\n      return group;\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n      return \"SomeMessage{\" +\r\n          \"message=\" + message +\r\n          \", group='\" + group + '\\'' +\r\n          '}';\r\n    }\r\n  }\r\n}\r\n\r\n{code}\r\n\r\nOutput shows message 1025 finishing before message 0\r\n{code}\r\n03:11:15:1730 main producing message SomeMessage{message=0, group='0'}\r\n03:11:15:2220 DefaultMessageListenerContainer-2 consuming message SomeMessage{message=1, group='1'}\r\n10 \r\n9 \r\n8 \r\n03:11:18:9530 main producing message SomeMessage{message=1025, group='0'}\r\n03:11:18:9540 DefaultMessageListenerContainer-2 consuming message SomeMessage{message=1025, group='0'}\r\n7 \r\n6 \r\n5 \r\n4 \r\n3 \r\n2 \r\n1 \r\n03:11:25:2130 DefaultMessageListenerContainer-1 consuming message SomeMessage{message=0, group='0'}\r\n{code}","customfield_10010":null,"timetracking":{},"customfield_12312026":null,"customfield_12312023":null,"customfield_12312024":null,"customfield_12312340":null,"attachment":[],"aggregatetimeestimate":null,"customfield_12312341":null,"customfield_12312220":null,"customfield_12312022":null,"customfield_12310041":null,"customfield_12310921":null,"customfield_12310920":"9223372036854775807","customfield_12312823":null,"summary":"Messages using Message Groups can arrive out of order when using CachedMessageGroupMap","creator":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jlmont","name":"jlmont","key":"jlmont","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10435","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10435","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10435","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10435"},"displayName":"Joshua Montgomery","active":true,"timeZone":"America/Denver"},"subtasks":[],"customfield_12310291":null,"reporter":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jlmont","name":"jlmont","key":"jlmont","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10435","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10435","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10435","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10435"},"displayName":"Joshua Montgomery","active":true,"timeZone":"America/Denver"},"customfield_12310290":null,"aggregateprogress":{"progress":0,"total":0},"customfield_12311024":null,"environment":"Linux, CentOS 7\r\n\r\nopenjdk version \"1.8.0_151\"\r\nOpenJDK Runtime Environment (build 1.8.0_151-b12)\r\nOpenJDK 64-Bit Server VM (build 25.151-b12, mixed mode)\r\n","customfield_12313520":null,"customfield_12311020":null,"duedate":null,"customfield_12310250":null,"progress":{"progress":0,"total":0},"comment":{"comments":[{"self":"https://issues.apache.org/jira/rest/api/2/issue/13112104/comment/16220243","id":"16220243","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=gtully","name":"gtully","key":"gtully","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Gary Tully","active":true,"timeZone":"Etc/UTC"},"body":"you can also increase the cache size - org.apache.activemq.broker.region.group.CachedMessageGroupMapFactory#setCacheSize\r\n\r\nare you requesting a different default behaviour?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=gtully","name":"gtully","key":"gtully","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Gary Tully","active":true,"timeZone":"Etc/UTC"},"created":"2017-10-26T09:48:07.418+0000","updated":"2017-10-26T09:48:07.418+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13112104/comment/16221331","id":"16221331","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jlmont","name":"jlmont","key":"jlmont","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10435","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10435","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10435","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10435"},"displayName":"Joshua Montgomery","active":true,"timeZone":"America/Denver"},"body":"The default behavior is not what I expected from the documentation.\r\nhttp://activemq.apache.org/message-groups.html\r\nI expected that if I used a group ID for messages, all messages in that group were guaranteed to be processed in order.\r\nMy use case was keeping messages ordered for each of thousands of groups. When running the code, instead of getting guaranteed order, I got messages being processed out-of-order.\r\nI can see from the implementations of MessageGroupHashBucket and SimpleMessageGroupMap that message groups work by associating each group with a consumer.\r\nIt looks like SimpleMessageGroupMap keeps track of every group but suffers from unbounded memory use.\r\nMessageGroupHashBucked keeps track of every group and has bounded memory use.\r\nCachedMessageGroupMap has bounded memory use, but only keeps track of up to 1024 (or the maximum configured size) groups, then loses track of any groups older than the newest 1024. That becomes a serious problem when there are messages for 2000 groups in the queue and each group has several messages waiting.\r\n\r\nI noticed that https://issues.apache.org/jira/browse/AMQ-3565 mentions the idea of closing groups for which there are no messages in the queue, and the CachedMessageGroupMap is mentioned as doing this. However, the LRU map evicts old groups but does not wait until there are no queued messages associated with the group. I consider this incorrect behavior because queued messages will not be kept in order. I would consider it correct behavior if the LRU map only evicted groups for which no messages were queued, but retained all groups for which there were still messages queued.\r\n\r\nI also found that https://issues.apache.org/jira/browse/AMQ-5942 mentions the same issue and the comments say the documentation should be changed. If the decision is made to retain the current behavior, then certainly the documentation should make it clear that the guaranteed ordering of messages is limited in the default configuration to 1024 groups (or the configured maximum), and no guarantees apply beyond that.\r\n\r\nThank you for your quick reply. I appreciate that there are competing demands of memory consumption, load balancing, complexity, etc.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jlmont","name":"jlmont","key":"jlmont","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10435","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10435","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10435","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10435"},"displayName":"Joshua Montgomery","active":true,"timeZone":"America/Denver"},"created":"2017-10-26T22:22:06.125+0000","updated":"2017-10-26T22:22:06.125+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13112104/comment/16221997","id":"16221997","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=gtully","name":"gtully","key":"gtully","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Gary Tully","active":true,"timeZone":"Etc/UTC"},"body":"makes sense, I pushed some of your observations to the documentation, see the last paragraph: https://cwiki.apache.org/confluence/display/ACTIVEMQ/Message+Groups","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=gtully","name":"gtully","key":"gtully","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Gary Tully","active":true,"timeZone":"Etc/UTC"},"created":"2017-10-27T09:21:58.477+0000","updated":"2017-10-27T09:21:58.477+0000"}],"maxResults":3,"total":3,"startAt":0},"votes":{"self":"https://issues.apache.org/jira/rest/api/2/issue/AMQ-6851/votes","votes":0,"hasVoted":false},"worklog":{"startAt":0,"maxResults":20,"total":0,"worklogs":[]},"customfield_12311820":"0|i3lpjr:"}}