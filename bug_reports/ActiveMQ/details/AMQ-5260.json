{"expand":"renderedFields,names,schema,operations,editmeta,changelog,versionedRepresentations","id":"12725487","self":"https://issues.apache.org/jira/rest/api/2/issue/12725487","key":"AMQ-5260","fields":{"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype","name":"Bug","subtask":false,"avatarId":21133},"timespent":null,"project":{"self":"https://issues.apache.org/jira/rest/api/2/project/12311210","id":"12311210","key":"AMQ","name":"ActiveMQ","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/projectavatar?pid=12311210&avatarId=10011","24x24":"https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12311210&avatarId=10011","16x16":"https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12311210&avatarId=10011","32x32":"https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12311210&avatarId=10011"},"projectCategory":{"self":"https://issues.apache.org/jira/rest/api/2/projectCategory/11160","id":"11160","description":"ActiveMQ","name":"ActiveMQ"}},"fixVersions":[],"aggregatetimespent":null,"resolution":null,"customfield_12312322":null,"customfield_12310220":"2014-07-17T12:43:19.379+0000","customfield_12312520":null,"customfield_12312323":null,"customfield_12312521":"Mon Jun 29 07:22:46 UTC 2015","customfield_12310420":"403646","customfield_12312320":null,"customfield_12310222":null,"customfield_12312321":null,"resolutiondate":null,"workratio":-1,"customfield_12312328":null,"customfield_12312329":null,"customfield_12312923":null,"customfield_12312326":null,"customfield_12312920":null,"customfield_12310300":null,"customfield_12312327":null,"customfield_12312921":null,"customfield_12312324":null,"customfield_12312720":null,"customfield_12312325":null,"lastViewed":null,"watches":{"self":"https://issues.apache.org/jira/rest/api/2/issue/AMQ-5260/watchers","watchCount":3,"isWatching":false},"created":"2014-07-04T13:50:15.086+0000","priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.svg","name":"Major","id":"3"},"labels":[],"customfield_12312333":null,"customfield_12312334":null,"customfield_12313422":"false","customfield_12310310":"6.0","customfield_12312331":null,"customfield_12312332":null,"timeestimate":null,"aggregatetimeoriginalestimate":null,"customfield_12311120":null,"customfield_12312330":null,"versions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12323932","id":"12323932","name":"5.9.0","archived":false,"released":true,"releaseDate":"2013-10-21"},{"self":"https://issues.apache.org/jira/rest/api/2/version/12324950","id":"12324950","name":"5.10.0","archived":false,"released":true,"releaseDate":"2014-06-10"}],"issuelinks":[{"id":"12402752","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12402752","type":{"id":"10030","name":"Reference","inward":"is related to","outward":"relates to","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"},"inwardIssue":{"id":"12738512","key":"AMQ-5342","self":"https://issues.apache.org/jira/rest/api/2/issue/12738512","fields":{"summary":"Deadlock in network of brokers simple architecture","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/1","description":"The issue is open and ready for the assignee to start work on it.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/open.png","name":"Open","id":"1","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/2","id":2,"key":"new","colorName":"blue-gray","name":"To Do"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/2","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/critical.svg","name":"Critical","id":"2"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype","name":"Bug","subtask":false,"avatarId":21133}}}}],"customfield_12312339":null,"assignee":null,"customfield_12312337":null,"customfield_12312338":null,"updated":"2015-06-29T07:22:46.466+0000","customfield_12312335":null,"customfield_12312336":null,"status":{"self":"https://issues.apache.org/jira/rest/api/2/status/1","description":"The issue is open and ready for the assignee to start work on it.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/open.png","name":"Open","id":"1","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/2","id":2,"key":"new","colorName":"blue-gray","name":"To Do"}},"components":[],"timeoriginalestimate":null,"customfield_12310080":null,"description":"Pretty the same description with respect to AMQ-4328. \n----\n!deadlock.jpg!\n\nh2. Stacktraces:\nStacktrace no.1:\n{noformat}\nName: ActiveMQ NIO Worker 12\nState: BLOCKED on java.net.URI@1bae2b28 owned by: ActiveMQ Transport: tcp:///10.0.1.219:61616@57789\nTotal blocked: 2  Total waited: 67\n\nStack trace: \n org.apache.activemq.network.DemandForwardingBridgeSupport.serviceRemoteConsumerAdvisory(DemandForwardingBridgeSupport.java:714)\norg.apache.activemq.network.DemandForwardingBridgeSupport.serviceRemoteCommand(DemandForwardingBridgeSupport.java:581)\norg.apache.activemq.network.DemandForwardingBridgeSupport$3.onCommand(DemandForwardingBridgeSupport.java:191)\norg.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:116)\norg.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:50)\norg.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:113)\norg.apache.activemq.transport.AbstractInactivityMonitor.onCommand(AbstractInactivityMonitor.java:270)\norg.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83)\norg.apache.activemq.transport.nio.NIOTransport.serviceRead(NIOTransport.java:138)\norg.apache.activemq.transport.nio.NIOTransport$1.onSelect(NIOTransport.java:69)\norg.apache.activemq.transport.nio.SelectorSelection.onSelect(SelectorSelection.java:94)\norg.apache.activemq.transport.nio.SelectorWorker$1.run(SelectorWorker.java:119)\njava.util.concurrent.ThreadPoolExecutor$Worker.runTask(Unknown Source)\njava.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)\njava.lang.Thread.run(Unknown Source)\n{noformat}\n----\nstack trace no.2\n{noformat}\nName: ActiveMQ Transport: tcp:///10.0.1.219:61616@57789\nState: WAITING on java.util.concurrent.locks.ReentrantLock$NonfairSync@3cdbfa3e owned by: ActiveMQ BrokerService[master2] Task-4\nTotal blocked: 19  Total waited: 3\n\nStack trace: \n sun.misc.Unsafe.park(Native Method)\njava.util.concurrent.locks.LockSupport.park(Unknown Source)\njava.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(Unknown Source)\njava.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(Unknown Source)\njava.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(Unknown Source)\njava.util.concurrent.locks.ReentrantLock$NonfairSync.lock(Unknown Source)\njava.util.concurrent.locks.ReentrantLock.lock(Unknown Source)\norg.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:66)\norg.apache.activemq.transport.ResponseCorrelator.oneway(ResponseCorrelator.java:60)\norg.apache.activemq.broker.TransportConnection.dispatch(TransportConnection.java:1339)\norg.apache.activemq.broker.TransportConnection.processDispatch(TransportConnection.java:858)\norg.apache.activemq.broker.TransportConnection.dispatchSync(TransportConnection.java:818)\norg.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:151)\norg.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:116)\norg.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:50)\norg.apache.activemq.transport.vm.VMTransport.doDispatch(VMTransport.java:138)\norg.apache.activemq.transport.vm.VMTransport.dispatch(VMTransport.java:127)\n   - locked java.util.concurrent.atomic.AtomicBoolean@689389da\norg.apache.activemq.transport.vm.VMTransport.oneway(VMTransport.java:104)\norg.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:68)\norg.apache.activemq.transport.ResponseCorrelator.asyncRequest(ResponseCorrelator.java:81)\norg.apache.activemq.transport.ResponseCorrelator.request(ResponseCorrelator.java:86)\norg.apache.activemq.network.DemandForwardingBridgeSupport.addSubscription(DemandForwardingBridgeSupport.java:856)\norg.apache.activemq.network.DemandForwardingBridgeSupport.addConsumerInfo(DemandForwardingBridgeSupport.java:1128)\norg.apache.activemq.network.DemandForwardingBridgeSupport.serviceRemoteConsumerAdvisory(DemandForwardingBridgeSupport.java:714)\n   - locked java.net.URI@1bae2b28\norg.apache.activemq.network.DemandForwardingBridgeSupport.serviceRemoteCommand(DemandForwardingBridgeSupport.java:581)\norg.apache.activemq.network.DemandForwardingBridgeSupport$3.onCommand(DemandForwardingBridgeSupport.java:191)\norg.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:116)\norg.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:50)\norg.apache.activemq.transport.failover.FailoverTransport$3.onCommand(FailoverTransport.java:196)\norg.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:113)\norg.apache.activemq.transport.AbstractInactivityMonitor.onCommand(AbstractInactivityMonitor.java:270)\norg.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83)\norg.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:214)\norg.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:196)\njava.lang.Thread.run(Unknown Source)\n{noformat}\n----\nstack trace no.3\n{noformat}\nName: ActiveMQ BrokerService[master2] Task-4\nState: WAITING on java.util.concurrent.locks.ReentrantLock$NonfairSync@717bb9c owned by: ActiveMQ Transport: tcp:///10.0.1.219:61616@57789\nTotal blocked: 19  Total waited: 117\n\nStack trace: \n sun.misc.Unsafe.park(Native Method)\njava.util.concurrent.locks.LockSupport.park(Unknown Source)\njava.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(Unknown Source)\njava.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(Unknown Source)\njava.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(Unknown Source)\njava.util.concurrent.locks.ReentrantLock$NonfairSync.lock(Unknown Source)\njava.util.concurrent.locks.ReentrantLock.lock(Unknown Source)\norg.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:66)\norg.apache.activemq.transport.ResponseCorrelator.oneway(ResponseCorrelator.java:60)\norg.apache.activemq.network.DemandForwardingBridgeSupport.serviceLocalCommand(DemandForwardingBridgeSupport.java:921)\norg.apache.activemq.network.DemandForwardingBridgeSupport$2.onCommand(DemandForwardingBridgeSupport.java:173)\norg.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:116)\norg.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:50)\norg.apache.activemq.transport.vm.VMTransport.doDispatch(VMTransport.java:138)\norg.apache.activemq.transport.vm.VMTransport.dispatch(VMTransport.java:127)\n   - locked java.util.concurrent.atomic.AtomicBoolean@453bb109\norg.apache.activemq.transport.vm.VMTransport.oneway(VMTransport.java:104)\norg.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:68)\norg.apache.activemq.transport.ResponseCorrelator.oneway(ResponseCorrelator.java:60)\norg.apache.activemq.broker.TransportConnection.dispatch(TransportConnection.java:1339)\norg.apache.activemq.broker.TransportConnection.processDispatch(TransportConnection.java:858)\norg.apache.activemq.broker.TransportConnection.iterate(TransportConnection.java:904)\norg.apache.activemq.thread.PooledTaskRunner.runTask(PooledTaskRunner.java:129)\norg.apache.activemq.thread.PooledTaskRunner$1.run(PooledTaskRunner.java:47)\njava.util.concurrent.ThreadPoolExecutor$Worker.runTask(Unknown Source)\njava.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)\njava.lang.Thread.run(Unknown Source)\n{noformat}","customfield_10010":null,"timetracking":{},"customfield_12312026":null,"customfield_12312023":null,"customfield_12312024":null,"customfield_12312340":null,"attachment":[{"self":"https://issues.apache.org/jira/rest/api/2/attachment/12655175","id":"12655175","filename":"AMQ_5260_2.patch","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=matteor","name":"matteor","key":"matteor","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"matteo rulli","active":true,"timeZone":"Etc/UTC"},"created":"2014-07-11T08:34:47.964+0000","size":3252,"mimeType":"text/plain","content":"https://issues.apache.org/jira/secure/attachment/12655175/AMQ_5260_2.patch"},{"self":"https://issues.apache.org/jira/rest/api/2/attachment/12655176","id":"12655176","filename":"AMQ_5260_3.patch","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=matteor","name":"matteor","key":"matteor","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"matteo rulli","active":true,"timeZone":"Etc/UTC"},"created":"2014-07-11T08:34:47.969+0000","size":580,"mimeType":"text/plain","content":"https://issues.apache.org/jira/secure/attachment/12655176/AMQ_5260_3.patch"},{"self":"https://issues.apache.org/jira/rest/api/2/attachment/12655174","id":"12655174","filename":"AMQ_5260.patch","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=matteor","name":"matteor","key":"matteor","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"matteo rulli","active":true,"timeZone":"Etc/UTC"},"created":"2014-07-11T08:34:47.958+0000","size":3989,"mimeType":"text/plain","content":"https://issues.apache.org/jira/secure/attachment/12655174/AMQ_5260.patch"},{"self":"https://issues.apache.org/jira/rest/api/2/attachment/12668740","id":"12668740","filename":"AMQ5260AdvancedTest.java","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=matteor","name":"matteor","key":"matteor","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"matteo rulli","active":true,"timeZone":"Etc/UTC"},"created":"2014-09-15T10:03:30.784+0000","size":49041,"mimeType":"text/x-java-source","content":"https://issues.apache.org/jira/secure/attachment/12668740/AMQ5260AdvancedTest.java"},{"self":"https://issues.apache.org/jira/rest/api/2/attachment/12654105","id":"12654105","filename":"deadlock.jpg","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=matteor","name":"matteor","key":"matteor","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"matteo rulli","active":true,"timeZone":"Etc/UTC"},"created":"2014-07-04T13:51:45.476+0000","size":201504,"mimeType":"image/jpeg","content":"https://issues.apache.org/jira/secure/attachment/12654105/deadlock.jpg"},{"self":"https://issues.apache.org/jira/rest/api/2/attachment/12654110","id":"12654110","filename":"debug.jpg","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=matteor","name":"matteor","key":"matteor","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"matteo rulli","active":true,"timeZone":"Etc/UTC"},"created":"2014-07-04T14:40:06.882+0000","size":223282,"mimeType":"image/jpeg","content":"https://issues.apache.org/jira/secure/attachment/12654110/debug.jpg"}],"aggregatetimeestimate":null,"customfield_12312341":null,"customfield_12312220":null,"customfield_12312022":null,"customfield_12310041":null,"customfield_12310921":null,"customfield_12310920":"403689","customfield_12312823":null,"summary":"Cross talk over duplex network connection can lead to blocking (alternative take)","creator":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=matteor","name":"matteor","key":"matteor","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"matteo rulli","active":true,"timeZone":"Etc/UTC"},"subtasks":[],"customfield_12310291":null,"reporter":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=matteor","name":"matteor","key":"matteor","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"matteo rulli","active":true,"timeZone":"Etc/UTC"},"customfield_12310290":null,"aggregateprogress":{"progress":0,"total":0},"customfield_12311024":null,"environment":null,"customfield_12313520":null,"customfield_12311020":null,"duedate":null,"customfield_12310250":null,"progress":{"progress":0,"total":0},"comment":{"comments":[{"self":"https://issues.apache.org/jira/rest/api/2/issue/12725487/comment/14052479","id":"14052479","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=matteor","name":"matteor","key":"matteor","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"matteo rulli","active":true,"timeZone":"Etc/UTC"},"body":"This is what one sees in remote debug if stops the thread _ActiveMQ NIO Worker 12_ reported in the stacktraces above:\n\n!debug.jpg!\n\n\n*DemandForwardingBridgeSupport.java, line 714*","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=matteor","name":"matteor","key":"matteor","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"matteo rulli","active":true,"timeZone":"Etc/UTC"},"created":"2014-07-04T14:39:13.633+0000","updated":"2014-07-04T14:41:37.642+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12725487/comment/14057439","id":"14057439","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=matteor","name":"matteor","key":"matteor","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"matteo rulli","active":true,"timeZone":"Etc/UTC"},"body":"I tried with the following patch (see patch attachment *AMQ_5260.patch*):\n{noformat}\n--- \\activemq-parent-5.9.0-orig\\activemq-broker\\src\\main\\java\\org\\apache\\activemq\\network\\DemandForwardingBridgeSupport.java\tTue Oct 15 00:41:46 2013\n+++ \\activemq-parent-5.9.0\\activemq-broker\\src\\main\\java\\org\\apache\\activemq\\network\\DemandForwardingBridgeSupport.java\tThu Jul 10 11:51:44 2014\n@@ -30,6 +30,8 @@\n import java.util.concurrent.TimeoutException;\n import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReentrantLock;\n \n import javax.management.ObjectName;\n \n@@ -125,6 +127,8 @@\n     private Transport duplexInboundLocalBroker = null;\n     private ProducerInfo duplexInboundLocalProducerInfo;\n \n+    private static final Lock consumerInfoLock = new ReentrantLock(); \n+    \n     public DemandForwardingBridgeSupport(NetworkBridgeConfiguration configuration, Transport localBroker, Transport remoteBroker) {\n         this.configuration = configuration;\n         this.localBroker = localBroker;\n@@ -708,11 +712,16 @@\n                 return;\n             }\n \n+            /* ------------------------- AMQ-5260 start ----------------------- */\n             // in a cyclic network there can be multiple bridges per broker that can propagate\n             // a network subscription so there is a need to synchronize on a shared entity\n-            synchronized (brokerService.getVmConnectorURI()) {\n-                addConsumerInfo(info);\n-            }\n+//            synchronized (brokerService.getVmConnectorURI()) {\n+//                addConsumerInfo(info);\n+//            }\n+            // the lock has been moved in the addConsumerInfo method to overcome the AMQ-5260\n+            addConsumerInfo(info);\n+            /* ------------------------- AMQ-5260 end ------------------------- */\n+            \n         } else if (data.getClass() == DestinationInfo.class) {\n             // It's a destination info - we want to pass up information about temporary destinations\n             final DestinationInfo destInfo = (DestinationInfo) data;\n@@ -1115,20 +1124,31 @@\n     }\n \n     protected void addConsumerInfo(final ConsumerInfo consumerInfo) throws IOException {\n-        ConsumerInfo info = consumerInfo.copy();\n-        addRemoteBrokerToBrokerPath(info);\n-        DemandSubscription sub = createDemandSubscription(info);\n-        if (sub != null) {\n-            if (duplicateSuppressionIsRequired(sub)) {\n-                undoMapRegistration(sub);\n-            } else {\n-                if (consumerInfo.isDurable()) {\n-                    sub.getDurableRemoteSubs().add(new SubscriptionInfo(sub.getRemoteInfo().getClientId(), consumerInfo.getSubscriptionName()));\n-                }\n-                addSubscription(sub);\n-                LOG.debug(\"{} new demand subscription: {}\", configuration.getBrokerName(), sub);\n-            }\n-        }\n+    \tboolean addSubscription = false;\n+    \tDemandSubscription sub = null;\n+    \tconsumerInfoLock.lock();\n+    \ttry{\n+    \t\tConsumerInfo info = consumerInfo.copy();\n+    \t\taddRemoteBrokerToBrokerPath(info);\n+    \t\tsub = createDemandSubscription(info);\n+    \t\tif (sub != null) {\n+    \t\t\tif (duplicateSuppressionIsRequired(sub)) {\n+    \t\t\t\tundoMapRegistration(sub);\n+    \t\t\t} else {\n+    \t\t\t\tif (consumerInfo.isDurable()) {\n+    \t\t\t\t\tsub.getDurableRemoteSubs().add(new SubscriptionInfo(sub.getRemoteInfo().getClientId(), consumerInfo.getSubscriptionName()));\n+    \t\t\t\t}\n+    \t\t\t\taddSubscription = true;\n+    \t\t\t\tLOG.debug(\"{} new demand subscription: {}\", configuration.getBrokerName(), sub);\n+    \t\t\t}\n+    \t\t}\n+    \t}finally{\n+    \t\tconsumerInfoLock.unlock();\n+    \t}\n+    \tif(addSubscription && sub != null) {\n+    \t\taddSubscription(sub);\n+    \t\tLOG.debug(\"{} new demand subscription: {} has beed added\", configuration.getBrokerName(), sub);\n+    \t}\n     }\n \n     private void undoMapRegistration(DemandSubscription sub) {\n{noformat}\n\nBut in I run into another deadlock:\n\nSTACKTRACE 1:\n{noformat}\nName: ActiveMQ BrokerService[master2] Task-106\nState: WAITING on java.util.concurrent.locks.ReentrantLock$NonfairSync@2c8aad83 owned by: ActiveMQ Transport: tcp:///10.0.1.219:61616@64215\nTotal blocked: 0  Total waited: 6\n\nStack trace: \n sun.misc.Unsafe.park(Native Method)\njava.util.concurrent.locks.LockSupport.park(Unknown Source)\njava.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(Unknown Source)\njava.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(Unknown Source)\njava.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(Unknown Source)\njava.util.concurrent.locks.ReentrantLock$NonfairSync.lock(Unknown Source)\njava.util.concurrent.locks.ReentrantLock.lock(Unknown Source)\norg.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:66)\norg.apache.activemq.transport.ResponseCorrelator.oneway(ResponseCorrelator.java:60)\norg.apache.activemq.network.DemandForwardingBridgeSupport.serviceLocalCommand(DemandForwardingBridgeSupport.java:930)\norg.apache.activemq.network.DemandForwardingBridgeSupport$2.onCommand(DemandForwardingBridgeSupport.java:177)\norg.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:116)\norg.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:50)\norg.apache.activemq.transport.vm.VMTransport.doDispatch(VMTransport.java:138)\norg.apache.activemq.transport.vm.VMTransport.dispatch(VMTransport.java:127)\n   - locked java.util.concurrent.atomic.AtomicBoolean@591f9578\norg.apache.activemq.transport.vm.VMTransport.oneway(VMTransport.java:104)\norg.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:68)\norg.apache.activemq.transport.ResponseCorrelator.oneway(ResponseCorrelator.java:60)\norg.apache.activemq.broker.TransportConnection.dispatch(TransportConnection.java:1339)\norg.apache.activemq.broker.TransportConnection.processDispatch(TransportConnection.java:858)\norg.apache.activemq.broker.TransportConnection.iterate(TransportConnection.java:904)\norg.apache.activemq.thread.PooledTaskRunner.runTask(PooledTaskRunner.java:129)\norg.apache.activemq.thread.PooledTaskRunner$1.run(PooledTaskRunner.java:47)\njava.util.concurrent.ThreadPoolExecutor$Worker.runTask(Unknown Source)\njava.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)\njava.lang.Thread.run(Unknown Source)\n{noformat}\n\n----\nSTACKTRACE 2:\n{noformat}\nName: ActiveMQ Transport: tcp:///10.0.1.219:61616@64215\nState: WAITING on java.util.concurrent.locks.ReentrantLock$NonfairSync@76455420 owned by: ActiveMQ BrokerService[master2] Task-106\nTotal blocked: 11  Total waited: 11\n\nStack trace: \n sun.misc.Unsafe.park(Native Method)\njava.util.concurrent.locks.LockSupport.park(Unknown Source)\njava.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(Unknown Source)\njava.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(Unknown Source)\njava.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(Unknown Source)\njava.util.concurrent.locks.ReentrantLock$NonfairSync.lock(Unknown Source)\njava.util.concurrent.locks.ReentrantLock.lock(Unknown Source)\norg.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:66)\norg.apache.activemq.transport.ResponseCorrelator.oneway(ResponseCorrelator.java:60)\norg.apache.activemq.broker.TransportConnection.dispatch(TransportConnection.java:1339)\norg.apache.activemq.broker.TransportConnection.processDispatch(TransportConnection.java:858)\norg.apache.activemq.broker.TransportConnection.dispatchSync(TransportConnection.java:818)\norg.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:151)\norg.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:116)\norg.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:50)\norg.apache.activemq.transport.vm.VMTransport.doDispatch(VMTransport.java:138)\norg.apache.activemq.transport.vm.VMTransport.dispatch(VMTransport.java:127)\n   - locked java.util.concurrent.atomic.AtomicBoolean@278a1cfb\norg.apache.activemq.transport.vm.VMTransport.oneway(VMTransport.java:104)\norg.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:68)\norg.apache.activemq.transport.ResponseCorrelator.asyncRequest(ResponseCorrelator.java:81)\norg.apache.activemq.transport.ResponseCorrelator.request(ResponseCorrelator.java:86)\norg.apache.activemq.network.DemandForwardingBridgeSupport.addSubscription(DemandForwardingBridgeSupport.java:865)\norg.apache.activemq.network.DemandForwardingBridgeSupport.addConsumerInfo(DemandForwardingBridgeSupport.java:1149)\norg.apache.activemq.network.DemandForwardingBridgeSupport.serviceRemoteConsumerAdvisory(DemandForwardingBridgeSupport.java:722)\norg.apache.activemq.network.DemandForwardingBridgeSupport.serviceRemoteCommand(DemandForwardingBridgeSupport.java:585)\norg.apache.activemq.network.DemandForwardingBridgeSupport$3.onCommand(DemandForwardingBridgeSupport.java:195)\norg.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:116)\norg.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:50)\norg.apache.activemq.transport.failover.FailoverTransport$3.onCommand(FailoverTransport.java:196)\norg.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:113)\norg.apache.activemq.transport.AbstractInactivityMonitor.onCommand(AbstractInactivityMonitor.java:270)\norg.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83)\norg.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:214)\norg.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:196)\njava.lang.Thread.run(Unknown Source)\n{noformat}\nThis time the locks involved are _org.apache.activemq.transport.vm.VMTransport.started_ and  again the _org.apache.activemq.transport.MutexTransport.writeLock_ one.\n\nAm I following a red herring here?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=matteor","name":"matteor","key":"matteor","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"matteo rulli","active":true,"timeZone":"Etc/UTC"},"created":"2014-07-10T13:10:44.427+0000","updated":"2014-07-11T08:34:31.207+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12725487/comment/14058553","id":"14058553","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=matteor","name":"matteor","key":"matteor","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"matteo rulli","active":true,"timeZone":"Etc/UTC"},"body":"I tried to fix the second deadlock with the patch contained in *AMQ_5260_2.patch*.\n\n\nAfter few hours I run into another deadlock: this is due to the fact that _org.apache.activemq.transport.MutexTransport.writeLock_ is not static. This cause different instances of transports (in our case VMTransport and Failover/Openwire Transport) to cross different writeLock barriers in different order (see stacktraces below)\n\nSTACKTRACE 1\n{noformat}\nName: ActiveMQ BrokerService[master2] Task-119\nState: WAITING on java.util.concurrent.locks.ReentrantLock$NonfairSync@766eae77 owned by: ActiveMQ Transport: tcp:///10.0.1.219:61616@64702\nTotal blocked: 1  Total waited: 94\n\nStack trace: \n sun.misc.Unsafe.park(Native Method)\njava.util.concurrent.locks.LockSupport.park(Unknown Source)\njava.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(Unknown Source)\njava.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(Unknown Source)\njava.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(Unknown Source)\njava.util.concurrent.locks.ReentrantLock$NonfairSync.lock(Unknown Source)\njava.util.concurrent.locks.ReentrantLock.lock(Unknown Source)\norg.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:66)\norg.apache.activemq.transport.ResponseCorrelator.oneway(ResponseCorrelator.java:60)\norg.apache.activemq.network.DemandForwardingBridgeSupport.serviceLocalCommand(DemandForwardingBridgeSupport.java:930)\norg.apache.activemq.network.DemandForwardingBridgeSupport$2.onCommand(DemandForwardingBridgeSupport.java:177)\norg.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:116)\norg.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:50)\norg.apache.activemq.transport.vm.VMTransport.doDispatch(VMTransport.java:170)\norg.apache.activemq.transport.vm.VMTransport.dispatch(VMTransport.java:157)\norg.apache.activemq.transport.vm.VMTransport.oneway(VMTransport.java:112)\norg.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:68)\norg.apache.activemq.transport.ResponseCorrelator.oneway(ResponseCorrelator.java:60)\norg.apache.activemq.broker.TransportConnection.dispatch(TransportConnection.java:1339)\norg.apache.activemq.broker.TransportConnection.processDispatch(TransportConnection.java:858)\norg.apache.activemq.broker.TransportConnection.iterate(TransportConnection.java:904)\norg.apache.activemq.thread.PooledTaskRunner.runTask(PooledTaskRunner.java:129)\norg.apache.activemq.thread.PooledTaskRunner$1.run(PooledTaskRunner.java:47)\njava.util.concurrent.ThreadPoolExecutor$Worker.runTask(Unknown Source)\njava.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)\njava.lang.Thread.run(Unknown Source)\n{noformat}\n\n----\n\nSTACKTRACE 2\n\n{noformat}\nName: ActiveMQ Transport: tcp:///10.0.1.219:61616@64702\nState: WAITING on java.util.concurrent.locks.ReentrantLock$NonfairSync@61e2cf66 owned by: ActiveMQ BrokerService[master2] Task-119\nTotal blocked: 8  Total waited: 22\n\nStack trace: \n sun.misc.Unsafe.park(Native Method)\njava.util.concurrent.locks.LockSupport.park(Unknown Source)\njava.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(Unknown Source)\njava.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(Unknown Source)\njava.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(Unknown Source)\njava.util.concurrent.locks.ReentrantLock$NonfairSync.lock(Unknown Source)\njava.util.concurrent.locks.ReentrantLock.lock(Unknown Source)\norg.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:66)\norg.apache.activemq.transport.ResponseCorrelator.oneway(ResponseCorrelator.java:60)\norg.apache.activemq.broker.TransportConnection.dispatch(TransportConnection.java:1339)\norg.apache.activemq.broker.TransportConnection.processDispatch(TransportConnection.java:858)\norg.apache.activemq.broker.TransportConnection.dispatchSync(TransportConnection.java:818)\norg.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:151)\norg.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:116)\norg.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:50)\norg.apache.activemq.transport.vm.VMTransport.doDispatch(VMTransport.java:170)\norg.apache.activemq.transport.vm.VMTransport.dispatch(VMTransport.java:157)\norg.apache.activemq.transport.vm.VMTransport.oneway(VMTransport.java:112)\norg.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:68)\norg.apache.activemq.transport.ResponseCorrelator.asyncRequest(ResponseCorrelator.java:81)\norg.apache.activemq.transport.ResponseCorrelator.request(ResponseCorrelator.java:86)\norg.apache.activemq.network.DemandForwardingBridgeSupport.addSubscription(DemandForwardingBridgeSupport.java:865)\norg.apache.activemq.network.DemandForwardingBridgeSupport.addConsumerInfo(DemandForwardingBridgeSupport.java:1149)\norg.apache.activemq.network.DemandForwardingBridgeSupport.serviceRemoteConsumerAdvisory(DemandForwardingBridgeSupport.java:722)\norg.apache.activemq.network.DemandForwardingBridgeSupport.serviceRemoteCommand(DemandForwardingBridgeSupport.java:585)\norg.apache.activemq.network.DemandForwardingBridgeSupport$3.onCommand(DemandForwardingBridgeSupport.java:195)\norg.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:116)\norg.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:50)\norg.apache.activemq.transport.failover.FailoverTransport$3.onCommand(FailoverTransport.java:196)\norg.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:113)\norg.apache.activemq.transport.AbstractInactivityMonitor.onCommand(AbstractInactivityMonitor.java:270)\norg.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83)\norg.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:214)\norg.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:196)\njava.lang.Thread.run(Unknown Source)\n{noformat}\n\nTo solve this last deadlock I applied the *AMQ_5260_3.patch*:\n{noformat}\n--- activemq-parent-5.9.0-orig\\activemq-client\\src\\main\\java\\org\\apache\\activemq\\transport\\MutexTransport.java\tTue Oct 15 00:41:46 2013\n+++ activemq-parent-5.9.0\\activemq-client\\src\\main\\java\\org\\apache\\activemq\\transport\\MutexTransport.java\tFri Jul 11 08:43:22 2014\n@@ -24,7 +24,7 @@\n  */\n public class MutexTransport extends TransportFilter {\n \n-    private final ReentrantLock writeLock = new ReentrantLock();\n+    private static final ReentrantLock writeLock = new ReentrantLock();\n     private boolean syncOnCommand;\n \n     public MutexTransport(Transport next) {\n{noformat}\nI don't know if this is a good idea... any advice would be welcome here.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=matteor","name":"matteor","key":"matteor","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"matteo rulli","active":true,"timeZone":"Etc/UTC"},"created":"2014-07-11T08:37:35.102+0000","updated":"2014-07-11T08:39:39.158+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12725487/comment/14064635","id":"14064635","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=matteor","name":"matteor","key":"matteor","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"matteo rulli","active":true,"timeZone":"Etc/UTC"},"body":"I upgraded AMQ to 5.10.0 (thus rolling back all my awkward and tenantive patches) and I detected the very same deadlock:\n\n{noformat}\nName: ActiveMQ NIO Worker 4006\nState: BLOCKED on java.net.URI@5602eaf4 owned by: ActiveMQ Transport: tcp:///10.0.1.219:61616@58001\nTotal blocked: 1  Total waited: 3\n\nStack trace: \n org.apache.activemq.network.DemandForwardingBridgeSupport.serviceRemoteConsumerAdvisory(DemandForwardingBridgeSupport.java:763)\norg.apache.activemq.network.DemandForwardingBridgeSupport.serviceRemoteCommand(DemandForwardingBridgeSupport.java:614)\norg.apache.activemq.network.DemandForwardingBridgeSupport$3.onCommand(DemandForwardingBridgeSupport.java:224)\norg.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:116)\norg.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:50)\norg.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:113)\norg.apache.activemq.transport.AbstractInactivityMonitor.onCommand(AbstractInactivityMonitor.java:270)\norg.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83)\norg.apache.activemq.transport.nio.NIOTransport.serviceRead(NIOTransport.java:138)\norg.apache.activemq.transport.nio.NIOTransport$1.onSelect(NIOTransport.java:69)\norg.apache.activemq.transport.nio.SelectorSelection.onSelect(SelectorSelection.java:94)\norg.apache.activemq.transport.nio.SelectorWorker$1.run(SelectorWorker.java:119)\njava.util.concurrent.ThreadPoolExecutor$Worker.runTask(Unknown Source)\njava.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)\njava.lang.Thread.run(Unknown Source)\n{noformat}\n----\n{noformat}\nName: ActiveMQ Transport: tcp:///10.0.1.219:61616@58001\nState: WAITING on java.util.concurrent.locks.ReentrantLock$NonfairSync@598f6549 owned by: ActiveMQ BrokerService[master2] Task-3288\nTotal blocked: 734  Total waited: 692\n\nStack trace: \n sun.misc.Unsafe.park(Native Method)\njava.util.concurrent.locks.LockSupport.park(Unknown Source)\njava.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(Unknown Source)\njava.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(Unknown Source)\njava.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(Unknown Source)\njava.util.concurrent.locks.ReentrantLock$NonfairSync.lock(Unknown Source)\njava.util.concurrent.locks.ReentrantLock.lock(Unknown Source)\norg.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:66)\norg.apache.activemq.transport.ResponseCorrelator.oneway(ResponseCorrelator.java:60)\norg.apache.activemq.broker.TransportConnection.dispatch(TransportConnection.java:1370)\norg.apache.activemq.broker.TransportConnection.processDispatch(TransportConnection.java:889)\norg.apache.activemq.broker.TransportConnection.dispatchSync(TransportConnection.java:849)\norg.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:150)\norg.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:116)\norg.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:50)\norg.apache.activemq.transport.vm.VMTransport.doDispatch(VMTransport.java:138)\norg.apache.activemq.transport.vm.VMTransport.dispatch(VMTransport.java:130)\n   - locked java.util.concurrent.atomic.AtomicBoolean@56b2aa50\norg.apache.activemq.transport.vm.VMTransport.oneway(VMTransport.java:107)\norg.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:68)\norg.apache.activemq.transport.ResponseCorrelator.asyncRequest(ResponseCorrelator.java:81)\norg.apache.activemq.transport.ResponseCorrelator.request(ResponseCorrelator.java:86)\norg.apache.activemq.network.DemandForwardingBridgeSupport.addSubscription(DemandForwardingBridgeSupport.java:905)\norg.apache.activemq.network.DemandForwardingBridgeSupport.addConsumerInfo(DemandForwardingBridgeSupport.java:1178)\norg.apache.activemq.network.DemandForwardingBridgeSupport.serviceRemoteConsumerAdvisory(DemandForwardingBridgeSupport.java:763)\n   - locked java.net.URI@5602eaf4\norg.apache.activemq.network.DemandForwardingBridgeSupport.serviceRemoteCommand(DemandForwardingBridgeSupport.java:614)\norg.apache.activemq.network.DemandForwardingBridgeSupport$3.onCommand(DemandForwardingBridgeSupport.java:224)\norg.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:116)\norg.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:50)\norg.apache.activemq.transport.failover.FailoverTransport$3.onCommand(FailoverTransport.java:208)\norg.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:113)\norg.apache.activemq.transport.AbstractInactivityMonitor.onCommand(AbstractInactivityMonitor.java:270)\norg.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83)\norg.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:214)\norg.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:196)\njava.lang.Thread.run(Unknown Source)\n{noformat}\n----\n{noformat}\nName: ActiveMQ BrokerService[master2] Task-3288\nState: WAITING on java.util.concurrent.locks.ReentrantLock$NonfairSync@16a11d1e owned by: ActiveMQ Transport: tcp:///10.0.1.219:61616@58001\nTotal blocked: 0  Total waited: 7\n\nStack trace: \n sun.misc.Unsafe.park(Native Method)\njava.util.concurrent.locks.LockSupport.park(Unknown Source)\njava.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(Unknown Source)\njava.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(Unknown Source)\njava.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(Unknown Source)\njava.util.concurrent.locks.ReentrantLock$NonfairSync.lock(Unknown Source)\njava.util.concurrent.locks.ReentrantLock.lock(Unknown Source)\norg.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:66)\norg.apache.activemq.transport.ResponseCorrelator.oneway(ResponseCorrelator.java:60)\norg.apache.activemq.network.DemandForwardingBridgeSupport.serviceLocalCommand(DemandForwardingBridgeSupport.java:970)\norg.apache.activemq.network.DemandForwardingBridgeSupport$2.onCommand(DemandForwardingBridgeSupport.java:206)\norg.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:116)\norg.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:50)\norg.apache.activemq.transport.vm.VMTransport.doDispatch(VMTransport.java:138)\norg.apache.activemq.transport.vm.VMTransport.dispatch(VMTransport.java:130)\n   - locked java.util.concurrent.atomic.AtomicBoolean@491c24c7\norg.apache.activemq.transport.vm.VMTransport.oneway(VMTransport.java:107)\norg.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:68)\norg.apache.activemq.transport.ResponseCorrelator.oneway(ResponseCorrelator.java:60)\norg.apache.activemq.broker.TransportConnection.dispatch(TransportConnection.java:1370)\norg.apache.activemq.broker.TransportConnection.processDispatch(TransportConnection.java:889)\norg.apache.activemq.broker.TransportConnection.iterate(TransportConnection.java:935)\norg.apache.activemq.thread.PooledTaskRunner.runTask(PooledTaskRunner.java:133)\norg.apache.activemq.thread.PooledTaskRunner$1.run(PooledTaskRunner.java:48)\njava.util.concurrent.ThreadPoolExecutor$Worker.runTask(Unknown Source)\njava.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)\njava.lang.Thread.run(Unknown Source)\n{noformat}\nSince I received no feedback at all in 2 weeks, I'm asking if this issue seems irrelevant to you or just poorly described. Please, let me know if I can improve this issue's description or how I can raise interest on this. Of course I do not expect to have a _real-time_ solution from you: just a suggestion on how to fix the problem, or at least a comment of any sort.\nThanks.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=matteor","name":"matteor","key":"matteor","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"matteo rulli","active":true,"timeZone":"Etc/UTC"},"created":"2014-07-17T06:24:58.471+0000","updated":"2014-07-17T06:24:58.471+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12725487/comment/14064875","id":"14064875","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=gtully","name":"gtully","key":"gtully","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Gary Tully","active":true,"timeZone":"Etc/UTC"},"body":"Hi, the first thing to do is to get a reliable test case. There are two tests referenced in https://issues.apache.org/jira/browse/AMQ-4328 that may help as starting points. See the source tab to find the relevant commits.\n\nWhat would be important to know is what is different between your scenario and the scenario in the existing tests. is it nio?\n\nIf this is easy to reproduce then we can have a look and sort it out. This area is tricky b/c it has evolved over the years, but having said that it has been stable for some time now.\nIt is great that you are getting in this deep, but it is best to first invest in a junit test case, b/c that will ensure that when the issue is resolved it will stay resolved.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=gtully","name":"gtully","key":"gtully","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Gary Tully","active":true,"timeZone":"Etc/UTC"},"created":"2014-07-17T12:43:19.379+0000","updated":"2014-07-17T12:43:19.379+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12725487/comment/14133752","id":"14133752","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=matteor","name":"matteor","key":"matteor","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"matteo rulli","active":true,"timeZone":"Etc/UTC"},"body":"Ok, we managed to systematically reproduce the issue in a dedicated test-case (please find it as an attachment to this issue, *AMQ5260AdvancedTest.java*). This junit must be inserted in the _org.apache.activemq.bugs_ package within the activemq official src distro (version 5.10.0). In order to reproduce the deadlock in few seconds, the following configuration must be applied (VMArgs for the runnable jar of the junit test launch config):\n{noformat}\n\t-Dorg.apache.activemq.UseDedicatedTaskRunner=false \n\t-Dbroker.ip.address=<broker ip goes here> \n\t-Dnum.producers.spec.topic=5 \n\t-Dnum.consumers.spec.topic=5 \n\t-Dnum.producers.gen.topic=5 \n\t-Dnum.consumers.gen.topic=5 \n\t-Dnum.messages.sec=200\n{noformat}\n\nAt the time being the problem seems related to a concurrence issue triggered by an DemandForwardingBridgeSupport#addSubscription and an DemandForwardingBridgeSupport#onCommand invocations.\n\nTo reproduce the issue it is necessary to create a test forcing such an invocations:\n# create two brokers each one with a duplex network connector to the other one\n# create a generic topic and create some producers publishing on this topic. Moreover, create some consumers consuming from this topic. Half of the producers/consumers are connected to one broker, the other half to the other one. This scenario should trigger the DemandForwardingBridgeSupport#onCommand invocation \n# create some specific topic with one producer and some consumers. The producer is connected to one broker, the consumers to the other one. This scenario should trigger the  DemandForwardingBridgeSupport#addSubscription invocation.\n\nAfter few seconds after the junit start, just press the _detect deadlock_ button in jconsole.\n\nAs a side note, the deadlock shows up both with two duplex net connectors (A to B and B to A) and with a single duplex net connector (A to B only) between the two brokers.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=matteor","name":"matteor","key":"matteor","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"matteo rulli","active":true,"timeZone":"Etc/UTC"},"created":"2014-09-15T10:03:02.686+0000","updated":"2014-09-15T10:06:28.707+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12725487/comment/14147898","id":"14147898","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=matteor","name":"matteor","key":"matteor","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"matteo rulli","active":true,"timeZone":"Etc/UTC"},"body":"Just to better understand what is going on here, could anyone explain the reason *why we need a MutexTransport? What is its role?* The reason why we have a deadlock here is that two different threads try to acquire the same couple of _org.apache.activemq.transport.MutexTransport.writeLock_ in a different order.\nSo in order to work out a decent workaround I would like to understand the role of this  _org.apache.activemq.transport.MutexTransport.writeLock_: what resources is it supposed to protect? \n\nBy the way, did you manage to reproduce the issue on your side using the provided \"test case\"?\n\nThank you.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=matteor","name":"matteor","key":"matteor","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"matteo rulli","active":true,"timeZone":"Etc/UTC"},"created":"2014-09-25T16:04:50.213+0000","updated":"2014-09-25T16:04:50.213+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12725487/comment/14149020","id":"14149020","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=gtully","name":"gtully","key":"gtully","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Gary Tully","active":true,"timeZone":"Etc/UTC"},"body":"@matteo - i have not had the opportunity to delve into this... but for the mutex transport - my understanding is that is there to protect the socket writes - there can be multiple sessions/producers on a connection and they all want to send data concurrently over the socket. Openwire allows interleaving at the command level only. In addition there openwire cache depends on serial inserts on both ends of the channel, the mutex protects that also.\n\ninversion of lock order is a bug. It is great that you are investigating this in such detail, thanks. This code has evolved quite a bit so the more eyes on it the better.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=gtully","name":"gtully","key":"gtully","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Gary Tully","active":true,"timeZone":"Etc/UTC"},"created":"2014-09-26T10:52:54.331+0000","updated":"2014-09-26T10:52:54.331+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12725487/comment/14149239","id":"14149239","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=matteor","name":"matteor","key":"matteor","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"matteo rulli","active":true,"timeZone":"Etc/UTC"},"body":"Thank you for your prompt reply! Now I understand the role of MutexTransport. By the way, I noticed that the deadlock involves two MutexTransport instances that wrap *VMTransport(s)*. Apparently if I apply the following hack\n{code:java}\n--- MutexTransport.java\tThu Jun 05 14:48:36 2014\n+++ MutexTransport.edited.java\tFri Sep 26 09:11:41 2014\n@@ -19,17 +19,31 @@\n import java.io.IOException;\n import java.util.concurrent.locks.ReentrantLock;\n \n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n /**\n  * Thread safe Transport Filter that serializes calls to and from the Transport Stack.\n  */\n public class MutexTransport extends TransportFilter {\n \n-    private final ReentrantLock writeLock = new ReentrantLock();\n+\tprivate static final Logger LOG = LoggerFactory.getLogger(MutexTransport.class);\n+    private final static ReentrantLock vmWriteLock = new ReentrantLock();\n+    private ReentrantLock writeLock;\n     private boolean syncOnCommand;\n \n     public MutexTransport(Transport next) {\n         super(next);\n         this.syncOnCommand = false;\n+        \n+        writeLock = null;\n+        if(next != null && next.toString().startsWith(\"vm://\")){\n+        \twriteLock = vmWriteLock;\n+        \tLOG.error(\"#@mrul# vm transport with mutex: \" + next);\n+        }else{ \n+        \twriteLock = new ReentrantLock();\n+        \tLOG.error(\"#@mrul# non-vm transport with mutex: \" + next);\n+        }\n     }\n \n     public MutexTransport(Transport next, boolean syncOnCommand) {\n{code}\n\nthe deadlock disappears. I noticed that the network bridge create many VMTransport of the form vm://brokerName#<number> using basically three different thread paths and all these local VMTransports trigger many intertwined command exchanges that somehow determine the deadlock:\n\nh1. VMTransports creation PATH 1\n{noformat}\njava.lang.Thread.getStackTrace(Unknown Source)\norg.apache.activemq.transport.vm.VMTransport.<init>(VMTransport.java:73)\norg.apache.activemq.transport.vm.VMTransportServer$1.<init>(VMTransportServer.java:77)\norg.apache.activemq.transport.vm.VMTransportServer.connect(VMTransportServer.java:77)\norg.apache.activemq.transport.vm.VMTransportFactory.doCompositeConnect(VMTransportFactory.java:147)\norg.apache.activemq.transport.vm.VMTransportFactory.doConnect(VMTransportFactory.java:54)\norg.apache.activemq.transport.TransportFactory.connect(TransportFactory.java:64)\norg.apache.activemq.network.NetworkConnector.createLocalTransport(NetworkConnector.java:154)\norg.apache.activemq.network.DiscoveryNetworkConnector.onServiceAdd(DiscoveryNetworkConnector.java:136)\norg.apache.activemq.transport.discovery.simple.SimpleDiscoveryAgent.start(SimpleDiscoveryAgent.java:89)\norg.apache.activemq.network.DiscoveryNetworkConnector.handleStart(DiscoveryNetworkConnector.java:205)\norg.apache.activemq.network.NetworkConnector$1.doStart(NetworkConnector.java:59)\norg.apache.activemq.util.ServiceSupport.start(ServiceSupport.java:55)\norg.apache.activemq.network.NetworkConnector.start(NetworkConnector.java:159)\norg.apache.activemq.broker.BrokerService.startAllConnectors(BrokerService.java:2501)\norg.apache.activemq.broker.BrokerService.doStartBroker(BrokerService.java:693)\norg.apache.activemq.broker.BrokerService.startBroker(BrokerService.java:659)\norg.apache.activemq.broker.BrokerService.start(BrokerService.java:595)\norg.apache.activemq.JmsMultipleBrokersTestSupport.startAllBrokers(JmsMultipleBrokersTestSupport.java:277)\n{noformat}\n\nh1. VMTransports creation PATH 2\n{noformat}\norg.apache.activemq.transport.vm.VMTransport.<init>(VMTransport.java:73)\norg.apache.activemq.transport.vm.VMTransportServer$1.<init>(VMTransportServer.java:77)\norg.apache.activemq.transport.vm.VMTransportServer.connect(VMTransportServer.java:77)\norg.apache.activemq.transport.vm.VMTransportFactory.doCompositeConnect(VMTransportFactory.java:147)\norg.apache.activemq.transport.vm.VMTransportFactory.doConnect(VMTransportFactory.java:54)\norg.apache.activemq.transport.TransportFactory.connect(TransportFactory.java:64)\norg.apache.activemq.network.NetworkBridgeFactory.createLocalTransport(NetworkBridgeFactory.java:80)\norg.apache.activemq.network.DemandForwardingBridgeSupport.start(DemandForwardingBridgeSupport.java:184)\norg.apache.activemq.network.DiscoveryNetworkConnector.onServiceAdd(DiscoveryNetworkConnector.java:152)\norg.apache.activemq.transport.discovery.simple.SimpleDiscoveryAgent.start(SimpleDiscoveryAgent.java:89)\norg.apache.activemq.network.DiscoveryNetworkConnector.handleStart(DiscoveryNetworkConnector.java:205)\norg.apache.activemq.network.NetworkConnector$1.doStart(NetworkConnector.java:59)\norg.apache.activemq.util.ServiceSupport.start(ServiceSupport.java:55)\norg.apache.activemq.network.NetworkConnector.start(NetworkConnector.java:159)\norg.apache.activemq.broker.BrokerService.startAllConnectors(BrokerService.java:2501)\norg.apache.activemq.broker.BrokerService.doStartBroker(BrokerService.java:693)\norg.apache.activemq.broker.BrokerService.startBroker(BrokerService.java:659)\norg.apache.activemq.broker.BrokerService.start(BrokerService.java:595)\norg.apache.activemq.JmsMultipleBrokersTestSupport.startAllBrokers(JmsMultipleBrokersTestSupport.java:277)\n{noformat}\n\nh1. VMTransports creation PATH 3\n{noformat}\njava.lang.Thread.getStackTrace(Unknown Source)\norg.apache.activemq.transport.vm.VMTransport.<init>(VMTransport.java:73)\norg.apache.activemq.transport.vm.VMTransportServer$1.<init>(VMTransportServer.java:77)\norg.apache.activemq.transport.vm.VMTransportServer.connect(VMTransportServer.java:77)\norg.apache.activemq.transport.vm.VMTransportFactory.doCompositeConnect(VMTransportFactory.java:147)\norg.apache.activemq.transport.vm.VMTransportFactory.doConnect(VMTransportFactory.java:54)\norg.apache.activemq.transport.TransportFactory.connect(TransportFactory.java:64)\norg.apache.activemq.network.NetworkBridgeFactory.createLocalTransport(NetworkBridgeFactory.java:80)\norg.apache.activemq.broker.TransportConnection.processBrokerInfo(TransportConnection.java:1321)\norg.apache.activemq.command.BrokerInfo.visit(BrokerInfo.java:126)\norg.apache.activemq.broker.TransportConnection.service(TransportConnection.java:294)\norg.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:148)\norg.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:61)\norg.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:113)\norg.apache.activemq.transport.AbstractInactivityMonitor.onCommand(AbstractInactivityMonitor.java:270)\norg.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83)\norg.apache.activemq.transport.nio.NIOTransport.serviceRead(NIOTransport.java:138)\norg.apache.activemq.transport.nio.NIOTransport$1.onSelect(NIOTransport.java:69)\norg.apache.activemq.transport.nio.SelectorSelection.onSelect(SelectorSelection.java:94)\norg.apache.activemq.transport.nio.SelectorWorker$1.run(SelectorWorker.java:119)\njava.util.concurrent.ThreadPoolExecutor$Worker.runTask(Unknown Source)\njava.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)\njava.lang.Thread.run(Unknown Source)\n{noformat}\n\nh1. VMTransports creation PATH 3, take 2 (cyclic???)\n{noformat}\norg.apache.activemq.broker.TransportConnection.processBrokerInfo(TransportConnection.java:1338)\njava.lang.Thread.getStackTrace(Unknown Source)\norg.apache.activemq.transport.vm.VMTransport.<init>(VMTransport.java:73)\norg.apache.activemq.command.BrokerInfo.visit(BrokerInfo.java:126)            <------------------------------ !!!\norg.apache.activemq.transport.vm.VMTransportServer.connect(VMTransportServer.java:88)\norg.apache.activemq.broker.TransportConnection.service(TransportConnection.java:294)\norg.apache.activemq.transport.vm.VMTransportFactory.doCompositeConnect(VMTransportFactory.java:147)\norg.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:148)\norg.apache.activemq.transport.vm.VMTransportFactory.doConnect(VMTransportFactory.java:54)\norg.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:61)\norg.apache.activemq.transport.TransportFactory.connect(TransportFactory.java:64)\norg.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:113)\norg.apache.activemq.network.NetworkBridgeFactory.createLocalTransport(NetworkBridgeFactory.java:80)\norg.apache.activemq.transport.AbstractInactivityMonitor.onCommand(AbstractInactivityMonitor.java:270)\norg.apache.activemq.broker.TransportConnection.processBrokerInfo(TransportConnection.java:1321)\norg.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83)\norg.apache.activemq.command.BrokerInfo.visit(BrokerInfo.java:126)             <------------------------------ !!!\norg.apache.activemq.transport.nio.NIOTransport.serviceRead(NIOTransport.java:138)\norg.apache.activemq.broker.TransportConnection.service(TransportConnection.java:294)\norg.apache.activemq.transport.nio.NIOTransport$1.onSelect(NIOTransport.java:69)\norg.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:148)\norg.apache.activemq.transport.nio.SelectorSelection.onSelect(SelectorSelection.java:94)\norg.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:61)\norg.apache.activemq.transport.nio.SelectorWorker$1.run(SelectorWorker.java:119)\norg.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:113)\njava.util.concurrent.ThreadPoolExecutor$Worker.runTask(Unknown Source)\njava.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)\njava.lang.Thread.run(Unknown Source)\n{noformat}\n\nSo, as a tentative fix I tried to globally lock VMTransport usage under the assumption that VM transport should be negligible in number with respect to other transports (tcp, nio, etc.) and thus the static lock in VM trans. should not constitute a big performace bottleneck; I added a new constructor in _*MutexTransport*_ in this way:\n{code}\npublic class MutexTransport extends TransportFilter {\n\t// ...\n\tprivate final static ReentrantLock staticWriteLock = new ReentrantLock();\n\tprivate ReentrantLock writeLock = new ReentrantLock();\n\t// ...\n\tpublic MutexTransport(Transport next, boolean syncOnCommand, boolean useStaticLock) {\n\t\tthis(next, syncOnCommand);\n\t\tif(useStaticLock)\n\t\t\twriteLock = staticWriteLock;\n\t}\n{code}\nand I modified the _*org.apache.activemq.transport.vm.VMTransportServer.configure(Transport)*_ implementation in this way:\n{code}\npublic static Transport configure(Transport transport) {\n    transport = new MutexTransport(transport, false, true); // use static locks for VMTransport\n    transport = new ResponseCorrelator(transport);\n    return transport;\n}\n{code}\n\nApparently this solve the problem (anyway I'm going to perform additional tests to double check this). Is it in your opinion a reasonable approach or is it just a _quick and dirty_ solution?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=matteor","name":"matteor","key":"matteor","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"matteo rulli","active":true,"timeZone":"Etc/UTC"},"created":"2014-09-26T14:54:48.998+0000","updated":"2014-09-26T14:54:48.998+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12725487/comment/14160061","id":"14160061","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=matteor","name":"matteor","key":"matteor","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"matteo rulli","active":true,"timeZone":"Etc/UTC"},"body":"After 4 days of tests with the patch that I proposed in the previous comment, the broker is still running without any deadlock.\n\nSo I would like to know from some amq expert whether or not what I call _patch_ can be really considered as a patch or a simple workaround with potential drawbacks.  \n\nThanks.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=matteor","name":"matteor","key":"matteor","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"matteo rulli","active":true,"timeZone":"Etc/UTC"},"created":"2014-10-06T07:29:35.697+0000","updated":"2014-10-06T07:29:35.697+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12725487/comment/14605225","id":"14605225","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=felixehm","name":"felixehm","key":"felixehm","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Felix Ehm","active":true,"timeZone":"Etc/UTC"},"body":"Hi Matteo,\nwhat is the current state in your production environment on this ? Do you use a newer activemq in the meantime or still the same with your fix ?\nThanks,\nFelix","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=felixehm","name":"felixehm","key":"felixehm","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Felix Ehm","active":true,"timeZone":"Etc/UTC"},"created":"2015-06-29T07:10:51.548+0000","updated":"2015-06-29T07:10:51.548+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12725487/comment/14605228","id":"14605228","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=matteor","name":"matteor","key":"matteor","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"matteo rulli","active":true,"timeZone":"Etc/UTC"},"body":"Hi Felix,\nWe still run with the proposed patch. Unfortunately, as you can see here, I never got a feedback about this.\n\nAre you experiencing the same problem in your environment?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=matteor","name":"matteor","key":"matteor","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"matteo rulli","active":true,"timeZone":"Etc/UTC"},"created":"2015-06-29T07:22:46.466+0000","updated":"2015-06-29T07:22:46.466+0000"}],"maxResults":12,"total":12,"startAt":0},"votes":{"self":"https://issues.apache.org/jira/rest/api/2/issue/AMQ-5260/votes","votes":1,"hasVoted":false},"worklog":{"startAt":0,"maxResults":20,"total":0,"worklogs":[]},"customfield_12311820":"0|i1xgyv:"}}