{"expand":"renderedFields,names,schema,operations,editmeta,changelog,versionedRepresentations","id":"12482104","self":"https://issues.apache.org/jira/rest/api/2/issue/12482104","key":"AMQ-1228","fields":{"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype","name":"Bug","subtask":false,"avatarId":21133},"timespent":null,"project":{"self":"https://issues.apache.org/jira/rest/api/2/project/12311210","id":"12311210","key":"AMQ","name":"ActiveMQ","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/projectavatar?pid=12311210&avatarId=10011","24x24":"https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12311210&avatarId=10011","16x16":"https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12311210&avatarId=10011","32x32":"https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12311210&avatarId=10011"},"projectCategory":{"self":"https://issues.apache.org/jira/rest/api/2/projectCategory/11160","id":"11160","description":"ActiveMQ","name":"ActiveMQ"}},"fixVersions":[],"aggregatetimespent":null,"resolution":{"self":"https://issues.apache.org/jira/rest/api/2/resolution/3","id":"3","description":"The problem is a duplicate of an existing issue.","name":"Duplicate"},"customfield_12312322":null,"customfield_12310220":"2007-09-10T18:16:06.909+0000","customfield_12312520":null,"customfield_12312323":null,"customfield_12312521":"Mon Sep 10 18:16:06 UTC 2007","customfield_12310420":"43756","customfield_12312320":null,"customfield_12310222":"1_*:*_1_*:*_4434769_*|*_6_*:*_1_*:*_0","customfield_12312321":null,"resolutiondate":"2007-04-12T15:16:34.592+0000","workratio":-1,"customfield_12312328":null,"customfield_12312329":null,"customfield_12312923":null,"customfield_12312326":null,"customfield_12312920":null,"customfield_12310300":null,"customfield_12312327":null,"customfield_12312921":null,"customfield_12312324":null,"customfield_12312720":null,"customfield_12312325":null,"lastViewed":null,"watches":{"self":"https://issues.apache.org/jira/rest/api/2/issue/AMQ-1228/watchers","watchCount":2,"isWatching":false},"created":"2007-04-12T14:02:39.823+0000","priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.svg","name":"Major","id":"3"},"labels":[],"customfield_12312333":null,"customfield_12312334":null,"customfield_12313422":"false","customfield_12310310":"0.0","customfield_12312331":null,"customfield_12312332":null,"timeestimate":null,"aggregatetimeoriginalestimate":null,"customfield_12311120":null,"customfield_12312330":null,"versions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12315608","id":"12315608","description":"","name":"4.0 RC2","archived":false,"released":true,"releaseDate":"2006-04-07"},{"self":"https://issues.apache.org/jira/rest/api/2/version/12315611","id":"12315611","description":"","name":"4.0.1","archived":false,"released":true,"releaseDate":"2006-06-16"}],"issuelinks":[{"id":"12334958","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12334958","type":{"id":"12310000","name":"Duplicate","inward":"is duplicated by","outward":"duplicates","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/12310000"},"outwardIssue":{"id":"12483417","key":"AMQ-895","self":"https://issues.apache.org/jira/rest/api/2/issue/12483417","fields":{"summary":"JMS to JMS Bridge never reconnects under remote broker restarts.","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/5","description":"A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/resolved.png","name":"Resolved","id":"5","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Done"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.svg","name":"Major","id":"3"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype","name":"Bug","subtask":false,"avatarId":21133}}}}],"customfield_12312339":null,"assignee":null,"customfield_12312337":null,"customfield_12312338":null,"updated":"2007-09-10T18:16:06.979+0000","customfield_12312335":null,"customfield_12312336":null,"status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Done"}},"components":[{"self":"https://issues.apache.org/jira/rest/api/2/component/12313892","id":"12313892","name":"Broker"}],"timeoriginalestimate":null,"customfield_12310080":null,"description":"\nI'm using ActiveMQ (4.0.1) JMS to JMS Bridge functionality to connect to a  SunMQ JMS Broker (3.6 SP3  (Build 02-A)). I'm using two queues, an input and an output one, with the following configuration:\n\n\n    <jmsBridgeConnectors>\n      <jmsQueueConnector outboundQueueConnectionFactory=\"#REMOTE\">\n      <outboundQueueBridges>\n        <outboundQueueBridge outboundQueueName=\"SUNRECV\"/>\n      </outboundQueueBridges>\n      <inboundQueueBridges>\n        <inboundQueueBridge inboundQueueName=\"SUNSEND\"/>\n      </inboundQueueBridges>\n      </jmsQueueConnector>\n    </jmsBridgeConnectors>\n\n\nThe system works really well until the SunMQ broker needed to be restarted. This is what I found:\n1.-ActiveMQ is not aware of the remote broker shutdown. I waited for a while, but no log on ActiveMQ indicates knowledge about the new situation.\n2.-When I send a message to the output queue SUNRECV, ActiveMQ complains that the producer is closed:\n\n[ERROR][2006/08/25.09:47:12.039][ActiveMQ Session Task]failed to forward message: ActiveMQTextMessage {commandId = 5, responseRequired = false, messageId = ID:trabucco-43457-1156491843149-3:4:1:1:1, originalDestination = null, originalTransactionId = null, producerId = ID:trabucco-43457-1156491843149-3:4:1:1, destination = queue://SUNRECV, transactionId = null, expiration = 0, timestamp = 1156492032027, arrival = 0, correlationId = null, replyTo = null, persistent = false, type = null, priority = 0, groupID = null, groupSequence = 0, targetConsumerId = null, compressed = false, userID = null, content = null, marshalledProperties = null, dataStructure = null, redeliveryCounter = 0, size = 2, properties = null, readOnlyProperties = true, readOnlyBody = true, text = 1}([C4064]: Cannot perform operation, producer is closed.)\n\n After this, it is automatically queueing messages without sending them, showing the log:\n\n[DEBUG][2006/08/25.09:47:42.721][RMI TCP Connection(4)-10.95.89.20]No subscriptions registered, will not dispatch message at this time.\n\n Even if SunMQ is started again, ActiveMQ is not detecting the new situation, and continues queueing messages sent to SUNRECV.\n\nPlease, make me know if more information is needed to understand the situation.\n","customfield_10010":null,"timetracking":{},"customfield_12312026":null,"customfield_12312023":null,"customfield_12312024":null,"customfield_12312340":null,"attachment":[],"aggregatetimeestimate":null,"customfield_12312341":null,"customfield_12312220":null,"customfield_12312022":null,"customfield_12310041":null,"customfield_12310921":null,"customfield_12310920":"172200","customfield_12312823":null,"summary":"CLONE -JMS to JMS Bridge never reconnects under remote broker restarts and connections are not closed.","creator":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=wrpkm","name":"wrpkm","key":"wrpkm","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"William MacDonald","active":true,"timeZone":"Etc/UTC"},"subtasks":[],"customfield_12310291":null,"reporter":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=wrpkm","name":"wrpkm","key":"wrpkm","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"William MacDonald","active":true,"timeZone":"Etc/UTC"},"customfield_12310290":null,"aggregateprogress":{"progress":0,"total":0},"customfield_12311024":null,"environment":null,"customfield_12313520":null,"customfield_12311020":null,"duedate":null,"customfield_12310250":null,"progress":{"progress":0,"total":0},"comment":{"comments":[{"self":"https://issues.apache.org/jira/rest/api/2/issue/12482104/comment/12938892","id":"12938892","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=wrpkm","name":"wrpkm","key":"wrpkm","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"William MacDonald","active":true,"timeZone":"Etc/UTC"},"body":"I have come across this issue in an attempt to use the JMS to JMS bridge in version 4.1.1. \nI am trying to bridge ActiveMQ to Websphere MQ and I am running the bridge in its own process and everything connects and works properly.\n\nThe remote Websphere MQ broker is being shutdown every night for backups and when this occurs the bridge does not see the disconnect of the remote broker.\n\nI performed a netstat of the socket connections to see if the bridge was still attempting a connection and found that the socket connections to the remote broker are in a CLOSE_WAIT state.\n\nIf you have any ideas or wish to try a test I am willing to do what every is needed to resolve this issue.\n\nThanks,\n\nWilliam\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=wrpkm","name":"wrpkm","key":"wrpkm","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"William MacDonald","active":true,"timeZone":"Etc/UTC"},"created":"2007-04-12T15:11:45.502+0000","updated":"2007-04-12T15:11:45.502+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12482104/comment/12939019","id":"12939019","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=sunnyliu","name":"sunnyliu","key":"sunnyliu","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sunny Liu","active":true,"timeZone":"Etc/UTC"},"body":"I have experience same problem with openJMS connection. However, I have fixed it in org.apache.activemq.network.jms.JmsQueueConnector and org.apache.activemq.network.jms.JmsTopicConnector. I have tested new change it work fine for me.\n\nHere is code.\n\n/**\n *\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.activemq.network.jms;\n\nimport javax.jms.Connection;\nimport javax.jms.Destination;\nimport javax.jms.ExceptionListener;\nimport javax.jms.JMSException;\nimport javax.jms.Session;\nimport javax.jms.Topic;\nimport javax.jms.TopicConnection;\nimport javax.jms.TopicConnectionFactory;\nimport javax.jms.TopicSession;\nimport javax.naming.NamingException;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\n\n/**\n * A Bridge to other JMS Topic providers\n * \n * @org.apache.xbean.XBean\n * \n * @version $Revision: 1.1.1.1 $\n */\npublic class JmsTopicConnector extends JmsConnector\nimplements ExceptionListener\n{\n    private static final Log log=LogFactory.getLog(JmsTopicConnector.class);\n    private String outboundTopicConnectionFactoryName;\n    private String localConnectionFactoryName;\n    private TopicConnectionFactory outboundTopicConnectionFactory;\n    private TopicConnectionFactory localTopicConnectionFactory;\n    private TopicConnection outboundTopicConnection;\n    private TopicConnection localTopicConnection;\n    private InboundTopicBridge[] inboundTopicBridges;\n    private OutboundTopicBridge[] outboundTopicBridges;\n    \n    public boolean init(){\n        boolean result=super.init();\n        if(result){\n            try{\n                initializeForeignTopicConnection();\n                initializeLocalTopicConnection();\n                initializeInboundJmsMessageConvertor();\n                initializeOutboundJmsMessageConvertor();\n                initializeInboundTopicBridges();\n                initializeOutboundTopicBridges();\n            }catch(Exception e){\n                log.error(\"Failed to initialize the JMSConnector\",e);\n            }\n        }\n        return result;\n    }   \n    \n\n    protected boolean reInit()\n    {\n    \tboolean ret = false;\n    \ttry{            \n    \t\tif(outboundTopicConnectionFactoryName!=null){\n            \tthis.outboundTopicConnection = null;\n            \tthis.outboundTopicConnectionFactory = null;\n            }\n    \t\tinitializeForeignTopicConnection();\n            initializeLocalTopicConnection();\n            initializeInboundJmsMessageConvertor();\n            initializeOutboundJmsMessageConvertor();\n            initializeInboundTopicBridges();\n            initializeOutboundTopicBridges();\n            ret = true;\n        }catch(Exception e){\n            ret = false;\n        \tlog.error(\"Failed to initialize the JMSConnector\",e);\n        }\n        return ret;\n    }\n    \n    public void onException(JMSException jmsException)\n    {\n    \tif(started.get()) started.compareAndSet(true, false);\n    \tboolean  initSuccess = false;\n    \tdo{\n    \t\tinitSuccess = reInit();\n\t\t\tif(!initSuccess){\n\t\t\t\tlog.warn(\"Still not able to connect to foreign server, wait another 5 second and try again.\");\n\t\t\t\ttry {\t\t\t\t\n\t        \t\tThread.sleep(5000);\n\t\t\t\t} catch (Exception e) {\t\t\t\t\t\n\t\t\t\t\t;\n\t\t\t\t}\t\t\t\t\n\t\t\t}else{\t\t\t\t\n\t\t\t\tlog.warn(\"reconnect to foreign server successfully.\");\t\n\t\t\t\ttry {\n\t\t\t\t\tthis.start();\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\tinitSuccess = false;\n\t\t\t\t\tlog.warn(\"Failed to restart.\", e);\n\t\t\t\t}\n\t\t\t}\n\t\t}while(!initSuccess);\n\t\t\n\t}\n    \n    /**\n     * @return Returns the inboundTopicBridges.\n     */\n    public InboundTopicBridge[] getInboundTopicBridges(){\n        return inboundTopicBridges;\n    }\n\n    /**\n     * @param inboundTopicBridges\n     *            The inboundTopicBridges to set.\n     */\n    public void setInboundTopicBridges(InboundTopicBridge[] inboundTopicBridges){\n        this.inboundTopicBridges=inboundTopicBridges;\n    }\n\n    /**\n     * @return Returns the outboundTopicBridges.\n     */\n    public OutboundTopicBridge[] getOutboundTopicBridges(){\n        return outboundTopicBridges;\n    }\n\n    /**\n     * @param outboundTopicBridges\n     *            The outboundTopicBridges to set.\n     */\n    public void setOutboundTopicBridges(OutboundTopicBridge[] outboundTopicBridges){\n        this.outboundTopicBridges=outboundTopicBridges;\n    }\n\n    /**\n     * @return Returns the localTopicConnectionFactory.\n     */\n    public TopicConnectionFactory getLocalTopicConnectionFactory(){\n        return localTopicConnectionFactory;\n    }\n\n    /**\n     * @param localTopicConnectionFactory\n     *            The localTopicConnectionFactory to set.\n     */\n    public void setLocalTopicConnectionFactory(TopicConnectionFactory localConnectionFactory){\n        this.localTopicConnectionFactory=localConnectionFactory;\n    }\n\n    /**\n     * @return Returns the outboundTopicConnectionFactory.\n     */\n    public TopicConnectionFactory getOutboundTopicConnectionFactory(){\n        return outboundTopicConnectionFactory;\n    }\n\n    /**\n     * @return Returns the outboundTopicConnectionFactoryName.\n     */\n    public String getOutboundTopicConnectionFactoryName(){\n        return outboundTopicConnectionFactoryName;\n    }\n\n    /**\n     * @param outboundTopicConnectionFactoryName\n     *            The outboundTopicConnectionFactoryName to set.\n     */\n    public void setOutboundTopicConnectionFactoryName(String foreignTopicConnectionFactoryName){\n        this.outboundTopicConnectionFactoryName=foreignTopicConnectionFactoryName;\n    }\n\n    /**\n     * @return Returns the localConnectionFactoryName.\n     */\n    public String getLocalConnectionFactoryName(){\n        return localConnectionFactoryName;\n    }\n\n    /**\n     * @param localConnectionFactoryName\n     *            The localConnectionFactoryName to set.\n     */\n    public void setLocalConnectionFactoryName(String localConnectionFactoryName){\n        this.localConnectionFactoryName=localConnectionFactoryName;\n    }\n\n    /**\n     * @return Returns the localTopicConnection.\n     */\n    public TopicConnection getLocalTopicConnection(){\n        return localTopicConnection;\n    }\n\n    /**\n     * @param localTopicConnection\n     *            The localTopicConnection to set.\n     */\n    public void setLocalTopicConnection(TopicConnection localTopicConnection){\n        this.localTopicConnection=localTopicConnection;\n    }\n\n    /**\n     * @return Returns the outboundTopicConnection.\n     */\n    public TopicConnection getOutboundTopicConnection(){\n        return outboundTopicConnection;\n    }\n\n    /**\n     * @param outboundTopicConnection\n     *            The outboundTopicConnection to set.\n     */\n    public void setOutboundTopicConnection(TopicConnection foreignTopicConnection){\n        this.outboundTopicConnection=foreignTopicConnection;\n    }\n\n    /**\n     * @param outboundTopicConnectionFactory\n     *            The outboundTopicConnectionFactory to set.\n     */\n    public void setOutboundTopicConnectionFactory(TopicConnectionFactory foreignTopicConnectionFactory){\n        this.outboundTopicConnectionFactory=foreignTopicConnectionFactory;\n    }\n\n\n    public void restartProducerConnection() throws NamingException, JMSException {\n        outboundTopicConnection = null;\n        initializeForeignTopicConnection();\n    }\n\n    protected void initializeForeignTopicConnection() throws NamingException,JMSException{\n        if(outboundTopicConnection==null){\n            // get the connection factories\n            if(outboundTopicConnectionFactory==null){\n                // look it up from JNDI\n                if(outboundTopicConnectionFactoryName!=null){\n                    outboundTopicConnectionFactory=(TopicConnectionFactory) jndiOutboundTemplate.lookup(\n                                    outboundTopicConnectionFactoryName,TopicConnectionFactory.class);\n                    if(outboundUsername!=null){\n                        outboundTopicConnection=outboundTopicConnectionFactory.createTopicConnection(outboundUsername,\n                                        outboundPassword);\n                    }else{\n                        outboundTopicConnection=outboundTopicConnectionFactory.createTopicConnection();\n                    }\n                }else {\n                    throw new JMSException(\"Cannot create localConnection - no information\");\n                }\n            }else {\n                if(outboundUsername!=null){\n                    outboundTopicConnection=outboundTopicConnectionFactory.createTopicConnection(outboundUsername,\n                                    outboundPassword);\n                }else{\n                    outboundTopicConnection=outboundTopicConnectionFactory.createTopicConnection();\n                }\n            }\n        }\n        outboundTopicConnection.start();\n    }\n\n    protected void initializeLocalTopicConnection() throws NamingException,JMSException{\n        if(localTopicConnection==null){\n            // get the connection factories\n            if(localTopicConnectionFactory==null){\n                if(embeddedConnectionFactory==null){\n                    // look it up from JNDI\n                    if(localConnectionFactoryName!=null){\n                        localTopicConnectionFactory=(TopicConnectionFactory) jndiLocalTemplate.lookup(\n                                        localConnectionFactoryName,TopicConnectionFactory.class);\n                        if(localUsername!=null){\n                            localTopicConnection=localTopicConnectionFactory.createTopicConnection(localUsername,\n                                            localPassword);\n                        }else{\n                            localTopicConnection=localTopicConnectionFactory.createTopicConnection();\n                        }\n                    }else {\n                        throw new JMSException(\"Cannot create localConnection - no information\");\n                    }\n                }else{\n                    localTopicConnection = embeddedConnectionFactory.createTopicConnection();\n                }\n            }else {\n                if(localUsername!=null){\n                    localTopicConnection=localTopicConnectionFactory.createTopicConnection(localUsername,\n                                    localPassword);\n                }else{\n                    localTopicConnection=localTopicConnectionFactory.createTopicConnection();\n                }\n            }\n        }\n        localTopicConnection.start();\n    }\n    \n    protected void initializeInboundJmsMessageConvertor(){\n    \tinboundMessageConvertor.setConnection(localTopicConnection);\n    }\n    \n    protected void initializeOutboundJmsMessageConvertor(){\n    \toutboundMessageConvertor.setConnection(outboundTopicConnection);\n    }\n\n    protected void initializeInboundTopicBridges() throws JMSException{\n        if(inboundTopicBridges!=null){\n            TopicSession outboundSession = outboundTopicConnection.createTopicSession(false,Session.AUTO_ACKNOWLEDGE);\n            TopicSession localSession = localTopicConnection.createTopicSession(false,Session.AUTO_ACKNOWLEDGE);\n            for(int i=0;i<inboundTopicBridges.length;i++){\n                InboundTopicBridge bridge=inboundTopicBridges[i];\n                String localTopicName=bridge.getLocalTopicName();          \n                Topic activemqTopic=createActiveMQTopic(localSession,localTopicName);\n                String topicName=bridge.getInboundTopicName();\n                Topic foreignTopic=createForeignTopic(outboundSession,topicName);\n                bridge.setConsumerTopic(foreignTopic);\n                bridge.setProducerTopic(activemqTopic);\n                bridge.setProducerConnection(localTopicConnection);\n                bridge.setConsumerConnection(outboundTopicConnection);\n                if(bridge.getJmsMessageConvertor()==null){\n                    bridge.setJmsMessageConvertor(getInboundMessageConvertor());\n                }\n                bridge.setJmsConnector(this);\n                addInboundBridge(bridge);\n            }\n            outboundSession.close();\n            localSession.close();\n        }\n    }\n\n    protected void initializeOutboundTopicBridges() throws JMSException{\n        if(outboundTopicBridges!=null){\n            TopicSession outboundSession = outboundTopicConnection.createTopicSession(false,Session.AUTO_ACKNOWLEDGE);\n            TopicSession localSession = localTopicConnection.createTopicSession(false,Session.AUTO_ACKNOWLEDGE);\n            for(int i=0;i<outboundTopicBridges.length;i++){\n                OutboundTopicBridge bridge=outboundTopicBridges[i];\n                String localTopicName=bridge.getLocalTopicName();\n                Topic activemqTopic=createActiveMQTopic(localSession,localTopicName);\n                String topicName=bridge.getOutboundTopicName();\n                Topic foreignTopic=createForeignTopic(outboundSession,topicName);\n                bridge.setConsumerTopic(activemqTopic);\n                bridge.setProducerTopic(foreignTopic);\n                bridge.setProducerConnection(outboundTopicConnection);\n                bridge.setConsumerConnection(localTopicConnection);\n                if(bridge.getJmsMessageConvertor()==null){\n                    bridge.setJmsMessageConvertor(getOutboundMessageConvertor());\n                }\n                bridge.setJmsConnector(this);\n                addOutboundBridge(bridge);\n            }\n            outboundSession.close();\n            localSession.close();\n        }\n    }\n    \n    protected  Destination createReplyToBridge(Destination destination, Connection replyToProducerConnection, Connection replyToConsumerConnection){\n    \tTopic replyToProducerTopic =(Topic)destination;\n    \tboolean isInbound = replyToProducerConnection.equals(localTopicConnection);\n    \t\n    \tif(isInbound){\n    \t\tInboundTopicBridge bridge = (InboundTopicBridge) replyToBridges.get(replyToProducerTopic);\n    \t\tif (bridge == null){\n    \t\t\tbridge = new InboundTopicBridge(){\n    \t\t\t\tprotected Destination processReplyToDestination (Destination destination){\n    \t\t\t\t\treturn null;\n    \t\t\t\t}\n    \t\t\t};\n    \t\t\ttry{\n    \t\t\t\tTopicSession replyToConsumerSession = ((TopicConnection)replyToConsumerConnection).createTopicSession(false,Session.AUTO_ACKNOWLEDGE);\n    \t\t\t\tTopic replyToConsumerTopic = replyToConsumerSession.createTemporaryTopic();\n    \t\t\t\treplyToConsumerSession.close();\n    \t\t\t\tbridge.setConsumerTopic(replyToConsumerTopic);\n    \t\t\t\tbridge.setProducerTopic(replyToProducerTopic);\n    \t\t\t\tbridge.setProducerConnection((TopicConnection)replyToProducerConnection);\n    \t\t\t\tbridge.setConsumerConnection((TopicConnection)replyToConsumerConnection);\n    \t\t\t\tbridge.setDoHandleReplyTo(false);\n    \t\t\t\tif(bridge.getJmsMessageConvertor()==null){\n    \t\t\t\t\tbridge.setJmsMessageConvertor(getInboundMessageConvertor());\n    \t\t\t\t}\n    \t\t\t\tbridge.setJmsConnector(this);\n    \t\t\t\tbridge.start();\n    \t\t\t\tlog.info(\"Created replyTo bridge for \" + replyToProducerTopic);\n    \t\t\t}catch(Exception e){\n    \t\t\t\tlog.error(\"Failed to create replyTo bridge for topic: \" + replyToProducerTopic, e);\n    \t\t\t\treturn null;\n    \t\t\t}\n    \t\t\treplyToBridges.put(replyToProducerTopic, bridge);\n    \t\t}\n    \t\treturn bridge.getConsumerTopic();\n    \t}else{\n    \t\tOutboundTopicBridge bridge = (OutboundTopicBridge) replyToBridges.get(replyToProducerTopic);\n    \t\tif (bridge == null){\n    \t\t\tbridge = new OutboundTopicBridge(){\n    \t\t\t\tprotected Destination processReplyToDestination (Destination destination){\n    \t\t\t\t\treturn null;\n    \t\t\t\t}\n    \t\t\t};\n    \t\t\ttry{\n    \t\t\t\tTopicSession replyToConsumerSession = ((TopicConnection)replyToConsumerConnection).createTopicSession(false,Session.AUTO_ACKNOWLEDGE);\n    \t\t\t\tTopic replyToConsumerTopic = replyToConsumerSession.createTemporaryTopic();\n    \t\t\t\treplyToConsumerSession.close();\n    \t\t\t\tbridge.setConsumerTopic(replyToConsumerTopic);\n    \t\t\t\tbridge.setProducerTopic(replyToProducerTopic);\n    \t\t\t\tbridge.setProducerConnection((TopicConnection)replyToProducerConnection);\n    \t\t\t\tbridge.setConsumerConnection((TopicConnection)replyToConsumerConnection);\n    \t\t\t\tbridge.setDoHandleReplyTo(false);\n    \t\t\t\tif(bridge.getJmsMessageConvertor()==null){\n    \t\t\t\t\tbridge.setJmsMessageConvertor(getOutboundMessageConvertor());\n    \t\t\t\t}\n    \t\t\t\tbridge.setJmsConnector(this);\n    \t\t\t\tbridge.start();\n    \t\t\t\tlog.info(\"Created replyTo bridge for \" + replyToProducerTopic);\n    \t\t\t}catch(Exception e){\n    \t\t\t\tlog.error(\"Failed to create replyTo bridge for topic: \" + replyToProducerTopic, e);\n    \t\t\t\treturn null;\n    \t\t\t}\n    \t\t\treplyToBridges.put(replyToProducerTopic, bridge);\n    \t\t}\n    \t\treturn bridge.getConsumerTopic();\n    \t}\t\t\n    }\n    \n    protected Topic createActiveMQTopic(TopicSession session,String topicName) throws JMSException{\n        return session.createTopic(topicName);\n    }\n    \n    protected Topic createForeignTopic(TopicSession session,String topicName) throws JMSException{\n        Topic result = null;\n        try{\n            result = session.createTopic(topicName);\n        }catch(JMSException e){\n            //look-up the Topic\n            try{\n                result = (Topic) jndiOutboundTemplate.lookup(topicName, Topic.class);\n            }catch(NamingException e1){\n                String errStr = \"Failed to look-up Topic for name: \" + topicName;\n                log.error(errStr,e);\n                JMSException jmsEx =  new JMSException(errStr);\n                jmsEx.setLinkedException(e1);\n                throw jmsEx;\n            }\n        }\n        return result;\n    }\n\n    \n}\n\n\n///======================================================\n\n\n/**\n *\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.activemq.network.jms;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\n\nimport javax.jms.Connection;\nimport javax.jms.Destination;\nimport javax.jms.ExceptionListener;\nimport javax.jms.JMSException;\nimport javax.jms.Queue;\nimport javax.jms.QueueConnection;\nimport javax.jms.QueueConnectionFactory;\nimport javax.jms.QueueSession;\nimport javax.jms.Session;\nimport javax.naming.NamingException;\n/**\n * A Bridge to other JMS Queue providers\n * \n * @org.apache.xbean.XBean\n *\n * @version $Revision: 1.1.1.1 $\n */\npublic class JmsQueueConnector extends JmsConnector\nimplements ExceptionListener\n{\n    private static final Log log=LogFactory.getLog(JmsQueueConnector.class);\n    private String outboundQueueConnectionFactoryName;\n    private String localConnectionFactoryName;\n    \n    private QueueConnectionFactory outboundQueueConnectionFactory;\n    private QueueConnectionFactory localQueueConnectionFactory;\n    \n    private QueueConnection outboundQueueConnection;\n    private QueueConnection localQueueConnection;\n    \n    private InboundQueueBridge[] inboundQueueBridges;\n    private OutboundQueueBridge[] outboundQueueBridges;   \n\n    public boolean init(){\n        boolean result=super.init();\n        if(result){\n            try{\n                initializeForeignQueueConnection();\n                initializeLocalQueueConnection();\n                initializeInboundJmsMessageConvertor();\n                initializeOutboundJmsMessageConvertor();\n                initializeInboundQueueBridges();\n                initializeOutboundQueueBridges();\n            }catch(Exception e){                \n            \tlog.error(\"Failed to initialize the JMSConnector\",e);\n            }\n        }\n        return result;\n    }   \n    \n    protected boolean reInit()\n    {\n    \tboolean ret = false;\n    \ttry{            \n    \t\tif(outboundQueueConnectionFactoryName!=null){\n            \tthis.outboundQueueConnection = null;\n            \tthis.outboundQueueConnectionFactory = null;\n            }\n            initializeForeignQueueConnection();\n            initializeLocalQueueConnection();\n            initializeInboundJmsMessageConvertor();\n            initializeOutboundJmsMessageConvertor();\n            initializeInboundQueueBridges();\n            initializeOutboundQueueBridges();\n            ret = true;\n        }catch(Exception e){\n            ret = false;\n        \tlog.error(\"Failed to initialize the JMSConnector\",e);\n        }\n        return ret;\n    }\n    \n    public void onException(JMSException jmsException)\n    {\n    \tif(started.get()) started.compareAndSet(true, false);\n    \tboolean  initSuccess = false;\n    \tdo{\n    \t\tinitSuccess = reInit();\n\t\t\tif(!initSuccess){\n\t\t\t\tlog.warn(\"Still not able to connect to foreign server, wait another 5 second and try again.\");\n\t\t\t\ttry {\t\t\t\t\n\t        \t\tThread.sleep(5000);\n\t\t\t\t} catch (Exception e) {\t\t\t\t\t\n\t\t\t\t\t;\n\t\t\t\t}\t\t\t\t\n\t\t\t}else{\t\t\t\t\n\t\t\t\tlog.warn(\"reconnect to foreign server successfully.\");\t\n\t\t\t\ttry {\n\t\t\t\t\tthis.start();\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\tinitSuccess = false;\n\t\t\t\t\tlog.warn(\"Failed to restart.\", e);\n\t\t\t\t}\n\t\t\t}\n\t\t}while(!initSuccess);\n\t\t\n\t}\n    \n    /**\n     * @return Returns the inboundQueueBridges.\n     */\n    public InboundQueueBridge[] getInboundQueueBridges(){\n        return inboundQueueBridges;\n    }\n\n    /**\n     * @param inboundQueueBridges\n     *            The inboundQueueBridges to set.\n     */\n    public void setInboundQueueBridges(InboundQueueBridge[] inboundQueueBridges){\n        this.inboundQueueBridges=inboundQueueBridges;\n    }\n\n    /**\n     * @return Returns the outboundQueueBridges.\n     */\n    public OutboundQueueBridge[] getOutboundQueueBridges(){\n        return outboundQueueBridges;\n    }\n\n    /**\n     * @param outboundQueueBridges\n     *            The outboundQueueBridges to set.\n     */\n    public void setOutboundQueueBridges(OutboundQueueBridge[] outboundQueueBridges){\n        this.outboundQueueBridges=outboundQueueBridges;\n    }\n\n    /**\n     * @return Returns the localQueueConnectionFactory.\n     */\n    public QueueConnectionFactory getLocalQueueConnectionFactory(){\n        return localQueueConnectionFactory;\n    }\n\n    /**\n     * @param localQueueConnectionFactory\n     *            The localQueueConnectionFactory to set.\n     */\n    public void setLocalQueueConnectionFactory(QueueConnectionFactory localConnectionFactory){\n        this.localQueueConnectionFactory=localConnectionFactory;\n    }\n\n    /**\n     * @return Returns the outboundQueueConnectionFactory.\n     */\n    public QueueConnectionFactory getOutboundQueueConnectionFactory(){\n        return outboundQueueConnectionFactory;\n    }\n\n    /**\n     * @return Returns the outboundQueueConnectionFactoryName.\n     */\n    public String getOutboundQueueConnectionFactoryName(){\n        return outboundQueueConnectionFactoryName;\n    }\n\n    /**\n     * @param outboundQueueConnectionFactoryName\n     *            The outboundQueueConnectionFactoryName to set.\n     */\n    public void setOutboundQueueConnectionFactoryName(String foreignQueueConnectionFactoryName){\n        this.outboundQueueConnectionFactoryName=foreignQueueConnectionFactoryName;\n    }\n\n    /**\n     * @return Returns the localConnectionFactoryName.\n     */\n    public String getLocalConnectionFactoryName(){\n        return localConnectionFactoryName;\n    }\n\n    /**\n     * @param localConnectionFactoryName\n     *            The localConnectionFactoryName to set.\n     */\n    public void setLocalConnectionFactoryName(String localConnectionFactoryName){\n        this.localConnectionFactoryName=localConnectionFactoryName;\n    }\n\n    /**\n     * @return Returns the localQueueConnection.\n     */\n    public QueueConnection getLocalQueueConnection(){\n        return localQueueConnection;\n    }\n\n    /**\n     * @param localQueueConnection\n     *            The localQueueConnection to set.\n     */\n    public void setLocalQueueConnection(QueueConnection localQueueConnection){\n        this.localQueueConnection=localQueueConnection;\n    }\n\n    /**\n     * @return Returns the outboundQueueConnection.\n     */\n    public QueueConnection getOutboundQueueConnection(){\n        return outboundQueueConnection;\n    }\n\n    /**\n     * @param outboundQueueConnection\n     *            The outboundQueueConnection to set.\n     */\n    public void setOutboundQueueConnection(QueueConnection foreignQueueConnection){\n        this.outboundQueueConnection=foreignQueueConnection;\n    }\n\n    /**\n     * @param outboundQueueConnectionFactory\n     *            The outboundQueueConnectionFactory to set.\n     */\n    public void setOutboundQueueConnectionFactory(QueueConnectionFactory foreignQueueConnectionFactory){\n        this.outboundQueueConnectionFactory=foreignQueueConnectionFactory;\n    }\n\n    public void restartProducerConnection() throws NamingException, JMSException {\n        outboundQueueConnection = null;\n        initializeForeignQueueConnection();\n        \n    }\n\n    protected void initializeForeignQueueConnection() throws NamingException,JMSException{\n        \n    \tif(outboundQueueConnection==null){\n            // get the connection factories\n            if(outboundQueueConnectionFactory==null){\n                // look it up from JNDI\n                if(outboundQueueConnectionFactoryName!=null){\n                    outboundQueueConnectionFactory=(QueueConnectionFactory) jndiOutboundTemplate.lookup(\n                                    outboundQueueConnectionFactoryName,QueueConnectionFactory.class);\n                    if(outboundUsername!=null){\n                        outboundQueueConnection=outboundQueueConnectionFactory.createQueueConnection(outboundUsername,\n                                        outboundPassword);\n                    }else{\n                        outboundQueueConnection=outboundQueueConnectionFactory.createQueueConnection();\n                    }\n                }else {\n                    throw new JMSException(\"Cannot create localConnection - no information\");\n                }\n            }else {\n                if(outboundUsername!=null){\n                    outboundQueueConnection=outboundQueueConnectionFactory.createQueueConnection(outboundUsername,\n                                    outboundPassword);\n                }else{\n                    outboundQueueConnection=outboundQueueConnectionFactory.createQueueConnection();\n                }\n            }\n        }\n        outboundQueueConnection.start();\n        outboundQueueConnection.setExceptionListener(this);\n    }\n\n    protected void initializeLocalQueueConnection() throws NamingException,JMSException{\n        if(localQueueConnection==null){\n            // get the connection factories\n            if(localQueueConnectionFactory==null){\n                if(embeddedConnectionFactory==null){\n                    // look it up from JNDI\n                    if(localConnectionFactoryName!=null){\n                        localQueueConnectionFactory=(QueueConnectionFactory) jndiLocalTemplate.lookup(\n                                        localConnectionFactoryName,QueueConnectionFactory.class);\n                        if(localUsername!=null){\n                            localQueueConnection=localQueueConnectionFactory.createQueueConnection(localUsername,\n                                            localPassword);\n                        }else{\n                            localQueueConnection=localQueueConnectionFactory.createQueueConnection();\n                        }\n                    }else {\n                        throw new JMSException(\"Cannot create localConnection - no information\");\n                    }\n                }else{\n                    localQueueConnection = embeddedConnectionFactory.createQueueConnection();\n                }\n            }else {\n                if(localUsername!=null){\n                    localQueueConnection=localQueueConnectionFactory.createQueueConnection(localUsername,\n                                    localPassword);\n                }else{\n                    localQueueConnection=localQueueConnectionFactory.createQueueConnection();\n                }\n            }\n        }\n        localQueueConnection.start();\n    }\n    \n    protected void initializeInboundJmsMessageConvertor(){\n    \tinboundMessageConvertor.setConnection(localQueueConnection);\n    }\n    \n    protected void initializeOutboundJmsMessageConvertor(){\n    \toutboundMessageConvertor.setConnection(outboundQueueConnection);\n    }\n\n    protected void initializeInboundQueueBridges() throws JMSException{\n        if(inboundQueueBridges!=null){\n            QueueSession outboundSession = outboundQueueConnection.createQueueSession(false,Session.AUTO_ACKNOWLEDGE);\n            QueueSession localSession = localQueueConnection.createQueueSession(false,Session.AUTO_ACKNOWLEDGE);\n            for(int i=0;i<inboundQueueBridges.length;i++){\n                InboundQueueBridge bridge=inboundQueueBridges[i];\n                String localQueueName=bridge.getLocalQueueName();\n                Queue activemqQueue=createActiveMQQueue(localSession,localQueueName);\n\t\t\t\t\n                String queueName = bridge.getInboundQueueName();\n                Queue foreignQueue=createForeignQueue(outboundSession,queueName);\n                bridge.setConsumerQueue(foreignQueue);\n                bridge.setProducerQueue(activemqQueue);\n                bridge.setProducerConnection(localQueueConnection);\n                bridge.setConsumerConnection(outboundQueueConnection);\n                if(bridge.getJmsMessageConvertor()==null){\n                    bridge.setJmsMessageConvertor(getInboundMessageConvertor());\n                }\n                bridge.setJmsConnector(this);\n                addInboundBridge(bridge);\n            }\n            outboundSession.close();\n            localSession.close();\n        }\n    }\n\n    protected void initializeOutboundQueueBridges() throws JMSException{\n        if(outboundQueueBridges!=null){\n            QueueSession outboundSession = outboundQueueConnection.createQueueSession(false,Session.AUTO_ACKNOWLEDGE);\n            QueueSession localSession = localQueueConnection.createQueueSession(false,Session.AUTO_ACKNOWLEDGE);\n            for(int i=0;i<outboundQueueBridges.length;i++){\n                OutboundQueueBridge bridge=outboundQueueBridges[i];\n                String localQueueName=bridge.getLocalQueueName();              \n                Queue activemqQueue=createActiveMQQueue(localSession,localQueueName);\n                String queueName=bridge.getOutboundQueueName();\n                Queue foreignQueue=createForeignQueue(outboundSession,queueName);\n                bridge.setConsumerQueue(activemqQueue);\n                bridge.setProducerQueue(foreignQueue);\n                bridge.setProducerConnection(outboundQueueConnection);\n                bridge.setConsumerConnection(localQueueConnection);\n                if(bridge.getJmsMessageConvertor()==null){\n                    bridge.setJmsMessageConvertor(getOutboundMessageConvertor());\n                }\n                bridge.setJmsConnector(this);\n                addOutboundBridge(bridge);\n            }\n            outboundSession.close();\n            localSession.close();\n        }\n    }\n    \n    protected Destination createReplyToBridge(Destination destination, Connection replyToProducerConnection, Connection replyToConsumerConnection){        \n    \tQueue replyToProducerQueue =(Queue)destination;\n    \tboolean isInbound = replyToProducerConnection.equals(localQueueConnection);\n    \t\n    \tif(isInbound){\n    \t\tInboundQueueBridge bridge = (InboundQueueBridge) replyToBridges.get(replyToProducerQueue);\n    \t\tif (bridge == null){\n    \t\t\tbridge = new InboundQueueBridge(){\n    \t\t\t\tprotected Destination processReplyToDestination (Destination destination){\n    \t\t\t\t\treturn null;\n    \t\t\t\t}\n    \t\t\t};\n    \t\t\ttry{\n    \t\t\t\tQueueSession replyToConsumerSession = ((QueueConnection)replyToConsumerConnection).createQueueSession(false,Session.AUTO_ACKNOWLEDGE);\n    \t\t\t\tQueue replyToConsumerQueue = replyToConsumerSession.createTemporaryQueue();\n    \t\t\t\treplyToConsumerSession.close();\n    \t\t\t\tbridge.setConsumerQueue(replyToConsumerQueue);\n    \t\t\t\tbridge.setProducerQueue(replyToProducerQueue);\n    \t\t\t\tbridge.setProducerConnection((QueueConnection)replyToProducerConnection);\n    \t\t\t\tbridge.setConsumerConnection((QueueConnection)replyToConsumerConnection);\n    \t\t\t\tbridge.setDoHandleReplyTo(false);\n    \t\t\t\tif(bridge.getJmsMessageConvertor()==null){\n    \t\t\t\t\tbridge.setJmsMessageConvertor(getInboundMessageConvertor());\n    \t\t\t\t}\n    \t\t\t\tbridge.setJmsConnector(this);\n    \t\t\t\tbridge.start();\n    \t\t\t\tlog.info(\"Created replyTo bridge for \" + replyToProducerQueue);\n    \t\t\t}catch(Exception e){\n    \t\t\t\tlog.error(\"Failed to create replyTo bridge for queue: \" + replyToProducerQueue, e);\n    \t\t\t\treturn null;\n    \t\t\t}\n    \t\t\treplyToBridges.put(replyToProducerQueue, bridge);\n    \t\t}\n    \t\treturn bridge.getConsumerQueue();\n    \t}else{\n    \t\tOutboundQueueBridge bridge = (OutboundQueueBridge) replyToBridges.get(replyToProducerQueue);\n    \t\tif (bridge == null){\n    \t\t\tbridge = new OutboundQueueBridge(){\n    \t\t\t\tprotected Destination processReplyToDestination (Destination destination){\n    \t\t\t\t\treturn null;\n    \t\t\t\t}\n    \t\t\t};\n    \t\t\ttry{\n    \t\t\t\tQueueSession replyToConsumerSession = ((QueueConnection)replyToConsumerConnection).createQueueSession(false,Session.AUTO_ACKNOWLEDGE);\n    \t\t\t\tQueue replyToConsumerQueue = replyToConsumerSession.createTemporaryQueue();\n    \t\t\t\treplyToConsumerSession.close();\n    \t\t\t\tbridge.setConsumerQueue(replyToConsumerQueue);\n    \t\t\t\tbridge.setProducerQueue(replyToProducerQueue);\n    \t\t\t\tbridge.setProducerConnection((QueueConnection)replyToProducerConnection);\n    \t\t\t\tbridge.setConsumerConnection((QueueConnection)replyToConsumerConnection);\n    \t\t\t\tbridge.setDoHandleReplyTo(false);\n    \t\t\t\tif(bridge.getJmsMessageConvertor()==null){\n    \t\t\t\t\tbridge.setJmsMessageConvertor(getOutboundMessageConvertor());\n    \t\t\t\t}\n    \t\t\t\tbridge.setJmsConnector(this);\n    \t\t\t\tbridge.start();\n    \t\t\t\tlog.info(\"Created replyTo bridge for \" + replyToProducerQueue);\n    \t\t\t}catch(Exception e){\n    \t\t\t\tlog.error(\"Failed to create replyTo bridge for queue: \" + replyToProducerQueue, e);\n    \t\t\t\treturn null;\n    \t\t\t}\n    \t\t\treplyToBridges.put(replyToProducerQueue, bridge);\n    \t\t}\n    \t\treturn bridge.getConsumerQueue();\n    \t}\t\t\n    }\n    \n    protected Queue createActiveMQQueue(QueueSession session,String queueName) throws JMSException{\n        return session.createQueue(queueName);\n    }\n    \n    protected Queue createForeignQueue(QueueSession session,String queueName) throws JMSException{\n        Queue result = null;\n        try{\n            result = session.createQueue(queueName);\n        }catch(JMSException e){\n            //look-up the Queue\n            try{\n                result = (Queue) jndiOutboundTemplate.lookup(queueName, Queue.class);\n            }catch(NamingException e1){\n                String errStr = \"Failed to look-up Queue for name: \" + queueName;\n                log.error(errStr,e);\n                JMSException jmsEx =  new JMSException(errStr);\n                jmsEx.setLinkedException(e1);\n                throw jmsEx;\n            }\n        }\n        return result;\n    }\n\n    \n}","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=sunnyliu","name":"sunnyliu","key":"sunnyliu","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sunny Liu","active":true,"timeZone":"Etc/UTC"},"created":"2007-09-10T18:16:06.909+0000","updated":"2007-09-10T18:16:06.909+0000"}],"maxResults":2,"total":2,"startAt":0},"votes":{"self":"https://issues.apache.org/jira/rest/api/2/issue/AMQ-1228/votes","votes":0,"hasVoted":false},"worklog":{"startAt":0,"maxResults":20,"total":0,"worklogs":[]},"customfield_12311820":"0|i0tu6v:"}}