{"expand":"renderedFields,names,schema,operations,editmeta,changelog,versionedRepresentations","id":"12686303","self":"https://issues.apache.org/jira/rest/api/2/issue/12686303","key":"AMQ-4954","fields":{"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype","name":"Bug","subtask":false,"avatarId":21133},"timespent":null,"project":{"self":"https://issues.apache.org/jira/rest/api/2/project/12311210","id":"12311210","key":"AMQ","name":"ActiveMQ","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/projectavatar?pid=12311210&avatarId=10011","24x24":"https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12311210&avatarId=10011","16x16":"https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12311210&avatarId=10011","32x32":"https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12311210&avatarId=10011"},"projectCategory":{"self":"https://issues.apache.org/jira/rest/api/2/projectCategory/11160","id":"11160","description":"ActiveMQ","name":"ActiveMQ"}},"fixVersions":[],"aggregatetimespent":null,"resolution":null,"customfield_12312322":null,"customfield_12310220":null,"customfield_12312520":null,"customfield_12312323":null,"customfield_12312521":"2013-12-24 14:12:20.294","customfield_12310420":"365283","customfield_12312320":null,"customfield_12310222":null,"customfield_12312321":null,"resolutiondate":null,"workratio":-1,"customfield_12312328":null,"customfield_12312329":null,"customfield_12312923":null,"customfield_12312326":null,"customfield_12312920":null,"customfield_12310300":null,"customfield_12312327":null,"customfield_12312921":null,"customfield_12312324":null,"customfield_12312720":null,"customfield_12312325":null,"lastViewed":null,"watches":{"self":"https://issues.apache.org/jira/rest/api/2/issue/AMQ-4954/watchers","watchCount":1,"isWatching":false},"created":"2013-12-24T14:12:20.294+0000","priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.svg","name":"Major","id":"3"},"labels":[],"customfield_12312333":null,"customfield_12312334":null,"customfield_12313422":"false","customfield_12310310":"0.0","customfield_12312331":null,"customfield_12312332":null,"timeestimate":null,"aggregatetimeoriginalestimate":null,"customfield_12311120":null,"customfield_12312330":null,"versions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12323932","id":"12323932","name":"5.9.0","archived":false,"released":true,"releaseDate":"2013-10-21"}],"issuelinks":[],"customfield_12312339":null,"assignee":null,"customfield_12312337":null,"customfield_12312338":null,"updated":"2013-12-24T14:16:58.877+0000","customfield_12312335":null,"customfield_12312336":null,"status":{"self":"https://issues.apache.org/jira/rest/api/2/status/1","description":"The issue is open and ready for the assignee to start work on it.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/open.png","name":"Open","id":"1","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/2","id":2,"key":"new","colorName":"blue-gray","name":"To Do"}},"components":[{"self":"https://issues.apache.org/jira/rest/api/2/component/12313896","id":"12313896","name":"JMS client"}],"timeoriginalestimate":null,"customfield_12310080":null,"description":"[Sorry for this long bug report]\n\nWe're currently using ActiveMQ 5.9 via a Camel implementation for consuming/polling messages off of queues as well as sending messages.  With the latest version of ActiveMQ both client and server-side (5.9), there are numerous problems we've discovered with the changes to PooledConnectionFactory.  These problems might have existed prior, but it wasn't until recently that we were able to do any basic load testing on our system.\n\n[1] The first one is a race condition, which is actually documented within the code itself via a comment (createConnection method within PooledConnectionFactory).  If we start our Camel-based application while the broker is down, and then bring the broker up -- it will take an indeterminable amount of time to reconnect (typically a few hours of thrashing).  The reason being is that on start up or failover all the routes/threads are attempting to get a connection and establish a new session via PooledConnectionFactory in unison over and over again.  That's fine and expected behavior, but leads us to the next problem that contributes to the race condition.\n\n[2] The PooledConnectionFactory continues to return expired/expiring ConnectionPool's, and the calling threads fight to increment/decrement the internal references counter within that object.  Eventually they might win and hit 0 for the expiredCheck to return true, but again it's random and usually after a long period of time.  It's very easy to have happen if you only have 1 connection in your pool.\n\nThe fix that I originally implemented in my own code, was to just add an \"isExpiring\" flag to the ConnectionPool and just continue to throw the bad connection back in the pool with the hopes of it invalidating as the while loop continued to grab another connection (to keep things as close to the original behavior as possible). That fixed the startup with the broker down problem, however introduced another problem if failover occurs after good connection(s) are established .  Basically I learned that the PooledConnectionFactory never validated/started/established a working connection (it has hooks for a connection error to set it as expiring, but the start up and validation happens later on in the workflow). That lead to the DefaultJmsMessageContainer continually flagging the connection as bad, and continually trying to refresh it.  Which basically ends up with the system creating a single connection with one session, and then it terminates it after it's used over and over again.  Not ideal since we're looking to pool.\n\nSo I added validation to PooledConnectionFactory's cache itself to start the connection if it's a newly created ConnectionPool to ensure it works. That worked great, except, the problem is createConnection is synch'd and has a while loop that under certain conditions of failover leads to the createConnection blocking all connection threads indefinitely.  This is because there might be a thread that incremented one of the ConnectionPool's in the cache and is now blocked waiting on a new createConnection call (since another thread is in the while loop waiting on a new non expiring connection) and thus the decrement never gets issued.  Introducing a max limit to the loop addresses that (or a similar base case), but really it's not ideal either since you'd assume all things in the cache are valid.\n\nIn general what ended up being a short \"look around\" to fix a race condition ended up with me redoing quite a bit of functionality, and redesigning how a \"close\" and cache destroy occurs on a ConnectionPool.  I think a lot of this was done initially in an attempt to maximize some of the features of the cache implementation that's in place.  I can get my code modifications pulled down from my system and attached to this ticket if interested, otherwise I just wanted to raise some of the issues to your guys' attention.\n\nHopefully this made sense, otherwise I can clarify further.","customfield_10010":null,"timetracking":{},"customfield_12312026":null,"customfield_12312023":null,"customfield_12312024":null,"customfield_12312340":null,"attachment":[],"aggregatetimeestimate":null,"customfield_12312341":null,"customfield_12312220":null,"customfield_12312022":null,"customfield_12310041":null,"customfield_12310921":null,"customfield_12310920":"365586","customfield_12312823":null,"summary":"PooledConnectionFactory Race Condition & Failover Probems","creator":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jlucier","name":"jlucier","key":"jlucier","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jeremy Lucier","active":true,"timeZone":"Etc/UTC"},"subtasks":[],"customfield_12310291":null,"reporter":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jlucier","name":"jlucier","key":"jlucier","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jeremy Lucier","active":true,"timeZone":"Etc/UTC"},"customfield_12310290":null,"aggregateprogress":{"progress":0,"total":0},"customfield_12311024":null,"environment":"Linux 64bit, 8-core, 16gb RAM.","customfield_12313520":null,"customfield_12311020":null,"duedate":null,"customfield_12310250":null,"progress":{"progress":0,"total":0},"comment":{"comments":[],"maxResults":0,"total":0,"startAt":0},"votes":{"self":"https://issues.apache.org/jira/rest/api/2/issue/AMQ-4954/votes","votes":0,"hasVoted":false},"worklog":{"startAt":0,"maxResults":20,"total":0,"worklogs":[]},"customfield_12311820":"0|i1qyn3:"}}