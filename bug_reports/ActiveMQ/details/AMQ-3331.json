{"expand":"renderedFields,names,schema,operations,editmeta,changelog,versionedRepresentations","id":"12507786","self":"https://issues.apache.org/jira/rest/api/2/issue/12507786","key":"AMQ-3331","fields":{"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype","name":"Bug","subtask":false,"avatarId":21133},"timespent":null,"project":{"self":"https://issues.apache.org/jira/rest/api/2/project/12311210","id":"12311210","key":"AMQ","name":"ActiveMQ","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/projectavatar?pid=12311210&avatarId=10011","24x24":"https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12311210&avatarId=10011","16x16":"https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12311210&avatarId=10011","32x32":"https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12311210&avatarId=10011"},"projectCategory":{"self":"https://issues.apache.org/jira/rest/api/2/projectCategory/11160","id":"11160","description":"ActiveMQ","name":"ActiveMQ"}},"fixVersions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12317974","id":"12317974","description":"Next v5 maintenance release","name":"5.6.0","archived":false,"released":true,"releaseDate":"2012-05-07"},{"self":"https://issues.apache.org/jira/rest/api/2/version/12323282","id":"12323282","description":"Maintenance release with new AMQP support and smaller modules","name":"5.8.0","archived":false,"released":true,"releaseDate":"2013-02-11"}],"aggregatetimespent":null,"resolution":{"self":"https://issues.apache.org/jira/rest/api/2/resolution/1","id":"1","description":"A fix for this issue is checked into the tree and tested.","name":"Fixed"},"customfield_12312322":null,"customfield_12310220":"2011-10-20T14:18:15.027+0000","customfield_12312520":null,"customfield_12312323":null,"customfield_12312521":"Fri Feb 01 17:23:40 UTC 2013","customfield_12310420":"44367","customfield_12312320":null,"customfield_12310222":"1_*:*_1_*:*_13294475363_*|*_5_*:*_2_*:*_40618508486_*|*_4_*:*_1_*:*_616748","customfield_12312321":null,"resolutiondate":"2013-02-01T17:23:40.208+0000","workratio":-1,"customfield_12312328":null,"customfield_12312329":null,"customfield_12312923":null,"customfield_12312326":null,"customfield_12312920":null,"customfield_12310300":null,"customfield_12312327":null,"customfield_12312921":null,"customfield_12312324":null,"customfield_12312720":null,"customfield_12312325":null,"lastViewed":null,"watches":{"self":"https://issues.apache.org/jira/rest/api/2/issue/AMQ-3331/watchers","watchCount":2,"isWatching":false},"created":"2011-05-19T17:23:39.687+0000","priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.svg","name":"Major","id":"3"},"labels":[],"customfield_12312333":null,"customfield_12312334":null,"customfield_12313422":"false","customfield_12310310":"3.0","customfield_12312331":null,"customfield_12312332":null,"timeestimate":null,"aggregatetimeoriginalestimate":null,"customfield_12311120":null,"customfield_12312330":null,"versions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12315626","id":"12315626","description":"","name":"5.5.0","archived":false,"released":true,"releaseDate":"2011-04-01"}],"issuelinks":[{"id":"12362911","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12362911","type":{"id":"10030","name":"Reference","inward":"is related to","outward":"relates to","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"},"outwardIssue":{"id":"12559552","key":"AMQ-3875","self":"https://issues.apache.org/jira/rest/api/2/issue/12559552","fields":{"summary":"Client / NetworkBridge Connection blocks all communication at the transport when producer-flow-control reached","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/1","description":"The issue is open and ready for the assignee to start work on it.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/open.png","name":"Open","id":"1","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/2","id":2,"key":"new","colorName":"blue-gray","name":"To Do"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.svg","name":"Major","id":"3"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype","name":"Bug","subtask":false,"avatarId":21133}}}}],"customfield_12312339":null,"assignee":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=gtully","name":"gtully","key":"gtully","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Gary Tully","active":true,"timeZone":"Etc/UTC"},"customfield_12312337":null,"customfield_12312338":null,"updated":"2013-02-01T17:23:40.263+0000","customfield_12312335":null,"customfield_12312336":null,"status":{"self":"https://issues.apache.org/jira/rest/api/2/status/5","description":"A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/resolved.png","name":"Resolved","id":"5","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Done"}},"components":[{"self":"https://issues.apache.org/jira/rest/api/2/component/12313892","id":"12313892","name":"Broker"},{"self":"https://issues.apache.org/jira/rest/api/2/component/12313900","id":"12313900","name":"Test Cases"},{"self":"https://issues.apache.org/jira/rest/api/2/component/12313903","id":"12313903","name":"Transport"}],"timeoriginalestimate":null,"customfield_12310080":null,"description":"Symptom\n=======\nBroker A produces messages to two queues, Q1 and Q2.  Broker B consumes messages from two queues, Q1 and Q2.  Broker A is connected by a demand forwarding bridge, over TCP, to Broker B so that messages produced to Q1/Q2 will be forwarded to the consumers on Broker B.\n\nAt some point, Broker B's instance of Q2 becomes full (e.g., because the Q2 consumer is slow), and this triggers producer flow control to halt new messages being sent to Broker B's Q2 over the bridge.  Broker A's instances of Q1/Q2 are not full, so the producers on Broker A are not blocked.\n\nIf the messages produced by Broker A are *persistent*, we see this behaviour over the course of the production of 1000 messages to both Q1/Q2, where Broker B's Q2 becomes full on the 500th message:\n\n{noformat}\nBroker A       Bridge        Broker B\n========                     ========\n0->1000->0     ------>       0->1000->...\n0->1000->500                 0->500->...\n{noformat}\n\nThe above results, which assume network and consumer prefetch sizes of 1, are what we expected, namely: \n# Broker A produces 1000 messages to Q1 without blocking and all of these messages are forwarded to Broker B's Q1 without blocking, eventually being consumed by Broker B's Q1 consumer.\n# Broker A produces 1000 messages to Q2 without blocking and 500 of these messages are forwarded to Broker B's Q2 before producer flow control blocks the flow until Broker B's Q2 consumer can start reducing the queue size.\n\n\nThis is good because the bridge treats Q1 and Q2 independently (i.e., producer flow control on Q2 does not block the messages forwarded to Q1).\n\nIf the messages produced by Broker A are *non-persistent*, we see this behaviour:\n\n{noformat}\nBroker A       Bridge        Broker B\n========                     ========\n0->1000->500   ------>       0->500->...\n0->1000->500                 0->500->...\n{noformat}\n\nThe above results, which assume network and consumer prefetch sizes of 1, are not what we expected, namely: producer flow control on Broker B's instance of Q2 blocks the forwarding of messages to Broker B's instance of Q1.\n\nThis is not good because producer flow control on Q2 essentially triggers producer flow control on Q1, even though Q1 is *not* full.\n\nIt also seems strange (and almost non-intuitive until you understand the cause), that peristent messages should behave better than non-persistent messages.  The same difference in behaviour can also be observed with persistent messages if Broker A these outside a JMS transaction (e.g., AUTO_ACKNOWLEDGE) versus inside a JMS transaction: outside behaves appropriately, with Q1 independent of Q2, but inside behaves the same as the non-persistent case with Q1 blocked by Q2.\n\nThese observations are contrary to the AMQ 5.0 documentation regarding producer flow control: {quote}As of ActiveMQ 5.0, we can now individually flow control each producer on a shared connection without having to suspend the entire connection.{quote}\n\nCause\n=====\n\nThe difference in behaviour between persistent and non-persistent (and transactionaly/non-transactional) is due to the two ways that org.apache.activemq.broker.region.Queue implements producer flow control:\n\n{code:title=Queue#send(...)}\n// We can avoid blocking due to low usage if the producer is\n// sending\n// a sync message or if it is using a producer window\nif (producerInfo.getWindowSize() > 0 || message.isResponseRequired()) {\n{code}\n\nand\n\n{code:title=Queue#send(...)}\n} else \n  if (memoryUsage.isFull()) {\n    waitForSpace(context, memoryUsage, \"Usage Manager Memory Limit is full. Producer (\"\n                                + message.getProducerId() + \") stopped to prevent flooding \"\n                                + getActiveMQDestination().getQualifiedName() + \".\"\n                                + \" See http://activemq.apache.org/producer-flow-control.html for more info\");\n  }\n{code}\n\nThere is only a single transport thread that services the TCP socket on Broker B.  This TCP socket is the \"remote\" end of the A->B bridge and is responsible for *sequentially* enqueueing to Broker B's queues all messages from Broker A.  When a non-persistent or transactional message is sent to Broker A's queues, it has +responseRequired=true+, which is preserved when the bridge forwards the message to Broker B's queues.  If producer flow control is triggered on Broker B's queue, the first method of producer flow control will be used: the transport thread will not block, but the repsonse will be held back until the queue has room.  As a result, the transport thread is free to continue enqueueing messages from the bridge, particularly those destined for queues that are not full (NOTE: since the network prefetch is 1 no new messages to the full queue will be forwarded until the response is returned).\n\nWhen a persistent or non-transactional message is sent to Broker A's queues, it has +responseRequired=false+, which is preserved when the bridge forwards the message to Broker B's queues.  If producer flow control is triggered on Broker B's queue, the second method of producer flow control will be used: the transport thread will be blocked.  As a result, no other messages from the bridge will be forwarded, even those destined for queues that are not full.\n\nThe preservation of the {{responseRequired}} flag occurs in org.apache.activemq.network.DemandForwardingBridgeSupport:\n\n{code:title=DemandForwardingBridgeSupport#serviceLocalCommand(...)}\nif (!message.isResponseRequired()) {\n    \n    // If the message was originally sent using async\n    // send, we will preserve that QOS\n    // by bridging it using an async send (small chance\n    // of message loss).\n    try {\n        remoteBroker.oneway(message);\n        localBroker.oneway(new MessageAck(md, MessageAck.INDIVIDUAL_ACK_TYPE, 1));\n        dequeueCounter.incrementAndGet();\n    } finally {\n        sub.decrementOutstandingResponses();\n    }\n    \n} else {\n    \n    // The message was not sent using async send, so we\n    // should only ack the local\n    // broker when we get confirmation that the remote\n    // broker has received the message.\n    ResponseCallback callback = new ResponseCallback() {\n        public void onCompletion(FutureResponse future) {\n            try {\n                Response response = future.getResult();\n                if (response.isException()) {\n                    ExceptionResponse er = (ExceptionResponse) response;\n                    serviceLocalException(er.getException());\n                } else {\n                    localBroker.oneway(new MessageAck(md, MessageAck.INDIVIDUAL_ACK_TYPE, 1));\n                    dequeueCounter.incrementAndGet();\n                }   \n            } catch (IOException e) {\n                serviceLocalException(e);\n            } finally {\n                sub.decrementOutstandingResponses();\n            }\n        }\n    };\n    \n    remoteBroker.asyncRequest(message, callback);\n}\n{code}\n\nThe apparent preservation of {{responseRequired}} is a result of {{remoteBroker.oneway(message);}} versus {{remoteBroker.asyncRequest(message, callback);}}\n\nSolution\n========\nIt seems odd that there should be any concern for the message's original {{responseRequired}} flag.  Once the message is dispatched to the bridge for forwarding, the original producer ceases to care and not waiting for a response.  Once a response is returned from the remote broker, it is only used to signal the message ACK so that the local broker so that the inflight and dequeue counts can be updated --- neither the response nor the ACK continues on to the original producer.\n\nBecause the blocking of the network bridge by producer flow control on one queue can have a serious side effect (blocking the bridge completely), I think the best solution is to remove the logic from DemandForwardingBridgeSupport that takes into account {{message.isResponseRequired}} and simply always forwards the message with {{remoteBroker.asyncRequest(message, callback);}}\n\nAlternatively (and unnecessarily if the {{remoteBroker.oneway(message);}} is removed), I've attached a patch that adds a {{remoteDispatchType}} field to org.apache.activemq.network.NetworkBridgeConfiguration.\n\n{{remoteDispatchType}} can have one of three values:\n# {{AUTO}} - DemandForwardingBridgeSupport works as described above and uses {{remoteBroker.oneway(message);}} or {{remoteBroker.asyncRequest(message, callback);}} depending on {{message.isResponseRequired}}\n# {{ALWAYS_SYNC}} - DemandForwardingBridgeSupport uses {{remoteBroker.asyncRequest(message, callback);}} to forward all messages (i.e., it behaves the same as the first suggested solution)\n# {{ALWAYS_ASYNC}} - DemandForwardingBridgeSupport uses {{remoteBroker.oneway(message);}} to forward all messages\n\nA unit test is also included which demonstrates the good/bad behaviour for all combinations of persistent/non-persistent and {{remoteDispatchType}}.  Pay particular note to the final assertions in the unit test -- the test is designed to pass as-is by modifying the expectations to validate the bad behaviour when necessary.  Ideally, the bad behaviour should cause test case failure if you feel that blocking the entire network bridge is a bug.","customfield_10010":null,"timetracking":{},"customfield_12312026":null,"customfield_12312023":null,"customfield_12312024":null,"customfield_12312340":null,"attachment":[{"self":"https://issues.apache.org/jira/rest/api/2/attachment/12479816","id":"12479816","filename":"AMQ-3331.patch","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=stirlingc","name":"stirlingc","key":"stirlingc","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Stirling Chow","active":true,"timeZone":"Etc/UTC"},"created":"2011-05-19T19:12:34.771+0000","size":2556,"mimeType":"text/plain","content":"https://issues.apache.org/jira/secure/attachment/12479816/AMQ-3331.patch"},{"self":"https://issues.apache.org/jira/rest/api/2/attachment/12479812","id":"12479812","filename":"NetworkBridgeProducerFlowControlPrePatchTest.java","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=stirlingc","name":"stirlingc","key":"stirlingc","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Stirling Chow","active":true,"timeZone":"Etc/UTC"},"created":"2011-05-19T18:52:44.588+0000","size":8650,"mimeType":"text/plain","content":"https://issues.apache.org/jira/secure/attachment/12479812/NetworkBridgeProducerFlowControlPrePatchTest.java"},{"self":"https://issues.apache.org/jira/rest/api/2/attachment/12479817","id":"12479817","filename":"NetworkBridgeProducerFlowControlTest.java","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=stirlingc","name":"stirlingc","key":"stirlingc","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Stirling Chow","active":true,"timeZone":"Etc/UTC"},"created":"2011-05-19T19:13:09.797+0000","size":10145,"mimeType":"text/plain","content":"https://issues.apache.org/jira/secure/attachment/12479817/NetworkBridgeProducerFlowControlTest.java"}],"aggregatetimeestimate":null,"customfield_12312341":null,"customfield_12312220":null,"customfield_12312022":null,"customfield_12310041":[{"self":"https://issues.apache.org/jira/rest/api/2/customFieldOption/10042","value":"Patch Available","id":"10042"}],"customfield_12310921":null,"customfield_12310920":"59004","customfield_12312823":null,"summary":"When a producer from a network bridge is blocked by producer flow control, all producers from the network bridge get blocked.","creator":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=stirlingc","name":"stirlingc","key":"stirlingc","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Stirling Chow","active":true,"timeZone":"Etc/UTC"},"subtasks":[],"customfield_12310291":null,"reporter":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=stirlingc","name":"stirlingc","key":"stirlingc","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Stirling Chow","active":true,"timeZone":"Etc/UTC"},"customfield_12310290":null,"aggregateprogress":{"progress":0,"total":0},"customfield_12311024":null,"environment":null,"customfield_12313520":null,"customfield_12311020":null,"duedate":null,"customfield_12310250":null,"progress":{"progress":0,"total":0},"comment":{"comments":[{"self":"https://issues.apache.org/jira/rest/api/2/issue/12507786/comment/13036367","id":"13036367","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=stirlingc","name":"stirlingc","key":"stirlingc","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Stirling Chow","active":true,"timeZone":"Etc/UTC"},"body":"Unit test that works with AMQ 5.5.0 to demonstrate how the network bridge is blocked.  The unit test passes when persistent messages are sent and fails with non-persistent messages.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=stirlingc","name":"stirlingc","key":"stirlingc","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Stirling Chow","active":true,"timeZone":"Etc/UTC"},"created":"2011-05-19T18:52:44.625+0000","updated":"2011-05-19T18:52:44.625+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12507786/comment/13036380","id":"13036380","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=stirlingc","name":"stirlingc","key":"stirlingc","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Stirling Chow","active":true,"timeZone":"Etc/UTC"},"body":"Patch that adds remoteDispatchType to NetworkBridgeConfiguration.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=stirlingc","name":"stirlingc","key":"stirlingc","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Stirling Chow","active":true,"timeZone":"Etc/UTC"},"created":"2011-05-19T19:12:34.803+0000","updated":"2011-05-19T19:12:34.803+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12507786/comment/13036381","id":"13036381","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=stirlingc","name":"stirlingc","key":"stirlingc","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Stirling Chow","active":true,"timeZone":"Etc/UTC"},"body":"Unit test that verifies the patch.  ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=stirlingc","name":"stirlingc","key":"stirlingc","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Stirling Chow","active":true,"timeZone":"Etc/UTC"},"created":"2011-05-19T19:13:09.814+0000","updated":"2011-05-19T19:13:09.814+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12507786/comment/13131647","id":"13131647","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=gtully","name":"gtully","key":"gtully","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Gary Tully","active":true,"timeZone":"Etc/UTC"},"body":"Variant of patch applied with thanks in: http://svn.apache.org/viewvc?rev=1186813&view=rev\n\nAdded boolean attribute, {{alwaysSyncSend}} to the network connector. This allows the behavior for persistent messages to be applied to non-persistent messages.\nIt does not make sense to have an 'always Async' mode as this could lead to lost persistent messages. As a result then need for the enum goes away.\n\nAlso, I agree with the assessment of the use of the responseRequired flag in the choice of sync/async send, \nit should be based on the persistence attribute of the message, I have fixed that.\nThis is vital such that messages sent in transactions are not sent async.\n\nThanks for the great test case, made life much easier.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=gtully","name":"gtully","key":"gtully","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Gary Tully","active":true,"timeZone":"Etc/UTC"},"created":"2011-10-20T14:18:15.027+0000","updated":"2011-10-20T14:18:15.027+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12507786/comment/13568879","id":"13568879","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=gtully","name":"gtully","key":"gtully","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Gary Tully","active":true,"timeZone":"Etc/UTC"},"body":"we should default alwaysSyncSend to true. otherwise we can run into connection blocking on resource limits when forwarding non persistent messages.\nand we can have message loss. Best to be reliably forward all messages types by default.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=gtully","name":"gtully","key":"gtully","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Gary Tully","active":true,"timeZone":"Etc/UTC"},"created":"2013-02-01T17:13:23.484+0000","updated":"2013-02-01T17:13:23.484+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12507786/comment/13568892","id":"13568892","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=gtully","name":"gtully","key":"gtully","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Gary Tully","active":true,"timeZone":"Etc/UTC"},"body":"alwaysSyncSend=true the default in http://svn.apache.org/viewvc?rev=1441545&view=rev","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=gtully","name":"gtully","key":"gtully","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Gary Tully","active":true,"timeZone":"Etc/UTC"},"created":"2013-02-01T17:23:40.242+0000","updated":"2013-02-01T17:23:40.242+0000"}],"maxResults":6,"total":6,"startAt":0},"votes":{"self":"https://issues.apache.org/jira/rest/api/2/issue/AMQ-3331/votes","votes":0,"hasVoted":false},"worklog":{"startAt":0,"maxResults":20,"total":0,"worklogs":[]},"customfield_12311820":"0|i0aguv:"}}