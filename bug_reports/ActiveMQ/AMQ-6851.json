{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "fields": {
        "aggregateprogress": {
            "progress": 0,
            "total": 0
        },
        "aggregatetimeestimate": null,
        "aggregatetimeoriginalestimate": null,
        "aggregatetimespent": null,
        "assignee": null,
        "components": [{
            "id": "12313892",
            "name": "Broker",
            "self": "https://issues.apache.org/jira/rest/api/2/component/12313892"
        }],
        "created": "2017-10-25T21:15:30.000+0000",
        "creator": {
            "active": true,
            "avatarUrls": {
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10435",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10435",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10435",
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10435"
            },
            "displayName": "Joshua Montgomery",
            "key": "jlmont",
            "name": "jlmont",
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jlmont",
            "timeZone": "America/Denver"
        },
        "customfield_10010": null,
        "customfield_12310041": null,
        "customfield_12310080": null,
        "customfield_12310220": "2017-10-26T09:48:07.418+0000",
        "customfield_12310222": "1_*:*_1_*:*_130045968_*|*_5_*:*_1_*:*_0",
        "customfield_12310250": null,
        "customfield_12310290": null,
        "customfield_12310291": null,
        "customfield_12310300": null,
        "customfield_12310310": "0.0",
        "customfield_12310420": "9223372036854775807",
        "customfield_12310920": "9223372036854775807",
        "customfield_12310921": null,
        "customfield_12311020": null,
        "customfield_12311024": null,
        "customfield_12311120": null,
        "customfield_12311820": "0|i3lpjr:",
        "customfield_12312022": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "customfield_12312026": null,
        "customfield_12312220": null,
        "customfield_12312320": null,
        "customfield_12312321": null,
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312324": null,
        "customfield_12312325": null,
        "customfield_12312326": null,
        "customfield_12312327": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312330": null,
        "customfield_12312331": null,
        "customfield_12312332": null,
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12312335": null,
        "customfield_12312336": null,
        "customfield_12312337": null,
        "customfield_12312338": null,
        "customfield_12312339": null,
        "customfield_12312340": null,
        "customfield_12312341": null,
        "customfield_12312520": null,
        "customfield_12312521": "Fri Oct 27 09:21:58 UTC 2017",
        "customfield_12312720": null,
        "customfield_12312823": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "customfield_12312923": null,
        "customfield_12313422": "false",
        "customfield_12313520": null,
        "description": "The default broker behavior for message groups uses a CachedMessageGroupMap with a least-recently-used cache with a capacity of 1024. When more that 1024 group IDs are used messages can be consumed out-of-order.\r\n\r\nScenario.\r\nConfigure two consumers for a queue.\r\nSend a message with group ID '0' that requires a long time to consume.\r\nSend 1024 additional messages with group IDs '1' through '1024' that require a short time to consume.\r\nSend a message of group ID '0' that requires a short time to consume.\r\n\r\nExpected:\r\nThe second message in group '0' is consumed *after* the first message in group '0'\r\n\r\nActual:\r\nThe second message in group '0' is consumed *before* the first message in group '0' has finished.\r\n\r\nThe LRU cache is evicting the group to consumer mapping for group '0' before the second message arrives, allowing the second message in group '0' to be processed by a different consumer than the first message.\r\nUsing the MessageGroupHashBucket or the SimpleMessageGroupMap results in the expected behavior.\r\n\r\n{code}\r\npackage com.example.outoforderjms;\r\n\r\nimport java.io.Serializable;\r\nimport java.time.Instant;\r\nimport java.time.ZoneId;\r\nimport java.time.format.DateTimeFormatter;\r\nimport java.util.Locale;\r\nimport javax.jms.ConnectionFactory;\r\nimport org.apache.activemq.ActiveMQConnectionFactory;\r\nimport org.apache.activemq.pool.PooledConnectionFactory;\r\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.jms.annotation.EnableJms;\r\nimport org.springframework.jms.annotation.JmsListener;\r\nimport org.springframework.jms.config.DefaultJmsListenerContainerFactory;\r\nimport org.springframework.jms.core.JmsTemplate;\r\nimport org.springframework.jms.core.MessagePostProcessor;\r\n\r\n@EnableJms\r\n@Configuration\r\npublic class OutOfOrderJms {\r\n\r\n  private static final int MODULUS = 1025;\r\n  private static final int COUNT = MODULUS + 1;\r\n  private static final String QUEUE_NAME = \"MessageGroupTest\";\r\n\r\n  public static void main(String[] args) {\r\n    AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();\r\n\r\n    ctx.register(OutOfOrderJms.class);\r\n    ctx.refresh();\r\n\r\n    JmsTemplate template = new JmsTemplate();\r\n    template.setConnectionFactory(CONNECTION_FACTORY);\r\n    for (int i = 0; i < COUNT; i++) {\r\n      SomeMessage someMessage = new SomeMessage(i, Integer.toString(i % MODULUS));\r\n      if (someMessage.getGroup().equals(\"0\")) {\r\n        System.out.println(getTimeStamp() + \" \" + Thread.currentThread().getName() + \" producing message \" + someMessage);\r\n      }\r\n      template.convertAndSend(QUEUE_NAME, someMessage, getMessageGroupPostProcessor(someMessage));\r\n    }\r\n  }\r\n\r\n  private static String getTimeStamp() {\r\n    DateTimeFormatter formatter =\r\n        DateTimeFormatter.ofPattern(\"hh:mm:ss:SSSS\")\r\n            .withLocale(Locale.US)\r\n            .withZone(ZoneId.systemDefault());\r\n    return formatter.format(Instant.now());\r\n  }\r\n\r\n  private static MessagePostProcessor getMessageGroupPostProcessor(Serializable object) {\r\n    return message -> {\r\n      SomeMessage m = ((SomeMessage) object);\r\n      message.setStringProperty(\r\n          \"JMSXGroupID\", m.getGroup());\r\n      return message;\r\n    };\r\n  }\r\n\r\n  @JmsListener(destination = QUEUE_NAME, containerFactory = \"containerFactory\")\r\n  private void process(SomeMessage someMessage) throws InterruptedException {\r\n  //  Simulate long-processing message for first message produced.\r\n  if (someMessage.getMessage() == 0) {\r\n      for (int i = 10; i > 0; i--) {\r\n        Thread.sleep(1000);\r\n        System.out.println(i + \" \");\r\n      }\r\n    }\r\n    if (someMessage.getGroup().equals(\"0\") || someMessage.getGroup().equals(\"1\")) {\r\n      System.out.println(getTimeStamp() + \" \" + Thread.currentThread().getName() + \" consuming message \" + someMessage);\r\n    }\r\n  }\r\n\r\n  @Bean\r\n  public DefaultJmsListenerContainerFactory containerFactory() {\r\n    DefaultJmsListenerContainerFactory factory = new DefaultJmsListenerContainerFactory();\r\n    factory.setConnectionFactory(CONNECTION_FACTORY);\r\n    factory.setConcurrency(\"1-2\");\r\n    return factory;\r\n  }\r\n\r\n  private static ConnectionFactory CONNECTION_FACTORY = new PooledConnectionFactory(\r\n      new ActiveMQConnectionFactory(\r\n          \"admin\",\r\n          \"admin\",\r\n          \"failover:tcp://localhost:61616\")\r\n  );\r\n\r\n  private static class SomeMessage implements Serializable {\r\n    private final int message;\r\n    private final String group;\r\n\r\n    private SomeMessage(int message, String group) {\r\n      this.message = message;\r\n      this.group = group;\r\n    }\r\n\r\n\r\n    int getMessage() {\r\n      return message;\r\n    }\r\n\r\n    String getGroup() {\r\n      return group;\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n      return \"SomeMessage{\" +\r\n          \"message=\" + message +\r\n          \", group='\" + group + '\\'' +\r\n          '}';\r\n    }\r\n  }\r\n}\r\n\r\n{code}\r\n\r\nOutput shows message 1025 finishing before message 0\r\n{code}\r\n03:11:15:1730 main producing message SomeMessage{message=0, group='0'}\r\n03:11:15:2220 DefaultMessageListenerContainer-2 consuming message SomeMessage{message=1, group='1'}\r\n10 \r\n9 \r\n8 \r\n03:11:18:9530 main producing message SomeMessage{message=1025, group='0'}\r\n03:11:18:9540 DefaultMessageListenerContainer-2 consuming message SomeMessage{message=1025, group='0'}\r\n7 \r\n6 \r\n5 \r\n4 \r\n3 \r\n2 \r\n1 \r\n03:11:25:2130 DefaultMessageListenerContainer-1 consuming message SomeMessage{message=0, group='0'}\r\n{code}",
        "duedate": null,
        "environment": "Linux, CentOS 7\r\n\r\nopenjdk version \"1.8.0_151\"\r\nOpenJDK Runtime Environment (build 1.8.0_151-b12)\r\nOpenJDK 64-Bit Server VM (build 25.151-b12, mixed mode)\r\n",
        "fixVersions": [],
        "issuelinks": [],
        "issuetype": {
            "avatarId": 21133,
            "description": "A problem which impairs or prevents the functions of the product.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
            "id": "1",
            "name": "Bug",
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
            "subtask": false
        },
        "labels": [],
        "lastViewed": null,
        "priority": {
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "id": "3",
            "name": "Major",
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3"
        },
        "progress": {
            "progress": 0,
            "total": 0
        },
        "project": {
            "avatarUrls": {
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12311210&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12311210&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12311210&avatarId=10011",
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12311210&avatarId=10011"
            },
            "id": "12311210",
            "key": "AMQ",
            "name": "ActiveMQ",
            "projectCategory": {
                "description": "ActiveMQ",
                "id": "11160",
                "name": "ActiveMQ",
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/11160"
            },
            "self": "https://issues.apache.org/jira/rest/api/2/project/12311210"
        },
        "reporter": {
            "active": true,
            "avatarUrls": {
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10435",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10435",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10435",
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10435"
            },
            "displayName": "Joshua Montgomery",
            "key": "jlmont",
            "name": "jlmont",
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jlmont",
            "timeZone": "America/Denver"
        },
        "resolution": {
            "description": "Feedback Received",
            "id": "10010",
            "name": "Feedback Received",
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/10010"
        },
        "resolutiondate": "2017-10-27T09:22:56.000+0000",
        "status": {
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "id": "5",
            "name": "Resolved",
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "statusCategory": {
                "colorName": "green",
                "id": 3,
                "key": "done",
                "name": "Done",
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3"
            }
        },
        "subtasks": [],
        "summary": "Messages using Message Groups can arrive out of order when using CachedMessageGroupMap",
        "timeestimate": null,
        "timeoriginalestimate": null,
        "timespent": null,
        "updated": "2017-10-27T09:22:56.000+0000",
        "versions": [
            {
                "archived": false,
                "id": "12329258",
                "name": "5.12.0",
                "releaseDate": "2015-08-13",
                "released": true,
                "self": "https://issues.apache.org/jira/rest/api/2/version/12329258"
            },
            {
                "archived": false,
                "id": "12341669",
                "name": "5.15.2",
                "releaseDate": "2017-10-21",
                "released": true,
                "self": "https://issues.apache.org/jira/rest/api/2/version/12341669"
            }
        ],
        "votes": {
            "hasVoted": false,
            "self": "https://issues.apache.org/jira/rest/api/2/issue/AMQ-6851/votes",
            "votes": 0
        },
        "watches": {
            "isWatching": false,
            "self": "https://issues.apache.org/jira/rest/api/2/issue/AMQ-6851/watchers",
            "watchCount": 2
        },
        "workratio": -1
    },
    "id": "13112104",
    "key": "AMQ-6851",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13112104"
}