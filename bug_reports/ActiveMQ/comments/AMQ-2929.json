[Here is how the connection factory defined:

    <bean id="jmsXmlFactory" class="org.apache.activemq.pool.PooledConnectionFactory"
          destroy-method="stop">
        <property name="connectionFactory">
            <bean class="org.apache.activemq.ActiveMQConnectionFactory">
                <property name="brokerURL" value="${brokerConnectionURL}"/>
                <property name="userName" value="${activemq.username}"/>
                <property name="password" value="${activemq.password}"/>
                <property name="clientIDPrefix" value="${processUniqueName}Xml-${serverId}-${pid}"/>
                <property name="transformer">
                    <bean class="org.apache.activemq.util.xstream.XStreamMessageTransformer"/>
                </property>
                <property name="useCompression" value="true"/>
            </bean>
        </property>
    </bean>
, Another observation is that while the message is enqueued with no consumer, using JConsole [browseMessages] button on that queue shows the decompressed message text. I would expect it to be unreadable compressed binary., Debugger shows the mistake came off the wire. When the client reads the message from the wire, ActiveMQTextMessageMarshaller created the ActiveMQTextMessage with command.Message.compressed == true and Message.content contains decompressed text.

Therefore, there two ActiveMQ broker bugs:

1) The message queued with no consumer should not be decompressed.

2) When the message is decompressed, the compressed flag should be set to false before sending the message to the belated consumer.
, Indeed adding the following line between line 88 and 89 of ActiveMQTextMessage.java fixed the second bug and offer a temporary workaround for the problem as a whole:

diff ActiveMQTextMessage.java patch/ActiveMQTextMessage.java 
88a89
>                     setCompressed(false);

The first bug mentioned above needs to be fixed, i.e. the broker must not call ActiveMQTextMessage.getText() to avoid decompressing the message when no consumer is available when the message is enqueued.
, Can you provide a unit test or sample that demonstrates the issue, it would help to ensure the problem gets fixed and stays fixed., Attached the test source program and its Spring xml. A producer is needed that uses the same jmsFactory defined in this XML to pump some messages (compressed) to the "test.registration" queue before running the test program. No message will be retrieved due to the ZipException., Perhaps you could create a JUnit test case that reproduces this?  Or at least provide the source for  your producer?, The producer code you asked for. Please fix the broker., Latest findings
============
An unconsumed message in a queue is decompressed when a JMX client code calls "browse()" on that Queue's MBean. Below is a stack trace captured by Eclipse (sorry about not having full class names).

"ActiveMQMonitorModule ... line: 86" is where our code calls the "browse" method of the Queue's MBean. This led to "ActiveMQTextMessage.getText() line: 83", which decompressed the message, allocating large amount of memory, and possibly killing the broker altogether.

Another side effect is that the message is permanently decompressed in the queue, and due to the other bug mentioned in my 9/22 comment, the consumer receives a message that is decompressed but with the wrong (isCompressed() == true) result.

Our work-around is to call the MBean's "browseMessages()" with the patch for AMQ-3023. However, if you use JConsole to browse the unconsumed messages, it too will trigger the decompression of messages (possibly killing the broker due to out of memory). A nasty booby trap.

One possible fix is for OpenTypeSupport.TextMessageOpenTypeFactory.getFields(Object) to check for m.isCompressed(), and if true not to call m.getText().  See line 367 of OpenTypeSupport.java.

{code}
Thread [SelfMonitor] (Evaluating)	
	InflaterInputStream(InputStream) line: 91 [local variables unavailable]
	ActiveMQTextMessage.getText() line: 83 [local variables unavailable]	
	OpenTypeSupport$TextMessageOpenTypeFactory.getFields(Object) line: 367	
	OpenTypeSupport.convert(Message) line: 397	
	QueueView(DestinationView).browse(String) line: 151	
	QueueView(DestinationView).browse() line: 132	
	GeneratedMethodAccessor43.invoke(Object, Object[]) line: not available	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 25	
	Method.invoke(Object, Object...) line: 597	
	StandardMBeanIntrospector.invokeM2(Method, Object, Object[], Object) line: 93	
	StandardMBeanIntrospector.invokeM2(Object, Object, Object[], Object) line: 27	
	StandardMBeanIntrospector(MBeanIntrospector<M>).invokeM(M, Object, Object[], Object) line: 208	
	PerInterface<M>.invoke(Object, String, Object[], String[], Object) line: 120	
	StandardMBeanSupport(MBeanSupport<M>).invoke(String, Object[], String[]) line: 262	
	AnnotatedMBean(StandardMBean).invoke(String, Object[], String[]) line: 391	
	DefaultMBeanServerInterceptor.invoke(ObjectName, String, Object[], String[]) line: 836	
	JmxMBeanServer.invoke(ObjectName, String, Object[], String[]) line: 761	
	ActiveMQMonitorModule$1QueueValueAccessor.getValue() line: 86	
	ActiveMQMonitorModule$1QueueValueAccessor.getValue() line: 67	
	BaseModuleAttribute<D>.getCurrentValue() line: 106	
	ActiveMQMonitorModule(BaseMonitorModule).getCurrentModuleData() line: 105	
	MonitorData.populateModuleData(MonitorModule) line: 195	
	MonitorGenerator.process() line: 135	
	BaseRouteBuilder$1.run() line: 81	
	BaseRouteBuilder$2.run() line: 176	
	TimerThread.mainLoop() line: 512	
	TimerThread.run() line: 462	
{code}, TextMessage class now clears the compressed flag when its body is uncompressed to avoid receiving a message in an invalid state.]