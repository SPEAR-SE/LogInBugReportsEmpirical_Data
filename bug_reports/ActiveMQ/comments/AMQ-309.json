[Clean up thread was dead locking with journal checkpoint since the checkpoint is done in 1 BIG transaction.  We now run the jdbc clean up from the checkpoint threads when a journal is used., This still occurs in ActiveMQ 3.1, even though it was marked as resolved in the 3.1 changelog.  The stack trace looks the same, see below.  This was observed while running a persistent message torture test, using derby + journal, on a single broker (no clustering).

16:57:47 INFO  Adding new client: qa_yosemite on transport: TcpTransportChannel: Socket[addr=/172.16.1.134,port=38777,localport=61616]
17:56:21 WARN  Old message cleanup failed due to: SQL Exception: A lock could not be obtained within the time requested
ERROR 40XL1: A lock could not be obtained within the time requested
        at org.apache.derby.iapi.error.StandardException.newException(StandardException.java)
        at org.apache.derby.impl.services.locks.LockSet.lockObject(LockSet.java)
        at org.apache.derby.impl.services.locks.SinglePool.lockAnObject(SinglePool.java)
        at org.apache.derby.impl.services.locks.SinglePool.lockObject(SinglePool.java)
        at org.apache.derby.impl.store.raw.xact.RowLocking2.lockRecordForRead(RowLocking2.java)
        at org.apache.derby.impl.store.access.conglomerate.OpenConglomerate.lockPositionForRead(OpenConglomerate.java)
        at org.apache.derby.impl.store.access.conglomerate.GenericScanController.fetchRows(GenericScanController.java)
        at org.apache.derby.impl.store.access.heap.HeapScan.fetchNext(HeapScan.java)
        at org.apache.derby.impl.sql.execute.TableScanResultSet.getNextRowCore(TableScanResultSet.java)
        at org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.getNextRowCore(ProjectRestrictResultSet.java)
        at org.apache.derby.impl.sql.execute.DMLWriteResultSet.getNextRowCore(DMLWriteResultSet.java)
        at org.apache.derby.impl.sql.execute.DeleteResultSet.collectAffectedRows(DeleteResultSet.java)
        at org.apache.derby.impl.sql.execute.DeleteResultSet.open(DeleteResultSet.java)
        at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java)
        at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java)
        at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(EmbedPreparedStatement.java)
        at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeUpdate(EmbedPreparedStatement.java)
        at org.apache.commons.dbcp.DelegatingPreparedStatement.executeUpdate(DelegatingPreparedStatement.java:94)
        at org.apache.commons.dbcp.DelegatingPreparedStatement.executeUpdate(DelegatingPreparedStatement.java:94)
        at org.activemq.store.jdbc.adapter.DefaultJDBCAdapter.doDeleteOldMessages(DefaultJDBCAdapter.java:594)
        at org.activemq.store.jdbc.JDBCPersistenceAdapter.cleanup(JDBCPersistenceAdapter.java:255)
        at org.activemq.store.journal.JournalPersistenceAdapter$3.run(JournalPersistenceAdapter.java:394)
        at EDU.oswego.cs.dl.util.concurrent.QueuedExecutor$RunLoop.run(Unknown Source)
        at java.lang.Thread.run(Thread.java:534)
java.lang.ArrayIndexOutOfBoundsException: 16383
        at org.activemq.io.impl.DefaultWireFormat.handleCachedValue(DefaultWireFormat.java:242)
        at org.activemq.io.impl.AbstractDefaultWireFormat.readPacket(AbstractDefaultWireFormat.java:225)
        at org.activemq.io.AbstractWireFormat.readPacket(AbstractWireFormat.java:235)
        at org.activemq.transport.tcp.TcpTransportChannel.run(TcpTransportChannel.java:309)
        at java.lang.Thread.run(Thread.java:534)
, Issue has not been seen again in 4.x, I have attached threaddump from version 3.2.2 for this situation
]