[It seems that this works fine on the trunk. I just committed two tests that shows it works properly for both plain Spring and XBean.

If you still see the problem, please reopen it and attach the test case., Still doesn't work as of AMQ 5.4.0.

Let me explain what I'm trying to do:
1) Shared file system master-slave using nfsv4
2) Broker instantiated by Spring

The 1st AS will come up OK, but the 2nd (3rd, 4th, etc) AS will block indefinitely at org.apache.activemq.store.kahadb.MessageDatabase.lock(MessageDatabase.java:329).  Spring is calling the @PostConstruct method on BrokerService, which doesn't (cannot) check the XBeanBrokerService's 'start' flag.

Removal of the @PostConstruct annotation on BrokerService#start fixed the issue for 5.3.2, I haven't verified on 5.4.0., I can confirm that removing the @PostConstruct annotation work w/ 5.4.0 as well.

I should also mention that the reason I am having so much trouble with this is because I am running my webapp under JBoss.  When JBoss attempts to deploy my EAR file, the "main" thread ends up calling BrokerService#start.  Because the "main" thread is not blocked indefinitely, JBoss is left in an inconsistent state and will never serve ANY http requests, and will not respond to a kill command.  I have to kill -9 the java process to get it to terminate., So should we resolve this issue again?, Attached is a patch (generated with svn diff) that fixes it for my use case.  I don't think it will have any unintended consequences for users instantiating a BrokerService and not using the XBeanBrokerService.  If this makes it into 5.4.1 I'd be happy to close this issue., Patch applied with svn revision 992984. Thanks Dan.

The problem this missed in our tests was, because XBean+Spring combination doesn't call @PostConstruct on parent objects as it is done in EJB environment you're using.]