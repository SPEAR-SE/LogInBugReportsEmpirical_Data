[Attached reproducer described in this bug report., We have the same problem using NMS and jdbc master/slave.  On the java side there is a solution to this using the idempotent consumer pattern.  We'll be rolling our own solution on the consumer end to handle this.

Resources:
http://fusesource.com/docs/router/1.6/eip/MsgEnd-Idempotent.html
http://camel.apache.org/idempotent-consumer.html, I am having the same issue on the current trunk and these duplicates are actually stuck in the new broker and will not get delivered to the consumer unless I restart the consumer. 

this bug is pretty the same as https://issues.apache.org/activemq/browse/AMQ-2614 i filed a few days ago. I wonder whether it is related to https://issues.apache.org/activemq/browse/AMQ-2542 
, Attached is a console app using NMS to replicate the problem along with our activemq.xml.  

zip file is password protected with password "fridaytest".  

We're using ActiveMQ v5.2, jdbc master/slave MSSQL 2008.  Attached is an NMS v1.2 RC4 consumer with a transacted session as well as activemq.xml.  

To replicate:

1)	Work through the console prompts and produce 50 msgs.  
2)	Restart console and start consuming those 50 msgs.  
3)	In the middle of the consumer processing, restart broker
4)	The last message consumer was processing will be resent and not marked as redelivered.  (this is the idempotent msg problem.  Ex. -- instead of $500 getting deposited into your account, $1000 does)
5)	Then NMS blows up which seems like a different problem?

From what I understand this shouldn't be the case if you use a transacted session, however the attached console app can prove it is a problem.

Bottomline--I thought this was why the camel idempotent consumer pattern [1] existed which can be leveraged by java clients.


[1] http://fusesource.com/docs/router/1.6/eip/MsgEnd-Idempotent.html 


Regards,

Mark
, on your client try connection.ConnectionFactory.prefetchPolicy.queuePrefetch=1
that might help minimize the duplicates. The default queuePrefetch is 1000 and and cases are the prefetched message did not get a chance to be consumed and rollbacked when it have a failover and those unconsumed become duplicates, As well as reducing the prefetch size - also set the    sendAcksAsync property to false in your ConnectionFactory - or on the ActiveMQConnection itself, This is a result of the NMS and CMS client not having internal message auditing which can filter dups in this particular use case.]