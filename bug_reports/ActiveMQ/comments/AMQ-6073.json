[Thanks for pointing this out.  I had tested this with our integration tests which uses Jetty's client websocket client library and Firefox, and of course that's the one browser that works :)

The issue is that most likely you are using the stomp.js library and that library is setting the accepted sub protocol (the Sec-WebSocket-Protocol header) as "v10.stomp" and "v11.stomp".  However, the web socket server in ActiveMQ is setting the accepted protocol to just plain "stomp", so there is no match.  I will put a fix in for this so in 5.13.1 all 3 protocol strings will be there.

For now, as a work around, you should be able to specify the protocol if you are using stomp.js (or any other websocket client).  For stomp.js, if you look at http://jmesnil.net/stomp-websocket/doc/ there is information on how to change the subprotocol, which should be "stomp" for now.  For example, you would switch your connection line from: 

{{Stomp.client(url)}} to {{Stomp.client(url, \['stomp'])}}

and that should work., This is working thx., Commit 913f64476b66c452fa03cb4fb8c09d831825bca5 in activemq's branch refs/heads/master from [~cshannon]
[ https://git-wip-us.apache.org/repos/asf?p=activemq.git;h=913f644 ]

https://issues.apache.org/jira/browse/AMQ-6073

WSServlet for websockets will attempt to detect the subprotocol
requested and respond with the appropriate one.  Currently the protocols
loaded are what stomp.js use for stomp (v11.stomp and v12.stomp).
If a protocol can't be found then a default will be returned, either
"stomp" or "mqtt", which is the same behavior before this patch.

This will make it a bit easier to use stomp over websockets out of the
box as stomp.js will work by default.
, Commit a4845253d01b2d6a184d5494da82be938e7a4233 in activemq's branch refs/heads/activemq-5.13.x from [~cshannon]
[ https://git-wip-us.apache.org/repos/asf?p=activemq.git;h=a484525 ]

https://issues.apache.org/jira/browse/AMQ-6073

WSServlet for websockets will attempt to detect the subprotocol
requested and respond with the appropriate one.  Currently the protocols
loaded are what stomp.js use for stomp (v11.stomp and v12.stomp).
If a protocol can't be found then a default will be returned, either
"stomp" or "mqtt", which is the same behavior before this patch.

This will make it a bit easier to use stomp over websockets out of the
box as stomp.js will work by default.

(cherry picked from commit 913f64476b66c452fa03cb4fb8c09d831825bca5)
, By default the servlet will now properly handle stomp.js protocol formats (v10.stomp, v11.stomp, etc) and respond with the correct protocol. This will make it easier to use websockets since stomp.js is used by a lot of people so that library will now work without any other configuration.

If the protocol requested can't be found then it will revert back to the default, ie "stomp".  The protocol can always be configured by setting the "Sec-WebSocket-Protocol " header to either "stomp" or one of the other accepted protocols.]