[I've experienced the same issue. Looking at the code, in FailoverTransport.java doReconnect() it does this:

{code}
                     if (doRebalance) {
                         if (connectedToPriority || compareURIs(connectList.get(0), connectedTransportURI)) {
                             // already connected to first in the list, no need to rebalance
                             doRebalance = false;
                             return false;
                        } else {
{code}

So if your client is connected to the first broker in the list then it is never rebalanced. 

Additionally, when a new broker is added to the network, it is appended to the end of the list. This means that everything on the first broker stays connected, everything else is rebalanced (possibly to the first broker). Now if you add another broker, everything gets rebalanced except clients connected to the first broker, which just receives more connections.

In my opinion that check should be removed, because it results in uneven rebalancing across a broker network., Does anyone know if this issue has been resolved in the latest revision?
Thanks., It may be sorted with https://issues.apache.org/jira/browse/AMQ-4505

The idea of sticking with the first in the updated list is because that ordered list is provided by the broker, and will be different for each connection, allowing the broker to dictate the rebalance.

Maybe make a variant of https://github.com/apache/activemq/blob/20f384ce59b758a0f3c1b0e0620e2efd58ca230a/activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/FailoverComplexClusterTest.java to check your usecase.

On the rule that does not allow a message to replay back to the broker where it came from. there is a policy that can control that
see: http://activemq.apache.org/networks-of-brokers.html - conditionalNetworkBridgeFilterFactory

, No test case provided that demonstrates an actual issue with this functionality.  The unit tests show things are currently working as expected.]