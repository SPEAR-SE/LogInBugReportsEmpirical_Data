[I solved this issue by ensuring that the system property is removed during shutdown:

{code}
public class CustomFileLocker extends SharedFileLocker {

  private String vmLockKey;

  @Override
  public void doStart() throws Exception {
    super.doStart();
    vmLockKey = LockFile.class.getName() + ".lock."
        + new File(directory, "lock").getCanonicalPath();
  }

  @Override
  public void doStop(ServiceStopper stopper) throws Exception {
    try {
      super.doStop(stopper);
    } finally {
      System.getProperties().remove(vmLockKey);
    }
  }
{code}, That workaround only makes sense if the JVM is not fully shutting down.  Is that the case?

With that said, it's a good fix to add., Yes, that's the behaviour for IOExceptions. Not the JVM restarts, but the broker instance is performing a restart. Because the VM is not restarting, the system property is still set when the broker is restarting., the reastartAllowed=false broker attribute should cause the jvm to exit in this case. The related issue is https://issues.apache.org/jira/browse/AMQ-4526
The stop should clear that property, the use case for the jvm lock is really just testing - to easily validate master/slave in a single jvm for failover etc.]