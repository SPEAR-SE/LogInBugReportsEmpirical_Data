[This problem doesn't just happen on startup. 

I've been able to induce this behavior in the broker. I modified the test to periodically send a frame to the broker containing a receipt header. This forces the broker to respond with a RECEIPT frame. After sending the RECEIPT frame the broker waits another 10000ms (in this case) before issuing another write check., Sending a frame is sending data on the wire so the send of the RECEIPT frame prempts any need to send a KEEPALIVE frame.  , I believe the fix for this condition is as follows. I've tested it and it appears to work. However, feedback is welcome if there's a better way to handle this.

{code}
    private final Runnable writeChecker = new Runnable() {
        long lastRunTime;

        @Override
        public void run() {
            long now = System.currentTimeMillis();
            long sleepTime = now - lastRunTime;

            if (lastRunTime != 0 && LOG.isDebugEnabled()) {
                LOG.debug(this + " " + sleepTime + " ms elapsed since last write check.");
            }

            if (commandSent.get() && sleepTime >= getWriteCheckTime()) {
              LOG.trace("Resetting to prevent double sleep !!");
              commandSent.set(false);
            }

            lastRunTime = now;
            writeCheck();
        }

        @Override
        public String toString() {
            return "WriteChecker";
        }
    };
{code}, You'd need to submit the change as a patch, can't tell what's changed above.  Also tests to show there's an issue. , Patch file containing test and fix for this issue., >Sending a frame is sending data on the wire so the send of the RECEIPT frame prempts any need to send a KEEPALIVE frame. 

Agreed. However, once data has been sent in lieu of a KEEPALIVE frame the write checker timer should be adjusted accordingly, otherwise it will sleep for twice its configured interval. 

I have attached a patch file containing a failing unit test (of sorts) and a fix. The test is not the prettiest so adjust as necessary., Unit test and patch to fix this issue., Just realized I should have used a StompConnection object in the test. Trying again., Latest greatest, and hopefully final, version of test and fix., Any movement on this? I'd like to know whether this patch is going to be accepted or if other feedback is available., Not sure this fix is really the way to go, on a busy system we could be canceling and rescheduling the timer quite a bit which introduces more overhead than I think is good here.  Would need to look at it more.  Probably won't make it into a v5.9.0 release. , Admittedly I haven't looked at the code or thought about this very long. However having said that: since then problem is that the heartbeat interval may be 2x as long as desired, couldn't you set the timer to half the desired interval? Then each time the timer expires, check to see if the last heartbeat went out on timer expiration, and if not send a heart beat message? I believe such an approach would allow you to have a reasonable timer interrupt interval, avoid the resetting in a busy system, and ensure that heartbeats are sent out on time., I ran into this issue also just now.

This breaks heartbeats in a number of clients, including the go and python STOMP clients linked from [the cross-language client page|http://activemq.apache.org/cross-language-clients.html]. It's really easy to test–enable heartbeats, connect and stay idle for a heartbeat cycle, and the client immediately has a heartbeat error.

I agree that [~elliotbc]'s proposal (send heartbeats at twice the frequency) sounds best and simplest. It satisfies the STOMP spec ("the sender MUST send new data over the network connection at least every {{<n>}} milliseconds") and is quite simple to implement–basically a 3-line fix.

I have attached a patch that implements that strategy and adds a test for that initial heartbeat issue. It would be great if this could be fixed–it would really improve ActiveMQ's cross-language compatibility. Let me know if there's anything I can do to help get this fix merged.

[^AMQ-4710-double-heartbeat-frequency.patch], Hi, any news? Do you need me to change anything in that patch? I am really quite interested in getting this bug fixed., Hi, any news? I'm still available to help fix this bug, and I still think the general direction of this patch is a good one., I'm still available to help merge this patch to fix this bug.]