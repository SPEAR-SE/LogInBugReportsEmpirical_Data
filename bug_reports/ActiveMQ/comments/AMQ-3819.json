[Created a Java version of the test to get the ball rolling.  Didn't completely match the configuration but did notice that if you crank up the number of messages the test sends the test will fail for NIO+SSL and the CPU will be running wild.  Didn't have time to look deeper today., Commit test cases on trunk for this scenario, one for each (TCP, SSL, NIO, NIO+SSL).  Only the NIO+SSL version has an issue. , The test case seems to indicate that its an issue with the send rate on the connection.  If you slow down the outbound send loop at the end of the test the NIO+SSL test will start passing.  It may be an issue of not properly handling underflow situations in the secureRead method.  When things go wrong it seems like we get into a state of underflow but never try reading from the ssl channel again. , I created a fix in svn revision 1332230 and created a new snapshot

https://repository.apache.org/content/repositories/snapshots/org/apache/activemq/apache-activemq/5.7-SNAPSHOT/

It fixes the problem that transport get stuck in serviceRead() method and from my local test it looks pretty much the same as plain stomp+ssl implementation. Can you take it for a spin and let us know if it improves your use case., Tested here with the fix Dejan posted and the NIO+SSL test works as expected now on my machine.  Would be good confirmation to see if that ruby client test is working now. , Thanks guys, I'll test 'morrow UK time., Well done, this has resolved the problem for me.  Tested both with my simple test script and real world workload that first brought up the problem., Testing shows Dejan's fix resolves the issue.  ]