[analysis looks good. lining up for 5.9 - any chance you could produce a simple junit test case that just exercises MemoryUsage and multiple threads. would be good to have a simple way to validate and protect any fix., Wow, I'm not surprised this doesn't occur alot for other people, it takes 10s of thousands of iterations for me to detect a failure. I am amazed it occurs so often in my main test case using the full broker, I'm sure if I was on another machine with more/less cores I wouldn't have ever noticed this. 

The test case I'm uploading fails most runs. I found attaching a debugger and/or profiler made it much more likely to hit. Switching the number of cores it can run on should also help. Heres a sample output on a failure.

{code:java}
Attempt: 673 : Usage(null) percentUsage=35%, usage=0, limit=1000, percentUsageMinDelta=1%
Operations: [15, 12, 33, 76, 23, 64, 43, 58, 64, 21, 57, 57, 15, 80, 50, 17, 63, 90, 58, 46, 98, 21, 22, 78, 43, 9, 58, 16, 83, 45, 60, 59, 99, 42, 62, 91, 62, 29, 69, 97, 12, 80, 33, 36, 15, 97, 48, 28, 9, 63, 93, 13, 75, 83, 7, 21, 29, 20, 87, 88, 23, 81, 39, 91, 68, 46, 75, 35, 46, 53, 42, 89, 59, 7, 98, 2, 36, 28, 9, 3, 51, 13, 90, 71, 82, 40]

java.lang.AssertionError: 
Expected :0
Actual   :35
 <Click to see difference>
	at org.junit.Assert.fail(Assert.java:93)
	at org.junit.Assert.failNotEquals(Assert.java:647)
	at org.junit.Assert.assertEquals(Assert.java:128)
	at org.junit.Assert.assertEquals(Assert.java:472)
	at org.junit.Assert.assertEquals(Assert.java:456)
	at com.sms.backspool.jms.MemoryUsageTest.checkPercentage(MemoryUsageTest.java:149)
	at com.sms.backspool.jms.MemoryUsageTest.testCycle(MemoryUsageTest.java:22)
{code}, Test case showing failure. Remember that there are many other functions that have the same broken pattern of letting the "percentUsage" escape the synchronized block and they should be fixed across the board, not just for MemoryUsage., I took a stab at cleaning this up, you're welcome to review and comment.  , Changes look pretty solid, did the test case break for you reliably?

I am still worried about holding the lock during listener callbacks, seems like an easy way to cause deadlocks. Meh, its gotten this far without deadlocking and this is no worse so its probably ok., Yes, the test shows the issue reliably.

At least in the case of fireEvent we queue up the callbacks in an executor so really the locks can be safely held.  The one that's a bit more scary is the notifyCallbackWhenNotFull but if you look at the Broker code the callbacks are merely waking up a task runner so its ok for these as well. , Fixes and the test case added on trunk, We are still pinned to 5.8.0 because of some other dependencies (camel mostly) so despite me knowing about this issue for nearly 2 years I still can't ship with producerWindow enabled. This has become a real problem because the "raw socket blocking" is preventing any sort of clean shutdown. 

Do you think I would be about backporting these fixes and the related one for AMQ-4361 to 5.8.0? I copied over the Usage class and it's sub classes from 5.9.0. No other code changes were made and all of the unit tests in activemq passed. Any ideas how I would go about verifying the safety of these changes?
, Is there any valid work around for applications which are stick to 5.7.0?

I am using 5.7.0 client libraries, as I am tied to other dependencies like karaf, camel etc. 

]