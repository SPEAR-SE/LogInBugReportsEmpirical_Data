[I am having the same issue, We had the same issue, and found it to be a version mismatch (transitive dependencies, ahoy!) between commons-pool 1.4 (used by commons-dbcp) and 1.7 (used by activemq-pool). Solved it by excluding commons-pool from the commons-dbcp dependency.

Not saying that this is a proper fix/workaround, or even related to your issues, but it worked for us. Watching this issue to see what the amq guys will say., Can you put together a little unit test to show the problem, we can take a look., Attached are spring xml config file and just a simple junit test. It does not test anything. You will be able to see the issue when you actually run the test during loading application context. I have also included the code for singleConnectionFactory (commented out in xml) which runs successfully. 

Junit4; Spring 3.1 and ActiveMQ 5.7

Stack trace: 
java.lang.IllegalStateException: Failed to load ApplicationContext
	at org.springframework.test.context.TestContext.getApplicationContext(TestContext.java:157)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:109)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:75)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:321)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.createTest(SpringJUnit4ClassRunner.java:211)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner$1.runReflectiveCall(SpringJUnit4ClassRunner.java:288)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.methodBlock(SpringJUnit4ClassRunner.java:290)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:231)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:49)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)
	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)
	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:71)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:236)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:174)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'jmsPooledConnectionFactory' defined in class path resource [spring/jms-local-test.xml]: Initialization of bean failed; nested exception is java.lang.reflect.MalformedParameterizedTypeException
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:527)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:294)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:225)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:291)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:193)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:609)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:918)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:469)
	at org.springframework.test.context.support.AbstractGenericContextLoader.loadContext(AbstractGenericContextLoader.java:103)
	at org.springframework.test.context.support.AbstractGenericContextLoader.loadContext(AbstractGenericContextLoader.java:1)
	at org.springframework.test.context.support.DelegatingSmartContextLoader.loadContext(DelegatingSmartContextLoader.java:228)
	at org.springframework.test.context.TestContext.loadApplicationContext(TestContext.java:124)
	at org.springframework.test.context.TestContext.getApplicationContext(TestContext.java:148)
	... 24 more
Caused by: java.lang.reflect.MalformedParameterizedTypeException
	at sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl.validateConstructorArguments(ParameterizedTypeImpl.java:42)
	at sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl.<init>(ParameterizedTypeImpl.java:35)
	at sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl.make(ParameterizedTypeImpl.java:77)
	at sun.reflect.generics.factory.CoreReflectionFactory.makeParameterizedType(CoreReflectionFactory.java:86)
	at sun.reflect.generics.visitor.Reifier.visitClassTypeSignature(Reifier.java:122)
	at sun.reflect.generics.tree.ClassTypeSignature.accept(ClassTypeSignature.java:31)
	at sun.reflect.generics.repository.MethodRepository.getReturnType(MethodRepository.java:50)
	at java.lang.reflect.Method.getGenericReturnType(Method.java:236)
	at org.springframework.core.GenericTypeResolver.resolveReturnType(GenericTypeResolver.java:98)
	at org.springframework.beans.GenericTypeAwarePropertyDescriptor.getPropertyType(GenericTypeAwarePropertyDescriptor.java:129)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.isExcludedFromDependencyCheck(AbstractAutowireCapableBeanFactory.java:1269)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.filterPropertyDescriptorsForDependencyCheck(AbstractAutowireCapableBeanFactory.java:1245)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1101)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:517)
	... 37 more
, [~robinsk]
We were using commons-pool 1.5.4 and when I replaced it with 1.6, we are not getting the issue anymore. But, I am concerned as per your comment that this could just be a temporary fix.

when using the above, I have run into the following issue that was supposedly fixed in 5.4.2  -  org.apache.activemq.transport.TransportDisposedIOException
I found the below issue logged in this forum

 https://issues.apache.org/jira/browse/AMQ-2902, Ran the test with a 5.8-SNAPSHOT build an everything seems fine. , It works in the test. But, 2902 - org.apache.activemq.transport.TransportDisposedIOException occurs while shutting down the application in TC server.
Also, 5.8 is an unreleased version and we cant use it in production yet, You can submit a better unit test that can be added in activemq-spring we can make sure things get fixed up for the v5.8 release. , Thanks Timothy. I appreciate your help.
Is there a way I can get 5.8 version to test at my end, Grab the latest one from the SNAPSHOT repo:
https://repository.apache.org/content/repositories/snapshots/org/apache/activemq/apache-activemq/5.8-SNAPSHOT/, I can see that the {{activemq-pool}} artifact depends on the {{commons-pool:1.6}} artifact:

{code}
[INFO] +- org.apache.activemq:activemq-pool:jar:5.7.0:compile
[INFO] |  +- org.slf4j:slf4j-api:jar:1.6.6:compile
[INFO] |  +- org.apache.activemq:activemq-core:jar:5.7.0:compile
[INFO] |  +- org.apache.geronimo.specs:geronimo-jta_1.0.1B_spec:jar:1.0.1:compile
[INFO] |  \- commons-pool:commons-pool:jar:1.6:compile
{code}

What happened in our case was that in the project we had the {{commons-pool:1.5.4}} artifact placed closer to the dependency tree root and, thus, it was winning:

{code}
<dependencies>
  <dependency>
    <groupId>org.apache.activemq</groupId>
    <artifactId>activemq-pool</artifactId>
    <version>5.7.0</version>
  </dependency>
  <dependency>
    <groupId>commons-pool</groupId>
    <artifactId>commons-pool</artifactId>
    <version>1.5.4</version>
  </dependency>
</dependencies>
{code}

That produces the following dependency tree ({{mvn dependency:tree -Dverbose -Dincludes=:commons-pool:}}):

{code}
[INFO] com.gk-software.test:test-b:jar:1.0.0-SNAPSHOT
[INFO] +- org.apache.activemq:activemq-pool:jar:5.7.0:compile
[INFO] |  \- (commons-pool:commons-pool:jar:1.6:compile - omitted for conflict with 1.5.4)
[INFO] \- commons-pool:commons-pool:jar:1.5.4:compile
{code}

The problematic method is: 
{{public org.apache.commons.pool.ObjectPoolFactory org.apache.activemq.pool.PooledConnectionFactory.getPoolFactory()}}

Its return type is being inspected by the following method: {{org.springframework.core.GenericTypeResolver.resolveReturnType(Method, Class)}}

Which in turn calls Java Reflection API: {{method.getGenericReturnType()}}

And this produces the {{java.lang.reflect.MalformedParameterizedTypeException}} exception in case the {{commons-pool:1.5.4}} is on the classpath instead of the correct {{commons-pool:1.6}}. So the key difference between these two versions is [this change of the generic type|http://grepcode.com/file_/repo1.maven.org/maven2/commons-pool/commons-pool/1.5.4/org/apache/commons/pool/ObjectPoolFactory.java/?v=diff&id2=1.6].

So from my point of view this is not an issue of the {{activemq-pool}} artifact, but of a Maven dependency tree (or classpath) in the user's project., I don't see there's a whole lot we can do here as its more of an issue with the mixed versions being pulled in by this particular project configuration.  Can you update your project to use the commons-pool v1.6.0 ?, I have already done that. , The issue was fixed by using commons-pool 1.6 with ActiveMQ 5.7, ok, thanks for closing the loop on this. ]