[looks like InactivityMonitor has two threads active on its underlying transport - one sending a keepalive and the other responding to a keep alive (both threads with flush() in the stack trace). These events need to be synchronized. Why exactly this can cause write to hang needs some more investigation., seems odd that we reply to a keepalive, was introduced a good while back: http://svn.apache.org/viewvc?view=rev&revision=631965 
rational seems to be with very low inactivity durations, a reply would keep traffic running though the connection at very regular intervals - as fast as possible that is so to reduce inactivity timeouts.

it may make sense to make this capability optional as the norm is not to use very short inactivity durations., made keepAliveResponseRequired optional and defaulted to false. The use case for requiring a response is extremely low inactivity timeouts, of the order of 100 miliseconds. If that requirement becomes a necessity again this can be revisited with some more state management or via some alternative solution.]