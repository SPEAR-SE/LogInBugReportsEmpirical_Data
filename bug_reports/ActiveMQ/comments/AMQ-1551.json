[Just took a quick peek at what 5.1.0 does and it does set the destination on the message by the time the send() method returns.  But I'm pretty sure we also did that for 4.1

Could you attach a junit test case demonstrating the failure your reporting.  Thanks., My findings after some debugging:

The send method in ActiveMQSession sets the incoming ActiveMQDestination on the incoming javax.jms.Message, in my case this message was of type weblogic.jms.common.TextMessageImpl. The imlementation of the setJMSDestination() method on this class (in fact on the superclass weblogic.jms.common.MessageImpl) doesn't set the destination if it isn't an instance of a implementation specific weblogic Destination. So after executing the setJMSDestination(), getJMSDestination() on the incoming message still returns null.

Later on in the send method, the weblogic specific message is transformed into an ActiveMQMessage via ActiveMQMessageTransformation.transformMessage(message, connection); This static method uses getJMSDestination() (returning null) on the orginal weblogic message to create an activemq version of the destination: activeMessage.setJMSDestination(transformDestination(message.getJMSDestination()));

A simple fix to support (amongst others) WLS bridging would be to set the destination after the message was transformed:

ActiveMQMessage msg = ActiveMQMessageTransformation.transformMessage(message, connection);
//for WebLogic
if(msg.getJMSDestination() == null) {
 msg.setJMSDestination(destination);
}

Probably this would also solve issue: https://issues.apache.org/activemq/browse/AMQ-1217
]