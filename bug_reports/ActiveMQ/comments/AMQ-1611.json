[Hi,

I have the same problem using FUSE MB 5.0.0.9 and FUSE SMX 3.3.0.8.
I'm using SMX with JCAFlow for failover, I have about 70 activationSpecs and try the send 100 files to each Bindind components (25 at all) that starts the flow .
When the first lot of messages has processed I send more 100 messages and then a get the error bellow.
Anybody knows what I can do to solve this problem?

Thank's

{noformat}
[ERROR] [17/Mar/2008 20:01:43:123] Failed to checkpoint a message store: java.util.concurrent.ExecutionException: java.io.IOException: Already started.
java.util.concurrent.ExecutionException: java.io.IOException: Already started.
        at java.util.concurrent.FutureTask$Sync.innerGet(FutureTask.java:222)
        at java.util.concurrent.FutureTask.get(FutureTask.java:83)
        at org.apache.activemq.store.journal.JournalPersistenceAdapter.doCheckpoint(JournalPersistenceAdapter.java:398)
        at org.apache.activemq.store.journal.JournalPersistenceAdapter$1.iterate(JournalPersistenceAdapter.java:119)
        at org.apache.activemq.thread.PooledTaskRunner.runTask(PooledTaskRunner.java:118)
        at org.apache.activemq.thread.PooledTaskRunner$1.run(PooledTaskRunner.java:42)
        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:885)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907)
        at java.lang.Thread.run(Thread.java:619)
Caused by: java.io.IOException: Already started.
        at org.apache.activemq.store.jdbc.TransactionContext.begin(TransactionContext.java:148)
        at org.apache.activemq.store.jdbc.JDBCPersistenceAdapter.beginTransaction(JDBCPersistenceAdapter.java:356)
        at org.apache.activemq.store.journal.JournalPersistenceAdapter.beginTransaction(JournalPersistenceAdapter.java:193)
        at org.apache.activemq.util.TransactionTemplate.run(TransactionTemplate.java:41)
        at org.apache.activemq.store.journal.JournalMessageStore.checkpoint(JournalMessageStore.java:258)
        at org.apache.activemq.store.journal.JournalMessageStore.checkpoint(JournalMessageStore.java:233)
        at org.apache.activemq.store.journal.JournalPersistenceAdapter$4.call(JournalPersistenceAdapter.java:368)
        at org.apache.activemq.store.journal.JournalPersistenceAdapter$4.call(JournalPersistenceAdapter.java:367)
        at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
        at java.util.concurrent.FutureTask.run(FutureTask.java:138)
        ... 3 more
{noformat}
My config:
{noformat}
        <sm:flows>
                <sm:jcaFlow jmsURL="vm://localhost" connectionManager="#connectionManager" />
        </sm:flows>


        <jencks:connectionManager id="connectionManager"
                containerManagedSecurity="false" transaction="xa"
                transactionManager="#transactionManager"
                poolingSupport="#poolingSupport"
                connectionTracker="#connectionTracker" />
                
        <jencks:transactionManager id="transactionManager"
                transactionLogDir="./data/txlog"
                defaultTransactionTimeoutSeconds="600" />
                
        <jencks:connectionTracker id="connectionTracker"
                geronimoTransactionManager="#transactionManager" />
                
        <jencks:poolingSupport id="poolingSupport"
                connectionMaxWaitMilliseconds="30000" connectionMaxIdleMinutes="1"
                poolMinSize="10" poolMaxSize="64" />
                
        <amq:broker useJmx="true" name="broker" brokerName="localhost"
                dataDirectory="data/amq">
                
                <amq:persistenceAdapter>
                        <amq:journaledJDBC useDatabaseLock="false"
                                dataDirectory="data/amq" journalLogFiles="5" dataSource="#sqlserver-ds" />
                </amq:persistenceAdapter>
                
                <amq:transportConnectors>
                        <amq:transportConnector uri="vm://localhost" />
                </amq:transportConnectors>
                
                <amq:systemUsage>
                        <amq:systemUsage>
                                <amq:memoryUsage>
                                        <amq:memoryUsage limit="64 mb" percentUsageMinDelta="20" />
                                </amq:memoryUsage>
                                <amq:tempUsage>
                                        <amq:tempUsage limit="100 mb" />
                                </amq:tempUsage>
                                <amq:storeUsage>
                                        <amq:storeUsage limit="1 gb" name="foo" />
                                </amq:storeUsage>
                        </amq:systemUsage>
                </amq:systemUsage>
        </amq:broker>

        <bean id="sqlserver-ds" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
                <property name="driverClassName" value="net.sourceforge.jtds.jdbc.Driver" />
                <property name="url" value="jdbc:jtds:sqlserver://server:1433/test_db;tds=8.0" />
                <property name="username" value="user" />
                <property name="password" value="pass" />
                <property name="initialSize" value="10" />
                <property name="maxActive" value="64" />
                <property name="maxIdle" value="2" />
                <property name="maxWait" value="15000" />
        </bean>
{noformat}, Same problem here - this is such an old error and no-one seems to be doing anything about it.  Our only solution was to completely disable persistent message property on the JMS publisher.  It's been the biggest push for investigating a more hardened JMS broker yet.

Error:

{noformat}
2008-03-31 12:11:20,765 [eckpoint Worker] ERROR JournalPersistenceAdapter      - Failed to checkpoint a message store: edu.emory.mathcs.backport.java.util.concurrent.ExecutionException: java.io.IOException: Not started.
edu.emory.mathcs.backport.java.util.concurrent.ExecutionException: java.io.IOException: Not started.
        at edu.emory.mathcs.backport.java.util.concurrent.FutureTask.getResult(FutureTask.java:299)
        at edu.emory.mathcs.backport.java.util.concurrent.FutureTask.get(FutureTask.java:118)
        at org.apache.activemq.store.journal.JournalPersistenceAdapter.doCheckpoint(JournalPersistenceAdapter.java:386)
        at org.apache.activemq.store.journal.JournalPersistenceAdapter$2.iterate(JournalPersistenceAdapter.java:129)
        at org.apache.activemq.thread.DedicatedTaskRunner.runTask(DedicatedTaskRunner.java:101)
        at org.apache.activemq.thread.DedicatedTaskRunner.access$000(DedicatedTaskRunner.java:25)
        at org.apache.activemq.thread.DedicatedTaskRunner$1.run(DedicatedTaskRunner.java:39)
Caused by: java.io.IOException: Not started.
        at org.apache.activemq.store.jdbc.TransactionContext.rollback(TransactionContext.java:168)
        at org.apache.activemq.store.jdbc.JDBCPersistenceAdapter.rollbackTransaction(JDBCPersistenceAdapter.java:368)
        at org.apache.activemq.store.journal.JournalPersistenceAdapter.rollbackTransaction(JournalPersistenceAdapter.java:197)
        at org.apache.activemq.util.TransactionTemplate.run(TransactionTemplate.java:62)
        at org.apache.activemq.store.journal.JournalMessageStore.checkpoint(JournalMessageStore.java:247)
        at org.apache.activemq.store.journal.JournalMessageStore.checkpoint(JournalMessageStore.java:221)
        at org.apache.activemq.store.journal.JournalPersistenceAdapter$4.call(JournalPersistenceAdapter.java:356)
        at edu.emory.mathcs.backport.java.util.concurrent.FutureTask.run(FutureTask.java:176)
        at edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:650)
        at edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:675)
        at java.lang.Thread.run(Thread.java:595)
{noformat}

Config:

{noformat}
<beans>

  <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"/>

  <broker brokerName="localhost" useJmx="true" xmlns="http://activemq.org/config/1.0">

    <destinationInterceptors>
      <virtualDestinationInterceptor>
        <virtualDestinations>
          <compositeQueue name="datafeeds.records">
            <forwardTo>
              <queue physicalName="datafeeds.records.rdbms" />
              <queue physicalName="datafeeds.records.netcdf" />
              <topic physicalName="datafeeds.records" />
            </forwardTo>
          </compositeQueue>
        </virtualDestinations>
      </virtualDestinationInterceptor>
    </destinationInterceptors>

    <persistenceAdapter>
        <journaledJDBC journalLogFiles="5" dataDirectory="${activemq.base}/activemq-data"/>
    </persistenceAdapter>

    <transportConnectors>
       <transportConnector name="openwire" uri="tcp://localhost:61616" discoveryUri="multicast://default"/>
       <transportConnector name="ssl"     uri="ssl://localhost:61617"/>
       <transportConnector name="stomp"   uri="stomp://localhost:61613"/>
    </transportConnectors>

    <networkConnectors>
      <networkConnector name="default-nc" uri="multicast://default"/>
    </networkConnectors>

  </broker>

</beans>
{noformat}
, What exactly was the fix for this issue?

And is this issue the same as AMQ-1063? If so, can AMQ-1063 be closed as a duplicate?, What exactly was the fix for this issue?

I dont think making PoolPreparedStatement to false is working.

I still see in 5.3.0 version.

, I still see this issue in 5.3.0, Partha, do you think you could make a test case that reproduces this behavior?, Any update on this issue? We are facing similar problems with incubator-activemq-4.0 and will highly appreciate any help. Please refer AMQ-2977, Newer release versions don't use the backports library.]