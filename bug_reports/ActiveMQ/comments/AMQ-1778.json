[I was able to consistently reproduce the loss of a message with NateS' sample code.

When I reduced the thread pool size to 1 there was no loss of messages in several runs that I tried.

Because my application does not use the correlation ids at all, I adjusted the samples slightly to use separate queues for the responses. Under that circumstance, I did not see any message losses.

These results make me suspect that the loss of messages is related to using correlation ids across many threads.
, Modified the sources to:

- close receivers and senders
- log more exceptions
- create a QueueBrowser to look for the missing messages

I hope I still test the same issue, but it still seems to happen.

What I've found:
1. Apparently the MessageConsumer does not find the messages, but they are still on the queue.

2. If the sender threads are interrupted after the timeout and after the receiver closed, I get some InterruptedIOException in the ActiveMQSession.close() method:

Caused by: javax.jms.JMSException: java.io.InterruptedIOException
        at org.apache.activemq.util.JMSExceptionSupport.create(JMSExceptionSupport.java:62)
        at org.apache.activemq.ActiveMQConnection.doAsyncSendPacket(ActiveMQConnection.java:1178)
        at org.apache.activemq.ActiveMQConnection.asyncSendPacket(ActiveMQConnection.java:1170)
        at org.apache.activemq.ActiveMQSession.close(ActiveMQSession.java:548)
        at org.apache.activemq.ActiveMQQueueSession.close(ActiveMQQueueSession.java:65)
        at test.JmsSenderTest.facilityRequest(JmsSenderTest.java:253)

See "output-interrupted.log"

So closing the session takes quite long.

NOTE: purge (empty) the "testResponses" queue before a test. When there are a lot of messages on it, the results are worse.

I guess it may be some resource issue. (sockets, memory,...?)

No time to check more, now.

hope it helps. Interesting case.

, BTW: for me it's (of course) okay to include the code anywhere, but I was not the author of most of it, so I did not specify that., This is resolved for 5.2]