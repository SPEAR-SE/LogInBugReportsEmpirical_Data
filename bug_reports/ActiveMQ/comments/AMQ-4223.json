[It's probably worth noting that this issue may not specifically tied to the optimizeAcknowledge=true setting.  I have seen it happen on occasion even with that was false, but very rarely.  But when it's true it always happens for sure.


, FWIW I am still seeing this issue on occasion.  I have not made any changes to the system (optimizeAcknowledge has remained false) since opening this issue.  It runs fine for a while (as in months on end) and then just decides one day to start violating the exclusive consumer logic.

Restarting my application doesn't really help at all.
Deleting the activemq datastore doesn't really help much either.

So now I have to keep it limping along until it randomly decides to stop stumbling on this issue and run smooth for a while again.



Looking at it right now I can see that all the "incorrectly delivered" messages were delivered directly from the "local" broker.  To expand on that...

This application has a network of brokers that is currently only 2 of them, on separate boxes.  Each instance has one exclusive consumer on the same queue.  If I look at the state of one broker via JMX I can see the queue has 2 subscriptions (1 local and 1 via the other broker) and they are marked as exclusive.  From the other broker it's the same thing but in "reverse" so to speak.  This effectively gives me an active/passive level of HA in my application for this aggregation point of the process flow.

Under normal operation, from both brokers I'll see the counters all sitting at 0 for the one that is on standby and non-zero for the one that is supposed to receive all the messages.  And for one broker it's the local one that is non-zero and for the other broker it's the remote one that is non-zero, which makes perfect sense.

When this bug occurs, I'll see local counters as non-zero and remotes at zero from both sides.  So that means each broker is specifically delivering only to its local subscription as if it considers the local subscription the primary/exclusive one, even know it is fully aware of the remote.

So perhaps the problem is in how the network of brokers negotiate/choose which consumer is the exclusive one., FWIW, I upgraded to AMQ 5.8.0 today, the problem still persists.

It's becoming more of a serious problem now as the system cannot function in a redundant manner.
, I noticed something else today that may be related to this issue..

I connected to each of my brokers via JMX and was browsing the tree of MBeans under org.apache.activemq -> Broker -> (brokername) -> Queue.  For my application there are many queues, of which 5 of them behave as described above using exclusive consumers.  Viewing the attributes of the queues From one of the brokers I will see the Options has a value of "consumer.exclusive=true" on each Queue, whereas on the other broker I see 4 out of 5 have an empty string for that value.  The one that is different?  Well it also has the "consumer.exclusive=true" value there as well.  And it just so happens that the particular part of my application suffering from this bug at the moment is precisely that which shows this discrepancy.

-When everything is working smoothly, I only see the "consumer.exclusive=true" listed in the options of the Queue which has the consumer that all messages are going to.  Thus, when more than one broker lists the queue with that option, they are not in agreement about where the messages go, and I end up with the lack of exclusivity.-
Upon further testing, the above statement didn't hold true.  I still saw it fail when it was consistent with other Queues.  And honestly with my limited nowledge of the AMQ guts, I'd expect ALL of them to show the option set on ALL brokers.
]