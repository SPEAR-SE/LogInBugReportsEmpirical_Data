[Your logs actually show the broker setting the sender-settle-mode to 'mixed', and not 'settled' as you mentioned. This is an entirely legal thing for the broker to do, essentially saying each message transfers settled value will define behaviour, though admittedly could be unexpected if the client requested something more specific.

From your mailing list post, you said:
{quote}
It is not clear, how to achieve message acceptance on client.

Following OASIS AMQP1.0 docs, I assume that I have to setup
sender-settle-mode - unsettled (0)
receiver-settle-mode - second (1)
in order to use accept/modify/reject methods, but it does not work as expected. 
{quote}

To allow the client to accept messages you'd need sender-settle-mode of 'unsettled' or 'mixed' (where messages are actually sent unsettled in the latter case), and 'first' or 'second' receiver receiver-settle-modes, i.e. what you are getting allows accepting messages. Using 'second' for the receiver-settle-mode is only needed for the 'two-ack' exactly-once delivery process, which ActiveMQ doesn't currently support, only at-least-once or at-most-once, hence the broker is properly indicating what it is actually supporting/doing by setting 'first'.

{quote}
It shows that despite the fact that there's no consumer connected to the queue I receive 'settled=true state=accepted' for the message sent
{quote}
As you should have: you sent the message to a queue, unsettled, and the broker put it in the queue and then accepted+settled the message, i.e. it got queued as you asked.

In this case I think its all actually doing exactly what you've said you want, until the point you try to 'modify' the message to indicate 'undeliverable-here' (but oddly, not delivery-failed). The ActiveMQ 5 broker currently takes that as a reason to DLQ the message, as you noticed, meaning it wont be available to another consumer except via the DLQ., bq. Your logs actually show the broker setting the sender-settle-mode to 'mixed', and not 'settled' as you mentioned.
Sorry, you're right. It sets 'mixed' mode.

bq. This is an entirely legal thing for the broker to do, essentially saying each message transfers settled value will define behaviour, though admittedly could be unexpected if the client requested something more specific.
You're right. As long as driver obey settings received from broker, I can't track errors caused by wrong message settlement mode.

bq. As you should have: you sent the message to a queue, unsettled, and the broker put it in the queue and then accepted+settled the message, i.e. it got queued as you asked.
This is exactly the problem I talk about, I need to be sure that the message has been processed, not only enqueued.

bq. In this case I think its all actually doing exactly what you've said you want, until the point you try to 'modify' the message to indicate 'undeliverable-here' (but oddly, not delivery-failed).
This is exactly what I need. Product evolution plan defines experimental features  to be turned on for a certain period of time and if experimental consumer prefers not to process message, it returns latter one to a queue marked 'undeliverableHere' to prevent re-delivery to itself; 'release' is not an option here because ActiveMQ immediately returns message back to consumer., {quote}
This is exactly the problem I talk about, I need to be sure that the message has been processed, not only enqueued.
{quote}

The broker doesn't inform you of message processing, nor should it.  The nature of a decoupled message broker is that you queue a message and at some point later in time some other process dequeues it.  If you need to know that the message was processed than the standard practice of request / response would be an option. 

{quote}
This is exactly what I need. Product evolution plan defines experimental features to be turned on for a certain period of time and if experimental consumer prefers not to process message, it returns latter one to a queue marked 'undeliverableHere' to prevent re-delivery to itself; 'release' is not an option here because ActiveMQ immediately returns message back to consumer.
{quote}

There are some limitations to what the broker can do based on the legacy nature of it being primarily a JMS broker.  For messages that are tagged as undeliverable here, the only option it has is to send them off to the DLQ as the broker has no mechanism do directly release a message back to the queue.   You can work around this using broker configuration for [Broker Redelivery|http://activemq.apache.org/message-redelivery-and-dlq-handling.html] but that does not guarantee that the broker won't send the message back to the same consumer if it's still connected.  , {quote}
This is exactly the problem I talk about, I need to be sure that the message has been processed, not only enqueued.
{quote}
Ok, so what you want is end-to-end acknowledgement between producer and consumer (or a searate response message)? If so thats entirely unclear from your description. The broker cant do that, and it isnt how brokered queuing works in general: you send messages to the queue, they store and forward messages, acknowledgments are between the clients and the broker both for producing or consuming, not between the clients.

ActiveMQ doesnt support the behaviour you want from 'undeliverableHere', so at best thats a feature request to make it, in which case you may have mroe luck with new features requests for Artemis. At worst, it still wouldnt do what you want since the producer would not have any knowledge of the action by the consumer or the messge being requeued for delivery only to other consumers, so again youd need to look at doing something like request-response based messaging, or if you really want end-to-end acknoweldgement, perhaps look an entirely different solution. One example would be Qpid Dispatch router, which can support end-to-end acknowledgement because it is a router rather than a broker and never takes ownership of a message., [OASIS spec |http://docs.oasis-open.org/amqp/core/v1.0/csd02/amqp-core-messaging-v1.0-csd02.html#type-modified] tells us:

{quote}
At the source the modified outcome means that the message is no longer acquired by the receiver, and has been made available for (re-)delivery to the same or other targets receiving from the node. ...
.
.
.
 undeliverable-here	prevent redelivery	optional boolean
    If the undeliverable-here is set, then any messages released MUST NOT be redelivered to the modifying link endpoint. 
{quote}

I understand this as follows: {{modify(undeliverableHere)}} equals to {{release}} with the exception that modified link is excluded from the list of available targets.

Ok, I got it that this feature is not supported, but it would be great to learn these from docs, rather than from code.

bq.  At worst, it still wouldnt do what you want since the producer would not have any knowledge of the action by the consumer or the messge being requeued for delivery only to other consumers, so again youd need to look at doing something like request-response based messaging, or if you really want end-to-end acknoweldgement, perhaps look an entirely different solution.

End-to-end confirmation is not required, of course, but there was a chance that I'm doing something wrong there. I've found a workaround with {{redeliveryPlugin}}, but it is exactly workaround because it sometimes tries to send message back to consumer which asks not to deliver that message., Code is working as originally designed.  

Enhancement requests can be opened for items in this JIRA if desired but the broker is working as designed at present.  ]