[Unit test that demonstrates the race conditions described in this ticket.  Both tests fail before the patch and pass after the patch., Patch to address the reported issue., AMQ-4159 creates conditions that are ideal for AMQ-4160 to be exhibited; however, AMQ-4160 can still occur even with AMQ-4159 fixed., Copying this comment through from AMQ-4159 since it is salient to the fix described in AMQ-4160:

Thanks for the fast turnaround, Timothy. I linked AMQ-4159 and AMQ-4160 together as they are related (at least the symptoms were observed during the same test that we were running). Now that I think about it, the fix for AMQ-4160 relies on AMQ-4159 (i.e., one-to-one relationship between DiscoveryEvent and a bridge creation attempt). It would be great if AMQ-4160 could also be fixed for AMQ 5.8.0.
, Needed to confirm that this didn't break any tests and there's currently some instability in some of the network tests.  Looks good, nice work., Reopening as I've found two problems with the patch as applied:

+            // Should we try to connect to that URI?
+            if (activeEvents.putIfAbsent(uri, event) != null) {
+                LOG.debug("Discovery agent generated a duplicate onServiceAdd event for: "+uri );
+            }

---> there should be a "return" statement after the LOG.debug

+            // Only remove bridge if this is the active discovery event for the URL.
+            if (activeEvents.remove(url, event)) {
+                synchronized (bridges) {
+                    bridges.remove(uri);
+                }

---> the activeEvents.remove(url, event)) should be activeEvents.remove(uri, event) (i.e., uri instead of url)

The existing AMQ4160Test.java will not pass with these updates since it demonstrates the original bug, which was based on concurrent attempts being allowed to occur.  The original patch was still allowing concurrent attempts.  With these updated changes, concurrent attempts are disallowed so AMQ4160Test.java will fail --- I'll have to provide an updated unit test to account for this behaviour., Once you provide the updated patch we'll get this into a SNAPSHOT., I fixed up the discovery connector code to properly remove the uri and disabled one of the tests as it was not able to properly test the scenario any longer. , Reopening this as the activeEvents map was not being cleared when the network connector was stopped; as a result, restarting the network connector would not result in the bridges being re-established.

The updated patch contains the following changes:
- Unit test updated to include verification of handleStop
- Unit test updated to allow inclusion of the previously removed test; now verifies pre and post patch
- Improved waitForBridge/hasBridge methods added to JmsMultipleBrokersTestSupport --- the existing waitForBridgeFormation methods are based on NetworkConnector.bridges, which is updated prior to connections (and thus the bridge) actually being formed --- the new waitForBridge method waits for broker info to be exchange before declaring that a bridge has foremd, Revised patch to address handleStop behaviour., Applied the latest updates, lets see how the tests fair with these changes., Seems to be working now., Great to hear, Timothy.  Thanks for working through this with me., There was a regression in MulticastDiscoveryOnFaultyNetworkTest - the multicast agent did not reuse events so a remove was being ignored. It now behaves more like the static case w.r.t uniqueness of events.
@Tim or @Sterling - would be great if ye could peek at the changes to be sure I did not miss anything.
http://svn.apache.org/viewvc?rev=1428901&view=rev, The change seems sensible to me.]