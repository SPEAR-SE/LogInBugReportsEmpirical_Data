[The problem turns out to be another race condition.

If there is no default destination for a producer, the ActiveMQConnection.startAdvisoryForTempDestination() method is invoked before a message is sent.  For a message targeted to a temporary destination,  this causes a TemporaryDestinationAdvisor object to be created and started.  The message destination is then processed through the ActiveMQConnection.validateDestination().  However if the TemporaryDestinationAdvisor has not yet processed the TempDestinationAdvisoryEvent then the validation will fail.  In my case, there was about a 200ms delay between the "start" of the TemporaryDestinationAdvisor and the processing of the event.

As a fix I introduced a sleep(500) after initiating the TemporaryDestinationAdvisor.  This gives the time for the advisory event to be processed.  Now this is not an idle solution since it could cause unwanted latencies or be to short a delay in other cases.  But unless someone can suggest something better, it is all I have at this point. , I do not think that the sleep I introduced in ActiveMQConnection.startAdvisoryForTempDestination() is the proper place for the delay.  I think it should actually be in the TempDestinationAdvisor.isActive() method.  That way it could use a wait(time) and be release by the arrival of the advisory event.

Something I do not understand about the TempDestinationAdvisor class is that it looks like an instance of this class is created for every TemporaryDestination used by the client.  However, there is a set of activeDestinations as a member of this class.  Won't this set only contain one destination?  If so why is a Set used?, Fixed by allowing the "is active" test in TempDestinationAdvisor to wait for the initial advisory message., Just assigning to 3.1 release]