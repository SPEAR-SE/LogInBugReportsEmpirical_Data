[This patch looks ok to me but for the logging you should use the SLF4J logger and not System.out.println statements.  In general it's also good to add a test or two (if possible, might be tricky to verify in this case because the behavior is not broken just a memory leak) to show the patch works and to prevent future issues.

[~tabish121] - Before I merge does since you worked on AMQ-5423 can you take a quick look and make sure this looks good to you as well?, Hi [~cshannon]

I have had trouble writing unit tests for this patch. We have it running on our test environment for a few weeks with no issues so far. , The patch on the surface looks ok as it does seem we are not properly cleaning up.  The cleanUpPendingAcks method seems a bit off as it's comparing every value in the pending map to the values to be removed instead of just trying to remove the values given and reporting the removal if successful which would probably be more performant in the presence of many subscriptions. 

You might be able to write a test that show you can send an ack for something that should have been ack'd already and compare the ERROR response to see if the message matches expectations as before the fix the message Ack IDs seems to be retained so I'd expect a difference error before and after the fix. 

The code should be updated to follow the style of the surrounding code instead of introducing your own style and the logging should use the SLF4J loggers and not System.out calls. , Hi [~tabish121]

I did think of looping through the values just given. But at the point where I am adding elements to my removeMessageIds I don't have access to the 'ackId' which is the key for the pedingAcks array. So all I have is the messageId which is a property of ActEntry. ActEntry is the value of the pedingAcks array. 

For the unit tests I did try to check against different ERROR responses. The issue is line 445 in ProtocolConverter.java. The method call to pendingAck.onMessageAck(activemqTx); always returns null if we are 'acking' a message that as already been acked because inside that method it checks whether the message is in the dispatchedMessage array (which it isn't because it removes it correctly). So the response always returns 'Unexpected ACK received for message-id 123'

If you have any other ideas of how to write a unit test for this let me know. 

I have just updated the patch with the logging changes. Please review as we would like to push this to our prod environment in the next release. 

 , Commit 9abbe826ecc47596fb43fd42e094d403c56b158d in activemq's branch refs/heads/master from [~tabish121]
[ https://git-wip-us.apache.org/repos/asf?p=activemq.git;h=9abbe82 ]

AMQ-7006 Remove STOMP pending acks after client acknowledge

Reworked patch from Avikash Mishra to remove tracked pending acks from a
STOMP subscription that has acked., Commit 4bcc991d72c6b8bccc764ce2a704324ec9544803 in activemq's branch refs/heads/activemq-5.15.x from [~tabish121]
[ https://git-wip-us.apache.org/repos/asf?p=activemq.git;h=4bcc991 ]

AMQ-7006 Remove STOMP pending acks after client acknowledge

Reworked patch from Avikash Mishra to remove tracked pending acks from a
STOMP subscription that has acked.
(cherry picked from commit 9abbe826ecc47596fb43fd42e094d403c56b158d)
]