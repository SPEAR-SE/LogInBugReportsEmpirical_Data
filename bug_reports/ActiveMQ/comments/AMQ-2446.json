[I think this may be linked to https://issues.apache.org/activemq/browse/AMQ-2044., would it be possible to run your test case against the current 5.3 release candidate to see if it is resolved. Details of where to find the kits are in the current vote message to the dev list: see: http://www.nabble.com/-VOTE--Apache-ActiveMQ-5.3.0-RC4-ts25802076.html
, Hi. I D/L 5.3 RC4 from the link above. I took my application, added the activemq-all-5.3.0.jar jar in my classpath (before other jars) and I still have the same problem (client hangs). I can't vote for a 5.3 RC4 without this being fixed ;-). It is just normal that sometimes, the broker has to be stopped and clients should really not hang like that.

In the mean time, I redesigned portions of my app to use receiveNoWait() + my own thread sleeping logic (more latency though on new messages added to an empty queue of course) instead of receive(timeout) and with that, event with the 5.2 version, I get some exceptions that I can use to recover lost connections, and still use the prefetchSize=0 option on my connection URL.

Still, we have an integration component using Camel on top of ActiveMQ, and for that one, there is not much I can do.

Thanks.

, Contains an Eclipse 3.3 project., Good news! I wrote down the simplest test case I could come with:

import java.util.Properties;

import javax.jms.Connection;
import javax.jms.ConnectionFactory;
import javax.jms.Destination;
import javax.jms.MessageConsumer;
import javax.jms.Session;
import javax.naming.Context;
import javax.naming.InitialContext;

public class TestActiveMQShutdown {

    /**
     * Start ActiveMQ on default port
     * Run the main program, it will make a receive with a timeout of 30 seconds
     * During that time, shutdown ActiveMQ.  
     * The system.out below will never happen and you will need to kill the java process
     */
    public static void main(String[] args) throws Exception {

        Properties props = new Properties();
        props.put(Context.INITIAL_CONTEXT_FACTORY, "org.apache.activemq.jndi.ActiveMQInitialContextFactory");
        // Please not the prefetch policy here
        props.put(Context.PROVIDER_URL, "tcp://localhost:61616?jms.prefetchPolicy.queuePrefetch=0");
        props.put("queue.test1", "test1.q");

        InitialContext initialContext = new javax.naming.InitialContext(props);

        ConnectionFactory connectionFactory = (ConnectionFactory) initialContext.lookup("ConnectionFactory");

        Connection connection = (Connection) connectionFactory.createConnection();

        Session session = connection.createSession(true, Session.AUTO_ACKNOWLEDGE);

        Destination destination = (Destination) initialContext.lookup("test1");

        MessageConsumer messageConsumer = session.createConsumer(destination);

        messageConsumer.receive(30000);

        System.out.println("Will never get there if ActiveMQ is shutdown while we were in the receive call above");

        // I don't care about closing all resources in that test and about the message received

    }

}

And with that, I can reproduce the problem in 5.2 (using activemq-all-5.2.0.jar) , but not in 5.3 (using activemq-all-5.3.0.jar). I used jms-1.1.jar in both cases.

I must have made a mistake or something with my full application when I tried to modify. If you guys can confirm that my test case works for you too, reproducing the problem in 5.2 and seeing 5.3 fixes it, the we could all vote for 5.3 RC4!
, Of course, when using activemq-all-5.2.0.jar, I was running ActiveMQ 5.2 server and when using activemq-all-5.3.0.jar, I was running 5.3., junit tests case that demos that this works with trunk and hence 5.3, glad to see we both came to the same conclusion :-) I had just run my junit tests case that worked fine against trunk. thanks,, Hi, I am using 5.4.1 and still have the same situation. I use prefetch=0, failover and connection pool. 

Sometimes when I call receive(1000), the consumer hangs at this line:

org.apache.activemq.SimplePriorityMessageDispatchChannel.dequeue(SimplePriorityMessageDispatchChannel.java:87)
org.apache.activemq.ActiveMQMessageConsumer.dequeue(ActiveMQMessageConsumer.java:452)

It's very difficult to reproduce with a test case.

thanks,
adrian, I wanted to add that we are using 5.6.0 and hit this hang also using prefetch=0, failoverTransport and Spring CachingConnectionFactory with a DMLC consumer.  We aren't sure where in the process the disconnect happens, but after killing the broker, some (but not ALL) of our consumers hung on this wait.  Looking at the Java thread dump, they were on the mutex.wait() call that is mentioned in this JIRA.

We were doing failover testing for our clustered solution hence the reason for stopping the broker during testing.]