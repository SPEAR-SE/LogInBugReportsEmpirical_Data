[what jdk are you using and on what platform. The first stack trace is odd, as if the system property "line.separator" is null!.
{code}	lineSeparator =	(String) java.security.AccessController.doPrivileged(
               new sun.security.action.GetPropertyAction("line.separator"));{code}, just to validate: this is on a current snapshot?
I am at a loss here, as the initialization looks safe to me. see:org.apache.activemq.store.kahadb.plist.PListStore#intialize
in: http://svn.apache.org/viewvc/activemq/trunk/activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java?view=markup, I agree, the first stack trace does look odd.

Standard Sun/Oracle jdk on Solaris:

weizen> java -version
java version "1.6.0_19"
Java(TM) SE Runtime Environment (build 1.6.0_19-b04)
Java HotSpot(TM) Server VM (build 16.2-b04, mixed mode)

weizen> uname -a
SunOS weizen 5.10 Generic_138889-07 i86pc i386 i86pc
stargus@weizen> 
, The version of 5.6 was retrieved from https://repository.apache.org/content/repositories/snapshots/org/apache/activemq/apache-activemq/5.6-SNAPSHOT/

as:

apache-activemq-5.6-SNAPSHOT-bin.tar.gz 

being the version posted as of 7 Sept.	  
, hmm. thanks for the detail. I need to try and reproduce. Do you have a junit test case you can share? If not, is it stomp or openwire and what setup, how many concurrent producers etc. thanks., I don't have a test case that directly exposes this issue, but need to put one together. I'll work on that.

It's not stomp, so I guess it's openwire. There's perhaps 20 concurrent producers, each emits a burst of large messages once per hour and, of course, at the same time.

The producers create a connection like this:

			QueueConnectionFactory queueFactory = (QueueConnectionFactory)getJndiElement(m_dataChannelQueueConnectionFactoryJndiName);
			log(Level.TRACE, "QueueConnectionFactory successfully established");
			Queue queue = (Queue) getJndiElement(queueName);

			m_connection = queueFactory.createQueueConnection(getJndiUser(), getJndiPassword());
			log(Level.TRACE, "QueueConnection created");
			m_connection.setClientID("DataChannel_" + m_nodeId + "_" + queueName +"_" + messageNumber.toString());
			messageNumber.incrementAndGet();
			m_queueSession = m_connection.createQueueSession(false, Session.AUTO_ACKNOWLEDGE);
			m_queueSender = m_queueSession.createSender(queue);
			log(Level.TRACE, "QueueSession created: " + m_queueSender.toString());
			m_queueSender.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
, part of the problem is that the plist store initialisation was setting the init-done flag early, such that in the case of the first exception above, the store was considered initialised. I have resolved[1] that so in the event of a failed attempt it will retry. the reason for the first exception is still a misery though.
[1] http://svn.apache.org/viewvc?rev=1171487&view=rev, Regarding the observation that it appears the line.separator property is  null in the stack traces ... This is consistent with the discovery that the message handling thread is in a context where the system properties are not available.

In order to ensure the Oracle jdbc driver can find tnsnames.ora, it was necessary to set the magic oracle.net.tns_admin property during message handling.

I just ran a test to see if line.separator property had a value in the message handing thread and it is null, so it seems this is the reason for the curious appearance of the stack traces., Some more control of when the temp store is initialised can help here so that the execution context can be specific.

With http://svn.apache.org/viewvc?rev=1172528&view=rev it is possible to configure a temp store(plistStore) with lazyInit="false" so that it gets initaliszed on broker start rather than when first used to spool messages to disk.
]