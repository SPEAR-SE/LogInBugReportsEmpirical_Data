[Logs, This is the code I use to wrap the ActiveMQ library that all my other software uses., Snippet of code used in the web portal to send messages and receive responses., ActiveMQ configuration files, ActiveMQ server configuration files, I profiled the server instance using YourKit while the flood was taking place. I've included the trace to hopefully help in the debugging process. I've found that when I disable any kind of authorization that things seems to work fine. Looking at the trace, it looks like there might be a problem related to the AuthorizationBroker, but I'm not sure., After more testing, I think there is a race condition in DefaultAuthorizationMap. Instead of going to LDAP, I defined the authorization entries in configuration and was able to reproduce the issue., I've done further testing, I now think the problem is higher up than the DefaultAuthorizationMap in the AuthorizationBroker. I created a very simple class that implements AuthorizationMap that always returns a static set of ACLs and I was able to reproduce the flooding., Hi,

I see you're using some kind of a custom <solidInstanceCachedLDAPAuthorizationMap/> authorization plugin. Are you sure the problem isn't somewhere in there. 

Can you give Cached LDAP Authorization Module a try http://activemq.apache.org/cached-ldap-authorization-module.html and see if it helps.

Also, can you share more info on your further testings and how do you reproduce the problem, No, I just made some changes so that the regular cachedLDAPAuthorizationMap would work with Active Directory. Those changes have now been put into trunk so I could still go back to using the regular one and still see the problem. In a previous comment I said that I wrote an extremely simple plugin that always returned the same ACLs and was still able to reproduce the problem. To reproduce the issue, I just setup a simple request/reply system using text messages. I believe I've attached the code I used. There was never a set number of messages I had to send before the flooding started. At first I was only able to reproduce the problem going over VPN, but eventually I was able to reproduce the problem between VMs., Hi.

I think we are seeing the same issue with fuse version 5.5.1-fuse-08-15 (was already the case for previous versions). We are running 2 brokers is a cluster with dynamic temporary queue forwarding. After some time, the 2 brokers get into some "vicious circle", whereby the same temporary queues are repeatedly added then removed from each of the brokers. As Chris mentions, this seems to use up a single thread on each process, presumably the thread removing & creating this temporary queues. It looks like the temporary queues are simply passed back and forth between the 2 brokers, and never get removed correctly. Only a restart of the brokers fixes the problem., Forgot to add: we are using the SimpleAuthenticationPlugin with a tempDestinationAuthorizationEntry in the AuthorizationMap., Thanks for confirming. I see one potential problem that can cause it. I'll try to reproduce it now., It should be fixed now with svn revision 1393988.

I did some refactoring of AdvisoryBroker to handle addDestinationInfo case properly.

Can you test the latest snapshot

https://repository.apache.org/content/repositories/snapshots/org/apache/activemq/apache-activemq/5.8-SNAPSHOT/apache-activemq-5.8-20121004.112554-4-bin.tar.gz

and report back if you still see the problem.]