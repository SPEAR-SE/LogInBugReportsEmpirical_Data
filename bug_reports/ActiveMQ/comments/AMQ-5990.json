[{code}
diff --git a/activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/ConnectionPool.java b/activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/ConnectionPool.java
index 6b6fe65..22d0517 100644
--- a/activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/ConnectionPool.java
+++ b/activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/ConnectionPool.java
@@ -29,13 +29,11 @@ import javax.jms.Session;
 import javax.jms.TemporaryQueue;
 import javax.jms.TemporaryTopic;
 
-import org.apache.commons.pool2.BasePooledObjectFactory;
-import org.apache.commons.pool2.KeyedObjectPool;
 import org.apache.commons.pool2.KeyedPooledObjectFactory;
 import org.apache.commons.pool2.PooledObject;
 import org.apache.commons.pool2.impl.DefaultPooledObject;
 import org.apache.commons.pool2.impl.GenericKeyedObjectPool;
-import org.apache.commons.pool2.impl.GenericObjectPool;
+import org.apache.commons.pool2.impl.GenericKeyedObjectPoolConfig;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -66,6 +64,9 @@ public class ConnectionPool implements ExceptionListener {
     private ExceptionListener parentExceptionListener;
 
     public ConnectionPool(Connection connection) {
+    	this(connection, new GenericKeyedObjectPoolConfig());
+    }
+    public ConnectionPool(Connection connection, GenericKeyedObjectPoolConfig config) {
 
         this.connection = wrap(connection);
 
@@ -96,7 +97,7 @@ public class ConnectionPool implements ExceptionListener {
                 public void passivateObject(SessionKey sessionKey, PooledObject<SessionHolder> pooledObject) throws Exception {
                 }
             }
-        );
+            , config == null ? new GenericKeyedObjectPoolConfig() : config);
     }
 
     // useful when external failure needs to force expiry
diff --git a/activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java b/activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java
index ab251c5..4415683 100644
--- a/activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java
+++ b/activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java
@@ -32,6 +32,7 @@ import org.apache.commons.pool2.KeyedPooledObjectFactory;
 import org.apache.commons.pool2.PooledObject;
 import org.apache.commons.pool2.impl.DefaultPooledObject;
 import org.apache.commons.pool2.impl.GenericKeyedObjectPool;
+import org.apache.commons.pool2.impl.GenericKeyedObjectPoolConfig;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -80,6 +81,11 @@ public class PooledConnectionFactory implements ConnectionFactory, QueueConnecti
     private boolean createConnectionOnStartup = true;
     private boolean useAnonymousProducers = true;
     private boolean reconnectOnException = true;
+    private GenericKeyedObjectPoolConfig config;
+    
+    public void setBasePoolConfig(final GenericKeyedObjectPoolConfig config) {
+    	this.config = config;
+    }
 
     // Temporary value used to always fetch the result of makeObject.
     private final AtomicReference<ConnectionPool> mostRecentlyCreated = new AtomicReference<ConnectionPool>(null);
@@ -147,7 +153,7 @@ public class PooledConnectionFactory implements ConnectionFactory, QueueConnecti
                     public void passivateObject(ConnectionKey connectionKey, PooledObject<ConnectionPool> pooledObject) throws Exception {
                     }
 
-                });
+                }, config == null ? new GenericKeyedObjectPoolConfig() : config);
 
             // Set max idle (not max active) since our connections always idle in the pool.
             this.connectionsPool.setMaxIdlePerKey(1);
@@ -535,7 +541,7 @@ public class PooledConnectionFactory implements ConnectionFactory, QueueConnecti
      * @return instance of a new ConnectionPool.
      */
     protected ConnectionPool createConnectionPool(Connection connection) {
-        return new ConnectionPool(connection);
+        return new ConnectionPool(connection, config);
     }
 
     /**
{code}, This seems fine to me, I can apply the patch with a couple of tweaks., Allowing access to the configuration of the underlying pool could result in a broker Connection pool given how the PooledConnection bits work, I'd recommend just turning off the JMX bits by default in the pool. , Commit 7c7c505057ec350eada8d5194b7e30337277f9b2 in activemq's branch refs/heads/master from [~cshannon]
[ https://git-wip-us.apache.org/repos/asf?p=activemq.git;h=7c7c505 ]

https://issues.apache.org/jira/browse/AMQ-5990

Disabling JMX for the Commons Pool implementation inside of
PooledConnectionFactory.  In the future if we want JMX we should
enable our own JMX stats that are independent of Commons Pool.
, Commit 90122ec49f8fb54595b77ee2811f3c36be160716 in activemq's branch refs/heads/activemq-5.12.x from [~cshannon]
[ https://git-wip-us.apache.org/repos/asf?p=activemq.git;h=90122ec ]

https://issues.apache.org/jira/browse/AMQ-5990

Disabling JMX for the Commons Pool implementation inside of
PooledConnectionFactory.  In the future if we want JMX we should
enable our own JMX stats that are independent of Commons Pool.

(cherry picked from commit 7c7c505057ec350eada8d5194b7e30337277f9b2)
, Based on the fact that we want to encapsulate the use of Commons Pool and not expose it, I turned of JMX by default and did not expose the configuration option.  There's already an open ticket for adding JMX statistics to the PooledConnectionFactory which should be turned on in the future: AMQ-4025, Perfect this serves my purpose. Thanks.
[~cshannon] Do you know when activemq 5.12.1 is scheduled to be released?
Based on that date we should adjust our product release., I'd like to do a release soon as there are already a good number of fixes ready to go. (maybe call a vote next week) But, there are a couple of other tickets that I want to get resolved first, notably AMQ-5966 and AMQ-5994 so we'll see how those go and if anything else critical pops up., How can I download the snapshot build for this change?, The snapshot maven repo is here: https://repository.apache.org/content/repositories/snapshots/

You can download the latest binaries here: 

https://repository.apache.org/content/repositories/snapshots/org/apache/activemq/apache-activemq/ , Could you please point me in the direction on how to vote for the release? I don't want to use a snapshot version in production., You can subscribe to the developers list by using these instructions: http://activemq.apache.org/mailing-lists.html

When a vote is called it will be on the developers list.  There's still one issue that needs to be resolved before putting out a 5.12.1 release.]