[fix in http://git-wip-us.apache.org/repos/asf/activemq/commit/f2a335c2

a next message can have >= last recovered priority and be in sequence or not be in sequence if it has lower priority.

setter for two statements was missing so not possible to configure via xml. Sorted now., There is a problem with the fix, higher priority messages that are dispatched but where the ack has not yet committed are pulled from the store in error and are suppressed as duplicates, filling up the DLQ. This is not good.
Am working on a fix., The underlying issue was the tracked last recovered priority. This needed to be reset in the presence of newly added higher priority messages.
Fix and updated tests in http://git-wip-us.apache.org/repos/asf/activemq/commit/eece28ac
, this needs yet another revisit. long lived transactions show that the limitations of the current approach. The message store needs to keep track of the last recovered sequence on a per priority basis, in a similar manner to the topic store. Having the db select from all available messages seems like the simplest solution b/c the priorities via jms are limited to 0-9 , fix and additional test in: http://git-wip-us.apache.org/repos/asf/activemq/commit/a2697b84

select clause is now explicit for each [0-9] supported priority wit the store tracking the last recovered sequence., additional fix and test - both kahadb and jdbc stores needed fixes for cacheEnabled case - http://git-wip-us.apache.org/repos/asf/activemq/commit/3985e722]