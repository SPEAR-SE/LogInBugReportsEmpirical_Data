[Reproduction test case, Here's a better test case i.e. this one compiles from clean (sorry about the last one!), I have managed to work around this issue by not using Jencks and instead using Spring JmsTemplate and SingleConnectionFactory, The fact that consumer stopped receiving messages was caused by the "transaction has not been started error" 

this was caused by the default JMS template in Spring would open and close the connection for each message.

Switching to the single connection factory where a single connection is reused works around this,

it is possible that using
TransactionAwareConnectionFactoryProxy will help out with this as well, when using Spring managed transactions

Filip, Given Filip's comment, is this still an open issue? , I don't know if the comment is quite right - apologies for not giving feedback before.   Incoming messages do not use a spring JmsTemplate at all - they use xml as below as recommended on jencks website. I've uploaded a slightly refactored version of the reproduction code to make this clearer. 

	<bean id="inboundConnector" class="org.jencks.JCAConnector">
		<property name="jcaContainer" ref="jencks" />
		<property name="activationSpec" ref="activationSpec"/>
		<property name="ref" value="echoBean" />
	</bean>

	<bean id="echoBean" class="com.repro.EchoBean" scope="prototype"/>
, I just gave your test case a run with trunk and it works as expected. Each listen gets an even distribution of messages.
I know that at least one instance of "transaction has not started" has been fixed since 5.1 as have a bunch of other high through put issues.
Can you verify that the problem still exists with trunk or with the current 5.2 RC2 - http://people.apache.org/~gtully/staging-repos/activemq-5.2.0/org/apache/activemq/apache-activemq/5.2.0 or the latest apache 5.3-SNAPSHOT build http://people.apache.org/repo/m2-snapshot-repository/org/apache/activemq/apache-activemq/5.3-SNAPSHOT/
, I ran this up to 6500 messages/second and I'm still not seeing any issues. , I've tried this with 5.2.0RC2 and still the same problem, and same problem with 5.3.SNAPSHOT I'm afraid, I can now reproduce. tx not started error on broker.  thx.
, This test is a demonstration of a limitation of the current geronimo transaction manager xid factory. With three JMVs on the same machine executing the same code, the transaction identifiers are identical.
The broker sees the same Xid on three connections instead of three separate transactions. The problem occurs when a transaction commit occurs before the last ack on a connection.

The default geronimo xidFactory impl needs to add some entropy in the form of a random to the baseId. The current use of HashCode and IP address for baseId is not sufficient. Typically nodes will be on different IP addresses so this will not be an issue.
I raised a geronimo issue with a suggested patch:  https://issues.apache.org/jira/browse/GERONIMO-4393

As a workaround:
there is a constructor argument that allows the baseId to be specified, if this makes use of the clientId property, the test works as expected.

{code}
  <bean id="xidFactory" class="org.apache.geronimo.transaction.manager.XidFactoryImpl">
  	<constructor-arg><value>bla-bla-${clientId}</value></constructor-arg>
  </bean>

  <bean id="transactionManager" class="org.jencks.factory.TransactionManagerFactoryBean" lazy-init="default" autowire="default" dependency-check="default" >
  	<property name="xidFactory" ref="xidFactory" />
  </bean>
{code}, These fixes will now make 5.2.0 rc3]