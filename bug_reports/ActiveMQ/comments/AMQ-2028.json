[Fixed in rev 725020., It seems to me that the ActiveMQSessionExecutor is still not very thread safe.

The problem is that in the stop() method the this.taskRunner is set to null without synchronization.

Hence in the wakeup() method within the synchronized block it could happen that this.taskRunner is set to null between 
creating new TaskRunner and assigning it to the local variable, if the stop() is called in parallel  - see below:

                        synchronized (this) {
                            if (this.taskRunner == null) {
                                this.taskRunner = session.connection.getSessionTaskRunner().createTaskRunner(this,
                                        "ActiveMQ Session: " + session.getSessionId());
                            }
                            ///////////////// here this.taskRunner can be set to null, if stop() is called  in between .... //////////////////////
                            taskRunner = this.taskRunner;
                        }
The result would be a NullPointerException in taskRunner.wakeup() two lines below.
, You should create a new issue or at least re-open this issue ...., Attached a proposal for a thread safety patch., fixed applied in r835874
left use of volatile but tidied up stop() logic and creation of new taskRunner if queue was stopped. This avoids the NPE. Came across this with useDedicatedTaskRunner=true system property, result was leaked threads due to this sync issue.]