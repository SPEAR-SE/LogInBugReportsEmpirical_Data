[Added test case - org.apache.activemq.bugs.JMSDurableTopicNoLocalTest - SVN revision 899205
Cannot reproduce on trunk, Thanks Davies!
To reproduce, I deploy a completely new AMQ 5.2.0 application on server  and drop all tables created by AMQ automatically.
then I start AMQ  and run the test case Producer.java.
It works fine. Subscriber does not receive message sent by the same connection.
The information displayed in the console:
----------------------------------------------------------------------------------------------------------------------------------------------------------
Send a message ActiveMQTextMessage {commandId = 0, responseRequired = false, messageId = ID:suonayi-826da47-5000-1263649149250-0:0:1:1:1, originalDestination = null, originalTransactionId = null, producerId = null, destination = topic://topicA, transactionId = null, expiration = 0, timestamp = 1263649150000, arrival = 0, brokerInTime = 0, brokerOutTime = 0, correlationId = null, replyTo = null, persistent = true, type = null, priority = 4, groupID = null, groupSequence = 0, targetConsumerId = null, compressed = false, userID = null, content = null, marshalledProperties = null, dataStructure = null, redeliveryCounter = 0, size = 0, properties = null, readOnlyProperties = false, readOnlyBody = false, droppable = false, text = THIS IS A TEST}
-----------------------------------------------------------------------------------------------------------------------------------------------------------
I restart Producer.java again. Subscriber does receive message sent by itself this time.
The information displayed in the console:
-----------------------------------------------------------------------------------------------------------------------------------------------------------
Send a message ActiveMQTextMessage {commandId = 0, responseRequired = false, messageId = ID:suonayi-826da47-1046-1263649222250-0:0:1:1:1, originalDestination = null, originalTransactionId = null, producerId = null, destination = topic://topicA, transactionId = null, expiration = 0, timestamp = 1263649223250, arrival = 0, brokerInTime = 0, brokerOutTime = 0, correlationId = null, replyTo = null, persistent = true, type = null, priority = 4, groupID = null, groupSequence = 0, targetConsumerId = null, compressed = false, userID = null, content = null, marshalledProperties = null, dataStructure = null, redeliveryCounter = 0, size = 0, properties = null, readOnlyProperties = false, readOnlyBody = false, droppable = false, text = THIS IS A TEST}

Receive a message ActiveMQTextMessage {commandId = 6, responseRequired = true, messageId = ID:suonayi-826da47-1046-1263649222250-0:0:1:1:1, originalDestination = null, originalTransactionId = null, producerId = ID:suonayi-826da47-1046-1263649222250-0:0:1:1, destination = topic://topicA, transactionId = null, expiration = 0, timestamp = 1263649223250, arrival = 0, brokerInTime = 1263649053526, brokerOutTime = 1263649053531, correlationId = null, replyTo = null, persistent = true, type = null, priority = 4, groupID = null, groupSequence = 0, targetConsumerId = null, compressed = false, userID = null, content = null, marshalledProperties = null, dataStructure = null, redeliveryCounter = 0, size = 0, properties = null, readOnlyProperties = true, readOnlyBody = true, droppable = false, text = THIS IS A TEST}
-----------------------------------------------------------------------------------------------------------------------------------------------------------
Please notice that messageId  is same with the message sent to broker and received by messagelistener.
, I hava figured out what is incorrect in AMQ Broker.
When a new subscriber comes Broker will create a new one and initialize it's selector.
But when an existing subscriber comes Broker will just active it and do not initialize it's selector again.
So the bug occurs.
I hava fixed it but I'm not able to commit it to trunk.
:)
, You can always provide a patch :), No test case given to reproduce the problem., @SuoNayi,I hava change TopicRegion.hasDurableSubChanged to this:
private boolean hasDurableSubChanged(ConsumerInfo info1, ConsumerInfo info2) {
	if (info1.getSelector() != null ^ info2.getSelector() != null) {
		return true;
	}
	if (info1.getSelector() != null && !info1.getSelector().equals(info2.getSelector())) {
		return true;
	}
	// if noLocal is true ,create this consumer again.
	if(info1.isNoLocal()||info2.isNoLocal()){
		return true;
	}
	return !info1.getDestination().equals(info2.getDestination());
}
=======================================================================
In this case,the noLocal is right,but if you restart the broker,the Durable Subscription can not receive the message send before it's create again.]