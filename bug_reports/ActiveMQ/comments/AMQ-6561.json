[Commit d9c74d7317677725a52466349f7ed91911664d3d in activemq's branch refs/heads/master from [~cshannon]
[ https://git-wip-us.apache.org/repos/asf?p=activemq.git;h=d9c74d7 ]

https://issues.apache.org/jira/browse/AMQ-6561

Stop connections on all connection attempt errors, not just security
exceptions, to prevent dangling open sockets.
, Commit df7aa6e892853fd442739a49417ecdf34a6cac63 in activemq's branch refs/heads/activemq-5.14.x from [~cshannon]
[ https://git-wip-us.apache.org/repos/asf?p=activemq.git;h=df7aa6e ]

https://issues.apache.org/jira/browse/AMQ-6561

Stop connections on all connection attempt errors, not just security
exceptions, to prevent dangling open sockets.

(cherry picked from commit d9c74d7317677725a52466349f7ed91911664d3d)
, Hi Christopher,

I am looking to upgrade my ActiveMQ version (v5.11.1 to v5.14.x) and I just saw this bug. Can this bug cause file descriptor leakage? When do you guys plan to release v5.14.4? Are there any other bugs which i should wait for them to be fixed in 5.14.4? , Yes this bug can cause file descriptors to be leaked if the client does not close the connection.  I'm not entirely sure when 5.14.4 will be released (I guess when we determine there is enough bugs fixed) but if you update to 5.14.3 now then the update to 5.14.4 later would be pretty easy.  

This bug has existed for a long time and is not new so I wouldn't necessarily hold off upgrading.  The affects version should probably be updated to show that it actually goes back quite a while.  I just listed the latest version but I believe this issue goes back several versions., I see that the code that you fixed is present in v5.11.1. Can you explain a little more on how this bug will manifest  - like do we see sockets in close_wait state? what is the behavior when this bug happens?, The sockets will stay in established state if they stay open.  The issue occurs if a new connection from a client fails for a reason other than a security reason (such as invalid clientId) and then the client doesn't close the socket on their end.  So if the client calls close() on their connection after they get an error or if they shutdown the JVM then the socket would close and it would be fine.  As far as the behavior, you just end up with a bunch of open sockets that won't be closed.  This of course is bad as you can run out of file descriptors, etc.

If you want to see the behavior in action take a look at the unit test I committed: https://git-wip-us.apache.org/repos/asf?p=activemq.git;a=blob;f=activemq-unit-tests/src/test/java/org/apache/activemq/transport/tcp/TcpTransportCloseSocketTest.java;h=ad2080beaea2a21c24a37003cbab6c7a63344aa1;hb=df7aa6e

This test shows that after the fix there is only 1 socket open instead of 2 because the second connection attempt fails.  If you run this test against an older version such as 5.14.3 then there will be 2 sockets open even though the second connection attempt failed with an InvalidClientIDException because both the broker and client didn't close the socket., Commit 36689beff755fd6391c3a8291d1e89fc782eac0d in activemq's branch refs/heads/master from [~gtully]
[ https://git-wip-us.apache.org/repos/asf?p=activemq.git;h=36689be ]

[AMQ-6561] fix up unit test that expects socket to remain open after InvalidClientIDException, dubious expectation in the test that wants to verify broker is ok
]