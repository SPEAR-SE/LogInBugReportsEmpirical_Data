[||Messages per second ||	Message size [chars]||		Note
|25 |	10|		1000 messages with 10 characters in 40 seconds
|25 |	100 |		1000 messages with 100 characters in 40 seconds
|23|	200|		1000 messages with 200 characters in 43 seconds
|25|	300|		1000 messages with 300 characters in 40 seconds
|25|	400|		1000 messages with 400 characters in 40 seconds
|25|	500|		1000 messages with 500 characters in 40 seconds
|25|	600|		1000 messages with 600 characters in 40 seconds
|25|	700|		1000 messages with 700 characters in 40 seconds
|25|	800|		1000 messages with 800 characters in 40 seconds
|25|	900|		1000 messages with 900 characters in 40 seconds
|167|	1000|		1000 messages with 1000 characters in 6 seconds
|250|	2000|		1000 messages with 2000 characters in 4 seconds
|250|	3000|		1000 messages with 3000 characters in 4 seconds
|250|	4000|		1000 messages with 4000 characters in 4 seconds
|200|	5000|		1000 messages with 5000 characters in 5 seconds
|200|	10000|		1000 messages with 10000 characters in 5 seconds
|167|	20000|		1000 messages with 20000 characters in 6 seconds
|125|	30000|		1000 messages with 30000 characters in 8 seconds
|100|	40000|		1000 messages with 40000 characters in 10 seconds
|84|	50000|		1000 messages with 50000 characters in 12 seconds
|84|	60000|		1000 messages with 60000 characters in 12 seconds
|77|	70000|		1000 messages with 70000 characters in 13 seconds

, We need more information on this such as broker config and client code to see how you are using the broker., we use the default config and the attached perl client, Find attached another unit test. The following is remarkable:
*Version 1* delivers the throughput that Thomas mentions. BUT:
*Version 2* (fetching the receipt after all messages were send) is much faster than version 1., The supplied java test harness shows the problem with the users performance numbers, the perl test is send and receiving at the same time so naturally the numbers begin to drift upward as the overhead associated with this process accumulate.]