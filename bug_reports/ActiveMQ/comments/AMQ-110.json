[I am having the same issue.  The specific problem I am having is testing the recovery of messages.  I create 10 messages and place them into the JMS queue.  I let a few of them process through the Listener and then I shutdown Tomcat.  Then I start Tomcat again and I see the remaining messages process but I get the error mentioned in this bug report.  To make matters worse, if I shutdown Tomcat and restart again The same messages will process again becuase they were not deleted from the DB., I have the same problems.
when I send 10000 messages the consumer receive more than 10000 messages many messages are repeating., I changed to Jourlan + JDBC (derby) persistence and am getting a very similiary error :

[2004-12-02 13:46:38 GMT]INFO  [JournalPersistenceAdapter] Journal Recovery Started.
[2004-12-02 13:46:38 GMT]ERROR [JournalPersistenceAdapter] Recovery Failure: Could not remove message: ID:ev1.drivenow.com.au-45070-1101875238632-68250:0, reason: javax.jms.JMSException: Could not locate message in database with message id: ID:ev1.drivenow.com.au-45070-1101875238632-68250:0
javax.jms.JMSException: Could not locate message in database with message id: ID:ev1.drivenow.com.au-45070-1101875238632-68250:0
        at org.codehaus.activemq.store.jdbc.JDBCMessageStore.getMessageSequenceId(JDBCMessageStore.java:125)
        at org.codehaus.activemq.store.jdbc.JDBCMessageStore.removeMessage(JDBCMessageStore.java:136)
        at org.codehaus.activemq.store.journal.JournalPersistenceAdapter.recover(JournalPersistenceAdapter.java:469)
        at org.codehaus.activemq.store.journal.JournalPersistenceAdapter.start(JournalPersistenceAdapter.java:154)
        at org.codehaus.activemq.store.cache.CachePersistenceAdapter.start(CachePersistenceAdapter.java:85)
        at org.codehaus.activemq.broker.impl.DefaultBroker.start(DefaultBroker.java:148)
        at org.codehaus.activemq.broker.impl.BrokerContainerImpl.start(BrokerContainerImpl.java:141)
        at org.codehaus.activemq.broker.BrokerContext.getBrokerContainerByName(BrokerContext.java:51)
        at org.codehaus.activemq.ActiveMQConnectionFactory.getContainer(ActiveMQConnectionFactory.java:535)
        at org.codehaus.activemq.ActiveMQConnectionFactory.createBrokerConnector(ActiveMQConnectionFactory.java:542)
        at org.codehaus.activemq.ActiveMQConnectionFactory.createTransportChannel(ActiveMQConnectionFactory.java:512)
        at org.codehaus.activemq.ActiveMQConnectionFactory.createConnection(ActiveMQConnectionFactory.java:333)
        at org.codehaus.activemq.ActiveMQConnectionFactory.createConnection(ActiveMQConnectionFactory.java:323)
        at org.springframework.jms.connection.SingleConnectionFactory.doCreateConnection(SingleConnectionFactory.java:150)
        at org.springframework.jms.connection.SingleConnectionFactory.init(SingleConnectionFactory.java:135)
        at org.springframework.jms.connection.SingleConnectionFactory.createConnection(SingleConnectionFactory.java:169)
        at org.springframework.jms.core.JmsTemplate.createConnection(JmsTemplate.java:404)
        at org.springframework.jms.core.JmsTemplate.execute(JmsTemplate.java:499)
        at org.springframework.jms.core.JmsTemplate.receive(JmsTemplate.java:663)
        at com.drivenow.mq.ScraperProcess.doConsume(ScraperProcess.java:213)
        at com.drivenow.mq.ScraperProcess.consume(ScraperProcess.java:191)
        at com.drivenow.mq.ScraperProcess$1.run(ScraperProcess.java:162)
        at java.lang.Thread.run(Thread.java:534)
[2004-12-02 13:46:39 GMT]INFO  [JournalPersistenceAdapter] Journal Recovered: 5 message(s) in transactions recovered.

This happens while starting the JVM, after I have stop the JVM while messages are queues., From 3.0 onwards we are deprecating BDB and instead use our own journal and JDBC as they perform much better and have less bugs.]