[You need to enable priority dispatch via the broker config (destination policy) for a destination.

Also note that the default store, kahaDB supports high (>4), default(4) and low(<4),so three priorities only. The JDBC store supports 0-9.

Have a look at the org.apache.activemq.store.MessagePriorityTest for the configuration. There are two variants, JDBC and KahaDB that show the difference in implementation.

eg:
http://svn.apache.org/viewvc/activemq/trunk/activemq-core/src/test/java/org/apache/activemq/store/jdbc/JDBCMessagePriorityTest.java?view=log

http://svn.apache.org/viewvc/activemq/trunk/activemq-core/src/test/java/org/apache/activemq/store/kahadb/KahaDBMessagePriorityTest.java?view=log, Gary,

Can you please be more specific with this: "You need to enable priority dispatch via the broker config (destination policy) for a destination."

Especially in regards to how it will change what I am seeing, and why., The configuration is described at http://activemq.apache.org/how-can-i-support-priority-queues.html, consumer have priority enabled by default, so prefetched messages will be reordered. But without the broker ordering message dispatch you will get only partial ordering.
Also, have a look at the test case. If you find problems, a variation of the existing test case is a great way to submit an issue., {quote}"But without the broker ordering message dispatch you will get only partial ordering."

Do you mean this: prioritizedMessages="true".{quote}
yes, a reply to your direct email bounced!, Okay, great thanks... can  you please be more specific in regards to partial ordering occurring when prioritizedMessages is set to false.

That is, what is and is not occurring with the prioritizedMessages setting is set to *false*, and  what is and is not occurring with the prioritizedMessages setting is set to *true*?

Thanks!, Working ass designed.  ]