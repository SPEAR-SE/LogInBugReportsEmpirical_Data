[Running the camel-example-management with
mvn clean install camel:run

And using different version of ActiveMQ, that is the only change.

, Okay after using git bitsect on the 5.10.x branch between the working 5.10.0 and not working 5.10.1 releases, I was able to narrow it down to this commit causing the breakings

{code}
davsclaus:~/workspace/activemq ((no branch))/$ git bisect good
ac57ce9f68e2b3c5f2d004f507383d64161de3ec is the first bad commit
commit ac57ce9f68e2b3c5f2d004f507383d64161de3ec
Author: Timothy Bish <tabish121@gmail.com>
Date:   Thu Jun 12 19:12:56 2014 -0400

    https://issues.apache.org/jira/browse/AMQ-5015

    Refactor the way sessions are pooled.  We don't need to keep the
    PooledSession instances around since the state is unique to the session
    it wraps we only need to keep the Session instances in the SessionPool
    and create a new PooledSession on borrow to manage that session.  This
    allows the PooledSession to have a real closed state that protects
    against multiple close calls placing duplicate PooledSession instances
    into the SessionPool.  This also simplifies the code in the
    XaConnectionPool since it doesn't need to try and reset state in
    PouledSessions before placing them back as it gets a fresh wrapper each
    time with the correct state.

:040000 040000 d2fcf1c9eee5b8405cf0923e72484be53385fc78 fac1f9bec90c049bf21a9cdd986b76f010cfb90e M	activemq-jms-pool
{code}, Previous fixes that have gone in were meant to ensure that resources linked to the pooled session and connection which should be closed or deleted such as temp destinations happened correctly at connection close even though the connection itself was kept in the pool for future use.  The issue here is that the anonymous producer that is created for a pooled session is being lost along the way and a new one gets created every time an existing session is reused in the pool.  , So, the anonymous producer is getting created and not removed?  Or, that was the old operation?

It sounds like the right result here is the anonymous producer should get closed if it was created with session.createProducer(...)- unless there is a way to create the anonymous producer specifically as a cached producer.  The reasoning is this -- closing an ordinary (i.e. non-pooled) connection removes producers and consumers created for all sessions in that connection.  Some applications may expect that, so they can bypass the need to do their own cleanup., Fix added on trunk, Yay just tested with the Camel example and it now works. Thanks Tim., Backported to 5.10.x branch and tested that it worked.]