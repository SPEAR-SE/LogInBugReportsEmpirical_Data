[The following comes from a Java Heap dump I did after about 12 hours of operation.  No messages were sent in this time.  The dumpfile used was over 500MB so I'm not attaching it.
I could start fresh and generate and attach a dump after 10 minutes or so if this would help.

Instance Counts for All Classes (excluding platform)
7343 instances of class [Lorg.apache.activemq.command.ActiveMQDestination;
5499 instances of class org.apache.activemq.transport.MutexTransport
5499 instances of class org.apache.activemq.transport.ResponseCorrelator
5499 instances of class org.apache.activemq.util.IntSequenceGenerator
3838 instances of class org.apache.activemq.management.CountStatisticImpl
3668 instances of class [Lorg.apache.activemq.command.DataStructure;
3667 instances of class org.apache.activemq.thread.Valve
3666 instances of class [Lorg.apache.activemq.command.BrokerId;
1843 instances of class org.apache.activemq.command.WireFormatInfo
1836 instances of class org.apache.activemq.util.LongSequenceGenerator
1835 instances of class org.apache.activemq.util.IdGenerator
1834 instances of class org.apache.activemq.openwire.OpenWireFormat
1834 instances of class org.apache.activemq.thread.DedicatedTaskRunner
1834 instances of class org.apache.activemq.thread.DedicatedTaskRunner$1
1834 instances of class org.apache.activemq.util.DataByteArrayInputStream
1834 instances of class org.apache.activemq.util.DataByteArrayOutputStream
1833 instances of class org.apache.activemq.broker.SingleTransportConnectionStateRegister
1833 instances of class org.apache.activemq.broker.TransportConnection
1833 instances of class org.apache.activemq.broker.TransportConnection$1
1833 instances of class org.apache.activemq.broker.region.ConnectionStatistics
1833 instances of class org.apache.activemq.network.ConduitBridge
1833 instances of class org.apache.activemq.network.DemandForwardingBridgeSupport$1
1833 instances of class org.apache.activemq.network.DemandForwardingBridgeSupport$2
1833 instances of class org.apache.activemq.network.DiscoveryNetworkConnector$1
1833 instances of class org.apache.activemq.transport.InactivityMonitor
1833 instances of class org.apache.activemq.transport.InactivityMonitor$1
1833 instances of class org.apache.activemq.transport.InactivityMonitor$2
1833 instances of class org.apache.activemq.transport.WireFormatNegotiator
1833 instances of class org.apache.activemq.transport.tcp.TcpTransport
1833 instances of class org.apache.activemq.transport.vm.VMTransport
1833 instances of class org.apache.activemq.transport.vm.VMTransportServer$1
569 instances of class org.apache.activemq.transport.TransportDisposedIOException
445 instances of class org.mortbay.util.StringMap$Node
374 instances of class org.springframework.beans.GenericTypeAwarePropertyDescriptor
289 instances of class org.mortbay.io.BufferCache$CachedBuffer
179 instances of class org.apache.log4j.CategoryKey
152 instances of class [Lorg.mortbay.util.StringMap$Node;
130 instances of class org.mortbay.jetty.servlet.ServletHandler$CachedChain
113 instances of class org.apache.commons.logging.impl.Log4JLogger
113 instances of class org.apache.log4j.Logger
111 instances of class org.mortbay.io.ByteArrayBuffer
107 instances of class org.apache.activemq.util.ByteSequence
97 instances of class org.apache.activemq.transport.tcp.TcpBufferedInputStream
97 instances of class org.apache.activemq.transport.tcp.TcpBufferedOutputStream
85 instances of class $Proxy3
66 instances of class org.apache.log4j.ProvisionNode
63 instances of class org.apache.jasper.compiler.JspUtil$ValidAttribute
57 instances of class org.springframework.beans.MutablePropertyValues
57 instances of class org.springframework.beans.factory.config.ConstructorArgumentValues
57 instances of class org.springframework.beans.factory.support.MethodOverrides
56 instances of class org.springframework.beans.PropertyValue
55 instances of class org.apache.jasper.compiler.SmapStratum$LineInfo
51 instances of class org.apache.activemq.command.BrokerInfo
49 instances of class org.apache.activemq.command.ActiveMQTopic

-SNIP-, resolved in r824807
A failed network bridge remained in a bridge list, resolved by reusing an existing list of bridges that is correctly managed., problem introduced by https://issues.apache.org/activemq/browse/AMQ-2298, Hi,
I'm encountering the exact same behavior in both 5.3 branch and development trunk.
I created a simple network of brokers with all the same configuration:
<networkConnector name="HA Queue" uri="static:(tcp://broker1:61616,tcp://broker2:61616,tcp://broker3:61616)?useExponentialBackOff=false" userName="system" password="manager" duplex="true" />
The disables exponential back off allows me to reproduce the memory leak faster.
I stop activemq in 2 out of the 3 brokers and get a memory leak: there is nearly one thread created per second. After a while, the activeMQ will just crash.

Here is the start of the dump heat, after only 20min of running:

--start--
org.apache.activemq.command.ActiveMQDestination[]	5003
org.apache.activemq.transport.ResponseCorrelator	3750
org.apache.activemq.util.IntSequenceGenerator 3750
org.apache.activemq.transport.MutexTransport 3750
org.apache.activemq.management.CountStatisticImpl 2548
org.apache.activemq.command.DataStructure[] 2512
org.apache.activemq.thread.Valve 2504
org.apache.activemq.command.BrokerId[] 2500
org.apache.activemq.util.DataByteArrayOutputStream 1269
org.apache.activemq.util.DataByteArrayInputStream 1266
org.apache.activemq.thread.DedicatedTaskRunner$1 1259
org.apache.activemq.thread.DedicatedTaskRunner 1259
org.apache.activemq.openwire.OpenWireFormat 1256
org.apache.activemq.util.LongSequenceGenerator 1254
org.apache.activemq.util.IdGenerator 1253
org.apache.activemq.command.WireFormatInfo 1251
org.apache.activemq.broker.TransportConnection 1250
org.apache.activemq.transport.WireFormatNegotiator 1250
org.apache.activemq.transport.InactivityMonitor$2 1250
org.apache.activemq.transport.vm.VMTransportServer$1 1250
org.apache.activemq.broker.TransportConnection$1 1250
org.apache.activemq.transport.InactivityMonitor$1 1250
org.apache.activemq.network.DemandForwardingBridgeSupport$2 1250
org.apache.activemq.transport.InactivityMonitor 1250
org.apache.activemq.transport.tcp.TcpTransport	 1250
org.apache.activemq.broker.region.ConnectionStatistics 1250
org.apache.activemq.network.DurableConduitBridge 1250
org.apache.activemq.network.DiscoveryNetworkConnector$1 1250
org.apache.activemq.network.DemandForwardingBridgeSupport$1 1250
org.apache.activemq.transport.vm.VMTransport 1250
org.apache.activemq.broker.SingleTransportConnectionStateRegister	 1249
org.apache.log4j.CategoryKey 194

, A little update:
I've picked up the latest release from FUSE and this memory leak is not present.
It seems they merged the patch provided in this issue. So maybe another check in done after this resolution is the culprit of bringing back this memory leak?, think http://issues.apache.org/activemq/browse/AMQ-2530 may be the difference.

Can you validate with the latest trunk snapshot.

btw: Sebastien, what patch do you refer to above?, Sorry Gary, I didnt see this answer.
I'll check tomorrow if the behavior is still the same in the trunk, but when I reopened it, both the 5.3.1 and the latest trunk version still had the issue.

Concerning the patch, I was just saying that looking at the FUSE Message Broker 5.3.0.5's release notes, I can see they have applied the same patch as the one provided in this issue.
The problem is definitely not present in the FUSE Message BRoker, so it should be fairly simple to see the differences.
Easy way of reproducing the problem is to set up a network of brokers with some hostnames that are not reachable or dont have an ActiveMQ broker running on them. There will be a linear creation of threads (nearly 1 per second).
, did u get a chance to validate? All the fixes in fuse go via trunk at apache so the same changes should be present., I didnt get a chance to revalidate the bug.

the very basic scenario that demonstrated the case was to run a broker in the network of broker configuration, put two or more hostnames that cannot be resolved, and in order to accelerate the leak, remove the backoffmultiplier.

<networkConnector name="HA Queue" uri="static:(tcp://wrongHostname1:61617,tcp://wrongHostname2:61618)?useExponentialBackOff=false" userName="system" password="manager" duplex="true" />

I'll give a try with the latest version of the trunk over the weekend, sorry that i took some delay on this matter., The problem with leaking threads was caused by camel web app and activemq component explicitly set. Changing the config a bit makes broker behaves well in this use-case. Will resolve this issue and create camel-related issue., I'm experiencing this issue without using Camel. Configuration is an embedded ActiveMQ with producers connecting via the VM transport and a network of brokers over TCP. Works fine with FUSE MQ 5.3.0.x as noted by another user above, but does not work with 5.3.1-snap

I see your applicationContext changes seem to atfect the VM transport, are you just disabling the VM transport for Camel as a workaround?, Hi Nathan,

can you provide a test case or describe how to reproduce the problem?

Cheers,
Dejan, FYI, I'm seeing this issue with Fuse 5.3.0.4 in Servicemix 3.4.0.4 (this isn't using any specific components though, just simply starting up Servicemix with the certain ActiveMQ configuration).  When there is a network connector that cannot connect to a certain host, then eventually an OutOfMemoryError will occur.  If I swap out the activemq jars that came with Servicemix, for the 5.3.0.5 ones.. it appears that the the memory issue is gone., This seems to be resolved in 5.3.1 - i monitored a over a few hours, a broker with {code}<networkConnectors>
 <networkConnector name="HA Queue" uri="static:(tcp://wrongHostname1:61617,tcp://wrongHostname2:61618)?useExponentialBackOff=false" userName="system" password="manager" duplex="true" />
</networkConnectors>{code} and it is stable., This patch contains a test case that attempts to reproduce but demonstrates that it works. An existing vm connection does not seem to effect the thread count while a networkConnector is failing to connect. It may provide the basis to produce a better test. For the moment it demonstrates that this issue is resolved., The root cause of this issue is now committed with svn revision 932403 and all config workarounds are removed.]