[Same issue here: 
OS: ubuntu
activeMq version 5.8.0, I can confirm the issue:

OS: Windows 7
AMQ: 5.8.0

It occurs when I try to browse a queue using a tools such as ActiveMQBrowser which indicates that it is a general issue., Same issue here, does not happen on 5.7. Tested on 1.6 and 1.7 JDK.

If you click on 'active consumers' in the console when this is happening, you can see an enormous amount of enqueue and dequeues from the MQ host itself which seems to eat the box., A few more details on our setup;

ActiveMQ 5.8.0, Running on Java 1.6.x
Backend Storage is Multi-Master Percona 5.5.x, Appear to have the same issue here, running ActiveMQ 5.8.0 on Java 1.7.x (Windows 7) - queues stored in SQL Server 2008 R2

Have also attempted to browse the queue with alternative queue browsers, using HermesJMS to browse a queue with 92 messages queued it retrieved over 500,000 messages from the queue before I told it to stop. It appears to get stuck in a loop and repeatedly retrieve the same 92 messages (which makes more sense to me that this runs the default browser out of heap space when a handful fewer messages are no problem).

When replaying messaging into the queue from HermesJMS, even with 2000 messages in the queue the default browser loads them in under 2 seconds, we only seem to encounter this issue when the queue is populated from our application which is using the Apache NMS API., Have you tried to create a JUnit test case to reproduce?  , Same root cause from what I can tell., You can work around this in the latest 5.9-SNAPSHOT builds if you set the maxProducersToAudit Policy value to a high enough value to account for the number of producers in your scenario.  , Fixed on trunk.  Try the next ActiveMQ 5.9.0 SNAPSHOT for testing., Confirmed this solved my issue.

Are we likely to see this fix backported to a minor 5.8 release or wait for 5.9-RELEASE?, Most likely 5.9 release., Can I get a diff or a link to the commit so I can take a look at porting this to 5.8 stable?

It's causing us some rather bad production issues and we can't roll back to 5.7 due to another issue.

Cheers,
, Just click on the "Source" link and you'll get the list of commits relevant to this issue., I have just tried applying the patches listed on source to 5.8.0 and it seems to work. I should note that there is one patch missing from the source list. When applying the patches for the PolicyEntry.java file make sure to start with the previous revision than the first one mentioned in the source, if you apply that patch plus all the others mentioned in the source it should work., After some further testing I am not sure this issue is solved. I have applied the patches to 5.8.0 and it seems to make it more stable however not completely. I have managed to browse the queue using the webconsole a few times however other times it will still try to load for a while and return with the following error

java.lang.OutOfMemoryError: Java heap space
	at java.util.Arrays.copyOf(Arrays.java:2367)
	at java.io.CharArrayWriter.write(CharArrayWriter.java:105)
	at java.io.PrintWriter.write(PrintWriter.java:426)
	at com.opensymphony.module.sitemesh.filter.RoutablePrintWriter.write(RoutablePrintWriter.java:144)
	at org.apache.jasper.runtime.JspWriterImpl.flushBuffer(JspWriterImpl.java:181)
	at org.apache.jasper.runtime.JspWriterImpl.write(JspWriterImpl.java:449)
	at org.apache.jasper.runtime.JspWriterImpl.write(JspWriterImpl.java:462)
	at org.apache.jsp.browse_jsp$browse_jspHelper.invoke0(org.apache.jsp.browse_jsp:394)
	at org.apache.jsp.browse_jsp$browse_jspHelper.invoke(org.apache.jsp.browse_jsp:450)
	at org.apache.jsp.tag.web.jms.forEachMessage_tag.doTag(org.apache.jsp.tag.web.jms.forEachMessage_tag:89)
	at org.apache.jsp.browse_jsp._jspx_meth_jms_forEachMessage_0(org.apache.jsp.browse_jsp:170)
	at org.apache.jsp.browse_jsp._jspService(org.apache.jsp.browse_jsp:100)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:109)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:806)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:389)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:486)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:380)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:806)
	at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:652)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1329)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:83)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:76)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1300)
	at org.apache.activemq.web.SessionFilter.doFilter(SessionFilter.java:45)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1300)
	at org.apache.activemq.web.filter.ApplicationContextFilter.doFilter(ApplicationContextFilter.java:102)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1300)
	at com.opensymphony.sitemesh.webapp.SiteMeshFilter.obtainContent(SiteMeshFilter.java:129)
	at com.opensymphony.sitemesh.webapp.SiteMeshFilter.doFilter(SiteMeshFilter.java:77)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1300)
	at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:445)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:137), Try pulling in the fix for AMQ-4595, Thanks Timothy

That seems to have done the trick and so far things have been stable. I'll report if any other issues occur.

I should also mention, for anybody attempting it, that as for the patches from this bug (4372), the patch for 4595 also is not directly appliable to 5.8.0 sources. You probably have to go back a few revisions however a bit of editing on the revision pertaining to the bug is enough to be able to apply it to 5.8.0 sources.]