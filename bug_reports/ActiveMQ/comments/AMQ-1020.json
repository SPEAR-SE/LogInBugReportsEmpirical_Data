[Are you using explicit acknowledgements or auto-ack (or transactions?). The default prefetch is only about 1000 I think for NMS which means after sending 1000 messages no more messages will be dispatched to a consumer until it receives acks. So I can see why Client1 becomes stuck pretty quickly and why client1 can no longer publish more messages.

So 2 things to try...

use dispatchAsync=true (on consumer info) on the consumers, so that dispatching to consumers is asynchronous in the broker. That way a producer won't get blocked waiting to dispatch to slow consumers.

Also try upping the prefetch value to something large. e.g. on Java for non-persistent topics its about 32000 I think, Hi James

I'm using auto-acknowledgements (no transactions).  You are correct that the NMS prefetch default is 1000 messages, and this threshold appears to have a bearing on when the consumer (and hence the publisher) gets stuck.  Changing the prefetch size may well remove the symtoms from my test case, but that's not really what I'm looking for.  I believe the test case exposes a critical bug in the broker, and hence gives us an opportunity to fix the bug, which is preferable to changing the configuration to avoid the condition (sod's law dictates that the condition will re-emerge as soon as my application goes into production).

I think there are two crucial points here that need investigating
1) even though [auto] acknowledgements are being sent to the broker, the consumer is getting stuck dead (i.e. no message activity is occuring once the broker becomes stuck).
2) killing the slow consumer does not rectify the situation.  This implies that the broker is stuck in some state where it doesn't recognise the client socket has been closed.

It's probably worth noting that this problem does not occur when I disable Client1 from publishing (even though it's still a slow consumer).  It's only when Client1 is a slow consumer and a [fast] publisher that it falls into the dead-locked condition., 
I have run into this same issue I think.

We have a scenario with a DurableSubscriber that has retrieved some messages and then disconnects.
The publisher continuous publishing at 1000 messages per second.
After 60000 messages are sent, the publisher hangs, and the broker quiesces.

I have seen this behavior with 4.0.1 and 4.1.0

I took a stack trace which showed the server was stuck in UsageManager.waitForSpace().

I can delay the hanging problem by configuring more memory in the MemoryManager.
I have tried setting timeToLives and pendingMessageLimitStrategies but I still get the hanging.

If I use a non durable subscriber the problem goes away, but this is not an ideal solution for us., This is fixed by the default use of cursors and the spooling to disk for non-durable slow topic consumers]