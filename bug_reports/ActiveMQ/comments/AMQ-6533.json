[The reason for seeing both warnings is the following:

{{StompWireFormat.unmarshal()}} correctly returns a {{StompFrameError}} command when the message payload exceeds {{StompWireFormat.MAX_DATA_LENGTH}}. 
This command is then processed in {{ProtocolConverter.onStompCommand()}}:

{code}
    public void onStompCommand(StompFrame command) throws IOException, JMSException {
        try {

            if (command.getClass() == StompFrameError.class) {
                throw ((StompFrameError)command).getException();
            }
    ...
        } catch (ProtocolException e) {
            handleException(e, command);
            // Some protocol errors can cause the connection to get closed.
            if (e.isFatal()) {
               getStompTransport().onException(e);
            }
        }
    }
{code}

which re-throws the exception, catches it and calls {{handleException()}}.
{{ProtocolConverter.handleException()}} creates and sends a stomp error response back to the client.
Thereafter it executes above line 
{{getStompTransport().onException(e);}}
which asynchronously stops the transport. 

Given that the transport connection is stopped async in a new thread, it happens that the error response is sent back to the client and the tcp transport thread continues to read the next command from the sockets input stream *before* the transport got closed by the extra thread.

Also given that we have so far read only read 100 MB out of 105 MB data from the input stream, there is another 5 MB to read. However the Stomp transport expects to read the next Stomp command (which is bound to 1024 bytes) and exhausts the 1024 bytes and next raises the error {{The maximum command length was exceeded.}}.


Other than the two warnings, which can be misleading, there is not other side effect resulting from this bug problem., I investigated into possible fixes but it seems there is no simple fix.
Ideally we could close the tcp transport synchronously instead of async in this particular situation, however there is no such API offered in TransportConnection and I presume there is a good reason for stopping the transport async.
, unit test in StompLargeMessageTest.java
simply install into activemq-stomp/src/test/java/...]