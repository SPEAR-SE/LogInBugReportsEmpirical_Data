[Here's a unit test patch that shows the problem, am currently looking into a fix for this also., resolved in r927054

ObjectMessage.copy is now respects setObjectMessageSerializationDefered, Hi, I tested this fix and encountered a case where this mechanism does not seem to work properly. Here is the scenario we have:

A server that has a producer. The producer communicates with the local broker using the vm://. There are local consumers that listen on the topic being published to in the same VM. All consumers that are local in the same VM work as advertised without any serialization thanks to this fix. 

Here is the problem:

Remote consumers communicate to the broker using TCP for the same topic. When the producer sends the message to the destination, it is being sent over the vm:// and ObjectMessage has content set to null and a valid object. The broker then tries to send the message to the remote client with null contents causing errors.

It seems that perhaps, ObjectMessage should override getContent() to detect this situation. i.e if object != null and content is null, then serialize first and then return the content. I am sure you have a better solution to this issue. Thanks., when a deferred serializable message is marshaled it needs to serialize, as described in the case of a vm non serialized message to a topic with multiple consumers, some of which don't use vm: transport and as a result need marshaling.
Query ordering? if the non vm: consumer is dispatched to before the vm: consumer, will it negate the non serialization for the vm consumer?, resolved in r994990

the issue of ordering disappears as each consumer gets its own copy, so an objects write operation will be called but reads will happen in unserialised copies. The serialisation is now called before marshalling which will only be invoked for non vm transports. ]