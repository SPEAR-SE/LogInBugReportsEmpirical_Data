[I've attached exclusive_consumer_patch.txt with changes which seem to fix the issue for us.  according to the docs i could find, the "first" exclusive consumer is the "chosen" one.  i'm assuming that the order returned by the destination reflects the relevant order (i couldn't find any other way to know which exclusive consumer is the "chosen" one)., For testing, i used a queue and two brokers in a network.  note that the messageTTL on the DiscoveryNetworkConnector must be set high enough to allow the messages to be moved back and forth.  i dumped ~300 messages on the queue and setup an exclusive consumer on each broker (so only one consumer will be actively consuming the messages).  the consumer is artificially slow in consuming the messages (waits a few seconds per message) so that you can test the handling of messages as the consumers move.  i then restart the consumers periodically, which causes the "chosen" consumer to shift between the brokers.  without the patch, you will eventually end up in a situation where the "chosen" consumer is local to one node, but all the messages are on the other node.  however, the ConditionalNetworkForwardingBridge will refuse to forward the messages to the other broker because a local consumer exists (even though it isn't the "chosen" one)., there are some unit tests that may help build a junit test case (they exercise the replay feature):
org.apache.activemq.bugs.AMQ4952Test
org.apache.activemq.network.BrokerNetworkWithStuckMessagesTest

, I'll see if i can get something going.  i tried to create a network broker related test before (different issue) and couldn't recreate the problem in a unit test., This is a little difficult to reason about because the "choice" of a particular consumer is not visible across a network of brokers.
A demand sub does not know that it is demand for the chosen exclusive consumer. If it could figure this out, then it would know to allow replay. Maybe this information can be added as a property to the consumer advisory message.

Can you post the xml config, or if you can produce a unit test that will suffice. I assume you have conduit=false on the network connectors.

w.r.t your patch, I don't see any check on exclusiveSub, i must be missing something.

Also note, the ConditionalNetworkForwardingBridgeFactory is configurable via policy so you can plugin in your own implementation., It would seem that _somehow_ the choice of a particular consumer must be "visible" (in some form or another), otherwise the feature wouldn't work?  if different brokers came to different conclusions about which exclusive consumer is the "chosen one", then the exclusivity is lost.  in the Queue impl, it literally puts the first exclusive consumer subscription added to the Queue as the exclusive consumer on the dispatchSelector.  and the list of consumers in the queue is same list which is passed to the code that i patched in ConditionalNetworkForwardingBridge.  so, it's reasonable to conclude that the first subscription in the list is the one the Queue considers the "chosen" exclusive consumer.  (unless consumers have priorities, and then all bets might be off, but we don't use priorities).

we use activemq as an embedded library, so all configuration is programmatic, not xml.  i believe the config you are asking for is the DiscoveryNetworkConnector:

* prefetchSize = 1
* duplex = false
* messageTTL = 9999

also the ConditionalNetworkBridgeFilterFactory has replayWhenNoConsumers = true.

the exclusiveSub isn't used other than for checking non-null.  the effect of the patch is that any exclusive consumers other than the first are ignored when checking for a local consumer.  so even though there _is_ a local consumer in my test scenario, since it is an exclusive consumer and is not the first in line, it is ignored.

that's a good point about this being a factory which i'm plugging in.  technically i could use my own modified subclass.  that said, it would be good if the core features worked as intended/expected without custom impls.  not to mention that the relevant problem code is not easily re-usable, so i'd have to duplicate a fair bit of code (if not the entire class)., the exclusive *choice* is local to a broker.
If there are two brokers networked together and two consumers connecting to each broker, there is race to figure which consumer gets all the messages.
Each consumer has a corresponding "forwarding" consumer on the other broker. It is the forwarding consumer that has to be deemed locally exclusive if messages are to get bridged. This is totally timing dependent. The forwarding consumer may well not be the exclusive consumer and not get any messages to forward.

Some changes may help make this work.
1) only network the current exclusive consumer, at the moment this information is lost but could be included in the advisory
2) allow replay if the forwarding consumer is the current exclusive consumer.
3) use org.apache.activemq.network.NetworkBridgeConfiguration#setConsumerPriorityBase and decreaseNetworkConsumerPriority to ensure that a network or forwarding consumer will replace a local consumer.

#3 is the tricky bit, because there will always be a race between competing consumers on different brokers. With 3, there is priority to bridging and maybe the reverse would be better.
In addition the race is still there between the advisory messages being sent and processed. It may need some coordination w.r.t sync dispatch to ensure the logic is deterministic.
In all this won't be trivial. 
Because there is no distributed lock on a distributed queue (that is what you have, to some extent, with a network), the best we can do is coordinate to pick a value and enforce that., I'm confused by your answer.  are you saying that the exclusive concumer feature is fundamentally broken?, if by fundamentally you mean "in a network of brokers" then yes. , well that's unfortunate.  we are using that feature (in a network of brokers)., so, if i understand correctly, the feature is generally "working" for us today because each broker accidentally gets the subscriptions in the same order.  if two brokers end up with subscriptions in different orders, then the feature will stop working., yes. and by stop working - messages will get isolated on a broker because it won't forward because the forwarding sub is not the local exclusive consumer.
And you have the additional problem of "forwarding back" b/c there will be some consumers present and active.

If your competing exclusive consumers can be confined to a single broker at a time, it will work., if we could confine our exclusive consumers to a single broker, then we would essentially be implementing the exclusive consumer feature on our own.  technically, we _could_ do it (non-trivial on our end), but we thought we were getting the feature out of the box with activemq., I guess if nothing else comes out of this issue, it would be good to clarify in the [exclusive consumer docs|http://activemq.apache.org/exclusive-consumer.html] that it is _not supported for networks of brokers_ .]