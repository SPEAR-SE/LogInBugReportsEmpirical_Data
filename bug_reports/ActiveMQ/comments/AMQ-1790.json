[Fixed by SVN revision 666617, It turns that there is additional source of memory leak in the above scenario.

Class org.apache.activemq.broker.region.AbstractTempRegion in it's dispose() method doesnt dispose it's destinations when it's running in CacheTempDestinations=false mode (which is default). I fixed the method and used the fixed version on overnight stress test and it so far it seems ok.

The fix (I added the else part):

    protected final synchronized void dispose(ConnectionContext context,
            Destination dest) throws Exception {
        // add to cache
        if (this.doCacheTempDestinations) {
            cachedDestinations.put(new CachedDestination(dest
                    .getActiveMQDestination()), dest);
        } else {
            try {
                dest.dispose(context);
                dest.stop();
            } catch (Exception e) {
                LOG.warn("Failed to dispose of " + dest, e);
            }
        }
    }, Fixed the formating:

{code:title=org.apache.activemq.broker.region.AbstractTempRegion.java|borderStyle=solid}
    protected final synchronized void dispose(ConnectionContext context,
            Destination dest) throws Exception {
        // add to cache
        if (this.doCacheTempDestinations) {
            cachedDestinations.put(new CachedDestination(dest
                    .getActiveMQDestination()), dest);
        } else {
            try {
                dest.dispose(context);
                dest.stop();
            } catch (Exception e) {
                LOG.warn("Failed to dispose of " + dest, e);
            }
        }
    }
{code} , Fixed by svn revision 669511, Hi there,

I just installed ActiveMQ 5.2, especially for the fix of the above problem, but the above issue is still occurring.

After instantiating circa 1300 temp queues I am getting the following error: java.lang.OutOfMemoryError : unable to create new native thread

Also if I go to the web admin (http://localhost:8161/admin/topics.jsp) I can see a long list of temp queues that don't go anywhere...

Would you be able to advise us when the fix for this issue will be released.

Many thanks

N, N, can you post your test case, how does it compare with http://svn.apache.org/viewvc/activemq/trunk/activemq-core/src/test/java/org/apache/activemq/advisory/TempQueueMemoryTest.java?view=markup]