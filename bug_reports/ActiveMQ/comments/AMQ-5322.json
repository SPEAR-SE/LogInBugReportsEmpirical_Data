[It would be a good idea for you to try and create a JUnit test to reproduce, Here is a JUnit test case to reproduce it.
Please see the attached file.
, fails when N > 1024, We suspect that MessageGroupHashBucket should not use a LRUMap. It may cause old goupIds being evicted., Test that passes using indicated scenario.  , You can configure the cache size in your Broker configuration as needed., I came across the code looking for a solution to our problems in production. We open many JMSXGroupIds simultaneously, and messages that should arrive to only one consumer arrive to any other consumer, like there was no previous association for that GroupId.

I saw the implementation of MessageGroupHashBucket and it is just plain wrong. That is a very bad implemented Hash.
It does not consider that independent of the value of bucketCount, the hashCode() can be the same for two different groupIds.

If we see the code here :

http://activemq.apache.org/maven/5.10.0/apidocs/src-html/org/apache/activemq/broker/region/group/MessageGroupHashBucket.html

134    protected int getBucketNumber(String groupId) {
135        int bucket = groupId.hashCode() % bucketCount;
136        // bucket could be negative
137        if (bucket < 0) {
138            bucket *= -1;
139        }
140        return bucket;
141    }
 
For two different groupIds, the value returned by getBucketNumber() can be the same. That is called a "collision" in a hash.
Now, what happens if we want to put a new GroupId associated with a different ConsumerId into an already used bucket  ?

041    public synchronized void put(String groupId, ConsumerId consumerId) {
042        int bucket = getBucketNumber(groupId);
043        consumers[bucket] = consumerId;
044        if (consumerId != null){
045          cache.put(groupId,consumerId.toString());
046        }
047    }

OMG!!! There is no validation at all. The previous value is simply overwriten !!
We use UUID as GroupIds, and no matter that they are all different, many times the getBucketNumber() is the same, the value overwritten and the previous association is lost.
It is not a solution to increase the value of bucketCount, it is not a matter of size of the Hash, it is really a bad implementation.

More about collisions here :

https://www.princeton.edu/~achaney/tmve/wiki100k/docs/Hash_collision.html

A hash should deal with collisions, it is part of problems of a hash, and there are different solutions. For instance, each bucket could be a list of associated GroupIds. Unfortunately then a lineal search is needed and performance is affected. That is why the Hashes are usually so dependant of the hashCode() implementation.
, Java classes attached. Test provided.
Listener scenario with message groups (3 consumers), I have tried solution provided by Timothy Bish but it does not work in listener scenario.
Test classes attached

Summary:
When using bellow 1024 groups everything is fine, no missfires:
[14:55:03.181] DEBUG [main] (TestGroups.java:37) - Using: MessageGroupHashBucketFactory and setting bucketCount to 2000
[14:55:03.733] DEBUG [main] (Producer.java:52) - Sending 3 messages in 1024 groups
[14:55:04.111] DEBUG [main] (Producer.java:66) - Total messages sent: 3072
[14:55:07.111] DEBUG [main] (Consumer.java:77) - received messages per consumer: 342
[14:55:07.112] DEBUG [main] (Consumer.java:77) - received messages per consumer: 341
[14:55:07.113] DEBUG [main] (Consumer.java:77) - received messages per consumer: 341
[14:55:07.113] DEBUG [main] (Consumer.java:82) - received total messages: 1024
[14:55:07.113] DEBUG [main] (Consumer.java:84) - dataCounter (total messages): 3072
[14:55:07.113] DEBUG [main] (Consumer.java:85) - missfires: 0


But when using more, every msg goes to different consumer, there is no grouping!
[14:54:26.269] DEBUG [main] (TestGroups.java:37) - Using: MessageGroupHashBucketFactory and setting bucketCount to 2000
[14:54:26.815] DEBUG [main] (Producer.java:52) - Sending 3 messages in 1025 groups
[14:54:27.195] DEBUG [main] (Producer.java:66) - Total messages sent: 3075
[14:54:30.196] DEBUG [main] (Consumer.java:77) - received messages per consumer: 1025
[14:54:30.198] DEBUG [main] (Consumer.java:77) - received messages per consumer: 1025
[14:54:30.199] DEBUG [main] (Consumer.java:77) - received messages per consumer: 1025
[14:54:30.199] DEBUG [main] (Consumer.java:82) - received total messages: 3075
[14:54:30.200] DEBUG [main] (Consumer.java:84) - dataCounter (total messages): 3075
[14:54:30.200] DEBUG [main] (Consumer.java:85) - missfires: 3075, When I tried solution described at http://scott.cranton.com/2010/09/activemq-message-groups.html it is working.
I do not understand why configuration via xml and java code are not the same!?

Log with updated activemq.xml configuration:
[09:26:24.115] DEBUG [main] (Producer.java:52) - Sending 3 messages in 1025 groups
[09:26:24.535] DEBUG [main] (Producer.java:65) - Total messages sent: 3075
[09:26:27.536] DEBUG [main] (Consumer.java:77) - received messages per consumer: 342
[09:26:27.536] DEBUG [main] (Consumer.java:77) - received messages per consumer: 342
[09:26:27.536] DEBUG [main] (Consumer.java:77) - received messages per consumer: 341
[09:26:27.536] DEBUG [main] (Consumer.java:82) - received total messages: 1025
[09:26:27.536] DEBUG [main] (Consumer.java:84) - dataCounter (total messages): 3075
[09:26:27.536] DEBUG [main] (Consumer.java:85) - missfires: 0, I deleted my comments. It turns out that my issue was with the C# NMS client and not AMQ directly. If you set JMSXGroupID via the Properties[] in that client, they do not get assigned to the header correctly. The java client does not have this issue.]