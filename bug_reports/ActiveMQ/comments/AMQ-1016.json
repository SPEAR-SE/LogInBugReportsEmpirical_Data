[$.01 :

Find one thing that stands out:
{noformat} 
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:amq="http://activemq.org/config/1.0"
	xsi:schemaLocation="
    http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
    http://www.springframework.org/schema/aop   http://www.springframework.org/schema/aop/spring-aop-2.0.xsd
    http://www.springframework.org/schema/tx    http://www.springframework.org/schema/tx/spring-tx-2.0.xsd
    http://activemq.org/config/1.0              http://people.apache.org/repository/org.apache.activemq/xsds/activemq-core-4.1-incubator-SNAPSHOT.xsd">
{noformat} 

and btw, the "http://activemq.org/config/1.0" doesn't exist (404), and I don't quite get the "1.0" either. Why not do as spring itself does, like "http://apache.org/schema/amq" and have a file "activemq-amq-4.x.xsd" or somehting there?, Fix applied in trunk rev 474872 and in 4.1 branch rev 474876, Just wanted to point out that in the 4.1 release, the line in question reads

{code}http\://activemq.org/config/1.0=file:/home/foconer/logicblaze/activemq-temp/activemq-4.1.0/activemq-core/target/activemq.xsd{code}

This is still very wrong, and additionally, with the current file residing at the {{http://people.apache.../activemq-core-4.1-incubator-SNAPSHOT.xsd}} location (refer to my first comment), the entire xbeans-stuff doesn't seem able to "boot" at all anymore, giving a huge exception:

{code}
Exception in thread "main" org.springframework.beans.factory.BeanDefinitionStoreException: Line 113 in XML document from class path resource [com/picorg/SpringPicorg.xml] is invalid; nested exception is org.xml.sax.SAXParseException: cvc-complex-type.2.4.b: The content of element 'amq:transportConnector' is not complete. One of '{"http://activemq.org/config/1.0":broker, "http://activemq.org/config/1.0":brokerInfo, "http://activemq.org/config/1.0":discoveryAgent, "http://activemq.org/config/1.0":messageAuthorizationPolicy, "http://activemq.org/config/1.0":server, "http://activemq.org/config/1.0":taskRunnerFactory, WC[##other:"http://activemq.org/config/1.0"]}' is expected.
Caused by: org.xml.sax.SAXParseException: cvc-complex-type.2.4.b: The content of element 'amq:transportConnector' is not complete. One of '{"http://activemq.org/config/1.0":broker, "http://activemq.org/config/1.0":brokerInfo, "http://activemq.org/config/1.0":discoveryAgent, "http://activemq.org/config/1.0":messageAuthorizationPolicy, "http://activemq.org/config/1.0":server, "http://activemq.org/config/1.0":taskRunnerFactory, WC[##other:"http://activemq.org/config/1.0"]}' is expected.
	at com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.createSAXParseException(ErrorHandlerWrapper.java:195)
	at com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.error(ErrorHandlerWrapper.java:131)
	at com.sun.org.apache.xerces.internal.impl.XMLErrorReporter.reportError(XMLErrorReporter.java:384)
	at com.sun.org.apache.xerces.internal.impl.XMLErrorReporter.reportError(XMLErrorReporter.java:318)
	at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaValidator$XSIErrorReporter.reportError(XMLSchemaValidator.java:410)
	at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaValidator.reportSchemaError(XMLSchemaValidator.java:3165)
	at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaValidator.elementLocallyValidComplexType(XMLSchemaValidator.java:3129)
	at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaValidator.elementLocallyValidType(XMLSchemaValidator.java:3076)
	at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaValidator.processElementContent(XMLSchemaValidator.java:2978)
	at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaValidator.handleEndElement(XMLSchemaValidator.java:2121)
	at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaValidator.emptyElement(XMLSchemaValidator.java:714)
	at com.sun.org.apache.xerces.internal.impl.XMLNSDocumentScannerImpl.scanStartElement(XMLNSDocumentScannerImpl.java:377)
	at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl$FragmentContentDriver.next(XMLDocumentFragmentScannerImpl.java:2740)
	at com.sun.org.apache.xerces.internal.impl.XMLDocumentScannerImpl.next(XMLDocumentScannerImpl.java:645)
	at com.sun.org.apache.xerces.internal.impl.XMLNSDocumentScannerImpl.next(XMLNSDocumentScannerImpl.java:140)
	at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanDocument(XMLDocumentFragmentScannerImpl.java:508)
	at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:807)
	at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:737)
	at com.sun.org.apache.xerces.internal.parsers.XMLParser.parse(XMLParser.java:107)
	at com.sun.org.apache.xerces.internal.parsers.DOMParser.parse(DOMParser.java:225)
	at com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderImpl.parse(DocumentBuilderImpl.java:283)
	at org.springframework.beans.factory.xml.DefaultDocumentLoader.loadDocument(DefaultDocumentLoader.java:77)
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:405)
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:357)
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:334)
	at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:126)
	at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:142)
	at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:168)
	at org.springframework.context.support.AbstractXmlApplicationContext.loadBeanDefinitions(AbstractXmlApplicationContext.java:113)
	at org.springframework.context.support.AbstractXmlApplicationContext.loadBeanDefinitions(AbstractXmlApplicationContext.java:79)
	at org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(AbstractRefreshableApplicationContext.java:94)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:294)
	at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:92)
	at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:77)
	at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:68)
{code}

The spring config file in question used to boot.

Shouldn't there exist a proper, stable location with a proper schema for 4.1?!, Just to point out for any viewers of this bug that have the same problem with AMQ 4.1: it seems like if you exchange the location URL with

{code}
http://people.apache.org/repository/org.apache.activemq/xsds/activemq-core-4.2-incubator-SNAPSHOT.xsd
{code}

.. it works again. (That is, the AMQ version 4.1 sems to work xbeans-style better with the devel 4.2 schema).

, Now the 4.2 SNAPSHOT version doesn't work either.

I've now put a 4.1-working version here (its a 4.2 SNAPSHOT version that I apparently downloaded 2007-01-08, according to its timestamp):
  http://picorg.net/schema/activemq-4.1-working-V4.2.xsd

Hopefully the maintainers of ActiveMQ at some point will understand and fix this rather big problem.

By exchanging the xsi:schemaLocation URL with that one, I got both Eclipse to be happy, and my app to actually boot.

NOTE: I will not promise that I'll leave that file there forever, so don't go production with it.
, This issue is not resolved., Nice to see it reopened. At least the next versions, both 4.2 and 4.1.1 should have this fixed.

Here's a link to a post that describes the different problems, again referring to some more posts:

http://www.nabble.com/Re%3A-Issues-configuring-ActiveMQ-in-spring-context-file-p8450503.html, So I've just double checked both the 4.1-SNAPSHOT (which will become 4.1.1 very soon) and 4.2-SNAPSHOT releases. Both of them are the same, the value of spring.schemas is...

http\://activemq.org/config/1.0=activemq.xsd

and inside the activemq-core.jar is the file activemq.xsd. i.e. so Spring will load the XSD from the jar rather than relying on some external canonical URL.

Incidentally if you want to double check this,  I used the distros from 6th May 2007 from the maven repo...

http://people.apache.org/repo/m2-snapshot-repository/org/apache/activemq/apache-activemq/, Sorry to re-open this issue again, but Spring's entity resolver won't attempt to resolve the systemid ("http://activemq.org/config/1.0" in this case) unless it ends with '.xsd' or '.dtd'.  See org.springframework.beans.factory.xml.DelegatingEntityResolver

To fix this, change spring.schemas to read something like:

http\://activemq.org/config/1.0/activemq.xsd=activemq.xsd

and use "http://activemq.org/config/1.0/activemq.xsd" as the systemid in the schemaLocation declaration of the app context xml.
, OK - we can change the schema namespace in 4.2.0 to resolve this but unfortunately this will have to remain unfixed for 4.1.1 (as its a bug fix release and we can't break backwards compatibilitiy), That's a _pretty darn_ moot point, as it doesn't work at all as it stands.

I must say I really don't understand the point of Active MQ "implementing" the Spring/Xbeans combo when there is no drive at all to actually make the shit work.

I have several hundred requests per week from "browser: Java" to the file I've posted some comments ago - an extremely hacky solution - this due to the fact that the ActiveMQ maintainers repeatedly ignores the problem, and apparently refuses to put up a schema on some permanent location that actually works.

I just can't fathom why, and really makes me wonder about the whole thing.., See my comments on http://www.nabble.com/Is-any-working-%27Spring-2.0.1-%2B-Lingo-1.3-%2B-ActiveMQ-4.1-final%27-configuration-out-there--tf3127903.html - AMQ currently is just unusable for many., You have to realized that the namspace is used by the default xbean application that is used to load the stand alone broker.  And Yes that IS working.
So we change the namespace, then all the existing configuration files out there would stop working as the xbean loader would no longer work., Even if it was unusable, why couldn't one:

1. Patch AMQ so it works for them
2. Write an EntityResolver
3. Configure it another way, Hiram: why won't you at least put a working schema for your _released_ version of AMQ on a permanent, stable location, with documentation on the AMQ site that actually will work (using the correct, stable schema)?

Christopher: I've already provided a hack for people that swing by this bug. The opinions you air are absolutely uninteresting., Hiram, I don't believe the namespace need to be changed - as I didn't need to in my workaround.

There are 2 issues:

1) MINOR: an official, stable, working url with the xsd for each release.
So Eclipse/Intellij can fetch it and do code completion. It's not needed at runtime.
Till then someone makes one, this one seems to work (but can break at any time as the helpfull person who put it up said)
http://picorg.net/schema/activemq-4.1-working-V4.2.xsd

2) CRITICAL: that xsd inside the jar and a spring.schemas files which couples
the official url to that xsd in the jar. It is needed at runtime.
Notice that the namespace "http://activemq.org/config/1.0" isn't affected.

Workaround for this issue
=====================

Define this in your spring context - you might wanna use a more trustworty url of your own:

  xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd 
  http://activemq.org/config/1.0 http://picorg.net/schema/activemq-4.1-working-V4.2.xsd">

Make a resource in your jar:
  /org/apache/activemq/patch/activemq-4.1-working-V4.2.xsd
and copy the contents from that online xsd in it.

Make a resource in your jar:
  /META-INF/spring.schemas
and copy the following contents in it:
  http\://picorg.net/schema/activemq-4.1-working-V4.2.xsd=org/apache/activemq/patch/activemq-4.1-working-V4.2.xsd

Pitfall: notice the  \ in front of the : of http://
, With your jar, I don't mean a local version of the activemq jar, but your own jar/war which uses activemq, Since this can be fixed without changing the namespace (so it doesn't affect the xbean implementation),
can it be pushed back for 4.1.1 or at least 4.1.2?

It blocks the use of ActiveMQ with Spring 2's schema support.
Falling back on xbean is for many not an option if you're using spring's property placeholder support to configure port/host etc. , I'm able to use placeholders with xbean. You just need to declare the configurer in the xbean config file:

Ex: activemq-brokers.xml:
{code}
<?xml version="1.0" encoding="UTF-8"?>
<!-- this file can only be parsed using the xbean-spring library -->
<beans>
	<bean
		class="org.springframework.beans.factory.config.PropertiesPlaceholderConfigurer">
		<property name="location"
			value="classpath:config/environment.properties" />
		<property name="placeholderPrefix" value="$jms{" />
	</bean>

	<broker brokerName=clusterBroker$jms{nodeNumber}" persistent="false" useJmx="false" start="false"
		xmlns="http://activemq.org/config/1.0">
		<transportConnectors>
			<transportConnector uri="$jms{cluster.local.listener}" />
		</transportConnectors>

		<networkConnectors>
			<networkConnector
				uri="static:($jms{cluster.broker.urls})" />
		</networkConnectors>
	</broker>

</beans>
{code}, Working xsds can be found here:
5.0 - http://people.apache.org/repository/org.apache.activemq/xsds/activemq-core-5.0-SNAPSHOT.xsd
4.1 - http://people.apache.org/repository/org.apache.activemq/xsds/activemq-core-4.1-SNAPSHOT.xsd

Hopefully, a stable release (i.e. without the SNAPSHOT will be made available after the release).

A sample spring config can be found here: http://svn.apache.org/repos/asf/activemq/trunk/activemq-core/src/test/resources/spring-embedded-xbean.xml, Those URLs looks REALLY pathetic. Seriously, are you proposing that you put a "final and stable release" of a configuration schema at an address that starts with "people.apache.org"?? And which is that extremely long-winded, with lots utterly schema-unrelated data?

Why can't you come up with something along the lines of "http://schemas.apache.org/activemq/amctivemq-5.0.xsd", at the MOST? Something that looks like you've at least put one cent into doing this the right way? Look at ANY OTHER schema definition on the entire internet, and you'll find that yours are .. non-good.

You folks apparently desperately wants the distribution of this file to be so automated and nice and cool. That is a very flawed logic. The URL you now propose is no better than the one that this whole shit started off with, and with later releases, you'll fsck this up again, and installations around the world will start to bomb out.

And finally, you do realize that this element is this bug's "secondary aspect" - the first is that there really RUNTIME-wise shouldn't be need for such a proper and stable URL at all (obviously), since Spring (with xbeans) have this feature where it will look it up in the classpath, using the META-INF/spring.schemas system (so that my offline application using your system will be able to boot without being hooked up to the internet).

Simply read the bug, starting with the initial description, then going through the dozen or so comments above, and you'll be informed.

How you are able to close this bug with that comment is actually frightening., Thanks Endre for your comments; your tone really helps encourage those volunteers on the project to use our spare time to help you out :)

Note that the public URL is not required; as you say that Spring can use the one from inside the jar. The public URI is only required if folks want to use it for some XSD editing tool. 
We're also talking about the internet too; folks can easily put that XSD wherever they like, on their hard drive, on their own server at whatever URL floats their boat.

I realise we should have a nice short URL for all versions of the schema. Its not quite trivial to do that at Apache so please bear with us. 

We could add some redirects here...
https://svn.apache.org/repos/asf/activemq/site/.htaccess

if anyone fancies figuring out the .htaccess ninja to make a nice URI of the form something like

http://activemq.apache.org/schemas/activemq-$VERSION.xsd

am gonna split this thing up as a separate JIRA, OK so the XSDs should soon be appearing here...

http://activemq.apache.org/schema/

for example


http://activemq.apache.org/schema/activemq-core-5.0.xsd

(when we do the release).

Until then it'll be

http://activemq.apache.org/schema/activemq-core-5.0-SNAPSHOT.xsd

etc, So this issue was caused by multiple things. 

* Bad XSDs caused by a bug in XBean; which AFAIK is now fixed, the generated XSDs are now valid right?
* lousy URLs for the XSDs, which should now be fixed (once Apache's caching infrastructure spots the new files)
* Spring unable to find the embedded XSD which is inside the activemq-core.jar

Am unsure how to resolve the last item without changing the namespace. Ideally if we can, we'd avoid changing the namespace (then the fix can be applied to 4.1.x and 5.0). 
Sure we could write our own EntityResolver, but I've no idea how to automatically register it so its always available to Spring; given that Spring is in charge, loads its ApplicationContext and we have to fit inside its callback stuff mid-parse.

Am wondering if the simplest solution is to change the namespace URI to end in ".xsd"? Maybe to http://activemq.apache.org/schema/activemq-core.xsd?

If anyone knows how to resolve this last issue nicely with using pure Spring I'd be most grateful. Endre - any ideas? Do you think the namespace URI really has to change?
, A few more thoughts. The ideal solution to the issue might be to keep backwards compatibility of the namespace URI; but to allow a cleaner URL thats more spring-like (and Apache-like) to be used. 
BTW its worth saying that the use of ActiveMQ's namespaces pre-dates both the move to Apache and the Spring 2 XML configuration stuff by quite a while so it was kinda hard to second guess how the spring 2.0 XML handling was gonna work!

A more spring-like namespace might be

http://activemq.apache.org/schema/activemq-core

for the namespace URI which then maps to the physical release as...

http://activemq.apache.org/schema/activemq-core-5.0.xsd

Then it'd kinda seem more normal in an XML declaration...

{code}
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:amq="http://activemq.org/config/1.0"
	xsi:schemaLocation="
    http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
    http://www.springframework.org/schema/aop   http://www.springframework.org/schema/aop/spring-aop-2.0.xsd
    http://www.springframework.org/schema/tx    http://www.springframework.org/schema/tx/spring-tx-2.0.xsd
    http://activemq.apache.org/schema/activemq-core     http://activemq.apache.org/schema/activemq-core-5.0.xsd">
{code}

Thoughts?, BTW am wondering if the generated file spring.schemas 

http\://activemq.org/config/1.0=activemq.xsd

should look like this

http\://activemq.org/config/1.0/1.0.xsd=activemq.xsd

to work with spring's entity resolver thingy
, DOH! Am thinking the spring.schemas file has nothing at all to do with the namespace URI at all; its purely to do with the XSD location!

So maybe something like this is better

{code}
http\://activemq.apache.org/schema/activemq-core.xsd = activemq.xsd
http\://activemq.apache.org/schema/activemq-core-5.0.xsd = activemq.xsd
{code}

So that the namespace URI does not have to change?, BTW the apache caching infrastructure seems to have spotted that those nicer schema URLs are working...

http://activemq.apache.org/schema/activemq-core-5.0-SNAPSHOT.xsd

or look at them all

http://activemq.apache.org/schema/, One further change to the URL stuff. We need one directory for snapshots and one directory for actual releases.

So I've just updated the symlinks (which will take a few hours to refresh in the caching infrastructure) so that

releases of XSDs appear here...
http://activemq.apache.org/schema/

such as 
http://activemq.apache.org/schema/activemq-core-4.1.1.xsd

and snapshot schemas appear here
http://activemq.apache.org/snapshot-schema/

such as 
http://activemq.apache.org/snapshot-schema/activemq-core-5.0-SNAPSHOT.xsd

The snapshots are a fair bit longer, but folks should usually be using the shorter, released XSDs
, James: It is SO AMAZINGLY REFRESHING to see you on this, and just KICKING this rather longstanding bug outta here!

Seriously - I think this has annoyed several people, and just stagnated others. The file I'm hosting as a "fix" to this is getting several hundred hits per week (admittedly not from that many different hosts! But still!).

I saw you asked for ideas - is that still so? After that, you quickly added 4-5 more comments, so I'm not sure you need me anymore? :) Do also note that I think I've stated most of my knowledge on how this should be done on earlier comments., Okay, here's a comment to something I spotted up there

In your "Then it'd kinda seem more normal in an XML declaration...", and a XML suggestion, there is, as I understand it, a rather serious flaw.

The idea is that the namespace declaration ??"xmlns:amq="http://activemq.org/config/1.0"?? must obviously match up with the later LOCATION declaration, which it doesn't do here: ??"http://activemq.apache.org/schema/activemq-core     http://activemq.apache.org/schema/activemq-core-5.0.xsd"??

Also, if you check out the URL's that spring itself uses, you'll see that BOTH of them actually resolve to something sane: the first is a unique URL that will never change - it states the "scope" of the declaration, and happens to point to a directory listing on a server, and the second is the actual "instance" of this declaration - i.e. "use this specific file" - which happens to be inside the former directory.

And in the spring.schemas, you are correct in that it is a "location" or "instance" redirecter, not a namespace redirecter.

I however wonder why you'd put the actual file "directly on root", and not put it inside one of the packages. Spring at least does this..
, Hey Endre

I think we're all on the same page; we all want to see an end to all these spring XML related bugs, issues and discussions :)

I think I'm getting to the bottom of understanding this; apart from the various bugs mentioned above that are now resolved, I think a misunderstanding of the role of the spring.schemas file has caused some confusion & blind alleys.
To be fair quite a few folks dived in and tried to fix the various issues in this whole Spring XML namespaces thing; it turned out there was quite a few things going wrong etc.

I think we're getting closer now.

trunk has a test case Spring2XmlNamespacesTest which uses this spring-embedded-xbean.xml
which at the time of writing looks like this...

{code}
<beans 
  xmlns="http://www.springframework.org/schema/beans" 
  xmlns:amq="http://activemq.org/config/1.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
  http://activemq.org/config/1.0 http://activemq.apache.org/snapshot-schema/activemq-core-5.0-SNAPSHOT.xsd">
{code}

which works fine. Then there's Spring2XmlNamespacesWithoutRemoteSchemaTest which uses spring-embedded-xbean-noversion.xml which uses an XSD location that doesn't actually exist (rather like in spring using
http://www.springframework.org/schema/beans/spring-beans.xsd without using the 2.0 version)

{code}
<beans 
  xmlns="http://www.springframework.org/schema/beans" 
  xmlns:amq="http://activemq.org/config/1.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
  http://activemq.org/config/1.0 http://activemq.apache.org/schema/activemq-core.xsd">
{code}

this test case works too - showing that the spring.schemas is indeed finding the local activemq.xsd file., This is starting to look very good!

It would be nice if that "schema-defintion URL" (http://activemq.org/config/1.0) actually existed - and you do own that domain, so you can make it so, right? Maybe a little README.txt in there, or something cute?

If it is possible in the 5.0 release, then renaming the "http://activemq.org/config/1.0" to something along the lines of what spring does (read my comment above) would in addition simply LOOK very much more right and corrent, and give pedantic wankers like me those warm tingly feelings that only unifiedness, correctness and thoroughness can give! , Have followed spring's lead where the namespace URI points to the directory of the various versioned files. So in an hour or two the URL should work...
http://activemq.org/config/1.0

when Apache catches up :). Though activemq.org is a redirect to activemq.apache.org so it'll probably only work in browsers; but that should do right?

Have also added a little ReadMe.html.

I think it might be nice to change the namespace URL to something more spring like and Apache-ish for 5.0; its a bit of a pain for users but we could support backwards compatibility I guess...

have brought this (and a number of related issues) up on the dev list...
http://www.nabble.com/Handling-XSDs-and-Spring-2-XML-processing-etc.-tf3921424s2354.html

it might be worth jumping on there, as this JIRA is long and complex enough already :), That's really nice!

If it is a proper redirect, even other clients than browsers should be able to follow it - but that is really not that terribly important.

You could call the file "index.html" instead, so it'll just come directly up? Or maybe a dir-listing actually is good, so that one can see the different versions? Probably.. but isn't there an Apache HTTPD feature, whereby if you call a file README or something, it'll automatically be "#included" in the dir-listing?

I've replied to the email, basically just stating the same opinions that I have here and in 1276. And I obviously agree with the "spring-like and Apache-ish" URI, but realize that my _opinion_ don't weigh very much when decision-time comes!]