[can you validate that this is still a problem with a current 5.4-SNAPSHOT? There was one deadlock issue resolve in the past few weeks in the context of being full and not resuming leading to hung consumers. this was not related to pure master slave however but it may be the difference., I repeated the test with the apache-activemq-5.4-SNAPSHOT build from Wed Jan 06 15:02:31 GMT+00:00 2010 (http time stamp on the download site).
The result was the same as described above.

After stopping the slave broker it was possible to dequeue messages again from the master broker.

The 5.4-SNAPSHOT version prints out more information to the console:
 INFO | ActiveMQ JMS Message Broker (slave, ID:karkand-43612-1263314151269-1:0) started
 INFO | Usage Manager Store is Full. Producer (ID:karkand-58702-1263314161468-0:0:1:1) stopped to prevent flooding queue://TestQueue. See http://activemq.apache.org/producer-flow-control.html for more info (blocking for: 30s)
 INFO | Usage Manager Store is Full. Producer (ID:karkand-58702-1263314161468-0:0:1:1) stopped to prevent flooding queue://TestQueue. See http://activemq.apache.org/producer-flow-control.html for more info (blocking for: 60s)
 INFO | Usage Manager Store is Full. Producer (ID:karkand-58702-1263314161468-0:0:1:1) stopped to prevent flooding queue://TestQueue. See http://activemq.apache.org/producer-flow-control.html for more info (blocking for: 90s)
 INFO | Usage Manager Store is Full. Producer (ID:karkand-58702-1263314161468-0:0:1:1) stopped to prevent flooding queue://TestQueue. See http://activemq.apache.org/producer-flow-control.html for more info (blocking for: 121s)
 INFO | Usage Manager Store is Full. Producer (ID:karkand-58702-1263314161468-0:0:1:1) stopped to prevent flooding queue://TestQueue. See http://activemq.apache.org/producer-flow-control.html for more info (blocking for: 151s)
 INFO | Usage Manager Store is Full. Producer (ID:karkand-58702-1263314161468-0:0:1:1) stopped to prevent flooding queue://TestQueue. See http://activemq.apache.org/producer-flow-control.html for more info (blocking for: 182s)
 INFO | Usage Manager Store is Full. Producer (ID:karkand-58702-1263314161468-0:0:1:1) stopped to prevent flooding queue://TestQueue. See http://activemq.apache.org/producer-flow-control.html for more info (blocking for: 212s)
 INFO | Usage Manager Store is Full. Producer (ID:karkand-58702-1263314161468-0:0:1:1) stopped to prevent flooding queue://TestQueue. See http://activemq.apache.org/producer-flow-control.html for more info (blocking for: 242s)
 INFO | Usage Manager Store is Full. Producer (ID:karkand-58702-1263314161468-0:0:1:1) stopped to prevent flooding queue://TestQueue. See http://activemq.apache.org/producer-flow-control.html for more info (blocking for: 272s)
 INFO | Usage Manager Store is Full. Producer (ID:karkand-58702-1263314161468-0:0:1:1) stopped to prevent flooding queue://TestQueue. See http://activemq.apache.org/producer-flow-control.html for more info (blocking for: 303s)
 INFO | Usage Manager Store is Full. Producer (ID:karkand-58702-1263314161468-0:0:1:1) stopped to prevent flooding queue://TestQueue. See http://activemq.apache.org/producer-flow-control.html for more info (blocking for: 333s)
 INFO | Usage Manager Store is Full. Producer (ID:karkand-58702-1263314161468-0:0:1:1) stopped to prevent flooding queue://TestQueue. See http://activemq.apache.org/producer-flow-control.html for more info (blocking for: 363s)

The producer was directly connected to the master broker and not the slave broker. These messages must be about a connection between the master and slave broker., I added the  sendFailIfNoSpace="true" attribute to the systemUsage element of he slave broker config, repeated the test and the following exception was printed to the console of the master broker:

ERROR | Slave Failed
javax.jms.ResourceAllocationException: Usage Manager Store is Full. Producer (ID:karkand-45529-1263315817291-0:0:1:1) stopped to prevent flooding queue://TestQueue. See http://activemq.apache.org/producer-flow-control.html for more info
	at org.apache.activemq.broker.region.Queue.doMessageSend(Queue.java:500)
	at org.apache.activemq.broker.region.Queue.send(Queue.java:474)
	at org.apache.activemq.broker.region.AbstractRegion.send(AbstractRegion.java:354)
	at org.apache.activemq.broker.region.RegionBroker.send(RegionBroker.java:445)
	at org.apache.activemq.broker.TransactionBroker.send(TransactionBroker.java:224)
	at org.apache.activemq.broker.BrokerFilter.send(BrokerFilter.java:126)
	at org.apache.activemq.broker.CompositeDestinationBroker.send(CompositeDestinationBroker.java:95)
	at org.apache.activemq.broker.MutableBrokerFilter.send(MutableBrokerFilter.java:133)
	at org.apache.activemq.broker.TransportConnection.processMessage(TransportConnection.java:443)
	at org.apache.activemq.command.ActiveMQMessage.visit(ActiveMQMessage.java:631)
	at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:297)
	at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:175)
	at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:116)
	at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:68)
	at org.apache.activemq.transport.vm.VMTransport.iterate(VMTransport.java:207)
	at org.apache.activemq.thread.DedicatedTaskRunner.runTask(DedicatedTaskRunner.java:98)
	at org.apache.activemq.thread.DedicatedTaskRunner$1.run(DedicatedTaskRunner.java:36), r 946974 should resolve this. One thing to note is to ensure that the usage limits on the slave are a little higher than the master such that flow control happens only on the master, other wise replication can block which can block message consumption.

the revision provides a test and  resolves a hang situation where the producer missed a reply because the replication messed with the correlation id. Normally the ids are in sync, but when a message is queued waiting for space, they can be mismatched. having the replicator (MasterBroker filter) copy the underlying message resolved this issue,, Finding the right higher value on the slave seems to be tricky, since it depends on the message size which is usually dynamic,
which means that depending on the configuration the broker could work for quite some time and then fail suddenly when a bunch of bigger messages is received (which might happen, depending on the application).

Users which choose a PureMasterSlave configurtion are really focused on stability.
For this particular issue the slave should maybe disable the flow control completely when the master is healthy, 
what do you think Gary ?, Agree, this is not ideal, but it is not just flow control, it is any memory limit because the default behavior is to block a send if the memory limit is reached. So the slave should be configured with large memory limits or left unbounded.]