[Test case , I've modified the client a bit to measure how many could be sent without problems.

See MsgsPerSecond.diff to TryJmsClient.java

On my laptop it worked up to 1500 per second. At 2000 it took a while until it failed.

Maybe it helps to investigate the problem. Or you can use it as a workaround., Also tested it on RC2.

See http://www.nabble.com/-VOTE--ActiveMQ-5.2.0---RC2-td19874910.html, I've created Maven projects to run each of these clients in their own VM using the exec-maven-plugin. Each one has now been running for a while (nearly 4 million messages have been sent) and I'm not seeing any errors at all. Am I missing something? 

I'm seeing the following output from the TryJmsManager and it doesn't seem to be changing at all: 

{code}
ActiveMQ memeory 0 1024
ActiveMQ message store 0
ActiveMQ temp space 0
sent message 3946000 (id=ID:mongoose.local-50509-1224010696716-3:0:1:1:3946001) after 2630643 ms.
sent message 3947000 (id=ID:mongoose.local-50509-1224010696716-3:0:1:1:3947001) after 2631294 ms.
sent message 3948000 (id=ID:mongoose.local-50509-1224010696716-3:0:1:1:3948001) after 2631974 ms.
sent message 3949000 (id=ID:mongoose.local-50509-1224010696716-3:0:1:1:3949001) after 2632658 ms.
sent message 3950000 (id=ID:mongoose.local-50509-1224010696716-3:0:1:1:3950001) after 2633326 ms.
sent message 3951000 (id=ID:mongoose.local-50509-1224010696716-3:0:1:1:3951001) after 2633965 ms.
sent message 3952000 (id=ID:mongoose.local-50509-1224010696716-3:0:1:1:3952001) after 2634663 ms.
{code}

Here is the output I'm seeing from the TryJmsClient: 

{code}
ot message ID:mongoose.local-50509-1224010696716-3:0:1:1:3994202
got message ID:mongoose.local-50509-1224010696716-3:0:1:1:3994203
got message ID:mongoose.local-50509-1224010696716-3:0:1:1:3994204
got message ID:mongoose.local-50509-1224010696716-3:0:1:1:3994205
got message ID:mongoose.local-50509-1224010696716-3:0:1:1:3994206
got message ID:mongoose.local-50509-1224010696716-3:0:1:1:3994207
got message ID:mongoose.local-50509-1224010696716-3:0:1:1:3994208
got message ID:mongoose.local-50509-1224010696716-3:0:1:1:3994209
got message ID:mongoose.local-50509-1224010696716-3:0:1:1:3994210
got message ID:mongoose.local-50509-1224010696716-3:0:1:1:3994211
got message ID:mongoose.local-50509-1224010696716-3:0:1:1:3994212
got message ID:mongoose.local-50509-1224010696716-3:0:1:1:3994213
got message ID:mongoose.local-50509-1224010696716-3:0:1:1:3994214
got message ID:mongoose.local-50509-1224010696716-3:0:1:1:3994215
got message ID:mongoose.local-50509-1224010696716-3:0:1:1:3994216
got message ID:mongoose.local-50509-1224010696716-3:0:1:1:3994217
{code}, That first log

{code}
   sent message 3946000 (id=ID:mongoose.local-50509-1224010696716-3:0:1:1:3946001) after 2630643 ms.
{code}

looks like the output of TryJmsClient with my patch applied.

In that case set _msgsPerSecond_ to a much higher value, compile and run again.
, We are experiencing a similar issue using a non-persistent queue and producerFlowControl with ActiveMQ 5.1.0.  After sending enough messages for the broker to block the producers due to the memory usage being at 100%, we start a consumer which then drains the queue.  However, since the memoryUsage stays at 100%, the broker is still blocking producers from sending more messages.

I have 25 threads producing messages.  One is blocked here:

sun.misc.Unsafe.park(Native Method)
java.util.concurrent.locks.LockSupport.park(LockSupport.java:118)
java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1841)
java.util.concurrent.LinkedBlockingQueue.put(LinkedBlockingQueue.java:253)
org.apache.activemq.transport.vm.VMTransport.oneway(VMTransport.java:92)
org.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:40)
org.apache.activemq.transport.ResponseCorrelator.oneway(ResponseCorrelator.java:60)
org.apache.activemq.ActiveMQConnection.doAsyncSendPacket(ActiveMQConnection.java:1176)
org.apache.activemq.ActiveMQConnection.asyncSendPacket(ActiveMQConnection.java:1170)
org.apache.activemq.ActiveMQSession.asyncSendPacket(ActiveMQSession.java:1743)
org.apache.activemq.ActiveMQMessageProducer.close(ActiveMQMessageProducer.java:147)
org.springframework.jms.support.JmsUtils.closeMessageProducer(JmsUtils.java:124)
org.springframework.jms.core.JmsTemplate.doSend(JmsTemplate.java:519)
org.springframework.jms.core.JmsTemplate$2.doInJms(JmsTemplate.java:477)
org.springframework.jms.core.JmsTemplate.execute(JmsTemplate.java:428)
org.springframework.jms.core.JmsTemplate.send(JmsTemplate.java:475)

The rest are blocked here

org.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:39)
org.apache.activemq.transport.ResponseCorrelator.oneway(ResponseCorrelator.java:60)
org.apache.activemq.ActiveMQConnection.doAsyncSendPacket(ActiveMQConnection.java:1176)
org.apache.activemq.ActiveMQConnection.asyncSendPacket(ActiveMQConnection.java:1170)
org.apache.activemq.ActiveMQSession.<init>(ActiveMQSession.java:190)
org.apache.activemq.ActiveMQConnection.createSession(ActiveMQConnection.java:296)
sun.reflect.GeneratedMethodAccessor91.invoke(Unknown Source)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
java.lang.reflect.Method.invoke(Method.java:585)
org.springframework.jms.connection.SingleConnectionFactory$SharedConnectionInvocationHandler.invoke(SingleConnectionFactory.java:418)
$Proxy30.createSession(Unknown Source)
org.springframework.jms.support.JmsAccessor.createSession(JmsAccessor.java:200)
org.springframework.jms.core.JmsTemplate.execute(JmsTemplate.java:419)
org.springframework.jms.core.JmsTemplate.send(JmsTemplate.java:475)
, Ryan - your issues looks like https://issues.apache.org/activemq/browse/AMQ-2475 - which is fixed in 5.3.1 and 5.4, Tried this out on latest trunk today - I suspect the real problem was: https://issues.apache.org/activemq/browse/AMQ-2475
Looks fixed now]