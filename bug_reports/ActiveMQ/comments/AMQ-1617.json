[The problem is that the application server (glassfish) triggers the ManagedConnection's cleanup() method after XA.end and BEFORE XA.prepare (and not AFTER the XA.commit  as mandated by the JCA spec). Thus the broker does not have any transactional context anymore when the XA.prepare is issued ...

Kai, Not a bug in ActiveMQ, I do think this is an ActiveMQ bug. The mentioned behaviour violates Java Connector Architecture (JCA) and Java Transaction Architecture (JTA) specifications. XAResource must have opportunity to commit one transaction being already used in another one. In a typical scenario described in specs managed connection is cleaned up before the transaction commits. Being cleaned the connection is returned to pool and can be supplied to another client. In the current ActiveMQ implementation this leads to invalid connection context when the first transaction commits. XAResource implementatiom must not depend on the connection client specific data which is cleaned before returning the connection to pool.

Hera are the references to specs:
1. Scenario: Connection Close and JTA Transactional Cleanup (JCA 7.6.5)
2. Scenario: Connection Event Notifications and Connection Close (JCA 6.8.3)
3. Resource Sharing (JTA 3.6.4)

Best regards
Alexei Akimov, A test case would help make this concrete. There have been some mods the the JCA connector to defer connection close till a transaction completes, allowing a connection to be pooled when a transaction is still in need of completion. 
With a test case we could verify the expected behavior against trunk. If the test still fails with trunk or a 5.3-SNAPSHOT we will have something to work on., No test case present and no information given on how to reproduce this.  ]