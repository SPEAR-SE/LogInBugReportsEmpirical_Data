[I have found the issue that activates this problem.

{code:title=MBeanBridgeDestination.java|borderStyle=solid}
    private Map<ActiveMQDestination, ObjectName> destinationObjectNameMap = new ConcurrentHashMap<ActiveMQDestination, ObjectName>();
    private Map<ActiveMQDestination, NetworkDestinationView> outboundDestinationViewMap = new ConcurrentHashMap<ActiveMQDestination, NetworkDestinationView>();
    private Map<ActiveMQDestination, NetworkDestinationView> inboundDestinationViewMap = new ConcurrentHashMap<ActiveMQDestination, NetworkDestinationView>();
{code}

Both onOutboundMessage() and onInboundMessage() use the  destinationObjectNameMap to register the ObjectName of the NetworkDestinationView. But each other overwrite their value when using a duplex connection.

{code:title=MBeanBridgeDestination.java|borderStyle=solid}
public void onInboundMessage(Message message) {
....
 destinationObjectNameMap.put(destination, objectName);
}
{code}

When running with the option to purge unactiveDestinationViews which by default is active it will un-register from the MBeanServer the objectName that is found on  destinationObjectNameMap.remove(entry.getKey()); //ActiveMqDestination. This happens on the method purgeInactiveDestinationView(Map<ActiveMQDestination, NetworkDestinationView> map) which receives both outboundDestinationViewMap and inboundDestinationViewMap.

Thus when running for outboundDestinationViewMap if the last registration of a destination was actually of a inBound it will incorrectly delete  the object name of and  inboundDestination insead of the one from outboundDestination.

I am working on a fix and submitting a patch for this issue.

This seems to be related to AMQ-5265 which looks like it tried to fix the same issue although apparently it was still present., I have included a patch for this issue. From the way that it is done it removes the need to synchronize operations which is a good thing., Patch lacks any tests to validate the problem or the fix.  , No problem, 
Let me work out a test and attach it., Patch with test case included, Is there anything missing to check this issue?, GitHub user Altaflux opened a pull request:

    https://github.com/apache/activemq/pull/164

    AMQ-6052 Network of brokers on duplex mode reports InstanceAlreadyExistsException on already existing destinations

    This PR is related to Issue AMQ-6052
    https://issues.apache.org/jira/browse/AMQ-6052


You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/Altaflux/activemq master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/activemq/pull/164.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #164
    
----
commit a262140a616e238984b25e326143fb8e00291ed1
Author: Altaflux <pabloloz@gmail.com>
Date:   2016-01-04T21:00:00Z

    Network of brokers on duplex mode reports InstanceAlreadyExistsException on already existing destinations

commit 15dc63cb96a02d64cda9b5bd0f77492f36938f47
Author: Altaflux <pabloloz@gmail.com>
Date:   2016-01-04T21:03:26Z

    Network of brokers on duplex mode reports InstanceAlreadyExistsException on already existing destinations

----
, Commit 3bb7e4a5c8497c8259a267e2eb11dddb8615a1ea in activemq's branch refs/heads/master from [~Altaflux]
[ https://git-wip-us.apache.org/repos/asf?p=activemq.git;h=3bb7e4a ]

Network of brokers on duplex mode reports InstanceAlreadyExistsException on already existing destinations
https://issues.apache.org/jira/browse/AMQ-6052
closes #164
, Github user asfgit closed the pull request at:

    https://github.com/apache/activemq/pull/164
, [~Altaflux] thanks for the fix and test. I pushed your changes, they look good. Lets track the nightly tests to pick up any possible regressions, Great thanks Gary,
I expect it to work correctly, we have run this patch in production for a while and haven't seen the issue occur again so fingers crossed., Can we back-port this issue to any future patch releases we do (5.13.1 at a minimum, plus 5.12.3, 5.11.4, etc. if we do them)?  I don't think it's important enough to make a patch version just for this issue, but I do think it's enough of a frustration for anyone with a NoB configuration that it should be in a patch release if we're already doing one for any of the earlier versions., Also note that a workaround is to set the logging level to ERROR for org.apache.activemq.network.MBeanBridgeDestination.  You run the risk of not seeing errors in MBean creation due to other reasons, but in practice the odds of that are unlikely so there's really not much of a cost, and I think that's better than disabling JMX entirely., I actually already backported this to 5.13.x but forgot to update the fixed versions.  I can also move it to 5.12.3 in case it is released but any others can be backported later if there is a desire for them., Great, thanks., This issue can also be worked around be setting on the networkConnector gcDestinationViews="false".

Although disabling the log level on that class avoids the huge log output it still creates a performance impact during the time where the issue occurs until the next removal of destinations as for every message that is received being on that faulty state will enter the synchronization block and throw and exception which will cause performance to degrade., Closing this as the fixes have been applied.]