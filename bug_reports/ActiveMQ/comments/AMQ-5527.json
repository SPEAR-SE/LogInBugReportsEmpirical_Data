[I think my initial report was inaccurate and it didn't have to do with size.  Relevant setup:
{code}

  <broker brokerName="testBroker" xmlns="http://activemq.apache.org/schema/core" advisorySupport="true" useJmx="true" offlineDurableSubscriberTimeout="10000" >
      <destinationPolicy>
        <policyMap>
          <policyEntries>
            <policyEntry queue=">" optimizedDispatch="true" producerFlowControl="false" memoryLimit="128mb" expireMessagesPeriod="300">
              <deadLetterStrategy>
                <individualDeadLetterStrategy queuePrefix="DLQ." useQueueForQueueMessages="true"/>
              </deadLetterStrategy>
            </policyEntry>
          </policyEntries>
        </policyMap>
      </destinationPolicy>

      <persistenceAdapter>
        <jdbcPersistenceAdapter dataDirectory="${activemq.base}/data" dataSource="#mysql-ds" lockKeepAlivePeriod="5000">
        	<locker>
	            <lease-database-locker lockAcquireSleepInterval="10000" leaseHolderId="testBroker"/>
          </locker>
        </jdbcPersistenceAdapter>
      </persistenceAdapter>

      <transportConnectors>
        <transportConnector name="nio" uri="nio://0.0.0.0:55540"/>
        <transportConnector name="stomp+nio" uri="stomp+nio://0.0.0.0:61613"/>
      </transportConnectors>
    </broker>
    <!-- MySql DataSource Setup -->
    <bean id="mysql-ds" class="org.apache.commons.dbcp.BasicDataSource">
      <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
      <property name="url" value="${jms.jdbc.url}"/>
      <property name="username" value="${jms.jdbc.username}"/>
      <property name="password" value="${jms.jdbc.password}"/>
      <property name="maxActive" value="50"/>
      <property name="poolPreparedStatements" value="false"/>
    </bean>
{code}

If I was running the following test: (Disclaimer:Code was admittedly snagged from AMQ5212, it may not always make sense :) )

{code}
import javax.jms.JMSException;
import javax.jms.Session;

import org.apache.activemq.ActiveMQConnection;
import org.apache.activemq.ActiveMQConnectionFactory;
import org.apache.activemq.ActiveMQMessageProducer;
import org.apache.activemq.ActiveMQSession;
import org.apache.activemq.command.ActiveMQQueue;
import org.apache.activemq.command.ActiveMQTextMessage;
import org.junit.Test;

public class AMQ5527Test {
	    
	    @Test
	    public void testSendMultipleMessagesToDLQ() throws JMSException {
	    	//Whatever your local server is.
	    	final ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory("nio://localhost:55540");
	        connectionFactory.setCopyMessageOnSend(false);
	        connectionFactory.setWatchTopicAdvisories(false);
	        ActiveMQConnection activeMQConnection = (ActiveMQConnection) connectionFactory.createConnection();
	        activeMQConnection.start();
	        
	        //Create it as transacted so I can browse it afterwards in JConsole
	        ActiveMQSession activeMQSession = (ActiveMQSession) activeMQConnection.createSession(true, Session.CLIENT_ACKNOWLEDGE);

	        try {
		        ActiveMQQueue dest = new ActiveMQQueue("test-queue-" 
		                + getClass().getSimpleName());
		        ActiveMQMessageProducer activeMQMessageProducer = (ActiveMQMessageProducer) activeMQSession.createProducer(dest);
		        // create demand so page in will happen
		        activeMQSession.createConsumer(dest);
		        ActiveMQTextMessage message = new ActiveMQTextMessage();
		        message.setDestination(dest);
		        activeMQMessageProducer.send(message, null);
		
		        // send a duplicate
		        activeMQConnection.syncSendPacket(message);
		  
		        //Do it again.
		        activeMQConnection.syncSendPacket(message);
	        } finally {
	        	activeMQSession.commit();
	        }
	        activeMQConnection.close();
	    	
	    }

}
{code}

and then go to the console.  Select the main test queue.   Go to OperationsPage and click "browseAsTable"

CPU core usage immediately shot up to 170% usage (as reported by Mac Activity Monitor)  and it hasn't come out of it yet as I'm writing this report. 

I hope this is more helpful., I believe this issue was fixed in AMQ-6066, I recommend re-testing to see if a newer version that contains that fix indeed helps in this case.]