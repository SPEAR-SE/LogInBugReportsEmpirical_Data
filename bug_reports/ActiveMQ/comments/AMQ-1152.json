[Can someone at least respond to this?
This seems like a very key feature of ActiveMQ that is missing., I wonder; could you test that the XML configuration really is configuring the connection factories RedeliveryPolicy? i.e. is ths some kinda bug in the XML configuration stuff or is there really an issue with the redelivery., If you mean if this is due to using xbean then no it isn't.
I have the same configuration using standard spring configurations on a live project that doesn't use xbean configuration and it is the same., Incidentally I've created a test case (method testUseURIToConfigureRedeliveryPolicy()) in [ActiveMQConnectionFactoryTest|http://svn.apache.org/repos/asf/activemq/trunk/activemq-core/src/test/java/org/apache/activemq/ActiveMQConnectionFactoryTest.java] which configures the redelivery policy via URI and shows its passed through into the consumer. Am unsure how to reproduce this issue, The problem with spring jms support for consuming messages is that it each time a message is consumed, a new jms consumer is created.  And the redelivery policy is handled on the consumer side, not on the broker side.  Hence, the broker redispatch the message immediately.

Here is a diff to fix a small bug on 4.1.1 found while debugging this issue, but as explained above, the problem lies elsewhere.

{code}
Index: src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java
===================================================================
--- src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java      (revision 540956)
+++ src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java      (working copy)
@@ -598,7 +598,9 @@
             if ((session.isTransacted() || session.isDupsOkAcknowledge())) {
                 acknowledge();
             }
-            deliveredMessages.clear();
+            if (!session.isTransacted()) {
+                deliveredMessages.clear();
+            }
             unconsumedMessages.close();
             this.session.removeConsumer(this);
         }
{code}, does setting the caching level in the spring message listener stuff help?, I had a similar problem (Spring+ActiveMQ, redelivery kept going if an exception was thrown in my listener). Setting <property name="cacheLevelName" value="CACHE_CONSUMER" />  on my DefaultMessageListenerContainer fixed the problem, and my consumer now only receives the message once - with no redelivery if the consumer throws an exception.

This is a workable solution for my circumstance, but I won't pretend to know enough about the JMS spec to say if it's the Correct Behaviour or not., I have the same problem:
I set a redeliverypolicy with a max redelivery of 1 (I want to disable redeliveries) but I keep on receiving the messages... For information : in my message listener, message.getJMSRedelivered() returns true.

I cannot set the cacheLevel to CACHE_CONSUMER in my application and I find it really weird to have the redelivery count per consumer.

Did anyone find a solution to that ?, This looks fixed to me in 5.3 ?]