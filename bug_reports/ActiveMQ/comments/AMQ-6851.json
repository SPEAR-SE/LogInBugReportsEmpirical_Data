[you can also increase the cache size - org.apache.activemq.broker.region.group.CachedMessageGroupMapFactory#setCacheSize

are you requesting a different default behaviour?, The default behavior is not what I expected from the documentation.
http://activemq.apache.org/message-groups.html
I expected that if I used a group ID for messages, all messages in that group were guaranteed to be processed in order.
My use case was keeping messages ordered for each of thousands of groups. When running the code, instead of getting guaranteed order, I got messages being processed out-of-order.
I can see from the implementations of MessageGroupHashBucket and SimpleMessageGroupMap that message groups work by associating each group with a consumer.
It looks like SimpleMessageGroupMap keeps track of every group but suffers from unbounded memory use.
MessageGroupHashBucked keeps track of every group and has bounded memory use.
CachedMessageGroupMap has bounded memory use, but only keeps track of up to 1024 (or the maximum configured size) groups, then loses track of any groups older than the newest 1024. That becomes a serious problem when there are messages for 2000 groups in the queue and each group has several messages waiting.

I noticed that https://issues.apache.org/jira/browse/AMQ-3565 mentions the idea of closing groups for which there are no messages in the queue, and the CachedMessageGroupMap is mentioned as doing this. However, the LRU map evicts old groups but does not wait until there are no queued messages associated with the group. I consider this incorrect behavior because queued messages will not be kept in order. I would consider it correct behavior if the LRU map only evicted groups for which no messages were queued, but retained all groups for which there were still messages queued.

I also found that https://issues.apache.org/jira/browse/AMQ-5942 mentions the same issue and the comments say the documentation should be changed. If the decision is made to retain the current behavior, then certainly the documentation should make it clear that the guaranteed ordering of messages is limited in the default configuration to 1024 groups (or the configured maximum), and no guarantees apply beyond that.

Thank you for your quick reply. I appreciate that there are competing demands of memory consumption, load balancing, complexity, etc., makes sense, I pushed some of your observations to the documentation, see the last paragraph: https://cwiki.apache.org/confluence/display/ACTIVEMQ/Message+Groups]