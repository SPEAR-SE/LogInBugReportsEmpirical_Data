[Note that i've found a workaround for now.  If i call BrokerService.getBroker() before calling BrokerService.start(), the internal broker instance is created and assigned before the rest of startup proceeds and there is no longer a race condition with the connection factory startup.  During a normal BrokerService (asynchronous) startup, the Broker instance is not created until after the persistence adapters are started.  I'm not sure what the implications of my workaround are (creating the broker instance before the persistence adapters are started) but everything seems to be working fine with this change in place.

Assuming that creating the broker instance earlier in the startup process is legitimate, maybe the BrokerService could be changed to do that in the start() method before breaking off for the rest of the asynchronous startup process., Can you create a unit test to reproduce this?, It's a race condition, so obviously difficult to test.  however, i've introduced some delays into the broker startup in the test code and they seem to reliably cause the problem on my box.  without the artificial delays, the test would fail about 1 out of 3 times on my box.]