[As this test continued to run, I see that the consumer stopped pulling messages off the queue
I see the producer is hammering messages into the queue but the 

Name â†‘ 	     Number Of Pending Messages   	Number Of Consumers   	Messages Enqueued   	Messages 

DLQ.incoming.queue 	23150 	0 	23150 	0 	
	
incoming.queue 	4945 	1 	28094 	23150 	

Now, please see that #messages enqueued and yet to be dequeued are 4945 while DLQ has all the 23150 messages that errorred out.

This is not a good situation to have the broker getting stalled. 

---- configuration info ----

<systemUsage>
            <systemUsage sendFailIfNoSpace="true">
                <memoryUsage>
                    <memoryUsage limit="256 mb"/>
                </memoryUsage>
                <storeUsage>
                    <storeUsage limit="1 gb"/>
                </storeUsage>
                <tempUsage>
                    <tempUsage limit="100 mb"/>
                </tempUsage>
            </systemUsage>
        </systemUsage>

------

using fileQueueCursor.




	, can you provide your test case or some code or xml configuration that can reproduce?, Gary,

This is a very simple test. I created a Map<String,String> with large 8KB persistent messages. 
I used ActiveMQ 5.4.0 broker. I use JMSTemplate to send messages to a queue. (I have used VM/TCP transports). Important thing to note is that there is no consumer associated with the queue. So, messages are flooding the queue at a fast rate. (only producer)
(This is like a DLQ where messages are flooding into because of consistent error by consumer causing session rollback. Here no consumer dequeues messages from DLQ automatically. Its handled manually)

The  following shows destination policy and system  memory configuration.


 <destinationPolicy>
            <policyMap>
              <policyEntries>
                <policyEntry topic=">" producerFlowControl="false" >
                  <pendingSubscriberPolicy>
                    <vmCursor />
                  </pendingSubscriberPolicy>
                </policyEntry>
                
                <policyEntry queue=">" producerFlowControl="false">
                	
                	<deadLetterStrategy>
			        	<individualDeadLetterStrategy queuePrefix="DLQ." useQueueForQueueMessages="true" />
          			</deadLetterStrategy>
          			
                	<dispatchPolicy>
             		            <strictOrderDispatchPolicy />
           	        </dispatchPolicy>
           		
                  <pendingQueuePolicy>
                    <fileQueueCursor/>
                  </pendingQueuePolicy>
                  
                </policyEntry>
              </policyEntries>
            </policyMap>
        </destinationPolicy> 


       <systemUsage>
            <systemUsage  sendFailIfNoSpace="true">
                <memoryUsage>
                    <memoryUsage limit="256 mb"/>
                </memoryUsage>
                <storeUsage>
                    <storeUsage limit="1 gb"/>
                </storeUsage>
                <tempUsage>
                    <tempUsage limit="100 mb"/>
                </tempUsage>
            </systemUsage>
        </systemUsage>

, do you have a test case for the use of the file cursor, would be great if there was a reproducible junit test case., No test case provided and I can't reproduce any leaks using the information given.]