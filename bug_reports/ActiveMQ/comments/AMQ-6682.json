[Have you confirmed that consumer close or connection close is being called?, Logic to close consumer and connection is not being called yet by Spring DMLC. Appears mutex.wait() in FifoMessageDispatchChannel.java:72 is blocked forever, preventing Spring DLMC doShutdown from closing consumer and connection.
, So that's not a bug then as the receive call is by definition blocking, it will only return when a message is available or the consumer is explicitly closed, which is true regardless of prefetch being set to 0, 1, or 100.  This is a configuration issue and not a client issue as far as I can tell.  , When using a prefetch value other than 0, Spring DMLC shuts down normally.

When using prefetch value of 0, DMLC shutdown hangs. The DMLC shutdown sequence calls org.apache.activemq.ActiveMQConnection.stop (ActiveMQConnection.java:569) which eventually calls org.apache.activemq.FifoMessageDispatchChannel.stop(FifoMessageDispatchChannel.java:124) which sets running=false. In separate thread, this in turn causes the mutex.wait() to in FifoMessageDispatchChannel.java:72 to block forever. Appears to be a timing issue/race condition as when I step thru threads in remote debugger, sometimes the spring DMLC shuts down normally with prefetch value of 0. 

I also created https://jira.spring.io/browse/SPR-15579. Not sure where the problem resides., Also note, a workaround is to set prefetch value of 0 on AMQ server and omit jms.prefetchPolicy.queuePrefetch=0 from brokerURL. Spring DMLC shutdown successfully in this scenario.

<broker ... >
  ...
  <destinationPolicy>
    <policyMap>
      <policyEntries>
        <policyEntry queue=">" queuePrefetch=”0”/>, Looked again and so far I still don't see a bug with what information has been given so far.  A consumer receive will block and is not unblocked by connection stop,  so if the spring bits are waiting for the receive to return after calling connection stop that'd be wrong.  Would need a stack trace or thread dump of the ActiveMQ threads to see what was hung up.  , Given the current information this appears to be a spring issue as it is depending on receive not blocking which it certainly can under the conditions listed.]