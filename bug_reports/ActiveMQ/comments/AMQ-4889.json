[I attached a possible patch. As long as I can see, the problem was adding ProxyConnection objs into a collection inside ProxyConnector before starting them.

Maybe an amq guru can check this and gives some feedbacks?

Thanks!, Actually the problem in ProxyConnector hid something more than a simple problem ProxyConnector.java file. 

Apparently some clean-up invocations were missing in SSLNIOTransport as well. This resulted in many leaked file descriptors in linux (RHEL 6.3 64 bit). 

Before the attached patches the lsof command gave tons of
{noformat}
java    6530 platone    8u  sock                0,6      0t0 2489682586 can't identify protocol
java    6530 platone    9u  sock                0,6      0t0 2489745273 can't identify protocol
java    6530 platone   15u  sock                0,6      0t0 2489727545 can't identify protocol
java    6530 platone   66u  sock                0,6      0t0 2489683982 can't identify protocol
java    6530 platone   69u  sock                0,6      0t0 2489684335 can't identify protocol
java    6530 platone   72u  sock                0,6      0t0 2489684339 can't identify protocol
java    6530 platone   74u  sock                0,6      0t0 2489684688 can't identify protocol
java    6530 platone   76u  sock                0,6      0t0 2489685055 can't identify protocol
java    6530 platone   77u  sock                0,6      0t0 2489716539 can't identify protocol
java    6530 platone   97u  sock                0,6      0t0 2489683431 can't identify protocol
java    6530 platone   98u  sock                0,6      0t0 2489683450 can't identify protocol
java    6530 platone   99u  sock                0,6      0t0 2489684695 can't identify protocol
java    6530 platone  100u  sock                0,6      0t0 2489683990 can't identify protocol
java    6530 platone  101u  sock                0,6      0t0 2489702245 can't identify protocol
java    6530 platone  102u  sock                0,6      0t0 2489685058 can't identify protocol
...
{noformat}
(see attached lsof.txt) with the following socket stats:
{noformat}
sockets: used 3067
TCP: inuse 21 orphan 0 tw 0 alloc 2808 mem 2648
UDP: inuse 6 mem 5
UDPLITE: inuse 0
RAW: inuse 1
FRAG: inuse 0 memory 0
{noformat}
and the following netstat outcome:
{noformat}
...
tcp        0      0 ::ffff:192.168.24.82:44201  ::ffff:192.168.16.166:61616 ESTABLISHED 6530/java           off (0.00/0/0)
tcp        0      0 ::ffff:192.168.24.82:61619  ::ffff:192.168.24.66:64601  CLOSE_WAIT  6530/java           off (0.00/0/0)
tcp        0      0 ::ffff:192.168.24.82:61619  ::ffff:192.168.24.67:9033   CLOSE_WAIT  6530/java           off (0.00/0/0)
tcp        0      0 ::ffff:192.168.24.82:61619  ::ffff:192.168.24.66:56924  CLOSE_WAIT  6530/java           off (0.00/0/0)
tcp        0      0 ::ffff:192.168.24.82:61619  ::ffff:192.168.24.66:33021  CLOSE_WAIT  6530/java           off (0.00/0/0)
tcp        0      0 ::ffff:192.168.24.82:61619  ::ffff:192.168.24.67:56879  CLOSE_WAIT  6530/java           off (0.00/0/0)
tcp        0      0 ::ffff:192.168.24.82:61619  ::ffff:192.168.24.67:51487  CLOSE_WAIT  6530/java           off (0.00/0/0)
tcp        0      0 ::ffff:192.168.24.82:61619  ::ffff:192.168.24.66:35295  CLOSE_WAIT  6530/java           off (0.00/0/0)
tcp        0      0 ::ffff:192.168.24.82:61619  ::ffff:192.168.24.67:49529  CLOSE_WAIT  6530/java           off (0.00/0/0)
tcp        0      0 ::ffff:192.168.24.82:61619  ::ffff:192.168.24.67:51309  CLOSE_WAIT  6530/java           off (0.00/0/0)
... many other CLOSE_WAIT
{noformat}
We applied the attached patches and everything run better: the lsof stopped reporting the _can't identify protocol_ records and the number of connections in CLOSE_WAIT dropped to zero.

So what? Does it make sense to you?, Still an issue in long-term memory consumption due to another bug in ProxyConnector: missing equals and hashCode methods in ProxyConnections induced a memory leakeage in connections collection inside ProxyConnector.

I added another patch to solve also this issue., I've reviewed the attached patches, looks pretty good.  I applied the fix to the NIOSSLTransport.  The equals method in the ProxyConnection looks a bit odd, think maybe the equals comparison might be backwards.  I updated the fix a bit with some additional changes.  You should take a look and test in your setup.  Would be great if you can boil down the tests into a JUnit test of sorts so we can see if things are working as expected.  , Proposed patch for this issue that addresses the cleanup code in the Proxy classes., Actually, swapping the start method and the connections.add() in setAcceptListener method in ProxyConnector turned out not to be a good idea. The _connections.remove()_ in TransportFilter.stop may be called before the connections.add() is invoked.
I appreciate this in the form of a tiny yet continous memory leakeage due to objects accumulating in connections collection.

Therefore I modified again the ProxyConnector code to fix also this sort of race condition: now I invoke the connections.add() _before_ invoking the start but I manage the removal inside a try-catch block (see the updated ProxyConnector_patch_AMQ_4889.txt patch)

Besides, I had to modify the equals method in ProxyConnection to avoid NPE in case local or remote transorts are null. I updated the ProxyConnection_patch_AMQ_4889.txt file with this fix.
I'm not completely satisfied with this ProxyConnection.equals() method, since it seems a little bit awkward to me. I don't know, maybe you can suggest a better strategy to purge the connections list.

The patch is running for hours now and the issue seems to be fixed. I'll double check ram consumption tomorrow to have a stronger feedback.
, With the last checks and updates the ProxyConnector has been working great for days now: heap memory consumption is stable. I'll try to improve/simplify the test case in ProxyConnIssue.rar in the next days.

It would be great if I could have some feedbacks on the last patches I created., Fixed with checkin 257710ba1a40e0ac78f5f8035d9663775e122d41.  Thanks for the patches.]