[Versions for the broker:

ActiveMQ 5.2 release

java version "1.5.0_14"
Java(TM) 2 Runtime Environment, Standard Edition (build 1.5.0_14-b03)
Java HotSpot(TM) 64-Bit Server VM (build 1.5.0_14-b03, mixed mode)

The Java client is using the jar out of the broker package.

The broker and Java client are running on some RedHat Linux 64 bit.

The NMS client is version 1.2 I believe, and runs on Windows XP., I believe that the most likely cause was a non-optimal SSL implementation we tried to write for the NMS C# client; we have since stopped using the SSL implementation and now use IKVM to run the Java client on .NET and the deadlocks have stopped.

I have not seen the SSL implementation we did myself, but looking at the stack trace it looks like it might be possible to recreate it by not reading the complete SSL response. I don't know enough about how Java and C# does network communication to say why the socket never timed out, even after the C# client was killed., Socket timeouts are OS specific  - but you can set the property on the transport used by the broker - see http://activemq.apache.org/tcp-transport-reference.html, This has been resolved as Fixed, was it really? Because the last comment on the ticket reads to me like it was just closed saying I should adjust my socket timeout.

I also don't think this has anything to do with socket timeouts - as long as the client stays connected the deadlock will persist (and it may even persist after the client has disconnected...)

Anyway, just wondering if it was "Fixed" or if it should be marked "Wont do"...]