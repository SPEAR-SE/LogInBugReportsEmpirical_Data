[Issue with other spins of ActiveMQ not released by the AcitveMQ community require that you seek support from the entity that released them, in this case you should contact Red Hat and log an issue using your support contract if you have one.  , I've been able to easily reproduce this error on 5.15.3. Use a packet loss strategy between amq and db and the problem will appear instantly.
{code:java}
 tc qdisc add dev enp0s9 root netem loss 100%
{code}
 

1) You need to configure the mysql jdbc connection string to timeout before the lease check interval does. The default jdbc mysql connection doesn't timeout, which equivalent timeout settings will be required for any alternative database connection string.
{code:java}
jdbc:mysql://dbhost/activemq?relaxAutoCommit=true&amp;useSSL=false&amp;useJDBCCompliantTimezoneShift=true&amp;connectTimeout=3000&amp;socketTimeout=3000"{code}
 

2) The use of the LeaseLockerIOExceptionHandler is not enabled by default when you use a lease-database-locker, major documentation gap. You need to declare the bean and inject it. Additionally, you need to set back StopStartConnectors to false, so a full restart of the broker occurs (which if it can't reconnect will actually shut down the process). I wasn't convinced that keeping it as "true" property shuts down the broker and/or cleans up it's internal state to be a slave mode trying to reconnect, which only occurs in the logs when you restore the packet loss after the original salve has become master.

 
{code:java}
<bean id="ioExceptionHandler" class="org.apache.activemq.util.LeaseLockerIOExceptionHandler">
     <property name="stopStartConnectors"><value>false</value></property>
</bean>

...

<broker xmlns="http://activemq.apache.org/schema/core" brokerName="amq1" dataDirectory="${activemq.data}" ioExceptionHandler="#ioExceptionHandler">

....
{code}
Ideally, ActiveMQ would support starting up in a "retrying warm mode" when the persistence adapter is using JDBC by going in a loop trying to startup, i.e. connecting to the database. Shutting down the whole process requires some additional operational overhead. But it appears that would not be a straight forward change based on the current code. 

 , The exception handler approach is additionally documented using the inbuilt syntax in the Fuse AMQ docs:

[https://access.redhat.com/documentation/en-us/red_hat_jboss_a-mq/6.2/html/configuring_broker_persistence/mqpersiststorelock#MQLeaseDatabaseLocker]

 ]