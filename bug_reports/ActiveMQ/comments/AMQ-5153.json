[Do you have a test case or some additional information that would help in investigating this issue?, Here is how to reproduce the issue:

create a topic testing.durable.>
create a topic testing.durable.test
create a durable on testing.durable.>
create a different durable on testing.durable.test
send message to testing.durable.>

restart broker

when you look at the subscribers all durables are tied to testing.durable.test

this happens because the consumers get added to all matching subscribers creating them in the LevelDB store, but because the store does not store the subscribedDestination on a restart levelDB loses the durable's real topic.

, Recommend you create a unit test and try it against the latest release. , [~badavis] can you try on a more recent version?
I've committed a unit test here: https://github.com/apache/activemq/commit/01f56d0ca255852bf9c12b889abd8d1297a2b5a9

that shows this works correctly. If you can alter that unit test to show failure, then we can take a closer look.

let us know!, I did not get enough time to go through your test and change it to show the issue.  I did go through what I did before and reproduced the bug.   I also think I know what is wrong with your test.

If you do the steps I stated on a broker that you can restart (kill the process and bring back a new process) it will show the bug.  I did my test through the web console and the bug is still there on 5.11.1.  The key is restarting the broker.  I believe that is also the issue with your test.  You never get a new broker you reuse a broker, stopping  and starting it.  My guess is the LevelDBPersistentAdapter probably does not get rid of state on the stop of a broker and reuses that state on a start.

Hope this helps.

, Hi guys,

We are having an issue related (the same?) to the one [~badavis] is describing on both ActiveMQ 5.11.1 and 5.12.2.

From our loggings it seems that the Level DB adapter somehow replaces the *subscribedDestination* field of SubscriptionInfo with the *desitnation* field.
Before restart (what is being sent to LevelDB):
2016-04-14 15:23:21,601 | DEBUG | alphabet.a store adding subscription: SubscriptionInfo {*subscribedDestination = topic://alphabet.>, destination = topic://alphabet.a*, clientId = CFH.BO.TCS, subscriptionName = alphabet.>, selector = null} | org.apache.activemq.store.LoggingTopicMessageStore | ActiveMQ Transport: tcp:///10.0.6.1:55924@61616

After restart (what broker is reading back from LevelDB):
2016-04-14 15:24:15,774 | DEBUG | Restoring durable subscription: SubscriptionInfo {*subscribedDestination = topic://alphabet.a, destination = null*, clientId = CFH.BO.TCS, subscriptionName = alphabet.>, selector = null} | org.apache.activemq.broker.region.TopicRegion

I have attached an updated version of the previously mentioned unit test to  verify the issue hopefully.

Note that the bug alone is not that severe as the TopicRegion correctly replaces the restored faulty subscription when reconnecting the durable subscriber. 

However, if the broker is being used with broker plugins (especially the authorization/authentication plugins) then the TopicRegion is not able to replace the faulty subscription and you end up having a ghost subscriber., Commit b027e655538226b56f1fe277a426e0df41501fc6 in activemq's branch refs/heads/master from [~tabish121]
[ https://git-wip-us.apache.org/repos/asf?p=activemq.git;h=b027e65 ]

https://issues.apache.org/jira/browse/AMQ-5153
https://issues.apache.org/jira/browse/AMQ-6254

Store the original subscribed destination along with the target
destination in the subscription info object to ensure that wildcard
subscriptions remain linked.  , Commit ad07ee4612bd537ad4a441464ded701d98b0fcc1 in activemq's branch refs/heads/activemq-5.13.x from [~tabish121]
[ https://git-wip-us.apache.org/repos/asf?p=activemq.git;h=ad07ee4 ]

https://issues.apache.org/jira/browse/AMQ-5153
https://issues.apache.org/jira/browse/AMQ-6254

Store the original subscribed destination along with the target
destination in the subscription info object to ensure that wildcard
subscriptions remain linked.
(cherry picked from commit b027e655538226b56f1fe277a426e0df41501fc6)
, New subscriptions will now properly store the subscribed destination]