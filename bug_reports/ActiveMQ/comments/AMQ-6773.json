[Hi  [~tbain98]. 
This deadlock was reproduced with ActiveMQ 5.13.0 version, but probably It happens in last version yet. 
I am attaching stacktraces for that you can analyze them, here: https://drive.google.com/open?id=0B86KUpMySyxRRFNzVTAtSHFva0U.
According to the stacktrace, ActiveMQ locks that take place in the issue are in the following lines:

https://github.com/apache/activemq/blob/master/activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java#L1404

(This code line calls calls our code without releasing the acquired lock for dispatching the JMSMessage)

and 

https://github.com/apache/activemq/blob/master/activemq-client/src/main/java/org/apache/activemq/FifoMessageDispatchChannel.java#L133

(This code line is called by Mule to close the connection in a Reconnection Strategy case).

In the Spring side, Lock that takes place in the issue is in the following line:

https://github.com/spring-projects/spring-framework/blob/master/spring-jms/src/main/java/org/springframework/jms/connection/SingleConnectionFactory.java#L318

If you need more information, please let me know.
, This is unlikely to change as there are several restrictions on the behavior of a MessageConsumer and it's parent session in regards to how they should behave when a MessageConsumer is doing asynchronous delivery.  It's likely the offending code is misusing the client code in a non-JMS compliant manner.  

I'd recommend you attach information on the deadlock to this issue for analysis, but I am quite doubtful that we'd ever remove that locking, it's quite a common pattern for JMS clients to use.  ]