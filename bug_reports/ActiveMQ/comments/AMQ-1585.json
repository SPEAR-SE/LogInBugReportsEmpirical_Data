[I'm seeing the same thing -- running 5.0.0 -- using the example consumer/producer ant tasks and configuration described above. This would be a blocker if we were in production., Also seeing same issue running 5.0.0 pure master/slave config:

javax.jms.JMSException: Slave broker out of sync with master: Acknowledgment (MessageAck {commandId = 198, responseRequired = true, ackType = 2, consumerId = ID:BorisJr-1198-1207765232687-0:0:1:1, firstMessageId = null, lastMessageId = ID:Boris-3004-1207702245296-0:0:20:1:1, destination = queue://queue, transactionId = null, messageCount = 1}) was not in the dispatch list: []
        at org.apache.activemq.broker.region.PrefetchSubscription.acknowledge(PrefetchSubscription.java:332)
        at org.apache.activemq.broker.region.AbstractRegion.acknowledge(AbstractRegion.java:340)
        at org.apache.activemq.broker.region.RegionBroker.acknowledge(RegionBroker.java:427)
        at org.apache.activemq.broker.TransactionBroker.acknowledge(TransactionBroker.java:194)
        at org.apache.activemq.broker.BrokerFilter.acknowledge(BrokerFilter.java:73)
        at org.apache.activemq.broker.BrokerFilter.acknowledge(BrokerFilter.java:73)
        at org.apache.activemq.broker.MutableBrokerFilter.acknowledge(MutableBrokerFilter.java:87)
        at org.apache.activemq.broker.TransportConnection.processMessageAck(TransportConnection.java:440)
        at org.apache.activemq.command.MessageAck.visit(MessageAck.java:196)
        at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:281)
        at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:178)
        at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:100)
        at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:67)
        at org.apache.activemq.transport.vm.VMTransport.iterate(VMTransport.java:202)
        at org.apache.activemq.thread.DedicatedTaskRunner.runTask(DedicatedTaskRunner.java:98)
        at org.apache.activemq.thread.DedicatedTaskRunner$1.run(DedicatedTaskRunner.java:36)
, Still a problem in 5.1.0 RC3., Still seeing this in 5.1.0 final.

I hear that "pure" master/slave is not the way to go and SAN-based master/slave would be better.  :), I find that the org.apache.activemq.broker.ft.QueueMasterSlaveTest can reproduce this problem if the number of messages produced in increased to 200, greater than the default maxPageSize, 100, for a destination.

It appears that there are a few problems.
1) the decrementing inflight statistics cause messages in the slave to be lost once the maxpageSize for a destination is reached. This is fixed by not decrementing in error when queue is on the slave.
2) the dispatch notification can be late getting to the slave, so similar to send processing, the notification is sent in advance.
3) even with early sending, a send can be later than a dispatchNotification so sending sync fixes that.

, it may be worth giving the attached patch a whirl if the issue is still pressing., still seeing the issue using latest trunk with the patch attached. , ying, thanks for trying this out. Do you think it would be possible to reproduce your scenarion with a variation of org.apache.activemq.broker.ft.QueueMasterSlaveTest ?
If not, what is the simplest formula for reproducing your behaviour, is it the code included with the original jira?, I have been able to reproduce again by pushing more messages through org.apache.activemq.broker.ft.QueueMasterSlaveTest, have some more work to do!, hi, Gary, I test on both win xp and solaris 9 jdk 1.5

To reproduce this issue, i have 1 client producer, I have 3 clients each with its own connection as a consumer
1. use original activemq.xml for master
2. add masterConnectorURI="tcp://localhost:61616" shutdownOnMasterFailure="false" in activemq.xml for slave
3. start master, start slave, start 3 consumers
4. start the producer to send one message, stop the producer ( the delivery is good)
5. start the producer again to send a second message, i will get the exception ( because of this exception, message will get redelivered according to the delivery policy)

the jndi.properties of the client looks like the following:
java.naming.factory.initial=org.apache.activemq.jndi.ActiveMQInitialContextFactory
java.naming.provider.url=failover://(tcp://localhost:61616,tcp://localhost:62616)?randomize=false
connection.ConnectionFactory.redeliveryPolicy.initialRedeliveryDelay=300000
connection.ConnectionFactory.redeliveryPolicy.maximumRedeliveries=3

I have another issue for the pure master/slave, not sure whether it is related to this. It has the same setup as the above tests. the formula is:
1. use original activemq.xml for master
2. add masterConnectorURI="tcp://localhost:61616" shutdownOnMasterFailure="false" in activemq.xml for slave
3. start master, start slave, start 3 consumers
4. start the producer to send one message, stop the producer ( the delivery is good)
5. stop the master, stop the slave, do NOT stop 3 consumers,  restart the master, restart the slave
6. start the producer to send one message, i will get the following exception:
ERROR Service                        - Async error occurred: java.lang.IllegalStateException: Cannot lookup a connection that had not been registered: ID:yhe-1633-1214919996630-0:0
java.lang.IllegalStateException: Cannot lookup a connection that had not been registered: ID:yhe-1633-1214919996630-0:0
	at org.apache.activemq.broker.MapTransportConnectionStateRegister.lookupConnectionState(MapTransportConnectionStateRegister.java:93)
	at org.apache.activemq.broker.TransportConnection.lookupConnectionState(TransportConnection.java:1356)
	at org.apache.activemq.broker.TransportConnection.processBeginTransaction(TransportConnection.java:362)
	at org.apache.activemq.command.TransactionInfo.visit(TransactionInfo.java:94)
	at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:308)
	at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:180)
	at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:104)
	at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:68)
	at org.apache.activemq.transport.vm.VMTransport.iterate(VMTransport.java:205)
	at org.apache.activemq.thread.DedicatedTaskRunner.runTask(DedicatedTaskRunner.java:98)
	at org.apache.activemq.thread.DedicatedTaskRunner$1.run(DedicatedTaskRunner.java:36)
DEBUG Service                        - Error occured while processing sync command: java.lang.IllegalStateException: Cannot lookup a consumer from a connection that had not been registered: ID:yhe-1633-1214919996630-0:0
java.lang.IllegalStateException: Cannot lookup a consumer from a connection that had not been registered: ID:yhe-1633-1214919996630-0:0
	at org.apache.activemq.broker.MapTransportConnectionStateRegister.lookupConnectionState(MapTransportConnectionStateRegister.java:63)
	at org.apache.activemq.broker.TransportConnection.lookupConnectionState(TransportConnection.java:1344)
	at org.apache.activemq.broker.TransportConnection.getConsumerBrokerExchange(TransportConnection.java:1261)
	at org.apache.activemq.broker.TransportConnection.processMessageAck(TransportConnection.java:458)
	at org.apache.activemq.command.MessageAck.visit(MessageAck.java:205)
	at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:308)
	at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:180)
	at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:104)
	at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:68)
	at org.apache.activemq.transport.vm.VMTransport.iterate(VMTransport.java:205)
	at org.apache.activemq.thread.DedicatedTaskRunner.runTask(DedicatedTaskRunner.java:98)
	at org.apache.activemq.thread.DedicatedTaskRunner$1.run(DedicatedTaskRunner.java:36)
DEBUG Service                        - Error occured while processing sync command: java.lang.IllegalStateException: Cannot lookup a connection that had not been registered: ID:yhe-1633-1214919996630-0:0
java.lang.IllegalStateException: Cannot lookup a connection that had not been registered: ID:yhe-1633-1214919996630-0:0
	at org.apache.activemq.broker.MapTransportConnectionStateRegister.lookupConnectionState(MapTransportConnectionStateRegister.java:93)
	at org.apache.activemq.broker.TransportConnection.lookupConnectionState(TransportConnection.java:1356)
	at org.apache.activemq.broker.TransportConnection.processCommitTransactionOnePhase(TransportConnection.java:413)
	at org.apache.activemq.command.TransactionInfo.visit(TransactionInfo.java:100)
	at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:308)
	at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:180)
	at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:104)
	at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:68)
	at org.apache.activemq.transport.vm.VMTransport.iterate(VMTransport.java:205)
	at org.apache.activemq.thread.DedicatedTaskRunner.runTask(DedicatedTaskRunner.java:98)
	at org.apache.activemq.thread.DedicatedTaskRunner$1.run(DedicatedTaskRunner.java:36)

I think the issue might be when the master is restarted and the consumer establish connections with it before the slave is started so the slave is not aware of those consumers/sessions/connection

Please let me know whether i shall create another jira for the this IllegalStateException for pure master/slave

BTW, is there any documentation of the component relationship for the activemq core, such as what the responsibility of BrokerService, Region, Broker, TransportConnection etc. I am looking into the source now to see what I can find.

Thank you for your quick response.

, update to fix additional issue.
make slave use optimizedDispatch so that a send operation completes sync, since there is no real dispatch the call will return quickly.
This ensures that sends are complete before the dispatch notification is received., ying,
Is your producer using a transacted session? If so, I think we need to build a specific test case around QueueMasterSlaveTest to reproduce.

I have modified the patch to address another synchronisation issue with slave mode, hopefully this will help.

I think you should raise another jira for the IllegalStateException.
Re documentation, the code is your best and only reference I think., patch applied in SVN revision 673157, with a transacted producer there is a failure, txid does not exist.
modifying the TransactedTopicMasterSlaveTest to stop the master reproduces the problem. The fix is to have the failover transport state tracker rember the transaction begin command so that the begin can be correctly replayed., Applied patch for txn part in SVN revision 673433, AMQ-1585.patch is not completely merged into the trunk. It is missing the following:
for MasterBroker.java
-        sendToSlave(message);
+        sendSyncToSlave(message);

Without this change, I am still getting the exception in the latest trunk activemq-core 675484., patch is not completely merged into trunk. it is missing a change without which the exception still happens., ying, good catch!. yea, I think that sendSync is necessary. thanks., completed patch in SVN revision 675990, I just checked out version 690257 and it happens again:

==== the master ====

INFO  TransportConnection            - Slave Broker solowslave is attached
WARN  BrokerRegistry                 - Broker localhost not started so using seltenmaster instead
INFO  TransportConnector             - Connector vm://localhost Started
ERROR MasterBroker                   - Slave Failed
javax.jms.JMSException: Slave broker out of sync with master: Acknowledgment (MessageAck {commandId = 33, responseRequired = true, ackType = 2, consumerId = ID:hans-34771-1220018526479-0:1:1:1, firstMessageId = null, lastMessageId = ID:hans-34771-1220018526479-0:0:1:1:1, destination = queue://queue.B, transactionId = null, messageCount = 1}) was not in the dispatch list: []
        at org.apache.activemq.broker.region.PrefetchSubscription.acknowledge(PrefetchSubscription.java:387)
        at org.apache.activemq.broker.region.AbstractRegion.acknowledge(AbstractRegion.java:373)
        at org.apache.activemq.broker.region.RegionBroker.acknowledge(RegionBroker.java:462)
        at org.apache.activemq.broker.TransactionBroker.acknowledge(TransactionBroker.java:194)


====== the slave ===
ERROR Service                        - Async error occurred: javax.jms.JMSException: Slave broker out of sync with master: Dispatched message (ID:selten.marketxs.com-55318-1220018484119-2:1:1:1:1) was not in the pending list
javax.jms.JMSException: Slave broker out of sync with master: Dispatched message (ID:selten.marketxs.com-55318-1220018484119-2:1:1:1:1) was not in the pending list
        at org.apache.activemq.broker.region.PrefetchSubscription.processMessageDispatchNotification(PrefetchSubscription.java:172)
        at org.apache.activemq.broker.region.AbstractRegion.processDispatchNotification(AbstractRegion.java:414)
        at org.apache.activemq.broker.region.RegionBroker.processDispatchNotification(RegionBroker.java:585)


A previous 5.2.0-SNAPSHOT worked fine.
, "worked fine" except for https://issues.apache.org/activemq/browse/AMQ-1849


I've used the same JMS test client (stand-alone), Checked out and compiled revision 675990 again.

Still worked fine (as far as this issue is concerned) with the same configuration files as the failing 690257.
, fix related to resolution of https://issues.apache.org/activemq/browse/AMQ-1849]