[Have you tested against the latest release, 5.10 is relatively old at this point.  , Not yet - we have an AMQ 5.12 upgrade in the pipeline, but not in production use yet, and this problem is only reproduced in production use, since you need to create quite a few asynchronous topic messages to even get to use tmp_storage - while there's few messages they all stay in memory and this issue doesn't arise. Plus you need a multi-server environment. So this isn't easily reproduced in the lab.

However the relevant code has not changed in 5.12, I've verified that. It's all in one class and should be easy enough to follow the outline in the ticket description. I've added some additional detail to make it easier to follow., Also, to replicate the source of the problem, you can simply hand-create empty tmpDB.data, tmpDB.redo, and db-1.log files in the shared tmp_storage folder, then restart one of the slave nodes while the master broker is still running - you will see that those files get deleted by the slave startup, which would corrupt the master broker's tmpDB if it were currently using it. So for issue replication it's not necessary to actually create enough asynchronous message load to be using tmp_storage - it's the tmpDB deletion by a *slave* that is the problem.

I should also note that we'd originally been seeing this in action only when using JDBC persistence (where there's technically no need for a shared dataDirectory at all anymore). With kahaPersistence things used to go south before ever reaching this point, due to unreliable file locking over NFS, so we've moved away from that.
(Update: it does happen with kahaPersistence too, seen it just recently, with 160 GB of error logging as a result), Commit 768fa17085ac938441915a82987c99b37ac52515 in activemq's branch refs/heads/master from [~gtully]
[ https://git-wip-us.apache.org/repos/asf?p=activemq.git;h=768fa17 ]

https://issues.apache.org/jira/browse/AMQ-6005 - have plist whack it existing state on start. Start the temp store after the primary persistence adapter which does the locking
, clearing out temp store is deferred till temp store start which is now done after locking by primary store, Commit 9e8f0203015dd842ecc0804231da9a62ed3b02ec in activemq's branch refs/heads/activemq-5.13.x from [~gtully]
[ https://git-wip-us.apache.org/repos/asf?p=activemq.git;h=9e8f020 ]

https://issues.apache.org/jira/browse/AMQ-6005 - have plist whack it existing state on start. Start the temp store after the primary persistence adapter which does the locking

(cherry picked from commit 768fa17085ac938441915a82987c99b37ac52515)
, Thanks for the fix, much appreciated!]