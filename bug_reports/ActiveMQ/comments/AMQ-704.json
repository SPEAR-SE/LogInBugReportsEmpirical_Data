[The reason the singleton map was put in the  System properties were chosen in the first place is because it's guaranteed to be in the primordial classloader and can be acessed by all classloaders.  Putting a singleton in a static class field would now produce a system wide singleton if multiple classloaders are in use for the class that is holding the static hashmap.

Do we know of any other locations that we can register a JVM wide object that is accessible by all classloaders?

Stringifing the map sounds promising if a bit in-efficient.  But then again locking is not a fast thing right?

For now, activeio has implemented a workaround.  Add a -Dorg.apache.activeio.journal.active.DisableLocking=true to JVM startup options and activeio will avoid using the System properties this way., You can now use the -Dorg.apache.activeio.journal.active.DisableLocking=true option to disable the activeio locking trick.
, hi, is this really fixed or is the workaround considered the fix? if it's just the workaround, it's not great, since it fries hibernate 3.1 without the workaround. the workaround is pretty difficult to find and the setting of the DisableLocking system property is not a particularly friendly solution (especially if you don't want locking disabled)., The same problem  occur in ActiveMQ 4.1.( SUSE Linux 9.2 + Jboss 4.0.3SP1).  I add the option "JAVA_OPTS="-Dorg.apache.activeio.journal.active.DisableLocking=true"  in Jboss's run.sh, and it work. 

I deploy two application on jboss:  daemon.war  & activemq-server.war,  the daemon.war  deploy fail.  When I remove the activemq-server.war, the daemon.war  deploy ok. 

The failure message is :

21:25:25,604 ERROR [ContextLoader] Context initialization failed
org.springframework.beans.factory.access.BootstrapException: Unable to return specified BeanFactory instance: factory key [beanRefFactory], from group with resource name [classpath*:springContext/beanRefFactory.xml]; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'beanRefFactory' defined in URL [jar:file:/export/home/jboss-4.0.3SP1/server/default/deploy/daemon.war/WEB-INF/lib/biz-v2.0-lib.jar!/springContext/beanRefFactory.xml]: Instantiation of bean failed; nested exception is org.springframework.beans.BeanInstantiationException: Could not instantiate bean class [org.springframework.context.support.ClassPathXmlApplicationContext]: Constructor threw exception; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sessionFactory' defined in class path resource [springContext/daoServiceContext.xml]: Initialization of bean failed; nested exception is java.lang.ClassCastException: java.util.HashSet
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'beanRefFactory' defined in URL [jar:file:/export/home/jboss-4.0.3SP1/server/default/deploy/daemon.war/WEB-INF/lib/biz-v2.0-lib.jar!/springContext/beanRefFactory.xml]: Instantiation of bean failed; nested exception is org.springframework.beans.BeanInstantiationException: Could not instantiate bean class [org.springframework.context.support.ClassPathXmlApplicationContext]: Constructor threw exception; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sessionFactory' defined in class path resource [springContext/daoServiceContext.xml]: Initialization of bean failed; nested exception is java.lang.ClassCastException: java.util.HashSet
org.springframework.beans.BeanInstantiationException: Could not instantiate bean class [org.springframework.context.support.ClassPathXmlApplicationContext]: Constructor threw exception; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sessionFactory' defined in class path resource [springContext/daoServiceContext.xml]: Initialization of bean failed; nested exception is java.lang.ClassCastException: java.util.HashSet
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sessionFactory' defined in class path resource [springContext/daoServiceContext.xml]: Initialization of bean failed; nested exception is java.lang.ClassCastException: java.util.HashSet
java.lang.ClassCastException: java.util.HashSet
        at org.hibernate.util.PropertiesHelper.resolvePlaceHolders(PropertiesHelper.java:88)
        at org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:1173)
        at org.springframework.orm.hibernate3.LocalSessionFactoryBean.newSessionFactory(LocalSessionFactoryBean.java:825)
        at org.springframework.orm.hibernate3.LocalSessionFactoryBean.afterPropertiesSet(LocalSessionFactoryBean.java:751)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1091)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:396)
        at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:233)
        at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:145)
        at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:537)
        at com.yeepay.common.entity.Incrementer.afterPropertiesSet(Incrementer.java:25)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1091)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:396)
        at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:233)
        at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:145)
        at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:283)
        at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:313)
        at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:87)
        at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:72)
        at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
        at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:39)
        at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:27)
.....


, I just encountered the same problem with ActiveMQ 4.1.1. It broke my Grails installation and it took me more than 2 hours to find out what's wrong.

This is clearly a bug, as setting other values than strings is forbidden. 

Just try to do a System.getProperties().list(System.out) and you'll get an exception.

This workaround is not a fix and the problems that arise from this issue are extremely difficult to track down as it will most likely break application server startup., Just a "me too."  

Geronimo 1.2 uses this code.
I deployed a Cocoon WAR onto Geronimo. 
Using "global variables" in Cocoon XMAPs fails because getProperty("org.apache.activeio.journal.active.lockMap") does not return a String., This is fixed in 5.0.0 (as we no longer use ActiveIO by default).

For folks on earlier versions, the work around is -Dorg.apache.activeio.journal.active.DisableLocking=true until things are migrated to 5.0. 

If someone fancied submitting a patch we could make it easier to disable this option via the activemq.xml or something.]