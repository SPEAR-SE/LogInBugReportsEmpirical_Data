[Seems like there might be more to fix here.  Checking for 0 is a good idea however it doesn't make sense that you would run into this condition in the first place...It seems odd you would have a positive number for sends blocked but have 0 for total sends, Perhaps, but I think it may just be an extreme edge case.

The plugin I wrote[1] logs message information for audit purposes and happens before authentication even happens to ensure we get information regardless of the outcome of the operation. It is including percentage blocked regardless of send count or block count. The unit test for the plugin instantiates a new broker and a new connection to that broker, so the first time this plugin fires on the connection, the send count is zero. If I move the log statement to after calling `super.send(producerExchange, messageSend);` the test does not throw the ArithmeticException. There are plenty of ways to work around it in the plugin.

[1]- [https://gist.github.com/macgregor/c108f1ca5051e6d9b08ab388d17d0126], Commit b79fcd0a768e5c7d45a7f68febf447d8379cbaf4 in activemq's branch refs/heads/master from Christopher L. Shannon (cshannon)
[ https://git-wip-us.apache.org/repos/asf?p=activemq.git;h=b79fcd0 ]

AMQ-7017 - Prevent ArithmeticException in ProducerBrokerExchange

Check for zero to prevent divide by zero error inside
getPercentageBlocked() method

Thank you to Matthew Stratton for the patch
, Commit e3f76e169325f4741c4ddf0c38c10ca65fa1c385 in activemq's branch refs/heads/activemq-5.15.x from Christopher L. Shannon (cshannon)
[ https://git-wip-us.apache.org/repos/asf?p=activemq.git;h=e3f76e1 ]

AMQ-7017 - Prevent ArithmeticException in ProducerBrokerExchange

Check for zero to prevent divide by zero error inside
getPercentageBlocked() method

Thank you to Matthew Stratton for the patch

(cherry picked from commit b79fcd0a768e5c7d45a7f68febf447d8379cbaf4)
]