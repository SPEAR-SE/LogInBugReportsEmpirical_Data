[Dennis Cook Posted:

I have a question on connection compatibility.  Having read some older post about compatibility between versions, that led me to believe that older clients could connect to a newer broker if the major version was the same.  Where version 2 to version 3 was not possible because wire protocol changed, I thought 3.0 to 3.1 should be possible.  However my recent testing has shown several failures.  Since the bug reporting system is still out of commission, I have been sending these on to Hiram as I find them.  But I would like to get a consensus viewpoint.  Should 3.0 connection clients be connection compatible with the soon to be release version 3.1, or am I just chasing after a lost cause here?
, I fixed one problem with ActiveMQDestination by setting it's serialVersionUID to:
static final long serialVersionUID = -3300456112096957638L;

Other preoblems may be left.  Still need to check., Second problem found:

In the class org.activemq.broker.impl.AdvisorySupport there are many references to the method

ActiveMQDestination.getDestinationBeingAdvised()

such as the following example:

ActiveMQDestination match = advisory.getDestination().getDestinationBeingAdvised();

This usually followed by an unconditional use of the "match" member which was supposibly populated with the return value.  However this method can return a null value.  When the value is null, a NullPointerException is generated and the operation is never completed., The next problem I run into is now showing up on the 3.0 client side.  The exception conditions is as show below:

17:31:56,629 WARN  ActiveMQMessageConsumer  : could not process message: ACTIVEMQ_OBJECT_MESSAGE: id = 0 ActiveMQMessage{ , jmsMessageID = ID:ctl001-36683-1117844639697-1:360685, bodyAsBytes = org.activemq.io.util.ByteArray@14df53, readOnlyMessage = true, jmsClientID = 'null' , jmsCorrelationID = 'null' , jmsDestination = ActiveMQ.Advisory.TempDestinations.TemporaryTopic-{TD{wingnut.FPM.18}TD}ID:WINGNUT-3646-1117845035072-29:0, jmsReplyTo = null, jmsDeliveryMode = 2, jmsRedelivered = false, jmsType = 'null' , jmsExpiration = 0, jmsPriority = 4, jmsTimestamp = 0, properties = null, readOnlyProperties = true, entryBrokerName = 'null' , entryClusterName = 'null' , consumerNos = [I@51f266, transactionId = 'null' , xaTransacted = false, consumerIdentifer = 'encamed002.Monitor.25.63.51' , messageConsumed = false, transientConsumed = true, sequenceNumber = 0, deliveryCount = 1, dispatchedFromDLQ = false, messageAcknowledge = org.activemq.ActiveMQSession@6cd0f9, jmsMessageIdentity = null, producerKey = null } ActiveMQObjectMessage{ object = ACTIVEMQ_CONNECTION_INFO: id = 0 ConnectionInfo{ clientId = 'log001.ResourceManager.1' , userName = 'defaultUser' , hostName = 'LOG001' , clientVersion = '3.1-SNAPSHOT' , wireFormatVersion = 3, startTime = 1117050559118, started = true, closed = false, properties = {noDelay=true} } } 
java.lang.ClassCastException: org.activemq.message.ConnectionInfo
 	at org.activemq.advisories.TempDestinationAdvisor.onMessage(TempDestinationAdvisor.java:137)
 	at org.activemq.ActiveMQMessageConsumer.processMessage(ActiveMQMessageConsumer.java:443)
 	at org.activemq.ActiveMQMessageConsumer.setMessageListener(ActiveMQMessageConsumer.java:243)
 	at org.activemq.advisories.TempDestinationAdvisor.start(TempDestinationAdvisor.java:84)
 	at org.activemq.ActiveMQConnection.startAdvisoryForTempDestination(ActiveMQConnection.java:1973)
 	at org.activemq.ActiveMQMessageProducer.send(ActiveMQMessageProducer.java:424)
 	at org.activemq.ActiveMQMessageProducer.send(ActiveMQMessageProducer.java:390)
 	at org.activemq.ActiveMQTopicPublisher.publish(ActiveMQTopicPublisher.java:177)
 	at bevocal.platform.util.MsgOutbox.run(MsgOutbox.java:432) 

I am really at a loss on how to explain the existance of the ConnectionInfo message in the client queue when the advisory consumer is created.  If you have any idea on how to get around this one I would love the input.  Otherwise I am not going to be able to stage my deployment and have to change all clients and the server at the same time.  That would not be fun.
, Hi Dennis,

I just tried the producer consumer examples shipped with 3.0 against a 3.1-SNAPSHOT server and they worked correctly.  What is your test case doing that's causing this error to show up?

Regards,
Hiram, Hey Hiram,

The test case that showed the problem used networked brokers. It was a request/reply (non-durable topic) where the replier was connected to one broker and the requestor connected to the other broker.  I think that both the requestor and replier were version 3.0 and both brokers version 3.1.  I created separate classes for the requetor and replier.  I will attach them tomorrow when I get to work.

Dennis

, Dennis, is this still an issue - or can we mark it as fixed?, I am not sure if still incompatible of not.  I have moved everything onto the 3.1 snapshots so it is no longer a problem for me.
]