[Let me take a look on that., Here's the test that I implemented:

{code}
/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.activemq.store.jdbc;

import junit.framework.TestCase;
import org.apache.activemq.ActiveMQConnectionFactory;
import org.apache.activemq.broker.BrokerService;
import org.apache.activemq.broker.region.policy.PolicyEntry;
import org.apache.activemq.broker.region.policy.PolicyMap;
import org.apache.activemq.command.ActiveMQDestination;
import org.apache.activemq.command.ActiveMQTopic;
import org.apache.derby.jdbc.EmbeddedDataSource;
import org.junit.Test;

import javax.jms.*;
import java.sql.PreparedStatement;
import java.sql.ResultSet;

public class JDBCSubAckTest extends TestCase {

    private EmbeddedDataSource dataSource;
    private BrokerService broker;
    private Connection connection;
    private Session session;
    private ActiveMQTopic topic;

    protected void setUp() throws Exception {
        broker = new BrokerService();
        broker.setBrokerName("subAckTest");
        JDBCPersistenceAdapter jdbc = new JDBCPersistenceAdapter();
        dataSource = new EmbeddedDataSource();
        dataSource.setDatabaseName("derbyDb");
        dataSource.setCreateDatabase("create");
        jdbc.setDataSource(dataSource);
        jdbc.setCleanupPeriod(300000);

        jdbc.deleteAllMessages();
        broker.setPersistenceAdapter(jdbc);

        PolicyEntry policy = new PolicyEntry();
        policy.setExpireMessagesPeriod(86400000);
        // policy.setPrioritizedMessages(true);
        PolicyMap policyMap = new PolicyMap();
        policyMap.put(new ActiveMQTopic("SUB_ACK_TEST_TOPIC"), policy);

        broker.setDestinationPolicy(policyMap);
        broker.start();
        broker.waitUntilStarted();

        ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://subAckTest");
        connection = factory.createConnection();
        connection.setClientID("SUB_ACK_TEST_ID");
        session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);

        topic = (ActiveMQTopic) session.createTopic("SUB_ACK_TEST_TOPIC");
    }

    protected void tearDown() throws Exception {
        if (session != null) {
            session.close();
        }
        if (connection != null) {
            connection.close();
        }
        if (broker != null) {
            broker.stop();
        }
    }

    @Test
    public void testAckUpdate() throws Exception {

        // start a durable subscriber
        TopicSubscriber subscriber = session.createDurableSubscriber(topic, "ACK_TEST_SUB");
        subscriber.close();

        ProducerThread producerThread = new ProducerThread(topic, 5, 4);
        producerThread.run();
        ProducerThread producerThread2 = new ProducerThread(topic, 5, 8);
        producerThread2.run();

        subscriber = session.createDurableSubscriber(topic, "ACK_TEST_SUB");
        subscriber.setMessageListener(new TestMessageListener());
        TopicSubscriber subscriber2 = session.createDurableSubscriber(topic, "ACK_TEST_SUB2");
        subscriber2.setMessageListener(new TestMessageListener());

        // check ACK count
        System.out.println("ACK count after consume: " + ackCount());

        // close subscriber
        subscriber.close();
        // check ACK count
        System.out.println("ACK count after subscriber: " + ackCount());
    }

    private int ackCount() throws Exception {
        java.sql.Connection connection = dataSource.getConnection();
        try {
            PreparedStatement statement = connection.prepareStatement("SELECT count(*) FROM ACTIVEMQ_ACKS");
            ResultSet resultSet = statement.executeQuery();
            if (resultSet.next()) {
                return resultSet.getInt(1);
            }
        } finally {
            connection.close();
        }
        return 0;
    }

    private class ProducerThread extends Thread {

        private ActiveMQDestination destination;
        private int count;
        private int priority;

        public ProducerThread(ActiveMQDestination destination, int count, int priority) {
            this.destination = destination;
            this.count = count;
            this.priority = priority;
        }

        public void run() {
            try {
                // send two messages in the topic
                MessageProducer producer = session.createProducer(topic);
                Message message = session.createTextMessage();
                producer.setDeliveryMode(DeliveryMode.PERSISTENT);
                producer.setPriority(priority);
                for (int i = 0; i < count; i++) {
                    producer.send(session.createTextMessage("Message " + i));
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

    }

    private class TestMessageListener implements MessageListener {

        public void onMessage(Message message) {
            try {
                System.out.println("Message (" + message.getJMSPriority() + "): " + ((TextMessage) message).getText());
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

    }

}
{code}

Here, we have two records in ACTIVEMQ_ACKS: one per durable subscriber.

Now, if I set:

{code}
policy.setPrioritizedMessages(true);
{code}

we have 20 records in ACTIVEMQ_ACKS: one per durable subscriber + one per message. This behavior is expected as the message has to be ordered depending of the priority.

Can you try to disable the prioritized messages on the policy:

{code}
<policyEntry topic="FOO" expireMessagesPeriod="0" prioritizedMessages="false">
{code}, Customer Feedback: Have added the below configuration to my activemq.xml file and tested. but still could see the Double ACK updates

Configuration:
<policyEntry topic="bmrsTopic" producerFlowControl="false" prioritizedMessages="false" expireMessagesPeriod="300000">

Evidence for the double ACK updates:

Line 4689: "2015-12-15 12:01:48","activemq[activemq] @ [10.213.32.13]",2573690,1,Query,"UPDATE ACTIVEMQ_ACKS SET LAST_ACKED_ID=2832, XID = NULL WHERE CONTAINER='topic://bmrsTopic' AND CLIENT_ID='AP8DA45' AND SUB_NAME='test45'"
Line 43529: "2015-12-15 12:03:59","activemq[activemq] @ [10.213.32.13]",2573690,1,Query,"UPDATE ACTIVEMQ_ACKS SET LAST_ACKED_ID=2832, XID = NULL WHERE CONTAINER='topic://bmrsTopic' AND CLIENT_ID='AP8DA45' AND SUB_NAME='test45'"

Line 4688: "2015-12-15 12:01:48","activemq[activemq] @ [10.213.32.13]",2573690,1,Query,"UPDATE ACTIVEMQ_ACKS SET LAST_ACKED_ID=2832, XID = NULL WHERE CONTAINER='topic://bmrsTopic' AND CLIENT_ID='AP8DA21' AND SUB_NAME='SBItest2'"
Line 43528: "2015-12-15 12:03:59","activemq[activemq] @ [10.213.32.13]",2573690,1,Query,"UPDATE ACTIVEMQ_ACKS SET LAST_ACKED_ID=2832, XID = NULL WHERE CONTAINER='topic://bmrsTopic' AND CLIENT_ID='AP8DA21' AND SUB_NAME='SBItest2'"

Line 979: "2015-12-15 12:01:33","activemq[activemq] @ [10.213.32.13]",2573690,1,Query,"UPDATE ACTIVEMQ_ACKS SET LAST_ACKED_ID=2646, XID = NULL WHERE CONTAINER='topic://bmrsTopic' AND CLIENT_ID='AP8DA32' AND SUB_NAME='SBItest1'"
Line 39819: "2015-12-15 12:03:45","activemq[activemq] @ [10.213.32.13]",2573690,1,Query,"UPDATE ACTIVEMQ_ACKS SET LAST_ACKED_ID=2646, XID = NULL WHERE CONTAINER='topic://bmrsTopic' AND CLIENT_ID='AP8DA32' AND SUB_NAME='SBItest1'" ]