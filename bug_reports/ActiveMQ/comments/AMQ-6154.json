[This has not been tested in Tomcat but I think what is happening is Tomcat is picking up the Jetty @HandlesTypes annotation on the WebSocketServerContainerInitializer class and trying to process it.  Obviously if Tomcat is trying to process Jetty implementations of Websockets things are going to go badly.

Take a look at how to disable annotation scanning for the Jetty jars or disabling WebSocket support altogether in Tomcat if you don't need it so that Tomcat won't try and start those classes.
, Thanks, that is really the cause. Adding <absolute-ordering/> to web.xml fixed the problem. From doc:
 In Tomcat 7 the absolute-ordering option affects discovery both of SCIs provided by web application and ones provided by the container (i.e. by the libraries in $CATALINA_HOME/lib). In Tomcat 8 the option affects the web application ones only, while the container-provided SCIs are always discovered, regardless of absolute-ordering. In such case the absolute-ordering option alone does not prevent scanning for annotations, but the list of JARs to be scanned will be empty, and thus the scanning will complete quickly. The classes in WEB-INF/classes are always scanned regardless of absolute-ordering. 

Maybe it worth mentioning here: http://activemq.apache.org/tomcat.html or here: http://activemq.apache.org/spring-support.html, Agreed, there should be a note to check the documentation for the version of Tomcat used to see how to configure SCI scanning.  This didn't happen in previous versions because the Jetty 7.x/8.x websocket implementation wasn't JSR-356.  

I have closed this as not a problem, since it is Tomcat that needs configuring, and updated the documentation on the tomcat wiki page. The changes will show up shortly at http://activemq.apache.org/tomcat.html ]