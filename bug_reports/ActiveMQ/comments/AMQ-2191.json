[Added attachments: the exception that occurs in case of interruption during commit/rollback and the patch that fixes the problem., Fixed by SVN revision 813927, We use ActiveMQ in a similar scenario as pictured above. (Our transaction manager is Atomikos TransactionEssentials, but that is probably unimportant.) One major difference in our use case is that we use an embedded broker and thus the VM transport.

When the oneway method of the class VMTransport is interrupted it doesn't throw an InterruptedIOException but just an IOException.
Therefore the interrupt handling code in TransactionContext.syncSendPacketWithInterruptionHandling isn't used when the VM transport is used.

I have a small patch that has VMTransport throw an InterruptedIOException when it is interrupted. Tests show that this patch seems to help., This patch seems to fix the problem for me when using the VM transport., Fixed on 5.4 by revision 921822 and on 5.3.1 vy SVN revision 921844, I have come across a similar issue, different TM but that is incidental.
In my case, it is an ack as part of commit that sees the first interrupt. This causes a beforecompletion error. However on the rollback, the ack is done/gone and the broker side acks are missing so even after the client side rollback, the messages remain inflight to the consumer. 
From what I can see, it is not safe to assume a retry of a commit/rollback op is sufficient.
I think that an InterruptedIOException in the XA case should be reported to the exception listener and allow the connection to close, forcing a rollback broker side and forcing a rollback client side also.
{code}
2015-08-19 10:17:03,827 WARN [com.arjuna.ats.arjuna] (Transaction Reaper) ARJUNA012117: TransactionReaper::check timeout for TX 0:ffff650182a8:58549259:55d38674:22df0 in state RUN
2015-08-19 10:17:04,065 WARN [com.arjuna.ats.arjuna] (Transaction Reaper) ARJUNA012117: TransactionReaper::check timeout for TX 0:ffff650182a8:58549259:55d38674:22dec in state CANCEL
2015-08-19 10:17:04,328 WARN [com.arjuna.ats.arjuna] (Transaction Reaper) ARJUNA012117: TransactionReaper::check timeout for TX 0:ffff650182a8:58549259:55d38674:22df0 in state SCHEDULE_CANCEL
2015-08-19 10:17:04,488 WARN [com.arjuna.ats.jta] (Transaction Reaper Worker 0) ARJUNA016045: attempted rollback of < formatId=131077, gtrid_length=29, bqual_length=36, tx_uid=0:ffff650182a8:58549259:55d38674:22dec, node_name=1, branch_uid=0:ffff650182a8:58549259:55d38674:22ded, subordinatenodename=null, eis_name=unknown eis name > (org.apache.activemq.ra.LocalAndXATransaction@3de1f429) failed with exception code XAException.XAER_RMFAIL: javax.transaction.xa.XAException: java.io.InterruptedIOException
at org.apache.activemq.TransactionContext.toXAException(TransactionContext.java:805)
at org.apache.activemq.TransactionContext.rollback(TransactionContext.java:532)
at org.apache.activemq.ra.LocalAndXATransaction.rollback(LocalAndXATransaction.java:141)
at com.arjuna.ats.internal.jta.resources.arjunacore.XAResourceRecord.topLevelAbort(XAResourceRecord.java:358) [jbossjts-jacorb-4.17.7.Final-redhat-4-bz-1023562.jar:4.17.7.Final-redhat-1]
at com.arjuna.ats.arjuna.coordinator.BasicAction.doAbort(BasicAction.java:2853) [jbossjts-jacorb-4.17.7.Final-redhat-4-bz-1023562.jar:4.17.7.Final-redhat-1]
at com.arjuna.ats.arjuna.coordinator.BasicAction.doAbort(BasicAction.java:2832) [jbossjts-jacorb-4.17.7.Final-redhat-4-bz-1023562.jar:4.17.7.Final-redhat-1]
at com.arjuna.ats.arjuna.coordinator.BasicAction.Abort(BasicAction.java:1625) [jbossjts-jacorb-4.17.7.Final-redhat-4-bz-1023562.jar:4.17.7.Final-redhat-1]
at com.arjuna.ats.arjuna.coordinator.TwoPhaseCoordinator.cancel(TwoPhaseCoordinator.java:118) [jbossjts-jacorb-4.17.7.Final-redhat-4-bz-1023562.jar:4.17.7.Final-redhat-1]
at com.arjuna.ats.arjuna.AtomicAction.cancel(AtomicAction.java:215) [jbossjts-jacorb-4.17.7.Final-redhat-4-bz-1023562.jar:4.17.7.Final-redhat-1]
at com.arjuna.ats.arjuna.coordinator.TransactionReaper.doCancellations(TransactionReaper.java:370) [jbossjts-jacorb-4.17.7.Final-redhat-4-bz-1023562.jar:4.17.7.Final-redhat-1]
at com.arjuna.ats.internal.arjuna.coordinator.ReaperWorkerThread.run(ReaperWorkerThread.java:78) [jbossjts-jacorb-4.17.7.Final-redhat-4-bz-1023562.jar:4.17.7.Final-redhat-1]
Caused by: javax.jms.JMSException: java.io.InterruptedIOException
at org.apache.activemq.util.JMSExceptionSupport.create(JMSExceptionSupport.java:72)
at org.apache.activemq.ActiveMQConnection.doAsyncSendPacket(ActiveMQConnection.java:1323)
at org.apache.activemq.ActiveMQConnection.asyncSendPacket(ActiveMQConnection.java:1315)
at org.apache.activemq.ActiveMQSession.asyncSendPacket(ActiveMQSession.java:1972)
at org.apache.activemq.ActiveMQSession$5.afterRollback(ActiveMQSession.java:948)
at org.apache.activemq.TransactionContext.afterRollback(TransactionContext.java:161)
at org.apache.activemq.TransactionContext.rollback(TransactionContext.java:527)
... 9 more
Caused by: java.io.InterruptedIOException
at org.apache.activemq.transport.WireFormatNegotiator.oneway(WireFormatNegotiator.java:102)
at org.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:68)
at org.apache.activemq.transport.ResponseCorrelator.oneway(ResponseCorrelator.java:60)
at org.apache.activemq.ActiveMQConnection.doAsyncSendPacket(ActiveMQConnection.java:1321)
... 14 more
2015-08-19 10:17:04,493 WARN [com.arjuna.ats.arjuna] (Transaction Reaper Worker 0) ARJUNA012091: Top-level abort of action 0:ffff650182a8:58549259:55d38674:22dec received TwoPhaseOutcome.FINISH_ERROR from com.arjuna.ats.internal.jta.resources.arjunacore.XAResourceRecord
2015-08-19 10:17:15,361 WARN [com.arjuna.ats.arjuna] (default-threads - 46) ARJUNA012077: Abort called on already aborted atomic action 0:ffff650182a8:58549259:55d38674:22dec{code}
, Commit 0a12bcb928f151b5ace9a0cffc34ec717b6a8e9c in activemq's branch refs/heads/master from [~gtully]
[ https://git-wip-us.apache.org/repos/asf?p=activemq.git;h=0a12bcb ]

https://issues.apache.org/jira/browse/AMQ-2191 https://issues.apache.org/jira/browse/AMQ-3529 - rework fixes to remove uncertanty from dealing with intettuptedexception. Sync requests will trap interrupts that ocurr while waiting for responses and fail the connection with an interruptedioexception. Interrupts pending before requests will be suppressed, allowing possible clean shutdown. It is not safe to replay openwire ops b/c they are not idempotent, the only safe option is to have a teardown of the broker side state from a close
, rework of this issue to make interruption of an inprogress request an error and allowing pending interrupts to be ignored for subsequent requests avoids the need to wrap close at a higher level. AMQ-3547, removed the uncertainty around dealing with interruption.

In essence, interrupting a pending request will be fatal to the connection, like any IOException. Interrupts are suspended and resumed for subsequent requests till the connection is closed.

This is the case b/c it is not safe to replay operations and it is not possible to know if the request got to the broker.
The typical use case for interrupt is to terminate gracefully but this can only be done safely with a close.

, I am still getting this exception with 5.13 on the following scenario:

1) We have a producer template which writes messages to queue without using transaction.

2) When the queue depth reaches around 75000, we are getting the same exception which is mentioned below. 

3) When @Transaction is applied on the producerTemplate.send() , everything works fine.

 
 Exception in thread "Thread-10" org.apache.camel.CamelExecutionException: Exception occurred during execution on the exchange: Exchange[ID-*****][Message: CB occured during JMS processing; nested exception is javax.jms.JMSException: java.io.InterruptedIOException
 at org.springframework.jms.support.JmsUtils.convertJmsAccessException(JmsUtils.java:316)
 at org.springframework.jms.support.JmsAccessor.convertJmsAccessException(JmsAccessor.java:169)
 at org.springframework.jms.core.JmsTemplate.execute(JmsTemplate.java:497)
 at org.apache.camel.component.jms.JmsConfiguration$CamelJmsTemplate.send(JmsConfiguration.java:245)
 at org.apache.camel.component.jms.JmsProducer.doSend(JmsProducer.java:413)
 at org.apache.camel.component.jms.JmsProducer.processInOnly(JmsProducer.java:367)
 at org.apache.camel.component.jms.JmsProducer.process(JmsProducer.java:153)
 at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:190)
 at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:109)
 at org.apache.camel.processor.UnitOfWorkProducer.process(UnitOfWorkProducer.java:68)
 at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:412)
 at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:380)
 at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:270)
 at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:380)
 at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:221)
 at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:124)
 at org.apache.camel.impl.DefaultProducerTemplate.sendBodyAndHeaders(DefaultProducerTemplate.java:233)
 ... 2 more
 Caused by: javax.jms.JMSException: java.io.InterruptedIOException
 at org.apache.activemq.util.JMSExceptionSupport.create(JMSExceptionSupport.java:62)
 at org.apache.activemq.ActiveMQConnection.doAsyncSendPacket(ActiveMQConnection.java:1292)
 at org.apache.activemq.ActiveMQConnection.asyncSendPacket(ActiveMQConnection.java:1284)
 at org.apache.activemq.TransactionContext.begin(TransactionContext.java:237)
 at org.apache.activemq.ActiveMQSession.doStartTransaction(ActiveMQSession.java:1809)
 at org.apache.activemq.ActiveMQSession.send(ActiveMQSession.java:1735)
 at org.apache.activemq.ActiveMQMessageProducer.send(ActiveMQMessageProducer.java:277)
 at org.apache.activemq.ActiveMQMessageProducer.send(ActiveMQMessageProducer.java:212)
 at org.apache.activemq.pool.PooledProducer.send(PooledProducer.java:79)
 at org.apache.activemq.pool.PooledProducer.send(PooledProducer.java:62)
 at org.springframework.jms.core.JmsTemplate.doSend(JmsTemplate.java:636)
 at org.apache.camel.component.jms.JmsConfiguration$CamelJmsTemplate.doSend(JmsConfiguration.java:353)
 at org.apache.camel.component.jms.JmsConfiguration$CamelJmsTemplate.doSendToDestination(JmsConfiguration.java:292)
 at org.apache.camel.component.jms.JmsConfiguration$CamelJmsTemplate.access$100(JmsConfiguration.java:234)
 at org.apache.camel.component.jms.JmsConfiguration$CamelJmsTemplate$1.doInJms(JmsConfiguration.java:248)
 at org.springframework.jms.core.JmsTemplate.execute(JmsTemplate.java:494)
 ... 16 more
 Caused by: java.io.InterruptedIOException
 at org.apache.activemq.transport.WireFormatNegotiator.oneway(WireFormatNegotiator.java:102)
 at org.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:68)
 at org.apache.activemq.transport.ResponseCorrelator.oneway(ResponseCorrelator.java:60)
 at org.apache.activemq.ActiveMQConnection.doAsyncSendPacket(ActiveMQConnection.java:1290)
  ]