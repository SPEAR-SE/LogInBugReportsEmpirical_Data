[This test seems to indicate that all is working as designed.

{code}
    @Test(timeout = 60000)
    public void testTransactionRollback() throws Exception {
        MessageProducer producer = session.createProducer(queue);
        producer.send(session.createTextMessage("Hello"));
        producer.close();

        String frame = "STOMP\n" + "login:system\n" + "passcode:manager\n" +
            "accept-version:1.1\n" + "host:localhost\n" + "client-id:test\n" + "\n" + Stomp.NULL;
        stompConnection.sendFrame(frame);

        String f = stompConnection.receiveFrame();
        assertTrue(f.startsWith("CONNECTED"));

        QueueViewMBean queueView = getProxyToQueue(getQueueName());
        assertEquals(1, queueView.getQueueSize());

        frame = "BEGIN\n" + "transaction: tx1\n" + "\n\n" + Stomp.NULL;
        stompConnection.sendFrame(frame);

        frame = "SUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" +
            "id:12345\n" + "ack:client\n\n" + Stomp.NULL;
        stompConnection.sendFrame(frame);

        StompFrame received = stompConnection.receive();
        assertTrue(received.getAction().equals("MESSAGE"));

        // ack it
        frame = "ACK\n" + "transaction: tx1\n" + "subscription:12345\n" + "message-id:" +
                received.getHeaders().get("message-id") + "\n\n" + Stomp.NULL;
        stompConnection.sendFrame(frame);

        // rollback first message
        frame = "ABORT\n" + "transaction: tx1\n" + "\n\n" + Stomp.NULL;
        stompConnection.sendFrame(frame);

        assertEquals(1, queueView.getQueueSize());

        // ack it
        frame = "ACK\n" + "subscription:12345\n" + "message-id:" +
                received.getHeaders().get("message-id") + "\n\n" + Stomp.NULL;
        stompConnection.sendFrame(frame);

        assertTrue("Message not ack'd", Wait.waitFor(new Wait.Condition() {

            @Override
            public boolean isSatisified() throws Exception {
                return queueView.getQueueSize() == 0;
            }
        }));

        String unsub = "UNSUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" +
            "receipt:1\n" + "id:12345\n\n" + Stomp.NULL;
        stompConnection.sendFrame(unsub);

        String receipt = stompConnection.receiveFrame();
        assertTrue(receipt.contains("RECEIPT"));
    }
{code}

The first thing I see wrong here is that you cannot NACK a message in a TX so that will definitely fail if you try and do it a second time as you've already NACK'd the message.  My guess is that your first ACK is not including the TXID in the ACK an thereby just ACK'ing the message outside the TX., Commit bd8661796b190ef605458cdd7a0d90d9af4f51a0 in activemq's branch refs/heads/master from [~tabish121]
[ https://git-wip-us.apache.org/repos/asf?p=activemq.git;h=bd86617 ]

AMQ-6697 Adds a test to show that the described case works

Correctly ACK inside a TX and then Abort and then ACK again outside a TX
to show that the broker will then mark the message as consumed., snipped the TCP traffic:

 => STOMP
 => accept-version:1.1
 => login:admin
 => passcode:password
 => 
<=  CONNECTED
<=  server:ActiveMQ/5.14.5
<=  heart-beat:0,0
<=  session:ID:internal.ac.uk-46456-1496419320010-3:1
<=  version:1.1
<=  
<=  
 => SEND
 => content-length:26
 => destination:/queue/some.queue
 => 
 => 2017-06-02 17:02:15.192632SUBSCRIBE
 => ack:client-individual
 => destination:/queue/some.queue
 => id:1
 => 
<=  MESSAGE
<=  content-length:26
<=  expires:0
<=  destination:/queue/some.queue
<=  subscription:1
<=  priority:4
<=  message-id:ID\cinternal.ac.uk-46456-1496419320010-3\c1\c-1\c1\c1
<=  timestamp:1496419335195
<=  
<=  2017-06-02 17:02:15.192632
 => BEGIN
 => transaction:1
 => 
 => ACK
 => message-id:ID\cinternal.ac.uk-46456-1496419320010-3\c1\c-1\c1\c1
 => subscription:1
 => transaction:1
 => 
 => ABORT
 => transaction:1
 => 
 => ACK
 => message-id:ID\cinternal.ac.uk-46456-1496419320010-3\c1\c-1\c1\c1
 => subscription:1
 => 
<=  ERROR
<=  content-type:text/plain
<=  message:Unexpected ACK received for message-id [ID\cinternal.ac.uk-46456-1496419320010-3\c1\c-1\c1\c1]
<=  
<=  org.apache.activemq.transport.stomp.ProtocolException: Unexpected ACK received for message-id [ID:internal.ac.uk-46456-1496419320010-3:1:-1:1:1]
<=  	at org.apache.activemq.transport.stomp.ProtocolConverter.onStompAck(ProtocolConverter.java:475)
<=  	at org.apache.activemq.transport.stomp.ProtocolConverter.onStompCommand(ProtocolConverter.java:250)
<=  	at org.apache.activemq.transport.stomp.StompTransportFilter.onCommand(StompTransportFilter.java:85)
<=  	at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83)
<=  	at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:233)
<=  	at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:215)
<=  	at java.lang.Thread.run(Thread.java:748)
<=  
 => , According to the spec both ACK and NACK can be used in transactions, so I wonder why you think otherwise. http://stomp.github.io/stomp-specification-1.1.html#NACK
Not relevant to the problem at hand though.
, Yes, it can be optionally, I should have been more clear, it can't be used in a TX in ActiveMQ, You will need to create a unit test that shows an issue, testing on the broker shows it works as expected.  I can think of a couple client's that would have issues if it didn't as they rely on this.  , Working on this now., Got it.

{code}
diff --git a/activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/Stomp11Test.java b/activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/Stomp11Test.java
index f61c899..f4ce712 100644
--- a/activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/Stomp11Test.java
+++ b/activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/Stomp11Test.java
@@ -1150,7 +1150,7 @@ public class Stomp11Test extends StompTestSupport {
         stompConnection.sendFrame(frame);
 
         frame = "SUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" +
-            "id:12345\n" + "ack:client\n\n" + Stomp.NULL;
+            "id:12345\n" + "ack:client-individual\n\n" + Stomp.NULL;
         stompConnection.sendFrame(frame);
 
         StompFrame received = stompConnection.receive();
{code}

leads to

{quote}
Tests run: 28, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 90.347 sec <<< FAILURE! - in org.apache.activemq.transport.stomp.Stomp11NIOSSLTest
testTransactionRollbackAllowsSecondAckOutsideTX(org.apache.activemq.transport.stomp.Stomp11NIOSSLTest)  Time elapsed: 30.193 sec  <<< FAILURE!
java.lang.AssertionError: Message not ack'd
	at org.junit.Assert.fail(Assert.java:88)
	at org.junit.Assert.assertTrue(Assert.java:41)
	at org.apache.activemq.transport.stomp.Stomp11Test.testTransactionRollbackAllowsSecondAckOutsideTX(Stomp11Test.java:1175)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.lang.Thread.run(Thread.java:745)
{quote}
, thanks for your clarification regarding NACK+TX, Commit e83bb6dc38ed793ead919e5d7d6d9146816c66a5 in activemq's branch refs/heads/master from [~tabish121]
[ https://git-wip-us.apache.org/repos/asf?p=activemq.git;h=e83bb6d ]

AMQ-6697 Preserve dispatched state on client-individual tx ack

Need to preserve the messages in the dispatched list when a
client-individual ack comes in so that on abort the state remains
dispatched and the message can still be ack'd, Commit 8417ce537b2cb96965827ebfb793f31814ba1ddd in activemq's branch refs/heads/master from [~tabish121]
[ https://git-wip-us.apache.org/repos/asf?p=activemq.git;h=8417ce5 ]

AMQ-6697 Make the MBean explicitly final for java 7 support

, Commit 1c141eae409f87f5a2d8ffe1a5d8821882a614a0 in activemq's branch refs/heads/activemq-5.14.x from [~tabish121]
[ https://git-wip-us.apache.org/repos/asf?p=activemq.git;h=1c141ea ]

AMQ-6697 Adds a test to show that the described case works

Correctly ACK inside a TX and then Abort and then ACK again outside a TX
to show that the broker will then mark the message as consumed.
(cherry picked from commit bd8661796b190ef605458cdd7a0d90d9af4f51a0)
, Commit 0be8b63fde120aff68248cf0b10869c83ae7d21c in activemq's branch refs/heads/activemq-5.14.x from [~tabish121]
[ https://git-wip-us.apache.org/repos/asf?p=activemq.git;h=0be8b63 ]

AMQ-6697 Preserve dispatched state on client-individual tx ack

Need to preserve the messages in the dispatched list when a
client-individual ack comes in so that on abort the state remains
dispatched and the message can still be ack'd
(cherry picked from commit e83bb6dc38ed793ead919e5d7d6d9146816c66a5)
, Commit e38ac94a27347c89dddcd30c7a3e6063a69308dd in activemq's branch refs/heads/activemq-5.14.x from [~tabish121]
[ https://git-wip-us.apache.org/repos/asf?p=activemq.git;h=e38ac94 ]

AMQ-6697 Make the MBean explicitly final for java 7 support

(cherry picked from commit 8417ce537b2cb96965827ebfb793f31814ba1ddd)
, Fixed the individual ack case to not remove the dispatched message if it was in a TX when it was ack'd to preserve state on TX abort , Confirmed that this fixes my problems. Thank you very much ]