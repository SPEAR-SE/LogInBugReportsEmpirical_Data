[
bug summary: Message grouping fails when consumers are added.
keywords: JMSXGroupID JMSXGroupSeq

Uploading a new unit test.  An excerpt of the test results is below, which shows that the message groups GrA and GrB are being handled by both consumers simultaneously.

15:11:58,498 INFO  GroupNewConsumerTest - Con2 got message       GrA-5
15:11:58,560 INFO  GroupNewConsumerTest - Con2 got message       GrB-5
15:11:58,560 INFO  GroupNewConsumerTest - Con1 got message GrB-3
15:11:58,623 INFO  GroupNewConsumerTest - Con1 got message GrA-4
15:11:58,623 INFO  GroupNewConsumerTest - Con2 got message       GrA-6
15:11:58,685 INFO  GroupNewConsumerTest - Con1 got message GrB-4
15:11:58,685 INFO  GroupNewConsumerTest - Con2 got message       GrB-6
15:11:58,748 INFO  GroupNewConsumerTest - Con1 got message GrB-7
15:11:58,748 INFO  GroupNewConsumerTest - Con2 got message       GrA-7
15:11:58,810 INFO  GroupNewConsumerTest - Con1 got message GrB-8
15:11:58,810 INFO  GroupNewConsumerTest - Con2 got message       GrA-8
15:11:58,873 INFO  GroupNewConsumerTest - Con2 got message       GrA-9
15:11:58,935 INFO  GroupNewConsumerTest - Con2 got message       GrB-9

This is probably the same issue described in:
http://www.nabble.com/Message-groups-not-working-when-consuming-existing-messages-td18445237.html#a18445237

Note that setting the prefetch to 1 made reproducing the issue much easier.  (See the unit test)
, prefetch=1 should help here. Part of the problem is that the dispatch logic can only deal with the consumers that it has and on the first dispatch iteration it finds only one consumer and figures that that consumer has to deal with all of the groups. With prefetch of one, after the first dispatch iteration there may be another consumer (at least it allow the internal dispatch lock to be released so that another consumer can be added between dispatch attempts)

Currently there is an issue that evaluates message group selection before determining if a consumer is full, but if this is resolved, prefetch=1 should make group selection evenly distributed among subscriptions that arrive at the same time and before the group assignment has been determined. , After reviewing Hari's original files and the response from Gary, I think my issue is different than the original issue.  Hari is concerned with balancing between multiple consumers, while I am concerned with the exclusive property.  Sorry for the confusion.

Moved my test case to the ticket AMQ-2082., Recovery dispatch refactoring, which was the root of the problem, has been committed in SVN revision 736720. All that is left to be done is to add a configurable logic that would make broker to wait for a certain number of consumers (and/or a bit of time) before it starts dispatching. This will allow an even distribution of groups among consumers. Coming soon., The configurable queue policies has been added, which allows us to wait for specified number of consumers (and/or time) before we start dispatching messages. This ensures an even distribution of groups among consumers.

More documentation can be found at:
[http://cwiki.apache.org/confluence/display/ACTIVEMQ/Message+Groups#MessageGroups-Gettingnotifiedofownershipchangesofmessagegroups]
Modified test case (tests for different policies condemnations and fails if there is no even distribution of messages and groups) can be found here
[http://svn.apache.org/viewvc/activemq/trunk/activemq-core/src/test/java/org/apache/activemq/usecases/MessageGroupDelayedTest.java?view=markup]

, Any luck getting a fix for version 5.2?, Hi Rich,

we don't maintain 5.2 branch anymore. Any specific reason you don't want to upgrade to 5.3 (it should be much more stable than 5.2)?]