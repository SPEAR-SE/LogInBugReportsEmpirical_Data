[ The attachment are scripts, classes and library needed to duplicated the problem., This describes both the "lost queue messages" during broker fail over condition,  and the "orphaned messages" problem  where messages are getting stuck in some network channel buffer on a remote broker.  Here is the scenario:

Two networked brokers A and B.
One queue message producer connected to broker A
One queue message receiver X connected to broker A
One queue message receiver Y connected to broker B

Both the message receivers have their queue prefetch policy, prefetch count set to 1.  This causes each of the two receivers to receive every other message generated.  This much was expected.  However, after stopping receiver Y on broker B, the receiver X on broker A is still only receiving half of the generated messages.  The other half of the messages is being sent across the network bridge to broker B.  This occurs even though there is no client attached to broker B.

If receiver Y is restarted (attached to broker B), then it will receive all the backlogged queue messages.   

If both receivers are stopped, then all messages get sent across the bridge from broker A to broker B.  At that point even if receiver X is started on broker A it can only receive messages generated after the time is started (and only half of the messages).  The messages that go across the bridge never become available to the local receiver.  

The only way to stop the flow of message across the bridge seem to be to stop broker B.  After restarting broker B, a couple (2 out of 10) of the messages that where incorrect sent across the bridge were returned back to receiver X on broker A.  But even restarting receiver Y on broker B cannot recover the remaining messages.  The have just "disappeared". 

Run instructions to duplicate:

The goal is to run three clients on a cluster of two networked brokers.

Prequirements:

Two stand-alone brokers with network connections to each other. The client scripts assume that both brokers on localhost using ports 61616 and 62626.

ACTIVEMQ_HOME environment variable has been defined.

Using SVN HEAD (built as 3.2-SNAPSHOT)


Steps to reproduce problems.

1) start script receiver1.cmd (connects using port 61616)
2) start script receiver2.cmd (connects using port 62626)
3) start script sender.cmd (connects using port 62626)

The scripts can be adjusted to tailor rate of message generation and consumption.  Each script has a COUNT and INTERVAL for this purpose.  The default provided in the script will demonstrate the problem.  10 messages every 5000ms are generated and both receivers consume a total of 8 messages every 3000ms.  Logs (one for each process) and console output are identical and show generation sequences and receipt information.  

At this time logs will show even distribution of generated message across receivers.

4) stop receiver1 process.

Now log for receiver2 will show it is only receiving every other message (the other messages are going across the network bridge even though not client to receive them.

5) start script receiver1.cmd (connects using port 61616)

The receiver1 will now start to receive the messages that have been buffered (the log entries show the delay time for each message). The receiver2 is still only receiving every other newly generated message.

6) stop sender process. 
7) stop receiver1 process. 
8) stop receiver2 process.

Now generate a burst of messages
9) start script sender.cmd (connects using port 62626)
10) stop sender process.

Reconnect the local receiver.
11) start script receiver2.cmd (connects using port 62626)

This receiver will receive no messages.  When there was no local receiver, all generated messages were sent across the bridge.  At this point there are a minimum of 10 messages in the remote broker and if receiver1 were started it would receive these messages.  If no client every reconnects to this broker, the messages are permentatly "orphaned"

12) stop receiver2 process.

13) stop the remote broker (the one offering port 61616).
14) restart the remote broker (the one offering port 61616).

After both brokers are interconnected again

15) start script receiver2.cmd (connects using port 62626)

At this point a couple of message may be provided to the receiver2, but most of the previously generated message are MIA.









, Opps! All of the above comments (and attachment) were meant for AMQ-327, Just an update, I have still not been able to recreate this situation again., Unable to reproduce. No test scenario was also provided for delayed delivery.]