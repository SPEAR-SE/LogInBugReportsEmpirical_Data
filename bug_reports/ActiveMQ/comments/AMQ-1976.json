[are the producers using asyncSend?

I don't know the relevance of ERROR RecoveryListenerAdapter ... but I think the assertAckMatchesDispatched is being a little harsh. My problem is reproducing the behavior.
messages that passe through a network are acked one by one. The error is telling us that the ack is ocurring out of order; since the message was dispatched, 730 other messages have been dispatched and it looks like the ack is for the 730th message. It is a valid ack though.
I think this can only happen in asyncSend, otherwise, each dispatched message is synchronously acked through to its next hop.

Ideally, it would be great if you could produce a test case. I have been trying variants of the NetworkLoadTest but am not reproducing the problem.
What does your producer look like, from the text above, it seems like there is a bunch of activity on each broker?






, ah, scrap that, producers must not be asyncSend, with asyncSend this problem should not occur as in that case, the acks are immediate., One possibility is that the consuming broker is hovering about its memory limit. Which causes out of order message delivery to the forwarded queue. There are advisories on full that would help verify this. I can produce a memory full test that can also verify this suspicion. 
This being the case, the assertAckMatches.. needs to be changed.

Could you the apply the following patch (that just removes the failing check) to a trunk checkout, build and re run your test?
{code}
Index: activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java
===================================================================
--- activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java	(revision 704890)
+++ activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java	(working copy)
@@ -440,10 +440,10 @@
 			throw new JMSException("Unmatched acknowledege: Could not find Message-ID "+firstAckedMsg+" in dispatched-list (start of ack)");
 		if (!checkFoundEnd && lastAckedMsg != null)
 			throw new JMSException("Unmatched acknowledege: Could not find Message-ID "+lastAckedMsg+" in dispatched-list (end of ack)");
-		if (ack.getMessageCount() != checkCount) {
-			throw new JMSException("Unmatched acknowledege: Expected message count ("+ack.getMessageCount()+
-					") differs from count in dispatched-list ("+checkCount+")");
-		}
+//		if (ack.getMessageCount() != checkCount) {
+//			throw new JMSException("Unmatched acknowledege: Expected message count ("+ack.getMessageCount()+
+//					") differs from count in dispatched-list ("+checkCount+")");
+//		}
 	}
 
     /**
{code}, the problem appears to be related to memory full issues. I have a reproducible test case now based on the consuming broker hovering near full memory utilisation., fixed in r705281.
Problem related to the ack type used by a network bridge. It needs to be an Individual ack as the message has to be consumed by the forward broker before the ack is produced and if memory limits are effecting message delivery to a forward queue, the exact order of message delivery is not guaranteed.
With an individual ack, out of order consumption by a forward queue does not cause an error. , These fixes will now make 5.2.0 rc3]