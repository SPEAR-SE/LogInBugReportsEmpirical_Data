[we now deal separately with the case of a put blocked on capacity limit. http://svn.apache.org/viewvc?view=rev&rev=1236664, hmm, another variant of this, seems like enqueueValve needs to allow release when enqueue is blocked, but that requires knowledge of the blocking queue. Another case of blocked threads due to a blocked put.
{code}"ActiveMQ Task-3" daemon prio=5 tid=101a43800 nid=0x10c1c7000 in Object.wait() [10c1c6000]
   java.lang.Thread.State: WAITING (on object monitor)
        at java.lang.Object.wait(Native Method)
        at java.lang.Object.wait(Object.java:485)
        at org.apache.activemq.thread.Valve.turnOff(Valve.java:71)
        - locked <7dbf3c140> (a java.lang.Object)
        at org.apache.activemq.transport.vm.VMTransport.start(VMTransport.java:131)
        at org.apache.activemq.transport.TransportFilter.start(TransportFilter.java:58)
        at org.apache.activemq.transport.TransportFilter.start(TransportFilter.java:58)
        at org.apache.activemq.broker.TransportConnection.start(TransportConnection.java:895)
        - locked <7dbea0258> (a org.apache.activemq.broker.TransportConnection)
        at org.apache.activemq.broker.TransportConnector$1$1.run(TransportConnector.java:217)
        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)        at java.lang.Thread.run(Thread.java:680)


"ActiveMQ Task-4" daemon prio=5 tid=101a19800 nid=0x10c4d0000 in Object.wait() [10c4cf000]
   java.lang.Thread.State: WAITING (on object monitor)
        at java.lang.Object.wait(Native Method)
        - waiting on <7dbf3c140> (a java.lang.Object)
        at java.lang.Object.wait(Object.java:485)
        at org.apache.activemq.thread.Valve.increment(Valve.java:97)
        - locked <7dbf3c140> (a java.lang.Object)
        at org.apache.activemq.transport.vm.VMTransport.iterate(VMTransport.java:196)
        at org.apache.activemq.thread.PooledTaskRunner.runTask(PooledTaskRunner.java:122)
        at org.apache.activemq.thread.PooledTaskRunner$1.run(PooledTaskRunner.java:43)
        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
        at java.lang.Thread.run(Thread.java:680)

{code}, Here's a modded VMTransport.java that removes the use of the Valve class which has some contention issues, and replaces it with a ReentrantReadWriteLock.  Also improves on the lazy init code by taking advantage of changes made since Java 1.5., Are we ok to close this ticket? I see there has been a lot of work done to VMTransport related to sync., this is sorted by tim's changes. thanks]