[Are the duplicates only as the broker shuts down, or do they occur after the broker restarts as well?, I reproduced this.  I also tried using the failover transport, shutting down the broker, restarting all the clients, bringing the broker back up, and then shutting it down again.

In this second test case, the message was only redelivered one time.  Since the multiple deliveries only happen as the broker is shutting down, the shutdown of each connection is leading to redelivery to another consumer on another connection, and in the errant case, the second connection to shutdown (out of 3) happens to be the next one to which the message is delivered.  Therefore, the last connection remaining also gets the message.  Like this:

* Consumer 1 gets message
* Consumer 1 connection shuts down
* Consumer 2 gets message
* Consumer 2 connection shuts down
* Consumer 3 gets message
* Consumer 3 connection shuts down

Bottom line - the broker should not be redelivering (or even delivering) any messages during shutdown.  Not sure if this will be an easy fix though, since the broker sends messages (advisories) to advise of things like shutting down consumers.

, Problem exists on 5.10-SNAPSHOT., Looking at this more closely, I'm leaning toward this being a non-problem.

The JMS specification states this for AUTO_ACKNOWLEDGE:

{quote}
AUTO_ACKNOWLEDGE - With this option, the session automatically acknowledges a clientâ€™s receipt of a message when it has either successfully returned from a call to receive or the MessageListener it has called to process the message successfully returns.
{quote}

This means that MessageListener *must* be prepared to handle duplicates coming into the {{onMessage}} call because (a) the message does not get acknowledged until the handler returns, and (b) there's always the chance that client application will fail between the {{onMessage}} call and the message ACK (leading to redeliveries).

Really, all client apps should be prepared to handle duplicates, although transacted applications are best positioned to avoid them.

While it may be possible to improve this one case, such a change is not trivial, and such a change would not prevent the same condition from requiring handling in the client., there may be an easy fix in org.apache.activemq.broker.region.Queue#removeSubscription. Don't do further dispatch if the broker is shutting down. this would avoid the cascade effect of dispatch to each closing connection in order. essentially gate the call to wakeup with a check on broker shutdown., Thanks Gary - I'll take a look at that; if it proves to be straight-forward and effective, I'll put it in there., Fixed Queue handling to avoid re-dispatch of unacked messages on removal of a consumer when the broker is shutting down.

Commit: https://git-wip-us.apache.org/repos/asf?p=activemq.git;a=commit;h=29f34f4dab68ceb3138a6194617fa8f13f4d3875

Includes a unit test.  There is a race condition in the tests which appears to be in between removal of all the queue's consumers and the resend logic on the Queue which causes false positives (i.e. failure to detect a problem), so the test runs up to 3 iterations in an attempt to increase reliability.]