[I'd recommend creating a JUnit test case that reproduces your issue and attaching it here., App showing bug, Attached you can found a maven project with a test reproducing this issue. It seems to be working in 5.2.0 and failing after that release.

Thanks, Pablo., Working as designed.  The second consumer would not receive the message as the session has not been rolled back, called rollback after consumer.close() and your second consumer would receive the message., Thanks Timothy. But I really don't understand. 

If the session is not close, why I'm not able to create one consumer, close it, and then create another. And in the end commit()/rollback() the session?. This should be allowed as it is in previous ActiveMQ releases., You can create as many consumers as you'd like but they won't consumer messages that have already been consumed in that transaction, you need to first rollback the transaction before a message will be redelivered., I'm don't want that. What I want is that if I have a queue QUEUEA with 2 messages, and I have a session SESSIONA, I should be able to create one consumer with SESSIONA and consume the first message, close that consumer, and then create another consumer with SESSIONA and consume the second message. Once more, as I was able to do in previous versions of ActiveMQ.

If after that I commit SESSIONA both message will be removed., The problem is not about consuming from *multiple consumers* the *same* message: it is about consuming *different messages*.
That is, subsequent consumers always return null if there's a previous consumer with a non committed message, which doesn't make sense, as if you want to preserve ordering with that, you should really throw an exception rather than fail silently.
Is it clearer now?, I disagree. Message ordering processing should only be preserved if I'm using only one consumer.

It's ok to not preserve order if I decide to have more than one consumer. And I should also be able to have more than one consumer from the same QUEUE at the same time., I agree with you obviously.

I'm just saying if that's the case, it shouldn't fail silently by the way., It looks like a bug. The expectation that you can close and open new consumers in the same transaction and receive messages is valid.

I'll play with the test a bit to see if I can find the problem., So we investigated this in more details. The problem was introduced with a fix for [AMQ-2034], when we started postponing the closing of the actual consumer until transaction ends (either commit or rollback). This leads us to the problem where the messages that were already prefetched by the consumer are stuck on that consumer until the end of the transaction.

The easiest workaround for this is to turn of prefetching, with something like

{code}Destination dest = session.createQueue("TEST?consumer.prefetchSize=0");{code}

And frankly turning of the prefetch in use cases where you want to have multiple consumers coming and going inside the single transaction make the only sense, as every other approach will mess the order of messages.

To support closing consumers with prefetched messages inside the transaction we'd need to refactor the whole thing. Ideally the consumer would close immediately and on transaction end, broker would know how to redeliver unconsumed messages.

Let me know if this workaround works for you., To be honest it's not a solution for me. The thing is that I have a generic layer on top of activemq that I can't specialize for a particular case.

I don't need this fix right now but would be nice to have it fix in a future release.

Thanks Dejan., Thanks for the comment Pablo. We'll try to make a fix. The thing is, it's not that trivial and will affect how we process transactions, so it requires some work. 

As for the workaround, you just need to change a destination name when creating a consumer, so it should be easy one. But again, it might be impossible to do in your system., or you can set the prefetch on the broker via a destinationPolicy to set the prefetch for all or a matching set, of destinations.]