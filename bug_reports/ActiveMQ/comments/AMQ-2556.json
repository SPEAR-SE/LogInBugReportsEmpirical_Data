[TO REPRODUCE :
1- Launch a broker
2- Launch this ready to use app (consumer in a XA transaction, implemented as a Spring's MessageListenner. The config is taken from atomikos http://www.atomikos.com/Documentation/SpringIntegration)

No producer nor another XAResource is needed to show the problem

Simply use a debugger, (j)visualvm, jmap/jhat or another memory profiler tool to see grow up indefinitly (at each receiveTimeout unit of time : 3s) the number of TransactionContext instances on client and TransactionState instances on broker, 5.3.1 is still affected.
Using Spring 3.0.1, Atomikos 3.6.0 and Springs Message Listener i can see this too. 
The ActiveMQXASession and ActiveMQTopicSubscriber Instances are growing also until OOM.

Looking the ActiveMQMessageConsumer in calls to close this is done:

new Synchronization() {
                    public void afterCommit() throws Exception {
                        doClose();
                    }

                    public void afterRollback() throws Exception {
                        doClose();
                    }
                });

But what about not being commited or rollbacked at all in case of XA_RDONLY - doClose will never be called - don't know if this does matter for this memory leak but it seems inconsistent that resource cleanup is only done fpr commit + rollback.
, thanks for the great test case, issue resolved on trunk in r930135
state on the client, broker and failover transport needed to be reclaimed on prepare readonly., Is the fix-version 5.4.0 correct, i.e. fix is not included in 5.3.2?, afraid so, 5.4 will be out by the end of the summer. It was rolled into a [fuse release|http://repo.fusesource.com/maven2/org/apache/activemq/apache-activemq/5.3.1-fuse-01-00/] so u can get it there in the mean time, if a 5.4-SNAPSHOT does not work for you. , Even with the fix (r930135), is it not still possible that {{TransactionContexts}} remain indefinitely in {{TransactionContext.ENDED_XA_TRANSACTION_CONTEXTS}}? {{syncSendPacketWithInterruptionHandling}} could throw a {{JMSException}} before the context is removed from the Map, if I am not mistaken., marc, think r995397 will resolve the possibility of dangling refs in ENDED_XA_TRANSACTION_CONTEXTS if prepare fails with an exception and rollback is not subsequently called, as it need not be.]