[I had a quick peek at giving the existing TimerThread based scheduler a pool via ScheduledThreadPoolExecutor but b/c that pool is fixed, it still can have the same problem and changing that implementation detail may have more unintentional side effects.

The solution is to keep the scheduler task short lived, in the case of expiry processing - treat it as a signal generator., Linking in AMQ-5129 which has a patch for replacing the timerThread with the schedule executor. It will still have a sizing issue b/c the core pool size is fixed.

Ensuring that any long running tasks are triggered by the scheduler rather than executed by it is the better solution. , Commit cdb38b32756d70bf7ae149e994abcccc9adca5ae in activemq's branch refs/heads/master from [~gtully]
[ https://git-wip-us.apache.org/repos/asf?p=activemq.git;h=cdb38b3 ]

AMQ-6979 - use scheduler as trigger task - do heavy lifting via the task runner executor, take care to trap errors to keep scheduler timer alive AMQ-5129
, Commit 4521f47e3691320251e85e886074e3c2a97ae10a in activemq's branch refs/heads/master from [~gtully]
[ https://git-wip-us.apache.org/repos/asf?p=activemq.git;h=4521f47 ]

AMQ-6979 - fix test regression dependent on serial excution of expiry processing across destinations
, Commit 6d14e4e85bcf4ba37eb3c60d68773788e2cb19e1 in activemq's branch refs/heads/master from [~gtully]
[ https://git-wip-us.apache.org/repos/asf?p=activemq.git;h=6d14e4e ]

AMQ-6979 - fix test regression, avoid gc during shutdown such that the error check on the logging remains valid
]