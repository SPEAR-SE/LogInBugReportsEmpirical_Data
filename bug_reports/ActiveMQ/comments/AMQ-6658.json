[I think I found what causes the issue concerning the wrong order after redelivery.

There are two active threads which are involved in an apparent race condition:
ActiveMQConnection[xx]Scheduler
ActiveMQ Session Task
1) A Session Task thread verifies in ActiveMQSessionExecutor.iterate that there are messages queued on the session (as there are 60 messages prefetched).
2) It dispatchs the threads through ActiveMQMessageConsumer
3) if unconsumedMessages is not running in ActiveMQMessageConsumer.dispatch, it enqueues the message in unconsumedMessages and it is not redelivered.
So if ActiveMQ Session Task polls messages several times before ActiveMQConnection[xx]Scheduler starts unconsumedMessages in ActiveMQMessageConsumer:1889 (unconsumedMessages.start(), there would be several items in unconsumedMessages.
The problem arises if ActiveMQ Session Task polls messages several times, it polls a new message, and then ActiveMQConnection[xx]Scheduler starts unconsumedMessage. In that case unconsumedMessages is running, so the message is delivered (but the first message which was enqueued in unconsumedMessage was the one which should have been delivered first instead of the one which was currently being considered by the session thread).
I think the dispatch message has to deliver always the oldest message which was enqueued in unconsumedMessages.

For example in the dispatch method in ActiveMQMessageConsumer, something like this should be done:

    @Override
    public void dispatch(MessageDispatch md)
    {
        MessageListener listener = this.messageListener.get();
        try
        {
            clearMessagesInProgress();
            clearDeliveredList();
            synchronized (unconsumedMessages.getMutex())
            {
                if (!unconsumedMessages.isClosed())
                {
                    if (this.info.isBrowser() || !session.connection.isDuplicate(this, md.getMessage()))
                    {
                        if (listener != null && unconsumedMessages.isRunning())
                        {
                            // otherwise I do not preserve the order for
                            // redelivery
                            unconsumedMessages.enqueue(md);
                            md = unconsumedMessages.dequeueNoWait();

 , Ahaa..... I told you it was about prefetch... just saw your message after I answered you on the user's list.


I will close this is a not a bug.. this is definitely not a bug... if you disable prefetch for everybody.. then there's no way to make everybody happy.


With ActiveMQ Artemis I believe we empty the buffer after redeliver.. so perhaps it's not an issue there., reopen it if its proved to be a bug., Hello, [~clebertsuconic]. I think the problem which causes out of order redeliver is the one I reported in AMQ-6775. Could you take a look at it?
Thanks and sorry for the inconveniences.]