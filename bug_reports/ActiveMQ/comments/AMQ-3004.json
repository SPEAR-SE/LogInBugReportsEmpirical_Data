[The attached patch solves the issue for the most part. Consumers need to connect at least once for the selector to be cached. The cached selector will be persisted to the configured file every 10min. It is re-loaded during startup.

{code:xml}
<broker>
.
.
.
   <plugins>
      <spring:ref local="subQueueSelectorCacheBroker"/>
    </plugins>
.
.
.
</broker>

<spring:bean id="subQueueSelectorCacheBroker" class="org.apache.activemq.plugin.SubQueueSelectorCacheBrokerPlugin">
    <spring:property name="persistFile" value="file:${jboss.server.data.dir}/activemq/selectorCache.dat"/>
 </spring:bean>
{code}
, We would very much like to get this patch into the trunk!

Virtual Topics are a perfect match for our use case, we have a single selector per queue (multiple consumers but each using the same selector on a given queue), and need to guarantee that the (filtered) messages are delivered to each queue even when all the consumers disconnect (in our case not intentionally, just dues to some failure or networking issue) and it's not acceptable to miss messages that were published during a disconnect.

Any chance that this solution or a comparable one will make it to an an official release?
, lets try and get to this for 5.6, @Takar
Roelof's patch looks very good and is mostly unobtrusive. 
For your use case though I think it only kicks in if all subscriptions are disconnected, which may not be what you want.

It also needs a junit test case to validate and protect it.
Maybe you can provide the required test case and some update that will make it work for you?, Would be great if we could get a JUnit test case for this to help determine what the best fix is., Submitted patch - and other bits a pieces -
Can use the persistent cache as a broker plugin - 
e.g.

<plugins>
 <virtualSelectorCacheBrokerPlugin persistFile ="selectorcache.data"/>
</plugins>]