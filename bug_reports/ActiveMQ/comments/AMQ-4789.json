[Screenshots from Eclipse MAT showing leaked objects.
, is it possible to validate a 5.9 snapshot?, 5.9-SNAPSHOT can only be used with difficulty in our case.

We tried to switch the backend database from kahaDB to levelDB (as kahaDB appeared as one of the objects that was leaking the above objects) but no difference.

We cannot keep v5.8.0 up and running for more than a few hours at a time, and each time activemq hits the wall it loses all trace of messages processed, leaving us at an earlier state being forced to process messages again from scratch. Activemq is fatally broken in its current form.
, can you provide a simple test case so we can easily reproduce? 

losing state of processed messages seems to be unrelated to a memory leak. There is something else going on here.

A junit test case is ideal, find some inspiration at: https://github.com/apache/activemq/blob/trunk/activemq-amqp/src/test/java/org/apache/activemq/transport/amqp/AmqpSslTest.java

If we can easily reproduce we can easily help :-)
, Obviously if we could reproduce it easily it would help, but we're seeing this manifest itself on a live system after running for many hours, so no we don't have a test case.

To explain the losing state, the leak eventually causes an out of memory condition, which causes garbage collection to take forever, in turn triggering the "kill -9" behaviour of the java service wrapper, in turn causing the loss of data.

I have a 2.6GB heap file and can run various reports on it to show the objects being leaked.
, No test provided.  Many fixes in the AMQP area since 5.8.0 so we'd need some sort of test to validate whether there is still some issue. , Sorry, we dropped activemq completely a few days after raising this, we just couldn't get it to work reliably at all.]