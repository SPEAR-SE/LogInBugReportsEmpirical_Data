[I found this mailing list article: http://www.mail-archive.com/activemq-users@geronimo.apache.org/msg04020.html
It seems to be a similar problem.

I played around also with different Java versions (1.5.0_10 and Java6/Mustang).
I tried to run on different machines with older Linux kernel (2.6.5, SUSE LINUX Enterprise Server 9.3 with 4x Xeon(TM) MP CPU 3.66GHz and 8GB RAM)
but always same result. As soon as transactions are enabled sending is so slow - but only under Linux.
with Windows I got:

{noformat}
producer:
     [echo] Running producer against server at $url = tcp://localhost:61616 for subject $subject = TEST.FOO
     [java] Connecting to URL: tcp://localhost:61616
     [java] Publishing a Message with size 1000 to queue: TEST.FOO
     [java] Using non-persistent messages
     [java] Sleeping between publish 0 ms
     [java] Sending message: Message: 0 sent at: Wed Jan 24 07:40:36 CET 2007  ...
     [java] Sending message: Message: 1 sent at: Wed Jan 24 07:40:36 CET 2007  ... 
...
    [java] Sending message: Message: 998 sent at: Wed Jan 24 07:40:37 CET 2007...
     [java] Sending message: Message: 999 sent at: Wed Jan 24 07:40:37 CET 2007...
     [java] Done.
     [java] connection {
     [java]   session {
     [java]     messageCount{ count: 1000 unit: count startTime: 1169620836233 lastSampleTime: 1169620837215 description: Number of messages exchanged }
     [java]     messageRateTime{ count: 1000 maxTime: 31 minTime: 0 totalTime: 951 averageTime: 0.951 averageTimeExMinMax: 0.9218436873747495 averagePerSecond: 1051.5247108307046 averagePerSecondExMinMax: 1084.7826086956522 unit: millis startTime: 1169620836233 lastSampleTime: 1169620837215 description: Time taken to process a message (thoughtput rate) }
...
{noformat}

So dramatically faster, <1s compared to 40s under Linux., When taking a {{jstack}} snapshot while producer is running I can see that it spents a lot of time in {{java.util.concurrent.ArrayBlockingQueue.take()}}:

{noformat}
Thread 11071: (state = BLOCKED)
 - java.lang.Object.wait(long) @bci=0 (Interpreted frame)
 - java.lang.Object.wait() @bci=2, line=474 (Interpreted frame)
 - edu.emory.mathcs.backport.java.util.concurrent.locks.CondVar.await() @bci=72, line=75 (Interpreted frame)
 - edu.emory.mathcs.backport.java.util.concurrent.ArrayBlockingQueue.take() @bci=16, line=318 (Interpreted frame)
 - org.apache.activemq.transport.FutureResponse.getResult() @bci=4, line=42 (Interpreted frame)
 - org.apache.activemq.transport.ResponseCorrelator.request(java.lang.Object) @bci=8, line=75 (Interpreted frame)
 - org.apache.activemq.ActiveMQConnection.syncSendPacket(org.apache.activemq.command.Command) @bci=20, line=1171 (Interpreted frame)
 - org.apache.activemq.TransactionContext.commit() @bci=55, line=260 (Interpreted frame)
 - org.apache.activemq.ActiveMQSession.commit() @bci=25, line=464 (Interpreted frame)
 - ProducerTool.sendLoop(javax.jms.Session, javax.jms.MessageProducer) @bci=126 (Interpreted frame)
 - ProducerTool.run() @bci=353 (Interpreted frame)
 - ProducerTool.main(java.lang.String[]) @bci=52 (Interpreted frame)
{noformat}

I also tried to set "tcp://localhost:61616?tcpNoDelay=true" so use this TCP_NODELAY option - no improvement at all :-(, tcpNoDelay=true doesn't work for me to set the TCP_NODELAY option.
neither does wireFormat.tcpNoDelayEnabled=true
but socket.tcpNoDelay=true DID work, so you could give it a try :), Great tip David :-)

With {{socket.tcpNoDelay=true}} my own tests report:

{noformat}
- transient  |tx|=0   : #messages 1000 sending took 31 ms (commit: 0 ms), (32258 /s), receiving took 7 ms (commit: 0 ms), (142857 /s).
- transient  |tx|=1   : #messages 200 sending took 88 ms (commit: 66 ms), (2272 /s), receiving took 56 ms (commit: 42 ms), (3571 /s).
{noformat}

And without same test on same machine:

{noformat}
- transient  |tx|=0   : #messages 1000 sending took 46 ms (commit: 0 ms), (21739 /s), receiving took 22 ms (commit: 0 ms), (45454 /s).
- transient  |tx|=1   : #messages 200 sending took 8075 ms (commit: 8059 ms), (24 /s), receiving took 8074 ms (commit: 8042 ms), (24 /s).
{noformat}

This {{[|tx|=0}} means transactions are not used.

So 2272/s vs. 24/s is a good result :-)

, Hello again Helmut,

I have found that the socket.tcpNoDelay=true option seems to work only with client URI connection strings, but has no effect in the activemq.xml file (when configuring the transportConnector uri).

So if you really want to disable Nagle's algorithm for sure you should add the code directly. See my comment at https://issues.apache.org/activemq/browse/AMQ-1156.

Best regards, David, With my patch described in https://issues.apache.org/activemq/browse/AMQ-1156#action_38797 it now performs well.

One note: with Linux Kernel 2.6.16 and 2.6.17 it seems to be significant slower than with 2.6.18 or newer or with elder kernels., Ok I found out the difference between these kernel versions, it is the value of this TCP parameter "Appropriate Byte Count" (ABC) defined in RFC3465.
In 2.6.16 and .17 default is set to 1, in 2.6.18 to 0.

So try 

{noformat}
  sysctl net.ipv4.tcp_abc=0
{noformat}

This may increase overall messaging performance when using transaction or sending acknowledgements., The workaround is to use the URI...

{code}
?socket.tcpNoDelay=true
{code}, Actually this works not until V5.0, see AMQ-1156.]