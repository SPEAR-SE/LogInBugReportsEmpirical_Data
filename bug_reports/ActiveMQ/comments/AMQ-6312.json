[Stack trace for receiving MDBs for reference:

I've overriden RA's {{createConnectionFactory}} to set trusted packages.

{code}
javax.jms.JMSException: Failed to build body from content. Serializable class not available to broker. Reason: java.lang.ClassNotFoundException: Forbidden class <applicationClass>! This class is not trusted to be serialized as ObjectMessage payload. Please take a look at http://activemq.apache.org/objectmessage.html for more information on how to configure trusted classes.
	at org.apache.activemq.util.JMSExceptionSupport.create(JMSExceptionSupport.java:36)
	at org.apache.activemq.command.ActiveMQObjectMessage.getObject(ActiveMQObjectMessage.java:208)  // ActiveMQObjectMessage has default trusted packages
	at <applicationMDB>.onMessage(<applicationMDB>)

        at .... Payara EJB container, RAR adapter ....

	at org.apache.activemq.ra.MessageEndpointProxy$MessageEndpointAlive.onMessage(MessageEndpointProxy.java:123)
	at org.apache.activemq.ra.MessageEndpointProxy.onMessage(MessageEndpointProxy.java:64)
	at org.apache.activemq.ActiveMQSession.run(ActiveMQSession.java:1041) // session.connection has configured trusted packages
	at org.apache.activemq.ra.ServerSessionImpl.run(ServerSessionImpl.java:169)
	at com.sun.enterprise.connectors.work.OneWork.doWork(OneWork.java:107)
	at com.sun.corba.ee.impl.threadpool.ThreadPoolImpl$WorkerThread.performWork(ThreadPoolImpl.java:497)
	at com.sun.corba.ee.impl.threadpool.ThreadPoolImpl$WorkerThread.run(ThreadPoolImpl.java:540)
Caused by: java.lang.ClassNotFoundException: Forbidden class <application class>! This class is not trusted to be serialized as ObjectMessage payload. Please take a look at http://activemq.apache.org/objectmessage.html for more information on how to configure trusted classes.
	at org.apache.activemq.util.ClassLoadingAwareObjectInputStream.checkSecurity(ClassLoadingAwareObjectInputStream.java:112)
	at org.apache.activemq.util.ClassLoadingAwareObjectInputStream.resolveClass(ClassLoadingAwareObjectInputStream.java:57)
	at java.io.ObjectInputStream.readNonProxyDesc(ObjectInputStream.java:1613)
	at java.io.ObjectInputStream.readClassDesc(ObjectInputStream.java:1518)
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1774)
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1351)
	at java.io.ObjectInputStream.readObject(ObjectInputStream.java:371)
	at org.apache.activemq.command.ActiveMQObjectMessage.getObject(ActiveMQObjectMessage.java:206)
	... 40 common frames omitted

{code}, You're able to use the following code in your onMessage as a *workaround* until this feature is implemented:

{code}
	private void addTrustedPackages(Message jmsMessage) throws IllegalAccessException {
		final List<String> defaultTrustedPackages = (List<String>) FieldUtils.readField(jmsMessage, "trustedPackages", true);
		
		ArrayList<String> newTrustedPackages = new ArrayList<>(defaultTrustedPackages);
		newTrustedPackages.addAll(TRUSTED_PACKAGES);
		
		FieldUtils.writeField(jmsMessage, "trustedPackages", newTrustedPackages, true);
	}
{code}

This code takes advantage of the fact that the trusted packages are stored in the _ActiveMQObjectMessage_. An alternative would be to modify _ClassLoadingAwareObjectInputStream.trustedPackages_ but this could result in reduced security for your whole application so rather stick to the first method.
]