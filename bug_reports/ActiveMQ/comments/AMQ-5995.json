[The version of openwire used to store data in the persistence layer was updated in 5.12.0 to fix ongoing interoperability issues across the various wire protocols that the broker supports.  The fix here would be to network a new broker to the older instance and drain off the messages in the JDBC store by creating demand on the new broker for the Queues that exist in your older store.

Your other option is to set the store openwire version explicitly to v6 using the BrokerService#setStoreOpenWireVersion method but this will negate the changes put in place to support interoperability amongst the wire protocols supported on the broker.   , So if I understand you correctly this was intended and there is not going to be a fix?

I'm not sure if the workarounds you mention are an option for me, it's probably easier to make sure all queues are empty before upgrading., Things are working as they should so no "fix" is needed.  Starting with an empty store will also work.  , [~tabish121] I'm not sure I agree that things are working as they should.

Broker upgrades are going to happen, and the requirement that they be done with an empty message store (between only some versions, with no information in the release notes about which ones, no less), or that the user apply temporary workarounds like running the old broker in a networked configuration that's not the standard config for the cluster, doesn't strike me as "how they should work."  As much as possible, broker upgrades should be seamless; sometimes that's not possible, but in this case it seems like code that would be able to read any version of OpenWire but only write the current one (and that could be less-efficient with older versions if necessary) wouldn't be all that hard and would eliminate this problem.

Alternatively, we could create a command-line utility to transform a set of KahaDB data files from an (offline) broker from one version to another.  That's a little clunkier for the user, but reasonable if it's substantially easier to implement.

So yes, they're working as designed, but not as they should, and I think that either this issue should be re-opened or it should be left closed but a new enhancement request should be submitted to capture one or the other approach I suggested., We gladly accept contributions, fixes and enhancements, if you think it's something you want to tackle we welcome the help.  , At minimum there needs to be a release notes entry that tells everybody that they must empty their message store before upgrading. And this requires no external contributions., It's baffling that this issue is considered closed. As the comment of 20/Dec/15 points out, upgrades should be seamless. I also agree that to maintain compatibility, the implementation should be able to read older versions of OpenWire. Otherwise, where is the path to an upgrade in a production environment?

I support the belief that this issue should be re-opened and addressed., After proposing the above, I submitted AMQ-6099 to request the ability for a broker to support multi-version deserialization (with a potential performance penalty for OpenWire versions other than the current one) and AMQ-6103 to provide an offline utility to migrate KahaDB data files written in one version over to a new version.  Anyone who's interested in seeing the behavior change can vote for one of those issues, or better yet submit code to implement one of them., Tim.

Thanks for your response.

As far as a standalone utility mentioned in AMQ-6099 is concerned, wouldn't
it have to be agnostic to the underlying data store? In other words, I
presume that it would have to work not just with KahaDB files but all other
possible types of data store?

Colin.






-- 
Colin Morris

"Too thick to drink, too thin to plow"
, You're right, there shouldn't be any reference to KahaDB specifically in that JIRA entry.  I've updated it accordingly.]