[GC is a lazy process and there's nothing that requires it to run during this code if it doesn't get to a point where it's really needed.  , That was my test app. but in my real app we do running out of memory , You'd need to do more analysis on your code / app before blaiming activemq, use a tool like yourkit to look at the usage of you app.  , you get it wrong, i m not blaiming asking for a help!, There's not much we can do to help you here, you can post logs related to the out of memory error but without more to go on it doesn't sound like an ActiveMQ problem. , Hi Timothy,

So this is what i did today, run same code with 10,000 request (instead of 40 in for loop) and this is what i get.

Nothing was up on my machine just started activeMQ(5.7.0)  and looking @ task manager “java.exe” was “137144K”
After run my code “java.exe” was “349808K” why is that? (waited for 30 minutes after run my code)

Again, not blaming on activeMQ or anyone trying to figure out what am doing wrong that cause an issue with memory.

Do i missing any configuration if so, could you please tell me where and why?

One more thing, in my original app i have singleton class where i do connection one time an keep that connection object live until application shutdown.
I do create “session, destination, temporary queue, messageSelector” for every request and close them after done with this request.

Order of closing all objects

           if(m_objProducer!=null)
            {
                m_objProducer.close();
                m_objProducer=null;

            }
            if(m_objConsumer!=null)
            {
                m_objConsumer.close();
                m_objConsumer=null;
            }
            if(m_objSession!=null)
            {
                m_objSession.close();
                m_objSession=null;
            }

Thanks in advance.
, no reply!!!
, ritesh,
the correct approach would be to profile your app with yourkit or visualvm or some java profiler as Tim recommended. you have not demonstrated a memory issue with what you've presented thus far.

again, as Tim pointed out, garbage collection has its own algorithms for initiating and reclaiming whatever objects are unreachable. if you use a jvm profiling tool, you'll be able to see what objects are live, which are unreachable (and would be gc'd) and can even force the GC to happen. 

you should investigate further what your code is doing and what memory characteristics you're experiencing and post those results here if there is an apparent problem. additionally, this sort of discussion should be happening on the mailing list, not this JIRA issue. 

i suggest we close this and continue discussion on mailing list and reopen this if there is conclusive issue to be found. 
, ritesh, it's not a bug. 
It is a perfectly normal behavior of Java Virtual Machine. Unused memory might or might not be reclaimed back to the operating system. When and if the memory will be reclaimed back depends on number of factors (JVM configuration, etc). Here is a brief explanation how JVM maintains memory: http://pubs.vmware.com/vfabric52/index.jsp?topic=/com.vmware.vfabric.em4j.1.2/em4j/conf-heap-management.html

I'm not sure whether this is a right place discuss this as it's not ActiveMQ issue. I believe you might get better answers in dedicated Q&A forums such as http://stackoverflow.com/ ., Shutting this down as its not an AMQ issue.  Move discussion to the mailing list please., Hi Jaromi,

	Can you please help me with following error.

Got following error form AMQ

ERROR | Memory Usage for the Broker (1024 mb) is more than the maximum
available
for the JVM: 981 mb.

I think i know the cause of an error. I have following setting in
"activemq.xml"

<systemUsage>
	<systemUsage>
       	<memoryUsage>
                    <memoryUsage limit="1 gb"/> (here is the problem)
             </memoryUsage>
             <storeUsage>
                    <storeUsage limit="100 gb"/>
             </storeUsage>
             <tempUsage>
                    <tempUsage limit="50 gb"/>
             </tempUsage>
	</systemUsage>
</systemUsage>

Now, change it back to 64mb.
So, the question is since we are dealing with 9 to 10K (or some time 1MB)
size messages with delivery mode="NON_PERSISTENT" would it be a good idea to
increase this memory (to 2gb) if so, what would i have to do for JVM
memory(sorry we are new in java)?


One more thing in our application we have tons of temp and large string
objects would be good idea to use following command?

"-XX:+UseConcMarkSweepGC" first of all is it recommended to use this and if
so, where and how can i use this?

Tried on command prompt "c:program files\java">-XX:+UseConcMarkSweepGC didn’t
work.


Ritesh


]