[Broker KahaDB folder that causes startup error and TRACE level log showing the GC records that caused it., Test app used to hit KahaDB error by causing many add/update/remove APIs while db-log files are being deleted., Debugged this a little more but the root cause isn't obvious even after adding more trace debugging.  Basically, the metadata that is written to disk at the time the checkpoint cleanup was done looks correct and would not cause a startup error because it is not referencing the files that are being cleaned and deleted from disk.  However, upon restart, a different set of metadata is loaded from disk which is old and still references a file that was deleted during the last checkpoint cleanup which causes the exception during open/recover as shown in the stack trace.  One workaround I tried was to force a rebuild of the index through journal replay for any exception thrown by the recover method (as shown below) but it doesn't feel like this is really getting to the root of the problem.

//inside the open method:
public void open() throws IOException {
...
           startCheckpoint();
           //recover //instead try to catch exceptions and rebuild the index
            try {
                recover();
            } catch (IOException ex) {
                LOG.warn("Recovery failure during open. Recovering the index through journal replay.", ex);
                // try to recover index
                try {
                    pageFile.unload();
                } catch (Exception ignore) {}
                if (archiveCorruptedIndex) {
                    pageFile.archive();
                } else {
                    pageFile.delete();
                }
                metadata = createMetadata();
                pageFile = null;
                loadPageFile();
                recover();
            }, This appears to be the same as AMQ-6207.  The writes in the recovery file and the index could get out of sync.]