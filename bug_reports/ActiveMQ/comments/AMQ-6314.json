[According to the images you do have messages pending in the DLQ which depending on other factors can lead to the journal logs being retained leading to store being full. , Thanks [~tabish121] for your quick response, my another question is why DLQ is created ? because we are not setting any expiration properties and how can we avoid the journal log dependencies.

we heard that ActiveMQ has some fix in 5.13.2 but we are still facing the same issue, actually log files should delete once we consume the messages but it is not happening.

I believe the issue which we are facing is related to stores, log files, slow consumers and we don't know how to overcome this issue.
, I can't say how the DLQ is getting hit in your case as I don't know what you are doing.  The solution to the chained log files is traditionally to use mKahaDB.

There doesn't appear to be an bug here, the best place to ask your questions is on the Users mailing list where you can get advice from folks that can analyse your use case.  , {code}
==> wrapper.log <==
INFO   | jvm 1    | 2016/06/07 21:00:46 |  INFO | Usage(default:store:queue://ActiveMQ.DLQ:store) percentUsage=99%, usage=6488893505, limit=6442450944, percentUsageMinDelta=1%;Parent:Usage(default:store) percentUsage=100%, usage=6488893505, limit=6442450944, percentUsageMinDelta=1%: Persistent store is Full, 100% of 6442450944. Stopping producer (ID:custom-127492733-3-127828230-47478-1465332618851-1:40:1:1) to prevent flooding queue://ActiveMQ.DLQ. See http://activemq.apache.org/producer-flow-control.html for more info (blocking for: 452s)

{code}, [~tabish121]: We really need a help in improving ActiveMQ performance, we tested ActiveMQ with no message loss configuration and getting only 500msgs/sec and we are getting 5000msgs/sec with Tibco EMS server, so can you please suggest us how to improve our ActiveMQ Performance.

I tuned the below parameters:

*20producer/consumers and 10kb message size*:

# KahaDB —> disable the enablejournalDiskSyncs (Async store) ---> 4000 msgs/sec
# Prefetch —> 1000, 50 , 1, 0
# Enabled messageCompression
# Socket buffer size changed from 64kb to 128kb
# I/O buffer size changed from 8kb to 16kb
# indexCacheSize
# journalMaxFileLength
# FlowControl
# tcp/nio
# Pre-allocation-strategy (log files)
# Producers/consumers count - 4, 20, 100

Also I am attaching the ActiveMQ.xml in this ticket.

CC : [~cshannon], You can leave on concurrentStoreAndDispatch for queues and I don't think you'd lose messages.  There might be some case I'm not thinking of that could cause a message to get lost but the way it works is the producer will still block and wait for the message to be synced to disk but while it is waiting to be synced, it will be dispatched to a consumer if the consumer is ready for it.  If the consumer acknowledges the message before the disk sync happens then it can be safely dropped and the message never needs to be written to disk.  This can definitely speed up the message rate.

In regards to EMS, when you did your tests and saw 5000 message per second are you sure that EMS was configured to use Fsync for the sync storage?  
, 
Thanks [~cshannon] for your quick response but my question,Is the producer blocked till consumer sends the acknowledgement ? or it will be blocked till the message reach to dispatch queue(consumer did not send acknowledgment) ?

ActiveMQ doc says "*If you want to satisfy the JMS durability requirement, you must also disable concurrent store and dispatch*".

Regarding EMS: Fsync is disabled, we used default configuration and don't have much idea on Fsync

{code}
 Process Id:               16832
 State:                    active
 Topics:                   5 (0 dynamic, 0 temporary)
 Queues:                   8 (0 dynamic, 1 temporary)
 Connections:              1 of 30000 maximum
 Sessions:                 1
 Producers:                1
 Consumers:                1
 Durables:                 0
 Log File Size:            1.8 MB out of 260MB
 Pending Messages:         0
 Pending Message Size:     0.0 Kb
 Message Memory Usage:     16.8 Kb out of 4083470KB
 Message Memory Pooled:    104.0 Kb
 Synchronous Storage:      2.1 GB
 Asynchronous Storage:     3.0 Kb
 Fsync for Sync Storage:   disabled
 Inbound Message Rate:     0 msgs/sec,  0.0 Kb per second
 Outbound Message Rate:    0 msgs/sec,  0.0 Kb per second
 Disk Read Rate:           0 reads/sec,  0.0 Kb per second
 Disk Write Rate:          0 writes/sec, 0.0 Kb per second
 Uptime:                   6 days 16 hours 56 minutes
{code}, If concurrent store and dispatch setting is disabled, a sync producer will block until the message is stored to disk.  After it is stored, the producer will return and then the broker will be dispatch the message to the consumer.  The producer won't wait for the ack, only that it was persisted.

If that setting is enabled, the producer will block until the message is either stored to disk OR the consumer has acked.  This is because in this mode the message can be dispatched while the producer is waiting for the disk sync so in a busy broker it's possible the message can be acked before saving to disk.  Either way, the producer will block until it gets confirmation that the message has either been received and acked or the broker has saved it.

My guess is the note about it not satisfying the spec is there because it probably technically doesn't conform to the spec since it's possible the message could never be stored to disk if it was delivered quickly.  This would also prevent being able to replay messages if you were backing up the journal files.  So really it is up to you if you want to use this setting or not.

So Fsync being disabled is the reason why you are seeing a high message rate with EMS, which is what I suspected.  That is equivalent to setting enablejournalDiskSync to false in ActiveMQ.  You are not guaranteeing persistence if that setting is disabled because the producer isn't waiting for the data to be flushed to disk.  To do a proper comparison of speed you need to set the Fsync setting in EMS to the same thing as enableJournalDiskSync in ActiveMQ.  You need to enable Fsync if you want to guarantee persistent messaging and if you do, I think you will find the message rate to be slower and more comparable to the speed you see for ActiveMQ., This is a discussion that needs to happen on the users forum, jira is where real bugs are logged.  ]