[Blocking and throwing an error seems like the wrong thing to do, if the connection timed out it should be replaced by a new one.  Perhaps not blocking and handling the NoSuchElementException to replenish the pool entry would be a better idea.

Do you have a test for this?, Hi [~tabish121],

actually I only get this tested by manually debugging both threads causing the "collision" in the small open window. For me the patch with the connectionTimeout work good. Camel/Spring-jms for example immediately tries to reconnect after exception. I think most consuming frameworks will act like that. In this way a connection get created, too. :)

By the way it seems extremely rare to occur, but it does.

Benjamin, Is the Github integration to AMQ project broken? No link to [PR|https://github.com/apache/activemq/pull/335], Actually thinking about this enhancement. Feels a bit odd.


{code:java}
while (connection == null) {
    try {
        connection = connectionsPool.borrowObject(key);
    } catch (NoSuchElementException ex) {
        if (!"Timeout waiting for idle object".equals(ex.getMessage())) {
            throw ex;
        }
    }
    if (connection != null) {
        synchronized (connection) {
            if (connection.getConnection() != null) {
                connection.incrementReferenceCount();
                break;
            }

            // Return the bad one to the pool and let if get destroyed as normal.
            connectionsPool.returnObject(key, connection);
            connection = null;
        }
    }
}
{code}
]