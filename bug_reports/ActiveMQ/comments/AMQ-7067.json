[Please see the amq7067 unit test.

This patch is for AMQ 5.15.x branch.

You can execute using the following command:
 mvn -Dtest=AMQ7067Test test


Keeping original comment for history:

I've attached a stand alone test case to reproduce the issue.

Here's how to use the test case:

0. Setup AMQ 5.15.6 broker on local system. Use default configuration, no special settings required. Start broker.
 1. Extract AMQ7067 zip file.
 2. Run XATransactionTest while Broker is live using :  mvn clean compile exec:java -Dexec.mainClass="XATransactionTest"

The test case will output:

[INFO] — exec-maven-plugin:1.6.0:java (default-cli) @ transaction —
 SLF4J: Class path contains multiple SLF4J bindings.
 SLF4J: Found binding in [jar:file:/Users/icbts/.m2/repository/org/apache/activemq/activemq-all/5.15.6/activemq-all-5.15.6.jar!/org/slf4j/impl/StaticLoggerBinder.class]
 SLF4J: Found binding in [jar:file:/Users/icbts/.m2/repository/org/slf4j/slf4j-log4j12/1.6.1/slf4j-log4j12-1.6.1.jar!/org/slf4j/impl/StaticLoggerBinder.class]
 SLF4J: See [http://www.slf4j.org/codes.html#multiple_bindings] for an explanation.
 SLF4J: Actual binding is of type [org.slf4j.impl.Log4jLoggerFactory]
 createDanglingTransaction txid: XID:[55,globalId=ffffffffffffffffffffffffffffffffffffffe9ffffffb8fffffff7ffffffa1,branchId=ffffffffffffffffffffffffffffffffffffffe9ffffffb8fffffff7ffffffa1]
 createXATransaction txid: XID:[55,globalId=000015333ec,branchId=000015333ec]
 Pending Transactions 1: [XID:[55,globalId=ffffffffffffffffffffffffffffffffffffffe9ffffffb8fffffff7ffffffa1,branchId=ffffffffffffffffffffffffffffffffffffffe9ffffffb8fffffff7ffffffa1]]
  INFO | I/O exception (org.apache.http.NoHttpResponseException) caught when processing request to {}->[http://localhost:8161:] The target server failed to respond
  INFO | Retrying request to {}->[http://localhost:8161|http://localhost:8161/]
 Pending Transactions 2: [XID:[55,globalId=ffffffffffffffffffffffffffffffffffffffe9ffffffb8fffffff7ffffffa1,branchId=ffffffffffffffffffffffffffffffffffffffe9ffffffb8fffffff7ffffffa1], XID:[55,globalId=000015333ec,branchId=000015333ec]]
 [INFO] ------------------------------------------------------------------------

In the Broker log you'll see:

 INFO | KahaDB is version 6
  INFO | Recovering from the journal @1:741
  INFO | Recovery replayed 429 operations from the journal in 0.081 seconds.
  WARN | Recovered prepared XA TX: [XID:[55,globalId=ffffffffffffffffffffffffffffffffffffffe9ffffffb8fffffff7ffffffa1,branchId=ffffffffffffffffffffffffffffffffffffffe9ffffffb8fffffff7ffffffa1]]
  WARN | Recovered prepared XA TX: [XID:[55,globalId=000015333ec,branchId=000015333ec]]
  
 On JConsole you'll see two messages in org.apache.activemq > Broker > RecoveredXaTransaction MBean.

Given we commit the transaction, I'd expect there to not be a message in Recovered state.

Note:  If we do not send additional messages to force a new page file, than we do not see the message in Recovered state after broker restart.

It appears to be that the prepared statement in db-1.log,. and commit in db-2.log will result in the commit getting GC'd (hence no pare to match) and having the message being seen as being in prepared state, and hence getting recovered., GitHub user jgoodyear opened a pull request:

    https://github.com/apache/activemq/pull/302

    [AMQ-7067] KahaDB Recovery can experience a dangling transaction when…

    [AMQ-7067] KahaDB Recovery can experience a dangling transaction when prepare and commit occur on different pagefiles.
    
    Test cases added for Commit and Rollback on XA and Non-XA transactions.
    
    Executed kahadb-store tests, activemq-unit-tests, and ran full build.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/jgoodyear/activemq master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/activemq/pull/302.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #302
    
----
commit 2dabd858240dc3dc4341cceb1d28a61e5f440d1a
Author: jgoodyear <jamie.goodyear@...>
Date:   2018-10-05T16:34:21Z

    [AMQ-7067] KahaDB Recovery can experience a dangling transaction when prepare and commit occur on different pagefiles.

----
, [~jgoodyear] I think the patch is on the right track but I think it needs some small mod.

 

The ack message file map can do what we need but I think it has to track the association between the prepare record location and the outcome (commit/rollback) location rather than the actual message or ack commands.

ie: all of the transaction commands could be in one data file, the prepare in another and the outcome in a third. Tracking the link between the third and the first is not sufficient in this case. It should be possible to validate that with another test scenario.

I think the prepare record location needs to be tracked in the in memory tx representation in some way to make it available to the outcome processor., Hi Gary,

The crux of this patch is to prevent the GC of the PageFile such that on recovery  Commit/Rollback can be processed as per existing logic.  No changes to the existing processors is required. 

Please note, the problem was happening with Non-XA transactions as well, hence the addition of non-xa unit tests. The commit/rollback would get lost via GC, by updating the code to mark those index to not be GC'd the behavoir is fixed for both XA and Non-XA transactions. Adding in a new structure and logic to track the TX lifeCycle would not touch the Non-XA transaction case., In the xa case, I don't think the prepare record location is tracked, so it can get lost, leaving updates and a commit/rollback - which will barf. I am suggesting tracking the outcome record with the prepare location, and possibly with all of the updates.

I had not considered the non xa case, in that case, the commit is all that is needed b/c the default will be to rollback. The commit outcome location needs to be linked to each of the update commands in turn., I see that losing a prepare record after an outcome is still recoverable, once all of the updates are present.

However I think that a prepare record needs to be tracked in case it falls outside of the current txRange or current write file., I've updated the PR after our discussion on IRC.

All locations are updated on commit/rollback/prepare., [~jgoodyear] I have pushed your changes and some additional test tidy up and a prepare variant. Thank you.

 

[https://github.com/apache/activemq/commit/57c7939534a927bfc2d1b0454aac7ef8d804532b]

 

I think ack compaction will need some follow on work b/c it won't be aware that the ackMessageFileMap now also has transaction locations, it will only move acks and I think will leave the journals candidates for gc again. 

As it stands ackCompaction should be disabled for this fix to be effective, until that is proven not to be the case or it is fixed.

 

There are some ackCompaction tests that can be combined with the recovery checks to validate. 

This issue should remain open till we get a resolution to that., Shouldn't we just record the reference location update inside of the pageFile.tx() for the KahaCommitCommand case? This would do it under the write lock and also prevent having to iterate again plus then the change gets commited to the index in the transaciton.  Ie, change: 

  
{code:java}
    final List<Operation> messagingTx = inflightTx;
    indexLock.writeLock().lock();
    try {
        pageFile.tx().execute(new Transaction.Closure<IOException>() {
            @Override
            public void execute(Transaction tx) throws IOException {
                for (Operation op : messagingTx) {
                    op.execute(tx);
                }
            }
        });
        metadata.lastUpdate = location;
    } finally {
        indexLock.writeLock().unlock();
    }
    for (Operation op: inflightTx) {
        recordAckMessageReferenceLocation(location, op.getLocation());
    }    
{code}

to:

{code:java}
final List<Operation> messagingTx = inflightTx;
    indexLock.writeLock().lock();
    try {
        pageFile.tx().execute(new Transaction.Closure<IOException>() {
            @Override
            public void execute(Transaction tx) throws IOException {
                for (Operation op : messagingTx) {
                    op.execute(tx);
                    recordAckMessageReferenceLocation(location, op.getLocation());
                }
            }
        });
        metadata.lastUpdate = location;
    } finally {
        indexLock.writeLock().unlock();
    }
{code}, [~cshannon] yes, good catch. I should be under that lock. The map does not get updated in the pagefile tx, just during checkpoints, but it does need to be protected from concurrent access., [~gtully] - and I guess that means we should also add a pageFile.tx() to do the updates in for the KahaPrepareCommand and KahaRollbackCommand as well right?

And I think you are right that the Ack compaction stuff needs updating..the easiest thing is probably to just change the task so that it doesn't remove the forwarded journal file from the ackMessageFileMap if it contains a transaction command (normal GC should remove it if there are no open transactions remaining on that file)..this probably reduces the usefullness of ack compaction but I don't see a better way without expanding to rewrite all the other commands as well, I think maybe something like this would work for ack compaction but would need to test it out...I don't see any current tests for ack compaction

https://github.com/cshannon/activemq/commit/bb28cd0b647c52e8dc84b1740ab4d5ef1ca6198a, [~cshannon] We just need the lock for protection, no tx, b/c the index is not updated.

On the compaction, I think that is the simplest approach.

Ideally we would have some sort of reference count on the referenced ids in the ackMessageFileMap - allowing each ack and outcome to be recorded and having some way to know there are just non ack references remaining.

We don't need to retain everything. i.e.: the prepare record can go if there is an outcome, and if the outcome is rollback then both the prepare and rollback can go b/c recovery will default to rollback. For commit, both xa and non xa, it needs to be retained as long as the updates (add/ack commands).

It will get complex fast however.

Getting it correct first will suffice, which means retaining the transaction related commands. I will see if I can wrangle a test to reproduce to get the full context., [~gtully] - ok sounds good, having a test case to reproduce everything first will make it easier to validate any changes to ack compaction

And you are right about the index not being updated, I just realized the ackMessageFileMap is marked as transient (i was thinking it was stored to disk during index updates)

Also, based on your comment I'm not sure my sample I linked above is good enough for the commit case. (we might end up removing those files if acks are moved and the transaction is commited and not in flight but the message add or commit commands exist not sure). So again having some tests will help tremendously to validate, The following test case can be inserted into the AMQ7067Test file:
 [https://gist.github.com/jgoodyear/f3c716aec99c066894047ed996cdcdc9]

Its a non-completing test, it just allows us to setup the scenario, load up a lot of db page files, than let compaction occur.

In my IDEA environment i can watch the data folder populate:
{code:java}
icbts-2:activemq-unit-tests icbts$ ls target/data/kahadb/
db-1.log        db-115.log      db-131.log      db-148.log      db-164.log      db-180.log      db-197.log      db-212.log      db-229.log      db-245.log      db-261.log      db-278.log      db-4.log        db-56.log       db-72.log       db-89.log
db-10.log       db-116.log      db-132.log      db-149.log      db-165.log      db-181.log      db-198.log      db-213.log      db-23.log       db-246.log      db-262.log      db-279.log      db-40.log       db-57.log       db-73.log       db-9.log
db-100.log      db-117.log      db-133.log      db-15.log       db-166.log      db-182.log      db-199.log      db-214.log      db-230.log      db-247.log      db-263.log      db-28.log       db-41.log       db-58.log       db-74.log       db-90.log
db-101.log      db-118.log      db-134.log      db-150.log      db-167.log      db-183.log      db-2.log        db-215.log      db-231.log      db-248.log      db-264.log      db-280.log      db-42.log       db-59.log       db-75.log       db-91.log
db-102.log      db-119.log      db-135.log      db-151.log      db-168.log      db-184.log      db-20.log       db-216.log      db-232.log      db-249.log      db-265.log      db-281.log      db-43.log       db-6.log        db-76.log       db-92.log
db-103.log      db-12.log       db-136.log      db-152.log      db-169.log      db-185.log      db-200.log      db-217.log      db-233.log      db-25.log       db-266.log      db-282.log      db-44.log       db-60.log       db-77.log       db-93.log
db-104.log      db-120.log      db-137.log      db-153.log      db-17.log       db-186.log      db-201.log      db-218.log      db-234.log      db-250.log      db-267.log      db-29.log       db-45.log       db-61.log       db-78.log       db-94.log
db-105.log      db-121.log      db-138.log      db-154.log      db-170.log      db-187.log      db-202.log      db-219.log      db-235.log      db-251.log      db-268.log      db-3.log        db-46.log       db-62.log       db-79.log       db-95.log
db-106.log      db-122.log      db-139.log      db-155.log      db-171.log      db-188.log      db-203.log      db-22.log       db-236.log      db-252.log      db-269.log      db-30.log       db-47.log       db-63.log       db-8.log        db-96.log
db-107.log      db-123.log      db-14.log       db-156.log      db-172.log      db-189.log      db-204.log      db-220.log      db-237.log      db-253.log      db-27.log       db-31.log       db-48.log       db-64.log       db-80.log       db-97.log
db-108.log      db-124.log      db-140.log      db-157.log      db-173.log      db-19.log       db-205.log      db-221.log      db-238.log      db-254.log      db-270.log      db-32.log       db-49.log       db-65.log       db-81.log       db-98.log
db-109.log      db-125.log      db-141.log      db-158.log      db-174.log      db-190.log      db-206.log      db-222.log      db-239.log      db-255.log      db-271.log      db-33.log       db-5.log        db-66.log       db-82.log       db-99.log
db-11.log       db-126.log      db-142.log      db-159.log      db-175.log      db-191.log      db-207.log      db-223.log      db-24.log       db-256.log      db-272.log      db-34.log       db-50.log       db-67.log       db-83.log       db.data
db-110.log      db-127.log      db-143.log      db-16.log       db-176.log      db-192.log      db-208.log      db-224.log      db-240.log      db-257.log      db-273.log      db-35.log       db-51.log       db-68.log       db-84.log       db.redo
db-111.log      db-128.log      db-144.log      db-160.log      db-177.log      db-193.log      db-209.log      db-225.log      db-241.log      db-258.log      db-274.log      db-36.log       db-52.log       db-69.log       db-85.log       lock
db-112.log      db-129.log      db-145.log      db-161.log      db-178.log      db-194.log      db-21.log       db-226.log      db-242.log      db-259.log      db-275.log      db-37.log       db-53.log       db-7.log        db-86.log
db-113.log      db-13.log       db-146.log      db-162.log      db-179.log      db-195.log      db-210.log      db-227.log      db-243.log      db-26.log       db-276.log      db-38.log       db-54.log       db-70.log       db-87.log
db-114.log      db-130.log      db-147.log      db-163.log      db-18.log       db-196.log      db-211.log      db-228.log      db-244.log      db-260.log      db-277.log      db-39.log       db-55.log       db-71.log       db-88.log
{code}
Than reduce to the below after GC:
{code:java}
icbts-2:activemq-unit-tests icbts$ ls target/data/kahadb/
db-318.log      db.data         db.redo         lock
{code}, I'll note that I ran the full unit test suite through using the patch with out breaking existing test cases., Are the changes we're making to MessageDatabase small enough such that we could back port the fix to 5.15.x line?, I was going to backport all commits from this patch to 5.15.x as I don't know when 5.16.0 will go out and this seems like an important fix, Thank you :), [~jgoodyear] - i cherry-picked the existing 3 commits into the 5.15.x branch...I will also move anymore from master after the ack compaction case is sorted so we can do a 5.15.7 release soon as this is an important fix, Hi, I would like to start ActiveMQ 5.15.6 release pretty soon. What's the current status of this one ? Thanks !, I assume you mean 5.15.7 as 5.15.6 is already out.

There is still no test case yet to validate the ack compaction stuff and I'm out of town next week so probably won't be a release until the following week at least.  I don't want to release (and [~gtully] i'm sure agrees) until we make sure we don't break other stuff with compaction.  , I pushed an update, that goes some of the way, at least there is one test and a fix.
The test is just for a prepare record, ack compaction will still move once the there are outcomes and that will break the reference. that will need a commit test in the same vein.
[~jgoodyear] flip: [https://github.com/apache/activemq/commit/7c890d477663d91aef518e30d60cf3c13827877a#diff-e3b8fff8c2133dfd70999705bbb558b3R2094] to false to see the new test fail to get suck in
I think the solution is to forward commit records, but more tests are needed to verify the problem and the fix, Thanks for the update guys. I'm fixing AMQ-7076 and AMQ-7073 on my side.

Please let me know when I can start 5.15.7 release. Thanks !, Commit ed727d22e1f22a13813d61dba3908408fcd3cd36 in activemq's branch refs/heads/master from gtully
[ https://git-wip-us.apache.org/repos/asf?p=activemq.git;h=ed727d2 ]

AMQ-7067 - track xa commit outcomes in ack compaction such that there are no dangling prepared tx on full recovery, fix and test
, I think this is now sorted, the ack compaction will still work and not get in the way., I see the commit message for master, are we putting this on 5.15 too?, Commit f7ff4c25e13133132c3103141a5179c93e43b536 in activemq's branch refs/heads/activemq-5.15.x from gtully
[ https://git-wip-us.apache.org/repos/asf?p=activemq.git;h=f7ff4c2 ]

AMQ-7067 - track xa commit outcomes in ack compaction such that there are no dangling prepared tx on full recovery, fix and test
, Done.  Thanks., Awesome thanks [~gtully] 

I’m actually out of the office the rest of the week but when I get back Monday I can do the work for the 5.15.7 release if no one else gets around to it, Github user jgoodyear closed the pull request at:

    https://github.com/apache/activemq/pull/302
, Commit 8e5d539665519629139633e324a672b0a415d4b2 in activemq's branch refs/heads/master from [~cshannon]
[ https://git-wip-us.apache.org/repos/asf?p=activemq.git;h=8e5d539 ]

AMQ-7067 - add missing license header
]