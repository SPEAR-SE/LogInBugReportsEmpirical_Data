[MissingDataFileTest shows the problem.

There is a fix to cleanup to reference the inuse transaction files using checkpoint.
also checkpoint is fixed up to return the minimum file in use.

of note also is AsyncDataManager removal of files that are not inUse. This capability seems to be bsolete but yet I see it remove a file on occasion., note, I had to reduce the store maxFileSize and the cleanup interval to make the test reproduceable. This meant exposing the cleanupInterfal to the persistenceAdapterFactory.

        AMQPersistenceAdapterFactory factory = (AMQPersistenceAdapterFactory) broker.getPersistenceFactory();
        factory.setMaxFileLength(2*1024); // ~4 messages
        factory.setCleanupInterval(5000); // every few second, Resolved by revision 667105, remove some unnecessary info from the description, still needs work, Still having problems with this:

I find that the following change helps but is not bulit proof. I think it makes sense to use the mark as the boundary point for deletion but on a slower machine the MissingDataFileTest still shows the error stack trace. A multi core machine does not show the problem.
Also, the test case only complets when the memory usage limit is omitted or increased to 1024*1024 which may indicate a limitation of the test case. Decreasing the memory usage caused the problem to show up earlier, which does not now seem to be the case. So there is some progress.

The short of it is that collection of inUse file Ids is not sufficiently stable for the cleanup method. I still do not know where the problem lies though. I need another set of eyes.

Index: src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java
===================================================================
--- src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java      (revision 668601)
+++ src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java      (working copy)
@@ -425,6 +425,7 @@
             }
             Integer lastDataFile = asyncDataManager.getCurrentDataFileId();
             inProgress.add(lastDataFile);
+            lastDataFile = asyncDataManager.getMark().getDataFileId();
             inProgress.addAll(referenceStoreAdapter.getReferenceFileIdsInUse());
             Location lastActiveTx = transactionStore.checkpoint();
             if (lastActiveTx != null) {
, changes that work well on a fast machine to alleviate the stack trace. I still see the error on a slower machine however. test works to completion with the changed memory limit., Further patch applied by SVN revision 669265]