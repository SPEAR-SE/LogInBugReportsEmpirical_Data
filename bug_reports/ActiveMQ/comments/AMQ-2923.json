[Stomp trace showing a two messages received to a single queue, being sent in reverse order., just a thought, but I think concurrentStoreAndDispatchQueues on the kahaDB persistence adapter may be the answer here. can you set it to false:
<kahaDB .... concurrentStoreAndDispatchQueues="false" />, Issue is still present in 5.4.2. I am about to try with concurrentStoreAndDispatchQueues="false"., Screenshot showing web console with messages listed out of order. Notice 90 seconds between timestamps!, With concurrentStoreAndDispatchQueues="false" the issue still occurs., Switching component to 'broker'. Having switched on full broker debugging I've not been able to reproduce so far. Still trying., I also observe this out of order behavior.  Is there any update or workaround?, The web console screenshot doesn't show the messages out of order, it just sorts them in an unuseful way. It orders them by messageID, but sorted by simple string value, so the later message foobar:115 appears before foobar:91, but the messages are correctly ordered on the queue. This annoys me! It should have been fixed by https://issues.apache.org/jira/browse/QPID-417 but wasn't. An easy way to fix it would be to zero-pad the number sequence that follows the bit that looks like a timestamp in the MessageID, otherwise the sorting has to be cleverer.

Anyway, you may still be seeing clients picking up messages out of producer order, but the screenshot of the web console doesn't give supporting evidence. I always see messages listed:

foobar:10
foobar:1
foobar:20
foobar:2
foobar:3

etc.

but if I consume them, I get them in 1,2,3 order with 10 & 20 later., This is a non-issue, having discussed the stomp log with gtully on irc. I'm recommending that http://activemq.apache.org/stomp.html be updated with the following:

Message Ordering

When delivering messages the broker uses the message-id to order them. This is based on the producer-id which, in the case of STOMP connections, is generated at the point that the producer connects to the broker.

Therefore apparently out-of-order messages may occur. To give an example:

1. Producer p1 connects
2. Producer p2 connects
3. Producer p2 sends Message 1 to /queue/test
4. Producer p1 sends Message 2 to /queue/test several seconds later
5. Consumer c1 connects and subscribes to /queue/test and receives Message 2 followed by Message 1.

---

Hopefully I have interpreted gtully's explanation correctly and this is understandable.
, updated the doc: Message Ordering https://cwiki.apache.org/confluence/display/ACTIVEMQ/Stomp
to reflect the possibility of order inversion from a stomp client perspective. Ordering is based on the producer id generated at connection time.]