[I confirm that, into each broker experiencing java.lang.ArrayIndexOutOfBoundsException, there is as much number of exceptions as number of "bridge to ... stopped" messages., Since I see a lot of "imbrications" of 

at org.apache.activemq.openwire.OpenWireFormat.tightMarshalNestedObject1(OpenWireFormat.java:397)
        at org.apache.activemq.openwire.v6.BaseDataStreamMarshaller.tightMarshalNestedObject1(BaseDataStreamMarshaller.java:131)
        at org.apache.activemq.openwire.v6.BaseDataStreamMarshaller.tightMarshalObjectArray1(BaseDataStreamMarshaller.java:357)
        at org.apache.activemq.openwire.v6.BrokerInfoMarshaller.tightMarshal1(BrokerInfoMarshaller.java:106)

perhaps a "short" usage in the BooleanStream.writeBoolean is not enough to manage complexity of the message sent ?

public void writeBoolean(boolean value) throws IOException {
        if (bytePos == 0) {
            arrayLimit++;
            if (arrayLimit >= data.length) {
                // re-grow the array.
                byte d[] = new byte[data.length * 2];
                System.arraycopy(data, 0, d, 0, data.length);
                data = d;
            }
        }
        if (value) {
            data[arrayPos] |= 0x01 << bytePos;
        }
        bytePos++;
        if (bytePos >= 8) {
            bytePos = 0;
            arrayPos++;
        }
    }


            data[arrayPos] |= 0x01 << bytePos;

arrayPos would become too big and reached 32768 limit of the "short usage" into the BooleanStream object ? (8 * 32768 bits => 262144 individual informations to send)

We are in a complex network of brokers situation  (that will have to be far, far more complex for our needs in the future with more than 1000 servers and 4 imbricated networks of brokers)

Eric-AWL, Here is a Gary Tully's comment added on User discussion forum :

That looks like some concurrent access to the brokerInfos. Can you 
open a jira issue and attach as much relevant info about your setup as 
possible. 

I think the problem is in the 
org.apache.activemq.command.BrokerInfo#copy() method, it does not deep 
copy the brokerInfo array. 

Gary, what happened with "peerBrokerInfo" and BrokerInfoMarshaller if one broker A is "network connected" on broker B and broker B is connected on broker A  too ? It's our configuration.

eric-AWL

, TransportConnection.java 

start() in 5.4.1

public void start() throws Exception {
        starting = true;
        try {
            synchronized (this) {
                if (taskRunnerFactory != null) {
                    taskRunner = taskRunnerFactory.createTaskRunner(this, "ActiveMQ Connection Dispatcher: "
                            + getRemoteAddress());
                } else {
                    taskRunner = null;
                }
                transport.start();
                active = true;
                BrokerInfo info = connector.getBrokerInfo().copy();
                info.setPeerBrokerInfos(this.broker.getPeerBrokerInfos());
                dispatchAsync(info);
                
                connector.onStarted(this);
            }
        } catch (Exception e) {
            // Force clean up on an error starting up.
            stop();
            throw e;
        } finally {
            // stop() can be called from within the above block,
            // but we want to be sure start() completes before
            // stop() runs, so queue the stop until right now:
            starting = false;
            if (pendingStop) {
                LOG.debug("Calling the delayed stop()");
                stop();
            }
        }
    }


and start() in 5.3.2

public void start() throws Exception {
        starting = true;
        try {
            synchronized (this) {
                if (taskRunnerFactory != null) {
                    taskRunner = taskRunnerFactory.createTaskRunner(this, "ActiveMQ Connection Dispatcher: "
                            + getRemoteAddress());
                } else {
                    taskRunner = null;
                }
                transport.start();
                active = true;
                dispatchAsync(connector.getBrokerInfo());
                connector.onStarted(this);
            }
        } catch (Exception e) {
            // Force clean up on an error starting up.
            stop();
            throw e;
        } finally {
            // stop() can be called from within the above block,
            // but we want to be sure start() completes before
            // stop() runs, so queue the stop until right now:
            starting = false;
            if (pendingStop) {
                LOG.debug("Calling the delayed stop()");
                stop();
            }
        }
    }


BrokerInfo info = connector.getBrokerInfo().copy();
info.setPeerBrokerInfos(this.broker.getPeerBrokerInfos());
dispatchAsync(info);

vs

dispatchAsync(connector.getBrokerInfo());


I suspect the difference with what happened in 5.3.2 is here ...        
We are in a configuration with "no duplex connectors" where A is connected to B and B is connected to A.

Eric-AWL,  public Response processBrokerInfo(BrokerInfo info) {
        if (info.isSlaveBroker()) {
            BrokerService bService = connector.getBrokerService();
            // Do we only support passive slaves - or does the slave want to be
            // passive ?
            boolean passive = bService.isPassiveSlave() || info.isPassiveSlave();
            if (passive == false) {
                
                // stream messages from this broker (the master) to
                // the slave
                MutableBrokerFilter parent = (MutableBrokerFilter) broker.getAdaptor(MutableBrokerFilter.class);
                masterBroker = new MasterBroker(parent, transport);
                masterBroker.startProcessing();
            }
            LOG.info((passive?"Passive":"Active")+" Slave Broker " + info.getBrokerName() + " is attached");
            bService.slaveConnectionEstablished();
        } else if (info.isNetworkConnection() && info.isDuplexConnection()) {
            // so this TransportConnection is the rear end of a network bridge
            // We have been requested to create a two way pipe ...
            try {
                // We first look if existing network connection already exists for the same broker Id
                // It's possible in case of brief network fault to have this transport connector side of the connection always active
                // and the duplex network connector side wanting to open a new one
                // In this case, the old connection must be broken
                BrokerId	remoteBrokerId = info.getBrokerId();
                setDuplexRemoteBrokerId(remoteBrokerId);
                CopyOnWriteArrayList<TransportConnection> connections = this.connector.getConnections();
                for (Iterator<TransportConnection> iter = connections.iterator(); iter.hasNext();) {
            		TransportConnection c = iter.next();
                    if ((c != this) && (remoteBrokerId.equals(c.getDuplexRemoteBrokerId()))) {
                        LOG.warn("An existing duplex active connection already exists for this broker (" + remoteBrokerId + "). Stopping it.");
                        c.stop();
                    }
                }
                Properties properties = MarshallingSupport.stringToProperties(info.getNetworkProperties());
                Map<String, String> props = createMap(properties);
                NetworkBridgeConfiguration config = new NetworkBridgeConfiguration();
                IntrospectionSupport.setProperties(config, props, "");
                config.setBrokerName(broker.getBrokerName());
                URI uri = broker.getVmConnectorURI();
                HashMap<String, String> map = new HashMap<String, String>(URISupport.parseParameters(uri));
                map.put("network", "true");
                map.put("async", "false");
                uri = URISupport.createURIWithQuery(uri, URISupport.createQueryString(map));
                Transport localTransport = TransportFactory.connect(uri);
                Transport remoteBridgeTransport = new ResponseCorrelator(transport);
                duplexBridge = NetworkBridgeFactory.createBridge(config, localTransport, remoteBridgeTransport);
                duplexBridge.setBrokerService(broker.getBrokerService());
                // now turn duplex off this side
                info.setDuplexConnection(false);
                duplexBridge.setCreatedByDuplex(true);
                duplexBridge.duplexStart(this, brokerInfo, info);
                LOG.info("Created Duplex Bridge back to " + info.getBrokerName());
                return null;
            } catch (TransportDisposedIOException e) {
                LOG.warn("Duplex Bridge back to " + info.getBrokerName() + " was correctly stopped before it was correctly started.");
                return null;
            } catch (Exception e) {
                LOG.error("Creating duplex network bridge", e);
            }
        }
        // We only expect to get one broker info command per connection
        if (this.brokerInfo != null) {
            LOG.warn("Unexpected extra broker info command received: " + info);
        }
        this.brokerInfo = info;
        broker.addBroker(this, info);
        networkConnection = true;
        List<TransportConnectionState> connectionStates = listConnectionStates();
        for (TransportConnectionState cs : connectionStates) {
            cs.getContext().setNetworkConnection(true);
        }
        return null;
    }


=> broker.addBroker(this, info)

"info" object seems to become very big in the case of a lot of brokers with a lot of network connections between them . (That's our case !)

Why is it now necessary (since 5.4) for a "transport connector side" broker to export already established peer connections to each new "initator side (network connector)" broker ?

Eric-AWL, TransportConnection.java 

BrokerInfo info = connector.getBrokerInfo().copy();
info.setPeerBrokerInfos(this.broker.getPeerBrokerInfos());
dispatchAsync(info);


I think it is useful for Openwire v6 ConnectionControl (connectedBrokers). I don't find that ActiveMQ internal process need to know that broker A is connected to B that is connected to C, that is connected to D, that is connected to A .........

info.setPeerBrokerInfos(this.broker.getPeerBrokerInfos()) => Don't we need to break the BrokerInfo recursivity here, and only keep the first level of peerBrokers before sending it to the network connector side ????

We have a lot of brokers that are all connected together in the two ways with not duplex network connection.

Eric-AWL, yea, at a minimum there should be duplicate detection, only add one that is not already present.

If this is the root of your problem, it should be easy to create a test case that trys to serialize X brokerInfos, this should blow the boolean output stream.

Also, I think the propagation of peer broker infos should be configurable, it is used to let the clients know about the list of alternative brokers, so it should only be gathered if necessary. https://issues.apache.org/jira/browse/AMQ-2632

We need to get some test cases that can demonstrate this problem and can validate and protect the changes when it is fixed., If I add an algorithm that 
- adds only the first level of peerbrokers in  TransportConnection.start() instead of "info.setPeerBrokerInfos(this.broker.getPeerBrokerInfos());"
- detects that a peerbroker = current broker in TransportConnection.processBrokerInfo(....) before "broker.addBroker(this, info);"

Is it always compatible with "Automatic cluster update and rebalance" new 5.4 feature ?

(If it is the case, I will try to create specific test case too).

Eric-AWL, not sure on the first part, the first level restriction, I think that should be configurable because it is topology dependent.

great, patches with tests are always most welcome. There are a few update rebalance feature tests in activemq-core that will protect that feature with your changes. , mmmhhh.

I just added this into openwire/v6/BrokerInfoMarshaller.java

    public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException {
        super.tightUnmarshal(wireFormat, o, dataIn, bs);

        BrokerInfo info = (BrokerInfo)o;
        info.setBrokerId((org.apache.activemq.command.BrokerId) tightUnmarsalCachedObject(wireFormat, dataIn, bs));
        info.setBrokerURL(tightUnmarshalString(dataIn, bs));

        if (bs.readBoolean()) {
            short size = dataIn.readShort();
            org.apache.activemq.command.BrokerInfo value[] = new org.apache.activemq.command.BrokerInfo[size];
            for( int i=0; i < size; i++ ) {


                System.out.println("Nouveau sous-niveau : i = " + (i+1) +  "/(size = " + size + ")");

                value[i] = (org.apache.activemq.command.BrokerInfo) tightUnmarsalNestedObject(wireFormat,dataIn, bs);

                System.out.println("Fin du sous-niveau : i = " + (i+1) +  "/(size = " + size + ")");
            }
            info.setPeerBrokerInfos(value);
        }
        else {
            info.setPeerBrokerInfos(null);
        }

/* Eric Vincent remplacement 3 lignes a la place de la ligne suivante */
        String brokerName = tightUnmarshalString(dataIn, bs);
        System.out.println("BrokerInfo / BrokerName = " + brokerName);
        info.setBrokerName(brokerName);

/* Eric Vincent
        info.setBrokerName(tightUnmarshalString(dataIn, bs));
*/
        info.setSlaveBroker(bs.readBoolean());
        info.setMasterBroker(bs.readBoolean());
        info.setFaultTolerantConfiguration(bs.readBoolean());
        info.setDuplexConnection(bs.readBoolean());
        info.setNetworkConnection(bs.readBoolean());
        info.setConnectionId(tightUnmarshalLong(wireFormat, dataIn, bs));
        info.setBrokerUploadUrl(tightUnmarshalString(dataIn, bs));
        info.setNetworkProperties(tightUnmarshalString(dataIn, bs));

    }

And you will find in the log file I put into this thread, what I get with no more than 9 embedded brokers (4 sibBusModule, 1 busSupervisor, 2 servers) on 4 servers (td0sib[01,02][s,v] that are connected togethers with different network of brokers or direct connections.

I think that the current algorithm (without any level constraint) is not good at all for ActiveMQ global scalability.

I will try to change something, but I don't know exactly why it is necessary that each broker knows the global connection hierarchy beyond the first level... And when there are loops, I don't know what could happen ....

Eric-AWL

, the result of the launch of an embedded broker (sibBusModule-TestDeCharge-td0sib01s) 

when "busModule is alive", the jms connect to the embedded broker is OK , I forgot to say that all these brokers are not in the same network of brokers.

SIBBusModules brokers have similar activemq.xml configurations
Serveur brokers have similar activemq.xml configurations
SibBusSupervisor broker has a specific activemq.xml configuration.

, 3 activemq.xml attached., If this important change was made only to provide the "automatic dynamic failover" capability, it seems that a new concept (failover brokers with a specific discovery process) should be implemented instead of using standard network of brokers implementation....

Perhaps, it should be better to add a parameter in network of brokers definition, that specify that a network of brokers is dedicated for failover capability, and use a "ConcurrentHashMap<String, BrokerInfo[]> peerBrokers" in brokerInfo structure (String = the name of the network of broker) instead of a simple peerBrokers[] array ????

The problem is then completely different....

bsm.log shows us that on a small environment, we can receive a very big "BrokerInfo" message with doubles and potential loops. Our production environment is far more complex than this.  I'm quite convinced that it's why we get this "ArrayOutOfBoundsException" issue. (We have more than 262000 boolean values to code in the same BrokerInfo structure).

Unfortunately, I will be forced to indicate to production environment that we can not use the 5.4 version. It's a big problem for us, since I already added a patch for duplex network of brokers in 5.3.2 that is now integrated in 5.4 .

Eric-AWL, Is this an acceptable workaround, if I add in TransportConnection.java the condition below :


BrokerInfo info = connector.getBrokerInfo().copy();

if (this.connector.isUpdateClusterClients())
              info.setPeerBrokerInfos(this.broker.getPeerBrokerInfos());

dispatchAsync(info);

and tests it with Maven Tests to verify regressions ?

By this way, if the transport connector is not used for automatic failover purpose (this is the default), it will not export its own peer brokers.

Since I don't use this 5.4 new failover function, I think it will resolve our problem on our complex network of brokers architecture (with exchanges of too big brokerInfo objects), without changing anything for those who now want to use it ...

Eric-AWL, yes, I think the behavior should be conditional on isUpdateClusterClients, the other place that that condition should be checked is in org.apache.activemq.broker.TransportConnector#getConnectionControl() before the peer brokers are added to the connectedBrokers string, such that the info is only passed to clients if needed.

See previous comment and related issue ref: https://issues.apache.org/jira/browse/AMQ-3077?focusedCommentId=12971673&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#action_12971673

A patch, validated with mvn clean test in activemq-core would be great.

When that feature is enabled, we need to weed out duplicates from the list to ensure the list does not grow in cyclic networks. , Ok. 

I just changed the 2 places by adding the condition (isUpdateClusterClients()) and did a small test with my own traces. There are no longer a hierarchy of brokerInfo daughter structures, just the connected broker brokerInfo structure brokerName is written on standard output.

I will ask Jean-Marcel to patch our "big qualify environment" to validate that there is no longer ArrayOutOfBoundsException .

If maven tests are OK with these 2 small changes, do you consider that these 2 additional conditions will be integrated into future versions without any needs to program a specific new test to demonstrate anymore the problem ?, a test is the only way to protect your changes into the future. So I think a test is necessary. Think of it as an insurance policy to protect your use case, worth the premium of time that it takes to write., What is the simplest way to simulate a complex network of brokers situation in a small test ? (one JVM that launches X embedded brokers with one transport connector and the corresponding multicast network connector ?)

Is there an existing JUnit test that I can use as an initial pattern ?, something like org.apache.activemq.usecases.ThreeBrokerQueueNetworkTest is what you need. There are a bunch of tests that extend org.apache.activemq.JmsMultipleBrokersTestSupport to do that sort of thing., Patch (TransportConnection.java + TransportConnector.java) + test (20 brokers with specific stop/start), The patch consists in adding 2 conditions (isUpdateClusterClient()) on the BrokerInfo structure sent.

The test consists in
- starting 20 brokers with a transport connector and a network connector in a way all brokers are connected to the 19 other ones.
- stopping the 10 first ones
- restarting the 10 first ones.

Without the patch, the "arrayOutOfBoundsException" is raised during the 10 first ones are restarted  (loop ?).

This patch is just a workaround to be compatible with 5.3 version usage, and not a final solution of the identified problem

Eric-AWL, Hi Gary

Do you have some news for me about this problem after I provided a patch and a JUnit Test ? 

Thank you
Eric-AWL, Hi Gary

I wish you an happy new year. How can we progress together on this particular subject ? We use this patch on our test environment, and don't get anymore exceptions.

Eric-AWL, hny to you too. next step is to review your changes and test, then integrate them. I will hopefully get some time to do this in the next few days., Hi Gary

No news ?

Eric-AWL, I was able to reproduce the issue from your test, thanks. I am working on the fix. Part of the problem is that the peer broker info is duplicated on each networked broker. The other issue is that the peerBrokerInfo needs to be cleared before a list of peer brokers is created for propagation to a client or to a peer, as the second level information is not relevant at the moment.
Some of my tests are showing blocking with duplex network connector start and I want to get to the bottom of that before progressing further., Thank you for your information. I think this will be difficult to fully resolve since automatic failover cluster group concept is ambitious in architecture that is complex as ours  (with loops and a lot of connected brokers in duplex and non duplex).

Don't you think a specific new "dedicated failover network of brokers" (with discover mechanism) concept different from "duplex/non duplex network of brokers" used for scalability and role isolation, wouldn't be more easier to manage and program (instead of propagating the full network of brokers topology to each broker and associate them all, a role as potential failover broker)  ? So, failover and scalability/isolation problems would be totally distinguished.

All my brokers connected in my different network of brokers, have not the same role. So, in my architecture with a lot of brokers, even if I wanted to use failover, it should be good for me that I could decide by a dedicated discovery rule, what brokers in the global network of brokers, can be chosen as failover broker,and this, for each specific client to broker connection.

Eric-AWL, I agree. There is a bunch of relevant configuration around the cluster update feature, filters etc and it is configurable per transport connector. Also, the fact that currently the entire topology is propagated is wrong, part of the fix will limit the information to a single level., fix in r1058577

Fixed issue with duplication and size of collected peer broker info that was propagated around a network.
In a network a peer is the other end of a network bridge, such that a consumer can connect to it to get a chance at the same destinations. It is not a real peer ( as in a two way association) unless the network is duplex or there is another bridge in the opposite direction.
This is relevant for https://issues.apache.org/jira/browse/AMQ-2632, RE: Link as part of AMQ-2632: These fixes ensure that transport connector config (setRebalanceClusterClients, setUpdateClusterClients) is respected for cluster updates.
Also of note is the fact that the cluster members respect the oneway nature of a network connector (demand forwarding bridge). , Hi Gary

Thank you very much.

I don't fully understand. Do you mean, that there is a risk that problems appear with network of brokers with Duplex connections ?

Eric-AWL, no, what do u not understand?, We use ActiveMQ brokers with complex configuration (now we have around 50 brokers in production on 2 sites for a french electricity provider smart-meter project. Our final goal is between 100 and 1000 brokers on several sites, connected by several different network of brokers).

In some cases, we want to use duplex configuration : when there is an identified "client broker" that connects to an "applicative service provider broker" (example an "SMS gateway" that sends SMS to SMS operator and asynchronously send SMS corresponding notifications to client application) 

And in some other cases, we want to use two single half-duplex configurations (when the two brokers are simultaneously client and provider for some parts of a global applicative service).

My original test only showed that 20 brokers with 2 half-duplex configurations didn't work. The original test didn't try with duplex connections : a loop in peers configuration was created with 2 half-duplex connections, and this loop was the easier way to generate such exception for the test.

In production environment now, we only use 2 half-duplex connections everywhere (for our 50 brokers) with 5.3.2 version. 

We want to be able to use duplex connections, but a bug was discovered with duplex connections and "not straight" network outages (we corrected this bug together some months ago). So we looked for a stable 5.4 version ...

We won't use at all failover mechanism since (and to resume), all application has its own embedded broker.

Thank you.
Eric-AWL, Try a test with duplex connections to be sure, but I think you will be fine now., Does the 5.5-SNAPSHOT (download page) compiled today (January 14th), include the correction ?, yes., we are seeing this issue in production with 5.4.2. We have a network of brokers consisting of about 20 broker instances. What is the side effect of this issue? Lost data? Brokers dropped out of the broker network permanently?

Thanks for any comments., Hi guys,
I have the same problem using AMQ 5.4.2 on my production environment.
Is this problem critical? What are the side effects?
I can't use AMQ RC 5.5 in production.
Any suggestions?

Thanks, Hi

The problem could appear if you have a loop in your network of brokers topology. If it is not the case, it is likely that you won't be impacted at all.

Eric-AWL]