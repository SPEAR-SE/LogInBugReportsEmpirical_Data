[It appears that this is worse than I thought...

I just noticed an XA rollback due to an application exception (correct behavior) which should cause the message to be redelivered every 10 minutes for 2 hours (set via the ra.xml file) until the message is processed successfully...should happen on the first try.

At any rate, messages sent after the rollback are delivered to the connector with the same behavior as above: no XA is utilized, so the messages pile up on the server side., After poking around the activemq-ra code base a bit and looking through the log files detailing the failure of XA to come back after ActiveMQEndpointWorker.java calls into reconnect(JMSException error), I have a question that someone can hopefully shed some light on or some thoughts anyway.

From what I can see, the ServerSessionImpl which was active when the problem happened (XA rollback, or connection failure with the broker, or whatever else) removes itself from the ServerSessionPoolImpl (via removeFromPool) and the EndpointWorker will reconnect.  Shouldn't ALL the ServerSessionImpl objects cached in the pool be invalidated and removed so that new ServerSessions come into play with the new connections?  Is there some Tom-foolery with the reconnect that binds the new connection(s) into the XA some place?

Thanks for any input...
John, I am using Jencks 2.0/Geronimo along with ActiveMQ 5.0 RA.  I took a look into this issue and it looks like the session object stored by the idle ServerSessionImpl's are stale on reconnect and also do not seem to throw an Exception when session.run() is called (which would get them evicted from the pool).  I added a small bit of code in ActiveMQEndpointWorker to close and recreate the ServerSessionPool everytime we try to reconnect.  This is a little brute-force but it appears to work for us.

--- src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java    (revision 617232)
+++ src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java    (working copy)
@@ -230,6 +230,12 @@
         consumer = null;
         safeClose(connection);
         connection = null;
+
+        // recreating ServerSessionPool because existing sessions are dead
+        //
+        LOG.debug("Recreating ServerSessionPool");
+        serverSessionPool.close();
+        serverSessionPool = new ServerSessionPoolImpl(this, endpointActivationKey.getActivationSpec().getMaxSessionsIntValue());
     }
 



, Alex is right, the problem is that the _ActiveMQEndpointWorker_ calls _Connection.close()_ when it tries to re-connect to the broker. _ActiveMQConnection.close()_ will then stop message delivery on all its registered _Sessions_ by calling _ActiveMQSession.stop()_. Because of this the _Session.run()_ method invoked by _ServerSessionImpl.run()_ does not throw any exception but instead just doesn't do anything (and in particular does not deliver any messages to the _MessageListener_ registered with the _Session_).

I have modified the _ServerSessionImplTest_ test case to include a test for the _ServerSessionImpl_ to detect a stopped Session. I have tried to use Alex' diff in order to solve the problem but it didn't work for me. However, I have added some lines to _ServerSessionImpl_ to check if its Session is still running before calling its run() method. If it doesn't, the _ServerSessionImpl_ is marked as stale and will be evicted from the _ServerSessionPoolImpl_ using the _removeFromPool_ method  ... Pending messages are then dispatched to another (new) _ServerSessionImpl_ in the pool.

Kai, Fix for AMQ-1200, Fixed by SVN revision 650392]