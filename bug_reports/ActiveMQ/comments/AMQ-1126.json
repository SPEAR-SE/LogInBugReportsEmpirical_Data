[Hi,
    In this case the Message Listener is the MDB container not the individual MDB instances. MDB container is free to select any mdb instance to process the message it received.So I think  the JMSXGroupID has no significance here. I feel this is not a bug and can be closed. 

What is the opinion of others?.

Best Regards,
Anish Pathadan, Page 31, section 3.5.9 of the JMS Specification states:

JMSXGroupID and JMSXGroupSeq are standard properties clients should use if
they want to group messages. All providers must support them.

So I guess the real question is, what does it mean to support it?

I agree that the MDB container is the listener, and that it is free to dispatch messages to to which ever MDB instance it chooses.

However, what I think is broken is that it is dispatching them in parallel.  That is, it should, in my opinion, be handing out one message at a time, and not handing out another one until the first message is acknowledged, or its transaction is committed, for example.  In other words, it should finish one before sending another.

If it does not do this, then grouping has no semantic meaning or purpose with MDBs, at least that I can divine.

I would further point out that, in my opinion, the container is free to dispatch any one message, without respect to order, so long as the sequence number was not set.  If the sequence number and the group number are set, then the container should be handing a single MDB a single message for that group in the order defined by the sequence number.

Right now, when grouping and sequence numbers are used with MDBs, the messages are dispatched in sequence, but because the container does not wait for the first one to finish before dispatching the second one, the messages end up being processed simultaneously, and thread/execution priority determines which one finish first.  

For example, if you have a message that takes a long time to process (call it message A) and a message that takes a short amount of time to process (call it message B), and you group them and sequence them so that A is first and B is second, then with MDBs it is quite likely that B (the shorter one) will finish first.  I think, based on my understanding, that the container should dispatch message A, wait until it is 'complete', and then dispatch message B.

Whether they go to the same, or a different, MDB instances is really moot, and shouldn't matter a whit.

In my opinion part of the problem is that the spec is very vague on what, exactly, is meant by 'support' with respect to these two attributes.

I would love to hear from others on this subject.

-John
, Man.. I'm so glad I stumbled on this issue. I've been pulling my hair out over this.  I use JBoss 4.2.2 with the 5.1.0 activemq rar and I see that the RA completely ignores the group id.  we are using spring's jms:listener-container and not MDB's, but I see the exact same behavior.  I even have a unit test that exhibits this behavior using an vm://localhost broker on 5.1.0 and RC3 of 5.2.0

Based on the last comment from John,  I agree that the MDB container/spring container is real endoint of the queue and I don't care which MDB instance the message is delagated to, but the container should respect the grouping!, Sharath, If you can, please attach (see Attach File) your Junit test. thanks., Gary, I mispoke slightly.  The unit test I have does not use the RA, but a simple test with logging to show the group the message belongs to. I will attach that anyways, but not sure if that should be tied to this JIRA issue.  let me just clean it up a little since it is slightly cluttered at the moment.. should be attached in an hour or so, Here is a zip of a mvn project using spring.  It has a junit test with two tests in it.  

Both tests start out with sending some message to a same queue split across three different group ids (20 to group A, 10 to group B, 5 to group C).  My understanding of message groups leads me to believe that the messages within a group are delivered sequentially, but across the groups they are delivered in parallel.

If you look at the output of the unit tests, it does not seem to be the case. in many cases, it seems the messages get delivered in FIFO order ignoring groups entirely... in the listeners, I have setup various sleeps to simulate slow consumers.. When the message is from group C, the sleep time is small, and thus all 5 messages from group C should be delivered before the second message from group is delivered.. it does not seem to be the case

1 test uses the connection factory directly to setup message consumers, and another uses spring's listener container.  Neither seem to do what I expect. Maybe I just have something setup horribly incorrectly, but I've seen the exact same bahaviour using the RA.

some sample output...  (Sorry for the poorly configured logging)

{noformat} 
-------------------------------------------------------
 T E S T S
-------------------------------------------------------
Running com.test.MessageSenderServiceTest
Nov 21, 2008 1:58:01 PM org.apache.activemq.broker.BrokerService start
INFO: Using Persistence Adapter: AMQPersistenceAdapter(activemq-data\localhost)
Nov 21, 2008 1:58:02 PM org.apache.activemq.broker.BrokerService getBroker
INFO: ActiveMQ 5.1.0 JMS Message Broker (localhost) is starting
Nov 21, 2008 1:58:02 PM org.apache.activemq.broker.BrokerService getBroker
INFO: For help or more information please see: http://activemq.apache.org/
Nov 21, 2008 1:58:02 PM org.apache.activemq.store.amq.AMQPersistenceAdapter start
INFO: AMQStore starting using directory: activemq-data\localhost
Nov 21, 2008 1:58:02 PM org.apache.activemq.broker.jmx.ManagementContext$1 run
INFO: JMX consoles can connect to service:jmx:rmi:///jndi/rmi://localhost:1099/jmxrmi
Nov 21, 2008 1:58:02 PM org.apache.activemq.kaha.impl.KahaStore initialize
INFO: Kaha Store using data directory activemq-data\localhost\kr-store\state
Nov 21, 2008 1:58:02 PM org.apache.activemq.store.amq.AMQPersistenceAdapter start
INFO: Active data files: []
Nov 21, 2008 1:58:02 PM org.apache.activemq.kaha.impl.KahaStore initialize
INFO: Kaha Store using data directory activemq-data\localhost\kr-store\data
Nov 21, 2008 1:58:02 PM org.apache.activemq.broker.TransportConnector start
INFO: Connector vm://localhost Started
Nov 21, 2008 1:58:02 PM org.apache.activemq.broker.BrokerService start
INFO: ActiveMQ JMS Message Broker (localhost, ID:skomarla-2752-1227293882509-0:0) started
Nov 21, 2008 1:58:02 PM org.springframework.context.support.AbstractApplicationContext prepareRefresh
INFO: Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@1be0f0a: display name [org.springframework.context.support.ClassPathXmlA
i Nov 21 13:58:02 EST 2008]; root of context hierarchy
Nov 21, 2008 1:58:03 PM org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions
INFO: Loading XML bean definitions from file [C:\workspace\msg-group-test\target\classes\META-INF\springcontext-jms-listener.xml]
Nov 21, 2008 1:58:04 PM org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions
INFO: Loading XML bean definitions from file [C:\workspace\msg-group-test\target\classes\META-INF\springcontext-jms-sender.xml]
Nov 21, 2008 1:58:04 PM org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions
INFO: Loading XML bean definitions from file [C:\workspace\msg-group-test\target\classes\META-INF\springcontext-jms.xml]
Nov 21, 2008 1:58:04 PM org.springframework.context.support.AbstractApplicationContext obtainFreshBeanFactory
INFO: Bean factory for application context [org.springframework.context.support.ClassPathXmlApplicationContext@1be0f0a]: org.springframework.beans.factory.s
Nov 21, 2008 1:58:04 PM org.springframework.beans.factory.support.DefaultListableBeanFactory preInstantiateSingletons
INFO: Pre-instantiating singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@16f144c: defining beans [org.springframework.jms.
estListener,jmsTemplate,messageSenderService,jmsFactory]; root of factory hierarchy
Nov 21, 2008 1:58:05 PM com.test.MessageSenderServiceTest testDirectConnection
INFO: 20 messages sent to group A
Nov 21, 2008 1:58:05 PM com.test.MessageSenderServiceTest testDirectConnection
INFO: 10 messages sent to group B
Nov 21, 2008 1:58:05 PM com.test.MessageSenderServiceTest testDirectConnection
INFO: 5 messages sent to group C
Nov 21, 2008 1:58:05 PM com.test.MessageSenderServiceTest$Worker run
INFO: worker3 received msg A remaining 17
Nov 21, 2008 1:58:05 PM com.test.MessageSenderServiceTest$Worker run
INFO: worker1 received msg A remaining 19
Nov 21, 2008 1:58:05 PM com.test.MessageSenderServiceTest$Worker run
INFO: worker2 received msg A remaining 18
Nov 21, 2008 1:58:10 PM com.test.MessageSenderServiceTest$Worker run
INFO: worker2 received msg A remaining 16
Nov 21, 2008 1:58:10 PM com.test.MessageSenderServiceTest$Worker run
INFO: worker1 received msg A remaining 15
Nov 21, 2008 1:58:10 PM com.test.MessageSenderServiceTest$Worker run
INFO: worker3 received msg A remaining 14
Nov 21, 2008 1:58:15 PM com.test.MessageSenderServiceTest$Worker run
INFO: worker2 received msg A remaining 13
Nov 21, 2008 1:58:15 PM com.test.MessageSenderServiceTest$Worker run
INFO: worker1 received msg A remaining 12
Nov 21, 2008 1:58:15 PM com.test.MessageSenderServiceTest$Worker run
INFO: worker3 received msg A remaining 11
Nov 21, 2008 1:58:20 PM com.test.MessageSenderServiceTest$Worker run
INFO: worker2 received msg A remaining 10
Nov 21, 2008 1:58:20 PM com.test.MessageSenderServiceTest$Worker run
INFO: worker3 received msg A remaining 9
Nov 21, 2008 1:58:20 PM com.test.MessageSenderServiceTest$Worker run
INFO: worker1 received msg A remaining 8
Nov 21, 2008 1:58:25 PM com.test.MessageSenderServiceTest$Worker run
INFO: worker2 received msg A remaining 7
Nov 21, 2008 1:58:25 PM com.test.MessageSenderServiceTest$Worker run
INFO: worker1 received msg A remaining 6
Nov 21, 2008 1:58:25 PM com.test.MessageSenderServiceTest$Worker run
INFO: worker3 received msg A remaining 5
Nov 21, 2008 1:58:30 PM com.test.MessageSenderServiceTest$Worker run
INFO: worker2 received msg A remaining 4
Nov 21, 2008 1:58:30 PM com.test.MessageSenderServiceTest$Worker run
INFO: worker1 received msg A remaining 3
Nov 21, 2008 1:58:30 PM com.test.MessageSenderServiceTest$Worker run
INFO: worker3 received msg A remaining 2
Nov 21, 2008 1:58:35 PM com.test.MessageSenderServiceTest$Worker run
INFO: worker2 received msg A remaining 1
Nov 21, 2008 1:58:35 PM com.test.MessageSenderServiceTest$Worker run
INFO: worker1 received msg A remaining 0
Nov 21, 2008 1:58:35 PM com.test.MessageSenderServiceTest$Worker run
INFO: worker3 received msg B remaining 9
Nov 21, 2008 1:58:36 PM com.test.MessageSenderServiceTest$Worker run
INFO: worker3 received msg B remaining 8
Nov 21, 2008 1:58:37 PM com.test.MessageSenderServiceTest$Worker run
INFO: worker3 received msg B remaining 7
Nov 21, 2008 1:58:38 PM com.test.MessageSenderServiceTest$Worker run
INFO: worker3 received msg B remaining 6
Nov 21, 2008 1:58:39 PM com.test.MessageSenderServiceTest$Worker run
INFO: worker3 received msg B remaining 5
Nov 21, 2008 1:58:40 PM com.test.MessageSenderServiceTest$Worker run
INFO: worker2 received msg B remaining 4
Nov 21, 2008 1:58:40 PM com.test.MessageSenderServiceTest$Worker run
INFO: worker1 received msg B remaining 3
Nov 21, 2008 1:58:40 PM com.test.MessageSenderServiceTest$Worker run
INFO: worker3 received msg B remaining 2
Nov 21, 2008 1:58:41 PM com.test.MessageSenderServiceTest$Worker run
INFO: worker2 received msg B remaining 1
Nov 21, 2008 1:58:41 PM com.test.MessageSenderServiceTest$Worker run
INFO: worker1 received msg B remaining 0
Nov 21, 2008 1:58:41 PM com.test.MessageSenderServiceTest$Worker run
worker3 received msg C remaining 4
INFO: 100
Nov 21, 2008 1:58:41 PM com.test.MessageSenderServiceTest$Worker run
worker3 received msg C remaining 3
INFO: 100
Nov 21, 2008 1:58:41 PM com.test.MessageSenderServiceTest$Worker run
worker3 received msg C remaining 2
INFO: 100
worker2 received msg C remaining 1
Nov 21, 2008 1:58:42 PM com.test.MessageSenderServiceTest$Worker run
INFO: 100
worker1 received msg C remaining 0
Nov 21, 2008 1:58:42 PM com.test.MessageSenderServiceTest$Worker run
INFO: 100
Nov 21, 2008 1:58:42 PM com.test.impl.TestListenerImpl onMessage
INFO: Fri Nov 21 13:58:42 EST 2008 group: A
Nov 21, 2008 1:58:42 PM com.test.impl.TestListenerImpl onMessage
INFO: Fri Nov 21 13:58:42 EST 2008 group: A
Nov 21, 2008 1:58:42 PM com.test.impl.TestListenerImpl onMessage
INFO: Fri Nov 21 13:58:42 EST 2008 group: A
Nov 21, 2008 1:58:42 PM com.test.impl.TestListenerImpl onMessage
INFO: Fri Nov 21 13:58:42 EST 2008 group: A
Nov 21, 2008 1:58:42 PM com.test.impl.TestListenerImpl onMessage
INFO: Fri Nov 21 13:58:42 EST 2008 group: A
Nov 21, 2008 1:58:42 PM com.test.impl.TestListenerImpl onMessage
INFO: Fri Nov 21 13:58:42 EST 2008 group: A
Nov 21, 2008 1:58:42 PM com.test.MessageSenderServiceTest testSpringListenerContainer
INFO: 20 messages sent to group A
Nov 21, 2008 1:58:42 PM com.test.impl.TestListenerImpl onMessage
INFO: Fri Nov 21 13:58:42 EST 2008 group: A
Nov 21, 2008 1:58:42 PM com.test.impl.TestListenerImpl onMessage
INFO: Fri Nov 21 13:58:42 EST 2008 group: A
Nov 21, 2008 1:58:42 PM com.test.impl.TestListenerImpl onMessage
INFO: Fri Nov 21 13:58:42 EST 2008 group: A
Nov 21, 2008 1:58:42 PM com.test.MessageSenderServiceTest testSpringListenerContainer
INFO: 10 messages sent to group B
Nov 21, 2008 1:58:42 PM com.test.impl.TestListenerImpl onMessage
INFO: Fri Nov 21 13:58:42 EST 2008 group: A
Nov 21, 2008 1:58:42 PM com.test.MessageSenderServiceTest testSpringListenerContainer
INFO: 5 messages sent to group C
Nov 21, 2008 1:58:47 PM com.test.impl.TestListenerImpl onMessage
INFO: Fri Nov 21 13:58:47 EST 2008 group: A
Nov 21, 2008 1:58:47 PM com.test.impl.TestListenerImpl onMessage
INFO: Fri Nov 21 13:58:47 EST 2008 group: A
Nov 21, 2008 1:58:47 PM com.test.impl.TestListenerImpl onMessage
INFO: Fri Nov 21 13:58:47 EST 2008 group: A
Nov 21, 2008 1:58:47 PM com.test.impl.TestListenerImpl onMessage
INFO: Fri Nov 21 13:58:47 EST 2008 group: A
Nov 21, 2008 1:58:47 PM com.test.impl.TestListenerImpl onMessage
INFO: Fri Nov 21 13:58:47 EST 2008 group: A
Nov 21, 2008 1:58:47 PM com.test.impl.TestListenerImpl onMessage
INFO: Fri Nov 21 13:58:47 EST 2008 group: A
Nov 21, 2008 1:58:47 PM com.test.impl.TestListenerImpl onMessage
INFO: Fri Nov 21 13:58:47 EST 2008 group: A
Nov 21, 2008 1:58:47 PM com.test.impl.TestListenerImpl onMessage
INFO: Fri Nov 21 13:58:47 EST 2008 group: A
Nov 21, 2008 1:58:47 PM com.test.impl.TestListenerImpl onMessage
INFO: Fri Nov 21 13:58:47 EST 2008 group: A
Nov 21, 2008 1:58:47 PM com.test.impl.TestListenerImpl onMessage
INFO: Fri Nov 21 13:58:47 EST 2008 group: A
Nov 21, 2008 1:58:52 PM com.test.impl.TestListenerImpl onMessage
INFO: Fri Nov 21 13:58:52 EST 2008 group: B
Nov 21, 2008 1:58:52 PM com.test.impl.TestListenerImpl onMessage
INFO: Fri Nov 21 13:58:52 EST 2008 group: C
Nov 21, 2008 1:58:52 PM com.test.impl.TestListenerImpl onMessage
INFO: Fri Nov 21 13:58:52 EST 2008 group: B
Nov 21, 2008 1:58:52 PM com.test.impl.TestListenerImpl onMessage
INFO: Fri Nov 21 13:58:52 EST 2008 group: B
Nov 21, 2008 1:58:52 PM com.test.impl.TestListenerImpl onMessage
INFO: Fri Nov 21 13:58:52 EST 2008 group: B
Nov 21, 2008 1:58:52 PM com.test.impl.TestListenerImpl onMessage
INFO: Fri Nov 21 13:58:52 EST 2008 group: C
Nov 21, 2008 1:58:52 PM com.test.impl.TestListenerImpl onMessage
INFO: Fri Nov 21 13:58:52 EST 2008 group: C
Nov 21, 2008 1:58:52 PM com.test.impl.TestListenerImpl onMessage
INFO: Fri Nov 21 13:58:52 EST 2008 group: C
Nov 21, 2008 1:58:52 PM com.test.impl.TestListenerImpl onMessage
INFO: Fri Nov 21 13:58:52 EST 2008 group: C
Nov 21, 2008 1:58:53 PM com.test.impl.TestListenerImpl onMessage
INFO: Fri Nov 21 13:58:53 EST 2008 group: B
Nov 21, 2008 1:58:53 PM com.test.impl.TestListenerImpl onMessage
INFO: Fri Nov 21 13:58:53 EST 2008 group: B
Nov 21, 2008 1:58:53 PM com.test.impl.TestListenerImpl onMessage
INFO: Fri Nov 21 13:58:53 EST 2008 group: B
Nov 21, 2008 1:58:54 PM com.test.impl.TestListenerImpl onMessage
INFO: Fri Nov 21 13:58:54 EST 2008 group: B
Nov 21, 2008 1:58:54 PM com.test.impl.TestListenerImpl onMessage
INFO: Fri Nov 21 13:58:54 EST 2008 group: B

and on and on ....
{noformat} 

If I get the time today, I'll try to set something up that uses the RA directly (using the junit tests under activemq-ra as inspiration) to see if i can recreate a unit test dirctly using the RA code that exhibits the problem.

Thanks, After further research, I no longer believe this to be RA specific.  A colleague of mine has filed issue 2016, and I believe that to be the root cause of what I was seeing., I don't believe this is fixed with issue 2016.  I have downloaded the latest SNAPSHOT of 5.3 specifically for that issue since it was fixed in that release.  I was able to see using a simple producer/consumer, that message groups did work as advertised.  My consumer created 10 threads much like JBoss would do by default and create 10 instances of an MDB.  It just seems that message groups aren't working with JBoss 4.2.2 at least, I have tried any other version of JBoss.  I even noticed that the workaround discussed in issue 2016 doesn't work either (starting the consumers before any messages on the queue).  The workaround worked fine for the simple producer/consumer case, but just doesn't work with JBoss.  Has anyone looked into this?, we are in a similar situation .

we have network of brokers

Producers send to Broker 1,2 and 3
Brokers 1,2,3 forward messages to Broker 4

We are using apachemq 5.5 and Spring DMLC for listeners .
Broker 1,2,3 are hosted within tomcat container

Consumers consume from Broker 4

we have three consumers each receiving only a specific groupId using message selector expressions
JMSXGroupID='0' for consumer1
JMSXGroupID='1' for consumer2
JMSXGroupID='2' for consumer3

Producers tag these messages with JMSXGroupID and forward that to broker 4.

Issue is we are seeing  messages tagged with JMSXGroupID '0' are ending up in consumer2 or cosumer3,or JMSXGroupID '1' endign up in consumer 0 or 3

when we cut down our consumers to 2 and tag messages with 0 or 1 it works like a charm.

Can any help us with this issue?













, I too am facing the same issue with implementing message grouping with JBoss 4.0.3 and ActiveMQ 5.4.3. I have  addded the JMSXGroupID to the JMS mesage being sent from the producer. Also added below line in the broker-config.xml 

<policyEntry queue=">" consumersBeforeDispatchStarts="5" timeBeforeDispatchStarts="5000" prioritizedMessages="true"/>   

But when i try to send 2 groups of messages each group haing 5 messages each from a client, I find that the messages are consumed by differernt consumers(COnsumer in my case is an MDB  deployed in JBoss server. ActiveMQ started when JBoss starts). There are differernt instances of MDBs created for each message and all are processed in parallel. 

Altho' I expected that the messages in 1 group be processed by one particular consumer .i.e. one instance of MDB. 

Can you please help me out. I cant understand what I might be doing incorrectly here 

, Hi Rich,

Im stuck with a similar situation. Did u get any fix or alternate way for this issue?

Farheen, No we actually stopped using ActiveMQ so basically my problem went away., Anyone care to try with the 5.6.0 or 5.7-SNAPSHOT release (5.7 is on the way soon). 

Would be nice to know the status of this in the latest release. If its still an issue we can put it on the roadmap to get fixed., This does still exist in the latest release RAR 5.8.0. However a workaround, or possible solution, is to create an MDB for each group. 

We found that when you have more than MDB listening to the same queue, each MDB pool acts as a unique consumer for message grouping. That is once an instance from the MDB pool picks up a message from group 1, all subsequent messages for group 1 are picked up by an instance in the same pool., We found that message sequencing is not working correctly when using the above approach. Therefore we suggest that there is a bug still in the Resource Adapter.

We tested using:
JBoss EAP 6.0.1
ActiveMQ RAR 5.8.0

I have attached a test case (amq_reproducer.zip) which demonstrates the issue in that environment. Here is how it works:


    amq_reproducer.zip:
        test_amq.jar
        test_amq_web.war
    activemq-rar-5.8.0.rar 1
    Changes required in standalone-full.xml for registering activemq resource adapter

{code:xml}

 <subsystem xmlns="urn:jboss:domain:resource-adapters:1.0">
            <resource-adapters>
                <resource-adapter>
                    <archive>
                        activemq-rar-5.8.0.rar
                    </archive>
                    <transaction-support>XATransaction</transaction-support>
                    <config-property name="UseInboundSession">
                        false
                    </config-property>
                    <config-property name="Password">
                        defaultPassword
                    </config-property>
                    <config-property name="UserName">
                        defaultUser
                    </config-property>
                    <config-property name="ServerUrl">
                        vm://localhost
                    </config-property>
                    <connection-definitions>
                        <connection-definition class-name="org.apache.activemq.ra.ActiveMQManagedConnectionFactory" 
jndi-name="java:jboss/ConnectionFactory" enabled="true" pool-name="ConnectionFactory">
                            <xa-pool>
                                <min-pool-size>1</min-pool-size>
                                <max-pool-size>20</max-pool-size>
                            </xa-pool>
                        </connection-definition>
                    </connection-definitions>
                    <admin-objects>
                        <admin-object class-name="org.apache.activemq.command.ActiveMQQueue" 
jndi-name="java:jboss/queue/MyActiveMQQueue" use-java-context="true" pool-name="MyActiveMQQueue">
                            <config-property name="PhysicalName">
                                QueuePhysicalName
                            </config-property>
                        </admin-object>
                    </admin-objects>
                </resource-adapter>
            </resource-adapters>
        </subsystem>
{code}
test_amq.jar
This jar contains two group of MDBs. Three MDBs (AMQTestMDB*) are consumer for AMQ queue QueuePhysicalName (defined in standalone-ha.xml). The other three MDBs (HornetQTestMDB*) are consumer for HornetQ (default implementation) queue queue/HornetQMDBQueue (defined in war's hornetq-jms.xml).

The onMessage method call following simple logic
{code:borderStyle=solid}

public void handleMessage(String id, TextMessage tm) {
        try {
            String logMsg = id + " Testing MDB : " + tm.getText()
                    + ", " + this.toString();
            System.out.println(logMsg);
            if (tm.getText().startsWith("Hello")) {
                // simulate heavy processing of first message
                long sec = 5;
                System.out.println(logMsg + " - Heavy processing for " + sec
                        + " seconds. " + tm.getText() + ", " + this.toString());
                Random r = new Random();
                for (long stop = System.nanoTime()
                        + TimeUnit.SECONDS.toNanos(5); stop > System.nanoTime();) {
                    r.nextDouble();
                }
                System.out.println(logMsg + " Done!");
            }

        } catch (JMSException e) {
            e.printStackTrace();
        }
    }
{code}
test_amq_web.war
This war contains clients for the test queues. /test tests AMQ. /test2 tests HornetQ. Following is the logic used:
{code:borderStyle=solid}
    for (int i = 0; i < 5; i++) {
        msg.setText("Hello " + i + "[" + groupName + "]");
        msg2.setText("World " + i + "[" + groupName + "]");

        if (useGroup) {
            msg.setStringProperty("JMSXGroupID", groupName);
            msg2.setStringProperty("JMSXGroupID", groupName);
        }

        qsender.send(msg);
        qsender.send(msg2);
    }
{code}
Each servlet creates 5 threads. Each thread creates two text messages and sends it out 5 times.

Executing test cases
- ActiveMQ test: http://localhost:8080/test_amq_web/test
- ActiveMQ test without JMSXGroupID: http://localhost:8080/test_amq_web/test?group=false
- HornetQ test: http://localhost:8080/test_amq_web/test2
- HornetQ test without JMSXGroupID: http://localhost:8080/test_amq_web/test2?group=false

Results:

When invoking the test_amq_web/test we can see that messages using the same message group are not being processed sequentially. In the logs we get messages in this order:
{code}
15:00:47,031 INFO  [stdout] (default-threads - 7) Consume-AMQ3 Testing MDB : Hello 0[Group-1], com.redhat.gss.test.HandleMessage@53e59730
15:00:47,032 INFO  [stdout] (default-threads - 7) Consume-AMQ3 Testing MDB : Hello 0[Group-1], com.redhat.gss.test.HandleMessage@53e59730 - Heavy processing for 5 seconds. Hello 0[Group-1], com.redhat.gss.test.HandleMessage@53e59730
...
15:00:47,066 INFO  [stdout] (default-threads - 12) Consume-AMQ3 Testing MDB : World 0[Group-1], com.redhat.gss.test.HandleMessage@5418f143
...
15:00:52,035 INFO  [stdout] (default-threads - 7) Consume-AMQ3 Testing MDB : Hello 0[Group-1], com.redhat.gss.test.HandleMessage@53e59730 Done!
{code}
However when invoking test_amq_web/test2 (which uses HornetQ) we can see that the message are being processed sequentially:
{code}
15:08:35,740 INFO  [stdout] (Thread-1 (HornetQ-client-global-threads-1277578712)) Consume-HQ1 Testing MDB : Hello 0[Group-0], com.redhat.gss.test.HandleMessage@67092e88
15:08:35,744 INFO  [stdout] (Thread-1 (HornetQ-client-global-threads-1277578712)) Consume-HQ1 Testing MDB : Hello 0[Group-0], com.redhat.gss.test.HandleMessage@67092e88 - Heavy processing for 5 seconds. Hello 0[Group-0], com.redhat.gss.test.HandleMessage@67092e88
...
15:08:40,784 INFO  [stdout] (Thread-0 (HornetQ-client-global-threads-1277578712)) Consume-HQ3 Testing MDB : Hello 0[Group-3], com.redhat.gss.test.HandleMessage@bce1791 Done!
15:08:40,788 INFO  [stdout] (Thread-0 (HornetQ-client-global-threads-1277578712)) Consume-HQ3 Testing MDB : World 0[Group-3], com.redhat.gss.test.HandleMessage@5e8ace0e
{code}, Reported on Enterprise MQ 7.1.0 

https://fusesource.com/issues/browse/ENTMQ-261, I was able to get this running 5.10 RAR using maxSessions=1 and creating the desired amount of MDBs. (Prefetch can be set to higher than 1.)

Still the grouping is not honoured in case of errors, in order to solve that, you need the solution for this: AMQ-5400, So is there any progress on this matter?]