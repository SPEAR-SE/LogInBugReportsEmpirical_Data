[As a side note, and not relevant to this issue, let me explain why soTimeout=0 is a bad default value

Lets say you have a connection between a consumer and the AMQ server, that connections gets terminated.

When a socket is closed, it doesn't really mean its closed - this is explained in:
http://java.sun.com/j2se/1.5.0/docs/guide/net/articles/connection_release.html

On the server the following will happen

yy.yy.yy.yy.61616    xx.xx.xx.xx.44674    49152      0 49330      0 CLOSE_WAIT

And inside of the AMQ you'll see the following stack trace
"ActiveMQ Transport: tcp:///xx.xx.xx.xx:44674" daemon prio=4 tid=0x002ebc88 nid=0x2a runnable [0xd10ff000..0xd10ffc70]
        at java.net.SocketOutputStream.socketWrite0(Native Method)
        at java.net.SocketOutputStream.socketWrite(SocketOutputStream.java:92)
        at java.net.SocketOutputStream.write(SocketOutputStream.java:136)
        at org.apache.activemq.transport.tcp.TcpBufferedOutputStream.flush(TcpBufferedOutputStream.java:105)
        at java.io.DataOutputStream.flush(DataOutputStream.java:106)
        at org.apache.activemq.transport.tcp.TcpTransport.oneway(TcpTransport.java:154)
        at org.apache.activemq.transport.InactivityMonitor.oneway(InactivityMonitor.java:157)
        - locked <0xd8775fc0> (a org.apache.activemq.transport.InactivityMonitor$2)
        at org.apache.activemq.transport.TransportFilter.oneway(TransportFilter.java:82)
        at org.apache.activemq.transport.WireFormatNegotiator.oneway(WireFormatNegotiator.java:91)
        at org.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:40)
        - locked <0xd8775da8> (a java.lang.Object)
        at org.apache.activemq.broker.TransportConnection.dispatch(TransportConnection.java:1151)
        at org.apache.activemq.broker.TransportConnection.processDispatch(TransportConnection.java:766)
        at org.apache.activemq.broker.TransportConnection.dispatchSync(TransportConnection.java:727)

please remember, the client is no longer connected, and is no longer reading data. The server now has a CLOSE_WAIT connection and a thread that is stuck in this state.
The socketWrite0 will only return after a TCP packets has moved on the connection (which it wont since the client is no longer present) or until it times out (which it wont since soTimeout is 0)

As you can see this thread is also holding a bunch of locks, some of these interfer with other server threads, causing the system to display systems of being hung. The only work around ar this point is to restart the AMQ server.

Hope this makes sense. My recommendation would be to have a >0 soTimeout value as default, (and the property name be documented properly of course:) )

best
Filip, Looks like the problems go further than just the documentation being incorrect. On the server, it the soTimeout setting wont take into effect unless you use transport.soTimeout property.
However, trying to apply this setting to a client URL, the system bombs out
Caused by: java.lang.IllegalArgumentException: Invalid connect parameters: {transport.soTimeout=180000}
    at org.apache.activemq.transport.TransportFactory.doConnect(TransportFactory.java:133)
    at org.apache.activemq.transport.TransportFactory.doConnect(TransportFactory.java:47)
    at org.apache.activemq.transport.TransportFactory.connect(TransportFactory.java:76)
    at org.apache.activemq.ActiveMQConnectionFactory.createTransport(ActiveMQConnectionFactory.java:235)

then it would probably be better to just allow the property soTimeout, but it looks like the entire socket property settings need to have a look over, since there is no consistent way of setting these properties. And because the soTimeout property is not set, the whoe server locks up if there is a client that is deciding to stop receiving data.

, Example of how to make the soTimeout property work on the server, Example of how to make the soTimeout work for the server, one must of course verify that the client is picking up the option too, Thanks Filip - applied the patch in SVN revision 685808, Rob, looks like I wrote the patch with my head up my rear,

this

+            options.put("soTimeout", Integer.valueOf(soTimeout));
+            options.put("soTimeout", Integer.valueOf(soTimeout));
+            options.put("connectionTimeout", Integer.valueOf(socketBufferSize));

should be

+            options.put("soTimeout", Integer.valueOf(soTimeout));
+            options.put("socketBufferSize", Integer.valueOf(socketBufferSize));
+            options.put("connectionTimeout", Integer.valueOf(connectionTimeout));, See previous note, copy paste error in the included patch, no problem! - updated in SVN revision 691129, Hi,

Why, unlike proposed  Filip, the soTimeout is still at 0 by default?

This is from the current documentation at http://activemq.apache.org/tcp-transport-reference.html

I had a quick look at the 5.4.2 code and I see that TcpTransportServer.configureServerSocket() sets soTimeout to 2000 and is called in TcpTransportServer.bind() which is itself used by TransportServer.doBind(). I stopped there, so maybe I'm missing something..., The default for client transports and server side accepted connections (and underlying transports) is still 0, configureServerSocket is a bit of an anomaly, it applies to just the listen socket, the socket that does an accept loop such that the accept thread won't block a shutdown.

There is a distinction on the server/broker side between the listen transport and accepted transports (new connections).

Transport options on the broker side that need to be applied to newly accepted connections need to use the "transport." prefix. without the prefix, they are applied just to the listener., Thanks Garry,

This helped much :), Just one question more,

When in activemq.xml I put
{code}
<transportConnector name="openwire" uri="tcp://0.0.0.0:61616?transport.soTimeout=60000"/>
{code}

I don't see anymore information dynamically changing at http://server:8161/admin/topics.jsp (we use a topic to broadcast), is it normal?
I checked with lsof and netstat there are connections created and removed. 

, OK Forget my question, it's actually dynamically changing but far, far less than before...

I think I will have some other questions but I have to check how our application (based on Apache OFBiz which uses JNDI to connect to the broker) handles some parts before, OK, it's all clear, thanks again]