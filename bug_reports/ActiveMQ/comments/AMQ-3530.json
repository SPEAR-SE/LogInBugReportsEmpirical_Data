[deadlock.tar.gz contains the mvn project that demonstrates the issue., Hi,

Here's my attempt at providing a patch for the issue we are encountering (this is based on the 5.5.0 source - https://svn.apache.org/repos/asf/activemq/tags/activemq-5.5.0/).  I have run mvn test across the activemq 5.5.0 code base; with the patch applied; and I get the same test results as when running the test suite without the patches applied.

Please let me know if there is more information you require.

Thanks
/dom, Have you tried the trunk code?  The next release will come from there so any patches would need to be applicable to that code and there's been a lot of changes since 5.5 was released., Hi there,

- I checked out trunk
- build trunk
- ran the deadlock code.

I'm still seeing the deadlock occur with trunk.  I'll see if I can apply the patches provided to trunk locally and run the deadlock replication again and report back.

cheers
/dom, Hi,

I applied the patches to trunk locally (the same patches as detailed in the *.patch.txt(s) attached); and ran the deadlock replication code.  With the patches applied I do not see the deadlock.  I'm currently running the unit test suite locally, to see if there's any regression caused due to this patch (not that this is a 100% guarantee).  

As the unit test suite takes a rather long time to execute; I'll report back later on.

cheers
/dom, Hi there,

Sorry for the delay in getting back (takes a while to run the suites).  I ran the unit tests for:

- vanilla trunk (no patches)
- patched trunk

The 3 tests that consistently failed in both the vanilla and patched version are:

- org.apache.activemq.bugs.AMQ2983Test 
- org.apache.activemq.transport.stomp.StompNIOSSLTest  
- org.apache.activemq.transport.vm.VmTransportNetworkBrokerTest

----

All tests that passed in vanilla passed in the patched version.  Obviously this is not a 100% guarantee that the patches don't break anything; but some way there.  I'll leave you to look them over.

Please get back to me if you have any questions
thanks
/dom, I noticed that the patch to FilePendingMessageCursor as attached is irrelevant; so it can be ignored.  I tested without that patch to FilePendingMessageCursor applied, and the deadlock doesn't occur (The other two patches are required in order to avoid the deadlock).  

(FilePendingMessageCursor is irrelevant as the patch is for non deadlocking of the <storeCursor/> when using non persistent messages to a virtual topic, whilst restricting temp disk space.  The deadlocking of <fileQueueCursor/> still occurs with the same scenario and the applied patches; and I have no found a valid solution to this.  However, having one cursor free from deadlock is workable for our current use of AMQ)

cheers,
/dom

, Any news on this?
Thanks
/dom, Updated StoreQueueCursor patch (StoreQueueCursor.java and StoreQueueCursor.patch.txt), so that the pendingCount is reduced if a ResourceAllocationException is thrown, otherwise it is updated; and not reduced if the error is throw.

(deadlock still occurs on trunk, tested on 5.5.1 (fuse distro 551-fuse-01-20))

thanks
/dom, Hi,

Sorry, just noticed I've been a Muppet, and noticed that the problem is exactly as described in the following:

http://tmielke.blogspot.com/2011/02/observations-on-activemqs-temp-storage.html

Where the temp limit should never be set lower than the journal file size; due to the fact that the 1st temp file doesn't get removed.

The unit tests provided had exactly this issue, and didn't set the max journal size:
{noformat}
        tempStore.setJournalMaxFileLength((1024*1024)*2);
{noformat}

And as a result the default 32mb, and the temp store was 10mb; resulting in the issue as described.

Upon setting the journal length to 2mb in the test; all worked as expect; no issues at all.

Apologies
/dom]