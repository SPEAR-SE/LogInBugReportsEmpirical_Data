[I've experienced a similar issue using V1.5: I'm starting the application using classworlds and building the class loader structure in code. What I've observed is that when I run my application using a script file that just invokes the classworlds jar as the argument to java it works fine, however if I invoke it from within the java service wrapper I receive the error

javax.jms.JMSException: failed to build body from bytes
     at org.codehaus.activemq.message.ActiveMQObjectMessage.getObject(ActiveMQObjectMessage.java:163)
     at com.simpleeye.routing.BasicRouterService$multicastSubscriber.onMessage(BasicRouterService.java:362)
     at org.codehaus.activemq.ActiveMQMessageConsumer.processMessage(ActiveMQMessageConsumer.java:397)
     at org.codehaus.activemq.ActiveMQSessionExecutor.run(ActiveMQSessionExecutor.java:79)
     at java.lang.Thread.run(Unknown Source)

After some exploration it turns out that the problem is dependent upon the working folder: if I reconfigure the service wrapper to use the same working directory as the batch file, it works fine (oddly enough, I experienced similar difficulties with JavaMail), so it seems there is some dependency between the working folder and the serialization/deserialization. A cursory glance at the ActiveMW source code didn't really enlighten me, but is there some specific property or configuration file that depends upon the relative location (with respect to the JVM's working directory) of the Active MQ jar files., Any chance you could double check this is still an issue in 3.0-SNAPSHOT? We've added a number of fixes for serialization with different class loaders - this issue could now be resolved, I'm assuming this issue is resolved unless you let me know otherwise as we've seen the same issue as well and its now fixed from our tests at least]