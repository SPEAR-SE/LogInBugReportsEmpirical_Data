[Given that in the stack trace this exception is being caused inside the backport-util-concurrent code (and there is no ActiveMQ code involved) I'm wondering if this is due to

http://jira.activemq.org/jira/browse/AMQ-605, We've just fixed AMQ-605 - I wonder if you can try reproduce the issue using the latest SVN code? (e.g. using tomorrow's SNAPSHOT build), I've not heard back so am assuming this is now resolved due to the upgrade of backport-util-concurrent.jar. Please let us know if you are still having problems and we can reopen this issue again, Using:
---------
backport-util-concurrent-2.1.jar
activemq-core-4.0.jar
activemq-ra-4.0.jar
jencks-all-1.1.3.jar

broker.xml:
---------------
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://activemq.org/config/1.0">
  <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"/>

  <broker useJmx="false" persistent="false">

<!--
    <persistenceAdapter>
      <journaledJDBC journalLogFiles="5" dataDirectory="foo"/>
    </persistenceAdapter>
-->

    <transportConnectors>
      <transportConnector uri="tcp://localhost:51616"/>
    </transportConnectors>

  </broker>

</beans>

Exception when shutting down tomcat:
----------------------------------------------------

tomcat@jupiter:~/dev/env/apache-tomcat-5.5.15/bin$ ./shutdown.sh
Using CATALINA_BASE:   /home/tomcat/dev/env/apache-tomcat-5.5.15
Using CATALINA_HOME:   /home/tomcat/dev/env/apache-tomcat-5.5.15
Using CATALINA_TMPDIR: /home/tomcat/dev/env/apache-tomcat-5.5.15/temp
Using JRE_HOME:       /usr/lib/j2sdk1.5-sun
Jun 22, 2006 4:53:19 PM org.apache.coyote.http11.Http11BaseProtocol pause
INFO: Pausing Coyote HTTP/1.1 on http-8080
tomcat@jupiter:~/dev/env/apache-tomcat-5.5.15/bin$ Jun 22, 2006 4:53:20 PM org.a
pache.catalina.core.StandardService stop
INFO: Stopping service Catalina
Jun 22, 2006 4:53:22 PM org.apache.coyote.http11.Http11BaseProtocol destroy
INFO: Stopping Coyote HTTP/1.1 on http-8080
Jun 22, 2006 4:53:22 PM org.apache.catalina.core.AprLifecycleListener lifecycleE
vent
INFO: Failed shutdown of Apache Portable Runtime
Exception in thread "AcitveMQ Connection Worker: tcp://localhost/127.0.0.1:51616
" Exception in thread "AcitveMQ Connection Worker: tcp://localhost/127.0.0.1:516
16" java.lang.NullPointerException
        at edu.emory.mathcs.backport.java.util.concurrent.helpers.Utils$SunPerfP
rovider.nanoTime(Utils.java:223)
Exception in thread "AcitveMQ Connection Worker: tcp://localhost/127.0.0.1:51616
"       at edu.emory.mathcs.backport.java.util.concurrent.helpers.Utils.nanoTime
(Utils.java:103)
        at edu.emory.mathcs.backport.java.util.concurrent.LinkedBlockingQueue.po
ll(LinkedBlockingQueue.java:336)
        at edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor.get
Task(ThreadPoolExecutor.java:482)
        at edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor$Wor
ker.run(ThreadPoolExecutor.java:674)
Exception in thread "AcitveMQ Connection Worker: tcp://localhost/127.0.0.1:51616
"       at java.lang.Thread.run(Thread.java:595)
java.lang.NullPointerException
        at edu.emory.mathcs.backport.java.util.concurrent.helpers.Utils$SunPerfP
rovider.nanoTime(Utils.java:223)
        at edu.emory.mathcs.backport.java.util.concurrent.helpers.Utils.nanoTime
(Utils.java:103)
Exception in thread "AcitveMQ Connection Worker: tcp://localhost/127.0.0.1:51616
"       at edu.emory.mathcs.backport.java.util.concurrent.LinkedBlockingQueue.po
ll(LinkedBlockingQueue.java:336)
        at edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor.get
Task(ThreadPoolExecutor.java:482)
        at edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor$Wor, This one is *really* weird so I decided to ask Dawid Kurzyniec what might cause this. Here's his reply:

Dawid Kurzyniec wrote:
> Holger HoffstÃ¤tte wrote:
>> Hello Dawid -
>>
>> Could you please have a quick look at
>> https://issues.apache.org/activemq/browse/AMQ-528 and maybe post a
>> comment if you have any idea what might be going wrong there? It's very weird.
>>
> 
> I think the exception may be originating from native code
> (perf.highResCounter()). I suppose that something is freed in the JVM in
> the course of the shutdown, making it respond badly to highResCounter
> and resulting in the exception. (I've seen some analogous behavior with
> Java 1.4 logging: the loggers won't initialize during shutdown, so they
> won't print anything unless they did before the shutdown initiated).
> 
> If this is the case, there's not much there can be done about it, except
> 1) trying a different JVM, or 2) switching to a different NanoTimer (for
> instance,
>-Dedu.emory.mathcs.backport.java.util.concurrent.NanoTimerProvider=edu.emory.mathcs.backport.java.util.concurrent.helpers.Utils.MillisProvider,
> or to use a custom nanotimer if you need more than ms granularity).
> 
> Regards,
> Dawid
> 

I'll try to see if the native JDK 1.5 nanoTimer could be used dynamically; this might help. The other thing that the stack traces show is that the queue in question is the work queue of an ExecutorService, so it seems to me that properly shutting down that service would also solve the problem of the timer going away prematurely.
, Quick follow-up:

>> Thanks a lot for clearing this up. Would it be possible for the nanoTimer
>> to discover the native JDK 1.5 timer when running on JDK 1.5+? That would
>> not help with the bug on JDK 1.4 but it could be a start. I guess with
>> more people using the backport but running on JDK 1.5 anyway this
>> would be
>> nice to have.
>>   
> Yes; in fact, I am planning to create a version of the backport for 1.5
> that would perform with native speed (using native atomics etc). Next
> release of the backport will probably have that.
> 
>> I guess another way would be to prevent the queues (further up the stack)
>> from running before the timer is shut down internally and gets a
>> chance to explode.
>>   
> 
> That would probably work, if you can ensure it.
> 
> Regards,
> Dawid

So it seems a proper shutdown of the Executor will solve this.
, Holger wrote:

> So it seems a proper shutdown of the Executor will solve this.

Is this something that can be done from the application code? 
or do I have to wait for the new version of the backport-*.jar? what's the ETA if I may ask?

I tried to use the backport MillisProvider but I can't get the JVM to see the class (ClassNotFoundException) no matter where i put the backport*.jar file (I even tried it in tomcat's /shared/lib and it still can't find the class).  Yet the class is there, albeit it looks like an inner class (??)

Until Sun releases the next jvm after 1.5_06 for Linux, I don't have any other JVM to go to.
, Note: I'm not a dev on AMQ or the backport; I just use them myself.

>Is this something that can be done from the application code?

No, it is a bug in ActiveMQ (as far as I can tell) so it needs to be fixed there.

Holger
, Ajusted target fix version so that it shows up on the roadmap right., Hi Holger,

Do you have a patch that you think might fix this issue?  I've never seen this bug so without a test case to reproduce it's going to be hard to build a fix for it., I did not originally experience this bug and don't have a fix for it - I just got curious what might be causing the NPE inside the backport. However if you read my mail exchange with Dawid it seems to me that the problem is a GC race on shutdown between the deallocated timer and the Executor that has not yet been shut down properly. Obviously it is difficult to devise a "simple" test case & patch for a GC race, however it seems obvious from the stack trace that there's a still-running Executor somewhere that tries to use the freed counter. This is a typical problem with the badly designed VM shutdownHook mechanism which does not allow for dependenies or hook ordering. (admittedly this is a difficult problem)
So long story short, no I don't know what to do. You can try to run the "main" AMQ shutdown hook with a higher priority but that is not what I would call reliable.
, I'm hopeful this issue is resolevd in 4.2 as we'll be using Java 5's concurrent libraries and not rely on issues in backport-util-concurrent. Do let us know if it shows up again and we can reopen]