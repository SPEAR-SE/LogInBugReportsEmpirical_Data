[Re-pasting the deadlock information; it was garbled in the last copy-and-paste.

Found one Java-level deadlock:
=============================
"StartRemotelBridge: localBroker=vm://peer-nw2#2":
  waiting to lock monitor 0x0000000044796938 (object 0x00002aaac2df83c8, a java.lang.Object),
  which is held by "ActiveMQ Failover Worker: 169776139"
"ActiveMQ Failover Worker: 169776139":
  waiting to lock monitor 0x00002aaac470f0b0 (object 0x00002aaac2df7c50, a org.apache.activemq.network.DurableConduitBridge),
  which is held by "StartRemotelBridge: localBroker=vm://peer-nw2#2"

Java stack information for the threads listed above:
===================================================
"StartRemotelBridge: localBroker=vm://peer-nw2#2":
        at org.apache.activemq.transport.failover.FailoverTransport.oneway(FailoverTransport.java:477)
        - waiting to lock <0x00002aaac2df83c8> (a java.lang.Object)
        at org.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:40)
        - locked <0x00002aaac2e050f8> (a java.lang.Object)
        at org.apache.activemq.transport.ResponseCorrelator.oneway(ResponseCorrelator.java:60)
        at org.apache.activemq.network.DemandForwardingBridgeSupport.startRemoteBridge(DemandForwardingBridgeSupport.java:352)
        - locked <0x00002aaac2df7c50> (a org.apache.activemq.network.DurableConduitBridge)
        at org.apache.activemq.network.DemandForwardingBridgeSupport$4.run(DemandForwardingBridgeSupport.java:277)
        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
        at java.lang.Thread.run(Thread.java:662)
"ActiveMQ Failover Worker: 169776139":
        at org.apache.activemq.network.DemandForwardingBridgeSupport.startLocalBridge(DemandForwardingBridgeSupport.java:290)
        - waiting to lock <0x00002aaac2df7c50> (a org.apache.activemq.network.DurableConduitBridge)
        at org.apache.activemq.network.DemandForwardingBridgeSupport$2.transportResumed(DemandForwardingBridgeSupport.java:220)
        at org.apache.activemq.transport.TransportFilter.transportResumed(TransportFilter.java:109)
        at org.apache.activemq.transport.TransportFilter.transportResumed(TransportFilter.java:109)
        at org.apache.activemq.transport.failover.FailoverTransport.doReconnect(FailoverTransport.java:870)
        - locked <0x00002aaac2df83c8> (a java.lang.Object)
        at org.apache.activemq.transport.failover.FailoverTransport$2.iterate(FailoverTransport.java:135)
        - locked <0x00002aaac2df83d8> (a java.lang.Object)
        at org.apache.activemq.thread.DedicatedTaskRunner.runTask(DedicatedTaskRunner.java:98)
        at org.apache.activemq.thread.DedicatedTaskRunner$1.run(DedicatedTaskRunner.java:36)

Found 1 deadlock.
, Patch which creates a new transport "single".  This transport connects to the first composite URL in its list and returns that connection, failing if none connect.

It has no failover features.

Used with NetworkConnectors, this transport operates well with NetworkConnectors since the network bridges are automatically recreated as-needed.  It appears the redundancy - reconnection at the network bridge level and at the failover transport level - may have lead to the deadlock., To use this new transport, just change "failover" to "single".  Here's an example for use in a NetworkConnector:

static:(single:(ssl://broker1.node1.bus:61616,ssl://broker2.node1.bus:61616))
, Using failover: with a network connector is limited to choosing one of the composite urls to connect to. It should no be used to implement failover of the transport because the network connector handles failover itself.
To achieve what arthur describes as "single" transport, the maxReconnectAttempts=1 url parameter must be used in the failover url so that it will report a transport failure back to the networkConnector such that it can initiate a recreation of the bridge.
{code}<networkConnector uri="static:(failover:(tcp://xxx:32258,tcp://yyy:32259)?randomize=false&amp;maxReconnectAttempts=1)"/>{code}
see: https://issues.apache.org/jira/browse/AMQ-3222 , I will test with Failover using maxReconnectAttempts=1 and post an update.  Thank you., maxReconnectAttempts=1 on the failover uri sorts this.]