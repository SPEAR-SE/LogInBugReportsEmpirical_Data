[JMeter test plan to produce the bug, Thread dump analysis screenshot, Have you tried reproducing this with a JMS client in a Unit test, would be a useful validation of any fixes.  , I already attached a JMeter test plan that injects messages in 2 queues and after that starts calling browse in 2 threads.
You just have to adapt the paths to your ActiveMQ.

If you meant a JUnit test, no I have none. I tried first but I found it was complicated to create the QueueBrowseSubscription with all the right parameters, contexts etc. embeded Broker etc. etc.

With JMeter it was pretty easy to reproduce., I attached the JUnit test that produces the bug and a thread dump when it occurs.
Just put it in /activemq-parent-5.9.1/activemq-unit-tests/src/test/java/org/apache/activemq/console/command/
and test it.
It works for me with 5.9.1 tag sources and IBM java6 on Ubuntu 12.04 LTS.
The test is a bit complicated because I tried to make it fail() and fail fast, do a thread dump and not block or kill the JVM without a JUnit failure.

I run the test from Eclipse. I just came to realise you might test from command line or other ways (in Jenkins, etc) and I did a test on command line and JUnit does not fail because the kill is faster and maven test is in success in spite of the bug detection.
Anyway the thread dump is generated to prove the bug., The log is captured in /activemq-parent-5.9.1/activemq-unit-tests/target/activemq-test.log, Have you tested it against the code on master, there is no support for 5.9.x releases so if you are looking for a fix there you will be disappointed.  Would be good for you to confirm that you see the same problem when you checkout the master branch code and run your test there.  , I'll try and I'll keep you informed., I attached a fixed version of the test that produces the bug on the current master sources with IBM java 7. Also the test log and a thread dump made with Java 7.
Copy the new test in the same place in activemq-unit-tests and give it a try., Did you also try it using the Oracle JDK or OpenJDK ?  most of use don't have a system with IBM JDK installed, I modified again the test to increase the number of browse tasks and the timeout because on command line it is faster.
And yes I reproduced the bug wit HotSpot java and I attached the thread dump. 

{code}
$ java -version
java version "1.7.0_51"
Java(TM) SE Runtime Environment (build 1.7.0_51-b13)
Java HotSpot(TM) 64-Bit Server VM (build 24.51-b03, mixed mode)

{code}, Commit d346a765e3064a951c5d55119b80b8432a45bcb6 in activemq's branch refs/heads/master from [~cshannon]
[ https://git-wip-us.apache.org/repos/asf?p=activemq.git;h=d346a76 ]

https://issues.apache.org/jira/browse/AMQ-6062

Updated QueueBrowserSubscription to use a ConcurrentMap to avoid a
potential race condition when multiple queue browsers browse
multiple queues.
, Commit 819e512138f55d70197949a4fae208a81ea86502 in activemq's branch refs/heads/activemq-5.13.x from [~cshannon]
[ https://git-wip-us.apache.org/repos/asf?p=activemq.git;h=819e512 ]

https://issues.apache.org/jira/browse/AMQ-6062

Updated QueueBrowserSubscription to use a ConcurrentMap to avoid a
potential race condition when multiple queue browsers browse
multiple queues.

(cherry picked from commit d346a765e3064a951c5d55119b80b8432a45bcb6)
, Commit 58359a85d86f1d578fd706c06763ca6b0cec0a2d in activemq's branch refs/heads/activemq-5.12.x from [~cshannon]
[ https://git-wip-us.apache.org/repos/asf?p=activemq.git;h=58359a8 ]

https://issues.apache.org/jira/browse/AMQ-6062

Updated QueueBrowserSubscription to use a ConcurrentMap to avoid a
potential race condition when multiple queue browsers browse
multiple queues.

(cherry picked from commit d346a765e3064a951c5d55119b80b8432a45bcb6)
, [~doomytroo], Thanks for the test case and suggested fix.  I was able to see with the test case and your description that there is indeed a race condition so I went ahead and updated to use a ConcurrentMap to avoid the issue going forward., Thank you very much. I tested your fix with HotSpot and IBM and it's OK.
In case you want to add the test on Git repo you'll have to work on it because it is not deterministic depending on timeout and browse task count parameters when the timeout arrives before all browse finish. It needs to be fixed to be fast enough but nut so fast :) (to produce the bug), and deterministic., Yeah, since the test wasn't completely reliable I left it out for now.  If I get time I can go back and look at it but there are already a bunch of other queue browser tests that exist which should catch any problems with this commit.  It was a pretty straight forward fix so it should be fine.

5.12.2 should hopefully be released pretty soon (maybe a week or 2) and it will have the fix.  5.13.1 will also have it and that will go out in probably 1-2 months.]