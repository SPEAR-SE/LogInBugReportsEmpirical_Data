[Not fully following the code to reproduce, best bet is to create a unit test similar to those in the activemq-mqtt module so we can run it and see the issue and ensure that the fix is preserved into the future. , Yes, well the code is not simple because I used two classes running simultaneously... The publisher always sending messages, the subscriber receiving 10 messages on each "run". The problem occurs when restarting the subscriber after the first run (leaving some time between runs in order to allow the publisher to publish some messages). Theoretically it would be simple to use only one class publish some messages, receive them on the subscriber, close the subscriber, publish more messages, and attempt to reconnect and receive those messages but I haven't tested this method. I should stress that the problem, although it fails frequently, doesn't occur every time, I had multiple "runs" of the subscriber that processed the pending messages correctly., The test code is easy to work from so I'd try and create a unit test, I won't have time to do that before I leave for vacation but if you can create a test case the fix could be simple and I might get it in quickly. , Was able to recreate the issue in a test, added test to trunk.  , Tentative test code disconnecting several times., I was actually trying to replicate the problem on a test but I was having some problems making the test fail consistently... I attached the code I was trying (testReceivePendingMessages), even with high values on "numberOfRuns" and "messagesPerRun" the system only fails some times. I also had problems with the tests never stopping... I don't know if it's because I am using windows or if it's something on my test code but the tests easily ended up not stopping, especially when I changed the setCleanSession to true., Forget about the locking problem when setCleanSession(true)... It was just a distraction on my part, obviously, if I clean the session there are no messages pending and the receive blocks..., The problem is a tricky one, it looks like there might be an issue in the MQTT client.  The issue happens on subscribe when for some reason the client receives two SUBACK frames when there appears to only have been one sent.  You can see it in this trace log where the SUBSCRIBE followed by a PUBLISH results in two SUBACK frames and the second one causes the client to bail.  

{noformat}
2013-06-19 16:50:40,556 | DEBUG | MQTTProtocolConverter          | MQTT Client MQTT-Sub-Client connected.
2013-06-19 16:50:40,557 | INFO  | MQTTTest                       | Client Received:
MQTTFrame { type: CONNACK, qos: AT_MOST_ONCE, dup:false }
2013-06-19 16:50:40,557 | INFO  | MQTTTest                       | MQTT login accepted
2013-06-19 16:50:40,557 | INFO  | MQTTTest                       | Client Sent:
MQTTFrame { type: SUBSCRIBE, qos: AT_LEAST_ONCE, dup:false }
2013-06-19 16:50:40,559 | TRACE | MQTTIO                         | Received: 
MQTTFrame { type: SUBSCRIBE, qos: AT_LEAST_ONCE, dup:false }
2013-06-19 16:50:40,562 | TRACE | MQTTIO                         | Sending: 
MQTTFrame { type: SUBACK, qos: AT_MOST_ONCE, dup:false }
2013-06-19 16:50:40,562 | TRACE | MQTTIO                         | Sending: 
MQTTFrame { type: PUBLISH, qos: AT_LEAST_ONCE, dup:false }
2013-06-19 16:50:40,562 | INFO  | MQTTTest                       | Client Received:
MQTTFrame { type: SUBACK, qos: AT_MOST_ONCE, dup:false }
2013-06-19 16:50:40,562 | INFO  | MQTTTest                       | Client Received:
MQTTFrame { type: SUBACK, qos: AT_MOST_ONCE, dup:false }
2013-06-19 16:50:40,562 | INFO  | MQTTTest                       | Fatal connection failure: %s
java.net.ProtocolException: Command from server contained an invalid message id: 1
	at org.fusesource.mqtt.client.CallbackConnection.completeRequest(CallbackConnection.java:723)
	at org.fusesource.mqtt.client.CallbackConnection.processFrame(CallbackConnection.java:762)
	at org.fusesource.mqtt.client.CallbackConnection.access$1500(CallbackConnection.java:51)
	at org.fusesource.mqtt.client.CallbackConnection$6.onTransportCommand(CallbackConnection.java:392)
	at org.fusesource.hawtdispatch.transport.TcpTransport.drainInbound(TcpTransport.java:659)
	at org.fusesource.hawtdispatch.transport.TcpTransport$6.run(TcpTransport.java:538)
	at org.fusesource.hawtdispatch.internal.NioDispatchSource$3.run(NioDispatchSource.java:209)
	at org.fusesource.hawtdispatch.internal.SerialDispatchQueue.run(SerialDispatchQueue.java:100)
	at org.fusesource.hawtdispatch.internal.pool.SimpleThread.run(SimpleThread.java:77)
2013-06-19 16:50:40,563 | INFO  | MQTTTest                       | Client Received:
MQTTFrame { type: PUBLISH, qos: AT_LEAST_ONCE, dup:false }
2013-06-19 16:50:40,564 | INFO  | BrokerService                  | Apache ActiveMQ 5.9-SNAPSHOT (localhost, ID:OfficePC-37216-1371675037999-0:1) is shutting down
{noformat}
, This appears to have been fixed in the MQTT hardening that went into the 5.10.0 release.  If any new issues like this emerge please create a new issue to track with tests. , [~tabish121] Can you confirm that work was done on AcitveMQ for this ? I also feel like this is an issue on the MQTT Client (FuseSource) 

We're seeing the exact same issue on our stack:

- Apache Active MQ 5.10.0
- Camel 2.14
- MQTT Client 1.10.0 (FuseSource)

There appears to be a github issue for it as well : https://github.com/fusesource/mqtt-client/issues/26, There are fixes to both the client and the MQTT support on the broker.  You should run with the latest release of both., I think there is still an issue with the FuseSource client (Even the latest version). It's easy to reproduce the timing issue. See the Github issue for more details. The issue in the latest FuseSource client is that a PUBACK can be processed before the PUB was completed.

When the client sends a PUB over the wire it can happen that it immediately starts processing the PUBACK before it finished its internal bookkeeping on the PUB. (FuseSource thinks the PUBACK is an invalid message id because it hasn't fully registered the PUB yet)., You'll need to try and raise the priority of that with the Fuse client project.  I beleive the broker side troubles have been resolved in this area.  ]