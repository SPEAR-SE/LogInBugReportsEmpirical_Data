[would it be possible to validate a 5.12 snapshot? 
I did a sanity check on the unit test - org.apache.activemq.broker.jmx.MBeanTest#testMoveMessages with kahadb (it used the memory store) and it works as expected.
I wonder how your scenario is different from the unit test

https://github.com/apache/activemq/blob/ad39fc00fbd9556deac2b7ed3646dae598c00125/activemq-unit-tests/src/test/java/org/apache/activemq/broker/jmx/MBeanTest.java#L121, Gave apache-activemq-5.12-20150429.222352-120 a test run. Simply downloaded the snapshot build and run "bin/activemq console", so no special config.

It seems that "copy" works as intended (did not in 5.11). However, move does not (console output below). The message get removed. I tried with both web console and JMX moveMessageTo(messageId,destinationName) - same result. So this seems not to be an issue isolated in the web console.

It only affects persistent messages. Non persistent message are possible to move. Can it be that the test case uses a simplified persistence model, since it uses the memory store?

The behavior is verified on both Linux and Mac.

 INFO | FROM(ID:petters-mbp.got.vgregion.se-58859-1430393889647-3:1:1:1:1) copy to TO
 INFO | Moving message FROM(ID:petters-mbp.got.vgregion.se-58859-1430393889647-3:1:1:1:1) to TO
 WARN | org.apache.activemq.broker.region.cursors.QueueStorePrefetch@5a87a7f9:TO,batchResetNeeded=false,size=0,cacheEnabled=true,maxBatchSize:1,hasSpace:true,pendingCachedIds.size:1,lastSyncCachedId:null,lastSyncCachedId-seq:null,lastAsyncCachedId:null,lastAsyncCachedId-seq:null,store=permits:9999,sd=nextSeq:1,lastRet:MessageOrderCursor:[def:0, low:0, high:0],pending:0 - cursor got duplicate send ID:petters-mbp.got.vgregion.se-58859-1430393889647-3:1:1:1:1 seq: org.apache.activemq.store.kahadb.KahaDBStore$StoreQueueTask$InnerFutureTask@24fade
, interesting. I flipped the bit in the unit test to enable persistence and, it is still good.

but from the output of the log messages above, I think this is expected to some extent.

The copy takes a message and then the move takes the same message. So it is the same message id. It makes sense to suppress the second insert/send.
It is possible to disable the cursor audit - policyEntry enableAudit=false but it looks like it is doing its job in this instance.
It is broken that the move results in the message being deleted though. That is a bug I think., I also run that test (master branch) with persistence turned on and it does not replicate the issue with move. I'm not sure exactly what is the difference in the test setup and the standard activemq.xml configuration as it seems to be somewhat similar.

And I agree that move method deleting the message seems like a bug (to my use case, it's rather nasty).
, I pushed a test that shows the nasty behaviour[1] the fix is not obvious because it points to a short fall in how we deal with duplicate sends, the store may or may not track them and the cursor may or may not be able to so at the moment a send call will not fail on a duplicate send, it has to throw an exception b/c there is currently no return state from queue.send but it will take some thought to figure out where best to deal with this.

http://git-wip-us.apache.org/repos/asf/activemq/commit/82200b6e, I have tested with 5.13.3 on Windows and I could not reproduce it. I think it is solved]