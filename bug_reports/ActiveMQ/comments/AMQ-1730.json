[It is hard to guess how to correct the fact that undelivered messages prefetched should not have their JMSXDeliveryCount  incremented.

I finally corrected it as a workaround (I also have to let prefetch on queues at 0):


    *  PrefetchSubscription.java: (Finally not corrected)

if (inAckRange) {
 node.incrementRedeliveryCounter();
if (ack.getLastMessageId().equals(messageId)) { destination = node.getRegionDestination(); callDispatchMatched = true; break; }
}

    * Queue.java: (Finally only first increment commented)

for (MessageReference ref : sub.remove(context, this)) {
QueueMessageReference qmr = (QueueMessageReference)ref;
qmr.incrementRedeliveryCounter();
if( qmr.getLockOwner()==sub ) {
qmr.unlock();
// if (!qmr.isDropped() && !qmr.isAcked()) {
// qmr.incrementRedeliveryCounter();
// }
}
list.add(qmr);
}

Definitely it seems their is a need for 2 counters:
* one to count delivery to consumers (messages consumed or not by the consumer)
* one for the JMXDeliveryCount incremented only on rollback

JMXDeliveryCount  should not be affected by the value of the prefetch., I have the same problem AMQ-1800
But I think redeliveryCounter has to be incremented on rollback only also, I've investigated the problem and I thnink the problem is absence of command like RollabckCommand which could increment redelivery counter on server. 

It think it should be added something like RollbackCommand and session.sendRollback(rollbackCommand) as like as sesssion.sendAck(ack), I was wrong. REDELIVERED_ACK_TYPE is what i ment
I commented qmr.incrementRedeliveryCounter(); both in Queue and now it's Ok for me
, On the meaning of JMSXDeliveryCount, note that the semantics of redelivery indicators in JMS are not absolute. They are in indication only that redelivery may have occurred or that a transaction rolledback. 
The fact that redispatch of prefetched messages on subscription close, increments the redelivery count, is reasonable w.r.t the spec. The extent of this can be managed by the prefetch value for the subscription., The fix for https://issues.apache.org/activemq/browse/AMQ-2087 is relevant here. prefetched messages no longer get their redelivery incremented once the consumer or session is successfully closed., resolved with r739249
The fix targets redeliveryCount and ensures that it is not incremented on prefetched messages that have not been delivered to the consumer. The JMSXDeliveredCount is always 1+ the redeliveryCount. 
Please validate your use case against the tests that were modified with r739249, They are visible in the subversion commits tab., Is this supposed to be fixed for topics as well as queues? (ActiveMQ 5.10.0)
The reason I ask is that we're running into this problem with a durable topic subscription. The application uses a transacted camel route without CACHE_CONSUMER, so from what I understand, the session gets closed after each receive and all prefetched messages (100 by default) get redispatched by the broker. The broker however is increasing redelivery count and we see lots of messages ending up in the DLQ.
edit: by looking at the implementations of Destination.removeSubscription(ConnectionContext context, Subscription sub, long lastDeliveredSequenceId), it seems that the lastDeliveredSequenceId parameter is only used for queues..., [~syberyan] - that was ignored for durable subs - a workaround would be setting keepDurableSubsActive to false. (I think)
I just fixed that up via https://issues.apache.org/jira/browse/AMQ-5513 which will make 5.11
]