[In my originating comment, I mention four things:

   1) Failure during a series of POSTs to the server over HTTP.

   2) When GETing messages off the queue just after the POST failure mentioned in item (1), my series of GETs ends prematurely due to an unexpected 204 - no content response.

   3) When my loop of GETs ends prematurely due to 204, the remaining messages still get consumed on the server side even though I specify the "&consumer.prefetchSize=1" parameter.

   4) My HTTP client code reports "Web server requires that we close the current connection..."

I found the answer to item (4).  I learned that can be caused by the server sending a "connection: close" header.  However, that is not happening in my test case.  Instead, the http client code I am using is explicitly closing the socket and re-connecting between posts.  The person who wrote that http client code sits across the hall from me; so I will discuss item (4) with him.

     , I changed my HTTP client code to refrain from closing the socket and re-connecting between posts and it performs better, but I still encounter the failure.  Also, in an attempt to avoid the premature 204, I increased the readTimeout to 6000000.  Here is a recent excerpt from the broker log.
--------------------------------
2012-07-05 16:32:14,002 | DEBUG | myqueue toPageIn: 200, Inflight: 636, pagedInMessages.size 646, enqueueCount: 39015, dequeueCount: 37794 | org.apache.activemq.broker.region.Queue | BrokerService[localhost] Task-29
2012-07-05 16:32:14,018 | DEBUG | Async client internal exception occurred with no exception listener registered: java.lang.IllegalStateException: REDISPATCHING,initial,resumed | org.apache.activemq.ActiveMQConnection | ActiveMQ Session Task-3
java.lang.IllegalStateException: REDISPATCHING,initial,resumed
	at org.eclipse.jetty.server.AsyncContinuation.dispatch(AsyncContinuation.java:403)
	at org.eclipse.jetty.server.AsyncContinuation.resume(AsyncContinuation.java:810)
	at org.apache.activemq.web.MessageServlet$Listener.onMessageAvailable(MessageServlet.java:368)
	at org.apache.activemq.ActiveMQMessageConsumer.dispatch(ActiveMQMessageConsumer.java:1320)
	at org.apache.activemq.ActiveMQSessionExecutor.dispatch(ActiveMQSessionExecutor.java:131)
	at org.apache.activemq.ActiveMQSessionExecutor.iterate(ActiveMQSessionExecutor.java:202)
	at org.apache.activemq.thread.PooledTaskRunner.runTask(PooledTaskRunner.java:122)
	at org.apache.activemq.thread.PooledTaskRunner$1.run(PooledTaskRunner.java:43)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:619)
2012-07-05 16:32:14,018 | DEBUG | Received 0 message(s) | org.apache.activemq.web.MessageServlet | qtp1690651-31 - /demo/message/myqueue?type=queue&clientId=81D46EA5-6113-488E-9E8B-089A8C1C2CF0&readTimeout=6000000
2012-07-05 16:32:14,002 | DEBUG | default:memory:queue://myqueue:memory: usage change from: 69% of available memory, to: 68% of available memory | org.apache.activemq.usage.Usage | ActiveMQ Task-18
2012-07-05 16:32:14,018 | DEBUG | Async client internal exception occurred with no exception listener registered: java.lang.IllegalStateException: REDISPATCHING,initial,resumed | org.apache.activemq.ActiveMQConnection | ActiveMQ Session Task-3
java.lang.IllegalStateException: REDISPATCHING,initial,resumed
	at org.eclipse.jetty.server.AsyncContinuation.dispatch(AsyncContinuation.java:403)
	at org.eclipse.jetty.server.AsyncContinuation.resume(AsyncContinuation.java:810)
	at org.apache.activemq.web.MessageServlet$Listener.onMessageAvailable(MessageServlet.java:368)
	at org.apache.activemq.ActiveMQMessageConsumer.dispatch(ActiveMQMessageConsumer.java:1320)
	at org.apache.activemq.ActiveMQSessionExecutor.dispatch(ActiveMQSessionExecutor.java:131)
	at org.apache.activemq.ActiveMQSessionExecutor.iterate(ActiveMQSessionExecutor.java:202)
	at org.apache.activemq.thread.PooledTaskRunner.runTask(PooledTaskRunner.java:122)
	at org.apache.activemq.thread.PooledTaskRunner$1.run(PooledTaskRunner.java:43)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:619)
--------------------------------


, Regarding item number (2), the premature 204 status can occur even when the first part(POSTing 6000 messages) succeeds.  I see the trouble encountered when POSTing messages, and the premature 204 as two separate issues.  I would not be surprised if they are both due to the same root problem; which is why I mention them both in this one jira(AMQ-3907).  If you want me to enter a separate jira for the GET--204 issue, let me know.  

Is there anything you need from me? ,    Just noticed that this jira was dup'd to AMQ3925, so I downloaded the 5.7 snapshot and it does appear to solve item (1), where I was encountering trouble when attempt to write a bunch of messages via http.  Thank you, I sincerely appreciate it.

   I am able still able to reproduce items (2) and (3), where my read loop kicks-out and the consumer gobbles up some messages.  I am able to produced it with a freshly started broker.  However, even though the first test attempt encounters the problem, subsequent attempts seem to run fine.  On the first attempt(run of my test against a just-started broker), I notice the following info message reported by the broker:

  INFO | PListStore:[C:\amq\apache-activemq-5.7-SNAPSHOT\bin\..\data\localhost\tmp_storage ] initialized

I think that has something to do with it.  If my test pgm only puts 300 messages(54 bytes of text in the body), then that storage is not needed, and my read loop does *not* kick-out prematurely.  However, if I put 3000 messages, then I encounter the above "tmp_storage" log msg, and my read loop kicks-out early.  Even though the URL is specify includes "&consumer.prefetchSize=1", I can lose a large number of messages when my read loop kicks-out.

Would you like me to open a new jira for items (2) and (3)?  Thanks in advance.
, Best thing you can do to help is to create JUnit test cases that can reproduce the issues you are seeing, that way someone can look into them when they have the time. , I am primarily a C programmer, and just an novice-intermediate Java programmer.  I can try to develop a jUnit test, but it will take some time.  Mainly because I am behind on another project and will not be able to work on a junit test for a while.  If someone could point me to an example/sample junit test that uses the RESTful HTTP protocol when communicating with the broker, that will help me get a leg-up.

My test program, written in SAS, just POSTs a bunch of messages using HTTP, then GETs them.  When I attempt to write a junit test, I will be doing the same -- post then get a bunch of messages over HTTP., Well, I may have spoke too soon.  Even with a snapshot of 5.7.0, I sometimes still see:


2012-07-29 13:11:27,303 | DEBUG | scope null||/demo/message/myqueue @ o.e.j.w.WebAppContext{/demo,file:/C:/amq/apache-activemq-5.7-SNAPSHOT/webapps/demo/} | org.eclipse.jetty.server.handler.ContextHandler | qtp10344162-27 - /demo/message/myqueue?type=queue&consumer.prefetchSize=1&clientId=DBF16CAB-FBB1-4B20-A3A0-323B17F4302E&readTimeout=60000
2012-07-29 13:11:27,319 | DEBUG | context=/demo||/message/myqueue @ o.e.j.w.WebAppContext{/demo,file:/C:/amq/apache-activemq-5.7-SNAPSHOT/webapps/demo/} | org.eclipse.jetty.server.handler.ContextHandler | qtp10344162-27 - /demo/message/myqueue?type=queue&consumer.prefetchSize=1&clientId=DBF16CAB-FBB1-4B20-A3A0-323B17F4302E&readTimeout=60000
2012-07-29 13:11:27,319 | DEBUG | Async client internal exception occurred with no exception listener registered: java.lang.IllegalStateException: DISPATCHED,initial | org.apache.activemq.ActiveMQConnection | ActiveMQ Session Task-2
java.lang.IllegalStateException: DISPATCHED,initial
	at org.eclipse.jetty.server.AsyncContinuation.dispatch(AsyncContinuation.java:403)
	at org.eclipse.jetty.server.AsyncContinuation.resume(AsyncContinuation.java:810)
	at org.apache.activemq.web.MessageServlet$Listener.onMessageAvailable(MessageServlet.java:376)
	at org.apache.activemq.ActiveMQMessageConsumer.dispatch(ActiveMQMessageConsumer.java:1324)
	at org.apache.activemq.ActiveMQSessionExecutor.dispatch(ActiveMQSessionExecutor.java:131)
	at org.apache.activemq.ActiveMQSessionExecutor.iterate(ActiveMQSessionExecutor.java:202)
	at org.apache.activemq.thread.PooledTaskRunner.runTask(PooledTaskRunner.java:122)
	at org.apache.activemq.thread.PooledTaskRunner$1.run(PooledTaskRunner.java:43)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:619)
2012-07-29 13:11:27,319 | DEBUG | Got Session ID ja7jreqwys5t1sfeqdgq872e0 from cookie | org.eclipse.jetty.server.session | qtp10344162-27 - /demo/message/myqueue?type=queue&consumer.prefetchSize=1&clientId=DBF16CAB-FBB1-4B20-A3A0-323B17F4302E&readTimeout=60000
2012-07-29 13:11:27,319 | DEBUG | Async client internal exception occurred with no exception listener registered: java.lang.IllegalStateException: DISPATCHED,initial | org.apache.activemq.ActiveMQConnection | ActiveMQ Session Task-2
java.lang.IllegalStateException: DISPATCHED,initial
	at org.eclipse.jetty.server.AsyncContinuation.dispatch(AsyncContinuation.java:403)
	at org.eclipse.jetty.server.AsyncContinuation.resume(AsyncContinuation.java:810)
	at org.apache.activemq.web.MessageServlet$Listener.onMessageAvailable(MessageServlet.java:376)
	at org.apache.activemq.ActiveMQMessageConsumer.dispatch(ActiveMQMessageConsumer.java:1324)
	at org.apache.activemq.ActiveMQSessionExecutor.dispatch(ActiveMQSessionExecutor.java:131)
	at org.apache.activemq.ActiveMQSessionExecutor.iterate(ActiveMQSessionExecutor.java:202)
	at org.apache.activemq.thread.PooledTaskRunner.runTask(PooledTaskRunner.java:122)
	at org.apache.activemq.thread.PooledTaskRunner$1.run(PooledTaskRunner.java:43)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:619)
...
...snip..., I seem to be able to avoid problems if I prevent the Non-Persistent Pending Cursor from filling up.  I think I have been able to accomplish that in a number of ways:  1) Turning off Flow Control, 2) Increasing my prefetch size, and 3) Using a pending queue VMQueueCursor.  In all three of those uses cases, I do not see it initializing temporary disk storage, so I assume those configurations prevent the Non-Persistent Pending Cursor from exhausting its RAM when running my test case.  Remember my test case is put 10000 non-persistent messages and then get them back off.  I assume that test case constitutes a slow-consumer scenario., I've recreated your scenario and received the same problems - 2000 POSTS works fine, then single GET dequeues all 2000 messages and then everything breaks.

The problem is resolved in 5.9.0.
See commit https://github.com/apache/activemq/commit/de49f2e8 and AMQ-4629.

regards
Grzegorz Grzybek, Thanks!  It does appear to be fixed in 5.9.0.  Thanks!]