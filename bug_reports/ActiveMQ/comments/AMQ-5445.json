[And the patch would be I guess to extend the catch {} clause in org.apache.activemq.ActiveMQSession#run and make it look something like this:

{code}
            } catch (Throwable e) {
                LOG.error("error dispatching message: ", e);
                // A problem while invoking the MessageListener does not
                // in general indicate a problem with the connection to the broker, i.e.
                // it will usually be sufficient to let the afterDelivery() method either
                // commit or roll back in order to deal with the exception.
                // However, we notify any registered client internal exception listener
                // of the problem.
                connection.onClientInternalException(e);
                if (transactionContext != null && transactionContext.isInLocalTransaction()) {
                    try {
                        rollback();
                    } catch (Throwable rollbackException) {
                        LOG.error("Error while trying to rollback the session", rollbackException);
                        connection.onClientInternalException(rollbackException);
                    }
                }
{code}

or may be there is another way to let org.apache.activemq.ra.ServerSessionImpl#afterDelivery know that it has to rollback instead of committing. I did not find an easy way to do this. It would be better to rollback in ServerSessionImpl#afterDelivery - it is also mentioned in the comment in that catch{} clause. So currently ServerSessionImpl#afterDelivery does not know anything about whether it has to rollback or commit. It is just committing.

, Any comments on this issue?]