[TestCase which shows this bug - takes time to complete.
, The problem I found is whith both stomp transport and broker iself.
Somehow Stomp subscription starts prefetching and sending messages before it adds Consumer to the broker. If connection during this prefetching is lost, connection is removed, but subscription is still added.

There is quick  hack for that in AbstractConnection.processAddConsumer(): 

    public Response processAddConsumer(ConsumerInfo info) throws Exception {
        SessionId sessionId = info.getConsumerId().getParentId();
        ConnectionId connectionId = sessionId.getParentId();
        ConnectionState cs = lookupConnectionState(connectionId);
        SessionState ss = cs.getSessionState(sessionId);
        if( ss == null )
            throw new IllegalStateException("Cannot add a consumer to a session that had not been registered: "+sessionId);
        log.trace("Adding consumer to broker. Stomp client blocks here - waiting for prefetching to complete.");
        broker.addConsumer(cs.getContext(), info);
        try {
        		lookupConnectionState(connectionId);
        } catch (IllegalStateException ex) {
        		// If during broker.addConsumer() exception occures, connection is destroyed. We need to remove consumer
        		log.warn("Cannot find connection after adding subscription! Probably error when prefetching messages", ex);
        		broker.removeConsumer(cs.getContext(), info);
        		throw ex;
        }
        ss.addConsumer(info);
        return null;
    }, Expanded your 'hack' so that it's less hacky.  The connection and session state now keep track if they are being shutdown.

Fix committed to trunk revision 418592., Fix apply to 4.0 trunk also., This is not fixed as of 4.0.2 RC4, or at least there is another bug with the exact same behavior.  Wasn't hard to duplicate either, just kill a stomp connection while it's reading and bam, phantom consumer. , I wonder how this bug has slipped through unit tests. I'm adding patch for org.apache.activemq.state.SessionState, This patch is against 4.0 branch. This bug is also in 4.1 branch, Is is possible for the provided patch to be applied for 4.2 version?, When using the C++ Openwire client I'm having the same problems when the client crashes.

I'm testing against the current SVN repo version.

After 5 runs I have 5 pending openwire connections, although "netstat -t"
shows that they are closed.

, Pending connections although the TCP connections are really closed, PATCH
======

Not sure if it is this simple but this patch seems to work OK.

The connections are now freeed when a fresh client connects...

, Retried the tests without the patch applied but see no difference now, so you can ignore it.
Apparently a fix was already in the SVN version, my  patch is a no-op. :-/

Terminating the Stomp connections in the current SVN version seems to work OK.

Terminating OpenWire connections from a  CPP client still leaves connections hanging.

I'll try to investigate this problem further., There is a clear bug in SessionState class. EIther you have to fix this bug, o remove SessionState functionality, if it's not used.
When broker shuts down session, it sets shutdown flag on session state. But currently in the code instead of true it sets false (which means that session is not shut down).
The bug is not releted with connections which are not removed. The problem occures when connection is removed, but subscription is not. It's not easy to reproduce this bug. You have to kill stomp connection during message prefetch (within a second after connection is established and subscribtion is made)., That's how you can reproduce it:

{{$ netcat -v -c localhost 61613 < StompScriptComplete.txt}}
*CONNECT*, *SEND* a message and *DISCONNECT* properly.

{{$ netcat -v -c localhost 61613 < StompScriptNoDisconnect.txt}}
*CONNECT*, *SEND* a message and closes the connection {color:red}without{color} *DISCONNECT*.
, Try {{netcat}} also without {{-c}} (close connection on EOF from stdin)...

The connection will be closed by the server in the first example.
In the second example you have to break it {{^C}} manually. This leaves an open session on the server.
, I'm confused. When I try the netcat example with NoDisconnect in the current SVN version
everything is rock solid.

When I interrupt a C++ OpenWire client than I get non closed connections.

I found a possible cure for the last problem. The InactivityMonitor code reads:

public void onException(IOException error) {
    	if( monitorStarted.get() ) {
	        stopMonitorThreads();
	        getTransportListener().onException(error);
    	}
    }

So if monitorStarted is false the EOFException is completely ignored!
I assume it should be:

public void onException(IOException error) {
    	if( monitorStarted.get() ) {
	        stopMonitorThreads();
    	}
    	getTransportListener().onException(error); // tom.vijlbrief
    }


Attached a patch. With this patch the OpenWire sessions are closed., Patch for pending OpenWire connections, I've just applied Tom's latest patch for OpenWire connections - thanks Tom!, The associated patches no longer look valid for the current 5.2/trunk codebase.
You can on the broker url in the broker config to define options to directly close the sockets - instead of using a separate thread in 5.2 - 
e.g tcp://localhost:61616?socket.closeAsync=false, Is there a similar option to socket.closeAsync for activemq cpp?  Is this documented anywhere?, socket.closeAsync is a broker-side configuration option, so it should work with cpp as well., Ok.  It would be nice if this was documented in the activemq cpp documentation.  Other URI options are documented.  I was looking for something like this, but was unaware this was an option., I've updated tcp transport reference page (http://cwiki.apache.org/confluence/display/ACTIVEMQ/TCP+Transport+Reference). Thanks]