[I have developed a JUnit test case to verify this issue. The test cases show the following:
* The bug occurs only with durable subscribers. Non-durable subscribers work fine.
* The bug occurs if the ActiveMQ broker uses an already existing kaha directory. Everything works fine if the broker creates and uses a fresh kaha directory.
, The JUnit test cases mentioned in my other comment. Download, unpack, and open the index.html file., It seems to me that the bug is in the Kaha persistence manager namely in the method org.apache.activemq.store.kahadaptor.KahaTopicMessageStore.addMessage(ConnectionContext context, Message message). Here the message is added to the message containers of *all* topic subcribers without checking their respective selectors. Am I on the right track here or not?, I am one step further now: It might be disputed whether it is sensible or not to add messages to all topic subscribers. However, that does obviously no harm when a fresh kaha store is used.

However, when a kaha store is recovered that had been created in a former run, the messages that went to the wrong subscribers are still in the store. But now they show up at all subscribers independed of their selectors., I updated the test case to verify that unexpected messages are present after recovering the kaha store., Okay, folks, here's a hack to solve this issue. With this patch the KahaTopicMessageStore.addMessage(ConnectionContext, Message) method refuses to add a message to those subscription containers where the message does not match the respective subscription selector.

Unfortunately the method does not have much it can build on except for the message itself and the subcription info. Therefore I had to re-implement the selector matching stuff from AbstractSubscription. Another option would have been to pass on some necessary information to the store, but I didn't want to fiddle around with any ActiveMQ architecture issues.

Probably the ActiveMQ architects can find a better and more elegant solution to this problem. Well, at least my JUnit test run now, and my project will hopefully do so, too.

(As an aside, I observed that the hash-index-topic-data_topic___TheNameOfMyTopic file in the Kaha directory grows without paying attention to the maximum file limit. What will happen here in the end?), Oops, wrong file uploaded. Here's a better one., Hi Klute,

is it just the attached DurableTopicSelector.java that I need to verify the bug??  Could you reattach with an Apache License header on it and make sure you click the check box that says your contributing to the ASF.

Thanks., Hi Hiram,

DurableTopicSelector.java is the original bug poster's test case. I cannot comment on it.

My files are:
* ActiveMQ_Testcases.jar containing JUnit test cases and some documentation on how to run them.
* patch_for_AMQ-1095.diff with a patch that fixes the problem for me.

I shall resubmit the stuff with the Apache 2 License later, but surely not today. However, you can treat this comment as an LOI., Source files in ActiveMQ_Testcases.jar now have the Apache License header., Thanks for the updated test case.

I have added it and fixed the problem in revision:581053, This works better with AMQStore and deleteAllMessagesOnStartup]