[Do you have a test case that can reproduce this , Hi Timothy,

unfortunately, as you might understand, it's pretty hard to trigger a race condition reliably. 
Please let me know if you need anyway a small test set up anyway., Hi Timothy,

I've attached a testcase that successfully hits the NPE when the scheduler.start() method is delayed.

The first consumer enters the block and while it still has to perform the start() the second will find the first if condition if (result == null) false, hence it won't have the Timer object initialised and an exception is thrown.

I hope this explanation is clear enough, Hi Timothy,

any update on this?, Haven't had time to investigate as the test is quite large.  A simpler JUnit test case would be quicker to investigate otherwise this will have to wait.  In JMS land the Session is meant to be a single threaded resource to you can probably work around any issue here by giving each it's own Session instance. , Hi Timothy,

As I mentioned the problem is not related to the Session, but the Connection itself not being thread safe. We currently make use of a single Session per thread.

We both agree that an 'in frequently triggered' race condition doesnt exactly lend itself to a simple junit, but I believe that the test case I provided you with the actual patch should be quite straight-forward to test., Hi,

is there any update on this?, Fixed the assignment of the member variable to occur after the created scheduler is initialized so that the initialization doesn't allow the instance to escape the synchronized block.  , [~tabish121] - just came across this bug and looked at the fix.  This isn't actually correctly thread-safe at this point.  The new code is using the broken version of double-checked locking.  In order for this to be fixed correctly, the scheduler reference must be made volatile.]