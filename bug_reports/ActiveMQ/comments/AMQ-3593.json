[Recommend you validate this against a 5.6 SNAPSHOT to see if your issue has already been fixed., I've tested it against activemq-core-5.6-SNAPSHOT.jar dated Sat Nov 19 03:23:47 and it still happens., A JUnit test case that can be included in the unit tests would help in terms of investigation and in ensuring this stays fixed in the future., I tried to isolate the problem and to replicate it in a "predictable" way, but I did not manage to. I believe it is something related to concurrency and to how the thread scheduler behaves on Linux, but I couldn't isolate the case.
Also, as far as I could understand, properties are serialized separately for each topic subscriber when the message is finally sent to the network. As far as the various clients are configured to use the same serialized format (does it make any difference for the properties?), wouldn't it be better to do it just once? Obviously, it would increase the memory footprint of each message, but since they are copied into new instances to dispatch to each subscriber queue, it would be possible to just copy the serialized version, potentially saving some memory as the properties are quite often primitive types and the serialized byte array could be the same object for all message instances.
I guess the same is applicable for the message's body, in my specific case it probably doesn't make much difference because we mainly use bytes messages, but especially with object messages it could save a lot of work to the broker.
I know that conditions are quite specific, though.
, There's no reproducible test case and no other reports of seeing this.  Testing with a recent 5.9-SNAPSHOT might show if the fixes for the concurrent store and dispatch functionality when using message groups is your issue or not.  ]