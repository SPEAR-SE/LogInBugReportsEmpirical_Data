[The ActiveMQSession actually throws a javax.jms.IllegalStateException if the session is closed when a commit() is called - which is correct. As javax.jms.IllegalStateException is derived from javax.jms.JMSException  -I'm not sure how changing it to a vanilla JMSException will fix your problem , I'm arguing that throwing a JMSException would be a better option, according to the spec. Also, it breaks the JMS integration in Spring. This is the code from Spring's JmsResourceHolder:

	public void commitAll() throws JMSException {
		for (Session session : this.sessions) {
			try {
				session.commit();
			}
			catch (TransactionInProgressException ex) {
				// Ignore -> can only happen in case of a JTA transaction.
			}
			catch (javax.jms.IllegalStateException ex) {
				// Ignore -> can only happen in case of a JTA transaction.
			}
		}
	}

As you can see, IllegalStateException is ignored, while the vanilla is thrown to the caller. Reading the javax.jms.Session javadoc as well as the JMS specification I'd say that Spring's ignoring of IllegalStateException is perfectly reasonable. , oh, alright then - will fix in 5.4 ;), Fantastic! Thanks for listening! :-), Unfortunately the JMS API says this: Invoking any other Session method on a closed session must throw a JMSException.IllegalStateException. Closing a closed session must not throw an exception - see http://download.oracle.com/docs/cd/E17477_01/javaee/1.4/api/javax/jms/Session.html#close()
 Looks like this is a bug in Spring ..., hmm...close() is a strange place to document IllegalStateException behavior for other methods. but it sure seems like you are right. I'll raise it with Spring and add the spring issue number here., Raised issue with Spring http://jira.springframework.org/browse/SPR-7360, thanks Morten!!, Going to resolve this issue - unless there is further feedback on the correct exception to be thrown when accessing a method on a Session when the Session is closed, sounds good. the issue that lead to this jira being opened has been fixed in spring.]