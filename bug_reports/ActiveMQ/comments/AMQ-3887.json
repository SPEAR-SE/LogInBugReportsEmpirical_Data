[Fix applied on trunk., With the latest 5.7-SNAPSHOT the problem is still there:

{code}
2012-07-13 15:02:25,987 INFO  .DemandForwardingBridgeSupport - Network connection between vm://smcufs02#32 and tcp:///127.0.0.1:43274(cbox-000000005300653612) has been established. [StartLocalBridge: localBroker=vm://smcufs02#32]
2012-07-13 15:02:25,988 INFO  emq.broker.TransportConnection - Started responder end of duplex bridge cBox 000000005300653612 to cBox Proxy@ID:000000005300653612-48838-1341420908942-0:1 [ActiveMQ NIO Worker 1]
2012-07-13 15:02:25,989 INFO  .ConnectorAuthenticationBroker - checked login of checkit:xdev-000000005300653612 [ActiveMQ NIO Worker 1]
2012-07-13 15:02:26,021 WARN  .DemandForwardingBridgeSupport - Caught an exception processing local command [BrokerService[smcufs02] Task-147]
java.lang.NullPointerException: null
        at org.apache.activemq.network.DemandForwardingBridgeSupport.configureMessage(DemandForwardingBridgeSupport.java:673) ~[activemq-core-5.7-SNAPSHOT.jar:5.7-SNAPSHOT]
        at org.apache.activemq.network.DemandForwardingBridgeSupport.serviceLocalCommand(DemandForwardingBridgeSupport.java:707) ~[activemq-core-5.7-SNAPSHOT.jar:5.7-SNAPSHOT]
        at org.apache.activemq.network.DemandForwardingBridgeSupport$1.onCommand(DemandForwardingBridgeSupport.java:165) [activemq-core-5.7-SNAPSHOT.jar:5.7-SNAPSHOT]
        at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:116) [activemq-core-5.7-SNAPSHOT.jar:5.7-SNAPSHOT]
        at org.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:50) [activemq-core-5.7-SNAPSHOT.jar:5.7-SNAP
SHOT]
        at org.apache.activemq.transport.vm.VMTransport.doDispatch(VMTransport.java:137) [activemq-core-5.7-SNAPSHOT.jar:5.7-SNAPSHOT]
        at org.apache.activemq.transport.vm.VMTransport.dispatch(VMTransport.java:126) [activemq-core-5.7-SNAPSHOT.jar:5.7-SNAPSHOT]
        at org.apache.activemq.transport.vm.VMTransport.oneway(VMTransport.java:103) [activemq-core-5.7-SNAPSHOT.jar:5.7-SNAPSHOT]
        at org.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:68) [activemq-core-5.7-SNAPSHOT.jar:5.7-SNAPSHOT]
        at org.apache.activemq.transport.ResponseCorrelator.oneway(ResponseCorrelator.java:60) [activemq-core-5.7-SNAPSHOT.jar:5.7-SNAPSHOT]
        at org.apache.activemq.broker.TransportConnection.dispatch(TransportConnection.java:1307) [activemq-core-5.7-SNAPSHOT.jar:5.7-SNAPSHOT]
        at org.apache.activemq.broker.TransportConnection.processDispatch(TransportConnection.java:837) [activemq-core-5.7-SNAPSHOT.jar:5.7-SNAPSHOT]
        at org.apache.activemq.broker.TransportConnection.iterate(TransportConnection.java:872) [activemq-core-5.7-SNAPSHOT.jar:5.7-SNAPSHOT]
        at org.apache.activemq.thread.PooledTaskRunner.runTask(PooledTaskRunner.java:122) [activemq-core-5.7-SNAPSHOT.jar:5.7-SNAPSHOT]
        at org.apache.activemq.thread.PooledTaskRunner$1.run(PooledTaskRunner.java:43) [activemq-core-5.7-SNAPSHOT.jar:5.7-SNAPSHOT]
        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) [na:1.6.0_20]
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) [na:1.6.0_20]
        at java.lang.Thread.run(Thread.java:619) [na:1.6.0_20]
{code}, I'd recommend that you try and crate a JUnit test case to show how this is happening., I tried, but it seems the problem only manifests in a live system.
Anyway, I think it is a race condition introduced by the following facts

* {{DemandForwardingBridgeSupport.start}}
** synchronously connects the {{local/remoteBroker}} Transports to {{serviceLocal/RemoteCommand}}
** asynchronously runs {{startRemoteBride}}
* someone sends a messageDispatch command to {{localBroker}} (whenever, maybe even before DFBS.start)
* [BrokerService[smcufs02] Task-147] delivers the message after {{DemandForwardingBridgeSupport.start}} 
** to {{DemandForwardingBridgeSupport.serviceLocalCommand}}
** which calls {{configureMessage}} which uses {{producerInfo}} which is not yet set
** and {{startLocalBridge}} may not even be started yet
* {{startRemoteBridge}}
** eventually creates {{producerInfo}}

I don't think {{serviceLocalCommand}} should handle message dispatches before the bridge is completely started. Therefore a {{waitStarted()}} after {{if (command.isMessageDispatch())}} in {{serviceLocalCommand}} should solve the problem.

It is to note that {{serviceRemoteCommand}} already includes a {{waitStarted()}} for message dispatches.

Maybe both methods should make a checked for {{disposed}} after waiting. They do check at the beginning, but if {{waitStarted}} really blocks, that may change in the meantime.
, Have you tried these changes on a build of ActiveMQ?  Without a test case we have no way of knowing whether this fixes anything, so if you want to create a SNAPSHOT build locally and try out you ideas that would be a start. , I'd ask that you at least attach your Broker configuration so that if someone wants to take a stab at creating a unit test for this they will know what your setup is. , My broker configuration contains some proprietary code which enables us to allow local connections for everyone, but remote connections need to be authenticated. I'll probably have to ask our legal department if I'm allowed to open source these.
I built a SNAPSHOT with {{waitStarted()}} and will monitor the behaviour., fyi: I have seen this exception on occasion with: org.apache.activemq.network.BrokerNetworkWithStuckMessagesTest#testBrokerNetworkWithStuckMessages, fix in http://svn.apache.org/viewvc?rev=1375459&view=rev

essentially the wait till the remote setup is complete before responding to a local dispatch., That seems to help.
Anyway, I think there is another lurking bug. When safeWaitUntilStarted() returns because of disposed.get() is true it is the same as when it returns because of the latch was unblocked.
Wherever safeWaitUntilStarted() is used should be a check afterwards whether disposed.get() is true and act accordingly.
Otherwise, thanks for your help., @Ron, the 'safety' aspect of safeWaitUntilStarted is that it won't block forever in the event of a failure of one of the transports. Any subsequent failure will result in the exception handling stopping the bridge. We can keep an eye on that, thanks for the feedback.]