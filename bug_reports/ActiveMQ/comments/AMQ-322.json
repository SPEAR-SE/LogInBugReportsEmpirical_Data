[I have tried to run on Sun JVM 1.5 update 4.  The activemq die faster as it only can run 0.6million iteration, Hi Leo,

I'm profiling with YourKit right now and I don't see a leak yet.  Did you run your tests against the 3.1 release?, BTW we've been testing heavily and cannot reproduce a memory leak.

I wonder if its something to do with your platform? e.g. is it a BEA jrocket problem? Can you reproduce the problem on Sun's JVM?, I'm having the same problem with ActiveMQ3.1 using VMPersistence in my application.  I'm running Sun's JVM (I tried 1.4.2_09 and 1.5.0_04 - both suffer same problem) on WinXP.  The same application with ActiveMQ3.0 does NOT suffer the leak.

I wrote some test classes (before i found this bug report) that send lots of simple object messages (containing just a 150 character string) and i'm losing ~10Mb/min.  I tried the exact same test with ActiveMQ3.0 - no leak.

I'm profiling with Yourkit - the producer and consumer run quite happily but the broker is clearly leaking.  I can upload my test classes if that helps.



, Hi,

I been posted another comment by 11, Auguest 
http://jira.logicblaze.com/jira/browse/AMQ-322#action_34849
I been told I also tested with SUN JVM and it die faster than Jrockit.  So 3.0 Active MQ die both on SUN and BEA JVM.  I haven't try 3.1 Production release as this version has not been released on this issue posting day but I have tried 3.1 M6 at that moment but same memory leak problem.  , Regarding my previous comment (6th Sep):  My bad, sorry!  I've set the DeliveryMode of the publisher to DeliveryMode.NON_PERSISTENT and all is well again - no leaking., Steve/Leo - do either of you have any ideas on how we can reproduce a memory leak? We're really really trying to reproduce your issue and we cannot think of what it is you're doing differently.

Any help greatly appreciated, James, i've attached my test (eclipse) project ... I profiled the MessageBroker using Yourkit, then ran the producer and consumer - the memory leak was pretty clear in ActiveMQ3.1 *until* I added the line:

publisher.setDeliveryMode(DeliveryMode.NON_PERSISTENT);

to the producer.  With the above line included there is no leak, so I think the fault was in my usage of ActiveMQ, rather than ActiveMQ itself.  

cheers,
Steve., sorry, i should have said that the test project i attached currently has the NON_PERSISTENT line in the producer, so it shouldn't leak ... comment out that line to see the leak ;), I have download 3.1 Production release and test again by same environment as before.  I will notify you once I get the result, I have retest on the same environment based on 3.1 Production release, the result is positive and bug seem  to be not produced on this version., Thanks for verifying this works Leo!]