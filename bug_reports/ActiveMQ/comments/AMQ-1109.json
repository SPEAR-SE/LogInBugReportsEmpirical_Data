[It looks like SQL Server does not support the exclusive locking syntax for JDBC Master/Slave.

As a workaround you can add the following property to your activemq.xml...

<journaledJDBC useDatabaseLock="true" ...>...

I've just patched 4.2 so that it should work without this workaround; see AMQ-1191 for more details




, I had the described problem while using version 4.1.1.  Finally I found this issue.  Using the workaround as described above did not solve my problem.  

But after changing <journaledJDBC useDatabaseLock="true" ...> to <journaledJDBC useDatabaseLock="false" ...> I could get the JDBC Persistence to work.
, Hello.

I donÂ´t think, that this Issue is fixed because:

deactivating the lock Database option works for, but even the Slave will become online. 
If both were Online using the same Database, you get Problems with the Messages produced on the slave or the master.
You will get an inconsitent state.
The Master did not recocognize Messages produced on the Slave and the other way arround.

Kind regards,

Nils Hondong
, I am using 5.3.0 deployed as EAR/RAR on JBoss. I don't have the setting useDatabaseLock="true" in the broker-config.xml.
 
With MSSQL 2000 and MSSQL 2005 it works fine but with MSSQL 2008 I keep getting these messages, broker never starts up.

2009-11-12 21:51:15,992 INFO  [STDOUT] 2009-11-12 21:51:15,992 [ActiveMQ Broker] INFO  DefaultDatabaseLocker          - Failed to acquire lock.  Sleeping for 1000 milli(s) before trying again...

Looks like the ACTIVEMQ_MSGS table is not getting created where as ACTIVEMQ_ACKS & ACTIVEMQ_LOCK tables are created.

Even with useDatabaseLock="true", broker doesn't come up.  Any idea when this fix is expected?
, I tried creating ACTIVEMQ_MSGS manually as well.  So I don't know if there is any workaround for this problem.  Pleaese let us know., HiSkill,
so is your problem that the messages table create fails? if so, what is the error you get?
If not, is your problem with the locker implementation. If so, do you know what will work? the locker implementation can be overridden on an adapter basis by adding an implementation reference to the finder resource location. see: http://svn.apache.org/viewvc/activemq/tags/activemq-5.3.0/activemq-core/src/main/resources/META-INF/services/org/apache/activemq/store/jdbc/lock/microsoft_sql_server_2005_jdbc_driver?view=markup for the microsoft_sql_server_2005_jdbc_driver override from the default. 
You can implement your own and have it picked up by adding the corresponding resource to the classpath., Thanks for the quick reply Gary.

As I mentioned, I saw the problem only with MSSQL 2008.

Here is our configuration:
- we deployed activemq as RAR on JBoss
- currently we have only one broker configured but at some point we will add more brokers
- we didn't explicitly set "useDatabaseLock" property in the broker-config.xml

Couple of problems
1. when the broker starts for the first time ACTIVEMQ_ACKS & ACTIVEMQ_LOCK tables are created but ACTIVEMQ_MSGS is not created
2.  getting "Failed to acquire lock" errors continusly

So I tried creating ACTIVEMQ_MSGS manually and restarted the broker, still get the "Failed to acquire lock" errors continusly

Only way to get this working is to set property useDatabaseLock="false", this will work fine with one broker as for multiple brokers lock is needed.

Please let me know if there is a workaround for our problem.


Here is the part of stacktrace:

Reason: java.io.IOException: Failed to get last broker message id: com.microsoft.sqlserver.jdbc.SQLServerException: Invalid object name 'ACTIVEMQ_MSGS'.
java.io.IOException: Failed to get last broker message id: com.microsoft.sqlserver.jdbc.SQLServerException: Invalid object name 'ACTIVEMQ_MSGS'.
	at org.apache.activemq.util.IOExceptionSupport.create(IOExceptionSupport.java:33)
	at org.apache.activemq.store.jdbc.JDBCPersistenceAdapter.getLastMessageBrokerSequenceId(JDBCPersistenceAdapter.java:170)
	at org.apache.activemq.store.journal.JournalPersistenceAdapter.getLastMessageBrokerSequenceId(JournalPersistenceAdapter.java:212)
	at org.apache.activemq.broker.region.DestinationFactoryImpl.getLastMessageBrokerSequenceId(DestinationFactoryImpl.java:140)
	at org.apache.activemq.broker.region.RegionBroker.<init>(RegionBroker.java:106)
	at org.apache.activemq.broker.jmx.ManagedRegionBroker.<init>(ManagedRegionBroker.java:94)
	at org.apache.activemq.broker.BrokerService.createRegionBroker(BrokerService.java:1695)
	at org.apache.activemq.broker.BrokerService.createRegionBroker(BrokerService.java:1689)
	at org.apache.activemq.broker.BrokerService.createBroker(BrokerService.java:1649)
	at org.apache.activemq.broker.BrokerService.getBroker(BrokerService.java:667)
	at org.apache.activemq.broker.BrokerService.getAdminConnectionContext(BrokerService.java:1866)
	at org.apache.activemq.broker.BrokerService.startDestinations(BrokerService.java:1853)
	at org.apache.activemq.broker.BrokerService.start(BrokerService.java:450)
	at org.apache.activemq.xbean.XBeanBrokerService.afterPropertiesSet(XBeanBrokerService.java:56)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1369)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1335)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:473)
, 4.x broker series is EOL.]