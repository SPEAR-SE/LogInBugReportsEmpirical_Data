[This is not so much a problem for intra-site broker on a fast backbone, but we also intend to network inter-site brokers and unnecessary traffic must be elimited., After some further testing with the CommandTrace logging category set to debug level set (love this little bugger), I observed other interesting facts that may add to excess traffic.  

Give two brokers (A and B) that are networked, a consumer registration that is sent across the bridge from A to B, will be immediately echoed back in the opposite direction from B to A.  I can understand that this consumer registration should be passed on from B to other networked brokers, but isn't sending the consumer registration back to the source (A) considered to be a bug?
, Still working on understanding this networked broker details, but another tidbit that I found is might may or may not be an issue.

Using reliable connections between brokers;  when a broken connection is detected because of a failure in a thread sending a message it enters the doReconnect() but does not stop the Keep-alive thread.  Then the Keep-alive thread detect the failure and also enters the doReconnect().  Now there are two thread that are trying to reestablish the connection. Hmm...
, Getting back to work on this one.   As a first step I set up three brokers connected in sequence ( A <-> B <-> C ), and immediately ran into to a unique problem.  In this configuration when a messages is published by a client attached to broker A, the message is not repeated over the B<->C bridge.  A subscriber on broker C would never see this message.

I am not sure if this is bug or a design feature.  While this would be one way of reducing bridge traffic, it also prevents effective use of the reliable connection option between clusters on two site.

Need an official determination on this.
, Well it seems that the problem that I originally saw back in July is not a problem any longer.  But I am a bit worried about the fact that a message generated on any given host can only traverse a single network bridge.  While in my present configuration I can interconnect all brokers and it is not a problem.  I might even be a good thing as it keeps network traffic down.  But I can imagine scenarios where this would be a problem.

So again I ask: Is this was a design feature or a bug?
, This is partly a design decision; we made sure store and forward worked first. Though demand based forwarding was always meant to be added; we'd just not got there yet :)

This should be in SVN really soon now..., This is now enabled by default via the flag on the NetworkChannel.
, scripts libraries and classes for testing, I have tested the NetworkChannel demandBasedForwarding option.  First the activemq.dtd was not updated when the change to NetworkChannel.java was checked in.  After making the update I tried to set the value to false, but did not seem to have any effect.  The broker configuration was setup as follows

A <> B <> C

The producing client was attached to broker A. The consuming client attached to broker C.  Neither value for demandBasedForwarding will allow the produced message to travel across both bridges (A-B and B-C) to arrive at the consumer.  I have confirmed this both with non-persistent Topic and persistent queue messages.  In addition, with the value set to false, I expected to see the produced message for a non-persistent Topic message to atleast travel across the first bridge (A-B) even if there was no client for the message on broker B.  But no message is passed in this case.

So one more time I ask, is it valid to have a configuration such as show here:

Producing client  > broker A <> broker B <> broker C > consuming client

If so, then this is still broken.


Note, the attachment includes my broker configuration files in addition to scripts libraries and classes that I used for testing.
, - Added org.apache.activemq.usecases.TwoBrokerMessageNotSentToRemoteWhenNoConsumerTest to check that no message dispatches are sent over the network when there is no consumer registered at the remote broker.

- Added org.apache.activemq.usecases.ThreeBrokerQueueNetworkTest.test_AB_BC_BrokerNetwork to test a three broker setup producer->BrokerA->BrokerB->BrokerC->consumer. Currently, it is expected that no messages will reach BrokerC. By design, message dispatch can only hop from one broker to the immediate connected broker only., Additional comments:

- The test cases are for AMQ 4.x
- For TwoBrokerMessageNotSentToRemoteWhenNoConsumerTest , Demand Forwarding Bridge was used.]