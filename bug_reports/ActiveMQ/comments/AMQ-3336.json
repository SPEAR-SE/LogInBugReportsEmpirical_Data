[the failover transport will recreate temp destinations but an activemq connection tracks a temp destination deleted advisory. 
When the broker is shutdown via stop, the temp dest is deleted as part of the connection close and the advisory fires so the connection sees the destination as deleted.

You need to configure the activemq connection to not track temp advisories:
jms.watchTopicAdvisories=false as a url param on the client brokerURL, or via the corresponding attribute on the connection or connection factory.

, Disabling the advisories will lead to other issues for our network.  Perhaps the right answer here is to distinguish a clean broker shutdown from an abrupt one.  On a clean shutdown, a formal process can be used to eliminate, or minimize, the impact on clients of temporary destinations.

I'll test abrupt broker termination.  Any tips on doing so in a JUnit with multiple brokers (BrokerService instances) would be appreciated.
, On the advisory, in an ActiveMQConnection, the advisory is only used for temp deletion detection as an optimization to save on a round trip to the broker. So the impact will be limited to just your use case. You still leave advisorySupport=true for the broker.

To simulate an abortive broker shutdown for clients I use the org.apache.activemq.util.SocketProxy test class from activemq-core, that easily allows the connection to be aborted between the client and broker. See usage is something like
org.apache.activemq.usecases.BrokerQueueNetworkWithDisconnectTest
, I see.  I'll try the advisory setting - that sounds good.

For abortive, the primary purpose is H/A testing of a failover, although I can test this use case with that method...  I'll look at that.

Thanks!
]