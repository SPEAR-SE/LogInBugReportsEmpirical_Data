[Attached screenshot of MAT leak suspects., The memory dump is too large to attach so I've compressed it and posted it here:

https://dl.dropbox.com/u/3337852/grand-central.wl2-prod.2012-07-09_16-41-37.hprof.zip
, Looking at the JMX info via JConsole, I can see that under org.apache.activemq->Broker Name->Producer->TempQueue there are hundreds or thousands of entries. Way more than what is under org.apache.activemq->Broker Name->TempQueue which contains about 45 entries. This is after running the broker for 8 days, about half of the expected life before exhausting memory.

What puts entries under Producer and does it ever clean them up?, After some more digging I'm wondering if this is related to the clients to the broker using Apache Camel for request/reply messages. We're using Spring's CachingConnectionFactory in the clients and it looks like Camel use Spring's JmsTemplate to send a reply on a request reply. It may be possible that JmsTemplate is creating a new MessageProducer for the reply which is getting cached in the CachingConnectionFactory. Because the reply queues are temporary and may change over time, the cached producers are never getting reused or released. I'll have to look at the Spring source to see if they have any maximum to the number of cached producers and see if I can setup some kind of test case. It still seems odd that this could generate thousands of producers/JMX entries, but not out of the question., After some more testing I was able to determine that indeed this was user error. The Spring CachingConnectionFactory defaults to caching an unlimited number of producers. This causes problems when a new producer is request to send a reply message on a temporary queue because a new producer is created and cached for each reply message (assuming the same temporary queue isn't reused).

So the lesson is, disable producer caching when using:
- Spring's CachingConnectionFactory
- Apache Camel
- Request/Reply messages on temporary queues

You can reject/close this defect. Sorry for the trouble., User indicates this is a non-issue., We are experiencing a very similar issue.  We create a lot of temporary queues and JMX is turned on, we consume all of PermGen very quickly.  When JMX is off, we can "run forever".  Running the code below, I can observer the permgen space using jvisualvm:

ActiveMQConnectionFactory cf = new ActiveMQConnctionFactory(new URI("<my borker>"));
Connection c = cf.createConnection();
Session s = c.createSession(false, Session.AUTO_ACKNOWLEDGE);
for (int i=0; i<10000; i++)
{
TemporaryQueue q = s.createTemporaryQueue();
q.delete();
}
s.close();
c.close();, Have you enabled the cleanup of inactive destinations?  See:
http://activemq.apache.org/delete-inactive-destinations.html , Thanks for the suggestion.  I tried it but it did not help.  The new clue I discovered today is that the PermGen space can be reclaimed if ALL connections to ActiveMQ are closed.]