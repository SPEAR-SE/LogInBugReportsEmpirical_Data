[Have you tested using a 5.6-SNAPSHOT to see if your issue has already been resolved?, No not yet. I will test. I just run another test tonight. I will see tomorrow., So I tested last snapshot (I downloaded latest binary broker build and for my producer I set URL for ActiveMQ snapshot repository), I reviewed my code to make sure Session is used from one thread only, I cache producers (I have 3 producers for 3 topics), I even created Session and MessageProducers in worker thread and then call send from this worker thread. Still after 23000 messages sent it again fails. This time there is no subscriber. Only producer and broker. This time it starts with:
{code}
2012-02-22 21:37:43,224 ERROR [com.idc.publishing.metacop.jms.JmsProducer] (JmsProducerWorker-1) MetaCop Error > Could not send message to JMS topic:idc.publishing.metacop.Company2: javax.jms.JMSException: java.io.EOFException
        at org.apache.activemq.util.JMSExceptionSupport.create(JMSExceptionSupport.java:62) [activemq-core-5.6-20120104.153301-1.jar:]
        at org.apache.activemq.ActiveMQConnection.doSyncSendPacket(ActiveMQConnection.java:1360) [activemq-core-5.6-20120104.153301-1.jar:]
        at org.apache.activemq.ActiveMQConnection.syncSendPacket(ActiveMQConnection.java:1340) [activemq-core-5.6-20120104.153301-1.jar:]
        at org.apache.activemq.ActiveMQSession.send(ActiveMQSession.java:1777) [activemq-core-5.6-20120104.153301-1.jar:]
        at org.apache.activemq.ActiveMQMessageProducer.send(ActiveMQMessageProducer.java:247) [activemq-core-5.6-20120104.153301-1.jar:]
        at org.apache.activemq.ActiveMQMessageProducerSupport.send(ActiveMQMessageProducerSupport.java:241) [activemq-core-5.6-20120104.153301-1.jar:]
        at com.idc.publishing.metacop.jms.JmsProducer$3.run(JmsProducer.java:210) [classes:]
        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441) [:1.6.0_30]
        at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303) [:1.6.0_30]
        at java.util.concurrent.FutureTask.run(FutureTask.java:138) [:1.6.0_30]
        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) [:1.6.0_30]
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) [:1.6.0_30]
        at java.lang.Thread.run(Thread.java:662) [:1.6.0_30]
Caused by: java.io.EOFException
        at java.io.DataInputStream.readInt(DataInputStream.java:375) [:1.6.0_30]
        at org.apache.activemq.openwire.OpenWireFormat.unmarshal(OpenWireFormat.java:275) [activemq-core-5.6-20120104.153301-1.jar:]
        at org.apache.activemq.transport.tcp.TcpTransport.readCommand(TcpTransport.java:229) [activemq-core-5.6-20120104.153301-1.jar:]
        at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:221) [activemq-core-5.6-20120104.153301-1.jar:]
        at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:204) [activemq-core-5.6-20120104.153301-1.jar:]
        ... 1 more
{code}
It is after I sent about 110000 messages successfully.

After a while it tries to recover:
{code}
2012-02-22 21:37:43,698 INFO  [org.springframework.jms.listener.SimpleMessageListenerContainer] (ActiveMQ Connection Executor: tcp://usfr-cmsnpdev.insideidc.com/10.1.4.42:61616) Trying to recover from JMS Connection exception: javax.jms.JMSException: java.io.EOFException
2012-02-22 21:37:43,698 DEBUG [com.idc.publishing.metacop.repository.DocumentRepositoryImpl] (CalaisWorker-11) Update classification with 38 categories for document:HW62R9
2012-02-22 21:37:43,705 ERROR [stderr] (InactivityMonitor WriteCheck) Exception in thread "InactivityMonitor WriteCheck" java.util.concurrent.RejectedExecutionException
2012-02-22 21:37:43,705 ERROR [stderr] (InactivityMonitor WriteCheck)   at java.util.concurrent.ThreadPoolExecutor$AbortPolicy.rejectedExecution(ThreadPoolExecutor.java:1768)
2012-02-22 21:37:43,705 ERROR [stderr] (InactivityMonitor WriteCheck)   at java.util.concurrent.ThreadPoolExecutor.reject(ThreadPoolExecutor.java:767)
2012-02-22 21:37:43,705 ERROR [stderr] (InactivityMonitor WriteCheck)   at java.util.concurrent.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:658)
2012-02-22 21:37:43,705 ERROR [stderr] (InactivityMonitor WriteCheck)   at org.apache.activemq.transport.AbstractInactivityMonitor.writeCheck(AbstractInactivityMonitor.java:142)
2012-02-22 21:37:43,705 ERROR [stderr] (InactivityMonitor WriteCheck)   at org.apache.activemq.transport.AbstractInactivityMonitor$2.run(AbstractInactivityMonitor.java:111)
2012-02-22 21:37:43,705 ERROR [stderr] (InactivityMonitor WriteCheck)   at org.apache.activemq.thread.SchedulerTimerTask.run(SchedulerTimerTask.java:33)
2012-02-22 21:37:43,720 ERROR [stderr] (InactivityMonitor WriteCheck)   at java.util.TimerThread.mainLoop(Timer.java:512)
2012-02-22 21:37:43,720 ERROR [stderr] (InactivityMonitor WriteCheck)   at java.util.TimerThread.run(Timer.java:462)
{code}
and next session gets closed:
{code}
2012-02-22 21:37:45,229 ERROR [com.idc.publishing.metacop.jms.JmsProducer] (JmsProducerWorker-1) MetaCop Error > Could not send message to JMS topic:idc.publishing.metacop.Document2: javax.jms.IllegalStateException: The Session is closed
        at org.apache.activemq.ActiveMQSession.checkClosed(ActiveMQSession.java:727) [activemq-core-5.6-20120104.153301-1.jar:]
        at org.apache.activemq.ActiveMQSession.configureMessage(ActiveMQSession.java:715) [activemq-core-5.6-20120104.153301-1.jar:]
        at org.apache.activemq.ActiveMQSession.createTextMessage(ActiveMQSession.java:428) [activemq-core-5.6-20120104.153301-1.jar:]
        at com.idc.publishing.metacop.jms.JmsProducer$3.run(JmsProducer.java:209) [classes:]
        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441) [:1.6.0_30]
        at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303) [:1.6.0_30]
        at java.util.concurrent.FutureTask.run(FutureTask.java:138) [:1.6.0_30]
        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) [:1.6.0_30]
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) [:1.6.0_30]
        at java.lang.Thread.run(Thread.java:662) [:1.6.0_30]
{code}, Since there is an offline durable subscriber the store will eventually fill up and the send will fail since you have a send timeout configured.  All appears to be working as designed.  , I see the same problem even without ANY subscriber., Are you seeing a variant of http://activemq.apache.org/slow-networks-drop-large-messages.html - as in you need to configure the inactivity monitor?

I think the{code}2012-02-22 21:37:43,705 ERROR [stderr] (InactivityMonitor WriteCheck) Exception in thread "InactivityMonitor WriteCheck" java.util.concurrent.RejectedExecutionException
{code} issues is resolved on trunk, In this test producer and broker are on the same machine and messages are small (few KBs). Any idea at what date recovery was fixed? I tested latest snapshot build at that day. First problem is why connection fails/is lost. Recommended usage is to keep connection and reuse it but in my case it does not work. Currently only workaround I see is to periodically recreate connection., Have you tried using the activemq-pool or other pooling (Spring has a CachedPoolingConnectionFactory i think its name is) for the producer.
That is the generally recommendation for a client if they are not reusing the same producer instance to send many messages., I create new producer for every message send. I use org.apache.activemq.ActiveMQConnectionFactory as connection factory. Code sample for sending message is as follows:
{code}
    private void sendMessage(String xmlMessage, Topic topic, String containerId) {
        String topicName = null;
        MessageProducer producer = null;
        try {
            topicName = topic.getTopicName();
            // Create the producer.
            producer = session.createProducer(topic);
            TextMessage txtMessage = session.createTextMessage(xmlMessage);
            producer.send(txtMessage);
        } catch (JMSException ex) {
            //Exception handling....
        } finally {
            //Closing producer ...
        }
    }
{code}
Connection and session are created in init method. So it does not use any connection pooling., If you are still seeing an issue using the latest release or one of the latest nightlies than I'd recommend putting together a JUnit test case that reproduces your problem so that someone can look into it further., A unit test was never provided to validate this issue.]