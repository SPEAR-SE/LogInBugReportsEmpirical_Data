[The patch, Any way this fix can be included in 5.4.0?  This seems like a glaring omission of very basic functionality and the fix looks simple enough., patch applied in r983564 with thanks. added a test to keep the changes safe!, Hi, this patch broke the jms spec:

-----------------------------------------------------------------------------------------------
/**Returns an Enumeration of all the property names. 
** Note that *JMS standard header fields are not considered properties and are not returned in this enumeration*. 
**/
Enumeration getPropertyNames()  throws JMSException
----------------------------------------------------------------------------------------------------

So that this change is preventing the tck from passing.    Could you please fix this ?  
, pending spec compliance issue - part of this patch needs to be reverted., reverted the non jms spec compliant part of the patch in r987090, I found that the version of trunk is 5.5-SNAPSHOT.    Are you planing to release a 5.4.1 to fix this ?

In my opinion,  a 5.4.1 with fix should be released ASAP because the user's JMS code based on the wrong implementation will not be portable.
, Guys, let's read the JMS spec carefully:

The spec says that the following are standard header fields (starting with "JMS" prefix):
JMSDestination
JMSDeliveryMode
JMSExpiration
JMSPriority
JMSMessageID
JMSTimestamp
JMSCorrelationID
JMSReplyTo
JMSType
JMSRedelivered

However, the following are NOT header fields but are JMS Defined *_Properties_* (starting with "JMSX" prefix):
JMSXUserID
JMSXAppID
JMSXDeliveryCount
JMSXGroupID
JMSXGroupSeq
JMSXProducerTXID
JMSXConsumerTXID
JMSXRcvTimestamp
JMSXState

Of these, it looks like AMQ supports 3: JMSXDeliveryCount, JMSXGroupID and JMSXGroupSeq.  Now, the ActiveMQMessage class puts both the JMS header fields and the JMSX message properties into the same JMS_PROPERTY_SETERS map, so i agree, returning the whole map is wrong, but the JMSX properties MUST still be returned.

So I think the proper solution is to replace the (reverted) line:
{code}
result.addAll(new Vector<String>(JMS_PROPERTY_SETERS.keySet()));
{code}
with something like:
{code}
for (String propName : JMS_PROPERTY_SETERS.keySet()) {
    if (propName.startsWith("JMSX")) {
        propsVector.add(propName);
    }
}
{code}
, Eugene, that seems correct, have made is so JMSX props are returned. r987193

Shawn, will this pass the tck?

As to a 5.4.1 asap, I agree it is a portability issue, but one few people are likely to encounter. Lets see what others think., In Geronimo, we've been lining up our next 2.2.x release to be based on 5.4.0. With the limited time between this regression and release, we weren't able to nail down the cause of this problem (we had made connector/transaction manager updates around the same time, which could have had some impact on our JMS tests).

So, I, for one, would be interested in a 5.4.1 release "soon"., Gary,  #987193  bring the same TCK Failures.    Could you revert them ?, I reverted the changes so the TCK will pass. I added a new method, getAllPropertyNames() that returns all the properties, JMS standard props and JMSX extension props, so folks who want this non standard behavior can have it in an explicitly non portable way.

My bad on this late change, not sure it would have been avoided if I validated against the spec though, I would have taken Eugene's interpretation.

What is the expected drop date for Geronimo, it makes sense to cut a new release for the next 2.2.x release. Think it may also makes sense to wait some time to ensure there are no other must fix issues.
, Shawn, thanks for running those tests!

We're also waiting for an Axis release. But I'm hoping for a mid-September release. So, a 5.4.1 in 2-3 weeks should work. , resolving this. It may make sense to validate tck again, just to be sure to be sure., The axis2 release we're waiting on for the Geronimo release has finally gone to a vote.  We're going to be needed the 5.4.1 release shortly too.  The snapshot version has been looking good with the TCK. ]