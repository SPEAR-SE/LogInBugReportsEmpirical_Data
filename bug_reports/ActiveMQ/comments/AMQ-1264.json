[added an affected version, given your recent work on the Kaha/AMQStore I figured this was for you :), I tested this again in activemq-5.0-20070621.

I used a Net::Stomp based client to produce 250,000 mesages into a queue.  And then used a consumer to grab messages.  After consuming 85,000 of the message, I "kill -9" (immediate exit) the java process, and then started ActiveMQ again.

ActiveMQ starts a Kaha recovery:

INFO  AMQPersistenceAdapter          - Journal Recovery Started from: DataManager:(data-)
INFO  AMQPersistenceAdapter          - Recovered 176328 operations from redo log in 2905.979 seconds.

(which takes a really long time, as you can see)

And it still does this.  This looks like a trivial bug?  It looks someone just appended two hypens to "data".  Probably because the DataManager starts with "data-" (as logged above), and then adds "-1" afterwards.

ERROR AsyncDataManager               - Looking for key 1 but not found in fileMap: {2=data-2 number = 2 , length = 33554395 refCount = 0, 4=data-4 number = 4 , length = 3913200 refCount = 3, 3=data-3 number = 3 , length = 33554195 refCount = 0}
ERROR QueueStorePrefetch             - Failed to fill batch
java.io.IOException: Failed to read to journal for: offset = 28983199, file = 1, size = -1, type = 0. Reason: java.io.IOException: Could not locate data file data--1
        at org.apache.activemq.util.IOExceptionSupport.create(IOExceptionSupport.java:31)
        at org.apache.activemq.store.amq.AMQPersistenceAdapter.createReadException(AMQPersistenceAdapter.java:541)
        at org.apache.activemq.store.amq.AMQPersistenceAdapter.readCommand(AMQPersistenceAdapter.java:421)
..., this should be fixed - I can't reproduce - can you confirm Tom ?, I have tested with a 5.0 snapshot from July 12, and it seems to be fine now.

But you'll want to avoid crashes, as a Kaha recovery on a message store after 200,000 messages have been queued, and then 55,000 removed, takes about a half-hour.

I guess all of the dead-space in the Kaha log files takes a while to scan.  Would reducing the file size help?  I think Kaha removes files that no longer contain any active data as messages are consumed.  So if the log files are smaller, the log recovery should be faster right?, reducing the size of the log files should help - I'll make it configurable on the AMQStore - thanks for the help Tom!, This now appaears fixed, Hello, 

I think I am not supposed to re-open this issue, but the fact is, if there is a crash, recovery takes a  huge amount of time. 

2008-04-28 11:32:21,123 [erSimpleAppMain] INFO  AMQPersistenceAdapter          - Recovered 722013 operations from redo log in 3801.997 seconds.

I understand this might have to be recovered once.  But, suppose we have a SAN master-slave configuration, basing it on AMQStore: the fact it's taking more than half an hour to recover renders this topology unusable! 


Moreover, it seems like kaha is not removing log files not containing any more active-data.

For instance, a recent log in a crash:
 
2008-04-28 10:28:59,126 [erSimpleAppMain] INFO  AMQPersistenceAdapter          - Journal Recovery Started from: DataManager:(data-)
2008-04-28 10:28:59,146 [msg.performance] DEBUG AMQMessageStore                - Doing batch update... adding: 0 removing: 0
2008-04-28 10:28:59,147 [msg.performance] DEBUG AMQMessageStore                - Batch update done.
2008-04-28 10:29:02,798 [erSimpleAppMain] DEBUG AMQPersistenceAdapter          - TRACE Entry: CHECKPOINT Tue Apr 15 13:49:33 CEST 2008
2008-04-28 10:29:56,556 [erSimpleAppMain] DEBUG AMQPersistenceAdapter          - TRACE Entry: CHECKPOINT Tue Apr 15 13:50:33 CEST 2008
(Repeats same Tracing until) 
2008-04-28 10:32:07,354 [erSimpleAppMain] DEBUG AMQPersistenceAdapter          - TRACE Entry: CHECKPOINT Thu Apr 17 15:23:33 CEST 2008
2008-04-28 10:32:07,354 [erSimpleAppMain] DEBUG AMQPersistenceAdapter          - TRACE Entry: RECOVERED Thu Apr 17 15:26:50 CEST 2008
2008-04-28 10:32:07,354 [erSimpleAppMain] DEBUG AMQPersistenceAdapter          - TRACE Entry: RECOVERED Thu Apr 17 16:04:16 CEST 2008
2008-04-28 10:32:07,354 [erSimpleAppMain] DEBUG AMQPersistenceAdapter          - TRACE Entry: RECOVERED Fri Apr 18 10:38:25 CEST 2008
2008-04-28 10:32:07,354 [erSimpleAppMain] DEBUG AMQPersistenceAdapter          - TRACE Entry: RECOVERED Fri Apr 18 14:43:28 CEST 2008
2008-04-28 10:32:07,355 [erSimpleAppMain] DEBUG AMQPersistenceAdapter          - TRACE Entry: RECOVERED Fri Apr 18 16:52:44 CEST 2008
2008-04-28 10:32:07,355 [erSimpleAppMain] DEBUG AMQPersistenceAdapter          - TRACE Entry: RECOVERED Fri Apr 18 17:00:09 CEST 2008
2008-04-28 10:32:11,196 [erSimpleAppMain] DEBUG AMQPersistenceAdapter          - TRACE Entry: CHECKPOINT Wed Apr 23 11:41:09 CEST 2008
(Repeats same tracing until)
2008-04-28 11:32:21,091 [erSimpleAppMain] DEBUG AMQPersistenceAdapter          - TRACE Entry: CHECKPOINT Mon Apr 28 10:26:09 CEST 2008
2008-04-28 11:32:21,091 [erSimpleAppMain] DEBUG AMQPersistenceAdapter          - TRACE Entry: CHECKPOINT Mon Apr 28 10:27:09 CEST 2008
2008-04-28 11:32:21,123 [erSimpleAppMain] INFO  AMQPersistenceAdapter          - Recovered 722013 operations from redo log in 3801.997 secon
ds.
2008-04-28 11:32:21,123 [erSimpleAppMain] INFO  AMQPersistenceAdapter          - Finished recovering the ReferenceStore



So, only very few operations were recovered, and most of the time the recovering time seems to have been spent unecessarily.

Even assuming this is necessary once, why is it necessary to go back this much in time if we failover again?


Thanks,
daniel]