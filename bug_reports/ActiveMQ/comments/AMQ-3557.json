[Configuration file we are using., There was recently an improvement made to the JDBC persistence adapter to remove an unneeded synchronization point. See the last comment of AMQ-2868. This fix improves performance of the JDBC persistence adapter in case of using multiple consumers. 
, https://fisheye6.atlassian.com/changelog/activemq?cs=1035202
seems to be the culprit but the use case is durable subs with a selector and low prefetch. Think that fix needs a revisit.
the maxRowSize should be a max, not a min. maxRowSize can be configured on the jdbcpersistnceadapter to set it to a more reasonable value like 400.
re durables, setting batch size based on prefetch should be avoided, probably., Setting maxRows=200 on the jdbcPersistenceAdapter looks like it solves the problem. My quick testing showed a normal consumption without any pauses. I will run some other tests to be sure, but so far it looks good.

I had seen the maxRows variable in the JDBC code, but was not aware that it could be set in the XML file. I might suggest that this be documented somewhere.

I might also suggest that the default value for maxRows be set to whatever the default batch size is. That is, AMQ/jdbcAdapter seems to process messages in batches of 200. Setting the default value of maxRows to be the same as this batch size (i.e. 200) would seem to make better sense as a default setting. I don't know all of the usecases, but setting this value to anything greater than the batch size would seem to make the DB do needless work.
, The jdbc version of test: org.apache.activemq.usecases.DurableSubscriptionSelectorTest#testSubscription 
demonstrates the need to setMaxRows to a large value in the sparse selector case. Using a large destination page size via policy is a better solution as it is more specific., fix in http://svn.apache.org/viewvc?rev=1376934&view=rev]