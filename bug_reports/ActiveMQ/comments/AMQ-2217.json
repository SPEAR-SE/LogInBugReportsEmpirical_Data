[There is a workaround, demonstrated in the committed test case. Thanks for the neat test case btw. 
Increasing the maxPageSize from the default 200 to 5000 makes the test work. In xml config for all queues it would be something like:
{code}<destinationPolicy>
            <policyMap>
                <policyEntries>
                    <policyEntry queue=">" maxPageSize="5000"/>
                </policyEntries>
            </policyMap>
        </destinationPolicy>{code}, The pageSize is the amount of messages that are pulled into memory by a destination prior to a dispatch, it needs to be large enough to bridge the gaps between messages with sparse selector distribution, otherwise messages of one type will halt the dispatch till they are consumed or expire. A sensible message expiry policy can help in tandem here., This is a known limitation, with the Apollo (AMQ 6) project we will be able to address this architectural constraint.
In the mean time, using a large maxPageSize, named queues at the application level, or filtered name virtual queues can provide an alternative strategy. , Does this mean that there is no plan to fix it in future versions of ActiveMQ and not Appollo ?
]