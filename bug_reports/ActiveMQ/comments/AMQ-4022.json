[Have you tried using the 5.6.0 release of ActiveMQ or a 5.7 SNAPSHOT?  There were a lot of fixes and improvements in the STOMP transport between 5.5.1 and 5.6, Thanks for the reply Timothy. 

We haven't tried with 5.6 or 5.7 for this issue, no. But, I have good news: I think I just found the problem and am currently testing a fix. 

I found that the problem is a deadlock in broker.TransportConnection. Once that was clear, the fix was rather easy. I'm currently running the test script and am hopeful that there'll be no problems. If everything's ok I'll get back to you with a patch. 

I checked the 5.6 branch and can confirm that the issue does exist there also. Haven't checked 5.7., jstack output (partial) from when the problem had been reproduced:

{noformat}
"ActiveMQ Transport: tcp:///127.0.0.1:59675" daemon prio=10 tid=0x00000000402bf000 nid=0x1bf0 waiting for monitor entry [0x00007fffcc787000]
   java.lang.Thread.State: BLOCKED (on object monitor)
    at org.apache.activemq.broker.TransportConnection.removeConsumerBrokerExchange(TransportConnection.java:1473)
    - waiting to lock <0x00000000c3cf2838> (a java.util.HashMap)
    at org.apache.activemq.broker.TransportConnection.processRemoveConsumer(TransportConnection.java:684)
    at org.apache.activemq.broker.TransportConnection.processRemoveSession(TransportConnection.java:721)
    at org.apache.activemq.broker.TransportConnection.processRemoveConnection(TransportConnection.java:840)
    - locked <0x00000000c3ce8e98> (a org.apache.activemq.broker.jmx.ManagedTransportConnection)
    at org.apache.activemq.command.RemoveInfo.visit(RemoveInfo.java:77)
    at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:336)
    at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:189)
    at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:69)
    at org.apache.activemq.transport.stomp.StompTransportFilter.sendToActiveMQ(StompTransportFilter.java:81)
    at org.apache.activemq.transport.stomp.ProtocolConverter.sendToActiveMQ(ProtocolConverter.java:166)
    at org.apache.activemq.transport.stomp.ProtocolConverter.onStompDisconnect(ProtocolConverter.java:586)
    at org.apache.activemq.transport.stomp.ProtocolConverter.onStompCommand(ProtocolConverter.java:220)
    at org.apache.activemq.transport.stomp.StompTransportFilter.onCommand(StompTransportFilter.java:70)
    at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83)
    at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:232)
    at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:204)
    at java.lang.Thread.run(Thread.java:662)

"ActiveMQ Connection Dispatcher: /127.0.0.1:59675" daemon prio=10 tid=0x00000000402be000 nid=0x1bef waiting for monitor entry [0x00007fffcae6e000]
   java.lang.Thread.State: BLOCKED (on object monitor)
    at org.apache.activemq.broker.TransportConnection.lookupConnectionState(TransportConnection.java:1537)
    - waiting to lock <0x00000000c3ce8e98> (a org.apache.activemq.broker.jmx.ManagedTransportConnection)
    at org.apache.activemq.broker.TransportConnection.getConsumerBrokerExchange(TransportConnection.java:1451)
    - locked <0x00000000c3cf2838> (a java.util.HashMap)
    at org.apache.activemq.broker.TransportConnection.processMessageAck(TransportConnection.java:572)
    at org.apache.activemq.command.MessageAck.visit(MessageAck.java:229)
    at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:336)
    at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:189)
    at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:69)
    at org.apache.activemq.transport.stomp.StompTransportFilter.sendToActiveMQ(StompTransportFilter.java:81)
    at org.apache.activemq.transport.stomp.StompSubscription.onMessageDispatch(StompSubscription.java:79)
    at org.apache.activemq.transport.stomp.ProtocolConverter.onActiveMQCommand(ProtocolConverter.java:636)
    at org.apache.activemq.transport.stomp.StompTransportFilter.oneway(StompTransportFilter.java:58)
    at org.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:40)
    - locked <0x00000000c3cf1f10> (a java.lang.Object)
    at org.apache.activemq.broker.TransportConnection.dispatch(TransportConnection.java:1384)
    at org.apache.activemq.broker.TransportConnection.processDispatch(TransportConnection.java:929)
    at org.apache.activemq.broker.TransportConnection.iterate(TransportConnection.java:965)
    at org.apache.activemq.thread.DedicatedTaskRunner.runTask(DedicatedTaskRunner.java:104)
    at org.apache.activemq.thread.DedicatedTaskRunner$1.run(DedicatedTaskRunner.java:42)
{noformat}

{noformat}
Found one Java-level deadlock:
=============================
"ActiveMQ Transport: tcp:///127.0.0.1:59675":
  waiting to lock monitor 0x0000000040ad8440 (object 0x00000000c3cf2838, a java.util.HashMap),
  which is held by "ActiveMQ Connection Dispatcher: /127.0.0.1:59675"
"ActiveMQ Connection Dispatcher: /127.0.0.1:59675":
  waiting to lock monitor 0x00000000403568a8 (object 0x00000000c3ce8e98, a org.apache.activemq.broker.jmx.ManagedTransportConnection),
  which is held by "ActiveMQ Transport: tcp:///127.0.0.1:59675"
{noformat}

This method (in broker/TransportConnection.java) is one of the culprits, and feels like a good place to break the deadlock:
{noformat}
    private ConsumerBrokerExchange getConsumerBrokerExchange(ConsumerId id) {
        ConsumerBrokerExchange result = consumerExchanges.get(id);
        if (result == null) {
            synchronized (consumerExchanges) {
                result = new ConsumerBrokerExchange();
                TransportConnectionState state = lookupConnectionState(id);
                context = state.getContext();
                result.setConnectionContext(context);
                SessionState ss = state.getSessionState(id.getParentId());
                if (ss != null) { 
                    ConsumerState cs = ss.getConsumerState(id);
                    if (cs != null) {
                        ConsumerInfo info = cs.getInfo();
                        if (info != null) { 
                            if (info.getDestination() != null && info.getDestination().isPattern()) {
                                result.setWildcard(true);
                            }   
                        }   
                    }   
                }   
                consumerExchanges.put(id, result);
            }   
        }   
        return result;
    }   
{noformat}

It holds the consumerExchanges lock, calls lookupConnectionState, which is 'synchronized', while another thread is within another 'synchronized' method and calls removeConsumerBrokerExchange, which tries to take consumerExchanges.

Something like this instead would solve it, basically minimizing the locking to only the get (which wasn't protected at all previously) and the put. The only possible problem is if two callers enter getConsumerBrokerExchange at the same time, both enter the "if (result == null)" block and then 'put' the result, causing one to overwrite the result of the other. Without knowing the code it's a bit hard to say, but I'd say that it looks likely that the double-put race condition isn't a problem in this case. It wouldn't do any harm, as far as I can see. What do you think?
{noformat}
    private ConsumerBrokerExchange getConsumerBrokerExchange(ConsumerId id) {
        ConsumerBrokerExchange result;
        synchronized (consumerExchanges) {
            result = consumerExchanges.get(id);
        }
        if (result == null) {
            result = new ConsumerBrokerExchange();
            TransportConnectionState state = lookupConnectionState(id);
            context = state.getContext();
            result.setConnectionContext(context);
            SessionState ss = state.getSessionState(id.getParentId());
            if (ss != null) {
                ConsumerState cs = ss.getConsumerState(id);
                if (cs != null) {
                    ConsumerInfo info = cs.getInfo();
                    if (info != null) {
                        if (info.getDestination() != null && info.getDestination().isPattern()) {
                            result.setWildcard(true);
                        }
                    }
                }
            }
            synchronized (consumerExchanges) {
                consumerExchanges.put(id, result);
            }
        }
        return result;
    }
{noformat}

I'll attach a patch., Attached patch is a possible fix. With this applied, I haven't been able to reproduce the problem., Updated title and description with clearer information, since this issue isn't really about SUBSCRIBE but rather DISCONNECT deadlocking with auto-acking of an event inside Active MQ., This was fixed before the v5.6.0 release and is no longer an issue, the code has been refactored to avoid this particular deadlock scenario.  Upgrade to a newer broker version and you won't run into this any longer.]