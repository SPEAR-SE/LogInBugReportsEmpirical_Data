[Same happens with Topics., Thanks for creating this issue Denis.
I've only really started testing ActiveMQ for large scale applications recently and have come across a couple of issues that would make adoption of ActiveMQ difficult. This is one but I have also found that if you have 2 consumers for the same queue on different machines for load balancing purposes that only 1 consumer seems to pull down the messages. If you stop this consumer then the other one takes over. This at least allows some high availability features to be built into applications.
Do you think it would be worthwhile to post a test case for the load balancing issue?, I can reproduce this error using totally normal code, both on my notebook running winxp and linux server:

I start a JMS producer application to send 4000 persistent messages, each message is 1K string. After sending, the client application close everything and exit.

Then I start a JMS consumer application to receive 100 messages, when finished, the client application close everything and exit. 

Now I start the consumer application again, now I want to receive 3900 messages. But only after receiving about 2180 messages, the consumer stop at receive() method, for there is no more messages can arrive.

Now if you open the admin console, you will find that there is about 1800 messages remains pending status, but if click the queue to browse these messages, you will find that there is no message you can browse!

After restart AMQ and client application, we can receive the rest messages, about 1800, they are back!

Only persistent messages can produce this error.

Please see attached file: TestAMQ.java.

To run:

1 run TestAMQ with parameter send 4000
2 run TestAMQ with parameter receive 100
3 run TestAMQ with parameter receive 3900, it will hang after about 2180 messages being received.
, I can reproduce this error using totally normal code, both on my notebook running winxp and linux server:

I start a JMS producer application to send 4000 persistent messages, each message is 1K string. After sending, the client application close everything and exit.

Then I start a JMS consumer application to receive 100 messages, when finished, the client application close everything and exit. 

Now I start the consumer application again, now I want to receive 3900 messages. But only after receiving about 2180 messages, the consumer stop at receive() method, for there is no more messages can arrive.

Now if you open the admin console, you will find that there is about 1800 messages remains pending status, but if click the queue to browse these messages, you will find that there is no message you can browse!

After restart AMQ and client application, we can receive the rest messages, about 1800, they are back!

Only persistent messages can produce this error.

Please see attached file: TestAMQ.java.

To run:

1 run TestAMQ with parameter send 4000
2 run TestAMQ with parameter receive 100
3 run TestAMQ with parameter receive 3900, it will hang after about 2180 messages being received.
, PJ Fanning - I'd suggest you reduce the prefetch limit for your consumers -  see http://activemq.apache.org/what-is-the-prefetch-limit-for.html, Thanks for the advice, Rob. Using queueName?consumer.prefetchSize=0 means that my (artificial) test case passes.
I still think it would be a good feature if consumers and connections were timed out by the ActiveMQ server if the client goes offline., You can more readily detect when a client has crashed by configuring the maxInactivityDuration property on the transport - this controls the keep alive protocol used - see http://activemq.apache.org/configuring-wire-formats.html

I'd recommend setting to 5000 (5 secs) - or lower (if you have a good network), I have faced this this problem in a current project. Somehow, if you just close the receiver, the program will work fine! If you separate the receivers and senders into two separate classes, you are ok too.

Ofcourse, the program will not exit until you close the connection. But why only with receivers and not sessions?]