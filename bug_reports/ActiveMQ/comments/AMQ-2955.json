[With a different test harness, we can get this failure to occur at the same point every time (for 1K message size always happens at  the 286th message sent, for 10K message size  at the 45th message sent nd for 100K message size at the 5th message sent).

Further investigation shows that when this occurs, the following conditions hold:

In class {{Queue}}, method {{doPageIn}}, the following loop body does not get executed as {{messages.hasNext()}} is returning false:

{code}
while (messages.hasNext() && count < toPageIn) {
    MessageReference node = messages.next();
    messages.remove();
// snipped for brevity
{code}

At this point, {{count=0}}, {{toPageIn=1}} and {{messages.size()=1}}.

Following the code through to the {{BTreeNode}} class, we find that the leaf node contains a single key with value 44.  When the {{BTreeNode.BTreeIterator}} class is instantiated, it is being passed in a value of 535 for the value of the default cursor position as the {{batchResetNeeded}} flag is false. This causes the loop body in the {{findNextPage}} method to exit before it sets the {{nextEntry}} field, leaving it null.

If we stick a quick hack into the {{doPageIn}} method in class {{Queue}} then the problem seems to go away, but we still don't know what the underlying cause was and we are wary of changing code that we don't fully understand:

{code}
if (messages.size() > 0 && !messages.hasNext()) {
    store.resetBatching();
}

while (messages.hasNext() && count < toPageIn) {
    MessageReference node = messages.next();
    messages.remove();
// snipped for brevity
{code}



, My suspicion is the operation of the setBatch method, disabling the cache will help pinpoint (policy entry useCache=false).

One thing that looks odd is in org.apache.activemq.store.kahadb.KahaDBStore.KahaDBMessageStore#resetBatching,
that does not obtain the indexLock, it should be comparable to org.apache.activemq.store.kahadb.KahaDBStore.KahaDBMessageStore#setBatch in this regard. It looks like this could be related to your problem, if an batch rest was missed from contention.

btw: What is the difference between your test case above and the other test harness?, Attached test harness. 

Compile with following:

{noformat}
javac -cp .activemq-core-5.4.1.jar:geronimo-j2ee-management_1.1_spec-1.0.1.jar:log4j-1.2.15.jar:commons-logging.jar:jms.jar *.java
{noformat}

When producing the error, we restart the activemq server and wait until we see the MessageDatabase "Checkpoint done" message in the log, then kick off the enquer as follows:

{noformat}
java -cp .:jms.jar:activemq-core-5.4.1.jar:geronimo-j2ee-management_1.1_spec-1.0.1.jar:log4j-1.2.15.jar:commons-logging.jar jms.TrackedMessageEnqueuer 'tcp://localhost:61616' 1 10 0
{noformat}

and then immediately kick off the dequeuer as follows:

{noformat}
java -cp .:jms.jar:lib/activemq-core-5.4.1.jar:geronimo-j2ee-management_1.1_spec-1.0.1.jar:log4j-1.2.15.jar:commons-logging.jar jms.TrackedMessageDequeuer 'tcp://localhost:61616'
{noformat}

We don't always get the error, but when it occurs it is always on the 45th message sent, using the 10K message size as shown., Thanks for that Gary, I added some additional debug - the method {{KahaDBStore.KahaDMMessageStore#resetBatching}} is called once as the broker starts up and is not called again during my test run (I removed my hack from the {{Queue}} class).

I then tried the following three variations of this method:
# Added call to {{indexLock.readLock().lock()}}
# Added call to {{lockAsyncJobQueue}} and {{indexLock.readLock().lock()}}
# Added call to {{indexLock.writeLock().lock()}}

The stuck message is still observed with each variation.

I'll keep digging., As suggested, I tried adding {{useCache="false"}} to the queues' {{policyEntry}} element in {{activemq.xml}}. After doing this I have been unable to reproduce the issue., that is good, in that it points to org.apache.activemq.store.kahadb.KahaDBStore.KahaDBMessageStore#setBatch and the cursor and store being out of sync. The intention is that when the cache is full and eventually exhausted, reading from the store can commence from the point in the store that corresponds to the last entry in the cache. 
can you attach your activemq.xml?, Attached {{activemq.xml}} file used., I cannot reproduce this problem in 5.5.0 version (while it is easily reproduced in 5.4.1 and 5.4.2). There was some work in this area for 5.5.0 release, so it seems that this has been fixed as well.

Can you please retest and reopen the issue if you still experience problems.]