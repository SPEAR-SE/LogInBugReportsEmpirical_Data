[attached a new junit testcase to illustrate issue., Perhaps rather than reaching a hanging state, the MessageConsumer could "fail fast" at creation time if prefetch=0 for non durable topic subscribers. 

To that effect, I have attached "APotentialFixForAMQ-3746.patch" where the ActiveMQMessageConsumer constructor does the following check.

{code}
	// AMQ-3746
	// if prefetch set to zero for Non Durable topic Consumer, throw a JMS Exception.
	if(this.getPrefetchNumber() == 0 && info.getDestination().isTopic() && !isDurableSubscriber()){
        throw new JMSException("Cannot have a prefetch size of zero for a Non Durable Topic Subscriber");
    }
{code}

I hope the above check should isolate just Non Durable Topic consumers with prefetch=0, perhaps someone could review it? Maybe there is a cleverer way to resolve this issue?

patch created off lastest revision (1295087), After applying "APotentialFixForAMQ-3746.patch" I noticed a change in exception behavior around the "MessageListener" case. Before applying the patch ActiveMQMessageConsumer.setMessageListener()
throws the JMSException below when prefetch=0.

before patch:

{code}
javax.jms.JMSException: Illegal prefetch size of zero. This setting is not supported for asynchronous consumers please set a value of at least 1
	at org.apache.activemq.ActiveMQMessageConsumer.setMessageListener(ActiveMQMessageConsumer.java:417)
	...
{code}

after applying the patch the following exception is thrown when creating the ActiveMQMessageConsumer before ActiveMQMessageConsumer.setMessageListener() can be called. 

{code}
javax.jms.JMSException: Cannot have a prefetch size of zero for a Non Durable Topic Subscriber
	at org.apache.activemq.ActiveMQMessageConsumer.<init>(ActiveMQMessageConsumer.java:245)
	at org.apache.activemq.ActiveMQSession.createConsumer(ActiveMQSession.java:1134)
	at org.apache.activemq.ActiveMQSession.createConsumer(ActiveMQSession.java:1078)
	at org.apache.activemq.ActiveMQSession.createConsumer(ActiveMQSession.java:991)
	at org.apache.activemq.ActiveMQSession.createConsumer(ActiveMQSession.java:964)
	...
{code}	

Although it results in the same overall outcome, it does change the existing (correct) exception behavior.

Hence not sure if "Fail Fast" in "APotentialFixForAMQ-3746.patch" is the best approach., Another potential fix is to actually allow TopicSubscription to work with a zero prefetch.  A pullMessage request could open a window to allow one topic message to get dispatched to the topic inside the pull time window given.  This basically allows the consumer to always be a slow consumer, and messages are stored based on the maxPendingMessageLimit.  Not sure what the use case for that would be but its possible.  Here's a rough patch that adds this, not tested very heavily. , Tim, sounds like a good idea.

Maybe try to revisit your patch for the 5.8 release., that reads very like the use case for a retroactive consumer. I would expect a poll to only work if there is something pending in the retroactive buffer. But a poll should not block for ever. That is really a bug., Fixed on trunk]