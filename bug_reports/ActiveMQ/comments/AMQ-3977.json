[There's no guarantees with receiveNoWait, if the message is still enroute to the client and you call receiveNoWait you'll get a null back.  The fact that a timed receive call does get the message further indicates that the message simply hasn't arrived at the client.  If you really think there's an issue then I suggest creating a JUnit test case to reproduce it, however anytime you use receiveNoWait you need to code with the expectation that you could get a null return., If the message has been enqueued on the broker, I don't see how receiveNoWait() would return null. I'm guessing the receiveNoWait code *should* first perform a check to determine if there is a message waiting to be dequeued, if so return the msg, if not return null. I found an older ticket that had this exact same problem in a 4.x version. Perhaps something was reintroduced., There's no round-tripping to the broker unless you have prefetch set to zero.  The client just checks its local prefetch buffer and if a message is there its returned if not it returns null.  Depending on what prefetch you have set you can test this out by calling a Thread.sleep before doing a receiveNoWait and you should see similar behavior to the timed receive call you were doing.  I still don't see an issue here, please provide a test case if you think there's a problem.  , You are correct. I wasn't aware of the prefetch configuration. Closing this issue, thanks Tim.]