[Also in trunk, Hi Andy,

just wondering if you can create a test case that can reproduce the issue? Or this is something you encountered in production?

Regards,
Dejan, Hi Dejan,

It's going to be difficult to create a test case, but is easy to reproduce if you have any JDBC adapter configured.

<persistenceAdapter>
<jdbcPersistenceAdapter dataSource="#postgresql-activemq-ds">
<adapter>
<postgresql-jdbc-adapter/>
</adapter>
</jdbcPersistenceAdapter>
</persistenceAdapter>

Just change the DataSource database to an empty test database and let ActiveMQ create new empty tables.

Stop ActiveMQ.

Manually add one dummy row to the empty 'activemq_acks' table:

INSERT INTO activemq_acks(container, sub_dest, client_id, sub_name, selector, last_acked_id) VALUES ('topic://a', 'topic://a', 'a', 'a', 'a', 555);

Start ActiveMQ.

It will try to load message id 555 - which does not exist, and will drop a NullPointerException.

The code in doGetLastMessageStoreSequenceId uses Math.max(seq1, seq2) to determine the next sequence id, so this is then definitely not safe to use in getLastMessageBrokerSequenceId() to load a message by id.

I suppose a test case using something like Derby could be created - without looking, is Derby on the default test classpath?

Andy. , Hi Andy,

no worries, I created a test case and will commit a fix soon.

Cheers, Great stuff, many thanks!, This should be fixed on now with svn revision 934408.

JDBC store postpones deleting messages with min last seq id to the next iteration cycle. Also getting last broker sequence id procedure is also made resilient on these cases as they can still happen due to expired messages., 
   [[ Old comment, sent by email on Thu, 15 Apr 2010 11:33:28 +0200 ]]

Hi Dejan,

It's going to be difficult to create a test case, but is easy to 
reproduce if you have any JDBC adapter configured.

<persistenceAdapter>
<jdbcPersistenceAdapter dataSource="#postgresql-activemq-ds">
<adapter>
<postgresql-jdbc-adapter/>
</adapter>
</jdbcPersistenceAdapter>
</persistenceAdapter>

Just change the DataSource database to an empty test database and let 
ActiveMQ create new empty tables.

Stop ActiveMQ.

Manually add one dummy row to the empty 'activemq_acks' table:

INSERT INTO activemq_acks(container, sub_dest, client_id, sub_name, 
selector, last_acked_id) VALUES ('topic://a', 'topic://a', 'a', 'a', 
'a', 555);

Start ActiveMQ.

It will try to load message id 555 - which does not exist, and will drop 
a NullPointerException.

The code in doGetLastMessageStoreSequenceId uses Math.max(seq1, seq2) to 
determine the next sequence id, so this is then definitely not safe to 
use in getLastMessageBrokerSequenceId() to load a message by id.

I suppose a test case using something like Derby could be created - 
without looking, is Derby on the default test classpath?

Andy.

]