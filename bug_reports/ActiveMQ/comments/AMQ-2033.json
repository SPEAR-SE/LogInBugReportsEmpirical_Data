[This looks like a good catch.
w.r.t the test case you mentioned, do you also have a patch for the ProducerFlowControlTest. The ProducerFlowControlTest.java attachment is the same as the current trunk revision.
, Sorry, here is the patch for ProducerFlowControlTest, patch applied in r727353. Thanks for the fix and the test case,, Now with this patch, there is one thread for every producer created. On heavy systems, there are big amount of threads created (hundreds) and waiting, because every producerWindow has it's own thread executor. I thing they should reuse session thread pool or smth. Should I create new issue for this?, Updated, Patch wich includes producer window stop, Now prducer has thread leak, because it doesn't close producerWindow on producer close. I've attached patch, which closes the producer window (this patch includes both fixes)., I added a close to the original commit so the close (same as your second patch) is currently on trunk: see the [diff|http://svn.apache.org/viewvc/activemq/trunk/activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageProducer.java?p2=%2Factivemq%2Ftrunk%2Factivemq-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Factivemq%2FActiveMQMessageProducer.java&p1=%2Factivemq%2Ftrunk%2Factivemq-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Factivemq%2FActiveMQMessageProducer.java&r1=727353&r2=727352&view=diff&pathrev=727353]

Re the thread usage, and thread per producer. Please open another issue for that as SystemUsage may need a little refactor to obtain a thread pool or executor reference.

]