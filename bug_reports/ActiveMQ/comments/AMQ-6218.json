[Attached sample Java code that used to replicate the issue with actual log generated by the same. And i used default configuration provided in activemq.xml 
 , Converted app based test to a JUnit test.  Can reproduce on a loaded system if the VM transport is used but does not reproduce on the TCP transport.  , Commit ea09159a4087212964787e7cf68ef30170d115f0 in activemq's branch refs/heads/master from [~cshannon]
[ https://git-wip-us.apache.org/repos/asf?p=activemq.git;h=ea09159 ]

https://issues.apache.org/jira/browse/AMQ-6218

Fixing copy method of ActiveMQTextMessage to prevent a race condition
when concurrent store and dispatch is used with Queues

We may need explicity synchronization between the text and content fields
in the future if other issues pop up
, Commit 93bc7030e263d6ed5bab7b778b15d50d46fe2c66 in activemq's branch refs/heads/activemq-5.13.x from [~cshannon]
[ https://git-wip-us.apache.org/repos/asf?p=activemq.git;h=93bc703 ]

https://issues.apache.org/jira/browse/AMQ-6218

Fixing copy method of ActiveMQTextMessage to prevent a race condition
when concurrent store and dispatch is used with Queues

We may need explicity synchronization between the text and content fields
in the future if other issues pop up

(cherry picked from commit ea09159a4087212964787e7cf68ef30170d115f0)
, There was a race condition when using concurrent store and dispatch for queues.  The issue is that KahaDB calls beoreMarshall() when storing which then calls storeContentAndClear() on the message which clears out the text field.  With concurrent store and dispatch on this can cause both content and text to end up null if the marshalling happens at the same time the message is being copied in another thread.  

I fixed this by grabbing a copy of the text before the rest of the copy method is called and then using that as the value.  The other methods in ActiveMQTextMessage follow a similar pattern of grabbing local references of the text and content fields to try and minimize other threads from interfering.

I did not add synchronization to prevent a performance hit but If other issues pop up we might need to explicitly synchronize access on those two fields in a future version to prevent other race conditions., A new fix has been applied as part of AMQ-6221, Commit 9c929b6870ae4c19cf4f227fa13472b09ebac729 in activemq's branch refs/heads/master from [~cshannon]
[ https://git-wip-us.apache.org/repos/asf?p=activemq.git;h=9c929b6 ]

Revert "https://issues.apache.org/jira/browse/AMQ-6218"

Reverting commit in favor of a better approach

This reverts commit ea09159a4087212964787e7cf68ef30170d115f0.
, Commit 4a3fa320e75870cef83f46ab125eda0dfc0cc69f in activemq's branch refs/heads/activemq-5.13.x from [~cshannon]
[ https://git-wip-us.apache.org/repos/asf?p=activemq.git;h=4a3fa32 ]

Revert "https://issues.apache.org/jira/browse/AMQ-6218"

This reverts commit 93bc7030e263d6ed5bab7b778b15d50d46fe2c66.
, The proper fix is now part of AMQ-6256]