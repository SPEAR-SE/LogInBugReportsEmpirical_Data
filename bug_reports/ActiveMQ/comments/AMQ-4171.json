[This artificial delay is probably just masking some other issue as the allocation of the DataFile object doesn't actually cause a file to be created or read, only when DataFile.openRandomAccessFile is called is the file going to get created.  , Hi Timothy, 
you are right, and I am sorry for having created an issue entry too early. Nevertheless, the delay really helped for some time. But today we detected an fileNotFound Exception inspite the delay, eventually. 
So we have to keep on searching for the real problem..
Thanks! 

Best regards, 
Matthias Vetter

, After deeper examination of the above described failure, we still have no solution to the problem:
It is always possible to create the first file db-1.log. But the creation of its successor always fails, always with the same exception: file not found, the system cannot find the path specified. 
The DataFileAppender gets the next DataFile-object (from the method we suspected to be too fast) and then this DataFile object‘s method openRandomAccessFile is called. At this moment, the physical file is not yet existing, the RandomAccessFile-constructor called by the open-method is supposed to create the file. It did so, when db-1.log was created. The path to the files, naturally, wasn’t changed after that, and the same rights in the file system still are granted. 
The only difference we see is, that now another file is already present and is about to be deleted. But should this have such an effect?
We also suspected the whitespaces in the absolute path to the file to be a problem – but why not in the first case with db-1.log?
Even more irritating is that obviously no one else faced such kind of FileNotFound problem with the KahaDB. 
Finally, the problem seems to occur not on Windows 7, as initially reported, but on Windows XP. It also didn’t occur on a Solaris machine. 
Please, has anyone an idea what could be going on here?  Any comment is welcome!!!!
, Suggest moving to a later patch release of the JDK could be an issue there with Windows XP., In the meantime we found out, that all depends on the way we start our server, in which the broker is embedded. Using Windows (Win7 or xp, JDK 6 or 7 - all this doesn't matter), we can start the server either as a Windows service, using a .ini-file, from which jre/bin/server/jvm.dll is called, 
either manually using a .bat-file, calling java.exe. The jvm-parameters we pass are both times the same.
Starting java.exe never leads to the described failures, starting with java.dll always. Needless to say, it stays a riddle how the start methods are related to the fileNotFound problem.
Anyone experienced something like this?
m.v.
, Although it is strange that the file not found behaviour depends on the starting mode, there is a possibility to prevent the exception: 
org.apache.kahadb.journal.DataFile.openRandomAccessFile 
calls: new RandomAccessFile(file, "rw");. Replacing this by
new RandomAccessFile(file.getCanonicalPath(), "rw"); helped!

Whatever the deeper causes for the problem may be, the kahaDB would gain stability by opening RandomAccessFiles generally with os-proof pathnames rather than with file objects.

, The getCanonicalPath change makes sense and I've applied that on trunk, not sure what else can be done here. , The fix for the canonical file name use on open is in, not sure what else can be done here if anything.  The issue seems to be OS and JVM related not broker related. ]