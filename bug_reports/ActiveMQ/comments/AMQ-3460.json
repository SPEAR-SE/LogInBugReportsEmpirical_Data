[Debug logging will be available soon.

Any advice is appreciated, thanks in advance., ActiveMQ runs as a separate service, started from the operating system. I.e. not within any container.
, The same instance after few hours., Faced the same problem on 5.3.2.
Timur, did you find any solution for this?, 
I am facing the same issue in 5.6.0 as well. The most frustrating part is that it is not reproducible. Restart of consumers solves this issue. Does anybody here have Debug logs during the issue? Or steps to reproduce this issue?

Thanks
Sree, There's no test case here, and many broker releases in between, **********************************************
Reproducing the issue
**********************************************

This is reproducible but not with a Unit Test case. 
Steps to reproduce:
1. use the following broker url tcp://localhost:61616?randomize=false&timeout=60000  
// timeout is the most important part.
2. Use spring Default Message listener container for consuming messages.
3. Start the consumer application.
4. wait for 70 seconds and start ActiveMQ.
5. Consumers would be stuck - Issue would be reproduced
Note: This issue does not happen if ActiveMQ is started after 120 seconds. That is after the second connection timeout. Issue can be reproduced with varying timeout values if AMQ is started before the second timeout but after the first timeout. , *****************************************
Code Location of the Issue and Fix
*****************************************
This issue has got something to do with org.apache.activemq.ActiveMQConnection.java not checking if the connection is started or not before creating JMSSession is created.

Method:
 public Session createSession(boolean transacted, int acknowledgeMode) throws JMSException {

//Fix is to check if connection is started or not before creating a session :
synchronized(this.startMutex){
    		if(!this.isStarted()) {
        		start();
        	}
    	}

  checkClosedOrFailed();
        ensureConnectionInfoSent();
        LOG.trace("Connection started : " + isStarted() + "Connection Hash Code : "+ this.hashCode() +"Connection Details: " + this );

// rest of the code
// goes here

}, ************************************************************
Root Cause Analysis (Saving the devil for the very last)
************************************************************
This issue falls in no mans land between spring code and activemq code .

In my example above the main thread of spring tries to connect for first 60 seconds (first timeout), when it fails to connect to ActiveMQ as it is not up, leaves it to listener threads ( if there are 20 concurrentConsumers we would have 20 DMLC threads) to recover. The main thread of spring does not clear the connection object of spring and hands over a stale connection reference for the listeners to work with.
If ActiveMQ starts after the first time out and before the second timeout one of the 20 listener threads creates sessions on an unstarted connection. When ActiveMQ delivers a message to the consumer, the message flow into the consumer JVM/process but DMLC threads cannot receive them and hence the issue.When this issue occurs you can notice the following warning in the logs :

LOG EXTRACT:
"trying to receive messages on an unstarted connection" and subsequent messages are not delivered".
This warning is logged for the first message alone and not for the subsequent messages.
After this messages are pushed into the dispatch queue but not acked by the consumer as he never received them. The messages are pushed into the dispatch queue till the cursor memory is full. Once it is full no more messages are pushed into dispatch queue and every consumer of the queue is affected.

We found ActiveMQConnection.java easiest and logical of all places to fix the issue. , I fixed this issue and is working perfectly fine for more than a year in my production environment. I want to patch this on ActiveMQConnection.java. Can somebody please take these changes and commit it to the latest release?]