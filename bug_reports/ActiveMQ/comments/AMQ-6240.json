[it would be interesting to know what happens to the rollback command broker side, such that there is no response. Why does it block?
A thread dump for the broker when the client is stuck in the close/rollback would help identify, Hi Gary - thanks for the quick response. 
Attached is a zip of the thread dump of the broker process
If you need any more info let me know, {code}"ActiveMQ Transport: tcp:///127.0.0.1:65190@61616" #52 daemon prio=5 os_prio=0 tid=0x000000005ac6b800 nid=0x20fc waiting on condition [0x000000006035e000]
   java.lang.Thread.State: TIMED_WAITING (parking)
	at sun.misc.Unsafe.park(Native Method)
	- parking to wait for  <0x00000000c050b598> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
	at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:215)
	at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2163)
	at org.apache.activemq.usage.Usage.waitForSpace(Usage.java:103)
	at org.apache.activemq.usage.StoreUsage.waitForSpace(StoreUsage.java:92)
	at org.apache.activemq.usage.StoreUsage.waitForSpace(StoreUsage.java:87)
	at org.apache.activemq.broker.region.BaseDestination.waitForSpace(BaseDestination.java:686)
	at org.apache.activemq.broker.region.Queue.checkUsage(Queue.java:899)
	at org.apache.activemq.broker.region.Queue.doMessageSend(Queue.java:831)
	at org.apache.activemq.broker.region.Queue.send(Queue.java:731)
	at org.apache.activemq.broker.region.AbstractRegion.send(AbstractRegion.java:503)
	at org.apache.activemq.broker.region.RegionBroker.send(RegionBroker.java:468)
	at org.apache.activemq.broker.jmx.ManagedRegionBroker.send(ManagedRegionBroker.java:293)
	at org.apache.activemq.broker.BrokerFilter.send(BrokerFilter.java:153)
	at org.apache.activemq.broker.CompositeDestinationBroker.send(CompositeDestinationBroker.java:96)
	at org.apache.activemq.broker.TransactionBroker.send(TransactionBroker.java:293)
	at org.apache.activemq.broker.MutableBrokerFilter.send(MutableBrokerFilter.java:158)
	at org.apache.activemq.broker.TransportConnection.processMessage(TransportConnection.java:546)
	at org.apache.activemq.command.ActiveMQMessage.visit(ActiveMQMessage.java:768)
	at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:338)
	at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:188)
	at org.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:50)
	at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:125)
	at org.apache.activemq.transport.AbstractInactivityMonitor.onCommand(AbstractInactivityMonitor.java:300)
	at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83)
	at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:233)
	at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:215)
	at java.lang.Thread.run(Thread.java:745){code}


the transport thread is busy waiting for space, blocked, so the next command, the rollback/close cannot be read from the socket.
Without broker side async blocking, via producerFlowControl or the error on no space, the default behaviour is to block the transport thread.

Because the broker config cannot be changed I think there are two client options:
1) use async send and a small producerWindow, this will cause your client to block pending space on the broker for pending messages. However having peeked at the org.apache.activemq.ActiveMQMessageProducer#send(javax.jms.Destination, javax.jms.Message, int, int, long, org.apache.activemq.AsyncCallback) - there is no timeout limit, so an interrupted exception is all that will stop that wait. not so good.

2) force a close of the connection via the underlying transport, so that the  jms connection sees a socket closure and will report an error. This should avoid the normal closure processing after you see a send timeout.
That is a bit of a hack, using an activemq narrow api. There are some examples of how to do it in the unit tests:
https://github.com/apache/activemq/blob/e2b4ca2c59a316be91cf391c758a10e518dd3a1f/activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/FailoverTimeoutTest.java#L210
, Thanks Gary, I'll test that and see how I get on - I looked at using the socket but didn't know how to access it - I was also unsure of what the consequences of doing this would be.
Our current solution is to interrupt the thread - something like what you suggest in option 1.

Do you think that the fact that there is no mechanism to time out the rollback is a bug? And if so - do you think it is likely to be fixed?

I think it would be nice to be able to set a timeout on the rollback (either by inheriting the timeout from the connection or by setting it explicitly) to cover situations like this. If it was felt that inheritance was a bad idea then an explicit rollback(long timeout) call could be added., Thanks Gary - that worked perfectly. It's an acceptable solution in our situation so I'm happy to close this issue unless you want to keep it open for any reason. 
If it makes sense to you I can raise the option to timeout a rollback as a feature request., I am not sure. It is a bit of an anti pattern, the whole send timeout. 
Really the connection should close, because the sync send state is unknown. In this case the transaction blocks the close so it may make sense to use rollback(timeout) in the close case, because the socket will close and the broker side transaction will rollback.

Note the transaction rollback used to be async before: https://issues.apache.org/jira/browse/AMQ-2364
having a timeout would be similar, but I guess so long as we always close it would be ok.

I see an interesting angle in https://issues.apache.org/jira/browse/AMQ-1517 where the broker side blocking is limited by the message time to live. That would make a deterministic failure scenario. Message expired while pending space for send.
That would leave the broker side active to respond to a close.
Do you use messageExpiry or would it be a valid alternative?, We don't use message expiry as we take a very minimal approach to our configuration. Looking at that solution I was reminded that the issue here might be time zone differences. We will have to communicate with queues on a multiplicity of customers brokers so we cannot make any assumptions or influence their configurations.
 , We don't use message expiry as we take a very minimal approach to our configuration. Looking at that solution I was reminded that the issue here might be time zone differences. We will have to communicate with queues on a multiplicity of customers brokers so we cannot make any assumptions or influence their configurations.
 , Commit 77d46dc139284141336591af649c0cc1da790cd0 in activemq's branch refs/heads/master from [~gtully]
[ https://git-wip-us.apache.org/repos/asf?p=activemq.git;h=77d46dc ]

https://issues.apache.org/jira/browse/AMQ-6240 use sendTimout on sync rollback on close such that a blocked connection won't block a close
, The test for this fails in CI, probably just due to being timing sensitive 

https://builds.apache.org/view/A-D/view/ActiveMQ/job/ActiveMQ-Java8/org.apache.activemq$activemq-unit-tests/649/testReport/junit/org.apache.activemq.bugs/AMQ6240Test/testBlockedTxProducerConnectionTimeoutConnectionCanClose/, it sends too many big messages for slow disks. guess it could be configured down to just one message with a small enough kahadb, Commit 530c1a81934d0a1ca51a8778e59ee19509378d87 in activemq's branch refs/heads/master from [~gtully]
[ https://git-wip-us.apache.org/repos/asf?p=activemq.git;h=530c1a8 ]

https://issues.apache.org/jira/browse/AMQ-6240 - tidy up test and reduce duration. reuse closeTimeout on rollback during close which is the case here
, thanks tim, the test was taking too long which pointed me to the closeTimeout at 15s which was in the mix.
Reusing that var for the rollback command timeout makes more sense also.
Reconfigured the test to do less work and removed the inherited variants that work better with no persistence., Ah nice, the close timeout does seem to make more sense looking at the patch.  ]