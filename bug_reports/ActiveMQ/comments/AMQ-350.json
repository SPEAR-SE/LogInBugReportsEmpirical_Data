[ I tried reproducing the issue on Windows XP SP2 and wasn't able to reproduce the issue.  I  tested it against the 3.1 release and the latest version from svn using the default configuration. My test cases involved :


1. running a simple  producer / consumer sample.  This did not reproduce the issue

2. Sending messages under a transaction and doing  a rollback of messages  until the message is delivered to a deadletter queue. I also did a test by expiring the message and consuming it. I verified that the message was sent to a dead letter queue. In both cases I was not able to reproduce the exception the user reported., I am getting the same exception on Windows XP when using journalPersistence with the default Derby data source.  When I use only jdbcPersistence with the same data source reference, I do not get the exception.  According to the logs it is successfully transfers the message to the dead letter queue in that configuration.  For the client I am using the Jencks JCA connector to invoke a message driven pojo.  The onMessage method is just throwing a RuntimeException.  Here are the corresponding log excerpts:

------------------------------------------------------------
using the journal
------------------------------------------------------------
DEBUG ableQueueBoundedMessageManager - Message: DMP - msg = ACTIVEMQ_MAP_MESSAGE: id = 0 ActiveMQMessage{ , jmsMessageID = ID:CalebP-3286-1128542388401-147:0, bodyAsBytes = org.activemq.io.util.ByteArray@c017e9, readOnlyMessage = false, jmsClientID = 'ID:CalebP-3286-1128542388401-141:0' , jmsCorrelationID = 'null' , jmsDestination = Hello.Queue, jmsReplyTo = null, jmsDeliveryMode = 2, jmsRedelivered = true, jmsType = 'null' , jmsExpiration = 0, jmsPriority = 4, jmsTimestamp = 1128608801246, properties = null, readOnlyProperties = false, entryBrokerName = 'ID:CalebP-1168-1128608656738-0:0' , entryClusterName = 'default' , consumerNos = null, transactionId = 'null' , xaTransacted = false, consumerIdentifer = 'null' , messageConsumed = false, transientConsumed = false, sequenceNumber = 0, deliveryCount = 200, dispatchedFromDLQ = false, messageAcknowledge = null, jmsMessageIdentity = org.activemq.service.MessageIdentity@11d6489b[id=ID:CalebP-3286-1128542388401-147:0; sequenceNo=412], producerKey = ID:CalebP-3286-1128542388401-147: } ActiveMQMapMessage{ theTable = null } has exceeded its retry count
DEBUG JournalPersistenceAdapter      - Checkpoint started.
DEBUG JournalMessageStore            - removedFromJournal=0
DEBUG JournalMessageStore            - Checkpoint: Hello.Queue
DEBUG JournalMessageStore            - Added 0 message(s) and removed 0 message(s). removedFromJournal=0
DEBUG JournalMessageStore            - In flight journal locations: []
DEBUG JournalMessageStore            - removedFromJournal=0
DEBUG JournalMessageStore            - Checkpoint: org.activemq.deadletter.Hello.Queue
DEBUG JournalMessageStore            - Added 0 message(s) and removed 0 message(s). removedFromJournal=0
DEBUG JournalMessageStore            - In flight journal locations: []
DEBUG JDBCPersistenceAdapter         - Cleaning up old messages.
DEBUG DefaultJDBCAdapter             - Deleted 0 old message(s).
DEBUG JDBCPersistenceAdapter         - Cleanup done.
DEBUG JournalPersistenceAdapter      - Checkpoint done.
DEBUG JournalMessageStore            - Journalled in flight message add: ID:CalebP-3286-1128542388401-147:0 at 0:8139234
WARN  BrokerClientImpl               - caught exception consuming packet: ACTIVEMQ_MSG_ACK: id = 0 MessageAck{ consumerId = 'ID:CalebP-1211-1128609184386-3:0' , messageID = 'ID:CalebP-3286-1128542388401-147:0' , destination = Hello.Queue, transactionId = 'ID:CalebP-1211-1128609184386-599:0' , messageRead = false, xaTransacted = false, persistent = true, expired = false, messageIdentity = null }
java.lang.NullPointerException
	at EDU.oswego.cs.dl.util.concurrent.ConcurrentHashMap.hash(Unknown Source)
	at EDU.oswego.cs.dl.util.concurrent.ConcurrentHashMap.get(Unknown Source)
	at org.activemq.store.journal.JournalTransactionStore.getTx(JournalTransactionStore.java:160)
	at org.activemq.store.journal.JournalTransactionStore.addMessage(JournalTransactionStore.java:260)
	at org.activemq.store.journal.JournalMessageStore.addMessage(JournalMessageStore.java:98)
	at org.activemq.service.boundedvm.DurableQueueBoundedMessageContainer.enqueue(DurableQueueBoundedMessageContainer.java:218)
	at org.activemq.service.boundedvm.DurableQueueBoundedMessageManager.sendToDeadLetterQueue(DurableQueueBoundedMessageManager.java:597)
	at org.activemq.broker.impl.DefaultBroker.sendToDeadLetterQueue(DefaultBroker.java:814)
	at org.activemq.service.DeadLetterPolicy.sendToDeadLetter(DeadLetterPolicy.java:186)
	at org.activemq.service.boundedvm.DurableQueueBoundedMessageManager.redeliverMessage(DurableQueueBoundedMessageManager.java:415)
	at org.activemq.service.boundedvm.DurableQueueBoundedMessageManager.acknowledgeMessage(DurableQueueBoundedMessageManager.java:335)
	at org.activemq.broker.impl.DefaultBroker.acknowledgeMessage(DefaultBroker.java:321)
	at org.activemq.broker.impl.BrokerContainerImpl.acknowledgeMessage(BrokerContainerImpl.java:509)
	at org.activemq.broker.impl.BrokerConnectorImpl.acknowledgeMessage(BrokerConnectorImpl.java:283)
	at org.activemq.broker.impl.BrokerClientImpl.consumeMessageAck(BrokerClientImpl.java:732)
	at org.activemq.broker.impl.BrokerClientImpl.consume(BrokerClientImpl.java:329)
	at org.activemq.transport.TransportChannelSupport.doConsumePacket(TransportChannelSupport.java:374)
	at org.activemq.transport.TransportChannelSupport.doConsumePacket(TransportChannelSupport.java:368)
	at org.activemq.transport.tcp.TcpTransportChannel.run(TcpTransportChannel.java:311)
	at java.lang.Thread.run(Thread.java:595)


------------------------------------------------------------
using jdbc without the journal
------------------------------------------------------------
DEBUG ableQueueBoundedMessageManager - Message: DMP - msg = ACTIVEMQ_MAP_MESSAGE: id = 0 ActiveMQMessage{ , jmsMessageID = ID:CalebP-3286-1128542388401-147:0, bodyAsBytes = org.activemq.io.util.ByteArray@17f4fbb, readOnlyMessage = false, jmsClientID = 'ID:CalebP-3286-1128542388401-141:0' , jmsCorrelationID = 'null' , jmsDestination = Hello.Queue, jmsReplyTo = null, jmsDeliveryMode = 2, jmsRedelivered = true, jmsType = 'null' , jmsExpiration = 0, jmsPriority = 4, jmsTimestamp = 1128608801246, properties = null, readOnlyProperties = false, entryBrokerName = 'ID:CalebP-1168-1128608656738-0:0' , entryClusterName = 'default' , consumerNos = null, transactionId = 'null' , xaTransacted = false, consumerIdentifer = 'null' , messageConsumed = false, transientConsumed = false, sequenceNumber = 0, deliveryCount = 200, dispatchedFromDLQ = false, messageAcknowledge = null, jmsMessageIdentity = org.activemq.service.MessageIdentity@11d6489b[id=ID:CalebP-3286-1128542388401-147:0; sequenceNo=412], producerKey = ID:CalebP-3286-1128542388401-147: } ActiveMQMapMessage{ theTable = null } has exceeded its retry count
DEBUG DefaultBroker                  - ACTIVEMQ_MAP_MESSAGE: id = 0 ActiveMQMessage{ , jmsMessageID = ID:CalebP-3286-1128542388401-147:0, bodyAsBytes = org.activemq.io.util.ByteArray@17f4fbb, readOnlyMessage = false, jmsClientID = 'ID:CalebP-3286-1128542388401-141:0' , jmsCorrelationID = 'null' , jmsDestination = Hello.Queue, jmsReplyTo = null, jmsDeliveryMode = 2, jmsRedelivered = true, jmsType = 'null' , jmsExpiration = 0, jmsPriority = 4, jmsTimestamp = 1128608801246, properties = null, readOnlyProperties = false, entryBrokerName = 'ID:CalebP-1168-1128608656738-0:0' , entryClusterName = 'default' , consumerNos = null, transactionId = 'null' , xaTransacted = false, consumerIdentifer = 'null' , messageConsumed = false, transientConsumed = false, sequenceNumber = 0, deliveryCount = 200, dispatchedFromDLQ = true, messageAcknowledge = null, jmsMessageIdentity = org.activemq.service.MessageIdentity@11d6489b[id=ID:CalebP-3286-1128542388401-147:0; sequenceNo=414], producerKey = ID:CalebP-3286-1128542388401-147: } ActiveMQMapMessage{ theTable = null } sent to DLQ: org.activemq.deadletter.Hello.Queue
DEBUG DeadLetterPolicy               - Passed message: ACTIVEMQ_MAP_MESSAGE: id = 0 ActiveMQMessage{ , jmsMessageID = ID:CalebP-3286-1128542388401-147:0, bodyAsBytes = org.activemq.io.util.ByteArray@17f4fbb, readOnlyMessage = false, jmsClientID = 'ID:CalebP-3286-1128542388401-141:0' , jmsCorrelationID = 'null' , jmsDestination = Hello.Queue, jmsReplyTo = null, jmsDeliveryMode = 2, jmsRedelivered = true, jmsType = 'null' , jmsExpiration = 0, jmsPriority = 4, jmsTimestamp = 1128608801246, properties = null, readOnlyProperties = false, entryBrokerName = 'ID:CalebP-1168-1128608656738-0:0' , entryClusterName = 'default' , consumerNos = null, transactionId = 'null' , xaTransacted = false, consumerIdentifer = 'null' , messageConsumed = false, transientConsumed = false, sequenceNumber = 0, deliveryCount = 200, dispatchedFromDLQ = true, messageAcknowledge = null, jmsMessageIdentity = org.activemq.service.MessageIdentity@11d6489b[id=ID:CalebP-3286-1128542388401-147:0; sequenceNo=414], producerKey = ID:CalebP-3286-1128542388401-147: } ActiveMQMapMessage{ theTable = null } to DLQ: org.activemq.deadletter.Hello.Queue
]