[JVM crash log.

ActiveMQ creates more than 2000 (!!!) threads!..
It happens when producer (one (?) producer) sends about 60 messages per seconds. And it took about 5 seconds to kill ActiveMQ.
It would appear that on each new incoming message ActiveMQ creates new thread and they continue to live forever.
Looks like great leaks take place (?)...
, JVM crashed today, so I added its log file (hs_err_pid24632.log).

And quite often before problems occur I can see in wrapper.log the following error:

INFO   | jvm 1    | 2011/04/24 22:24:18 | Exception in thread "ActiveMQ Transport Server Thread Handler: tcp://0.0.0.0:61616" java.lang.OutOfMemoryError: unable to create new native thread
INFO   | jvm 1    | 2011/04/24 22:24:18 | 	at java.lang.Thread.start0(Native Method)
INFO   | jvm 1    | 2011/04/24 22:24:18 | 	at java.lang.Thread.start(Unknown Source)
INFO   | jvm 1    | 2011/04/24 22:24:18 | 	at org.apache.activemq.thread.TaskRunnerFactory.execute(TaskRunnerFactory.java:92)
INFO   | jvm 1    | 2011/04/24 22:24:18 | 	at org.apache.activemq.thread.TaskRunnerFactory.execute(TaskRunnerFactory.java:85)
INFO   | jvm 1    | 2011/04/24 22:24:18 | 	at org.apache.activemq.broker.TransportConnector$1.onAccept(TransportConnector.java:209)
INFO   | jvm 1    | 2011/04/24 22:24:18 | 	at org.apache.activemq.transport.tcp.TcpTransportServer.handleSocket(TcpTransportServer.java:428)
INFO   | jvm 1    | 2011/04/24 22:24:18 | 	at org.apache.activemq.transport.tcp.TcpTransportServer$1.run(TcpTransportServer.java:354)
INFO   | jvm 1    | 2011/04/24 22:24:18 | 	at java.lang.Thread.run(Unknown Source)

I run ActiveMQ as service. 

Configuration of memory usage:

        <systemUsage>
            <systemUsage>
                <memoryUsage>
                    <memoryUsage limit="500 mb"/>
                </memoryUsage>
                <storeUsage>
                    <storeUsage limit="5 gb"/>
                </storeUsage>
                <tempUsage>
                    <tempUsage limit="1 gb"/>
                </tempUsage>
            </systemUsage>
        </systemUsage>

'memoryLimit' parameter for consumers and producers doesn't affect anything.

Maximum Java Heap size of Tanuki wrapper - wrapper.java.maxmemory=1024.


, You should attempt to create a test case to demonstrate the issue.  Problems like this usually appear when the number of connections to the broker exceeds the number of open file descriptors that the OS allows.  It would be helpful to see what your code is doing., From the logs it appears that the client is opening a connection for each send and eventually the broker exhausts all available heap space and cannot allocate more resources which is what would be expected in this scenario., "java.lang.OutOfMemoryError: unable to create new native thread" does not occur from a lack of heap. It occurs from not enough memory left when you take all of the server's RAM and subtract the heap. The system is probably 32-bit as well. I have never seen the error on 64-bit. The error indicates you have too many threads and no more can be created. This error will kill the thread that pulls new sockets off the queue and will prevent any new connections from working. You will eventually get a true heap memory error if client continue to connect as the unbounded socket queue will pile up. Either the process needs to be restarted or you may be able to restart the broker using a TransportAcceptListener that is notified by onAcceptError., JVM memory, not server RAM.
Heap + Non-Heap + Native is less than 2^^32 with e.g. hotspot 32-bit jvm. 
-Xss controls the Stack Space (this is Native space) per new thread.]