[Need provide some additional information preferably a test case that demonstrates the problem.  , Hello Timothy,

my test case consists of two classes - one producer and one comsumer. My real implementation reads input from a file, but even with writing 0-bytes to the OutputStream, the InputFile reading fails. I write 64 MB (64*1024*1024 bytes). See my source code below.

Thanks in advance,
Marc

{code:title=The Consumer|borderStyle=solid}
package test;

import java.io.BufferedOutputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.jms.Connection;
import javax.jms.JMSException;
import javax.jms.Queue;
import javax.jms.Session;
import javax.naming.NamingException;
import org.apache.activemq.ActiveMQConnection;
import org.apache.activemq.ActiveMQConnectionFactory;

/**
 * Test class: test comsumer for ActiveMQInputStream.
 */
public class AMQStreamConsumer {

    private static final Logger logger = Logger.getLogger(AMQStreamConsumer.class.getName());
    public static final String outFilepath = "MyTestFile";
		
    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws IOException {
        try {
			readInputStream("AMQStreamTest");
            System.exit(0);
        } catch (JMSException ex) {
            Logger.getLogger(AMQStreamConsumer.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NamingException ex) {
            Logger.getLogger(AMQStreamConsumer.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

	
	/**
	 * Reads the inputStream from the given queue.
	 * 
	 * @param aStreamQueueName 
	 * @throws JMSException
	 * @throws NamingException 
	 */
    private static void readInputStream(String aStreamQueueName) throws JMSException, NamingException, FileNotFoundException, IOException {
        ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory("guest", "guest", "tcp://localhost:61616");
		Connection connection = connectionFactory.createConnection();
		connection.start();
		Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE); // CLIENT_ACKNOWLEDGE makes no difference
		String exclusiveQueueName = aStreamQueueName; //  + "?consumer.exclusive=true"; // use the queue exclusively makes no difference
		byte[] buf = new byte[1024];
		OutputStream fileOutputStream = null;
		InputStream queueInputStream = null;
		try {
			fileOutputStream = new BufferedOutputStream(new FileOutputStream(outFilepath));
			Queue destination = session.createQueue(exclusiveQueueName);
			queueInputStream = ((ActiveMQConnection)connection).createInputStream(destination); 
			long sumSize = 0;
			int counter = 0;
			for (int readCount = queueInputStream.read(buf); readCount != -1; readCount = queueInputStream.read(buf)) {
				sumSize += readCount;
				counter++;
				logger.log(Level.INFO, "read [{0}] from input stream (bytes so far {1})", new Object[] {counter, sumSize});
				fileOutputStream.write(buf, 0, readCount);
			}
		} finally {
			if (fileOutputStream != null) {
				fileOutputStream.close();
			}
			if (queueInputStream != null) {
				queueInputStream.close();
			}
		}
		session.close();
		connection.close();
    }
}
{code}
{code:title=The Producer|borderStyle=solid}

package test;

import java.io.IOException;
import java.io.OutputStream;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.jms.Connection;
import javax.jms.DeliveryMode;
import javax.jms.Destination;
import javax.jms.JMSException;
import javax.jms.Message;
import javax.jms.Session;
import javax.naming.NamingException;
import org.apache.activemq.ActiveMQConnection;
import org.apache.activemq.ActiveMQConnectionFactory;

/**
 * Test class: test producer for ActiveMQOutputStream.
 */
public class AMQStreamProducer {

    private static final Logger logger = Logger.getLogger(AMQStreamProducer.class.getName());
		
    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws IOException {

        try {
            sendOutputStream("AMQStreamTest");
            logger.info("outputstream sent");
            System.exit(0);
        } catch (JMSException ex) {
            Logger.getLogger(AMQStreamProducer.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NamingException ex) {
            Logger.getLogger(AMQStreamProducer.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

	/**
	 * Sends an OutputStream with 0 bytes.
	 */
    protected static void sendOutputStream(String aQueueName) throws IOException, JMSException, NamingException {
		Connection connection;
		Session session = null;
		ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory("admin", "admin", "tcp://localhost:61616");
		connection = connectionFactory.createConnection();
		session = connection.createSession(false, session.AUTO_ACKNOWLEDGE);
		Destination streamDestination = session.createQueue(aQueueName);
		Map messageProperties = new HashMap<String, String>();
		messageProperties.put("myProperty", "TEST");
		OutputStream out = ((ActiveMQConnection)connection).createOutputStream(streamDestination, messageProperties, DeliveryMode.PERSISTENT, Message.DEFAULT_PRIORITY, Message.DEFAULT_TIME_TO_LIVE);
		for(int i=0; i< 4*1024*1024; i++) {
				out.write(0);
		}
		out.close();
		session.close();
		connection.close();
    }
}
{code}, Have a go at creating a unit test that captures your broker configuration and incorporates these test clients.  Could be you just are exceeding memory limits on the broker or some such, can't tell from what you've provided.  , Hello Timothy,
I used the standard ActiveMQ 5.8.0 installation with the default configuration on my Mac OS 10.6.8 computer.

Regards,
Marc, I have the same problem. using the out-of-the-box activemq 5.8.0 configuration, the activeInputStream hangs after reading some number of bytes at FifoMessageDispatchChannel.dequeue(long timeout) at the mutex.wait() line.

Looks like it's waiting for some other thread to fill the LinkedList<MessageDispatch> list. I'm trying to understand whose responsible for that, and if I'm missing something in the usage. My code looks just like the above, and is actually straight out of the Activemq in Action book. I'm using large content too.

, Hello Timothy,
have you tried my example classes with a standard ActiveMQ installation? Because I do not use any special configuration in my broker, I think it is not necessary to build a unit test with that special configuration?!

Regards,
Marc, The JMS streams code will be deprecated in the next release.  , Streams functionality is deprecated.]