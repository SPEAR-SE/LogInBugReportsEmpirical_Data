[Recommend you try and create a JUnit test case that demonstrates the issues you are seeing., Can you include the client uri that you used and also the transport connector definition on the broker?
, The client URI is "failover:(tcp://127.0.0.1:61616?wireFormat.tcpNoDelayEnabled=true&wireFormat.tightEncodingEnabled=false&wireFormat.cacheEnabled=false)?transport.randomize=false"

And the connector is set to: 
<transportConnector name="openwire" uri="nio://0.0.0.0:61616?wireFormat.tcpNoDelayEnabled=true&amp;wireFormat.tightEncodingEnabled=false&amp;wireFormat.cacheEnabled=false"/>, Are you able to reproduce the issue, or do you need more information? I'm using NMS/C# and not java.

We have attached wireshark to confirm that the messages was sent from the AMQ broker, and it was not a problem in NMS., NMS doesn't have the duplicate suppression features that the Java client has so its probable that this is normal behavior.  We'd need a JUnit test case that reproduces the issue to show that its not just a limitation of the NMS client at play.  , Okay, I have gotten some help doing a JUnit. 

But just to be clear, this is not an issue of the client side, it's the message broker that has the problem. What we have found is that it's true that a java client using the Java api will not get the duplicated messages because the api will remove them.

What happens is if you start the JUnit attached, BEFORE the message broker is started, and then start the broker then the client will receive messages correctly.
If you then restart the JUnit, the client it self will not receive duplicates because of the Java api handling this, but if you look under connections in the admin web interface you'll see all messages is sent twice.

If you now restart the JUnit again, you'll see that all messages is dispatched 3 times, and if you restart again all messages wil be dispatched 4 times, and so on...

, Recommend you test this against a 5.7-SNAPSHOT to as it might have been resolved with some other fixes that have gone in recently. , Recommend you try looking at the JUnit tests in the org.apache.activemq.bugs package and seeing if you can create something that reproduces your problem in test form, I'm not finding any issues here. , The test app it self will not show an issue, you will only be able to see the issue in the admin web interface, where you can see messages beeing dispatched multible times.

Besides that this seems to be related to some of the other issues raised, so if the topic that the durable subscriber subcribs to is not configure in the config file the problem goes away.

It also do seem like the issue has been resolved in the 5.7 version, is there any info on when this version is in a stable release?

Thanks for your help, I belive that this issue can be closed now., Fixed in 5.7]