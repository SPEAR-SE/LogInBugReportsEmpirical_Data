[I don't think it is necessary to change this as there's already another method called {{storeContentAndClear()}} which does this and you can call the method after setting the text on the message if memory could be an issue.  I would be hesitent to change the default behavior to always clear out the text because then a call to {{getText}} on a TextMessage would require an additional decoding of the content., Well, do you think anyone would call getText() anymore after calling setText()? I think calling storeContentAndClear() is not a good solution esspecially if your using JMS API (eg. camel-jms) and do not want to depend on ActiveMQ proprietary API. Why not use storeContentAndClear in beforeMarshall()?, You do make a good point about storeContentAndClear not being a great solution if you want to stick with a pure JMS client.  I wouldn't expect getText() to be called too often but I could see it being useful in some cases like if a client was logging full messages before or after a send.  

[~tabish121], What do you think? I could go either way on this. , I don't think it'd be a bad thing if the message cleared the content on marshal, however, it is possible that this could have some unintended consequences.  The broker and the client both share this code and on the client side it probably works fine, on the broker side there could be cases where we might see something go wrong when things like concurrent store and dispatch is enabled so changing this bit should be thoroughly tested.  , Coming from the broker side, this change actually makes more sense to me as messages will be in memory longer term than a typical client where they go out of scope after being sent and are eligible for GC.

I can start testing this out tomorrow and see if anything obvious breaks (ie run through the full test suite, etc), Any test results yet?, Sorry, got side tracked a bit the past couple of weeks.  So, I ran through some tests locally and everything looked ok.  A full run on the CI server would still be needed though as some of the tests are unreliable when run locally for me so I'd want to run it on the CI server to make sure.

I guess I would defer to [~tabish121] on this.  Tim, do you think running through the existing test suite and seeing if anything fails is good enough for testing?, I think that should show if there is an impact.  I think the change is safe other than the risk that the broker logs a message an causes the content to become unmarshaled which could cause compressed content to no longer be compressed but that seems unlikely.  , GitHub user cshannon opened a pull request:

    https://github.com/apache/activemq/pull/134

    https://issues.apache.org/jira/browse/AMQ-5857

    Changing ActiveMQTextMessage to clear out the text field on marshal to
    a ByteSequence to prevent the data from being stored in memory twice.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/cshannon/activemq AMQ-5857

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/activemq/pull/134.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #134
    
----
commit 4e10e046d42a2b794ef830517bfaf651562c970a
Author: Christopher L. Shannon (cshannon) <christopher.l.shannon@gmail.com>
Date:   2015-07-13T15:31:14Z

    https://issues.apache.org/jira/browse/AMQ-5857
    
    Changing ActiveMQTextMessage to clear out the text field on marshal to
    a ByteSequence to prevent the data from being stored in memory twice.

----
, [~tabish121],

I pushed up this small change so you can either test it or apply it and see what happens with the full CI build.  Something seems to be up with the PR Jenkins build though.  It failed again for this PR (while working locally) and someone else pushed a minor PR up today and the same thing happened.  It took 3 tries to get it to pass the tests.  I'll probably ping Gary to give him a heads up., Commit 84ec047d2ffdee9630f74bf939746cd5ff2d0e12 in activemq's branch refs/heads/master from [~christopher.l.shannon]
[ https://git-wip-us.apache.org/repos/asf?p=activemq.git;h=84ec047 ]

https://issues.apache.org/jira/browse/AMQ-5857

Changing ActiveMQTextMessage to clear out the text field on marshal to
a ByteSequence to prevent the data from being stored in memory twice.
, Github user cshannon closed the pull request at:

    https://github.com/apache/activemq/pull/134
, Fix applied on master and will be included in 5.12.0, This fix has caused a test to fail: 

org.apache.activemq.camel.CamelVMTransportRoutingTest.testSendReceiveWithCamelRouteIntercepting

There appears to be a race condition., Commit 310c2bb05916811a25b84d76f11fb84b40087914 in activemq's branch refs/heads/master from [~cshannon]
[ https://git-wip-us.apache.org/repos/asf?p=activemq.git;h=310c2bb ]

https://issues.apache.org/jira/browse/AMQ-5857

Fixing a potential race condition in the storeContent
method of ActiveMQTextMessage
, There was a race condition in the storeContext() method of ActiveMQTextMessage where in between checking the text field for null and writing the content of text to the stream, the text field was set to null.  A fix has been applied that caches the reference to the text string locally in the method to prevent having to synchronize.  I also tweaked a couple other methods with a similar change to prevent the same issue.

CamelVmTransportRoutingTest is now passing again.  I will double check with Jenkins tomorrow to make sure the test failure has been cleared up.]