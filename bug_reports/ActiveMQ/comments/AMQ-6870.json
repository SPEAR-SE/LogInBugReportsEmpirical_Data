[It's not entirely clear what you are doing so the context what you are asking about that code block is also unclear.  Can you please elaborate in the description on what you are doing that lead to this point. , Sure! Sorry for the short description. Updated, You say you are using Java libraries to try and connect to the STOMP endpoint, is the Java library you are trying to use the ActiveMQ JMS Client library?  If so that won't work as that client only speaks OpenWire, no STIMP support in there.  , From the camel XML configuration I supplied, we can see the used class is {{org.apache.activemq.ActiveMQConnectionFactory}}.
It returns an instance of StompSslTransportFactory because of the SSL+STOMP URL options. So it sounds like it’s supported (there is an specific class for it). I’d say, instead, that class is broken and not compliant with the TransportFactory requirements. 

I would say it’s either TransportFactory enforcing {{wireFormat.host}}, not taking into account the transport factories called, depending on the protocols, or just StompSslTransportFactory needing an update to support that enforced parameter instead of refusing to establish the connection because that parameter is not allowed., The ActiveMQ client library does not and will not support STOMP, if you want to use STOMP as a JMS client (which you really shouldn't) then you'd need to choose a STOMP based JMS client library.  , Si what is this class for? http://activemq.apache.org/maven/apidocs/org/apache/activemq/transport/stomp/StompSslTransportFactory.html

I insist that, if a class exist, it needs to work. It does tell much wrong about the health of a software if it has a class with a bug and the solution is denying it.

If it’s not supported, it should clearly say so. Especially since there is a class for it.
I’m using JMS connection for this Java app I needed (I had to open the ports specifically for it) and, happily for me, most of my work is done in other working languages.

My main concern is how badly maintained this code is if, even when a feature exists (broken, but there it is and you can see it in the source code). I took the time to let you know and tried to help in sharing all the info I could to fix this bug. And the response is “use another thing because we are not going to fix the bug”. I know this ticket is even closed at the moment. How sad it is you deny from supporting a standard and you don’t plan even updating the already existing class to log that same message instead of a random error as you are logging at the moment., I’m reopening this ticket as I clearly think it’s not fixed and the bug is still persisting., The StompSslTransportFactory class (and other matching factories for AMQP, MQTT, etc) exist for the broker side and is not a client side class.  The class exists only in the activemq-stomp jar and is not part of the activemq-client jar. The broker uses it to create the server side transport in order to handle the STOMP protocol on the broker.  It is not intended for use by the client and if you try it isn't going to work because it was never designed as a client side class.

No one is denying supporting a standard or telling you to use something else because we aren't going to fix a bug.  This was closed because as Tim mentioned, there is no bug because the ActiveMQ clients only job is to support JMS using the native OpenWire protocol.  It does not support any other protocol but OpenWire.  If you want to use STOMP then you need to use a STOMP client.  Just like if you want to use MQTT or AMQP you need to use clients that support those protocols.

I think this is pretty clear and I'm closing this again because this is not a bug and works as intended.]