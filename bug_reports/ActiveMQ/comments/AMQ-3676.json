[When run against trunk the attached test cases passes without error.  Recommend you try a SNAPSHOT build of 5.6 and see if you issue is resolved.
, Yes that does work on 5.6-SNAPSHOT, however I presume this is an effect of Gary's patch from AMQ-3607 causing {{setOptimizeAcknowledgeTimeOut}} to have an effect (previously it wasn't wired through).

If I change to {{setOptimizeAcknowledgeTimeOut(0)}}, simulating the effect of things without a timer the tests fail again. Does this not mean that the acks are not being sent at 65% of the prefetch limit as expected and the timer is necessary to clean them up? 

This would mean the throughput would be limited to {{prefetch size * OptimizeAcknowledgeTimeOut}}, which probably isn't ideal?, Your test case doesn't set the prefetch limit on the MessageConsumer so the consumer never reaches the 65% of prefetch limit since the default is 32767 so the messages aren't ack'd in your test., You can see the test pass if you change the buildSession method to the following, and pass in the desired limit:

{noformat}
    private static Session buildSession(String clientId, String url, boolean optimizeAcknowledge, int prefetchLimit) throws JMSException {
        ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(url);

        connectionFactory.setCopyMessageOnSend(false);
        connectionFactory.setOptimizeAcknowledge(optimizeAcknowledge);
        if (optimizeAcknowledge) {
            connectionFactory.setOptimizeAcknowledgeTimeOut(0);
            connectionFactory.getPrefetchPolicy().setAll(prefetchLimit);
        }

        Connection connection = connectionFactory.createConnection();
        connection.setClientID(clientId);

        Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);

        connection.start();

        return session;
    }
{noformat}, Ahh great, so there was something missing from my configuration - thanks for clarifying that. Wasn't aware that the ConnectionFactory prefetch size on the consumer also needs to be set.

Would it be useful/possible to detect this situation (PolicyEntry prefetch < ConnectionFactory prefetch) and alert? In the normal situation of individual acks I guess the mismatch wouldn't have a significant effect, but for OptimiseAcknowledge it obviously causes the consumers to grind to a halt., The client doesn't really know anything about the broker configuration so detecting this isn't trivial.  , Working as designed, test case lacked the settings for consumer prefetch and the cyclic barrier wait in the onMessage then caused the test to fail., Alright, will chalk that one up to experience then - thanks for your help.]