[To clarify, Peer One sends the message to a separate Topic for the purpose of sending Requests from which Peer Two consumes messages., Would you mind submitting a test-case? Having problems reproducing this on the latest from CVS, Hi, I have tried this on 1.1 and 1.2-snapshot. I did not submit a test case, because the code is quite large and complex before it reaches this point of the application.

I will try to isolate a test case and submit it ASAP., Test case:

Server code:

public class SSTest implements MessageListener {
    public static void main(String[] args) throws JMSException, NamingException, InterruptedException {
        SSTest sst = new SSTest();
        sst.registerListener();
        Thread.sleep(1000000);

    }

    private QueueSession qs;
    private QueueSession sendSession;

    public SSTest() throws JMSException {
        BrokerContainer container = new BrokerContainerImpl();
        container.addConnector("tcp://localhost:6126");
        container.addConnector("vm://SS");
        container.start();
    }

    public void registerListener() throws JMSException, NamingException {
        ActiveMQConnectionFactory qcf = new ActiveMQConnectionFactory("vm://SS");
        qcf.setUseAsyncSend(false);

        QueueConnection qc = qcf.createQueueConnection();
        qs = qc.createQueueSession(false,Session.AUTO_ACKNOWLEDGE);
        sendSession = qc.createQueueSession(false,Session.AUTO_ACKNOWLEDGE);
        Queue queue = (Queue) qs.createQueue("SS.LoginQueue");
        QueueReceiver qr = qs.createReceiver(queue);
        qr.setMessageListener(this);
        qc.start();



    }


    public void onMessage(Message msg) {
        try {
            if (msg != null && msg instanceof TextMessage) {
                TextMessage message = (TextMessage) msg;
                System.out.println("Reading message: " +
                        message.getText());
                Destination dest = message.getJMSReplyTo();
                if (dest != null) {
                    MessageProducer mp = sendSession.createProducer(dest);
                    TextMessage replyMessage = sendSession.createTextMessage();
                    replyMessage.setText(message.getText());
                    mp.send(replyMessage);
                    mp.close();
                    System.out.println("Reply sent");

                } else {
                    System.out.println("No reply sent");
                }
            } else {
                System.out.println("Err, problem message is: " + msg);
            }
        } catch (JMSException e) {
            e.printStackTrace();
        }
    }

}


Client code:

public class ConnectTest {

    public static void main(String [] args) throws JMSException, NamingException, InterruptedException {


        ActiveMQConnectionFactory qcf = new ActiveMQConnectionFactory("tcp://localhost:6126");
        qcf.setUseAsyncSend(false);

        QueueConnection qc = qcf.createQueueConnection();
        QueueSession qs = qc.createQueueSession(false,Session.AUTO_ACKNOWLEDGE);
        Queue queue = qs.createQueue("SS.LoginQueue");
        Queue replyQueue = qs.createTemporaryQueue();
        int i = 0;
        while (true) {
            TextMessage tm = qs.createTextMessage("this is a test " + i++);
            tm.setJMSReplyTo(replyQueue);
            QueueSender sender = qs.createSender(queue);
            sender.send(tm);
            sender.close();
            System.out.println("Here");
            QueueReceiver receiver = qs.createReceiver(replyQueue);
            Message reply = receiver.receive();              
            TextMessage tmReply = (TextMessage) reply;
            System.out.println("Received reply: " + tmReply.getText());
            Thread.sleep(5000);
        }
    }
}, In the above test case the client waits forever for a reply. , There's a couple of gotchas on the test case submitted.
On the client side, before messages are delivered, the Connection needs to be started.
Also, as the test case is using queues, if the Connection is started, only one message will
be received - as the QueueReceiver is not closed in the while loop, and is not necessarily garbage collected, messages will not necessarily be delivered to the new QueueReceiver.

After fixing these issues, I can't reproduce on the latest (1.4). Changing Queues to Topics (which the orginal issue was raised on) still does not produce the behaviour described.

Please can you confirm that this is still an issue on version 1.4 ?, OOPS! after fixing the above problems my test program works fine... Would be great if this would come up as a debug message somewhere... Because the send goes out, but the receive never returns....

Perhaps you should fail the send if the Connection is not started?, I don't think we can fail a send() if the connection is not started as we'd not pass the J2EE certification tests if we did. To be compliant I think we have to be able to send() on a non-started connection, A warning in the log instead would be great then... Otherwise I would have never figured it out.]