[To make this not hang, the blocking on usage needs an overhaul such that it can be aware of the connection context or the shutdown needs to interrupt waiting threads.
One issue is that the pendingmessage cursors use the temp store and these are per subscription or durable topic subscription. The messages are present in the store so it is too late for sendFailIfNoSpace to kick in and throw an exception. 
Gating each send on available usage up front may be the simplest approach but that will have lots of side effects like not being aware of flushing to disk when a cache is exhausted. Not sure how to proceed with this at the moment. Needs more thought., We've noticed a similar issue to this, but without persistent messages.  Persistence is enabled in the broker, but all messages are sent specifying NON_PERSISTENT.  The hanging thread in the broker looks like:

  "ActiveMQ Transport: tcp:///10.66.1.23:8385" daemon prio=10 tid=0x00000000516aec00 nid=0x7f97 in Object.wait() [0x000000004d263000..0x000000004d263b10]
     java.lang.Thread.State: TIMED_WAITING (on object monitor)
          at java.lang.Object.wait(Native Method)
          at org.apache.activemq.usage.Usage.waitForSpace(Usage.java:99)
          - locked <0x00002aaab3912640> (a java.lang.Object)
          at org.apache.activemq.usage.Usage.waitForSpace(Usage.java:77)
          at org.apache.activemq.broker.region.cursors.FilePendingMessageCursor.addMessageLast(FilePendingMessageCursor.java:194)
          - locked <0x00002aaab41ac8f8> (a org.apache.activemq.broker.region.cursors.FilePendingMessageCursor)
          at org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor.addMessageLast(StoreDurableSubscriberCursor.java:169)
          - locked <0x00002aaab41ac3e8> (a org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor)
          at org.apache.activemq.broker.region.PrefetchSubscription.add(PrefetchSubscription.java:156)
          - locked <0x00002aaab41acb80> (a java.lang.Object)
          at org.apache.activemq.broker.region.DurableTopicSubscription.add(DurableTopicSubscription.java:199)
          at org.apache.activemq.broker.region.policy.SimpleDispatchPolicy.dispatch(SimpleDispatchPolicy.java:49)
          - locked <0x00002aaab41abe80> (a java.util.concurrent.CopyOnWriteArrayList)
          at org.apache.activemq.broker.region.Topic.dispatch(Topic.java:588)
          at org.apache.activemq.broker.region.Topic.doMessageSend(Topic.java:442)
          - locked <0x00002aaab41aae18> (a org.apache.activemq.broker.region.Topic)
          at org.apache.activemq.broker.region.Topic.send(Topic.java:376)
          at org.apache.activemq.broker.region.AbstractRegion.send(AbstractRegion.java:354)
          at org.apache.activemq.broker.region.RegionBroker.send(RegionBroker.java:445)
          at org.apache.activemq.broker.TransactionBroker.send(TransactionBroker.java:224)
          at org.apache.activemq.broker.BrokerFilter.send(BrokerFilter.java:126)
          at org.apache.activemq.broker.CompositeDestinationBroker.send(CompositeDestinationBroker.java:95)
          at org.apache.activemq.broker.MutableBrokerFilter.send(MutableBrokerFilter.java:133)
          at org.apache.activemq.broker.TransportConnection.processMessage(TransportConnection.java:443)
          at org.apache.activemq.command.ActiveMQMessage.visit(ActiveMQMessage.java:631)
          at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:297)
          at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:175)
          at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:68)
          at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:113)
          at org.apache.activemq.transport.InactivityMonitor.onCommand(InactivityMonitor.java:210)
          - locked <0x00002aaab41e21d0> (a org.apache.activemq.transport.InactivityMonitor$1)
          at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:84)
          at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:203)
          at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:185)
          at java.lang.Thread.run(Thread.java:619)

In this state, no new connections to the broker can be established, and no messages can be sent on existing connections.

We're on 5.3.0.  For the time being we've disabled persistence (setting adding persistent="false" to the broker element in the broker config).  We're not sure if this has stopped the hanging yet.

Thanks,
Simon, Hello,
I'm looking for some suggestions for a workaround.
We are experiencing this problem in 5.4.0 with non-persistent messages.  We see the same stack trace reported by Simon.

I was experimenting with a solution whereby the temp store usage would be monitored.  Producers would be blocked before the temp store is filled.
I'm seeing, however, that the temp store usage doesn't drop after the consumer connects and consumes all messages.  I have left the system running over 12 hours with no new messages and the temp store usage is remains at  16%.

Any suggests appreciated.
Thanks,
Elizabeth, The temp store will only be reclaimed in journal data file size blocks which by default are 32MB. So if you have not filled a journal file and moved on to the next, there can be no reduction in size.
To configure a smaller journal file size you would need to configure an PListStore as the temp store for the broker using xbean xml configuration. , This is a configuration issue, and can be resolved by using something like: 

{noformat}
        brokerService.getTempDataStore().setJournalMaxFileLength(10 * 1024);

{noformat}

to configure a temp store journal file length less than the configured limit.  The current trunk brroker will warn you when you make this configuration error.]