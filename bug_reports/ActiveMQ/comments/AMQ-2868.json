[Added the sync that serialises transaction updated to the store and cursor such that the cursor is always in order w.r.t to the store and setBatch can revert to just where it needs to so that there are no duplicates replayed to the cursor.
r985155
This is the bullet proof approach.
A variant could acquire per destination locks rather than the transaction store lock that is currently used. This would allow more per destination concurrency., sticking with the shared lock for the time being., This sync is only needed for sends, but it impacts acks so it needs a revisit. it is too heavy handed.
It breaks concurrent consumption on a destination., think setBatch needs to take the sync hit as it is the rare event. It may need to wait till store and cursor are in sync., Removed the sync and replaced cursor updates with a stack so that they occur in the same order as the index update, but without the need for the index lock or serial commit execution. Concurrent transactions can now wait on a batch write to the journal for their commit record.


http://svn.apache.org/viewvc?rev=1163613&view=rev, A failed Ack transaction, one that results in UnMatched ack exceptions for example, if this interleaves with non empty transactions, it can cause the non empty transaction to block. Thread stack{code}ActiveMQ Transport: tcp:///xx:34724" daemon prio=10 tid=0x00002aaab8187000 nid=0xfd9 waiting on condition [0x000000005a13d000]
   java.lang.Thread.State: WAITING (parking)
	at sun.misc.Unsafe.park(Native Method)
	- parking to wait for  <0x0000000794062330> (a java.util.concurrent.FutureTask$Sync)
	at java.util.concurrent.locks.LockSupport.park(LockSupport.java:158)
	at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:811)
	at java.util.concurrent.locks.AbstractQueuedSynchronizer.doAcquireSharedInterruptibly(AbstractQueuedSynchronizer.java:969)
	at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireSharedInterruptibly(AbstractQueuedSynchronizer.java:1281)
	at java.util.concurrent.FutureTask$Sync.innerGet(FutureTask.java:218)
	at java.util.concurrent.FutureTask.get(FutureTask.java:83)
	at org.apache.activemq.transaction.Transaction.waitPostCommitDone(Transaction.java:146)
	at org.apache.activemq.transaction.LocalTransaction.commit(LocalTransaction.java:73)
	at org.apache.activemq.broker.TransactionBroker.commitTransaction(TransactionBroker.java:252)
	at org.apache.activemq.broker.MutableBrokerFilter.commitTransaction(MutableBrokerFilter.java:103)
	at org.apache.activemq.broker.TransportConnection.processCommitTransactionOnePhase(TransportConnection.java:432)
	at org.apache.activemq.command.TransactionInfo.visit(TransactionInfo.java:100)
	at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:318)
	at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:181)
	at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:69)
	at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:69)
	at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:113){code}

The problem is that the empty transaction completion does not get pushed, it pops the valid transaction completion and runs it. The valid transaction pops nothing and tries again to run the after completion. The empty transaction hangs awaiting completion.
The fix is to run the after completion once we determine that there is no transaction work to be done.

This is a tough one to unit test due the the fact that two commit threads need to cross over in the broker., fix in http://svn.apache.org/viewvc?rev=1207693&view=rev, Removed synchronisation in MemoryTransactionStore.commit() with 1345023. We don't need it anymore as JDBC message store doesn't have a problem with order or writes and message sequence ids.]