[Recommend you try and capture the issue in a unit test to show what's going on and protect any fixes into the future., Attached test reproducing the issue, I may explain a bit more the submitted test:

Two messages are sent at nearly the same instant. There is only consumer rollbacking the session at each message consumption. According to the values of initial delivery and the backoff multplier, the message are expected to be redelivered 1s later and 6s later their emission. This is the case for first message. Yet, the second message second redelivery is not done after 6s but after 26s (ie, 1sec + 5*6sec). IMHO, the second message should have been redelivered the 2nd time after 6s.

Do you agree with this?

, The same behavior was described by another user on the mailing list: http://activemq.2283324.n4.nabble.com/Redelivery-schedule-is-messed-up-when-there-are-multiple-messages-on-the-queue-td4739313.html

A quick look at the code indicates that ActiveMQMessageConsumer.rollback() appears to increment redeliveryDelay (a consumer-wide member variable) each time any message is redelivered, rather than keying it to the number of redelivery attempts for the message in question. It might be possible to instead use the same approach used in ActiveMQSession.afterRollback(), where we compute the redelivery delay's exponent based on the number of redelivery attempts for the message itself., I gonna test if it's still the case in 5.15.x (it seems so but a little bit different)., This is a problem because with this, if exponential backoff is used and for some reason all jms transactions are rolled back for a few seconds, all the messages are redelivered but after 10-20 messages your are pretty much guaranteed to have a very long delay because of the exponential (the only limit is maximumRedeliveryDelay).

So this means very high delays can be reached in a very short time (in contrast to the normal mode where it takes a long time to get to a long delay).
 The messages are scheduled on this consumer in a very long time and the only way to process them again is to stop the consumer so that another consumer can process them.

Fixing this is important because the only workaround is to have a very low maxRedeliveryDelay which defeats the purpose of using exponential backoff.]