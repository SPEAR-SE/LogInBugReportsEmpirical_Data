[Did you ensure you edited the xml file that's actually in use?
Have you tried omitting the maxFrameSize option altogether?
, Hi Tim,

First off thanks for responding to our query.

The xml file I'm editing is /conf/activemq.xml.

I just tried omitting the maxFrameSize altogether and I receive the  
same error (Frame size of 140MB larger than max allowed 100MB)
The line after editing looks like this:

<transportConnector name="openwire" uri="tcp://192.168.10.1:61616? 
maximumConnections=1000"/>

I also tried making it smaller than 100MB and the message is the same  
(Frame size of 140MB larger than max allowed 100MB) which
seem to indicate it is not reading it or as you asked in the first  
question am I editing the xml file in use. I think I am editing the  
right
xml because the logs reflect my changed to the frame size.

Any insight is much appreciated

Thanks
Pat






, Can you put together a little unit test showing the problem?  , Hi Tim,

We can try and do that. Is there not an easy way for you to test this  
functionality?

Thanks
Pat



, A unit test would save me the time of having to create a test case, otherwise I will try to get to it when time permits. , Hi Tim,

Lucille here wrote a test case for this apparent bug. See attached zip  
file. The zip file contains the following:

-The 140MB JSON message we are trying to send.

- My activemq.xml with the following changes:
	<policyEntry queue=">" producerFlowControl="true"  
memoryLimit="20mb">   (Defaults to 1MB)
         <managementContext createConnector="true"/>  (We set this to  
true for management purposes)
         <memoryUsage limit="950 mb"/>   (We goose this from the 64MB  
default)
          <transportConnector name="openwire" uri="tcp://0.0.0.0:61616? 
maximumConnections=1000&amp;wireformat.maxFrameSize=157286400"/>
          (Goose to 150MB to handle 140MB message)
          <transportConnector name="amqp" uri="amqp://0.0.0.0:5672? 
maximumConnections=1000&amp;wireformat.maxFrameSize=157286400"/>
          (Also goosed this connector to 150MB although it is not  
really necessary)

- The test case source called TestActiveMqProducer.java.

I hope this helps.

Thanks again for looking into this for us.

-Pat










, Created a JUnit test case and from what I can see things are working.  , Hi Tim,

You created the Junit test case from what we supplied or did you build  
your own version?

Thanks
Pat



, Yours isn't a JUnit test case so it can't be dropped into the ActiveMQ unit tests.  You're welcome to use what I did to create an actual unit test., Hi Tim,

1. Forgive my ignorance but please tell how I can use what you did to  
create an actual unit test.

2. So do you think we have misconfigure something? Is there anyway for  
you to use the code we sent to see if you can
reproduce what we are seeing?

Thanks again,
Pat



, Dear Tim,
I didn't create my own broker.  We do not use an embedded broker.  Also your broker's xml is set for less than 100MB.  And the unit test message size seems to be set to 131072 bytes, not 104857600 bytes.

This problem is a problem of getting a message payload whose byte size is greater than 104857600 bytes across a native broker's queue.  From the documentation, it seems as if we set maxFramSize to greater than 104857600 bytes, we will be able to send a message whose actual size is greater than 104857600 bytes, but that is not true.  We have tested this in activemq 5.7 and 5.8.


This bug request is related to other bug requests such as: https://issues.apache.org/jira/browse/AMQ-4076

Sincerely,
Lucille Wilson


, Updated the test to use your settings and large file, still works fine. , Dear Mr. Bish,

Test3:
When I used your second Unit test I get socket exceptions.  So I tried another unit test which I made, to try and stuff a string whose size is over 100MB into a TextMessage and I still got a SocketException.  To view the SocketException, please unzip AMQ4335Test3_WithLargeGeneratedString.zip.  When you do, you'll see that I tried to overcome the socket exception by adding the socketBufferSize=157286400 parameter to the activemq.xml  <transportConnector name="openwire url.  But that didn't work.

I can't seem to get beyond this SocketException when I am running unit tests.  


Test4:
So I ran my application again.  To see what problems my application is running into, please unzip AMQ4335_Test4_regularRunThroughOurApplication.zip.

The json I am generating is the same json as I had included in the previous posts.

When I run the application, I still get 
java.io.IOException: Frame size of 140 MB larger than max allowed 100 MB
	at org.apache.activemq.openwire.OpenWireFormat.unmarshal(OpenWireFormat.java:277)
	at org.apache.activemq.transport.tcp.TcpTransport.readCommand(TcpTransport.java:221)
	at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:213)
	at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:196)
	at java.lang.Thread.run(Thread.java:662)

I'd appreciate it if you could tell me what I can do to fix this problem.  Thank you.

Lucille Wilson

, I'm not sure what to tell you on this as I cannot reproduce it.  The default setting for maxFrameSize if not specified on the uri in the config file is Long.MAX_VALUE so when you say you omitted it and you still got this exception I must assume your broker isn't using the config file you think it is.  I've tried a couple different test scenario and made sure that the code always sets the maxFrameSize specified and it works as expected.  , If we aren't using /conf/activemq.xml how can we tell?
We seem to be using it, because we only changed the wireformat.maxFrameSize in /conf/activemq.xml and when we bring up activemq.xml, we see that the transportConnector parameters are parroted back to us in the activemq.log.

We changed /conf/activemq.xml transportConnectors to say:
 <transportConnectors>
            <!-- DOS protection, limit concurrent connections to 1000 and frame size to 100MB -->
            <transportConnector name="openwire" uri="tcp://0.0.0.0:61616?maximumConnections=1000&amp;wireformat.maxFrameSize=157286400"/>
            <transportConnector name="amqp" uri="amqp://0.0.0.0:5672?maximumConnections=1000&amp;wireformat.maxFrameSize=157286400"/>
        </transportConnectors>

If we are to change the wireformat.maxFrameSize to LONG.MAX_VALUE, do we spell it just this way? :

 <transportConnectors>
            <!-- DOS protection, limit concurrent connections to 1000 and frame size to 100MB -->
            <transportConnector name="openwire" uri="tcp://0.0.0.0:61616?maximumConnections=1000&amp;wireformat.maxFrameSize=Long.MAX_VALUE"/>
            <transportConnector name="amqp" uri="amqp://0.0.0.0:5672?maximumConnections=1000&amp;wireformat.maxFrameSize=Long.MAX_VALUE"/>
        </transportConnectors>

?
Lucille, To get the default value just remove the maxFrameSize from your URI., The default value is 100MB.  I'm trying to override the default and replace the default with a larger size.  I know absolutely that my largest message is OVER 100MB.

So I thought that in order to override the default max frame size, I had to modify the /conf/activemq.xml and replace the transportConnector.  NO?

I certainly do NOT want a 100MB max size. I want to produce a TextMessage whose size is greater than 100MB.

Lucille, Dear Mr. Bish,

I think we should restart this conversation.  Perhaps I can fill in some details.

The problem, simply stated, is I want to produce a TextMessage whose message size is over 100MB.  I seem to be prevented from doing so by the DEFAULT MAX FRAME SIZE parameter.

In order to effect this change, I made the following changes to activmq and to my application:

1. I am running Activemq 5.8.0.
We are using a native broker, not an embedded broker.  We must use TextMessage, not BytesMessage.


In ACTIVEMQ_HOME/conf/activemq.xml

I made the follwowing changes:

<transportConnectors>
 <transportConnector name="openwire" uri="tcp://0.0.0.0:61616?maximumConnections=1000&wireformat.maxFrameSize=157286400"/>
 <transportConnector name="amqp" uri="amqp://0.0.0.0:5672?maximumConnections=1000&wireformat.maxFrameSize=157286400"/>
 </transportConnectors>

and also:
 <policyEntry queue=">" producerFlowControl="true" memoryLimit="20mb"> (I increased this to 20mb)

And also:
  <managementContext>
            <managementContext createConnector="true"/> (I changed this to true)
        </managementContext>

And also
 <systemUsage>
            <systemUsage>
                <memoryUsage>
                    <memoryUsage limit="950 mb"/> ( I changed this to 950mb)
                </memoryUsage>
                <storeUsage>
                    <storeUsage limit="100 gb"/>
                </storeUsage>
                <tempUsage>
                    <tempUsage limit="50 gb"/>
                </tempUsage>
            </systemUsage>
        </systemUsage>


2. When I start activemq (in a cmd line console), I inspect the activemq.log and see:
2013-02-22 14:28:14,333 | DEBUG | Publishing: tcp://Lucille-Win7-PC:61616 for broker transport URI: tcp://Lucille-Win7-PC:61616?maximumConnections=1000&wireformat.maxFrameSize=157286400 | org.apache.activemq.broker.TransportConnector | main
2013-02-22 14:28:14,333 | DEBUG | Publishing: amqp://0.0.0.0:5672 for broker transport URI: amqp://0.0.0.0:5672?maximumConnections=1000&wireformat.maxFrameSize=157286400 | org.apache.activemq.broker.TransportConnector | main

This leads me to believe that activemq will accept a message larger than 100MB.

3. Next I run my application (not my unit tests).
When I do, my RSIProducerToClient producer.send(TextMessage) does send the TextMessage.  My application does not detect any exceptions.
My client application (waiting for this message) does not get the message at all.  My client application times out while waiting on this message.
We look on the queue and we do not see the message either enqueued or dequeued.

When we inspect the activemq.log we see:

2013-02-22 14:30:20,692 | DEBUG | Transport Connection to: tcp://192.168.2.106:50385 failed: java.io.IOException: Frame size of 140 MB larger than max allowed 100 MB | org.apache.activemq.broker.TransportConnection.Transport | ActiveMQ Transport: tcp:///192.168.2.106:50385@61616
java.io.IOException: Frame size of 140 MB larger than max allowed 100 MB
	at org.apache.activemq.openwire.OpenWireFormat.unmarshal(OpenWireFormat.java:277)
	at org.apache.activemq.transport.tcp.TcpTransport.readCommand(TcpTransport.java:221)
	at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:213)
	at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:196)
	at java.lang.Thread.run(Thread.java:662)


4. 
It seems to us, that Activemq is allowing the possibility of sending a message over 100MB when Activemq starts up.  When we put the maxFrameSize in the activemq.xml and then we see that value (which is 157286400) parroted back when we start up Activemq in a console, we believe that ActiveMQ will be able to allow us to send a message of up to 150MB.

But when we actually DO send such a large message, the message is not allowed.  

Please help us to figure out how to send a TextMessage which is over 100mb long.  





Thank you.
Lucille Wilson, Here is a simple maven project that will build and run everything for you.  Just extract run mvn compile exec:java and it will start an embedded broker using a configuration file similar to your own.  Note that there is no difference here between embedded and standalone broker, same code, same config.  Test send the large message and receives and outputs the size. 

You might need to increase your heap for maven via export MAVEN_OPTS="-Xmx4096m -Xms256m -XX:MaxPermSize=256m" or the like since the message is quite large., Hi Tim,

Thanks, I will ask Lucille if she can do that as I'm not a programmer.  
Can you confirm that the maxFrameSize is configurable by changing
it to like 5MB and sending a message greater than 5MB? (e.g. 10MB  
message) This should produce a exception in the ActiveMQ log like:

Frame size of 10 MB larger than max allowed 5 MB

This will tell us that maxFrameSize is indeed configurable.

Then if you wouldn't mind, try a second test that would be to change  
it to something larger than 100MB like 150MB and sending a message  
greater than 150MB (e.g. 200MB).

This should produce a exception in the ActiveMQ log like:

Frame size of 200 MB larger than max allowed 150 MB

If this works for you then we know that it's configurable in both  
directions (Larger and smaller) and we will have dig even deeper than  
we have because we cannot
get it to move from 100MB. I tried the tests above and  the error is  
allows max allowed 100MB.

Note we are running the 64 bit version of 5.8.0 ActiveMQ on a Windows  
7 platform.

Thanks Tim,
Pat




, First change the log4j.properties file to log a DEBUG level so you see the exception, and then change the amq4335.xml file to have the desired maxFrameSize.  You will need to substitute a different sized file for the current amq4335.json that's currently used, or just modify the code to produce a randomly generated Byte blob of the desired size for the test.  I did not have time to get that fancy in the current test code., Hi Tim,

We will do that. Did you see my previous message? Can you perform  
those 2 tests to confirm on your end that you can change
the frame size in the activemq.xml both up and down and produce an  
exception based on the changed frame size and subsequent
larger message?

-Pat



, Dear Tim,
We have increased the heap size for activemq.  We have configured activemq.xml just as you say.  We have changed the log4j settings to debug so that is why you can see the debug messages in the activemq.log I have sent you.  , What is the URI that is used by your application to connect to the Broker?, tcp://0.0.0.0:61616, I set the maxFrameSize in ACTIVEMQ_HOME/conf/activemq.xml to 1 mb.
Then I created a junit test class which created a 2 mb message.  I expect that if my setting of maxframesize is respected the message will produce an error saying frame size of 2mb is larger than the max allowed of 1mb.

However, the message was enqueued. 

Please see AMQ4335Test4_With2mbMessage.zip.

I believe I have proven that Activemq has hard-coded a 100mb limit in the maxframesize and that any overrides set are ignored.  We'd like Activemq to fix this bug, please.  Please let us know when the bug is fixed and where to download the software.

Lucille Wilson, The max frame size is set to 1mb, however the message is 2mb.   The expected result is an error.  However, the message goes through.  All overrides of maxFrameSize are ignored.  Only the default maxFrameSize is respected., All,

I've tried to reproduce this using the attached test case (which spins up a broker using the attached config), using the standalone broker and Lucille's test, on windows 7, on Mac, and all combinations thereof. 

I cannot reproduce. 

The only thing else I see different is Windows 2008 R2. But other than that, there must be something else external to the brokers or some other config that's being missed. Pat, Lucille, If you can take my attached test case (or modify Tim's, which I did) and reproduce using that, then we can fix something. Otherwise, I'm not seeing any broken behavior.

Cheers, Dear Christian,
I used the AMQ4335SmallPayloadTest.java and the amq4335-small.xml.  I renamed the xml to activemq.xml. 
When I ran the AMQ4335SmallPayloadTest.java the Junit test showed green (which is what has been happening all along) but the message was not enqueued on the TEST.SMALL.MESSAGE queue.  In addition whatever setting there is in the amq4335-small.xml which enables the admin/queue.jsp, that setting was not enabled.

So my test did not show the "frame size of 2 mb is larger than max allowed 1 mb message" I was expecting.

I am running on Windows 7 Professional 64 bit operating system.  

Since I can readily and easily reproduce the problem showing that the max frame size is always the default of 100MB what would you like from me in order to show you this bug?

In the meantime, if there is any configuration or action we should take to override the default of 100mb to a larger number, please advise.

Lucille Wilson, Lucille,

My apologies. I didn't the proper asserts in there. I'll update my test case.

But I also wanted to point out something I noticed that I overlooked originally.
"wireFormat.*" should be spelled with camel humps, not as you have it in your config "wireformat"

I will update the test cases. Please do so on your side and let us know.

{code:xml}
<transportConnector name="openwire" uri="tcp://0.0.0.0:61616?maximumConnections=1000&amp;wireFormat.maxFrameSize=1048576"/>
{code}
, Updated unit test for small payload... note use "wireFormat.maxFrameSize=***" in the config, I changed the spelling of "wireFormat" to capitalize the "F".
Then I went back to running AMQ4335Test3_WithLargeGeneratedString.
What I saw in my activemq.log was: 

2013-02-25 15:57:45,818 | DEBUG | localhost adding destination: topic://ActiveMQ.Advisory.Producer.Queue.TEST.LARGE.FILE | org.apache.activemq.broker.region.AbstractRegion | ActiveMQ Transport: tcp:///192.168.2.106:55568@61616
2013-02-25 15:57:46,476 | DEBUG | Transport Connection to: tcp://192.168.2.106:55568 failed: java.io.IOException: Frame size of 100 MB larger than max allowed 100 MB | org.apache.activemq.broker.TransportConnection.Transport | ActiveMQ Transport: tcp:///192.168.2.106:55568@61616
java.io.IOException: Frame size of 100 MB larger than max allowed 100 MB
	at org.apache.activemq.openwire.OpenWireFormat.unmarshal(OpenWireFormat.java:277)
	at org.apache.activemq.transport.tcp.TcpTransport.readCommand(TcpTransport.java:221)
	at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:213)
	at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:196)
	at java.lang.Thread.run(Thread.java:662)


But what I hadn't noticed before was lines in the activemq.log file which looked like this:

2013-02-25 15:57:45,783 | DEBUG | Sending: WireFormatInfo { version=9, properties={MaxFrameSize=157286400, CacheSize=1024, CacheEnabled=true, SizePrefixDisabled=false, MaxInactivityDurationInitalDelay=10000, TcpNoDelayEnabled=true, MaxInactivityDuration=30000, TightEncodingEnabled=true, StackTraceEnabled=true}, magic=[A,c,t,i,v,e,M,Q]} | org.apache.activemq.transport.WireFormatNegotiator | ActiveMQ BrokerService[localhost] Task-2
2013-02-25 15:57:45,784 | DEBUG | Using min of local: WireFormatInfo { version=9, properties={MaxFrameSize=157286400, CacheSize=1024, CacheEnabled=true, SizePrefixDisabled=false, MaxInactivityDurationInitalDelay=10000, TcpNoDelayEnabled=true, MaxInactivityDuration=30000, TightEncodingEnabled=true, StackTraceEnabled=true}, magic=[A,c,t,i,v,e,M,Q]} and remote: WireFormatInfo { version=9, properties={CacheSize=1024, MaxFrameSize=104857600, CacheEnabled=true, SizePrefixDisabled=false, TcpNoDelayEnabled=true, MaxInactivityDurationInitalDelay=10000, MaxInactivityDuration=30000, TightEncodingEnabled=true, StackTraceEnabled=true}, magic=[A,c,t,i,v,e,M,Q]} | org.apache.activemq.transport.InactivityMonitor | ActiveMQ Transport: tcp:///192.168.2.106:55568@61616
2013-02-25 15:57:45,784 | DEBUG | Received WireFormat: WireFormatInfo { version=9, properties={CacheSize=1024, MaxFrameSize=104857600, CacheEnabled=true, SizePrefixDisabled=false, TcpNoDelayEnabled=true, MaxInactivityDurationInitalDelay=10000, MaxInactivityDuration=30000, TightEncodingEnabled=true, StackTraceEnabled=true}, magic=[A,c,t,i,v,e,M,Q]} | org.apache.activemq.transport.WireFormatNegotiator | ActiveMQ Transport: tcp:///192.168.2.106:55568@61616
2013-02-25 15:57:45,784 | DEBUG | tcp:///192.168.2.106:55568@61616 before negotiation: OpenWireFormat{version=9, cacheEnabled=false, stackTraceEnabled=false, tightEncodingEnabled=false, sizePrefixDisabled=false, maxFrameSize=157286400} | org.apache.activemq.transport.WireFormatNegotiator | ActiveMQ Transport: tcp:///192.168.2.106:55568@61616
2013-02-25 15:57:45,784 | DEBUG | tcp:///192.168.2.106:55568@61616 after negotiation: OpenWireFormat{version=9, cacheEnabled=true, stackTraceEnabled=true, tightEncodingEnabled=true, sizePrefixDisabled=false, maxFrameSize=104857600} | org.apache.activemq.transport.WireFormatNegotiator | ActiveMQ Transport: tcp:///192.168.2.106:55568@61616

I think it may be that maxFrameSize is overriden in some code, but then set back to the default of 100MB in other code.  There is a discrepancy between values in maxFrameSize in the lines labeled 'Using min of local', 'Received WireFormat', 'before negotiation', and 'after negotiation'.

I still think there is a bug.
Lucille Wilson, K looks like you're getting the max frame size set properly on the broker. Also looks like the client is sending its wire format info which is set to 100MB... what version of jars are you using for the client? , Dear Christian,
I had the 5.6.0 jar in my client application.  I switch that out and put in the activemq-all-5.8.0.jar.
Now I can properly send TextMessage whose payload is over 100MB.  

The two changes I had to make were:
1. spell wireFormat correctly in the activemq.xml
2. add the activemq-all-5.8.0.jar to my project.

Thank you, Thank you, Thank you!

However, I have two suggestions for changes, please.
1. When the activemq project is distributed, the conf/activemq.xml spells wireformat with a small 'f'.  Please fix this, because if you use the small 'f' then the maxFrameSize is not set to a number other than the default. (I tested this).  

So activemq.xml should read:
<transportConnectors>
            <!-- DOS protection, limit concurrent connections to 1000 and frame size to 100MB -->
            <transportConnector name="openwire" uri="tcp://0.0.0.0:61616?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600"/>
            <transportConnector name="amqp" uri="amqp://0.0.0.0:5672?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600"/>
        </transportConnectors>

2. Please document this a bit better. On this page:
http://activemq.apache.org/configuring-wire-formats.html
Please mention that the default value is NOT max long, but 104857600 (i.e. 100MB), that the value is the number of bytes (not megabytes, gigabytes or any other thing).

Thank you and thank Timothy for all your help.
Lucille Wilson, 1. I corrected the configuration file to use the right case.
2. The default is indeed Long.MAX_VALUE as you can find by code inspection of OpenWireFormatFactory.java the reason you were getting into this situation is that you had mixed an old client library with a newer broker instance and that version of the client lib was sending wireFormat.maxFrameSize of 100MB to the broker.  Wireformat negotiation always takes the LOWEST value of the two that are exchanged at connection time which means no matter what you set on the broker if it was greater than the client's 100mb value the broker always chose the lower one.  

This is why it a good idea not to mix older client's with newer broker's if you can help it as issue fixed in the client and broker code can emerge and in some cases new more difficult to find issues can appear.  , Issue of mixed broker and client versions.  ]