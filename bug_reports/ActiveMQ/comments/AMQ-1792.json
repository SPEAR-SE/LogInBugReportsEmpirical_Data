[This looks like a prefetch issue - can you set the prefetch size = 1 ?
see http://activemq.apache.org/what-is-the-prefetch-limit-for.html, Rob,

its indeed some time ago, but the prefetch size was set to 1 (like you can see in the zip-archive in Connector.java).

Do you have another idea?, I worked through the test case. What happens is that each of the consumers gets a shot at consuming all of the existing messages (5) in the queue. The recovery dispatch in Queue.addSubscription is responsible for that.
For the two consumers that do work, 1 message gets dispatched that fills the subscription (because of the prefetch value) and the onMessage blocks. Because of the transacted session, an on delivery ack results in the prefetch being exceeded by one and a second message is dispatched. This results in 4 of the 5 messages locked/dispatched.
For the third, it consumes and generates an new message. the third consumer is thus not full and consumes what it produced. This continues for 5 seconds until one of the other two consumers becomes available and consumes what the third produces. This ends the third consumers run as all available messages have been dispatched.

To see a change in behavior, increase the Config.sMESSAGESTOSEND to 10. In this way, two iterations of consumer 1 and 2 will be needed to consume ~6 messages, leaving 4 for consumer three so it will continue past the first consumer commit. These remaining messages will get dispatched between the available 3 consumers and consumer 3 will be able to continue.

I think things are working as expected here. Don't think it is critical., reducing severity, things are working as expected I think for this particular scenario.

One other thing to play with: ack Mode Session.DUPS_OK_ACKNOWLEDGE;
This will negate the production of the DeliveryAck and only one message, the prefetch value, will be dispatched/locked by a sleeping consumer., This looks resolved ]