[Before any patch can be applied we need unit tests to verify the problem and ensure it stays fixed.  Also there were some fixes in this area since v5.6.0 are you testing against the 5.7-SNAPSHOT code and builds?, I tested against the apache-activemq-5.7-fuse-20120912.001718-11 code and builds in these two days and found that the problem still exists.

Reason:
In method PrefetchSubscription#dispatchPending(), pending.remove() made the message removed from the pending, but if canDispatch(node) returns false, the method PrefetchSubscription#dispatch(node) was not called and the message could not put to dispatched list, so the message was not sent to client and can not put back to Queue#redeliveredWaitingDispatch. 
When canDispatch(node) return false? If the server received the acknowledge commmand but did not received the transaction commit command, node.isAcked() returns true and node.isDropped() returns false, the result is false.

org.apache.activemq.broker.region.QueueSubscription
  protected boolean canDispatch(MessageReference n) throws IOException {
    boolean result = true;
    QueueMessageReference node = (QueueMessageReference)n;
    if ((node.isAcked()) || (node.isDropped())) {
      result = false;
    }
    result = (result) && ((isBrowser()) || (node.lock(this)));
    return result;
  }, We need a JUnit test case to show that the issue exists., If the consumer was killed, the broker will rollback the transaction. In rollback method, broker will set the acked status to false of the message of which the broker had received the ack command but hadn't received the commit command from consumer. But before the rollback method was called, the dispatch thread was still running, if there is new consumers, the message whose acked status is true will still be dispatched.

At first, I thought the bug still exists in version5.7,  because I only noticed the change:
from
if (!node.isDropped() && !((QueueMessageReference) node).isAcked() && (!node.isDropped() || s.getConsumerInfo().isBrowser()))
to
if (!node.isDropped()),

but didn't notice the change:
from
if (dispatchSelector.canSelect(s, node) && assignMessageGroup(s, (QueueMessageReference)node))
to
if (dispatchSelector.canSelect(s, node) && assignMessageGroup(s, (QueueMessageReference)node) && !((QueueMessageReference) node).isAcked() ).

The appended condition "!((QueueMessageReference) node).isAcked()" will prevent the message whose acked status is true from being dispatched. So the bug was fixed in version 5.7. 


, Fixed in 5.7, thanks for closing the loop on this.]