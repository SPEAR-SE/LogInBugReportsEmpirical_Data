[in the scenario you describe above, can you see messages on broker 3(61618  - with no consumers) in the JMX or WebConsole?, I have run the same tests and came to the same issue. Using JMX, you can see that the queueSize is n, where n is the number of undelivered messages.

I've also noticed that the undelivered messages will stay on the broker. If you set a consumer to hit the broker with the undelivered message, the messages will be delivered., Attached 3 log files from running the example provided in the initial issue (with log4j.logger.org.apache.activemq=TRACE). The result of the test is that the first consumer (connected to 61616) consumes 5 messages, the second consumer (connected to 61617) consumes 2 messages, and 3 messages are orphaned on the 3rd broker (61618).

This seems to be a rather critical bug, given that a simple use case for a network of brokers does not function properly., I have traced through the source code on 5.2 and pin-pointed the following behavior:

org.apache.activemq.broker.region.Queue @ doDispatch(List<QueueMessageReference) 
there is a line of code that checks whether a subscription can be selected for the message based on the message's brokerPath (hops, visited before, etc). This path can potentially fill up to "n". (where n=# of brokers in the network). At that point, it will run through all the subscriptions in the list and not be assigned to any queue and the message gets orphaned on that broker.

I have run the same test and traced through the source code on 5.1 at the same block of code and observed that the brokerPath for a message will never be more than 1. (n=1)
, Unit test which reproduces the problem, I would like to mention that I have seen something similar with the following configuration:

[producer] -> [broker 1] -> [broker 2] -> consumer

I noticed that I get a small number of messages delivered to broker 2 when the active consumer is closed.  I suspect this has something to do with the preftech limit on the URI which results in one last batch of messages to be dispatched to the broker even though the consumer has been closed. I'm not sure if this is a race condition or not but the scenario mentioned above can be reproduced by producing 1000 messages or so and randomly stopping the consumer on broker 2., I am able to reproduce this when I connect , stop and connect consumers many times. It might be the consumer is not removed cleanly on all the brokers when it disconnected., this AMQ-2135-Patch-03182009.patch fixes the issue. Junit test is passed, test 4 brokers, with producer rotate on each one. 

Note: ConduitBridge.java has change for AMQ-2104, please ignore that. I generate mine on 5.2.0 tag version. Also subscriptionMapByRemoteId is not used by this bridge so i override the parent method to get rid of putting consumer into it. It will never be removed. 

Please review this and apply to trunk once considering this is a valid fix., The AMQ-2135-Patch-03182009.patch reliably passes the JUnit test case for low MESSAGE_COUNT numbers (e.g. less than 100), but reliably fails the test case when MESSAGE_COUNT is large. I am using 1000 for MESSAGE_COUNT, and it has never passed., hi, the old AMQ-2135-UnitTest.patch has a Thread.sleep(1000) so after the producer produce, wait for 1s, then it starts to check how many messages are consumed and apparently when the message number increases, it needs to give more time for the consumer to consume the messages.

I made a patch on today's trunk r906983

Attached are the AMQ2135Test.java which demonstrate the problem with the trunk code. You will see the test will never quit because it will never consume all the messages produced.
and apply AMQ-2135-022010.patch it will fix the issue. , try suppressDuplicateQueueSubscriptions="true" on the networkConnector in the conf, this issue seems fixed from 5.3 see http://activemq.apache.org/networks-of-brokers.html by default this attribute is false so you will still experience stuck message on a network of broker bridged by multicast, ying,
can you clarify where you are with this issue. Do we have a test case that fails on 5.2 and works on 5.3.0|5.3.1 or do we still need to apply your patches? I would like to commit the  test case if that is the case and close this., hi, gary,
it is fixed from 5.3 on. The only thing the user need to add is suppressDuplicateQueueSubscriptions="true" on the networkConnector in the conf if they are using a network of brokers in a certain way. that fixed the issue i saw. No need to apply my patches. thanks, making resolved post Ying's comment on the resolution. ]