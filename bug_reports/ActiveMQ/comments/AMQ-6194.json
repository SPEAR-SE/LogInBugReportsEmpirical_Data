[Thanks for the test case.  I took your example and re-wrote it slightly with JUnit to demonstrate the issue and uploaded it as an attachment.   

[~gtully], If you run the test case you will see that the statistics report back a message count of 2 instead of 1.  The issue here is pretty simple, it's on line 857 of the Queue class: https://github.com/apache/activemq/blob/master/activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java#L857

The problem is the temp queue is part of a transaction, but since its store is null that if statement is always true so it executes the messageSent() method there and also again when the transaction completes which leads to the statistics updating twice.

Seems like we could just delete the {{store == null}} part because I think any non temporary destination should always have a store.  Could also just change it to {{if ((store == null && !destination.isTemporary()) || (!context.isInTransaction() && !message.isPersistent()))}}

But I wanted to run it by you first to see what you think since you were the last person to have touched that line in this commit https://git-wip-us.apache.org/repos/asf?p=activemq.git;a=commit;h=54e2e3bef290d7455d9d1ba3420d12dc4805b339, [~cshannon] thanks for the heads up!
The intent is to match tryOrderedCursorAdd, 2nd else clause.
Where there is no ordering issue with non persistent messages and when the store == null all messages are non persistent.
https://github.com/apache/activemq/blob/master/activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java#L879

To match that clearly I think it should be: {code}if ( !context.isInTransaction() && !( store == null && message.isPersistent())) {code}

An alternative approach would be to delete that line altogether and add a call to messageSend in tryOrderedCursorAdd.
ie: When there is no order issue, add to the cursor and add to the stats.
That keeps the logic and the action nicely together so the intent is a little more clear.

There used to be a sendLock, and it idea was to do the stats update outside of that lock, hence the separation. With the send lock gone, there is no good reason not to inline the call to sendMessage in the tryOrderedCursorAdd

, Thanks for the explanation [~gtully]. I like the idea of getting rid of that line and moving the stats to tryOrderedCursorAdd as it is cleaner.  I will apply the fix and a test shortly., Commit 903dec615c7932475bd3e6cd869af25f01de64b2 in activemq's branch refs/heads/master from [~cshannon]
[ https://git-wip-us.apache.org/repos/asf?p=activemq.git;h=903dec6 ]

https://issues.apache.org/jira/browse/AMQ-6194

Fixing an issue that caused statistics for a transactional temporary
queue to be updated twice by mistake.  Moved the statistics update into
tryOrderedCursorAdd so that the update is called immediately only if
not inside a transaction.
, In our production test environment this bug causes the ActiveMQ kahadb store limit to be reached, even though there is not a single message currently in the broker. The "data/kahadb" directory fills up with database log files, stopping the broker from working.

We have several clients using request-response where the response queue is a temporary queue. Each client has its own temporary queue which is reused for all requests during the lifetime of the client process, as recommended [by the ActiveMQ documentation|http://activemq.apache.org/how-should-i-implement-request-response-with-jms.html].
When we look at the temp queues using hawtio we see that the _EnqueueCount_ is always two times the _DequeueCount_, even though no messages can be fetched from the queue, aka "ghost" messages.

Because of the seriousness of this issue I would consider this issue to be at least _Major_, not _Minor_ as it is today.

If we manually build ActiveMQ with this patch, then this issue goes away, but we would prefer to have an official release instead.
We would be very happy if a new release containing this fix could be prioritized., Commit 7ddfa97d0173b07346ea8fdfcb8e6545766e0d39 in activemq's branch refs/heads/activemq-5.13.x from [~cshannon]
[ https://git-wip-us.apache.org/repos/asf?p=activemq.git;h=7ddfa97 ]

https://issues.apache.org/jira/browse/AMQ-6194

Fixing an issue that caused statistics for a transactional temporary
queue to be updated twice by mistake.  Moved the statistics update into
tryOrderedCursorAdd so that the update is called immediately only if
not inside a transaction.

(cherry picked from commit 903dec615c7932475bd3e6cd869af25f01de64b2)
, I actually meant to merge this earlier into a 5.13.x minor release but it was overlooked.  I went ahead and merged it now so it will be in 5.13.4 if released as well as 5.14.0.  I would like to start pushing for 5.14.0 soon but there are still a couple of issues to be worked out first so a 5.13.4 may end up being going out the door in the meantime as it probably has enough bug fixes by now that it can be released., Thank you for your quick response.]