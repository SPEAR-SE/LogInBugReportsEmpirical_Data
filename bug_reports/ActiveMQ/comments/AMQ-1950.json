[Hans, have you had any luck reproducing this problem with trunk and with a simple jms only test. I have been attempting to reproduce with org.apache.activemq.advisory.MasterSlaveTempQueueMemoryTest, but to no avail., I first tried to run the test with a singleton MDB, but I found that my JBoss configuration failed here. It was still deploying multiple beans.

I think to reproduce it stand-alone, I must instantiate several message message listener beans that forward the message to a temporary queue and receive the reply. Probably less than that will do, but this would replicate the JBoss case and I don't know which part exactly fails.

, This patch should resolve the issue, the wakeup outside of the dispatchLock makes sense in all cases, as the wakeup deals with optimized and the additional isSlave check which causes the problem in this case.
I want to verify a full test run with this change and also see if I can generate a tests case that reproduces the problem.
Hans, if you get a chance, can you verify your jboss scenario with this fix? thanks., Removed 

    <dependency>
      <groupId>${pom.groupId}</groupId>
      <artifactId>activemq-core</artifactId>
      <type>test-jar</type>
      <scope>test</scope>
    </dependency>

from activemq-pool/pom.xml

or I get:

Missing:
----------
1) org.apache.activemq:activemq-core:test-jar:tests:5.3-SNAPSHOT

  Try downloading the file manually from the project website.

  Then, install it using the command: 
      mvn install:install-file -DgroupId=org.apache.activemq -DartifactId=activemq-core -Dversion=5.3-SNAPSHOT -Dclassifier=tests -Dpackaging=test-jar -Dfile=/path/to/file

  Alternatively, if you host your own repository you can deploy the file there: 
      mvn deploy:deploy-file -DgroupId=org.apache.activemq -DartifactId=activemq-core -Dversion=5.3-SNAPSHOT -Dclassifier=tests -Dpackaging=test-jar -Dfile=/path/to/file -Durl=[url] -DrepositoryId=[id]

  Path to dependency: 
        1) org.apache.activemq:activemq-pool:bundle:5.3-SNAPSHOT
        2) org.apache.activemq:activemq-core:test-jar:tests:5.3-SNAPSHOT

----------
1 required artifact is missing.

for artifact: 
  org.apache.activemq:activemq-pool:bundle:5.3-SNAPSHOT

Same for activemq-camel/pom.xml and some other sub poms

I'm running

  mvn -Dmaven.test.skip=true install

because it takes a long time to run all tests and some often fail.

Maven does not skip the test-jar dependencies, it seems.

Installed Maven 2.0.9, but it does the same :(

Getting there, but it takes a while., ah,{code}mvn clean install -Dtest=0{code} does the trick. The builds the tests but no tests are run as none match '0'., Thanks. Easier than removing all those dependencies.

I've first tested with the old installation to verify that it still fails. It did. With 1 message and 10 messages it was OK, but when I sent 50 it got the deadlock at 33.


With the patched 700476 I do not get a dead after sending 4 times 100 messages at a time.

I got some " Slave broker out of sync with master: Dispatched message (ID:...id.) was not in the pending list" messages, though.
And, I guess as a result, the number of messages on the slave queue page were not updated to the same values as on the master.

I also have a lot of temporary queues on the slave, now.
, Did another test with 30 messages at a time and then it happened at exactly the same total number of messages: 200

Does that ring a bell? Is there some list that gets full?

Maybe I should try with a much larger message. If the same happens sooner it could be a memory buffer that gets full.
, this is progress but it is pointing to the need for a standalone test case.
200 is the default page size, but not sure if that is relevant in this case. 

I wonder if it is worth looking at org.apache.activemq.advisory.TempQueueMemoryTest, it is simple rpc with a temp q for the reply. I extended it to master slave to tackle an instance of "Slave broker out of sync with master..." in the past, hense MasterSlaveTempQueueMemoryTest. How different is the mdb scenario? If we can replicate the jms logic then I think it is only a case of ensuring that the session/connection caching is maintained and the jboss scenario can be reproduced. Do you think this is feasible?
, Certainly feasible, but I think implementing all is a lot of work and not necessary. The problem is to identify the relevant parts.
For AMQ-1849 I could make a bean that is used by both.

Here it's a bit more complicated, because I think that concurrency is part of the problem. I'm not sure exactly where, but I suspect creating and deleting temporary queues is at least part of it. (well, for the deadlock certainly)

The JBoss case usually works fine when I send 10 messages, that are forwarded from the first MDB to another temporary queue. When there are more pending messages, JBoss will create more MDB's, so there is more concurrency.

I doubt that the test cases really catch the master/slave issues, because of variable latency between the hosts. But it's better than nothing. I'll check them again.

later

, more complete patch, same logic needs to be applied to subscription removal as well as subscription addition as iterate can be at work in both cases., Do you think the patch to avoid the deadlock can be applied to 5.2.0 RC1 ?, yea, I will cut rc2 from trunk before the end of the week with a bit of luck and commit the deadlock fixes once I track down some further regressions with the unit tests., Committed revision 700823 slight revision to patch to gate on isSlave to reflect wakeup inline call to iterate. This allows immediate dispatch to new subscription., Surprising result (for me, at least) with the patched RC1(Sep 30) : it also happens when the MDB's are deployed as singleton.

I sent 50 messages at a time. Fine up to 200, so 4 times.

On the 5th it works as expected on the master, but the slave has:

|| queue      || Pending   || Received ||
| queue.ReplyA | 250     | 0 |
|  queue.A 	     | 50       | 200 |
|  queue.B 	     | 50   | 200 | 

A stand-alone test application using a single bean is quite easy to make, if it's still necessary.

Have not tried the latest trunk, yet.

, I've created a JMSMessageHandler (a MessageListener) and a kind of container for it.

See activemqjee-0.0.4-src.tar.gz

It can be deployed on JBoss 4, Glassfish or stand-alone. (tested all three)

To run it stand-alone, do something like:

java -classpath conf:lib/activemq-all-5.2.0.jar:lib/activemqjee-0.0.4.jar:lib/log4j-1.2.14.jar org.activemq.jms.StandaloneApp 

that is, on a unix with a directory structure:
 conf/jndi.properties  
 conf/log4j.xml
 lib/activemq-all-5.2.0.jar  
 lib/activemqjee-0.0.4.jar
 lib/log4j-1.2.14.jar

Optional parameters:
  a number = the number of concurrent beans (message listeners)  (default 1)
  a second number =  the number of milliseconds to use for time-to-live / timeout. (default 1000 ms)

, Hans, this looks like progress, thanks. Standalone app runs fine. Can u post your handy client? thanks., I don't know, what you mean. StandaloneApp is my handy client. (I think)


It works by posting a message to 'queue.A' with the ActiveMQ console (or anyway you like, of course) with a reply queue (I use "queue.ReplyA"). 

Then the first message handler (handler A) forwards the message to 'queue.B'  to which the second message handler is listening.

The second message handler replies to the first through the reply queue (set by handler A).

The first (handler A) replies to the reply you've specified in the first request.


, Also works on JBoss 4.2.3.GA. (the other was 4.0.5)



, Added a little test driver, startBroker(), doWork() that submits 250 messages, both maser and slave show the expected processed messages via jconsole.
, Hans, ok, I added the code to start a master slave pair and produce 250 messages to StandaloneApp, see attachement. The test works are expected. Are you happy that this issues is resolved?

The 'surprising' result you mention above (on the 3rd), in what circumstances does this happen in the standalone app?
I will try some additional values of "the number of concurrent beans (message listeners) (default 1)" in the next few minutes it hope of reproducing the problem. 
Otherwise, can we consider this issue closed?, That result was against the same version as I had tested before.

I'll test again. I should use the latest 5.3.0-SNAPSHOT ?

Or is there a new RC already?, wait for the new rc, I am working on it now., Your test does not test concurrency. The receiver waits until it gets the previously posted message and then the next message is produced. 

I've modified it to first produce all messages with a correlationid and then try to receive the same number of messages and checking the received ids.

Also added copying the correlationid in the handler. ]