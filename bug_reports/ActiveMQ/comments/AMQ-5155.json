[Someone please help resolve this ticket. The bug described above is still present in 5.9.1. I tried both cases, heartbeat set to 0,0 and 10000,10000. Slightly different buggy behaviors, but it still does not work. Please:
1) download 5.9.1
2) bin/activemq console xbean:examples/conf/activemq-demo.xml
3) open two browsers (firefox/chrome) to http://localhost:8161/demo/websocket/index.html
4) type a few messages over a 5 minute period

WARN | Transport Connection to: StompSocket_1998606381 failed: java.io.IOException
WARN | Transport Connection to: StompSocket_178709817 failed: java.io.IOException
Exception in thread "ActiveMQ InactivityMonitor Worker" java.lang.NullPointerException
at org.apache.activemq.transport.AbstractInactivityMonitor.onException(AbstractInactivityMonitor.java:314)
at org.apache.activemq.transport.AbstractInactivityMonitor$4.run(AbstractInactivityMonitor.java:215)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
at java.lang.Thread.run(Thread.java:745)
Exception in thread "ActiveMQ InactivityMonitor Worker" java.lang.NullPointerException
at org.apache.activemq.transport.AbstractInactivityMonitor.onException(AbstractInactivityMonitor.java:314)
at org.apache.activemq.transport.AbstractInactivityMonitor$4.run(AbstractInactivityMonitor.java:215)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
at java.lang.Thread.run(Thread.java:745)
, Why not try and create a unit test and submit a patch that fixes it?, Hi,
Can we pull up the Priority, as it is a real blocker for websocket users? I really hope that it will be corrected in 5.10.1: our enterprise stack is stuck with 5.8 because of it.
@Timothy, I'm sorry, I tried but the AMQ internals are not so easy to understand, I'm sure that it'll not be so difficult for an expert like you, but it's really red hairing for noobs like me...

Regards,, Can we pull up the Priority
-> we all think so., Hi, 
I have created a patch for activemq 5.9.1 version that seems to work.

These are my changes for org.apache.activemq.transport.ws.StompSocket:

1. in doStart() I set transportListener to remove NPE:
{code}
@Override
    protected void doStart() throws Exception {
        socketTransportStarted.countDown();
		stompInactivityMonitor.setTransportListener(this.getTransportListener());
    }
{code}

2. in onMessage(String data) I managed keepalive frame:
{code}
if (!transportStartedAtLeastOnce()) {
            LOG.debug("Waiting for StompSocket to be properly started...");
            try {
                socketTransportStarted.await();
            } catch (InterruptedException e) {
                LOG.warn("While waiting for StompSocket to be properly started, we got interrupted!! Should be okay, but you could see race conditions...");
            }
        }
        try {
	      if (data!=null && data.equals("\n"))
		{
		    sendToActiveMQ(new KeepAliveInfo());
		}
	      else {
		   protocolConverter.onStompCommand((StompFrame)wireFormat.unmarshal(new ByteSequence(data.getBytes("UTF-8"))));
		}
        } catch (Exception e) {
            onException(IOExceptionSupport.create(e));
        }
{code}

Can I share with you my code in a better way?
Thanks
Claudio Parodi, Hi Claudio,

I tried your code with ActiveMQ 5.11.1 and it seems to work fine now, at least with the stomp.js example chat test.
Made some diffs for the 5.11.1 version that I'll attach to this ticket.

Thanks!, I've tried every version >= 5.9.1 to 5.12-SNAPSHOT and I can reproduce the reported issue. I guess for now some people will have to stick to 5.8 for production. This is a bug that affects everyone using Websockets and it's been open for almost a year :|, Applied a slightly tweaked version of the patch, thanks for looking into it.  , Hi Timothy,
your change in version 5.12 isn't complete. You forget the "else" before the "onStompCommand ...", like in the snippet from Claudio.

The "(StompFrame)wireFormat.unmarshal" throw an EOFException, because the KeepAlive command isn't handled in it. Then the session is marked as failed.

Please complete the code.

Peter, Added a fix, let me know if it works for you., It's works now.

Thanks, Even though the above bug was fixed, a related bug now occurs. This may deserve a new ticket? Can someone confirm the following:
1) Download a recent 5.12 SNOPSHOT that works and contains the patch above. I used https://repository.apache.org/content/repositories/snapshots/org/apache/activemq/apache-activemq/5.12-SNAPSHOT/apache-activemq-5.12-20150407.222248-96-bin.tar.gz
2) bin/activemq console xbean:examples/conf/activemq-demo.xml
3) open two browsers (firefox/chrome) to http://localhost:8161/demo/websocket/index.html
4) In a single browser window, type 1, 2, 3, ... 9 with a return/enter after each number 
5) Half of the chat ends up in one browser, and half in the other. 

This bug causes the receiving browser to only get 1/2 the chats. Could this bug relate to the new added code that uses "/n"?

Can someone confirm this?, This is not a bug, the default address  string in that example is: /queue/test which means that the messages are load balanced across connections, try it with /topic/test and it should work as expected. , You are correct, using /topic/test works as expected. I performed various tests and no issues to report.
Thank you very much for solving this bug. This is the one feature I needed in order to use ActiveMQ. I appreciate everyone's contribution in resolving this problem and look forward to the release of 5.12. , Keep testing it and report back if you find any other gremlins.  , REVISION
Can someone confirm this bug occurs in their environment? If so, this bug relates to AMQ-5155 and AMQ-4674. I recommend that the ActiveMQ WebSocket example should work as is, regardless of using parameters like transport.hbGracePeriodMultiplier. Using Fedora/Firefox would cause the bug 50% of the times after 50-500 PINGs, but NO bug to report in Fedora/Chrome because of timing conditions.

The bug manifests itself in "/activemq-client/src/main/java/org/apache/activemq/transport/AbstractInactivityMonitor.java" when the timing of onCommand() (generated by the web browser PING or message) crosses over the timing of readCheck(). In other words, the 10 second timing of onCommand() via web browser's PING occurs before  the 10 second thread timing of readCheck(), but with a small time drift, the timing of readCheck() starts to occur before onCommand(). At this exact cross over point,  readCheck() will occur twice, and this will cause the bug. In the log below, the timing sequence is:
17:05:21,162 | DEBUG | onCommand()
17:05:21,162 | DEBUG | readCheck()
17:05:31,162 | DEBUG | readCheck()
17:05:31,164 | DEBUG | onCommand()

Opening Web Socket...
Web Socket Opened...
>>> CONNECT
accept-version:1.1,1.0
heart-beat:10000,10000
login:guesttgg
passcode:guest

<<< CONNECTED
server:ActiveMQ/5.12-SNAPSHOT
heart-beat:10000,10000
session:ID:c1-39862-1429234022608-4:2
version:1.1

connected to server ActiveMQ/5.12-SNAPSHOT
send PING every 10000ms
check PONG every 10000ms
connected to Stomp
>>> SUBSCRIBE
id:sub-0
destination:/queue/test (same behavor for /topic/test)

<<< PONG
>>> PING
... 395 times this case, but 50-500 times in general
<<< PONG
>>> PING
<<< PONG
>>> PING
>>> PING
>>> PING
did not receive server activity for the last 20003ms
Whoops! Lost connection to ws://localhost:61614/stomp


INFO version of data/activemq.log
2015-04-17 15:49:12,750 | WARN  | Transport Connection to: StompSocket_919027643 failed: org.apache.activemq.transport.InactivityIOException: Channel was inactive for too (>10000) long: StompSocket_919027643 | org.apache.activemq.broker.TransportConnection.Transport | ActiveMQ InactivityMonitor Worker

DEBUG with special coding version of data/activemq.log
2015-04-19 17:05:21,162 | DEBUG | onCommand() | org.apache.activemq.transport.AbstractInactivityMonitor | qtp1493158871-33
2015-04-19 17:05:21,162 | DEBUG | 10000ms elapsed since last read check. | org.apache.activemq.transport.AbstractInactivityMonitor | ActiveMQ InactivityMonitor ReadCheckTimer
2015-04-19 17:05:21,162 | DEBUG | readCheck() | org.apache.activemq.transport.AbstractInactivityMonitor | ActiveMQ InactivityMonitor ReadCheckTimer
2015-04-19 17:05:31,161 | DEBUG | WriteChecker: 10000ms elapsed since last write check. | org.apache.activemq.transport.AbstractInactivityMonitor | ActiveMQ InactivityMonitor WriteCheckTimer
2015-04-19 17:05:31,161 | DEBUG | Running WriteCheck[StompSocket_1693369093] | org.apache.activemq.transport.AbstractInactivityMonitor | ActiveMQ InactivityMonitor Worker
2015-04-19 17:05:31,162 | DEBUG | 10000ms elapsed since last read check. | org.apache.activemq.transport.AbstractInactivityMonitor | ActiveMQ InactivityMonitor ReadCheckTimer
2015-04-19 17:05:31,162 | DEBUG | readCheck() | org.apache.activemq.transport.AbstractInactivityMonitor | ActiveMQ InactivityMonitor ReadCheckTimer
2015-04-19 17:05:31,163 | DEBUG | No message received since last read check for org.apache.activemq.transport.ws.jetty8.StompSocket@64eec305. Throwing InactivityIOException. | org.apache.activemq.transport.AbstractInactivityMonitor | ActiveMQ InactivityMonitor ReadCheckTimer
2015-04-19 17:05:31,164 | DEBUG | Running ReadCheck[StompSocket_1693369093] | org.apache.activemq.transport.AbstractInactivityMonitor | ActiveMQ InactivityMonitor Worker
2015-04-19 17:05:31,164 | DEBUG | onCommand() | org.apache.activemq.transport.AbstractInactivityMonitor | qtp1493158871-30, /activemq-client/src/main/java/org/apache/activemq/transport/AbstractInactivityMonitor.java, Hi Timothy,
The included patch will give the read check thread a 2nd chance (via 1 second) before exception and termination. It also designs the read check thread and write check thread to be nearly identical. I will implement other approaches should this one NOT be satisfactory. The attached patchfile.txt is for “/activemq-client/src/main/java/org/apache/activemq/transport/AbstractInactivityMonitor.java”.

I believe there is a fundamental design problem with AMQ heartbeats, because the timing of web browsers heartbeats has a cadence equal to the timing for AMQ to check heartbeats. Eventually, due to very small changes in time, the web browser heartbeat can eventually cross over AMQ checks for heartbeats. In the included example, the web browser client is sending at the rate of 10 seconds, and AMQ server is also checking at the rate of 10 seconds. Longer term testing, with a variety of websocket enabled browsers, show that the heartbeats can cross over. , Please retest 5.12-SNAPSHOT in your environment using Firefox. I want to confirm that the problem still persists in other environments under more extensive testing. Patch included above (patchfile.txt) has not failed in 5.12-SNAPSHOT for 32+ hours of testing. The websocket chat example using the current SNAPHOT will fail for me in Fedora 21/Firefox.

1) download the latest 5.12-SNAPSHOT at https://repository.apache.org/content/repositories/snapshots/org/apache/activemq/apache-activemq/5.12-SNAPSHOT/
2) bin/activemq start xbean:examples/conf/activemq-demo.xml
3) open three instances of Firefox (because it has greater time variation) to http://localhost:8161/demo/websocket/index.html and view for 20 minutes., Will look into reported disconnects when heartbeats are flowing.  , The main problem here is that the StompSocket is not providing a valid received counter value for the inactivity monitor to track continuing read progress, and a few other nits that needs fixing.  I also looks like there might be a memory leak in play also but I'm still investigating that., Added fix that ensures the inactivity monitor can properly determine heartbeat and normal STOMP traffic when performing read checks. , Timothy, I will test out your patch on May 9-11 and report back. Thank you very much for your contribution., Verified that the issue appears to be resolved with the 5.12 snapshot from May 8th. Thanks you very very much., Guten Tag, vielen Dank für Ihre Nachricht! Ich bin vom 01.05.2015 bis zum 25.05.2015 nicht im Büro. Ihre Emails werden in dieser Zeit weder gelesen noch weitergeleitet. In dringenden Fällen wenden Sie sich bitte an den alfa Support (+49 (0) 6074 / 3104 - 333). Nach meiner Rückkehr werde ich Ihre Nachricht umgehend beantworten. Mit freundlichen Grüßen Best regards Peter Pfort
, Timothy, I performed various tests and no issues to report. 30+ hours of testing with 6 concurrent web browser connections  using Firefox/Chrome., Great, thanks for reporting back.  ]