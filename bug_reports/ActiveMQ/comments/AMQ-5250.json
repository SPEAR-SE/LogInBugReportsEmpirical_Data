[A JUnit test case to demonstrate the issue is needed to understand the use case. , I understand but it's very hard to reproduce. The test case will pass normally and will only fail after activemq keeps running for several weeks., the lifecycle of a temp queue depends on the connection lifecycle. So if the connection fails over, there will be a period when the temp destination will not exist. The activemq client tracks temp existence by listening to temp advisories, maybe you want to disable that such that the broker gets to determine if the temp exists. ( ?jms.watchTopicAdvisories=false on the connection factory url.)
This would eliminate any window between the client getting an advisory and the recreation of the temp.
So check if failover is part of the problem.
, I guess it's not the specific client failing over caused the problem. Actually we have many similar clients using that pattern at the same time. When the problem happens, none of them works., What is WAITING_FOR_TEST? This is fixed in some version?, No, it means we are waiting for you to provide a unit test that can reproduce the problem.  , OK, got it. But as I stated above, I'm afraid it's very hard to provide a test case for this. Or anyone can provide any idea how to get a test case for such situation. The problem only happens after running for a very long time. 
Anyway, I'm now using 5.10 to check if the problem still exists., No test case to investigate and from the description it sounds like normal temp queue behaviour as the lifetime is linked to that of its connection so if the connection goes down the Queues go away.  , No it's definitely not normal behavior. This happened again after my activemq 5.10.0 running for about 2 months. I have written some code to test it. The main logic of the code is:
1. Create a temp queue(tempQueue) and start a producer to send a message(setJMSReplyTo(tempQueue)) to specific queue.
2. Start a comsumer to read the specific queue and send a response to the tempQueue.
3. Consume the temp queue to check the repsonse message

I put it in cron and run it every minute. It had been run two months without problem and suddenly it began to report the same error about every several minutes(yes, not every minutes, sometimes every minute, sometimes every 3 minutes, sometimes every 5 mintues, not constant).

Since I'm not able to find a way to get the test case to reproduce the issue, I want to know if there is anything I could check to trace the root cause when the problem happens again.



, Try with watch topic advisories false. The error could result from the producer connection having not yet got an advisory. Having async sync dispatch on the advisory consumer may also play into this., Thanks. I will try that.But even this works around the problem, I think it's still worth checking what caused the issue for a long running activemq., [~ruralhunter] You mention that you wrote a test that you're running via cron. Can you please share that and your broker config? Hopefully we'll bring this to a resolution. Otherwise we'd have to close it for lack of sufficient data. Thanks., No test has been provided to validate this.  From the description is sounds like standard behaviour , I believe I found a way to reproduce this error but I don't quite understand what's happening so I'll leave you guys with the code and you can tell me if you need more info:

My test consists of ServiceA sending a message and waiting for a response from ServiceB
ServiceB sends 5 response messages the 5th of which will be a Shutdown command.

I've added a 30 second sleep to induce a FailOverTransport timeout error.
The first pass through the test runs fine, throwing the timeout error, but continuing gracefully (bravo ActiveMQ)
Running the test a second time will immediately throw the JMSException seen below. 

2015-07-29 18:34:35 INFO  FailoverTransport:1030 - Successfully connected to tcp://xxx.xxx.xxx.xxx:61616
2015-07-29 18:34:35 INFO  FailoverTransport:1030 - Successfully connected to tcp://xxx.xxx.xxx.xxx:61616
2015-07-29 18:34:38 INFO  FailoverTransport:1030 - Successfully connected to tcp://xxx.xxx.xxx.xxx:61616
2015-07-29 18:34:38 INFO  FailoverTransport:1030 - Successfully connected to tcp://xxx.xxx.xxx.xxx:61616
2015-07-29 18:34:38 ERROR TempDestinationTestServiceB:83 - Error treating message
com.blackstrype.mom.MOMException: sendReplyMapMessage JMSException : Cannot publish to a deleted Destination: temp-queue://ID:titoBox-64611-1438187511326-7:1:1
	at com.blackstrype.mom.CloudMOM.sendReplyMapMessage(CloudMOM.java:556)
	at com.blackstrype.mom.test.tempdest.TempDestinationTestServiceB$SandboxListener.onMessage(TempDestinationTestServiceB.java:72)
	at org.apache.activemq.ActiveMQMessageConsumer.dispatch(ActiveMQMessageConsumer.java:1321)
	at org.apache.activemq.ActiveMQSessionExecutor.dispatch(ActiveMQSessionExecutor.java:131)
	at org.apache.activemq.ActiveMQSessionExecutor.iterate(ActiveMQSessionExecutor.java:202)
	at org.apache.activemq.thread.PooledTaskRunner.runTask(PooledTaskRunner.java:129)
	at org.apache.activemq.thread.PooledTaskRunner$1.run(PooledTaskRunner.java:47)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
	at java.lang.Thread.run(Thread.java:745)
Caused by: javax.jms.InvalidDestinationException: Cannot publish to a deleted Destination: temp-queue://ID:titoBox-64611-1438187511326-7:1:1
	at org.apache.activemq.ActiveMQSession.send(ActiveMQSession.java:1735)
	at org.apache.activemq.ActiveMQMessageProducer.send(ActiveMQMessageProducer.java:289)
	at org.apache.activemq.ActiveMQMessageProducer.send(ActiveMQMessageProducer.java:224)
	at org.apache.activemq.ActiveMQMessageProducerSupport.send(ActiveMQMessageProducerSupport.java:300)
	at com.blackstrype.mom.CloudMOM.sendReplyMapMessage(CloudMOM.java:554)
	... 9 more
2015-07-29 18:34:38 INFO  TempDestinationTestServiceA:144 - Message response received: id=0, body=Response 0 to: 'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuv'.
2015-07-29 18:35:08 INFO  TempDestinationTestServiceA:144 - Message response received: id=1, body=Response 1 to: 'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuv'.
2015-07-29 18:35:38 INFO  TempDestinationTestServiceA:144 - Message response received: id=2, body=Response 2 to: 'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuv'.
2015-07-29 18:35:45 WARN  FailoverTransport:255 - Transport (tcp://YYY.YYY.YYY.YYY:61616) failed, reason:  org.apache.activemq.transport.InactivityIOException: Channel was inactive for too (>30000) long: tcp://YYY.YYY.YYY.YYY:61616, attempting to automatically reconnect
2015-07-29 18:35:45 WARN  FailoverTransport:255 - Transport (tcp://YYY.YYY.YYY.YYY:61616) failed, reason:  org.apache.activemq.transport.InactivityIOException: Channel was inactive for too (>30000) long: tcp://YYY.YYY.YYY.YYY:61616, attempting to automatically reconnect
2015-07-29 18:35:49 INFO  FailoverTransport:1032 - Successfully reconnected to tcp://xxx.xxx.xxx.xxx:61616
2015-07-29 18:35:49 INFO  FailoverTransport:1032 - Successfully reconnected to tcp://xxx.xxx.xxx.xxx:61616
2015-07-29 18:36:08 INFO  TempDestinationTestServiceA:144 - Message response received: id=3, body=Response 3 to: 'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuv'.
2015-07-29 18:36:38 INFO  TempDestinationTestServiceA:141 - Received 5 in 120.00 seconds
2015-07-29 18:36:38 INFO  TempDestinationTestServiceA:144 - Message response received: id=4, body=SHUTDOWN
2015-07-29 18:36:38 INFO  TempDestinationTest:77 - Sent: 5, Received: 5
2015-07-29 18:36:38 INFO  TempDestinationTest:79 - Result is: 0

Amusingly, my test continues successfully because ServiceB will reconsume the message and then finish sending the 5 responses.
If I reduce the sleep to 20 seconds, there are no timeouts and the second pass runs without issues. I leave it to you guys now!]