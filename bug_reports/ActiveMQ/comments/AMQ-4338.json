[Added the patch, guess we need to figure out why these are all failing now. , This patch bumps up the timeouts from the previous patch.  I had set them to 30 seconds, but that's not enough on some slow nodes., Are you sure those timeouts are sensible, going from 30000 to 300000 seems like there must be something else going on.  , Actually, you're right, those are probably not sensible.  The problem test cases include:

testSendAndReceiveAtLeastOnce
testSendAtLeastOnceReceiveAtMostOnce
testSendAtLeastOnceReceiveExactlyOnce
testSendJMSReceiveMQTT

On my mac all test cases run in less that 3 seconds.  On Ubuntu and AIX, the cases named above sometimes run for ~120 seconds, and sometimes can run even longer, or just hang if there's no timeout.

, I did some profiling and testing today.  So far I couldn't find any real issues.  It seems that in the case of these tests the QOS setting just makes things ungodly slow due to all the back and forth acking that's going on.  I guess its possible there's something amiss in the FuseSource MQTT client library but so far I haven't found anything., We have this problem in our servers (activemq 5.8.0)... It actually behaves a little more predictably, if we try to access the service locally everything works great, if the server and client are in different machines every call to connect blocks permanently. I would think that this problem should have a priority higher than "Minor" since it makes mqtt over ssl unusable... 
We use activemq server and clients in windows and tried both mqtt+nio+ssl and mqtt+ssl without success. Using only tcp connections everything works fine., Pedro, what MQTT client are you using to connect to the Broker with?, I was testing the system with fusesource client... My code is basically this:
{code}
	MQTT mqtt = new MQTT();
	mqtt.setHost(url);
	mqtt.setUserName(user);
	mqtt.setPassword(password);

	BlockingConnection connection = mqtt.blockingConnection();
	connection.connect();
{code}
I think the problem I was having was the one described in this issue because the call hangs on "connection.connect()". The code works perfectly when run on the same machine as the server or when the url is not ssl based.



, This one looks like its fixed now with the latest MQTT client pulled into the build. , Tests seems stable now.  ]