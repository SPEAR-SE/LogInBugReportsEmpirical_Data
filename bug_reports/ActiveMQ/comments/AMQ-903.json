[Every time I ran my test app, the CPU usage staid on 100% so an artificial sleep-like delay doesn't seem to be involved., Just found out that while using the default DerbyDB db, the behaviour doesn't happen. Here are some numbers I got at consecutive tests with such a configuration:

ActiveMQ/DerbyDb
msg/second: 258.3833333333333
msg/second: 293.15
msg/second: 296.78333333333336
msg/second: 273.0833333333333
msg/second: 275.1333333333333

with the same test application.
, It seems that by specifying jms.useAsyncSend=true in the connection url, the throughput stays more or less constant even with a postgresql backend, and a single producer thread is enough to get the maximum performance., Looks resolved in current release]