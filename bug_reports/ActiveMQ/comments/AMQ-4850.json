[Hello Amichai

I have done several iterations of your scenario without success (I mean without {{NoClassDefFoundError}} :)). Tell me:
* what are your dependencies ({{Import-Package}} or {{Require-Bundle}})?
* does your {{common}} or {{bus}} bundle import ({{Import-Package}}) {{javax.net.ssl}} package?
* what is your ActiveMQ connection URL (I've tested {{failover:(vm://localhost)}}).
* (_optional_) how did you manage to install {{activemq-broker}} feature without patching {{KARAF/system/org/ops4j/pax/url/pax-url-mvn/1.3.6/pax-url-mvn-1.3.6.jar}} (see: https://ops4j1.jira.com/browse/BASE-48)

regards
Grzegorz Grzybek, The imports/exports are below. Nothing imports or uses javax.net.ssl directly (the string "javax.net" doesn't appear anywhere in the project, actually), that's only in the ActiveMQ bundle.

The url is "failover://(tcp://localhost:61616)?startupMaxReconnectAttempts=10", though iirc it's the same error with only "tcp://localhost:61616" (in 5.8.0 the exception was masked when using failover url and could only be seen with a debug breakpoint in the ActiveMQ code, and only when using the tcp url directly was this exception printed to the logs. In 5.9.0 it is no longer being swallowed so the full exception is logged with either url).

I don't know about that pax url bug - I just install the feature and it works. Maybe, as the related bug (KARAF-2536) suggests, I already had the library in the local maven repo, or maybe it's because I'm creating an offline custom karaf distribution and the maven plugin manages to get the problematic library at build time and it would only fail if karaf tried fetching it at runtime.


The imports/exports (copied form manifests and manually edited to be more readable here):

common bundle:
{quote}
Import-Package:
 javax.xml.bind.annotation,org.osgi.framework;version="[1.6,2)",
 org.osgi.service.blueprint.container;version="[1.0,2)",
 org.slf4j;version="[1.7,2)"
Export-Package:
 com.myproject.common.core;version="0.1.0.SNAPSHOT";uses:="javax.xml.bind.annotation",
 com.myproject.common.framework;version="0.1.0.SNAPSHOT";uses:="com.myproject.common.util,org.osgi.framework",
 com.myproject.common.util;version="0.1.0.SNAPSHOT"
{quote}

bus bundle:
{quote}
Import-Package:
 com.myproject.bus.api;version="[0.1,1)",
 com.myproject.common.core;version="[0.1,1)",
 com.myproject.common.framework;version="[0.1,1)",
 com.myproject.common.util;version="[0.1,1)",
 com.myproject.messaging.api;version="[0.1,1)",
 com.myproject.messaging.jms;version="[0.1,1)",
 javax.jms;version="[1.1,2)",
 org.apache.activemq,org.osgi.service.blueprint;version="[1.0.0,2.0.0)",
 org.slf4j;version="[1.7,2)"
Export-Package:
 com.myproject.bus.api;version="0.1.0.SNAPSHOT";uses:="com.myproject.common.core"
{quote}

messaging bundle:
{quote}
Import-Package:
 com.myproject.common.core;version="[0.1,1)",
 com.myproject.common.util;version="[0.1,1)",
 javax.jms;version="[1.1,2)",
 org.slf4j;version="[1.7,2)"
Export-Package:
 com.myproject.messaging.api;version="0.1.0.SNAPSHOT";uses:="com.myproject.common.core",
 com.myproject.messaging.jms;version="0.1.0.SNAPSHOT";uses:="com.myproject.common.core,javax.jms"
{quote}
, Still no {{NoClassDefFoundError}}.
Try adding:
{noformat}
felix.log.level=4
{noformat}
at the bottom of {{KARAF/etc/system.properties}} - there should be nice result of {{org.apache.felix.framework.BundleWiringImpl.diagnoseClassLoadError()}} invocation., I added the log level config, and everything looks the same. I did notice that the first time the exception is printed there is an additional 'caused by' trace, though this may have been there before the log change (subsequent stack traces don't show it). Is there anything in particular I should be looking for?

java.lang.NoClassDefFoundError: javax/net/ssl/SSLServerSocket
        at org.apache.activemq.util.IntrospectionSupport.setProperty(IntrospectionSupport.java:163)
        at org.apache.activemq.util.IntrospectionSupport.setProperties(IntrospectionSupport.java:151)
        at org.apache.activemq.transport.failover.FailoverTransportFactory.createTransport(FailoverTransportFactory.java:74)
        at org.apache.activemq.transport.failover.FailoverTransportFactory.createTransport(FailoverTransportFactory.java:63)
        at org.apache.activemq.transport.failover.FailoverTransportFactory.doConnect(FailoverTransportFactory.java:38)
        at org.apache.activemq.transport.TransportFactory.connect(TransportFactory.java:64)
        at org.apache.activemq.ActiveMQConnectionFactory.createTransport(ActiveMQConnectionFactory.java:258)
        at org.apache.activemq.ActiveMQConnectionFactory.createActiveMQConnection(ActiveMQConnectionFactory.java:273)
        at org.apache.activemq.ActiveMQConnectionFactory.createActiveMQConnection(ActiveMQConnectionFactory.java:246)
        at org.apache.activemq.ActiveMQConnectionFactory.createConnection(ActiveMQConnectionFactory.java:186)
        at com.myproject.bus.activemq.ActiveMQSession.createConnection(ActiveMQSession.java:33)
        at com.myproject.messaging.jms.Session.open(Session.java:71)[239:com.myproject.messaging:0.1.0.SNAPSHOT]
        at com.myproject.messaging.jms.Session$1.run(Session.java:109)[239:com.myproject.messaging:0.1.0.SNAPSHOT]
        at java.lang.Thread.run(Thread.java:744)[:1.7.0_45]
Caused by: java.lang.ClassNotFoundException: javax.net.ssl.SSLServerSocket
        at org.eclipse.osgi.internal.loader.BundleLoader.findClassInternal(BundleLoader.java:501)[osgi-3.8.0.v20120529-1548.jar:]
        at org.eclipse.osgi.internal.loader.BundleLoader.findClass(BundleLoader.java:421)[osgi-3.8.0.v20120529-1548.jar:]
        at org.eclipse.osgi.internal.loader.BundleLoader.findClass(BundleLoader.java:412)[osgi-3.8.0.v20120529-1548.jar:]
        at org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader.loadClass(DefaultClassLoader.java:107)[osgi-3.8.0.v20120529-1548
.jar:]
        at java.lang.ClassLoader.loadClass(ClassLoader.java:358)[:1.7.0_45]
        ... 14 more, The stack trace is different than mine, because I've tested creating connection in the Bundle-Activator thread and {{javax.net.ssl.SSLServerSocket}} is correctly loaded by {{org.apache.felix.framework.ExtensionManager.ExtensionManagerWiring.getClassByDelegation(String)}} related to system bundle. Eventually this class is loaded using {{sun.misc.Launcher$AppClassLoader}}.

What you have is an attempt to connect to AMQ from custom thread, so my questions are:
* how do you create the thread?
* is this thread properly managed between bundle restarts?
* have you set thread's context class loader?
* where do you start the thread? (inside BundleActivator or in some bundle/service listener?)
* what bundle starts the thread (bus? messaging?), The same situation (no NCDFE) with the {{new Thread().start()}} case... So could you share your thread-related code?, And something else is different from my default configuration. In your case there's {{org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader}} involved - for me it is {{org.apache.felix.framework.BundleWiringImpl.BundleClassLoaderJava5}}. {{DefaultClassLoader}} seem to be used in special circumstances.., I'm running with Equinox rather than Felix as the OSGi engine in Karaf, which might explain the different classloaders, and maybe the issue only happens with one and not the other. I'm using Equinox since I've hit some other unrelated issues using Felix, and in any case ActiveMQ should work with both.

As for the threading:
- The messaging bundle has an abstract Session class that does a simple new Thread(...) in it's init() method.
- The thread's ContextClassLoader is not modified.
- It has a corresponding destroy() method which interrupts and joins the thread, so I believe it is properly closed across bundle restarts.
- The whole Session implementation (and messaging bundle) uses clean JMS APIs, nothing AMQ-specific.
- The bus bundle has an ActiveMQSession subclass of Session.
- The ActiveMQSession is created in a blueprint configuration, which binds init-method to init() and destroy-method to destroy(). So that's basically the root of the thread's lifecycle.
- The subclass only overrides a createConnection() method for creating an AMQ-specific connection using ActiveMQConnectionFactory. It doesn't change or add anything else on top of Session.
- There is another bundle which similarly subclasses Session for creating Websphere MQ connections. It works properly, and is not running during these AMQ tests (I'm only mentioning it to explain the design which supports multiple MQ/JMS implementations via subclassing of Session in different bundles, and to show that it works ok with other provider implementations).

I hope I answered all the questions :-)

Thanks for taking the time to look into this!
, One more thing. Add these lines at the bottom of {{KARAF/etc/system.properties}}:
{noformat}
osgi.debug=etc/system.properties
org.eclipse.osgi/debug/loader=true
{noformat}

and run karaf with redirection to file (it will be HUGE), I got:
{noformat}
BundleClassLoader[org.apache.activemq.activemq-osgi_5.9.0].loadClass(javax.net.ssl.SSLServerSocket)
BundleLoader[org.apache.activemq.activemq-osgi_5.9.0].loadBundleClass(javax.net.ssl.SSLServerSocket)
{noformat}, Ok, got some interesting output. It looks like activemq-osgi finds the class properly:
{quote}
{noformat}
BundleClassLoader[org.apache.activemq.activemq-osgi_5.9.0].loadClass(javax.net.ssl.SSLServerSocket)
BundleLoader[org.apache.activemq.activemq-osgi_5.9.0].loadBundleClass(javax.net.ssl.SSLServerSocket)
{noformat}
{quote}
but a little further down the activemq-web-console bundle fails to find it. So now there are two issues - why if fails to load the class, and why this causes the broker itself not to run rather than only the web console.
{quote}
{noformat}
BundleClassLoader[org.apache.activemq.activemq-web-console_5.9.0].loadClass(javax.net.ssl.SSLServerSocket)
BundleLoader[org.apache.activemq.activemq-web-console_5.9.0].loadBundleClass(javax.net.ssl.SSLServerSocket)
BundleLoader[org.apache.activemq.activemq-web-console_5.9.0].findLocalClass(javax.net.ssl.SSLServerSocket)
BundleClassLoader[/home/amichai/apps/itrade/apache-karaf-2.3.3/data/cache/org.eclipse.osgi/bundles/223/1/bundlefile].findClassImpl(javax.net.ssl.SSLServerSocket)
BundleClassLoader[/home/amichai/apps/itrade/apache-karaf-2.3.3/data/cache/org.eclipse.osgi/bundles/223/1/bundlefile].findClassImpl(javax.net.ssl.SSLServerSocket)
BundleClassLoader[/home/amichai/apps/itrade/apache-karaf-2.3.3/data/cache/org.eclipse.osgi/bundles/223/1/.cp/WEB-INF/lib/geronimo-jms_1.1_spec-1.1.1.jar].findClassImpl(javax.net.ssl.SSLServerSocket)
BundleClassLoader[/home/amichai/apps/itrade/apache-karaf-2.3.3/data/cache/org.eclipse.osgi/bundles/223/1/.cp/WEB-INF/lib/geronimo-jta_1.0.1B_spec-1.0.1.jar].findClassImpl(javax.net.ssl.SSLServerSocket)
BundleClassLoader[/home/amichai/apps/itrade/apache-karaf-2.3.3/data/cache/org.eclipse.osgi/bundles/223/1/.cp/WEB-INF/lib/geronimo-j2ee-management_1.1_spec-1.0.1.jar].findClassImpl(javax.net.ssl.SSLServerSocket)
BundleClassLoader[/home/amichai/apps/itrade/apache-karaf-2.3.3/data/cache/org.eclipse.osgi/bundles/223/1/.cp/WEB-INF/lib/geronimo-jacc_1.1_spec-1.0.1.jar].findClassImpl(javax.net.ssl.SSLServerSocket)
BundleClassLoader[/home/amichai/apps/itrade/apache-karaf-2.3.3/data/cache/org.eclipse.osgi/bundles/223/1/.cp/WEB-INF/lib/activemq-web-5.9.0.jar].findClassImpl(javax.net.ssl.SSLServerSocket)
BundleClassLoader[/home/amichai/apps/itrade/apache-karaf-2.3.3/data/cache/org.eclipse.osgi/bundles/223/1/.cp/WEB-INF/lib/activemq-pool-5.9.0.jar].findClassImpl(javax.net.ssl.SSLServerSocket)
BundleClassLoader[/home/amichai/apps/itrade/apache-karaf-2.3.3/data/cache/org.eclipse.osgi/bundles/223/1/.cp/WEB-INF/lib/activemq-jms-pool-5.9.0.jar].findClassImpl(javax.net.ssl.SSLServerSocket)
BundleClassLoader[/home/amichai/apps/itrade/apache-karaf-2.3.3/data/cache/org.eclipse.osgi/bundles/223/1/.cp/WEB-INF/lib/activemq-client-5.9.0.jar].findClassImpl(javax.net.ssl.SSLServerSocket)
BundleClassLoader[/home/amichai/apps/itrade/apache-karaf-2.3.3/data/cache/org.eclipse.osgi/bundles/223/1/.cp/WEB-INF/lib/rome-1.0.jar].findClassImpl(javax.net.ssl.SSLServerSocket)
BundleClassLoader[/home/amichai/apps/itrade/apache-karaf-2.3.3/data/cache/org.eclipse.osgi/bundles/223/1/.cp/WEB-INF/lib/jdom-1.0.jar].findClassImpl(javax.net.ssl.SSLServerSocket)
BundleClassLoader[/home/amichai/apps/itrade/apache-karaf-2.3.3/data/cache/org.eclipse.osgi/bundles/223/1/.cp/WEB-INF/lib/spring-webmvc-3.2.4.RELEASE.jar].findClassImpl(javax.net.ssl.SSLServerSocket)
BundleClassLoader[/home/amichai/apps/itrade/apache-karaf-2.3.3/data/cache/org.eclipse.osgi/bundles/223/1/.cp/WEB-INF/lib/spring-beans-3.2.4.RELEASE.jar].findClassImpl(javax.net.ssl.SSLServerSocket)
BundleClassLoader[/home/amichai/apps/itrade/apache-karaf-2.3.3/data/cache/org.eclipse.osgi/bundles/223/1/.cp/WEB-INF/lib/spring-context-3.2.4.RELEASE.jar].findClassImpl(javax.net.ssl.SSLServerSocket)
BundleClassLoader[/home/amichai/apps/itrade/apache-karaf-2.3.3/data/cache/org.eclipse.osgi/bundles/223/1/.cp/WEB-INF/lib/spring-core-3.2.4.RELEASE.jar].findClassImpl(javax.net.ssl.SSLServerSocket)
BundleClassLoader[/home/amichai/apps/itrade/apache-karaf-2.3.3/data/cache/org.eclipse.osgi/bundles/223/1/.cp/WEB-INF/lib/spring-expression-3.2.4.RELEASE.jar].findClassImpl(javax.net.ssl.SSLServerSocket)
BundleClassLoader[/home/amichai/apps/itrade/apache-karaf-2.3.3/data/cache/org.eclipse.osgi/bundles/223/1/.cp/WEB-INF/lib/spring-web-3.2.4.RELEASE.jar].findClassImpl(javax.net.ssl.SSLServerSocket)
BundleClassLoader[/home/amichai/apps/itrade/apache-karaf-2.3.3/data/cache/org.eclipse.osgi/bundles/223/1/.cp/WEB-INF/lib/aopalliance-1.0.jar].findClassImpl(javax.net.ssl.SSLServerSocket)
BundleClassLoader[/home/amichai/apps/itrade/apache-karaf-2.3.3/data/cache/org.eclipse.osgi/bundles/223/1/.cp/WEB-INF/lib/spring-aop-3.2.4.RELEASE.jar].findClassImpl(javax.net.ssl.SSLServerSocket)
BundleClassLoader[/home/amichai/apps/itrade/apache-karaf-2.3.3/data/cache/org.eclipse.osgi/bundles/223/1/.cp/WEB-INF/lib/activemq-console-5.9.0.jar].findClassImpl(javax.net.ssl.SSLServerSocket)
BundleClassLoader[/home/amichai/apps/itrade/apache-karaf-2.3.3/data/cache/org.eclipse.osgi/bundles/223/1/.cp/WEB-INF/lib/activemq-kahadb-store-5.9.0.jar].findClassImpl(javax.net.ssl.SSLServerSocket)
BundleClassLoader[/home/amichai/apps/itrade/apache-karaf-2.3.3/data/cache/org.eclipse.osgi/bundles/223/1/.cp/WEB-INF/lib/activemq-broker-5.9.0.jar].findClassImpl(javax.net.ssl.SSLServerSocket)
BundleClassLoader[/home/amichai/apps/itrade/apache-karaf-2.3.3/data/cache/org.eclipse.osgi/bundles/223/1/.cp/WEB-INF/lib/activemq-openwire-legacy-5.9.0.jar].findClassImpl(javax.net.ssl.SSLServerSocket)
BundleClassLoader[/home/amichai/apps/itrade/apache-karaf-2.3.3/data/cache/org.eclipse.osgi/bundles/223/1/.cp/WEB-INF/lib/activemq-protobuf-1.1.jar].findClassImpl(javax.net.ssl.SSLServerSocket)
BundleClassLoader[/home/amichai/apps/itrade/apache-karaf-2.3.3/data/cache/org.eclipse.osgi/bundles/223/1/.cp/WEB-INF/lib/commons-net-3.3.jar].findClassImpl(javax.net.ssl.SSLServerSocket)
BundleClassLoader[/home/amichai/apps/itrade/apache-karaf-2.3.3/data/cache/org.eclipse.osgi/bundles/223/1/.cp/WEB-INF/lib/activeio-core-3.1.4.jar].findClassImpl(javax.net.ssl.SSLServerSocket)
BundleClassLoader[/home/amichai/apps/itrade/apache-karaf-2.3.3/data/cache/org.eclipse.osgi/bundles/223/1/.cp/WEB-INF/lib/commons-pool-1.6.jar].findClassImpl(javax.net.ssl.SSLServerSocket)
BundleClassLoader[/home/amichai/apps/itrade/apache-karaf-2.3.3/data/cache/org.eclipse.osgi/bundles/223/1/.cp/WEB-INF/lib/hawtbuf-proto-1.9.jar].findClassImpl(javax.net.ssl.SSLServerSocket)
BundleClassLoader[/home/amichai/apps/itrade/apache-karaf-2.3.3/data/cache/org.eclipse.osgi/bundles/223/1/.cp/WEB-INF/lib/hawtbuf-1.9.jar].findClassImpl(javax.net.ssl.SSLServerSocket)
BundleClassLoader[/home/amichai/apps/itrade/apache-karaf-2.3.3/data/cache/org.eclipse.osgi/bundles/223/1/.cp/WEB-INF/lib/jackson-core-asl-1.9.12.jar].findClassImpl(javax.net.ssl.SSLServerSocket)
BundleClassLoader[/home/amichai/apps/itrade/apache-karaf-2.3.3/data/cache/org.eclipse.osgi/bundles/223/1/.cp/WEB-INF/lib/jackson-mapper-asl-1.9.12.jar].findClassImpl(javax.net.ssl.SSLServerSocket)
BundleClassLoader[/home/amichai/apps/itrade/apache-karaf-2.3.3/data/cache/org.eclipse.osgi/bundles/223/1/.cp/WEB-INF/lib/velocity-1.7.jar].findClassImpl(javax.net.ssl.SSLServerSocket)
BundleClassLoader[/home/amichai/apps/itrade/apache-karaf-2.3.3/data/cache/org.eclipse.osgi/bundles/223/1/.cp/WEB-INF/lib/commons-collections-3.2.1.jar].findClassImpl(javax.net.ssl.SSLServerSocket)
BundleClassLoader[/home/amichai/apps/itrade/apache-karaf-2.3.3/data/cache/org.eclipse.osgi/bundles/223/1/.cp/WEB-INF/lib/commons-lang-2.6.jar].findClassImpl(javax.net.ssl.SSLServerSocket)
BundleClassLoader[/home/amichai/apps/itrade/apache-karaf-2.3.3/data/cache/org.eclipse.osgi/bundles/223/1/.cp/WEB-INF/lib/org.apache.servicemix.bundles.josql-1.5_5.jar].findClassImpl(javax.net.ssl.SSLServerSocket)
BundleClassLoader[/home/amichai/apps/itrade/apache-karaf-2.3.3/data/cache/org.eclipse.osgi/bundles/223/1/.cp/WEB-INF/lib/jasypt-1.9.1.jar].findClassImpl(javax.net.ssl.SSLServerSocket)
BundleClassLoader[/home/amichai/apps/itrade/apache-karaf-2.3.3/data/cache/org.eclipse.osgi/bundles/223/1/.cp/WEB-INF/lib/commons-daemon-1.0.15.jar].findClassImpl(javax.net.ssl.SSLServerSocket)
BundleClassLoader[/home/amichai/apps/itrade/apache-karaf-2.3.3/data/cache/org.eclipse.osgi/bundles/223/1/.cp/WEB-INF/lib/activemq-all-5.9.0.jar].findClassImpl(javax.net.ssl.SSLServerSocket)
BundleClassLoader[/home/amichai/apps/itrade/apache-karaf-2.3.3/data/cache/org.eclipse.osgi/bundles/223/1/.cp/WEB-INF/lib/xbean-spring-3.14.jar].findClassImpl(javax.net.ssl.SSLServerSocket)
BundleClassLoader[/home/amichai/apps/itrade/apache-karaf-2.3.3/data/cache/org.eclipse.osgi/bundles/223/1/.cp/WEB-INF/lib/commons-logging-1.1.3.jar].findClassImpl(javax.net.ssl.SSLServerSocket)
BundleClassLoader[/home/amichai/apps/itrade/apache-karaf-2.3.3/data/cache/org.eclipse.osgi/bundles/223/1/.cp/WEB-INF/lib/core-3.1.1.jar].findClassImpl(javax.net.ssl.SSLServerSocket)
BundleClassLoader[/home/amichai/apps/itrade/apache-karaf-2.3.3/data/cache/org.eclipse.osgi/bundles/223/1/.cp/WEB-INF/lib/slf4j-api-1.7.5.jar].findClassImpl(javax.net.ssl.SSLServerSocket)
BundleClassLoader[/home/amichai/apps/itrade/apache-karaf-2.3.3/data/cache/org.eclipse.osgi/bundles/223/1/.cp/WEB-INF/lib/slf4j-log4j12-1.7.5.jar].findClassImpl(javax.net.ssl.SSLServerSocket)
BundleClassLoader[/home/amichai/apps/itrade/apache-karaf-2.3.3/data/cache/org.eclipse.osgi/bundles/223/1/.cp/WEB-INF/lib/log4j-1.2.17.jar].findClassImpl(javax.net.ssl.SSLServerSocket)
BundleClassLoader[/home/amichai/apps/itrade/apache-karaf-2.3.3/data/cache/org.eclipse.osgi/bundles/223/1/.cp/WEB-INF/lib/sitemesh-2.4.2.jar].findClassImpl(javax.net.ssl.SSLServerSocket)
BundleClassLoader[/home/amichai/apps/itrade/apache-karaf-2.3.3/data/cache/org.eclipse.osgi/bundles/223/1/.cp/WEB-INF/lib/jstl-1.1.2.jar].findClassImpl(javax.net.ssl.SSLServerSocket)
BundleClassLoader[/home/amichai/apps/itrade/apache-karaf-2.3.3/data/cache/org.eclipse.osgi/bundles/223/1/.cp/WEB-INF/lib/standard-1.1.2.jar].findClassImpl(javax.net.ssl.SSLServerSocket)
BundleClassLoader[/home/amichai/apps/itrade/apache-karaf-2.3.3/data/cache/org.eclipse.osgi/bundles/223/1/.cp/WEB-INF/lib/xpp3-1.1.4c.jar].findClassImpl(javax.net.ssl.SSLServerSocket)
BundleClassLoader[/home/amichai/apps/itrade/apache-karaf-2.3.3/data/cache/org.eclipse.osgi/bundles/223/1/.cp/WEB-INF/lib/xstream-1.4.4.jar].findClassImpl(javax.net.ssl.SSLServerSocket)
BundleClassLoader[/home/amichai/apps/itrade/apache-karaf-2.3.3/data/cache/org.eclipse.osgi/bundles/223/1/.cp/WEB-INF/lib/xmlpull-1.1.3.1.jar].findClassImpl(javax.net.ssl.SSLServerSocket)
BundleClassLoader[/home/amichai/apps/itrade/apache-karaf-2.3.3/data/cache/org.eclipse.osgi/bundles/223/1/.cp/WEB-INF/lib/xpp3_min-1.1.4c.jar].findClassImpl(javax.net.ssl.SSLServerSocket)
BundleClassLoader[org.apache.activemq.activemq-web-console_5.9.0].loadClass(javax.net.ssl.SSLServerSocket) failed.
java.lang.ClassNotFoundException: javax.net.ssl.SSLServerSocket
	at org.eclipse.osgi.internal.loader.BundleLoader.findClassInternal(BundleLoader.java:501)
	at org.eclipse.osgi.internal.loader.BundleLoader.findClass(BundleLoader.java:421)
	at org.eclipse.osgi.internal.loader.BundleLoader.findClass(BundleLoader.java:412)
	at org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader.loadClass(DefaultClassLoader.java:107)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:358)
	at org.apache.activemq.util.IntrospectionSupport.setProperty(IntrospectionSupport.java:163)
	at org.apache.activemq.util.IntrospectionSupport.setProperties(IntrospectionSupport.java:151)
	at org.apache.activemq.transport.failover.FailoverTransportFactory.createTransport(FailoverTransportFactory.java:74)
	at org.apache.activemq.transport.failover.FailoverTransportFactory.createTransport(FailoverTransportFactory.java:63)
	at org.apache.activemq.transport.failover.FailoverTransportFactory.doConnect(FailoverTransportFactory.java:38)
	at org.apache.activemq.transport.TransportFactory.connect(TransportFactory.java:64)
	at org.apache.activemq.ActiveMQConnectionFactory.createTransport(ActiveMQConnectionFactory.java:258)
	at org.apache.activemq.ActiveMQConnectionFactory.createActiveMQConnection(ActiveMQConnectionFactory.java:273)
	at org.apache.activemq.ActiveMQConnectionFactory.createActiveMQConnection(ActiveMQConnectionFactory.java:246)
	at org.apache.activemq.ActiveMQConnectionFactory.createConnection(ActiveMQConnectionFactory.java:186)
	at com.myproject.bus.activemq.ActiveMQSession.createConnection(ActiveMQSession.java:33)
	at com.myproject.messaging.jms.Session.open(Session.java:71)
	at com.myproject.messaging.jms.Session$1.run(Session.java:109)
	at java.lang.Thread.run(Thread.java:744)
{noformat}
{quote}
, I'd have hard work trying to mimic your configuration - your bundle 223 seem to be my bundle 120 which is the bundle with symbolic name {{org.apache.activemq.activemq-web-console}}.

From the latest debug you've send I can see what I've confirmed with simple test - I've uninstalled bundle {{activemq-osgi}} so all imports from my app's bundles to activemq were resolved against imports from {{org.apache.activemq.activemq-web-console}}. This bundle have nested dependencies which are exported to the system.

And after restart, I got nice and beautiful:
{noformat}
Exception in thread "Thread-38" java.lang.NoClassDefFoundError: javax/net/ssl/SSLServerSocket
        at org.apache.activemq.util.IntrospectionSupport.setProperty(IntrospectionSupport.java:163)
        at org.apache.activemq.util.IntrospectionSupport.setProperties(IntrospectionSupport.java:151)
{noformat}

:)

I don't know why you're bundle seem to be resolved against web console bundle instead of proper activemq bundle. The web console's {{WEB-INF/lib}} dependencies are *not* OSGi bundles! So even if web console exports these dependencies' packages, the web console's bundle does "not" import {{javax.net.ssl}} (only {{javax.net}}) - and it's hardcoded in https://github.com/apache/activemq/blob/activemq-5.9.0/activemq-web-console/pom.xml#L142.

Check your bundles (use e.g., {{packages:exports}} gogo command). You can also add this code before connecting to ActiveMQ:
{code:java}
List<BundleWire> list = FrameworkUtil.getBundle(this.getClass()).adapt(BundleWiring.class).getRequiredWires(null);
for (BundleWire bw: list) {
   System.out.println(bw.getRequirement() + " -> " + bw.getProvider());
}
{code}

I got (after uninstalling {{activemq-osgi}}):
{noformat}
...
osgi.wiring.package; resolution:="mandatory"; filter:="(&(osgi.wiring.package=org.apache.activemq))" -> org.apache.activemq.activemq-web-console_5.9.0
...
{noformat}
and this wiring leads straight to NCDFE (because web console doesn't import {{javax.net.ssl}}

So your problem seem to be related with single thing - your bundle has been wired to {{org.apache.activemq.activemq-web-console_5.9.0}} instead of {{activemq-osgi}}...

regards
Grzegorz Grzybek, I really appreciate you taking the time to try and resolve this issue, Grzegorz :-)

So what would you say the core issue is? The activemq-web-console bundle exporting activemq packages that it shouldn't be exporting?
, Theoretically your {{Import-Package}} for {{org.apache.activemq}} should be satisfied by *any* relevant {{Export-Package}} - I don't know why Equinox chooses the export from the console and not the {{activemq-osgi}} - the spec says it chooses the export from the _first resolved bundle_ - what are the bundle ids of {{org.apache.activemq.activemq-web-console}} and {{activemq-osgi}}? (check {{osgi:list}}).
What you said that after the problem occurs, it exists after the restarts - it exists, because Equinox caches the state of resolution (and bundle wiring through Import-Export connections).

I think that cutting of all the exports from {{activemq-web-console}} should resolve the problem - also uninstallng the console. But I'm only a humble open source enthusiast and cannot decide what this bundle exports...

try stopping the {{activemq-web-console}} bundle (you have id=223):
{noformat}
osgi:stop 223
osgi:update 223
{noformat}
first command changes its state to {{resolved}}, second - to {{installed}}. Then try restarting your bundles.

I think that eventually web console should *not* export its internal JARs' packages...

regards
Grzegorz Grzybek, I tried it out - stopping and updating the web console bundle does fix the issue (until the next app bundle deploy, that is), but only after a Karaf restart. It seems that during runtime the existing wirings remain intact even when the bundle is in Installed state. To see this, I used the dev:show-tree command (on my bus bundle) before stopping the web console bundle:
{quote}
{noformat}
+- org.apache.activemq.activemq-web-console [223]
|  +- org.apache.geronimo.specs.geronimo-servlet_2.5_spec [78]
|  +- org.ops4j.pax.logging.pax-logging-api [4]
|  +- org.ops4j.pax.web.pax-web-jsp [219]
|  |  +- org.ops4j.pax.logging.pax-logging-api [4]
|  |  +- org.apache.geronimo.specs.geronimo-servlet_2.5_spec [78]
|  +- org.apache.felix.configadmin [5]
|  +- org.eclipse.jetty.continuation [85]
|     +- org.apache.geronimo.specs.geronimo-servlet_2.5_spec [78]
|     +- org.mortbay.jetty.util [157]
|        +- org.ops4j.pax.logging.pax-logging-api [4]
|        +- org.apache.geronimo.specs.geronimo-servlet_2.5_spec [78]
...
{noformat}
{quote}
and after osgi:stop and osgi:update (in Intalled state):
{quote}
{noformat}
+- org.apache.activemq.activemq-web-console [223]
...
{noformat}
{quote}
i.e. the bundle itself is still there, even though the entire subtree under it is gone (I don't know what that means).
Just for completeness, after the Karaf restart (the web console bundle now shows up back as Resolved) it is indeed wired properly to the activemq-osgi bundle instead:
{quote}
{noformat}
+- org.apache.activemq.activemq-osgi [200]
...
{noformat}
{quote}

So now there are a few open questions:
- Is this the correct behavior when stopping a bundle, or a bug in Equinox/Karaf? (I was expecting the console bundle to no longer be used, and a new wiring to activemq-osgi to happen at runtime when the console bundle was stopped without requiring a restart, but my assumption may be wrong.)
- Why was it wiring to the web console bundle (223) rather than activemq-osgi (200) in the first place? Is this just a race condition during startup? Do the bundle ids have anything to do with it?
- I too think the original problem is with the web console bundle export configuration. It should probably only be exporting the packages under org.apache.activemq.web*, if at all. Btw the org.apache.activemq.web.config package seems to be split between this bundle and one of the embedded jars in WEB-INF/lib, which is probably not so good for osgi either. Can a developer familiar with the activemq-web-console bundle confirm which exports are really needed there?
, It's fixed in ActiveMQ 5.10.0 and 5.9.2-SNAPSHOT.]