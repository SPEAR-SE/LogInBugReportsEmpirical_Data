[and:

javax.jms.JMSException: java.io.InterruptedIOException
	at org.apache.activemq.util.JMSExceptionSupport.create(JMSExceptionSupport.java:62)
	at org.apache.activemq.ActiveMQConnection.syncSendPacket(ActiveMQConnection.java:1183)
	at org.apache.activemq.ActiveMQConnection.ensureConnectionInfoSent(ActiveMQConnection.java:1262)
	at org.apache.activemq.ActiveMQConnection.start(ActiveMQConnection.java:453)
	at com.company_name.messaging.MessageManager.createConnection(MessageManager.java:101)
	at com.company_name.messaging.MessageManager.rebuildConnection(MessageManager.java:123)
	at com.company_name.messaging.MessageManager.onException(MessageManager.java:146)
	at org.apache.activemq.ActiveMQConnection$3.run(ActiveMQConnection.java:1648)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:650)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:675)
	at java.lang.Thread.run(Thread.java:595)
Caused by: java.io.InterruptedIOException
	at org.apache.activemq.transport.WireFormatNegotiator.oneway(WireFormatNegotiator.java:89)
	at org.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:40)
	at org.apache.activemq.transport.ResponseCorrelator.asyncRequest(ResponseCorrelator.java:70)
	at org.apache.activemq.transport.ResponseCorrelator.request(ResponseCorrelator.java:75)
	at org.apache.activemq.ActiveMQConnection.syncSendPacket(ActiveMQConnection.java:1172)
	... 9 more, I have the same exception metioned above. I've invested some time to trace the
cause because I haven't found a solution to this problem. I'm attaching a very
small patch for the InactivityMonitor which solves the problem for me
completly, but I don't know if this is the right way to solve it.

Some explaination to the patch:

The InactivityMonitor schedules two tasks. One is called every t ms and checks
if a message has been received since the last call. If this is not the
case an InactivityException is thrown.

The second task is called every t/2 ms and checks if a message was sent since
the last call. If this wasn't the case it sends a KeepAliveInfo AND sets the
send-flag which in turn prevents the next call from the sending this message
again.

When no application messages are sent or received a KeepAliveInfo is sent every
t ms. But the receiver also expects to receive a message every t ms . Now it is
a sole matter of timing until the KeepAliveInfo is sent some ms too late for
the receiver and the connection is closed by mistake.

{noformat}
Index: activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java
===================================================================
--- activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java    (Revision 633376)
+++ activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java    (Arbeitskopie)
@@ -157,7 +157,9 @@
                 next.oneway(o);
             }
         } finally {
-            commandSent.set(true);
+            if (o.getClass() != KeepAliveInfo.class) {
+                commandSent.set(true);
+            }
             inSend.set(false);
         }
     }
{noformat}, The EOFException is described in AMQ-1538. Not sure what the process is for linking issues here (info welcome), so I'm just adding this comment. , FYI, the patch looks good for testing with the tcp: connector, but it breaks our code's use of the http: connector., Fixed by SVN revision 638942]