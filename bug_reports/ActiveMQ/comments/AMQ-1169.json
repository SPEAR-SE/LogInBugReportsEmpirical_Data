[this is most likely result of having different version of amq jars on the client and server sides, I'm experiencing the same problem on the client side. 

Exception in thread "ActiveMQ Transport: tcp://localhost/127.0.0.1:61616" java.lang.ClassCastException: org.apache.activemq.command.BrokerId
	at org.apache.activemq.openwire.v2.MessageMarshaller.looseUnmarshal(MessageMarshaller.java:193)
	at org.apache.activemq.openwire.v2.ActiveMQMessageMarshaller.looseUnmarshal(ActiveMQMessageMarshaller.java:101)
	at org.apache.activemq.openwire.v2.ActiveMQStreamMessageMarshaller.looseUnmarshal(ActiveMQStreamMessageMarshaller.java:101)
	at org.apache.activemq.openwire.OpenWireFormat.doUnmarshal(OpenWireFormat.java:349)
	at org.apache.activemq.openwire.OpenWireFormat.unmarshal(OpenWireFormat.java:273)
	at org.apache.activemq.transport.tcp.TcpTransport.readCommand(TcpTransport.java:156)
	at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:136)
	at java.lang.Thread.run(Thread.java:595)

I think this problem is caused by using backport-util-concurrent 3.0 on the client side.
That's mentioned here:
https://issues.apache.org/jira/browse/GERONIMO-2995

Could AMQ client be made backport-util-concurrent 3.0 compatible?

I'm using ActiveMQ 4.1.1 . On the client side there's backport-util-concurrent 3.0 (server has backport-util-concurrent 2.1).
, This problem exists in 4.1.1 , please make client backport-util-concurrent 3.0 compatible. more details in the comments I've just added to this issue., backport-util-concurrent 3.0 works on server and client, but it doesn't seem to perform as well as 2.1 version., This issue has probably nothing to do with backport-util-concurrent version...

I'm getting ClassCastExceptions in my test environment several times a week. The ActiveMQ version is 4.1.1 running on Sun Java 1.5.0_11

It's hard to understand why this exception is possible:
Exception in thread "ActiveMQ Transport: tcp://localhost/127.0.0.1:61616" java.lang.ClassCastException: org.apache.activemq.command.BrokerId
at org.apache.activemq.openwire.v2.MessageMarshaller.looseUnmarshal(MessageMarshaller.java:193)
at org.apache.activemq.openwire.v2.ActiveMQMessageMarshaller.looseUnmarshal(ActiveMQMessageMarshaller.java:101)
at org.apache.activemq.openwire.v2.ActiveMQStreamMessageMarshaller.looseUnmarshal(ActiveMQStreamMessageMarshaller.java:101)
at org.apache.activemq.openwire.OpenWireFormat.doUnmarshal(OpenWireFormat.java:349)
at org.apache.activemq.openwire.OpenWireFormat.unmarshal(OpenWireFormat.java:273)
at org.apache.activemq.transport.tcp.TcpTransport.readCommand(TcpTransport.java:156)
at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:136)
at java.lang.Thread.run(Thread.java:595)

It's expecting a ProducerId object, but it receives a BrokerId object.
, My problem went away after using backport-util-concurrent 2.1 on client (and server).]