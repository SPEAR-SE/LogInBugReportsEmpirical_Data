[GitHub user erik-wramner opened a pull request:

    https://github.com/apache/activemq/pull/141

    https://issues.apache.org/jira/browse/AMQ-5961

    Prevent deadlock by moving calls to afterCommit
    and afterRollback out of synchronized blocks.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/erik-wramner/activemq master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/activemq/pull/141.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #141
    
----
commit bb2a9acaca34be9a96fa785396cca8d34255e8cd
Author: erik-wramner <erik@wramner.name>
Date:   2015-09-10T16:44:36Z

    https://issues.apache.org/jira/browse/AMQ-5961
    
    Prevent deadlock by moving calls to afterCommit
    and afterRollback out of synchronized blocks.

----
, Github user erik-wramner closed the pull request at:

    https://github.com/apache/activemq/pull/141
, Pull request submitted, tests passed. How do I go about getting this into the release?, It looks like the pull request is closed and doesn't show any commits, can you reopen it so I can take a look?, Sorry, I moved the commit to a dedicated branch in order to rebase. I have created a new pull request with the same code now, I didn't know that moving the commit would close the pull request., GitHub user erik-wramner opened a pull request:

    https://github.com/apache/activemq/pull/143

    https://issues.apache.org/jira/browse/AMQ-5961

    Prevent deadlock by moving calls to afterCommit and afterRollback out of synchronized blocks.
    Same commit as before, moved it to separate branch.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/erik-wramner/activemq amq5961-deadlock

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/activemq/pull/143.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #143
    
----
commit 7c98fdd2819a34fe06b38555601ceaecd5f53aaa
Author: erik-wramner <erik@wramner.name>
Date:   2015-09-10T16:44:36Z

    https://issues.apache.org/jira/browse/AMQ-5961
    
    Prevent deadlock by moving calls to afterCommit
    and afterRollback out of synchronized blocks.

----
, That patch might work but I'm a little concerned that the iteration of the list outside of a synchronization block could cause other issues such as concurrent modification exceptions if another thread tried to insert into the list.

Since this is only a partial thread dump, I am wondering why the afterRollback() call is never returning and stuck waiting for the MutexTransport write lock.  Is there an actual deadlock in that sense that the thread that has acquired the MutexTransport lock is waiting to acquire the ENDED_XA_TRANSACTION_CONTEXTS lock or is there some other reason why the MutexTransport lock can't be acquired? , That is a valid point. I have changed the code so that it synchronizes on the list, keeping the global lock on the map short.

The thread with the MutexTransport is waiting for the communication channel to the broker to be reestablished. I'm not sure why that doesn't happen. It may be that the thread that should take care of that is blocked on the global map or it may be due to something else. We have two issues here. We are trying to sort out the communication issue with Red Hat. The broker is live and working, but obviously something is wrong.

However, even if everything had worked out the global lock must hurt performance. It makes all other threads working with other destinations and transactions wait for this specific thread and transaction to complete its afterCommit or afterRollback calls. That must hurt. And it may cause the server to hang as it does in this case., Looks like the PR got closed again. 

And as you pointed out, we can look at seeing if it makes sense to get rid of the global lock for performance reasons.  But this specific bug in this case certainly seems to be that the afterRollback is stuck.  Even if you took away the locking, you'd have all of your threads stuck waiting forever for afterRollback to finish which would still cause the broker to quit working eventually., Pull request 143 (https://github.com/apache/activemq/pull/143) is open, 141 is closed.

As for all threads becoming stuck I don't agree for two reasons. First it might be that the thread that is supposed to reestablish communication is blocked on the locked HashMap. I don't know the code base well enough to easily find out, but I can dig into the stack trace. If that is the case we have a true deadlock and it would help to get rid of the global lock. Second even if afterRollback blocks forever that will kill one thread and one transaction, but without the global lock it may be possible for the other 169 threads to proceed with their work for new transactions (possibly for other queues/topics if the queue/topic is broken). They may also get blocked by other things, but it is possible that they can proceed. That could make the difference between a panic and a planned restart after peak times.

By the way, I changed the code again so that it doesn't lock the list when it has been removed from the map. Instead all additions to the list are within the map's lock. That way additions are protected and nothing can modify the list when it has been removed, so it can be processed safely without locks. That gets rid of the possible global lock in isInXATransaction, where the previous version locked the map and then tried to get a lock on the list., [~gtully], Can you take a look at this when you get a chance to see what you think about the proposed changes of to the transactional behavior here? , [~erik.wramner] can you attach the full thread dump, just to determine why there is no response from the broker. thanks, Stack trace, application-specific package/class names replaced., peeking at the thread dump the root cause is: {code}at org.apache.activemq.transport.failover.FailoverTransport.oneway(FailoverTransport.java:614){code}. There was a recent fix (https://issues.apache.org/jira/browse/AMQ-5951) in that area but there is also a workaround via timeout=1 for the failover transport.
The RAR does it's own reconnection and as a result the failover transport should not block on a reconnect and rather propagate the failure back to the caller, ie: maxReconnectAttempts=0 needs to be used on the failover url.
Peeking more at the fix, I think the canReconnect check may also be needed at line 609. Need to verify that., I'm quite sure we were using maxReconnectAttempts=0, but not timeout=1. Good to know.

Still, unless you think the global lock is needed in order to ensure correctness somehow I would still argue for getting rid of it. It must hurt performance to make all the other threads wait for the afterCommit/afterRollback processing to complete and as illustrated here there is always a risk for liveness problems., I think the pull request looks fine and I see your point about liveness. The only issue is the lack of tests in this area and no additional test are included. However if you found some benefit in your use case it can make some sense to include this.
I can't see any point in holding the lock for callback processing from an transaction integrity point of view :-), Good. I like tests, but I can't see how I could write a good one for this. It happens after a few hours of heavy load. I guess I can mock it, but then the test would just work the way I intended...

If you are happy with the pull request perhaps you or Christopher can accept it?

-Erik, I can merge this in and we can let Jenkins run and see if it causes any regressions on the existing tests.  Thanks for reviewing this Gary., Commit 9a78bc689f06dde61ba38be1ebc840a53ca02b68 in activemq's branch refs/heads/master from [~erik.wramner]
[ https://git-wip-us.apache.org/repos/asf?p=activemq.git;h=9a78bc6 ]

https://issues.apache.org/jira/browse/AMQ-5961

Prevent deadlock by moving calls to afterCommit
and afterRollback out of synchronized blocks.

https://issues.apache.org/jira/browse/AMQ-5961
Lock list but keep global hashmap out for deadlock protection.

https://issues.apache.org/jira/browse/AMQ-5961
Lock safely in isInXATransaction.

https://issues.apache.org/jira/browse/AMQ-5961
Don't synchronize on list as we have an exclusive reference.
, Commit 9a78bc689f06dde61ba38be1ebc840a53ca02b68 in activemq's branch refs/heads/master from [~erik.wramner]
[ https://git-wip-us.apache.org/repos/asf?p=activemq.git;h=9a78bc6 ]

https://issues.apache.org/jira/browse/AMQ-5961

Prevent deadlock by moving calls to afterCommit
and afterRollback out of synchronized blocks.

https://issues.apache.org/jira/browse/AMQ-5961
Lock list but keep global hashmap out for deadlock protection.

https://issues.apache.org/jira/browse/AMQ-5961
Lock safely in isInXATransaction.

https://issues.apache.org/jira/browse/AMQ-5961
Don't synchronize on list as we have an exclusive reference.
, Commit 9a78bc689f06dde61ba38be1ebc840a53ca02b68 in activemq's branch refs/heads/master from [~erik.wramner]
[ https://git-wip-us.apache.org/repos/asf?p=activemq.git;h=9a78bc6 ]

https://issues.apache.org/jira/browse/AMQ-5961

Prevent deadlock by moving calls to afterCommit
and afterRollback out of synchronized blocks.

https://issues.apache.org/jira/browse/AMQ-5961
Lock list but keep global hashmap out for deadlock protection.

https://issues.apache.org/jira/browse/AMQ-5961
Lock safely in isInXATransaction.

https://issues.apache.org/jira/browse/AMQ-5961
Don't synchronize on list as we have an exclusive reference.
, Commit 9a78bc689f06dde61ba38be1ebc840a53ca02b68 in activemq's branch refs/heads/master from [~erik.wramner]
[ https://git-wip-us.apache.org/repos/asf?p=activemq.git;h=9a78bc6 ]

https://issues.apache.org/jira/browse/AMQ-5961

Prevent deadlock by moving calls to afterCommit
and afterRollback out of synchronized blocks.

https://issues.apache.org/jira/browse/AMQ-5961
Lock list but keep global hashmap out for deadlock protection.

https://issues.apache.org/jira/browse/AMQ-5961
Lock safely in isInXATransaction.

https://issues.apache.org/jira/browse/AMQ-5961
Don't synchronize on list as we have an exclusive reference.
, Commit 450a5226e01a6a75e5dda4efbf088933fc0878a4 in activemq's branch refs/heads/master from [~cshannon]
[ https://git-wip-us.apache.org/repos/asf?p=activemq.git;h=450a522 ]

https://issues.apache.org/jira/browse/AMQ-5961

This closes #143

Applying patch with thanks to Erik Wramner
, Github user asfgit closed the pull request at:

    https://github.com/apache/activemq/pull/143
, I squashed the commits/rebased and applied the change.  If everything looks good after CI runs I can backport the fix to 5.12.1.]