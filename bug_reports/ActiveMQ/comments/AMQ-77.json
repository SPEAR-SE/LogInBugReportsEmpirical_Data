[Another related issue si when running two separate JVM's with both having an embedded broker, when the second one starts up, the following execption is thrown.

org.springframework.jms.UncategorizedJmsException: Uncategorized exception occured during JMS processing; nested exception is javax.jms.JMSException: Bind to tcp://localhost:61616 failed: Address already in use
javax.jms.JMSException: Bind to tcp://localhost:61616 failed: Address already in use
        at org.codehaus.activemq.transport.tcp.TcpTransportServerChannel.<init>(TcpTransportServerChannel.java:74)
        at org.codehaus.activemq.transport.tcp.TcpTransportServerChannelFactory.create(TcpTransportServerChannelFactory.java:43)
        at org.codehaus.activemq.transport.TransportServerChannelProvider.create(TransportServerChannelProvider.java:45)
        at org.codehaus.activemq.broker.impl.BrokerConnectorImpl.createTransportServerChannel(BrokerConnectorImpl.java:379)
        at org.codehaus.activemq.broker.impl.BrokerConnectorImpl.<init>(BrokerConnectorImpl.java:61)
        at org.codehaus.activemq.ActiveMQConnectionFactory.createBrokerConnector(ActiveMQConnectionFactory.java:428)
        at org.codehaus.activemq.ActiveMQConnectionFactory.createTransportChannel(ActiveMQConnectionFactory.java:405)
        at org.codehaus.activemq.ActiveMQConnectionFactory.createConnection(ActiveMQConnectionFactory.java:301)
        at org.codehaus.activemq.ActiveMQConnectionFactory.createConnection(ActiveMQConnectionFactory.java:291)
        at org.springframework.jms.connection.SingleConnectionFactory.doCreateConnection(SingleConnectionFactory.java:150)
        at org.springframework.jms.connection.SingleConnectionFactory.init(SingleConnectionFactory.java:135)
        at org.springframework.jms.connection.SingleConnectionFactory.createConnection(SingleConnectionFactory.java:169)
        at org.springframework.jms.core.JmsTemplate.createConnection(JmsTemplate.java:404)
        at org.springframework.jms.core.JmsTemplate.execute(JmsTemplate.java:499)
        at org.springframework.jms.core.JmsTemplate.receive(JmsTemplate.java:663)
...


I am using a spring configured embedded broker with :

<beans>
    <broker>
        <connector>
            <serverTransport uri="vm://localhost"/>
        </connector>
        <persistence>
            <berkeleyDbPersistence directory="berkeleydb"/>
        </persistence>
    </broker>
</beans>

I was under the impression that TCP sockets wouldn't be used with this setup., here is my applicationContext.xml excerpt :

    <bean id="activeMqConnectionFactory" class="org.codehaus.activemq.ActiveMQConnectionFactory">
        <property name="useEmbeddedBroker"><value>true</value></property>
        <property name="brokerContainerFactory">
            <bean class="org.codehaus.activemq.spring.SpringBrokerContainerFactory">
                <constructor-arg index='0'><value>classpath:activeMQ-broker.xml</value></constructor-arg>
            </bean>
        </property>
    </bean>, Cameron, if you specify the brokerURL property in your ConnectionFactory Spring configuration this should fix this issue.

brokerURL defaults to localhost:61616. So if you set the embedded flag and then try to connect with the JMS broker it will automatically start a TCP connector.

setting the brokerURL to something like vm://localhost will avoid this.

Note that you don't need to specifiy a vm:.// connector in the broker XML, as these are lightweight objects created on demand. (Though it does no harm having it in the XML)., e.g. Cameron, if you try this excerpt in your Spring config it should work...

    <bean id="activeMqConnectionFactory" class="org.codehaus.activemq.ActiveMQConnectionFactory"> 
        <property name="useEmbeddedBroker"><value>true</value></property> 
        <property name="brokerURL"><value>vm://localhost</value></property> 
        <property name="brokerContainerFactory"> 
            <bean class="org.codehaus.activemq.spring.SpringBrokerContainerFactory"> 
                <constructor-arg index='0'><value>classpath:activeMQ-broker.xml</value></constructor-arg> 
            </bean> 
        </property> 
    </bean>, These issues are resolved in 4.x once and for all]