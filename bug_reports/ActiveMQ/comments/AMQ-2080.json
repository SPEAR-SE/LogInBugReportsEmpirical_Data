[the initialReconnectDelay kicks in when a candidate url is returned by the discovery agent. Up to that point, the reconnectDelay is in effect and this defaults to 10 ms. I think there is some value in leaving things are they are such that it is possible to have a different initial reconnect delay for discovery finding some candidate urls and for connecting to these urls.

I added a test that verifies the setting of reconnectDelay takes effect when no broker can be found. It uses a uri of the form: "discovery:{code}(multicast://default)?useExponentialBackOff=false&maxReconnectAttempts=2&reconnectDelay=4000{code}

Does this work for you. If so I can update the documentation with a reference to reconnectDelay, I support the idea of different behavior before the discoveryAgent discovers a broker as opposed to after, since the delay to discover a broker is a completely different set of issues compared to the delay to connect to a broker that is advertising that it is alive.  Because of this, I think the different behaviors should be completely separately configurable with regard to delay between attempts, number of attempts, and backoff strategy.  

In any case, though there may be good reasons it evolved this way, I find it counter-intuitive and confusing that it would be the "reconnectDelay" and not the "initialReconnectDelay" that is the reconnect delay used in the initial attempt to find a broker.

For my immediate needs I can just deal with the current behavior, in part because there is some other bug (perhaps in the JVM or the Win2K TCP stack) that is causing any attempts to discover the broker to fail after the discovery agent has been running for a few minutes.   I suspect this is a Windows bug because it affects other processes running in separate JVMs, but I'm not a Windows expert so I don't know how reasonable it is to believe there's this kind of bug still existing in the OS.  , agree, it is not intuitive, but the original value of the reconnectDelay is in use prior to the discovery component returning a list of candidate urls to connect to.
Added a reference to the documentation: http://activemq.apache.org/discovery-transport-reference.html

Re your current problem, I think it is unlikely to be a JVM of OS issue.
Have you enabled debug logging for the class: org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent to see if there is any indicator there. Some of the configuration options on the [MulticastDiscoveryAgent|http://activemq.apache.org/maven/5.2.0/activemq-core/apidocs/src-html/org/apache/activemq/transport/discovery/multicast/MulticastDiscoveryAgent.html] may not be appropriate to your scenario.
The discoveryAgent properties are set like the group attribute: 
{code}discovery:(multicast://default?group=test&keepAliveInterval=1000)...{code}, Thank you for updating the documentation.

Is there a way to use exponential backoff for reconnects to a discovered URL but constant delays while waiting to discover the broker?  If not, can we make that a feature request?

Re my current problem, yes, I had turned on trace-level debugging for MulticastDiscoveryAgent and it didn't tell me anything other than I had properly set the group.  Once the parameter parsing is completed I don't get any more logging until the exception is thrown that the connection failed because no URIs were discovered.  It doesn't appear to matter whether I set loopback to true or not (not surprising since nothing but the broker is running on the broker machine).  

, Also, is this consistent with the behavior of the failover transport?  If so, then the failover transport documentation should be updated, too.  If not.....]