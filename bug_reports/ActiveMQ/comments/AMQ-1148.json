[It seems the ActiveMQ transport thread is getting stuck on UsageManager.waitForSpace:

Name: ActiveMQ Transport: tcp:///127.0.0.1:2694
State: WAITING on java.lang.Object@c98b07
Total blocked: 3  Total waited: 3

Stack trace: 
java.lang.Object.wait(Native Method)
java.lang.Object.wait(Object.java:485)
org.apache.activemq.memory.UsageManager.waitForSpace(UsageManager.java:91)
org.apache.activemq.memory.UsageManager.waitForSpace(UsageManager.java:88)
org.apache.activemq.broker.region.Topic.send(Topic.java:248)
org.apache.activemq.broker.region.AbstractRegion.send(AbstractRegion.java:305)
org.apache.activemq.broker.region.RegionBroker.send(RegionBroker.java:381)
org.apache.activemq.broker.TransactionBroker.send(TransactionBroker.java:197)
org.apache.activemq.broker.BrokerFilter.send(BrokerFilter.java:126)
org.apache.activemq.broker.CompositeDestinationBroker.send(CompositeDestinationBroker.java:98)
org.apache.activemq.broker.MutableBrokerFilter.send(MutableBrokerFilter.java:136)
org.apache.activemq.broker.TransportConnection.processMessage(TransportConnection.java:449)
org.apache.activemq.command.ActiveMQMessage.visit(ActiveMQMessage.java:604)
org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:258)
org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:164)
org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:65)
org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:133)
org.apache.activemq.transport.InactivityMonitor.onCommand(InactivityMonitor.java:122)
org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:84)
org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:137)
java.lang.Thread.run(Thread.java:619)

Meanwhile, all the ActiveMQ Session tasks are blocked:

Name: ActiveMQ Session Task
State: BLOCKED on java.lang.Object@94cbe2 owned by: Thread-3
Total blocked: 4  Total waited: 10

Stack trace: 
org.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:43)
org.apache.activemq.transport.ResponseCorrelator.oneway(ResponseCorrelator.java:60)
org.apache.activemq.ActiveMQConnection.asyncSendPacket(ActiveMQConnection.java:1165)
org.apache.activemq.ActiveMQSession.asyncSendPacket(ActiveMQSession.java:1648)
org.apache.activemq.ActiveMQMessageConsumer.afterMessageIsConsumed(ActiveMQMessageConsumer.java:700)
org.apache.activemq.ActiveMQMessageConsumer.dispatch(ActiveMQMessageConsumer.java:871)
   - locked java.lang.Object@8978c7
org.apache.activemq.ActiveMQSessionExecutor.dispatch(ActiveMQSessionExecutor.java:99)
org.apache.activemq.ActiveMQSessionExecutor.iterate(ActiveMQSessionExecutor.java:166)
org.apache.activemq.thread.PooledTaskRunner.runTask(PooledTaskRunner.java:111)
org.apache.activemq.thread.PooledTaskRunner.access$1(PooledTaskRunner.java:95)
org.apache.activemq.thread.PooledTaskRunner$1.run(PooledTaskRunner.java:44)
java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:885)
java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907)
java.lang.Thread.run(Thread.java:619)

Thread-3 seems to blocking on a write to the socket:

Name: Thread-3
State: RUNNABLE
Total blocked: 327  Total waited: 0

Stack trace: 
java.net.SocketOutputStream.socketWrite0(Native Method)
java.net.SocketOutputStream.socketWrite(SocketOutputStream.java:92)
java.net.SocketOutputStream.write(SocketOutputStream.java:136)
org.apache.activemq.transport.tcp.TcpBufferedOutputStream.flush(TcpBufferedOutputStream.java:109)
java.io.DataOutputStream.flush(DataOutputStream.java:106)
org.apache.activemq.transport.tcp.TcpTransport.oneway(TcpTransport.java:119)
org.apache.activemq.transport.InactivityMonitor.oneway(InactivityMonitor.java:141)
org.apache.activemq.transport.TransportFilter.oneway(TransportFilter.java:80)
org.apache.activemq.transport.WireFormatNegotiator.oneway(WireFormatNegotiator.java:93)
org.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:44)
   - locked java.lang.Object@94cbe2
org.apache.activemq.transport.ResponseCorrelator.oneway(ResponseCorrelator.java:60)
org.apache.activemq.ActiveMQConnection.asyncSendPacket(ActiveMQConnection.java:1165)
org.apache.activemq.ActiveMQSession.send(ActiveMQSession.java:1546)
   - locked java.lang.Object@d4f13a
org.apache.activemq.ActiveMQMessageProducer.send(ActiveMQMessageProducer.java:473)
org.apache.activemq.ActiveMQMessageProducer.send(ActiveMQMessageProducer.java:358)
org.apache.activemq.broker.region.cursors.SlowConsumerTest$1.run(SlowConsumerTest.java:87)
java.lang.Thread.run(Thread.java:619), Still having exactly the same problem as described in the original description. Tested with revision 509457., Using a seperate connection for producer(s) and consumer(s) alleviates this - the consumer is blocked trying to acknowledge on the same connection the publisher is blocked awaiting space. As the test case is using non-persistent messages, the socket buffer fills, rather than the connection blocking awaiting a response from the broker., Just to make sure I understand correctly: to avoid this problem, we should have connections that only deal with producers and connections that only deal with consumers. However, having a bunch of consumers (or producers, but only one of the two) on a connection should work?, Patching this workaround into an existing application is tricky. After reading the JMS spec, we assumed that we could pass Sessions around, allowing each component to create the consumers and producers it needs. Now I guess we'll have to send around ConnectionFactories. And if we forget to do this anywhere, we still get "deadlocks" that are very hard to debug.

Do you anticipate that this issue could be fixed in a way that won't require a proliferation of extra connections?, Slow consumer test with multiple connections. Seems to work., Just tested this again with the latest trunk. It seems to hang after 9 messages. Might be related to AMQ-1136., Just test this again - and it does hang. However - the default prefetch size is about 32k for a topic - and given the size of the messages is 2k results in 65mb of messages being passed to the consumer before the broker will wait to dispatch more.  This results in out of memory errors and causes the InactivityMonitor in the consumer thread to barf, and the transport thinks its lost connection to the broker. The fix is to set the pretech limit lower for topics  and then it works -e.g.

        ActiveMQConnectionFactory cf=new ActiveMQConnectionFactory(bindAddress);
        Properties props=new Properties();
        props.setProperty("prefetchPolicy.topicPrefetch",""+100);
        cf.setProperties(props);
, What I will do is add a policy to the broker to set the maximum memory size for messages outstanding for a consumer which can be used in conjunction with the pretetch size.
Ideally this should be configurable on a consumer basis - but that would require a change to the wire format - which I don't want to do.]