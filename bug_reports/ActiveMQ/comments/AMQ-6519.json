[I forgot to mention, CACHE_CONSUMER is a very much desired configuration in most use cases. It cannot be used with XA transactions but works fine with local JMS transactions and non-transacted consumers. 
The reason is that without caching the consumer in Spring, it needs to re-create a new consumer for every single message it wants to consume.
The call to session.createConsumer() is a synchronous call against the broker, hence slows down your overall processing performance in the client. 

, Here is my suggestion to fix the docs.
I would like to leave the first general part as it is atm, since it is correct.

{quote}
Consuming messages from a pool of consumers can be problematic due to prefetch. Unconsumed prefetched messages are only released when a consumer is closed, but with a pooled consumer the call to close() is deferred (for reuse) till the consumer pool closes. This leaves prefetched messages unconsumed till the consumer is reused. This feature can be desirable from a performance perspective. However, it can lead to out-of-order message delivery when there is more than one consumer in the pool. For this reason, the org.apache.activemq.pool.PooledConnectionFactory does not pool consumers.
{quote}

Then re-write the second part to 

{quote}
Pooling consumers is supported by Springs CachingConnectionFactory (although turned off by default). In case you use the CachingConnectionFactory with multiple consumer threads configured in Springs DefaultMessageListenerContainer (DMLC) you either want to turn off consumer pooling in the  CachingConnectionFactory (its off by default) or you may want to use a prefetch of 0 when pooling consumers. In this way, the consumer will poll for messages on each call to receive(timeout). Its generally recommended to turn off consumer caching in Springs CachingConnectionFactory and any other frameworks that allow to pool JMS consumers.

Note that Springs DefaultMessageListenerContainer (DMLC) and its CACHE_CONSUMER cache level is not affected by this problem! Springs DMLC does not pool consumers in the sense that it does not use an internal pool with multiple consumer instances. Instead it caches the consumer, i.e. it re-uses the same JMS consumer object to receive all messages for the life time of the DMLC instance. So it behaves pretty much like properly hand written JMS code, where you create the JMS connection, session, consumer and then use this consumer instance to receive all your messages.
Hence there is no problem with using CACHE_CONSUMER in Spring DMLC, even with multiple consumer threads, unless you are using XA transactions. XA transactions do not work with CACHE_CONSUMER in Spring DMLC. However local JMS transactions and non-transacted consumers are just fine to use CACHE_CONSUMER in Springs DMLC.

Also note that Camel's JMS or ActiveMQ components use Springs DMLC internally. So everything said above about Springs DMLC and CACHE_CONSUMER applies to these two Camel components as well. 
{quote}

Any objections / corrections / opinions on this suggested documentation update? 
If I get some confirmation, I will update the docs accordingly., good update.

Cast your eyes over https://github.com/apache/activemq/blob/master/activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java where there is similar info but I think it is less detailed., Thanks for confirming Gary,

I pushed this update to this page in this revision https://cwiki.apache.org/confluence/pages/viewpage.action?pageId=36183.]