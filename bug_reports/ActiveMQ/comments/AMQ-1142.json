[EDIT: I use the default activemq.xml (straight of the ZIP-archive) and version 4.1.0 incubator.

Anyone any thoughts about this issue? Thank you, IMHO, I think the appropriate way to accomplish this is to set the JMSReplyTo property of the message with the temporary queue. And upon receipt of the message, get the reply to property and send to that.

Let me know if that works for you., Also, I'm not sure if this is a bug or not. :), I came across a similar issue with temporaray queues. The message doesn't get sent in even when I use the replyTo property. 

Here's the test case: 

	public void testQueues() {

		final JmsTemplate jmsTemplate = getSpringBean("jms.template.quoteProcessor", JmsTemplate.class);

		try {
			final Connection connection = jmsTemplate.getConnectionFactory().createConnection();
			Session session = connection.createSession(true, 1);
			final Destination destination = session.createTemporaryQueue();

			Thread senderThread = new Thread(new Runnable() {

				public void run() {
					try {
						System.out.println("In Sender Thread");
						Session session = connection.createSession(true, 1);
						session.createProducer(destination).send(session.createTextMessage("my message"));
						System.out.println("sent message to queue: " + destination);

					} catch (JMSException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}

				}
			});

			senderThread.start();

			Thread.currentThread().sleep(6000);

			Thread receiverThread = new Thread(new Runnable() {

				public void run() {
					try {
						System.out.println("In Receiver Thread");
						Session session = connection.createSession(true, 1);
						System.out.println("my session: " + session + ", queue: " + destination);
						MessageConsumer consumer = session.createConsumer(destination);
						System.out.println("my consumer: " + consumer);
						Message message = consumer.receive();
						System.out.println("Got this message: " + message.toString());

					} catch (JMSException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}

				}
			});

			receiverThread.start();

			Thread.currentThread().sleep(6000);

			System.out.println("Done!");
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (JMSException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}

	}

output: 

In Sender Thread
sent message to queue: temp-queue://ID:shell.dev.norvax.net-53936-1172097041334-2:1:1
In Receiver Thread
my session: ManagedSessionProxy { ActiveMQSession {id=ID:shell.dev.norvax.net-53936-1172097041334-2:1:3,started=false} }, queue: temp-queue://ID:shell.dev.norvax.net-53936-1172097041334-2:1:1
my consumer: ActiveMQMessageConsumer { value=ID:shell.dev.norvax.net-53936-1172097041334-2:1:3:1, started=false }
Done!

It did not receive the message.
, You're using transacted mode sessions in that code; so you need to do a session.commit() before the messages are actually sent, Note that it is outside of the JMS specification and TCK to be able to call Queue.getQueueName() on a temporary queue, pass that String around and be able to call session.createQueue(temporaryQueueName) and be able to get the same temporary queue.

The real solution to your problem is to use Message.setJMSReplyTo(Destination) which definitely works and is part of the JMS specification.

, I've added a test case to demostrate the issue: TemporaryDestinationToFromNameTest

and its now resolved in 5.0, A consequence of this seems to be that the nice feature of Composite Destinations will not allow a temporary queue in the list. 

Given that Composite Destinations aren't in the spec. anyway, it would be more consistent to allow a temporary queue here as well.

Could this be done?]