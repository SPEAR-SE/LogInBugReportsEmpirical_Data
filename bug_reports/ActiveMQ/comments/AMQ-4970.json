[Recommend you create a JUnit test to reproduce., Thanks. I am working on it. Any good way to unit test this without actually creating files on disk?  I plan to put files in a subdir of target. 

Sent from my iPhone

, Since you are testing persistence you kind of have to write to disk.  That said there's a ton of unit tests to work from, I'd recommend you take a peek at QueuePurgeTest.java in activemq-unit-tests, @Arthur - there is no problem with creating files in the target dir. that is what most of the store unit tests do. Peek at: org.apache.activemq.store.kahadb.*, @Timothy Bish - thank you for the reference to QueuePurgeTest., AMQ4970Test.zip - Attached  zip file with a self-contained test project.  "mvn test" runs the test.

I'm not reproducing the failures with this test.  Trying to consider what may be different.  One thing coming to mind is that my earlier test involved running the broker in console mode and using ctrl-c to stop it., Looks like the difference is ActiveMQConnection.destroyDestination() versus BrokerView.removeQueue()., Updated AMQ4970Test.zip so it now tests both the ActiveMQConnection.destroyDestination() and BrokerView.deleteQueue() methods.

Still not reproducing the problem this way.

Tried another approach (capturing kahadb snapshots):

== part 1 ==
* Clear the kahadb
* Start the broker
* Create two destinations
* Stop the broker
* Take snapshot 1 of the kahadb
* Start the broker
* Remove one destination
* Stop the broker
* Take snapshot 2 of the kahadb
* Start the broker
* Confirm errant operation (removed destination recreated)

== part 2 ==
* Stop the broker
* Clear the kahadb
* Start the broker
* Create 2 destinations
* Remove 1 destination
* Stop the broker
* Capture snapshot 3 of the kahadb
* Start the broker
* Confirm correct operation (destination remains removed)

Comparing Snapshots 2 and 3, there are differences (as expected):

* The db.redo file contains the removed destination name in the errant process path.
* The db.redo file in the normal path does not contain the removed destination name.
* And the normal path has a db.free file.
* The errant path does not.

I'm wondering if something in the out-of-the-box configs differing from the internal broker in the AMQ4970Test is contributing to the problem.

Any ideas would be welcome., Trying the exact same config with leveldb, the problem does not happen., This is interesting - turned on DEBUG logging on org.apache.activemq.broker.region and found this:

{noformat}
2014-01-16 22:10:18,028 | DEBUG | localhost removing destination: queue://TEST2 | org.apache.activemq.broker.region.AbstractRegion | ActiveMQ Transport: tcp:///127.0.0.1:49946@61616
2014-01-16 22:10:18,033 | DEBUG | localhost adding destination: topic://ActiveMQ.Advisory.Queue | org.apache.activemq.broker.region.AbstractRegion | ActiveMQ Transport: tcp:///127.0.0.1:49946@61616
2014-01-16 22:10:18,044 | DEBUG | localhost removing consumer: ID:Arthur-Naseefs-MacBook-Pro.local-49945-1389935417793-1:1:-1:1 for destination: ActiveMQ.Advisory.TempQueue,ActiveMQ.Advisory.TempTopic | org.apache.activemq.broker.region.AbstractRegion | ActiveMQ Transport: tcp:///127.0.0.1:49946@61616
2014-01-16 22:10:38,199 | DEBUG | queue://TEST2 expiring messages .. | org.apache.activemq.broker.region.Queue | ActiveMQ Broker[localhost] Scheduler
2014-01-16 22:10:38,201 | DEBUG | TEST2 toPageIn: 0, Inflight: 0, pagedInMessages.size 0, enqueueCount: 0, dequeueCount: 0 | org.apache.activemq.broker.region.Queue | ActiveMQ Broker[localhost] Scheduler
2014-01-16 22:10:38,203 | DEBUG | queue://TEST2 expiring messages done. | org.apache.activemq.broker.region.Queue | ActiveMQ Broker[localhost] Scheduler
{noformat}

Watching the contents of the db.redo file, I see the destination name removed, and then return., The GC of the destination appears to be the missing link.  Adding a Thread.sleep(60000) to the test causes 100% failure - of both forms of deletion., Attaching updated test project - this one fails 100% of the time with a 2 second delay added to the process.

Message expiration is causing revival of the destination., great work tracking this down. How does the expiration thread/task have a reference to a deleted destination? Must still be suck in some list or there is a race between the start of the task execution and the removal., Tried the test using trunk code, could not reproduce after quite a few runs.  , Huh, that's interesting Timothy.  I wonder what's different.  I'm working with a version of the trunk that can't be more than a couple of weeks old.  I'm running this on a mac.  I think jdk 1.7 - need to verify.

With a little debug logging, I see that the task for expiring messages continues to be called even though the cancel method is called on the scheduler for the task.  I haven't had a chance to do any more than that today due to other priorities., Hmm:

{noformat}
DEBUG | localhost adding destination: queue://TEST1
 INFO | TBD ASN: scheduling queue://TEST1
DEBUG | TEST1 toPageIn: 0, Inflight: 0, pagedInMessages.size 0, enqueueCount: 0, dequeueCount: 0
 INFO | TBD ASN: scheduling queue://TEST1
DEBUG | TEST1 toPageIn: 0, Inflight: 0, pagedInMessages.size 0, enqueueCount: 0, dequeueCount: 0
{noformat}

Two of these tasks are being scheduled?  Next check - is it one Queue instance or two?, Two starts of the queue.  FIRST STACK is the trace on the first call to {{Queue.start}} and the SECOND is, well, the second.

{noformat}
2014-01-17 21:15:07,071 ERROR [main] org.apache.activemq.broker.region.Queue - TBD ASN XXX: first start
java.lang.Exception: FIRST STACK
	at org.apache.activemq.broker.region.Queue.start(Queue.java:1008)
	at org.apache.activemq.broker.region.AbstractRegion.addDestination(AbstractRegion.java:140)
	at org.apache.activemq.broker.region.RegionBroker.addDestination(RegionBroker.java:321)
	at org.apache.activemq.broker.BrokerFilter.addDestination(BrokerFilter.java:167)
	at org.apache.activemq.advisory.AdvisoryBroker.addDestination(AdvisoryBroker.java:169)
	at org.apache.activemq.broker.BrokerFilter.addDestination(BrokerFilter.java:167)
	at org.apache.activemq.broker.BrokerFilter.addDestination(BrokerFilter.java:167)
	at org.apache.activemq.broker.MutableBrokerFilter.addDestination(MutableBrokerFilter.java:172)
	at org.apache.activemq.broker.region.AbstractRegion.start(AbstractRegion.java:98)
	at org.apache.activemq.broker.region.RegionBroker.start(RegionBroker.java:190)
	at org.apache.activemq.broker.jmx.ManagedRegionBroker.start(ManagedRegionBroker.java:120)
	at org.apache.activemq.broker.BrokerFilter.start(BrokerFilter.java:182)
	at org.apache.activemq.broker.BrokerFilter.start(BrokerFilter.java:182)
	at org.apache.activemq.broker.TransactionBroker.start(TransactionBroker.java:120)
	at org.apache.activemq.broker.BrokerService$5.start(BrokerService.java:2150)
	at org.apache.activemq.broker.BrokerService.doStartBroker(BrokerService.java:648)
	at org.apache.activemq.broker.BrokerService.startBroker(BrokerService.java:632)
	at org.apache.activemq.broker.BrokerService.start(BrokerService.java:568)
	at org.apache.activemq.AMQ4970Test.setupBroker(AMQ4970Test.java:90)
	at org.apache.activemq.AMQ4970Test.restartBroker(AMQ4970Test.java:221)
	at org.apache.activemq.AMQ4970Test.runOneTestQueueRemoval(AMQ4970Test.java:184)
	at org.apache.activemq.AMQ4970Test.testQueueDeletionViaBrokerViewRemoveQueueInKahaDBStore(AMQ4970Test.java:128)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31)
	at org.junit.runners.BlockJUnit4ClassRunner.runNotIgnored(BlockJUnit4ClassRunner.java:79)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:71)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:49)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:236)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:252)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:141)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:112)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)
	at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)
2014-01-17 21:15:07,074 ERROR [main] org.apache.activemq.broker.region.Queue - TBD ASN XXX: second start
java.lang.Exception: SECOND STACK
	at org.apache.activemq.broker.region.Queue.start(Queue.java:1005)
	at org.apache.activemq.broker.region.AbstractRegion.start(AbstractRegion.java:104)
	at org.apache.activemq.broker.region.RegionBroker.start(RegionBroker.java:190)
	at org.apache.activemq.broker.jmx.ManagedRegionBroker.start(ManagedRegionBroker.java:120)
	at org.apache.activemq.broker.BrokerFilter.start(BrokerFilter.java:182)
	at org.apache.activemq.broker.BrokerFilter.start(BrokerFilter.java:182)
	at org.apache.activemq.broker.TransactionBroker.start(TransactionBroker.java:120)
	at org.apache.activemq.broker.BrokerService$5.start(BrokerService.java:2150)
	at org.apache.activemq.broker.BrokerService.doStartBroker(BrokerService.java:648)
	at org.apache.activemq.broker.BrokerService.startBroker(BrokerService.java:632)
	at org.apache.activemq.broker.BrokerService.start(BrokerService.java:568)
	at org.apache.activemq.AMQ4970Test.setupBroker(AMQ4970Test.java:90)
	at org.apache.activemq.AMQ4970Test.restartBroker(AMQ4970Test.java:221)
	at org.apache.activemq.AMQ4970Test.runOneTestQueueRemoval(AMQ4970Test.java:184)
	at org.apache.activemq.AMQ4970Test.testQueueDeletionViaBrokerViewRemoveQueueInKahaDBStore(AMQ4970Test.java:128)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31)
	at org.junit.runners.BlockJUnit4ClassRunner.runNotIgnored(BlockJUnit4ClassRunner.java:79)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:71)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:49)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:236)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:252)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:141)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:112)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)
	at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)
{noformat}, Thanks for the input Gary (sorry I missed it earlier)., Last of the small updates.

After pulling down the head and testing, the test passes.  I'm trying to track down the change that appears to fix the problem to understand why it makes the test pass - in case it doesn't truly fix the root cause., Here's the finding:

* The issue is caused, at least in part, by redundant starts of the Queue (i.e. two calls to Queue.start)
* On the head, this still happens
* On the older code, the redundant start causes redundant exipred-message scheduling which appears to cause the Queue to revive after a removeDestination
** The revival only takes affect on broker restart
** So, the kahadb remembers the destination, but it doesn't revive in broker memory
* On the head, the redundant start doesn't lead to the revival; not sure why.

I recommend protecting against redundant starts by adding a flag and check to the Queue - using encapsulation to have the Queue keep itself robust.  Even without the queue revival, redundant starts of the Queue can only lead to problems (such as a scheduler task leak).  I'll submit a patch. , Attaching a patch that prevents duplicate starts and stops of a single org.apache.broker.region.Queue.  Failures during startup or shutdown of the Queue are ignored, so the results will be the same as they were before., Fixed on trunk. , Hey Arthur,
thanks for tracking this down and figuring out how to fix it.  just curious, though, should there be a similar fix applied to Topic.java as well?, Actually, i may have figured this out myself.  topics don't seem to be reloaded at startup like queues., I think it's worth adding the protection - the extra processing only adds an infrequent operation that can only prevent problems., Fix revision: https://git-wip-us.apache.org/repos/asf?p=activemq.git;a=commit;h=f7cbe9fa173f1f3cf91d016ed340f90a2bd61242]