[This has just reoccured on a different client site..., I just spent some time trying to repro this on rev. 570602 without luck.  Specifically I was trying to recreate the exception noted by telnetting to 61616 and tracing the session establishment code in the debugger.  I tried both 1) allowing the wireformat info to be sent to the client and allowing the timeout to occur, and 2) closing the connection from the client end before the initial wireformat info is sent.

In both cases it seemed like the transport code was catching any socket exceptions and cleaning up in an orderly way.  

I did notice one very peculiar behavior though.  I set up 20 different bash shells to do a "telnet 0 61616", then fired off the connections to the AMQ broker concurrently.  What I saw was that while connection #n was waiting for a response to its wireformat message, connection #n+1 was sitting idle, no initial handshake message having been sent from the broker.  As soon as connection #n timed-out, I would see the initial data from the server on the screen of session #n+1.  Meanwhile, connection #n+2 sat idle until n+1 timed out, and then it too would receive the initial handshake message, and so on.

So it would seem that, given this behavior, it might be easy to instigate a mini-DOS attack against the broker simply by creating connections to the openwire transport and sending nothing on them.  All bogus connections would have to time out before subsequent valid connections would be negotiated.  I could easily see how a port-scanning application could cause similar problems if it connected to port 61616 and then for some reason did not immediately tear down the TCP connection.

-Eric, Hi Eric,

That issue has been resolved in the up comming 5.0 release.  see issue https://issues.apache.org/activemq/browse/AMQ-1337
, fixed in 5.0]