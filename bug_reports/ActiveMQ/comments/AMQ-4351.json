[@Tim, thanks for the report and patch. Is there any chance you could provide a unit test that can demonstrate so that we can protect the change?

My suspicion is that the cleanup safety should not come down to sync on the consumers list, but should be handled at a higher level., Hi Gary,

It's easy to reproduce, and we've got a unit test for it (see attach), but it's not very well suited to include in an automated build system as it produces high load over Â± 4 minutes in order to trigger the deadlock. It's reliable though, always deadlocking without the patch.

Scenario:
1. 100 durable consumers, of which 97 go inactive after receiving the first message
2. producer sends messages as fast as possible
3. after 3 minutes, broker tries to clean up the 97 inactive producers => always deadlocks. No more messages are being sent to the active produces. kill -3 of the jms broker always shows the same deadlock.

We took 100 durable consumers in our test in order to provoke the deadlock quickly, but in our production system it occurred with only 4 consumers (of which 1 was cleaned up after 1 hour inactivity)., I'm interesting in the issue.It seems the thread stack does not reveal the deadlock threads and the test is not an unit test as there are many special objects rather than pure AMQ objects.
, Looks like Hiram fixed this one w/ r1455290. Can you verify the fix in the next nightly build?, I've fixed the dead lock and included a leaner vesion of the test case at: [commit|https://github.com/apache/activemq/commit/846cf7df3fdea5c27030ed77473aba3b5a4699aa], Changes for this issue have affected the destination stats for Topics depending on whether keep durable subs active is true or not. , Fixed the stats issue on trunk]