[I'm unclear why you need to do this in the first place.  It appears that JCAConnector has an init method via InitializingBean so why isn't it just started there?

That said, there really doesn't seem like any clean way to do this in Spring 1.1.  Do you:

1) Force your users not to use abstract beans?
2) Raise the minimum Spring version to 1.1.1 or later to pick up new ListableBeanFactory functionality?
3) Something else...?
, BTW Mike, how do you create the error you get? e.g. do you have an example spring.xml we can use for testing?

The trouble is, the JCA container needs to initialise all the inbound message connectors on startup - i.e. perform all the subscriptions. So we need a nice way in Spring to find all the inbound message subscriptions; the issue is right now they are not beans of a certain type as we currently use factory methods to create them.

So maybe the ultimate solution is to introduce some bean of a certain type which represents all of the subscriptions; then we can just look for it? 

Maybe there's a better way in Spring that we've not thought of yet..., Just add any ole abstract Spring bean to your test XML.  Here's one for free:

<bean id="foo"/>

The only other thing I could think to do would be to use a pre-defined naming scheme like "*Connector".  That is, you would try to start any beans that end in "Connector".

Another thought is to deprecate the whole factory method creation scheme and move to the simpler and more standard JavaBeans creation.

Instead of this:

	<bean id="inboundMessageConnector" factory-method="addConnector" factory-bean="activeMQContainer">
	</bean>

Use this:

	<bean id="inboundMessageConnector" class="org.codehaus.activemq.jca.SomeType">
                <property name="container"><ref bean="activeMQContainer"/></property>
	</bean>

Then you have the problem of how to get the "child added" callback to the container.  The best I can figure is make the child aware of that need:

public void init() {
    if (container instanceof ActiveMQContainer) {
        ((ActiveMQContainer)container).addConnector(this);
    }
}

But it does solve your Spring startup problem., This is a dupe of AMQ-206
, I don't understand why you need to find the inbound connector beans from the bean factory.

If they are all created via  JCAContainer.addConnector, then the JCAContainer could keep a refrence to them (in addConnector) then start them during it's afterPropertiesSet()

Am I missing something here ?, If the reason is that JCAContainer can be used outside of the spring context, and in those cases the startup of the inbound connectors should be manually done - then create a new SpringJCAContainer bean that implements this idea., This is wrecking havoc with our setup as well. ActiveMQ should be much smarter about how it interacts with the bean factory. Abstract beans are very useful for defining common attributes that other beans use as a "parent". 

I'm still trying to understand the need to initialize all the beans in the factory? What's the purpose?, Patrick - the reason to try instantiate the beans is to ensure that all the inbound connections get correctly setup (sometimes Spring is lazy and doesn't instantiate stuff).

But your patch to AMQ-206 should fix this issue now I think?, Fixed now thanks to Patrick's patch, James - Yes, the patch in AMQ-206 is to fix this problem as well. I forgot to mention the duplicate issues in my post to the dev list. And when I first found this one, I had yet to find the other. Thanks for applying the patch.]