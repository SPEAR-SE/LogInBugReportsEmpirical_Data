[You sure this isn't just that the jconsole stats go a bit wonky sometimes? We've seen folks report negative queue sizes, so there could be an issue with the stats not always being totally accurrate.

i.e. are you sure there really are messages missing?, The negative queue size bug is 100% reproducible, and affects JMX and the Web Console counters.  Just put a 100 persistent messages into a queue, stop ActiveMQ, and then start ActiveMQ, and tell a consumer to read all of the messages.  The queue size will be "-100".  ActiveMQ does not ask its persistence engine to return the number of messages already in the queue, so it always starts with all counters at zero.

Now, JConsole may lag.  I don't know how often it refreshes.  But it doesn't not sound like you are having the negative queue size problem, unless the OP started and stopped ActiveMQ with messages in the queue.

, Hello, first thank you for your comments. 

I re-tested the issue by also receiving all the sent messages with TestMqBroker2.java and it turned out that the number of messages received were exactly matching the information of the JConsole.

I sent 10000 messages with no errors or exceptions thrown, the JConsole showed 9998 messages enqueued and I received exactly this 9998 Messages.


Console output:

start sending
end sending
Msgs sent: 10000
Msgs received: 9998

, I just mentioned this on IRC but figured I'd repeat here for anyone watching JIRA. IT could just be you're using multiple threads, but not using thread safe counters.

Try refactor the 'int count*" variables to use AtomicInteger instead and see if its still an issue?, Hello.
I think the problem is that you're using the same Session object from different threads. This is not the intended usage, if you read the JMS API Specification, it says:

A Session object is a single-threaded context for producing and consuming messages. Although it may allocate provider resources outside the Java virtual machine (JVM), it is considered a lightweight JMS object.

and also:

Once a connection has been started, any session with one or more registered message listeners is dedicated to the thread of control that delivers messages to it. It is erroneous for client code to use this session or any of its constituent objects from another thread of control. The only exception to this rule is the use of the session or connection close method.

What I deduce from this, is that you need a different session for any of your producer and consumer threads.



, Thanks Manuel Teira, this was the problem.

If one QueueSession is used for each Thread it works perfectly.

Thanks again, both of you., Many thanks guys for helping resolve this. So its clear that using the same session/producer to send concurrently has issues; but then via the JMS specification you are not meant to do this. So the workaround is either

* synchronise on the send method
* use a separate session/producer per thread
* use Camel as a facade over JMS to avoid these kinds of issues
* use Spring's JmsTemplate with the PoolingConnectionFactory
]