[Some more findings...
It seems that even the socket.tcpNoDelay option does nothing to set TCP_NODELAY on broker sockets, when written in the activemq.xml file, like for example:

  <broker name="broker" useJmx="true" persistent="false" xmlns="http://activemq.org/config/1.0" deleteAllMessagesOnStartup="true">
  
    <transportConnectors>
      <transportConnector uri="tcp://localhost:61616?socket.tcpNoDelay=true;wireFormat.tcpNoDelayEnabled=true;tcpNoDelay=true"/>
    </transportConnectors>
    
  </broker>

None of the options I put has any effect on the broker's sockets, but they all are accepted by the options parser without throwing an exception.
In some scenarios some delayed ACK timeouts were still appearing because of the broker's sockets having TCP_NODELAY = false even if the client sockets have TCP_NODELAY = true.

So, if you really want to disable Nagle's Algorithm in ActiveMQ without exception (broker and clients), one should go to the org.apache.activemq.transport.tcp.TcpTransport.initialiseSocket method and add the following line at the end of the method:

sock.setTcpNoDelay(true);, This TCP_NODELAY caused also my problem described in AMQ-1137.
Regardless of which of these options ("socket.tcpNoDelay=true;wireFormat.tcpNoDelayEnabled=true;tcpNoDelay=true") I set transactional messaging is slow under Linux.

I patched  the {{org.apache.activemq.transport.tcp.TcpTransport}} class and disbled TCP_NODELAY hard-coded like this:

{code:title=TcpTransport.java|borderStyle=solid}
  protected void initialiseSocket(Socket sock) throws SocketException {
    if (socketOptions != null) {
      IntrospectionSupport.setProperties(socket, socketOptions);
    }

    socket.setTcpNoDelay(true);  // disable TCP_NODELAY anyway
    socket.setReceiveBufferSize(socketBufferSize);
    socket.setSendBufferSize(socketBufferSize);

    sock.setTcpNoDelay(socket.getTcpNoDelay()); // disable TCP_NODELAY also for sock

    try {
      sock.setReceiveBufferSize(socketBufferSize);
      sock.setSendBufferSize(socketBufferSize);

    } catch (SocketException se) {
      log.warn("Cannot set socket buffer size = " + socketBufferSize);
      log.debug("Cannot set socket buffer size. Reason: " + se, se);
    }
    sock.setSoTimeout(soTimeout);

    if (keepAlive != null) {
      sock.setKeepAlive(keepAlive.booleanValue());
    }

    //    if (tcpNoDelay != null) {
    //      sock.setTcpNoDelay(tcpNoDelay.booleanValue());
    //    }

    if (!socketInitialized) {
      //      log.info("Initialized ACX version $Date: 2007/02/13 16:21 $ of TcpTransport with: sock.getTcpNoDelay=" + sock.getTcpNoDelay() + ", sock.getReceiveBufferSize=" + sock.getReceiveBufferSize() + ", sock.getSendBufferSize=" + sock.getSendBufferSize() + ", socket.getTcpNoDelay=" + socket.getTcpNoDelay()
      //          + ", socket.getReceiveBufferSize=" + socket.getReceiveBufferSize() + ", socket.getSendBufferSize=" + socket.getSendBufferSize());
      log.info("Initialized ACX patch revision A of TcpTransport with: tcpNoDelay=" + socket.getTcpNoDelay() + " and buffer sizes=" + socket.getReceiveBufferSize());
      socketInitialized = true;
    }
  }
{code}, On Linux 2.6.16 or 2.6.17 perhaps setting this {{sysctl net.ipv4.tcp_abc=0}} may help as described in https://issues.apache.org/activemq/browse/AMQ-1137#action_38799., Indeed Helmut. When you set socket.tcpNoDelay=true on a client (producer or consumer) URI, the client's sockets have TCP_NODELAY properly set to true.
But when you try to do the same in activemq.xml for the broker's sockets, it doesn't work. You have to hard code it.
I found that setting TCP_NODELAY on the producer's sockets is the most important, but setting it on the broker's and consumer's sockets also eliminates many timeouts.

Thank you very much for the warning on tcp_abc. I am not using any of those kernels but it is good to know :), Great comments guys.  I just committed a fix to the activemq trunk.

We now actually update the tcpNoDelay setting on the socket once the wireformat options are negociated.  This allows
the client to control if his socket and the server's socket use the option.  By default tcpNoDelay is enabled.
the client should use a URL like tcp://localhost:61616?wireFormat.tcpNoDelayEnabled=false to disable tcpNoDelay on
 both the client and the server socket.

If you guys get a chance could you confirm that this fixes the issue?? thanks.  Hiram, Fix was in revision 573080, Fixed in 5.0]