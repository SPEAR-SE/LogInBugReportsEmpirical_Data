[Can you reproduce this with a test case and attach it to this issue?, I am not sure what should be the test case. My setup is the following.
A program with embedded broker publishes messages to a topic. Two other programs are listening to this topic, and they use selectors. The "properties = null" shows up for one message out of tens of thousands. basically, I see it once every 5 - 10 minutes, when the traffic is 200 - 300 per second.

Here is the first question: is it even possible for a message to have "properties = null"?, I realized that I was running older release of java (03), so I upgraded to 21 and it looks like the problem disappeared. So it could be java bug, not ActiveMQ., I see that error again. Let's keep this case open, maybe I will be able to get more evidence later., It is still happening in my environment.
I did some browsing of ActiveMQ source code to understand where it may come from. 
In my code exception happens right in the beginning of the onMessage() callback, where I am trying to call propertyExists() method on the message.
I see that since this is the first call that requires properties information, the code in the Message class tries to create properties map from the marshalledProperties, which is a ByteSequence.
It fails right at the start, in readInt() call, which means that the sequence does not even have the 4 bytes (I suspect it may be empty).

So, the only explanation for this problem is that the byte sequence representing the message came from the socket truncated., Today I upgraded to 5.4.1, and I see that the problem is still there.
Below is an example from today's log.

I also looked at the source code. The problem obviously appears when the chunk of the byte stream that is supposed to contain marshaled properties is actually empty, so the readInt() throws exception.

Here is what I think (correct me if I am wrong).
It is not normal for a message not to have properties object at all; if there are no properties, at least that integer you are trying to read from the stream should be there and equal to zero.
Seems like developers had the same assumption, because nowhere I see any checks of that byte stream whether it is empty or not.

So, it appears that the message gets corrupted somewhere, either at the sender, or the broker, or the receiver.
Wouldn't it make sense to catch this problem earlier, when message object is constructed, not at the point when the user code asks for properties?

Unfortunately I cannot produce any simple example that will demonstrate this problem. I can only say that I have pretty high volume of messages, and my consumers use selectors on topics. I have 3 consumers in separate JVMs.
The rate of this error is not high, so for many applications it might be not critical. But it may become critical for the application where each single message is important, even if there are millions of them.

===========================================================================================
[2010-09-22 14:49:28.350] ERROR  Thread-32                    com.moon.data.rtfeed.client.ClientSubscription                    Problem processing message ActiveMQMapMessage {commandId = 8197064, responseRequired = false, messageId = ID:mcny9.mooncapital.corp-51561-1285170325287-4:1:1:1:8197060, originalDestination = null, originalTransactionId = null, producerId = ID:mcny9.mooncapital.corp-51561-1285170325287-4:1:1:1, destination = topic://MKTDATA, transactionId = null, expiration = 0, timestamp = 1285181368347, arrival = 0, brokerInTime = 1285181368348, brokerOutTime = 1285181368348, correlationId = null, replyTo = null, persistent = false, type = null, priority = 4, groupID = null, groupSequence = 0, targetConsumerId = null, compressed = false, userID = null, content = org.apache.activemq.util.ByteSequence@5ff7f9f, marshalledProperties = org.apache.activemq.util.ByteSequence@4913a2cc, dataStructure = null, redeliveryCounter = 0, size = 0, properties = null, readOnlyProperties = true, readOnlyBody = true, droppable = false} ActiveMQMapMessage{ theTable = {} } javax.jms.JMSException: java.io.EOFException
        at org.apache.activemq.util.JMSExceptionSupport.create(JMSExceptionSupport.java:62)
        at org.apache.activemq.command.ActiveMQMessage.propertyExists(ActiveMQMessage.java:278)
        at com.moon.data.rtfeed.client.ClientSubscription$JmsMapMessageWrapper.<init>(ClientSubscription.java:497)
        at com.moon.data.rtfeed.client.ClientSubscription$DataTransformer.onMessage(ClientSubscription.java:473)
        at com.moon.data.rtfeed.jms.JmsReceiver$MessageDispatcher.run(JmsReceiver.java:71)
Caused by: java.io.EOFException: null
        at java.io.DataInputStream.readInt(DataInputStream.java:375)
        at org.apache.activemq.util.MarshallingSupport.unmarshalPrimitiveMap(MarshallingSupport.java:83)
        at org.apache.activemq.util.MarshallingSupport.unmarshalPrimitiveMap(MarshallingSupport.java:73)
        at org.apache.activemq.command.Message.unmarsallProperties(Message.java:193)
        at org.apache.activemq.command.Message.getProperties(Message.java:161)
        at org.apache.activemq.command.ActiveMQMessage.propertyExists(ActiveMQMessage.java:276)
        ... 3 common frames omitted
, Hey everyone this is happening for me and i am on mq client 5.13.2. Below is my error. I am using apache camel 2.16.2 with mq 5.13.2. This error occurs on the client side. The broker is using 5.10.0. I tried downgrading my client to 5.10.0 and also got the error so i ruled that out. It also only comes when under high load. If i load 1000 messages in 10 seconds i get about 20 of these. Has any seen or fixed this issue? I need a resolution asap.
```
2017-02-02 17:50:54,143] [WARN ] [Camel (camel-1) thread #6 - JmsConsumer Execution of JMS message listener failed. Caused by: [org.apache.camel.RuntimeCamelException - javax.jms.JMSException: java.io.EOFException]
org.apache.camel.RuntimeCamelException: javax.jms.JMSException: java.io.EOFException
    at org.apache.camel.component.jms.JmsBinding.extractHeadersFromJms(JmsBinding.java:193) ~[camel-jms-2.16.2.jar:2.16.2]
    at org.apache.camel.component.jms.JmsMessage.populateInitialHeaders(JmsMessage.java:244) ~[camel-jms-2.16.2.jar:2.16.2]
    at org.apache.camel.impl.DefaultMessage.createHeaders(DefaultMessage.java:203) ~[camel-core-2.16.2.jar:2.16.2]
    at org.apache.camel.component.jms.JmsMessage.ensureInitialHeaders(JmsMessage.java:229) ~[camel-jms-2.16.2.jar:2.16.2]
    at org.apache.camel.component.jms.JmsMessage.getHeaders(JmsMessage.java:187) ~[camel-jms-2.16.2.jar:2.16.2]
    at org.apache.camel.impl.DefaultUnitOfWork.<init>(DefaultUnitOfWork.java:91) ~[camel-core-2.16.2.jar:2.16.2]
    at org.apache.camel.impl.DefaultUnitOfWork.<init>(DefaultUnitOfWork.java:72) ~[camel-core-2.16.2.jar:2.16.2]
    at org.apache.camel.impl.DefaultUnitOfWorkFactory.createUnitOfWork(DefaultUnitOfWorkFactory.java:34) ~[camel-core-2.16.2.jar:2.16.2]
    at org.apache.camel.processor.CamelInternalProcessor$UnitOfWorkProcessorAdvice.createUnitOfWork(CamelInternalProcessor.java:663) ~[camel-core-2.16.2.jar:2.16.2]
    at org.apache.camel.processor.CamelInternalProcessor$UnitOfWorkProcessorAdvice.before(CamelInternalProcessor.java:631) ~[camel-core-2.16.2.jar:2.16.2]
    at org.apache.camel.processor.CamelInternalProcessor$UnitOfWorkProcessorAdvice.before(CamelInternalProcessor.java:608) ~[camel-core-2.16.2.jar:2.16.2]
    at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:138) ~[camel-core-2.16.2.jar:2.16.2]
    at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:109) ~[camel-core-2.16.2.jar:2.16.2]
    at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:87) ~[camel-core-2.16.2.jar:2.16.2]
    at org.apache.camel.component.jms.EndpointMessageListener.onMessage(EndpointMessageListener.java:112) ~[camel-jms-2.16.2.jar:2.16.2]
    at org.springframework.jms.listener.AbstractMessageListenerContainer.doInvokeListener(AbstractMessageListenerContainer.java:689) ~[spring-jms-4.1.9.RELEASE.jar:4.1.9.RELEASE]
    at org.springframework.jms.listener.AbstractMessageListenerContainer.invokeListener(AbstractMessageListenerContainer.java:649) ~[spring-jms-4.1.9.RELEASE.jar:4.1.9.RELEASE]
    at org.springframework.jms.listener.AbstractMessageListenerContainer.doExecuteListener(AbstractMessageListenerContainer.java:619) ~[spring-jms-4.1.9.RELEASE.jar:4.1.9.RELEASE]
    at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.doReceiveAndExecute(AbstractPollingMessageListenerContainer.java:307) [spring-jms-4.1.9.RELEASE.jar:4.1.9.RELEASE]
    at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:245) [spring-jms-4.1.9.RELEASE.jar:4.1.9.RELEASE]
    at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:1144) [spring-jms-4.1.9.RELEASE.jar:4.1.9.RELEASE]
    at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.executeOngoingLoop(DefaultMessageListenerContainer.java:1136) [spring-jms-4.1.9.RELEASE.jar:4.1.9.RELEASE]
    at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:1033) [spring-jms-4.1.9.RELEASE.jar:4.1.9.RELEASE]
    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_51]
    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_51]
    at java.lang.Thread.run(Thread.java:745) [na:1.8.0_51]
Caused by: javax.jms.JMSException: java.io.EOFException
    at org.apache.activemq.util.JMSExceptionSupport.create(JMSExceptionSupport.java:72) ~[activemq-client-5.13.2.jar:5.13.2]
    at org.apache.activemq.command.ActiveMQMessage.getPropertyNames(ActiveMQMessage.java:331) ~[activemq-client-5.13.2.jar:5.13.2]
    at org.apache.camel.component.jms.JmsBinding.extractHeadersFromJms(JmsBinding.java:191) ~[camel-jms-2.16.2.jar:2.16.2]
    ... 25 common frames omitted
Caused by: java.io.EOFException: null
    at java.io.DataInputStream.readUnsignedShort(DataInputStream.java:340) ~[na:1.8.0_51]
    at java.io.DataInputStream.readUTF(DataInputStream.java:589) ~[na:1.8.0_51]
    at java.io.DataInputStream.readUTF(DataInputStream.java:564) ~[na:1.8.0_51]
    at org.apache.activemq.util.MarshallingSupport.unmarshalPrimitiveMap(MarshallingSupport.java:97) ~[activemq-client-5.13.2.jar:5.13.2]
    at org.apache.activemq.util.MarshallingSupport.unmarshalPrimitiveMap(MarshallingSupport.java:78) ~[activemq-client-5.13.2.jar:5.13.2]
    at org.apache.activemq.util.MarshallingSupport.unmarshalPrimitiveMap(MarshallingSupport.java:70) ~[activemq-client-5.13.2.jar:5.13.2]
    at org.apache.activemq.command.Message.unmarsallProperties(Message.java:222) ~[activemq-client-5.13.2.jar:5.13.2]
    at org.apache.activemq.command.Message.getProperties(Message.java:188) ~[activemq-client-5.13.2.jar:5.13.2]
    at org.apache.activemq.command.ActiveMQMessage.getPropertyNames(ActiveMQMessage.java:316) ~[activemq-client-5.13.2.jar:5.13.2]
    ... 26 common frames omitted
```]