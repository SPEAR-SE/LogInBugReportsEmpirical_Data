[I am working on a patch to this issue that would be backwards compatible with the existing CachedLDAPAuthorizationMap in the trunk; however, I am wondering if the two LDAP based AuthZ implementations should be merged into one more flexible implementation that uses the best of both., reducing code duplication is always a goal, so if the same plugin can meet all requirements with a bit more flexibility, go for it. , We just need to make sure that's documented well for people using current plugins and want to upgrade., I attached the first iteration of a patch for the identified issues.

What you get:
1) Added additional defensive measures for synchronous read/write to the underlying data structures backing the authorization map without altering the behavior of the underlying data structures (for example, don't alter an existing structure that returns a live copy of a list)
2) Custom base DNs and search filters for the different permission and destination types (the limited flexibility in the original implementation made integrating with AD or other LDAP servers without similar schemas difficult)
3) Compatibility with AD (no string parsing of DNs)
4) Support for directly including a user in a permission instead of requiring a group (reduces number of groups that need to be created to support fine grained policies)
5) Ability to choose the attribute that identifies a group or individual member of a permission so the map is flexible enough to work with non-default configurations of the LDAP LoginModule.
6) Policy for temp destinations works correctly when using synchronous update mode
7) Added some tests for working with OpenLDAP and also updated the OpenLDAP example LDIFs to work with an out-of-the-box OpenLDAP instance.  These tests are @Ignore at the moment since they require an external LDAP server; however they make gooe examples and are useful for ensuring compatibility in the future.
8) Compatibility with what I am calling "legacy group mapping" where the permission group members are simply a CN and not a full DN.
9) Supports sub-tree renames at the destination pattern level if the LDAP server supports them.

What you lose:

1) Push updates against ApacheDS 1.x.  At the moment Apache DS 1.x push updates don't support filters or scope properly.  As such, the push update solution that avoids parsing DNs doesn't work against Apache DS 1.x.  I can revert to using DN parsing for supporting ApacheDS 1.x; however, I will parse them using LdapName and not raw String manipulation.



Feedback welcome., This new patch should look to ensure it resolves this issue as well., Patch applied with svn revision 1347580. Thanks a lot.]