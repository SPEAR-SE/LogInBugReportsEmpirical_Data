[Okay here is some more info on this problem.  I changed the steps a bit.

1) create temporary topic
2) create consumer topic from step 1
Sleep for 1 second
3) create producer topic TOOL.DEFAULT
4) producer send msg
5) consumer receive msg 


Now the broker1 log show that the temporary topic registration is happening before the message is sent.

2005-01-26 18:22:32,278 [ocalport=61616]] DEBUG TransientQueueBoundedMessageManager      - Adding consumer: CONSUMER_INFO: id = 8 ConsumerInfo{ browser = false, destination = TemporaryTopic-{TD{requestor12345}TD}ID:hogmaw-1580-1106792549494-6:0, consumerIdentifier = 'ID:hogmaw-4518-1106783758977-0:0_NetworkChannel.1.1' , clientId = 'ID:hogmaw-4518-1106783758977-0:0_NetworkChannel' , sessionId = '1' , consumerName = '' , selector = '' , startTime = 1106792552248, started = true, consumerNo = 1, noLocal = false, prefetchNumber = 10, consumerKey = '[ID:hogmaw-4518-1106783758977-0:0_NetworkChannel:]'  }

Note it is registered with the TransientQueueBoundedMessageManager.  However when the reply message is being sent to the temporary topic the error message of:

2005-01-26 18:22:33,620 [ocalport=61616]] WARN  BrokerClientImpl                         - caught exception consuming packet: ACTIVEMQ_TEXT_MESSAGE: id = 8 ActiveMQMessage{ , jmsMessageID = null, bodyAsBytes = org.codehaus.activemq.message.util.ByteArray@1f03691, readOnlyMessage = false, jmsClientID = 'replier12345' , jmsCorrelationID = 'null' , jmsDestination = TemporaryTopic-{TD{requestor12345}TD}ID:hogmaw-1580-1106792549494-6:0, jmsReplyTo = null, jmsDeliveryMode = 1, jmsRedelivered = false, jmsType = 'null' , jmsExpiration = 0, jmsPriority = 4, jmsTimestamp = 1106792553330, properties = null, readOnlyProperties = false, entryBrokerName = 'ID:hogmaw-1411-1106791070978-0:0' , entryClusterName = 'default' , consumerNos = null, transactionId = 'null' , xaTransacted = false, consumerIdentifer = 'null' , messageConsumed = false, transientConsumed = false, sequenceNumber = 0, deliveryCount = 1, dispatchedFromDLQ = false, messageAcknowledge = null, jmsMessageIdentity = null, producerKey = ID:hogmaw-1578-1106792527032-9: }, text = Returning Message: 0 sent at: Wed Jan 26 18:22:33 PST 2005
javax.jms.InvalidDestinationException: Destination TemporaryTopic-{TD{requestor12345}TD}ID:hogmaw-1580-1106792549494-6:0 is no longer valid because the client requestor12345 no longer exists
	at org.codehaus.activemq.broker.impl.BrokerContainerImpl.checkTempDestinationExistance(BrokerContainerImpl.java:460)

Is indicating that test for the clientID is being done against a the BrokerContainerImpl.  Since the add is not recorded here, it is failing.

Another interesting item I found in the log is that NetworkMessageBridge objects are setup for temp destination on every broker in the network.  This seems contrary to the way other destination are handled where the NetworkMessageBridge is only established in the broker to which the orginating client is attached., Added JmsTopicRequestor test (using a peer:// topology) to demonstrate and resolve this issue., Sorry to be the bearer of bad new, but the problem still exists.  I performed a build with all changes Stewie had checked in as of 1/28 before running the test.  All logs (client and server) are in attached amq180-retestinfo.zip file., The replier process is client1 (attached to server1) and the requestor process is client2 (attached to server2).  FWIW, servers 3 and 4 represent hosts that will be at a second site.

Server log 1 show the regestration of the temporary destination, but still when the reply is directed back to the requestor the error indicating the client does not exist is still being hit., Info (requested by Stewie) to duplicate problem:

The attached zip file contains my clients (Replier and Requestor), scripts for execution of brokers (server1 - 4) and the clients, and the configuration directories for each process.  

I have both a binary installation (created by dist:build-bin) and a source development installation.  The scripts are run from the source development area, but use the jars from the binary installation via the ACTIVEMQ_HOME env variable.

BTW replier client connects to server1 and requestor client connects to server2.  While I run all four servers to duplicate my intended enviroment, the problem can be duplicate with just servers 1 and 2., Fix for this one looks good.  Thanks Stewie.]