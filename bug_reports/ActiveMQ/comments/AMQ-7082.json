[Commit 79c74998dc1efb72b05d32f920052a1df4b6dd8e in activemq's branch refs/heads/master from gtully
[ https://git-wip-us.apache.org/repos/asf?p=activemq.git;h=79c7499 ]

AMQ-7082 - recover index free pages in parallel with start, merge in flush, clean shutdown if complete. follow up on AMQ-6590
, The recovery is now back in the start phase, if it completes we are good. Otherwise we try again the next time.

 

[~jgoodyear] - this is a take on the parallel approach, I think it makes good sense.

[~alanprot] - there is still a good case for checkpointing which will reduce the full replay window, but the perf impact will the be key determinant on that I think.

It would be good to gauge the impact of the second reader in your case over NFS, there may be need to slow down the recovery thread such that it does not hog the disk or cpu.

 , Commit efa4e683bc9f4fc458ce80125304f20a742a7907 in activemq's branch refs/heads/master from gtully
[ https://git-wip-us.apache.org/repos/asf?p=activemq.git;h=efa4e68 ]

AMQ-7082 - fix final ref in test
, This is amazing!!!!!! :D:D:D:D:D:D:D:D

Maybe we can do a small change to synchronize the newFreePages and use is as soon as it has recovered values... no?

 

Something like this:

https://github.com/alanprot/activemq/commit/a9354e330e41cf4bf7e6fa21b57490a3ef22609b, I did not want to block normal work with sync on what the recovery thread is doing. I think it will be constant churn there.

Typically all operations on the pageFile hold the index lock, so it can be mostly sync free (the exception being the optional async writer thread).

it may be worth a test though to validate :)

 , Nice work [~gtully], this should work nicely to prevent the shutdown issue. When I'm back at the office Monday I will take a look at all of this in more depth and do some testing (I've been traveling for work all week), So, we can lock only if the recoveredFreeList is not empty AND freeList is empty then ... no? This is a good trade off... we only have this hit during the recovery AND we need more free pages.... Imagine that probably allocate new pages will take more time than this sync...

Would be amazing to have this free pages as soon we know about them... -Maybe with this we AMQ-7080 stop making sense at all...-  (AMQ-7080 can still have the potential to avoid lots of read - On a NFS we can have a limited throughout - mb/s - So maybe this still good) , This is what I meant...

[https://github.com/alanprot/activemq/commit/9b96e590de8b180815bd85dc701e8d0a8f28b031]

:D, Just reopen this one to include in next 5.15.7 release., Commit c6103415b9a185776ebc16343c6574f7ff884806 in activemq's branch refs/heads/activemq-5.15.x from gtully
[ https://git-wip-us.apache.org/repos/asf?p=activemq.git;h=c610341 ]

AMQ-7082 - recover index free pages in parallel with start, merge in flush, clean shutdown if complete. follow up on AMQ-6590
, [~gtully], I love the merge...this makes sense and is a quick combination.  Since the flush() happens in the checkpointUpdate, that makes this thread safe.  Nice thinking about merging, that was a nice solution outside the box.

This definitely needs to go into 5.15.7.  I went ahead and did that as this closes the loop on any delays from freeList scanning.

 , [~gtully] - I took a look at the patch, it looks ok to me although I think the variable {{needsFreePageRecovery}} needs to be marked as volatile because it's updated async in the new free page recovery thread that kicks off., Commit fb1e642c15fa842e5e25b80d89293d0bb03225c0 in activemq's branch refs/heads/master from gtully
[ https://git-wip-us.apache.org/repos/asf?p=activemq.git;h=fb1e642 ]

AMQ-7082 - ensure flush sees free list, use lazySet to avoid store barrier, thanks cshannon
, [~cshannon] yep, good catch thanks. it is the lazySet semantic I was after, but I can't avoid calling it!, Commit a9b81ace623d62e92b75ddc31c424c0ed4cae9d1 in activemq's branch refs/heads/activemq-5.15.x from gtully
[ https://git-wip-us.apache.org/repos/asf?p=activemq.git;h=a9b81ac ]

AMQ-7082 - ensure flush sees free list, use lazySet to avoid store barrier, thanks cshannon
, [~alanprot] pointed out an issue that can cause the concurrent free page recovery to walk on newly allocated and freed pages or pages in the process of being used.

The recovery processing needs to terminate at the nextFreePage id that exists at start. Everything after that is not recoverable, it is in use!, The window is small, however with something like message expiry, and all messages expiring while the broker is down, there can be alot of page file churn immediately after start. In addition if the recovery is very long, the window gets larger., [~gtully] -  is the issue that was found something that is critical (ie we have to release a 5.15.8 update soon) or could it wait for more fixes before a new release?, [~cshannon] I do believe the issue is kind of critical (thus warrants 5.15.8 update soon) as it will lead to many mysterious behavior., GitHub user alanprot opened a pull request:

    https://github.com/apache/activemq/pull/316

    AMQ-7082 - Make sure that the recovery will only mark pages as free i…

    …f they were created in a previous execution

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/alanprot/activemq AMQ-7082

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/activemq/pull/316.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #316
    
----
commit 0d34338919edee863bd71693ee30999d9d9d6ce9
Author: Alan Protasio <alanprot@...>
Date:   2018-11-06T09:13:18Z

    AMQ-7082 - Make sure that the recovery will only mark pages as free if they were created in a previous execution

----
, Hi guys...

I just created a PR with the tests...

Thanks! :D, [~alanprot] - this looks good to me, I will merge it, thanks., Commit 0d34338919edee863bd71693ee30999d9d9d6ce9 in activemq's branch refs/heads/master from [~alanprot]
[ https://git-wip-us.apache.org/repos/asf?p=activemq.git;h=0d34338 ]

AMQ-7082 - Make sure that the recovery will only mark pages as free if they were created in a previous execution
, Commit 81062fde88eeb5fa970e70fd851b49d442a7116a in activemq's branch refs/heads/master from Christopher L. Shannon (cshannon)
[ https://git-wip-us.apache.org/repos/asf?p=activemq.git;h=81062fd ]

Merge branch 'AMQ-7082'

This closes #316

Thanks to Alan Protasio for the patch
, Github user asfgit closed the pull request at:

    https://github.com/apache/activemq/pull/316
, Commit 45d7676bd95a7e4594a80b025994ea3242c94586 in activemq's branch refs/heads/activemq-5.15.x from [~alanprot]
[ https://git-wip-us.apache.org/repos/asf?p=activemq.git;h=45d7676 ]

AMQ-7082 - Make sure that the recovery will only mark pages as free if they were created in a previous execution

(cherry picked from commit 0d34338919edee863bd71693ee30999d9d9d6ce9)
, Thanks [~cshannon] :D:D:D, [~gtully] - I merged the fix can you take a quick look to make sure it looks good to you before we close this again?, Commit 505200b92a0d72666b6665f6026a97a8f215d895 in activemq's branch refs/heads/activemq-5.15.x from Christopher L. Shannon (cshannon)
[ https://git-wip-us.apache.org/repos/asf?p=activemq.git;h=505200b ]

AMQ-7082 - fix compilation after merge
, Fix is good, thanks [~alanprot], GitHub user alanprot opened a pull request:

    https://github.com/apache/activemq/pull/317

    AMQ-7082 We should make sure that pages that is being recovered canno…

    …t be reused

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/alanprot/activemq AMQ-7082-2

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/activemq/pull/317.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #317
    
----
commit af4b52a426f35c3c01058c5f49e40baa9fd6d771
Author: Alan Protasio <alanprot@...>
Date:   2018-11-06T22:28:32Z

    AMQ-7082 We should make sure that pages that is being recovered cannot be reused

----
, [~gtully] [~cshannon]

Sorry guys... but there is one more case that this can happen... 

Imagine that you have a 1000 page in the file...

T1 -> 1000 occupied pages

T2 -> page 100 is freed (and so added to the freeList)

T3 -> Background thread see the 100 page as free and so, add to the recoveryList

T3 -> We need one more page and we allocate page 100 (as it was marked as free in the freeList).

T4 -> background thread finish and mark 100 as free again...

I did a PR there to prevent this... I did everything in a way that we dont need synchronization... 

I think now we pretty much got all the cases... 

 , peeking at the latest additions to the fix., Commit 85859fd8dc22e3251de294c23d84c12b29d4fe81 in activemq's branch refs/heads/master from gtully
[ https://git-wip-us.apache.org/repos/asf?p=activemq.git;h=85859fd ]

AMQ-7082 We should make sure that pages managed during recovery are not recovered in error
variation of patch from Alan Protasio <alanprot@gmail.com> closes #317
, Github user asfgit closed the pull request at:

    https://github.com/apache/activemq/pull/317
, [~alanprot] I added an additional condition the the end of your new test to verify that newly freed pages could be reused and reworked to fix.

This ensures that there is no need for further growth while recovery is in progress which is better. I think we are finally good., [~gtully] Makes lots of sense....

If the page was freed after the restart, they should be removed from recoveredFreeList before merging as they are already tracked in freeList. This will prevent them to came back at the end of the recovery..

Sound really good for me!, Commit ca6293b55ce49f2d0851e901d2abd62a3d6d82b6 in activemq's branch refs/heads/activemq-5.15.x from gtully
[ https://git-wip-us.apache.org/repos/asf?p=activemq.git;h=ca6293b ]

AMQ-7082 We should make sure that pages managed during recovery are not recovered in error
variation of patch from Alan Protasio <alanprot@gmail.com> closes #317

(cherry picked from commit 85859fd8dc22e3251de294c23d84c12b29d4fe81)
, [~gtully] What is the strategy wrt ActiveMQ 5.15.7 version in such a case?

5.15.7 provides a fix for critical bug AMQ-7067 but the original fix for this particular bug (AMQ-7082) introduced another bug that could be considered as critical by certain given this type of comments: https://issues.apache.org/jira/browse/AMQ-7082?focusedCommentId=16676687&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-16676687  

 , [~jeromeinsf] - You have a valid point.  This Jira should have been left at 5.15.7 since it was resolved, and a new Jira should have been opened to track 5.15.8 with the additional changes that were submitted. [~gtully], Do you think that we set this back to the fix in 5.15.7, and get the changes for 5.15.8 in a new Jira to track this more clearly?, Yeah, just create a new Jira and link this one with the new Jira (I think there is a caused by association to say this one caused a bug).  That makes more sense to me as it will be easier to follow.  I will set this back to 5.15.7., Reopened and closed - continued with AMQ-7093]