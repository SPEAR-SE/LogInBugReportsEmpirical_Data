[it is working as designed. 
The feature that helps work around this issue is http://activemq.apache.org/timestampplugin.html but if possible, use some OS level protocol to keep the system clocks in sync on each of the machines., I did tried "timestampplugin",  but it didn't solve the problem in this case.   I think it is because the plugin is mainly for the leg between jms client and broker.    My case is the leg between two brokers.     Yeah, we are seeking OS level protocol to keep clocks in sync to resolve this issue., ah, you may need to provide your own variant of the timestamp broker plugin, it is quite simple. Currently, it does not work if a message has come from a network which is your use case. not sure why that is, I think that should be made optional. In the code it has{code}if (message.getTimestamp() > 0
            && (message.getBrokerPath() == null || message.getBrokerPath().length == 0)) {
            // timestamp not been disabled and has not passed through a network{code}. which ensures it does not work for your use case atm., in r948858, added processNetworkMessages attribute (default false) to TimeStampBrokerPlugin to allow it to modify network messages. , Tested with r948858,  it works now.  Thanks.]