[Added testTempMessageConsumedAdvisoryConnectionClose() method to test this issue. The test should fail since the test expects no new advisories when the connection is closed ,   A possible simple solution is to set setAdvisoryForConsumed(false); at the beginning of the purge() or maybe in  removeMessage(ConnectionContext c, QueueMessageReference r) method in Queue.java

   public void purge() throws Exception {
        boolean isAdvisoryForConsumed = isAdvisoryForConsumed();
    	setAdvisoryForConsumed(false);

        ConnectionContext c = createConnectionContext();
        List<MessageReference> list = null;
        do {
            doPageIn(true);
            pagedInMessagesLock.readLock().lock();
            try {
                list = new ArrayList<MessageReference>(pagedInMessages.values());
            }finally {
                pagedInMessagesLock.readLock().unlock();
            }

            for (MessageReference ref : list) {
                try {
                    QueueMessageReference r = (QueueMessageReference) ref;
                    removeMessage(c, r);
                } catch (IOException e) {
                }
            }
            // don't spin/hang if stats are out and there is nothing left in the
            // store
        } while (!list.isEmpty() && this.destinationStatistics.getMessages().getCount() > 0);
        if (this.destinationStatistics.getMessages().getCount() > 0) {
            LOG.warn(getActiveMQDestination().getQualifiedName()
                    + " after purge complete, message count stats report: "
                    + this.destinationStatistics.getMessages().getCount());
        }
        gc();
        this.destinationStatistics.getMessages().setCount(0);
        getMessages().clear();
        setAdvisoryForConsumed(isAdvisoryForConsumed);
    }

, I'd suggest something like this instead of the disable / enable method shown above. 

{code}
### Eclipse Workspace Patch 1.0
#P activemq-core
Index: src/main/java/org/apache/activemq/broker/region/BaseDestination.java
===================================================================
--- src/main/java/org/apache/activemq/broker/region/BaseDestination.java	(revision 1145597)
+++ src/main/java/org/apache/activemq/broker/region/BaseDestination.java	(working copy)
@@ -452,7 +452,9 @@
      * @param messageReference
      */
     public void messageConsumed(ConnectionContext context, MessageReference messageReference) {
-        if (advisoryForConsumed) {
+        // If there are no consumers then the message was consumed by a purge which we don't
+        // want to propagate as a consumer ack of the message.
+        if (advisoryForConsumed && destinationStatistics.getConsumers().getCount() > 0) {
             broker.messageConsumed(context, messageReference);
         }
     }
{code}, Probably I'm missing something but I think that checking the number of consumers does not fix all the possible use cases that can go wrong. Like if I hit "purge" in jconsole for a "queue" with slow consumers and remaining messages in the queue. The removed messages are going to cause the creation of advisory messages.  ]