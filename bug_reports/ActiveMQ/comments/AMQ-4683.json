[Test case. As the issue affected by race condition, the test may not fail every time, but it does fail often, This issue assumes that this is an intended behaviour, but looking at the code it is obvious that it was intended that messages that have missed their delivery time will be posted upon system start up., Fixed on trunk, thanks for the great test.  , The current fix (revision 1516561) makes JobSchedulerImpl to wait on a semaphore until the "main" thread executes either doStart() or addListener().
This fix has two big issues:
1. If the "main" thread manages to execute addListener() before the JobSchedulerImpl thread arrives to semaphore wait() point, the JobSchedulerImpl thread will be blocked indefinitely.
2. JobSchedulerImpl is designed to accept an arbitrary number of listeners. This solution will only work when there is exactly one. If zero, worker will be blocked. If more than one, there is a chance that listeners number 2 and over will not receive a notification, just like the first one didn't in the original bug., Case 1 analysis is incorrect.
Case 2 is true although the broker implementation doesn't currently use more than one listener so it wouldn't happen this way. 

I've made some changes to make the start of dispatching separate from starting the store.  Now the start of dispatch occurs when the SchedulerBroker is started and is stopped when its stopped.  Any listener added after the broker could miss jobs but that's an inherent trait in any event based model. , Fixed on trunk, make future enhancement requests in new issues. ]