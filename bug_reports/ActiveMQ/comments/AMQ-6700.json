[Here are the low level details that will lead to leaking ActiveMQConnection objects and threads:

The Arjuna transaction manager of JBoss EAP runs a periodic recovery and calls {{ActiveMQResourceAdapter.TransactionContext.recover()}}
{code}
try {
  original = setConnection(newConnection());
  ...
{code}

Note around the same code path would be executed when Arjuna calls {{commit()}} or {{rollback()}} on the resource adapter.
The call to {{ActiveMQResourceAdapter.newConnection()}} is implemented as

{code}
                        private ActiveMQConnection newConnection() throws JMSException {
                            ActiveMQConnection connection = makeConnection();
                            connection.start();
                            return connection;
                        }
{code}

Method {{makeConnection()}} calls into {{ActiveMQConnectionFacotry.createActiveMQConnection()}} which contains

{code}
        try {
            connection = createActiveMQConnection(transport, factoryStats);
...
            transport.start();

...
            return connection;
        } catch (JMSException e) {
            // Clean up!
            try {
                connection.close();
            } catch (Throwable ignore) {
            }
            throw e;
        } catch (Exception e) {
            // Clean up!
            try {
                connection.close();
            } catch (Throwable ignore) {
            }
            throw JMSExceptionSupport.create("Could not connect to broker URL: " + brokerURL + ". Reason: " + e, e);
        }
{code}

Now if transport.start() raises an errror, this may not result in an exception in this method. Instead the "ActiveMQ Connection Executor" thread is used to call {{ActiveMQConnection.transportFailed()}}. So the handling of the error happens in a different thread. Meanwhile above method {{ActiveMQConnectionFacotry.createActiveMQConnection()}} finishes (without exceptions) and we are back in {{ActiveMQResourceAdapter.$2.newConnection()}} where we call {{connection.start()}} (See code sample above). 

In the meantime the "ActiveMQ Connection Executor" thread has most likely finished and marked the connection as failed (ActiveMQConnection.transportFailed = true).
{{ActiveMQConnection.start()}} calls method {{ActiveMQConnectioncheckClosedOrFailed()}} which checks for the value of property {{transportFailed}}, which will be true by now and an exception will be raised.

That exception is only caught in {{ActiveMQResourceAdapter.recover()}} which in its {{finally}} clause calls 

{code}
                            } finally {
                                closeConnection(original);
                            }
{code}

but original is null at this stage, so the ActiveMQConnection instance does not get closed and the "ActiveMQ Connection Executor" thread is not shut down! Both, the thread and the instance are leaked!
, A fix for this bug is to catch and deal with these Exceptions in method {{ActiveMQResourceAdapter.$2.newConnection()}}

{code:java}
                        private ActiveMQConnection newConnection() throws JMSException {
                            ActiveMQConnection connection = null;
                            try {
                                connection = makeConnection();
                                connection.start();
                            } catch (JMSException ex) {
                                if (connection != null) {
                                    try {
                                        connection.close();
                                    } catch (JMSException ignore) { }
                                }
                                throw ex;
                            }
                            return connection;
                        }
{code}, Commit a1e595c18fbfb8a21e632b665f180005f1daf053 in activemq's branch refs/heads/AMQ-6700 from [~tmielke]
[ https://git-wip-us.apache.org/repos/asf?p=activemq.git;h=a1e595c ]

[AMQ-6700] Leak of ActiveMQ Connection Executor threads and ActiveMQConnection objects in JCA layer
, Commit a1e595c18fbfb8a21e632b665f180005f1daf053 in activemq's branch refs/heads/master from [~tmielke]
[ https://git-wip-us.apache.org/repos/asf?p=activemq.git;h=a1e595c ]

[AMQ-6700] Leak of ActiveMQ Connection Executor threads and ActiveMQConnection objects in JCA layer
, Fixed with commit [a1e595c18fbfb8a21e632b665f180005f1daf053|https://git-wip-us.apache.org/repos/asf?p=activemq.git;a=blobdiff;f=activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java;h=b17674e88a9cec7ea5c95dd229dad5c143215833;hp=fd16603865d90c8f2ded3cfaa268056bca1a3731;hb=a1e595c18fbfb8a21e632b665f180005f1daf053;hpb=a6782443c1695f54176afecfda6c5c423bc18a84].]