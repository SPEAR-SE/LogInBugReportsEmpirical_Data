[This is an annoying, ugly bug.  Even the Camel samples[1] are returning this error trace before continuing:

log4j:ERROR setFile(null,true) call failed.
java.io.FileNotFoundException: /target/test.log (No such file or directory)
        at java.io.FileOutputStream.openAppend(Native Method)
        at java.io.FileOutputStream.<init>(FileOutputStream.java:177)
        at java.io.FileOutputStream.<init>(FileOutputStream.java:102)
        at org.apache.log4j.FileAppender.setFile(FileAppender.java:289)
        at org.apache.log4j.FileAppender.activateOptions(FileAppender.java:163)
        at org.apache.log4j.config.PropertySetter.activate(PropertySetter.java:256)
        at org.apache.log4j.config.PropertySetter.setProperties(PropertySetter.java:132)
        at org.apache.log4j.config.PropertySetter.setProperties(PropertySetter.java:96)
        at org.apache.log4j.PropertyConfigurator.parseAppender(PropertyConfigurator.java:654)
        at org.apache.log4j.PropertyConfigurator.parseCategory(PropertyConfigurator.java:612)
        at org.apache.log4j.PropertyConfigurator.configureRootCategory(PropertyConfigurator.java:509)
        at org.apache.log4j.PropertyConfigurator.doConfigure(PropertyConfigurator.java:415)
        at org.apache.log4j.PropertyConfigurator.doConfigure(PropertyConfigurator.java:441)
        at org.apache.log4j.helpers.OptionConverter.selectAndConfigure(OptionConverter.java:468)
        at org.apache.log4j.LogManager.<clinit>(LogManager.java:122)
        at org.apache.log4j.Logger.getLogger(Logger.java:104)
        at org.apache.commons.logging.impl.Log4JLogger.getLogger(Log4JLogger.java:229)
        at org.apache.commons.logging.impl.Log4JLogger.<init>(Log4JLogger.java:65)
        at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
        at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:39)
        at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:27)
        at java.lang.reflect.Constructor.newInstance(Constructor.java:494)
        at org.apache.commons.logging.impl.LogFactoryImpl.newInstance(LogFactoryImpl.java:529)
        at org.apache.commons.logging.impl.LogFactoryImpl.getInstance(LogFactoryImpl.java:235)
        at org.apache.commons.logging.impl.LogFactoryImpl.getInstance(LogFactoryImpl.java:209)
        at org.apache.commons.logging.LogFactory.getLog(LogFactory.java:351)
        at org.apache.camel.impl.DefaultCamelContext.<clinit>(DefaultCamelContext.java:64)
        at org.apache.camel.example.jmstofile.CamelJmsToFileExample.main(CamelJmsToFileExample.java:44)

If it would mean turning off this error, perhaps best to go to stdout by default as the OP says or just trapping this message with a more user-friendly exception.

[1] http://svn.apache.org/viewvc/activemq/camel/trunk/examples/camel-example-jms-file/ (run "mvn clean install" followed by mvn exec:java.), if you're using maven, this is a workaround:

   <dependency>
     <groupId>org.apache.activemq</groupId>
     <artifactId>activemq-core</artifactId>
     <version>5.1.0</version>
     <exclusions>
       <exclusion>
         <groupId>org.apache.activemq</groupId>
         <artifactId>activeio-core</artifactId>
       </exclusion>
     </exclusions>
   </dependency>
   <dependency>
     <groupId>org.apache.activemq</groupId>
     <artifactId>activeio-core</artifactId>
     <version>3.1.0</version>
   </dependency>, In my case, upgrading to maven 2.0.9 fixed my issues. The test jar is still included, but does not trigger the log4j problem somehow (don't ask me why, I'm totally confused)., Actually, running into this problem again using Maven 2.1.0, and I don't think it's actually related to Maven at all.

In our case, the second (test) dependency causes some ugly behaviour with log4j initialization in our environment, as it contains a {{log4j.properties}} file. When ''introduced'' into a web container in our case, you start relying on the sequence of how JARs are loaded. In our case, this {{log4j.properties}} unfortunately initialized log4j in such a way that our project logging settings never were applied, as the ones from activeio-core had been picked up before. And that made it hard for us - during a functional testing period - to diagnose problems we had as we lost parts of our logging messages.

Can anybody pretty please look into this and have it fixed for 5.4.0 ?, The only reason we need to have the activeio test.jar in for the tests is for the JournalPerfTool and JournalPerfRWTool classes which aren't actually unit tests, should we move these someplace else so we can remove the test.jar dependency?, Yeah, I think we should do that., Fix applied in trunk removed the dependency on the test.jar from activeio, Hi Friends


This workaround as suggested by Jamie(please see below) is not working, please suggest some other way out. I am stuck :(

<dependency>
<groupId>org.apache.activemq</groupId>
<artifactId>activemq-core</artifactId>
<version>5.1.0</version>
<exclusions>
<exclusion>
<groupId>org.apache.activemq</groupId>
<artifactId>activeio-core</artifactId>
</exclusion>
</exclusions>
</dependency>
<dependency>
<groupId>org.apache.activemq</groupId>
<artifactId>activeio-core</artifactId>
<version>3.1.0</version>
</dependency>



Thanks
Saurabh]