[Patch which adds a "preAddBroker()" method to BrokerFilter which is designed specifically to secure broker-to-broker connections.

If an exception is thrown by the method, the TransportConnection shuts down.
, I'm looking for some quick feedback on the fit of this solution; we would like to make use of this update, but prefer to have reason to believe it is a good fit first.  If not, I will gladly implement an alternate approach., I would like to see if addBroker could be used/called in a way that can make it work as an authentication point rather than using a new entry point. 
There were some changed to improve failure detection in http://svn.apache.org/viewvc?rev=1069339&view=rev that may be relevant.
If you could produce a junit test case that captures your usage scenario it would be a great help in validating an alternative approach to the current patch., That would be a nicer solution; I'll take a look at the changes mentioned and work on a JUnit case., Working on a JUnit, I'm finding it difficult to capture whether the broker connection was made or not.  Subclassing DiscoveryNetworkConnector seemed like a good idea, but even it doesn't appear to have a clear point in its lifecycle at which the success or failure of the connection can be determined.

Any tips would be appreciated.

While it would be possible to create a consumer and producer that use the two different brokers, I'd rather not add that complexity.

Note that I'm working purely with 5.4.2 at this point., Go high level with your junit test, having more than one broker is not a problem. Maybe org.apache.activemq.security.JaasNetworkTest can provide some inspiration.

The BrokerInfo command is the only difference between a client and a broker connection.
To see if a broker connection is complete, org.apache.activemq.broker.region.RegionBroker#getPeerBrokerInfos can give you some high level view.
Not sure if this answers your questions but I hope it helps :-), The JaasNetworkTest method should work - I'm just concerned about a short timeout leading to incorrect results.

Trying to clarify - some of this may be a rehash.

Perhaps this description of the problem will help:
   - Need connectors on a broker that can only be used by other, authenticated, brokers
   - Those connectors can not be used by regular clients - only authenticated peer brokers

So, the high level desired flow would be:
&nbsp;&nbsp;ON CONNECTION
&nbsp;&nbsp;&nbsp;&nbsp;IF client IS a broker
&nbsp;&nbsp;&nbsp;&nbsp;THEN
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DO check authentication
&nbsp;&nbsp;&nbsp;&nbsp;ELSE
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DO reject connection
&nbsp;&nbsp;&nbsp;&nbsp;END IF

Securing addConnection() sounds like a good approach, but rejecting a connection does not prevent the creation of network bridges in TransportConnection's processBrokerInfo().  On the other hand, testing shows that exceptions on addBroker() do not prevent the bridges and do not stop the peer from continuing to create a connection.  So, I believe both need to be done.

These obervations are based on the 5.4.2 code; I do see that addBroker()'s handling has changed on the trunk, so that's why it would be good to have a JUnit that can confirm the results of an exception on addBroker() are as-expected.

Checking getPeerBrokerInfos() is one place to check.  Another is to look for network bridges.  I'll try that approach.

Thanks!, JUnit test which shows the attempt to reject peer broker connections using a BrokerFilter which throws exceptions on addBroker()., Full output running against 5.5 trunk snapshot checked out today, 17 Feb 2011; rev: 1071750.

Something is notably different.  The test is getting 4 persistence adapters configured, according to the log output, and one is a KahaDB even though both brokers have been set to be non-persistent., The test case passes when run against the current trunk code.]