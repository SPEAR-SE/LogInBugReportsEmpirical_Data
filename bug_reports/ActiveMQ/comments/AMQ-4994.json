[Dejan,

Why is this a bug and why is this a blocker? The console was designed to keep messages in memory. Obviously past a certain limit one would run out of memory. What I understand is that you actually require an improvement, which would be probably major, not even critical for the console to use pagination to handle a limited number of messages.

I would argue that for extremely large messages even 100 msgs per page would probably be too much. I also find your suggestion to use pagination a bit lacking, as if one would have 200k messages in the queue pagination would definitely not help and more advanced features like (multi-faceted) filtering would be necessary. 

A good place to start is documenting the limitations of the current console., In my opinion, anything that can cause broker (a vital middleware infrastructure component) to crash in production with OOM should be considered a blocker bug., Hi,

I had a similar problem when I was building BZCareer.com search engine where I had half a million records in the database that I wanted to show to users. I couldn't just send half a million JSON objects from the server to the client because it's just too much data. Rather I gave them the first 10 records per page. 

For that reason I have to agree with Dejan regarding his suggestion for adding pagination. 

Users don't need to see 200,000 records on a single page. Only maybe 100 records per page. 

If everyone agrees with this I can write the client side JavaScript to generate pagination and get data asynchronously. I can also write the server side code that will return a JSON object with the first hundred records and subsequent records from specifying in the query string 'page=#'.


/admin/browse.jsp?JMSDestination=TEST&page=1
Note: Page=1 is the first 100 records and so on...

I think pagination added to the console would solve this issue. With every decision we can weigh the benefit vs the cost. If this is a benefit that has no cost then why not implement this or better yet why not let me implement this as a matter of fact.


Thanks,
Zak
@Prospect1010
http://github.com/zmhassan
, Zak, go for it, thanks.
One suggestion: what if instead of using one "page" parameter in URL you'd use two "from" and "to" parameters to specify the message range explicitly? It's semantically equivalent. On the page you can still display pages with a little bit of arithmetic in js., 
Great suggestion Hadrian. I have logic in the code to do that. I will be using similar code found on this page: 

http://www.bzcareer.com/CA/search?keyword=Developer&local=
Note: view source to see how I did it.

As you can see you won't see a from or to anywhere in the query string. It's all handled via Ajax. 'from' and 'to' we don't need to expose to the user however I was planning on including a single parameter to avoid confusion 'page=#'. 

How about we add a drop down where a user can choose how many items will display per page ?

Thanks,
Zak
@Prospect1010
http://github.com/zmhassan
, Sure. Either that or profile settings, whatever you think is best. That can be easily changed if needed without changing the url structure and the rest of the logic., I'm able to generate pagination on the UI when the requests are small but I seem to be getting an error from the server-side "java.lang out of memory .... " when messages when the queue depth is large. I'm searching for where this bug is coming from. Pagination may sort of help but we still need to find some way of limiting the amount of messages that get displayed.
I narrowed down where the problem is coming from I suspect that is somewhere in:

https://github.com/apache/activemq/blob/trunk/activemq-web-console/src/main/java/org/apache/activemq/web/controller/SendMessage.java#L51-L79

Also I can imagine that there could me more messages being produced and consumed at the same time which we have to consider. Any suggestions on possible options? 

, I'll take a look at the updated code if you like., Here's a start of a patch that fixes the immediate OOM issue by removing the sitemesh stuff from the filterchain so everything is streamed back directly to the client without buffering.  All the .jsp are changed to include a head/header/footer jsp files that handle the formatting for those.   

This is just a start, still need to actually remove the sitemesh stuff, delete the various sitemesh specific files, etc..., On the pagination with messages being produced and consumed - I wouldn't worry about it.  Messages may be consumed or produced all the time meaning the web UI can never be fully correct.

To keep the UI as consistent as possible, perhaps the simplest approach is to just show only one page at a time., I was originally planning on making a slight change in the design. I was planning on making a restful endpoint that will display the first hundred JMS messages in queue in JSON format (one argument 'page'). It would save time and resource because we don't loop through all 200,000 items in queue. However that would make a change in the design and I was thinking there must be a way that we can reuse existing code that does web service like functionality. 

One option I was looking at was that we could use the RSS/ATOM feed with xml data and pull from it via javascript on the client-side to get the messages in queue but when I tried this, it was a really large xml file and takes a long time to load. When the number of messages grow too large I was unsuccessful in requesting it and parsing it. Perhaps if we can just display 100 messages of the 200,000 in queue that would make it an easier problem to solve. 

http://localhost:8161/admin/queueBrowse/TEST?view=rss&feedType=atom_1.0


Here is an example of how I will get the xml data from JavaScript just in case anyone would like to see the code:

https://gist.github.com/zmhassan/8702385
, Looking at the broker code, it should be feasible to modify the code to return a specific "page" of messages.  Probably pass a start message # and end message #, or start and count.

One concern is that the current method of returning messages is using ActiveMQQueueBrowser to iterate through messages, making the operation to skip to the first message requested inefficient.  One way to reduce that concern could be caching the browser in the web session.  Still looking through the code to see what's feasible on that front.

Another concern is what feasible limits do we attempt to address?  For example, message sizes on the order of the broker's available memory size are going to be impossible to process.  More realistically, should the solution assume that one page of messages will fit in memory?, Hmm, looking at the JMX destination browsing code, it looks like it may only support up to 200 messages maximum.  Is that correct?, OK, so the JMX view (browse operation on the DestinationView MBean) only supports up to 400 messages.  Found in the code and confirmed with a test (involving a lot of mouse clicks and funny stares from family members).

It would be very simple to limit the web console in the same way., In my opinion it would be the best to move off the JMS interface for browsing and do it over JMX. Next, the JMX interface should be improved to allow browsing of all available messages (at the moment that are messages that are paged in memory, but in the future we should be able to browse the whole store), in reasonable sized batches., 
Could a new JIRA be created for the pagination stuff?   That's more of a feature request.

github pull request which removes sitemesh which is the root cause of the OOM:

https://github.com/apache/activemq/pull/10

(and the OOM COULD occur on other pages such as if there are 200K queues or similar.  This pull request fixes those as well.)
, Ditto on the desire to move the entire solution to JMX - a separate ticket should be entered for that.  Dejan - will you take the lead on that effort?

Let's keep this issue about the OOM.  I think the paging solution is a nicer way to go, but we could simply limit the number of messages returned from here in the same way JMX does.  The down side being that it reduces existing functionality.

I'll keep working toward a paging solution - it's feeling close., Okay at this point I'm just testing the client side code. Every page will display 100 Jms Messages and as we paginate through it will show the next 100. I can do some optimizations but wanted  your input on the design of it. Changed a bit of the UI to look more modern using bootstrap and jQuery. 

See screenshoot:
https://www.dropbox.com/s/f8wgkae6vpgrc21/Screenshot%20from%202014-01-31%2013%3A35%3A31.png


This was done by utilizing Bootstrap 3.0 css + jQuery + teamwork  to get RSS feed data from  ActiveMQ for the first 100 messages in the queue. As we go deeper the slower it will be. I'm working on a way around that but still thinking at this point. Appreciate any feedback I'll be online at the usual times > 7pm (E.S.T).

I'll send in my pull request once I'm satisfied that everything is working 100%  test and fully functional. 

Best Regards,
Zak
“Empowerment of individuals is a key part of what makes open source work, since in the end, innovations tend to come from small groups, not from large, structured efforts.”
– Tim O’Reilly
, Patch committed with thanks to Dan Kulp.

There is no OOME thrown, tried in both Mozilla and Chrome. Without the pagination feature it takes a long time for the page to refresh. Mozilla appears to be hanging and you get a standardista-table-sorting.js unresponsive (line 404) and you have the option to continue or stop the script. Either way, the browser doesn't crash and there is no exception. 

In Chrome it's a bit nicer because of the incremental page rendering the browser is responsive at all times. One could stop loading the page though.

I even tested with two browsers trying to load the content of the TEST queue at the same time. No problems other than the large amount of memory used and longer delays in accessing the net, which is to be expected.

I believe that although the OOME issue is resolved, pagination and search features are necessary if one needs to deal with deep queues. Let's track those features as separate improvement issues., @Hadrian,

Yes I guess we can move the pagination stuff to a separate issue. , Do we have an issue for pagination?  If not, let me know and I'll create it., No we don't have an issue. Please create one and assign to me.

Thanks,
Zak
]