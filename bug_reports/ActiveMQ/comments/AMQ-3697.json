[You should try using an ActiveMQ 5.6-SHAPSHOT, or the latest FuseSource 5.5.1 release which incorporates many of the latest fixes to see if the problem is still present.  Creating a test case that reproduces the problem would also be helpful.  , Ok but does 5.6.0 is suitable for production ?

I have patched my 5.5.1 version with AMQ-3454 for performance reasons. Does this fix is included in FuseSource 5.5.1 ?

And alseo what is the difference between ActiveMQ and FuseSource ?

Thanks., I am able to reproduce the problem. The scenario is the following.

Send a lot of messages, let's say hundreds very quickly on one topic with one consumer. Messages are consumed and suddently (I think when the send rate is too high)  messages stopped to be consume. I run the debugger and I can see that when the prefetch size is higher than the dispatched count the topic is condiered as full and messages are not dispatched to the consumer.

The situation can only get back to normal when the consumer is restarted because the counters change.

So Here are my questions : 

* What does dispatchCount, dequeueCount, etc mean ? 
* Do I have to adjust message acknowledgement and prefetch size ?
* Does the fact that dequeue count never increase means that the consumers are blocked ?

, I think my consumers are considered as durable consumers but I have configured my broker to be non persistent => so prefetch limit is 100.

How shoud I configure my consumer to be a non durable consumer ?, I changed my config in order to not reach the prefetch limit (limit is very high) and put a thread pool in order to process messages on the consumer side (the message listener only submit a task to the thread pool and ack).

Did you have any issue about a consumer that stop sendings acks ? From my understanding the only thing that can make the broker buffer messages is that the acks are not send back, am I right ?

Thanks., Would be interesting if you could create a junit test case that can reproduce your issue., Acks do not seem to be sent by the consumer in this scenario - we need a test case to see why this is happening - downgrading to major as this looks like a client implementation problem, Not test case provided and am not able to reproduce it.]