[Would be great if you could throw together a JUnit test for this., Created a little test case to demonstrate the issue., Updated test, old version wasn't quite right., fix applied in trunk., Not sure if we have exactly the same problem but it looks pretty familiar.
We gave the snapshot a try, unfortunately we still have very similar problems as described by Jim.
Same as above: GC seems to work fine with destinations that are available after restart but not with dynamically created ones.
Also queues that were created before restart dynamically and still have some load work fine (as the server creates them on startup).

Here is our configuration.

{code:xml}
<destinationInterceptors>
  <mirroredQueue copyMessage = "true" postfix=".qmirror" prefix=""/>
</destinationInterceptors>
<destinationPolicy>
  <policyMap>
    <policyEntries>
      <policyEntry topic="testQueue.>" producerFlowControl="false" memoryLimit="1 mb" optimizedDispatch="true"></policyEntry>
      <policyEntry queue="testQueue.>" producerFlowControl="false" memoryLimit="1 mb" optimizedDispatch="true"></policyEntry>
    </policyEntries>
  </policyMap>
</destinationPolicy>

<persistenceAdapter>
  <kahaDB directory="${activemq.base}/data/kahadb"/>
</persistenceAdapter>

<systemUsage>
  <systemUsage>
    <memoryUsage>
      <memoryUsage limit="10 mb"/>
    </memoryUsage>
    <storeUsage>
      <storeUsage limit="10 gb"/>
    </storeUsage>
    <tempUsage>
      <tempUsage limit="10 mb"/>
    </tempUsage>
  </systemUsage>
</systemUsage>
{code} 

Would you mind to reopen this issue? 
We use mirrors a lot. From our point of view this could lead to OOM, so we think the priority could/should be increased.

Regards
Darius]