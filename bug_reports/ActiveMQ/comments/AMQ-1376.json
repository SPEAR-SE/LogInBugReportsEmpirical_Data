[This problem doesn't just prevent redelivery.  The thread assigned to that STOMP connection never gets released.  Over time, these unused threads build up until some limit is reached and broker becomes unresponsive., I believe that the improved connection shutdown code in the current trunk should resolve this issue.  Could you re-test against trunk and let me know if you still see the same thing?
, Please provide feedback regarding this issue and whether it been fixed in the latest release of ActiveMQ (5.3). If there is no feedback, this issue will be closed. , This problem still persists with 5.3.0, MQ doesn't close teh connection cleanly.

2009-12-08 17:00:07,762 | DEBUG | Stopped transport: /10.52.68.200:37123 | org.apache.activemq.broker.TransportConnection | ActiveMQ Transport Stopper: /10.52.68.200:37123
2009-12-08 17:00:07,762 | DEBUG | Cleaning up connection resources: /10.52.68.200:37123 | org.apache.activemq.broker.TransportConnection | ActiveMQ Transport Stopper: /10.52.68.200:37123
2009-12-08 17:00:07,762 | DEBUG | Connection Stopped: /10.52.68.200:37123 | org.apache.activemq.broker.TransportConnection | ActiveMQ Transport Stopper: /10.52.68.200:37123
2009-12-08 17:00:07,763 | DEBUG | Transport failed: java.io.EOFException | org.apache.activemq.broker.TransportConnection.Transport | ActiveMQ Transport: tcp:///10.52.68.200:37122
java.io.EOFException
        at java.io.DataInputStream.readByte(DataInputStream.java:243)
        at org.apache.activemq.transport.stomp.StompWireFormat.readLine(StompWireFormat.java:186)
        at org.apache.activemq.transport.stomp.StompWireFormat.unmarshal(StompWireFormat.java:94)
        at org.apache.activemq.transport.tcp.TcpTransport.readCommand(TcpTransport.java:210)
        at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:202)
        at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:185)
        at java.lang.Thread.run(Thread.java:595), May be it exists also in 5.4.0 and in 5.4.1. After one wrong action this exception will be written in log without stop: but all messages will be processed in the same time also... only log file is growing!

2010-10-04 18:17:57,649 | INFO  | Transport failed: java.io.EOFException | org.apache.activemq.broker.TransportConnection.Transport | ActiveMQ Transport: tcp:///172.16.1.25:24396
java.io.EOFException
	at java.io.DataInputStream.readByte(DataInputStream.java:243)
	at org.apache.activemq.transport.stomp.StompWireFormat.readLine(StompWireFormat.java:146)
	at org.apache.activemq.transport.stomp.StompWireFormat.parseAction(StompWireFormat.java:162)
	at org.apache.activemq.transport.stomp.StompWireFormat.unmarshal(StompWireFormat.java:92)
	at org.apache.activemq.transport.tcp.TcpTransport.readCommand(TcpTransport.java:226)
	at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:218)
	at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:201)
	at java.lang.Thread.run(Thread.java:595)
, It also exists in 5.4.1.

The exception is constantly printed in the console window where AMQ is started from., We have been in production with a ruby on rails app using Stomp to put messages in queues in AMQ 5.3.0 for 6 months. We never saw these messages. We are now in the process of testing an upgrade to AMQ 5.4.2 and we started to get the following:
2011-02-21 13:13:23,464 | DEBUG | Transport failed: java.io.EOFException | org.apache.activemq.broker.TransportConnection.Transport | ActiveMQ Transport: tcp:///172.20.10.127:43880
java.io.EOFException
        at java.io.DataInputStream.readByte(DataInputStream.java:250)
        at org.apache.activemq.transport.stomp.StompWireFormat.readLine(StompWireFormat.java:146)
        at org.apache.activemq.transport.stomp.StompWireFormat.parseAction(StompWireFormat.java:162)
        at org.apache.activemq.transport.stomp.StompWireFormat.unmarshal(StompWireFormat.java:92)
        at org.apache.activemq.transport.tcp.TcpTransport.readCommand(TcpTransport.java:227)
        at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:219)
        at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:202)
        at java.lang.Thread.run(Thread.java:619)
2011-02-21 13:13:23,470 | DEBUG | Stopping connection: /172.20.10.127:43880 | org.apache.activemq.broker.TransportConnection | ActiveMQ Task
2011-02-21 13:13:23,470 | DEBUG | Stopping transport tcp:///172.20.10.127:43880 | org.apache.activemq.transport.tcp.TcpTransport | ActiveMQ Task
2011-02-21 13:13:23,477 | DEBUG | Stopped transport: /172.20.10.127:43880 | org.apache.activemq.broker.TransportConnection | ActiveMQ Task

The only change in the environment is the AMQ upgrade.

In our testing we are pushing load and not seeing any lost messages. I have seen comments like this in various places (http://activemq.2283324.n4.nabble.com/Continuous-Transport-Failures-Moments-Before-STOMP-Connections-Close-tp2952079p2953913.html):

this log just indicate that connection is lost, it's no indication of
an error. We recently raised the level of these messages to catch some
other situations, so they now shows with the INFO level in standard
logs

This sounds reasonable but Can I really just ignore this? At any rate it looks like the issue still exists.
, This is in some ways related to AMQ-3393.  There is also the fact that Stomp 1.0 doesn't allow for a keep alive so sometimes connection drops aren't detected.  The processing logic for dropped connections has been improved quite a bit so the queued messages should be redelivered to another client if the dropped connection is detected.  

Reopen if the problem persists.]