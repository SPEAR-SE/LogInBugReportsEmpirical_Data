[Attaching my test program that reproduces the issue.  It has three variables:

 - url: The URL of your local ActiveMQ server

 - watchTopicAdvisories: Set to 'true' to reproduce the problem, set to 'false' to test the workaround.

 - delay: set to '0' to reproduce the problem.  Set to at least 500-1000 to alleviate the problem, although the error can still occur., This is expected behaviour given the way the test is structured.  The test creates a temp queue on one connection and then uses it on a newly created connection which is not how this work normally work in practice.  Normally the temp queue would arrive in the reply to of an incoming message (request / response pattern) in which case the advisory for creation of that temp queue would have already been dispatched to the remote consumer so it wouldn't see this problem.  The solution to the problem is just what you have done, turn off watchTopicAdvisories in the connection factory.  , Unfortunately, calling setWatchTopicAdvisories() is not an option as the original environment was using JNDI to connect to ActiveMQ.  I couldn't find any way to set that parameter through JNDI.  Our only workaround was to restructure how the application worked, which is not always an option for us.

It also seems like if I had any kind of appreciable churn on temp queues and more than handful of open connections then I would want this feature turned off purely for performance reasons.  In normal usage, only one connection is ever going to care about any given temp queue., You can set these options on the Connection URI, for example: tcp://localhost:61616?jms.watchTopicAdvisories=false, Things appear to be working as designed.  There is a workaround for the use case presented which is to add the watchTopicAdvisories=false to the connection URI. , Agreed.  I'm not happy about it, but the workarounds are acceptable., I'm seeing the same issue with a single connection creating a temporary queue and sending a request/response to a network of brokers. The  message is sporadically delivered before the temporary queue is available in the remote broker, resulting in the same error/stacktrace when sending the reply. 

Should the issue be reopened?, Does adding '?jms.watchTopicAdvisories=false' or otherwise disabling the topic advisories feature on your responding connection fix the issue?, Yes. Without topic advisories it works fine.
Here's some interesting log entries from the receiver. The queue seems to be created prior to send. Version is 5.13.1
...
2016-02-18 01:15:22,683 131622 ActiveMQ VMTransport: vm://leoz-aq-86c3ca5c3a347577744055d910d00c6fa9811a53#3-3 org.apache.activemq.broker.region.AbstractRegion DEBUG - leoz-aq-86c3ca5c3a347577744055d910d00c6fa9811a53 adding destination: temp-queue://ID:agnus.o81.5-57628-1455753254297-7:1:99
2016-02-18 01:15:22,683 131622 DefaultMessageListenerContainer-1 org.deku.leoz.node.data.sync.EntityPublisher ERROR - Cannot publish to a deleted Destination: temp-queue://ID:agnus.o81.5-57628-1455753254297-7:1:99
javax.jms.InvalidDestinationException: Cannot publish to a deleted Destination: temp-queue://ID:agnus.o81.5-57628-1455753254297-7:1:99
	at org.apache.activemq.ActiveMQSession.send(ActiveMQSession.java:1904)
	at org.apache.activemq.ActiveMQMessageProducer.send(ActiveMQMessageProducer.java:288)
	at org.apache.activemq.ActiveMQMessageProducer.send(ActiveMQMessageProducer.java:223)
	at org.apache.activemq.jms.pool.PooledProducer.send(PooledProducer.java:95)
	at org.apache.activemq.jms.pool.PooledProducer.send(PooledProducer.java:66)
	at org.deku.leoz.node.data.sync.EntityPublisher.onMessage(EntityPublisher.kt:99)
	at sx.jms.listeners.SpringJmsListener.access$onMessage(SpringJmsListener.kt:18)
	at sx.jms.listeners.SpringJmsListener$start$1.onMessage(SpringJmsListener.kt:55)
...
2016-02-18 01:15:27,699 136638 ActiveMQ VMTransport: vm://leoz-aq-86c3ca5c3a347577744055d910d00c6fa9811a53#3-4 org.apache.activemq.broker.region.AbstractRegion DEBUG - leoz-aq-86c3ca5c3a347577744055d910d00c6fa9811a53 removing destination: temp-queue://ID:agnus.o81.5-57628-1455753254297-7:1:99
...

, That's a fairly damning log sequence.  But because there appear to be two threads involved, the order in which things are logged are not necessarily the order in which they occurred.  The first two lines have the same exact timestamp but different threads, so the order in which they are logged is more up to chance than anything else.

Still, I think the fact that you're able to see the issue without the "unusual" application structure I was using is a good enough reason to reopen this.  However, I suspect the answer will be the same; to just disable watchTopicAdvisories.  I'm currently recommending to everyone who uses temp queues with ActiveMQ to add 'jms.watchTopicAdvisories=false' to their URL.]