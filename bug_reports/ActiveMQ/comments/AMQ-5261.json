[If you notice the screenshot we have 870MB  in the Repository which basically holds on to the JMX ObjectNames. 
Starting from this release when I try and delete the topic it leaves the folder in the JMX beans in jconsole for the ActiveMQ process.
, Have you test against the latest release (5.10)?  Do you have a test case that can show left over MBeans?, I couldn't find a ticket in this site that dealt with changes with the way the topics were destroyed or the JMX beans were destroyed to be able to try the latest version of activeMQ.
I could try it anyway. This is on our production servers, so I have to make sure we reproduce it in house.
I don't have a test case to prove this, I think I need to create one. Let me try it.
, Alright, I managed to attach a test case that will create the topic and when the consumer gets destroyed activeMQ never cleans this topic from the mbeans., Ok, looks like I could solve this problem by fixing my topic name creation and use the same name through out the life cycle of the broker, instead of generating unique names., I think I found the problem, Looks like 1 topic is creating multiple producers. Causing the JMX beans to exponentially increase over period of time., So this seems to indicate that the problem lies with your application and not a Broker issue.  If that's incorrect we need a small self contained JUnit test that demonstrates the issue., I am closing this issue because I can resolve this issue by using PooledConnectionFactory instead of CachingConnectionFactory.
PooledConnectionFactory seems to create a singleton producer. Which should solve my problem of creating infinite JMX topics which eventually runs out of memory.
Right now the topics are getting cleaned up appropriately.]