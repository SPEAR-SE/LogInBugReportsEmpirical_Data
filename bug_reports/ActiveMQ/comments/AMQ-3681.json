[Another problem that can occur : 
when the network cable is unplugged, the ActiveMQ shutdown hook freezes because it cannot close the connection, which is locked by the "DefaultDatabaseLocker.keepAlive" method.  The "kill" command does not work, "kill -9" is needed.
Here is a second patch that also fixes this problem.
{code}
"ActiveMQ ShutdownHook" daemon prio=5 Thread id=73 BLOCKED
	oracle.jdbc.driver.PhysicalConnection.isClosed(PhysicalConnection.java:1223)
	org.apache.commons.dbcp.DelegatingConnection.isClosed(DelegatingConnection.java:386)
	org.apache.commons.dbcp.DelegatingConnection.isClosed(DelegatingConnection.java:386)
	org.apache.commons.dbcp.PoolingDataSource$PoolGuardConnectionWrapper.isClosed(PoolingDataSource.java:201)
	org.apache.activemq.store.jdbc.DefaultDatabaseLocker.stop(DefaultDatabaseLocker.java:137)
	org.apache.activemq.store.jdbc.JDBCPersistenceAdapter.stop(JDBCPersistenceAdapter.java:328)
	org.apache.activemq.util.ServiceStopper.stop(ServiceStopper.java:41)
	org.apache.activemq.broker.BrokerService.stop(BrokerService.java:583)
	org.apache.activemq.broker.BrokerService.containerShutdown(BrokerService.java:1971)
	org.apache.activemq.broker.BrokerService$4.run(BrokerService.java:1938)
{code}, patch applied in SVN revision 1325621, Unfortunately the embedded derby jdbc store used in the unit tests does not support java.sql.Statement#setQueryTimeout

We need to use it in an oracle specific lock implementation of make its use configurable

org.apache.activemq.usecases.JdbcDurableSubDupTest demonstrates, hmm. well derby should have it once we upgrade[1], can any one easily validate mysql or mssqlserver?

[1] https://issues.apache.org/jira/browse/DERBY-31, junit tests are ok with the latest derby and looks like current versions of mysql and mssqlserver have support but not postgresql.
Making this conditional on queryTimeout attribute > 0 to that it can be disabled via configuration on the default database locker. Default value 10seconds.

http://svn.apache.org/viewvc?rev=1326610&view=rev
]