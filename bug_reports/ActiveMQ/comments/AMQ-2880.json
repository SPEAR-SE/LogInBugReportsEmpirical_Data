[Just a note to simulate the real lock timeout exception using MySQL you can just lock some rows in the table, for example:

start transaction;
select id from activemq_msgs limit 10 for update;

then try and consume some messages.  ActiveMQ will get block and then get a lock timeout when it hits these locked rows.  Then release the lock with:

commit;

after consuming all of the messages in the queue that you can you'll see those locked rows are still in the table and hadn't been consumed., This shows the problem better, as each time a new consumer is created to receive a message from the queue a message is lost., https://issues.apache.org/activemq/browse/AMQ-2551 - can result from the checkpoint thread, the fix to this issue ensures that there are no adverse effects to it occurring save the failure of the current operation., resolved in r991218

a jms transaction rollback was needed in the even of a store failure on an ack. in addition test case needed maxredeliveries > numMessages to ensure replayed messages were not sent to dlq.
fix an test from patch applied with thanks., This problem also occurs with XA transactions (like in the example stack trace) so we need a similar fix for this scenario., This should take care of XA transactions., Here's a test for XATransaction.  I'm finding however that catching the exception within commit and calling rollback() from there doesn't seem to fix the issue.  Instead it seems like the message is effectively lost, as when the dummy persistent store throws it's exception the message is out of the database, I wouldn't have expected that.  Also to properly rollback in the client I had to call XAResource.start() for some reason, also a bit unexpected.  Anyway, am also attaching the changes I had done to XATransaction.java., r995119 
new xa test variant from patch applied. thanks for the work on this one. XA case is now sorted.

]