[To reproduce this you'll need the following:

1.  Latest ActiveMQ source code from cvs
2.  JBoss 4.0.1RC1
3.  Sample code in the attached zip file.

Setup: 
1.  Build the ActiveMQ source code
2.  Download and install JBoss 4.0.1RC1
3.  Unzip the attached zip file and run 'maven default' on it.

Running the test (for windows):
1.  Run <activemq_cvs_home>\modules\assembly\target\activemq-1.2-SNAPSHOT\bin\activemq.bat 
2.  Run <jboss-4.0.1RC1_home>\bin\run.bat
3.  Copy <activemq_cvs_home>\modules\ra\target\activemq-ra-1.2-SNAPSHOT.rar to <jboss-4.0.1RC1_home>\server\default\deploy
4.  Wait a second or two for JBoss to complete the rar file deployment
5.  Copy <mdb_test_home>\target\mdb-test-1.0.jar to <jboss-4.0.1RC1_home>\server\default\deploy
6.  Open a command window at <mdb_test_home>
7.  Run 'maven send-message' 
8.  Run 'maven send-message' again

I'll add a log file that traces many of the method calls from the above shortly., To help debug this, I created an aspectj module that logged every method call plus the parameters passed into the method and every method exit.  If you look in the attached file 'trace.log' you can see the calls being made in the connector.  I only logged method calls within classes in the following packages:
  -org.codehaus.activemq.ra 
  -org.codehaus.activemq
  -org.codehaus.activemq.broker 
  -org.codehaus.activemq.broker.impl 
  -org.codehaus.activemq.store.vm

The log file has five columns as follows:
Column 1: timestamp
Column 2: thread
Column 3: log4j NDC (set by JBoss)
Column 4: method entry/exit and call stack depth indicator
Column 5: class and method name with method parameters listed on method entry

Column 4 indicates method entry with an arrow like this: --> and method exit with an arrow like this <-- .  A dash is added or removed to indicate depth within the call stack.

Here are a couple of key moments within the log file:
Line 24 - the rar file finishes deployment
Line 232 - the ejb jar file finishes deployment
Line 428 - processing of message one finishes
Line 723 - processing of message two finishes
Line 1018 - processing of message three finishes
Line 1105 - JBoss finishes shutdown (last entry)

If you look at the processing of the first message, it appears to me that JBoss is following the JCA inflow XA protocol for a one phase commit.  You can see the following calls in the log file: 
  -start (lines 346-357)
  -message delivery (lines 358-367)
  -end (lines 368-375)
  -commit (lines 376-383)

I also noticed that after the XA commit is called, the ActiveMQSession.messageDelivered gets called (lines 389-412) and within that call, a local transaction is started by the ActiveMQRASession.doStartTransaction method (lines 394-405) but it appears that it is never committed.  That seems odd to me.  Is that the correct behavior?  Does this have anything to do with the exception being thrown when delivery of the second message is attempted? 

Aside from the local transaction question above, I still can't figure out why the XA transaction commit call does not result in the removal of the message from queue.  Is that the correct behavior?

This is all of the analysis I've been able to do up till now.  I'm finding it difficult to go much further because I don't yet understand how the broker works to support XA transactions.  Any help on this would be greatly appreciated., Just want to say great bug report!  I will they were all this detailed!    MDB have not been working in Geronimo either.  Starting to dig into this., Thanks!  Please let me know if I can help.  I'm still learning my way around the code base, so any pointers on which direction to look would be great., I've been doing a ton of work on this issue for the last two days.  Lots of learning about the system and transactions (great stuff!).  Do you mind if I take over as the assignee?  I know you have lots on your plate and I would hate for us to be duplicating effort., Michael, if you wanna be able to assign stuff to yourself, mail me your email address you used to register with JIRA and I can grant you karma., Hiram's changes of the ServerSessionImpl class to use the MessageEndpoint's beforeDelivery(..) and afterDelivery() methods resolved this issue.  Thanks Hiram!]