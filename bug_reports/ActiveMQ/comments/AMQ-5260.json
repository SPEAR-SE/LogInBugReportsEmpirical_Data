[This is what one sees in remote debug if stops the thread _ActiveMQ NIO Worker 12_ reported in the stacktraces above:

!debug.jpg!


*DemandForwardingBridgeSupport.java, line 714*, I tried with the following patch (see patch attachment *AMQ_5260.patch*):
{noformat}
--- \activemq-parent-5.9.0-orig\activemq-broker\src\main\java\org\apache\activemq\network\DemandForwardingBridgeSupport.java	Tue Oct 15 00:41:46 2013
+++ \activemq-parent-5.9.0\activemq-broker\src\main\java\org\apache\activemq\network\DemandForwardingBridgeSupport.java	Thu Jul 10 11:51:44 2014
@@ -30,6 +30,8 @@
 import java.util.concurrent.TimeoutException;
 import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.concurrent.atomic.AtomicLong;
+import java.util.concurrent.locks.Lock;
+import java.util.concurrent.locks.ReentrantLock;
 
 import javax.management.ObjectName;
 
@@ -125,6 +127,8 @@
     private Transport duplexInboundLocalBroker = null;
     private ProducerInfo duplexInboundLocalProducerInfo;
 
+    private static final Lock consumerInfoLock = new ReentrantLock(); 
+    
     public DemandForwardingBridgeSupport(NetworkBridgeConfiguration configuration, Transport localBroker, Transport remoteBroker) {
         this.configuration = configuration;
         this.localBroker = localBroker;
@@ -708,11 +712,16 @@
                 return;
             }
 
+            /* ------------------------- AMQ-5260 start ----------------------- */
             // in a cyclic network there can be multiple bridges per broker that can propagate
             // a network subscription so there is a need to synchronize on a shared entity
-            synchronized (brokerService.getVmConnectorURI()) {
-                addConsumerInfo(info);
-            }
+//            synchronized (brokerService.getVmConnectorURI()) {
+//                addConsumerInfo(info);
+//            }
+            // the lock has been moved in the addConsumerInfo method to overcome the AMQ-5260
+            addConsumerInfo(info);
+            /* ------------------------- AMQ-5260 end ------------------------- */
+            
         } else if (data.getClass() == DestinationInfo.class) {
             // It's a destination info - we want to pass up information about temporary destinations
             final DestinationInfo destInfo = (DestinationInfo) data;
@@ -1115,20 +1124,31 @@
     }
 
     protected void addConsumerInfo(final ConsumerInfo consumerInfo) throws IOException {
-        ConsumerInfo info = consumerInfo.copy();
-        addRemoteBrokerToBrokerPath(info);
-        DemandSubscription sub = createDemandSubscription(info);
-        if (sub != null) {
-            if (duplicateSuppressionIsRequired(sub)) {
-                undoMapRegistration(sub);
-            } else {
-                if (consumerInfo.isDurable()) {
-                    sub.getDurableRemoteSubs().add(new SubscriptionInfo(sub.getRemoteInfo().getClientId(), consumerInfo.getSubscriptionName()));
-                }
-                addSubscription(sub);
-                LOG.debug("{} new demand subscription: {}", configuration.getBrokerName(), sub);
-            }
-        }
+    	boolean addSubscription = false;
+    	DemandSubscription sub = null;
+    	consumerInfoLock.lock();
+    	try{
+    		ConsumerInfo info = consumerInfo.copy();
+    		addRemoteBrokerToBrokerPath(info);
+    		sub = createDemandSubscription(info);
+    		if (sub != null) {
+    			if (duplicateSuppressionIsRequired(sub)) {
+    				undoMapRegistration(sub);
+    			} else {
+    				if (consumerInfo.isDurable()) {
+    					sub.getDurableRemoteSubs().add(new SubscriptionInfo(sub.getRemoteInfo().getClientId(), consumerInfo.getSubscriptionName()));
+    				}
+    				addSubscription = true;
+    				LOG.debug("{} new demand subscription: {}", configuration.getBrokerName(), sub);
+    			}
+    		}
+    	}finally{
+    		consumerInfoLock.unlock();
+    	}
+    	if(addSubscription && sub != null) {
+    		addSubscription(sub);
+    		LOG.debug("{} new demand subscription: {} has beed added", configuration.getBrokerName(), sub);
+    	}
     }
 
     private void undoMapRegistration(DemandSubscription sub) {
{noformat}

But in I run into another deadlock:

STACKTRACE 1:
{noformat}
Name: ActiveMQ BrokerService[master2] Task-106
State: WAITING on java.util.concurrent.locks.ReentrantLock$NonfairSync@2c8aad83 owned by: ActiveMQ Transport: tcp:///10.0.1.219:61616@64215
Total blocked: 0  Total waited: 6

Stack trace: 
 sun.misc.Unsafe.park(Native Method)
java.util.concurrent.locks.LockSupport.park(Unknown Source)
java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(Unknown Source)
java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(Unknown Source)
java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(Unknown Source)
java.util.concurrent.locks.ReentrantLock$NonfairSync.lock(Unknown Source)
java.util.concurrent.locks.ReentrantLock.lock(Unknown Source)
org.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:66)
org.apache.activemq.transport.ResponseCorrelator.oneway(ResponseCorrelator.java:60)
org.apache.activemq.network.DemandForwardingBridgeSupport.serviceLocalCommand(DemandForwardingBridgeSupport.java:930)
org.apache.activemq.network.DemandForwardingBridgeSupport$2.onCommand(DemandForwardingBridgeSupport.java:177)
org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:116)
org.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:50)
org.apache.activemq.transport.vm.VMTransport.doDispatch(VMTransport.java:138)
org.apache.activemq.transport.vm.VMTransport.dispatch(VMTransport.java:127)
   - locked java.util.concurrent.atomic.AtomicBoolean@591f9578
org.apache.activemq.transport.vm.VMTransport.oneway(VMTransport.java:104)
org.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:68)
org.apache.activemq.transport.ResponseCorrelator.oneway(ResponseCorrelator.java:60)
org.apache.activemq.broker.TransportConnection.dispatch(TransportConnection.java:1339)
org.apache.activemq.broker.TransportConnection.processDispatch(TransportConnection.java:858)
org.apache.activemq.broker.TransportConnection.iterate(TransportConnection.java:904)
org.apache.activemq.thread.PooledTaskRunner.runTask(PooledTaskRunner.java:129)
org.apache.activemq.thread.PooledTaskRunner$1.run(PooledTaskRunner.java:47)
java.util.concurrent.ThreadPoolExecutor$Worker.runTask(Unknown Source)
java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
java.lang.Thread.run(Unknown Source)
{noformat}

----
STACKTRACE 2:
{noformat}
Name: ActiveMQ Transport: tcp:///10.0.1.219:61616@64215
State: WAITING on java.util.concurrent.locks.ReentrantLock$NonfairSync@76455420 owned by: ActiveMQ BrokerService[master2] Task-106
Total blocked: 11  Total waited: 11

Stack trace: 
 sun.misc.Unsafe.park(Native Method)
java.util.concurrent.locks.LockSupport.park(Unknown Source)
java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(Unknown Source)
java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(Unknown Source)
java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(Unknown Source)
java.util.concurrent.locks.ReentrantLock$NonfairSync.lock(Unknown Source)
java.util.concurrent.locks.ReentrantLock.lock(Unknown Source)
org.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:66)
org.apache.activemq.transport.ResponseCorrelator.oneway(ResponseCorrelator.java:60)
org.apache.activemq.broker.TransportConnection.dispatch(TransportConnection.java:1339)
org.apache.activemq.broker.TransportConnection.processDispatch(TransportConnection.java:858)
org.apache.activemq.broker.TransportConnection.dispatchSync(TransportConnection.java:818)
org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:151)
org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:116)
org.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:50)
org.apache.activemq.transport.vm.VMTransport.doDispatch(VMTransport.java:138)
org.apache.activemq.transport.vm.VMTransport.dispatch(VMTransport.java:127)
   - locked java.util.concurrent.atomic.AtomicBoolean@278a1cfb
org.apache.activemq.transport.vm.VMTransport.oneway(VMTransport.java:104)
org.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:68)
org.apache.activemq.transport.ResponseCorrelator.asyncRequest(ResponseCorrelator.java:81)
org.apache.activemq.transport.ResponseCorrelator.request(ResponseCorrelator.java:86)
org.apache.activemq.network.DemandForwardingBridgeSupport.addSubscription(DemandForwardingBridgeSupport.java:865)
org.apache.activemq.network.DemandForwardingBridgeSupport.addConsumerInfo(DemandForwardingBridgeSupport.java:1149)
org.apache.activemq.network.DemandForwardingBridgeSupport.serviceRemoteConsumerAdvisory(DemandForwardingBridgeSupport.java:722)
org.apache.activemq.network.DemandForwardingBridgeSupport.serviceRemoteCommand(DemandForwardingBridgeSupport.java:585)
org.apache.activemq.network.DemandForwardingBridgeSupport$3.onCommand(DemandForwardingBridgeSupport.java:195)
org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:116)
org.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:50)
org.apache.activemq.transport.failover.FailoverTransport$3.onCommand(FailoverTransport.java:196)
org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:113)
org.apache.activemq.transport.AbstractInactivityMonitor.onCommand(AbstractInactivityMonitor.java:270)
org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83)
org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:214)
org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:196)
java.lang.Thread.run(Unknown Source)
{noformat}
This time the locks involved are _org.apache.activemq.transport.vm.VMTransport.started_ and  again the _org.apache.activemq.transport.MutexTransport.writeLock_ one.

Am I following a red herring here?, I tried to fix the second deadlock with the patch contained in *AMQ_5260_2.patch*.


After few hours I run into another deadlock: this is due to the fact that _org.apache.activemq.transport.MutexTransport.writeLock_ is not static. This cause different instances of transports (in our case VMTransport and Failover/Openwire Transport) to cross different writeLock barriers in different order (see stacktraces below)

STACKTRACE 1
{noformat}
Name: ActiveMQ BrokerService[master2] Task-119
State: WAITING on java.util.concurrent.locks.ReentrantLock$NonfairSync@766eae77 owned by: ActiveMQ Transport: tcp:///10.0.1.219:61616@64702
Total blocked: 1  Total waited: 94

Stack trace: 
 sun.misc.Unsafe.park(Native Method)
java.util.concurrent.locks.LockSupport.park(Unknown Source)
java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(Unknown Source)
java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(Unknown Source)
java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(Unknown Source)
java.util.concurrent.locks.ReentrantLock$NonfairSync.lock(Unknown Source)
java.util.concurrent.locks.ReentrantLock.lock(Unknown Source)
org.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:66)
org.apache.activemq.transport.ResponseCorrelator.oneway(ResponseCorrelator.java:60)
org.apache.activemq.network.DemandForwardingBridgeSupport.serviceLocalCommand(DemandForwardingBridgeSupport.java:930)
org.apache.activemq.network.DemandForwardingBridgeSupport$2.onCommand(DemandForwardingBridgeSupport.java:177)
org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:116)
org.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:50)
org.apache.activemq.transport.vm.VMTransport.doDispatch(VMTransport.java:170)
org.apache.activemq.transport.vm.VMTransport.dispatch(VMTransport.java:157)
org.apache.activemq.transport.vm.VMTransport.oneway(VMTransport.java:112)
org.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:68)
org.apache.activemq.transport.ResponseCorrelator.oneway(ResponseCorrelator.java:60)
org.apache.activemq.broker.TransportConnection.dispatch(TransportConnection.java:1339)
org.apache.activemq.broker.TransportConnection.processDispatch(TransportConnection.java:858)
org.apache.activemq.broker.TransportConnection.iterate(TransportConnection.java:904)
org.apache.activemq.thread.PooledTaskRunner.runTask(PooledTaskRunner.java:129)
org.apache.activemq.thread.PooledTaskRunner$1.run(PooledTaskRunner.java:47)
java.util.concurrent.ThreadPoolExecutor$Worker.runTask(Unknown Source)
java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
java.lang.Thread.run(Unknown Source)
{noformat}

----

STACKTRACE 2

{noformat}
Name: ActiveMQ Transport: tcp:///10.0.1.219:61616@64702
State: WAITING on java.util.concurrent.locks.ReentrantLock$NonfairSync@61e2cf66 owned by: ActiveMQ BrokerService[master2] Task-119
Total blocked: 8  Total waited: 22

Stack trace: 
 sun.misc.Unsafe.park(Native Method)
java.util.concurrent.locks.LockSupport.park(Unknown Source)
java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(Unknown Source)
java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(Unknown Source)
java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(Unknown Source)
java.util.concurrent.locks.ReentrantLock$NonfairSync.lock(Unknown Source)
java.util.concurrent.locks.ReentrantLock.lock(Unknown Source)
org.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:66)
org.apache.activemq.transport.ResponseCorrelator.oneway(ResponseCorrelator.java:60)
org.apache.activemq.broker.TransportConnection.dispatch(TransportConnection.java:1339)
org.apache.activemq.broker.TransportConnection.processDispatch(TransportConnection.java:858)
org.apache.activemq.broker.TransportConnection.dispatchSync(TransportConnection.java:818)
org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:151)
org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:116)
org.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:50)
org.apache.activemq.transport.vm.VMTransport.doDispatch(VMTransport.java:170)
org.apache.activemq.transport.vm.VMTransport.dispatch(VMTransport.java:157)
org.apache.activemq.transport.vm.VMTransport.oneway(VMTransport.java:112)
org.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:68)
org.apache.activemq.transport.ResponseCorrelator.asyncRequest(ResponseCorrelator.java:81)
org.apache.activemq.transport.ResponseCorrelator.request(ResponseCorrelator.java:86)
org.apache.activemq.network.DemandForwardingBridgeSupport.addSubscription(DemandForwardingBridgeSupport.java:865)
org.apache.activemq.network.DemandForwardingBridgeSupport.addConsumerInfo(DemandForwardingBridgeSupport.java:1149)
org.apache.activemq.network.DemandForwardingBridgeSupport.serviceRemoteConsumerAdvisory(DemandForwardingBridgeSupport.java:722)
org.apache.activemq.network.DemandForwardingBridgeSupport.serviceRemoteCommand(DemandForwardingBridgeSupport.java:585)
org.apache.activemq.network.DemandForwardingBridgeSupport$3.onCommand(DemandForwardingBridgeSupport.java:195)
org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:116)
org.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:50)
org.apache.activemq.transport.failover.FailoverTransport$3.onCommand(FailoverTransport.java:196)
org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:113)
org.apache.activemq.transport.AbstractInactivityMonitor.onCommand(AbstractInactivityMonitor.java:270)
org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83)
org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:214)
org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:196)
java.lang.Thread.run(Unknown Source)
{noformat}

To solve this last deadlock I applied the *AMQ_5260_3.patch*:
{noformat}
--- activemq-parent-5.9.0-orig\activemq-client\src\main\java\org\apache\activemq\transport\MutexTransport.java	Tue Oct 15 00:41:46 2013
+++ activemq-parent-5.9.0\activemq-client\src\main\java\org\apache\activemq\transport\MutexTransport.java	Fri Jul 11 08:43:22 2014
@@ -24,7 +24,7 @@
  */
 public class MutexTransport extends TransportFilter {
 
-    private final ReentrantLock writeLock = new ReentrantLock();
+    private static final ReentrantLock writeLock = new ReentrantLock();
     private boolean syncOnCommand;
 
     public MutexTransport(Transport next) {
{noformat}
I don't know if this is a good idea... any advice would be welcome here., I upgraded AMQ to 5.10.0 (thus rolling back all my awkward and tenantive patches) and I detected the very same deadlock:

{noformat}
Name: ActiveMQ NIO Worker 4006
State: BLOCKED on java.net.URI@5602eaf4 owned by: ActiveMQ Transport: tcp:///10.0.1.219:61616@58001
Total blocked: 1  Total waited: 3

Stack trace: 
 org.apache.activemq.network.DemandForwardingBridgeSupport.serviceRemoteConsumerAdvisory(DemandForwardingBridgeSupport.java:763)
org.apache.activemq.network.DemandForwardingBridgeSupport.serviceRemoteCommand(DemandForwardingBridgeSupport.java:614)
org.apache.activemq.network.DemandForwardingBridgeSupport$3.onCommand(DemandForwardingBridgeSupport.java:224)
org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:116)
org.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:50)
org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:113)
org.apache.activemq.transport.AbstractInactivityMonitor.onCommand(AbstractInactivityMonitor.java:270)
org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83)
org.apache.activemq.transport.nio.NIOTransport.serviceRead(NIOTransport.java:138)
org.apache.activemq.transport.nio.NIOTransport$1.onSelect(NIOTransport.java:69)
org.apache.activemq.transport.nio.SelectorSelection.onSelect(SelectorSelection.java:94)
org.apache.activemq.transport.nio.SelectorWorker$1.run(SelectorWorker.java:119)
java.util.concurrent.ThreadPoolExecutor$Worker.runTask(Unknown Source)
java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
java.lang.Thread.run(Unknown Source)
{noformat}
----
{noformat}
Name: ActiveMQ Transport: tcp:///10.0.1.219:61616@58001
State: WAITING on java.util.concurrent.locks.ReentrantLock$NonfairSync@598f6549 owned by: ActiveMQ BrokerService[master2] Task-3288
Total blocked: 734  Total waited: 692

Stack trace: 
 sun.misc.Unsafe.park(Native Method)
java.util.concurrent.locks.LockSupport.park(Unknown Source)
java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(Unknown Source)
java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(Unknown Source)
java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(Unknown Source)
java.util.concurrent.locks.ReentrantLock$NonfairSync.lock(Unknown Source)
java.util.concurrent.locks.ReentrantLock.lock(Unknown Source)
org.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:66)
org.apache.activemq.transport.ResponseCorrelator.oneway(ResponseCorrelator.java:60)
org.apache.activemq.broker.TransportConnection.dispatch(TransportConnection.java:1370)
org.apache.activemq.broker.TransportConnection.processDispatch(TransportConnection.java:889)
org.apache.activemq.broker.TransportConnection.dispatchSync(TransportConnection.java:849)
org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:150)
org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:116)
org.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:50)
org.apache.activemq.transport.vm.VMTransport.doDispatch(VMTransport.java:138)
org.apache.activemq.transport.vm.VMTransport.dispatch(VMTransport.java:130)
   - locked java.util.concurrent.atomic.AtomicBoolean@56b2aa50
org.apache.activemq.transport.vm.VMTransport.oneway(VMTransport.java:107)
org.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:68)
org.apache.activemq.transport.ResponseCorrelator.asyncRequest(ResponseCorrelator.java:81)
org.apache.activemq.transport.ResponseCorrelator.request(ResponseCorrelator.java:86)
org.apache.activemq.network.DemandForwardingBridgeSupport.addSubscription(DemandForwardingBridgeSupport.java:905)
org.apache.activemq.network.DemandForwardingBridgeSupport.addConsumerInfo(DemandForwardingBridgeSupport.java:1178)
org.apache.activemq.network.DemandForwardingBridgeSupport.serviceRemoteConsumerAdvisory(DemandForwardingBridgeSupport.java:763)
   - locked java.net.URI@5602eaf4
org.apache.activemq.network.DemandForwardingBridgeSupport.serviceRemoteCommand(DemandForwardingBridgeSupport.java:614)
org.apache.activemq.network.DemandForwardingBridgeSupport$3.onCommand(DemandForwardingBridgeSupport.java:224)
org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:116)
org.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:50)
org.apache.activemq.transport.failover.FailoverTransport$3.onCommand(FailoverTransport.java:208)
org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:113)
org.apache.activemq.transport.AbstractInactivityMonitor.onCommand(AbstractInactivityMonitor.java:270)
org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83)
org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:214)
org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:196)
java.lang.Thread.run(Unknown Source)
{noformat}
----
{noformat}
Name: ActiveMQ BrokerService[master2] Task-3288
State: WAITING on java.util.concurrent.locks.ReentrantLock$NonfairSync@16a11d1e owned by: ActiveMQ Transport: tcp:///10.0.1.219:61616@58001
Total blocked: 0  Total waited: 7

Stack trace: 
 sun.misc.Unsafe.park(Native Method)
java.util.concurrent.locks.LockSupport.park(Unknown Source)
java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(Unknown Source)
java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(Unknown Source)
java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(Unknown Source)
java.util.concurrent.locks.ReentrantLock$NonfairSync.lock(Unknown Source)
java.util.concurrent.locks.ReentrantLock.lock(Unknown Source)
org.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:66)
org.apache.activemq.transport.ResponseCorrelator.oneway(ResponseCorrelator.java:60)
org.apache.activemq.network.DemandForwardingBridgeSupport.serviceLocalCommand(DemandForwardingBridgeSupport.java:970)
org.apache.activemq.network.DemandForwardingBridgeSupport$2.onCommand(DemandForwardingBridgeSupport.java:206)
org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:116)
org.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:50)
org.apache.activemq.transport.vm.VMTransport.doDispatch(VMTransport.java:138)
org.apache.activemq.transport.vm.VMTransport.dispatch(VMTransport.java:130)
   - locked java.util.concurrent.atomic.AtomicBoolean@491c24c7
org.apache.activemq.transport.vm.VMTransport.oneway(VMTransport.java:107)
org.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:68)
org.apache.activemq.transport.ResponseCorrelator.oneway(ResponseCorrelator.java:60)
org.apache.activemq.broker.TransportConnection.dispatch(TransportConnection.java:1370)
org.apache.activemq.broker.TransportConnection.processDispatch(TransportConnection.java:889)
org.apache.activemq.broker.TransportConnection.iterate(TransportConnection.java:935)
org.apache.activemq.thread.PooledTaskRunner.runTask(PooledTaskRunner.java:133)
org.apache.activemq.thread.PooledTaskRunner$1.run(PooledTaskRunner.java:48)
java.util.concurrent.ThreadPoolExecutor$Worker.runTask(Unknown Source)
java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
java.lang.Thread.run(Unknown Source)
{noformat}
Since I received no feedback at all in 2 weeks, I'm asking if this issue seems irrelevant to you or just poorly described. Please, let me know if I can improve this issue's description or how I can raise interest on this. Of course I do not expect to have a _real-time_ solution from you: just a suggestion on how to fix the problem, or at least a comment of any sort.
Thanks., Hi, the first thing to do is to get a reliable test case. There are two tests referenced in https://issues.apache.org/jira/browse/AMQ-4328 that may help as starting points. See the source tab to find the relevant commits.

What would be important to know is what is different between your scenario and the scenario in the existing tests. is it nio?

If this is easy to reproduce then we can have a look and sort it out. This area is tricky b/c it has evolved over the years, but having said that it has been stable for some time now.
It is great that you are getting in this deep, but it is best to first invest in a junit test case, b/c that will ensure that when the issue is resolved it will stay resolved.
, Ok, we managed to systematically reproduce the issue in a dedicated test-case (please find it as an attachment to this issue, *AMQ5260AdvancedTest.java*). This junit must be inserted in the _org.apache.activemq.bugs_ package within the activemq official src distro (version 5.10.0). In order to reproduce the deadlock in few seconds, the following configuration must be applied (VMArgs for the runnable jar of the junit test launch config):
{noformat}
	-Dorg.apache.activemq.UseDedicatedTaskRunner=false 
	-Dbroker.ip.address=<broker ip goes here> 
	-Dnum.producers.spec.topic=5 
	-Dnum.consumers.spec.topic=5 
	-Dnum.producers.gen.topic=5 
	-Dnum.consumers.gen.topic=5 
	-Dnum.messages.sec=200
{noformat}

At the time being the problem seems related to a concurrence issue triggered by an DemandForwardingBridgeSupport#addSubscription and an DemandForwardingBridgeSupport#onCommand invocations.

To reproduce the issue it is necessary to create a test forcing such an invocations:
# create two brokers each one with a duplex network connector to the other one
# create a generic topic and create some producers publishing on this topic. Moreover, create some consumers consuming from this topic. Half of the producers/consumers are connected to one broker, the other half to the other one. This scenario should trigger the DemandForwardingBridgeSupport#onCommand invocation 
# create some specific topic with one producer and some consumers. The producer is connected to one broker, the consumers to the other one. This scenario should trigger the  DemandForwardingBridgeSupport#addSubscription invocation.

After few seconds after the junit start, just press the _detect deadlock_ button in jconsole.

As a side note, the deadlock shows up both with two duplex net connectors (A to B and B to A) and with a single duplex net connector (A to B only) between the two brokers., Just to better understand what is going on here, could anyone explain the reason *why we need a MutexTransport? What is its role?* The reason why we have a deadlock here is that two different threads try to acquire the same couple of _org.apache.activemq.transport.MutexTransport.writeLock_ in a different order.
So in order to work out a decent workaround I would like to understand the role of this  _org.apache.activemq.transport.MutexTransport.writeLock_: what resources is it supposed to protect? 

By the way, did you manage to reproduce the issue on your side using the provided "test case"?

Thank you., @matteo - i have not had the opportunity to delve into this... but for the mutex transport - my understanding is that is there to protect the socket writes - there can be multiple sessions/producers on a connection and they all want to send data concurrently over the socket. Openwire allows interleaving at the command level only. In addition there openwire cache depends on serial inserts on both ends of the channel, the mutex protects that also.

inversion of lock order is a bug. It is great that you are investigating this in such detail, thanks. This code has evolved quite a bit so the more eyes on it the better., Thank you for your prompt reply! Now I understand the role of MutexTransport. By the way, I noticed that the deadlock involves two MutexTransport instances that wrap *VMTransport(s)*. Apparently if I apply the following hack
{code:java}
--- MutexTransport.java	Thu Jun 05 14:48:36 2014
+++ MutexTransport.edited.java	Fri Sep 26 09:11:41 2014
@@ -19,17 +19,31 @@
 import java.io.IOException;
 import java.util.concurrent.locks.ReentrantLock;
 
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
 /**
  * Thread safe Transport Filter that serializes calls to and from the Transport Stack.
  */
 public class MutexTransport extends TransportFilter {
 
-    private final ReentrantLock writeLock = new ReentrantLock();
+	private static final Logger LOG = LoggerFactory.getLogger(MutexTransport.class);
+    private final static ReentrantLock vmWriteLock = new ReentrantLock();
+    private ReentrantLock writeLock;
     private boolean syncOnCommand;
 
     public MutexTransport(Transport next) {
         super(next);
         this.syncOnCommand = false;
+        
+        writeLock = null;
+        if(next != null && next.toString().startsWith("vm://")){
+        	writeLock = vmWriteLock;
+        	LOG.error("#@mrul# vm transport with mutex: " + next);
+        }else{ 
+        	writeLock = new ReentrantLock();
+        	LOG.error("#@mrul# non-vm transport with mutex: " + next);
+        }
     }
 
     public MutexTransport(Transport next, boolean syncOnCommand) {
{code}

the deadlock disappears. I noticed that the network bridge create many VMTransport of the form vm://brokerName#<number> using basically three different thread paths and all these local VMTransports trigger many intertwined command exchanges that somehow determine the deadlock:

h1. VMTransports creation PATH 1
{noformat}
java.lang.Thread.getStackTrace(Unknown Source)
org.apache.activemq.transport.vm.VMTransport.<init>(VMTransport.java:73)
org.apache.activemq.transport.vm.VMTransportServer$1.<init>(VMTransportServer.java:77)
org.apache.activemq.transport.vm.VMTransportServer.connect(VMTransportServer.java:77)
org.apache.activemq.transport.vm.VMTransportFactory.doCompositeConnect(VMTransportFactory.java:147)
org.apache.activemq.transport.vm.VMTransportFactory.doConnect(VMTransportFactory.java:54)
org.apache.activemq.transport.TransportFactory.connect(TransportFactory.java:64)
org.apache.activemq.network.NetworkConnector.createLocalTransport(NetworkConnector.java:154)
org.apache.activemq.network.DiscoveryNetworkConnector.onServiceAdd(DiscoveryNetworkConnector.java:136)
org.apache.activemq.transport.discovery.simple.SimpleDiscoveryAgent.start(SimpleDiscoveryAgent.java:89)
org.apache.activemq.network.DiscoveryNetworkConnector.handleStart(DiscoveryNetworkConnector.java:205)
org.apache.activemq.network.NetworkConnector$1.doStart(NetworkConnector.java:59)
org.apache.activemq.util.ServiceSupport.start(ServiceSupport.java:55)
org.apache.activemq.network.NetworkConnector.start(NetworkConnector.java:159)
org.apache.activemq.broker.BrokerService.startAllConnectors(BrokerService.java:2501)
org.apache.activemq.broker.BrokerService.doStartBroker(BrokerService.java:693)
org.apache.activemq.broker.BrokerService.startBroker(BrokerService.java:659)
org.apache.activemq.broker.BrokerService.start(BrokerService.java:595)
org.apache.activemq.JmsMultipleBrokersTestSupport.startAllBrokers(JmsMultipleBrokersTestSupport.java:277)
{noformat}

h1. VMTransports creation PATH 2
{noformat}
org.apache.activemq.transport.vm.VMTransport.<init>(VMTransport.java:73)
org.apache.activemq.transport.vm.VMTransportServer$1.<init>(VMTransportServer.java:77)
org.apache.activemq.transport.vm.VMTransportServer.connect(VMTransportServer.java:77)
org.apache.activemq.transport.vm.VMTransportFactory.doCompositeConnect(VMTransportFactory.java:147)
org.apache.activemq.transport.vm.VMTransportFactory.doConnect(VMTransportFactory.java:54)
org.apache.activemq.transport.TransportFactory.connect(TransportFactory.java:64)
org.apache.activemq.network.NetworkBridgeFactory.createLocalTransport(NetworkBridgeFactory.java:80)
org.apache.activemq.network.DemandForwardingBridgeSupport.start(DemandForwardingBridgeSupport.java:184)
org.apache.activemq.network.DiscoveryNetworkConnector.onServiceAdd(DiscoveryNetworkConnector.java:152)
org.apache.activemq.transport.discovery.simple.SimpleDiscoveryAgent.start(SimpleDiscoveryAgent.java:89)
org.apache.activemq.network.DiscoveryNetworkConnector.handleStart(DiscoveryNetworkConnector.java:205)
org.apache.activemq.network.NetworkConnector$1.doStart(NetworkConnector.java:59)
org.apache.activemq.util.ServiceSupport.start(ServiceSupport.java:55)
org.apache.activemq.network.NetworkConnector.start(NetworkConnector.java:159)
org.apache.activemq.broker.BrokerService.startAllConnectors(BrokerService.java:2501)
org.apache.activemq.broker.BrokerService.doStartBroker(BrokerService.java:693)
org.apache.activemq.broker.BrokerService.startBroker(BrokerService.java:659)
org.apache.activemq.broker.BrokerService.start(BrokerService.java:595)
org.apache.activemq.JmsMultipleBrokersTestSupport.startAllBrokers(JmsMultipleBrokersTestSupport.java:277)
{noformat}

h1. VMTransports creation PATH 3
{noformat}
java.lang.Thread.getStackTrace(Unknown Source)
org.apache.activemq.transport.vm.VMTransport.<init>(VMTransport.java:73)
org.apache.activemq.transport.vm.VMTransportServer$1.<init>(VMTransportServer.java:77)
org.apache.activemq.transport.vm.VMTransportServer.connect(VMTransportServer.java:77)
org.apache.activemq.transport.vm.VMTransportFactory.doCompositeConnect(VMTransportFactory.java:147)
org.apache.activemq.transport.vm.VMTransportFactory.doConnect(VMTransportFactory.java:54)
org.apache.activemq.transport.TransportFactory.connect(TransportFactory.java:64)
org.apache.activemq.network.NetworkBridgeFactory.createLocalTransport(NetworkBridgeFactory.java:80)
org.apache.activemq.broker.TransportConnection.processBrokerInfo(TransportConnection.java:1321)
org.apache.activemq.command.BrokerInfo.visit(BrokerInfo.java:126)
org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:294)
org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:148)
org.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:61)
org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:113)
org.apache.activemq.transport.AbstractInactivityMonitor.onCommand(AbstractInactivityMonitor.java:270)
org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83)
org.apache.activemq.transport.nio.NIOTransport.serviceRead(NIOTransport.java:138)
org.apache.activemq.transport.nio.NIOTransport$1.onSelect(NIOTransport.java:69)
org.apache.activemq.transport.nio.SelectorSelection.onSelect(SelectorSelection.java:94)
org.apache.activemq.transport.nio.SelectorWorker$1.run(SelectorWorker.java:119)
java.util.concurrent.ThreadPoolExecutor$Worker.runTask(Unknown Source)
java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
java.lang.Thread.run(Unknown Source)
{noformat}

h1. VMTransports creation PATH 3, take 2 (cyclic???)
{noformat}
org.apache.activemq.broker.TransportConnection.processBrokerInfo(TransportConnection.java:1338)
java.lang.Thread.getStackTrace(Unknown Source)
org.apache.activemq.transport.vm.VMTransport.<init>(VMTransport.java:73)
org.apache.activemq.command.BrokerInfo.visit(BrokerInfo.java:126)            <------------------------------ !!!
org.apache.activemq.transport.vm.VMTransportServer.connect(VMTransportServer.java:88)
org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:294)
org.apache.activemq.transport.vm.VMTransportFactory.doCompositeConnect(VMTransportFactory.java:147)
org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:148)
org.apache.activemq.transport.vm.VMTransportFactory.doConnect(VMTransportFactory.java:54)
org.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:61)
org.apache.activemq.transport.TransportFactory.connect(TransportFactory.java:64)
org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:113)
org.apache.activemq.network.NetworkBridgeFactory.createLocalTransport(NetworkBridgeFactory.java:80)
org.apache.activemq.transport.AbstractInactivityMonitor.onCommand(AbstractInactivityMonitor.java:270)
org.apache.activemq.broker.TransportConnection.processBrokerInfo(TransportConnection.java:1321)
org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83)
org.apache.activemq.command.BrokerInfo.visit(BrokerInfo.java:126)             <------------------------------ !!!
org.apache.activemq.transport.nio.NIOTransport.serviceRead(NIOTransport.java:138)
org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:294)
org.apache.activemq.transport.nio.NIOTransport$1.onSelect(NIOTransport.java:69)
org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:148)
org.apache.activemq.transport.nio.SelectorSelection.onSelect(SelectorSelection.java:94)
org.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:61)
org.apache.activemq.transport.nio.SelectorWorker$1.run(SelectorWorker.java:119)
org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:113)
java.util.concurrent.ThreadPoolExecutor$Worker.runTask(Unknown Source)
java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
java.lang.Thread.run(Unknown Source)
{noformat}

So, as a tentative fix I tried to globally lock VMTransport usage under the assumption that VM transport should be negligible in number with respect to other transports (tcp, nio, etc.) and thus the static lock in VM trans. should not constitute a big performace bottleneck; I added a new constructor in _*MutexTransport*_ in this way:
{code}
public class MutexTransport extends TransportFilter {
	// ...
	private final static ReentrantLock staticWriteLock = new ReentrantLock();
	private ReentrantLock writeLock = new ReentrantLock();
	// ...
	public MutexTransport(Transport next, boolean syncOnCommand, boolean useStaticLock) {
		this(next, syncOnCommand);
		if(useStaticLock)
			writeLock = staticWriteLock;
	}
{code}
and I modified the _*org.apache.activemq.transport.vm.VMTransportServer.configure(Transport)*_ implementation in this way:
{code}
public static Transport configure(Transport transport) {
    transport = new MutexTransport(transport, false, true); // use static locks for VMTransport
    transport = new ResponseCorrelator(transport);
    return transport;
}
{code}

Apparently this solve the problem (anyway I'm going to perform additional tests to double check this). Is it in your opinion a reasonable approach or is it just a _quick and dirty_ solution?, After 4 days of tests with the patch that I proposed in the previous comment, the broker is still running without any deadlock.

So I would like to know from some amq expert whether or not what I call _patch_ can be really considered as a patch or a simple workaround with potential drawbacks.  

Thanks., Hi Matteo,
what is the current state in your production environment on this ? Do you use a newer activemq in the meantime or still the same with your fix ?
Thanks,
Felix, Hi Felix,
We still run with the proposed patch. Unfortunately, as you can see here, I never got a feedback about this.

Are you experiencing the same problem in your environment?]