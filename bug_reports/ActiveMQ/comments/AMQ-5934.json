[Can you take a thread dump of the broker when the clients are hung?

{{jstack -l <pid>}}

That might help to give some insight onto why the clients are hung., Thanks, Chris.
I created a thread dump but my company is maintaining the server environment, just shutting down all the servers now. I can't get any log files now.  Also, I am leaving for a 10 day vacation starting tomorrow.  Is that a must-have for u?  You can easily reproduce the issue I reported.  Just running five or more durable subscribers to the same topic and publish 1 million or more messages continuously and you will see this issue.  Please let me know if you need additional data.  Thanks!
-Eric Xiao
 


     On Thursday, August 20, 2015 10:29 AM, Christopher L. Shannon (JIRA) <jira@apache.org> wrote:
   

 
    [ https://issues.apache.org/jira/browse/AMQ-5934?page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel&focusedCommentId=14705002#comment-14705002 ] 

Christopher L. Shannon commented on AMQ-5934:
---------------------------------------------

Can you take a thread dump of the broker when the clients are hung?

{{jstack -l <pid>}}

That might help to give some insight onto why the clients are hung.




--
This message was sent by Atlassian JIRA
(v6.3.4#6332)


, Many times these issues can be tied to a network problem or something in the specific environment where the broker is set up.  That is why I was curious to see what the thread dump looked like to see what your specific clients were doing when they were hung., Thanks, Chris!
I attach the thread dump file with this email for your reference. The issue happens in my test environment as well as other stable environment, which has quite stable network environment. Please let me know if you need any other data about this issue.  I look forward to hearing from you soon.
Regards,
-Eric

 


     On Monday, August 24, 2015 9:21 AM, Christopher L. Shannon (JIRA) <jira@apache.org> wrote:
   

 
    [ https://issues.apache.org/jira/browse/AMQ-5934?page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel&focusedCommentId=14709267#comment-14709267 ] 

Christopher L. Shannon commented on AMQ-5934:
---------------------------------------------

Many times these issues can be tied to a network problem or something in the specific environment where the broker is set up.  That is why I was curious to see what the thread dump looked like to see what your specific clients were doing when they were hung.




--
This message was sent by Atlassian JIRA
(v6.3.4#6332)


, Have been able to reproduce this issue on 5.10, 5.11 and 5.12.0
Below are the steps to reproduce:

1. Start 5 durable subscribers on a topic

2. Start a publisher on that same topic to produce around 5000000 (5 million) messages

3. After a long while, at least one subscriber will stop receiving messages (happens randomly), but will still show as connected to the broker. Below is the exception from activemq logs at exactly the same time when the last message was delivered to the hung subscriber.

{panel:title=Exception in Activemq Broker Logs|borderStyle=dashed|borderColor=#ccc|titleBGColor=#F7D6C1|bgColor=#FFFFCE}

Exception in thread "ActiveMQ Connection Dispatcher: tcp://24.24.123.165:33288" Exception in thread "ActiveMQ Connection Dispatcher: tcp://24.24.123.165:33290" java.util.ConcurrentModificationException
       at java.util.HashMap$HashIterator.nextNode(HashMap.java:1429)
       at java.util.HashMap$KeyIterator.next(HashMap.java:1453)
       at org.apache.activemq.util.MarshallingSupport.marshalPrimitiveMap(MarshallingSupport.java:61)
       at org.apache.activemq.command.Message.beforeMarshall(Message.java:231)
       at org.apache.activemq.command.ActiveMQTextMessage.beforeMarshall(ActiveMQTextMessage.java:115)
       at org.apache.activemq.openwire.v10.MessageMarshaller.looseMarshal(MessageMarshaller.java:281)
       at org.apache.activemq.openwire.v10.ActiveMQMessageMarshaller.looseMarshal(ActiveMQMessageMarshaller.java:111)
       at org.apache.activemq.openwire.v10.ActiveMQTextMessageMarshaller.looseMarshal(ActiveMQTextMessageMarshaller.java:111)
       at org.apache.activemq.openwire.OpenWireFormat.looseMarshalNestedObject(OpenWireFormat.java:480)
       at org.apache.activemq.openwire.v10.BaseDataStreamMarshaller.looseMarshalNestedObject(BaseDataStreamMarshaller.java:471)
       at org.apache.activemq.openwire.v10.MessageDispatchMarshaller.looseMarshal(MessageDispatchMarshaller.java:139)
       at org.apache.activemq.openwire.OpenWireFormat.marshal(OpenWireFormat.java:237)
       at org.apache.activemq.transport.tcp.TcpTransport.oneway(TcpTransport.java:175)
       at org.apache.activemq.transport.AbstractInactivityMonitor.doOnewaySend(AbstractInactivityMonitor.java:304)
       at org.apache.activemq.transport.AbstractInactivityMonitor.oneway(AbstractInactivityMonitor.java:286)
       at org.apache.activemq.transport.TransportFilter.oneway(TransportFilter.java:85)
       at org.apache.activemq.transport.WireFormatNegotiator.oneway(WireFormatNegotiator.java:104)
       at org.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:68)
       at org.apache.activemq.broker.TransportConnection.dispatch(TransportConnection.java:1370)    
       at org.apache.activemq.broker.TransportConnection.processDispatch(TransportConnection.java:889)
       at org.apache.activemq.broker.TransportConnection.iterate(TransportConnection.java:935)
       at org.apache.activemq.thread.DedicatedTaskRunner.runTask(DedicatedTaskRunner.java:112)
       at org.apache.activemq.thread.DedicatedTaskRunner$1.run(DedicatedTaskRunner.java:42)
 java.util.ConcurrentModificationException
       at java.util.HashMap$HashIterator.nextNode(HashMap.java:1429)
       at java.util.HashMap$KeyIterator.next(HashMap.java:1453)
       at org.apache.activemq.util.MarshallingSupport.marshalPrimitiveMap(MarshallingSupport.java:61)
       at org.apache.activemq.command.Message.beforeMarshall(Message.java:231)
       at org.apache.activemq.command.ActiveMQTextMessage.beforeMarshall(ActiveMQTextMessage.java:115)
       at org.apache.activemq.openwire.v10.MessageMarshaller.looseMarshal(MessageMarshaller.java:281)
       at org.apache.activemq.openwire.v10.ActiveMQMessageMarshaller.looseMarshal(ActiveMQMessageMarshaller.java:111)
       at org.apache.activemq.openwire.v10.ActiveMQTextMessageMarshaller.looseMarshal(ActiveMQTextMessageMarshaller.java:111)
       at org.apache.activemq.openwire.OpenWireFormat.looseMarshalNestedObject(OpenWireFormat.java:480)
       at org.apache.activemq.openwire.v10.BaseDataStreamMarshaller.looseMarshalNestedObject(BaseDataStreamMarshaller.java:471)
       at org.apache.activemq.openwire.v10.MessageDispatchMarshaller.looseMarshal(MessageDispatchMarshaller.java:139)
       at org.apache.activemq.openwire.OpenWireFormat.marshal(OpenWireFormat.java:237)
       at org.apache.activemq.transport.tcp.TcpTransport.oneway(TcpTransport.java:175)
       at org.apache.activemq.transport.AbstractInactivityMonitor.doOnewaySend(AbstractInactivityMonitor.java:304)
       at org.apache.activemq.transport.AbstractInactivityMonitor.oneway(AbstractInactivityMonitor.java:286)
       at org.apache.activemq.transport.TransportFilter.oneway(TransportFilter.java:85)
       at org.apache.activemq.transport.WireFormatNegotiator.oneway(WireFormatNegotiator.java:104)
       at org.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:68)
       at org.apache.activemq.broker.TransportConnection.dispatch(TransportConnection.java:1370)
       at org.apache.activemq.broker.TransportConnection.processDispatch(TransportConnection.java:889)
       at org.apache.activemq.broker.TransportConnection.iterate(TransportConnection.java:935)
       at org.apache.activemq.thread.DedicatedTaskRunner.runTask(DedicatedTaskRunner.java:112)
       at org.apache.activemq.thread.DedicatedTaskRunner$1.run(DedicatedTaskRunner.java:42)

{panel}


h3. Proposed Fix:
==============

Please find the proposed patch attached for 5.12.0 codebase. The fix is done on activemq-client code (issue happens when broker uses activemq-client.jar).
I tested the fix by using the fixed activemq-client.jar,

1) both on the broker and on the client side
2) only on the broker (with clients using the un-patched jar)

and it works in both the above scenarios. I’ve tested it on 5.10 and 5.12.0 (on their respective codebases) and it works fine. 
, there should not be concurrent access to a message properties map. the root cause is the concurrent access. we need to figure out what other thread is in the mix here. making the map concurrent will only hide the root issue!, [~gtully] thank you very much for your feedback - you're absolutely right.  I wasn't sure if it was intentional or not to have multiple threads access that map. Now that I know, I'm going to dig a little further to figure out which threads are trying to access it. , No test case to investigate but there have been a number of fixes for concurrent message access which will make their way into 5.13.3 and beyond so recommend testing with the next release. ]