[Hi,

I have exactly the same problem and it eventually  leads to my application running out of memory. I have had to disable multicast now for stability reasons but would like to use it again so hopefully this can be fixed.

  <!-- configure the Camel JMS consumer to use the ActiveMQ broker declared above -->
    <bean id="jmsExternal" class="org.apache.camel.component.jms.JmsComponent">
        <property name="connectionFactory">
            <bean class="org.apache.activemq.ActiveMQConnectionFactory">
                <!-- use multicast to detect other broker - group=groupName of network to look for -->
                <property name="brokerURL" value="discovery:(multicast://default?group=testbroker)?initialReconnectDelay=100"/>
            </bean>
        </property>
    </bean>

To send a message to the external queue "jmsExternal" I call the method in POJO object:

camelTemplate.sendBody(x,y);

I am using activeMQ 5.2.0 but the brokers which are being discovered are using the FUSE 5.3 version.

If select one of the thousands of Multicast threads displayed in Jconsole, they all have the same stack trace as this:

Name: Multicast Discovery Agent Notifier
State: WAITING on java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject@1ce7f98
Total blocked: 0  Total waited: 1

Stack trace:
sun.misc.Unsafe.park(Native Method)
java.util.concurrent.locks.LockSupport.park(LockSupport.java:158)
java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1925)
java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:358)
java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:947)
java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907)
java.lang.Thread.run(Thread.java:619) 

BRegards
Andrew, fixed in r792127]