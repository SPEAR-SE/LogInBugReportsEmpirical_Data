[GitHub user alanprot opened a pull request:

    https://github.com/apache/activemq/pull/315

    AMQ-7091 - O(n) Memory consumption when broker has inactive durable s…

    …ubscribes causing OOM

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/alanprot/activemq AMQ-7091

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/activemq/pull/315.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #315
    
----
commit 29dde9fa81be3bd20fd840daa178259e74cc032e
Author: Alan Protasio <alanprot@...>
Date:   2018-11-04T06:22:32Z

    AMQ-7091 - O(n) Memory consumption when broker has inactive durable subscribes causing OOM

----
, The patch looks good to me - thank you Alan., that info does not need to be persisted, it is duplicate info. I would like to understand the tradeoff - that in mem reference map was introduced as on optimisation via: https://issues.apache.org/jira/browse/AMQ-3467 in 2011 but is in memory only to be fast. It may be possible to squash that map to a sequenceSet of offsets that share a reference count which would address the mem usage without the need to persist to disk.

 

The implications of additional page writes on every add/ack may be significant for the simple fanout (when users keep up) case. Typically the broker has plenty of memory for this sort of thing.

 , [~cshannon], [~gtully]

I've reviewed Alan's patch and it looks good.

The bump in KahaDB version to 7 on Master would open the door to us doing some more changes to KahaDB/MessageDatabase (perhaps some gentle refactoring). 

I'd like to know what you think., Thanks Gary., Hi [~alanprot], 

After some conversation with the community, the SeuqnceSet in AMQ is good to use for this scenario, because then we can control the sizes and toss them when memory is short: 
https://github.com/apache/activemq/blob/master/activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/SequenceSet.java

Please have a look at the above, and lets update your PR., Cool! Thanks guys to looking into that...

I will change my PR! :D

 

Thanks again!!! :D, Hi Guys....

 

I changed my PR to use the SequenceSets that already exists in the index...

[https://github.com/apache/activemq/pull/315]

I'm running all the tests now...

 

Thanks, [~gtully] [~jgoodyear] Seems that all tests succeed! 

If you guys think that getting this from the ListIndex<String, SequenceSet> ackPositions is expensive I can create a TreeMap<String, SequenceSet> to keep it in memory.. but I think having this duplicate information can be error prone. And also we are already accessing this index in the code... the only overhead is when you ack a message instead o getting the sequenceSet only for the subscriber that is acking we have to get the sequenceSet for all subscribers..

See "isSequenceReferenced" method., [~alanprot] you have to ask the computer to see if there is any negative performance impact. This reference count in memory is an optimisation introduced for a performance issue, probably a typical fanout case with lots of subs. See the linked issue. This issue is about that cache being unbounded in terms of memory usage, the solution is to have the data in the pageFile and pageCache such that it can get flushed from memory at the cost of accessing from pages in normal operation.

I would like to see the actual trade off in publish/ack latency quantified. It may well be negligible; but we need to respect the original use case to verify.

In addition, if this warrants a version update, the auto migration path needs to be validated., Hi [~gtully]

Thanks again! haha :D

 
{quote}the solution is to have the data in the pageFile and pageCache such that it can get flushed from memory at the cost of accessing from pages in normal operation.
{quote}
Did you see my last proposed change? This change does not requite new index version (kahadb) and will not write anything new to the index.

I dont know why the bot didn't add the comment (updated the PR) here but i'm not adding a new Btree Index anymore... I'm reusing the data that is already there:

[https://github.com/apache/activemq/pull/315/commits/98d1be6acaee79f9acd72d2c7c2bdb2358638e18]

We already have this information in other format in the ListIndex<String, SequenceSet> ackPositions; So i'm using it.

My comment before was.... nowadays to discover if one message is referenced by one subscribe we only do a sd.messageReferences.get(sequenceId) and check if the reference count is 0.

With my change,  we will do when acking a message something similar with that we already do when sending a message.

See:

[https://github.com/apache/activemq/blob/master/activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java#L2924]

and

[https://github.com/apache/activemq/pull/315/commits/98d1be6acaee79f9acd72d2c7c2bdb2358638e18#diff-e3b8fff8c2133dfd70999705bbb558b3R2935]

  

 

 

 , This looks good to me...the additional writes are gone.  [~gtully], since you are the resident expert in this area, please let us know what you think?, [~gtully] [~jgenender]

I did some performance tests before and after the change:

The test scenarios were:

1, 10, 100 Consumers

Producing and consuming messages in parallel

Producing all message before starting the consumers 

The results are here:

[https://github.com/alanprot/activemq/blob/master/AMQ-7091.md]

 

I used KahaDBDurableTopicTest as base for this test.

 

Seems that this change does not have impact performance wise., [~tabish121] Hi tim, you added the messageReferences cache way back in https://github.com/apache/activemq/commit/943db3c3cb12b4c4504b4966135cf9a0cc69f0ba - this PR proposed to remove that cache b/c it can grow unlimited with the number of pending messages, even it is a just two Longs per message it can be significant.
Can you recall the use case that caused that cache to be introduced? I ask b/c it is under threat with this change.
It may be that the need for the cache is offset by the changes to what is in the index , or it may be that with the change to what is stored, the cache is more important. 
My guess is that if it is important you may recall, hense the redirect., [~gtully], what if the change was a configuration property? i.e. you can have the cache or you can set the property to do what is being proposed here?  So for those strapped for memory, they can just disable the cache?, [~gtully] I'm afraid I don't recall any longer what the context was for that work. , [~tabish121] thanks. [~jgenender] Probably no need for any config option then. let it run as is., Commit 9012a7871b77da6ecdc403f6b44ef0221345bfb7 in activemq's branch refs/heads/master from [~alanprot]
[ https://git-wip-us.apache.org/repos/asf?p=activemq.git;h=9012a78 ]

AMQ-7091 - O(n) Memory consumption when broker has inactive durable subscribes causing OOM
, Github user asfgit closed the pull request at:

    https://github.com/apache/activemq/pull/315
, Commit 71ce081157a0c4bd007cdf58d68e2e0784f87956 in activemq's branch refs/heads/activemq-5.15.x from [~alanprot]
[ https://git-wip-us.apache.org/repos/asf?p=activemq.git;h=71ce081 ]

AMQ-7091 - O(n) Memory consumption when broker has inactive durable subscribes causing OOM

(cherry picked from commit 9012a7871b77da6ecdc403f6b44ef0221345bfb7)
, Thank you Alan Protasio for the PR :)]