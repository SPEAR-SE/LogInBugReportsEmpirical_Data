[So does the poll work for you by having the lock statement return immediately and hence make the lockAcquireSleepInterval relevant again. 
We can provide a specialization of the lock implementation for Oracle if this is the case., In the class org.apache.activemq.store.jdbc.Statement I changed the code to add the WAIT 0 (as per the report).

I then set the lockAcquireSleepInterval back to one second (i.e. the default DEFAULT_LOCK_ACQUIRE_SLEEP_INTERVAL setting).

A specialisation of the DefaultDatabaseLocker class where the call to getLockCreateStatement method (allow this to be overridden in the DatabaseLocker interface?) calls the Oracle specific WAIT 0 should do it. This is how I got around the problem.

    public void start() throws Exception {
        stopping = false;

        LOG.info("Attempting to acquire the exclusive lock to become the Master broker");
        String sql = statements.getLockCreateStatement(); // For Oracle use the WAIT 0 statement
        LOG.debug("Locking Query is "+sql);, you should be able to override the lockCreateStatement and any other via config:
{code}
<jdbcPersistenceAdapter dataSource="#oracle-ds" useDatabaseLock="true" lockAcquireSleepInterval="300000" createTablesOnStartup="true">
    <statements>
          <statements lockCreateStatement="SELECT * FROM ACTIVEMQ_LOCK WHERE ID = 1 FOR UPDATE WAIT 0"/>
    </statements>
</jdbcPersistenceAdapter>
{code}, Hmm. Why on earth isn't this the default behavior of the default DB locker? You naturally do NOT want to sit around holding active transactions that are trying to acquire a DB resource that you know you'll never get unless the master broker fails. That's being a really bad citizen in the DB world. The FOR UPDATE NOWAIT clause is the right thing to use, period., Also note that if you use the FOR UPDATE NOWAIT or FOR UPDATE WAIT N forms of the locking query (as should be the default!!!), you will get an exception from the attempt to lock. Currently these are being logged at "info" or "warn" level depending on the locker implementation you use, so they will flood your logs with something that should be perfectly ignored, as this exception is the expected state 99.99% of the time (it should at most be logged at debug level). So there's definitely a need for code change here.]