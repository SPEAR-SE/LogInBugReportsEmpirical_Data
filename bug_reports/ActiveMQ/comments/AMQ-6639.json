[5.14.4 is the latest release, you should test against that and if there's still an issue create a unit test that can reproduce the problem.  , Unfortunately we did a test with the last version 5.14.4: we got exactly
the same result. I am going to give a unit test as soon as possible.
Le mar. 28 mars 2017 Ã  16:55, Timothy Bish (JIRA) <jira@apache.org> a

, Hello,
We cannot give a TU because we noticed the issue with a mobile phone that lose the network. it is hard for us to simulate that event.
But I can give you the steps to reproduce it with some piece of code.
Step 1) use a tool P(ex mosquitto_sub) listening the topic X.
Step 2)  connect your mobile to the MQTT server. Mobile send a retain message to the topic X
Step 3) MQTT server push the retain message to the tool P.
Step 4)  Activate "AirPlane" mode on the mobile
Step 5) 10 seconds after, unactivate "AirPlane" mode. A retain message must be  send again to topic X.
Step 6) MQTT server push the retain message to the tool P.
Step 7) wait for 2 minutes. MQTT push a LWT to tool P

This is an example the code used on our mobile application to send message to MQTT server
{code:javascript}
var i_am_connected = new Paho.MQTT.Message(JSON.stringify({
        version: 1,
        state: 2,
        timestamp: startListeningTimeInS,
        deverylight: Version,
        os: ionic.Platform.platform(),
        release: ionic.Platform.version()
      }));
      i_am_connected.destinationName = "device/" + LoginService.userData.token + "/ping";
      i_am_connected.retained = true;
      i_am_connected.qos = 1;


var i_am_connected = new Paho.MQTT.Message(JSON.stringify({
        version: 1,
        state: 2,
        timestamp: startListeningTimeInS,
        deverylight: Version,
        os: ionic.Platform.platform(),
        release: ionic.Platform.version()
      }));
      i_am_connected.destinationName = "device/" + LoginService.userData.token + "/ping";
      i_am_connected.retained = true;
      i_am_connected.qos = 1;

client.connect({
        timeout: 3,
        useSSL: false,
        cleanSession: true,
        userName: LoginService.userData.token,
        password: '',
        willMessage: i_am_disconnected,
        onSuccess: function() {
          timeOfConnectionLoss = 0;
          service.connected = 2;
          client.send(i_am_connected);
          //resubscribing
          Object.keys(subscriptions).forEach(function (topic) {
            client.subscribe(topic);
          });

          window.addEventListener('unload', disconnect);
          deferred.resolve();
        },
        onFailure: onConnectionLost
      });
{code}, Hello. 
Another detail: we did a test with Mosquitto rather then ActiveMQ: it works well with Mosquitto, example of getting message with mosquitto_sub]