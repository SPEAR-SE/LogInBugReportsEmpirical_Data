[The version you are using is old an not a supported release, please upgrade to the latest release and then report back if the problem persists., We have done the upgrade to the latest version 5.15.4 and the problem does persist. So I updated the description of the problem above.

In attachement, the new version of the class modified to generate some helpful logs.

[^MemoryMessageStore.java], Hello [~tabish121],

I encounter the same problem as Nezih on the last version too.

Thanks,
Jean-Sébastien, You should work on providing a unit test to reproduce the issue. , Hello [~tabish121],

Unfortunately, we already spent a lot of time trying to understand why AMQ stop deliver messages, and we don't have resources and time to do more analysis (The problam has began 3 years ago).

We should get by, by uncommenting the line 135 of the method "recoverNextMessages(...)".

 

Thanks,

Nezih

 , In attachment, a unit test reproducing the issue.[^MemoryMessageStoreQueueCursor.java].

To make the memoryMessageStore more robust we can modify methods setBatch and recoverNextMessages as follow :

    @Override
    public void setBatch(MessageId messageId) {
        synchronized (messageTable) {
            lastBatchId = messageId;
            if(!messageTable.containsKey(lastBatchId)) {
                lastBatchId = null;
            }
        }
    }

 

    @Override
    public void recoverNextMessages(int maxReturned, MessageRecoveryListener listener) throws Exception {
        synchronized (messageTable) {
            boolean containsLastBatchId = messageTable.containsKey(lastBatchId);
            if(!containsLastBatchId) {
                lastBatchId = null;
            }
            
            boolean pastLackBatch = lastBatchId == null;
            for (Map.Entry<MessageId, Message> entry : messageTable.entrySet()) {
                if (pastLackBatch) {
                    Object msg = entry.getValue();
                    lastBatchId = entry.getKey();
                    if (msg.getClass() == MessageId.class) {
                        listener.recoverMessageReference((MessageId) msg);
                    } else {
                        listener.recoverMessage((Message) msg);
                    }
                } else {
                    pastLackBatch = entry.getKey().equals(lastBatchId);
                }
            }
        }
    }, Explanation :
when activating TRACE level logs for the class "AbstractStoreCursor", I noticed the next two lines in the log file :

2018-07-18 12:02:06,136 | TRACE | org.apache.activemq.broker.region.cursors.QueueStorePrefetch@3a5f8f9a:retour.event.box4,batchResetNeeded=false,size=0,cacheEnabled=true,maxBatchSize:1,hasSpace:false,pendingCachedIds.size:0,lastSyncCachedId:ID:vhqve41.pprod.helios.cp-54155-1531902423423-1:10:2:1:282,lastSyncCachedId-seq:75,lastAsyncCachedId:null,lastAsyncCachedId-seq:null,store=org.apache.activemq.store.memory.MemoryMessageStore@349876a1 - disabling cache on add ID:vhqve41.pprod.helios.cp-54155-1531902423423-1:3:1:1:370 76 | org.apache.activemq.broker.region.cursors.AbstractStoreCursor | ActiveMQ Transport: tcp:///174.4.111.217:35610@6666
2018-07-18 12:02:06,136 | WARN  | @@@NBF@@@ setBatch called with param messageId : (ID:vhqve41.pprod.helios.cp-54155-1531902423423-1:10:2:1:282). lastBatchId : (null) the new lastBatchId : (ID:vhqve41.pprod.helios.cp-54155-1531902423423-1:10:2:1:282) is NOT in messageTable | org.apache.activemq.store.memory.MemoryMessageStore | ActiveMQ Transport: tcp:///174.4.111.217:35610@6666

The second line shows that setBatch is called with a parameter "messageId" corresponding to a probably old message that is already removed from store.
The first line shows that just befor calling setBatch, we had (hasSpace:false while size=0) which mean : there is no messages in the queue but there is no free space too !!!.
It seems like messages are consumed but their space is not rendered or not yet rendered at that moment.]