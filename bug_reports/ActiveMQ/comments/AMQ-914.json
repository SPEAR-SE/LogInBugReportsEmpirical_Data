[Just got the same problem in the same configuration without running anything under a profiler.

INFO  Service                        - Sync error occurred: java.lang.OutOfMemoryError: Java heap space
java.lang.OutOfMemoryError: Java heap space
INFO  Service                        - Sync error occurred: java.lang.OutOfMemoryError: Java heap space
java.lang.OutOfMemoryError: Java heap space
INFO  Service                        - Sync error occurred: java.lang.OutOfMemoryError: Java heap space
java.lang.OutOfMemoryError: Java heap space
INFO  Service                        - Sync error occurred: java.lang.OutOfMemoryError: Java heap space
java.lang.OutOfMemoryError: Java heap space
INFO  Service                        - Sync error occurred: java.lang.OutOfMemoryError: Java heap space
java.lang.OutOfMemoryError: Java heap space

I guess I could specify some larger -xmx value, but because the back end is postgres I don't think the number of messages in the queue should have anything to do with the amount of memory the ActiveMQ server needs., After more investigation on this issue, I determined the exact moment when the memory consumption jumps abruptly in a simpler scenario. It happens when a consumer is created for the queue with 200k+ messages, that is the third line below:

		con = connectionFactory.createConnection();
		Session s = con.createSession(true, Session.CLIENT_ACKNOWLEDGE);
		MessageConsumer messageConsumer = s.createConsumer(dest);

where connectionFactory is jmsConnectionFactory below:

	<!--
		###### Transaction manager ######
	-->

	<bean id="transactionContextManager"
		class="org.jencks.factory.TransactionContextManagerFactoryBean" />


	 <bean id="transactionSupport" class="org.jencks.factory.XATransactionFactoryBean">
	   <property name="useTransactionCaching" value="true" />
	   <property name="useThreadCaching" value="true" />
	 </bean>
  
	<bean id="poolingSupport"
		class="org.jencks.factory.SinglePoolFactoryBean">
		<property name="maxSize" value="50" />
		<property name="minSize" value="0" />
		<property name="blockingTimeoutMilliseconds" value="0" />
		<property name="idleTimeoutMinutes" value="60" />
		<property name="matchOne" value="true" />
		<property name="matchAll" value="true" />
		<property name="selectOneAssumeMatch" value="true" />
	</bean>

	<bean id="connectionManager"
		class="org.jencks.factory.ConnectionManagerFactoryBean">
		
		<property name="transactionSupport" ref="transactionSupport" />
		<property name="poolingSupport" ref="poolingSupport" />
	</bean>

	<!--
		###### JMS ######
	-->

	<bean id="jmsResourceAdapter"
		class="org.apache.activemq.ra.ActiveMQResourceAdapter">
		<property name="serverUrl" value="tcp://localhost:61616?wireFormat.cacheEnabled=false&amp;wireFormat.tightEncodingEnabled=false&amp;jms.useAsyncSend=true" />
	</bean>

	<bean id="jmsManagedConnectionFactory"
		class="org.apache.activemq.ra.ActiveMQManagedConnectionFactory">
		<property name="resourceAdapter" ref="jmsResourceAdapter" />
	</bean>

	<bean id="jmsConnectionFactory"
		class="org.springframework.jca.support.LocalConnectionFactoryBean">
		<property name="managedConnectionFactory"
			ref="jmsManagedConnectionFactory" />
		<property name="connectionManager" ref="connectionManager" />
	</bean>

Please see the attached snapshot of the jmx console connected to activemq.
, memory consumption jumps high when a consumer is created, and drops when the consumer process is killed, Use optional Store cursor to page messages into the broker from the persistent store
SVN revision 478967.]