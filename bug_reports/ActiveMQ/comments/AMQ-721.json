[Hi Vincent,

Could you submit a simple nunit test case showing this problem?, I also had the same problem, but I was able to put together a hack that gets around this problem.  I don't recommend this as the solution going forward, but it appears to work on my test cases (which failed before I implemented it).  

First we need to change the dotNet dll client classes.
in class IMessageConsumer, add a new function:

IMessage AutoAcknowledge(IMessage message);

in class MessageConsumer, make AutoAcknowledge public rather then protected.

Then, create your dll.

Now, in your test app do the following:

Let's assume you've created a consumer called "consumer" and have defined the following:
consumer.Listener += new MessageListener(onMessage);

set up the listener function as follows:
public void onMessage(IMessage message)
{
     If (consumer != null) //just a good idea to check
         consumer.AutoAcknowledge(message);
     // whatever you want to do with your message goes here... I've just put a Console.WriteLine here, but do whatever you want here
    Console.WriteLine("got Message:  " + ((ActiveMQTextMessage)message).Text);
}

This isn't an ideal solution, because it requires the MessageListener to call AutoAcknowledge, but it seems to work.  I hope this helps folks who are trying to do this!

Jamie, Oh, sorry, one more thing.  Make sure you're connecting with tcp://localhost:61616?jms.optimizeAcknowledge=false  (the jms.optimizeAcknowledge=false being the important part of that, at least until 4.0.1 is out which defaults to this), I also have been dealing with this issue.

While I dont know if this is the correct solution (Dont know the code well enough yet) however, it did fix the issue for me.

Th eonly change I made was to MessageConsumer::DispatchAsyncMessages I added a call to AutoAcknowledge.  This allowed me to get past the 1000 message Limit
[code]
public void DispatchAsyncMessages()
        {
            while (Listener != null)
            {
                IMessage message = dispatcher.DequeueNoWait();
                if (message != null)
                {
                    Listener(message);
                   **AutoAcknowledge(message);**
                }
                else
                {
                    break;
                }
            }
        }
[/code], This issue has been outstanding for some time.   While I could use another Language to allow me to use ActiveMQ it is not the prefered language.  As such I will not be able to use an ActiveMQ as a solution. 

Some input or some type of acknowledgment that this issue is being addressed would be fantastic,
, Thank you for your mail, please note Swapstream email addresses have changed from .net to .com please can you amend your address book.



Thanks 



Swapstream
]