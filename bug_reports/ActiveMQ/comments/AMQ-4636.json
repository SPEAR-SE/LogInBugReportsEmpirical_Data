[there are two problems here.
1) there is no callback to the IOExceptionHandler in org.apache.activemq.store.jdbc.TransactionContext.close so the exception is not intercepted.

2) When an IOExceptionHandler wants to 'handle' an exception by stopping broker or transports, there is a race between the async stop and the exception response.

For 1, we need to invoke the handler
for 2, we need to let the IOExceptionHandler wrap the exception to indicate that it is handled such that can be trapped by org.apache.activemq.broker.TransportConnection#service and ignored. Something like SuppressReplyOnHandled(IOException)., https://github.com/apache/activemq/blob/trunk/activemq-unit-tests/src/test/java/org/apache/activemq/broker/ft/DbRestartJDBCQueueMasterSlaveTest.java#L112
is also relevant for the consumer case. If we *want* to propagate store exceptions back to the client then they should not be IOExceptions. The Handler can do that also., Thanks Gary, I have spilt your point 2 above into a separate JIRA https://issues.apache.org/jira/browse/AMQ-4643, This is fixed as a byproduct of https://issues.apache.org/jira/browse/AMQ-4643 

The TransactionContext.close now correctly delegates to the IOExceptionHandler which handles the transaction commit/rollback failure cases]