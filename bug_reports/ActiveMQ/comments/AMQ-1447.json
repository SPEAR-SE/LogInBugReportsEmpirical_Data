[on trunk at least, adding a query parameter of daemon=true to the networkConnector urls should eliminate this if it is still a daemon thread., This still appears to be an issue in 5.3.0. I am using activemq-core-5.3.0.jar, but ActiveMQ Transport threads are not daemon:

"ActiveMQ Transport: tcp://xyz/127.0.0.1:61616" prio=1 tid=0x6a651420 nid=0x6d62 runnable [0x69ef8000..0x69ef9000]

Unfortunately this results in not being able to bring Tomcat application servers down gracefully.

Note that the ActiveMQ Scheduler thread is setup correctly, so this appears specific to the Transport code:

"ActiveMQ Scheduler" daemon prio=1 tid=0x0973deb8 nid=0x6d68 in Object.wait() [0x697fe000..0x697fed80]

NOTE: Environment is linux 2.6.31-19-generic-pae #56-Ubuntu SMP

EDIT: Whoops, My note turned into a link due to square brackets. Fixed..., Scott, I was able to get tomcat to shutdown cleanly using this configuration:

<Resource name="jms/queueConnectionFactory"
auth="Container" 
type="org.apache.activemq.ActiveMQConnectionFactory" 
factory="org.apache.activemq.jndi.JNDIReferenceFactory" 
brokerURL="failover:(tcp://127.0.0.1:61616?daemon=true)?maxReconnectDelay=5000" />, Thanks for the workaround. Note that for me, appending ?daemon=true was enough to have a clean shutdown. No need to use failover: and maxReconnectDelay (I'm running activemq 5.4.1)., Workaround exists, add daemon=true to the URI as commented in the issue.]