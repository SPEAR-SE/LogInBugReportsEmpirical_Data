[Unit test demonstrating deadlock.  The unit test passes after applying the patch., Patch the resolves deadlock by making the local transport for a bridge asynchronous., Unit test (amended to enable timeout) that demonstrates deadlock.  The test passes after applying patch., Great investigative work. we ping rob to see if he has any recollection as to the reason/use case behind the Revision: 553094
Did you try a bunch of the other network connector unit tests org.apache.activemq.network in activemq-core with this fix?
, Gary, I ran the tests in org.apache.activemq.network several times and they succeeded.  If after consultation with Rob it is decided that the patch is too broad, we could always patch just the DiscoveryNetworkConnector/DemandForwardingBridgeSupport so that they make the localTransport asynchronous.

-------------------------------------------------------
 T E S T S
-------------------------------------------------------
Running org.apache.activemq.network.NetworkLoadTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 65.782 sec
Running org.apache.activemq.network.DemandForwardingBridgeFilterTest
Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 24.859 sec
Running org.apache.activemq.network.NetworkReconnectTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 6.391 sec
Running org.apache.activemq.network.DuplexNetworkTest
Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 77.36 sec
Running org.apache.activemq.network.ForwardingBridgeTest
Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 8.5 sec
Running org.apache.activemq.network.SimpleNetworkTest
Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 73.5 sec
Running org.apache.activemq.network.DuplexNetworkMBeanTest
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 29.532 sec
Running org.apache.activemq.network.NetworkRemovesSubscriptionsTest
Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 34.406 sec
Running org.apache.activemq.network.DemandForwardingBridgeTest
Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 4.703 sec
Running org.apache.activemq.network.FailoverStaticNetworkTest
Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 32.203 sec
Running org.apache.activemq.network.NetworkBrokerDetachTest
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 22.501 sec

Results :

Tests run: 41, Failures: 0, Errors: 0, Skipped: 0
, Ran the test repeatedly and could not reproduce using the latest trunk code., Attaching a slightly-modified unit test the demonstrates the deadlock is still present on trunk code., The only change in the updated BridgeDeadlockTest is the addition of line 72: persistentDelivery = false

The reason the original unit test passed on trunk as because of changes made to DemandForwardingBridgeSupport.java:

{code:title=DemandForwardingBridgeSupport.java}
protected void serviceLocalCommand(Command command) {
...
                    if (!configuration.isAlwaysSyncSend() && !message.isPersistent()) {

                        // If the message was originally sent using async
                        // send, we will preserve that QOS
                        // by bridging it using an async send (small chance
                        // of message loss).
                        try {
                            remoteBroker.oneway(message);
                            localBroker.oneway(new MessageAck(md, MessageAck.INDIVIDUAL_ACK_TYPE, 1));
                            dequeueCounter.incrementAndGet();
                        } finally {
                            sub.decrementOutstandingResponses();
                        }

                    } else {
{code}

As originally described, the problematic code is the localBroker.oneway(...).  In trunk, the condition (!configuration.isAlwaysSincSend() && !message.isPersistent()) was preventing the original test from entering this block.  Setting persistentDelivery = false allows the block to be entered, thus creating the deadlock., Testing against trunk the problem appears to be resolved, the code has been modified since the original issue and does not appear to have this issue any longer. ]