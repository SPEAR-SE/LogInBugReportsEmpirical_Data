[the transaction context does not maintain any state at the moment. I can see a case for returning an empty array if TMENDRSCAN is specified. Because the default behaviour is to return all of the pending xids.

Please add a little test case that demos the usage pattern of your TM, from the patch it is not clear that data will be of 0 length., As requested a test client to demonstrate the IIB recovery behaviour , My reading of the spec was that TMENDRSCAN can be used with a TMSTARTRSCAN, hence all pending xids being returned by either call seems logical as activeMQ does not currently maintain a cursor or state.

With no state being maintained and all pending xids are returned by both TMSTARTRSCAN and TMSTARTRSCAN a TM that has implemented cursor support has no way of knowing it has all received all pending xids if all three flags return the same result., I agree, I had a read of http://pubs.opengroup.org/onlinepubs/009680699/toc.pdf - the javadoc does not seem to have this level of detail.
returning noting in the case of TMNOFLAGS makes sense, the only caveat is that we won't have any way to record that a scan is in progress. Because TMNOFLAGS must be exclusive and we always return the full array, it will work ok., peeking at the patch, not sure there is any value in the round trip to the broker because the returned data is ignored. Will just return an empty array if TMNOFLAGS is specified, Commit 16bc0f0d750530643333695ba20f6a736704271c in activemq's branch refs/heads/master from [~gtully]
[ https://git-wip-us.apache.org/repos/asf?p=activemq.git;h=16bc0f0 ]

https://issues.apache.org/jira/browse/AMQ-6089 - support TMNOFLAGS as a scan end to allow looping calls to recover to terminate
, thanks for the test. I merged in the looping code from your test into an existing test that exercised the recovery calls with pending transactions to verify a loop can now exit.
The fix is a little different from the patch b/c it bypases the broker roundtrip.]