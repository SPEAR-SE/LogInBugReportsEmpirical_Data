[I ran into a similar issue but I don't think it was due to broken connections. I've got a heap dump from the broker (jdk1.6), and it looks like the OpenWireFormat marshalCache is the root cause of the one I'm working on. Each DataStructure[] marshalCache is roughly 64K because of the MARSHAL_CACHE_SIZE. There's 738 DataStructure[] arrays in my heap, taking up 48 Mbytes. Most of these only have one element used. 

I think issues 914 and 937 might be related or the same. , Those are the exact symptoms that occur as a result of the problem I saw. For every bad connection there was a bunch of individual object leakage (one each of the major transport filters, a couple different mbeans, a connection object etc), but by far the most serious leakage were the empty pre-allocated marshaler cache arrays. This looks like a common symptom of anything that would leak transports/connections, so it might not be the same root cause.

If you can reproduce it and want help I'd be happy to take a look.

If you can't find the problem one thing that could really help mitigate the severity of these kinds of leaks is to make the initialization of the marshaling caches conditional on the wireFormat.cacheEnabled flag. This would give a lot more leak headroom., Patch applied John with thanks - could you double check I've applied it correctly please?]