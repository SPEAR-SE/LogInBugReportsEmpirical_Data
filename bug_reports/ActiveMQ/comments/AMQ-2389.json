[Attached code that reproduces the problem. (-Xmx1100m), Note that uncommenting the lines

		activeMQConnectionFactory.setUseAsyncSend( true );
		activeMQConnectionFactory.setProducerWindowSize(1024*1024);

in the attached test results in ActiveMQ blocking before the MemoryLimit is reached.  This feels like a separate bug.

The following thread dump signature results in this case:

...
"main" prio=5 tid=0x0000000101805000 nid=0x101201000 in Object.wait() [0x0000000101200000..0x0000000101200ba0]
   java.lang.Thread.State: WAITING (on object monitor)
	at java.lang.Object.wait(Native Method)
	- waiting on <0x0000000107c43ad8> (a java.lang.Object)
	at java.lang.Object.wait(Object.java:485)
	at org.apache.activemq.usage.MemoryUsage.waitForSpace(MemoryUsage.java:67)
	- locked <0x0000000107c43ad8> (a java.lang.Object)
	at org.apache.activemq.ActiveMQMessageProducer.send(ActiveMQMessageProducer.java:221)
	at org.apache.activemq.ActiveMQMessageProducerSupport.send(ActiveMQMessageProducerSupport.java:300)
	at com.chad.test.ActiveMQSpamTest1.runTest(ActiveMQSpamTest1.java:74)
	- locked <0x0000000107c93088> (a org.apache.activemq.ActiveMQMessageProducer)
	at com.chad.test.ActiveMQSpamTest1.main(ActiveMQSpamTest1.java:117)
..., You've hit flow control - you can disable it if you wish  see http://activemq.apache.org/producer-flow-control.html
Note: flow control is disabled by default in 5.3, Why does uncommenting 

activeMQConnectionFactory.setProducerWindowSize(1024*1024);

in the attached test result in a hang with the following thread blocking?

"main" prio=5 tid=0x0000000101805000 nid=0x10174a000 in Object.wait() [0x0000000101749000]
   java.lang.Thread.State: WAITING (on object monitor)
	at java.lang.Object.wait(Native Method)
	- waiting on <0x00000001089cede8> (a java.lang.Object)
	at java.lang.Object.wait(Object.java:485)
	at org.apache.activemq.usage.MemoryUsage.waitForSpace(MemoryUsage.java:67)
	- locked <0x00000001089cede8> (a java.lang.Object)
	at org.apache.activemq.ActiveMQMessageProducer.send(ActiveMQMessageProducer.java:221)
	at org.apache.activemq.ActiveMQMessageProducerSupport.send(ActiveMQMessageProducerSupport.java:300)
	at com.chad.test.ActiveMQSpamTest1.runTest(ActiveMQSpamTest1.java:82)
	- locked <0x000000010894a5b0> (a org.apache.activemq.ActiveMQMessageProducer)
	at com.chad.test.ActiveMQSpamTest1.main(ActiveMQSpamTest1.java:125)

Shouldn't I be able to use producer flow control such that this test runs to completion?, Including the text of an email from an offline conversation:

{quote}
Hi Chad,
answers inline
{quote}
On 15 Sep 2009, at 14:53, Chad Showalter wrote:

Hello Rob,

Thanks for your feedback on AMQ-2389. We're trying to understand what we should expect from producer flow control as implemented in 5.2. You very correctly point out that disabling producer flow control allows the test I've attached to AMQ-2389 to run to completion. However, with flow control enabled (the 5.2 default), and with a reasonable producer window size set, as recommended at

http://activemq.apache.org/producer-flow-control.html

for async sends, the test does not complete (to see this behavior, uncomment the line in our test calling setProducerWindowSize()). It seems counterintuitive to us that the fix for a problem that occurs as the result of a fast producer / slow consumer would be to turn off producer flow control. Isn't this producer/consumer mismatch the very reason producer flow control was implemented?

{quote}
Yes - and producer flow control does have its place. What happens with flow control turned off is that messages overflow to temporary storage on disk - if they can't be delivered fast enough to a consumer. This only happens when the broker runs into its memory limit. What we have found that the cases where it might be more appropriate for flow control are fewer than overflowing to temporary storage.
{quote}

It seems others have experienced similar problems with flow control. E.g.,

http://kovyrin.net/2009/01/23/activemq-tips-flow-control-and-stalled-producers-problem/

A couple specific questions:

1. Is producer flow control fundamentally "broken" in 5.2?
{quote}
Not completely - though there are some issues around it that have been fixed in trunk - or Fuse MQ - which is really ActiveMQ 5.3
{quote}

2. If not, how can we configure it to allow the test in AMQ-2389 (or a similar situation with fast producers / slow consumers) to run to completion? (If this is impossible, why so?)

3. Why would we NOT want producer flow control when we have bursty producers that may occasionally temporarily swamp consumers
{quote}
For your use case - flow control off does seem to be the best option - as messages will overflow to temporary storage - and then only block producers when that limit is reached.
In reality its badly named - flow control off is really offline to disk first - then do flow control when the limit is reached.
{quote}


Thanks,
Chad 

{quote}
cheers,

Rob
{quote}]