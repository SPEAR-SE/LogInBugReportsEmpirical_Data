[please provide some code or a test case to support your finding. It may be that you have not called start on your connections :-) , public void testServer() {
        String url = "tcp://172.16.27.238:61616";
        ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(url);
        RedeliveryPolicy redeliveryPolicy = connectionFactory.getRedeliveryPolicy();
        redeliveryPolicy.setMaximumRedeliveries(2);
        redeliveryPolicy.setInitialRedeliveryDelay(2);
        redeliveryPolicy.setUseExponentialBackOff(true);
        redeliveryPolicy.setBackOffMultiplier((short) 1);
        
        Connection connection = null;
        try {
            connection = connectionFactory.createConnection();
            connection.start();
            final Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
            Destination queue = session.createQueue("IA_PROCESS_REQUEST");
            MessageConsumer consumer = session.createConsumer(queue);
            consumer.setMessageListener(new MessageListener() {

                public void onMessage(Message message) {
                    try {
                        LOG.info("receive message:" + message.toString());
                        if (message instanceof MapMessage) {
                            MapMessage map = (MapMessage) message;
                            Long id = map.getLong("id");
                            LOG.info("----id=" + id);
                            String content = map.getString("content");
                            LOG.info("----content=" + content);
                        }else {
                            LOG.info("message is not MapMessage! msg=" + message.getClass().getName());
                        }
                         message.acknowledge();
                    } catch (JMSException e) {
                        try {
                            session.recover();
                        } catch (JMSException e1) {
                        }
                    } catch (RuntimeException e2) {
                        try {
                            session.recover();
                        } catch (JMSException e1) {
                        }
                    }
                }
            });
        } catch (JMSException e) {
            e.printStackTrace(); 
        }

    }, why the number of message enqueued is more than the number of pending messages?, Can you reproduce this in a JUnit test case?, Could not reproduce this.]