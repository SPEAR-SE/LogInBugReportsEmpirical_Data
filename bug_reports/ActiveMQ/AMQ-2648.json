{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "fields": {
        "aggregateprogress": {
            "progress": 0,
            "total": 0
        },
        "aggregatetimeestimate": null,
        "aggregatetimeoriginalestimate": null,
        "aggregatetimespent": null,
        "assignee": null,
        "components": [{
            "id": "12313896",
            "name": "JMS client",
            "self": "https://issues.apache.org/jira/rest/api/2/component/12313896"
        }],
        "created": "2010-03-12T18:01:09.000+0000",
        "creator": {
            "active": true,
            "avatarUrls": {
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452",
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452"
            },
            "displayName": "Parasoft Corporation",
            "key": "parasoft",
            "name": "parasoft",
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=parasoft",
            "timeZone": "Etc/UTC"
        },
        "customfield_10010": null,
        "customfield_12310041": null,
        "customfield_12310080": null,
        "customfield_12310220": "2011-07-12T19:54:08.374+0000",
        "customfield_12310222": "1_*:*_1_*:*_42083578962_*|*_6_*:*_2_*:*_6015726592_*|*_4_*:*_1_*:*_322135",
        "customfield_12310250": null,
        "customfield_12310290": null,
        "customfield_12310291": null,
        "customfield_12310300": null,
        "customfield_12310310": "0.0",
        "customfield_12310420": "60039",
        "customfield_12310920": "59029",
        "customfield_12310921": null,
        "customfield_12311020": null,
        "customfield_12311024": null,
        "customfield_12311120": null,
        "customfield_12311820": "0|i0ah0f:",
        "customfield_12312022": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "customfield_12312026": null,
        "customfield_12312220": null,
        "customfield_12312320": null,
        "customfield_12312321": null,
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312324": null,
        "customfield_12312325": null,
        "customfield_12312326": null,
        "customfield_12312327": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312330": null,
        "customfield_12312331": null,
        "customfield_12312332": null,
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12312335": null,
        "customfield_12312336": null,
        "customfield_12312337": null,
        "customfield_12312338": null,
        "customfield_12312339": null,
        "customfield_12312340": null,
        "customfield_12312341": null,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Sep 20 11:01:37 UTC 2011",
        "customfield_12312720": null,
        "customfield_12312823": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "customfield_12312923": null,
        "customfield_12313422": "false",
        "customfield_12313520": null,
        "description": "We have built a client program for sending and receiving JMS messages. Each send/receive operation is performed in a thread, so that we can handle timeouts properly. However, if the thread which is performing the receive() gets interrupted, the queue no longer responds to receive() requests, even from another client with a separate JVM.\n\nTo reproduce, use two separate programs:\n-----------[QueueSendReceiveActiveMQInterrupt.java]--------\nimport java.util.*;\nimport javax.jms.*;\nimport javax.naming.*;\n\npublic class QueueSendReceiveActiveMQInterrupt implements MessageListener {\n\n    public static void main(String[] args) throws Exception {\n        useConnectionFactory();\n    }\n    private static void useConnectionFactory() throws Exception, JMSException {\n        ConnectionFactory factory = getConnectionFactoryUsingJNDI();\n        Connection connect = null;\n        Session session = null;\n        connect = factory.createConnection(/*\"Admin\", \"Admin\"*/);\n        session = connect.createSession(false, Session.AUTO_ACKNOWLEDGE);\n        Destination entryDest = session.createQueue(\"soatest.demo.queue\");\n        Destination exitDest = entryDest;\n        MessageProducer producer = session.createProducer(entryDest);\n        producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);\n        MessageConsumer consumer = session.createConsumer(exitDest);\n        connect.start();\n        TextMessage txtMessage = session.createTextMessage();\n        txtMessage.setJMSReplyTo(exitDest);\n        txtMessage.setText(\"Hello 1 from standalone program!\");\n        producer.send(txtMessage);\n        System.out.println(\"message 1 sent\");\n        Message msg;\n        \n        // threaded receive with a kill\n        ReceiverRunner runner = (new QueueSendReceiveActiveMQInterrupt()).new ReceiverRunner(consumer);\n        Thread t = new Thread(runner);\n        t.setDaemon(true);\n        t.start();\n        t.join(1000);\n        t.interrupt();\n        msg = runner.getMessage();\n        if (msg != null) {\n            System.out.println(\"msg 1 received: \" + ((TextMessage)msg).getText());\n        } else {\n            System.out.println(\"got no message 1\");\n        }\n        \n        producer.close();\n//        consumer.close();\n//        session.close();\n//        connect.close();\n    }\n    private static ConnectionFactory getConnectionFactoryUsingJNDI() throws Exception {\n        Object ret = null;\n        Properties props = new Properties();\n        props.put(javax.naming.Context.PROVIDER_URL, \"tcp://skynet:61616\");\n        props.put(javax.naming.Context.INITIAL_CONTEXT_FACTORY, \"org.apache.activemq.jndi.ActiveMQInitialContextFactory\");\n        InitialContext ictx = new javax.naming.InitialContext(props);\n        Object obj = ictx.lookup(\"QueueConnectionFactory\");\n        if (obj instanceof Reference) {\n            Reference ref = (Reference)obj;\n            String className = ref.getClassName();\n            System.out.println(\"Connection factory class name: \" + className);\n            Class cls = Class.forName(className);\n            ret = cls.newInstance();\n        } else {\n            ret = obj;\n        }\n        ictx.close();\n        return (ConnectionFactory)ret;\n    }\n    public void onMessage(Message msg) {\n        if (msg != null) {\n            try {\n                System.out.println(\"msg = \" + ((TextMessage)msg).getText());\n            } catch (JMSException e) {\n                e.printStackTrace();\n            }\n        } else {\n            System.out.println(\"got nothing\");\n        }\n    }\n    public class ReceiverRunner implements Runnable {\n        private MessageConsumer consumer;\n        private Message msg;\n        \n        public ReceiverRunner(MessageConsumer consumer) {\n            this.consumer = consumer;\n        }\n        public void run() {\n            try {\n                msg = consumer.receive(500);\n                // change the following to a very small amount like 500 and notice how everything works\n                consumer.receive(10000); // another receive just so it blocks and get the thread to stop\n            } catch (JMSException e) {\n                e.printStackTrace();\n            } finally {\n                try {\n                    consumer.close();\n                } catch (JMSException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n        public Message getMessage() {\n            return msg;\n        }\n    }\n}\n--\n-----------[QueueSendReceiveActiveMQ.java]--------\nimport java.util.*;\nimport javax.jms.*;\nimport javax.naming.*;\n\npublic class QueueSendReceiveActiveMQ implements MessageListener {\n\n    public static void main(String[] args) throws Exception {\n        useConnectionFactory();\n    }\n    private static void useConnectionFactory() throws Exception, JMSException {\n        ConnectionFactory factory = getConnectionFactoryUsingJNDI();\n        Connection connect = null;\n        Session session = null;\n        connect = factory.createConnection(/*\"Admin\", \"Admin\"*/);\n        session = connect.createSession(false, Session.AUTO_ACKNOWLEDGE);\n        Destination entryDest = session.createQueue(\"soatest.demo.queue\");\n        Destination exitDest = entryDest;\n        MessageProducer producer = session.createProducer(entryDest);\n        producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);\n        MessageConsumer consumer = session.createConsumer(exitDest);\n        connect.start();\n        TextMessage txtMessage = session.createTextMessage();\n        txtMessage.setJMSReplyTo(exitDest);\n        txtMessage.setText(\"without thread interrupt: Hello 1 from standalone program!\");\n        producer.send(txtMessage);\n        System.out.println(\"without thread interrupt: message 1 sent\");\n        Message msg;\n        // regular receive\n        msg = consumer.receive(2000);\n        \n        if (msg != null) {\n            System.out.println(\"msg 1 received: \" + ((TextMessage)msg).getText());\n        } else {\n            System.out.println(\"without thread interrupt: got no message 1\");\n        }\n        \n        producer.close();\n        consumer.close();\n        session.close();\n        connect.close();\n        \n    }\n    private static ConnectionFactory getConnectionFactoryUsingJNDI() throws Exception {\n        Object ret = null;\n        Properties props = new Properties();\n        props.put(javax.naming.Context.PROVIDER_URL, \"tcp://skynet:61616\");\n        props.put(javax.naming.Context.INITIAL_CONTEXT_FACTORY, \"org.apache.activemq.jndi.ActiveMQInitialContextFactory\");\n        InitialContext ictx = new javax.naming.InitialContext(props);\n        Object obj = ictx.lookup(\"QueueConnectionFactory\");\n        if (obj instanceof Reference) {\n            Reference ref = (Reference)obj;\n            String className = ref.getClassName();\n            System.out.println(\"Connection factory class name: \" + className);\n            Class cls = Class.forName(className);\n            ret = cls.newInstance();\n        } else {\n            ret = obj;\n        }\n        ictx.close();\n        return (ConnectionFactory)ret;\n    }\n\n    public void onMessage(Message msg) {\n        if (msg != null) {\n            try {\n                System.out.println(\"msg = \" + ((TextMessage)msg).getText());\n            } catch (JMSException e) {\n                e.printStackTrace();\n            }\n        } else {\n            System.out.println(\"got nothing\");\n        }\n    }\n}\n--\n\n1) Run QueueSendReceiveActiveMQ alone, notice how it works in sending receiving messages from the queue.\n2) Run QueueSendReceiveActiveMQInterrupt will result in the program halting (due to some non-daemon thread created by ActiveMQ), then while it is running run QueueSendReceiveActiveMQ and notice how it fails to retrieve messages from the queue. If JMS Consumer.close() is excuted in a thread that is interrupted, it fails and throws an exception and leaves the consumer in some bad state.\n\nNote that the same code does not exhibit this behavior when using other vendors' MQ solutions.",
        "duedate": null,
        "environment": null,
        "fixVersions": [{
            "archived": false,
            "description": "Next v5 maintenance release",
            "id": "12317974",
            "name": "5.6.0",
            "releaseDate": "2012-05-07",
            "released": true,
            "self": "https://issues.apache.org/jira/rest/api/2/version/12317974"
        }],
        "issuelinks": [],
        "issuetype": {
            "avatarId": 21133,
            "description": "A problem which impairs or prevents the functions of the product.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
            "id": "1",
            "name": "Bug",
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
            "subtask": false
        },
        "labels": [],
        "lastViewed": null,
        "priority": {
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "id": "3",
            "name": "Major",
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3"
        },
        "progress": {
            "progress": 0,
            "total": 0
        },
        "project": {
            "avatarUrls": {
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12311210&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12311210&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12311210&avatarId=10011",
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12311210&avatarId=10011"
            },
            "id": "12311210",
            "key": "AMQ",
            "name": "ActiveMQ",
            "projectCategory": {
                "description": "ActiveMQ",
                "id": "11160",
                "name": "ActiveMQ",
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/11160"
            },
            "self": "https://issues.apache.org/jira/rest/api/2/project/12311210"
        },
        "reporter": {
            "active": true,
            "avatarUrls": {
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452",
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452"
            },
            "displayName": "Parasoft Corporation",
            "key": "parasoft",
            "name": "parasoft",
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=parasoft",
            "timeZone": "Etc/UTC"
        },
        "resolution": {
            "description": "A fix for this issue is checked into the tree and tested.",
            "id": "1",
            "name": "Fixed",
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1"
        },
        "resolutiondate": "2011-09-20T11:01:37.000+0000",
        "status": {
            "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
            "id": "6",
            "name": "Closed",
            "self": "https://issues.apache.org/jira/rest/api/2/status/6",
            "statusCategory": {
                "colorName": "green",
                "id": 3,
                "key": "done",
                "name": "Done",
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3"
            }
        },
        "subtasks": [],
        "summary": "Interrupting Consumer.close() thread puts queue into unusable state",
        "timeestimate": null,
        "timeoriginalestimate": null,
        "timespent": null,
        "updated": "2011-09-20T11:01:37.000+0000",
        "versions": [{
            "archived": false,
            "description": "",
            "id": "12315619",
            "name": "5.2.0",
            "releaseDate": "2008-11-20",
            "released": true,
            "self": "https://issues.apache.org/jira/rest/api/2/version/12315619"
        }],
        "votes": {
            "hasVoted": false,
            "self": "https://issues.apache.org/jira/rest/api/2/issue/AMQ-2648/votes",
            "votes": 0
        },
        "watches": {
            "isWatching": false,
            "self": "https://issues.apache.org/jira/rest/api/2/issue/AMQ-2648/watchers",
            "watchCount": 0
        },
        "workratio": -1
    },
    "id": "12483724",
    "key": "AMQ-2648",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/12483724"
}