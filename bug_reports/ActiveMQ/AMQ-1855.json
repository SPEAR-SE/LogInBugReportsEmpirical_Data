{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "fields": {
        "aggregateprogress": {
            "progress": 0,
            "total": 0
        },
        "aggregatetimeestimate": null,
        "aggregatetimeoriginalestimate": null,
        "aggregatetimespent": null,
        "assignee": {
            "active": true,
            "avatarUrls": {
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452",
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452"
            },
            "displayName": "Gary Tully",
            "key": "gtully",
            "name": "gtully",
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=gtully",
            "timeZone": "Etc/UTC"
        },
        "components": [{
            "id": "12313893",
            "name": "Connector",
            "self": "https://issues.apache.org/jira/rest/api/2/component/12313893"
        }],
        "created": "2008-07-11T13:30:13.000+0000",
        "creator": {
            "active": true,
            "avatarUrls": {
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452",
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452"
            },
            "displayName": "Mario Lukica",
            "key": "mlukica",
            "name": "mlukica",
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=mlukica",
            "timeZone": "Etc/UTC"
        },
        "customfield_10010": null,
        "customfield_12310041": null,
        "customfield_12310080": null,
        "customfield_12310220": "2009-08-27T14:27:54.801+0000",
        "customfield_12310222": "1_*:*_1_*:*_35926532836_*|*_5_*:*_1_*:*_0",
        "customfield_12310250": null,
        "customfield_12310290": null,
        "customfield_12310291": null,
        "customfield_12310300": null,
        "customfield_12310310": "0.0",
        "customfield_12310420": "84586",
        "customfield_12310920": "119685",
        "customfield_12310921": null,
        "customfield_12311020": null,
        "customfield_12311024": null,
        "customfield_12311120": null,
        "customfield_12311820": "0|i0ku1j:",
        "customfield_12312022": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "customfield_12312026": null,
        "customfield_12312220": null,
        "customfield_12312320": null,
        "customfield_12312321": null,
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312324": null,
        "customfield_12312325": null,
        "customfield_12312326": null,
        "customfield_12312327": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312330": null,
        "customfield_12312331": null,
        "customfield_12312332": null,
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12312335": null,
        "customfield_12312336": null,
        "customfield_12312337": null,
        "customfield_12312338": null,
        "customfield_12312339": null,
        "customfield_12312340": null,
        "customfield_12312341": null,
        "customfield_12312520": null,
        "customfield_12312521": "Mon Aug 31 09:05:45 UTC 2009",
        "customfield_12312720": null,
        "customfield_12312823": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "customfield_12312923": null,
        "customfield_12313422": "false",
        "customfield_12313520": null,
        "description": "I believe there is a race condition in SimpleDiscoveryAgent which can cause subsequent bridge restart to fail, without starting new thread that should restart a bridge. As a consequence, network bridge is never restarted.\n\nFollowing scenario leads to this:\n1. bridge is disconnected (e.g. local error: org.apache.activemq.transport.InactivityIOException: Channel was inactive for too long)\n2. bridge is disposed in separate thread in DemandForwardingBridge.serviceLocalException\n3. SimpleDiscoveryAgent.serviceFailed is called which starts up another thread which calls DiscoveryNetworkConnector.onServiceAdd which tries to restart bridge\n4. bridge startup can cause javax.jms.InvalidClientIDException: Broker: some_broker2 - Client: NC_some_broker1_inboundlocalhost already connected (this one is caused by race condition with thread disposing the bridge, since given client subscription should be removed by thread disposing the bridge (step 2)\n5. this causes invocation of DemandForwardingBridge.serviceLocalException (this call can be made asynchronously, while previous bridge startup is still in progress)\n\nAs a consequence, multiple threads can end up calling SimpleDiscoveryAgent.serviceFailed simultaneously.\n\nserviceFailed will call DiscoveryNetworkConnector.onServiceAdd which will try to reconnect bridge. Reconnect logic is guarded by \nif( event.failed.compareAndSet(false, true) ) \n\nwhich tries to ensure that only a single thread is reconnecting bridge at some point.\n{code}\n    public void serviceFailed(DiscoveryEvent devent) throws IOException {\n    \t\n        final SimpleDiscoveryEvent event = (SimpleDiscoveryEvent) devent;\n        if( event.failed.compareAndSet(false, true) ) {\n        \t\n\t\t\tlistener.onServiceRemove(event);\n\t    \tThread thread = new Thread() {\n\t    \t\tpublic void run() {\n\t\n\t\n\t    \t\t\t// We detect a failed connection attempt because the service fails right\n\t    \t\t\t// away.\n\t    \t\t\tif( event.connectTime + minConnectTime > System.currentTimeMillis()  ) {\n\t    \t\t\t\t\n\t    \t\t\t\tevent.connectFailures++;\n\t    \t\t\t\t\n\t    \t\t\t\tif( maxReconnectAttempts>0 &&  event.connectFailures >= maxReconnectAttempts ) {\n\t    \t\t\t\t\t// Don' try to re-connect\n\t    \t\t\t\t\treturn;\n\t    \t\t\t\t}\n\t    \t\t\t\t\n\t\t                synchronized(sleepMutex){\n\t\t                    try{\n\t\t                    \tif( !running.get() )\n\t\t                    \t\treturn;\n\t\t                    \t\n\t\t                        sleepMutex.wait(event.reconnectDelay);\n\t\t                    }catch(InterruptedException ie){\n                                Thread.currentThread().interrupt();\n\t\t                       return;\n\t\t                    }\n\t\t                }\n\t\n\t\t                if (!useExponentialBackOff) {\n\t\t                    event.reconnectDelay = initialReconnectDelay;\n\t\t                } else {\n\t\t                    // Exponential increment of reconnect delay.\n\t\t                    event.reconnectDelay*=backOffMultiplier;\n\t\t                    if(event.reconnectDelay>maxReconnectDelay)\n\t\t                        event.reconnectDelay=maxReconnectDelay;\n\t\t                }\n\t\t                \n\t    \t\t\t} else {\n\t    \t\t\t\tevent.connectFailures = 0;\n\t                    event.reconnectDelay = initialReconnectDelay;\n\t    \t\t\t}\n\t    \t\t\t                    \t\t\t\n\t            \tif( !running.get() )\n\t            \t\treturn;\n\t            \t\n\t    \t\t\tevent.connectTime = System.currentTimeMillis();\n\t    \t\t\tevent.failed.set(false);\n\t    \t\t\t\n\t    \t\t\tlistener.onServiceAdd(event);\n\t    \t\t}\n\t    \t};\n\t    \tthread.setDaemon(true);\n\t    \tthread.start();\n        }\n    }\n{code}\n\nPrior to calling DiscoveryNetworkConnector.onServiceAdd, event.failed is set to false (T1), and it's possible for some other thread (T2) to enter block guarded by if( event.failed.compareAndSet(false, true) ) , while reconnect process has already begun by first thread. T2 can satisfy condition: if( event.connectTime + minConnectTime > System.currentTimeMillis()  )  and will enter \nsleepMutex.wait(event.reconnectDelay), but still holding event.failed == true (causing all other calls to serviceFailed not to start thread that will reconnect bridge).\n\nIf first thread (T1) fails to reconnect bridge (e.g because of InvalidClientIDException described in step 4), it will not schedule new thread to restart broker (and call DiscoveryNetworkConnector.onServiceRemove, and cleanup DiscoveryNetworkConnector.bridges) because of event.failed == true, and T2 still waiting (default 5 sec). When T2 wakes up from wait, it will try to restart broker and fail because of following condition in DiscoveryNetworkConnector:\n{code}\n            if (    bridges.containsKey(uri) \n                    || localURI.equals(uri) \n                    || (connectionFilter!=null && !connectionFilter.connectTo(uri))\n                    )\n                return;\n{code}\n\nbridges.containsKey(uri) will be true (thread T1 added it while unsuccessfully trying to reconnect bridge), and T2 will return from DiscoveryNetworkConnector.onServiceAdd and will not start bridge. \nNo additional attempt to reconnect bridge will be made, since T2 held event.failed == true, effectively ignoring SimpleDiscoveryAgent.serviceFailed calls from other threads processing local or remote bridge exceptions.\n\nEnd result:\n- DiscoveryNetworkConnector.bridges contains bridge that is disposed and prevents all other attempts to restart bridge (onServiceAdd always returns because bridges.containsKey(uri) == true) \n- SimpleDiscoveryAgent doesn't try to reconnect the bridge (T2 was a last attempt which returned without restarting the bridge - SimpleDiscoveryAgent.serviceFailed is not called again, since bridge is not started\n\nI think that synchronization of threads processing bridge exceptions and entering SimpleDiscoveryAgent.serviceFailed should be verified and/or improved.\nAlso, InvalidClientIDException is relatively common (at least on multicore machines, e.g. Solaris T2000), maybe ConduitBridge.serviceLocalException (which starts another thread doing ServiceSupport.dispose(DemandForwardingBridgeSupport.this)), should be changed to wait a bit for bridge disposal to finish (e.g. sleep for some time) and then try to restart a bridge - waiting for a second more to restart a bridge is better then not to start it at all\n\nI've seen this problem in 4.1.0 and 4.1.2, but I think it can occur in 5.1 and 5.2 trunk (SimpleDiscoveryAgent.serviceFailed and DiscoveryNetworkConnector.onServiceAdd are more or less the same, just using ASYNC_TASKS to execute asynchronous calls, instead of starting new threads directly.",
        "duedate": null,
        "environment": null,
        "fixVersions": [{
            "archived": false,
            "description": "",
            "id": "12315620",
            "name": "5.3.0",
            "releaseDate": "2009-10-13",
            "released": true,
            "self": "https://issues.apache.org/jira/rest/api/2/version/12315620"
        }],
        "issuelinks": [{
            "id": "12335036",
            "outwardIssue": {
                "fields": {
                    "issuetype": {
                        "avatarId": 21133,
                        "description": "A problem which impairs or prevents the functions of the product.",
                        "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
                        "id": "1",
                        "name": "Bug",
                        "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
                        "subtask": false
                    },
                    "priority": {
                        "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                        "id": "3",
                        "name": "Major",
                        "self": "https://issues.apache.org/jira/rest/api/2/priority/3"
                    },
                    "status": {
                        "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                        "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                        "id": "5",
                        "name": "Resolved",
                        "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                        "statusCategory": {
                            "colorName": "green",
                            "id": 3,
                            "key": "done",
                            "name": "Done",
                            "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3"
                        }
                    },
                    "summary": "Race condition in DemandForwardingBridgeSupport can cause remote connection to be leaked."
                },
                "id": "12483820",
                "key": "AMQ-3016",
                "self": "https://issues.apache.org/jira/rest/api/2/issue/12483820"
            },
            "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12335036",
            "type": {
                "id": "12310050",
                "inward": "is broken by",
                "name": "Regression",
                "outward": "breaks",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310050"
            }
        }],
        "issuetype": {
            "avatarId": 21133,
            "description": "A problem which impairs or prevents the functions of the product.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
            "id": "1",
            "name": "Bug",
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
            "subtask": false
        },
        "labels": [],
        "lastViewed": null,
        "priority": {
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "id": "3",
            "name": "Major",
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3"
        },
        "progress": {
            "progress": 0,
            "total": 0
        },
        "project": {
            "avatarUrls": {
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12311210&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12311210&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12311210&avatarId=10011",
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12311210&avatarId=10011"
            },
            "id": "12311210",
            "key": "AMQ",
            "name": "ActiveMQ",
            "projectCategory": {
                "description": "ActiveMQ",
                "id": "11160",
                "name": "ActiveMQ",
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/11160"
            },
            "self": "https://issues.apache.org/jira/rest/api/2/project/12311210"
        },
        "reporter": {
            "active": true,
            "avatarUrls": {
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452",
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452"
            },
            "displayName": "Mario Lukica",
            "key": "mlukica",
            "name": "mlukica",
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=mlukica",
            "timeZone": "Etc/UTC"
        },
        "resolution": {
            "description": "A fix for this issue is checked into the tree and tested.",
            "id": "1",
            "name": "Fixed",
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1"
        },
        "resolutiondate": "2009-08-31T09:05:46.000+0000",
        "status": {
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "id": "5",
            "name": "Resolved",
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "statusCategory": {
                "colorName": "green",
                "id": 3,
                "key": "done",
                "name": "Done",
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3"
            }
        },
        "subtasks": [],
        "summary": "bridge reconnection stops because of race in SimpleDiscoveryAgent",
        "timeestimate": null,
        "timeoriginalestimate": null,
        "timespent": null,
        "updated": "2010-11-04T20:13:44.000+0000",
        "versions": [{
            "archived": false,
            "description": "",
            "id": "12315615",
            "name": "4.1.2",
            "releaseDate": "2008-04-14",
            "released": true,
            "self": "https://issues.apache.org/jira/rest/api/2/version/12315615"
        }],
        "votes": {
            "hasVoted": false,
            "self": "https://issues.apache.org/jira/rest/api/2/issue/AMQ-1855/votes",
            "votes": 0
        },
        "watches": {
            "isWatching": false,
            "self": "https://issues.apache.org/jira/rest/api/2/issue/AMQ-1855/watchers",
            "watchCount": 3
        },
        "workratio": -1
    },
    "id": "12483857",
    "key": "AMQ-1855",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/12483857"
}