{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "fields": {
        "aggregateprogress": {
            "progress": 0,
            "total": 0
        },
        "aggregatetimeestimate": null,
        "aggregatetimeoriginalestimate": null,
        "aggregatetimespent": null,
        "assignee": null,
        "components": [],
        "created": "2012-10-31T23:20:16.000+0000",
        "creator": {
            "active": true,
            "avatarUrls": {
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452",
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452"
            },
            "displayName": "Stirling Chow",
            "key": "stirlingc",
            "name": "stirlingc",
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=stirlingc",
            "timeZone": "Etc/UTC"
        },
        "customfield_10010": null,
        "customfield_12310041": null,
        "customfield_12310080": null,
        "customfield_12310220": "2013-10-30T14:31:25.496+0000",
        "customfield_12310222": "1_*:*_1_*:*_97793564576_*|*_6_*:*_1_*:*_0",
        "customfield_12310250": null,
        "customfield_12310290": null,
        "customfield_12310291": null,
        "customfield_12310300": null,
        "customfield_12310310": "0.0",
        "customfield_12310420": "253535",
        "customfield_12310920": "78486",
        "customfield_12310921": null,
        "customfield_12311020": null,
        "customfield_12311024": null,
        "customfield_12311120": null,
        "customfield_12311820": "0|i0ds4n:",
        "customfield_12312022": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "customfield_12312026": null,
        "customfield_12312220": null,
        "customfield_12312320": null,
        "customfield_12312321": null,
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312324": null,
        "customfield_12312325": null,
        "customfield_12312326": null,
        "customfield_12312327": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312330": null,
        "customfield_12312331": null,
        "customfield_12312332": null,
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12312335": null,
        "customfield_12312336": null,
        "customfield_12312337": null,
        "customfield_12312338": null,
        "customfield_12312339": null,
        "customfield_12312340": null,
        "customfield_12312341": null,
        "customfield_12312520": null,
        "customfield_12312521": "Mon Dec 07 20:13:01 UTC 2015",
        "customfield_12312720": null,
        "customfield_12312823": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "customfield_12312923": null,
        "customfield_12313422": "false",
        "customfield_12313520": null,
        "description": "Symptom\n=======\nWe have a virtual topic that is shared by a network of brokers.  Each broker has consumers that process the corresponding Consumer.*.VirtualTopic.> queue.\n\nWhile testing the effects of memory limits on our system, we encountered AMQ-4148, which resulted in duplicate subscriptions being made to the virtual topic.  These duplicate subcriptions were attempting to enqueue the same topic message multiple times to the corresponding Consumer.*.VirtualTopic.>.\n\nAlthough logic exists in queues to handle duplicate messages, we noticed lots of strange behaviour with duplicate handling.  We decided to investigate further and found a race condition whereby duplicate non-persistent messages that were correctly ignored resulted in the queue size appearing to be non-empty when in fact there were no messages.\n\nWhile our original investigation was prompted by AMQ-4148, the test case we attached to this ticket does not rely on the misbehaviour caused by AMQ-4148, but can occur during normal operation of network bridges when there are multiple consumers for a virtual topic (as is the case, e.g., when conduit subscriptions are disabled).\n\nCause\n=====\nIf a virtual topic has multiple consumers, then sending a message to the topic results in multiple dispatches of the same message (one to each consumer).  If the multiple consumers originate from the same remote broker (e.g., because conduit subscriptions are disabled), then a single message sent to the virtual topic on broker1 will result in multiple duplicate messages being sent to the virtual topic on broker2.\n\nIf broker2 has corresponding Consumer.*.VirtualTopic.> queue, then the multiple duplicate messages sent to the virtual topic on broker2 will result in multiple duplicate messages being sent to the queue.  \n\nIf the messages are non-persistent, the only logic that prevents each duplicate message from being dispatched to a consumer is as follows:\n\n{code:title=Queue.java}\nprivate PendingList doPageInForDispatch(boolean force) throws Exception {\n...\n        // Only add new messages, not already pagedIn to avoid multiple\n        // dispatch attempts\n        pagedInMessagesLock.writeLock().lock();\n        try {\n            if(isPrioritizedMessages()) {\n                resultList = new PrioritizedPendingList();\n            } else {\n                resultList = new OrderedPendingList();\n            }\n            for (QueueMessageReference ref : result) {\n                if (!pagedInMessages.containsKey(ref.getMessageId())) {\n                    pagedInMessages.put(ref.getMessageId(), ref);\n                    resultList.addMessageLast(ref);\n                } else {\n                    ref.decrementReferenceCount();\n                }\n            }\n        } finally {\n            pagedInMessagesLock.writeLock().unlock();\n        }\n...        \n{code}\n\nIf the consumers are fast and acknowledge the initial message dispatch before the next duplicate message is sent to the queue, then the {{pagedInMessages.constainsKey(...)}} check will *not* prevent the duplicate message from being dispatched since the message ID will have already been removed as part of the acknowledgement.\n\nThis is problem 1: duplicate detection fails if acknowledgements are quick\n\nIf the consumers are slow and don't acknowledge the initial message dispatch before the next duplicate message is sent to the queue, then duplicate detection will correctly ignore the message.  However, by this time, the duplicate message has already incremented the queue size:\n\n{code:title=Queue.java}\nfinal void messageSent(final ConnectionContext context, final Message msg) throws Exception {\n    destinationStatistics.getEnqueues().increment();\n    destinationStatistics.getMessages().increment();\n    messageDelivered(context, msg);\n{code}\n\nThe call to {{messageSent}} is made by the thread sending the message to the queue.  This thread is completely unaware that the message was ignored since the call to {{doPageInForDispatch}} is done by a separate thread (e.g., the taskrunner calling {{iterate()}}.\n\nSince the queue size is incremented, but the duplicate message is never dispatched, there is no subsequent acknowledgement ot reduce the queue size.  As a result, each duplicate message that is ignored remains counted in the queue size even though it's no longer in the queue.  \n\nThis is problem 2: if duplication detection succeeds, the queue size incorrectly counts the duplicate/ignored message.\n\nWhich problem gets exhibited depends on a race condition between the thread(s) enqueueing the duplicate virtual topic subscriptions and consumer threads acknowledging the dispatches.\n\nWhile the unit test's methodology of creating multiple virtual topic consumers is somewhat contrived, there must be other circumstances under which duplicate messages are sent to queues (otherwise, why would there be logic to handle this case?)  In this context, the test case reveals a problem with the handling of duplicate messages.\n\nSolution\n========\nNone at this time.  We worked around the problem by patching AMQ-4148 to prevent the duplicate subscriptions that cause this bug.  However, our concern has been raised about AMQ's generally handling of duplicate messages sent to a queue.\n\n\n\n",
        "duedate": null,
        "environment": null,
        "fixVersions": [],
        "issuelinks": [],
        "issuetype": {
            "avatarId": 21133,
            "description": "A problem which impairs or prevents the functions of the product.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
            "id": "1",
            "name": "Bug",
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
            "subtask": false
        },
        "labels": [],
        "lastViewed": null,
        "priority": {
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "id": "3",
            "name": "Major",
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3"
        },
        "progress": {
            "progress": 0,
            "total": 0
        },
        "project": {
            "avatarUrls": {
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12311210&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12311210&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12311210&avatarId=10011",
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12311210&avatarId=10011"
            },
            "id": "12311210",
            "key": "AMQ",
            "name": "ActiveMQ",
            "projectCategory": {
                "description": "ActiveMQ",
                "id": "11160",
                "name": "ActiveMQ",
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/11160"
            },
            "self": "https://issues.apache.org/jira/rest/api/2/project/12311210"
        },
        "reporter": {
            "active": true,
            "avatarUrls": {
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452",
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452"
            },
            "displayName": "Stirling Chow",
            "key": "stirlingc",
            "name": "stirlingc",
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=stirlingc",
            "timeZone": "Etc/UTC"
        },
        "resolution": {
            "description": "The problem is not completely described.",
            "id": "4",
            "name": "Incomplete",
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/4"
        },
        "resolutiondate": "2015-12-07T20:13:01.000+0000",
        "status": {
            "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
            "id": "6",
            "name": "Closed",
            "self": "https://issues.apache.org/jira/rest/api/2/status/6",
            "statusCategory": {
                "colorName": "green",
                "id": 3,
                "key": "done",
                "name": "Done",
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3"
            }
        },
        "subtasks": [],
        "summary": "Duplicate non-persistent messages that are sent to a queue are either dispatched multiple times (i.e., not detected as duplicates) or cause the queue size to be miscalculated.",
        "timeestimate": null,
        "timeoriginalestimate": null,
        "timespent": null,
        "updated": "2015-12-07T20:13:01.000+0000",
        "versions": [],
        "votes": {
            "hasVoted": false,
            "self": "https://issues.apache.org/jira/rest/api/2/issue/AMQ-4151/votes",
            "votes": 0
        },
        "watches": {
            "isWatching": false,
            "self": "https://issues.apache.org/jira/rest/api/2/issue/AMQ-4151/watchers",
            "watchCount": 3
        },
        "workratio": -1
    },
    "id": "12614294",
    "key": "AMQ-4151",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/12614294"
}