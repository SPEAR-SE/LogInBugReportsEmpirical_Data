{"expand":"renderedFields,names,schema,operations,editmeta,changelog,versionedRepresentations","id":"13135592","self":"https://issues.apache.org/jira/rest/api/2/issue/13135592","key":"HADOOP-15206","fields":{"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype","name":"Bug","subtask":false,"avatarId":21133},"timespent":null,"project":{"self":"https://issues.apache.org/jira/rest/api/2/project/12310240","id":"12310240","key":"HADOOP","name":"Hadoop Common","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/projectavatar?pid=12310240&avatarId=10095","24x24":"https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12310240&avatarId=10095","16x16":"https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12310240&avatarId=10095","32x32":"https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12310240&avatarId=10095"},"projectCategory":{"self":"https://issues.apache.org/jira/rest/api/2/projectCategory/10292","id":"10292","description":"Scalable Distributed Computing","name":"Hadoop"}},"fixVersions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12341432","id":"12341432","description":"3.1.0 release","name":"3.1.0","archived":false,"released":true,"releaseDate":"2018-04-06"},{"self":"https://issues.apache.org/jira/rest/api/2/version/12341706","id":"12341706","description":"2.10.0 Release","name":"2.10.0","archived":false,"released":false},{"self":"https://issues.apache.org/jira/rest/api/2/version/12341760","id":"12341760","description":"2.9.1 release","name":"2.9.1","archived":false,"released":true,"releaseDate":"2018-05-03"},{"self":"https://issues.apache.org/jira/rest/api/2/version/12342178","id":"12342178","description":"2.8.4 Release","name":"2.8.4","archived":false,"released":true,"releaseDate":"2018-05-15"},{"self":"https://issues.apache.org/jira/rest/api/2/version/12342315","id":"12342315","description":"2.7.6 release","name":"2.7.6","archived":false,"released":true,"releaseDate":"2018-04-16"},{"self":"https://issues.apache.org/jira/rest/api/2/version/12343023","id":"12343023","description":"3.0.3 release","name":"3.0.3","archived":false,"released":true,"releaseDate":"2018-05-31"}],"aggregatetimespent":null,"resolution":{"self":"https://issues.apache.org/jira/rest/api/2/resolution/1","id":"1","description":"A fix for this issue is checked into the tree and tested.","name":"Fixed"},"customfield_12312322":null,"customfield_12310220":"2018-02-02T23:07:42.899+0000","customfield_12312520":null,"customfield_12312323":null,"customfield_12312521":"Thu Mar 08 19:27:12 UTC 2018","customfield_12310420":"9223372036854775807","customfield_12312320":null,"customfield_12310222":"1_*:*_1_*:*_1131557715_*|*_5_*:*_1_*:*_0_*|*_10002_*:*_1_*:*_167261577","customfield_12312321":null,"resolutiondate":"2018-02-16T21:30:21.892+0000","workratio":-1,"customfield_12312328":null,"customfield_12312329":null,"customfield_12312923":null,"customfield_12312326":null,"customfield_12312920":null,"customfield_12310300":null,"customfield_12312327":null,"customfield_12312921":null,"customfield_12312324":null,"customfield_12312720":null,"customfield_12312325":null,"lastViewed":null,"watches":{"self":"https://issues.apache.org/jira/rest/api/2/issue/HADOOP-15206/watchers","watchCount":14,"isWatching":false},"created":"2018-02-01T20:43:22.644+0000","customfield_12310192":null,"customfield_12310191":[{"self":"https://issues.apache.org/jira/rest/api/2/customFieldOption/10343","value":"Reviewed","id":"10343"}],"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.svg","name":"Major","id":"3"},"labels":[],"customfield_12312333":null,"customfield_12310230":null,"customfield_12312334":null,"customfield_12313422":"false","customfield_12310310":"9.0","customfield_12312331":null,"customfield_12312332":null,"timeestimate":null,"aggregatetimeoriginalestimate":null,"customfield_12311120":null,"customfield_12312330":null,"versions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12341091","id":"12341091","name":"2.8.3","archived":false,"released":true,"releaseDate":"2017-12-12"},{"self":"https://issues.apache.org/jira/rest/api/2/version/12341431","id":"12341431","description":"3.0.0 GA release","name":"3.0.0","archived":false,"released":true,"releaseDate":"2017-12-13"}],"issuelinks":[],"customfield_12312339":null,"assignee":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=tanakahda","name":"tanakahda","key":"tanakahda","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Aki Tanaka","active":true,"timeZone":"America/Los_Angeles"},"customfield_12312337":null,"customfield_12312338":null,"updated":"2018-04-05T17:16:31.050+0000","customfield_12312335":null,"customfield_12312336":null,"status":{"self":"https://issues.apache.org/jira/rest/api/2/status/5","description":"A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/resolved.png","name":"Resolved","id":"5","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Done"}},"components":[],"timeoriginalestimate":null,"description":"BZip2 can drop and duplicate record when input split file is small. I confirmed that this issue happens when the input split size is between 1byte and 4bytes.\r\n\r\nI am seeing the following 2 problem behaviors.\r\n\r\n \r\n\r\n1. Drop record:\r\n\r\nBZip2 skips the first record in the input file when the input split size is small\r\n\r\n \r\n\r\nSet the split size to 3 and tested to load 100 records (0, 1, 2..99)\r\n{code:java}\r\n2018-02-01 10:52:33,502 INFO  [Thread-17] mapred.TestTextInputFormat (TestTextInputFormat.java:verifyPartitions(317)) - splits[1]=file:/work/count-mismatch2/hadoop/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/target/test-dir/TestTextInputFormat/test.bz2:3+3 count=99{code}\r\n> The input format read only 99 records but not 100 records\r\n\r\n \r\n\r\n2. Duplicate Record:\r\n\r\n2 input splits has same BZip2 records when the input split size is small\r\n\r\n \r\n\r\nSet the split size to 1 and tested to load 100 records (0, 1, 2..99)\r\n\r\n \r\n{code:java}\r\n2018-02-01 11:18:49,309 INFO [Thread-17] mapred.TestTextInputFormat (TestTextInputFormat.java:verifyPartitions(318)) - splits[3]=file /work/count-mismatch2/hadoop/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/target/test-dir/TestTextInputFormat/test.bz2:3+1 count=99\r\n2018-02-01 11:18:49,310 WARN [Thread-17] mapred.TestTextInputFormat (TestTextInputFormat.java:verifyPartitions(308)) - conflict with 1 in split 4 at position 8\r\n{code}\r\n \r\n\r\nI experienced this error when I execute Spark (SparkSQL) job under the following conditions:\r\n\r\n* The file size of the input files are small (around 1KB)\r\n\r\n* Hadoop cluster has many slave nodes (able to launch many executor tasks)\r\n\r\n ","customfield_10010":null,"timetracking":{},"customfield_12312026":null,"customfield_12312023":null,"customfield_12310320":null,"customfield_12312024":null,"customfield_12312340":null,"attachment":[{"self":"https://issues.apache.org/jira/rest/api/2/attachment/12909385","id":"12909385","filename":"HADOOP-15206.001.patch","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=tanakahda","name":"tanakahda","key":"tanakahda","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Aki Tanaka","active":true,"timeZone":"America/Los_Angeles"},"created":"2018-02-06T07:23:50.763+0000","size":2379,"mimeType":"text/plain","content":"https://issues.apache.org/jira/secure/attachment/12909385/HADOOP-15206.001.patch"},{"self":"https://issues.apache.org/jira/rest/api/2/attachment/12909482","id":"12909482","filename":"HADOOP-15206.002.patch","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=tanakahda","name":"tanakahda","key":"tanakahda","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Aki Tanaka","active":true,"timeZone":"America/Los_Angeles"},"created":"2018-02-06T18:08:23.982+0000","size":2966,"mimeType":"text/plain","content":"https://issues.apache.org/jira/secure/attachment/12909482/HADOOP-15206.002.patch"},{"self":"https://issues.apache.org/jira/rest/api/2/attachment/12909830","id":"12909830","filename":"HADOOP-15206.003.patch","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=tanakahda","name":"tanakahda","key":"tanakahda","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Aki Tanaka","active":true,"timeZone":"America/Los_Angeles"},"created":"2018-02-08T20:10:53.079+0000","size":3110,"mimeType":"text/plain","content":"https://issues.apache.org/jira/secure/attachment/12909830/HADOOP-15206.003.patch"},{"self":"https://issues.apache.org/jira/rest/api/2/attachment/12910070","id":"12910070","filename":"HADOOP-15206.004.patch","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=tanakahda","name":"tanakahda","key":"tanakahda","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Aki Tanaka","active":true,"timeZone":"America/Los_Angeles"},"created":"2018-02-11T06:06:49.294+0000","size":6562,"mimeType":"text/plain","content":"https://issues.apache.org/jira/secure/attachment/12910070/HADOOP-15206.004.patch"},{"self":"https://issues.apache.org/jira/rest/api/2/attachment/12910413","id":"12910413","filename":"HADOOP-15206.005.patch","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=tanakahda","name":"tanakahda","key":"tanakahda","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Aki Tanaka","active":true,"timeZone":"America/Los_Angeles"},"created":"2018-02-13T16:33:24.501+0000","size":5736,"mimeType":"text/plain","content":"https://issues.apache.org/jira/secure/attachment/12910413/HADOOP-15206.005.patch"},{"self":"https://issues.apache.org/jira/rest/api/2/attachment/12910617","id":"12910617","filename":"HADOOP-15206.006.patch","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=tanakahda","name":"tanakahda","key":"tanakahda","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Aki Tanaka","active":true,"timeZone":"America/Los_Angeles"},"created":"2018-02-14T18:57:42.619+0000","size":3693,"mimeType":"text/plain","content":"https://issues.apache.org/jira/secure/attachment/12910617/HADOOP-15206.006.patch"},{"self":"https://issues.apache.org/jira/rest/api/2/attachment/12910679","id":"12910679","filename":"HADOOP-15206.007.patch","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=tanakahda","name":"tanakahda","key":"tanakahda","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Aki Tanaka","active":true,"timeZone":"America/Los_Angeles"},"created":"2018-02-15T04:13:06.421+0000","size":3338,"mimeType":"text/plain","content":"https://issues.apache.org/jira/secure/attachment/12910679/HADOOP-15206.007.patch"},{"self":"https://issues.apache.org/jira/rest/api/2/attachment/12910782","id":"12910782","filename":"HADOOP-15206.008.patch","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=tanakahda","name":"tanakahda","key":"tanakahda","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Aki Tanaka","active":true,"timeZone":"America/Los_Angeles"},"created":"2018-02-15T18:26:16.664+0000","size":3689,"mimeType":"text/plain","content":"https://issues.apache.org/jira/secure/attachment/12910782/HADOOP-15206.008.patch"},{"self":"https://issues.apache.org/jira/rest/api/2/attachment/12908861","id":"12908861","filename":"HADOOP-15206-test.patch","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=tanakahda","name":"tanakahda","key":"tanakahda","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Aki Tanaka","active":true,"timeZone":"America/Los_Angeles"},"created":"2018-02-01T20:44:03.183+0000","size":1222,"mimeType":"text/plain","content":"https://issues.apache.org/jira/secure/attachment/12908861/HADOOP-15206-test.patch"}],"aggregatetimeestimate":null,"customfield_12312341":null,"customfield_12312220":null,"customfield_12312022":null,"customfield_12310921":null,"customfield_12310920":"9223372036854775807","customfield_12312823":null,"summary":"BZip2 drops and duplicates records when input split size is small","creator":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=tanakahda","name":"tanakahda","key":"tanakahda","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Aki Tanaka","active":true,"timeZone":"America/Los_Angeles"},"subtasks":[],"customfield_12310291":null,"reporter":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=tanakahda","name":"tanakahda","key":"tanakahda","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Aki Tanaka","active":true,"timeZone":"America/Los_Angeles"},"customfield_12310290":null,"aggregateprogress":{"progress":0,"total":0},"customfield_12311024":null,"environment":null,"customfield_12313520":null,"customfield_12311020":null,"duedate":null,"customfield_12310250":null,"progress":{"progress":0,"total":0},"comment":{"comments":[{"self":"https://issues.apache.org/jira/rest/api/2/issue/13135592/comment/16349234","id":"16349234","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=tanakahda","name":"tanakahda","key":"tanakahda","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Aki Tanaka","active":true,"timeZone":"America/Los_Angeles"},"body":"Added a unit test that can reproduce the problem.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=tanakahda","name":"tanakahda","key":"tanakahda","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Aki Tanaka","active":true,"timeZone":"America/Los_Angeles"},"created":"2018-02-01T20:44:52.017+0000","updated":"2018-02-01T20:44:52.017+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13135592/comment/16351044","id":"16351044","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jlowe","name":"jlowe","key":"jlowe","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jason Lowe","active":true,"timeZone":"America/Chicago"},"body":"I found a bit of time to look into this, so I'm dumping my notes here.  I'm not sure when I'll get some more time to work on it, so if someone feels brave enough to step in feel free.\r\n\r\nHere's how I believe records get dropped with very small split sizes:\r\n # There's only one bz2 block in the file\r\n # The split size is smaller than 4 bytes\r\n # First split starts to read the data. It consumes the 'BZh9' magic header then updates the reported byte position of the stream to be 4\r\n # At this point the first split reader is beyond the end of the split before it ever read a single record, so it ends up returning with no records.\r\n # The second split starts in the middle of the 'BZh9' magic header and scans forward to find the start of a bz2 block and starts processing the split\r\n # Since this is not the first split, it throws away the first record with the assumption the previous split is responsible for it\r\n # Second split reader proceeds to consume all remaining data, since byte position is not updated until the next bz2 block and there's only one block\r\n # End result is first record is lost since first split never consumed it.\r\n\r\nI think we can fix this scenario by not advertising a new byte position after reading the 'BZh9' header and only updating the byte position when we read the bz2 block header following the current bz2 block.\r\n\r\nI didn't get as much time to look into the duplicated record scenario, but I suspect multiple splits end up discovering the beginning of the bz2 block and think it is their block to consume. Not sure yet how we can easily distinguish which split is the one, true split that is responsible for consuming the bz2 block given we're hiding the true byte offset from the upper layers most of the time.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jlowe","name":"jlowe","key":"jlowe","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jason Lowe","active":true,"timeZone":"America/Chicago"},"created":"2018-02-02T23:07:42.899+0000","updated":"2018-02-02T23:07:42.899+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13135592/comment/16353510","id":"16353510","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=tanakahda","name":"tanakahda","key":"tanakahda","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Aki Tanaka","active":true,"timeZone":"America/Los_Angeles"},"body":"[~jlowe]\r\n\r\nThank you for your insights. I have created a patch based on your comment.\r\n\r\nAs far as I tested, all the unit tests passed and I confirmed that the issue I was seeing was solved.\r\n\r\n \r\n\r\nI greatly appreciate any and someone take a look. Alternative proposals are also very welcome.\r\n\r\n \r\n\r\n \r\n\r\nRegarding the duplicated record scenario, the record was read twice when BZip2Codec starts reading at position 0 (BZip2 header) and position 4 (first BZip2 marker).\r\n\r\ntest.bz2:0+1 -> read 100 records\r\n\r\ntest.bz2:3+4 -> read 99 records\r\n\r\n \r\n\r\n2018-02-05 20:49:51,598 ERROR [Thread-3] mapred.TestTextInputFormat2 (TestTextInputFormat2.java:verifyPartitions(324)) - splits[0]=file:/Users/tanakah/work/count-mismatch2/hadoop/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/target/test-dir/TestTextInputFormat/test.bz2:0+1 count=100\r\n2018-02-05 20:49:51,605 ERROR [Thread-3] mapred.TestTextInputFormat2 (TestTextInputFormat2.java:verifyPartitions(326)) - splits[1]=file:/Users/tanakah/work/count-mismatch2/hadoop/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/target/test-dir/TestTextInputFormat/test.bz2:1+1 count=0\r\n2018-02-05 20:49:51,608 ERROR [Thread-3] mapred.TestTextInputFormat2 (TestTextInputFormat2.java:verifyPartitions(326)) - splits[2]=file:/Users/tanakah/work/count-mismatch2/hadoop/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/target/test-dir/TestTextInputFormat/test.bz2:2+1 count=0\r\n\r\n2018-02-05 20:49:51,614 ERROR [Thread-3] mapred.TestTextInputFormat2 (TestTextInputFormat2.java:verifyPartitions(313)) - read 1\r\n2018-02-05 20:49:51,617 WARN  [Thread-3] mapred.TestTextInputFormat2 (TestTextInputFormat2.java:verifyPartitions(315)) - conflict with 1 in split 3 at position 7\r\n\r\n \r\n\r\n ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=tanakahda","name":"tanakahda","key":"tanakahda","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Aki Tanaka","active":true,"timeZone":"America/Los_Angeles"},"created":"2018-02-06T07:35:31.519+0000","updated":"2018-02-06T07:35:31.519+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13135592/comment/16354074","id":"16354074","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jlowe","name":"jlowe","key":"jlowe","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jason Lowe","active":true,"timeZone":"America/Chicago"},"body":"Thanks for the patch!\r\n{code:java}\r\n      if (this.startingPos > 0 && this.startingPos <= 4) {\r\n        this.startingPos = end + 1;\r\n        this.compressedStreamPosition = end + 1;\r\n      }\r\n{code}\r\nThe code above is making the following assumptions that I believe could not be true in some cases:\r\n * The bzip2 file header is always present at starting pos 0. I think it should be checking isHeaderStripped/isSubHeaderStripped.\r\n * If the split starts after byte 0 but before byte 5 then it must also end on or before byte 5. (Splits are not required to be equally sized.)\r\n\r\nIf the bzip2 file header is four bytes, why is the condition {{<= 4}} instead of {{< 4}}?  Should this code leverage HEADER_LEN and SUB_HEADER_LEN here?\r\n\r\nNit: \"emptry\" s/b \"empty\"","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jlowe","name":"jlowe","key":"jlowe","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jason Lowe","active":true,"timeZone":"America/Chicago"},"created":"2018-02-06T16:09:10.577+0000","updated":"2018-02-06T16:09:10.577+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13135592/comment/16354317","id":"16354317","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=tanakahda","name":"tanakahda","key":"tanakahda","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Aki Tanaka","active":true,"timeZone":"America/Los_Angeles"},"body":"Thank you for the comment! I've updated the patch.\r\n\r\n \r\n>The code above is making the following assumptions that I believe could not be true in some cases:\r\n>The bzip2 file header is always present at starting pos 0. I think it should be checking isHeaderStripped/isSubHeaderStripped.\r\n>If the split starts after byte 0 but before byte 5 then it must also end on or before byte 5. (Splits are not required to be equally sized.)\r\n \r\nThank you for pointing these out. I've modified the patch code and uploaded to the Jira.\r\n\r\n \r\n> If the bzip2 file header is four bytes, why is the condition {{<= 4}} instead of {{< 4}}? Should this code leverage HEADER_LEN and SUB_HEADER_LEN here?\r\n\r\nWhen we changed the condition to < 4, the first bz2 block will duplicate. Because 4 is a position of the first bz2 block marker, and an input stream will start reading the first bz2 block if the start position of the input stream is 4. \r\n\r\nThe concept of my patch is changing the position of the first BZ2 block marker from 4 (when the bzip2 file header is present) to 0 forcibly. So, if the input stream tries to read from position 1-4, it will drop the first BZ2 block even though the block marker position is 4. I am not sure whether this is the best solution but I could not come up with another idea.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=tanakahda","name":"tanakahda","key":"tanakahda","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Aki Tanaka","active":true,"timeZone":"America/Los_Angeles"},"created":"2018-02-06T18:38:20.336+0000","updated":"2018-02-06T18:38:20.336+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13135592/comment/16354606","id":"16354606","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jlowe","name":"jlowe","key":"jlowe","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jason Lowe","active":true,"timeZone":"America/Chicago"},"body":"Thanks for updating the patch!\r\n{quote}Because 4 is a position of the first bz2 block marker, and an input stream will start reading the first bz2 block if the start position of the input stream is 4.\r\n{quote}\r\nAh, right. Thanks for the explanation.\r\n{quote}So, if the input stream tries to read from position 1-4, it will drop the first BZ2 block even though the block marker position is 4.\r\n{quote}\r\nThis doesn't just drop the first bzip2 block, it drops the entire split. This goes back to my previous comment about the code assuming splits that start between bytes 1-4 are always tiny. Splits do not have to be equally sized, so theoretically there could be just two splits where the first split is a two-byte split starting at offset 0 and the other split is the rest of the file. I believe this change would cause all records to be dropped in that scenario. To fix that I think we only need to report a position that is one byte beyond the start of the first bzip2 block rather than at the end of the entire split (i.e.: header_len + 1 rather than end + 1).\r\n\r\nThe logic regarding the header seems backwards. If the header is stripped then that means there was a header present, yet the logic is only adding up bytes for a header length if it was *not* stripped which is the case when the header is not there.  I'm wondering how it's working since I think the header is always there in the unit tests.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jlowe","name":"jlowe","key":"jlowe","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jason Lowe","active":true,"timeZone":"America/Chicago"},"created":"2018-02-06T21:57:37.836+0000","updated":"2018-02-06T21:57:37.836+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13135592/comment/16354819","id":"16354819","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=tanakahda","name":"tanakahda","key":"tanakahda","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Aki Tanaka","active":true,"timeZone":"America/Los_Angeles"},"body":"Thank you very much for the comments!\r\n{quote}\r\nThis doesn't just drop the first bzip2 block, it drops the entire split. This goes back to my previous comment about the code assuming splits that start between bytes 1-4 are always tiny. Splits do not have to be equally sized, so theoretically there could be just two splits where the first split is a two-byte split starting at offset 0 and the other split is the rest of the file.\r\n{quote}\r\nThank you for explaining the details. I understand the problem.\r\n\r\n \r\n{quote}The logic regarding the header seems backwards. If the header is stripped then that means there was a header present, yet the logic is only adding up bytes for a header length if it was not stripped which is the case when the header is not there.\r\n{quote}\r\nThat's right... Thank you for pointing this out.\r\nAfter some tests, I noticed the following 2 points.\r\n\r\n1. When reading from position 1-3 (on bzip2 header), isHeaderStripped/isSubHeaderStripped is always false. This is because the current readStreamHeader() works only when the start position is 0.\r\n\r\n2. I set one byte beyond the start of the first bzip2 block (header_len + 1) to the InputStream's start position, but duplicated records issue still happened. When I set header_len + 5 (9), we can avoid the problem.\r\n\r\nAs far as I looked at the test bz2 file using binary editor, the first bz2 marker starts from position 4 (right after bz2 header). \r\nStill trying to understand why we need to set header_len + 5.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=tanakahda","name":"tanakahda","key":"tanakahda","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Aki Tanaka","active":true,"timeZone":"America/Los_Angeles"},"created":"2018-02-07T01:12:02.621+0000","updated":"2018-02-07T01:12:02.621+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13135592/comment/16357510","id":"16357510","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=tanakahda","name":"tanakahda","key":"tanakahda","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Aki Tanaka","active":true,"timeZone":"America/Los_Angeles"},"body":"Added the updated patch. Please let me know if I still misunderstand something.\r\n\r\nI made following changes to the original code\r\n * Not advertising a new byte position when reading from BZip2 Header (position 0) \r\n\r\n * Move reading position to right after the BZip2 header (position 5) when the position is between 1 and 4\r\n\r\nThis implementation moves the start position forcibly without checking whether the BZ2 file has a header or not. Because I could not determine whether the header exists when the start position is 4. However, I think it's safe to move the position even if the file does not have a bz2 header because we cannot put 2 bz2 blocks in the first 4 bytes of the file.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=tanakahda","name":"tanakahda","key":"tanakahda","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Aki Tanaka","active":true,"timeZone":"America/Los_Angeles"},"created":"2018-02-08T20:12:31.048+0000","updated":"2018-02-08T20:12:31.048+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13135592/comment/16358919","id":"16358919","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jlowe","name":"jlowe","key":"jlowe","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jason Lowe","active":true,"timeZone":"America/Chicago"},"body":"Thanks for updating the patch!\r\n\r\nIt seems the basic problem is that split 0, the first split, is _always_ responsible for the first record even if that record is technically past the byte offset of the end of the split.  That's because all other splits will unconditionally throw away the first (potentially partial) record under the assumption the previous split is responsible for it.  Therefore we need to do two things to avoid drops and duplicates:\r\n* If the first split ends before the start of the first bz2 block then we need to avoid advertising the updated byte position until we have started to consume the first bz2 block.  This avoids the dropped record.\r\n* If subsequent splits start before the first bz2 block begins then we need to make sure any split that starts before the first block is artificially pushed past that first block.  This avoids the duplicates.\r\n\r\nI'm wondering if it gets cleaner if we move this logic into readStreamHeader() and always call it.  That method can check the starting position and do one of the following:\r\n* check for and read the full header if it is at starting position 0\r\n* do nothing if start pos is past the full header + 1\r\n* verify the bytes being skipped are the expected header bytes if start pos between 0 and full_header+1.  If they are not the expected bytes then we reset the buffered input (just like starting pos 0 logic does today if header is not there).\r\n\r\nIn the constructor we should be able to avoid updating the reported position if starting position is 0 (so we will always read into the first bz2 block), otherwise we advertise after reading any header so subsequent splits always start at least one byte after the start of the first bz2 block.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jlowe","name":"jlowe","key":"jlowe","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jason Lowe","active":true,"timeZone":"America/Chicago"},"created":"2018-02-09T20:33:30.339+0000","updated":"2018-02-09T20:33:30.339+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13135592/comment/16359803","id":"16359803","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=tanakahda","name":"tanakahda","key":"tanakahda","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Aki Tanaka","active":true,"timeZone":"America/Los_Angeles"},"body":"Hi Jason,\r\n\r\nI really appreciate your code review, I refactored readStreamHeader() , I changed the method's return value from buffered input to a length the buffered input read in the method. \r\n * \r\n{quote}check for and read the full header if it is at starting position 0\r\n{quote}\r\n\r\nIn the current implementation, read only \"BZ\" header when the read mode is CONTINUOUS. Do you think we should keep this?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=tanakahda","name":"tanakahda","key":"tanakahda","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Aki Tanaka","active":true,"timeZone":"America/Los_Angeles"},"created":"2018-02-11T06:06:34.438+0000","updated":"2018-02-11T06:06:34.438+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13135592/comment/16361615","id":"16361615","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jlowe","name":"jlowe","key":"jlowe","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jason Lowe","active":true,"timeZone":"America/Chicago"},"body":"Thanks for updating the patch!\r\n\r\nbq. In the current implementation, read only \"BZ\" header when the read mode is CONTINUOUS. Do you think we should keep this?\r\n\r\nYes, because it's not important to read the header when the codec is in BLOCK mode.  IIUC the main difference between CONTINUOUS and BLOCK mode is that BLOCK mode will be used when processing splits and CONTINUOUS mode is used when we're simply trying to decompress the data in one big chunk (i.e.: no splits).  BLOCK mode always will scan for the start of the bz2 block, so it will automatically skip a bz2 file header while searching for the start of the first bz2 block from the specified start offset.\r\n\r\nGiven the splittable codec is always scanning for the block and doesn't really care what bytes are being skipped, I'm now thinking we can go back to a much simpler implementation.  I think the code can check if we're in BLOCK mode to know whether we are processing splits or not.  If we are in BLOCK mode we avoid advertising the byte position if start offset is zero just as the previous patches.  In BLOCK mode we should also skip to file offset HEADER_LEN + SUB_HEADER_LEN + 1 if the start position is >=0 and < HEADER_LEN + SUB_HEADER_LEN.  That will put us one byte past the start of the first bz2 block, and BLOCK mode will automatically scan forward to the next block.  This proposal is very similar to what was implemented in patch 003.  I think we just need to make it only do the position adjustment if we're in BLOCK mode.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jlowe","name":"jlowe","key":"jlowe","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jason Lowe","active":true,"timeZone":"America/Chicago"},"created":"2018-02-13T00:02:27.670+0000","updated":"2018-02-13T00:02:27.670+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13135592/comment/16362627","id":"16362627","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=tanakahda","name":"tanakahda","key":"tanakahda","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Aki Tanaka","active":true,"timeZone":"America/Los_Angeles"},"body":"Thank you, I updated the patch.\r\n\r\n \r\n\r\nImplemented the following behavior:\r\n * If we are in BLOCK mode we avoid advertising the byte position if start offset is zero \r\n * In BLOCK mode we should also skip to file offset HEADER_LEN + SUB_HEADER_LEN + 1 if the start position is >=0 and < HEADER_LEN + SUB_HEADER_LEN. That will put us one byte past the start of the first bz2 block, and BLOCK mode will automatically scan forward to the next block\r\n\r\nOne thing  I am still not sure is when resetState() is called.  We need to skip file reading position to 5 to avoid duplicated records f the start position is >=0 and < HEADER_LEN + SUB_HEADER_LEN.  I implemented this in readStreamHeader(). On the other hand, when InputStream is reset, readStreamHeader() is called. I changed the readStreamHeader() is executed only when this.compressedStreamPosition is 0 , but we might be okay to remove calling readStreamHeader() when InputStream is reset.\r\n\r\n \r\n\r\n ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=tanakahda","name":"tanakahda","key":"tanakahda","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Aki Tanaka","active":true,"timeZone":"America/Los_Angeles"},"created":"2018-02-13T16:51:40.870+0000","updated":"2018-02-13T16:51:40.870+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13135592/comment/16363203","id":"16363203","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jlowe","name":"jlowe","key":"jlowe","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jason Lowe","active":true,"timeZone":"America/Chicago"},"body":"Thanks for updating the patch!\r\n\r\nI believe the latest patch will break CONTINUOUS mode since it will no longer strip the bzip2 file header in that case.\r\n\r\nI don't think it will be OK to remove calling readStreamHeader when reset() is called.  We're resetting the codec state to start afresh, and that means potentially reading a new file header (e.g.: concatenated bzip2 files).  My thinking is that we need to read the header, but we should not report the byte position being updated when doing so while we're in BLOCK mode (i.e.: split processing).\r\n\r\nI think we need to revert the stream header reading logic to the original behavior.  Instead we can put a small change in the BZip2InputStream constructor to handle the special case of small splits that can start at or before the first bz2 block.  If the read mode is BLOCK and 0 < startingPos <= HEADER_LEN + SUB_HEADER_LEN then we skip bytes until we get to the HEADER_LEN + SUB_HEADER_LEN + 1 offset in the stream.  The bufferedIn.skip method will be useful here, but it needs to be called in a loop in case the skip fails to skip everything in one call (per the javadoc).\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jlowe","name":"jlowe","key":"jlowe","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jason Lowe","active":true,"timeZone":"America/Chicago"},"created":"2018-02-13T23:00:03.363+0000","updated":"2018-02-13T23:00:03.363+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13135592/comment/16364611","id":"16364611","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=tanakahda","name":"tanakahda","key":"tanakahda","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Aki Tanaka","active":true,"timeZone":"America/Los_Angeles"},"body":"Thank you very much for the review!\r\n\r\nI've added the updated patch to the ticket. Please let me know if you have any questions on this.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=tanakahda","name":"tanakahda","key":"tanakahda","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Aki Tanaka","active":true,"timeZone":"America/Los_Angeles"},"created":"2018-02-14T18:58:43.502+0000","updated":"2018-02-14T18:58:43.502+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13135592/comment/16364907","id":"16364907","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jlowe","name":"jlowe","key":"jlowe","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jason Lowe","active":true,"timeZone":"America/Chicago"},"body":"Thanks for updating the patch! Looks good overall, just a few nits. I think we're close, so moving this to Patch Available so the QA bot can comment on this as well.\r\n\r\nWhy are we only skipping one byte at a time instead of trying to skip the rest of the way in one call? The code can track the remaining bytes in skipBytes, decrement that by the number of bytes skipped in the loop, then loop while skipBytes > 0.\r\n\r\nThere is trailing whitespace on a couple of lines which would be nice to cleanup. I expect the QA bot to flag this in its whitespace check.\r\n\r\nI'm not sure it's necessary to call out the JIRA in the comments. That's what {{git blame}} is for. ;) Otherwise the code would be littered with JIRA numbers in every bugfix change.\r\n\r\n\"steam is on BZip2 header\" should be \"a split is before the first BZip2 block\"","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jlowe","name":"jlowe","key":"jlowe","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jason Lowe","active":true,"timeZone":"America/Chicago"},"created":"2018-02-14T23:02:40.350+0000","updated":"2018-02-14T23:02:40.350+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13135592/comment/16365070","id":"16365070","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=genericqa","name":"genericqa","key":"genericqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=genericqa&avatarId=33630","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=genericqa&avatarId=33630","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=genericqa&avatarId=33630","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=genericqa&avatarId=33630"},"displayName":"genericqa","active":true,"timeZone":"Etc/UTC"},"body":"| (x) *{color:red}-1 overall{color}* |\r\n\\\\\r\n\\\\\r\n|| Vote || Subsystem || Runtime || Comment ||\r\n| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue}  0m 15s{color} | {color:blue} Docker mode activated. {color} |\r\n|| || || || {color:brown} Prechecks {color} ||\r\n| {color:green}+1{color} | {color:green} @author {color} | {color:green}  0m  0s{color} | {color:green} The patch does not contain any @author tags. {color} |\r\n| {color:green}+1{color} | {color:green} test4tests {color} | {color:green}  0m  0s{color} | {color:green} The patch appears to include 1 new or modified test files. {color} |\r\n|| || || || {color:brown} trunk Compile Tests {color} ||\r\n| {color:blue}0{color} | {color:blue} mvndep {color} | {color:blue}  1m 32s{color} | {color:blue} Maven dependency ordering for branch {color} |\r\n| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 15m 36s{color} | {color:green} trunk passed {color} |\r\n| {color:red}-1{color} | {color:red} compile {color} | {color:red} 17m  4s{color} | {color:red} root in trunk failed. {color} |\r\n| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  1m 51s{color} | {color:green} trunk passed {color} |\r\n| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  1m 29s{color} | {color:green} trunk passed {color} |\r\n| {color:green}+1{color} | {color:green} shadedclient {color} | {color:green} 13m 18s{color} | {color:green} branch has no errors when building and testing our client artifacts. {color} |\r\n| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  1m 58s{color} | {color:green} trunk passed {color} |\r\n| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  1m  3s{color} | {color:green} trunk passed {color} |\r\n|| || || || {color:brown} Patch Compile Tests {color} ||\r\n| {color:blue}0{color} | {color:blue} mvndep {color} | {color:blue}  0m 33s{color} | {color:blue} Maven dependency ordering for patch {color} |\r\n| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green}  1m  7s{color} | {color:green} the patch passed {color} |\r\n| {color:green}+1{color} | {color:green} compile {color} | {color:green} 11m 59s{color} | {color:green} the patch passed {color} |\r\n| {color:red}-1{color} | {color:red} javac {color} | {color:red} 11m 59s{color} | {color:red} root generated 178 new + 1053 unchanged - 0 fixed = 1231 total (was 1053) {color} |\r\n| {color:orange}-0{color} | {color:orange} checkstyle {color} | {color:orange}  1m 48s{color} | {color:orange} root: The patch generated 1 new + 50 unchanged - 0 fixed = 51 total (was 50) {color} |\r\n| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  1m 29s{color} | {color:green} the patch passed {color} |\r\n| {color:red}-1{color} | {color:red} whitespace {color} | {color:red}  0m  0s{color} | {color:red} The patch has 2 line(s) that end in whitespace. Use git apply --whitespace=fix <<patch_file>>. Refer https://git-scm.com/docs/git-apply {color} |\r\n| {color:green}+1{color} | {color:green} shadedclient {color} | {color:green}  9m  9s{color} | {color:green} patch has no errors when building and testing our client artifacts. {color} |\r\n| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  2m  4s{color} | {color:green} the patch passed {color} |\r\n| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  1m 11s{color} | {color:green} the patch passed {color} |\r\n|| || || || {color:brown} Other Tests {color} ||\r\n| {color:green}+1{color} | {color:green} unit {color} | {color:green}  8m 24s{color} | {color:green} hadoop-common in the patch passed. {color} |\r\n| {color:red}-1{color} | {color:red} unit {color} | {color:red}120m 10s{color} | {color:red} hadoop-mapreduce-client-jobclient in the patch failed. {color} |\r\n| {color:green}+1{color} | {color:green} asflicense {color} | {color:green}  0m 32s{color} | {color:green} The patch does not generate ASF License warnings. {color} |\r\n| {color:black}{color} | {color:black} {color} | {color:black}211m 18s{color} | {color:black} {color} |\r\n\\\\\r\n\\\\\r\n|| Reason || Tests ||\r\n| Failed junit tests | hadoop.mapreduce.v2.TestMRJobs |\r\n\\\\\r\n\\\\\r\n|| Subsystem || Report/Notes ||\r\n| Docker | Client=17.05.0-ce Server=17.05.0-ce Image:yetus/hadoop:5b98639 |\r\n| JIRA Issue | HADOOP-15206 |\r\n| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12910617/HADOOP-15206.006.patch |\r\n| Optional Tests |  asflicense  compile  javac  javadoc  mvninstall  mvnsite  unit  shadedclient  findbugs  checkstyle  |\r\n| uname | Linux 8769a4c10c6a 4.4.0-43-generic #63-Ubuntu SMP Wed Oct 12 13:48:03 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux |\r\n| Build tool | maven |\r\n| Personality | /testptch/patchprocess/precommit/personality/provided.sh |\r\n| git revision | trunk / 8f66aff |\r\n| maven | version: Apache Maven 3.3.9 |\r\n| Default Java | 1.8.0_151 |\r\n| compile | https://builds.apache.org/job/PreCommit-HADOOP-Build/14126/artifact/out/branch-compile-root.txt |\r\n| findbugs | v3.1.0-RC1 |\r\n| javac | https://builds.apache.org/job/PreCommit-HADOOP-Build/14126/artifact/out/diff-compile-javac-root.txt |\r\n| checkstyle | https://builds.apache.org/job/PreCommit-HADOOP-Build/14126/artifact/out/diff-checkstyle-root.txt |\r\n| whitespace | https://builds.apache.org/job/PreCommit-HADOOP-Build/14126/artifact/out/whitespace-eol.txt |\r\n| unit | https://builds.apache.org/job/PreCommit-HADOOP-Build/14126/artifact/out/patch-unit-hadoop-mapreduce-project_hadoop-mapreduce-client_hadoop-mapreduce-client-jobclient.txt |\r\n|  Test Results | https://builds.apache.org/job/PreCommit-HADOOP-Build/14126/testReport/ |\r\n| Max. process+thread count | 1406 (vs. ulimit of 5500) |\r\n| modules | C: hadoop-common-project/hadoop-common hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient U: . |\r\n| Console output | https://builds.apache.org/job/PreCommit-HADOOP-Build/14126/console |\r\n| Powered by | Apache Yetus 0.8.0-SNAPSHOT   http://yetus.apache.org |\r\n\r\n\r\nThis message was automatically generated.\r\n\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=genericqa","name":"genericqa","key":"genericqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=genericqa&avatarId=33630","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=genericqa&avatarId=33630","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=genericqa&avatarId=33630","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=genericqa&avatarId=33630"},"displayName":"genericqa","active":true,"timeZone":"Etc/UTC"},"created":"2018-02-15T02:42:04.098+0000","updated":"2018-02-15T02:42:04.098+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13135592/comment/16365134","id":"16365134","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=tanakahda","name":"tanakahda","key":"tanakahda","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Aki Tanaka","active":true,"timeZone":"America/Los_Angeles"},"body":"Thank you!! I updated the patch.\r\n * Changed to try to skip the rest of the bytes in one call\r\n * Deleted tailing whitespaces\r\n * Deleted comments in the code\r\n * Changed comment \"steam is on BZip2 header\" to \"a split is before the first BZip2 block\"\r\n\r\n \r\n\r\nThe unit test for 006 failed but it looks that the failed test was not related to this patch. ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=tanakahda","name":"tanakahda","key":"tanakahda","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Aki Tanaka","active":true,"timeZone":"America/Los_Angeles"},"created":"2018-02-15T04:17:41.903+0000","updated":"2018-02-15T04:17:41.903+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13135592/comment/16365230","id":"16365230","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=genericqa","name":"genericqa","key":"genericqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=genericqa&avatarId=33630","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=genericqa&avatarId=33630","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=genericqa&avatarId=33630","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=genericqa&avatarId=33630"},"displayName":"genericqa","active":true,"timeZone":"Etc/UTC"},"body":"| (x) *{color:red}-1 overall{color}* |\r\n\\\\\r\n\\\\\r\n|| Vote || Subsystem || Runtime || Comment ||\r\n| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue}  0m 17s{color} | {color:blue} Docker mode activated. {color} |\r\n|| || || || {color:brown} Prechecks {color} ||\r\n| {color:green}+1{color} | {color:green} @author {color} | {color:green}  0m  0s{color} | {color:green} The patch does not contain any @author tags. {color} |\r\n| {color:green}+1{color} | {color:green} test4tests {color} | {color:green}  0m  0s{color} | {color:green} The patch appears to include 1 new or modified test files. {color} |\r\n|| || || || {color:brown} trunk Compile Tests {color} ||\r\n| {color:blue}0{color} | {color:blue} mvndep {color} | {color:blue}  1m 22s{color} | {color:blue} Maven dependency ordering for branch {color} |\r\n| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 17m  2s{color} | {color:green} trunk passed {color} |\r\n| {color:green}+1{color} | {color:green} compile {color} | {color:green} 14m 28s{color} | {color:green} trunk passed {color} |\r\n| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  2m 58s{color} | {color:green} trunk passed {color} |\r\n| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  2m 46s{color} | {color:green} trunk passed {color} |\r\n| {color:green}+1{color} | {color:green} shadedclient {color} | {color:green} 18m 36s{color} | {color:green} branch has no errors when building and testing our client artifacts. {color} |\r\n| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  2m 10s{color} | {color:green} trunk passed {color} |\r\n| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  1m 15s{color} | {color:green} trunk passed {color} |\r\n|| || || || {color:brown} Patch Compile Tests {color} ||\r\n| {color:blue}0{color} | {color:blue} mvndep {color} | {color:blue}  0m 15s{color} | {color:blue} Maven dependency ordering for patch {color} |\r\n| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green}  1m 12s{color} | {color:green} the patch passed {color} |\r\n| {color:green}+1{color} | {color:green} compile {color} | {color:green} 11m 46s{color} | {color:green} the patch passed {color} |\r\n| {color:green}+1{color} | {color:green} javac {color} | {color:green} 11m 46s{color} | {color:green} the patch passed {color} |\r\n| {color:orange}-0{color} | {color:orange} checkstyle {color} | {color:orange}  2m  4s{color} | {color:orange} root: The patch generated 1 new + 50 unchanged - 0 fixed = 51 total (was 50) {color} |\r\n| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  1m 37s{color} | {color:green} the patch passed {color} |\r\n| {color:green}+1{color} | {color:green} whitespace {color} | {color:green}  0m  0s{color} | {color:green} The patch has no whitespace issues. {color} |\r\n| {color:green}+1{color} | {color:green} shadedclient {color} | {color:green} 10m  9s{color} | {color:green} patch has no errors when building and testing our client artifacts. {color} |\r\n| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  2m 30s{color} | {color:green} the patch passed {color} |\r\n| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  1m 19s{color} | {color:green} the patch passed {color} |\r\n|| || || || {color:brown} Other Tests {color} ||\r\n| {color:red}-1{color} | {color:red} unit {color} | {color:red}  8m  6s{color} | {color:red} hadoop-common in the patch failed. {color} |\r\n| {color:red}-1{color} | {color:red} unit {color} | {color:red}140m 26s{color} | {color:red} hadoop-mapreduce-client-jobclient in the patch failed. {color} |\r\n| {color:green}+1{color} | {color:green} asflicense {color} | {color:green}  0m 41s{color} | {color:green} The patch does not generate ASF License warnings. {color} |\r\n| {color:black}{color} | {color:black} {color} | {color:black}237m 35s{color} | {color:black} {color} |\r\n\\\\\r\n\\\\\r\n|| Reason || Tests ||\r\n| Failed junit tests | hadoop.fs.shell.TestCopyPreserveFlag |\r\n|   | hadoop.mapred.TestMRTimelineEventHandling |\r\n|   | hadoop.mapred.TestMiniMRChildTask |\r\n\\\\\r\n\\\\\r\n|| Subsystem || Report/Notes ||\r\n| Docker | Client=17.05.0-ce Server=17.05.0-ce Image:yetus/hadoop:5b98639 |\r\n| JIRA Issue | HADOOP-15206 |\r\n| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12910679/HADOOP-15206.007.patch |\r\n| Optional Tests |  asflicense  compile  javac  javadoc  mvninstall  mvnsite  unit  shadedclient  findbugs  checkstyle  |\r\n| uname | Linux 79b2b1960b41 3.13.0-133-generic #182-Ubuntu SMP Tue Sep 19 15:49:21 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux |\r\n| Build tool | maven |\r\n| Personality | /testptch/patchprocess/precommit/personality/provided.sh |\r\n| git revision | trunk / 8f66aff |\r\n| maven | version: Apache Maven 3.3.9 |\r\n| Default Java | 1.8.0_151 |\r\n| findbugs | v3.1.0-RC1 |\r\n| checkstyle | https://builds.apache.org/job/PreCommit-HADOOP-Build/14130/artifact/out/diff-checkstyle-root.txt |\r\n| unit | https://builds.apache.org/job/PreCommit-HADOOP-Build/14130/artifact/out/patch-unit-hadoop-common-project_hadoop-common.txt |\r\n| unit | https://builds.apache.org/job/PreCommit-HADOOP-Build/14130/artifact/out/patch-unit-hadoop-mapreduce-project_hadoop-mapreduce-client_hadoop-mapreduce-client-jobclient.txt |\r\n|  Test Results | https://builds.apache.org/job/PreCommit-HADOOP-Build/14130/testReport/ |\r\n| Max. process+thread count | 1459 (vs. ulimit of 5500) |\r\n| modules | C: hadoop-common-project/hadoop-common hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient U: . |\r\n| Console output | https://builds.apache.org/job/PreCommit-HADOOP-Build/14130/console |\r\n| Powered by | Apache Yetus 0.8.0-SNAPSHOT   http://yetus.apache.org |\r\n\r\n\r\nThis message was automatically generated.\r\n\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=genericqa","name":"genericqa","key":"genericqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=genericqa&avatarId=33630","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=genericqa&avatarId=33630","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=genericqa&avatarId=33630","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=genericqa&avatarId=33630"},"displayName":"genericqa","active":true,"timeZone":"Etc/UTC"},"created":"2018-02-15T08:18:32.001+0000","updated":"2018-02-15T08:18:32.001+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13135592/comment/16365954","id":"16365954","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jlowe","name":"jlowe","key":"jlowe","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jason Lowe","active":true,"timeZone":"America/Chicago"},"body":"bq. Deleted comments in the code\r\n\r\nSorry, I didn't mean the entire comment needs to be deleted.  I think the comments were very helpful to explain why the logic is there, but I just didn't see the need to call out the specific JIRA number.  That is something trivially obtained from git.\r\n\r\nSpeaking of comments, when they are reinstated I noticed that this comment is slightly incorrect:\r\n{code}\r\n        // HADOOP-15206: When we're in BYBLOCK mode and the start position\r\n        // is >=0 and < HEADER_LEN + SUB_HEADER_LEN, we should also skip\r\n        // to right after the BZip2 header to avoid duplicated records\r\n        skipPos = HEADER_LEN + SUB_HEADER_LEN + 1 - this.startingPos;\r\n{code}\r\n\"Skip to right after the BZip2 header\" may lead someone to think there's an off-by-one bug in the code.  We need to skip to right after the start of the first bz2 block (which occurs right after the bz2 header).\r\n\r\nNit: skipPos is not really a position but rather the number of bytes being skipped, so it looks incorrect when the code calls updateReportedByteCount on what appears to be a position rather than a byte delta.  Something like numSkipped or numBytesSkipped would be a less confusing name.\r\n\r\nIt would be nice to fix the checkstyle warning about line length on the comment.\r\n\r\nThe unit test failures appear to be unrelated, and they pass for me locally with the patch applied.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jlowe","name":"jlowe","key":"jlowe","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jason Lowe","active":true,"timeZone":"America/Chicago"},"created":"2018-02-15T17:12:29.326+0000","updated":"2018-02-15T17:12:29.326+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13135592/comment/16366061","id":"16366061","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=tanakahda","name":"tanakahda","key":"tanakahda","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Aki Tanaka","active":true,"timeZone":"America/Los_Angeles"},"body":"Thank you. Since this is the first time to apply a patch to the community, I apologize for having bothered you.\r\n\r\nUpdate the patch, I think I fixed the points you pointed out, please let me know if there is anything I should do.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=tanakahda","name":"tanakahda","key":"tanakahda","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Aki Tanaka","active":true,"timeZone":"America/Los_Angeles"},"created":"2018-02-15T18:26:03.679+0000","updated":"2018-02-15T18:26:03.679+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13135592/comment/16366237","id":"16366237","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jlowe","name":"jlowe","key":"jlowe","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jason Lowe","active":true,"timeZone":"America/Chicago"},"body":"bq. Since this is the first time to apply a patch to the community, I apologize for having bothered you.\r\n\r\nNo worries whatsoever.  It is very common to go back and forth on a number of patches before anything is committed, so this is simply development as usual from my perspective.  I deeply appreciate your contribution on this subtle and tricky issue!\r\n\r\n+1 for the latest patch, pending Jenkins.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jlowe","name":"jlowe","key":"jlowe","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jason Lowe","active":true,"timeZone":"America/Chicago"},"created":"2018-02-15T20:44:04.257+0000","updated":"2018-02-15T20:44:04.257+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13135592/comment/16366339","id":"16366339","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=genericqa","name":"genericqa","key":"genericqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=genericqa&avatarId=33630","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=genericqa&avatarId=33630","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=genericqa&avatarId=33630","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=genericqa&avatarId=33630"},"displayName":"genericqa","active":true,"timeZone":"Etc/UTC"},"body":"| (x) *{color:red}-1 overall{color}* |\r\n\\\\\r\n\\\\\r\n|| Vote || Subsystem || Runtime || Comment ||\r\n| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue}  0m 21s{color} | {color:blue} Docker mode activated. {color} |\r\n|| || || || {color:brown} Prechecks {color} ||\r\n| {color:green}+1{color} | {color:green} @author {color} | {color:green}  0m  0s{color} | {color:green} The patch does not contain any @author tags. {color} |\r\n| {color:green}+1{color} | {color:green} test4tests {color} | {color:green}  0m  0s{color} | {color:green} The patch appears to include 1 new or modified test files. {color} |\r\n|| || || || {color:brown} trunk Compile Tests {color} ||\r\n| {color:blue}0{color} | {color:blue} mvndep {color} | {color:blue}  1m 23s{color} | {color:blue} Maven dependency ordering for branch {color} |\r\n| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 17m  2s{color} | {color:green} trunk passed {color} |\r\n| {color:green}+1{color} | {color:green} compile {color} | {color:green} 16m 48s{color} | {color:green} trunk passed {color} |\r\n| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  2m 15s{color} | {color:green} trunk passed {color} |\r\n| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  1m 48s{color} | {color:green} trunk passed {color} |\r\n| {color:green}+1{color} | {color:green} shadedclient {color} | {color:green} 15m 23s{color} | {color:green} branch has no errors when building and testing our client artifacts. {color} |\r\n| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  2m 13s{color} | {color:green} trunk passed {color} |\r\n| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  1m 17s{color} | {color:green} trunk passed {color} |\r\n|| || || || {color:brown} Patch Compile Tests {color} ||\r\n| {color:blue}0{color} | {color:blue} mvndep {color} | {color:blue}  0m 15s{color} | {color:blue} Maven dependency ordering for patch {color} |\r\n| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green}  1m 12s{color} | {color:green} the patch passed {color} |\r\n| {color:green}+1{color} | {color:green} compile {color} | {color:green} 13m  8s{color} | {color:green} the patch passed {color} |\r\n| {color:green}+1{color} | {color:green} javac {color} | {color:green} 13m  8s{color} | {color:green} the patch passed {color} |\r\n| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  2m 18s{color} | {color:green} the patch passed {color} |\r\n| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  2m  5s{color} | {color:green} the patch passed {color} |\r\n| {color:green}+1{color} | {color:green} whitespace {color} | {color:green}  0m  0s{color} | {color:green} The patch has no whitespace issues. {color} |\r\n| {color:green}+1{color} | {color:green} shadedclient {color} | {color:green} 10m 44s{color} | {color:green} patch has no errors when building and testing our client artifacts. {color} |\r\n| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  2m 26s{color} | {color:green} the patch passed {color} |\r\n| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  1m 29s{color} | {color:green} the patch passed {color} |\r\n|| || || || {color:brown} Other Tests {color} ||\r\n| {color:green}+1{color} | {color:green} unit {color} | {color:green}  9m 11s{color} | {color:green} hadoop-common in the patch passed. {color} |\r\n| {color:red}-1{color} | {color:red} unit {color} | {color:red}126m 38s{color} | {color:red} hadoop-mapreduce-client-jobclient in the patch failed. {color} |\r\n| {color:green}+1{color} | {color:green} asflicense {color} | {color:green}  0m 43s{color} | {color:green} The patch does not generate ASF License warnings. {color} |\r\n| {color:black}{color} | {color:black} {color} | {color:black}226m 57s{color} | {color:black} {color} |\r\n\\\\\r\n\\\\\r\n|| Reason || Tests ||\r\n| Failed junit tests | hadoop.mapreduce.v2.TestMRJobs |\r\n\\\\\r\n\\\\\r\n|| Subsystem || Report/Notes ||\r\n| Docker | Client=17.05.0-ce Server=17.05.0-ce Image:yetus/hadoop:5b98639 |\r\n| JIRA Issue | HADOOP-15206 |\r\n| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12910782/HADOOP-15206.008.patch |\r\n| Optional Tests |  asflicense  compile  javac  javadoc  mvninstall  mvnsite  unit  shadedclient  findbugs  checkstyle  |\r\n| uname | Linux 62fa7bbdb8e3 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux |\r\n| Build tool | maven |\r\n| Personality | /testptch/patchprocess/precommit/personality/provided.sh |\r\n| git revision | trunk / da59acd |\r\n| maven | version: Apache Maven 3.3.9 |\r\n| Default Java | 1.8.0_151 |\r\n| findbugs | v3.1.0-RC1 |\r\n| unit | https://builds.apache.org/job/PreCommit-HADOOP-Build/14136/artifact/out/patch-unit-hadoop-mapreduce-project_hadoop-mapreduce-client_hadoop-mapreduce-client-jobclient.txt |\r\n|  Test Results | https://builds.apache.org/job/PreCommit-HADOOP-Build/14136/testReport/ |\r\n| Max. process+thread count | 1363 (vs. ulimit of 5500) |\r\n| modules | C: hadoop-common-project/hadoop-common hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient U: . |\r\n| Console output | https://builds.apache.org/job/PreCommit-HADOOP-Build/14136/console |\r\n| Powered by | Apache Yetus 0.8.0-SNAPSHOT   http://yetus.apache.org |\r\n\r\n\r\nThis message was automatically generated.\r\n\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=genericqa","name":"genericqa","key":"genericqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=genericqa&avatarId=33630","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=genericqa&avatarId=33630","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=genericqa&avatarId=33630","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=genericqa&avatarId=33630"},"displayName":"genericqa","active":true,"timeZone":"Etc/UTC"},"created":"2018-02-15T22:17:43.104+0000","updated":"2018-02-15T22:17:43.104+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13135592/comment/16367851","id":"16367851","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jlowe","name":"jlowe","key":"jlowe","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jason Lowe","active":true,"timeZone":"America/Chicago"},"body":"The TestMRJobs failure is unrelated and tracked by MAPREDUCE-7053.\r\n\r\nCommitting this.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jlowe","name":"jlowe","key":"jlowe","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jason Lowe","active":true,"timeZone":"America/Chicago"},"created":"2018-02-16T20:38:26.634+0000","updated":"2018-02-16T20:38:26.634+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13135592/comment/16367883","id":"16367883","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hudson","name":"hudson","key":"hudson","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Hudson","active":true,"timeZone":"Etc/UTC"},"body":"SUCCESS: Integrated in Jenkins build Hadoop-trunk-Commit #13673 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/13673/])\nHADOOP-15206. BZip2 drops and duplicates records when input split size (jlowe: rev 0898ff42e9e5c53f2fce7ccdeb4e1cd7d0f123b3)\n* (edit) hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/test/java/org/apache/hadoop/mapred/TestTextInputFormat.java\n* (edit) hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/compress/BZip2Codec.java\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hudson","name":"hudson","key":"hudson","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Hudson","active":true,"timeZone":"Etc/UTC"},"created":"2018-02-16T21:10:38.179+0000","updated":"2018-02-16T21:10:38.179+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13135592/comment/16367899","id":"16367899","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jlowe","name":"jlowe","key":"jlowe","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jason Lowe","active":true,"timeZone":"America/Chicago"},"body":"Thanks, [~tanakahda]!  I committed this to trunk, branch-3.1, branch-3.0, branch-2, branch-2.9, branch-2.8, and branch-2.7.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jlowe","name":"jlowe","key":"jlowe","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jason Lowe","active":true,"timeZone":"America/Chicago"},"created":"2018-02-16T21:30:21.914+0000","updated":"2018-02-16T21:30:21.914+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13135592/comment/16390429","id":"16390429","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=fabbri","name":"fabbri","key":"fabbri","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=fabbri&avatarId=24131","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=fabbri&avatarId=24131","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=fabbri&avatarId=24131","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=fabbri&avatarId=24131"},"displayName":"Aaron Fabbri","active":true,"timeZone":"America/Los_Angeles"},"body":"Just reviewing this as part of a backport. Quick question [~jlowe] and [~tanakahda]:\r\n\r\n \r\n{noformat}\r\n+        long skipBytes = numSkipped;\r\n+        while (skipBytes > 0) {\r\n+          long s = bufferedIn.skip(skipBytes);\r\n+          if (s > 0) {\r\n+            skipBytes -= s;\r\n+          } else {\r\n+            if (bufferedIn.read() == -1) {\r\n+              break; // end of the split\r\n+            } else {\r\n+              skipBytes--;\r\n{noformat}\r\n\r\nWhy is {{skipBytes}} decremented here?  skip() returned <= 0, doesn't that mean that no bytes were skipped?  I know we want this loop to terminate eventually but I did not understand this part.\r\n\r\n{noformat}\r\n+            }\r\n+          }{noformat}","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=fabbri","name":"fabbri","key":"fabbri","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=fabbri&avatarId=24131","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=fabbri&avatarId=24131","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=fabbri&avatarId=24131","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=fabbri&avatarId=24131"},"displayName":"Aaron Fabbri","active":true,"timeZone":"America/Los_Angeles"},"created":"2018-03-07T23:24:01.845+0000","updated":"2018-03-07T23:24:01.845+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13135592/comment/16391522","id":"16391522","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jlowe","name":"jlowe","key":"jlowe","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jason Lowe","active":true,"timeZone":"America/Chicago"},"body":"skipBytes is decremented because of the read() call.  The skip() call is not guaranteed to be able to skip, and the workaround in that case is to try to read().  If the read() is successful then we were able to skip one more byte and need to account for that in the total number of bytes trying to be skipped.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jlowe","name":"jlowe","key":"jlowe","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jason Lowe","active":true,"timeZone":"America/Chicago"},"created":"2018-03-08T17:01:56.198+0000","updated":"2018-03-08T17:01:56.198+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13135592/comment/16391568","id":"16391568","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=tanakahda","name":"tanakahda","key":"tanakahda","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Aki Tanaka","active":true,"timeZone":"America/Los_Angeles"},"body":"In my understanding, skipBytes-- will not be executed basically.\r\n\r\nbufferedIn.read() is executed only when skipBytes is 0, this usually means that the file position is at the end of the split. However, InputStream.skip says \"Skips over and discards {{n}} bytes of data from the input stream. The {{skip}} method may, for a variety of reasons, end up skipping over some smaller number of bytes, possibly {{0}}. The actual number of bytes skipped is returned.\" ([https://docs.oracle.com/javase/7/docs/api/java/io/FilterInputStream.html).] So I thought InputStream.skip() might return 0 even if the position is not at the end of the split. \r\n\r\n \r\n\r\nPlease let me know if my understanding is wrong. Thank you.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=tanakahda","name":"tanakahda","key":"tanakahda","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Aki Tanaka","active":true,"timeZone":"America/Los_Angeles"},"created":"2018-03-08T17:27:10.029+0000","updated":"2018-03-08T17:27:10.029+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13135592/comment/16391796","id":"16391796","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=fabbri","name":"fabbri","key":"fabbri","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=fabbri&avatarId=24131","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=fabbri&avatarId=24131","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=fabbri&avatarId=24131","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=fabbri&avatarId=24131"},"displayName":"Aaron Fabbri","active":true,"timeZone":"America/Los_Angeles"},"body":"Ah.. yes, I didn't notice the read() call.  Thank you, makes sense now.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=fabbri","name":"fabbri","key":"fabbri","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=fabbri&avatarId=24131","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=fabbri&avatarId=24131","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=fabbri&avatarId=24131","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=fabbri&avatarId=24131"},"displayName":"Aaron Fabbri","active":true,"timeZone":"America/Los_Angeles"},"created":"2018-03-08T19:27:12.665+0000","updated":"2018-03-08T19:27:12.665+0000"}],"maxResults":29,"total":29,"startAt":0},"votes":{"self":"https://issues.apache.org/jira/rest/api/2/issue/HADOOP-15206/votes","votes":0,"hasVoted":false},"worklog":{"startAt":0,"maxResults":20,"total":0,"worklogs":[]},"customfield_12311820":"0|i3polb:"}}