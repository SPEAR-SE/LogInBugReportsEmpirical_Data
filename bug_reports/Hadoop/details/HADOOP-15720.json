{"expand":"renderedFields,names,schema,operations,editmeta,changelog,versionedRepresentations","id":"13183030","self":"https://issues.apache.org/jira/rest/api/2/issue/13183030","key":"HADOOP-15720","fields":{"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype","name":"Bug","subtask":false,"avatarId":21133},"timespent":null,"project":{"self":"https://issues.apache.org/jira/rest/api/2/project/12310240","id":"12310240","key":"HADOOP","name":"Hadoop Common","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/projectavatar?pid=12310240&avatarId=10095","24x24":"https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12310240&avatarId=10095","16x16":"https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12310240&avatarId=10095","32x32":"https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12310240&avatarId=10095"},"projectCategory":{"self":"https://issues.apache.org/jira/rest/api/2/projectCategory/10292","id":"10292","description":"Scalable Distributed Computing","name":"Hadoop"}},"fixVersions":[],"aggregatetimespent":null,"resolution":null,"customfield_12312322":null,"customfield_12310220":null,"customfield_12312520":null,"customfield_12312323":null,"customfield_12312521":"2018-09-05 04:06:45.616","customfield_12310420":"9223372036854775807","customfield_12312320":null,"customfield_12310222":null,"customfield_12312321":null,"resolutiondate":null,"workratio":-1,"customfield_12312328":null,"customfield_12312329":null,"customfield_12312923":null,"customfield_12312326":null,"customfield_12312920":null,"customfield_12310300":null,"customfield_12312327":null,"customfield_12312921":null,"customfield_12312324":null,"customfield_12312720":null,"customfield_12312325":null,"lastViewed":null,"watches":{"self":"https://issues.apache.org/jira/rest/api/2/issue/HADOOP-15720/watchers","watchCount":4,"isWatching":false},"created":"2018-09-05T04:06:45.616+0000","customfield_12310192":null,"customfield_12310191":null,"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.svg","name":"Major","id":"3"},"labels":[],"customfield_12312333":null,"customfield_12310230":null,"customfield_12312334":null,"customfield_12313422":"false","customfield_12310310":"0.0","customfield_12312331":null,"customfield_12312332":null,"timeestimate":null,"aggregatetimeoriginalestimate":null,"customfield_12311120":null,"customfield_12312330":null,"versions":[],"issuelinks":[],"customfield_12312339":null,"assignee":null,"customfield_12312337":null,"customfield_12312338":null,"updated":"2018-09-05T05:49:19.325+0000","customfield_12312335":null,"customfield_12312336":null,"status":{"self":"https://issues.apache.org/jira/rest/api/2/status/1","description":"The issue is open and ready for the assignee to start work on it.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/open.png","name":"Open","id":"1","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/2","id":2,"key":"new","colorName":"blue-gray","name":"To Do"}},"components":[{"self":"https://issues.apache.org/jira/rest/api/2/component/12330961","id":"12330961","name":"common"}],"timeoriginalestimate":null,"description":"org.apache.hadoop.ipc.Client send multiple RPC calls to server synchronously via the same connection as in the following synchronized code block:\r\n{code:java}\r\n      synchronized (sendRpcRequestLock) {\r\n        Future<?> senderFuture = sendParamsExecutor.submit(new Runnable() {\r\n          @Override\r\n          public void run() {\r\n            try {\r\n              synchronized (Connection.this.out) {\r\n                if (shouldCloseConnection.get()) {\r\n                  return;\r\n                }\r\n                \r\n                if (LOG.isDebugEnabled()) {\r\n                  LOG.debug(getName() + \" sending #\" + call.id\r\n                      + \" \" + call.rpcRequest);\r\n                }\r\n         \r\n                byte[] data = d.getData();\r\n                int totalLength = d.getLength();\r\n                out.writeInt(totalLength); // Total Length\r\n                out.write(data, 0, totalLength);// RpcRequestHeader + RpcRequest\r\n                out.flush();\r\n              }\r\n            } catch (IOException e) {\r\n              // exception at this point would leave the connection in an\r\n              // unrecoverable state (eg half a call left on the wire).\r\n              // So, close the connection, killing any outstanding calls\r\n              markClosed(e);\r\n            } finally {\r\n              //the buffer is just an in-memory buffer, but it is still polite to\r\n              // close early\r\n              IOUtils.closeStream(d);\r\n            }\r\n          }\r\n        });\r\n      \r\n        try {\r\n          senderFuture.get();\r\n        } catch (ExecutionException e) {\r\n          Throwable cause = e.getCause();\r\n          \r\n          // cause should only be a RuntimeException as the Runnable above\r\n          // catches IOException\r\n          if (cause instanceof RuntimeException) {\r\n            throw (RuntimeException) cause;\r\n          } else {\r\n            throw new RuntimeException(\"unexpected checked exception\", cause);\r\n          }\r\n        }\r\n      }\r\n{code}\r\nAnd it then waits for result asynchronously via\r\n{code:java}\r\n    /* Receive a response.\r\n     * Because only one receiver, so no synchronization on in.\r\n     */\r\n    private void receiveRpcResponse() {\r\n      if (shouldCloseConnection.get()) {\r\n        return;\r\n      }\r\n      touch();\r\n      \r\n      try {\r\n        int totalLen = in.readInt();\r\n        RpcResponseHeaderProto header = \r\n            RpcResponseHeaderProto.parseDelimitedFrom(in);\r\n        checkResponse(header);\r\n\r\n        int headerLen = header.getSerializedSize();\r\n        headerLen += CodedOutputStream.computeRawVarint32Size(headerLen);\r\n\r\n        int callId = header.getCallId();\r\n        if (LOG.isDebugEnabled())\r\n          LOG.debug(getName() + \" got value #\" + callId);\r\n\r\n        Call call = calls.get(callId);\r\n        RpcStatusProto status = header.getStatus();\r\n......\r\n{code}\r\nHowever, we can see that the {{call}} returned by {{receiveRpcResonse()}} above may be in any order.\r\n\r\nThe following code\r\n{code:java}\r\n        int totalLen = in.readInt();\r\n{code}\r\neventually calls one of the following two methods, where rpcTimeOut is checked against:\r\n{code:java}\r\n      /** Read a byte from the stream.\r\n       * Send a ping if timeout on read. Retries if no failure is detected\r\n       * until a byte is read.\r\n       * @throws IOException for any IO problem other than socket timeout\r\n       */\r\n      @Override\r\n      public int read() throws IOException {\r\n        int waiting = 0;\r\n        do {\r\n          try {\r\n            return super.read();\r\n          } catch (SocketTimeoutException e) {\r\n            waiting += soTimeout;\r\n            handleTimeout(e, waiting);\r\n          }\r\n        } while (true);\r\n      }\r\n\r\n      /** Read bytes into a buffer starting from offset <code>off</code>\r\n       * Send a ping if timeout on read. Retries if no failure is detected\r\n       * until a byte is read.\r\n       * \r\n       * @return the total number of bytes read; -1 if the connection is closed.\r\n       */\r\n      @Override\r\n      public int read(byte[] buf, int off, int len) throws IOException {\r\n        int waiting = 0;\r\n        do {\r\n          try {\r\n            return super.read(buf, off, len);\r\n          } catch (SocketTimeoutException e) {\r\n            waiting += soTimeout;\r\n            handleTimeout(e, waiting);\r\n          }\r\n        } while (true);\r\n      }\r\n{code}\r\nBut the waiting time is always initialized to 0 for each of the above read calls, so each call can take up to rpcTimeout. And the real time to time out a call appears to be accumulative.\r\n\r\nFor example, if the client issue call1, call2, then it waits for result, if the first call1 took (rpcTimeout - 1), thus no time out, the second took (rpcTimeout -1), thus no timeout, but it effectively took 2*(rpcTimeout -1) which could be much bigger than rpcTimeout and should time out.\r\n\r\nWorst case is that a RPC may take indeterminatey long and doesn't time out.\r\n\r\nIt seems more accurate to remember the time that an RPC is sent to the server, and then check time out here:\r\n{code:java}\r\n  public Writable call(RPC.RpcKind rpcKind, Writable rpcRequest,\r\n      ConnectionId remoteId, int serviceClass,\r\n      AtomicBoolean fallbackToSimpleAuth) throws IOException {\r\n    final Call call = createCall(rpcKind, rpcRequest);\r\n    Connection connection = getConnection(remoteId, call, serviceClass,\r\n      fallbackToSimpleAuth);\r\n    try {\r\n      connection.sendRpcRequest(call);                 // send the rpc request\r\n    } catch (RejectedExecutionException e) {\r\n      throw new IOException(\"connection has been closed\", e);\r\n    } catch (InterruptedException e) {\r\n      Thread.currentThread().interrupt();\r\n      LOG.warn(\"interrupted waiting to send rpc request to server\", e);\r\n      throw new IOException(e);\r\n    }\r\n\r\n    synchronized (call) {\r\n      while (!call.done) {\r\n        try {\r\n          call.wait();                           // wait for the result\r\n        } catch (InterruptedException ie) {\r\n          Thread.currentThread().interrupt();\r\n          throw new InterruptedIOException(\"Call interrupted\");\r\n        } <=should check how long it has waited here, time out if rpcTimeout has been reached\r\n      }  \r\n\r\n      if (call.error != null) {\r\n        if (call.error instanceof RemoteException) {\r\n          call.error.fillInStackTrace();\r\n          throw call.error;\r\n        } else { // local exception\r\n          InetSocketAddress address = connection.getRemoteAddress();\r\n          throw NetUtils.wrapException(address.getHostName(),\r\n                  address.getPort(),\r\n                  NetUtils.getHostname(),\r\n                  0,\r\n                  call.error);\r\n        }\r\n      } else {\r\n        return call.getRpcResponse();\r\n      }\r\n    }\r\n  }\r\n{code}\r\nbasically we should change the call highlighted above from\r\n{code:java}\r\n    public final void wait() throws InterruptedException\r\n{code}\r\nto\r\n{code:java}\r\npublic final void wait(long timeout, int nanos) throws InterruptedException\r\n{code}\r\nand apply rpcTimeout as the parameter value here (notice that I'm ignoring the time needed to send rpc over to the server, and ideally we should include that too, so rpcTimeout could mean what it intends to mean).\r\n\r\nHi [~daryn] and [~kihwal], would you please help taking a look at my above analysis to see if I have any misunderstanding here?\r\n\r\nThanks a lot.","customfield_10010":null,"timetracking":{},"customfield_12312026":null,"customfield_12312023":null,"customfield_12310320":null,"customfield_12312024":null,"customfield_12312340":null,"attachment":[],"aggregatetimeestimate":null,"customfield_12312341":null,"customfield_12312220":null,"customfield_12312022":null,"customfield_12310921":null,"customfield_12310920":"9223372036854775807","customfield_12312823":null,"summary":"rpcTimeout may not have been applied correctly","creator":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yzhangal","name":"yzhangal","key":"yzhangal","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yongjun Zhang","active":true,"timeZone":"America/Los_Angeles"},"subtasks":[],"customfield_12310291":null,"reporter":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yzhangal","name":"yzhangal","key":"yzhangal","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yongjun Zhang","active":true,"timeZone":"America/Los_Angeles"},"customfield_12310290":null,"aggregateprogress":{"progress":0,"total":0},"customfield_12311024":null,"environment":null,"customfield_12313520":null,"customfield_12311020":null,"duedate":null,"customfield_12310250":null,"progress":{"progress":0,"total":0},"comment":{"comments":[],"maxResults":0,"total":0,"startAt":0},"votes":{"self":"https://issues.apache.org/jira/rest/api/2/issue/HADOOP-15720/votes","votes":0,"hasVoted":false},"worklog":{"startAt":0,"maxResults":20,"total":0,"worklogs":[]},"customfield_12311820":"0|i3xqnr:"}}