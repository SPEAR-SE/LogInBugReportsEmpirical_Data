{"expand":"renderedFields,names,schema,operations,editmeta,changelog,versionedRepresentations","id":"12758827","self":"https://issues.apache.org/jira/rest/api/2/issue/12758827","key":"HADOOP-11343","fields":{"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype","name":"Bug","subtask":false,"avatarId":21133},"timespent":null,"project":{"self":"https://issues.apache.org/jira/rest/api/2/project/12310240","id":"12310240","key":"HADOOP","name":"Hadoop Common","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/projectavatar?pid=12310240&avatarId=10095","24x24":"https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12310240&avatarId=10095","16x16":"https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12310240&avatarId=10095","32x32":"https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12310240&avatarId=10095"},"projectCategory":{"self":"https://issues.apache.org/jira/rest/api/2/projectCategory/10292","id":"10292","description":"Scalable Distributed Computing","name":"Hadoop"}},"fixVersions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12329005","id":"12329005","description":"2.6.1 release","name":"2.6.1","archived":false,"released":true,"releaseDate":"2015-09-23"},{"self":"https://issues.apache.org/jira/rest/api/2/version/12327583","id":"12327583","description":"2.7.0 release","name":"2.7.0","archived":false,"released":true,"releaseDate":"2015-04-20"},{"self":"https://issues.apache.org/jira/rest/api/2/version/12335733","id":"12335733","description":"3.0.0-alpha1 release","name":"3.0.0-alpha1","archived":false,"released":true,"releaseDate":"2016-09-03"}],"aggregatetimespent":null,"resolution":{"self":"https://issues.apache.org/jira/rest/api/2/resolution/1","id":"1","description":"A fix for this issue is checked into the tree and tested.","name":"Fixed"},"customfield_12312322":null,"customfield_12310220":"2014-12-02T06:17:01.248+0000","customfield_12312520":null,"customfield_12312323":null,"customfield_12312521":"Sun Aug 30 20:34:45 UTC 2015","customfield_12310420":"9223372036854775807","customfield_12312320":null,"customfield_12310222":"10002_*:*_1_*:*_243888936_*|*_1_*:*_1_*:*_92425901_*|*_5_*:*_1_*:*_0","customfield_12312321":null,"resolutiondate":"2014-12-06T02:22:25.039+0000","workratio":-1,"customfield_12312328":null,"customfield_12312329":null,"customfield_12312923":null,"customfield_12312326":null,"customfield_12312920":null,"customfield_12310300":null,"customfield_12312327":null,"customfield_12312921":null,"customfield_12312324":null,"customfield_12312720":null,"customfield_12312325":null,"lastViewed":null,"watches":{"self":"https://issues.apache.org/jira/rest/api/2/issue/HADOOP-11343/watchers","watchCount":12,"isWatching":false},"created":"2014-12-02T04:57:10.253+0000","customfield_12310192":null,"customfield_12310191":null,"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/1","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/blocker.svg","name":"Blocker","id":"1"},"labels":["2.6.1-candidate"],"customfield_12312333":null,"customfield_12310230":null,"customfield_12312334":null,"customfield_12313422":"false","customfield_12310310":"4.0","customfield_12312331":null,"customfield_12312332":null,"timeestimate":null,"aggregatetimeoriginalestimate":null,"customfield_12311120":null,"customfield_12312330":null,"versions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12327179","id":"12327179","description":"2.6.0 release","name":"2.6.0","archived":false,"released":true,"releaseDate":"2014-11-18"}],"issuelinks":[],"customfield_12312339":null,"assignee":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jerrychenhf","name":"jerrychenhf","key":"jerrychenhf","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10445","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10445","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10445","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10445"},"displayName":"Haifeng Chen","active":true,"timeZone":"Asia/Shanghai"},"customfield_12312337":null,"customfield_12312338":null,"updated":"2016-08-30T01:31:27.971+0000","customfield_12312335":null,"customfield_12312336":null,"status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Done"}},"components":[{"self":"https://issues.apache.org/jira/rest/api/2/component/12312526","id":"12312526","name":"security"}],"timeoriginalestimate":null,"description":"In the AesCtrCryptoCodec calculateIV, as the init IV is a random generated 16 bytes, \n\nfinal byte[] iv = new byte[cc.getCipherSuite().getAlgorithmBlockSize()];\n      cc.generateSecureRandom(iv);\n\nThen the following calculation of iv and counter on 8 bytes (64bit) space would easily cause overflow and this overflow gets lost.  The result would be the 128 bit data block was encrypted with a wrong counter and cannot be decrypted by standard aes-ctr.\n\n{code}\n/**\n   * The IV is produced by adding the initial IV to the counter. IV length \n   * should be the same as {@link #AES_BLOCK_SIZE}\n   */\n  @Override\n  public void calculateIV(byte[] initIV, long counter, byte[] IV) {\n    Preconditions.checkArgument(initIV.length == AES_BLOCK_SIZE);\n    Preconditions.checkArgument(IV.length == AES_BLOCK_SIZE);\n    \n    System.arraycopy(initIV, 0, IV, 0, CTR_OFFSET);\n    long l = 0;\n    for (int i = 0; i < 8; i++) {\n      l = ((l << 8) | (initIV[CTR_OFFSET + i] & 0xff));\n    }\n    l += counter;\n    IV[CTR_OFFSET + 0] = (byte) (l >>> 56);\n    IV[CTR_OFFSET + 1] = (byte) (l >>> 48);\n    IV[CTR_OFFSET + 2] = (byte) (l >>> 40);\n    IV[CTR_OFFSET + 3] = (byte) (l >>> 32);\n    IV[CTR_OFFSET + 4] = (byte) (l >>> 24);\n    IV[CTR_OFFSET + 5] = (byte) (l >>> 16);\n    IV[CTR_OFFSET + 6] = (byte) (l >>> 8);\n    IV[CTR_OFFSET + 7] = (byte) (l);\n  }\n{code}","customfield_10010":null,"timetracking":{},"customfield_12312026":null,"customfield_12312023":null,"customfield_12310320":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12327583","id":"12327583","description":"2.7.0 release","name":"2.7.0","archived":false,"released":true,"releaseDate":"2015-04-20"}],"customfield_12312024":null,"customfield_12312340":null,"attachment":[{"self":"https://issues.apache.org/jira/rest/api/2/attachment/12685260","id":"12685260","filename":"HADOOP-11343.001.patch","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hitliuyi","name":"hitliuyi","key":"hitliuyi","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yi Liu","active":true,"timeZone":"Asia/Shanghai"},"created":"2014-12-05T06:39:15.172+0000","size":4845,"mimeType":"text/plain","content":"https://issues.apache.org/jira/secure/attachment/12685260/HADOOP-11343.001.patch"},{"self":"https://issues.apache.org/jira/rest/api/2/attachment/12685274","id":"12685274","filename":"HADOOP-11343.002.patch","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hitliuyi","name":"hitliuyi","key":"hitliuyi","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yi Liu","active":true,"timeZone":"Asia/Shanghai"},"created":"2014-12-05T07:20:46.139+0000","size":4777,"mimeType":"text/plain","content":"https://issues.apache.org/jira/secure/attachment/12685274/HADOOP-11343.002.patch"},{"self":"https://issues.apache.org/jira/rest/api/2/attachment/12685470","id":"12685470","filename":"HADOOP-11343.003.patch","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hitliuyi","name":"hitliuyi","key":"hitliuyi","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yi Liu","active":true,"timeZone":"Asia/Shanghai"},"created":"2014-12-06T00:20:04.324+0000","size":4877,"mimeType":"text/plain","content":"https://issues.apache.org/jira/secure/attachment/12685470/HADOOP-11343.003.patch"},{"self":"https://issues.apache.org/jira/rest/api/2/attachment/12684830","id":"12684830","filename":"HADOOP-11343.patch","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jerrychenhf","name":"jerrychenhf","key":"jerrychenhf","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10445","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10445","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10445","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10445"},"displayName":"Haifeng Chen","active":true,"timeZone":"Asia/Shanghai"},"created":"2014-12-03T06:28:27.680+0000","size":6415,"mimeType":"text/plain","content":"https://issues.apache.org/jira/secure/attachment/12684830/HADOOP-11343.patch"}],"aggregatetimeestimate":null,"customfield_12312341":null,"customfield_12312220":null,"customfield_12312022":null,"customfield_12310921":null,"customfield_12310920":"9223372036854775807","customfield_12312823":null,"summary":"Overflow is not properly handled in caclulating final iv for AES CTR","creator":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jerrychenhf","name":"jerrychenhf","key":"jerrychenhf","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10445","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10445","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10445","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10445"},"displayName":"Haifeng Chen","active":true,"timeZone":"Asia/Shanghai"},"subtasks":[],"customfield_12310291":null,"reporter":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jerrychenhf","name":"jerrychenhf","key":"jerrychenhf","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10445","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10445","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10445","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10445"},"displayName":"Haifeng Chen","active":true,"timeZone":"Asia/Shanghai"},"customfield_12310290":null,"aggregateprogress":{"progress":0,"total":0},"customfield_12311024":null,"environment":null,"customfield_12313520":null,"customfield_12311020":null,"duedate":"2014-12-05","customfield_12310250":null,"progress":{"progress":0,"total":0},"comment":{"comments":[{"self":"https://issues.apache.org/jira/rest/api/2/issue/12758827/comment/14231056","id":"14231056","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=andrew.wang","name":"andrew.wang","key":"andrew.wang","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=andrew.wang&avatarId=19230","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andrew.wang&avatarId=19230","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andrew.wang&avatarId=19230","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andrew.wang&avatarId=19230"},"displayName":"Andrew Wang","active":true,"timeZone":"America/Los_Angeles"},"body":"[~yoderme] do you mind taking a quick look at this? Jerry's description of the problem makes sense, I just want to make sure the proposed solution sounds okay to you.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=andrew.wang","name":"andrew.wang","key":"andrew.wang","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=andrew.wang&avatarId=19230","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andrew.wang&avatarId=19230","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andrew.wang&avatarId=19230","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andrew.wang&avatarId=19230"},"displayName":"Andrew Wang","active":true,"timeZone":"America/Los_Angeles"},"created":"2014-12-02T06:17:01.248+0000","updated":"2014-12-02T06:17:01.248+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12758827/comment/14231868","id":"14231868","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yoderme","name":"yoderme","key":"yoderme","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=yoderme&avatarId=19835","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=yoderme&avatarId=19835","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=yoderme&avatarId=19835","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=yoderme&avatarId=19835"},"displayName":"Mike Yoder","active":true,"timeZone":"America/Los_Angeles"},"body":"What was the proposed solution?  I didn't see a difference in the code above vs. what's in git right now.  (I could've missed it...)\n\nThe overflow happens at the \"l += counter\" line, yes?  The statement above is \"this overflow gets lost\".  Well, it doesn't actually get \"lost\", since this is integer arithmetic the MAX LONG wraps around to a MIN LONG and keeps going up.   So the effects of the counter are constrained to bytes 8-15 of IV, and bytes 0-7 are fixed at the randomly generated value.  We are not concerned with re-using IVs by wrapping a long - a long is 2^64 bits, and the counter is for each 16-byte block (or 2^4) so in order to wrap we'd have to have a file that's 2^68 bytes long.  Not going to happen.\n\nThere actually is no \"standard aes-ctr\".  From http://csrc.nist.gov/publications/nistpubs/800-38a/sp800-38a.pdf,\n\n{quote}\nThe Counter (CTR) mode is a confidentiality mode that features the application of the forward\ncipher to a set of input blocks, called counters, to produce a sequence of output blocks that are\nexclusive-ORed with the plaintext to produce the ciphertext, and vice versa. The sequence of\ncounters must have the property that each block in the sequence is different from every other\nblock. This condition is not restricted to a single message: across all of the messages that are\nencrypted under the given key, all of the counters must be distinct. \n{quote}\n\nAnd from Appendix B of that document:\n\n{quote}\nB.2 Choosing Initial Counter Blocks\n\nThe initial counter blocks, T1, for each message that is encrypted under the given key must be\nchosen in a manner than ensures the uniqueness of all the counter blocks across all the messages.\nTwo examples of approaches to choosing the initial counter blocks are given in this section.\n\nIn the first approach, for a given key, all plaintext messages are encrypted sequentially. Within\nthe messages, the same fixed set of m bits of the counter block is incremented by the standard\nincrementing function. The initial counter block for the initial plaintext message may be any\nstring of b bits. The initial counter block for any subsequent message can be obtained by\napplying the standard incrementing function to the fixed set of m bits of the final counter block\nof the previous message. In effect, all of the plaintext messages that are ever encrypted under the\ngiven key are concatenated into a single message; consequently, the total number of plaintext\nblocks must not exceed 2^m . Procedures should be established to ensure the maintenance of the\nstate of the final counter block of the latest encrypted message, and to ensure the proper\nsequencing of the messages.\n\nA second approach to satisfying the uniqueness property across messages is to assign to each\nmessage a unique string of b/2 bits (rounding up, if b is odd), in other words, a message nonce,\nand to incorporate the message nonce into every counter block for the message. The leading b/2\nbits (rounding up, if b is odd) of each counter block would be the message nonce, and the\nstandard incrementing function would be applied to the remaining m bits to provide an index to\nthe counter blocks for the message. Thus, if N is the message nonce for a given message, then\nthe jth counter block is given by Tj = N | \\[j], for j = 1…n. The number of blocks, n, in any\nmessage must satisfy n < 2^m . A procedure should be established to ensure the uniqueness of the\nmessage nonces.\n\nThis recommendation allows other methods and approaches for achieving the uniqueness\nproperty. Validation that an implementation of the CTR mode conforms to this recommendation\nwill typically include an examination of the procedures for assuring the uniqueness of counter\nblocks within messages and across all messages that are encrypted under a given key. \n{quote}\n\nThere are two \"recommendations\", and what's implemented follows the second recommendation.  I believe that most CTR implementations (including Java) do something like this.  (As an aside, I've seen an openssl implementation that follows the first recommendation.)\n\nAnother note is that if this function is altered in any way, it will break the decryption of data that has already been encrypted.  I don't know if that's much at all at this point, but one would still have to tread with care.\n\nI recommend that we leave this function alone... unless I misunderstood something about the problem.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yoderme","name":"yoderme","key":"yoderme","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=yoderme&avatarId=19835","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=yoderme&avatarId=19835","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=yoderme&avatarId=19835","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=yoderme&avatarId=19835"},"displayName":"Mike Yoder","active":true,"timeZone":"America/Los_Angeles"},"created":"2014-12-02T18:19:16.286+0000","updated":"2014-12-02T18:19:16.286+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12758827/comment/14232399","id":"14232399","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jerrychenhf","name":"jerrychenhf","key":"jerrychenhf","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10445","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10445","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10445","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10445"},"displayName":"Haifeng Chen","active":true,"timeZone":"Asia/Shanghai"},"body":"Thanks Mike for commenting. \nThe code above is not the solution. It was copied from the source code.\nThe risk of the existing implementation is actually, when generating the initIV, it was filled with 16 bytes random number. And in the calculateIV algorithm, it adds a long counter to the 8 bytes of initIV.  This means that even the counter is not very big, long += counter still has a good possibility to overflow.  For example, as the initIV is random, it might happens to be some big value in the 8 bytes, and a smaller counter will cause the result to be overflow. \n\nWhen saying that \"the overflow get lost\", the carry doesn't add up to the above 8 bytes. Since we have 16 bytes, but we are doing 8 bytes arithmetic. While for \"standard aes-ctr\", I mean that the increment of the counter is happening on 128bits (16 bytes) space, other than on 8 bytes space. Checking the following code from openssl:\n\nhttp://www.mcs.anl.gov/~bester/gsi/coverage/4.0.6/source-aes_ctr.c.html\n\nYou can see that the AES_ctr128_inc increment the counter with 128bytes add arithmetic.\n\nWe have two approaches for solving this:\n1. When generating 16 bytes initIV, we fill the lower 8 bytes with random IV and leave the higher 8 bytes zero for counter This is actually suggested in http://www.mcs.anl.gov/~bester/gsi/coverage/4.0.6/source-aes_ctr.c.html as following:\n\n         * This algorithm assumes that the counter is in the x lower bits \n         * of the IV (ivec), and that the application has full control over \n         * overflow and the rest of the IV. This implementation takes NO \n         * responsability for checking that the counter doesn't overflow \n         * into the rest of the IV when incremented \n We choose the x = 8\n\n2. for calculateIV, we can always do a identical IV + Counter algorithm on 16 bytes other than on high (big endian) 8 bytes. If solution #1 is not done, from the probability, it is still possible that the IV + counter will overflow the whole 16 bytes if the initIV happens randomized to very large number. But it still has two benefits, a. the possibility would be much much lower for a 16 bytes number overflow with a long counter. b. Even the 16 bytes overflow, the algorithm is identical with the AES_ctr128_inc which means the encrypted block can be still decrypted by a \"standard AES-ctr\" cipher such as Java Cipher. The current calculateIV implementation cannot achieve this if the 8 bytes overflowed because the final IV used for the block will be different between a Java Cipher and our implementation, even with the same input if initIV and counter.\n\nWe have get some initial code done and can provided the patch for review. Please help a review if possible.\n\nThanks again for sharing the opinion.\n ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jerrychenhf","name":"jerrychenhf","key":"jerrychenhf","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10445","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10445","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10445","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10445"},"displayName":"Haifeng Chen","active":true,"timeZone":"Asia/Shanghai"},"created":"2014-12-03T00:48:14.240+0000","updated":"2014-12-03T00:48:14.240+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12758827/comment/14232413","id":"14232413","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jerrychenhf","name":"jerrychenhf","key":"jerrychenhf","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10445","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10445","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10445","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10445"},"displayName":"Haifeng Chen","active":true,"timeZone":"Asia/Shanghai"},"body":"In summary, the basic principles we should use in this is:\n1. According the magnitude of the counter, the application should take responsibility of generating right 16bytes iv to avoid overflow counter into the initial IV bits.\n\n2. A so called \"standard AES-ctr\" handles iv + counter in 16 bytes arithmetic manner and doesn't aware and doesn't care about how many bytes are random IV space, how many bytes are counter space. It just increment a number over a 16 bytes number.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jerrychenhf","name":"jerrychenhf","key":"jerrychenhf","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10445","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10445","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10445","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10445"},"displayName":"Haifeng Chen","active":true,"timeZone":"Asia/Shanghai"},"created":"2014-12-03T01:01:58.242+0000","updated":"2014-12-03T01:01:58.242+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12758827/comment/14232434","id":"14232434","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yoderme","name":"yoderme","key":"yoderme","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=yoderme&avatarId=19835","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=yoderme&avatarId=19835","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=yoderme&avatarId=19835","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=yoderme&avatarId=19835"},"displayName":"Mike Yoder","active":true,"timeZone":"America/Los_Angeles"},"body":"Let's back up a bit.  I don't understand what the problem is that you are trying to address.  You keep mentioning \"overflow\".  Yes, bytes 8-15, when treated as a long and added to the counter, can wrap around instead of carrying the results into bytes 0-7.  But what's the problem with that? The values of the IV will still be different for each block that's encrypted. No information is lost, and we still have to have a file larger than 2^68 bytes before we wrap the counter.\n\nYou mention the openssl source code for AES_ctr128_encrypt() - that was exactly the code I was referring to when I said \"(As an aside, I've seen an openssl implementation that follows the first recommendation.)\"  That's just one way to handle the IV.\n\nSo I just went digging around for Java code that does AES-CTR, and found\nhttp://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/8-b132/com/sun/crypto/provider/CounterMode.java#CounterMode\n\nLook for increment().  It does the same thing as the openssl implementation (which is actually a surprise to me, I thought it worked like calculateIV).  I might be mistaken in this, but I _thought_ that calculateIV() was written the way it was written completely on purpose.  We should seek comment from [~tucu00] if he's still paying attention to emails that come from apache jira.\n\nYou do need to address the upgrade question: changing this code will render useless any data encrypted with the current scheme, unless that data is first copied out of an EZ to clear text, the upgrade performed, and then the data copied back into the EZ.  This is a *very* heavy price to pay.\n\nI'd also like to know what the use case is. You mention the Java Cipher - is your use case that you want to get the raw encrypted data and somehow decrypt it by hand outside of the normal path?  If so, how would you get the key to decrypt it with?  Why would you want to do this?\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yoderme","name":"yoderme","key":"yoderme","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=yoderme&avatarId=19835","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=yoderme&avatarId=19835","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=yoderme&avatarId=19835","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=yoderme&avatarId=19835"},"displayName":"Mike Yoder","active":true,"timeZone":"America/Los_Angeles"},"created":"2014-12-03T01:28:05.658+0000","updated":"2014-12-03T01:28:05.658+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12758827/comment/14232466","id":"14232466","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jerrychenhf","name":"jerrychenhf","key":"jerrychenhf","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10445","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10445","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10445","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10445"},"displayName":"Haifeng Chen","active":true,"timeZone":"Asia/Shanghai"},"body":"Thanks Mike for following up.\nI agree that wrap around should work good for the this implementation. But the data it encrypted might cannot be decrypted by Java Cipher with the same key and initial IV. Because the iv + counter calculation here doesn't not follow the \"convention\" : Both openssl and java Cipher increment counter on 16 bytes space, but the currently calculateIV implementation increment on 8 bytes only and wrap around. \n\nUsing the same key and same initial IV, the cipher text steam of AES-CTR mode will be different with other \"standard\" Ciphers, just because it use a different way of increment the counter. The result encrypted data will be the implementation specific and locked in here for all the cases. The data key can be managed or exported in many possible ways but what really matters here is the AES-CTR conformance of resulted data. Application may stored the resulted data in different layout such as add headers, but the different output data from the same configuration with the same algorithm is a serious problem.\n\nYes. Dealing with the existing data would be something difficult. One possible solution is to add versioning mechanism in EZ attributes or file attributes in EZ. \n\n\n\n\n\n\n\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jerrychenhf","name":"jerrychenhf","key":"jerrychenhf","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10445","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10445","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10445","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10445"},"displayName":"Haifeng Chen","active":true,"timeZone":"Asia/Shanghai"},"created":"2014-12-03T02:15:18.350+0000","updated":"2014-12-03T02:15:18.350+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12758827/comment/14232531","id":"14232531","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jerrychenhf","name":"jerrychenhf","key":"jerrychenhf","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10445","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10445","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10445","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10445"},"displayName":"Haifeng Chen","active":true,"timeZone":"Asia/Shanghai"},"body":"@Mike Yoder , When I deep further into the problem, I found that even considering only this implementation itself, it has problem because of the fact that the Encryptor and Decryptor underlayer uses Java Cipher or open ssl to do the encryption and decryption and  use caculateIV method to initialize the iv to a specific position such as a seek operation.\n\nJust described as above, combination of the current caculateIV and other Cipher counter increment will cause problem if these two are not consistent. \n\nA strait forward proof of this problem is \"The result stream output from CryptoOutputStream has a possibility of not be able to decrypted by CryptoInputStream\" depending on seek operations.\n\nMy previous statement \"wrap around should work good for the this implementation. \" assuming that the implementation use caculateIV to calculate all the final IV for all the blocks. But the actual situation now is interleave of caculateIV and increment algorithm of underlayer Cipher.\n\nWish this makes the problem clear.\n\nFor example,  when using CryptoInputStream decrypt data, we first seek to a position which will use calculateIV to get the final IV feeding to underlayer Cipher (either java Cipher or openssl). If long overflow happens  at calculateIV, and the underlayer Cipher get the wrong final IV to use. While the encryption process may follow the different pattern of calling calculateIV.\n\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jerrychenhf","name":"jerrychenhf","key":"jerrychenhf","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10445","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10445","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10445","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10445"},"displayName":"Haifeng Chen","active":true,"timeZone":"Asia/Shanghai"},"created":"2014-12-03T03:47:46.254+0000","updated":"2014-12-03T03:47:46.254+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12758827/comment/14232575","id":"14232575","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jerrychenhf","name":"jerrychenhf","key":"jerrychenhf","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10445","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10445","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10445","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10445"},"displayName":"Haifeng Chen","active":true,"timeZone":"Asia/Shanghai"},"body":"Based on the above understanding, the upgrade would not be something be able  to be considered. This is because once the issue happens in the encryption process, the decryption will fail unless the descryption strictly follow the same calling patten of calculateIV at the same sequnce of positions. But we know this is hard to achieve. \n\nSo this fix would not be a pure improvement, but a crucial fix for unrecoverable data corrutption caused by encryption.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jerrychenhf","name":"jerrychenhf","key":"jerrychenhf","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10445","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10445","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10445","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10445"},"displayName":"Haifeng Chen","active":true,"timeZone":"Asia/Shanghai"},"created":"2014-12-03T04:41:45.939+0000","updated":"2014-12-03T04:41:45.939+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12758827/comment/14232637","id":"14232637","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=wheat9","name":"wheat9","key":"wheat9","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Haohui Mai","active":true,"timeZone":"America/Los_Angeles"},"body":"bq. You do need to address the upgrade question: changing this code will render useless any data encrypted with the current scheme, unless that data is first copied out of an EZ to clear text, the upgrade performed, and then the data copied back into the EZ. This is a very heavy price to pay.\n\nWhile any codecs can produce and consume encrypted texts, there are some questions to be answered to bridge the gap from encryption and security. For example, does the codec faithfully implement the algorithm? How well does it defend against timing attack? (some architecture will generate exception during overflow) What are the possible covert channels in the generated assembly?\n\nMuch effort in crypto libraries are to analyze and to address these problems. Though miscalculating the IV may or may not be a big deal, I don't know how it can affect the answers of the above questions, as well as the security assurance.\n\n\n\nbq. So this fix would not be a pure improvement, but a crucial fix for unrecoverable data corrutption caused by encryption.\n\nAgreed. I think this should be a blocker.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=wheat9","name":"wheat9","key":"wheat9","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Haohui Mai","active":true,"timeZone":"America/Los_Angeles"},"created":"2014-12-03T06:05:37.255+0000","updated":"2014-12-03T06:14:21.277+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12758827/comment/14232644","id":"14232644","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=tucu00","name":"tucu00","key":"tucu00","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Alejandro Abdelnur","active":true,"timeZone":"Europe/Madrid"},"body":"If I recall correctly, if we want to change how the IV is calculated, it can be done in a backwards compatible way by introducing a new crypto SUITE. We store enough info in the file INODE to determine the SUITE used to encrypt a file. New files would be encrypted with the new SUITE, existing ones would continue using the original SUITE. \n\nWe would just have to document that for versions of HDFS prior to ### (the one having this fix) it is strongly recommended not to swap the JCE implementation for the OpenSSL or viceversa as things could break.\n\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=tucu00","name":"tucu00","key":"tucu00","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Alejandro Abdelnur","active":true,"timeZone":"Europe/Madrid"},"created":"2014-12-03T06:10:03.811+0000","updated":"2014-12-03T06:10:03.811+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12758827/comment/14232656","id":"14232656","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jerrychenhf","name":"jerrychenhf","key":"jerrychenhf","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10445","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10445","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10445","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10445"},"displayName":"Haifeng Chen","active":true,"timeZone":"Asia/Shanghai"},"body":"Thanks Alejandro Abdelnur for suggestion.\nAs far as I see, the current issue is not a pure compatibility issue. A compatibility issue can be solved by using a different crypto SUITE. While the data corruption identified here can happen even if using this crypto SUITE only. This crypto SUITE itself is broken (generate corrupted data cannot be decrypted by itself) when IV + counter overflows on 8 bytes happens. \n\nThis issue can be work rounded externally by fill lower 8 bytes with random IV and the higher 8 bytes (for counter) with zero. (To avoid overflow situation). \n\nBut the current default KMS iv generation function will random the whole 16 bytes which makes to trigger condition of this issue much easier to satisfy.\n\n\n\n\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jerrychenhf","name":"jerrychenhf","key":"jerrychenhf","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10445","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10445","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10445","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10445"},"displayName":"Haifeng Chen","active":true,"timeZone":"Asia/Shanghai"},"created":"2014-12-03T06:26:45.025+0000","updated":"2014-12-03T06:26:45.025+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12758827/comment/14232671","id":"14232671","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jerrychenhf","name":"jerrychenhf","key":"jerrychenhf","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10445","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10445","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10445","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10445"},"displayName":"Haifeng Chen","active":true,"timeZone":"Asia/Shanghai"},"body":"The patched is provided. Please help review.\n\nThe patch implement calculateIV on 16bytes addition identical to the way underlayer Cipher uses. This algorithm is modified from BigInteger add algorithm over  an array of ints.\n\nThe test cases are provided to guarantee calculateIV algorithm is correct implemented for designed and random cases.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jerrychenhf","name":"jerrychenhf","key":"jerrychenhf","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10445","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10445","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10445","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10445"},"displayName":"Haifeng Chen","active":true,"timeZone":"Asia/Shanghai"},"created":"2014-12-03T06:37:36.148+0000","updated":"2014-12-03T06:37:36.148+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12758827/comment/14232681","id":"14232681","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jerrychenhf","name":"jerrychenhf","key":"jerrychenhf","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10445","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10445","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10445","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10445"},"displayName":"Haifeng Chen","active":true,"timeZone":"Asia/Shanghai"},"body":"I also run test cases locally to compare large number of the results from the new caculateIV implementation and the old one, unless overflow happens on 8 bytes, the results are the same. ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jerrychenhf","name":"jerrychenhf","key":"jerrychenhf","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10445","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10445","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10445","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10445"},"displayName":"Haifeng Chen","active":true,"timeZone":"Asia/Shanghai"},"created":"2014-12-03T06:46:19.259+0000","updated":"2014-12-03T06:46:19.259+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12758827/comment/14232715","id":"14232715","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"body":"{color:green}+1 overall{color}.  Here are the results of testing the latest attachment \n  http://issues.apache.org/jira/secure/attachment/12684830/HADOOP-11343.patch\n  against trunk revision 7caa3bc.\n\n    {color:green}+1 @author{color}.  The patch does not contain any @author tags.\n\n    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.\n\n    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.\n\n    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.\n\n    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.\n\n    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.\n\n    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.\n\n    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-common-project/hadoop-common.\n\n    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.\n\nTest results: https://builds.apache.org/job/PreCommit-HADOOP-Build/5147//testReport/\nConsole output: https://builds.apache.org/job/PreCommit-HADOOP-Build/5147//console\n\nThis message is automatically generated.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"created":"2014-12-03T07:33:40.793+0000","updated":"2014-12-03T07:33:40.793+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12758827/comment/14233337","id":"14233337","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yoderme","name":"yoderme","key":"yoderme","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=yoderme&avatarId=19835","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=yoderme&avatarId=19835","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=yoderme&avatarId=19835","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=yoderme&avatarId=19835"},"displayName":"Mike Yoder","active":true,"timeZone":"America/Los_Angeles"},"body":"{quote}\nJust described as above, combination of the current caculateIV and other Cipher counter increment will cause problem if these two are not consistent.\n{quote}\nYeah, you're right.  This is a good catch.  Let me see if I can state this problem differently.\n\nIf the underlying java (or openssl) ctr calculation is different than calculateIV, there is a problem IF\n- assume an initial IV of 00 00 00 00 00 00 00 00 ff ff ff ff ff ff ff ff \n- the file is 32 bytes\n- File A is written, all 32 bytes at once (one call to calculateIV with counter of 0)\n- File B is written, the first 16 bytes and then the second 16 bytes (two calls to calculateIV with counter of 0 and 1)\n- Then the last 16 bytes of files A and B will be different\n\nThis actually isn't a problem *if* the files are read back _exactly_ as they are written.  But if you try to read file A in two steps, or read file B in one step, the second block will look corrupted.  It seems possible to construct a test case for this.\n\nThe code in the patch looks reasonable, although I haven't sat down with paper and pencil to work through the math.  The test cases are convincing.  Have you tested with both the openssl and java crypto implementations?\n\nI do believe that you still need to provide an upgrade path.  This means defining a new crypto SUITE and make it the default.  Existing files will use the old SUITE; the upgrade path is to simply copy all the files in an EZ; when writing the new files the new SUITE will be used and everything will work out. ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yoderme","name":"yoderme","key":"yoderme","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=yoderme&avatarId=19835","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=yoderme&avatarId=19835","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=yoderme&avatarId=19835","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=yoderme&avatarId=19835"},"displayName":"Mike Yoder","active":true,"timeZone":"America/Los_Angeles"},"created":"2014-12-03T18:54:09.613+0000","updated":"2014-12-03T18:54:09.613+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12758827/comment/14233348","id":"14233348","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=tucu00","name":"tucu00","key":"tucu00","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Alejandro Abdelnur","active":true,"timeZone":"Europe/Madrid"},"body":"Got the issue now. +1 to [~yoderme] suggestion for the upgrade path.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=tucu00","name":"tucu00","key":"tucu00","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Alejandro Abdelnur","active":true,"timeZone":"Europe/Madrid"},"created":"2014-12-03T19:02:24.490+0000","updated":"2014-12-03T19:02:24.490+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12758827/comment/14233673","id":"14233673","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=andrew.wang","name":"andrew.wang","key":"andrew.wang","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=andrew.wang&avatarId=19230","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andrew.wang&avatarId=19230","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andrew.wang&avatarId=19230","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andrew.wang&avatarId=19230"},"displayName":"Andrew Wang","active":true,"timeZone":"America/Los_Angeles"},"body":"This makes sense to me too.\n\nCode-wise, it's a little tricky for the compatibility. We can add a new CipherSuite#AES_CTR_NOPADDING_FIXED (just a suggestion), but it's going to have the same getName as the original AES_CTR_NOPADDING. This name (\"AES/CTR/NoPadding\") is currently treated as unique, and used when we're determining the CipherSuite when creating an EZ, and also when instantiating the CryptoCodec to read data. We'll need to update these two places in the code to account for this correctly, FSNamesystem#createEncryptionZone and CryptoCodec#getInstance respectively.\n\n[~jerrychenhf] does this make sense to you? I'd like to get this in ASAP, so I'm happy to take your patch and do the above if it helps.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=andrew.wang","name":"andrew.wang","key":"andrew.wang","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=andrew.wang&avatarId=19230","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andrew.wang&avatarId=19230","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andrew.wang&avatarId=19230","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andrew.wang&avatarId=19230"},"displayName":"Andrew Wang","active":true,"timeZone":"America/Los_Angeles"},"created":"2014-12-03T23:34:38.945+0000","updated":"2014-12-03T23:34:38.945+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12758827/comment/14233742","id":"14233742","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hitliuyi","name":"hitliuyi","key":"hitliuyi","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yi Liu","active":true,"timeZone":"Asia/Shanghai"},"body":"Good catch Jerry, and good suggestion [~yoderme]. Also Thanks Tucu, Andrew and Haohui's discussion.\nMeanwhile, let me take a look at the OpenSSL and JCE implementation about this.\n{code}\n I'd like to get this in ASAP, so I'm happy to take your patch and do the above if it helps.\n{code}\nAgree ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hitliuyi","name":"hitliuyi","key":"hitliuyi","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yi Liu","active":true,"timeZone":"Asia/Shanghai"},"created":"2014-12-04T01:06:48.527+0000","updated":"2014-12-04T01:07:47.658+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12758827/comment/14233786","id":"14233786","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jerrychenhf","name":"jerrychenhf","key":"jerrychenhf","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10445","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10445","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10445","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10445"},"displayName":"Haifeng Chen","active":true,"timeZone":"Asia/Shanghai"},"body":"{quote}Let me see if I can state this problem differently.{quote}\nExactly. \n\n{quote}This actually isn't a problem if the files are read back exactly as they are written. But if you try to read file A in two steps, or read file B in one step, the second block will look corrupted. {quote}\nYes. Logically, if the read follow exact the same pattern of calling caculateIV at exactly the same positions as write, it still can be decrypted. But that is very hard assumption and rarely the case in real application. \n\n{quote}Have you tested with both the openssl and java crypto implementations?{quote}\nCurrently the test case use JceAesCtrCryptoCodec instance to test calculateIV. The implementation of calculateIV is common in the base abstract class AesCtrCryptoCodec and shared by the two CryptoCodec implementations. When a CryptoCodec has the real need to override calculateIV and it might be question the override version should be tested with the assumed of test cases.  I think we can make it simple here and keep it is.\n\n{quote}I do believe that you still need to provide an upgrade path. This means defining a new crypto SUITE and make it the default. Existing files will use the old SUITE; the upgrade path is to simply copy all the files in an EZ; when writing the new files the new SUITE will be used and everything will work out.{quote}\nI would think this is not a normal upgrade situation as we think. The existing encrypted data already has problem to be decrypted with the old SUITE if the overflow condition descried above happens during encryption. \n\nIt is an illusion to expect the old SUITE to deal the problem more properly than the fixed one. The calling pattern of calculateIV when writing has no logical relation to the pattern on reading. Just described, unless following the same pattern, the decryption problem will happen for sure when reading even with the old SUITE. So I would tend to consider this is a fix of \"existing problem\", other than \"a revised or improved version\".\n\nOne benefit to create a new SUITE is that we can distinguish the two types of data: the data has potential of this problem or the data without. But just as Andrew pointing, it is a little sticky on this as we are creating two SUITEs for the same configuration of AES-CTR. \n\nI would prefer another way if we want to distinguish the two type of data: Add a version attribute to Encrytion file info. This can be addressed with a separate JIRA. \n\nHappy that we are coming closer on the solution. Thanks you all for review and comments.\n\n\n\n\n\n\n\n\n\n\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jerrychenhf","name":"jerrychenhf","key":"jerrychenhf","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10445","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10445","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10445","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10445"},"displayName":"Haifeng Chen","active":true,"timeZone":"Asia/Shanghai"},"created":"2014-12-04T01:37:54.053+0000","updated":"2014-12-04T01:37:54.053+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12758827/comment/14234027","id":"14234027","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hitliuyi","name":"hitliuyi","key":"hitliuyi","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yi Liu","active":true,"timeZone":"Asia/Shanghai"},"body":"Hi guys, I take an hour to look at this issue afternoon. Firstly it's a good catch from Jerry.\n\nIn our code, we say for IV, we have two parts: the first 8 bytes, and the second 8 bytes (counter part). \n*1.*\n{code}\n/* NOTE: the IV/counter CTR mode is big-endian.*/\n/* increment counter (128-bit int) by 1 */\nstatic void ctr128_inc(unsigned char *counter) {\n  u32 n=16;\n  u8  c;\n\n  do {\n    --n;\n    c = counter[n];\n    ++c;\n    counter[n] = c;\n    if (c) return;\n  } while (n);\n}\n{code}\nAbove is OpenSSL implementation about counter increment.\nHere the counter is actually the IV (8 bytes IV part and 8 bytes counter part as our code).\nIt's big-endian and handle overflow for whole 16 bytes.\n\n{code}\nIncrement the counter value.\n188\n189    private static void More ...increment(byte[] b) {\n190        int n = b.length - 1;\n191        while ((n >= 0) && (++b[n] == 0)) {\n192            n--;\n193        }\n194    }\n{code}\nThis snippet code is JCE implementation about counter increment.\nHere {{byte[] b}} is the counter, is actually the IV (8 bytes IV part and 8 bytes counter part as our code).\nIt's big-endian and handle overflow for whole 16 bytes.\n\nSo we can see both of them are exactly same and handle the overflow for whole 16 bytes (As Mike said:)). We need increase 1 to the first 8 bytes if overflow happen when we add the second 8 bytes with counter (l+counter), currently we haven't.\n\n*2*.\nAbout the increase 1 to the first 8 bytes when there is overflow for the counter part calculation, I don't like the current patch. It can be implemented more clear.\nSome obvious error in current patch:\n{code}\n+    // Convert the counter to bytes in big-endian byte order\n+    for (int i = 7; i > 0; i--) {\n+      counterBytes[i] = (byte) counter;\n+      counter >>>= 8;\n     }\n{code}\nonly loop 7 times, I wonder how it successes for the test.\n\n*3*.\nFor the compatibility, I think there is no way. For example we call {{calculateIV}} and overflow happens. But when read, we don't call {{calculateIV}} at the same position. The decryption result will be always wrong.\nBut I agree to add new SUITE to reject old DFSClient writing encryption data to new version HDFS...\nSo maybe we can only fix it...","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hitliuyi","name":"hitliuyi","key":"hitliuyi","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yi Liu","active":true,"timeZone":"Asia/Shanghai"},"created":"2014-12-04T08:54:16.043+0000","updated":"2014-12-04T12:08:21.191+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12758827/comment/14234110","id":"14234110","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hitliuyi","name":"hitliuyi","key":"hitliuyi","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yi Liu","active":true,"timeZone":"Asia/Shanghai"},"body":"I agree with [~andrew.wang] that we should fix it ASAP.\n\nAnd as I stated above, there is no way for compatibility, since when we append file, we call {{calculateIV}} and if overflow happens, the encrypted data will wrong, since we may read the data in different cases and can't guarantee we seek to the exact same position and do read.\nSo my suggestion is:\n\n*1.* fix the overflow in a more clear way. \n*2.* Add a new cipher suite as Andrew and Mike said, and reject all old DFSClient writing encryption data to new version HDFS ...","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hitliuyi","name":"hitliuyi","key":"hitliuyi","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yi Liu","active":true,"timeZone":"Asia/Shanghai"},"created":"2014-12-04T10:38:42.754+0000","updated":"2014-12-04T12:07:59.560+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12758827/comment/14234443","id":"14234443","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=andrew.wang","name":"andrew.wang","key":"andrew.wang","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=andrew.wang&avatarId=19230","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andrew.wang&avatarId=19230","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andrew.wang&avatarId=19230","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andrew.wang&avatarId=19230"},"displayName":"Andrew Wang","active":true,"timeZone":"America/Los_Angeles"},"body":"Hi all,\n\nI'd like to try and quantify the likelihood of hitting this overflow situation (hat tip to [~yoderme] who I discussed this with first).\n\nWe're only in the danger zone when the random+counter overflows. The maximum HDFS file size (by default) is 64TB, or 2^46. Divided by 16B (2^4), which is the AES block size, we get 2^42. Now we divide by our random number 2^64, and get a 1 in 2^22 chance of hitting this, or 1 in 4 million.\n\n64TB is a quite pessimistic file size though, something more typical might be 1GB, or 2^30. Doing the same calculation (30-4-64), we get 1 in 2^38, or about 1 in 274 billion, which feels pretty remote.\n\nGiven that even with the old calculateIV, the odds of hitting this are quite small, I think it might be okay to just fix it in place, without even a new CipherSuite.\n\nYi's right that it'd be good to reject old DFSClients. We could even only reject if it's in a potential overflow situation, since we know the IV, file length, and a likely max file size. We could also detect old clients via an optional {{version}} PB field at read and create than hacking on a new CipherSuite. However, even this seems kind of optional if we're okay with the above odds.\n\nThoughts?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=andrew.wang","name":"andrew.wang","key":"andrew.wang","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=andrew.wang&avatarId=19230","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andrew.wang&avatarId=19230","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andrew.wang&avatarId=19230","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andrew.wang&avatarId=19230"},"displayName":"Andrew Wang","active":true,"timeZone":"America/Los_Angeles"},"created":"2014-12-04T18:28:42.543+0000","updated":"2014-12-04T18:28:42.543+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12758827/comment/14234863","id":"14234863","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hitliuyi","name":"hitliuyi","key":"hitliuyi","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yi Liu","active":true,"timeZone":"Asia/Shanghai"},"body":"Andrew, I agree with you and [~yoderme] about the likelihood analysis.\nI think we just need to fix the overflow without other changes.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hitliuyi","name":"hitliuyi","key":"hitliuyi","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yi Liu","active":true,"timeZone":"Asia/Shanghai"},"created":"2014-12-05T00:57:58.552+0000","updated":"2014-12-05T00:57:58.552+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12758827/comment/14234883","id":"14234883","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hitliuyi","name":"hitliuyi","key":"hitliuyi","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yi Liu","active":true,"timeZone":"Asia/Shanghai"},"body":"About converting counter to bytes in the patch, it's correct. My previous comment about this is invalid, I see there is {{counterBytes[0] = (byte) counter;}} after the loop.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hitliuyi","name":"hitliuyi","key":"hitliuyi","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yi Liu","active":true,"timeZone":"Asia/Shanghai"},"created":"2014-12-05T01:18:19.772+0000","updated":"2014-12-05T01:18:19.772+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12758827/comment/14234916","id":"14234916","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hitliuyi","name":"hitliuyi","key":"hitliuyi","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yi Liu","active":true,"timeZone":"Asia/Shanghai"},"body":"Thanks [~jerrychenhf] for good catch and patch.  My comments is as following:\n*1.*\n{code}\npublic static boolean add(byte[] x, byte[] y, byte[] result) \n{code}\nThis function is unnecssary, we just need to add IV (16 bytes) with counter (8 bytes). And we can do it in a loop which is more clear.\n\n*2.*\n{{INT_MASK = 0xff}}, we only have few places using it, I think we don't need to define it. The name is incorrect, it's MASK for byte.\n\n*3. *\n{code}\n+    for (int i = 7; i > 0; i--) {\n+      counterBytes[i] = (byte) counter;\n+      counter >>>= 8;\n     }\n+    counterBytes[0] = (byte) counter;\n{code}\nPlease do it in a loop, then it's more clear. To further simply I think we can merge it with the loop of my comment #1, then the code is super clear.\n\n*4. *\n*a)* In genrally, code line should be < 80 chars. \n*b)* For loop or if, we should enclose using braces.\n*c)* code line indentation is 2 spaces, not 4 or a tab.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hitliuyi","name":"hitliuyi","key":"hitliuyi","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yi Liu","active":true,"timeZone":"Asia/Shanghai"},"created":"2014-12-05T01:54:19.871+0000","updated":"2014-12-05T01:55:29.866+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12758827/comment/14234971","id":"14234971","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jerrychenhf","name":"jerrychenhf","key":"jerrychenhf","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10445","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10445","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10445","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10445"},"displayName":"Haifeng Chen","active":true,"timeZone":"Asia/Shanghai"},"body":"Thanks Yi for comments. Let's make some update and get it committed ASAP.\nThanks you all for analyzing and reviewing.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jerrychenhf","name":"jerrychenhf","key":"jerrychenhf","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10445","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10445","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10445","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10445"},"displayName":"Haifeng Chen","active":true,"timeZone":"Asia/Shanghai"},"created":"2014-12-05T02:45:34.881+0000","updated":"2014-12-05T02:45:34.881+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12758827/comment/14235092","id":"14235092","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jerrychenhf","name":"jerrychenhf","key":"jerrychenhf","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10445","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10445","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10445","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10445"},"displayName":"Haifeng Chen","active":true,"timeZone":"Asia/Shanghai"},"body":"As to Yi's comment:\n#1: The add function is a general implementation of add algorithm of any bytes borrowed from BigInteger. This is more general and clear. If you do want a 16bytes add arithmetic for long type specifically for performance reasons, I am OK with it.\n#2: INT_MASK is not named wrong. INT_MASK is also borrowed from BigInteger from LONG_MASK. In BigInteger, LONG_MASK is used to mask a int to long in unsigned way. \n#3: This algorithm of convert long to 8 bytes is borrowed from HBase util Bytes.java:\n/**\n   * Convert a long value to a byte array using big-endian.\n   *\n   * @param val value to convert\n   * @return the byte array\n   */\n  public static byte[] toBytes(long val) {\n    byte [] b = new byte[8];\n    for (int i = 7; i > 0; i--) {\n      b[i] = (byte) val;\n      val >>>= 8;\n    }\n    b[0] = (byte) val;\n    return b;\n  }\n\n#4: Yes. We need to fix for these code style stuff.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jerrychenhf","name":"jerrychenhf","key":"jerrychenhf","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10445","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10445","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10445","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10445"},"displayName":"Haifeng Chen","active":true,"timeZone":"Asia/Shanghai"},"created":"2014-12-05T05:04:00.462+0000","updated":"2014-12-05T05:04:00.462+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12758827/comment/14235167","id":"14235167","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hitliuyi","name":"hitliuyi","key":"hitliuyi","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yi Liu","active":true,"timeZone":"Asia/Shanghai"},"body":"Thanks [~jerrychenhf].\nAs discussed offline, I update the patch to address my comments and of course the credits are all of yours (you did the good find and posted the initial patch):) . I just refine some parts to make code a bit more simple.\n\nAlso thanks for your reply. Actually for 1#, 3#, their are just improvement, since we only need do additions for two bytes, it can be written in very few codes (see patch). For 2#, well, I see BigInteger uses similar name, so we can keep as it is, and in the new patch I just remove it, since we have only few places using it and we can use it directly as other hadoop code.\n\nFor test, I keep them and just do some refine.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hitliuyi","name":"hitliuyi","key":"hitliuyi","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yi Liu","active":true,"timeZone":"Asia/Shanghai"},"created":"2014-12-05T06:39:15.183+0000","updated":"2014-12-05T06:39:15.183+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12758827/comment/14235183","id":"14235183","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hitliuyi","name":"hitliuyi","key":"hitliuyi","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yi Liu","active":true,"timeZone":"Asia/Shanghai"},"body":"Look again for the patch, we can remove the bytes copy too. Update it.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hitliuyi","name":"hitliuyi","key":"hitliuyi","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yi Liu","active":true,"timeZone":"Asia/Shanghai"},"created":"2014-12-05T06:58:25.112+0000","updated":"2014-12-05T06:58:25.112+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12758827/comment/14235218","id":"14235218","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"body":"{color:green}+1 overall{color}.  Here are the results of testing the latest attachment \n  http://issues.apache.org/jira/secure/attachment/12685260/HADOOP-11343.001.patch\n  against trunk revision 0653918.\n\n    {color:green}+1 @author{color}.  The patch does not contain any @author tags.\n\n    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.\n\n    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.\n\n    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.\n\n    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.\n\n    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.\n\n    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.\n\n    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-common-project/hadoop-common.\n\n    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.\n\nTest results: https://builds.apache.org/job/PreCommit-HADOOP-Build/5156//testReport/\nConsole output: https://builds.apache.org/job/PreCommit-HADOOP-Build/5156//console\n\nThis message is automatically generated.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"created":"2014-12-05T07:34:04.919+0000","updated":"2014-12-05T07:34:04.919+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12758827/comment/14235250","id":"14235250","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"body":"{color:red}-1 overall{color}.  Here are the results of testing the latest attachment \n  http://issues.apache.org/jira/secure/attachment/12685274/HADOOP-11343.002.patch\n  against trunk revision 0653918.\n\n    {color:green}+1 @author{color}.  The patch does not contain any @author tags.\n\n    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.\n\n    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.\n\n    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.\n\n    {color:red}-1 eclipse:eclipse{color}.  The patch failed to build with eclipse:eclipse.\n\n    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.\n\n    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.\n\n    {color:green}+1 core tests{color}.  The patch passed unit tests in .\n\n    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.\n\nTest results: https://builds.apache.org/job/PreCommit-HADOOP-Build/5159//testReport/\nConsole output: https://builds.apache.org/job/PreCommit-HADOOP-Build/5159//console\n\nThis message is automatically generated.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"created":"2014-12-05T08:05:13.912+0000","updated":"2014-12-05T08:05:13.912+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12758827/comment/14236311","id":"14236311","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=andrew.wang","name":"andrew.wang","key":"andrew.wang","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=andrew.wang&avatarId=19230","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andrew.wang&avatarId=19230","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andrew.wang&avatarId=19230","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andrew.wang&avatarId=19230"},"displayName":"Andrew Wang","active":true,"timeZone":"America/Los_Angeles"},"body":"Nice patch, thanks Yi for running with Jerry's patch. I spent some time staring at the bitshifts and it looks right, this is some nice tight code.\n\nCouple comments on the unit test, +1 pending though:\n\n* typo: Calcualted -> Calculated\n* We could use Longs.toByteArray from Guava rather than a new method\n* Could we add a randomized test that's in the danger zone for overflow? This could be as simple as testing with a really big counter and random IV, then with a really big bottom 8 of the IV and a random counter.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=andrew.wang","name":"andrew.wang","key":"andrew.wang","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=andrew.wang&avatarId=19230","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andrew.wang&avatarId=19230","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andrew.wang&avatarId=19230","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andrew.wang&avatarId=19230"},"displayName":"Andrew Wang","active":true,"timeZone":"America/Los_Angeles"},"created":"2014-12-05T23:38:06.249+0000","updated":"2014-12-05T23:38:06.249+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12758827/comment/14236352","id":"14236352","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hitliuyi","name":"hitliuyi","key":"hitliuyi","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yi Liu","active":true,"timeZone":"Asia/Shanghai"},"body":"Thanks Andrew for nice review. \nI will update the unit test, how about I address comment 1, 2 and get the patch in first?\nI also thought we could add a randomized test that's in the danger zone for overflow, I will create a follow-on JIRA  (cover really encryption/decryption with IV calculation overflow) and do it next Monday.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hitliuyi","name":"hitliuyi","key":"hitliuyi","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yi Liu","active":true,"timeZone":"Asia/Shanghai"},"created":"2014-12-06T00:18:37.579+0000","updated":"2014-12-06T00:18:37.579+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12758827/comment/14236356","id":"14236356","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hitliuyi","name":"hitliuyi","key":"hitliuyi","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yi Liu","active":true,"timeZone":"Asia/Shanghai"},"body":"Update the patch. Thanks Jerry for the good catch and initial patch. Thanks Andrew, Mike, Tucu, Haohui for the review and comments.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hitliuyi","name":"hitliuyi","key":"hitliuyi","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yi Liu","active":true,"timeZone":"Asia/Shanghai"},"created":"2014-12-06T00:20:04.331+0000","updated":"2014-12-06T00:20:04.331+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12758827/comment/14236357","id":"14236357","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=andrew.wang","name":"andrew.wang","key":"andrew.wang","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=andrew.wang&avatarId=19230","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andrew.wang&avatarId=19230","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andrew.wang&avatarId=19230","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andrew.wang&avatarId=19230"},"displayName":"Andrew Wang","active":true,"timeZone":"America/Los_Angeles"},"body":"SGTM, I'll commit this after Jenkins comes back :)","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=andrew.wang","name":"andrew.wang","key":"andrew.wang","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=andrew.wang&avatarId=19230","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andrew.wang&avatarId=19230","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andrew.wang&avatarId=19230","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andrew.wang&avatarId=19230"},"displayName":"Andrew Wang","active":true,"timeZone":"America/Los_Angeles"},"created":"2014-12-06T00:21:21.498+0000","updated":"2014-12-06T00:21:21.498+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12758827/comment/14236432","id":"14236432","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"body":"{color:green}+1 overall{color}.  Here are the results of testing the latest attachment \n  http://issues.apache.org/jira/secure/attachment/12685470/HADOOP-11343.003.patch\n  against trunk revision 475c6b4.\n\n    {color:green}+1 @author{color}.  The patch does not contain any @author tags.\n\n    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.\n\n    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.\n\n    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.\n\n    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.\n\n    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.\n\n    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.\n\n    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-common-project/hadoop-common.\n\n    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.\n\nTest results: https://builds.apache.org/job/PreCommit-HADOOP-Build/5170//testReport/\nConsole output: https://builds.apache.org/job/PreCommit-HADOOP-Build/5170//console\n\nThis message is automatically generated.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"created":"2014-12-06T01:13:45.431+0000","updated":"2014-12-06T01:13:45.431+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12758827/comment/14236503","id":"14236503","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=andrew.wang","name":"andrew.wang","key":"andrew.wang","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=andrew.wang&avatarId=19230","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andrew.wang&avatarId=19230","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andrew.wang&avatarId=19230","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andrew.wang&avatarId=19230"},"displayName":"Andrew Wang","active":true,"timeZone":"America/Los_Angeles"},"body":"Committed to trunk and branch-2. Thanks very much to Jerry for finding this bug, thorough explanations, and code contribution. Thanks as well to everyone who reviewed and commented, particularly Yi.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=andrew.wang","name":"andrew.wang","key":"andrew.wang","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=andrew.wang&avatarId=19230","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andrew.wang&avatarId=19230","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andrew.wang&avatarId=19230","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andrew.wang&avatarId=19230"},"displayName":"Andrew Wang","active":true,"timeZone":"America/Los_Angeles"},"created":"2014-12-06T02:22:25.074+0000","updated":"2014-12-06T02:22:25.074+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12758827/comment/14236512","id":"14236512","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hudson","name":"hudson","key":"hudson","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Hudson","active":true,"timeZone":"Etc/UTC"},"body":"FAILURE: Integrated in Hadoop-trunk-Commit #6659 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/6659/])\nHADOOP-11343. Overflow is not properly handled in caclulating final iv for AES CTR. Contributed by Jerry Chen. (wang: rev 0707e4eca906552c960e3b8c4e20d9913145eca6)\n* hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/crypto/TestCryptoCodec.java\n* hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/AesCtrCryptoCodec.java\n* hadoop-common-project/hadoop-common/CHANGES.txt\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hudson","name":"hudson","key":"hudson","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Hudson","active":true,"timeZone":"Etc/UTC"},"created":"2014-12-06T02:32:17.388+0000","updated":"2014-12-06T02:32:17.388+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12758827/comment/14236710","id":"14236710","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jerrychenhf","name":"jerrychenhf","key":"jerrychenhf","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10445","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10445","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10445","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10445"},"displayName":"Haifeng Chen","active":true,"timeZone":"Asia/Shanghai"},"body":"Awesome! Thanks to Andrew for reviewing and get this committed. Thanks to Yi for nice refinement of the patch. Thanks to Mike, Tucu and Haohui for all the comments so that we have the chance to dive deep into the issue and reach a consensus on the solution.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jerrychenhf","name":"jerrychenhf","key":"jerrychenhf","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10445","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10445","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10445","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10445"},"displayName":"Haifeng Chen","active":true,"timeZone":"Asia/Shanghai"},"created":"2014-12-06T09:46:11.607+0000","updated":"2014-12-06T09:46:11.607+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12758827/comment/14236740","id":"14236740","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hudson","name":"hudson","key":"hudson","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Hudson","active":true,"timeZone":"Etc/UTC"},"body":"FAILURE: Integrated in Hadoop-Yarn-trunk-Java8 #27 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk-Java8/27/])\nHADOOP-11343. Overflow is not properly handled in caclulating final iv for AES CTR. Contributed by Jerry Chen. (wang: rev 0707e4eca906552c960e3b8c4e20d9913145eca6)\n* hadoop-common-project/hadoop-common/CHANGES.txt\n* hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/AesCtrCryptoCodec.java\n* hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/crypto/TestCryptoCodec.java\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hudson","name":"hudson","key":"hudson","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Hudson","active":true,"timeZone":"Etc/UTC"},"created":"2014-12-06T11:33:40.989+0000","updated":"2014-12-06T11:33:40.989+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12758827/comment/14236751","id":"14236751","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hudson","name":"hudson","key":"hudson","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Hudson","active":true,"timeZone":"Etc/UTC"},"body":"FAILURE: Integrated in Hadoop-Yarn-trunk #766 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk/766/])\nHADOOP-11343. Overflow is not properly handled in caclulating final iv for AES CTR. Contributed by Jerry Chen. (wang: rev 0707e4eca906552c960e3b8c4e20d9913145eca6)\n* hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/AesCtrCryptoCodec.java\n* hadoop-common-project/hadoop-common/CHANGES.txt\n* hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/crypto/TestCryptoCodec.java\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hudson","name":"hudson","key":"hudson","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Hudson","active":true,"timeZone":"Etc/UTC"},"created":"2014-12-06T11:34:32.993+0000","updated":"2014-12-06T11:34:32.993+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12758827/comment/14236799","id":"14236799","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hudson","name":"hudson","key":"hudson","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Hudson","active":true,"timeZone":"Etc/UTC"},"body":"SUCCESS: Integrated in Hadoop-Hdfs-trunk-Java8 #27 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk-Java8/27/])\nHADOOP-11343. Overflow is not properly handled in caclulating final iv for AES CTR. Contributed by Jerry Chen. (wang: rev 0707e4eca906552c960e3b8c4e20d9913145eca6)\n* hadoop-common-project/hadoop-common/CHANGES.txt\n* hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/crypto/TestCryptoCodec.java\n* hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/AesCtrCryptoCodec.java\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hudson","name":"hudson","key":"hudson","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Hudson","active":true,"timeZone":"Etc/UTC"},"created":"2014-12-06T14:21:12.039+0000","updated":"2014-12-06T14:21:12.039+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12758827/comment/14236810","id":"14236810","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hudson","name":"hudson","key":"hudson","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Hudson","active":true,"timeZone":"Etc/UTC"},"body":"SUCCESS: Integrated in Hadoop-Hdfs-trunk #1959 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/1959/])\nHADOOP-11343. Overflow is not properly handled in caclulating final iv for AES CTR. Contributed by Jerry Chen. (wang: rev 0707e4eca906552c960e3b8c4e20d9913145eca6)\n* hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/crypto/TestCryptoCodec.java\n* hadoop-common-project/hadoop-common/CHANGES.txt\n* hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/AesCtrCryptoCodec.java\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hudson","name":"hudson","key":"hudson","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Hudson","active":true,"timeZone":"Etc/UTC"},"created":"2014-12-06T14:24:25.440+0000","updated":"2014-12-06T14:24:25.440+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12758827/comment/14236833","id":"14236833","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hudson","name":"hudson","key":"hudson","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Hudson","active":true,"timeZone":"Etc/UTC"},"body":"FAILURE: Integrated in Hadoop-Mapreduce-trunk #1981 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/1981/])\nHADOOP-11343. Overflow is not properly handled in caclulating final iv for AES CTR. Contributed by Jerry Chen. (wang: rev 0707e4eca906552c960e3b8c4e20d9913145eca6)\n* hadoop-common-project/hadoop-common/CHANGES.txt\n* hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/crypto/TestCryptoCodec.java\n* hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/AesCtrCryptoCodec.java\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hudson","name":"hudson","key":"hudson","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Hudson","active":true,"timeZone":"Etc/UTC"},"created":"2014-12-06T15:17:33.289+0000","updated":"2014-12-06T15:17:33.289+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12758827/comment/14236845","id":"14236845","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hudson","name":"hudson","key":"hudson","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Hudson","active":true,"timeZone":"Etc/UTC"},"body":"FAILURE: Integrated in Hadoop-Mapreduce-trunk-Java8 #27 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk-Java8/27/])\nHADOOP-11343. Overflow is not properly handled in caclulating final iv for AES CTR. Contributed by Jerry Chen. (wang: rev 0707e4eca906552c960e3b8c4e20d9913145eca6)\n* hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/crypto/TestCryptoCodec.java\n* hadoop-common-project/hadoop-common/CHANGES.txt\n* hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/AesCtrCryptoCodec.java\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hudson","name":"hudson","key":"hudson","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Hudson","active":true,"timeZone":"Etc/UTC"},"created":"2014-12-06T15:24:27.549+0000","updated":"2014-12-06T15:24:27.549+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12758827/comment/14721705","id":"14721705","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=vinodkv","name":"vinodkv","key":"vinodkv","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Vinod Kumar Vavilapalli","active":true,"timeZone":"America/Los_Angeles"},"body":"Pulled this into 2.6.1 after [~ajisakaa] verified that the patch applies cleanly. Ran compilation and TestCryptoCodec before the push.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=vinodkv","name":"vinodkv","key":"vinodkv","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Vinod Kumar Vavilapalli","active":true,"timeZone":"America/Los_Angeles"},"created":"2015-08-30T20:34:45.459+0000","updated":"2015-08-30T20:34:45.459+0000"}],"maxResults":46,"total":46,"startAt":0},"votes":{"self":"https://issues.apache.org/jira/rest/api/2/issue/HADOOP-11343/votes","votes":0,"hasVoted":false},"worklog":{"startAt":0,"maxResults":20,"total":0,"worklogs":[]},"customfield_12311820":"0|i22ybz:"}}