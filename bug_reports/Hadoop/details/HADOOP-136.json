{"expand":"renderedFields,names,schema,operations,editmeta,changelog,versionedRepresentations","id":"12332146","self":"https://issues.apache.org/jira/rest/api/2/issue/12332146","key":"HADOOP-136","fields":{"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype","name":"Bug","subtask":false,"avatarId":21133},"timespent":null,"project":{"self":"https://issues.apache.org/jira/rest/api/2/project/12310240","id":"12310240","key":"HADOOP","name":"Hadoop Common","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/projectavatar?pid=12310240&avatarId=10095","24x24":"https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12310240&avatarId=10095","16x16":"https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12310240&avatarId=10095","32x32":"https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12310240&avatarId=10095"},"projectCategory":{"self":"https://issues.apache.org/jira/rest/api/2/projectCategory/10292","id":"10292","description":"Scalable Distributed Computing","name":"Hadoop"}},"fixVersions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12312025","id":"12312025","description":"","name":"0.6.0","archived":false,"released":true,"releaseDate":"2006-09-08"}],"aggregatetimespent":null,"resolution":{"self":"https://issues.apache.org/jira/rest/api/2/resolution/3","id":"3","description":"The problem is a duplicate of an existing issue.","name":"Duplicate"},"customfield_12312322":null,"customfield_12310220":"2006-04-20T00:43:59.000+0000","customfield_12312520":null,"customfield_12312323":null,"customfield_12312521":"Wed Aug 30 23:33:12 UTC 2006","customfield_12310420":"124654","customfield_12312320":null,"customfield_12310222":"1_*:*_1_*:*_11910080000_*|*_6_*:*_1_*:*_0_*|*_5_*:*_1_*:*_39000","customfield_12312321":null,"resolutiondate":"2006-08-30T23:33:12.000+0000","workratio":-1,"customfield_12312328":null,"customfield_12312329":null,"customfield_12312923":null,"customfield_12312326":null,"customfield_12312920":null,"customfield_12310300":null,"customfield_12312327":null,"customfield_12312921":null,"customfield_12312324":null,"customfield_12312720":null,"customfield_12312325":null,"lastViewed":null,"watches":{"self":"https://issues.apache.org/jira/rest/api/2/issue/HADOOP-136/watchers","watchCount":1,"isWatching":false},"created":"2006-04-15T03:11:52.000+0000","customfield_12310192":null,"customfield_12310191":null,"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/4","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/minor.svg","name":"Minor","id":"4"},"labels":[],"customfield_12312333":null,"customfield_12310230":null,"customfield_12312334":null,"customfield_12313422":"false","customfield_12310310":"1.0","customfield_12312331":null,"customfield_12312332":null,"timeestimate":null,"aggregatetimeoriginalestimate":null,"customfield_12311120":null,"customfield_12312330":null,"versions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12310813","id":"12310813","description":"","name":"0.2.0","archived":false,"released":true,"releaseDate":"2006-05-05"}],"issuelinks":[{"id":"12312760","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12312760","type":{"id":"12310010","name":"Incorporates","inward":"is part of","outward":"incorporates","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/12310010"},"inwardIssue":{"id":"12344354","key":"HADOOP-302","self":"https://issues.apache.org/jira/rest/api/2/issue/12344354","fields":{"summary":"class Text (replacement for class UTF8) was: HADOOP-136","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Done"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.svg","name":"Major","id":"3"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/4","id":"4","description":"An improvement or enhancement to an existing feature or task.","iconUrl":"https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype","name":"Improvement","subtask":false,"avatarId":21140}}}}],"customfield_12312339":null,"assignee":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hairong","name":"hairong","key":"hairong","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Hairong Kuang","active":true,"timeZone":"Etc/UTC"},"customfield_12312337":null,"customfield_12312338":null,"updated":"2006-08-30T23:33:51.000+0000","customfield_12312335":null,"customfield_12312336":null,"status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Done"}},"components":[{"self":"https://issues.apache.org/jira/rest/api/2/component/12310687","id":"12310687","name":"io","description":""}],"timeoriginalestimate":null,"description":"When we feed an overlong string to the UTF8 constructor, two suboptimal things happen.\n\nFirst, we truncate to 0xffff/3 characters on the assumption that every character takes three bytes in UTF8.  This can truncate strings that don't need it, and it can be overoptimistic since there are characters that render as four bytes in UTF8.\n\nSecond, the code doesn't actually handle four-byte characters.\n\nThird, there's a behavioral discontinuity.  If the string is \"discovered\" to be overlong by the arbitrary limit described above, we truncate with a log message, otherwise we signal a RuntimeException.  One feels that both forms of truncation should be treated alike.  However, this issue is concealed by the second issue; the exception will never be thrown because UTF8.utf8Length can't return more than three times the length of its input.\n\nI would recommend changing UTF8.utf8Length to let its caller know how many characters of the input string will actually fit if there's an overflow [perhaps by returning the negative of that number] and doing the truncation accurately as needed.\n\n-dk\n\n","customfield_10010":null,"timetracking":{},"customfield_12312026":null,"customfield_12312023":null,"customfield_12310320":null,"customfield_12312024":null,"customfield_12312340":null,"attachment":[{"self":"https://issues.apache.org/jira/rest/api/2/attachment/12334203","id":"12334203","filename":"largeutf8.patch","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=michel_tourn","name":"michel_tourn","key":"michel_tourn","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michel Tourn","active":true,"timeZone":"America/New_York"},"created":"2006-05-17T03:49:53.000+0000","size":13714,"mimeType":"text/plain","content":"https://issues.apache.org/jira/secure/attachment/12334203/largeutf8.patch"}],"aggregatetimeestimate":null,"customfield_12312341":null,"customfield_12312220":null,"customfield_12312022":null,"customfield_12310921":null,"customfield_12310920":"107335","customfield_12312823":null,"summary":"Overlong UTF8's not handled well","creator":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dking","name":"dking","key":"dking","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Dick King","active":true,"timeZone":"Etc/UTC"},"subtasks":[],"customfield_12310291":null,"reporter":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dking","name":"dking","key":"dking","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Dick King","active":true,"timeZone":"Etc/UTC"},"customfield_12310290":null,"aggregateprogress":{"progress":0,"total":0},"customfield_12311024":null,"environment":null,"customfield_12313520":null,"customfield_12311020":null,"duedate":null,"customfield_12310250":null,"progress":{"progress":0,"total":0},"comment":{"comments":[{"self":"https://issues.apache.org/jira/rest/api/2/issue/12332146/comment/12375169","id":"12375169","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=cutting","name":"cutting","key":"cutting","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Doug Cutting","active":true,"timeZone":"America/Los_Angeles"},"body":"The UTF8 class was originally written to be compatible with Sun's DataOutput.writeUTF:\n\nhttp://java.sun.com/j2se/1.4.2/docs/api/java/io/DataOutput.html#writeUTF(java.lang.String)\n\nLong-term it would be good to support strings with more than 2^16 characters and to support 4-byte UTF8 characters, but this will be hard to do back-compatibly.\n\nShort term, would you or someone else like to submit a patch improving UTF8's handling of long strings?  Some unit tests demonstrating these problems would also be welcome.  Thanks!\n\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=cutting","name":"cutting","key":"cutting","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Doug Cutting","active":true,"timeZone":"America/Los_Angeles"},"created":"2006-04-20T00:43:59.000+0000","updated":"2006-04-20T00:43:59.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12332146/comment/12378179","id":"12378179","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=michel_tourn","name":"michel_tourn","key":"michel_tourn","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michel Tourn","active":true,"timeZone":"America/New_York"},"body":"I need a fix for this. (Serialization of long UTF8 strings)\n\nI have two proposals.\nI am not addressing 4-byte UTF8 characters.\nWhat would others recommend here?\n\n\nOption 1. \n\nAn alternate encoding for potentially long Strings. \nCode must explicitely choose to write and read back the \"large\" version.\n\nTo share as much code as possible, \njust add an optional argument to the UTF8 constructors: boolean large\nIf large mode:\n the length encoding is a VarLenShort (see below)\nelse:\n the length encoding is a short (the current format)\n\nNote about static methods in class o.a.h.io.UTF8:\nThis change requires instance state (for the boolean large flag)\nSo the static versions of the UTF8 methods would ignore this change.\nThis should not be a problem since the code mentions that \nthe static methods are deprecated and will go away,\n   \n   \n   \nOption 2. A semi-backward-compatible change.\n\nIn fact this is the same change as Option 1, \nexcept that we always assume large = true\n\nin UTF8 change this:\n  int bytes = in.readUnsignedShort();\nto this:\n  int bytes = in.readVarLenShort(); \n(and similarly for writes)\n\nThis is word-level variable-length encoding:\nif the highest bit of the length word (16th bit) is set, \nthen there is an extension word for the length. \nTotal payload: 30 bits worth of length, which is enough.\n\nFor short enough Strings, the length encoding is unchanged \nThis is why it is semi-backwards-compatible.\n\nWhat inputs are currently accepted:\n Unicode strings, clipped at 0xffff/3=21845 characters.\n\nWhat would be backwards compatible:\n Strings of encoded length <= 32767 bytes\n This includes: \n  o content with average character length less than 32767/21845 = 1.5 bytes\n  o in partic. all single-byte UTF-8 (ASCII, iso-8859)\n \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=michel_tourn","name":"michel_tourn","key":"michel_tourn","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michel Tourn","active":true,"timeZone":"America/New_York"},"created":"2006-05-06T09:30:06.000+0000","updated":"2006-05-06T09:30:06.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12332146/comment/12378237","id":"12378237","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=sameerp","name":"sameerp","key":"sameerp","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=34061","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34061","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34061","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34061"},"displayName":"Sameer Paranjpye","active":true,"timeZone":"America/Los_Angeles"},"body":"What about simply introducing a new UTF8_String class that does the right thing for the complete range of characters and deprecating the use of the current class?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=sameerp","name":"sameerp","key":"sameerp","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=34061","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34061","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34061","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34061"},"displayName":"Sameer Paranjpye","active":true,"timeZone":"America/Los_Angeles"},"created":"2006-05-07T01:09:56.000+0000","updated":"2006-05-07T01:09:56.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12332146/comment/12378247","id":"12378247","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dking","name":"dking","key":"dking","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Dick King","active":true,"timeZone":"Etc/UTC"},"body":"I would vote for option 2 above.  I'm having difficulty imagining an existing file that has the following three properties:\n\n1: too large to convert if need be with a one-off\n\n2: has UTF8's larger than 32767 bytes encoded but smaller than 21845 characters\n\n3: hasn't already been trashed by a UTF8 that was truncated.\n\nI woul dlike to go after the 4-byters as well.  There's no compatibility issue here.\n\n-dk\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dking","name":"dking","key":"dking","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Dick King","active":true,"timeZone":"Etc/UTC"},"created":"2006-05-07T03:14:48.000+0000","updated":"2006-05-07T03:14:48.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12332146/comment/12378493","id":"12378493","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=cutting","name":"cutting","key":"cutting","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Doug Cutting","active":true,"timeZone":"America/Los_Angeles"},"body":"I think we should aim for 100% back-compatibility.  Perhaps if the 16th bit is set, and the next byte is invalid UTF-8 (e.g., a null) then we can assume the fourth byte is part of the length, otherwise the third and fourth are payload data.  That would permit up to 2^23 bytes.  In a subsequent release we could drop this \"feature\", permitting up to 2^31 bytes.  Could something like that work?\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=cutting","name":"cutting","key":"cutting","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Doug Cutting","active":true,"timeZone":"America/Los_Angeles"},"created":"2006-05-09T01:56:10.000+0000","updated":"2006-05-09T01:56:10.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12332146/comment/12378549","id":"12378549","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=michel_tourn","name":"michel_tourn","key":"michel_tourn","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michel Tourn","active":true,"timeZone":"America/New_York"},"body":"OK, given the need for 100% backward-compatibility and given that I will only use this format internally:\nI will go with Sameer's suggestion: \nhave a separate class org.apache.hadoop.io.LargeUTF8.java\n\nI will just make its length field 4-bytes, rather than var-length:\nOtherwise this would complicate things like the ad-hoc offset computations in UTF8.Comparator.\n\n\nShould I make a TestLargeUTF8 based on TestUTF8?\n\n---\n\nConcerning 4-bytes-long UTF-8 characters:\nit seems that this situation does not occur in \"Java-modified-UTF8\"\n\nThe 4-byte chars are represented as 3+3.\nSee Modified UTF-8 in:\nhttp://java.sun.com/developer/technicalArticles/Intl/Supplementary/\n\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=michel_tourn","name":"michel_tourn","key":"michel_tourn","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michel Tourn","active":true,"timeZone":"America/New_York"},"created":"2006-05-09T08:13:25.000+0000","updated":"2006-05-09T08:13:25.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12332146/comment/12412053","id":"12412053","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=michel_tourn","name":"michel_tourn","key":"michel_tourn","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michel Tourn","active":true,"timeZone":"America/New_York"},"body":"Here is the patch, two new files:\n\norg.apache.hadoop.io.TestLargeUTF8\norg.apache.hadoop.io.LargeUTF8\n\nThe only difference with the UTF8 string format is that \nthe length is stored on 4 bytes rather than 2 bytes.\n\nTestLargeUTF8 tests serialization of larger strings up to 1MB\n\n\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=michel_tourn","name":"michel_tourn","key":"michel_tourn","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michel Tourn","active":true,"timeZone":"America/New_York"},"created":"2006-05-17T03:49:53.000+0000","updated":"2006-05-17T03:49:53.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12332146/comment/12412964","id":"12412964","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=cutting","name":"cutting","key":"cutting","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Doug Cutting","active":true,"timeZone":"America/Los_Angeles"},"body":"If we can't fix the UTF8 class back-compatibly, then I'd prefer we provide a replacement class and deprecate UTF8.  Long-term we don't want two classes around that do almost the same thing.  We could name the new class Text or Chars.  It could use a variable number of bytes to indicate its length, using the 1 byte for lengths less than 127, two-bytes for lengths less than 2^14, etc., then encode the content with UTF-8.  Note that the length should be the number of bytes of content, not the number of encoded characters.  Does this sound reasonable?\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=cutting","name":"cutting","key":"cutting","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Doug Cutting","active":true,"timeZone":"America/Los_Angeles"},"created":"2006-05-24T00:38:07.000+0000","updated":"2006-05-24T00:38:07.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12332146/comment/12412967","id":"12412967","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=milindb","name":"milindb","key":"milindb","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Milind Bhandarkar","active":true,"timeZone":"America/Los_Angeles"},"body":"The static methods for converting integers and longs to zero-encoded representation (similar to what you have suggested) already exists in the record IO Util class.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=milindb","name":"milindb","key":"milindb","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Milind Bhandarkar","active":true,"timeZone":"America/Los_Angeles"},"created":"2006-05-24T00:43:31.000+0000","updated":"2006-05-24T00:43:31.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12332146/comment/12414546","id":"12414546","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=michel_tourn","name":"michel_tourn","key":"michel_tourn","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michel Tourn","active":true,"timeZone":"America/New_York"},"body":"Just to verify, which length-encoding scheme are we using for class Text (aka LargeUTF8)\n\na) The \"UTF-8/Lucene\" scheme? (highest bit of each byte is an extension bit, which I think is what Doug is describing in his last comment) or \nb) the record-IO scheme in o.a.h.record.Utils.java:readInt\n\nEither way, note that:\n\n1. UTF8.java and its successor Text.java need to read the length in two ways: \n  1a.  consume 1+ bytes from a DataInput and \n  1b. parse the length within a byte array at a given offset \n(1.b is used for the \"WritableComparator optimized for UTF8 keys\" ).  \n\no.a.h.record.Utils only supports the DataInput mode.\nIt is not clear to me what is the best way to extend this Utils code when you need to support both reading modes\n\n2 Methods like UTF8's WritableComparator are to be low overhead, in partic. there should be no Object allocation. \nFor the byte array case, the varlen-reader utility needs to be extended to return both: \n the decoded length and the length of the encoded length.\n (so that the caller can do offset += encodedlength)\n   \n3. A String length does not need (small) negative integers.\n\n4. One advantage of a) is that it is standard (or at least well-known and natural) and there are no magic constants  (like -120, -121 -124)\n\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=michel_tourn","name":"michel_tourn","key":"michel_tourn","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michel Tourn","active":true,"timeZone":"America/New_York"},"created":"2006-06-03T07:49:54.000+0000","updated":"2006-06-03T07:49:54.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12332146/comment/12419627","id":"12419627","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=michel_tourn","name":"michel_tourn","key":"michel_tourn","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michel Tourn","active":true,"timeZone":"America/New_York"},"body":"FYI:\nsome info on Java-modified UTF-8 \n(this was previously posted)\nSee Modified UTF-8 in: \nhttp://java.sun.com/developer/technicalArticles/Intl/Supplementary/ \n\nAs far as i understand:\nThe bottom-line is that supplementary UTF-8 characters:\no would be encoded as 4+ bytes in non-Java programs\no but they are already encoded as two Java char-s (i.e. two-bytes) when our converter code sees them.\no and so the conversion to UTF-8 proceeds on these two chars independently.\no So all the existing Java UTF-8 code that only handles 1..3-bytewide chars is already compliant with Java-modified UTF-8.\n\nWhat do the java-i18n experts think?\n\n---\nEarlier comment:\n\nConcerning 4-bytes-long UTF-8 characters: \nit seems that this situation does not occur in \"Java-modified-UTF8\" \n\nThe 4-byte chars are represented as 3+3. \nSee Modified UTF-8 in: \nhttp://java.sun.com/developer/technicalArticles/Intl/Supplementary/ \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=michel_tourn","name":"michel_tourn","key":"michel_tourn","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michel Tourn","active":true,"timeZone":"America/New_York"},"created":"2006-07-07T07:11:43.000+0000","updated":"2006-07-07T07:11:43.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12332146/comment/12431746","id":"12431746","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=owen.omalley","name":"owen.omalley","key":"owen.omalley","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=owen.omalley&avatarId=29697","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=owen.omalley&avatarId=29697","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=owen.omalley&avatarId=29697","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=owen.omalley&avatarId=29697"},"displayName":"Owen O'Malley","active":true,"timeZone":"America/Los_Angeles"},"body":"this was fixed in 0.5","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=owen.omalley","name":"owen.omalley","key":"owen.omalley","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=owen.omalley&avatarId=29697","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=owen.omalley&avatarId=29697","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=owen.omalley&avatarId=29697","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=owen.omalley&avatarId=29697"},"displayName":"Owen O'Malley","active":true,"timeZone":"America/Los_Angeles"},"created":"2006-08-30T23:33:12.000+0000","updated":"2006-08-30T23:33:12.000+0000"}],"maxResults":12,"total":12,"startAt":0},"votes":{"self":"https://issues.apache.org/jira/rest/api/2/issue/HADOOP-136/votes","votes":0,"hasVoted":false},"worklog":{"startAt":0,"maxResults":20,"total":0,"worklogs":[]},"customfield_12311820":"0|i0iq6f:"}}