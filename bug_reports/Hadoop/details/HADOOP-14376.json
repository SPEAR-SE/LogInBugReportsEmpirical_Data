{"expand":"renderedFields,names,schema,operations,editmeta,changelog,versionedRepresentations","id":"13068770","self":"https://issues.apache.org/jira/rest/api/2/issue/13068770","key":"HADOOP-14376","fields":{"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype","name":"Bug","subtask":false,"avatarId":21133},"timespent":null,"project":{"self":"https://issues.apache.org/jira/rest/api/2/project/12310240","id":"12310240","key":"HADOOP","name":"Hadoop Common","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/projectavatar?pid=12310240&avatarId=10095","24x24":"https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12310240&avatarId=10095","16x16":"https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12310240&avatarId=10095","32x32":"https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12310240&avatarId=10095"},"projectCategory":{"self":"https://issues.apache.org/jira/rest/api/2/projectCategory/10292","id":"10292","description":"Scalable Distributed Computing","name":"Hadoop"}},"fixVersions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12334219","id":"12334219","description":"2.9.0 release","name":"2.9.0","archived":false,"released":true,"releaseDate":"2017-11-17"},{"self":"https://issues.apache.org/jira/rest/api/2/version/12335546","id":"12335546","description":"2.7.4 release","name":"2.7.4","archived":false,"released":true,"releaseDate":"2017-08-04"},{"self":"https://issues.apache.org/jira/rest/api/2/version/12339180","id":"12339180","name":"3.0.0-alpha4","archived":false,"released":true,"releaseDate":"2017-07-07"},{"self":"https://issues.apache.org/jira/rest/api/2/version/12340354","id":"12340354","name":"2.8.2","archived":false,"released":true,"releaseDate":"2017-10-24"}],"aggregatetimespent":null,"resolution":{"self":"https://issues.apache.org/jira/rest/api/2/resolution/1","id":"1","description":"A fix for this issue is checked into the tree and tested.","name":"Fixed"},"customfield_12312322":null,"customfield_12310220":"2017-05-03T20:12:41.519+0000","customfield_12312520":null,"customfield_12312323":null,"customfield_12312521":"Tue Apr 24 20:49:50 UTC 2018","customfield_12310420":"9223372036854775807","customfield_12312320":null,"customfield_12310222":"1_*:*_1_*:*_433453955_*|*_5_*:*_1_*:*_0_*|*_10002_*:*_1_*:*_374655974","customfield_12312321":null,"resolutiondate":"2017-05-12T22:07:32.296+0000","workratio":-1,"customfield_12312328":null,"customfield_12312329":null,"customfield_12312923":null,"customfield_12312326":null,"customfield_12312920":null,"customfield_12310300":null,"customfield_12312327":null,"customfield_12312921":null,"customfield_12312324":null,"customfield_12312720":null,"customfield_12312325":null,"lastViewed":null,"watches":{"self":"https://issues.apache.org/jira/rest/api/2/issue/HADOOP-14376/watchers","watchCount":8,"isWatching":false},"created":"2017-05-03T13:39:02.418+0000","customfield_12310192":null,"customfield_12310191":[{"self":"https://issues.apache.org/jira/rest/api/2/customFieldOption/10343","value":"Reviewed","id":"10343"}],"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.svg","name":"Major","id":"3"},"labels":[],"customfield_12312333":null,"customfield_12310230":null,"customfield_12312334":null,"customfield_12313422":"false","customfield_12310310":"6.0","customfield_12312331":null,"customfield_12312332":null,"timeestimate":null,"aggregatetimeoriginalestimate":null,"customfield_12311120":null,"customfield_12312330":null,"versions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12327583","id":"12327583","description":"2.7.0 release","name":"2.7.0","archived":false,"released":true,"releaseDate":"2015-04-20"}],"issuelinks":[],"customfield_12312339":null,"assignee":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=eliac","name":"eliac","key":"eliac","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Eli Acherkan","active":true,"timeZone":"Asia/Jerusalem"},"customfield_12312337":null,"customfield_12312338":null,"updated":"2018-04-24T20:49:50.790+0000","customfield_12312335":null,"customfield_12312336":null,"status":{"self":"https://issues.apache.org/jira/rest/api/2/status/5","description":"A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/resolved.png","name":"Resolved","id":"5","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Done"}},"components":[{"self":"https://issues.apache.org/jira/rest/api/2/component/12330961","id":"12330961","name":"common"},{"self":"https://issues.apache.org/jira/rest/api/2/component/12310687","id":"12310687","name":"io","description":""}],"timeoriginalestimate":null,"description":"Opening and closing a large number of bzip2-compressed input streams causes the process to be killed on OutOfMemory when using the native bzip2 library.\n\nOur initial analysis suggests that this can be caused by {{DecompressorStream}} overriding the {{close()}} method, and therefore skipping the line from its parent: {{CodecPool.returnDecompressor(trackedDecompressor)}}. When the decompressor object is a {{Bzip2Decompressor}}, its native {{end()}} method is never called, and the allocated memory isn't freed.\n\nIf this analysis is correct, the simplest way to fix this bug would be to replace {{in.close()}} with {{super.close()}} in {{DecompressorStream}}.","customfield_10010":null,"timetracking":{},"customfield_12312026":null,"customfield_12312023":null,"customfield_12310320":null,"customfield_12312024":null,"customfield_12312340":null,"attachment":[{"self":"https://issues.apache.org/jira/rest/api/2/attachment/12866177","id":"12866177","filename":"Bzip2MemoryTester.java","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=eliac","name":"eliac","key":"eliac","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Eli Acherkan","active":true,"timeZone":"Asia/Jerusalem"},"created":"2017-05-03T13:48:13.719+0000","size":832,"mimeType":"text/x-java-source","content":"https://issues.apache.org/jira/secure/attachment/12866177/Bzip2MemoryTester.java"},{"self":"https://issues.apache.org/jira/rest/api/2/attachment/12866684","id":"12866684","filename":"HADOOP-14376.001.patch","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=eliac","name":"eliac","key":"eliac","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Eli Acherkan","active":true,"timeZone":"Asia/Jerusalem"},"created":"2017-05-05T21:52:39.275+0000","size":9944,"mimeType":"text/plain","content":"https://issues.apache.org/jira/secure/attachment/12866684/HADOOP-14376.001.patch"},{"self":"https://issues.apache.org/jira/rest/api/2/attachment/12867001","id":"12867001","filename":"HADOOP-14376.002.patch","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=eliac","name":"eliac","key":"eliac","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Eli Acherkan","active":true,"timeZone":"Asia/Jerusalem"},"created":"2017-05-08T23:30:23.575+0000","size":12284,"mimeType":"text/plain","content":"https://issues.apache.org/jira/secure/attachment/12867001/HADOOP-14376.002.patch"},{"self":"https://issues.apache.org/jira/rest/api/2/attachment/12867034","id":"12867034","filename":"HADOOP-14376.003.patch","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=eliac","name":"eliac","key":"eliac","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Eli Acherkan","active":true,"timeZone":"Asia/Jerusalem"},"created":"2017-05-09T04:54:04.678+0000","size":12293,"mimeType":"text/plain","content":"https://issues.apache.org/jira/secure/attachment/12867034/HADOOP-14376.003.patch"},{"self":"https://issues.apache.org/jira/rest/api/2/attachment/12867410","id":"12867410","filename":"HADOOP-14376.004.patch","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=eliac","name":"eliac","key":"eliac","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Eli Acherkan","active":true,"timeZone":"Asia/Jerusalem"},"created":"2017-05-10T19:59:03.769+0000","size":12210,"mimeType":"text/plain","content":"https://issues.apache.org/jira/secure/attachment/12867410/HADOOP-14376.004.patch"},{"self":"https://issues.apache.org/jira/rest/api/2/attachment/12866178","id":"12866178","filename":"log4j.properties","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=eliac","name":"eliac","key":"eliac","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Eli Acherkan","active":true,"timeZone":"Asia/Jerusalem"},"created":"2017-05-03T13:48:13.725+0000","size":276,"mimeType":"application/octet-stream","content":"https://issues.apache.org/jira/secure/attachment/12866178/log4j.properties"}],"aggregatetimeestimate":null,"customfield_12312341":null,"customfield_12312220":null,"customfield_12312022":null,"customfield_12310921":null,"customfield_12310920":"9223372036854775807","customfield_12312823":null,"summary":"Memory leak when reading a compressed file using the native library","creator":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=eliac","name":"eliac","key":"eliac","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Eli Acherkan","active":true,"timeZone":"Asia/Jerusalem"},"subtasks":[],"customfield_12310291":null,"reporter":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=eliac","name":"eliac","key":"eliac","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Eli Acherkan","active":true,"timeZone":"Asia/Jerusalem"},"customfield_12310290":null,"aggregateprogress":{"progress":0,"total":0},"customfield_12311024":null,"environment":null,"customfield_12313520":null,"customfield_12311020":null,"duedate":null,"customfield_12310250":null,"progress":{"progress":0,"total":0},"comment":{"comments":[{"self":"https://issues.apache.org/jira/rest/api/2/issue/13068770/comment/15994903","id":"15994903","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=eliac","name":"eliac","key":"eliac","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Eli Acherkan","active":true,"timeZone":"Asia/Jerusalem"},"body":"Attached a test case class that opens and closes a stream in a loop:\n{code:title=Bzip2MemoryTester.java}\nfor (int i = 0; i < iterations; i++) {\n\ttry (InputStream stream = codec.createInputStream(fileSystem.open(inputFile))) {\n\t\tSystem.out.println(stream.read());\n\t}\n}\n{code}\n\nRunning the loop for 100000 times causes the process to be killed by the OS on my machine before reaching 100000 lines of output. Monitoring the process's RSS shows that it grows significantly.\n\nAfter placing the attached {{Bzip2MemoryTester.java}} and {{log4j.properties}} files in an arbitrary folder and setting the {{HADOOP_HOME}} environment variable, the following can be used to run the test case:\n\n{noformat}\necho 'a' > test && bzip2 test\n\njavac -cp $HADOOP_HOME/share/hadoop/common/*:$HADOOP_HOME/share/hadoop/common/lib/* Bzip2MemoryTester.java\n\njava -Xmx128m -cp .:$HADOOP_HOME/share/hadoop/common/*:$HADOOP_HOME/share/hadoop/common/lib/* -Djava.library.path=$HADOOP_HOME/lib/native Bzip2MemoryTester test.bz2 100000 > out.txt 2> err.txt &\n\nexport PID=$(jps | grep Bzip2MemoryTester | cut -d' ' -f1); while [ -a /proc/${PID} ]; do grep VmRSS /proc/${PID}/status; sleep 2; done\n\ngrep '^97$' out.txt | wc -l out.txt\n{noformat}","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=eliac","name":"eliac","key":"eliac","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Eli Acherkan","active":true,"timeZone":"Asia/Jerusalem"},"created":"2017-05-03T13:46:25.204+0000","updated":"2017-05-03T13:46:25.204+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13068770/comment/15994906","id":"15994906","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=eliac","name":"eliac","key":"eliac","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Eli Acherkan","active":true,"timeZone":"Asia/Jerusalem"},"body":"Test case","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=eliac","name":"eliac","key":"eliac","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Eli Acherkan","active":true,"timeZone":"Asia/Jerusalem"},"created":"2017-05-03T13:48:13.729+0000","updated":"2017-05-03T13:48:13.729+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13068770/comment/15995567","id":"15995567","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jlowe","name":"jlowe","key":"jlowe","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jason Lowe","active":true,"timeZone":"America/Chicago"},"body":"Thanks for the report, [~eliac]!  This problem isn't specific to bzip2, as I was able to reproduce the problem with both the gzip and zstandard codecs.  I updated the summary accordingly.\n\nThis looks like it may have been an accidental oversight when HADOOP-10591 was added.  Before that change the DecompressorStream close method was a superset of what CompressionInputStream did.\n\nIt looks like LineRecordReader and some other users of codecs aren't susceptible to this because they explicitly get the decompressor from the codec pool, create the input stream, then explicitly return the decompressor to the pool afterwards.  I believe it's safe to try to return the same decompressor to the pool multiple times, so we should be able to safely update the DecompressorStream to call super.close() rather than in.close().  Also should be straightforward to write a unit test, using CodecPool.getLeasedDecompressorsCount to verify the codec is not being returned to the pool before the change and is afterwards.\n\n[~eliac] are you interested in taking a crack at the patch?  If not then I should be able to put up something later this week.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jlowe","name":"jlowe","key":"jlowe","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jason Lowe","active":true,"timeZone":"America/Chicago"},"created":"2017-05-03T20:12:41.519+0000","updated":"2017-05-03T20:12:41.519+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13068770/comment/15996096","id":"15996096","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=eliac","name":"eliac","key":"eliac","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Eli Acherkan","active":true,"timeZone":"Asia/Jerusalem"},"body":"Thanks [~jlowe]! Absolutely, I'll prepare a patch. I wasn't sure how to write a unit test that checks off-heap memory for a leak, but using CodecPool.getLeasedDecompressorsCount is much simpler.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=eliac","name":"eliac","key":"eliac","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Eli Acherkan","active":true,"timeZone":"Asia/Jerusalem"},"created":"2017-05-04T03:03:19.546+0000","updated":"2017-05-04T03:03:19.546+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13068770/comment/15999015","id":"15999015","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=eliac","name":"eliac","key":"eliac","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Eli Acherkan","active":true,"timeZone":"Asia/Jerusalem"},"body":"Patch attached. First time contributor, I hope I followed the guidelines correctly.\n\nFor testing, I enhanced an existing unit test - TestCodec.codecTest(), since it's already invoked for different types of native and pure-Java codecs. I added an assertion that the number of leased decompressors after the test equals to the one before it. This exposed a similar bug in BZip2Codec.BZip2CompressionInputStream.close(), which also doesn't call its super.close() method, and thus doesn't return the decompressor to the pool.\n\nAdding an assertion for compressors as well as decompressors uncovered a similar issue in CompressorStream.close(), GzipCodec.GzipOutputStream.close(), and BZip2Codec.BZip2CompressionOutputStream.close(), which I attempted to fix as well.\n\nRegarding BZip2Codec.BZip2CompressionOutputStream.close(), I removed the overriding method altogether, because the superclass's close() method invokes finish(). The finish() method handles internalReset() if needed, and also calls output.finish(), which eliminates the need to call output.flush() or output.close().\n\nTesting GzipCodec without native libraries showed that CodecPool erroneously calls updateLeaseCounts even for compressors/decompressors that are null, or ones with the @DoNotPool annotation. I added a condition that checks for that.\n\nThe memory leak only manifests when using the native libraries. In Eclipse I achieved this by setting java.library.path in the unit test launcher. Seeing the usage of assumeTrue(isNative*Loaded()), I understand that native-related tests are covered in Maven builds as well.\n\nLooking forward to a code review.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=eliac","name":"eliac","key":"eliac","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Eli Acherkan","active":true,"timeZone":"Asia/Jerusalem"},"created":"2017-05-05T21:52:39.280+0000","updated":"2017-05-05T21:52:39.280+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13068770/comment/16000907","id":"16000907","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"body":"| (x) *{color:red}-1 overall{color}* |\n\\\\\n\\\\\n|| Vote || Subsystem || Runtime || Comment ||\n| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue}  0m 25s{color} | {color:blue} Docker mode activated. {color} |\n| {color:green}+1{color} | {color:green} @author {color} | {color:green}  0m  0s{color} | {color:green} The patch does not contain any @author tags. {color} |\n| {color:green}+1{color} | {color:green} test4tests {color} | {color:green}  0m  0s{color} | {color:green} The patch appears to include 1 new or modified test files. {color} |\n| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 17m 21s{color} | {color:green} trunk passed {color} |\n| {color:green}+1{color} | {color:green} compile {color} | {color:green} 19m 50s{color} | {color:green} trunk passed {color} |\n| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  0m 42s{color} | {color:green} trunk passed {color} |\n| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  1m 12s{color} | {color:green} trunk passed {color} |\n| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green}  0m 20s{color} | {color:green} trunk passed {color} |\n| {color:red}-1{color} | {color:red} findbugs {color} | {color:red}  1m 49s{color} | {color:red} hadoop-common-project/hadoop-common in trunk has 19 extant Findbugs warnings. {color} |\n| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  1m  2s{color} | {color:green} trunk passed {color} |\n| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green}  0m 57s{color} | {color:green} the patch passed {color} |\n| {color:green}+1{color} | {color:green} compile {color} | {color:green} 16m 50s{color} | {color:green} the patch passed {color} |\n| {color:green}+1{color} | {color:green} javac {color} | {color:green} 16m 50s{color} | {color:green} the patch passed {color} |\n| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  0m 42s{color} | {color:green} hadoop-common-project/hadoop-common: The patch generated 0 new + 112 unchanged - 6 fixed = 112 total (was 118) {color} |\n| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  1m 19s{color} | {color:green} the patch passed {color} |\n| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green}  0m 23s{color} | {color:green} the patch passed {color} |\n| {color:green}+1{color} | {color:green} whitespace {color} | {color:green}  0m  0s{color} | {color:green} The patch has no whitespace issues. {color} |\n| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  2m  2s{color} | {color:green} the patch passed {color} |\n| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  1m  1s{color} | {color:green} the patch passed {color} |\n| {color:red}-1{color} | {color:red} unit {color} | {color:red}  8m  1s{color} | {color:red} hadoop-common in the patch failed. {color} |\n| {color:green}+1{color} | {color:green} asflicense {color} | {color:green}  0m 34s{color} | {color:green} The patch does not generate ASF License warnings. {color} |\n| {color:black}{color} | {color:black} {color} | {color:black} 76m 45s{color} | {color:black} {color} |\n\\\\\n\\\\\n|| Reason || Tests ||\n| Failed junit tests | hadoop.net.TestDNS |\n\\\\\n\\\\\n|| Subsystem || Report/Notes ||\n| Docker |  Image:yetus/hadoop:14b5c93 |\n| JIRA Issue | HADOOP-14376 |\n| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12866684/HADOOP-14376.001.patch |\n| Optional Tests |  asflicense  compile  javac  javadoc  mvninstall  mvnsite  unit  findbugs  checkstyle  |\n| uname | Linux 642da560dc51 3.13.0-116-generic #163-Ubuntu SMP Fri Mar 31 14:13:22 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux |\n| Build tool | maven |\n| Personality | /testptch/hadoop/patchprocess/precommit/personality/provided.sh |\n| git revision | trunk / cef2815 |\n| Default Java | 1.8.0_131 |\n| findbugs | v3.1.0-RC1 |\n| findbugs | https://builds.apache.org/job/PreCommit-HADOOP-Build/12267/artifact/patchprocess/branch-findbugs-hadoop-common-project_hadoop-common-warnings.html |\n| unit | https://builds.apache.org/job/PreCommit-HADOOP-Build/12267/artifact/patchprocess/patch-unit-hadoop-common-project_hadoop-common.txt |\n|  Test Results | https://builds.apache.org/job/PreCommit-HADOOP-Build/12267/testReport/ |\n| modules | C: hadoop-common-project/hadoop-common U: hadoop-common-project/hadoop-common |\n| Console output | https://builds.apache.org/job/PreCommit-HADOOP-Build/12267/console |\n| Powered by | Apache Yetus 0.5.0-SNAPSHOT   http://yetus.apache.org |\n\n\nThis message was automatically generated.\n\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"created":"2017-05-08T15:25:13.226+0000","updated":"2017-05-08T15:25:13.226+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13068770/comment/16001020","id":"16001020","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jlowe","name":"jlowe","key":"jlowe","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jason Lowe","active":true,"timeZone":"America/Chicago"},"body":"Thanks for the patch!  The test failure is unrelated.\n\nbq. Regarding BZip2Codec.BZip2CompressionOutputStream.close(), I removed the overriding method altogether, because the superclass's close() method invokes finish(). The finish() method handles internalReset() if needed, and also calls output.finish(), which eliminates the need to call output.flush() or output.close().\n\nI'm not sure this is a net good change.  Other maintainers will come along and see that BZip2CompressionOutputStream never calls close() on one of its private member streams which is usually a bug.  Even if the close() ends up being redundant today that doesn't mean it always will.  The root cause for this JIRA is a great example.  Also I'm not seeing how the superclass's finish() method ever ends up closing the out stream.  I see it write some final bytes and sets it to null, which in turn _prevents_ the close() method from trying to call out.close(), so I'm wondering how the output stream normally gets closed.\n\nFor the BZip2CompressionInputStream change, if input.close() throws then we won't call super.close() and we could leak some resources and won't return the codec to the pool.\n\nFor the CompressorStream patch:\n{code}\n   public void close() throws IOException {\n     if (!closed) {\n       try {\n-        finish();\n+        super.close();\n       }\n       finally {\n-        out.close();\n         closed = true;\n       }\n     }\n{code}\n\nThis is subtly different that the previous code because finish() can throw.  In the old code, finish() could throw and out.close() would still be called but now we'll skip calling out.close() but still set closed=true so we can't retry the close.  This change was done by HADOOP-10526 but it looks like they missed the same change for DecompressorStream.  Similarly the CompressionInputStream/CompressionOutputStream code won't return the codec to the pool if finish() throws or the underlying stream's close() throws.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jlowe","name":"jlowe","key":"jlowe","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jason Lowe","active":true,"timeZone":"America/Chicago"},"created":"2017-05-08T16:20:05.099+0000","updated":"2017-05-08T16:20:05.099+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13068770/comment/16001787","id":"16001787","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=eliac","name":"eliac","key":"eliac","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Eli Acherkan","active":true,"timeZone":"Asia/Jerusalem"},"body":"Thanks [~jlowe]. Those are excellent points, I completely agree that the patch introduced subtle differences if some of the streams throw exceptions upon close(). My previous reasoning was that in this case something's probably gone horribly and irrevocably wrong anyway. But following your comments, I prepared a more defensive patch, in which even if some of the close() or finish() methods throw exceptions we still try to close/recover what we can. The price of this is assuming that it's okay to call the close() method of a stream multiple times.\n\n*BZip2CompressionOutputStream*:\nbq. Other maintainers will come along and see that BZip2CompressionOutputStream never calls close() on one of its private member streams which is usually a bug. Even if the close() ends up being redundant today that doesn't mean it always will. The root cause for this JIRA is a great example.\nIn patch 002 I put back the BZip2CompressionOutputStream.close() method with a call to super.close() and some explanatory documentation. It still seems to me that calling super.close() should be sufficient, let me try to explain why.\n\nbq. I'm not seeing how the superclass's finish() method ever ends up closing the out stream. I see it write some final bytes and sets it to null, which in turn prevents the close() method from trying to call out.close(), so I'm wondering how the output stream normally gets closed.\nMy understanding is that the output stream _does_ get closed, thanks to the out.close() call in CompressionOutputStream.close(). The {{out}} data member of CBZip2OutputStream is indeed nullified, but the {{out}} data member of CompressionOutputStream should still reference the actual stream object.\n\nMy reasoning was: the only difference between BZip2CompressionOutputStream.finish() and close() is that BZip2CompressionOutputStream.finish() calls output.finish(), whereas BZip2CompressionOutputStream.close() calls output.flush() and output.close(). Changing BZip2CompressionOutputStream.close() to super.close() will mean that we invoke finish() only instead of flush() and close(). Looking at CBZip2OutputStream (which can be the only class of the {{output}} data member in the current implementation), it seems to me that it's okay to invoke finish() instead of flush() + close(), because the only difference between them is calling out.flush() + out.close(). As I said above, out.close() will be called anyway by CompressionOutputStream.close(), and I'm assuming that any reasonable stream calls flush() internally on close().\n\n*BZip2CompressionInputStream*:\nIn BZip2CompressionInputStream, patch 002 puts the call to super.close() in a finally block. This preserves the previous logic (set needsReset to true only if input.close() didn't throw) while ensuring that super.close() will unconditionally close the {{in}} stream and return the trackedDecompressor to the pool.\n\n*CompressorStream/CompressionInput/OutputStream*:\nbq. This is subtly different that the previous code because finish() can throw. In the old code, finish() could throw and out.close() would still be called but now we'll skip calling out.close() but still set closed=true so we can't retry the close. (...) Similarly the CompressionInputStream/CompressionOutputStream code won't return the codec to the pool if finish() throws or the underlying stream's close() throws.\nIn patch 002 I wrapped each of CompressionInput/OutputStream.close()'s internal steps in try/finally. (For CompressionOutputStream.close() this leaves the corner case of both finish() _and_ out.close() throwing an exception each, but I think it's reasonable that only one of them will be propagated since it's a doomed stream anyway.) This brings the behavior of the patched CompressorStream.close() to what it was before my changes: if finish() throws, out.close() is still called.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=eliac","name":"eliac","key":"eliac","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Eli Acherkan","active":true,"timeZone":"Asia/Jerusalem"},"created":"2017-05-08T23:30:23.582+0000","updated":"2017-05-08T23:30:23.582+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13068770/comment/16001859","id":"16001859","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"body":"| (x) *{color:red}-1 overall{color}* |\n\\\\\n\\\\\n|| Vote || Subsystem || Runtime || Comment ||\n| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue}  0m 18s{color} | {color:blue} Docker mode activated. {color} |\n| {color:green}+1{color} | {color:green} @author {color} | {color:green}  0m  0s{color} | {color:green} The patch does not contain any @author tags. {color} |\n| {color:green}+1{color} | {color:green} test4tests {color} | {color:green}  0m  0s{color} | {color:green} The patch appears to include 1 new or modified test files. {color} |\n| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 13m 18s{color} | {color:green} trunk passed {color} |\n| {color:green}+1{color} | {color:green} compile {color} | {color:green} 14m 50s{color} | {color:green} trunk passed {color} |\n| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  0m 32s{color} | {color:green} trunk passed {color} |\n| {color:red}-1{color} | {color:red} mvnsite {color} | {color:red}  0m 27s{color} | {color:red} hadoop-common in trunk failed. {color} |\n| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green}  0m 21s{color} | {color:green} trunk passed {color} |\n| {color:red}-1{color} | {color:red} findbugs {color} | {color:red}  1m 41s{color} | {color:red} hadoop-common-project/hadoop-common in trunk has 19 extant Findbugs warnings. {color} |\n| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 44s{color} | {color:green} trunk passed {color} |\n| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green}  0m 37s{color} | {color:green} the patch passed {color} |\n| {color:green}+1{color} | {color:green} compile {color} | {color:green} 12m 49s{color} | {color:green} the patch passed {color} |\n| {color:green}+1{color} | {color:green} javac {color} | {color:green} 12m 49s{color} | {color:green} the patch passed {color} |\n| {color:orange}-0{color} | {color:orange} checkstyle {color} | {color:orange}  0m 34s{color} | {color:orange} hadoop-common-project/hadoop-common: The patch generated 1 new + 118 unchanged - 6 fixed = 119 total (was 124) {color} |\n| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  0m 57s{color} | {color:green} the patch passed {color} |\n| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green}  0m 16s{color} | {color:green} the patch passed {color} |\n| {color:red}-1{color} | {color:red} whitespace {color} | {color:red}  0m  0s{color} | {color:red} The patch 3 line(s) with tabs. {color} |\n| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  1m 26s{color} | {color:green} the patch passed {color} |\n| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 42s{color} | {color:green} the patch passed {color} |\n| {color:red}-1{color} | {color:red} unit {color} | {color:red}  6m 50s{color} | {color:red} hadoop-common in the patch failed. {color} |\n| {color:green}+1{color} | {color:green} asflicense {color} | {color:green}  0m 25s{color} | {color:green} The patch does not generate ASF License warnings. {color} |\n| {color:black}{color} | {color:black} {color} | {color:black} 58m 34s{color} | {color:black} {color} |\n\\\\\n\\\\\n|| Reason || Tests ||\n| Failed junit tests | hadoop.net.TestDNS |\n\\\\\n\\\\\n|| Subsystem || Report/Notes ||\n| Docker |  Image:yetus/hadoop:14b5c93 |\n| JIRA Issue | HADOOP-14376 |\n| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12867001/HADOOP-14376.002.patch |\n| Optional Tests |  asflicense  compile  javac  javadoc  mvninstall  mvnsite  unit  findbugs  checkstyle  |\n| uname | Linux e35f1d93bd5c 4.4.0-43-generic #63-Ubuntu SMP Wed Oct 12 13:48:03 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux |\n| Build tool | maven |\n| Personality | /testptch/hadoop/patchprocess/precommit/personality/provided.sh |\n| git revision | trunk / 1769b12 |\n| Default Java | 1.8.0_121 |\n| mvnsite | https://builds.apache.org/job/PreCommit-HADOOP-Build/12272/artifact/patchprocess/branch-mvnsite-hadoop-common-project_hadoop-common.txt |\n| findbugs | v3.1.0-RC1 |\n| findbugs | https://builds.apache.org/job/PreCommit-HADOOP-Build/12272/artifact/patchprocess/branch-findbugs-hadoop-common-project_hadoop-common-warnings.html |\n| checkstyle | https://builds.apache.org/job/PreCommit-HADOOP-Build/12272/artifact/patchprocess/diff-checkstyle-hadoop-common-project_hadoop-common.txt |\n| whitespace | https://builds.apache.org/job/PreCommit-HADOOP-Build/12272/artifact/patchprocess/whitespace-tabs.txt |\n| unit | https://builds.apache.org/job/PreCommit-HADOOP-Build/12272/artifact/patchprocess/patch-unit-hadoop-common-project_hadoop-common.txt |\n|  Test Results | https://builds.apache.org/job/PreCommit-HADOOP-Build/12272/testReport/ |\n| modules | C: hadoop-common-project/hadoop-common U: hadoop-common-project/hadoop-common |\n| Console output | https://builds.apache.org/job/PreCommit-HADOOP-Build/12272/console |\n| Powered by | Apache Yetus 0.5.0-SNAPSHOT   http://yetus.apache.org |\n\n\nThis message was automatically generated.\n\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"created":"2017-05-09T00:37:09.266+0000","updated":"2017-05-09T00:37:09.266+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13068770/comment/16002031","id":"16002031","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=eliac","name":"eliac","key":"eliac","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Eli Acherkan","active":true,"timeZone":"Asia/Jerusalem"},"body":"Patch 003 is the same as 002 with tabs converted to spaces.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=eliac","name":"eliac","key":"eliac","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Eli Acherkan","active":true,"timeZone":"Asia/Jerusalem"},"created":"2017-05-09T04:54:04.687+0000","updated":"2017-05-09T04:54:04.687+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13068770/comment/16002109","id":"16002109","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"body":"| (x) *{color:red}-1 overall{color}* |\n\\\\\n\\\\\n|| Vote || Subsystem || Runtime || Comment ||\n| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue}  0m 19s{color} | {color:blue} Docker mode activated. {color} |\n| {color:green}+1{color} | {color:green} @author {color} | {color:green}  0m  0s{color} | {color:green} The patch does not contain any @author tags. {color} |\n| {color:green}+1{color} | {color:green} test4tests {color} | {color:green}  0m  0s{color} | {color:green} The patch appears to include 1 new or modified test files. {color} |\n| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 14m 34s{color} | {color:green} trunk passed {color} |\n| {color:green}+1{color} | {color:green} compile {color} | {color:green} 16m 15s{color} | {color:green} trunk passed {color} |\n| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  0m 37s{color} | {color:green} trunk passed {color} |\n| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  1m  4s{color} | {color:green} trunk passed {color} |\n| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green}  0m 20s{color} | {color:green} trunk passed {color} |\n| {color:red}-1{color} | {color:red} findbugs {color} | {color:red}  1m 23s{color} | {color:red} hadoop-common-project/hadoop-common in trunk has 19 extant Findbugs warnings. {color} |\n| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 50s{color} | {color:green} trunk passed {color} |\n| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green}  0m 38s{color} | {color:green} the patch passed {color} |\n| {color:green}+1{color} | {color:green} compile {color} | {color:green} 14m 11s{color} | {color:green} the patch passed {color} |\n| {color:green}+1{color} | {color:green} javac {color} | {color:green} 14m 11s{color} | {color:green} the patch passed {color} |\n| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  0m 37s{color} | {color:green} hadoop-common-project/hadoop-common: The patch generated 0 new + 119 unchanged - 6 fixed = 119 total (was 125) {color} |\n| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  1m  2s{color} | {color:green} the patch passed {color} |\n| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green}  0m 20s{color} | {color:green} the patch passed {color} |\n| {color:green}+1{color} | {color:green} whitespace {color} | {color:green}  0m  0s{color} | {color:green} The patch has no whitespace issues. {color} |\n| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  1m 32s{color} | {color:green} the patch passed {color} |\n| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 49s{color} | {color:green} the patch passed {color} |\n| {color:green}+1{color} | {color:green} unit {color} | {color:green}  8m 11s{color} | {color:green} hadoop-common in the patch passed. {color} |\n| {color:green}+1{color} | {color:green} asflicense {color} | {color:green}  0m 35s{color} | {color:green} The patch does not generate ASF License warnings. {color} |\n| {color:black}{color} | {color:black} {color} | {color:black} 65m 16s{color} | {color:black} {color} |\n\\\\\n\\\\\n|| Subsystem || Report/Notes ||\n| Docker |  Image:yetus/hadoop:14b5c93 |\n| JIRA Issue | HADOOP-14376 |\n| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12867034/HADOOP-14376.003.patch |\n| Optional Tests |  asflicense  compile  javac  javadoc  mvninstall  mvnsite  unit  findbugs  checkstyle  |\n| uname | Linux e28c1350b9d7 3.13.0-116-generic #163-Ubuntu SMP Fri Mar 31 14:13:22 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux |\n| Build tool | maven |\n| Personality | /testptch/hadoop/patchprocess/precommit/personality/provided.sh |\n| git revision | trunk / 749e5c0 |\n| Default Java | 1.8.0_131 |\n| findbugs | v3.1.0-RC1 |\n| findbugs | https://builds.apache.org/job/PreCommit-HADOOP-Build/12275/artifact/patchprocess/branch-findbugs-hadoop-common-project_hadoop-common-warnings.html |\n|  Test Results | https://builds.apache.org/job/PreCommit-HADOOP-Build/12275/testReport/ |\n| modules | C: hadoop-common-project/hadoop-common U: hadoop-common-project/hadoop-common |\n| Console output | https://builds.apache.org/job/PreCommit-HADOOP-Build/12275/console |\n| Powered by | Apache Yetus 0.5.0-SNAPSHOT   http://yetus.apache.org |\n\n\nThis message was automatically generated.\n\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"created":"2017-05-09T06:03:50.460+0000","updated":"2017-05-09T06:03:50.460+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13068770/comment/16003486","id":"16003486","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jlowe","name":"jlowe","key":"jlowe","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jason Lowe","active":true,"timeZone":"America/Chicago"},"body":"Thanks for updating the patch!\n\nI still think BZip2CompressionOutputStream.close() should be doing more than just calling super.close().  BZip2CompressionOutputStream has an \"output\" field that is private and instantiated by the class, yet it never calls the close() method on it.  While it's true that _today_ calling output.close() won't do anything useful because underlying resources are closed/freed by other entities, that may not always be the case in the _future_.  Someone could come along later and update CBZip2OutputStream such that it becomes critical to call its close() method, and failure to do so means we start leaking at that point.\n\nThe following:\n{code}\n  @Override\n  public void close() throws IOException {\n    if (!closed) {\n      try {\n        super.close();\n      }\n      finally {\n        closed = true;\n      }\n    }\n  }\n{code}\ncan be simplified to:\n{code}\n  @Override\n  public void close() throws IOException {\n    if (!closed) {\n      closed = true;\n      super.close();\n    }\n  }\n{code}\nalthough even that has a code smell.  Why are we protecting the parent's close method from being idempotent on redundant close?  The parent's method should already be doing that, which precludes the need to have an override at all since there's nothing else to do in the close method other than call the parent's version.  The closed check logic should be moved into the parent rather than having the child do it on behalf of the parent.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jlowe","name":"jlowe","key":"jlowe","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jason Lowe","active":true,"timeZone":"America/Chicago"},"created":"2017-05-09T20:30:24.226+0000","updated":"2017-05-09T20:30:24.226+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13068770/comment/16005110","id":"16005110","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=eliac","name":"eliac","key":"eliac","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Eli Acherkan","active":true,"timeZone":"Asia/Jerusalem"},"body":"I see what you mean, Jason. Thanks for your comments!\n\n*BZip2CompressionOutputStream:*\nPutting back output.close() brings us to the following:\n{code:java}\n  @Override\n  public void close() throws IOException {\n    try {\n      super.close();\n    } finally {\n      output.close();\n    }\n  }\n{code}\n\n*CompressorStream:*\nI was attempting to change the current implementation as little as possible. Switching the order of closed = true and super.close() may affect subclasses, especially user-supplied ones (e.g. if they rely on the state of the closed flag in their finish() method). So what would be the best course of action here? Switch the order to simplify the method? Move the closed check logic into the parent (which also affects subclasses)? If so, should a separate \"finished\" flag be added to keep track of whether finish() was completed successfully? Similarly, should the closed check logic of DecompressorStream be moved to _its_ parent? Also, in DecompressorStream the closed flag is set to true only if super.close() doesn't throw - which I also haven't changed so far.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=eliac","name":"eliac","key":"eliac","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Eli Acherkan","active":true,"timeZone":"Asia/Jerusalem"},"created":"2017-05-10T17:58:09.516+0000","updated":"2017-05-10T17:58:09.516+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13068770/comment/16005162","id":"16005162","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jlowe","name":"jlowe","key":"jlowe","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jason Lowe","active":true,"timeZone":"America/Chicago"},"body":"Yeah, I see what you mean if derived classes are looking at the closed flag.  Let's leave the closed flag logic as-is for now in CompressorStream, although I do think we should make the DecompressorStream logic consistent with how it's done in CompressorStream.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jlowe","name":"jlowe","key":"jlowe","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jason Lowe","active":true,"timeZone":"America/Chicago"},"created":"2017-05-10T18:20:59.021+0000","updated":"2017-05-10T18:20:59.021+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13068770/comment/16005306","id":"16005306","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=eliac","name":"eliac","key":"eliac","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Eli Acherkan","active":true,"timeZone":"Asia/Jerusalem"},"body":"Great. Attaching patch 004, which includes adding output.close() to BZip2CompressionOutputStream.close(), and aligning DecompressorStream.close() to the same try/finally structure as CompressorStream.close().","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=eliac","name":"eliac","key":"eliac","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Eli Acherkan","active":true,"timeZone":"Asia/Jerusalem"},"created":"2017-05-10T19:59:03.777+0000","updated":"2017-05-10T19:59:03.777+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13068770/comment/16005410","id":"16005410","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"body":"| (x) *{color:red}-1 overall{color}* |\n\\\\\n\\\\\n|| Vote || Subsystem || Runtime || Comment ||\n| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue}  0m 15s{color} | {color:blue} Docker mode activated. {color} |\n| {color:green}+1{color} | {color:green} @author {color} | {color:green}  0m  0s{color} | {color:green} The patch does not contain any @author tags. {color} |\n| {color:green}+1{color} | {color:green} test4tests {color} | {color:green}  0m  0s{color} | {color:green} The patch appears to include 1 new or modified test files. {color} |\n| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 12m 50s{color} | {color:green} trunk passed {color} |\n| {color:green}+1{color} | {color:green} compile {color} | {color:green} 15m  8s{color} | {color:green} trunk passed {color} |\n| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  0m 31s{color} | {color:green} trunk passed {color} |\n| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  0m 59s{color} | {color:green} trunk passed {color} |\n| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green}  0m 18s{color} | {color:green} trunk passed {color} |\n| {color:red}-1{color} | {color:red} findbugs {color} | {color:red}  1m 24s{color} | {color:red} hadoop-common-project/hadoop-common in trunk has 19 extant Findbugs warnings. {color} |\n| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 45s{color} | {color:green} trunk passed {color} |\n| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green}  0m 35s{color} | {color:green} the patch passed {color} |\n| {color:green}+1{color} | {color:green} compile {color} | {color:green} 13m 13s{color} | {color:green} the patch passed {color} |\n| {color:green}+1{color} | {color:green} javac {color} | {color:green} 13m 13s{color} | {color:green} the patch passed {color} |\n| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  0m 32s{color} | {color:green} hadoop-common-project/hadoop-common: The patch generated 0 new + 118 unchanged - 6 fixed = 118 total (was 124) {color} |\n| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  0m 58s{color} | {color:green} the patch passed {color} |\n| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green}  0m 16s{color} | {color:green} the patch passed {color} |\n| {color:green}+1{color} | {color:green} whitespace {color} | {color:green}  0m  0s{color} | {color:green} The patch has no whitespace issues. {color} |\n| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  1m 28s{color} | {color:green} the patch passed {color} |\n| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 45s{color} | {color:green} the patch passed {color} |\n| {color:green}+1{color} | {color:green} unit {color} | {color:green}  7m 25s{color} | {color:green} hadoop-common in the patch passed. {color} |\n| {color:green}+1{color} | {color:green} asflicense {color} | {color:green}  0m 30s{color} | {color:green} The patch does not generate ASF License warnings. {color} |\n| {color:black}{color} | {color:black} {color} | {color:black} 59m 41s{color} | {color:black} {color} |\n\\\\\n\\\\\n|| Subsystem || Report/Notes ||\n| Docker |  Image:yetus/hadoop:14b5c93 |\n| JIRA Issue | HADOOP-14376 |\n| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12867410/HADOOP-14376.004.patch |\n| Optional Tests |  asflicense  compile  javac  javadoc  mvninstall  mvnsite  unit  findbugs  checkstyle  |\n| uname | Linux ef6ec2450546 4.4.0-43-generic #63-Ubuntu SMP Wed Oct 12 13:48:03 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux |\n| Build tool | maven |\n| Personality | /testptch/hadoop/patchprocess/precommit/personality/provided.sh |\n| git revision | trunk / ad1e3e4 |\n| Default Java | 1.8.0_121 |\n| findbugs | v3.1.0-RC1 |\n| findbugs | https://builds.apache.org/job/PreCommit-HADOOP-Build/12290/artifact/patchprocess/branch-findbugs-hadoop-common-project_hadoop-common-warnings.html |\n|  Test Results | https://builds.apache.org/job/PreCommit-HADOOP-Build/12290/testReport/ |\n| modules | C: hadoop-common-project/hadoop-common U: hadoop-common-project/hadoop-common |\n| Console output | https://builds.apache.org/job/PreCommit-HADOOP-Build/12290/console |\n| Powered by | Apache Yetus 0.5.0-SNAPSHOT   http://yetus.apache.org |\n\n\nThis message was automatically generated.\n\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"created":"2017-05-10T21:00:19.142+0000","updated":"2017-05-10T21:00:19.142+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13068770/comment/16008143","id":"16008143","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jlowe","name":"jlowe","key":"jlowe","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jason Lowe","active":true,"timeZone":"America/Chicago"},"body":"+1 latest patch ltgm.  I'll commit this later today if there are no objections.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jlowe","name":"jlowe","key":"jlowe","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jason Lowe","active":true,"timeZone":"America/Chicago"},"created":"2017-05-12T13:46:11.232+0000","updated":"2017-05-12T13:46:11.232+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13068770/comment/16008793","id":"16008793","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jlowe","name":"jlowe","key":"jlowe","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jason Lowe","active":true,"timeZone":"America/Chicago"},"body":"Thanks, Eli!  I committed this to trunk, branch-2, branch-2.8, and branch-2.7.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jlowe","name":"jlowe","key":"jlowe","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jason Lowe","active":true,"timeZone":"America/Chicago"},"created":"2017-05-12T22:07:32.324+0000","updated":"2017-05-12T22:07:32.324+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13068770/comment/16008867","id":"16008867","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hudson","name":"hudson","key":"hudson","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Hudson","active":true,"timeZone":"Etc/UTC"},"body":"SUCCESS: Integrated in Jenkins build Hadoop-trunk-Commit #11731 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/11731/])\nHADOOP-14376. Memory leak when reading a compressed file using the (jlowe: rev 7bc217224891b7f7f0a2e35e37e46b36d8c5309d)\n* (edit) hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/compress/CompressionOutputStream.java\n* (edit) hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/compress/DecompressorStream.java\n* (edit) hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/io/compress/TestCodec.java\n* (edit) hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/compress/CompressionInputStream.java\n* (edit) hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/compress/CodecPool.java\n* (edit) hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/compress/CompressorStream.java\n* (edit) hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/compress/BZip2Codec.java\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hudson","name":"hudson","key":"hudson","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Hudson","active":true,"timeZone":"Etc/UTC"},"created":"2017-05-12T22:57:55.264+0000","updated":"2017-05-12T22:57:55.264+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13068770/comment/16450728","id":"16450728","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hudson","name":"hudson","key":"hudson","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Hudson","active":true,"timeZone":"Etc/UTC"},"body":"SUCCESS: Integrated in Jenkins build Hadoop-trunk-Commit #14057 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/14057/])\nHADOOP-14376. Memory leak when reading a compressed file using the (xyao: rev 192f1e63180d4ddfc7fa204090a3341190f1b0df)\n* (edit) hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/compress/BZip2Codec.java\n* (edit) hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/compress/CompressionOutputStream.java\n* (edit) hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/compress/DecompressorStream.java\n* (edit) hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/io/compress/TestCodec.java\n* (edit) hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/compress/CodecPool.java\n* (edit) hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/compress/CompressorStream.java\n* (edit) hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/compress/CompressionInputStream.java\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hudson","name":"hudson","key":"hudson","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Hudson","active":true,"timeZone":"Etc/UTC"},"created":"2018-04-24T20:49:50.790+0000","updated":"2018-04-24T20:49:50.790+0000"}],"maxResults":20,"total":20,"startAt":0},"votes":{"self":"https://issues.apache.org/jira/rest/api/2/issue/HADOOP-14376/votes","votes":0,"hasVoted":false},"worklog":{"startAt":0,"maxResults":20,"total":0,"worklogs":[]},"customfield_12311820":"0|i3efbr:"}}