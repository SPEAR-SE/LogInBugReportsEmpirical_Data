{"expand":"renderedFields,names,schema,operations,editmeta,changelog,versionedRepresentations","id":"13128950","self":"https://issues.apache.org/jira/rest/api/2/issue/13128950","key":"HADOOP-15162","fields":{"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype","name":"Bug","subtask":false,"avatarId":21133},"timespent":null,"project":{"self":"https://issues.apache.org/jira/rest/api/2/project/12310240","id":"12310240","key":"HADOOP","name":"Hadoop Common","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/projectavatar?pid=12310240&avatarId=10095","24x24":"https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12310240&avatarId=10095","16x16":"https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12310240&avatarId=10095","32x32":"https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12310240&avatarId=10095"},"projectCategory":{"self":"https://issues.apache.org/jira/rest/api/2/projectCategory/10292","id":"10292","description":"Scalable Distributed Computing","name":"Hadoop"}},"fixVersions":[],"aggregatetimespent":null,"resolution":{"self":"https://issues.apache.org/jira/rest/api/2/resolution/8","id":"8","description":"The described issue is not actually a problem - it is as designed.","name":"Not A Problem"},"customfield_12312322":null,"customfield_12310220":"2018-01-08T16:33:39.726+0000","customfield_12312520":null,"customfield_12312323":null,"customfield_12312521":"Wed Jan 10 18:51:00 UTC 2018","customfield_12310420":"9223372036854775807","customfield_12312320":null,"customfield_12310222":"1_*:*_1_*:*_412727386_*|*_5_*:*_1_*:*_0","customfield_12312321":null,"resolutiondate":"2018-01-10T18:51:00.210+0000","workratio":-1,"customfield_12312328":null,"customfield_12312329":null,"customfield_12312923":null,"customfield_12312326":null,"customfield_12312920":null,"customfield_12310300":null,"customfield_12312327":null,"customfield_12312921":null,"customfield_12312324":null,"customfield_12312720":null,"customfield_12312325":null,"lastViewed":null,"watches":{"self":"https://issues.apache.org/jira/rest/api/2/issue/HADOOP-15162/watchers","watchCount":8,"isWatching":false},"created":"2018-01-06T00:12:12.912+0000","customfield_12310192":null,"customfield_12310191":null,"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.svg","name":"Major","id":"3"},"labels":[],"customfield_12312333":null,"customfield_12310230":null,"customfield_12312334":null,"customfield_12313422":"false","customfield_12310310":"0.0","customfield_12312331":null,"customfield_12312332":null,"timeestimate":null,"aggregatetimeoriginalestimate":null,"customfield_12311120":null,"customfield_12312330":null,"versions":[],"issuelinks":[],"customfield_12312339":null,"assignee":null,"customfield_12312337":null,"customfield_12312338":null,"updated":"2018-01-10T18:51:00.277+0000","customfield_12312335":null,"customfield_12312336":null,"status":{"self":"https://issues.apache.org/jira/rest/api/2/status/5","description":"A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/resolved.png","name":"Resolved","id":"5","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Done"}},"components":[{"self":"https://issues.apache.org/jira/rest/api/2/component/12312526","id":"12312526","name":"security"}],"timeoriginalestimate":null,"description":"{{UserGroupInformation.createRemoteUser(String user)}} is hard coded Authentication method to SIMPLE by HADOOP-10683.  This by passed proxyuser ACL check, isSecurityEnabled check, and allow caller to impersonate as anyone.  This method could be abused in the main code base, which can cause part of Hadoop to become insecure without proxyuser check for both SIMPLE or Kerberos enabled environment.","customfield_10010":null,"timetracking":{},"customfield_12312026":null,"customfield_12312023":null,"customfield_12310320":null,"customfield_12312024":null,"customfield_12312340":null,"attachment":[],"aggregatetimeestimate":null,"customfield_12312341":null,"customfield_12312220":null,"customfield_12312022":null,"customfield_12310921":null,"customfield_12310920":"9223372036854775807","customfield_12312823":null,"summary":"UserGroupInformation.createRemoteUser hardcode authentication method to SIMPLE","creator":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=eyang","name":"eyang","key":"eyang","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Eric Yang","active":true,"timeZone":"America/Los_Angeles"},"subtasks":[],"customfield_12310291":null,"reporter":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=eyang","name":"eyang","key":"eyang","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Eric Yang","active":true,"timeZone":"America/Los_Angeles"},"customfield_12310290":null,"aggregateprogress":{"progress":0,"total":0},"customfield_12311024":null,"environment":null,"customfield_12313520":null,"customfield_12311020":null,"duedate":null,"customfield_12310250":null,"progress":{"progress":0,"total":0},"comment":{"comments":[{"self":"https://issues.apache.org/jira/rest/api/2/issue/13128950/comment/16316562","id":"16316562","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jlowe","name":"jlowe","key":"jlowe","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jason Lowe","active":true,"timeZone":"America/Chicago"},"body":"Could you elaborate on how this allows the caller to impersonate anyone?  Putting a check in UGI's createRemoteUser seems like a client-side security fix, and that's not going to be very helpful since we should never trust the client.  Allowing that UGI to gain access to a secured server simply because the client says they want to authenticate via SIMPLE would be very bad.  A properly secured server should reject such shenanigans.  But the fix in that case would be in the authentication handshake and not in preventing the UGI from being created in the first place.  We cannot control the code an untrusted client is using.\r\n\r\nI don't think it's directly harmful to create a UGI with no credentials even if the caller is not an official proxy user.  It can be useful for simply setting up a user with no initial credentials and then later attaching credentials (e.g.: security tokens) as is done in the YARN container localizer, log aggregator, etc.  Those are cases where the caller is not an official proxy user.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jlowe","name":"jlowe","key":"jlowe","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jason Lowe","active":true,"timeZone":"America/Chicago"},"created":"2018-01-08T16:33:39.726+0000","updated":"2018-01-08T16:33:39.726+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13128950/comment/16316581","id":"16316581","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=daryn","name":"daryn","key":"daryn","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Daryn Sharp","active":true,"timeZone":"America/Chicago"},"body":"Unless I'm misunderstanding the description, this appears to be conjecture.\r\n\r\nbq. This by passed proxyuser ACL check, isSecurityEnabled check, and allow caller to impersonate as anyone.\r\nNo, isSecurityEnabled is dictated by the conf, not the auth method of a ugi instance. \r\n\r\nbq. \\[...\\] which can cause part of Hadoop to become insecure without proxyuser check for both SIMPLE or Kerberos enabled environment.\r\nAssuming it's a RPC or HttpServer, no, the proxyuser ACL is always applied when the ugi is anything but token, ie. simple or kerberos.  If it's token, a proxy request is rejected (can't impersonate when already impersonating).\r\n\r\nIf you have a specific risk case, please take it up on the security list.  Don't irresponsibly post publicly.\r\n\r\n\r\n\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=daryn","name":"daryn","key":"daryn","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Daryn Sharp","active":true,"timeZone":"America/Chicago"},"created":"2018-01-08T16:56:54.804+0000","updated":"2018-01-08T16:56:54.804+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13128950/comment/16316725","id":"16316725","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=eyang","name":"eyang","key":"eyang","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Eric Yang","active":true,"timeZone":"America/Los_Angeles"},"body":"Hi [~jlowe],  Webhdfs and YARN allows impersonation through usage of ?user.name=foobar in HTTP URL.  This allows SIMPLE security mode to run as any other user without check.  If the cluster is configured with Linux Container Executor, then it can be carry out as a privileges escalation exploit in combination with vulnerability found in YARN-7590.\r\n\r\nTrust and verify are very important processes to enforce authentication security.  Server side must do either username/password challenge or token validation to enforce security like you said.  In Hadoop implementation of SIMPLE security, there is no authentication challenge in form of username/password prompt or token challenge to client.  Therefore, Hadoop doAs call trusts everyone who claims to be someone else when using SIMPLE security.\r\n\r\nThe fix must happen to intercepting RPC or HTTP requests to add authentication challenge to enforce security.  createRemoteUser should be intelligent to know the preference of the authentication to apply to avoid security holes.  Without addressing these issues, we are encouraging developer to write code such as:\r\n\r\n{code}\r\n    UserGroupInformation proxyUser;\r\n    UserGroupInformation ugi;\r\n    String remoteUser = request.getRemoteUser();\r\n    try {\r\n      if (UserGroupInformation.isSecurityEnabled()) {\r\n        proxyUser = UserGroupInformation.getLoginUser();\r\n        ugi = UserGroupInformation\r\n            .createProxyUser(remoteUser, proxyUser);\r\n      } else {\r\n        ugi = UserGroupInformation.createRemoteUser(remoteUser);\r\n      }\r\n      return ugi;\r\n    } catch (IOException e) {\r\n      throw new AccessControlException(e.getCause());\r\n    }\r\n{code}\r\n\r\nIf security is not enabled, allow proxy without checking for the current user is allowed to proxy.  Unfortunately, SIMPLE security is tight to no security due to improper interpretation in isSecurityEnabled method since Hadoop 0.20 security releases.  \r\n\r\nIf authentication are in place, server side code can be simplified to:\r\n\r\n{code}\r\n    UserGroupInformation proxyUser;\r\n    UserGroupInformation ugi;\r\n    String remoteUser = request.getRemoteUser();\r\n    try {\r\n      ugi = UserGroupInformation.createRemoteUser(remoteUser);\r\n      return ugi;\r\n    } catch (IOException e) {\r\n      throw new AccessControlException(e.getCause());\r\n    }\r\n{code}\r\n\r\ncreateRemoteUser(String user), can get the current login user, then createProxyUser.  At minimum proxy user ACL list will be verified for simple security to set a security perimeter, and combined with authentication challenge to provide simple security.   \r\n\r\nClient code can assign any arbitrary user, and trigger authentication challenge to occur when communicate with the server side.  This is happening when Kerberos security is enabled.  It would be nice if the same practice can apply to SIMPLE security without open up security holes regardless Kerberos security is enabled or not.\r\n\r\nThe very first design of Hadoop security was attempting to solve replay attack.  Kerberos security or a combination of proxy user/host ACL list can both serve the same purpose.  For some reason, during the implementation, Kerberos and proxy ACL list became only enforced when Kerberos security is enabled.  Kerberos and proxy ACL are in fact redundant checks.  This left SIMPLE security to be completely open, no security and no proxy check.\r\n\r\nIf developers blindly utilized the current implementation of UserGroupInformation.createRemoteUser(remoteUser);, part of Hadoop can be opened up to run without any security without anyone knowing.  This is not good security practice, hence, we probably want to mitigate this risk by improving the logic in createRemoteUser and review if there is a need to revise SIMPLE security definition.\r\n\r\nIf isSecurityEnabled() is based on hadoop.security.authentication==null, then the implementation of HTTP basic + proxy ACL and Kerberos could be two methods that enforce security.  This provide a way to apply security measure on cloud without deploying Kerberos.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=eyang","name":"eyang","key":"eyang","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Eric Yang","active":true,"timeZone":"America/Los_Angeles"},"created":"2018-01-08T18:19:44.576+0000","updated":"2018-01-08T18:19:44.576+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13128950/comment/16316758","id":"16316758","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=eyang","name":"eyang","key":"eyang","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Eric Yang","active":true,"timeZone":"America/Los_Angeles"},"body":"Hi [~daryn],\r\n\r\n{quote}\r\nIf you have a specific risk case, please take it up on the security list. Don't irresponsibly post publicly.\r\n{quote}\r\n\r\nThere is no security hole yet if the cluster is deployed with Kerberos or isSecurityEnabled==true.  If I am disclosing a real security hole, then it will definitely have been sent to security mailing list first.  I do not think this issue is worthy of sounding the bell yet.  This has been known issues with SIMPLE security since Hadoop 0.20s release.  I am only observing code changes over the past couple years and some security holes are about to be opened up due to inexperience developers following incorrect discipline.  Without the proper information to educate the public, fear will only cause panic and prevent progress.  I hope you understand my intention is to mitigate the risk by disclosing information to lead to progress rather than fear to drive people away.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=eyang","name":"eyang","key":"eyang","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Eric Yang","active":true,"timeZone":"America/Los_Angeles"},"created":"2018-01-08T18:38:01.991+0000","updated":"2018-01-08T18:38:01.991+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13128950/comment/16317386","id":"16317386","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=eyang","name":"eyang","key":"eyang","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Eric Yang","active":true,"timeZone":"America/Los_Angeles"},"body":"In summary, proxy user ACL should be checked for simple security instead of reliance on isSecurityEnabled().  {{isSecurityEnabled()}} gives a false sense that proxy user ACL shouldn't be checked which leading to use of UserGroupInformation.createRemoteUser(remoteUser) in server code, which is a bad practice for not verifying the credential of current server user.  Is this something that need to be improved or we mark this as won't fix  and make sure people always use proper proxy user directive for server side code?\r\n\r\n{code}\r\nproxyUser = UserGroupInformation.getLoginUser();\r\n        ugi = UserGroupInformation\r\n            .createProxyUser(remoteUser, proxyUser);\r\n{code}\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=eyang","name":"eyang","key":"eyang","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Eric Yang","active":true,"timeZone":"America/Los_Angeles"},"created":"2018-01-09T00:08:13.248+0000","updated":"2018-01-09T00:08:13.248+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13128950/comment/16317395","id":"16317395","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=daryn","name":"daryn","key":"daryn","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Daryn Sharp","active":true,"timeZone":"America/Chicago"},"body":"bq. This has been known issues with SIMPLE security since Hadoop 0.20s release.\r\nThe words simple and security don't belong in the same sentence, but let's discuss anyway.\r\n\r\nbq. createRemoteUser should be intelligent to know the preference of the authentication to apply to avoid security holes\r\nNo.  The createRemoteUser method works as designed.  App-specific control logic does not belong in the ugi.  A new ugi has only a presumed identity.  It's up to the app code to either fill it with credentials or attach a real user (via createProxyUser) that has credentials and proxy privs.\r\n\r\nBased on the snippets of code that conclude with \"if authentication are in place, server side code can be simplified to \\[...\\] UserGroupInformation.createRemoteUser(remoteUser);\", _I think_ you are suggesting that createRemote should auto-magically create a proxy user with the login user?  If you say yes, I'll provide a litany of reasons why that'd be completely broken.  If no, please more concisely state your use case.\r\n\r\nbq. Client code can assign any arbitrary user, and trigger authentication challenge to occur when communicate with the server side. This is happening when Kerberos security is enabled. It would be nice if the same practice can apply to SIMPLE security without open up security holes regardless Kerberos security is enabled or not.\r\nIf security is disabled, how can the phrases \"trigger authentication\" and \"without open security holes\" have any meaning?\r\n\r\nbq. This left SIMPLE security to be completely open, no security and no proxy check.\r\nBased on the code snippets, I think you are alarmed that an insecure client can decide to not create a proxy user, thus bypassing an insecure server's proxy checks for originating user/host.  While one of my long held pet peeves is client code should never be conditionalized for \"security enabled\", it's impossible for an insecure server to know whether an insecure client is honestly reporting whether it's a proxy user.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=daryn","name":"daryn","key":"daryn","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Daryn Sharp","active":true,"timeZone":"America/Chicago"},"created":"2018-01-09T00:16:12.637+0000","updated":"2018-01-09T00:16:12.637+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13128950/comment/16317414","id":"16317414","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=daryn","name":"daryn","key":"daryn","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Daryn Sharp","active":true,"timeZone":"America/Chicago"},"body":"bq. In summary, proxy user ACL should be checked for simple security instead of reliance on isSecurityEnabled().\r\nAs stated earlier, proxy privs are always checked for non-token connections.\r\n\r\nbq. isSecurityEnabled( gives a false sense that proxy user ACL shouldn't be checked which leading to use of UserGroupInformation.createRemoteUser(remoteUser) in server code, which is a bad practice for not verifying the credential of current server user.\r\nIt's not bad practice for a server to use createRemoteUser – that's why it exists.  What does \"verifying the credential of current server user\" mean when security is disabled and there are no credentials?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=daryn","name":"daryn","key":"daryn","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Daryn Sharp","active":true,"timeZone":"America/Chicago"},"created":"2018-01-09T00:28:14.489+0000","updated":"2018-01-09T00:28:14.489+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13128950/comment/16317583","id":"16317583","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=eyang","name":"eyang","key":"eyang","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Eric Yang","active":true,"timeZone":"America/Los_Angeles"},"body":"[~daryn] Thank you for your reply.  \r\n\r\n{quote}\r\nBased on the snippets of code that conclude with \"if authentication are in place, server side code can be simplified to [...] UserGroupInformation.createRemoteUser(remoteUser);\", I think you are suggesting that createRemote should auto-magically create a proxy user with the login user? If you say yes, I'll provide a litany of reasons why that'd be completely broken. If no, please more concisely state your use case.{quote}\r\n\r\nProxy user credential should be verified if it can impersonate.  In my usage, I am writing a component for YARN, and end user credential is verified in http request.  If code is written as UGI.createRemoteUser(remoteUser), should there be a check to determine if the current service user can proxy?  Some Hadoop PMC told me no because they assumed isSecurityEnabled == false, there should be no proxy ACL check.  If this type of assumption is applied, then we will have components talking to other components without honoring proxy user ACL, and leading to part of Hadoop being completely insecure.  This is the reason that I think createRemoteUser default authentication method to SIMPLE is a bad practice.  The server should decide which authentication method to use, setup authentication method and verify proxy ACL explicitly.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=eyang","name":"eyang","key":"eyang","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Eric Yang","active":true,"timeZone":"America/Los_Angeles"},"created":"2018-01-09T02:54:33.457+0000","updated":"2018-01-09T02:54:33.457+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13128950/comment/16318599","id":"16318599","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=daryn","name":"daryn","key":"daryn","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Daryn Sharp","active":true,"timeZone":"America/Chicago"},"body":"bq. Proxy user credential should be verified if it can impersonate.\r\n_There are no credentials_ with security disabled but a proxy user is verified if the client reported it's a proxy user – for http rest services via the doAs parameter.\r\n\r\nbq. In my usage, I am writing a component for YARN, and end user credential is verified in http request.\r\nIt is verified and you have nothing to do if you use the standard HttpServer and authentication filters.\r\n\r\nbq. If code is written as UGI.createRemoteUser(remoteUser), should there be a check to determine if the current service user can proxy? Some Hadoop PMC told me no because they assumed isSecurityEnabled == false, there should be no proxy ACL check.\r\nOf course it should be verified and as I keep stressing it is verified.  I think the PMC gave you bad advice and/or didn't understand the context.\r\n\r\nbq. If this type of assumption is applied, then we will have components talking to other components without honoring proxy user ACL, and leading to part of Hadoop being completely insecure.\r\nThis boggles me.  You are arguing: \"oh no! my insecure server is completely insecure!\"\r\n\r\nbq. The server should decide which authentication method to use, setup authentication method and verify proxy ACL explicitly.\r\nIt already does.  What am I missing?  Are you writing your own custom http server and authentication filter?\r\n\r\nLet's conclude this discussion.  Specifically, what existing code are you proposing be changed and how?  Post a patch.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=daryn","name":"daryn","key":"daryn","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Daryn Sharp","active":true,"timeZone":"America/Chicago"},"created":"2018-01-09T15:28:23.709+0000","updated":"2018-01-09T15:28:23.709+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13128950/comment/16318749","id":"16318749","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=eyang","name":"eyang","key":"eyang","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Eric Yang","active":true,"timeZone":"America/Los_Angeles"},"body":"[~daryn] {quote}\r\nAre you writing your own custom http server and authentication filter?\r\n{quote}\r\n\r\nNo.  This JIRA serves the purpose to provide information for less experienced developer to understand proxy ACL must be verified to enable perimeter security.  Code written as:\r\n\r\n{code}\r\nproxyUser = UserGroupInformation.getLoginUser();\r\n        ugi = UserGroupInformation\r\n            .createProxyUser(remoteUser, proxyUser);\r\n{code}\r\n\r\nWithout using UGI.createRemoteUser(remoteUser) is equally good.  There is no need of isSecurityEnabled() check, and there is no need of explicitly call UGI.createRemoteUser(remoteUser).  User only get to shoot themselves in the foot, if {{hadoop.http.authentication.simple.anonymous.allowed}} is misconfigured which allow anyone to impersonate as someone else.  I would propose to deprecate createRemoteUser(remoteUser) API because it creates confusion on how code should be written.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=eyang","name":"eyang","key":"eyang","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Eric Yang","active":true,"timeZone":"America/Los_Angeles"},"created":"2018-01-09T17:03:53.921+0000","updated":"2018-01-09T17:03:53.921+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13128950/comment/16320834","id":"16320834","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=eyang","name":"eyang","key":"eyang","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Eric Yang","active":true,"timeZone":"America/Los_Angeles"},"body":"Close this as not a problem.  Bad assumption for SIMPLE security mode doesn't check for proxy ACL.  I verified that SIMPLE security mode also checks for proxy ACL.  UGI.createRemoteUser(remoteUser) has no effect to proxy ACL check.  Thanks to [~jlowe] and [~daryn] for advices and recommendations.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=eyang","name":"eyang","key":"eyang","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Eric Yang","active":true,"timeZone":"America/Los_Angeles"},"created":"2018-01-10T18:51:00.254+0000","updated":"2018-01-10T18:51:00.254+0000"}],"maxResults":11,"total":11,"startAt":0},"votes":{"self":"https://issues.apache.org/jira/rest/api/2/issue/HADOOP-15162/votes","votes":0,"hasVoted":false},"worklog":{"startAt":0,"maxResults":20,"total":0,"worklogs":[]},"customfield_12311820":"0|i3ol4v:"}}