{"expand":"renderedFields,names,schema,operations,editmeta,changelog,versionedRepresentations","id":"12993311","self":"https://issues.apache.org/jira/rest/api/2/issue/12993311","key":"HADOOP-13436","fields":{"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype","name":"Bug","subtask":false,"avatarId":21133},"timespent":null,"project":{"self":"https://issues.apache.org/jira/rest/api/2/project/12310240","id":"12310240","key":"HADOOP","name":"Hadoop Common","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/projectavatar?pid=12310240&avatarId=10095","24x24":"https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12310240&avatarId=10095","16x16":"https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12310240&avatarId=10095","32x32":"https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12310240&avatarId=10095"},"projectCategory":{"self":"https://issues.apache.org/jira/rest/api/2/projectCategory/10292","id":"10292","description":"Scalable Distributed Computing","name":"Hadoop"}},"fixVersions":[],"aggregatetimespent":null,"resolution":null,"customfield_12312322":null,"customfield_12310220":"2016-07-28T19:21:59.534+0000","customfield_12312520":null,"customfield_12312323":null,"customfield_12312521":"Wed Aug 24 21:57:56 UTC 2016","customfield_12310420":"9223372036854775807","customfield_12312320":null,"customfield_12310222":null,"customfield_12312321":null,"resolutiondate":null,"workratio":-1,"customfield_12312328":null,"customfield_12312329":null,"customfield_12312923":null,"customfield_12312326":null,"customfield_12312920":null,"customfield_12310300":null,"customfield_12312327":null,"customfield_12312921":null,"customfield_12312324":null,"customfield_12312720":null,"customfield_12312325":null,"lastViewed":null,"watches":{"self":"https://issues.apache.org/jira/rest/api/2/issue/HADOOP-13436/watchers","watchCount":8,"isWatching":false},"created":"2016-07-28T17:56:58.379+0000","customfield_12310192":null,"customfield_12310191":null,"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.svg","name":"Major","id":"3"},"labels":[],"customfield_12312333":null,"customfield_12310230":null,"customfield_12312334":null,"customfield_12313422":"false","customfield_12310310":"2.0","customfield_12312331":null,"customfield_12312332":null,"timeestimate":null,"aggregatetimeoriginalestimate":null,"customfield_12311120":null,"customfield_12312330":null,"versions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12331977","id":"12331977","description":"2.7.1 release","name":"2.7.1","archived":false,"released":true,"releaseDate":"2015-07-06"}],"issuelinks":[{"id":"12476331","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12476331","type":{"id":"10030","name":"Reference","inward":"is related to","outward":"relates to","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"},"outwardIssue":{"id":"12851465","key":"HDFS-8855","self":"https://issues.apache.org/jira/rest/api/2/issue/12851465","fields":{"summary":"Webhdfs client leaks active NameNode connections","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/5","description":"A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/resolved.png","name":"Resolved","id":"5","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Done"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.svg","name":"Major","id":"3"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype","name":"Bug","subtask":false,"avatarId":21133}}}},{"id":"12476330","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12476330","type":{"id":"10030","name":"Reference","inward":"is related to","outward":"relates to","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"},"outwardIssue":{"id":"12766514","key":"HDFS-7597","self":"https://issues.apache.org/jira/rest/api/2/issue/12766514","fields":{"summary":"DelegationTokenIdentifier should cache the TokenIdentifier to UGI mapping","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/5","description":"A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/resolved.png","name":"Resolved","id":"5","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Done"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/2","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/critical.svg","name":"Critical","id":"2"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/4","id":"4","description":"An improvement or enhancement to an existing feature or task.","iconUrl":"https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype","name":"Improvement","subtask":false,"avatarId":21140}}}}],"customfield_12312339":null,"assignee":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=xiaobingo","name":"xiaobingo","key":"xiaobingo","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Xiaobing Zhou","active":true,"timeZone":"America/Los_Angeles"},"customfield_12312337":null,"customfield_12312338":null,"updated":"2016-08-24T21:58:43.423+0000","customfield_12312335":null,"customfield_12312336":null,"status":{"self":"https://issues.apache.org/jira/rest/api/2/status/1","description":"The issue is open and ready for the assignee to start work on it.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/open.png","name":"Open","id":"1","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/2","id":2,"key":"new","colorName":"blue-gray","name":"To Do"}},"components":[{"self":"https://issues.apache.org/jira/rest/api/2/component/12310688","id":"12310688","name":"ipc","description":""}],"timeoriginalestimate":null,"description":"We've noticed RPC connections are increasing dramatically in a Kerberized HDFS cluster with {noformat}dfs.client.retry.policy.enabled{noformat} enabled. Internally,  Client#getConnection is doing lookup relying on ConnectionId #hashCode and then #equals, which compose checking Subclass-of-RetryPolicy #hashCode and #equals. If subclasses of RetryPolicy neglect overriding #hashCode or #equals, every instance of RetryPolicy with equivalent fields' values (e.g. MultipleLinearRandomRetry[6x10000ms, 10x60000ms]) will lead to a brand new connection because the check will fall back to Object#hashCode and Object#equals which is distinct and false for distinct instances.\n\nThis is stack trace where the anonymous RetryPolicy implementation (neglecting overriding hashCode and equals) in RetryUtils#getDefaultRetryPolicy is called:\n{noformat}\nat org.apache.hadoop.io.retry.RetryUtils.getDefaultRetryPolicy(RetryUtils.java:82)\n        at org.apache.hadoop.hdfs.NameNodeProxies.createNNProxyWithClientProtocol(NameNodeProxies.java:409)\n        at org.apache.hadoop.hdfs.NameNodeProxies.createNonHAProxy(NameNodeProxies.java:315)\n        at org.apache.hadoop.hdfs.NameNodeProxies.createProxy(NameNodeProxies.java:176)\n        at org.apache.hadoop.hdfs.DFSClient.<init>(DFSClient.java:678)\n        at org.apache.hadoop.hdfs.DFSClient.<init>(DFSClient.java:619)\n        at org.apache.hadoop.hdfs.DFSClient.<init>(DFSClient.java:609)\n        at org.apache.hadoop.hdfs.server.datanode.web.webhdfs.WebHdfsHandler.newDfsClient(WebHdfsHandler.java:272)\n        at org.apache.hadoop.hdfs.server.datanode.web.webhdfs.WebHdfsHandler.onOpen(WebHdfsHandler.java:215)\n        at org.apache.hadoop.hdfs.server.datanode.web.webhdfs.WebHdfsHandler.handle(WebHdfsHandler.java:135)\n        at org.apache.hadoop.hdfs.server.datanode.web.webhdfs.WebHdfsHandler$1.run(WebHdfsHandler.java:117)\n        at org.apache.hadoop.hdfs.server.datanode.web.webhdfs.WebHdfsHandler$1.run(WebHdfsHandler.java:114)\n        at java.security.AccessController.doPrivileged(Native Method)\n        at javax.security.auth.Subject.doAs(Subject.java:422)\n        at org.apache.hadoop.security.UserGroupInformation.doAs(UserGroupInformation.java:1657)\n        at org.apache.hadoop.hdfs.server.datanode.web.webhdfs.WebHdfsHandler.channelRead0(WebHdfsHandler.java:114)\n        at org.apache.hadoop.hdfs.server.datanode.web.URLDispatcher.channelRead0(URLDispatcher.java:52)\n        at org.apache.hadoop.hdfs.server.datanode.web.URLDispatcher.channelRead0(URLDispatcher.java:32)\n        at io.netty.channel.SimpleChannelInboundHandler.channelRead(SimpleChannelInboundHandler.java:105)\n        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:333)\n        at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:319)\n        at io.netty.channel.ChannelInboundHandlerAdapter.channelRead(ChannelInboundHandlerAdapter.java:86)\n        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:333)\n        at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:319)\n        at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:163)\n        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:333)\n        at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:319)\n        at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:787)\n        at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:130)\n        at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:511)\n        at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:468)\n        at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:382)\n        at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:354)\n        at io.netty.util.concurrent.SingleThreadEventExecutor$2.run(SingleThreadEventExecutor.java:116)\n        at io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator.run(DefaultThreadFactory.java:137)\n        at java.lang.Thread.run(Thread.java:745)\n{noformat}\n\n\nThree options to fix the problem:\n1. All subclasses of RetryPolicy must override equals and hashCode to deliver less discriminating equivalence relation, i.e. they are equal if they have meaningful equivalent fields' values (e.g. MultipleLinearRandomRetry[6x10000ms, 10x60000ms])\n2. Change ConnectionId#equals by removing RetryPolicy#equals compoment.\n3. Let WebHDFS reuse the DFSClient.","customfield_10010":null,"timetracking":{},"customfield_12312026":null,"customfield_12312023":null,"customfield_12310320":null,"customfield_12312024":null,"customfield_12312340":null,"attachment":[{"self":"https://issues.apache.org/jira/rest/api/2/attachment/12825345","id":"12825345","filename":"Proposal-of-Fixing-Connection-Leakage.pdf","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=xiaobingo","name":"xiaobingo","key":"xiaobingo","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Xiaobing Zhou","active":true,"timeZone":"America/Los_Angeles"},"created":"2016-08-24T21:58:43.419+0000","size":74272,"mimeType":"application/pdf","content":"https://issues.apache.org/jira/secure/attachment/12825345/Proposal-of-Fixing-Connection-Leakage.pdf"},{"self":"https://issues.apache.org/jira/rest/api/2/attachment/12820758","id":"12820758","filename":"repro.sh","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=xiaobingo","name":"xiaobingo","key":"xiaobingo","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Xiaobing Zhou","active":true,"timeZone":"America/Los_Angeles"},"created":"2016-07-28T18:27:00.317+0000","size":1425,"mimeType":"application/x-sh","content":"https://issues.apache.org/jira/secure/attachment/12820758/repro.sh"}],"aggregatetimeestimate":null,"customfield_12312341":null,"customfield_12312220":null,"customfield_12312022":null,"customfield_12310921":null,"customfield_12310920":"9223372036854775807","customfield_12312823":null,"summary":"RPC connections are leaking due to not overriding hashCode and equals","creator":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=xiaobingo","name":"xiaobingo","key":"xiaobingo","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Xiaobing Zhou","active":true,"timeZone":"America/Los_Angeles"},"subtasks":[{"id":"12996772","key":"HADOOP-13488","self":"https://issues.apache.org/jira/rest/api/2/issue/12996772","fields":{"summary":"Have TryOnceThenFail implement ConnectionRetryPolicy","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/10002","description":"A patch for this issue has been uploaded to JIRA by a contributor.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/document.png","name":"Patch Available","id":"10002","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/4","id":4,"key":"indeterminate","colorName":"yellow","name":"In Progress"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.svg","name":"Major","id":"3"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/7","id":"7","description":"The sub-task of the issue","iconUrl":"https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype","name":"Sub-task","subtask":true,"avatarId":21146}}},{"id":"12999826","key":"HADOOP-13546","self":"https://issues.apache.org/jira/rest/api/2/issue/12999826","fields":{"summary":"Override equals and hashCode to avoid connection leakage","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/5","description":"A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/resolved.png","name":"Resolved","id":"5","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Done"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.svg","name":"Major","id":"3"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/7","id":"7","description":"The sub-task of the issue","iconUrl":"https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype","name":"Sub-task","subtask":true,"avatarId":21146}}}],"customfield_12310291":null,"reporter":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=xiaobingo","name":"xiaobingo","key":"xiaobingo","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Xiaobing Zhou","active":true,"timeZone":"America/Los_Angeles"},"customfield_12310290":null,"aggregateprogress":{"progress":0,"total":0},"customfield_12311024":null,"environment":null,"customfield_12313520":null,"customfield_12311020":null,"duedate":null,"customfield_12310250":null,"progress":{"progress":0,"total":0},"comment":{"comments":[{"self":"https://issues.apache.org/jira/rest/api/2/issue/12993311/comment/15397970","id":"15397970","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=xiaobingo","name":"xiaobingo","key":"xiaobingo","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Xiaobing Zhou","active":true,"timeZone":"America/Los_Angeles"},"body":"I've posted the script used to reproduce the case as repro.sh","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=xiaobingo","name":"xiaobingo","key":"xiaobingo","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Xiaobing Zhou","active":true,"timeZone":"America/Los_Angeles"},"created":"2016-07-28T18:29:01.965+0000","updated":"2016-07-28T18:29:01.965+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12993311/comment/15397983","id":"15397983","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=xiaobingo","name":"xiaobingo","key":"xiaobingo","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Xiaobing Zhou","active":true,"timeZone":"America/Los_Angeles"},"body":"The option #1 is preferable from my understanding. Option #2 is a high risky fundamental change across stack. Option #3 is not universally applicable. They are posted here with a hope of sourcing collective opinions. Please feel free to comment on it. Thanks.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=xiaobingo","name":"xiaobingo","key":"xiaobingo","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Xiaobing Zhou","active":true,"timeZone":"America/Los_Angeles"},"created":"2016-07-28T18:35:36.950+0000","updated":"2016-07-28T18:35:36.950+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12993311/comment/15398001","id":"15398001","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=xiaobingo","name":"xiaobingo","key":"xiaobingo","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Xiaobing Zhou","active":true,"timeZone":"America/Los_Angeles"},"body":"[~daryn] what's your thought on this? Thanks. HDFS-7597 cached UGI to avoid new connections being created.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=xiaobingo","name":"xiaobingo","key":"xiaobingo","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Xiaobing Zhou","active":true,"timeZone":"America/Los_Angeles"},"created":"2016-07-28T18:46:16.070+0000","updated":"2016-07-28T18:46:16.070+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12993311/comment/15398070","id":"15398070","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=daryn","name":"daryn","key":"daryn","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Daryn Sharp","active":true,"timeZone":"America/Chicago"},"body":"We encountered this exact problem, fixed it, but apparently haven't pushed back to the community.  I think #1 is the correct approach.  Below is the quick & dirty patch we used.  I'd suggest scrubbing all the policies for correctness.  Plus re-building strings for hashCode/equals is a horrible thing that should be changed.\n\n{code}\nindex 0000000..5aab5c2\n--- /dev/null\n+++ b/Y-CHANGES/YHADOOP-977\n@@ -0,0 +1 @@\n+[YHADOOP-977] Webhdfs causes datanodes to create excessive connections.\nindex fab406d..032e38e 100644\n--- a/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/retry/RetryUtils.java\n+++ b/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/retry/RetryUtils.java\n@@ -115,6 +115,16 @@ public RetryAction shouldRetry(Exception e, int retries, int failovers,\n         }\n \n         @Override\n+        public int hashCode() {\n+          return multipleLinearRandomRetry.hashCode();\n+        }\n+\n+        @Override\n+        public boolean equals(final Object that) {\n+          return this.toString().equals(that.toString());\n+        }\n+\n+        @Override\n         public String toString() {\n           return \"RetryPolicy[\" + multipleLinearRandomRetry + \", \"\n               + RetryPolicies.TRY_ONCE_THEN_FAIL.getClass().getSimpleName();\n{code}\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=daryn","name":"daryn","key":"daryn","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Daryn Sharp","active":true,"timeZone":"America/Chicago"},"created":"2016-07-28T19:21:59.534+0000","updated":"2016-07-28T19:21:59.534+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12993311/comment/15398324","id":"15398324","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=xiaobingo","name":"xiaobingo","key":"xiaobingo","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Xiaobing Zhou","active":true,"timeZone":"America/Los_Angeles"},"body":"Thank you [~daryn] for your inputs. There is a similar patch in my mind.  \n\nbq. re-building strings for hashCode/equals is a horrible thing that should be changed.\nDoes it mean it leads to performance issues?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=xiaobingo","name":"xiaobingo","key":"xiaobingo","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Xiaobing Zhou","active":true,"timeZone":"America/Los_Angeles"},"created":"2016-07-28T22:28:07.091+0000","updated":"2016-07-28T22:28:07.091+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12993311/comment/15398374","id":"15398374","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=xiaobingo","name":"xiaobingo","key":"xiaobingo","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Xiaobing Zhou","active":true,"timeZone":"America/Los_Angeles"},"body":"By pulling out all subclasses of RetryPolicy, only RetryForever and TryOnceThenFail don't have any member fields, which means it's not always possible to follow the pattern that multiple instances with equivalent fields' values are viewed as equal (i.e. being part of ConnectionId#equals) to avoid creating new connections. This makes exceptions for option #1, which is a dilemma since we can't go to option #2 and #3. Any thoughts? Thanks.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=xiaobingo","name":"xiaobingo","key":"xiaobingo","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Xiaobing Zhou","active":true,"timeZone":"America/Los_Angeles"},"created":"2016-07-28T22:55:56.580+0000","updated":"2016-07-28T22:55:56.580+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12993311/comment/15398459","id":"15398459","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=liuml07","name":"liuml07","key":"liuml07","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=liuml07&avatarId=29203","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=liuml07&avatarId=29203","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=liuml07&avatarId=29203","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=liuml07&avatarId=29203"},"displayName":"Mingliang Liu","active":true,"timeZone":"America/Los_Angeles"},"body":"Nice catch, [~xiaobingo]!\n\n{{RetryPolicy}} states that\n{quote}\nImplementations of this interface should be immutable.\n{quote}\nwhich is not enough. Since the {{RetryPolicy}}'s equality is used by {{ConnectionId#equals()}}, every class that implements {{RetryPolicy}} should also override {{equals()}} method. For the sake of new retry policies, I suggest we also note this in the javadoc of {{RetryPolicy}}. Although I see very few immutable classes could perform like a charm without overriding {{equals()}}/{{hashCode()}} methods, it's not a strict rule to call a class _immutable_.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=liuml07","name":"liuml07","key":"liuml07","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=liuml07&avatarId=29203","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=liuml07&avatarId=29203","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=liuml07&avatarId=29203","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=liuml07&avatarId=29203"},"displayName":"Mingliang Liu","active":true,"timeZone":"America/Los_Angeles"},"created":"2016-07-29T00:00:02.349+0000","updated":"2016-07-29T00:00:02.349+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12993311/comment/15399409","id":"15399409","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=daryn","name":"daryn","key":"daryn","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Daryn Sharp","active":true,"timeZone":"America/Chicago"},"body":"bq. Does it mean it leads to performance issues?\n\nTechnically yes, but if the total code path was profiled it's probably not even a blip.  I took a look at {{MultipleLinearRandomRetry}} and actually caches the {{toString()}} value so it's not an issue with that policy.\n\nNow the problem is making sure all current and future policies properly adhere to a contract required to ensure connection lookups work correctly.  I'd suggest that {{RetryPolicy}} should be an abstract class rather than an interface.  This will ensure the contract is enforced.\n\n{{RetryPolicy}} would implement {{hashCode}}, {{equals}}, and {{toString}} as final methods using the impl of {{MultipleLinearRandomRetry}}.  Except {{toString}} would call a new abstract {{getName}} as the value it will cache.\n\nIf compatibility is an overriding concern then I guess a new abstract class, ex. {{AbstractRetryPolicy}}, that implements {{RetryPolicy}} could be created.  Existing polices would then extend that class.  This has the downside of future policies re-introducing this jira's buggy behavior.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=daryn","name":"daryn","key":"daryn","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Daryn Sharp","active":true,"timeZone":"America/Chicago"},"created":"2016-07-29T14:28:36.087+0000","updated":"2016-07-29T14:28:36.087+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12993311/comment/15400217","id":"15400217","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=liuml07","name":"liuml07","key":"liuml07","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=liuml07&avatarId=29203","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=liuml07&avatarId=29203","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=liuml07&avatarId=29203","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=liuml07&avatarId=29203"},"displayName":"Mingliang Liu","active":true,"timeZone":"America/Los_Angeles"},"body":"I'm in favor of making {{RetryPolicy}} an abstract class. In Java we can't add those methods to an interface.  Implementing final {{hashCode}}/{{equals}}/{{toString}} methods; or make {{hashCode}}/{{equals}} abstract, both approach should work IMO.\n\nHow about different implementations in {{branch-2}} and {{trunk}}? In {{trunk}}, we make {{RetryPolicy}} an abstract class, while in {{branch-2}}, we add a new {{AbstractRetryPolicy}} class and revisit all the policies by extending for correctness. This way, we can defend the compatibility vs. fix debate for {{branch-2}} but still, make the future a better place.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=liuml07","name":"liuml07","key":"liuml07","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=liuml07&avatarId=29203","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=liuml07&avatarId=29203","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=liuml07&avatarId=29203","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=liuml07&avatarId=29203"},"displayName":"Mingliang Liu","active":true,"timeZone":"America/Los_Angeles"},"created":"2016-07-29T23:25:16.925+0000","updated":"2016-07-29T23:25:46.448+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12993311/comment/15418013","id":"15418013","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=xiaobingo","name":"xiaobingo","key":"xiaobingo","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Xiaobing Zhou","active":true,"timeZone":"America/Los_Angeles"},"body":"Thank you [~daryn] and [~liuml07] for your comments. How about defining a new interface ConnectionRetryPolicy that extends RetryPolicy with extension of ConnectionRetryPolicy#reuseConnection? ConnectionId#equals should instead compare ConnectionRetryPolicy#reuseConnection to conclude if a new connection needs be created. Without the specific interface, there are several issues:\n\n1. Exception checks in RetryInvocationHandler level could be tightly coupled with those in connection level. It's error prone to mix them together since the same RetryPolicy can be used in both levels. A good case in point is RetryUtils#getDefaultRetryPolicy. It composed checks of ServiceException and IOException, whereas ServiceException is never thrown in connection level. \n\n2. For the same reason, it's hard to correctly implement retry logic in those  exceptions dependent retry polices, e.g. ExceptionDependentRetry, OtherThanRemoteExceptionDependentRetry and RemoteExceptionDependentRetry. Their logic should be separated to two distinct categories.\n\nWe need to avoid the jumbo retry policy anyway.\n\nI will start with a couple of sub tasks addressing the issue aforementioned.\n\nThank you [~jingzhao] very much for your suggestions.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=xiaobingo","name":"xiaobingo","key":"xiaobingo","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Xiaobing Zhou","active":true,"timeZone":"America/Los_Angeles"},"created":"2016-08-11T22:01:42.564+0000","updated":"2016-08-11T22:18:11.626+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12993311/comment/15435781","id":"15435781","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=xiaobingo","name":"xiaobingo","key":"xiaobingo","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Xiaobing Zhou","active":true,"timeZone":"America/Los_Angeles"},"body":"Based on considerate discussion, we came up with different fixes for 2.x and 3.x. Simply put, one is to do in-place fix for Hadoop 2.x, the other is to introduce ConnectionRetryPolicy for Hadoop 3.x, since ConnectionRetryPolicy needs fundamental changes of function signatures in the space of ipc.RPC and ipc.Client, which will break back compatibility in 2.x. I posted a proposal. Any feedback is appreciated. Thanks [~jingzhao] so your precious input.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=xiaobingo","name":"xiaobingo","key":"xiaobingo","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Xiaobing Zhou","active":true,"timeZone":"America/Los_Angeles"},"created":"2016-08-24T21:57:56.849+0000","updated":"2016-08-24T21:57:56.849+0000"}],"maxResults":11,"total":11,"startAt":0},"votes":{"self":"https://issues.apache.org/jira/rest/api/2/issue/HADOOP-13436/votes","votes":0,"hasVoted":false},"worklog":{"startAt":0,"maxResults":20,"total":0,"worklogs":[]},"customfield_12311820":"0|i31mxj:"}}