{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "fields": {
        "aggregateprogress": {
            "progress": 0,
            "total": 0
        },
        "aggregatetimeestimate": null,
        "aggregatetimeoriginalestimate": null,
        "aggregatetimespent": null,
        "assignee": {
            "active": true,
            "avatarUrls": {
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=owen.omalley&avatarId=29697",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=owen.omalley&avatarId=29697",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=owen.omalley&avatarId=29697",
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=owen.omalley&avatarId=29697"
            },
            "displayName": "Owen O'Malley",
            "key": "owen.omalley",
            "name": "owen.omalley",
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=owen.omalley",
            "timeZone": "America/Los_Angeles"
        },
        "components": [],
        "created": "2008-06-10T02:01:13.000+0000",
        "creator": {
            "active": true,
            "avatarUrls": {
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452",
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452"
            },
            "displayName": "Spyros Blanas",
            "key": "sblanas",
            "name": "sblanas",
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=sblanas",
            "timeZone": "Etc/UTC"
        },
        "customfield_10010": null,
        "customfield_12310191": [{
            "id": "10343",
            "self": "https://issues.apache.org/jira/rest/api/2/customFieldOption/10343",
            "value": "Reviewed"
        }],
        "customfield_12310192": null,
        "customfield_12310220": "2008-06-10T16:58:29.418+0000",
        "customfield_12310222": "10002_*:*_1_*:*_616445703_*|*_1_*:*_1_*:*_53835969_*|*_5_*:*_2_*:*_10122024_*|*_4_*:*_1_*:*_780224",
        "customfield_12310230": null,
        "customfield_12310250": null,
        "customfield_12310290": null,
        "customfield_12310291": null,
        "customfield_12310300": null,
        "customfield_12310310": "2.0",
        "customfield_12310320": null,
        "customfield_12310420": "19175",
        "customfield_12310920": "102643",
        "customfield_12310921": null,
        "customfield_12311020": null,
        "customfield_12311024": null,
        "customfield_12311120": null,
        "customfield_12311820": "0|i0hx7r:",
        "customfield_12312022": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "customfield_12312026": null,
        "customfield_12312220": null,
        "customfield_12312320": null,
        "customfield_12312321": null,
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312324": null,
        "customfield_12312325": null,
        "customfield_12312326": null,
        "customfield_12312327": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312330": null,
        "customfield_12312331": null,
        "customfield_12312332": null,
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12312335": null,
        "customfield_12312336": null,
        "customfield_12312337": null,
        "customfield_12312338": null,
        "customfield_12312339": null,
        "customfield_12312340": null,
        "customfield_12312341": null,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Jun 18 13:41:47 UTC 2008",
        "customfield_12312720": null,
        "customfield_12312823": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "customfield_12312923": null,
        "customfield_12313422": "false",
        "customfield_12313520": null,
        "description": "h2.Problem\n\nThe ValuesIterator.next() doesn't return a new object representing the next element. \n\nIt is expected that this is the case. Example from java.lang.String source code:\n{noformat}\npublic boolean equals(Object anObject) {\n    if (this == anObject) {\n        return true;\n    }\n    if (anObject instanceof String) {\n        // custom code here\n    }\n}\n{noformat}\n\nChanging the private fields of the object and returning it from next() will make this object fail the equals() test, because this==anObject will always be true.\n\nh2. What is affected\nThe reduce() method presents (a subclass of) ValuesIterator to the user. So every user-defined class can be affected.\n\nManifestations of this bug in 0.17.0:\n* The Text class checks for equality similarly to String.equals(), which is shown above.\n* The contrib/data_join breaks because it stores tags in a Map. The behavior of the next() method makes Object.equals() be true for all tags.\n\nh2. JUnit test\n\nPatch against hadoop-0.17.0:\n{noformat}\nIndex: src/test/org/apache/hadoop/mapred/TestReduceTask.java\n===================================================================\n--- src/test/org/apache/hadoop/mapred/TestReduceTask.java       (revision 665935)\n+++ src/test/org/apache/hadoop/mapred/TestReduceTask.java       (working copy)\n@@ -122,4 +122,52 @@\n       runValueIterator(tmpDir, testCase, conf);\n     }\n   }\n+\n+  public void runValueIterator2(Path tmpDir, Pair[] vals, \n+                               Configuration conf) throws IOException {\n+    FileSystem fs = tmpDir.getFileSystem(conf);\n+    Path path = new Path(tmpDir, \"data.in\");\n+    SequenceFile.Writer writer = new SequenceFile.Writer(fs, conf, path,\n+                                                         Text.class, \n+                                                         Text.class);\n+    for(Pair p: vals) {\n+      writer.append(new Text(p.key), new Text(p.value));\n+    }\n+    writer.close();\n+    SequenceFile.Sorter sorter = new SequenceFile.Sorter(fs, Text.class, \n+                                                         Text.class, conf);\n+    SequenceFile.Sorter.RawKeyValueIterator rawItr = \n+      sorter.merge(new Path[]{path}, false, tmpDir);\n+    @SuppressWarnings(\"unchecked\") // WritableComparators are not generic\n+    ReduceTask.ValuesIterator<Text,Text> valItr = \n+      new ReduceTask.ValuesIterator<Text,Text>(rawItr,\n+          WritableComparator.get(Text.class), Text.class, Text.class,\n+          conf, new NullProgress());\n+    while (valItr.more()) {\n+      Object key = valItr.getKey();\n+      String keyString = key.toString();\n+      // make sure it matches!\n+      assertEquals(vals[0].key, keyString);\n+      // must have at least 1 value!\n+      assertTrue(valItr.hasNext());\n+      Text value1 = valItr.next();\n+      // must have at least 2 values!\n+      assertTrue(valItr.hasNext());\n+      Text value2 = valItr.next();\n+      // do test\n+      assertNotSame(value1, value2);\n+      assertTrue(!value1.equals(value2));\n+      assertTrue(!value2.equals(value1));\n+      // make sure the key hasn't changed under the hood\n+      assertEquals(keyString, valItr.getKey().toString());\n+      valItr.nextKey();\n+    }\n+  }\n+\n+  public void testValueIterator2() throws Exception {\n+    Path tmpDir = new Path(\"build/test/test.reduce.task\");\n+    Configuration conf = new Configuration();\n+    Pair[] test = new Pair[]{ new Pair(\"k1\", \"v1\"), new Pair(\"k1\", \"v2\") };\n+    runValueIterator2(tmpDir, test, conf);\n+  }\n }\n{noformat}\n\nh2. A program with a bug\n\nI would imagine that a programmer would be really confused when everything is equal in the example below, for any text input:\n\n{noformat}\npackage test;\n\nimport java.io.*;\nimport java.util.*;\n\nimport org.apache.hadoop.fs.Path;\nimport org.apache.hadoop.conf.*;\nimport org.apache.hadoop.io.*;\nimport org.apache.hadoop.util.*;\nimport org.apache.hadoop.mapred.*;\nimport org.apache.hadoop.mapred.lib.*;\n\npublic class TestNewReducer extends Configured implements Tool {\n    public int run(String[] args) throws Exception {\n        if (args.length < 2) {\n            System.out.println(\"TestNewReducer <inDir> <outDir>\");\n            return -1;\n        }\n\n        JobConf conf = new JobConf(getConf(), TestNewReducer.class);\n        conf.setJobName(\"test-newreducer\");\n\n        conf.setInputFormat(TextInputFormat.class);\n\n        conf.setMapperClass(Map.class);\n        conf.setReducerClass(Reduce.class);\n\n        conf.setOutputFormat(TextOutputFormat.class);\n        conf.setOutputKeyClass(LongWritable.class);\n        conf.setOutputValueClass(Text.class);\n\n        FileInputFormat.setInputPaths(conf, new Path(args[0]));\n        FileOutputFormat.setOutputPath(conf, new Path(args[1]));\n\n        JobClient.runJob(conf);\n        return 0;\n    }\n\n    public static void main(String[] args) throws Exception {\n        int res = ToolRunner.run(new Configuration(), new TestNewReducer(), args);\n        System.exit(res);\n    }\n\n    public static class Map extends MapReduceBase implements Mapper <LongWritable, Text, LongWritable, Text> {\n        private final static LongWritable nill = new LongWritable(1);\n\n        public void map (LongWritable key, Text value,\n                OutputCollector<LongWritable, Text> output,\n                Reporter reporter) throws IOException {\n            output.collect(nill, value);\n        }\n    }\n\n    public static class Reduce extends MapReduceBase implements Reducer<LongWritable, Text, LongWritable, Text> {\n        private final static LongWritable nill = new LongWritable(1);\n\n        public void reduce(LongWritable key, Iterator<Text> values,\n                OutputCollector<LongWritable, Text> output,\n                Reporter reporter) throws IOException {\n            Text t1 = null;\n            if (values.hasNext())\n                t1 = values.next(); // t1 is the first element in values\n\n            while(values.hasNext()) {\n                // is this element equal to t1?\n                Text t = values.next();\n                output.collect(nill, t.equals(t1) ? new Text(\"Equal\") : new Text(\"Not equal\"));\n            }\n        }\n    }\n}\n{noformat}\n\nh2. Possible fixes\n# Return a new object each time for next(). This might have significant overhead.\n# Return a new object for unknown object types and reuse the same object for known types (like Text). Remove \"if (this==anObject) return true;\" check from all equals() methods for known objects.\n# Document clearly that all user-defined classes must implement an equals() method, which doesn't do the \"if (this==anObject) return true;\" check (ie. push the problem to the user).",
        "duedate": null,
        "environment": null,
        "fixVersions": [{
            "archived": false,
            "description": "",
            "id": "12313190",
            "name": "0.17.1",
            "releaseDate": "2008-06-23",
            "released": true,
            "self": "https://issues.apache.org/jira/rest/api/2/version/12313190"
        }],
        "issuelinks": [],
        "issuetype": {
            "avatarId": 21133,
            "description": "A problem which impairs or prevents the functions of the product.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
            "id": "1",
            "name": "Bug",
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
            "subtask": false
        },
        "labels": [],
        "lastViewed": null,
        "priority": {
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "id": "3",
            "name": "Major",
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3"
        },
        "progress": {
            "progress": 0,
            "total": 0
        },
        "project": {
            "avatarUrls": {
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12310240&avatarId=10095",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12310240&avatarId=10095",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12310240&avatarId=10095",
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12310240&avatarId=10095"
            },
            "id": "12310240",
            "key": "HADOOP",
            "name": "Hadoop Common",
            "projectCategory": {
                "description": "Scalable Distributed Computing",
                "id": "10292",
                "name": "Hadoop",
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/10292"
            },
            "self": "https://issues.apache.org/jira/rest/api/2/project/12310240"
        },
        "reporter": {
            "active": true,
            "avatarUrls": {
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452",
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452"
            },
            "displayName": "Spyros Blanas",
            "key": "sblanas",
            "name": "sblanas",
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=sblanas",
            "timeZone": "Etc/UTC"
        },
        "resolution": {
            "description": "A fix for this issue is checked into the tree and tested.",
            "id": "1",
            "name": "Fixed",
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1"
        },
        "resolutiondate": "2008-06-17T23:14:17.000+0000",
        "status": {
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "id": "5",
            "name": "Resolved",
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "statusCategory": {
                "colorName": "green",
                "id": 3,
                "key": "done",
                "name": "Done",
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3"
            }
        },
        "subtasks": [],
        "summary": "ValuesIterator.next() doesn't return a new object, thus failing many equals() tests.",
        "timeestimate": null,
        "timeoriginalestimate": null,
        "timespent": null,
        "updated": "2008-06-18T13:41:47.000+0000",
        "versions": [{
            "archived": false,
            "description": "",
            "id": "12312913",
            "name": "0.17.0",
            "releaseDate": "2008-05-20",
            "released": true,
            "self": "https://issues.apache.org/jira/rest/api/2/version/12312913"
        }],
        "votes": {
            "hasVoted": false,
            "self": "https://issues.apache.org/jira/rest/api/2/issue/HADOOP-3522/votes",
            "votes": 0
        },
        "watches": {
            "isWatching": false,
            "self": "https://issues.apache.org/jira/rest/api/2/issue/HADOOP-3522/watchers",
            "watchCount": 3
        },
        "workratio": -1
    },
    "id": "12397863",
    "key": "HADOOP-3522",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/12397863"
}