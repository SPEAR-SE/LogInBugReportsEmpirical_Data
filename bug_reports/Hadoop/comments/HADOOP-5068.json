[Stack trace of the failure is as follows:
{noformat}
java.lang.NullPointerException
	at org.apache.hadoop.mapred.JobInProgress.garbageCollect(JobInProgress.java:2361)
	at org.apache.hadoop.mapred.JobInProgress.terminateJob(JobInProgress.java:2067)
	at org.apache.hadoop.mapred.JobInProgress.terminate(JobInProgress.java:2082)
	at org.apache.hadoop.mapred.JobInProgress.kill(JobInProgress.java:2133)
	at org.apache.hadoop.mapred.TestCapacityScheduler$FakeTaskTrackerManager.killJob(TestCapacityScheduler.java:359)
	at org.apache.hadoop.mapred.TestCapacityScheduler.testClusterBlockingForLackOfMemory(TestCapacityScheduler.java:2070)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at junit.framework.TestCase.runTest(TestCase.java:154)
	at junit.framework.TestCase.runBare(TestCase.java:127)
	at junit.framework.TestResult$1.protect(TestResult.java:106)
	at junit.framework.TestResult.runProtected(TestResult.java:124)
	at junit.framework.TestResult.run(TestResult.java:109)
	at junit.framework.TestCase.run(TestCase.java:118)
	at junit.framework.TestSuite.runTest(TestSuite.java:208)
	at junit.framework.TestSuite.run(TestSuite.java:203)
	at org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestReference.java:130)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)
{noformat}



Looks like the kill() method in FakeJobInProgress is causing this issue., Setting it to Major, as the case seems to be random. Please comment if you disagree., I could reproduce the problem, it surfaces very often in consecutive runs. The reason for the (random) failure:

In FakeTaskTrackerManager.killJob(),
{code}
    public void killJob(JobID jobid) throws IOException {
      JobInProgress job = jobs.get(jobid);
      finalizeJob(job, JobStatus.KILLED);
      job.kill();
    }
{code}
If the job state becomes RUNNING back again after the finalizeJob call, job.kill() will throw the above posted exception. This is possible when JobInitializationPoller calls FakeJobInProgress.initTasks() after finalizeJob method call finishes but before job.kill() starts.

This failure mostly resulted after the fix for asynchronizing initTasks via JobInitializationPoller went in.

Attaching patch. Removed job.kill() from killJob() as it is truly not needed. Also, used ControlledJobInitialization so that initialization poller doesn't come our way. I ran the test many times now, and do not see any failures any more., Looked at the attached patch. The patch looks good.

But can we do one of the below:

* Change the initialization poller interval in FakeResourceManagerConf same way reclaim capacity interval is set? That way you can see to that init-poller thread causes timing issues for other tests.
* Change setup() in the TestCapacityScheduler to set init-poller to ControlledJobInitializationPoller.

I do agree with the removing of job.kill() in killJob in FakeTaskTrackerManager since mostly we are dealing only with status changes., Sreekanth, I too concur with you that asynchronous initiliazation by JobInitializationPoller *may* cause some other tests to fail in future, particularly whereever job status is examined. As of now, I don't see any test behaving like that, so I left all other tests as they are., bq. Change setup() in the TestCapacityScheduler to set init-poller to ControlledJobInitializationPoller.

+1, atleast to the concept, i.e. make ControlledJobInitializationPoller the default initializer of jobs in the TestCapacityScheduler class.

Vinod, if the change is in setup only and we can test the change easily, I would like this patch to address that change as well. Can you please try and see if it works., Attaching patch that changes test setup() in the TestCapacityScheduler to set init-poller to ControlledJobInitializationPoller., Can you please synch up the patch with the latest trunk and upload it again? The patch cannot be applied cleanly., I messed up my git repo for the second time today. Here's the updated patch., +1 to the patch. 

Can you upload the output of ant test-patch? , 
The patch only touches contrib/capacity-scheduler's testcase.

ant test-patch results follow:
{code}
     [exec] +1 overall.  
     [exec] 
     [exec]     +1 @author.  The patch does not contain any @author tags.
     [exec] 
     [exec]     +1 tests included.  The patch appears to include 3 new or modified tests.
     [exec] 
     [exec]     +1 javadoc.  The javadoc tool did not generate any warning messages.
     [exec] 
     [exec]     +1 javac.  The applied patch does not increase the total number of javac compiler warnings.
     [exec] 
     [exec]     +1 findbugs.  The patch does not introduce any new Findbugs warnings.
     [exec] 
     [exec]     +1 Eclipse classpath. The patch retains Eclipse classpath integrity.
{code}, Is this committed? Many hudson builds are failing with the following in this test :

{noformat}
org.apache.hadoop.mapred.TestCapacityScheduler.testClusterBlockingForLackOfMemory

java.lang.NullPointerException
	at org.apache.hadoop.mapred.JobInProgress.garbageCollect(JobInProgress.java:2454)
	at org.apache.hadoop.mapred.JobInProgress.terminateJob(JobInProgress.java:2133)
	at org.apache.hadoop.mapred.JobInProgress.terminate(JobInProgress.java:2148)
	at org.apache.hadoop.mapred.JobInProgress.kill(JobInProgress.java:2216)
	at org.apache.hadoop.mapred.TestCapacityScheduler$FakeTaskTrackerManager.killJob(TestCapacityScheduler.java:359)
	at org.apache.hadoop.mapred.TestCapacityScheduler.testClusterBlockingForLackOfMemory(TestCapacityScheduler.java:2070)
{noformat}

Please commit the patch if it is ready.

, Running thro' Hudson, +1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12398390/HADOOP-5068-20090121-git-1.txt
  against trunk revision 750237.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs warnings.

    +1 Eclipse classpath. The patch retains Eclipse classpath integrity.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch-vesta.apache.org/46/testReport/
Findbugs warnings: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch-vesta.apache.org/46/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Checkstyle results: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch-vesta.apache.org/46/artifact/trunk/build/test/checkstyle-errors.html
Console output: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch-vesta.apache.org/46/console

This message is automatically generated., I have committed this to 0.20 and above.  Thanks, Vinod!]