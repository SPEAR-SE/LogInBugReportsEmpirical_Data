[Had a discussion with Devaraj. There are two ways in which this can be avoided.
# Have a safe-mode like thingy where the jobtracker doesnt schedule any task but allows trackers to join back. Upon recovery, the jobtracker knows about all the tasktracker that the pervious jobtracker knew about. The new jobtracker waits for all the trackers to join back before opening up for scheduling. So the scheduling will start when
  _num-reconnect-trackers + num-trackers-lost == num-trackers-known-upon-restart_
# schedule tasks greedily but then kill the newly scheduled tasks if an older attempt join back. There will be a bit of trashing.

We personally feel that option 1 is better as it avoids unnecessary scheduling and killings. , Attaching a patch the delays the scheduling while all the expected trackers are discovered. Result of test-patch
{code}
[exec] +1 overall.  
     [exec] 
     [exec]     +1 @author.  The patch does not contain any @author tags.
     [exec] 
     [exec]     +1 tests included.  The patch appears to include 6 new or modified tests.
     [exec] 
     [exec]     +1 javadoc.  The javadoc tool did not generate any warning messages.
     [exec] 
     [exec]     +1 javac.  The applied patch does not increase the total number of javac compiler warnings.
     [exec] 
     [exec]     +1 findbugs.  The patch does not introduce any new Findbugs warnings.
     [exec] 
     [exec]     +1 Eclipse classpath. The patch retains Eclipse classpath integrity.
     [exec] 
     [exec]     +1 release audit.  The applied patch does not increase the total number of release audit warnings.
{code}

Attaching a simple testcase., Some comments:
1. You can move recoveryManager.unMarkTracker call to hasRestarted() check, instead of doing it in processHeartbeat.
2. recoveredTrackers Set should be made concurrent set., Attaching a patch incorporating Amareshwari's comments. Result of test-patch 
{code}
[exec] +1 overall.  
     [exec] 
     [exec]     +1 @author.  The patch does not contain any @author tags.
     [exec] 
     [exec]     +1 tests included.  The patch appears to include 6 new or modified tests.
     [exec] 
     [exec]     +1 javadoc.  The javadoc tool did not generate any warning messages.
     [exec] 
     [exec]     +1 javac.  The applied patch does not increase the total number of javac compiler warnings.
     [exec] 
     [exec]     +1 findbugs.  The patch does not introduce any new Findbugs warnings.
     [exec] 
     [exec]     +1 Eclipse classpath. The patch retains Eclipse classpath integrity.
     [exec] 
     [exec]     +1 release audit.  The applied patch does not increase the total number of release audit warnings.
{code}
Running ant test now., Changes look fine to me., Attaching patch fixing some testcases that fail with this patch. Result of test-patch
{code}
[exec] +1 overall.  
     [exec] 
     [exec]     +1 @author.  The patch does not contain any @author tags.
     [exec] 
     [exec]     +1 tests included.  The patch appears to include 9 new or modified tests.
     [exec] 
     [exec]     +1 javadoc.  The javadoc tool did not generate any warning messages.
     [exec] 
     [exec]     +1 javac.  The applied patch does not increase the total number of javac compiler warnings.
     [exec] 
     [exec]     +1 findbugs.  The patch does not introduce any new Findbugs warnings.
     [exec] 
     [exec]     +1 Eclipse classpath. The patch retains Eclipse classpath integrity.
     [exec] 
     [exec]     +1 release audit.  The applied patch does not increase the total number of release audit warnings.
{code}

Ant test passed on my box., +1, -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12403695/HADOOP-5337-v1.11.patch
  against trunk revision 759030.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 12 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs warnings.

    +1 Eclipse classpath. The patch retains Eclipse classpath integrity.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    -1 contrib tests.  The patch failed contrib unit tests.

Test results: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch-vesta.apache.org/149/testReport/
Findbugs warnings: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch-vesta.apache.org/149/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Checkstyle results: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch-vesta.apache.org/149/artifact/trunk/build/test/checkstyle-errors.html
Console output: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch-vesta.apache.org/149/console

This message is automatically generated., Attaching a patch the cuts down on the testcase runtime to ~2min. , {{TestDatanodeBlockScanner}}, {{TestBackupNode}} and {{TestCapacityScheduler}} failed. Investigating. , {{TestBackupNode}},  {{TestDatanodeBlockScanner}} passed on my box. {{TestCapacityScheduler}} fails on trunk., Tested this patch on 60 nodes and tasks are not scheduled greedily. Killed a tracker while the jobtracker was down and the patch waits for the tracker to be lost before opening up for scheduling., I just committed this. Thanks, Amar!, Integrated in Hadoop-trunk #796 (See [http://hudson.zones.apache.org/hudson/job/Hadoop-trunk/796/])
    . JobTracker, upon restart, now waits for the TaskTrackers to join back before scheduling new tasks. This fixes race conditions associated with greedy scheduling as was the case earlier. Contributed by Amar Kamat.
]