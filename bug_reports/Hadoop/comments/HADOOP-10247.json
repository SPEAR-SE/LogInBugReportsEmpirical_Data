[See below for sample output that demonstrates the problem.  The reason for this is that {{Ls#adjustColumnWidths}} executes separately for each recursion down the tree via the base {{Command}} class.  Therefore, it can calculate the max lengths and readjust only for the subset of paths that it encounters within that recursion.  If it encounters a larger max length lower down in the tree, then it's too late to adjust for the paths higher in the tree that were already printed.

I don't see an obvious way to fix this completely.  I don't think we can iterate through all paths recursively to get a more accurate max length calculation, because that would require holding the whole tree in memory on the client side.

{code}
[chris@Chriss-MacBook-Pro:ttys003] hadoop-deploy-HDFS-4685                                                          
> hadoop-3.0.0-SNAPSHOT/bin/hdfs dfs -ls -R /
drwxr-xr-x   - chris supergroup          0 2014-01-18 08:50 /dir1
-rw-r--r--   3 chris        supergroup          6 2014-01-18 08:50 /dir1/file1
-rw-r--r--   3 longusername supergroup          6 2014-01-18 08:50 /dir1/file2
drwxr-xr-x   - chris        supergroup          0 2014-01-18 08:50 /dir2
-rwxrwxrwt   3 chris        supergroup          6 2014-01-19 10:56 /file3
{code}
, Yea, I agree with your analysis Chris. I think this is why (at least on my machine) {{ls -lR}} prints directory-by-directory, so it can align one directory at a time. I guess we could change it to the per-dir format, but that's probably incompatible, and we'd need a little more effort yet if the shell is using the batched listing API.]