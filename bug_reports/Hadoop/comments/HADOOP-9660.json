[Did some further testing with this:
Under powershell command line args[] is send as:
{code}
PS D:\hbase> bin/hbase org.apache.hadoop.hbase.TestCmd -D key=value
[-D, key, value]
PS D:\hbase> bin/hbase org.apache.hadoop.hbase.TestCmd -D "key=value"
[-D, key, value]
PS D:\hbase> bin/hbase org.apache.hadoop.hbase.TestCmd -D '"key=value"'
[-D, key=value]
PS D:\hbase> bin/hbase org.apache.hadoop.hbase.TestCmd -D "'key=value'"
[-D, 'key, value']
{code}

Under cmd:
{code}
D:\hbase>bin\hbase org.apache.hadoop.hbase.TestCmd -Dkey=value
[-Dkey, value]
D:\hbase>bin\hbase org.apache.hadoop.hbase.TestCmd -D key=value
[-D, key, value]
D:\hbase>bin\hbase org.apache.hadoop.hbase.TestCmd -D "key=value"
[-D, key=value]
D:\hbase>bin\hbase org.apache.hadoop.hbase.TestCmd -D "key=value"
[-D, key=value]
D:\hbase>bin\hbase org.apache.hadoop.hbase.TestCmd -D 'key=value'
[-D, 'key, value']
D:\hbase>bin\hbase org.apache.hadoop.hbase.TestCmd -D '"key=value"'
[-D, 'key=value']
{code}

Notice that quoting with "" works for cmd, but not for cmd, and single + double quote works for powershell but not for cmd. , Attaching branch1 and branch2 patches. Branch 2 also applies to trunk. 

Testes the patches locally, and with 
{code}
bin/hadoop fs -Dkey=value "-Dfs.default.name=somefs" -ls /
{code}
Seems to work. , {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12588954/hadoop-9660-branch2_v1.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-common-project/hadoop-common.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HADOOP-Build/2686//testReport/
Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/2686//console

This message is automatically generated., Any interest in getting this in? We need this for HBase on windows, and Hadoop itself. , I think the problem has more to do with the 'hadoop.cmd' scripts than with Powershell.

1) Powershell will remove double quotes in command line arguments. This seems reasonable because I think some other shells like bash also do the same thing.
2) Cmd will removed “=” unless quoted because '=' is a delimiter in cmd script.
http://ss64.com/nt/syntax-esc.html

The second behavior is really annoying.
, In Powershell 3.0, the behavior 1) can be override by given a ‘--%’ after the cmd command.
So with the following syntax in Powershell 3.0, you don’t need to supplement the single quotes around double quotes.
hadoop --% “-Dkey=value”
In the hadoop.cmd, since equal sign are now quoted, it will not be treated as a delimiter.

In Powershell 2.0, you have to use single quotes trick as you have found on the stackoverflow page.

[~enis], could you elaborate the HBase scenarios a little bit to help us understand why you need the change?
, The problem both affects hadoop and hbase, and all implementations of Tool interface in other projects. Mainly, -Dkey=value is used to override configuration parameters from command line. At least 10 different classes use this to accept command line arguments in HBase, also Hadoop's own FSShell, JobClient, etc. 

What I am trying to solve is that the user should not have to do powershell or cmd specific workarounds for passing the args. The thing about --% is that the user have to be aware of this limitation and remember to use this everywhere she is using -Dkey=value. Moreover, --% does not work with cmd. This means that the user has to be aware of whether she is using cmd or powershell, and depending on the shell, use --% or not. I fear this will make life hard for users as well as QA environments. , FWIW, as a user of bash, I need to know the rules of bash and how it interacts with the executables I call.  For example, I need to know that bash expands ~ to my home directory, so the ~ character doesn't go to my executable.  I need to know that $VAR evaluates an environment variable inside double-quotes, but not single-quotes.  bash sometimes does things that I personally find counter-intuitive, but when that happens, I expect that I need to address it at the level of bash.  I don't expect hadoop (or any other executable) to try to infer what I really meant.  Attempting to infer could have unintended side effects, such as making it impossible to pass just "-D" as an argument.  (I think the current patch would insert an '=' even if not desired.)

I'm not sure why the situation would be different for Powershell, cmd, or any other shell., I see your argument for the user to know the shell, but the convention for -D parameter passing to override conf has already been established and well documented since the early days of hadoop (see http://hadoop.apache.org/docs/current/hadoop-project-dist/hadoop-common/CommandsManual.html). I am trying to keep the same command line arguments passing to not create further confusion for the user. 

bq. Attempting to infer could have unintended side effects, such as making it impossible to pass just "-D" as an argument.
Right now, you cannot pass -D as an argument to your class anyway, given that class implements Tool, and uses ToolRunner. -D parsing in GenericOptionsParser right now, just ignores -Dkey if there is not a '=' in it. The only thing that this patch changes is that if you are using -Dkey some_other_parameter, an incorrect usage which is silently ignored, then this will cause it to be parsed as -Dkey=some_other_parameter. I don't see this as breaking compatibility. , Thanks, Enis.  It's a good point about the many years of online documentation and books.  Without this change, a Windows user might not be able to just paste in those samples and have it work.

The patch itself looks really good.  Just a couple of minor style nits: the test has a few lines that need to be wrapped at 80 characters, and the last line would be shorter by importing {{java.util.Arrays}} instead of spelling out the full class name for each call.

Thanks also for the clarification that passing just -D isn't supported anyway.  With that aside, I can't think of any other problematic edge cases.

I'd appreciate it if we could get a +1 (or additional feedback) from Chuan or someone else at Microsoft before I commit this.  I don't know Powershell well enough to know if there are other edge cases to consider.  :-), I think it is a pragmatic approach to support a scenario that are not supported previously. But we will support more command line options than documented with this change on Windows. From cmd shell, we only support {{"-Dkey=value"}} previously. With this change, we will support the following syntax:
{noformat}
"-Dkey=value"
-Dkey=value
-D key=value
-D key value
-Dkey value
-D key,value
...
{noformat}

Is this correct?
, Thanks for looking into this. 
On linux bash using the GnuParser, -Dkey=value, "-Dkey=value" and -D key=value are all parsed equally. 
For the others, -D key value and -Dkey value would cause -Dkey to be parsed from GenericOptionsParser but it is ignored (see line: if (keyval.length == 2)) and value is sent to the user class. Currently if you are using this way, GenericOptionsParser will mis-parse your arguments anyway. With this patch, we make this valid. Since it was broken before, I do not think this will be a problem. 
For -D key,value, it would be silently ignored from GOP, and will continue to be so in linux. On powershell, I guess it would be valid if powershell sends it as ["-D","key","value"]. Would that be a problem? , Updated the patches with line wrap fixes and import Arrays. , bq. Would that be a problem?

I think it should be fine. I guess it will become an undocumented feature. :)
I hope we may transition to Powershell some day to avoid all these issues from cmd.

+1, {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12590121/hadoop-9660-branch2_v2.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-common-project/hadoop-common.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HADOOP-Build/2711//testReport/
Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/2711//console

This message is automatically generated., Thanks Enis for reporting and tackling this really annoying issue on Windows. I am reviewing your proposal/patch now ... will report back in a bit., I did a bit of unittesting of my own of the patch, and things are looking fine. One aspect I explicitly tested was having an equal sign in the value, since this is a legit scenario. Given that I couldn’t think of a counter example where the patch does not work (other than passing a value of –D what was already discussed), I am +1 on the proposal

I noticed one minor bug in the patch, the following line can throw IndexOutOfBoundsException:
{code}
      if (args[i].equals("-D")) {
        newArgs.add(args[i]);
        prop = args[++i];
{code}
Test case which catches it:
{code}
      args = new String[]{"-fs", "hdfs://somefs/", "-D"};
      expectedMap = Maps.newHashMap();
      assertDOptionParsing(args, expectedMap, expectedRemainingArgs);
{code}


Otherwise, +1

Thanks Enis!
, Thanks for the reviews. Attaching v3 which adds the unit test and fixed IOOBE from Ivan's comments. 

I'll commit this to trunk and hadoop-2. Should we also get this in branch-1-win and hadoop-2.1.0 next rc? , {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12590314/hadoop-9660-branch2_v3.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-common-project/hadoop-common.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HADOOP-Build/2714//testReport/
Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/2714//console

This message is automatically generated., Integrated in Hadoop-trunk-Commit #4034 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/4034/])
    HADOOP-9660 [WINDOWS] Powershell / cmd parses -Dkey=value from command line as [-Dkey, value] which breaks GenericsOptionParser (enis) (Revision 1499132)

     Result = SUCCESS
enis : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1499132
Files : 
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/GenericOptionsParser.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestGenericOptionsParser.java
, Thanks for the reviews. 
Committed this to trunk, branch-2 and branch-1-win. Only question is whether 2.1.0-beta should contain it or not.
I've set the fix version to 2.3.0 as per recent discussion thread on common-dev.  , Integrated in Hadoop-Yarn-trunk #259 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk/259/])
    HADOOP-9660 [WINDOWS] Powershell / cmd parses -Dkey=value from command line as [-Dkey, value] which breaks GenericsOptionParser (enis) (Revision 1499132)

     Result = FAILURE
enis : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1499132
Files : 
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/GenericOptionsParser.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestGenericOptionsParser.java
, Integrated in Hadoop-Hdfs-trunk #1449 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/1449/])
    HADOOP-9660 [WINDOWS] Powershell / cmd parses -Dkey=value from command line as [-Dkey, value] which breaks GenericsOptionParser (enis) (Revision 1499132)

     Result = FAILURE
enis : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1499132
Files : 
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/GenericOptionsParser.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestGenericOptionsParser.java
, Integrated in Hadoop-Mapreduce-trunk #1476 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/1476/])
    HADOOP-9660 [WINDOWS] Powershell / cmd parses -Dkey=value from command line as [-Dkey, value] which breaks GenericsOptionParser (enis) (Revision 1499132)

     Result = SUCCESS
enis : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1499132
Files : 
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/GenericOptionsParser.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestGenericOptionsParser.java
, Chris notified me that the commit broke branch-1-win since Guava is not there. I had tested this in a different branch close to branch-1-win (which had guava). Attaching an addendum for branch-1-win which replaces usage of Maps api. , Thanks, Enis.  The addendum patch fixed it.  +1, committed to branch-1-win., I've noticed that in HBase, we still have a lot of classes which accept their arguments in --key=value or --key=val1,val2,val3 or similar formats. I had opened HBASE-8901 for tracking this, in which I created a small .ps1 script to pre-parse the arguments. Can you please take a look at that to see whether that makes sense or not. , I intend to merge this down to branch-2.2 later today., bq. I intend to merge this down to branch-2.2 later today.
Makes sense., I merged to branch-2.2 for inclusion in the 2.2.1 release.  Thanks again for this patch, Enis., SUCCESS: Integrated in Hadoop-trunk-Commit #4699 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/4699/])
HADOOP-9660. Update CHANGES.txt. (cnauroth: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1539535)
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
, SUCCESS: Integrated in Hadoop-Yarn-trunk #385 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk/385/])
HADOOP-9660. Update CHANGES.txt. (cnauroth: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1539535)
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
, FAILURE: Integrated in Hadoop-Mapreduce-trunk #1602 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/1602/])
HADOOP-9660. Update CHANGES.txt. (cnauroth: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1539535)
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
, SUCCESS: Integrated in Hadoop-Hdfs-trunk #1576 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/1576/])
HADOOP-9660. Update CHANGES.txt. (cnauroth: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1539535)
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
]