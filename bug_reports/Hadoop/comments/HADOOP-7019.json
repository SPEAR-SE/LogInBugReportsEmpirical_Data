[Current build does it _only_ for the purpose of artifacts deployment. instrumented build for system testing (there are no 'fault injection' artifacts per se) are needed for upstream projects in order to run cluster based system tests. 

Hope it helps to understand the picture a bit better., I propose we make building of the jars optional with a switch, do it for 'ant mvn-install' without the switch is too hard during development. I'll open similar jiras for hdfs and map-reduce., These artifacts are supposedly useful for system intergration tests, which are not yet really officially implemented anywhere, AFAIK.

For the sake of existing CI build systems, we can have mvn-install doing the current thing, which can depend on two new targets: mvn-core-install and mvn-fi-install. So developers and users not hampered by the slowness/breakage related to fi targets.

We should do the same thing for test as well, which currently runs fi tests. Currently "test" depends on "test-core", which runs fi tests as well. We should fix the test-core to run non-fi tests only., bq. I propose we make building of the jars optional with a switch, do it for 'ant mvn-install' without the switch is too hard during development. I'll open similar jiras for hdfs and map-reduce. 
+1.  For standard development work, the cost of building and deployment can be significant when aggregated, with no benefit., +1 it takes a long time to mvn install with fault injection enabled., Just for the clarity sake: these aren't fault injection. The fact that system framework uses code injection doesn't make any fault related. With this said...

bq. mvn-core-install and mvn-fi-install.
no 'fi' should be used in this context. These are system testing related, as you've pointed out quite property.

bq. system intergration tests, which are not yet really officially implemented anywhere
*Simply not true*: these were regularly executed for y! 0.20 release (oops, have I leaked a corporate secret?). I don't know the state of affairs now though.

bq. For standard development work, the cost of building and deployment can be significant when aggregated, with no benefit.

One of the perhaps not-clear benefits is to guarantee that changes in the system code haven't brake the bindings of the system framework.

I think I'm ok with moving these out of 'mvn-install' target to say 'mvn-system-install'. However, the following should be stated:
 - if a code bindings are broken it will bite back at {{test-patch}} validation
 - deployment of system testing artifacts should remain in 'mvn-deploy' target for the above stated reasons., The patch incorporates cos' feedback.

* mvn-install no longer install si artifacts
* mvn-si-install will install system integration test artfiacts.
* test-core no longer runs fi tests
* test-fi is introduced as an alias to run fi tests., Luke, fault injection tests are the part of test cycle (again, they are _different_ from system tests using code injection). They shouldn't be removed that easily. Just to provide you with some background: in HDFS a majority of append code is tested with fault-injection tests. By moving fault injection away from core testing you are accepting a  'welcome regressions' pattern.  Also, the title of the JIRA is misleading - I will change it.

, +1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12466500/hadoop-7019-trunk-v1.patch
  against trunk revision 1050070.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

    +1 system test framework.  The patch passed system test framework compile.

Test results: https://hudson.apache.org/hudson/job/PreCommit-HADOOP-Build/140//testReport/
Findbugs warnings: https://hudson.apache.org/hudson/job/PreCommit-HADOOP-Build/140//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://hudson.apache.org/hudson/job/PreCommit-HADOOP-Build/140//console

This message is automatically generated., bq. They shouldn't be removed that easily.

They are not removed. The usual "test" target includes all tests, which is usually required for accepting patches. Decouple test-core from fi tests is a good thing, it enables people to make finer grained decisions for checkings into internal branches etc., Arguable (see my above point) though. Nonetheless, you are addressing two different issues with the same patch for fault injection tests are not the same as system tests., And system tests weren't included neither to {{test-core}} nor to {{test}} because they have specific deployment requirements., The goal for the patch is to enable a faster cross project dev cycles. The sub-project split in 0.22 requires mvn-install to propagate changes between projects. The si/fi related delays become acute.  Since it's counter-productive to split a trivial tiny patch to even more trivial and tinier patches, I'm changing the jira title to fit the goal., As per [this comment|https://issues.apache.org/jira/browse/HDFS-1543?focusedCommentId=12972726&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#action_12972726] fault injection tests are very fast. In fact they take 12 sec/case on average (unit test type of execution speed).

Thus removing the target from test-core cycle solves nothing. 

The problem I am seeing (as per comment above) is that fault inject test target run the same test 3 times. This seems to be a regression from a recent test targets splitting. This needs to be fixed for sure. FI part of your patches solves nothing though., And my comment above about multiple execution isn't related to Common: this is HDFS and MR issue. I have posted the fix for HDFS., I appreciate your concern, cos. But the fi tests are already covered by 'test' and 'test-patch', so your fear is unfounded.

bq. Thus removing the target from test-core cycle solves nothing. 

It solves a couple of things:

* Decouple  fi tests from core tests so they can be developed separately in parallel by different group of people. Many devs except some hdfs folks working on a specific set of problems don't care about fi tests in there dev cycles. It enables fast API change dev cycles across projects, which otherwise would be hampered by non-compiling fi code because the way aop works (brittle to API changes.)
* When running a *single* test (~1s), leaving the fi targets increase the total time 3x+ to 71 seconds, from which "weaving aspects" takes about a minute.
** Before my changes: ant test-core -Dtestcase=TestUserGroupInformation takes 71 seconds in repeated runs with no change to source code. The test itself takes less than a second. 
** After my changes the same test takes 20 seconds (our build overhead is huge! which can be improved, which will lead to even dramatic speed up, as the aspect weaving time is O(n) to the code base, i.e., it'll getting slower), 15s if we remove the paranamer (from avro) process., I'll try to explain it once more:
bq. But the fi tests are already covered by 'test' and 'test-patch', so your fear is unfounded. 

FI tests aren't covered by {{test-patch}}. System tests are. They _are_ different.

bq. When running a single test (~1s), leaving the fi targets increase the total time 3x+ to 71 seconds
Sorry, where the multiplier comes from? Does it indicates the number of subprojects? 

bq. ant test-core -Dtestcase=TestUserGroupInformation
ant run-test-core... will produce desired result. That's why FI tests were never included into {{run-test-core}} target.

Again, this is the matter of opinion. Current target's hierarchy was discussed at the time when fault injection framework has been introduced into Hadoop source code base. If the community decides that FI tests shouldn't executed as a part of core test-cycle - so be it. And then this issues needs to be separated (according to your own logic from a upstream JIRA) into two JIRAs: one for system test artifacts and another one for FI tests., v2 patch only moves si artifact out of mvn-install, as fi test issue has a workaround (not proper because run-test-core is not supposed to be a user facing target.)

bq. I'll try to explain it once more: 

You know I meant test and test-patch as one process. Also test-patch does also exercise the fi compilation.

bq. Sorry, where the multiplier comes from? Does it indicates the number of subprojects? 

Simple math: 71 / 20 = 3.55

bq. ant run-test-core... will produce desired result.

run-* targets are not user facing, i.e., they're implementation details., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12466655/hadoop-7019-trunk-v2.patch
  against trunk revision 1050070.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

    +1 system test framework.  The patch passed system test framework compile.

Test results: https://hudson.apache.org/hudson/job/PreCommit-HADOOP-Build/142//testReport/
Findbugs warnings: https://hudson.apache.org/hudson/job/PreCommit-HADOOP-Build/142//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://hudson.apache.org/hudson/job/PreCommit-HADOOP-Build/142//console

This message is automatically generated., This is losing focus. The issue is trying to shorten cross-project build times. It takes no position on the value of the work done during a {{mvn-install}}, only its relevance to the immediate, development context. I hope the following are uncontroversial:

# If test-patch takes an extra minute, 10 minutes, or hour to verify the correctness of the framework, it's time well spent. That doesn't require that it happen during development cycles, where things are often partially, temporarily broken.
# A patch breaking the test-patch cycle prevents that automated process from validating the framework, admitting preventable regressions. Patches that break it should not be committed, modulo reasonable exceptions.
# If a patch _is_ committed that breaks the test-patch cycle, it should not halt all downstream development.

I don't care if these are system tests, fault-injection tests, or unit tests. They're taking a long time to build in an inner loop of the dev cycle, and while building them _is important_, pulling it into the outer loop- validation of the patch- is an admissible optimization., +1 patch looks good. Thank you Luke, -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12466655/hadoop-7019-trunk-v2.patch
  against trunk revision 1071364.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

    +1 system test framework.  The patch passed system test framework compile.

Test results: https://hudson.apache.org/hudson/job/PreCommit-HADOOP-Build/254//testReport/
Findbugs warnings: https://hudson.apache.org/hudson/job/PreCommit-HADOOP-Build/254//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://hudson.apache.org/hudson/job/PreCommit-HADOOP-Build/254//console

This message is automatically generated., I have just committed this. Thanks Luke!, Integrated in Hadoop-Common-trunk-Commit #543 (See [https://hudson.apache.org/hudson/job/Hadoop-Common-trunk-Commit/543/])
    HADOOP-7019 Refactor build targets to enable faster cross project dev cycles. Contributed by Luke Lu.
, Integrated in Hadoop-Common-trunk #649 (See [https://hudson.apache.org/hudson/job/Hadoop-Common-trunk/649/])
    HADOOP-7019 Refactor build targets to enable faster cross project dev cycles. Contributed by Luke Lu.
]