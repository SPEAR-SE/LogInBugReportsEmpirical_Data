[This problem is due to FileSystem.CACHE, which  stores FileSystem objects accroding to the schemes and authorities, but not user information.  

Suppose user foo has called FileSystem.getFileSystem(...) with some uri U.
User bar calls getFileSystem(...) with another uri V, where the schemes and authorities of U and V are the same.
Then, getFileSystem(...) returns the FileSystem with foo's account to bar.

In this problem, JobTracker has called getFileSystem(...) at first.  Then, some task calls getFileSystem(...).  It turns out getting a FileSystem with JobTracker's account.
The user information of the task stored in jobConf is not used because of FileSystem.CACHE.

Possible solutions:
- In addition of schemes and authorities, add user information to the keys of FileSystem.CACHE.

- A cached FileSystem object will be removed from FileSystem.CACHE when calling FileSystem.close().  So, we close each FileSystem object before another FileSystem is opened.  However, this might affect performance.

I guess the first one is better.
, 2915_20080229.patch:
- changed the keys of FileSystem.CACHE.
- closed the FileSystem opened for each task.

need a test., 2915_20080302.patch: added a unit test, 2915_20080303.patch: not using IOUtils.closeStream(fs) anymore., Tests for setting up cluster and running jobs with different users will be added in HADOOP-2929., You can not use UserGroupInformation as the the key in a hash table, because it has no hash function or equals defined. I would recommend using the user name instead, since String has all of the important methods defined.

In general abbreviations in variable names are hard to read and "saToFs" is pretty opaque.

The finally should go on the same line as the closing brace.

It seems really error-prone having a cache that gives out FileSystems more than once and requiring users to close them. Take for instance, the case where a user has two jobs running at the same time, you can easily end up with two copies of the FileSystem being used for different jobs. I propose that we fix this by making the FileSystem cache contain weak references to the file systems and make the finializers close the filesystem.

The JobTracker should keep a reference to the output file system in JobInProgress and continue to use it over again. When the job completes, the fields should be cleared by JobTracker.markCompletedJob, so that it can be reclaimed by the garbage collector., Actually, you should use JobInProgress.garbageCollect to clear the field in the JobInProgress., > It seems really error-prone having a cache that gives out FileSystems more than once and requiring users to close them. Take for instance, the case where a user has 
> two jobs running at the same time, you can easily end up with two copies of the FileSystem being used for different jobs. I propose that we fix this by making the 
> FileSystem cache contain weak references to the file systems and make the finializers close the filesystem.

Will the finalizer also delete the filesystem entry from the cache? It probably should otherwise we could end up lots of dead weak references in the cache. Need to be careful when deleting the entry. A weak reference will start returning null before the finalizer is run. Between the time the weak reference dies and the finalizer is run another call to get() could cause a new filesystem object to be instantiated for the authority and user. The finalizer should delete the entry iff the weakreference is currently returning null. It should also deal with the entry not being present.




, > Take for instance, the case where a user has two jobs running at the same time, you can easily end up with
> two copies of the FileSystem being used for different jobs. I propose that we fix this by making the 
> FileSystem cache contain weak references to the file systems and make the finializers close the filesystem.

Does a weak reference guarantee anything? shouldn't we assume finalize almost never gets called? Is that ok? , Nigel, Sameer, Owen, Nicholas and Rob reconsidered the question of closing FileSystems during finalization. The thinking was that <em>some</em> file systems might have a behavior whereby streams do not imply a FileSystem reference so that closing an unreferenced FileSystem might close a stream. To avoid encountering such behavior, there should be no close on finalize.

, 2915_20080305d.patch:
- reimplementing FileSystem cache (but not using WeakReference)
- incorporated Owen's previous review comments, I don't see how the added test is testing the relevant code.

The MultipleIOException's toString won't print right. (You need to iterate over the values, manually...) Furthermore, it should be exceptions.size() + " exceptions: " + ... instead of "Totally " + exceptions.size() + "exceptions " + .... Furthermore, you won't see the call stack of the exceptions, which is pretty critical.

You also missed the job history. It needs to be written as the submitting user instead of the job tracker.
, > I don't see how the added test is testing the relevant code.
The test check whether the object returned by FileSystem.get(...) depends on the user information., 2915_20080306c.patch:
- MultipleIOException.getExceptions() to get the underlying exceptions.
- Moved the tests in HADOOP-2929 to this patch., +1 assuming it passes QA, 2915_20080307.patch:
- MultipleIOException uses super constructor to initial message instead of overridding toString()
- fixed some tests, Previous patch not tested since last night, resubmitting it with a updated patch., -1 overall.  Here are the results of testing the latest attachment 
http://issues.apache.org/jira/secure/attachment/12377376/2915_20080307.patch
against trunk revision 619744.

    @author +1.  The patch does not contain any @author tags.

    tests included +1.  The patch appears to include 32 new or modified tests.

    javadoc +1.  The javadoc tool did not generate any warning messages.

    javac +1.  The applied patch does not generate any new javac compiler warnings.

    release audit +1.  The applied patch does not generate any new release audit warnings.

    findbugs +1.  The patch does not introduce any new Findbugs warnings.

    core tests -1.  The patch failed core unit tests.

    contrib tests -1.  The patch failed contrib unit tests.

Test results: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/1913/testReport/
Findbugs warnings: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/1913/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Checkstyle results: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/1913/artifact/trunk/build/test/checkstyle-errors.html
Console output: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/1913/console

This message is automatically generated., 2915_20080307b.patch: fixed the failed tests, 2915_20080307b_16.patch: this is a patch for 0.16, +1 overall.  Here are the results of testing the latest attachment 
http://issues.apache.org/jira/secure/attachment/12377409/2915_20080307b.patch
against trunk revision 619744.

    @author +1.  The patch does not contain any @author tags.

    tests included +1.  The patch appears to include 45 new or modified tests.

    javadoc +1.  The javadoc tool did not generate any warning messages.

    javac +1.  The applied patch does not generate any new javac compiler warnings.

    release audit +1.  The applied patch does not generate any new release audit warnings.

    findbugs +1.  The patch does not introduce any new Findbugs warnings.

    core tests +1.  The patch passed core unit tests.

    contrib tests +1.  The patch passed contrib unit tests.

Test results: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/1914/testReport/
Findbugs warnings: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/1914/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Checkstyle results: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/1914/artifact/trunk/build/test/checkstyle-errors.html
Console output: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/1914/console

This message is automatically generated., 2915_20080307c.patch, 2915_20080307c_16.patch: FileSystem is not closed by JobTracker., +1 Looks good, +1 overall.  Here are the results of testing the latest attachment 
http://issues.apache.org/jira/secure/attachment/12377417/2915_20080307c.patch
against trunk revision 619744.

    @author +1.  The patch does not contain any @author tags.

    tests included +1.  The patch appears to include 45 new or modified tests.

    javadoc +1.  The javadoc tool did not generate any warning messages.

    javac +1.  The applied patch does not generate any new javac compiler warnings.

    release audit +1.  The applied patch does not generate any new release audit warnings.

    findbugs +1.  The patch does not introduce any new Findbugs warnings.

    core tests +1.  The patch passed core unit tests.

    contrib tests +1.  The patch passed contrib unit tests.

Test results: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/1915/testReport/
Findbugs warnings: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/1915/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Checkstyle results: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/1915/artifact/trunk/build/test/checkstyle-errors.html
Console output: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/1915/console

This message is automatically generated., I just committed this.  Thanks Nicholas!, Integrated in Hadoop-trunk #424 (See [http://hudson.zones.apache.org/hudson/job/Hadoop-trunk/424/])]