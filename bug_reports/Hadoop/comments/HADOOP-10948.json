[{color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12660621/HADOOP-10948.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

      {color:red}-1 javac{color}.  The applied patch generated 1262 javac compiler warnings (more than the trunk's current 1260 warnings).

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:red}-1 findbugs{color}.  The patch appears to introduce 3 new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-tools/hadoop-openstack.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HADOOP-Build/4497//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-HADOOP-Build/4497//artifact/trunk/patchprocess/newPatchFindbugsWarningshadoop-openstack.html
Javac warnings: https://builds.apache.org/job/PreCommit-HADOOP-Build/4497//artifact/trunk/patchprocess/diffJavacWarnings.txt
Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/4497//console

This message is automatically generated., fixed javac warning, {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12662455/HADOOP-10948-2.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:red}-1 findbugs{color}.  The patch appears to introduce 3 new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-tools/hadoop-openstack.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HADOOP-Build/4498//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-HADOOP-Build/4498//artifact/trunk/patchprocess/newPatchFindbugsWarningshadoop-openstack.html
Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/4498//console

This message is automatically generated., resubmitting. 

What are we do do here? The 0-byte pseudo dir went copying s3n; this swift pseudo-dir thing seems a swift-specific feature. It's obviously better, but has implications for backwards compatibility., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12662455/HADOOP-10948-2.patch
  against trunk revision 6f9fe76.

    {color:red}-1 @author{color}.  The patch appears to contain  @author tags which the Hadoop community has agreed to not allow in code contributions.

    {color:green}+1 tests included{color}.  The patch appears to include  new or modified test files.

    {color:red}-1 patch{color}.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/5504//console

This message is automatically generated., Is there an avenue for maintaining backwards compatibility? It seems the only risk is for directories already created in swift with SwiftNativeFileSystem.  Would it suffice to only create new directories using the trailing-slash model but to recognize either model for the purposes of reading existing directories?, * We applied the patch and have noticed a significant degradation in performance, specifically in listing files (may affect other areas too). * We found that in the patch, an additional head call is made to each subpath when listing a dir (to determine if the manifest header exists etc).
 * This significantly affects performance especially if the number of files in a particular "directory" are large. (few seconds without the patch vs minutes with the patch for nFiles > 500~1000) (due to increased number of rest calls)

Specifically these lines cause the issue:
{code}
+      if (!name.endsWith("/")) {
+        final Path filePath = getCorrectSwiftPath(new Path(name));
+        files.add(getObjectMetadata(filePath, newest));
+      } else {
+        final Path dirPath = getCorrectSwiftPath(toDirPath(new Path(name)));
+        files.add(getObjectMetadata(dirPath, newest));
       }
{code}
]