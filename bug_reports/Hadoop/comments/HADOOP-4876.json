[Attaching patch to address this issue.

Reverted the TaskSchedulingMgr.updateQSIObject() to include pending jobs.

Added a new method in JobQueueManager, to get waiting jobs., I have added an extra structure to store waiting jobs, because I wanted to reduce the amount of time spent on getWaitingJobQueue method of the JobQueueManager.

Added two test cases :

1. Test case to check capacity reclamation, even when the job is not initialized. 
2. Test the waiting job api and removal of the job from the waiting job structure., To summarize the problem: 

HADOOP-4513 caused some code to be mistakenly removed from TaskSchedulingMgr.updateQSIObject(). This code computed the number of pending tasks, if required, from the list of waiting jobs. We need to know if there are pending tasks in queue in order to start reclaiming capacity for the queue if necessary. It's not enough to look at running jobs only. We must start the timer for reclaiming capacity the moment a job is submitted to a queue that does not have its Guaranteed Capacity. Consider the following case. You have a queue that is empty, and its capacity is being utilized by other queues. Now someone submits a job to it. That job will only show up in the run queue once the initialization thread gets to it, so by looking at the jobs in the run queue only, you're starting its reclaim timer later than you should. 
, Attaching new patch incorporating Vivek's comments based on an offline discussion.

1. Changes to JobQueueManager is reverted back. 
2. CapacityScheduler updateQSIObjects() now does a status check for checking if the job status is waiting then uses the job for computation of pending task count
3. Removed testcase which was introduced to check JobQueueManager's new method., Minor nit: can you add a comment to the code describing why you need to check that a job's state is PREP before adding its pending tasks to the global count? we're doing this because a job can be in both the run queue and wait queue because fo HADOOP-4513, and so we don't want to count it twice. Otherwise, looks fine. , Attaching patch incorporating vivek's comment:

1. Added comment in updateQSIObjects(), stating why the check for job run state is done.

, Looking good.

Can you please upload test-patch results so I can commit this. Thanks !

, output of ant test-patch is attached:

{noformat}
  [exec]
     [exec]
     [exec] +1 overall.
     [exec]
     [exec]     +1 @author.  The patch does not contain any @author tags.
     [exec]
     [exec]     +1 tests included.  The patch appears to include 3 new or modified tests.
     [exec]
     [exec]     +1 javadoc.  The javadoc tool did not generate any warning messages.
     [exec]
     [exec]     +1 javac.  The applied patch does not increase the total number of javac compiler warnings.
     [exec]
     [exec]     +1 findbugs.  The patch does not introduce any new Findbugs warnings.
     [exec]
     [exec]     +1 Eclipse classpath. The patch retains Eclipse classpath integrity.
     [exec]
     [exec]
     [exec]
{noformat}

no failures while running ant test-contrib., Marked this a blocker, as it can break functionality of reclaiming capacity. I just committed this to trunk and the Hadoop 0.20 branch.

Thanks, Sreekanth !, Integrated in Hadoop-trunk #698 (See [http://hudson.zones.apache.org/hudson/job/Hadoop-trunk/698/])
    ]