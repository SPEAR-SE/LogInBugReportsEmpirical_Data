[> a directory with a whitespace name is hard to understand.

You may be right but systems like GNU/Linux support this.  For example,
{noformat}
[latest]$ mkdir " "
[latest]$ mkdir " "/foo
[latest]$ cd \ /foo/
[foo]$ pwd
/home/tsz/hadoop/latest/ /foo
{noformat}, Why stop on trim left? 
IMHO you should assume that the whitespace is part of the delimitation, not of the pathname.

I'm not sure where the split happens to look at the code, but I suggest:
{code}
String parts[] = value.split("\\s*,\\s*");
{code}

And/Or pathnames with space could be placed in quotes which are trimmed off, however, double quote is also an acceptable file/diretory name on GNU/Linux., +1 for trimming on either side of the dir path.

It is ok not to have the flexibility to specify directories with spaces at the end. If a user really wants to use such directories, as symlink could be used. Note that we already have restriction that directory names can not have ',' in their name., And by using XML1.0, you have an explicit restriction on not having any characters < 32 in the name other than, possibly, CR, LF and TAB. 

One thing to consider in testing this is to try some high-UTF8 characters and see that everything works with non-ascii filenames, as that checks assumptions quite well., getStrings() trims leading and trailing whitespace by default now.
Patch includes also a simple unit test., Patch updated, it was adding a warning on StringUtils., Patch looks OK, but why not use str.split("\\s*,\\s*") as suggested by Craig above? Then you can simply use Arrays.asList and not have to iterate over the split array to create an ArrayList., Patch updated, now it's using {code:java}split("\\s*,\\s*"){code}

@tlipcon: Thanks for the comment! Gotta be honest, I wasn't using the regex because I thought mine was the only way to let getStrings() behave as it was doing before regarding trailing empty tokens. 
Actually, I took a look at the code which is using getStrings(), and throwing away the trailing empty token should not break anything (while helps the users who leave a final comma without any following path). Anyway, to make it behave as it was before, just add a -1 as the second argument of split(). Hope it's OK now :-), I think this patch changes the behavior of getStrings when the configured value is the empty string "":

{noformat}
bsh % System.out.println("".split("\\s*,\\s*").length);
1
bsh % System.out.println("".split("\\s*,\\s*")[0]);    

bsh % import java.util.StringTokenizer;
bsh % StringTokenizer tk = new StringTokenizer("", ",");
bsh % System.out.println(tk.hasMoreTokens());
false
{noformat}

maybe the condition just needs the additional !str.trim().equals(""), -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12410578/HADOOP-2366.patch
  against trunk revision 784663.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs warnings.

    +1 Eclipse classpath. The patch retains Eclipse classpath integrity.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    -1 contrib tests.  The patch failed contrib unit tests.

Test results: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch-vesta.apache.org/499/testReport/
Findbugs warnings: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch-vesta.apache.org/499/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Checkstyle results: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch-vesta.apache.org/499/artifact/trunk/build/test/checkstyle-errors.html
Console output: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch-vesta.apache.org/499/console

This message is automatically generated., Lots of test failures on this one. Michele: can you look into these failures please? Thanks, Patch modified to make getStrings() behave as before with whitespace-only strings.

Todd: thanks a lot for the feedback, I'm running an 'ant test' in a local server to see if tests are failing again. Feel free to move back the issue to "In Progress" status - I'll let you know as soon as the build ends. 
Sorry for the naiveness, I didn't know that Hudson was triggered by the "Patch Available" status... skipped an important section in the wiki page, shame on me!, Hi Michele, StringUtils contain common utility codes, which are not only used in HDFS but also other parts of Hadoop.  Therefore, changing the behavior of methods like getStringCollection(..) is very likely to break other existing codes.  That's why there were so many tests failed.

In this issue, I think we should only trim the values of dfs.data.dir, but not all conf values.  See also HADOOP-4212.

Thank you for working on this., Tsz Wo: In reviewing this patch, I grepped for other usages of StringUtils.getStrings and getStringCollection. It appears to me that the only user other than Configuration is StreamJob for handling some command line flags (where the whitespace trimming also makes good sense). Inside Configuration, it's used for getClasses as well as various file-path related things. Looking at uses of conf.getStrings I also can't find any that look like they would cause an issue.

If tests pass after fixing the behavior on an empty conf, do you have an issue with changing the semantics of these utility functions so long as the new behavior is clearly documented in the javadoc?, > If tests pass after fixing the behavior on an empty conf, do you have an issue with changing the semantics of these utility functions so long as the new behavior is clearly documented in the javadoc?

Configuration is a public class and is not a part of fs or hdfs.  Trimming the string values may make sense in fs/hdfs paths but it may not for the other usages.  Personally, I wish the trimming was done in the beginning.  Unfortunately, it was not.  If we change it now, then it breaks existing semantics.  I think that users rarely use leading or tailing spaces in configuration values but we cannot break them.

When I worked on HADOOP-2461, I think that the property names should be trimmed but not the values. Otherwise, it forbids the potential use of leading and trailing spaces. If there is a need, the codes using the conf values should do the trimming.  In this issue, only the values for dfs.data.dir should be trimmed.

If a trimmed version of getStrings(..) is needed, I think it is better to provide new methods, say getTrimmedStrings(..) in Configuration and StringUtils but not changing the existing ones., I attached a separate patch which exposes a getTrimmedStrings() method and modifies only the behavior of the Datanode.
When the property value is empty, the behavior of getTrimmedStrings is by purpose different from getStrings(). I'd rather pass an empty array which is handled correctly by Datanode.instance(), than a null which causes NPE. 
Just let me know if you want me to fix this behavior and make it consistent with the other methods, mine was just a proposal.

Todd: I run a whole ant clean test cycle with the other patch, and it fails anyway. I gave a shallow look with greps on getStrings() when I was attaching the first version, and I had your same impression. Actually, after that fix you suggested, I was expecting the tests to run smoothly, but probably there's something missing still. I'll leave the patch attached, in case it could be useful.

Tsz Wo: thanks for the hints. run-test-core was successful, hope will be the same with the Hudson build., New interface sounds better. NameNode also reads a list of directories. Could you check if this fix is required there as well?, As suggested by Raghu, patch now modifies also NameNode behavior.  
NN was using directly getStringCollection(), so I just added a new getTrimmedStringCollection()., Can someone with the correct privileges make Michele a contributor and reassign this issue?, Is there something I should do to trigger again the Hudson build with the new patch?, After the project split, this problem needs two separated patches, one for Common and the other one for HDFS.  I think we should change Configuration and StringUtils in this issue and create a new HDFS issue for the rest., Same logic as the previous patch, without the HDFS part.
I'll create a new issue in the HDFS project linked to this one., Michele, could you run "ant test-patch" and "ant test" over your patch, and then post the results?, Tsz Wo: build successful for "ant test"


{code} 
-1 overall.  
+1 @author.  The patch does not contain any @author tags.
+1 tests included.  The patch appears to include 3 new or modified tests.
+1 javadoc.  The javadoc tool did not generate any warning messages.
 -1 javac.  The applied patch generated 64 javac compiler warnings (more than the trunk's current 124 warnings).
+1 findbugs.  The patch does not introduce any new Findbugs warnings.
+1 release audit.  The applied patch does not increase the total number of release audit warnings.
{code}


for "ant test-patch". No idea about the warnings, probably I messed up something in forrest/findbugs?, I have committed this.  Thanks, Michele!, Integrated in Hadoop-Common-trunk #13 (See [http://hudson.zones.apache.org/hudson/job/Hadoop-Common-trunk/13/])
    . Support trimmed strings in Configuration.  Contributed by Michele Catasta
]