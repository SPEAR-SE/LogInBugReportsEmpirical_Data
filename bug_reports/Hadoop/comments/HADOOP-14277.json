[This test ran on hardware that is decently well-loaded and so might have some extra latency in it. I believe that this exacerbated a race condition in the test. If the trash emptierThread takes more than 20ms to delete a checkpoint, then the test will fail, since there is only 20ms of wiggle room between the deletion interval and the time that the emptierThread is alive. 

Also, I'm not sure I quite understand what this test is testing. The comment above the test says that it is testing fs.trash.interval after a restart, but I'm unclear on where the restart occurs or how this is simulated. And along those lines, if I followed the code correctly, fs.trash.interval is set by AuditableTrashPolicy.initialize, which is test code. We then test to make sure that the interval got updated correctly. But the test controls the interval that was written as well as the interval that was used. This would seem to mean that we're testing the test code rather than a production TrashPolicy implementation. 

[~xyao], [~cheersyang], can you help me understand the test and give suggestions on fixing the race?, Hi [~ebadger]

Thanks for the notice. The intention of this test was to increase the testing coverage for trash interface, to make sure it behaves correctly on a NN restart. NN launches a new trash emptier thread when it gets started in {{startActiveServices}}, so I used similar way in this test to verify {{TrashPolicy#createCheckpoint}} and {{TrashPolicy#deleteCheckpoint}} can be called as designed, and {{fs.trash.interval}} can be set correctly during a restart.

Do you have the log of the jenkins job where this test failed? The test code doesn't really do anything when deleting a checkpoint other than adding a count in {{AuditableCheckpoints}}, so I am wondering why this could be flaky., bq. NN launches a new trash emptier thread when it gets started in startActiveServices, so I used similar way in this test to verify TrashPolicy#createCheckpoint and TrashPolicy#deleteCheckpoint can be called as designed, and fs.trash.interval can be set correctly during a restart.
My issue with the test is that it creates {{AuditableTrashPolicy}} which extends {{TrashPolicy}}. {{TrashPolicy}} doesn't implement most of its important functions and overriding them in {{AuditableTrashPolicy}} just means that we'll be testing that the implementation of {{AuditableTrashPolicy}} is valid. However, {{AuditableTrashPolicy}} is a test class that isn't used in production and so this test is really only testing a test implementation, not a production implementation

bq. Do you have the log of the jenkins job where this test failed?
Here is the output of the test
{noformat}
Create a checkpoint, current number of checkpoints 1
Create a checkpoint, current number of checkpoints 2
Create a checkpoint, current number of checkpoints 3
Create a checkpoint, current number of checkpoints 4
Create a checkpoint, current number of checkpoints 5
Delete a checkpoint, current number of checkpoints 4
Delete a checkpoint, current number of checkpoints 3
{noformat}

bq. The test code doesn't really do anything when deleting a checkpoint other than adding a count in AuditableCheckpoints, so I am wondering why this could be flaky.
It doesn't do much, but it's dependent on things running smoothly. We're multithreaded here with the {{emptierThread}} and can't assume that things will be scheduled immediately, nor can we assume that they will run in some arbitrarily small amount of time. If a machine is heavily loaded, a thread might not get scheduled quickly or might get interrupted frequently. If the {{emptierThread}} waits long enough or is slowed down for whatever reason, it might take longer than 20ms to instantiate the {{AuditableTrashPolicy}} object and delete the checkpoint. This realistically should never take this long, which is why this is not a frequent failure. However, it is a race based on the fact that this test requires the execution of the entire {{empiterThread}} to take less than 120ms and that if it doesn't that the test will fail. , Hi [~ebadger]

The purpose of this test was not to test a trash policy implementation, i.e {{TrashPolicyDefault}}. It was to use some fake implementations to test trash API. Because the trash policy is plug-able, we need to ensure the public API is stable. Does that make sense?

Maybe we should increase the trash interval from 50ms to 500ms, 50ms seems to be too aggressive?  And were you seeing this failure in jenkins job results or while you are doing some other stuff related to trash? Please let me know. , bq. Does that make sense?
Yea, that makes a lot more sense. Thanks for the explanation. I think it would be good to add a comment to the test or change the name of the test to make it more clear about what it is testing.

bq. Maybe we should increase the trash interval from 50ms to 500ms, 50ms seems to be too aggressive?
I think it would be better to mock/spy the {{AuditableTrashPolicy}} so that we don't have to depend on a timeout at all. Instead, we can verify that the relevant method has been called x number of times with a configured timeout of something like 10 seconds. 

bq. And were you seeing this failure in jenkins job results or while you are doing some other stuff related to trash
This was just a nightly failure for our internal 2.8 build. , Thanks [~ebadger] for the suggestions, sounds good to me. Let me assign this one to myself, I will try the mockito approach. This is not my top priority task, if you want an immediate fix, feel free to assign this back.

Thank you!, Improved {{TestTrash#testTrashRestart}} in following ways

# Renamed {{testTrashRestart}} to {{testTrashInterfaces}} because this test generally verifies {{Trash}} and {{TrashPolicy}} API, and the expected behavior how it can be used.
# Removed inner classes {{AuditableCheckpoints}}, {{AuditableTrashPolicy}}, these helper classes were used to log counts for checkpoints. This patch now re-implement this with mockito approach, to verify if the method gets called by given times. Now most of short slice of sleeps are removed, instead using count down hatch to simulate time interval, it should be more reliable.
# Improved java docs, | (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue}  0m 19s{color} | {color:blue} Docker mode activated. {color} |
| {color:green}+1{color} | {color:green} @author {color} | {color:green}  0m  0s{color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:green}+1{color} | {color:green} test4tests {color} | {color:green}  0m  0s{color} | {color:green} The patch appears to include 1 new or modified test files. {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 13m 47s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 16m 24s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  0m 38s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  1m  7s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green}  0m 20s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  1m 34s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 50s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green}  0m 40s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 14m 11s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green} 14m 11s{color} | {color:green} the patch passed {color} |
| {color:orange}-0{color} | {color:orange} checkstyle {color} | {color:orange}  0m 35s{color} | {color:orange} hadoop-common-project/hadoop-common: The patch generated 1 new + 67 unchanged - 1 fixed = 68 total (was 68) {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  1m  1s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green}  0m 20s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green}  0m  0s{color} | {color:green} The patch has no whitespace issues. {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  1m 35s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 48s{color} | {color:green} the patch passed {color} |
| {color:red}-1{color} | {color:red} unit {color} | {color:red}  7m 55s{color} | {color:red} hadoop-common in the patch failed. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green}  0m 34s{color} | {color:green} The patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black} 64m 34s{color} | {color:black} {color} |
\\
\\
|| Reason || Tests ||
| Failed junit tests | hadoop.security.TestKDiag |
\\
\\
|| Subsystem || Report/Notes ||
| Docker |  Image:yetus/hadoop:612578f |
| JIRA Issue | HADOOP-14277 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12862664/HADOOP-14277.001.patch |
| Optional Tests |  asflicense  compile  javac  javadoc  mvninstall  mvnsite  unit  findbugs  checkstyle  |
| uname | Linux a63ecd466e48 3.13.0-106-generic #153-Ubuntu SMP Tue Dec 6 15:44:32 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | /testptch/hadoop/patchprocess/precommit/personality/provided.sh |
| git revision | trunk / 443aa51 |
| Default Java | 1.8.0_121 |
| findbugs | v3.0.0 |
| checkstyle | https://builds.apache.org/job/PreCommit-HADOOP-Build/12071/artifact/patchprocess/diff-checkstyle-hadoop-common-project_hadoop-common.txt |
| unit | https://builds.apache.org/job/PreCommit-HADOOP-Build/12071/artifact/patchprocess/patch-unit-hadoop-common-project_hadoop-common.txt |
|  Test Results | https://builds.apache.org/job/PreCommit-HADOOP-Build/12071/testReport/ |
| modules | C: hadoop-common-project/hadoop-common U: hadoop-common-project/hadoop-common |
| Console output | https://builds.apache.org/job/PreCommit-HADOOP-Build/12071/console |
| Powered by | Apache Yetus 0.5.0-SNAPSHOT   http://yetus.apache.org |


This message was automatically generated.

, | (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue}  0m 23s{color} | {color:blue} Docker mode activated. {color} |
| {color:green}+1{color} | {color:green} @author {color} | {color:green}  0m  0s{color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:green}+1{color} | {color:green} test4tests {color} | {color:green}  0m  0s{color} | {color:green} The patch appears to include 1 new or modified test files. {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 13m 26s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 15m 52s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  0m 36s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  1m 10s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green}  0m 21s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  1m 26s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 50s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green}  0m 38s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 14m  0s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green} 14m  0s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  0m 37s{color} | {color:green} hadoop-common-project/hadoop-common: The patch generated 0 new + 67 unchanged - 1 fixed = 67 total (was 68) {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  1m  2s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green}  0m 21s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green}  0m  0s{color} | {color:green} The patch has no whitespace issues. {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  1m 34s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 49s{color} | {color:green} the patch passed {color} |
| {color:red}-1{color} | {color:red} unit {color} | {color:red}  7m 52s{color} | {color:red} hadoop-common in the patch failed. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green}  0m 34s{color} | {color:green} The patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black} 63m 25s{color} | {color:black} {color} |
\\
\\
|| Reason || Tests ||
| Failed junit tests | hadoop.security.TestKDiag |
\\
\\
|| Subsystem || Report/Notes ||
| Docker |  Image:yetus/hadoop:612578f |
| JIRA Issue | HADOOP-14277 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12862769/HADOOP-14277.002.patch |
| Optional Tests |  asflicense  compile  javac  javadoc  mvninstall  mvnsite  unit  findbugs  checkstyle  |
| uname | Linux 37300289ae02 3.13.0-106-generic #153-Ubuntu SMP Tue Dec 6 15:44:32 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | /testptch/hadoop/patchprocess/precommit/personality/provided.sh |
| git revision | trunk / 7999318a |
| Default Java | 1.8.0_121 |
| findbugs | v3.0.0 |
| unit | https://builds.apache.org/job/PreCommit-HADOOP-Build/12077/artifact/patchprocess/patch-unit-hadoop-common-project_hadoop-common.txt |
|  Test Results | https://builds.apache.org/job/PreCommit-HADOOP-Build/12077/testReport/ |
| modules | C: hadoop-common-project/hadoop-common U: hadoop-common-project/hadoop-common |
| Console output | https://builds.apache.org/job/PreCommit-HADOOP-Build/12077/console |
| Powered by | Apache Yetus 0.5.0-SNAPSHOT   http://yetus.apache.org |


This message was automatically generated.

, [~cheersyang], thanks for the patch! I have just a few nits.

{noformat}
+      while(aliveCounts-- > 0) {
+        Thread.sleep(100);
+        countdownEmptier.countDown();
{noformat}
We shouldn't be sleeping for this long. Especially when aliveCounts is set to 5, that's an extra 1 second that we're adding to the test that shouldn't be necessary, since we verify twice. I don't think that we should be depending on sleeps at all. Anytime we are sleeping, we could instead be using a GenericTestUtils.waitFor() or something similar with a very low interval. Basically using a polling-based approach with configurable timeouts instead of trying to guess how long we need to wait. That way we aren't sitting around doing nothing for long periods of time. 

{noformat}
+    @Override public void run() {
+      while (true) {
+        // Once counts down to 0, new another latch for next interval
+        this.intervalSignal = new CountDownLatch(interval);
{noformat}
It would be nice if we didn't have to instantiate a new CountDownLatch every time we loop. Doesn't look like you can reset the CountDownLatch, but maybe use something like a CyclicBarrier with the threads set to 1? Though I'm not sure how expensive the overhead is for a CyclicBarrier. , Hi [~ebadger]

Thanks for your comments. Regarding to your two comments

bq. We shouldn't be sleeping for this long ...

I just uploaded v3 patch, in this patch I completely removed sleep code. Replaced with {{GenericTestUtils.waitFor()}} like you suggested to sync with emptier thread's work at each time interval with main thread. Now the test is running super fast, please check.

bq. It would be nice if we didn't have to instantiate a new CountDownLatch every time we loop...

I think you know I do that because I can't reset a {{CountDownLatch}}... well I actually thought about using {{CyclicBarrier}} and even {{Phaser}}, but could not find out a neat way though. The major reason is I need to simulate emptier intervals, and different intervals (current patch first verification interval is count 1, and second is count 2). If you think there is a better way to do so, please let me know. Anyway current approach doesn't bring us much overhead., | (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue}  0m 25s{color} | {color:blue} Docker mode activated. {color} |
| {color:green}+1{color} | {color:green} @author {color} | {color:green}  0m  0s{color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:green}+1{color} | {color:green} test4tests {color} | {color:green}  0m  0s{color} | {color:green} The patch appears to include 1 new or modified test files. {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 15m  7s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 17m 47s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  0m 38s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  1m 10s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green}  0m 21s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  1m 31s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 54s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green}  0m 45s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 15m  3s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green} 15m  3s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  0m 36s{color} | {color:green} hadoop-common-project/hadoop-common: The patch generated 0 new + 67 unchanged - 1 fixed = 67 total (was 68) {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  1m  2s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green}  0m 20s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green}  0m  0s{color} | {color:green} The patch has no whitespace issues. {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  1m 32s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 48s{color} | {color:green} the patch passed {color} |
| {color:red}-1{color} | {color:red} unit {color} | {color:red}  7m 57s{color} | {color:red} hadoop-common in the patch failed. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green}  0m 35s{color} | {color:green} The patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black} 68m 27s{color} | {color:black} {color} |
\\
\\
|| Reason || Tests ||
| Failed junit tests | hadoop.security.TestKDiag |
\\
\\
|| Subsystem || Report/Notes ||
| Docker |  Image:yetus/hadoop:612578f |
| JIRA Issue | HADOOP-14277 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12863097/HADOOP-14277.003.patch |
| Optional Tests |  asflicense  compile  javac  javadoc  mvninstall  mvnsite  unit  findbugs  checkstyle  |
| uname | Linux 23dec7afde58 3.13.0-106-generic #153-Ubuntu SMP Tue Dec 6 15:44:32 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | /testptch/hadoop/patchprocess/precommit/personality/provided.sh |
| git revision | trunk / b8305e6 |
| Default Java | 1.8.0_121 |
| findbugs | v3.0.0 |
| unit | https://builds.apache.org/job/PreCommit-HADOOP-Build/12090/artifact/patchprocess/patch-unit-hadoop-common-project_hadoop-common.txt |
|  Test Results | https://builds.apache.org/job/PreCommit-HADOOP-Build/12090/testReport/ |
| modules | C: hadoop-common-project/hadoop-common U: hadoop-common-project/hadoop-common |
| Console output | https://builds.apache.org/job/PreCommit-HADOOP-Build/12090/console |
| Powered by | Apache Yetus 0.5.0-SNAPSHOT   http://yetus.apache.org |


This message was automatically generated.

, {noformat}
+          GenericTestUtils.waitFor(new Supplier<Boolean>() {
+            @Override public Boolean get() {
+              return countdownEmptier.getCountLeft()
+                  == currentCount;
+            }
+          }, 10, 50);
{noformat}
50ms is much too small for a timeout here. I'd bump it up to something like 5 seconds. 

{noformat}
          } catch (IOException e) {
            // Expect no exception from deleting a checkpoint.
{noformat}
While we may not expect an exception, we can at least log one if it were to happen. Otherwise we're completely in the dark if the delete functionality changes and sometimes does throw.

The verifyCountdownEmptier thread and the emptier thread that's created inside of it are not properly synchronized. This leads to a test failure due to timeout exception ~1/6 of the time on my machine. At a glance, not sure what's causing this, but it's certainly an issue. , | (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue}  0m  0s{color} | {color:blue} Docker mode activated. {color} |
| {color:red}-1{color} | {color:red} patch {color} | {color:red}  0m 14s{color} | {color:red} HADOOP-14277 does not apply to trunk. Rebase required? Wrong Branch? See https://wiki.apache.org/hadoop/HowToContribute for help. {color} |
\\
\\
|| Subsystem || Report/Notes ||
| JIRA Issue | HADOOP-14277 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12863097/HADOOP-14277.003.patch |
| Console output | https://builds.apache.org/job/PreCommit-HADOOP-Build/13384/console |
| Powered by | Apache Yetus 0.6.0-SNAPSHOT   http://yetus.apache.org |


This message was automatically generated.

]