[Patch changing racknames to hostnames. 
Unit test to do "submit a job with CombineFileInputFormat "will added in HADOOP-5698. Now, I manually tested the patch by running multifile wordcount using CombineFileInputFormat, The patch does not apply cleanly because of the change to the test directory structure (src/test/org.. should be src/test/mapred/org/...), Since only hosts that actually contain the valid blocks are returned in getMoreSplits with this patch, it appears that we are losing the rack level aggregation that was intended for this InputFormat.

Dhruba, could you take a look as well? , This patch keeps the original aim of combining blocks from different hosts in the same rack into a single split. The fix that that patch attempts is to figure out where such a combined split should reside.


> Since only hosts that actually contain the valid blocks are returned in getMoreSplits with this patch,

I agree with Jothi to a certain extent. The number ofsplits remain the same before, but the possibility of scheduling them on the rack where they reside is slightly reduced because we look only at those hosts where this block belongs. It is possible to enhance this patch to create  a new data strcture called rackToNodes at the very beginning. It can be populated by iterating through all the blocks at the very beginning. , bq. It is possible to enhance this patch to create a new data strcture called rackToNodes at the very beginning. It can be populated by iterating through all the blocks at the very beginning.

Agreed. However, Amareshwari and I discussed this offline and we are not sure if we want to build this rackToNodes  before getMoreSplits method as it would mean calling getBlockLocations for all the blocks twice -- once to build the rackToNodes and once in getMoreSplits to build the blockInfo maps. Could we incrementally build this map in getMoreSplits. This would have the disadvantage of having incomplete information for the first few splits., Patch adding rackToNodes map incrementally., test-patch result:
{noformat}
     [exec]
     [exec] +1 overall.
     [exec]
     [exec]     +1 @author.  The patch does not contain any @author tags.
     [exec]
     [exec]     +1 tests included.  The patch appears to include 3 new or modified tests.
     [exec]
     [exec]     +1 javadoc.  The javadoc tool did not generate any warning messages.
     [exec]
     [exec]     +1 javac.  The applied patch does not increase the total number of javac compiler warnings.
     [exec]
     [exec]     +1 findbugs.  The patch does not introduce any new Findbugs warnings.
     [exec]
     [exec]     +1 Eclipse classpath. The patch retains Eclipse classpath integrity.
     [exec]
     [exec]     +1 release audit.  The applied patch does not increase the total number of release audit warnings.
     [exec]
{noformat}, Code looks good to me.  A few minor comments:

1. Is the change to addCreatedSplit() not needed anymore?
2. Since we added a static data structure rackToNodes, it might make sense to empty it just before returning from getSplits. This will ensure that we free up that memory sooner rather than later., bq. 1. Is the change to addCreatedSplit() not needed anymore?
{code}
@@ -412,7 +417,7 @@
    */
   private void addCreatedSplit(JobConf job,
                                List<CombineFileSplit> splitList, 
-                               List<String> racks, 
+                               List<String> locations, 
                                ArrayList<OneBlockInfo> validBlocks) {
     // create an input split
{code}
I changed the above, because racks are not passed to addCreatedSplit any more.

Added rackToNodes.clear() just before returning splits from getSplits, as suggested by Dhruba., +1 Code looks good., test-patch and ant test passed on my machine., test-patch :
{noformat}
     [exec] +1 overall.
     [exec]
     [exec]     +1 @author.  The patch does not contain any @author tags.
     [exec]
     [exec]     +1 tests included.  The patch appears to include 3 new or modified tests.
     [exec]
     [exec]     +1 javadoc.  The javadoc tool did not generate any warning messages.
     [exec]
     [exec]     +1 javac.  The applied patch does not increase the total number of javac compiler warnings.
     [exec]
     [exec]     +1 findbugs.  The patch does not introduce any new Findbugs warnings.
     [exec]
     [exec]     +1 Eclipse classpath. The patch retains Eclipse classpath integrity.
     [exec]
     [exec]     +1 release audit.  The applied patch does not increase the total number of release audit warnings.
     [exec]
{noformat}, I just committed this. Thanks Amareshwari!

, Committed to branch-0.20., I am trying to use CombineFile* classes to use in Zebra. After this patch, it works for me, so far.

However, I was wondering if somebody has done any performance analysis on CombineFile*    vs    InputFile* ( data locality   vs  ( non ) data-locality )

If so, can I have access to it? , Patch for Yahoo! distribution, The "patch-5759-ydist.txt" patch should be applied to branch-0.20-security and the 0.20.205 branch.
]