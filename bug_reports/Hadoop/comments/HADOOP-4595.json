[Note that both existing JVMs have their 'busy' status as true. But numFreeSlots was > 0; the preceeding log entry was:

2008-11-05 08:57:55,296 INFO org.apache.hadoop.mapred.TaskTracker: In TaskLauncher, current free slots : 1 and trying to launch attempt_200811040110_0230_r_000011_1


At the top of TaskTracker.run() , it waits for numFreeSlots to be > 0, then calls startNewTask(tip) which eventually calls TaskRunner.run() -> JvmManager.launchJvm() -> reapJvm(). numFreeSlots seems to be properly synchronized, as does JvmManager.JvmRunner.busy. So I think the error  may be that JvmRunner.busy isn't being set to false (by JvmRunner.taskRan()) before addFreeReduceSlot() is being called.  I can't figure out where these two methods (or other ones that work on the same state) are being called in relation to one another though.
, bq. Note that both existing JVMs have their 'busy' status as true. But numFreeSlots was > 0; 
I assume you mean that the number of reduce slots in the TaskTracker is 2.

bq. the preceeding log entry was: 2008-11-05 08:57:55,296 INFO org.apache.hadoop.mapred.TaskTracker: In TaskLauncher, current free slots : 1 and trying to launch attempt_200811040110_0230_r_000011_1
Did you notice whether this attempt got launched at all? Did it get killed immediately or something?

bq. The reduce output (part-XXXXX) gets lost when this attempt fails, even though the other (earlier) attempt succeeded.
I didn't understand this part. Could you please explain?, There are two reducers allowed per node; maxFreeSlots is 2. But it was in the middle of running tasks. numFreeSlots hit 1, even though two JVMs were already out there and marked as busy.

The attempt did not get launched. The launch process was what triggered the exception. , This patch fixes a race condition in updating free slot count when the load is high (leading to lost TTs). When a TT reinits, the TaskLauncher object is created again. A task that is currently running might end up incrementing the free slots of the new TaskLauncher object if it takes time to exit. This would lead to the behavior described by Aaron in the bug report. The patch fixes this by moving all code to do with incrementing free slots to one method and is done inline in TaskInProgress.kill

In addition, the patch fixes a race condition to do with starting MapEventsFetcher thread. The thread starts the loop after looking at TaskTracker.running flag. However, when a TT reinits, the running field is set to true only after the thread is spawned. If the thread is immediately scheduled, it will find running false and exit. This would lead to hung reduces.

I also cleaned up some code to do with TIP.cleanup during a task launch.
, Marking this for 0.19, I anyway did run the tests locally. Everything passed (including test-patch)., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12393608/4595.patch
  against trunk revision 712615.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no tests are needed for this patch.

    -1 javadoc.  The javadoc tool appears to have generated 1 warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs warnings.

    +1 Eclipse classpath. The patch retains Eclipse classpath integrity.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/3567/testReport/
Findbugs warnings: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/3567/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Checkstyle results: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/3567/artifact/trunk/build/test/checkstyle-errors.html
Console output: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/3567/console

This message is automatically generated., The javadoc warning is due to HADOOP-4621, +1, I just committed this.]