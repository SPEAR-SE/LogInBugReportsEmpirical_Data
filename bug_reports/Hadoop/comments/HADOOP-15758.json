[Here is a sample program to reproduce this issue: [https://gist.github.com/hgadre/38e1b625a6af70f1659fb19137a12ece]

The steps to reproduce are as follows
 * export KRB5CCNAME=/tmp/krb5cc_foo
 * export CLASSPATH=$CLASSPATH:$(hadoop classpath)
 * javac ReadWriteHDFSWithKinit.java
 * kinit -l 1m -kt hdfs.keytab [hdfs@ABC.COM|mailto:hdfs@ABC.COM] # kinit as a superuser (could be any user that has ability to proxy)
 * java ReadWriteHDFSWithKinit systest # note: access file as systest via the FileSystem.get(uri,conf,user) API

 

The last step fails with following exception,
{noformat}
WARN security.UserGroupInformation: PriviledgedActionException as:hdfs@ABC.COM (auth:KERBEROS) cause:javax.security.sasl.SaslException: GSS initiate failed [Caused by GSSException: No valid credentials provided (Mechanism level: Failed to find any Kerberos tgt)]
18/06/21 12:59:58 WARN ipc.Client: Exception encountered while connecting to the server : javax.security.sasl.SaslException: GSS initiate failed [Caused by GSSException: No valid credentials provided (Mechanism level: Failed to find any Kerberos tgt)]
18/06/21 12:59:58 WARN security.UserGroupInformation: PriviledgedActionException as:hdfs@ABC.COM (auth:KERBEROS) cause:java.io.IOException: javax.security.sasl.SaslException: GSS initiate failed [Caused by GSSException: No valid credentials provided (Mechanism level: Failed to find any Kerberos tgt)]
18/06/21 12:59:58 WARN hdfs.LeaseRenewer: Failed to renew lease for [DFSClient_NONMAPREDUCE_1855947848_1] for 30 seconds.  Will retry shortly ...
java.io.IOException: Failed on local exception: java.io.IOException: javax.security.sasl.SaslException: GSS initiate failed [Caused by GSSException: No valid credentials provided (Mechanism level: Failed to find any Kerberos tgt)]; Host Details : local host is: "host-2.abc.com/10.15.13.17"; destination host is: "host-1.abc.com":8020;{noformat}
 , As usual, can you tag this with the ASF hadoop version affected. thanks, + remove any references to your customer from that githib gist, I was asked to take a look and as best I can tell this is probably working as designed.  There is no mimic-ing of a proxy user.  Will confirm in a bit., [~daryn] thanks for looking into this issue. I investigated this a little deeper and here is my understanding,
 * HADOOP-6769 added the FileSystem.get(URI, Configuration, user) API to support remote users. The idea was to have FileSystem implementation create a remote user if the user argument is non-null. In the user parameter is null, the logic was to use the currently logged in user. 
 * At some later point HDFS-3568 added an ability to obtain UGI using the provided ticket cache file path. As part of this patch, a new method "getBestUGI" was introduced in UserGroupInformation class. This method handles three cases separately (a) if a ticket cache path is specified, it uses the credentials to prepare UGI and ignores user argument (b) if a ticket cache path is not specified and user name is provided, it creates a remote user and (c) if the ticket cache path and user name are not specified, it uses the currently logged in user.

Now as I see it, HDFS-3568 introduced an additional possibility - application provide the user name as well as the ticket cache path. The question is should it treat this as a proxy user scenario? If this scenario is not valid, then we probably need to add documentation to discourage its use or even throw an error?, I found that a only a small code change is required to support this proxy user scenario. Please find the attached patch. Please note that this is only for reference as I have not added any unit tests (just verified via manual testing) and hence not ready for commit.

 , [~hgadre] {quote}(b) if a ticket cache path is not specified and user name is provided, it creates a remote user {quote}

Ticket cache must be verified prior to create a remote user.  Without a validate ticket, Java code should not have access to create a remote user.  Proxy user check must be in place on server side to prevent security hole.

{quote}application provide the user name as well as the ticket cache path. The question is should it treat this as a proxy user scenario?{quote}

This seem like valid use case that spark and hive would depend on., HADOOP-12953 is to add proxy users support for FileSystem API. Linking it with this Jira since they are related., So in summary we need to decide if (a) we want to update existing 'FileSystem.get(URI, Configuration, user)'  API to work for proxy users OR (b) implement a new FileSystem API as proposed in HADOOP-12953.

[~daryn] [~stevel@apache.org] [~andrew.wang] any thoughts here?, {quote}Now as I see it, HDFS-3568 introduced an additional possibility - application provide the user name as well as the ticket cache path. The question is should it treat this as a proxy user scenario? If this scenario is not valid, then we probably need to add documentation to discourage its use or even throw an error?
{quote}
This api absolutely must not create a proxy user. The api is "I want to be this user from this ticket cache". Nothing more than nothing less. There's a fundamental misunderstanding of proxy users I'll attempt to clarify.
{quote}The user is trying to use this method signature to mimic proxy user functionality e.g. provide ticket cache based kerberos credentials
{quote}
You cannot mimic a proxy user. A proxy user is specific construct. There is no substitute. A proxy user is a ugi that lacks its own authentication credentials, thus it explicitly encapsulates a "real" ugi that does contain kerberos credentials. The real ugi's user must be specifically configured on the target service to allow impersonation of the proxied user.

There is no correlation between a proxy user and a ticket cache. The real ugi can supply ticket cache or keytab based credentials. All that matters is the real user has credentials.
{quote}The alternative, to use [proxy users functionality|https://hadoop.apache.org/docs/current/hadoop-project-dist/hadoop-common/Superusers.html] in Hadoop works as expected.
{quote}
It's not an alternative, it's the only option if you need impersonation.

Additionally, any impersonating service should never ever be ticket cache based.  Use a keytab.  Otherwise you may be very surprised with proxy user service morphs into a different user if/when someone/something does a kinit as a different user., [~daryn] thanks for the detailed response. I am closing this Jira as "Not a bug".]