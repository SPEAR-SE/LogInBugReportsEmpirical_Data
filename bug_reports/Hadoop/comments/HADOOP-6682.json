[Similar issue came up in MAPREDUCE-1222. The following code might be useful:

{noformat}
+  static Pattern IP_PATTERN;
+  
+  static {
+    // 0-255
+    String IPV4BK1 = "(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)";
+    // .b.c.d - where b/c/d are 0-255, and optionally adding two more
+    // backslashes before each period
+    String IPV4BKN = "(?:\\\\?\\." + IPV4BK1 + "){3}";
+    String IPV4_PATTERN = IPV4BK1 + IPV4BKN;
+    
+    // first hexadecimal number
+    String IPV6BK1 = "(?:[0-9a-fA-F]{1,4})";
+    // remaining 7 hexadecimal numbers, each preceded with ":".
+    String IPV6BKN = "(?::" + IPV6BK1 + "){7}";
+    String IPV6_PATTERN = IPV6BK1 + IPV6BKN;
+
+    IP_PATTERN = Pattern.compile(
+        "^(?:" + IPV4_PATTERN + "|" + IPV6_PATTERN + ")$");
+  }
+
+ 
+  static boolean isIPAddress(String hostname) {
+    return IP_PATTERN.matcher(hostname).matches();
+  }
{noformat}, The regex IPV4BKN needs some change because in job history dots (.) are escaped with double backslashes., Patch for Y20, which we forgot to upload at the time.  Not for commit., Patch for trunk.  Same as Y20 patch.  Just changes the base to 10 rather than 16.  

Hong, I like your approach and will open another JIRA to address the general shortcoming of the normalizeHostname function.  For this one I'd like to take as little risk as possible.

I considered writing a unit test for the fix that would try to normalize some host name that starts with an offending hostname (ask.com), but this would violate the unit-test-shouldn't-talk-to-outside-resources guideline, and couldn't think of a better way to test it.  If someone has one, let me and I'll add it.  Otherwise, I think it's good to go without one., submitting patch., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12446933/HADOOP-6682.patch
  against trunk revision 953910.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    -1 javadoc.  The javadoc tool appears to have generated 1 warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch-h1.grid.sp2.yahoo.net/79/testReport/
Findbugs warnings: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch-h1.grid.sp2.yahoo.net/79/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Checkstyle results: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch-h1.grid.sp2.yahoo.net/79/artifact/trunk/build/test/checkstyle-errors.html
Console output: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch-h1.grid.sp2.yahoo.net/79/console

This message is automatically generated., +1, I call bogus on the javadoc warning, since this patch doesn't affect that.  Re-run Hudson for test failure.  I don't see it on my machine, but let's see if it re-occurs., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12446933/HADOOP-6682.patch
  against trunk revision 953910.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    -1 javadoc.  The javadoc tool appears to have generated 1 warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch-h1.grid.sp2.yahoo.net/81/testReport/
Findbugs warnings: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch-h1.grid.sp2.yahoo.net/81/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Checkstyle results: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch-h1.grid.sp2.yahoo.net/81/artifact/trunk/build/test/checkstyle-errors.html
Console output: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch-h1.grid.sp2.yahoo.net/81/console

This message is automatically generated., I've committed this.  Resolving as fixed., Integrated in Hadoop-Common-trunk-Commit #301 (See [http://hudson.zones.apache.org/hudson/job/Hadoop-Common-trunk-Commit/301/])
    HADOOP-6682. NetUtils:normalizeHostName does not process hostnames starting with [a-f] correctly.
, Integrated in Hadoop-Common-trunk #364 (See [http://hudson.zones.apache.org/hudson/job/Hadoop-Common-trunk/364/])
    HADOOP-6682. NetUtils:normalizeHostName does not process hostnames starting with [a-f] correctly.
, The Y20 patch here is bogus btw it changes from 10 to 16 instead of vice versa. Doesn't look like it was applied anywhere so not a big deal., hmmm... must have run the patch the wrong way.  That was one crazy week.]