[The constructor: 

	public Configuration(Configuration other)
	
sets the defaultResources, and the finalResources but does not use them 
because it then sets the properties to a clone of the other.properties.

If someone then calls addFinalResource (as does JobConf) then the
'other' properties are just lost. This becomes a problem if you attempt to use: 
	public JobConf(Class exampleClass)  

My fix (there are several possible ways to fix this) is to just remember
the other.properties and then overlay then whenever getProps() loads the resources.

, Some mistakes in this submission (my first one, and I can't seem to edit them away).

Let me restate the bug.

This constructor

  public JobConf(Configuration conf) {
    super(conf);
    initialize();
  }

does not work as it should. The conf that is passed in gets lost.

The patch fixes this bug.

- alan wootton, shopping.com, Is there a reason why the patch was not submitted? I have encountered the same problem and patched it myself in a very similar way before finding out it had already been reported. Currently Configuration(conf) does not behave as expected.

Lorenzo Thione 
Powerset, Inc., > Is there a reason why the patch was not submitted?

Not a good one.  I think it just fell off my radar.

It would be good to add a unit test for this.  I think the use case is roughly:

Configuration c1 = new Configuration();
c1.set("foo", "bar");
Configuratoin c2 = new Configuration(c1);
assertEquals(c2.get("foo"), "bar");

Is that right?

The provided patch would fix this, but by setting all the values except "foo" twice: once when reloaded from resources and once when reloaded from overrides.  Perhaps it would be better to put all resource-loaded properties in a nested Properties instance that's inherited via 'new Properties(Properties)' and only store values set directly in a top-level Properties instance.  Or perhaps we should just set most of the values twice and not worry about it.  Thoughts, anyone?, Attached patch fixes problem with current implementation, dynamically set properties are now preserved. Extension to testcase is also provided., I just committed this.  Thanks, Sami!]