[-1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12535323/HADOOP-8569.001.patch
  against trunk revision .

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 eclipse:eclipse.  The patch built with eclipse:eclipse.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed these unit tests in hadoop-common-project/hadoop-common hadoop-hdfs-project/hadoop-hdfs hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager:

                  org.apache.hadoop.hdfs.TestDatanodeBlockScanner
                  org.apache.hadoop.hdfs.TestHDFSTrash

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HADOOP-Build/1175//testReport/
Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/1175//console

This message is automatically generated., How about doing this after HDFS-3537 and enabling _GNU_SOURCE for only the fuse-dfs build? I  think it's the only native src that requires _GNU_SOURCE., What I'm afraid of is issues where some function or feature is not detected as present because _GNU_SOURCE was not defined.  Unfortunately, when you artificially hide functions, these kind of issues are all too common, and they can prove difficult to diagnose.

There's really no disadvantage to defining _GNU_SOURCE that I'm aware of, so most projects just define it everywhere.  I think we should too., The disadvantage is that libhdfs currently compiles on non-gnu systems and this breaks that. What functions are we using that are currently being hidden that are only declared via _gnu_source? If the above is true we should be able to use these via including std headers., bq. The disadvantage is that libhdfs currently compiles on non-gnu systems and this breaks that.

Defining _GNU_SOURCE doesn't break the compile on any systems.  Nobody should be checking for this macro except on Linux.  If they are, then that's a bug on their part, which we can work around like this:

{code}
IF (${CMAKE_SYSTEM_NAME} MATCHES "Linux")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -D_GNU_SOURCE")
ENDIF()
{code}

I guess maybe we should do it like that.  Although it shouldn't matter.

bq. What functions are we using that are currently being hidden that are only declared via _gnu_source? If the above is true we should be able to use these via including std headers.

man sync_file_range
{code}
NAME
       sync_file_range - sync a file segment with disk

SYNOPSIS
       #define _GNU_SOURCE         /* See feature_test_macros(7) */
       #include <fcntl.h>

       int sync_file_range(int fd, off64_t offset, off64_t nbytes,
                           unsigned int flags);
{code}

As you can see, the man page tells you to define _GNU_SOURCE in order to make this function visible., The downside to defining {{_GNU_SOURCE}} everywhere -- in both code that is known to need it, and in code that is intended to be portable -- is that it makes it very easy to accidentally break compilation on non-GNU platforms by unintentionally changing code from "portable" to "gnu-specific".  Suppose we have a project with {{foo-linux.c}} containing nonportable code, and {{generic.c}} containing POSIX portable code.  If I define {{_GNU_SOURCE}} in {{CFLAGS}} then unintentionally adding a call to {{sync_file_range}} to {{generic.c}} will silently work on Linux, and won't break the build until you try building on Darwin or Solaris or whatever.

If instead the project puts {{#define _GNU_SOURCE}} at the top of files intended to be platform-specific, then such portability breakage will be noticed immediately.

The argument doesn't extend to LFS support -- it's entirely reasonable to use 64-bit-{{off_t}} everywhere including Linux-32.

{code}
+# note: can't enable -D_FILE_OFFSET_BITS=64: see MAPREDUCE-4258
+set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -D_REENTRANT -D_GNU_SOURCE")
+set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -D_LARGEFILE_SOURCE")
{code}
If we don't have FILE_OFFSET_BITS=64, then shouldn't we also leave out LARGEFILE_SOURCE?  (This is a serious question, I don't know how those two defines interact, I just vaguely remember that there's a complicated rule about how they should be used.)

In summary -- I'd slightly prefer to limit the GNU_SOURCE to a {{#define}} in the files that we intend to be Linux-specific.  The rest of this patch is good though, cleaning up the LFS defines and adding that comment about MAPREDUCE-4258., _GNU_SOURCE was defined previously in most (if not all) of our native projects.  After I did the CMake conversion, the fact that it wasn't defined in the CMakeLists.txt was a bug, not a feature.  That's what I'm trying to fix here.

I realize that it's tempting to assume that code that you write without _GNU_SOURCE defined will automatically be portable.  However, this is *NOT TRUE*.  For example, even without _GNU_SOURCE defined, you still get the non-POSIX definition of strerror_r out of glibc.

The only valid way to make sure your code is portable is to build and test it on multiple platforms.  Any other strategy is just a waste of time.  Defining GNU_SOURCE is similar to setting the correct DOCTYPE in your HTML file.  It tells the browser (or compiler in this case) to turn off "quirks mode" and give you the real deal.

I don't think the CheckFunctionExists stuff in the CMakeLists.txt will work consistently without _GNU_SOURCE defined.

There are better ways to improve our portability.  For example, we should probably have some OpenBSD jenkins build slaves.  But let's not waste our time messing with macros.  It really adds nothing but inconvenience.

bq. If we don't have FILE_OFFSET_BITS=64, then shouldn't we also leave out LARGEFILE_SOURCE?

_LARGEFILE_SOURCE exposes fseeko and ftello.   _FILE_OFFSET_BITS changes the default off_t type to be 64 bits.  Basically _LARGEFILE_SOURCE is something you need to define in addition to _FILE_OFFSET_BITS, but the two things do different things., Looks like the patch no longer applies to trunk. Colin, mind posting an updated patch?

I personally find Colin's arguments compelling - there doesn't seem to be much if any downside, and adding this really just serves to restore the previous situation before introduction of cmake. If there are no further objections, I'll commit this once Colin posts an updated patch., Updated version.

This version leaves out the changes to the YARN CMakeLists.txt, because {{_GNU_SOURCE}} was already added there., On a related note, I have a bunch of patches to get native compilation working under OpenBSD that I really should submit at some point., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12570546/HADOOP-8569.003.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-common-project/hadoop-common hadoop-hdfs-project/hadoop-hdfs.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HADOOP-Build/2219//testReport/
Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/2219//console

This message is automatically generated., +1, I'm going to commit this momentarily., I've just committed this to trunk and branch-2.

Thanks a lot for the contribution, Colin., Integrated in Hadoop-trunk-Commit #3379 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/3379/])
    HADOOP-8569. CMakeLists.txt: define _GNU_SOURCE and _LARGEFILE_SOURCE. Contributed by Colin Patrick McCabe. (Revision 1449922)

     Result = SUCCESS
atm : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1449922
Files : 
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/CMakeLists.txt
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/CMakeLists.txt
* /hadoop/common/trunk/hadoop-tools/hadoop-pipes/src/CMakeLists.txt
, Integrated in Hadoop-Yarn-trunk #139 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk/139/])
    HADOOP-8569. CMakeLists.txt: define _GNU_SOURCE and _LARGEFILE_SOURCE. Contributed by Colin Patrick McCabe. (Revision 1449922)

     Result = SUCCESS
atm : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1449922
Files : 
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/CMakeLists.txt
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/CMakeLists.txt
* /hadoop/common/trunk/hadoop-tools/hadoop-pipes/src/CMakeLists.txt
, Integrated in Hadoop-Hdfs-trunk #1328 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/1328/])
    HADOOP-8569. CMakeLists.txt: define _GNU_SOURCE and _LARGEFILE_SOURCE. Contributed by Colin Patrick McCabe. (Revision 1449922)

     Result = FAILURE
atm : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1449922
Files : 
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/CMakeLists.txt
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/CMakeLists.txt
* /hadoop/common/trunk/hadoop-tools/hadoop-pipes/src/CMakeLists.txt
, Integrated in Hadoop-Mapreduce-trunk #1356 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/1356/])
    HADOOP-8569. CMakeLists.txt: define _GNU_SOURCE and _LARGEFILE_SOURCE. Contributed by Colin Patrick McCabe. (Revision 1449922)

     Result = SUCCESS
atm : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1449922
Files : 
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/CMakeLists.txt
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/CMakeLists.txt
* /hadoop/common/trunk/hadoop-tools/hadoop-pipes/src/CMakeLists.txt
]