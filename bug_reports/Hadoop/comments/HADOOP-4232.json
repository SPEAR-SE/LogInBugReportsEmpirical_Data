[Attaching a patch that addresses the issue and cleans up the JVM management a fair bit.
1) The target JVM is reserved in JvmManager.reapJvm and JvmManager.spawnNewJvm. This makes it very predictable (as to which JVM will run which task) 
2) The above makes the TaskTracker.getTask simple. We just need to look up the mapping created earlier as opposed to iterating over the set of INITIALIZED tasks.
3) Due to the above, the task state, INITIALIZED, is now redundant and has been removed.
4) Tweaked the logic for the JVM sleep when there is nothing to execute a bit. Now the JVM goes to a longer sleep (1500 millisec) if it doesn't get a task to run even after 5 consecutive calls to getTask (at 500 millisec interval each). This strategy helps a lot when there are small tasks and the JVM just misses a task because it isn't initialized yet, and goes to a long sleep..
, Passing through hudson, +1 with minor caveats:

1. We could add more information to the RuntimeException in JvmManagerType.reapJvm: no. of current jvms, their jobids etc. This will help in debugging, maybe a comment explaining the need for that exception too might help?
2. TaskTracker.TaskInProgress.launchTask should log information such as the Task's state etc. if we did not launch it (i.e. state != UNASSIGNED) just to aid debugging if need be.
, Attaching patch with logging for two cases.., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12391205/4232-after-review.patch
  against trunk revision 700548.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no tests are needed for this patch.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs warnings.

    +1 Eclipse classpath. The patch retains Eclipse classpath integrity.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/3405/testReport/
Findbugs warnings: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/3405/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Checkstyle results: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/3405/artifact/trunk/build/test/checkstyle-errors.html
Console output: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/3405/console

This message is automatically generated., I just committed this. Thanks, Devaraj!, Integrated in Hadoop-trunk #620 (See [http://hudson.zones.apache.org/hudson/job/Hadoop-trunk/620/])
    . Fix race condition in JVM reuse when multiple slots become free. Contributed by Devaraj Das.
]