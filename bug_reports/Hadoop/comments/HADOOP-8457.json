[Attaching a proposal for the fix., DiskChecker.java/SecureIOUtils.java: Enabling Hadoop permission checks on Windows.

FileStatus.java/RawLocalFileSystem.java: By default, Windows Server 2003+ sets Administrators group as owner of newly created files/folders if the current user was a member of the Admin group. Please take a look at http://support.microsoft.com/kb/318825 for more information. Given that some places in Hadoop code assert that whoever created the file must be the owner, making appropriate code changes to account for this platform difference. In the current model, the user ownership check is abstracted away to allow us to handle this OS specific behavior.

JobTracker.java/JobSumitssionFiles.java: No need to explicitly set the ownership anymore (undoing the prior change).

MiniDFSCluster.java/UpgrateUtilities.java: Default permissions on Windows are "700" while the code expects them to be "755". Changing test code to not have expectations on default local FS permissions, but to set the corresponding permissions explicitly.

TestDFSShell.java: Enabling previously disabled test on Windows.

This Jira is also dependent on the fix for HADOOP-6527, otherwise, a test that creates a test user will remove all group mappings for the real user and cause all subsequent checks for Admin group membership to fail. Patch for HADOOP-6527 is also available.
, +1 I have reviewed the change internally., 1) How was JobTracker.java working before this change? Seems to me that it would not have worked on the local FS for Windows.
{code}          if (!systemDirStatus.isOwnedByUser(getMROwner())) {{code}
2) UpgradeUtilities.java - Why does the parent permission need to be set here. 
{code}
      File parent = new File(parents[i]);
      File newDir = new File(parents[i], dirName);
      Configuration conf = new Configuration();
      createEmptyDirs(new String[] {newDir.toString()});
      FileUtil.setPermission(parent, new FsPermission(defaultPermissions));
      LocalFileSystem localFS = FileSystem.getLocal(conf);
{code}
3) I am hoping we will be able to replace the "755"s with a some public static final name., Thanks for the feedback!

1. Previously, we were setting the ownership explicitly (this is no longer needed and is backed out).
2. Good catch. Both parent and child permissions are later cheched by product code, so the test has to set the permissions accordingly. 
3. There is one indeed, {{DataNode.DEFAULT_DATA_DIR_PERMISSION}}, but currently it is private. I'll make it public and re-use. Make sense?, You can leave if package private if possible., Attaching updated patch.

Minor fix to reference {{DataNode.DEFAULT_DATA_DIR_PERMISSION}} instead of using the hardcoded value., Patch adds public method FileStatus#isOwnedByUser(UserGroupInformation ugi)
* Does not make sense to expose a low level structure like ugi through a fundamental class like FileStatus. Make the parameter String user.
* I hate the idea of adding a public method when "getOwener().equals(user)" is good enough -  but FileStatus is subclassed and is useful for the RawFileSystem's FileStatus. Is there another way to solve the problem in a simple way without adding such a method?
**  e.g. put in a util? May not work since the new code applies to FileStatus of RawLocalFileSystem of windows-filesystem  and not to FileStatus of hdfs where the client is running on a windows box., Thanks for comments Sanjay. 

bq. Does not make sense to expose a low level structure like ugi through a fundamental class like FileStatus. Make the parameter String user.
I saw that FileSystem already had an API that accepts UGI ({{FileSystem#closeAllForUGI())}}, that is why I thought this is fine. On the other hand, I didn't want to expose this on the FileSystem, as it would require for a caller to query the FileSystem twice if it wants to check both ownership and permissions.

bq. Is there another way to solve the problem in a simple way without adding such a method? 
Exposing it through the API makes it easier to specialize through RawLocalFileStatus as you noted. Yes, we could expose this functionality as a Util function. However, it would only do the Administrators group check if {{FileSystem}} is {{instanceof LocalFileSystem}} (and on Windows). Do you believe this would be more appropriate?
, IMO, to me calling FileStatus.isOwnedBy() seems like a natural API to use. I agree it would be nice to have something other than UGI to represent user/group information but unfortunately there does not seem to be any such abstraction. I would ideally like to see FileStatus.getOwner().equals(ownerObj) where ownerObj is an object representing the owner that encapsulates users/groups etc. Currently ownerObj is simply a string name and it has worked because of simple 1 owner, 1 group Unix model., The two approaches explored in this jira are
# When a local file is created, change the owner to the creator of the file
# Leave the owner of local file to policies of local file (ie Admin in the case of Windows if the owner is an Admin). Add a method in FileStatus to check if the owner is current user (so that it can match the behavior of the local file system for local files) - current patch

Approach (2) seems reasonable except given the Hadoop APIs, apps are justified to do fileStatus.getOwner().equals(currentUser).
Such code is probably all over the place and can't be avoided. Good news is that LocalFs is used only for  emulating Hadoop or for copying files back and forth. Hard call on which is the right approach., Sanjay, apologies for the late response.

Correct, both 1 and 2 have been explored in this Jira. Problem with #1 is that there are many different contexts in which files can be created (and have incorrect default ownership): 
 - RawLocalFileSystem
 - Output redirection 1>>file1 2>>file2
 - Direct use of File objects
We would have to address all such places appropriately. This is why I like approach #2 better. Let me know what you think.

Thanks!, I am +1 on this. Sanjay are you ok with going forward on this?, * I am okay with approach 2 - it was a hard call anyway.
* I don't like UGI being exposed further. Can we change the api to take user or user&group?, Thanks for commenting Sanjay.

I don't like UGI being exposed further. Can we change the api to take user or user&group?
bq. Passing along UGI seemed reasonable as we need information about both user name and user groups. We can change the API to accept a username and a list of user groups, however, I personally like the current approach better as it encapsulates the user info. This can become useful at some later time. Do let me know if you think differently and I'll change the API to accept user&groups., Lets go ahead with APi to accept user and groups.
The other public API that uses UGI should be fixed later., Sure thing, will prepare an updated patch. Thanks!, Attaching updated patch. Changed the API to accept user&userGroups instead of UGI., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12544124/HADOOP-8457-branch-1-win_Admins%283%29.patch
  against trunk revision .

    -1 patch.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/1447//console

This message is automatically generated., +1, I committed the patch to branch-1-win. Thank you Ivan.]