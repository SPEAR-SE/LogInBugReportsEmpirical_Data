[The attached file provides a patch which solves the problem at hand, but does not solve the "larger issue"

Feel free to use this patch directly or as food for thought for something more elaborate., thanks Brian.

Let's get this patch into 0.18.2 and something like this into 0.19 (if possible as this should be a blocker).

And then, right, work on something better.

One question though, it doesn't look like you protected all writes to the dfs context in other operations. Also, do you have a test case for this? I know it's nearly impossible :) .

We should probably work on 0.19 patch with the highest priority since it may be released soon (or maybe has ?).

pete
, Hey Pete,

I didn't protect all writes to the dfs context because I only had time to look at the one case - no reason other than that, probably needs to be done.

Brian, looking at the code actually i think the others are safe as they all either use local variables or for getattr, the place where is sets globalFS = hdfsConnect ... is actually an impossible condition to hit since globalFs is initialized in dfs_init and never set again.

the only thing is the mutex is global whereas the problem is only on specific file handles, so it is somewhat more restrictive than need be.  this would be a problem when many files are being read from. but may be ok for now in practice.

+1 on this patch with the caveat of the above problem

pete



, I suggest we use this patch which fixes both bugs and is the version i intend to submit to trunk - it needs to be compiled with the extra flag -Dlibhdfs.noperms=1  so that 0.19 new permission functions in libhdfs are not used.  I actually use this version of the code with 0.17 in production.

of course the unit tests fail for chown and chmod (since they are not implemented) with this but all else passes.

and i hope it fixes all the concurrency problems including system calls that return static structs and so need to be protected.


, sorry - this one includes the TestFuseDFS.java in the right place.
, fixes the comments for some ciritcal sections.,      [exec] +1 overall.  

     [exec]     +1 @author.  The patch does not contain any @author tags.

     [exec]     +1 tests included.  The patch appears to include 21 new or modified tests.

     [exec]     +1 javadoc.  The javadoc tool did not generate any warning messages.

     [exec]     +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

     [exec]     +1 findbugs.  The patch does not introduce any new Findbugs warnings.



patch is good.  this is c code that does not affect anything else so not attaching ant test.
, +1
Talked with Pete. Looks good to me., this is ready to commit.
, I will commit it to the 0.18 and 0.19 branch as well as trunk., This looks strikingly similar to the patch in HADOOP-4399. Is this a duplicate?, Duplicate of HADOOP-4399]