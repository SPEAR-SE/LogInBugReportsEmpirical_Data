[I cannot reproduce the race condition using your test case, but can you try the following:

{quote}

private void doAsyncWrite(SelectionKey key) throws IOException {
      Call call = (Call)key.attachment();
      if (call == null) {
        return;
      }
      if (key.channel() != call.connection.channel) {
        throw new IOException("doAsyncWrite: bad channel");
      }
      synchronized(call.connection.responseQueue) {
        if (processResponse(call.connection.responseQueue)) {
              if (call.connection.responseQueue.size() == 0) {
                  LOG.info("Cancelling key for call "+call.toString()+ " key: "+ key.toString());
                  key.cancel();          // remove item from selector.
              } else {
                  LOG.warn("NOT REALLY DONE: "+call.toString()+ " key: "+ key.toString());
              }
          }
      }
    }

{quote}

The idea is to invoke processResponse and key.cancel within the same synchronized section., Could you attach the log file when the test failed with and/or without the patch?

Most not the cause of test failure but related : doPurge() removes the responses that have waited for too long. But it does not check if they are partially written. If we are not able to send a partially written response, I think should close the connection (or update the call->recvTime when some data is written)., One possible issue is that Responder cancels the key since there are no more responses, but the an IPC handler tries to register the key, before next select() is called, resulting in CancelledKeyException. The JavaDoc for Selector is not very explicit but does seem to imply it will remove keys from cancelled_set only inside a select(). And I saw the following exception once for the test (without proposed fix patch):
{noformat}
2008-02-07 00:17:17,276 INFO  ipc.Server (Server.java:run(937)) - IPC Server handler 1 on 42215 caught: java.nio.channels.CancelledKeyExce
ption
        at sun.nio.ch.SelectionKeyImpl.ensureValid(SelectionKeyImpl.java:55)
        at sun.nio.ch.SelectionKeyImpl.interestOps(SelectionKeyImpl.java:64)
        at java.nio.channels.spi.AbstractSelectableChannel.register(AbstractSelectableChannel.java:175)
        at java.nio.channels.SelectableChannel.register(SelectableChannel.java:254)
        at org.apache.hadoop.ipc.Server$Responder.processResponse(Server.java:630)
        at org.apache.hadoop.ipc.Server$Responder.doRespond(Server.java:666)
        at org.apache.hadoop.ipc.Server$Handler.run(Server.java:930)
{noformat}

, Attached logs are from running the test with the unpatched version of Server.

The failure logs has a CancelledKeyException about 14341 miliseconds in., Dhruba: I tried increasing the synchronization as you suggested, but still get a CancelledKeyException.
, This log shows the failure with Dhruba's patch proposal., Thanks Clint. We should include your test in any apatch committed for this issue.

Both cancelling and and registering the channel could be done by responder  or synchronized differently. Also we could fix the potential problem with doPurge()., 
I am still thinking of how to handle Server channels and selectors correctly. A few of the things involved :

# channel is polled on different selectors : Listener and Responder.
# channel could be closed by any of the server threads, including the IPC handlers. closing a channel immediately cancels its keys with both the selectors. 
# Listener registers channel with readSelector once. But Responder might register and cancel the channel with writeSelector multiple times. And this registration might happen from any of the handlers. This registration should synchronize correctly with close() from another thread.

Ideal requirement is that all these should behave correctly (ie no unexpected close etc) and efficiently. hmm will see.

I might be able to attach a simpler patch that just fixes the bug seen here, if that is enough. , Proposed fix :

- Just like Listener, Responder add a connection to its list only once and the connection will be cleared automatically when the channel is closed.
- Fixes above mentioned problem with doPurge(). 
- introduced Server.closeConnection() that reduced code replication (that fix uses it too).
- responder closes the connection if write() returns < 0.
- made 'pending' an int instead of boolean.

Clint, could you add apache header to your test and any comments you think are appropriate? I think we should commit it, could you rename it something like TestIPCServerResponder.java.

, 
Since this patch leaves the connection in the list, iterating over the complete list each time in doPurge() might not be good. We could iterate only only every few seconds instead of every loop.
, > Since this patch leaves the connection in the list, iterating over the complete list each time in doPurge() might not be good. We could iterate only only every few seconds instead of every loop.

This is already the case. We iterate only once in a while., Here is the test, with name changed, license and brief comment., Updated HADOOP-2789.patch. Now has Clint's test (slightly reformatted)., +1 code looks good. A minor typo "prartial"., Thanks Dhruba. Updated the patch., +1 overall.  Here are the results of testing the latest attachment 
http://issues.apache.org/jira/secure/attachment/12375254/HADOOP-2789.patch
against trunk revision 619744.

    @author +1.  The patch does not contain any @author tags.

    tests included +1.  The patch appears to include 3 new or modified tests.

    javadoc +1.  The javadoc tool did not generate any warning messages.

    javac +1.  The applied patch does not generate any new javac compiler warnings.

    release audit +1.  The applied patch does not generate any new release audit warnings.

    findbugs +1.  The patch does not introduce any new Findbugs warnings.

    core tests +1.  The patch passed core unit tests.

    contrib tests +1.  The patch passed contrib unit tests.

Test results: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/1773/testReport/
Findbugs warnings: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/1773/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Checkstyle results: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/1773/artifact/trunk/build/test/checkstyle-errors.html
Console output: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/1773/console

This message is automatically generated., I just committed this., I tried this patch and eventually got into another situation where clients where timing out waiting for server responses. 

I am able to reproduce this with the TestIPCServerResponder by turning up the number of callCount to 2000. Then the test is failing around half the time again.

I will attach a log from the failed test., hmmm... will take a look. Could you attach a log without debug tags? thanks., I can just 'grep -V' the debug statements. I will try to reproduce it. It looks like a different kind of failure., I think I know what went wrong. The attached patch should fix it. I am trying to reproduce the failure. Could you try the patch as well?

thanks for running the patch.

The client does not seem to differentiate between a closed connection and a timeout.
, That seems to fix it., Thanks for noticing this early. This bug was a bad oversight on my part., -1 overall.  Here are the results of testing the latest attachment 
http://issues.apache.org/jira/secure/attachment/12375282/HADOOP-2789-correction.patch
against trunk revision 619744.

    @author +1.  The patch does not contain any @author tags.

    tests included -1.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no tests are needed for this patch.

    javadoc +1.  The javadoc tool did not generate any warning messages.

    javac +1.  The applied patch does not generate any new javac compiler warnings.

    release audit +1.  The applied patch does not generate any new release audit warnings.

    findbugs +1.  The patch does not introduce any new Findbugs warnings.

    core tests +1.  The patch passed core unit tests.

    contrib tests +1.  The patch passed contrib unit tests.

Test results: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/1778/testReport/
Findbugs warnings: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/1778/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Checkstyle results: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/1778/artifact/trunk/build/test/checkstyle-errors.html
Console output: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/1778/console

This message is automatically generated., This is a correction to the original patch. The original patch does include a test. I hope I can commit this. 

What are the next steps? Who should sign off on this?, A typo in the patch "We should probably use a different a different ...", Updated the patch with corrected comment., -1 overall.  Here are the results of testing the latest attachment 
http://issues.apache.org/jira/secure/attachment/12375404/HADOOP-2789-correction.patch
against trunk revision 619744.

    @author +1.  The patch does not contain any @author tags.

    tests included -1.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no tests are needed for this patch.

    javadoc +1.  The javadoc tool did not generate any warning messages.

    javac +1.  The applied patch does not generate any new javac compiler warnings.

    release audit +1.  The applied patch does not generate any new release audit warnings.

    findbugs +1.  The patch does not introduce any new Findbugs warnings.

    core tests +1.  The patch passed core unit tests.

    contrib tests +1.  The patch passed contrib unit tests.

Test results: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/1784/testReport/
Findbugs warnings: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/1784/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Checkstyle results: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/1784/artifact/trunk/build/test/checkstyle-errors.html
Console output: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/1784/console

This message is automatically generated., I just committed the fix to the earlier patch. Changelist 627254. to trunk and changelist 627257 to the branch 0.16., Integrated in Hadoop-trunk #400 (See [http://hudson.zones.apache.org/hudson/job/Hadoop-trunk/400/])]