[With hadoop-2.0.3, seems this issue can be avoided via setting kerberos.name.rules at server side. But this setting does not work at hadoop-1.1.1. 
I think we should set KerberosName.rules with a default value during KerberosName(String Name) which is invoked at KerberosAuthenticationHandler.authenticate(HttpServletRequest request, final HttpServletResponse response) ., Generate a draft fix based on branch-2.0.4-alpha KerberosAuthenticationHandler.authenticate(HttpServletRequest request, final HttpServletResponse response).

                 String clientPrincipal = gssContext.getSrcName().toString();
                 KerberosName kerberosName = new KerberosName(clientPrincipal);
+                if( !KerberosName.hasRulesBeenSet()){
+                       LOG.warn("No rules applied to " + kerberosName.toString() + ". Using DEFAULT rules.");
+                       KerberosName.setRules("DEFAULT");
+                }
                 String userName = kerberosName.getShortName();
                 token = new AuthenticationToken(userName, clientPrincipal, getType());
                 response.setStatus(HttpServletResponse.SC_OK);
, Patch based on hadoop-2.0.4-alpha branch., [~fang fang chen] Please provide the patch for the trunk. Set the target version field to the release that is due out (in this case 2.1.0-beta). Committer will merge the patch to that branch.

Quick comment, please follow coding guidelines. Use 2 space indentation., [~tucu00], I seem to recall us investigating a similar issue with UGI & SPNEGO.  Does this look correct to you?, on the patch, setting the rules on a request is not correct. if we need to do this it should be done during initialization.

The logic is a bit twisted as UGI.ensureInitialized() sets the rules only if they have not been set.

The think I don't understand is in which scenario the filter would be invoked before the UGI is 'ensureInitialized()', Hi Alejando,

Thanks for you reply.
You are right, I am using this outside of Hadoop. From user side, it will be great if he can use hadoop-auth classes to add kerberos support to any web servlet. Then I tried this, and it works besides the rules issue.
And I agree with you that it will work if we set kerberos.name.rules in my AuthFilter(hard code). But from user side, I think it will be better if we can configure kerberos.name.rules at a configuration file(if set it in servers configuration file, it does not work directly). And use a default value if user did not set this property in his authFilter, just like other kerberos properties set in hdfs-site.xml/core-site.xml.
The fix is for using hadoop-auth outside Hadoop, then it will not invoke GUI. Maybe this is not the original usage of hadoop-auth. But I think hadoop has provided excellent kerberos authentications API which is very convenient for users to add kerberos support to any web service. And we can expand the hadoop-auth to any web servlet no matter this servlet is hadoop client or not. Just like what commons-logging did. Java provided logging APIs, but we choose to use commons-logging because it is more convenient and effective. What do you think?

Thanks~



Post Alejandro's mail reply here: 
Hi Lulynn,

I've commented in the JIRA, now that I see your email that gives me a bit
more of context on what you are trying to do.

If I understand correctly, you are trying to use this outside of Hadoop. If
that is the case you should set the <PREFIX>.kerberos.name.rules=DEFAULT
(or a custom name.rules if you have one) in your hadoop-auth
AuthenticationFilter configuration.

This is required because you are not initializing UGI before initializing
the filter.

Thanks., Update patch per Suresh's comments. Current patch is based on trunk branch., Lulynn,

bq.  But from user side, I think it will be better if we can configure kerberos.name.rules at a configuration file(if set it in servers configuration file, it does not work directly). And use a default value if user did not set this property in his authFilter, just like other kerberos properties set in hdfs-site.xml/core-site.xml.

you don't need to hardcode it, it can be set it the configuration you use for the authentication filter. The hadoop-auth AuthenticationFilter takes its configuration from the filter definition in the web.xml. But you can create a subclass that overrides the getConfiguration(String configPrefix, FilterConfig filterConfig) to read it from any other place. The javadocs explain how config prefixes are handled.

Again, as I mentioned in my previous comment, the patch is not correct, you don't want to set the name.rules on every authentication request. This is an init thing, and it already handled. You have to set your config to 'DEFAULT; and you are done.

IMO, this is not a bug., Thanks Alejandro. Actually, I have overwritten getConfiguration(String configPrefix, FilterConfig filterConfig), and am trying to testing whether these properties can be passed to KerberosAuthenticationHandler.authenticate(.. , ..) part.

OK, for the usage inside hadoop, I agree this is not a bug. Because we always assume user should have done UGI 'ensureInitialized()' before invoke KerberosName and if user did not set this property, hadoop will use "DEFAULT" as default value. So this is not an init thing for the design inside hadoop, and I think it reasonable to provide a default value if user did not set it. 

Then for the usage outside hadoop, this is an init thing. As user need to set kerberos.name.rules before using hadoop-auth to add kerberos support to a web servlet. If things is like this, then I think at least it's better to remind user to set this property if user did not than just print out a "NullPointerException". 

Actually, both are OK for me to add this property at web servlet side or hadoop-auth provide a dafult value in hadoop side. I just want to make this usage of hadoop-auth to be more smarter and simple.

Again, as I mentioned in my previous comment. I think the usage of hadoop kerberos authentication can be expanded. At least, maybe we can provide user a document to show that how to add kerberos support via hadoop-auth classes. , Improving doc is always good, current doc is at http://hadoop.apache.org/docs/current/hadoop-auth/index.html

Within Hadoop name.rules are set in the core-site.xml file, that is why the code in hadoop-auth does not set it (even to default).

If using hadoop-auth outside of hadoop (Oozie uses it and I believe Hbase does too) you have to set the the name.rules property explicitly even if to default because Hadoop UserGroupInformation is not there and i won't do it.

hope this clarifies., Removing Fix-version. Please use Target-version for the intended release and let committers set the fix-version at commit time.]