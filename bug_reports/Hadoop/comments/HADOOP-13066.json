[Isn't {{UserGroupInformation#getLoginUser()}} protected by the {{UserGroupInformation}} class lock as it's both {{static}} and {{synchronized}}?, yes, but nothing synchronizes two calls... t1: login(user1), t2: login(user2), t1: getloginuser(), t2: getloginuser()... I think the simplest way to fix would be to have login method also return the UGI, Sorry I don't see UserGroupInformation#loginWithKerberos. Which branch are we talking about here? I see {{loginUserFromKeytab}} is also protected by the class lock., Yeah, this is the method. Class lock doesn't protect across several method calls. See my example above...
Thread 1 callls loginUserFromKeytab("hdfs", ...)
Thread 2 calls loginUserFromKeytab("hbase", ...)
Thread 1 calls getLoginUser and will get loginUser hbase., this is pretty serious, Hello [~sershe].

bq. I think the simplest way to fix would be to have login method also return the UGI

Have you seen {{UserGroupInformation#loginUserFromKeytabAndReturnUGI}}?  If the application was changed to call that, then you could execute code within a {{doAs}} block on the returned UGI instance.  In your example, each thread would operate on a different UGI instance.  This method does not alter the process-global logged-in user.

{code}
  /**
   * Log a user in from a keytab file. Loads a user identity from a keytab
   * file and login them in. This new user does not affect the currently
   * logged-in user.
   * @param user the principal name to load from the keytab
   * @param path the path to the keytab file
   * @throws IOException if the keytab file can't be read
   */
  public synchronized
  static UserGroupInformation loginUserFromKeytabAndReturnUGI(String user,
                                  String path
                                  ) throws IOException {
{code}
, Thanks [~cnauroth] for the comment. This is a very valid point., I'm wondering if it merits to improve the javadoc of the {{loginUserFromKeytab()}} method.

# To briefly document that, the logged-in user is process-global and there is no atomic semantic between {{loginUserFromKeytab()}} and {{getLoginUser()}} calls.
# Add {{@see loginUserFromKeytabAndReturnUGI()}} for reference , [~liuml07], the documentation improvement sounds like a great idea to me.  How/when UGI mutates global state is a common source of confusion., Thanks for the pointer, that method solves the problem. Interestingly, it sets keytabFile and keytabPrincipal statics, but not loginUser., bq. Interestingly, it sets keytabFile and keytabPrincipal statics, but not loginUser.

The prior values get restored at the end of the method, so there are no long-term side effects.  Unfortunately, the use of global {{static}} state in UGI does make the code hard to follow., Sorry, I commented on the wrong jira, Is it a dup of HADOOP-13433?]