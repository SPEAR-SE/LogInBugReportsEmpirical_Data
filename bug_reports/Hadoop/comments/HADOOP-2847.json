[
a flip side of the problem is that the hod may miss small jobs running on the cluster if the jobs complete in less than 2 minutes.
HOD should use Hadoop API to get the complete time of the last job if no job is currently running.
And use that time to determine the cluster idle time.
, Runping, your point is valid. However, the issue at hand is independent, as it is talking about what HOD should do in the event of an unresponsive JobTracker.

We discussed the point of missing small jobs while developing HOD 0.4. However, we didn't have any information then that this was a limitation on our user clusters, as HOD 0.3 essentially followed the same approach. Further, we needed support from Hadoop to do this. AFAIK, the JobStatus object doesn't give the information of completion time. All that said, there is room for improvement. I just file HADOOP-2859 for tracking this issue.

Meanwhile, as the need to fix this issue is greater, I am going ahead with the basic approach and changing the error handling., This patch adds some error handling around code which calls the hadoop client to determine number of running jobs. If an exception is thrown here, typically due to SocketTimeout or SocketException, the error code from the hadoop client is captured and used to determine idleness time., Until HADOOP-2775 is in place, we probably won't have automated unit tests in HOD.

Also, same patch should apply for the Hadoop 0.16 branch as well., -1 overall.  Here are the results of testing the latest attachment 
http://issues.apache.org/jira/secure/attachment/12376145/hadoop-2847
against trunk revision 619744.

    @author +1.  The patch does not contain any @author tags.

    tests included -1.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no tests are needed for this patch.

    javadoc +1.  The javadoc tool did not generate any warning messages.

    javac +1.  The applied patch does not generate any new javac compiler warnings.

    release audit +1.  The applied patch does not generate any new release audit warnings.

    findbugs +1.  The patch does not introduce any new Findbugs warnings.

    core tests +1.  The patch passed core unit tests.

    contrib tests +1.  The patch passed contrib unit tests.

Test results: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/1829/testReport/
Findbugs warnings: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/1829/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Checkstyle results: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/1829/artifact/trunk/build/test/checkstyle-errors.html
Console output: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/1829/console

This message is automatically generated., +1 for the fix., +1 . Patch looks good. Tested both by ordinary idle cluster timeout and by stopping the jobtracker explicitly by a stop signal; both allocations get deallocated after crossing idleness-limit., I just committed this.  Thanks Hemanth!!, Integrated in Hadoop-trunk #419 (See [http://hudson.zones.apache.org/hudson/job/Hadoop-trunk/419/]), To check this issue did the following -:
1. Sent SIGSTOP to JobTracker and checked that cluster is cleanup after idle timeout limit
2. Sent SIGTERM to JobTracker and checked that cluster is cleanup after idle timeout limit
3. Allocated cluster. First ran randomwriter with block size=512 KB and then ran sort to make large number of maps. When Jobtracker started giving RPC time out exception, checked that cluster is being cleaned up
]