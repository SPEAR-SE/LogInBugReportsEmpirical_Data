[I have attached a patch, which
* adds the new method testCloseForErroneousSequenceFile to TestSequenceFile.java to check this bug
* fixes the SequenceFile.Reader constructor, Sorry for the long delay in reviewing this.

* TestSequenceFile fails on trunk:
{noformat}
Testcase: testCloseForErroneousSequenceFile took 0.102 sec
        Caused an ERROR
null
java.lang.NullPointerException
        at org.apache.hadoop.fs.RawLocalFileSystem$TrackingFileInputStream.read(RawLocalFileSystem.java:91)
        at org.apache.hadoop.fs.RawLocalFileSystem$LocalFSFileInputStream.read(RawLocalFileSystem.java:142)
        at java.io.BufferedInputStream.fill(BufferedInputStream.java:218)
        at java.io.BufferedInputStream.read1(BufferedInputStream.java:258)
        at java.io.BufferedInputStream.read(BufferedInputStream.java:317)
        at java.io.DataInputStream.readFully(DataInputStream.java:178)
        at java.io.DataInputStream.readFully(DataInputStream.java:152)
        at org.apache.hadoop.fs.ChecksumFileSystem$ChecksumFSInputChecker.<init>(ChecksumFileSystem.java:134)
        at org.apache.hadoop.fs.ChecksumFileSystem.open(ChecksumFileSystem.java:283)
        at org.apache.hadoop.io.SequenceFile$Reader.openFile(SequenceFile.java:1453)
        at org.apache.hadoop.io.TestSequenceFile$1.openFile(TestSequenceFile.java:494)
        at org.apache.hadoop.io.SequenceFile$Reader.<init>(SequenceFile.java:1430)
        at org.apache.hadoop.io.SequenceFile$Reader.<init>(SequenceFile.java:1423)
        at org.apache.hadoop.io.SequenceFile$Reader.<init>(SequenceFile.java:1418)
        at org.apache.hadoop.io.TestSequenceFile$1.<init>(TestSequenceFile.java:491)
        at org.apache.hadoop.io.TestSequenceFile.testCloseForErroneousSequenceFile(TestSequenceFile.java:491)
{noformat}
If the unit test obtains the LFS by calling {{FileSystem.getLocal(conf)}} then everything works as designed.
* The conf assignment can be outside the try block
* Instead of try/finally, catching IOException, attempting a close, logging- rather than ignoring- exceptions thrown from close, then re-throwing the IOException would be preferred., The updated patch addresses all mentioned problems and the tests no longer throws a NPE., Thanks for updating the patch; I meant the first try/finally, which is actually distinguishing the case where an IOException is thrown from the case where it is not. That is better expressed as:

{code}
this.conf = conf;
try { 
  seek(start);
  this.end = in.getPos() + length;
  init(tempReader);
} catch (IOException e) { 
  try {
    in.close();
  } catch (IOException ce) {
    LOG.info("Exception from close in init: ", ce);
  }
  throw e;
}
{code}

or even more succinctly:
{code}
try {
  seek(start);
  this.end = in.getPos() + length;
  init(tempReader);
} catch (IOException e) {
  IOUtils.cleanup(LOG, in);
  throw e;
}
{code}, Hmm, that would not cover all error cases:
if a RuntimeException is thrown by seek(start) or init(tempReader),
in would not be closed.

For me it is a best practice to use try-finally to close opened resources., If seek or init throws a RuntimeException, it's wrong. Unfortunately, init _does_ throw IllegalArgumentException if the codec lookup fails. *sigh*

You're right, try-finally is required. I'd still use IOUtils::cleanup to close the stream and drop the comments, though., I attached the third version of the patch, which uses IOUtils.cleanup now., {noformat}
     [exec] +1 overall.  
     [exec] 
     [exec]     +1 @author.  The patch does not contain any @author tags.
     [exec] 
     [exec]     +1 tests included.  The patch appears to include 3 new or modified tests.
     [exec] 
     [exec]     +1 javadoc.  The javadoc tool did not generate any warning messages.
     [exec] 
     [exec]     +1 javac.  The applied patch does not increase the total number of javac compiler warnings.
     [exec] 
     [exec]     +1 findbugs.  The patch does not introduce any new Findbugs warnings.
     [exec] 
     [exec]     +1 Eclipse classpath. The patch retains Eclipse classpath integrity.
     [exec] 
     [exec]     +1 release audit.  The applied patch does not increase the total number of release audit warnings.
{noformat}

Running the unit tests..., I committed this. Thanks, Michael, Integrated in Hadoop-trunk #830 (See [http://hudson.zones.apache.org/hudson/job/Hadoop-trunk/830/])
    . Close the underlying InputStream in SequenceFile::Reader when
the constructor throws an exception. Contributed by Michael Tamm
]