[Tentative patch which checks Job status., Test output with DistCp related portion., | (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue}  0m 14s{color} | {color:blue} Docker mode activated. {color} |
| {color:green}+1{color} | {color:green} @author {color} | {color:green}  0m  0s{color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:red}-1{color} | {color:red} test4tests {color} | {color:red}  0m  0s{color} | {color:red} The patch doesn't appear to include any new or modified tests. Please justify why no new tests are needed for this patch. Also please list what manual steps were performed to verify this patch. {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green}  6m 50s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green}  0m 16s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  0m 13s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  0m 20s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green}  0m 15s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  0m 23s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 12s{color} | {color:green} trunk passed {color} |
| {color:red}-1{color} | {color:red} mvninstall {color} | {color:red}  0m 10s{color} | {color:red} hadoop-distcp in the patch failed. {color} |
| {color:red}-1{color} | {color:red} compile {color} | {color:red}  0m 10s{color} | {color:red} hadoop-distcp in the patch failed. {color} |
| {color:red}-1{color} | {color:red} javac {color} | {color:red}  0m 10s{color} | {color:red} hadoop-distcp in the patch failed. {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  0m 10s{color} | {color:green} the patch passed {color} |
| {color:red}-1{color} | {color:red} mvnsite {color} | {color:red}  0m 11s{color} | {color:red} hadoop-distcp in the patch failed. {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green}  0m 10s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green}  0m  0s{color} | {color:green} The patch has no whitespace issues. {color} |
| {color:red}-1{color} | {color:red} findbugs {color} | {color:red}  0m 10s{color} | {color:red} hadoop-distcp in the patch failed. {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 10s{color} | {color:green} the patch passed {color} |
| {color:red}-1{color} | {color:red} unit {color} | {color:red}  0m 11s{color} | {color:red} hadoop-distcp in the patch failed. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green}  0m 16s{color} | {color:green} The patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black} 11m 30s{color} | {color:black} {color} |
\\
\\
|| Subsystem || Report/Notes ||
| Docker |  Image:yetus/hadoop:9560f25 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12823378/HADOOP-13489.v1.patch |
| JIRA Issue | HADOOP-13489 |
| Optional Tests |  asflicense  compile  javac  javadoc  mvninstall  mvnsite  unit  findbugs  checkstyle  |
| uname | Linux 949ecdd433b0 3.13.0-36-lowlatency #63-Ubuntu SMP PREEMPT Wed Sep 3 21:56:12 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | /testptch/hadoop/patchprocess/precommit/personality/provided.sh |
| git revision | trunk / 874577a |
| Default Java | 1.8.0_101 |
| findbugs | v3.0.0 |
| mvninstall | https://builds.apache.org/job/PreCommit-HADOOP-Build/10233/artifact/patchprocess/patch-mvninstall-hadoop-tools_hadoop-distcp.txt |
| compile | https://builds.apache.org/job/PreCommit-HADOOP-Build/10233/artifact/patchprocess/patch-compile-hadoop-tools_hadoop-distcp.txt |
| javac | https://builds.apache.org/job/PreCommit-HADOOP-Build/10233/artifact/patchprocess/patch-compile-hadoop-tools_hadoop-distcp.txt |
| mvnsite | https://builds.apache.org/job/PreCommit-HADOOP-Build/10233/artifact/patchprocess/patch-mvnsite-hadoop-tools_hadoop-distcp.txt |
| findbugs | https://builds.apache.org/job/PreCommit-HADOOP-Build/10233/artifact/patchprocess/patch-findbugs-hadoop-tools_hadoop-distcp.txt |
| unit | https://builds.apache.org/job/PreCommit-HADOOP-Build/10233/artifact/patchprocess/patch-unit-hadoop-tools_hadoop-distcp.txt |
|  Test Results | https://builds.apache.org/job/PreCommit-HADOOP-Build/10233/testReport/ |
| modules | C: hadoop-tools/hadoop-distcp U: hadoop-tools/hadoop-distcp |
| Console output | https://builds.apache.org/job/PreCommit-HADOOP-Build/10233/console |
| Powered by | Apache Yetus 0.4.0-SNAPSHOT   http://yetus.apache.org |


This message was automatically generated.

, | (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue}  0m 12s{color} | {color:blue} Docker mode activated. {color} |
| {color:green}+1{color} | {color:green} @author {color} | {color:green}  0m  0s{color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:red}-1{color} | {color:red} test4tests {color} | {color:red}  0m  0s{color} | {color:red} The patch doesn't appear to include any new or modified tests. Please justify why no new tests are needed for this patch. Also please list what manual steps were performed to verify this patch. {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green}  6m 43s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green}  0m 16s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  0m 13s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  0m 20s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green}  0m 12s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  0m 23s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 13s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green}  0m 15s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green}  0m 13s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green}  0m 13s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  0m 10s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  0m 18s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green}  0m 10s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green}  0m  0s{color} | {color:green} The patch has no whitespace issues. {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  0m 29s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 10s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} unit {color} | {color:green}  9m  9s{color} | {color:green} hadoop-distcp in the patch passed. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green}  0m 15s{color} | {color:green} The patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black} 20m 58s{color} | {color:black} {color} |
\\
\\
|| Subsystem || Report/Notes ||
| Docker |  Image:yetus/hadoop:9560f25 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12823382/HADOOP-13489.v2.patch |
| JIRA Issue | HADOOP-13489 |
| Optional Tests |  asflicense  compile  javac  javadoc  mvninstall  mvnsite  unit  findbugs  checkstyle  |
| uname | Linux 2c3db3692bbc 3.13.0-36-lowlatency #63-Ubuntu SMP PREEMPT Wed Sep 3 21:56:12 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | /testptch/hadoop/patchprocess/precommit/personality/provided.sh |
| git revision | trunk / 874577a |
| Default Java | 1.8.0_101 |
| findbugs | v3.0.0 |
|  Test Results | https://builds.apache.org/job/PreCommit-HADOOP-Build/10236/testReport/ |
| modules | C: hadoop-tools/hadoop-distcp U: hadoop-tools/hadoop-distcp |
| Console output | https://builds.apache.org/job/PreCommit-HADOOP-Build/10236/console |
| Powered by | Apache Yetus 0.4.0-SNAPSHOT   http://yetus.apache.org |


This message was automatically generated.

, Thanks for reporting and working on this, [~tedyu].

The v1 patch checks the job not to be null value and job state to be DistCpConstants.SUCCEEDED by directly calling {{isSuccessful()}}. My concerns are:
# Basically the {{DistCp#run()}} checks the status of the job by exception handling. All exceptions, if not caught yet, will be caught by the last generic {{Exception}} block which returns DistCpConstants.UNKNOWN_ERROR. Is it possible that the job is null while there is no exception? (I think here the job should never be null)
#- If not, the {{if (job != null) {}} check is not needed, or better, state as an assert.
#- If true, I think for a null job, we should still return DistCpConstants.UNKNOWN_ERROR instead of DistCpConstants.SUCCESS.
#  We have to respect the {{DistCpOptions#blocking}} option ({{-async}} from command line parameters):
#- If the distcp option is blocking, {{DistCp#waitForJobCompletion()}} will be called, which will throw an IOE in case the job is not successful.
{code}
  /**
   * Wait for the given job to complete.
   * @param job the given mapreduce job that has already been submitted
   */
  public void waitForJobCompletion(Job job) throws Exception {
    assert job != null;
    if (!job.waitForCompletion(true)) {
      throw new IOException("DistCp failure: Job " + job.getJobID()
          + " has failed: " + job.getStatus().getFailureInfo());
    }
  }
{code}
So if the Job fails, DistCpConstants.SUCCESS is NOT be returned?
#- If the distcp option is non-blocking, {{waitForJobCompletion()}} will not be called, in which case the distcp just returns after the job is submitted. The internal job state can still be RUNNING instead of SUCCEEDED. What should DistCp return in this case? I think we can simply return SUCCESS, as the existing code does.

FWIW, the {{@return}} javadoc of the {{DistCp#run()}} method was wrong for years., For #1, I converted the null check to assertion in patch v3.

w.r.t. #2, for the blocking case, if waitForJobCompletion() throws IOException, it would be caught by run(), resulting in DistCpConstants.UNKNOWN_ERROR to be returned.

For the non-blocking case, I am adding check of job.isComplete() to the if statement.

For the javadoc, there are many values for different failures. To be addressed in separate JIRA ?

Thanks, I'm not in favor of the non-blocking case change, which is the core of the patch. Checking the job state in {{non-blocking}} mode makes little, if any, sense to me. If the user runs in {{non-blocking}} (a.k.a {{-async}}) mode, she should not expect the job be completed just after its submission. By the way, the it's {{blocking}} mode by default. Instead, she, as a downstream user of DistCp, should call {{DistCp#execute()}} directly and probes the job state manually. In [MAPREDUCE-6248], [~jingzhao] enabled users to get the MR job information for distcp. So {{DistCp#execute()}} instead of {{DistCp#run()}} should be right usage of the {{non-blocking}} distcp along with probing exit job state, IMO.

And for the blocking case, as we agree in the above discussion, it's not a problem at all., | (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue} 13m  4s{color} | {color:blue} Docker mode activated. {color} |
| {color:green}+1{color} | {color:green} @author {color} | {color:green}  0m  0s{color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:red}-1{color} | {color:red} test4tests {color} | {color:red}  0m  0s{color} | {color:red} The patch doesn't appear to include any new or modified tests. Please justify why no new tests are needed for this patch. Also please list what manual steps were performed to verify this patch. {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green}  6m 59s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green}  0m 16s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  0m 13s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  0m 21s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green}  0m 19s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  0m 24s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 12s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green}  0m 15s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green}  0m 14s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green}  0m 14s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  0m 10s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  0m 17s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green}  0m  9s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green}  0m  0s{color} | {color:green} The patch has no whitespace issues. {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  0m 28s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 10s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} unit {color} | {color:green}  9m  5s{color} | {color:green} hadoop-distcp in the patch passed. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green}  0m 16s{color} | {color:green} The patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black} 34m  8s{color} | {color:black} {color} |
\\
\\
|| Subsystem || Report/Notes ||
| Docker |  Image:yetus/hadoop:9560f25 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12823558/HADOOP-13489.v3.patch |
| JIRA Issue | HADOOP-13489 |
| Optional Tests |  asflicense  compile  javac  javadoc  mvninstall  mvnsite  unit  findbugs  checkstyle  |
| uname | Linux 85b4b6e4b547 3.13.0-36-lowlatency #63-Ubuntu SMP PREEMPT Wed Sep 3 21:56:12 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | /testptch/hadoop/patchprocess/precommit/personality/provided.sh |
| git revision | trunk / 23c6e3c |
| Default Java | 1.8.0_101 |
| findbugs | v3.0.0 |
|  Test Results | https://builds.apache.org/job/PreCommit-HADOOP-Build/10237/testReport/ |
| modules | C: hadoop-tools/hadoop-distcp U: hadoop-tools/hadoop-distcp |
| Console output | https://builds.apache.org/job/PreCommit-HADOOP-Build/10237/console |
| Powered by | Apache Yetus 0.4.0-SNAPSHOT   http://yetus.apache.org |


This message was automatically generated.

, Discussed with Mingliang offline about the case I observed from hbase test.

The intricacy was that although the distcp job wasn't successful, the following code wasn't executed - I don't see "Exception encountered " in the log:
{code}
    } catch (Exception e) {
      LOG.error("Exception encountered ", e);
      return DistCpConstants.UNKNOWN_ERROR;
{code}
Will attach hbase test output and related class shortly., testIncrementalBackup-8-12.txt is the test output.

I cloned branch-2.7.3 locally, applied patch v1 (blocking mode in effect) and ran test with the following command:

mvn test -PrunAllTests -DfailIfNoTests=false -Dhadoop-two.version=2.7.3 -Dtest=TestIncrementalBackup, MapReduceBackupCopyService.java is the hbase class containing BackupDistCp which wraps DistCp., Thanks for providing more details about the test.

There is no sign that {{DistCp}} per se is doing wrongly. Moreover, there is no obvious proof that downstream applications are exploring {{DistCp}} correctly. This generally makes the proposal and patch no applicable.

I'm a bit surprised by the fact DistCp was extended and its {{execute()}} method was overridden. A broader question is that, is {{DistCp}} designed for this? Regardless of this (as I'm not a DistCp/HBase expert), I think the bigger problem here is that {{BackupDistCp}} is flaky in that it swallows all the exceptions as follows. This breaks the {{DistCp#run()}} contract with {{DistCp#execute()}}.
{code:title=MapReduceBackupCopyService.java$BackupDistCp}
  class BackupDistCp extends DistCp {
    ...
    @Override
    public Job execute() throws Exception {
      try {
      ...
      } catch (Throwable t) {
        LOG.debug("distcp " + job.getJobID() + " encountered error", t);
      } finally {
      ...
{code}
The {{execute()}} method is invoked by the {{DistCp#run()}} method, which (again) checks the status of the job by exception handling. I can't imagine {{DistCP#run()}} is able to do anything if all the exceptions were already swallowed. This is the root cause of the mis-usage problem in HBase. As a result, we couldn't expect "Exception encountered " in the log.

I don't think HDFS is obliged to do anything here. Will close this JIRA if no objections in 24 hours., I agree that ignoring Throwable is not good practice.
But if you look at the attached test output, there was no ' encountered error' line., Added the re-throw:
{code}
      } catch (Throwable t) {
        LOG.debug("distcp " + job.getJobID() + " encountered error", t);
        throw t;
{code}
As can be seen in the attached test log, there was no occurrence of the log above., I think DistCp#run() should be self-sufficient in that it doesn't return SUCCESS unless the distcp job (maybe submitted through wrapper) completes and succeeds., After adjusting hbase code, the problem is gone.]