[Here is a patch (including a unit test) for branch 23. If OK'd, then I can port it to branch 2., I suppose this approach improves the issue.  It still leaks, but just leaks less.  I think this can be greatly simplified to just removing the class static cache.

The har AFS delegates to the standard har FS which uses a cached fs.  Which means the class static cache is technically unnecessary., Daryn, thanks for the feedback. Can you please clarify your comment?

(1) I am not completely sure what you mean by it "still leaks". The new cache has a fixed size, set by default to a small value, and it will never grow beyond that. Do you mean that some HAR entries that may not be needed anymore will stay in the cache? This would happen only if the HAR FS is rarely used. In that case, yes, those references will stay indefinitely. I don't think this should be problematic in practice, but I can gladly add functionality to deal with this. Do you have a suggestion on how to get around this?

(2) "The har AFS delegates to the standard har FS which uses a cached fs. Which means the class static cache is technically unnecessary." Is there another HAR FS cache that I am not aware of? If so, please point me to the right place to find it. The class static cache modified in this patch is the HAR metadata chache that was added in MAPREDUCE-2459.
, Hi Daryn,

bq. The har AFS delegates to the standard har FS which uses a cached fs.

I'm not fully sure if I understand your point but please note that HarFileSystem does not use FileSystem.CACHE. We have fs.har.impl.disable.cache=true inside core-default.xml. 
(HADOOP-6097 and  HADOOP-6231)
, +1 I'm not thrilled with the way har works, but I suppose this is the best we can for now to fix the leak., Attaching patches for trunk and branch 2 (they are identical; the patch for branch 23 is slightly different but just due to changes in line # where hunks are applied). Also made sure that patch for branch 23 still applies without errors., {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12596209/HADOOP_9757.trunk.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-common-project/hadoop-common.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HADOOP-Build/2924//testReport/
Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/2924//console

This message is automatically generated., Thanks Cristina!  I've committed to trunk/2/2.1/0.23, SUCCESS: Integrated in Hadoop-trunk-Commit #4238 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/4238/])
HADOOP-9757. Har metadata cache can grow without limit (Cristina Abad via daryn) (daryn: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1512465)
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/HarFileSystem.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestHarFileSystemBasics.java
, SUCCESS: Integrated in Hadoop-Yarn-trunk #297 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk/297/])
HADOOP-9757. Har metadata cache can grow without limit (Cristina Abad via daryn) (daryn: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1512465)
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/HarFileSystem.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestHarFileSystemBasics.java
, FAILURE: Integrated in Hadoop-Hdfs-trunk #1487 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/1487/])
HADOOP-9757. Har metadata cache can grow without limit (Cristina Abad via daryn) (daryn: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1512465)
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/HarFileSystem.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestHarFileSystemBasics.java
, FAILURE: Integrated in Hadoop-Hdfs-0.23-Build #695 (See [https://builds.apache.org/job/Hadoop-Hdfs-0.23-Build/695/])
HADOOP-9757. Har metadata cache can grow without limit (Cristina Abad via daryn) (daryn: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1512470)
* /hadoop/common/branches/branch-0.23/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/branches/branch-0.23/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/HarFileSystem.java
* /hadoop/common/branches/branch-0.23/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestHarFileSystemBasics.java
, FAILURE: Integrated in Hadoop-Mapreduce-trunk #1514 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/1514/])
HADOOP-9757. Har metadata cache can grow without limit (Cristina Abad via daryn) (daryn: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1512465)
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/HarFileSystem.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestHarFileSystemBasics.java
]