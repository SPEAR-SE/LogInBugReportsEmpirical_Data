[Attaching the patch.

With the refactoring done as part of HADOOP-7487, DF#parseOutput started being invoked on Windows and failing the test., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12572937/HADOOP-9387.trunk.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-common-project/hadoop-common.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HADOOP-Build/2302//testReport/
Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/2302//console

This message is automatically generated., bq. -1 overall. Here are the results of testing the latest attachment 
TestDFVariations already fails on Windows, no need to add a new test case., I see regressions in HDFS tests on Windows with this patch because HDFS invokes DF#getFileSystem() which in turn calls DF#run(). Canceling the patch until I address both., Attaching the new patch.

A few notes:
 - Addressed the problem around DF#getFileSystem() on Windows, added a test case for the scenario
 - Since I already touched DF.java I used the opportunity to cleanup the unused code around OS type. Please comment if you think it is more appropriate to have this fixed via a separate Jira (it's a minor change so it should generally be fine)., {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12573491/HADOOP-9387.trunk.2.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 tests included appear to have a timeout.{color}

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-common-project/hadoop-common.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HADOOP-Build/2324//testReport/
Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/2324//console

This message is automatically generated., Hi Ivan,

Thanks for working on cleaning it up.  This code has tripped me up in the past.

{code}
  public String getFilesystem() throws IOException {
    if (Shell.WINDOWS) {
      this.filesystem = dirFile.getCanonicalPath().substring(0, 2);
      return this.filesystem;
    } else {
      run();
      return filesystem;
    }
  }
{code}

It appears that there is a pitfall if running on non-Windows.  If the user of this class calls {{getFilesystem}} before calling 
{{getMount}}, then {{filesystem}} will be uninitialized.  This is because on non-Windows, we assign to the {{filesystem}} member variable inside {{parseOutput}}, which gets called from {{getMount}}, but not {{getFilesystem}}.  Perhaps it's safer to move all of the parsing logic back into {{parseExecResult}}.

{code}
    switch(getOSType()) {
      case OS_TYPE_AIX:
        Long.parseLong(tokens.nextToken()); // capacity
        Long.parseLong(tokens.nextToken()); // available
        Integer.parseInt(tokens.nextToken()); // pct used
        tokens.nextToken();
        tokens.nextToken();
        this.mount = tokens.nextToken();
        break;

      case OS_TYPE_WIN:
      case OS_TYPE_SOLARIS:
      case OS_TYPE_MAC:
      case OS_TYPE_UNIX:
      default:
        Long.parseLong(tokens.nextToken()); // capacity
        Long.parseLong(tokens.nextToken()); // used
        Long.parseLong(tokens.nextToken()); // available
        Integer.parseInt(tokens.nextToken()); // pct used
        this.mount = tokens.nextToken();
        break;
   }
{code}

The patch removes the special handling for AIX, so I think this would cause a regression if running on that platform.  I've never used AIX, but what I infer from the old code is that the output of df -k on Linux places mount in column 6, whereas on AIX it goes in column 7.  Therefore, we need an extra call to {{StringTokenizer#nextToken}} if running on AIX.  Unfortunately, I don't have access to an AIX machine to confirm.  Perhaps this code could be simplified to always look at the last column without platform checks and special cases, i.e.:

{code}
String[] columns = line.split();
this.mount = columns[columns.length - 1];
{code}

However, that would be dependent on AIX printing mount in the last column, and without an AIX machine, I can't confirm.

I did confirm that the patch works for Windows, so maybe the simplest path forward is to prepare a smaller patch just for fixing Windows, and then file a follow-up jira for future refactoring work.  That would give more time to track down someone with access to AIX to help with testing.
, Thanks for reviewing Chris!

Hmm, something does not add up, looks like you are looking at the older version of source code :) Can you please check for this? I looked up the history and HADOOP-9337 removed the above special handling for AIX., +1 for the current patch.

Sorry, Ivan.  I saw removal of the now-unused {{OSType}} and assumed that your patch had also removed the AIX check.  Since that part of the change was already addressed in HADOOP-9337, there is no concern.
, No worries, thanks for the review!, Questions: When getExecString() will be called?  And why it should never be called on Windows?, bq. Questions: When getExecString() will be called? And why it should never be called on Windows?
Thanks for reviewing Nicholas. {{getExecString()}} should/will never be called on Windows, as we don't need it to compute the file system/mount point (we assume the drive latter from the given path, no need to invoke shell tools like on Unix). {{Shell#run()}} will invoke {{getExecString()}} during its execution. Let me know if this answers your question., Thanks a lot of the explanation., I have committed this.  Thanks, Ivan!

Also, thanks Chris for reviewing this., Integrated in Hadoop-trunk-Commit #3510 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/3510/])
    HADOOP-9387. Fix DF so that it won't execute a shell command on Windows to compute the file system/mount point.  Contributed by Ivan Mitic (Revision 1459642)

     Result = SUCCESS
szetszwo : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1459642
Files : 
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/DF.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestDFVariations.java
, Integrated in Hadoop-trunk-Commit #3511 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/3511/])
    Move HADOOP-9387 to Trunk in CHANGES.txt. (Revision 1459643)

     Result = SUCCESS
szetszwo : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1459643
Files : 
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
, Integrated in Hadoop-Yarn-trunk #163 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk/163/])
    Move HADOOP-9387 to Trunk in CHANGES.txt. (Revision 1459643)
HADOOP-9387. Fix DF so that it won't execute a shell command on Windows to compute the file system/mount point.  Contributed by Ivan Mitic (Revision 1459642)

     Result = FAILURE
szetszwo : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1459643
Files : 
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt

szetszwo : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1459642
Files : 
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/DF.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestDFVariations.java
, Integrated in Hadoop-Hdfs-trunk #1352 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/1352/])
    Move HADOOP-9387 to Trunk in CHANGES.txt. (Revision 1459643)
HADOOP-9387. Fix DF so that it won't execute a shell command on Windows to compute the file system/mount point.  Contributed by Ivan Mitic (Revision 1459642)

     Result = FAILURE
szetszwo : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1459643
Files : 
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt

szetszwo : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1459642
Files : 
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/DF.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestDFVariations.java
, Integrated in Hadoop-Mapreduce-trunk #1380 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/1380/])
    Move HADOOP-9387 to Trunk in CHANGES.txt. (Revision 1459643)
HADOOP-9387. Fix DF so that it won't execute a shell command on Windows to compute the file system/mount point.  Contributed by Ivan Mitic (Revision 1459642)

     Result = SUCCESS
szetszwo : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1459643
Files : 
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt

szetszwo : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1459642
Files : 
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/DF.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestDFVariations.java
]