[This bug is caused by a rare event in which jetty called a configured filter twice instead of only once. See the following test log.
{noformat}
2008-11-20 14:42:20,427 WARN  http.HttpServer (TestGlobalFilter.java:access(83)) - access http://localhost:40643/*
2008-11-20 14:42:20,429 INFO  http.HttpServer (TestGlobalFilter.java:doFilter(63)) - filtering /*
2008-11-20 14:42:20,431 WARN  http.HttpServer (TestGlobalFilter.java:access(97)) - urlstring=http://localhost:40643/*
java.io.FileNotFoundException: http://localhost:40643/*
	at sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1239)
	at org.apache.hadoop.http.TestGlobalFilter.access(TestGlobalFilter.java:89)
	at org.apache.hadoop.http.TestGlobalFilter.testServletFilter(TestGlobalFilter.java:137)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at junit.framework.TestCase.runTest(TestCase.java:154)
	at junit.framework.TestCase.runBare(TestCase.java:127)
	at junit.framework.TestResult$1.protect(TestResult.java:106)
	at junit.framework.TestResult.runProtected(TestResult.java:124)
	at junit.framework.TestResult.run(TestResult.java:109)
	at junit.framework.TestCase.run(TestCase.java:118)
	at junit.framework.TestSuite.runTest(TestSuite.java:208)
	at junit.framework.TestSuite.run(TestSuite.java:203)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:421)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.launch(JUnitTestRunner.java:912)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.main(JUnitTestRunner.java:766)
2008-11-20 14:42:20,434 WARN  http.HttpServer (TestGlobalFilter.java:access(83)) - access http://localhost:40643/*
2008-11-20 14:42:20,527 INFO  http.HttpServer (TestGlobalFilter.java:doFilter(63)) - filtering /*
2008-11-20 14:42:20,532 INFO  http.HttpServer (TestGlobalFilter.java:doFilter(63)) - filtering /*
2008-11-20 14:42:20,533 WARN  http.HttpServer (TestGlobalFilter.java:access(97)) - urlstring=http://localhost:40643/*
java.io.FileNotFoundException: http://localhost:40643/*
{noformat}
In the first case, the filter was invoked once for url /*, which is normal. In the second case, the filter was invoked twice for the same url, which is an abnormal behavior of jetty. I'm attaching a patch where the filter simply returns after the first invocation to get around this issue. , For Hudson to apply the patch, it should be generated with --no-prefix., uploaded a patch without prefixes, > I'm attaching a patch where the filter simply returns after the first invocation to get around this issue.

Could you provide more details about how the changes in your patch and the behavior you observed are related?  It seems wrong to ignore filter chain.

BTW, are you able to reproduce the problem?, -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12394439/4695-1.patch
  against trunk revision 719787.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs warnings.

    +1 Eclipse classpath. The patch retains Eclipse classpath integrity.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/3633/testReport/
Findbugs warnings: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/3633/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Checkstyle results: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/3633/artifact/trunk/build/test/checkstyle-errors.html
Console output: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/3633/console

This message is automatically generated., I don't understand the fix (or the problem). According to [this|http://jetty.mortbay.org/jetty5/doc/servlet24.html#d0e321] documentation discussing the Jetty5 filter mapping, it's possible for the same filter to get applied more than once. It sounds like the burden is on the servlet author and not necessarily the filter configuration, so perhaps the correct fix is to the test case. Ignoring the filter chain does sound extreme, though, particularly if the double-filtering case happens in error states. Is it reasonable to wait and see if this is reproducible in Jetty6?, I saw this test failed again with the same error:

Testcase: testServletFilter took 1.344 sec
        FAILED
url[7]=/* expected:<12> but was:<13>
junit.framework.AssertionFailedError: url[7]=/* expected:<12> but was:<13>
        at org.apache.hadoop.http.TestGlobalFilter.testServletFilter(TestGlobalFilter.java:150)

This is with jetty 6., This is causing nightly builds to fail:
http://hudson.zones.apache.org/hudson/view/Hadoop/job/Hadoop-trunk/748/testReport/
, > Ignoring the filter chain does sound extreme

Returning from a filter (and bypassing the rest of the filter chain) isn't itself an abnormal behavior (depends on application logic), especially in this case where there is no other filter in the chain. Anyway, I've attached a new patch where the filter simply records whether it can be triggered when a url is accessed, instead of counting how many times it is triggered. Either patch will address the issue. Pick whichever you like., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12401080/4695-2.patch
  against trunk revision 748861.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs warnings.

    +1 Eclipse classpath. The patch retains Eclipse classpath integrity.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    -1 contrib tests.  The patch failed contrib unit tests.

Test results: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch-vesta.apache.org/20/testReport/
Findbugs warnings: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch-vesta.apache.org/20/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Checkstyle results: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch-vesta.apache.org/20/artifact/trunk/build/test/checkstyle-errors.html
Console output: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch-vesta.apache.org/20/console

This message is automatically generated., +1 patch looks good, I committed this.  Thanks, Kan!, I also committed this to 0.20., Integrated in Hadoop-trunk #778 (See [http://hudson.zones.apache.org/hudson/job/Hadoop-trunk/778/])
    ]