[a {{create-release.sh}} script would produce the release artifacts. This script would be committed in the dev-support/ directory of the branch.

A parameterized jenkins jobs would take the branch name and the RC label and it would produce the release artifacts.

The SRC and BIN tarballs would be MD5 but not signed. The release manager should pick up the artifacts and sign them before pushing them to a public staging area., initial version of the create-release.sh script., Jenkins job that will run the script: https://builds.apache.org/job/HADOOP2%20Release%20Artifacts%20Builder/, removing SVN and MVN clean up, not needed, fresh checkout, Alejandro, you want to add a bit of a comment on the head of the script explaining what it does and in which context it is used (should you say how to use it since it takes a RC_LABEL)? 

I tried the below manually and it works nicely:

HADOOP_VERSION=`cat pom.xml | grep "<version>" | head -1 | sed 's|^ *<version>||' | sed 's|</version>.*$||'`

nit: remove the 'for' in following if you are going to make an new version: "version for to" (from a comment).

I suppose you have the md5 so can check when you download so you have some security about what it is that you are signing.

Otherwise looks great [~tucu00].  We have scripts building a release.  We should try and do as you do here and hoist them up to jenkins too., getting site generation right., Integrating [~stack] comments.

Regarding the md5 files. The idea is simply one thing less to do by the release manager, s/he would only have to sign the SRC and BIN tarball artifacts before staging them.

Once the Jenkins build finishes (https://builds.apache.org/job/HADOOP2_Release_Artifacts_Builder/) and I verify things are ok, I'll put the script in patch form. And after commit, I'll modify the jenkins configuration to consume it from the checked out source itself., OK,

We have:

* A script, {{create-release.sh}}, that creates release artifacts
* An Apache Jenkins job that runs the script and produces the artifacts in Apache CI machines, thanks Yahoo! (or shouldn’t I say that?)

The Apache Jenkins job is:

  https://builds.apache.org/job/HADOOP2_Release_Artifacts_Builder/

There you’ll see the output of an release build. When triggering the build, you can specify an RC_LABEL (RC0 in this case). If you do so all the artifact files will be postfixed with it.

The job is currently producing:

* RAT report
* SOURCE tarball and its MD5
* BINARY tarball and its MD5
* SITE tarball (ready to plaster in Apache Hadoop site)
* CHANGES files

I’ve verified the produced SOURCE is correct and I can build a BINARY out of it.

I’ve verified the produced BINARY tarball works (in pseudo-cluster mode).

Running {{hadoop-version}} from the BINARY a tarball reports:

{code}
$ bin/hadoop version
Hadoop 2.4.0-SNAPSHOT
Subversion http://svn.apache.org/repos/asf/hadoop/common -r 1563020
Compiled by jenkins on 2014-01-31T00:03Z
Compiled with protoc 2.5.0
From source with checksum 37ccb6f84b23196f521243fd192070
{code}

Once the JIRA is committed we have to modify the Jenkins job to use the script from {{dev-support/}} directory.

We could improve this script further to deploy the built JARs to the Maven repo. I don’t know how to do this, so it would be great if somebody that know how jumps on that. Maybe a s a follow up JIRA, so we have something going.
, {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12626231/HADOOP-10313.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in .

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HADOOP-Build/3508//testReport/
Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/3508//console

This message is automatically generated., +1, nice work tucu. I gave the bash script a quick review, but the proof is in the pudding. I tried the Jenkins job on the current branch-2.3, and the generated artifacts look good:

https://builds.apache.org/job/HADOOP2_Release_Artifacts_Builder/16/

Setting this up to build nightlies of the latest 2.x release branch (and branch-2 also) would be super cool. That, with automatic mvn deploy ([~rvs] implied that it should just work from Jenkins slaves), means we can get real CI with bigtop going!, Committed to trunk, branch-2 and branch-2.3., SUCCESS: Integrated in Hadoop-trunk-Commit #5080 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/5080/])
HADOOP-10313. Script and jenkins job to produce Hadoop release artifacts. (tucu) (tucu: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1563043)
* /hadoop/common/trunk/dev-support/create-release.sh
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
, v2 lgtm, SUCCESS: Integrated in Hadoop-Yarn-trunk #467 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk/467/])
HADOOP-10313. Script and jenkins job to produce Hadoop release artifacts. (tucu) (tucu: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1563043)
* /hadoop/common/trunk/dev-support/create-release.sh
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
, FAILURE: Integrated in Hadoop-Mapreduce-trunk #1684 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/1684/])
HADOOP-10313. Script and jenkins job to produce Hadoop release artifacts. (tucu) (tucu: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1563043)
* /hadoop/common/trunk/dev-support/create-release.sh
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
, SUCCESS: Integrated in Hadoop-Hdfs-trunk #1659 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/1659/])
HADOOP-10313. Script and jenkins job to produce Hadoop release artifacts. (tucu) (tucu: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1563043)
* /hadoop/common/trunk/dev-support/create-release.sh
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
]