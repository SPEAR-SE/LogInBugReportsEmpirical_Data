[I am attaching the two runs of the above mentioned unit test. Please note that the assertion message is a bit misleading. It basically means that the test expected to receive 404 response. But it received 200 response., [~xiaochen] [~asuresh] Here is a patch which fixes this race condition. Can you please review this and let me know your feedback ?, | (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue}  0m 13s{color} | {color:blue} Docker mode activated. {color} |
| {color:green}+1{color} | {color:green} @author {color} | {color:green}  0m  0s{color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:green}+1{color} | {color:green} test4tests {color} | {color:green}  0m  0s{color} | {color:green} The patch appears to include 1 new or modified test files. {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 12m 48s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 13m 25s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  0m 30s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  1m  3s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green}  0m 19s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  1m 25s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 48s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green}  0m 36s{color} | {color:green} the patch passed {color} |
| {color:red}-1{color} | {color:red} compile {color} | {color:red}  3m  8s{color} | {color:red} root in the patch failed. {color} |
| {color:red}-1{color} | {color:red} javac {color} | {color:red}  3m  8s{color} | {color:red} root in the patch failed. {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  0m 23s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  0m 52s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green}  0m 11s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green}  0m  0s{color} | {color:green} The patch has no whitespace issues. {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  1m 39s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 42s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} unit {color} | {color:green}  8m 52s{color} | {color:green} hadoop-common in the patch passed. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green}  0m 22s{color} | {color:green} The patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black} 48m 47s{color} | {color:black} {color} |
\\
\\
|| Subsystem || Report/Notes ||
| Docker |  Image:yetus/hadoop:a9ad5d6 |
| JIRA Issue | HADOOP-14044 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12850319/HADOOP-14044-001.patch |
| Optional Tests |  asflicense  compile  javac  javadoc  mvninstall  mvnsite  unit  findbugs  checkstyle  |
| uname | Linux 038987cc59ba 3.13.0-103-generic #150-Ubuntu SMP Thu Nov 24 10:34:17 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | /testptch/hadoop/patchprocess/precommit/personality/provided.sh |
| git revision | trunk / 258991d |
| Default Java | 1.8.0_121 |
| findbugs | v3.0.0 |
| compile | https://builds.apache.org/job/PreCommit-HADOOP-Build/11549/artifact/patchprocess/patch-compile-root.txt |
| javac | https://builds.apache.org/job/PreCommit-HADOOP-Build/11549/artifact/patchprocess/patch-compile-root.txt |
|  Test Results | https://builds.apache.org/job/PreCommit-HADOOP-Build/11549/testReport/ |
| modules | C: hadoop-common-project/hadoop-common U: hadoop-common-project/hadoop-common |
| Console output | https://builds.apache.org/job/PreCommit-HADOOP-Build/11549/console |
| Powered by | Apache Yetus 0.5.0-SNAPSHOT   http://yetus.apache.org |


This message was automatically generated.

, Thanks [~hgadre] for reporting the issue and providing a fix.

As discussed offline, this behavior from hadoop is non-deterministic currently. I think it logically makes sense to allow the caller a way to know whether the cancellation succeeded.

The only problem with AbstractDelegationTokenSecretManager is it's {{Public Evolving}}. I can't seem to find an explicit saying in [Hadoop's compatibility guideline|http://hadoop.apache.org/docs/r3.0.0-alpha1/hadoop-project-dist/hadoop-common/Compatibility.html] regarding {{protected}} methods. But this also could break binary compatibility if some outside jars are compiled with the old version (thanks [~andrew.wang] for pointing this out!). So I'm afraid the fix in patch 1 can't be committed, because we want to provide binary compat. even across major releases...

Other options I can think of:
- change ZKDTSM to throw instead of return false. This would be an incompatible behavior.
- find a way to guarantee all peer ZKDTSMs see the removal, before returning success for the cancellation. This is against the current ZKDTSM architecture where each ZKDTSM isn't peer-aware

So it seems there's no good way to satisfy your request of 'when 2 callers are cancelling, exactly 1 should see success'. I guess this may end up inline with zookeeper's [documentation|https://zookeeper.apache.org/doc/r3.1.2/zookeeperProgrammers.html#sc_WatchRememberThese] - client has to handle it.

Please feel free to share your thoughts... thanks., [~xiaochen] Thanks for the feedback. The patch-1 was just a starting point for the discussion (it doesn't compile fully if you see the build output :)).

bq. So it seems there's no good way to satisfy your request of 'when 2 callers are cancelling, exactly 1 should see success'. I guess this may end up inline with zookeeper's documentation - client has to handle it.

I don't think that is quite accurate. I understand that if 2 callers invoke cancel operation *concurrently* then it may not be possible to figure out which client actually deleted the token. But in my case there is just a single caller invoking cancel operation one after another. Hence I think it is a case of *application level* cache inconsistency which is being exposed to the client.

If we don't want to binary compatibility at the API level, would it be ok to change the API semantics ? e.g. an alternative would be for the server to return HTTP 200 in all cases (e.g. instead of sending 404 in case of nonexistent token). This will ensure that server provides consistent response to client regardless of cache inconsistency at the server. The [REST API semantics for DELETE method |http://restcookbook.com/HTTP%20Methods/idempotency/] also seem to favor this approach.

What do you think?


, Thanks [~hgadre]. I agree this behavior isn't elegant, but the issue is tricky. :)

Your idea of 200 for nonexistent token makes sense to me. But looking at the code it's not straightforward to check.

The only place to return 404 is [this|https://github.com/apache/hadoop/blob/branch-3.0.0-alpha2/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/web/DelegationTokenAuthenticationHandler.java#L319] - any IOE thrown when trying to cancel.

Looking into that code, {{DelegationTokenManager#cancelToken}} has 2 steps in general: 1. {{verifyToken}}, and 2.{{cancelToken}}.
It seems to me your success log caught the node removal at step 1, hence the {{No node in path}} messages from [here|http://github.mtv.cloudera.com/CDH/hadoop/blob/cdh5-2.6.0/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/ZKDelegationTokenSecretManager.java#L699], and an {{InvalidToken}} exception (and 404). The failure log didn't catch this, and went on into step 2, eventually reaching the {{ZKDTSM#removeStoredToken}} as we talked, and ended up with the message {{Attempted to remove a non-existing znode}} and returned null (and 200).

Assuming the above understanding is right, I think this ends up being the problem that {{DelegationTokenManager#cancelToken}} doesn't provide atomicity in the underlying secret manager. ADTSM's {{verifyToken}} and {{cancelToken}} is synchronized, but things can change between step1 and step2.

Given the level of callbacks between ADTSM and ZKDTSM, I think we have 2 directions moving forward:
- carefully find a way to fix the above problem.
- document this behavior. (It's also interesting that {{verifyToken}} only happens when the {{canceler}} passed into {{cancelToken}} is null btw...)

Thoughts?, [~xiaochen] Thanks for feedback. After reviewing the code, I see another alternative which should fix this problem without breaking the compatibility requirements.

Currently in ZKDelegationTokenSecretManager#cancelToken method, we attempt to load the token from ZK if it is not available in_memory cache. We invoke the base class cancelToken method regardless the token was available in ZK or not. The fix would be to catch the NODE_NOT_FOUND error explicitly and return 404 error.

https://github.com/apache/hadoop/blob/b6f290d5b660ad157c7076767c619d02b3d0f894/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/ZKDelegationTokenSecretManager.java#L854-L858

Would this be OK ?
, Thanks [~hgadre], I think this is the right direction, nice job. :)
Since {{getTokenInfo}} checks in-memory then queries ZK, and is again from that {{Public Evolving}} ADTSM, throwing may not be as clean.

But I think we can replace this logic in {{cancelToken}} with a new one:
{code}
    try {
      if (!currentTokens.containsKey(id)) {
        // See if token can be retrieved and placed in currentTokens
        getTokenInfo(id);
      }
      return super.cancelToken(token, canceller);
    } catch (Exception e) {
      LOG.error("Exception while checking if token exist !!", e);
      return id;
    }
{code}

We can always check if token exists in ZK, IOE if not. This would give us the 404 you wanted. If it exists, we proceed to add it to the {{currentTokens}}.

I would say this behavior change is a bug fix, so compatible. Only draw back is we have to check ZK for each token cancellation, so more load on ZK and some perf decrease on the cancellation. But don't think this is performance sensitive so trade off for correctness seems worthy., [~xiaochen] Thanks for the feedback. Here is a patch implementing this approach. I verified this patch manually on a real cluster. For this I had to disable Zookeeper watch to ensure that the inconsistency between local cache and the ZK state can be reproduced.

Please take a look and let me have your feedback. Due to concurrency issue, I think it would be difficult to write a unit test for this scenario. , | (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue}  0m 15s{color} | {color:blue} Docker mode activated. {color} |
| {color:green}+1{color} | {color:green} @author {color} | {color:green}  0m  0s{color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:red}-1{color} | {color:red} test4tests {color} | {color:red}  0m  0s{color} | {color:red} The patch doesn't appear to include any new or modified tests. Please justify why no new tests are needed for this patch. Also please list what manual steps were performed to verify this patch. {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 14m 49s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 13m 36s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  0m 29s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  1m 12s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green}  0m 17s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  1m 32s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 49s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green}  0m 39s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 10m 59s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green} 10m 59s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  0m 28s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  1m  0s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green}  0m 19s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green}  0m  0s{color} | {color:green} The patch has no whitespace issues. {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  1m 36s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 52s{color} | {color:green} the patch passed {color} |
| {color:red}-1{color} | {color:red} unit {color} | {color:red}  8m  7s{color} | {color:red} hadoop-common in the patch failed. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green}  0m 36s{color} | {color:green} The patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black} 59m 32s{color} | {color:black} {color} |
\\
\\
|| Reason || Tests ||
| Failed junit tests | hadoop.ha.TestZKFailoverController |
\\
\\
|| Subsystem || Report/Notes ||
| Docker |  Image:yetus/hadoop:a9ad5d6 |
| JIRA Issue | HADOOP-14044 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12850664/HADOOP-14044-002.patch |
| Optional Tests |  asflicense  compile  javac  javadoc  mvninstall  mvnsite  unit  findbugs  checkstyle  |
| uname | Linux 500b91fa3ec3 3.13.0-107-generic #154-Ubuntu SMP Tue Dec 20 09:57:27 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | /testptch/hadoop/patchprocess/precommit/personality/provided.sh |
| git revision | trunk / 0914fcc |
| Default Java | 1.8.0_121 |
| findbugs | v3.0.0 |
| unit | https://builds.apache.org/job/PreCommit-HADOOP-Build/11563/artifact/patchprocess/patch-unit-hadoop-common-project_hadoop-common.txt |
|  Test Results | https://builds.apache.org/job/PreCommit-HADOOP-Build/11563/testReport/ |
| modules | C: hadoop-common-project/hadoop-common U: hadoop-common-project/hadoop-common |
| Console output | https://builds.apache.org/job/PreCommit-HADOOP-Build/11563/console |
| Powered by | Apache Yetus 0.5.0-SNAPSHOT   http://yetus.apache.org |


This message was automatically generated.

, Thanks for the patch [~hgadre] and the manual tests, looks pretty good to me. I agree it's not worth to write a unit test, since that would introduce a whole lot of test controls (or too many mocks....).

Suggest to add {{synchronized}} keyword to the new {{syncLocalCacheWithZkState}}, since we're handling {{currentTokens}} there. I understand the current code is fine because the caller method {{cancelToken}} is synchronized, but adding it would be more future proof.

And a super trivial nit: I think we can just name the new method {{syncLocalCacheWithZk}}., [~xiaochen] Thanks for the review. Here is an updated patch which addresses these comments., | (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue}  0m 15s{color} | {color:blue} Docker mode activated. {color} |
| {color:green}+1{color} | {color:green} @author {color} | {color:green}  0m  0s{color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:red}-1{color} | {color:red} test4tests {color} | {color:red}  0m  0s{color} | {color:red} The patch doesn't appear to include any new or modified tests. Please justify why no new tests are needed for this patch. Also please list what manual steps were performed to verify this patch. {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 13m 31s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 14m 22s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  0m 29s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  1m  5s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green}  0m 18s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  1m 30s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 49s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green}  0m 39s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 11m 37s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green} 11m 37s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  0m 29s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  1m  2s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green}  0m 17s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green}  0m  0s{color} | {color:green} The patch has no whitespace issues. {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  1m 38s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 50s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} unit {color} | {color:green}  7m 55s{color} | {color:green} hadoop-common in the patch passed. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green}  0m 33s{color} | {color:green} The patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black} 59m 12s{color} | {color:black} {color} |
\\
\\
|| Subsystem || Report/Notes ||
| Docker |  Image:yetus/hadoop:a9ad5d6 |
| JIRA Issue | HADOOP-14044 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12850725/HADOOP-14044-003.patch |
| Optional Tests |  asflicense  compile  javac  javadoc  mvninstall  mvnsite  unit  findbugs  checkstyle  |
| uname | Linux 57fe2804ea40 3.13.0-106-generic #153-Ubuntu SMP Tue Dec 6 15:44:32 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | /testptch/hadoop/patchprocess/precommit/personality/provided.sh |
| git revision | trunk / 0914fcc |
| Default Java | 1.8.0_121 |
| findbugs | v3.0.0 |
|  Test Results | https://builds.apache.org/job/PreCommit-HADOOP-Build/11566/testReport/ |
| modules | C: hadoop-common-project/hadoop-common U: hadoop-common-project/hadoop-common |
| Console output | https://builds.apache.org/job/PreCommit-HADOOP-Build/11566/console |
| Powered by | Apache Yetus 0.5.0-SNAPSHOT   http://yetus.apache.org |


This message was automatically generated.

, Thanks [~hgadre] for revving! +1 on patch 3, will commit end of Friday.

Could you please set target version? 2.9.0 for branch-2, 3.0.0-alpha3 for trunk. Please check http://hadoop.apache.org/releases.html for earlier versions., Test failure look unrelated and passes locally. Also ran TestKMS in hadoop-kms and TestDelegationtoken in hadoop-hdfs, both passed.

Committed trunk and branch-2, thanks for reporting and fixing the issue, [~hgadre], and nice discussions!, SUCCESS: Integrated in Jenkins build Hadoop-trunk-Commit #11209 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/11209/])
HADOOP-14044. Synchronization issue in delegation token cancel (xiao: rev ba75bc759334c8987e5f7dd4b21d025f0cccbde7)
* (edit) hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/ZKDelegationTokenSecretManager.java
, This could be branch-2.8 and branch-2.7 candidate as well., Thanks [~vinayrpet] for the suggestion.

Just pushed to branch-2.8 and branch-2.7. The cherry-pick was clean. Compiled + ran TestZKDelegationTokenSecretManager locally before pushing.]