[I verified that when the setJobPriority or killJob (see HADOOP-4420) are called from the hadoop cli, a check is made to see if the job exists, and then the operation is launched. If the job doesn't exist, the operation fails with a message like "Could not find job ...". 

That said, there is a window of a chance when after the check, and before the request is submitted, the job is removed. Hence +1 for checking the validity of the job in the two methods., One thing to consider is how to inform the client back about the failure. Because if we silently return, the operation is treated as successful, and a message is printed from the JobClient that the said job has been killed or it's priority changed. 

We could throw an exception (subclassing IOException), something like UnknownJobException, and handle it on the client. It doesn't seem right though to have such a class to extend IOException. Does it ?

Another option is to define a new API which returns a boolean to indicate success or failure of the operation. Something like:
{code}
boolean setJobPriority(JobID jobID, String priority);
{code}

Any other thoughts ?, -tools other than the CLI can call this IPC method; the checks should be in this call, rather than just hoping whoever wrote the client side code got it right. (i.e. I may not be as competent as others)

-I'm OK with an exception being thrown, because this is unusual behaviour, and it is an error to try and do this on an invalid job. If the method returns false, its up to the caller to guess why., This is being fixed in HADOOP-4420]