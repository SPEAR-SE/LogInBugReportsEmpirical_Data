[Attached patch to use an absolute path instead of the relative path. This does require the build to be invoked from the project root directory., It reproduces on Linux (LD_LIBRARY_PATH is setup the same way on Linux as PATH is on Windows).

Will update with a consolidated patch for both platforms.
, We've been trying to find a graceful solution to this problem that involves defining the path to libhadoop.so or hadoop.dll in one place in hadoop-project/pom.xml, to be inherited with the correct value in each sub-module.  However, this doesn't seem feasible, because Maven evaluates variables after evaluating inheritance.  For example, this means that even if hadoop-project/pom.xml refers to basedir, then it evaluates to the basedir of the child project, and not hadoop-project's value.

Considering that, it seems we're forced into doing a bit of duplication.  Here is an idea that will at least minimize the amount of duplication:

# hadoop-project/pom.xml defines a property, hadoop.common.build.dir, set to basedir/../../hadoop-common-project/hadoop-common/target.
# hadoop-project/pom.xml defines LD_LIBRARY_PATH and PATH in terms of hadoop.common.build.dir.
# For the majority of sub-modules, the default value will be correct, because most sub-modules have a depth of 2 in the source tree.
# For sub-modules at a different depth, change its pom.xml to provide a different definition for hadoop.common.build.dir.  I believe the overrides needed would be:
## hadoop-mapreduce-project/hadoop-mapreduce-client/pom.xml needs to use ../../.. in the relative path
## hadoop-yarn-project/hadoop-yarn needs to use ../../.. in the relative path
## hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications needs to use ../../../.. in the relative path
## hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server needs to use ../../../.. in the relative path

If my understanding of pom.xml inheritance is correct (which is not guaranteed!), then evaluation of LD_LIBRARY_PATH and PATH will end up using the child's definition of hadoop.common.build.dir.  This way, at least we won't have to duplicate the entire maven-surefire-plugin configuration in each sub-module.
, Hi Chris,

I spent some time on this back in Feb. As you have discovered Maven makes this hard to solve. The problem with my attached patch is that it requires the build to be invoked from the root directory.

Here are my notes from then with a few other things I tried:

# Setting a relative path starting with ${basedir}. This did not work because the other projects evaluate basedir independently so depending on the level of nesting this does not work. e.g. ${basedir}/../../hadoop-common-project/hadoop-common/target/native/urs/local/lib works for HDFS tests but not for mapreduce tests. This is what you have just discovered too.
# Using ${session.executionRootDirectory}/hadoop-common-project/hadoop-common/target/native/urs/local/lib works if the build is called from the root directory but fails otherwise.
# Exporting the setting into a build.properties file via the root pom.xml using the Properties-maven-plugin. This causes a chicken and egg problem since the sub-projects do not know where to read the build.properties file from.
# profiles.xml would have worked but it has been deprecated for Maven 3.
# Setting a system property via the Properties-maven-plugin plugin but system properties are not exported to child projects.


The simplest solution which just works is to add duplicate entries in the path for different levels of nesting (2-4 should do the trick I think). i.e.
{code}
-                <PATH>${env.PATH};${basedir}/../../hadoop-common-project/hadoop-common/target/bin</PATH>
+                <PATH>${env.PATH};${basedir}/../../hadoop-common-project/hadoop-common/target/bin;${basedir}/../../../hadoop-common-project/hadoop-common/target/bin;${basedir}/../../../../hadoop-common-project/hadoop-common/target/bin</PATH>
{code}

I am not sure if it is better or worse than requiring overrides in individual pom files., {quote}
The simplest solution which just works is to add duplicate entries in the path for different levels of nesting (2-4 should do the trick I think).
{quote}

I'd be +1 for that approach.  I suppose the only potential risk is that modules at a lower nesting level could accidentally load a library from outside the entire project root, but it seems highly unlikely that the full path would exist outside the project and happen to have a libhadoop.so or hadoop.dll inside it.  It probably won't happen in practice.

BTW, the reason I've come back to this jira is that it came up in discussion on HADOOP-9413.  That patch would cause some test failures unless we also solve HADOOP-9290., {quote}
I'd be +1 for that approach. I suppose the only potential risk is that modules at a lower nesting level could accidentally load a library from outside the entire project root, but it seems highly unlikely that the full path would exist outside the project and happen to have a libhadoop.so or hadoop.dll inside it. It probably won't happen in practice.
{quote}

I did not want to make that fix because it's a hack. The risk you mention is one more reason not to do it, good catch., In that case, I'll see if I can get the override idea working.  I'll comment again after I test it., Here is a patch that allows a child pom.xml to override the relative path to hadoop-common's build dir for finding the native library.  I tried running various tests in hadoop-common, hadoop-mapreduce-client-jobclient, hadoop-yarn-server-nodemanager, and hadoop-yarn-applications-distributedshell.  I repeated running the tests from the root of the repository and also the individual child modules.  I repeated this procedure on both Windows and Linux with native build.  In all cases, I saw the tests successfully load the native library.
, {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12580143/HADOOP-9290.2.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in .

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HADOOP-Build/2467//testReport/
Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/2467//console

This message is automatically generated., {quote}
-1 tests included. The patch doesn't appear to include any new or modified tests.
{quote}

This is a change in build scripts only, so there is no suitable test.
, Thanks Arpit and Chris for preparing this patch! I kicked off a full test run on Windows to validate the approach.

In parallel, I have a few questions/comments on the latest patch:
1. hadoop-project/pom.xml: It seems that the currently defined value for LD_LIBRARY_PATH is invalid. I think it should have the following value:
{code}
<LD_LIBRARY_PATH>${env.LD_LIBRARY_PATH}:${project.build.directory}/native/target/usr/local/lib:${basedir}/../../hadoop-common-project/hadoop-common/target/bin</LD_LIBRARY_PATH>
{code}
2. hadoop-project/pom.xml: Assuming that we specified a valid value for LD_LIBRARY_PATH above, the following section might not be needed:
{code}
                <!-- Specify where to look for the native DLL on Windows -->
                <PATH>${env.PATH};${basedir}/../../hadoop-common-project/hadoop-common/target/bin</PATH>
                <PATH>${env.PATH};${hadoop.common.build.dir}/bin</PATH>
{code}
3. Other pom.xml files: Can we just define a new value for LD_LIBRARY_PATH next to HADOOP_HOME and point it to the appropriate /target/bin folder in every subproject? This would provide a nice symmetry with how we locate winutils on Windows.
4. Might make sense to either remove hadoop.common.build.dir or use it for both winutils.exe and hadoop.dll
, Chris,

I verified MR tests that could not load hadoop.dll can do so now after the fix. e.g. TestJobImpl.

Would you consider adding a one-line comment to hadoop-project/pom.xml explaining why the definition of hadoop.common.build.dir has the /../../? And the fact that it must be overridden for projects with different levels of nesting.

{code}
+     <hadoop.common.build.dir>${basedir}/../../hadoop-common-project/hadoop-common/target</hadoop.common.build.dir>
{code}

+1 otherwise. There is no clean way to fix it and this approach is the best option I can think of., My test run came back, it looks much better with the patch. Noticed that we still have the UnsatisfiedLinkError in contrib tests (for example, in TestBookKeeperHACheckpoints)., Thanks for the reviews, Arpit and Ivan.  I'm attaching version 3 of the patch.  This still might not be the final version, but I wanted to get you something to add the comment and fix the contrib problem ASAP.

{quote}
It seems that the currently defined value for LD_LIBRARY_PATH is invalid.
{quote}

I think the current values are correct, and my test runs on Linux were successfully loading libhadoop.so.  On Windows, the build puts hadoop.dll into target/bin.  On Linux, the build puts libhadoop.so into target/native/target/usr/local/lib.

{quote}
hadoop-project/pom.xml: Assuming that we specified a valid value for LD_LIBRARY_PATH above, the following section might not be needed
{quote}

I think we need a separate definition for PATH, because Windows doesn't use LD_LIBRARY_PATH, right?  Perhaps the split of definitions between the main part of the pom.xml and the native-win profile is a bit confusing.  I'll see if I can do anything to improve that.

{quote}
Might make sense to either remove hadoop.common.build.dir or use it for both winutils.exe and hadoop.dll
{quote}

My goal with hadoop.common.build.dir was to prevent the need for child modules to duplicate the whole maven-surefire-plugin <configuration> stanza.  I had forgotten that we already started down that path for HADOOP_HOME.  I think I can simplify so that the hadoop.common.build.dir override handles both needs, and there is less pom.xml configuration to maintain in child modules.  I'll test this and report back., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12580320/HADOOP-9290.3.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:red}-1 core tests{color}.  The patch failed these unit tests in hadoop-hdfs-project/hadoop-hdfs/src/contrib/bkjournal:

                  org.apache.hadoop.contrib.bkjournal.TestBookKeeperHACheckpoints

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HADOOP-Build/2471//testReport/
Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/2471//console

This message is automatically generated., bq. I think the current values are correct, and my test runs on Linux were successfully loading libhadoop.so. On Windows, the build puts hadoop.dll into target/bin. On Linux, the build puts libhadoop.so into target/native/target/usr/local/lib.
I see, thanks, did not know that we use a different path on Linux.

bq. I think we need a separate definition for PATH, because Windows doesn't use LD_LIBRARY_PATH, right? Perhaps the split of definitions between the main part of the pom.xml and the native-win profile is a bit confusing. I'll see if I can do anything to improve that.
Sorry, that's correct. For a second I confused LD_LIBRARY_PATH and java.library.path command line flag (the later one is supported by both platforms).

OK, let's focus on reconciling the logic for finding winutils.exe with the logic for finding hadoop.dll. Although, it would be super nice if we could have a consistent story for how the native library is loaded on Linux and Windows.

Thanks Chris!, +1 on the updated patch.

Many thanks for picking this up Chris!, I'm uploading version 4 of the patch.  I think this will be the final version (pending review and +1 of course).  I'm reusing hadoop.common.build.dir to specify the path for both winutils.exe and the native libraries.  You'll see that the child pom.xml files need to override much less of the maven-surefire-plugin configuration now, so there is less code to maintain.  Basically, the child pom.xml files are going back to the state of HADOOP-8755 (introduction of {{TimedOutTestsListener}}) + the small override of hadoop.common.build.dir.

I successfully reran my tests from last time (multiple tests, running at multiple nesting levels in the source tree, running on multiple platforms).
, {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12580562/HADOOP-9290.4.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:red}-1 core tests{color}.  The patch failed these unit tests in hadoop-hdfs-project/hadoop-hdfs/src/contrib/bkjournal:

                  org.apache.hadoop.contrib.bkjournal.TestBookKeeperHACheckpoints

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HADOOP-Build/2475//testReport/
Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/2475//console

This message is automatically generated., {quote}
-1 tests included. The patch doesn't appear to include any new or modified tests.
Please justify why no new tests are needed for this patch.
Also please list what manual steps were performed to verify this patch.
{quote}

This is a build script change only, so no tests are possible.
, The latest changes are looking even better. I will test it out on Windows later today.

Ultimately we can eliminate the winutils dependence on HADOOP_HOME. Of course that is way out of scope for this Jira., +1

Verified that hadoop.dll can be loaded by tests with different levels of nesting in the build tree. This doesn't work without the patch.

Also verified that tests can find winutils as expected., Latest patch looks really good, +1

Thanks Chris for addressing the comments!, +1 for the patch. I have committed it to trunk.

Thank you Chris! Thanks to Arpit and Ivan for reviews as well., Integrated in Hadoop-trunk-Commit #3678 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/3678/])
    HADOOP-9290. Some tests cannot load native library on windows. Contributed by Chris Nauroth. (Revision 1476586)

     Result = SUCCESS
suresh : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1476586
Files : 
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/contrib/bkjournal/pom.xml
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/pom.xml
* /hadoop/common/trunk/hadoop-project/pom.xml
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/pom.xml
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/pom.xml
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/pom.xml
, Integrated in Hadoop-Yarn-trunk #197 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk/197/])
    HADOOP-9290. Some tests cannot load native library on windows. Contributed by Chris Nauroth. (Revision 1476586)

     Result = SUCCESS
suresh : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1476586
Files : 
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/contrib/bkjournal/pom.xml
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/pom.xml
* /hadoop/common/trunk/hadoop-project/pom.xml
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/pom.xml
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/pom.xml
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/pom.xml
, Integrated in Hadoop-Hdfs-trunk #1386 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/1386/])
    HADOOP-9290. Some tests cannot load native library on windows. Contributed by Chris Nauroth. (Revision 1476586)

     Result = FAILURE
suresh : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1476586
Files : 
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/contrib/bkjournal/pom.xml
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/pom.xml
* /hadoop/common/trunk/hadoop-project/pom.xml
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/pom.xml
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/pom.xml
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/pom.xml
, Integrated in Hadoop-Mapreduce-trunk #1413 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/1413/])
    HADOOP-9290. Some tests cannot load native library on windows. Contributed by Chris Nauroth. (Revision 1476586)

     Result = SUCCESS
suresh : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1476586
Files : 
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/contrib/bkjournal/pom.xml
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/pom.xml
* /hadoop/common/trunk/hadoop-project/pom.xml
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/pom.xml
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/pom.xml
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/pom.xml
, Marking as resolved since the fix has been checked in., I merged the patch to branch-2.]