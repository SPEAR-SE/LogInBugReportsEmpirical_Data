[surefire report output attached, More information. I was using Hyper-V on Windows 8 running Ubuntu 12.04 VM. I found out that it was due to TestIPC#testSocketLeaks got stuck. However, if I just run that one test case, it will pass for me. But if I run all TestIPC unit tests, it will get stuck., The freeze is actually caused by test case TestIPC#testRetryProxy. If I just run this one test case, it was passing, but running all TestIPC tests results in main thread getting stuck in call.wait() (Client.java, line 1390). If I exclude this test case, or set a timeout, then TestIPC can pass.

This is caused by timing issue. Sometimes randomly the tests pass for me, but they fail most of the time. And if I attach a debugger to the test process and set a break point at this test case (testRetryProxy), the tests will pass then., I investigated this problem a little bit. I think there is some socket leak in the test code. Attach a patch that fix the leaking issue in the test by explicitly closing client and server at the end of each test case. , {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12600835/HADOOP-9896.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:red}-1 core tests{color}.  The patch failed these unit tests in hadoop-common-project/hadoop-common:

                  org.apache.hadoop.metrics2.impl.TestMetricsSystemImpl

                                      The following test timeouts occurred in hadoop-common-project/hadoop-common:

org.apache.hadoop.ipc.TestIPC

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HADOOP-Build/3046//testReport/
Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/3046//console

This message is automatically generated., I think we may also want to add timeout for each unit test in TestIPC, as proposed in HDFS-9916., bq.-1 core tests. The patch failed these unit tests in hadoop-common-project/hadoop-common:
bq.org.apache.hadoop.metrics2.impl.TestMetricsSystemImpl

This failure does not seem related to the fix at all.

[~jingzhao], I will add timeout as suggested., +1

Thanks Chuan! I tried the patch and it works fine!

Not sure when lingering client thread is causing this problem though. Looks like sometimes the Server response was probably consumed by other client thus the testRetryProxy()'s client is waiting forever. But anyway, this patch fixed the TestIPC test case and I think they are good fix.

, Attach a new patch. A 30 sec timeout is added to each test case. The unit test can pass consistently on my single core Ubuntu box. So I assume the timeout is enough for the test cases., {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12600870/HADOOP-9896.2.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-common-project/hadoop-common.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HADOOP-Build/3048//testReport/
Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/3048//console

This message is automatically generated., Hi [~chuanliu], I think this is not the root cause. I run restRetryProxy alone and also get the timeout, this probably has nothing to do with socket leak. Here is the error message.
{code}
      public void run() {
        LOG.info(Integer.toString(retryCount));
        Assert.assertEquals(retryCount++, Server.getCallRetryCount());
      }
{code}

{code}
2013-08-31 06:00:45,603 INFO  ipc.Server (Server.java:run(567)) - Starting Socket Reader #1 for port 53964
2013-08-31 06:00:45,665 INFO  ipc.Server (Server.java:run(864)) - IPC Server Responder: starting
2013-08-31 06:00:45,665 INFO  ipc.Server (Server.java:run(691)) - IPC Server listener on 53964: starting
2013-08-31 06:00:45,754 WARN  util.NativeCodeLoader (NativeCodeLoader.java:<clinit>(62)) - Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
2013-08-31 06:00:45,784 INFO  ipc.TestIPC (TestIPC.java:run(785)) - 0
2013-08-31 06:00:45,790 INFO  ipc.TestIPC (TestIPC.java:run(785)) - 1
[EOF]
{code}

You can see client retried twice and got stuck

{code}
-------------------------------------------------------
 T E S T S
-------------------------------------------------------
Running org.apache.hadoop.ipc.TestIPC
Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 10.253 sec <<< FAILURE!
testRetryProxy(org.apache.hadoop.ipc.TestIPC)  Time elapsed: 10019 sec  <<< ERROR!
java.lang.Exception: test timed out after 10000 milliseconds
	at java.lang.Object.wait(Native Method)
	at java.lang.Object.wait(Object.java:485)
	at org.apache.hadoop.ipc.Client.call(Client.java:1390)
	at org.apache.hadoop.ipc.Client.call(Client.java:1357)
	at org.apache.hadoop.ipc.Client.call(Client.java:1302)
	at org.apache.hadoop.ipc.TestIPC$TestInvocationHandler.invoke(TestIPC.java:201)
	at org.apache.hadoop.ipc.$Proxy7.dummyRun(Unknown Source)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.hadoop.io.retry.RetryInvocationHandler.invokeMethod(RetryInvocationHandler.java:185)
	at org.apache.hadoop.io.retry.RetryInvocationHandler.invoke(RetryInvocationHandler.java:101)
	at org.apache.hadoop.ipc.$Proxy7.dummyRun(Unknown Source)
	at org.apache.hadoop.ipc.TestIPC.testRetryProxy(TestIPC.java:800)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:62)

{code}

, Another run timeout, this time with a bit more log

{code}

2013-08-31 06:20:35,671 INFO  ipc.Server (Server.java:run(567)) - Starting Socket Reader #1 for port 59419
2013-08-31 06:20:35,722 INFO  ipc.Server (Server.java:run(864)) - IPC Server Responder: starting
2013-08-31 06:20:35,723 INFO  ipc.Server (Server.java:run(691)) - IPC Server listener on 59419: starting
2013-08-31 06:20:35,792 WARN  util.NativeCodeLoader (NativeCodeLoader.java:<clinit>(62)) - Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
2013-08-31 06:20:35,833 INFO  ipc.TestIPC (TestIPC.java:run(805)) - 0
2013-08-31 06:20:35,843 INFO  ipc.TestIPC (TestIPC.java:run(805)) - 1
2013-08-31 06:20:45,830 INFO  ipc.Server (Server.java:doRead(804)) - IPC Server listener on 59419: readAndProcess from client 127.0.0.1 threw exception [java.io.IOException: Connection reset by peer]
java.io.IOException: Connection reset by peer
        at sun.nio.ch.FileDispatcher.read0(Native Method)
        at sun.nio.ch.SocketDispatcher.read(SocketDispatcher.java:21)
        at sun.nio.ch.IOUtil.readIntoNativeBuffer(IOUtil.java:198)
        at sun.nio.ch.IOUtil.read(IOUtil.java:171)
        at sun.nio.ch.SocketChannelImpl.read(SocketChannelImpl.java:245)
        at org.apache.hadoop.ipc.Server.channelRead(Server.java:2600)
        at org.apache.hadoop.ipc.Server.access$3200(Server.java:125)
        at org.apache.hadoop.ipc.Server$Connection.readAndProcess(Server.java:1503)
        at org.apache.hadoop.ipc.Server$Listener.doRead(Server.java:795)
        at org.apache.hadoop.ipc.Server$Listener$Reader.doRunLoop(Server.java:594)
        at org.apache.hadoop.ipc.Server$Listener$Reader.run(Server.java:569)
{code}

I suspect there is race condition in Client or Server causing this.


, [~macrokigol], I think the timeout is a separate issue. In our case, if we run testRetryProxy alone, it never fails. However when running all the test cases in the test class together, we will always get the JVM crash error due to testRetryProxy hangs.

It could be a race condition. What is your OS and configuration? [~shanyu] suspects your guys never run into our problem because you have faster machines. So it could also be that our Linux VM is slower and we never run into this timeout issue., [~chuanliu] My test env is Ubuntu 11.10 Linux 3.0.0, VM running in Mac Fusion.  
If I run all the tests, it timeouts more often, but not always, if I run just testRetryProxy, the timeout probability is lower.
, I may found the race condition in ipc.Client and have a fix, please see the detail in [HADOOP-9916], I think we should mark it as duplicated?, Resolving this as HADOOP-9916 should fix the root cause in IPC Client implementation.]