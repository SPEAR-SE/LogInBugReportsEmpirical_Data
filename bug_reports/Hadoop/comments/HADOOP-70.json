[TestFileSystem only takes 4 seconds for me, but TestDFS is too slow.  So I'm +1 for moving TestDFS to a test-long target.  Then we should make the "nightly" target depend on test-long.
, TestFileSystem connects to the default FileSystem in the conf directory. Would it be ok to make TestFileSystem always use local? Otherwise it can be really slow (10 minutes before I killed it) or fail if the cluster happens to be down.

I'd like to have "ant test" take minutes and not depend on the cluster being available, so that I can use it during development.
, I'm okay with having it always run local when run as a unit test, but not from the command line.  From the command line it should use the configured filesystem, no?  But unit tests should probably be config-independent, explicitly testing different config options., That sounds reasonable. 

I think we need to go the next step and create a conf directory that is used for junit tests. How about 
a conf/junit that contains hadoop-site.xml and mapred-defaults.xml. I'll change the test classpath to include the real conf directory to pick up the hadoop-default.xml so that it doesn't need to be duplicated.

Maybe instead of a "test-long" target it should be a "cluster-test" and it uses the real conf directory.

In all cases, the command line version of the test should use the real conf directory., This patch creates a config directory for the junit tests that forces mapreduce and dfs to "local". It also renames TestDFS to ClusterTestDFS and creates a new ant target "cluster-test" that runs with the real config directory instead of the junit config., I just committed this.

I changed things so that the test config files are in src/test rather than conf/junit.  That's the way Nutch does something similar, and it also requires a less classpath manipulation, since src/test is already on the test classpath (although I had to reorder things, to make sure it came ahead of conf/).  I also changed the conf files in src/test to be empty, forcing defaults to be used for unit tests.  Finally, to implement the test-cluster task, instead of copying the test task I parameterized the test task a bit and call it., The unit tests should not be using /tmp for their data, because it won't be cleaned up and could conflict between users. By setting the config files to put the directories under build/test/data/run you are sure that it will be cleared at least the next time you run the test and each user has their own., Okay, I set the test configuration to write things to build/test instead of /tmp.  But, if temp really makes things fragile, then perhaps we should really change the default, rather than change the test, no?  Personally I slightly prefer /tmp for unit tests, since it is much faster when you're developing in an nfs-mounted home directory..., I vote for changing the default.  If using /tmp makes sense in your setup, you should be free to change the default.  We should making doing so globally easy.  But we should steer free of using /tmp unless asked to.  It is one of those things that just bites folks over and over and over again.]