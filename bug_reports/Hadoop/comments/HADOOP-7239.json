[Is there some documentation that suggests this would be possible? This is not a bug in my opinion., I looked at code for the root cause. It is as follows

While writing the job.xml, it is using the Configuration.writeXML(), which is as follows

{code:title=Configuration.java|borderStyle=solid}
Properties properties = getProps();
    try {
     ......

      for (Enumeration e = properties.keys(); e.hasMoreElements();) {
        String name = (String)e.nextElement();
        Object object = properties.get(name);
        String value = null;
        if (object instanceof String) {
          value = (String) object;
        }else {
          continue;
        }
{code} 

So here all properties in configuration are retrieved using getProps() which returns a ConcurrentHashMap and written to XML from that. So the variables are not substituted. instead of using *properties.get(name);*
in above snippet we should use *get(name)*, so that all variable substitution happen correctly.



, Hi Todd,

But the point here is, after creating the Job in my client application

{noformat} Job job = new Job(conf, "${mapred.user.name}" + "-job" + new Random().nextInt());{noformat} 

If I call job.getJobName() it returns me correct name. But if we get the Job Profile from the Job Tracker  and check the name/ check the Job tracker UI, it contains the expression. , This seems to be an issue with the current version, too. ]