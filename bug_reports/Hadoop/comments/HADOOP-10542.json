[I think we need to look at why the error "NoSuchKey" is being mapped to {{null}}, rather than raise an exception -and for the selective reporting in {{handleServiceException()}}. Do that -and provide a useful error, and the deref here goes away. 

 HADOOP-10533 seems related., this still exists in 2.6. Ted: do you have a patch for this?, If in is null, do we return an empty fileBlock or raise exception ?
I lean toward the latter. e.g. raise IOE with message saying object with key blockToKey(block) wasn't found., IOE: it's the only thing that ensures callers won't themselves NPE, {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12692922/hadoop-10542-001.patch
  against trunk revision 43302f6.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-tools/hadoop-aws.

Test results: https://builds.apache.org/job/PreCommit-HADOOP-Build/5422//testReport/
Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/5422//console

This message is automatically generated., +1, committing, FAILURE: Integrated in Hadoop-trunk-Commit #6882 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/6882/])
HADOOP-10542 Potential null pointer dereference in Jets3tFileSystemStore retrieveBlock(). (Ted Yu via stevel) (stevel: rev c6c0f4eb25e511944915bc869e741197f7a277e0)
* hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3/Jets3tFileSystemStore.java
* hadoop-common-project/hadoop-common/CHANGES.txt
, FAILURE: Integrated in Hadoop-Yarn-trunk-Java8 #77 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk-Java8/77/])
HADOOP-10542 Potential null pointer dereference in Jets3tFileSystemStore retrieveBlock(). (Ted Yu via stevel) (stevel: rev c6c0f4eb25e511944915bc869e741197f7a277e0)
* hadoop-common-project/hadoop-common/CHANGES.txt
* hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3/Jets3tFileSystemStore.java
, FAILURE: Integrated in Hadoop-Yarn-trunk #811 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk/811/])
HADOOP-10542 Potential null pointer dereference in Jets3tFileSystemStore retrieveBlock(). (Ted Yu via stevel) (stevel: rev c6c0f4eb25e511944915bc869e741197f7a277e0)
* hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3/Jets3tFileSystemStore.java
* hadoop-common-project/hadoop-common/CHANGES.txt
, FAILURE: Integrated in Hadoop-Hdfs-trunk #2009 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/2009/])
HADOOP-10542 Potential null pointer dereference in Jets3tFileSystemStore retrieveBlock(). (Ted Yu via stevel) (stevel: rev c6c0f4eb25e511944915bc869e741197f7a277e0)
* hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3/Jets3tFileSystemStore.java
* hadoop-common-project/hadoop-common/CHANGES.txt
, FAILURE: Integrated in Hadoop-Hdfs-trunk-Java8 #74 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk-Java8/74/])
HADOOP-10542 Potential null pointer dereference in Jets3tFileSystemStore retrieveBlock(). (Ted Yu via stevel) (stevel: rev c6c0f4eb25e511944915bc869e741197f7a277e0)
* hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3/Jets3tFileSystemStore.java
* hadoop-common-project/hadoop-common/CHANGES.txt
, FAILURE: Integrated in Hadoop-Mapreduce-trunk-Java8 #78 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk-Java8/78/])
HADOOP-10542 Potential null pointer dereference in Jets3tFileSystemStore retrieveBlock(). (Ted Yu via stevel) (stevel: rev c6c0f4eb25e511944915bc869e741197f7a277e0)
* hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3/Jets3tFileSystemStore.java
* hadoop-common-project/hadoop-common/CHANGES.txt
, FAILURE: Integrated in Hadoop-Mapreduce-trunk #2028 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/2028/])
HADOOP-10542 Potential null pointer dereference in Jets3tFileSystemStore retrieveBlock(). (Ted Yu via stevel) (stevel: rev c6c0f4eb25e511944915bc869e741197f7a277e0)
* hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3/Jets3tFileSystemStore.java
* hadoop-common-project/hadoop-common/CHANGES.txt
, This change seems to break some things.  In particular, have a closer look at:

S3FileSystem.getFileStatus()   (which no longer raises FileNotFoundException but instead IOException)
FileSystem.exists()                   (which no longer returns false but instead raises IOException)
S3FileSystem.create()              (which no longer succeeds but instead raises IOException)

While the javadoc suggests that the API permits one to raise IOException, most of the code I have
encountered while debugging a command like "hadoop distcp hdfs://localhost:9000/test s3://xxx:yyy@com.bar.foo/"
seems to expect (1) retrieveINode() to return null and (2) FileNotFoundException to be raised when a file is not 
found (i.e. when get() fails!).

2015-12-11 10:04:34,030 FATAL [IPC Server handler 6 on 44861] org.apache.hadoop.mapred.TaskAttemptListenerImpl: Task: attempt_1449826461866_0005_m_000006_0 - exited : java.io.IOException: /test doesn't exist
	at org.apache.hadoop.fs.s3.Jets3tFileSystemStore.get(Jets3tFileSystemStore.java:170)
	at org.apache.hadoop.fs.s3.Jets3tFileSystemStore.retrieveINode(Jets3tFileSystemStore.java:221)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.apache.hadoop.io.retry.RetryInvocationHandler.invokeMethod(RetryInvocationHandler.java:187)
	at org.apache.hadoop.io.retry.RetryInvocationHandler.invoke(RetryInvocationHandler.java:102)
	at com.sun.proxy.$Proxy17.retrieveINode(Unknown Source)
	at org.apache.hadoop.fs.s3.S3FileSystem.getFileStatus(S3FileSystem.java:340)
	at org.apache.hadoop.tools.mapred.CopyMapper.map(CopyMapper.java:230)
	at org.apache.hadoop.tools.mapred.CopyMapper.map(CopyMapper.java:50)
	at org.apache.hadoop.mapreduce.Mapper.run(Mapper.java:146)
	at org.apache.hadoop.mapred.MapTask.runNewMapper(MapTask.java:787)
	at org.apache.hadoop.mapred.MapTask.run(MapTask.java:341)
	at org.apache.hadoop.mapred.YarnChild$2.run(YarnChild.java:164)
	at java.security.AccessController.doPrivileged(Native Method)
	at javax.security.auth.Subject.doAs(Subject.java:415)
	at org.apache.hadoop.security.UserGroupInformation.doAs(UserGroupInformation.java:1657)
	at org.apache.hadoop.mapred.YarnChild.main(YarnChild.java:158)

changing the "raise IOE..." to "return null" fixes all of the above code sites and 
allows distcp to succeed.
, Matt -can you create a new JIRA on that; tag it as caused-by this one?

s3n is a perennial troublespot, though I'm surprised that what you are seeing crept through]