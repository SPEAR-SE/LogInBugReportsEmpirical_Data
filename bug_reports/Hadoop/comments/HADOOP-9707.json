[{color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12591237/hadoop-9707.txt
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-common-project/hadoop-common.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HADOOP-Build/2749//testReport/
Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/2749//console

This message is automatically generated., The clobber lists are actually okay. Your change is to the templates. It affects register allocation, but not in this case because of the nature of the instruction. I don't think it has anything to do with correctness.  At the RTL-level and in the binary, I see the two pieces of generated code are identical, but there are extra information in RTL.  If code was written in a way that the link between source and assembly code is confusing, this can be helpful. But it still does not affect the actual code being executed.

Without turning the compiler optimization on, the input and output variables are copied in and out inside the loop, which starves the pipeline. Even in this case, all outputs are copied out because the template specifies all of them.

The patch is okay. I am curious whether you have seen any cases in which it breaks., Hey Kihwal. We did see a case where this code was put into another project and it caused problems. It was a few months ago, and now I can't remember whether the issue was incorrect results or some kind of crash. [~bockelman] also mentioned this to me, that he'd lifted this code into another program and ran into an issue where the results for 'crc1' ended up writing over 'crc2'., Hi - 

This resulted in an incorrect result for me when I was incorporating this code into a separate (appropriately licensed, open-source) project.  I verified that the patch results in correct behavior.


To quote the GCC docs (http://gcc.gnu.org/onlinedocs/gcc/Extended-Asm.html):
{quote}
Only a number in the constraint can guarantee that one operand is in the same place as another. The mere fact that foo is the value of both operands is not enough to guarantee that they are in the same place in the generated assembler code. The following does not work reliably:

     asm ("combine %2,%0" : "=r" (foo) : "r" (foo), "g" (bar));
{quote}

Hope this helps., Sorry I thought I posted +1 almong with my findings yesterday. 

+1 for the patch. 

I also looked at the documentation Brian quoteded. I tried many things to make compilers generate a problematic RTL, but was unsuccessful until the loop unrolling was enabled. I could clearly see the defect in there. 

Thanks for finding and providing the fix. 
, Thanks for the patch, Todd. And also thanks for the input, Brian. I've committed this to branch-2, branch-2.1-beta and trunk., SUCCESS: Integrated in Hadoop-trunk-Commit #4084 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/4084/])
HADOOP-9707. Fix register lists for crc32c inline assembly. Contributed by Todd Lipcon. (kihwal: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1503390)
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/native/src/org/apache/hadoop/util/bulk_crc32.c
, FAILURE: Integrated in Hadoop-Yarn-trunk #272 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk/272/])
HADOOP-9707. Fix register lists for crc32c inline assembly. Contributed by Todd Lipcon. (kihwal: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1503390)
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/native/src/org/apache/hadoop/util/bulk_crc32.c
, FAILURE: Integrated in Hadoop-Hdfs-trunk #1462 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/1462/])
HADOOP-9707. Fix register lists for crc32c inline assembly. Contributed by Todd Lipcon. (kihwal: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1503390)
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/native/src/org/apache/hadoop/util/bulk_crc32.c
, FAILURE: Integrated in Hadoop-Mapreduce-trunk #1489 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/1489/])
HADOOP-9707. Fix register lists for crc32c inline assembly. Contributed by Todd Lipcon. (kihwal: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1503390)
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/native/src/org/apache/hadoop/util/bulk_crc32.c
]