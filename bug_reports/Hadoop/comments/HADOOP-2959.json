[
I should have pounted out the use case why this is matter.
When the combining logic (reducer logic) depends on some thing that is initialized 
in the configure method, and of the configure method call is relative expensive (say initialize a dictionary 
from a file on dfs), then such an optimization makes a huge difference.

, This is a feature, not a bug. The reduce (and combiner) are guaranteed they will get the inputs in sorted order. If you re-use a combiner, that is no longer true. If initialization is expensive, move it to an external/static class., 
I don't think such a feature hold much value for combiners.
And  I don't think such a contract is ever documented clearly for combiners.
Do you have any use cases for that feature for the combiner?]