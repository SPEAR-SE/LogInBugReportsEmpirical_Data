[Full log of the test execution, The environment and all are available from [Hudson build|http://hudson.zones.apache.org/hudson/view/Hadoop/job/Hadoop-Hdfs-trunk-Commit/109/testReport/org.apache.hadoop.hdfs.server.namenode/TestEditLog/testEditLog/], This issue seems to be a regression (or rather the result of incomplete fix of HADOOP-4744)
The problem is surfacing quite often in Pig (a few times per week). So, I'm raising the priority to the Blocker, cause all components are affected by this issue., After all it seems to be a race condition in the Jetty, e.g. (NameNode:367)
{noformat}
    this.httpServer.start();
{noformat}

Appropriate log file
{noformat}
2009-11-13 07:02:04,605 INFO  http.HttpServer (HttpServer.java:start(432)) - Port returned by webServer.getConnectors()[0].getLocalPort() before open() is -1. Opening the listener on 0
2009-11-13 07:02:04,606 INFO  http.HttpServer (HttpServer.java:start(437)) - listener.getLocalPort() returned 37817 webServer.getConnectors()[0].getLocalPort() returned 37817
2009-11-13 07:02:04,607 INFO  http.HttpServer (HttpServer.java:start(470)) - Jetty bound to port 37817
2009-11-13 07:02:04,607 INFO  mortbay.log (?:invoke0(?)) - jetty-6.1.14
2009-11-13 07:03:04,231 INFO  mortbay.log (?:invoke0(?)) - Started SelectChannelConnector@localhost:37817
{noformat}

And the this code is executed (NameNode:370-371)
{noformat}
    // The web-server port can be ephemeral... ensure we have the correct info
    infoPort = this.httpServer.getPort();
    this.httpAddress = new InetSocketAddress(infoHost, infoPort);
{noformat}
and {{this.httpServer.getPort();}} returns -1 as the infoPort value

I'll try to work out a minimal test case to reproduce this problem, however it might be hard., Strictly speaking it should be responsibility of {{HttpServer}} to make guarantees that webserver is up and running and declared ports are actually bound.

Thus, here's the patch which hopefully will reduce the number of seeing errors like this one. The patch doesn't solve the underlying problem which seems to be rather a result of a race condition in jetty. However, it should do the job., I've ran few hundreds iterations of bringing up and shutting down the MiniDFSCluster with and without this patch in place and haven't see a single issue. Which doesn't prove though that the patch doesn't work :-(, Patch for 0.20, Slightly more intelligent version of the patch., Same for 0.20, Not sure this is going to help. From the printout we know that the port you are checking in the if statement is not -1, so the workaround code is not called. If I don't miss something.
I guess we can check {{webServer.isStarted()}} before returning from {{HttpServer.start()}}., Said port number is positive before the start of the server. However, after the supposed start the local port number turns to be -1 which causes the very error we're seeing.
I'm also not sure if checking that the component in question has been started will be indicative., My understanding was that {{getPort()}} is called before the server actually started, because {{HttpServer.start()}} is asynchronous. Therefore I believe {{isStarted()}} should help. Do you think it's a different problem?, You've brought up an interesting issue. According to the latest Jetty source code 
[Container.java|http://jetty.cvs.sourceforge.net/viewvc/jetty/Jetty/src/org/mortbay/util/Container.java?revision=1.5&view=markup] first calls polymorphic {{doStart()}} and then sets {{_started}} flag to {{true}}. I.e.
{noformat}
            doStart();
            _started=true;
{noformat}
Now, [HttpServer|http://jetty.cvs.sourceforge.net/viewvc/jetty/Jetty/src/org/mortbay/http/HttpServer.java?revision=1.70&view=markup]'s {{doStart()}} method JavaDoc states that 
{noformat}
    /** Start all handlers then listeners.
     * If a subcomponent fails to start, it's exception is added to a
     * org.mortbay.util.MultiException and the start method continues.
{noformat}

So, strictly speaking this isn't an asynchronous method. Besides, if something would go wrong we are likely to see an MultiException thrown by this 'failing' server instance. However, we don't see any. Which brings me to the conclusion that server seems to start properly and {{isStarted()}} is going to return {{true}} in this case. 

There's still a chance that we are dealing with a race condition in the Jetty server, but it isn't apparent what's causing it ;-(, Another example of this test failure: http://hudson.zones.apache.org/hudson/job/Mapreduce-Patch-h3.grid.sp2.yahoo.net/166/testReport/org.apache.hadoop.mapred/TestMiniMRWithDFS/testWithDFSWithDefaultPort/

Do we have a Jetty JIRA open for this?, Not exactly. According to  HADOOP-4744 Jetty folks rejected to believe that this is Jetty's problem. As no one was able to provide reproducible enough test case Hadoop's fellas had to workaround it back then. It seems that we need to workaround it again :-(, Fixing an issue with path in the patch., New version of the patch - there's no need to start/stop listeners, because it is done by the server start/stop methods., Addressing Konstantin's comment about un-welcomed collapse of imports list., You may want to put some LOG.warn statements at the places where the port number happens to be unexpected (port < 0). With a hope that this takes care of the race condition, i am okay with the last two patches. If i get some other idea on handling it better i will put a comment here., Adding logging statements per Devaraj's comment., This patch is safe to commit and try, IMO. It does not make things worse, aothough it is not clear whether it fixes the problem. Current intuition is that there is something wrong with Jetty. We should look more closely in their code. BTW, the sources for Jetty 6.1 are here
http://jetty.mortbay.org/jetty/jetty-6/xref/index.html
and they look pretty different from Jetty 5.
Since this is critical for PIG I'd recommend committing the workaround for now until the problem is fully investigated., Also, here's the [.zip file of source code|https://olex.openlogic.com/package_versions/download/7015?package_version_id=2115&path=openlogic%2Fjetty%2F6.1.14%2Fopenlogic-jetty-6.1.14-all-src-1.zip] of Jetty 6.1.14 (currently used by Hadoop) available for download., Integrated in Hadoop-Common-trunk-Commit #100 (See [http://hudson.zones.apache.org/hudson/job/Hadoop-Common-trunk-Commit/100/])
    . NameNode's HttpServer can't instantiate InetSocketAddress: IllegalArgumentException is thrown. Contributed by Konstantin Boudnik.
, I've just committed it to the trunk and branch-0.21., Integrated in Hadoop-Common-trunk #182 (See [http://hudson.zones.apache.org/hudson/job/Hadoop-Common-trunk/182/])
    . NameNode's HttpServer can't instantiate InetSocketAddress: IllegalArgumentException is thrown. Contributed by Konstantin Boudnik.
, I keep seeing this problem surfacing here and again. 

Looks like the offered workaround hasn't worked (as well as HADOOP-4744 didn't have a chance) because {{webServer.getConnectors()[0].getLocalPort()}} returns positive value while the control is inside of HttpServer object. However, it returns -1 when is inqueried from outside., The fix has been delivered via HADOOP-6428
]