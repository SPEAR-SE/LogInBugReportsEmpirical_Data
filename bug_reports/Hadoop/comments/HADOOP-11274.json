[Deliver a quick patch to fix it., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12679557/HADOOP-11274.patch
  against trunk revision 8e9502e.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:red}-1 core tests{color}.  The following test timeouts occurred in hadoop-common-project/hadoop-common:

org.apache.hadoop.http.TestHttpServerLifecycle

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HADOOP-Build/5031//testReport/
Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/5031//console

This message is automatically generated., [~djp], I'm afraid read and write access to other.updatingResource is still not completely synchronized after the patch.
{code}
     this.updatingResource = new HashMap<String, String[]>(other.updatingResource);
     this.finalParameters = new HashSet<String>(other.finalParameters);
{code}

updatingResource can be also modified by {{set(String name, String value, String source)}} and {{readFields(DataInput in)}}., Thanks [~zjshen] for review and comments. Yes. there are more places need to be synchronized. Beside two places mentioned above, write() should also be synchronized. Also, for loadProperty(), replacing synchronized method with fine-grained synchronized block which should minimize the performance impact of adding synchronization here. Fix them in v2 patch., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12679770/HADOOP-11274-v2.patch
  against trunk revision e4b4901.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-common-project/hadoop-common.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HADOOP-Build/5040//testReport/
Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/5040//console

This message is automatically generated., +1  the second patch looks good to me, Thanks for the fix, [~djp]! One more minor comment is that can we move the following out of the "other"'s monitor? In this way we can avoid in the future some careless code takes these two locks in reverse order.
{code}
+      synchronized(Configuration.class) {
+        REGISTRY.put(this, null);
+      }
{code}, Since the change is simple, update the patch for [~djp], bq. One more minor comment is that can we move the following out of the "other"'s monitor? 

It makes sense. Thought the {{synchronized(Configuration.class)}} are just used in two constructors no, let's keep cautious to avoid potential dead lock. +1, {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12680005/HADOOP-11274.003.patch
  against trunk revision 75b820c.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-common-project/hadoop-common.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HADOOP-Build/5044//testReport/
Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/5044//console

This message is automatically generated., FAILURE: Integrated in Hadoop-trunk-Commit #6471 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/6471/])
HADOOP-11274. ConcurrentModificationException in Configuration Copy Constructor. Contributed by Junping Du. (jing9: rev 16b34824673f5a50d464727b8fad98470e5e984a)
* hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/conf/Configuration.java
* hadoop-common-project/hadoop-common/CHANGES.txt
, I've committed this to trunk, branch-2 and branch-2.6. Thanks to Junping for the contribution and Zhijie for the review!, Thanks [~jingzhao] [~djp] [~zjshen] for quick turn around on this one. Appreciated !, I don't know the behavior of locking this in a constructor, but assuming so, I think there is a deadlock already.


Thread 1: Copy constructor takes lock on object 2, and then calls setQuietly which waits on locking on itself
Thread 2: Same but the locking in reverse order., Oops, I did not notice that setQuietly also takes the lock. The deadlock looks very hard to hit though, since the two configuration objects need to use each other for construction. However, considering this is a very critical part of the code, maybe we should revert the patch from trunk, branch-2 and branch-2.6 before we have a clear solution., Can you use an object before constructors are complete?, I've reverted the patch.

bq. Can you use an object before constructors are complete?
No. But we need to take a more careful check of the current code I guess., Tx for the clarification Jing, yes, my analysis is wrong.

Still, locking the entire object for updateResources is plain bad along with locking during read and write conf operations. We should NOT be making these changes without careful analysis and testing - this Configuration class is the center piece of ten's of projects., FAILURE: Integrated in Hadoop-trunk-Commit #6474 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/6474/])
Revert "HADOOP-11274. ConcurrentModificationException in Configuration Copy Constructor. Contributed by Junping Du." (jing9: rev ba0a42cf678f1bb53c2ad22e766b3b1a07b3800b)
* hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/conf/Configuration.java
* hadoop-common-project/hadoop-common/CHANGES.txt
, Thanks for comments, [~vinodkv] and [~jingzhao]!
bq. The deadlock looks very hard to hit though, since the two configuration objects need to use each other for construction.
This is not hard to hit but something never should happen. From Java spec, only the thread that creates an object should have access to it while it is being constructed. No thread should use an object being constructed to create an object already constructed.

bq. Still, locking the entire object for updateResources is plain bad along with locking during read and write conf operations. We should NOT be making these changes without careful analysis and testing - this Configuration class is the center piece of ten's of projects.
Agree there is performance impact risk here. May be replace the object synchronization with read/write lock (and with different monitor object for different share resources) so that multiple reading thread won't block each other?, bq. May be replace the object synchronization with read/write lock (and with different monitor object for different share resources) so that multiple reading thread won't block each other?

Agree. When concurrent read is frequent, a read-write lock would alleviate the performance degradation. However, maybe we would like to comprehensively understand the situation here before take any further action? , FAILURE: Integrated in Hadoop-Yarn-trunk #736 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk/736/])
HADOOP-11274. ConcurrentModificationException in Configuration Copy Constructor. Contributed by Junping Du. (jing9: rev 16b34824673f5a50d464727b8fad98470e5e984a)
* hadoop-common-project/hadoop-common/CHANGES.txt
* hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/conf/Configuration.java
Revert "HADOOP-11274. ConcurrentModificationException in Configuration Copy Constructor. Contributed by Junping Du." (jing9: rev ba0a42cf678f1bb53c2ad22e766b3b1a07b3800b)
* hadoop-common-project/hadoop-common/CHANGES.txt
* hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/conf/Configuration.java
, SUCCESS: Integrated in Hadoop-Hdfs-trunk #1926 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/1926/])
HADOOP-11274. ConcurrentModificationException in Configuration Copy Constructor. Contributed by Junping Du. (jing9: rev 16b34824673f5a50d464727b8fad98470e5e984a)
* hadoop-common-project/hadoop-common/CHANGES.txt
* hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/conf/Configuration.java
Revert "HADOOP-11274. ConcurrentModificationException in Configuration Copy Constructor. Contributed by Junping Du." (jing9: rev ba0a42cf678f1bb53c2ad22e766b3b1a07b3800b)
* hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/conf/Configuration.java
* hadoop-common-project/hadoop-common/CHANGES.txt
, FAILURE: Integrated in Hadoop-Mapreduce-trunk #1950 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/1950/])
HADOOP-11274. ConcurrentModificationException in Configuration Copy Constructor. Contributed by Junping Du. (jing9: rev 16b34824673f5a50d464727b8fad98470e5e984a)
* hadoop-common-project/hadoop-common/CHANGES.txt
* hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/conf/Configuration.java
Revert "HADOOP-11274. ConcurrentModificationException in Configuration Copy Constructor. Contributed by Junping Du." (jing9: rev ba0a42cf678f1bb53c2ad22e766b3b1a07b3800b)
* hadoop-common-project/hadoop-common/CHANGES.txt
* hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/conf/Configuration.java
, Working on this to take a light-handed approach instead of global locks: Making updatedResources a ConcurrentHashMap. The reasons why this is sufficient are
 - The updatedResources is only used in displays to show the lineage of the configuration properties
 - Further, the lineage information is useful to distinguish which files the properties are coming from: yarn-site.xml vs core-site.xml vs programmatic set. Multiple programmatic set calls still imply a programmatic lineage.
 - Even in the non-concurrent updates case, once the clone is done, all future updates in the old object are not tracked and rightly so. Consequently, there is no reason to have a prefect snapshot during the clone.

Overall, we don't need the updatedResources snapshot during copy to be strictly consistent - making it ConcurrentHashMap should be good enough., Hi [~vinodkv], the solution looks good to me. Although the new implementation is not linearizable, I agree that under our current use cases this would be fine (eventual consistency is sufficient here, I believe). , {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12680335/HADOOP-11274-v3.patch
  against trunk revision 4a114dd.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:red}-1 core tests{color}.  The patch failed these unit tests in hadoop-common-project/hadoop-common:

                  org.apache.hadoop.ipc.TestDecayRpcScheduler
                  org.apache.hadoop.http.TestGlobalFilter
                  org.apache.hadoop.http.TestPathFilter
                  org.apache.hadoop.fs.viewfs.TestViewFileSystemDelegation
                  org.apache.hadoop.io.compress.TestCompressionStreamReuse
                  org.apache.hadoop.fs.viewfs.TestFcPermissionsLocalFs
                  org.apache.hadoop.ipc.TestRPCCompatibility
                  org.apache.hadoop.fs.viewfs.TestViewFsURIs
                  org.apache.hadoop.fs.shell.TestCopy
                  org.apache.hadoop.ha.TestHealthMonitor
                  org.apache.hadoop.ha.TestFailoverController
                  org.apache.hadoop.security.TestGroupsCaching
                  org.apache.hadoop.fs.permission.TestFsPermission
                  org.apache.hadoop.http.TestHttpServer
                  org.apache.hadoop.security.TestAuthenticationFilter
                  org.apache.hadoop.security.token.delegation.web.TestDelegationTokenAuthenticationHandlerWithMocks
                  org.apache.hadoop.crypto.key.TestKeyProviderFactory
                  org.apache.hadoop.conf.TestDeprecatedKeys
                  org.apache.hadoop.security.authorize.TestProxyUsers
                  org.apache.hadoop.security.token.delegation.web.TestDelegationTokenManager
                  org.apache.hadoop.conf.TestReconfiguration
                  org.apache.hadoop.net.TestStaticMapping
                  org.apache.hadoop.fs.TestDU
                  org.apache.hadoop.fs.contract.localfs.TestLocalFSContractSeek
                  org.apache.hadoop.fs.TestTruncatedInputBug
                  org.apache.hadoop.util.TestGenericOptionsParser
                  org.apache.hadoop.crypto.key.TestKeyShell
                  org.apache.hadoop.io.TestWritable
                  org.apache.hadoop.fs.viewfs.TestViewfsFileStatus
                  org.apache.hadoop.fs.TestTrash
                  org.apache.hadoop.ha.TestSshFenceByTcpPort
                  org.apache.hadoop.security.authorize.TestProxyServers
                  org.apache.hadoop.security.alias.TestCredShell
                  org.apache.hadoop.ipc.TestIdentityProviders
                  org.apache.hadoop.ipc.TestIPCServerResponder
                  org.apache.hadoop.ha.TestShellCommandFencer
                  org.apache.hadoop.fs.shell.TestCopyPreserveFlag
                  org.apache.hadoop.cli.TestCLI
                  org.apache.hadoop.http.TestSSLHttpServer
                  org.apache.hadoop.io.compress.zlib.TestZlibCompressorDecompressor
                  org.apache.hadoop.fs.contract.localfs.TestLocalFSContractOpen
                  org.apache.hadoop.crypto.TestCryptoStreamsForLocalFS
                  org.apache.hadoop.fs.contract.ftp.TestFTPContractOpen
                  org.apache.hadoop.fs.shell.TestCount
                  org.apache.hadoop.fs.viewfs.TestViewFsTrash
                  org.apache.hadoop.fs.viewfs.TestFcCreateMkdirLocalFs
                  org.apache.hadoop.http.TestServletFilter
                  org.apache.hadoop.fs.viewfs.TestFcMainOperationsLocalFs
                  org.apache.hadoop.ha.TestZKFailoverController
                  org.apache.hadoop.fs.viewfs.TestFSMainOperationsLocalFileSystem
                  org.apache.hadoop.conf.TestConfigurationDeprecation
                  org.apache.hadoop.fs.TestFilterFileSystem
                  org.apache.hadoop.security.ssl.TestSSLFactory
                  org.apache.hadoop.service.TestServiceLifecycle
                  org.apache.hadoop.fs.viewfs.TestViewFileSystemDelegationTokenSupport
                  org.apache.hadoop.fs.shell.TestXAttrCommands
                  org.apache.hadoop.ipc.TestMiniRPCBenchmark
                  org.apache.hadoop.io.file.tfile.TestTFileSeek
                  org.apache.hadoop.util.TestGenericsUtil
                  org.apache.hadoop.io.serializer.TestWritableSerialization
                  org.apache.hadoop.crypto.key.TestKeyProvider
                  org.apache.hadoop.ipc.TestRPC
                  org.apache.hadoop.io.TestGenericWritable
                  org.apache.hadoop.conf.TestConfServlet
                  org.apache.hadoop.fs.contract.rawlocal.TestRawlocalContractSeek
                  org.apache.hadoop.ipc.TestProtoBufRpc
                  org.apache.hadoop.security.TestWhitelistBasedResolver
                  org.apache.hadoop.ipc.TestSocketFactory
                  org.apache.hadoop.security.alias.TestCredentialProviderFactory
                  org.apache.hadoop.ipc.TestIPC
                  org.apache.hadoop.ipc.TestMultipleProtocolServer
                  org.apache.hadoop.ipc.TestWeightedRoundRobinMultiplexer
                  org.apache.hadoop.security.token.delegation.TestZKDelegationTokenSecretManager
                  org.apache.hadoop.fs.TestFsShellReturnCode
                  org.apache.hadoop.fs.viewfs.TestViewFileSystemLocalFileSystem
                  org.apache.hadoop.net.TestScriptBasedMappingWithDependency
                  org.apache.hadoop.fs.contract.rawlocal.TestRawlocalContractOpen
                  org.apache.hadoop.util.hash.TestHash
                  org.apache.hadoop.ipc.TestSaslRPC
                  org.apache.hadoop.net.TestSwitchMapping
                  org.apache.hadoop.fs.viewfs.TestViewFsWithAuthorityLocalFs
                  org.apache.hadoop.http.lib.TestStaticUserWebFilter
                  org.apache.hadoop.security.TestShellBasedIdMapping
                  org.apache.hadoop.ipc.TestRPCCallBenchmark
                  org.apache.hadoop.io.serializer.avro.TestAvroSerialization
                  org.apache.hadoop.fs.shell.TestMove
                  org.apache.hadoop.fs.viewfs.TestViewFsConfig
                  org.apache.hadoop.security.TestCompositeGroupMapping
                  org.apache.hadoop.security.authorize.TestServiceAuthorization
                  org.apache.hadoop.net.TestTableMapping
                  org.apache.hadoop.security.TestDoAsEffectiveUser
                  org.apache.hadoop.ha.TestZKFailoverControllerStress
                  org.apache.hadoop.fs.viewfs.TestViewFileSystemWithAuthorityLocalFileSystem
                  org.apache.hadoop.fs.viewfs.TestChRootedFileSystem
                  org.apache.hadoop.http.TestHttpCookieFlag
                  org.apache.hadoop.security.TestGroupFallback
                  org.apache.hadoop.security.token.delegation.web.TestWebDelegationToken
                  org.apache.hadoop.net.TestScriptBasedMapping
                  org.apache.hadoop.fs.viewfs.TestViewFsLocalFs
                  org.apache.hadoop.fs.TestLocalFileSystem
                  org.apache.hadoop.io.TestSequenceFileSerialization
                  org.apache.hadoop.conf.TestConfiguration
                  org.apache.hadoop.fs.shell.TestAclCommands
                  org.apache.hadoop.security.TestSecurityUtil
                  org.apache.hadoop.io.TestDefaultStringifier
                  org.apache.hadoop.ipc.TestFairCallQueue
                  org.apache.hadoop.io.file.tfile.TestTFileSeqFileComparison
                  org.apache.hadoop.io.compress.TestCodec
                  org.apache.hadoop.io.serializer.TestSerializationFactory
                  org.apache.hadoop.security.TestLdapGroupsMapping
                  org.apache.hadoop.io.compress.TestCodecFactory
                  org.apache.hadoop.ipc.TestServer

                                      The following test timeouts occurred in hadoop-common-project/hadoop-common:

org.apache.hadoop.fs.TestFileSystemCaching

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HADOOP-Build/5050//testReport/
Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/5050//console

This message is automatically generated., That, my friends, is why you don't mess with Hadoop configuration!

Didn't realize ConcurrentHashMap doesn't accept nulls. And the old HashMap based Configuration was masking a subtle bug, fixed that now., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12680357/HADOOP-11274-v4.patch
  against trunk revision 4a114dd.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-common-project/hadoop-common.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HADOOP-Build/5051//testReport/
Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/5051//console

This message is automatically generated., Thanks for taking this, [~vinodkv]! The way of using ConcurrentHashMap looks fine especially we don't want to spend time to evaluate performance impact on locking whole conf object. 
The patch looks good to me. However, one thing need to be mentioned here is the Set of "finalParameters" meet the same situation as "updatingResource" that we should fix. This is get fixed in v2 patch where we were adding synchronized block in loadProperty(). If we want to get rid of any explicit lock in loading configuration, another way is to use Collections.synchronizedSet() to turn finalParameters into thread-safe.
Also, some minor indentation issues in Configuration(Configuration other).
{code}
+    synchronized(other) {
+
+     this.resources = (ArrayList<Resource>) other.resources.clone();
...
-     this.updatingResource = new HashMap<String, String[]>(other.updatingResource);
+      this.updatingResource =
+          new ConcurrentHashMap<String, String[]>(other.updatingResource);
      this.finalParameters = new HashSet<String>(other.finalParameters);
+     this.classLoader = other.getClassLoader();
...
{code}, I'm concerned this is too late to make this change to 2.6; particularly given that this has been around for a long time. Moving it to 2.7., HADOOP-11209 got filed after this ticket but went in before. Nothing to do here - there is a small bit of lock cleanup left in my patch, but not of much value in isolation. Closing this as a dup.]