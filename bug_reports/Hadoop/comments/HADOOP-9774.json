[Patch attached. Basically on Windows, we can resolve the files against their parent folder, which will result in consistent paths returned. Since ":" is not allowed in file name on Windows, the problem stated in HADOOP-8962 doesn't exist.

I tried to come up with a more elegant way by introducing a new Path constructor or re-use other Path constructors, none of them worked in all situations. The Path class is very dangerous to modify and it's already confusing to readers. I decide to leave it alone., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12594309/HADOOP-9774.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-common-project/hadoop-common.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HADOOP-Build/2852//testReport/
Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/2852//console

This message is automatically generated., I think the behavior of {{RawLocalFileSystem.listStatus()}} will diverge with this patch, which is not a very good practice. If the intended behavior is the following, we should make it consistent on Linux and Windows in my opinion.

bq. When the caller use a relative path (without drive spec) to do listStatus() the resulting path should be relative.

It will be good to add a unit test case to cover this scenario as well., The reason why I didn't add a unit test is because this behavior cannot be tested on Linux. I'm reusing HADOOP-8962's unit test case to verify that this change doesn't break on Linux.

In this specific context, by "relative path" I mean a path without a drive spec on Windows, e.g. "file:///mydata" (instead of "file:///E:/mydata"). I do not refer to a relative path in the sense of "../mypath/". Maybe I should say "Windows relative path"., Thanks Shanyu for reporting the problem and the patch.

A few comments below.

bq. The reason why I didn't add a unit test is because this behavior cannot be tested on Linux. I'm reusing HADOOP-8962's unit test case to verify that this change doesn't break on Linux.
Please include a unittest that catches the issue on Windows, otherwise, some other change could break this functionality again.


bq. I think the behavior of RawLocalFileSystem.listStatus() will diverge with this patch, which is not a very good practice.
I share the same concern.  Now that we realized that HADOOP-8962 does not work in all scenarios I'd like to consider other options first. I think we can solve this problem in Path properly. There is a comment in HADOOP-8962 stating that changing Path is scary (what I have to agree with), but at this point, I'd rather go with a clean fix. Others, please comment if you agree.

The root cause of the problem for HADOOP-8962 is actually in the Path(String, String) constructor, coming from the internal Path URI parsing logic. I don't think we want to change the parsing logic as that would be really risky. What we can do is change the constructor:
{code}
  public Path(String parent, String child) {
    this(new Path(parent), new Path(child));
  }
{code}
not to create a Path() object directly out of a child path string, but to first create an URI (with assumption that child string is just a path portion of the URI), and then construct the child Path object using this URI. One gotcha to keep in mind is the URI encoding/decoding of escape chars. Otherwise, I think this will work., bq. with assumption that child string is just a path portion of the URI
Actually, looking at the documentation for [URI resolution|http://docs.oracle.com/javase/7/docs/api/java/net/URI.html#resolve(java.lang.String)], above sentence, although possibly the right thing to do, would be an incompatible change. 

Wouldn't the following solve both this and problem from HADOOP-8962:
{code}
results[j] = getFileStatus(new Path(f, new Path(null, null, names[i])));
{code}, Thanks Ivan for chiming in. Actually I've tried your suggestions but they don't work exactly because of the "gotcha" you mentioned:

bq. One gotcha to keep in mind is the URI encoding/decoding of escape chars.

In the code you posted: 

{code}
results[j] = getFileStatus(new Path(f, new Path(null, null, names[i])));
{code}

the names[i] on windows could be "E:\mydata" which will throw exception on new Path(null, null, names[i]) because it is not escaped. So it must be specially handled using a OS specific condition sentence. Like the following code snippet:

{code}
// add a slash in front of paths with Windows drive letters
    if (hasWindowsDrive(pathString) && pathString.charAt(0) != '/') {
      pathString = "/" + pathString;
    }
{code}

This is why I chose not to touch Path.java at the beginning. But if we want to do a clean fix (but riskier), I can post a patch for review., I see, thanks Shanyu for taking a look!

Given the new input, I think it makes sense to change the following code in Path:
{code}
  public Path(String scheme, String authority, String path) {
    checkPathArg( path );
    initialize(scheme, authority, path, null);
  }
{code}
and do the appropriate path correction on Windows:
{code}
  public Path(String scheme, String authority, String path) {
    checkPathArg( path );

    // add a slash in front of paths with Windows drive letters
    if (hasWindowsDrive(path, false))
      pathString = "/"+path;

    initialize(scheme, authority, path, null);
  }
{code}

This in combination with my previous comment should address the problem, and set things right longer term. All Path contractors should be working fine now for Windows absolute paths. Right Shanyu? 

Please also include a Path unittest that catches this Path bug on Windows., Another incremental improvement would be to perform hasWindowsDrive() check on a single location in Path, to avoid code duplication. If you can get this part fixed easily (without having to change path parsing logic), let's do it, otherwise, let's have it on two places. , Attached is a patch to fix the hadoop path resolution issues (HADOOP-8962 and this jira) from its root.

The fundamental cause of issue HADOOP-8962 is that the constructor:

{code}
public Path(String parent, String child)
{code}

does not always work as it was intended to be in all scenarios. A simple example is that the relative path represented by "child" could contain colon in the file name, e.g. "a:b/t1.txt", which cause Path constructor to wrongfully interpret the path. 

One way to fix this problem is to add "./" to the beginning of the child string if it's not an absolute path (starts with "/"). Also, on Windows, we need to add a slash to the beginning if the child string starts with dive spec, e.g., "E:\data" -> "/E:\data".

I added a few Path related test cases, also a new test case to make sure on Windows, the RawLocalFileSystem.listStatus() returns consistent paths., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12594837/HADOOP-9774-2.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 2 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:red}-1 core tests{color}.  The patch failed these unit tests in hadoop-common-project/hadoop-common:

                  org.apache.hadoop.fs.viewfs.TestChRootedFs
                  org.apache.hadoop.fs.viewfs.TestViewFsTrash
                  org.apache.hadoop.fs.TestHarFileSystemBasics
                  org.apache.hadoop.fs.TestFSMainOperationsLocalFileSystem
                  org.apache.hadoop.fs.viewfs.TestChRootedFileSystem
                  org.apache.hadoop.fs.TestSymlinkLocalFSFileSystem
                  org.apache.hadoop.fs.TestLocalFSFileContextMainOperations
                  org.apache.hadoop.fs.shell.TestPathData
                  org.apache.hadoop.fs.TestPath
                  org.apache.hadoop.util.TestGenericOptionsParser
                  org.apache.hadoop.fs.TestLocal_S3FileContextURI
                  org.apache.hadoop.fs.TestAfsCheckPath
                  org.apache.hadoop.fs.TestFsShellCopy
                  org.apache.hadoop.fs.viewfs.TestViewFsLocalFs
                  org.apache.hadoop.fs.TestTrash
                  org.apache.hadoop.fs.viewfs.TestFcMainOperationsLocalFs
                  org.apache.hadoop.fs.TestFsShellReturnCode
                  org.apache.hadoop.fs.TestFileSystemCanonicalization
                  org.apache.hadoop.fs.TestS3_LocalFileContextURI
                  org.apache.hadoop.fs.s3native.TestInMemoryNativeS3FileSystemContract
                  org.apache.hadoop.fs.viewfs.TestViewFsWithAuthorityLocalFs
                  org.apache.hadoop.fs.TestHarFileSystem
                  org.apache.hadoop.fs.TestLocalDirAllocator
                  org.apache.hadoop.fs.viewfs.TestFSMainOperationsLocalFileSystem
                  org.apache.hadoop.fs.TestSymlinkLocalFSFileContext
                  org.apache.hadoop.fs.shell.TestCopy

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HADOOP-Build/2874//testReport/
Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/2874//console

This message is automatically generated., This v3 of the patch. I created a new constructor with a isRelative parameter so that we don't change the behavior of old constructor Path(string)., Thanks Shanyu for additional comments. I also spent some time looking at the problem and it seems to be more complex than I initially thought.

I'll try to respond by later in the evening today with my proposal for the fix. My current line of though is the following:
 - If we revert things to before HADOOP-8962 fix we have a problem where file names with colon are not interpreted the way we want them to be. Basically "a:b" will result in an URI with scheme "a". This behavior is by design and we shouldn't try to change it.
 - The question is now how to address the problem from HADOOP-8962. One approach is to encode URI special characters in the given file name before it is passed to Path. This "seems" like the right thing to do, but I’ll have to look into it a bit more. It is also not obvious what would encoding mean for the rest of Hadoop codebase (i.e. do we just do a targeted fix for the RLFS scenario?).


Another possibly relevant factor is that HDFS does not allow colon character in the file name. This means that supporting colon in RLFS does not help in scenarios where we copy HDFS context to RLFS and vice versa. 

In parallel feel free to share your thoughts.
, Thanks Ivan for your suggestions. You are right, the Path(String parent, String child) constructor is not designed to accept ONLY relative path in child. There are some unit test cases where child is absolution path like "file:/mydata". My previous patch failed those cases.

So basically we cannot support file names with colon in child parameter in constructor Path(String parent, String child). This is because a string like "file:/" can be interpret either as a scheme or a file named "file:".

That being said, we can still use the trick Ivan mentioned - the Path(String scheme, String authority, String path) constructor. If we expect the path to contain colon, then we should use this explicit constructor to avoid ambiguity. So we can try adding "./" to the path string in this constructor to deal with colon character.

Attached is a new patch to implement this idea., {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12595042/HADOOP-9774-4.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 2 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-common-project/hadoop-common.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HADOOP-Build/2887//testReport/
Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/2887//console

This message is automatically generated., Thanks Shanyu! Your proposal from the latest patch looks good.

Since I had only two minor comments (see below) I went ahead and applied them myself on top of your changes (v5 version of the patch) and also included a few more unittests.
 - Path.java: checPathArg seems to have a purpose to validate the input, so I would not overload its purpose
 - RawLocalFileSystem.java: I think we should revert to the behavior before HADOOP-8962 and just make sure the 3 arg Path constructor is called, such that ambiguity for relative paths with colon is avoided

At this point I am +1 on the patch. I think it would be good to get +1 from one more committer before we commit this. [~cnauroth] you mind taking a quick look? 
, {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12595838/HADOOP-9774-5.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 2 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-common-project/hadoop-common.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HADOOP-Build/2921//testReport/
Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/2921//console

This message is automatically generated., The patch looks OK to me as well, but I agree with Ivan that a {{Path}} expert should also chime in., Riddling Path with windows conditionals dismays me but I suppose it fixes this problem.  Please run the hdfs FsShell tests.  I think some of them exercise the LFS to ensure the output is correct.  If they pass, +1., +1 from me too, but I recommend a full test run before committing (including HDFS, YARN, and MapReduce, not just Common), just because {{Path}} is used everywhere and the potential failures can be hard to diagnose.  Thanks for tracking down the problem, Shanyu!, Shanyu, will you be able to kick off a full test run per Chris' recommendation? If not, I can help with this part so that we can get this change in. , Sure. I actually have run all yarn unit tests on patch v4, I can run another test on v5., Hi Ivan, would you please run that patch against hdfs, mapreduce and a few other projects? 

I'm still not able to run unit tests even WITHOUT this patch - I got the VM crash error here and there, so I even couldn't finish one project. This is completely irrelevant to this bug. I even created a bug for the VM crash - HADOOP-9896., I've completed a full test run for all sub-projects with this patch on Windows, and there was no negative impact.  I think we just need some additional confirmation on Linux at this point.

[~ivanmi], would you mind taking care of the commit after all testing has been addressed?  I'm going to be mostly offline until 9/2., Sure Shanyu, Chris. Let me kick off the tests tonight and I'll reply back., Sorry Shanyu for the delay, my linux machine got into a bad state, trying to setup a new one. Will respond once I validate the patch., Thank you Ivan. I actually was able to run all unit tests on hadoop trunk on Linux. I didn't observe any negative impact by this patch. Would you please commit this patch?, Thanks Shanyu for the confirmation! Will commit the patch shortly. , SUCCESS: Integrated in Hadoop-trunk-Commit #4350 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/4350/])
HADOOP-9774. RawLocalFileSystem.listStatus() return absolute paths when input path is relative on Windows. Contributed by Shanyu Zhao. (ivanmi: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1518865)
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/Path.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/RawLocalFileSystem.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestLocalFileSystem.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestPath.java
, Committed to trunk, branch-2 and branch-2.1-beta. Thank you Shanyu for the contribution!, SUCCESS: Integrated in Hadoop-Yarn-trunk #317 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk/317/])
HADOOP-9774. RawLocalFileSystem.listStatus() return absolute paths when input path is relative on Windows. Contributed by Shanyu Zhao. (ivanmi: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1518865)
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/Path.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/RawLocalFileSystem.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestLocalFileSystem.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestPath.java
, FAILURE: Integrated in Hadoop-Hdfs-trunk #1507 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/1507/])
HADOOP-9774. RawLocalFileSystem.listStatus() return absolute paths when input path is relative on Windows. Contributed by Shanyu Zhao. (ivanmi: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1518865)
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/Path.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/RawLocalFileSystem.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestLocalFileSystem.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestPath.java
, FAILURE: Integrated in Hadoop-Mapreduce-trunk #1534 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/1534/])
HADOOP-9774. RawLocalFileSystem.listStatus() return absolute paths when input path is relative on Windows. Contributed by Shanyu Zhao. (ivanmi: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1518865)
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/Path.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/RawLocalFileSystem.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestLocalFileSystem.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestPath.java
, Hi,
Kmeans algorythm also has problem with this in Centos with HDP 2.2. When kmeans is running, the intermediate result was stored on HDFS, but it look for the cluster directory on local file system and then fire out FileNotFound exception. To solve this, we had to specify the absolute path when using kmeans. Can anyone reopen the issues and check it? it took me several hours just to figure out the problem., I'm Sorry, I post on the wrong thread. I should post it on Mahout's place.]