[No way should -q be the default under any circumstances.  That is *extremely* surprising behavior that will definitely break stuff., bq. No way should -q be the default under any circumstances. That is extremely surprising behavior that will definitely break stuff.

It's not surprising, because it matches the traditional UNIX / Linux behavior.  In Linux, {{/bin/ls}} will not print control characters by default.  you must pass the {{--show-control-characters}} option in order to see them.  From the man page:

{code}
       --show-control-chars
              show non graphic characters as-is (default unless program is 'ls' and output is a terminal)
{code}

{{ls}} blasting raw control characters into an interactive terminal is a very bad idea.  It leads to some very serious security vulnerabilities because commonly used software like {{xterm}}, {{GNU screen}}, {{tmux}} and so forth interpret control characters.  Using control characters, you can convince these pieces of software to execute arbitrary code.  See http://marc.info/?l=bugtraq&m=104612710031920&q=p3 and https://www.proteansec.com/linux/blast-past-executing-code-terminal-emulators-via-escape-sequences/  There are even CVEs for some of these issues.

We should make the default opt-in for printing control characters in our next compatibility-breaking release (Hadoop 3.x).

bq. In C, isatty(STDOUT_FILENO) is used to find out whether the output is a terminal. Since Java doesn't have isatty, I will use JNI to call C isatty() because the closest test System.console() == null does not work in some cases.

It would really be nice if we could determine this without using JNI, because it's often not available.  Under what conditions does the {{System.console() == null}} check not work?  The only case I was able to find in a quick Google search was inside an eclipse console.  That seems like a case where the security issues would not be a concern, because it's a debugging environment.  Are there other cases where the non-JNI check would fail?, I only come up with these 2 cases:
* echo dir1 dir2 | xargs hadoop fs -ls
* hadoop fs -ls dir1 </dev/null, Essentially interactive sessions with stdin redirected., bq. It's not surprising, because it matches the traditional UNIX / Linux behavior. 

The defaulting of -q on is not traditional UNIX behavior.  It may be what GNU does ("Linux"), but it's not the expected, standard behavior according to the POSIX spec. (The POSIX spec, does, however, say that individual implementations may turn it on.)  The fact that -q is an stanard, single letter option and the way to turn it off is not should have been a very big hint., Thanks [~cmccabe] and [~aw] for the comments. Some quotes from [ls(1posix)|http://pubs.opengroup.org/onlinepubs/9699919799/]:
{quote}
Implementations may make -q the default for terminals to prevent trojan horse attacks on terminals with special escape sequences. This is not required because:
  * Some control characters may be useful on some terminals; for example, a system might write them as "\001" or "^A".
  * Special behavior for terminals is not relevant to applications portability.
{quote}

However, it does not cover security concerns similar to [CVE-2004-1488|http://cve.mitre.org/cgi-bin/cvename.cgi?name=CAN-2004-1488].

A quick survey shows {{ls}} defaults to {{-q}} on a terminal on Linux, BSD, and OSX; but not on [Solaris|https://docs.oracle.com/cd/E26502_01/html/E29030/ls-1.html]., ... which is just the long form of what I just said. :), Thank you for the background information.  I wasn't aware that the default of suppressing non-printing characters was "optional" according to POSIX.

I think the important thing is that we've established that:
* Suppressing non-printing characters by default fixes several serious security vulnerabilties, including some that have CVEs,
* This suppression behavior is explicitly allowed by POSIX,
* The most popular UNIX system on Earth, Linux, implements this behavior, so nobody will be surprised by it.

bq. Essentially interactive sessions with stdin redirected \[falsely show up as non-interactive from Java\]

I guess my concern about adding a JNI dependency here is that it will make things too nondeterministic.  I've seen too many clusters where JNI was improperly configured., bq. The most popular UNIX system on Earth, Linux

Linux is not UNIX(tm).  Please stop saying things that aren't true.

bq.  so nobody will be surprised by it.

... except for those that actually use Real UNIX(tm) and not some discount knock off whose overly zealous followers believe they invented everything.

Keep in mind also that in order to do -q, you need an anti-q., [~aw], you mentioned "default -q" will break stuff, do you have any use case or test case in mind? I can only see potential problems in Expect or something similar when they might parse {{dfs -ls}} output in the terminal mode. All scripts that redirect {{dfs -ls}} stdout should be ok with "default -q" behavior., OK, so Linux is technically a UNIX-like system rather than a licensee of the UNIX trademark.  I don't feel that this is relevant to the discussion here.  I feel like you are just being pedantic.  Linux's behavior is still the one that most people compare our behavior to, whether we like it or not.  And Linux's behavior is to hide control characters by default in ls.

More importantly, Linux's behavior makes more sense than the other behavior you are suggesting.  Dumping control characters out on an interactive terminal is a security vulnerability as well as a giant annoyance.  I can't think of a single reason why we would want this to be the default., ... until such a point that they print the filename to the screen to show what files are being processed. At which point this change has accomplished absolutely nothing.  Changing ls is security theater., Are we going to change cat too?, bq. OK, so Linux is technically a UNIX-like system rather than a licensee of the UNIX trademark. I don't feel that this is relevant to the discussion here.

Then stop bringing up (traditional) UNIX if you feel it isn't relevant and especially when you've used the term incorrectly.

bq.  Dumping control characters out on an interactive terminal is a security vulnerability

It is, but changing ls' behavior isn't going to fix that vulnerability.  There's a reason why all of those links up there you quoted talk about terminals and terminal emulation and what is actually vulnerable without identifying specific vulnerabilities in specific commands.

bq.  I can't think of a single reason why we would want this to be the default.

Yup, I can't think of why -q should be the default either... but more importantly, neither could POSIX to the point that it demanded the standard have -q be the default. , bq. Yup, I can't think of why -q should be the default either... but more importantly, neither could POSIX to the point that it demanded the standard have -q be the default.

Please do not misquote what I said.  I was arguing that echoing control characters to the terminal should not be the default behavior.  You are arguing the opposite.

bq. ... until such a point that they print the filename to the screen to show what files are being processed. At which point this change has accomplished absolutely nothing. Changing ls is security theater.

There are a lot of scripts that interact with HDFS via FsShell.  These scripts will never "print the filename to the screen" or if they do, it will be a filename that they got from {{ls}} itself which does not contain control characters.

I could come up with examples of how this is helpful all day if needed.  Here's another one: Some sysadmin logs in and does an {{hadoop fs -ls}} of a directory created by {{\$BADGUY}}. Should the filename be able use control characters to hijack the admin's GNU screen session and execute arbitrary code?  I would say no, what do you say?

bq. Are we going to change cat too?

Most system administrators will not {{cat}} a file without checking what type it is.  It is well-known that catting an unknown file could mess up the terminal.  On the other hand, most system administrators do not think that running {{ls}} on a directory could be a security risk.  Linux and other well known operating systems also do not protect users from this, so there are no pre-existing expectations of protection.

bq. Then stop bringing up (traditional) UNIX if you feel it isn't relevant and especially when you've used the term incorrectly.

There are a huge number of sysadmins who grew up with the GNU tools, which do have the behavior we're describing here.  It's a powerful argument for implementing that behavior.  When you add the fact that it fixes security vulnerabilities, it's an extremely compelling argument.

I think it's clear that this change does have a big positive effect in many scenarios, does fix real-world security flaws, and does accord with the expectations of most system administrators.  That's three powerful reasons to do it.  I can find no valid counter-argument for any of these reasons anywhere in these comments., FWIW I think FreeBSD and OpenBSD default to printing "?" rather than the control character:

http://www.freebsd.org/cgi/man.cgi?ls
http://man.openbsd.org/OpenBSD-current/man1/ls.1

{quote}
     -q	     Force printing of non-graphic characters in file names as the
	     character `?'; this is the	default	when output is to a terminal.
{quote}

Allen, do you have some counter-examples where someone coming from a NIXy background would be confused by -q as default? IIRC OSX uses a FreeBSD userspace, so it seems like for the majority of Hadoop users, -q is already the expectation.

John, do you mind setting the target version? If we have compatibility concerns, maybe this only targets Hadoop 3., Target 3.0.0 for now., bq. Allen, do you have some counter-examples where someone coming from a NIXy background would be confused by -q as default?

It's going to be why doesn't fsck change the file names? Why doesn't job submission change the filenames?  How come ls didn't blow up but when I grep'd the audit log it did?  etc, etc.  Hadoop itself exposes filenames on the terminal all over the place. 

Unless we plan on touching everything, just changing one place is going to be wildly confusing.
, I'll note that tools like {{cat}} and {{grep}} are for printing the contents of files, not file metadata like {{ls}}. The default GNU behaviors are simply to print the non-printable characters. So for the audit log example, since the audit log is a file, IMO that grep behavior is expected.

{{fsck}} and {{find}} I think are more appropriate analogues, along with things like {{lsSnapshottableDirs}} and {{listEncryptionZones}}. Likely many others.

If you can help us identify these commands and their expected default behaviors, we can file more follow-ons for the rest of the FsShell and hdfs commands., It's not worth the effort to play whack-a-mole here for little-to-no real reward., I've removed the supportability flag. This is not a supportability issue given that making -q the default would harm the ability to use ls as a canary prior to looking at other content.

Let me be explicit on my stance:

I'm +1 on adding a -q option.

I'm -1 on making -q the default given that:

a) It's not standardized behavior amongst all of the platforms that Apache Hadoop runs

b) It's not expected behavior relative to the rest of Apache Hadoop

c) It's not feasible to actually make it expected behavior compared to the rest of Apache Hadoop given the proliferation of places where raw file and directory names are printed to the console
, Split the jira. This jira will add option {{-q}}; HADOOP-13093 will decide the default behavior on a terminal.

The split gives us more time to debate the proper default behavior, and weigh trade-offs. It may also enable different target versions., bq. a) It's not standardized behavior amongst all of the platforms that Apache Hadoop runs

Linux, OpenBSD, FreeBSD, and OS X pick the behavior of hiding control characters in {{ls}} by default.  That may not be "all the platforms that Apache Hadoop runs on," but it's certainly the vast majority of real-world deployments.  The remaining important platform, Windows, doesn't deal with terminals and control characters in quite the same way, so is probably not vulnerable in any case.

In any case, the fact that the behavior isn't standardized is not a valid argument either way.  Clearly Hadoop needs to pick one behavior or the other.  Lack of standardization doesn't dictate that we have to pick one behavior or the other.  And certainly it doesn't dictate that we should pick an unpopular and surprising behavior that almost nobody has experience with.

bq. b) It's not expected behavior relative to the rest of Apache Hadoop

The fact that one component has a security bug doesn't dictate that the other components also need to have the same security bug.  This is like arguing that we can't fix a buffer overflow in one component because then it wouldn't match all the other buffer-overflowable components.

bq. c) It's not feasible to actually make it expected behavior compared to the rest of Apache Hadoop given the proliferation of places where raw file and directory names are printed to the console

The only places we've discussed here are ls and fsck.  Perhaps there are more, but it hardly seems infeasible to change them based on what we've talked about so far.  Perhaps log files are also an issue, but only for people who tail the log file of the server.  And to reiterate, a security flaw in X doesn't mean we should reproduce the same security flaw in Y.

At the end of the day, this is a security vulnerability and it needs to be fixed.  I asked you before: "Should the filename be able use control characters to hijack the admin's GNU screen session and execute arbitrary code? I would say no, what do you say?"  I would repeat the same question again.

I understand that you have a personal preference for running without {{\-q}}.  However, it is not constructive to -1 a patch fixing a security vulnerability without suggesting an alternate way of fixing that vulnerability.  If this stays unfixed, it will probably get a CVE number., bq. The fact that one component has a security bug 

It's not a security bug for the reasons you think it's a security bug.  After all, wc, find, du, ... tons of other UNIX commands will happily print out terminal escape sequences with no option to turn them off.  It is, however, problematic for traditional ftpd implementations since it's a great way to inject buffer overflows and then get root on a remote server.

bq. "Should the filename be able use control characters to hijack the admin's GNU screen session and execute arbitrary code? I would say no, what do you say?"

... and my answer is the same as it was almost a decade ago, in some HDFS JIRA somewhere, where a related topic came up before: HDFS would be better served by having a limit on what consists of a legal file and directory name.  With an unlimited namespace, it's impossible to test against and impossible to protect every scenario in which oddball characters show up.  What's legal in one locale may not be legal in another. 

bq. However, it is not constructive to -1 a patch fixing a security vulnerability without suggesting an alternate way of fixing that vulnerability. 

Again: this is not fixing a security vulnerability.

bq.  If this stays unfixed, it will probably get a CVE number.

Speaking of, have you located a CVE for GNU ls yet? I mean, if this 'ls printing terminal control characters' is a security problem, surely there would be a CVE for it and du and wc and ...

Also, are you prepared to file a CVE for *every* *single* *time* Hadoop prints out a directory or file name to the screen?  There are probably hundreds if not thousands of places, obvious ones like 'fs -count' and less obvious ones like 'yarn logs'.  This is a 'tilting at windmills' problem.  It is MUCH better to have ls blow up than be taken by surprise by something else later on., bq. It's not a security bug for the reasons you think it's a security bug. After all, wc, find, du, ... tons of other UNIX commands will happily print out terminal escape sequences with no option to turn them off. It is, however, problematic for traditional ftpd implementations since it's a great way to inject buffer overflows and then get root on a remote server.

This behavior is exploitable.  That makes it a security bug, even if lots of traditional UNIX commands have it.

Just because a behavior is traditional doesn't mean it's right.  There was a time when UNIX programs used {{gets()}} everywhere.  When the world became a less trusting place, they had to be fixed not to do that.  We should understand the motivations behind historical decisions before blindly copying them.

bq. ... and my answer is the same as it was almost a decade ago, in some HDFS JIRA somewhere, where a related topic came up before: HDFS would be better served by having a limit on what consists of a legal file and directory name. With an unlimited namespace, it's impossible to test against and impossible to protect every scenario in which oddball characters show up. What's legal in one locale may not be legal in another.

That's a very good suggestion.  I think we should tackle that for Hadoop 3.

bq. Also, are you prepared to file a CVE for every single time Hadoop prints out a directory or file name to the screen? There are probably hundreds if not thousands of places, obvious ones like 'fs -count' and less obvious ones like 'yarn logs'. This is a 'tilting at windmills' problem. It is MUCH better to have ls blow up than be taken by surprise by something else later on.

The problem is, {{ls}} isn't necessarily going to "blow up," just display something odd, or even cause your xterm to run arbitrary code by abusing escape sequences., bq. even cause your xterm to run arbitrary code by abusing escape sequences.

Does it matter what command was used to generate the sequence?  No, of course not.... which makes it a hole in xterm, not ls.  , Please review patch 001:
* Add option -q to class Ls
* Add new class PrintableString
* Add unit test TestPrintableString
* Add unit test TestFsShellList, | (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue} 0m 9s {color} | {color:blue} Docker mode activated. {color} |
| {color:green}+1{color} | {color:green} @author {color} | {color:green} 0m 0s {color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:green}+1{color} | {color:green} test4tests {color} | {color:green} 0m 0s {color} | {color:green} The patch appears to include 2 new or modified test files. {color} |
| {color:blue}0{color} | {color:blue} mvndep {color} | {color:blue} 0m 44s {color} | {color:blue} Maven dependency ordering for branch {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 6m 58s {color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 5m 53s {color} | {color:green} trunk passed with JDK v1.8.0_91 {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 6m 47s {color} | {color:green} trunk passed with JDK v1.7.0_95 {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green} 1m 6s {color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green} 1m 53s {color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green} 0m 28s {color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green} 3m 33s {color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 1m 58s {color} | {color:green} trunk passed with JDK v1.8.0_91 {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 2m 54s {color} | {color:green} trunk passed with JDK v1.7.0_95 {color} |
| {color:blue}0{color} | {color:blue} mvndep {color} | {color:blue} 0m 15s {color} | {color:blue} Maven dependency ordering for patch {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 1m 30s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 5m 44s {color} | {color:green} the patch passed with JDK v1.8.0_91 {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green} 5m 44s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 6m 44s {color} | {color:green} the patch passed with JDK v1.7.0_95 {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green} 6m 44s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green} 1m 4s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green} 1m 52s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green} 0m 27s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green} 0m 0s {color} | {color:green} The patch has no whitespace issues. {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green} 4m 2s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 2m 1s {color} | {color:green} the patch passed with JDK v1.8.0_91 {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 2m 57s {color} | {color:green} the patch passed with JDK v1.7.0_95 {color} |
| {color:red}-1{color} | {color:red} unit {color} | {color:red} 7m 39s {color} | {color:red} hadoop-common in the patch failed with JDK v1.8.0_91. {color} |
| {color:red}-1{color} | {color:red} unit {color} | {color:red} 58m 11s {color} | {color:red} hadoop-hdfs in the patch failed with JDK v1.8.0_91. {color} |
| {color:red}-1{color} | {color:red} unit {color} | {color:red} 7m 52s {color} | {color:red} hadoop-common in the patch failed with JDK v1.7.0_95. {color} |
| {color:red}-1{color} | {color:red} unit {color} | {color:red} 56m 32s {color} | {color:red} hadoop-hdfs in the patch failed with JDK v1.7.0_95. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green} 0m 27s {color} | {color:green} The patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black} 191m 3s {color} | {color:black} {color} |
\\
\\
|| Reason || Tests ||
| JDK v1.8.0_91 Failed junit tests | hadoop.cli.TestCLI |
|   | hadoop.hdfs.server.datanode.fsdataset.impl.TestFsDatasetImpl |
| JDK v1.7.0_95 Failed junit tests | hadoop.cli.TestCLI |
|   | hadoop.hdfs.web.TestWebHDFS |
|   | hadoop.hdfs.TestHFlush |
|   | hadoop.hdfs.TestEncryptionZones |
\\
\\
|| Subsystem || Report/Notes ||
| Docker |  Image:yetus/hadoop:cf2ee45 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12802610/HDFS-13079.001.patch |
| JIRA Issue | HADOOP-13079 |
| Optional Tests |  asflicense  compile  javac  javadoc  mvninstall  mvnsite  unit  findbugs  checkstyle  |
| uname | Linux 206fbe5386ae 3.13.0-36-lowlatency #63-Ubuntu SMP PREEMPT Wed Sep 3 21:56:12 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | /testptch/hadoop/patchprocess/precommit/personality/provided.sh |
| git revision | trunk / 8d48266 |
| Default Java | 1.7.0_95 |
| Multi-JDK versions |  /usr/lib/jvm/java-8-oracle:1.8.0_91 /usr/lib/jvm/java-7-openjdk-amd64:1.7.0_95 |
| findbugs | v3.0.0 |
| unit | https://builds.apache.org/job/PreCommit-HADOOP-Build/9300/artifact/patchprocess/patch-unit-hadoop-common-project_hadoop-common-jdk1.8.0_91.txt |
| unit | https://builds.apache.org/job/PreCommit-HADOOP-Build/9300/artifact/patchprocess/patch-unit-hadoop-hdfs-project_hadoop-hdfs-jdk1.8.0_91.txt |
| unit | https://builds.apache.org/job/PreCommit-HADOOP-Build/9300/artifact/patchprocess/patch-unit-hadoop-common-project_hadoop-common-jdk1.7.0_95.txt |
| unit | https://builds.apache.org/job/PreCommit-HADOOP-Build/9300/artifact/patchprocess/patch-unit-hadoop-hdfs-project_hadoop-hdfs-jdk1.7.0_95.txt |
| unit test logs |  https://builds.apache.org/job/PreCommit-HADOOP-Build/9300/artifact/patchprocess/patch-unit-hadoop-common-project_hadoop-common-jdk1.8.0_91.txt https://builds.apache.org/job/PreCommit-HADOOP-Build/9300/artifact/patchprocess/patch-unit-hadoop-hdfs-project_hadoop-hdfs-jdk1.8.0_91.txt https://builds.apache.org/job/PreCommit-HADOOP-Build/9300/artifact/patchprocess/patch-unit-hadoop-common-project_hadoop-common-jdk1.7.0_95.txt https://builds.apache.org/job/PreCommit-HADOOP-Build/9300/artifact/patchprocess/patch-unit-hadoop-hdfs-project_hadoop-hdfs-jdk1.7.0_95.txt |
| JDK v1.7.0_95  Test Results | https://builds.apache.org/job/PreCommit-HADOOP-Build/9300/testReport/ |
| modules | C: hadoop-common-project/hadoop-common hadoop-hdfs-project/hadoop-hdfs U: . |
| Console output | https://builds.apache.org/job/PreCommit-HADOOP-Build/9300/console |
| Powered by | Apache Yetus 0.3.0-SNAPSHOT   http://yetus.apache.org |


This message was automatically generated.

, Patch is missing documentation fixes., Also, test code should test "legal" unicode characters to make sure they come out unscathed, probably in multiple locales as well., Thanks for the review. I will fix the issues. 

John Zhuge
Software Engineer, Cloudera

, HI [~jzhuge],

For your references,

https://commons.apache.org/proper/commons-lang/javadocs/api-2.4/org/apache/commons/lang/CharUtils.html

http://stackoverflow.com/questions/220547/printable-char-in-java

Thanks.

, Thanks [~yzhangal]., Please review patch 002:
* Change {{PrintableString}} implementation to cover 1 more category of non-printable characters: standalone surrogate characters
* Add unit tests to verify printable characters including unicode scripts from different BMP and SMP blocks are preserved
* Update documentation FileSystemShell.md
* Much more javadoc
* Add hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/shell/package-info.java to quiet checkstyle

Welcome to the wonderful world of Unicode. Some references:
* https://en.wikipedia.org/wiki/Universal_Character_Set_characters
* Java Character class doc, Rename the patch files., | (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue} 0m 14s {color} | {color:blue} Docker mode activated. {color} |
| {color:green}+1{color} | {color:green} @author {color} | {color:green} 0m 0s {color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:green}+1{color} | {color:green} test4tests {color} | {color:green} 0m 0s {color} | {color:green} The patch appears to include 3 new or modified test files. {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 7m 50s {color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 5m 59s {color} | {color:green} trunk passed with JDK v1.8.0_91 {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 6m 42s {color} | {color:green} trunk passed with JDK v1.7.0_95 {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green} 0m 25s {color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green} 0m 59s {color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green} 0m 14s {color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green} 1m 35s {color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 0m 55s {color} | {color:green} trunk passed with JDK v1.8.0_91 {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 1m 8s {color} | {color:green} trunk passed with JDK v1.7.0_95 {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 0m 41s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 6m 2s {color} | {color:green} the patch passed with JDK v1.8.0_91 {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green} 6m 2s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 6m 47s {color} | {color:green} the patch passed with JDK v1.7.0_95 {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green} 6m 47s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green} 0m 24s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green} 0m 56s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green} 0m 14s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green} 0m 0s {color} | {color:green} The patch has no whitespace issues. {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green} 1m 51s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 0m 54s {color} | {color:green} the patch passed with JDK v1.8.0_91 {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 1m 6s {color} | {color:green} the patch passed with JDK v1.7.0_95 {color} |
| {color:red}-1{color} | {color:red} unit {color} | {color:red} 7m 5s {color} | {color:red} hadoop-common in the patch failed with JDK v1.8.0_91. {color} |
| {color:red}-1{color} | {color:red} unit {color} | {color:red} 7m 16s {color} | {color:red} hadoop-common in the patch failed with JDK v1.7.0_95. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green} 0m 24s {color} | {color:green} The patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black} 60m 54s {color} | {color:black} {color} |
\\
\\
|| Reason || Tests ||
| JDK v1.8.0_91 Failed junit tests | hadoop.cli.TestCLI |
| JDK v1.7.0_95 Failed junit tests | hadoop.cli.TestCLI |
\\
\\
|| Subsystem || Report/Notes ||
| Docker |  Image:yetus/hadoop:cf2ee45 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12803165/HADOOP-13079.002.patch |
| JIRA Issue | HADOOP-13079 |
| Optional Tests |  asflicense  compile  javac  javadoc  mvninstall  mvnsite  unit  findbugs  checkstyle  |
| uname | Linux 77fd444c328e 3.13.0-36-lowlatency #63-Ubuntu SMP PREEMPT Wed Sep 3 21:56:12 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | /testptch/hadoop/patchprocess/precommit/personality/provided.sh |
| git revision | trunk / 87f5e35 |
| Default Java | 1.7.0_95 |
| Multi-JDK versions |  /usr/lib/jvm/java-8-oracle:1.8.0_91 /usr/lib/jvm/java-7-openjdk-amd64:1.7.0_95 |
| findbugs | v3.0.0 |
| unit | https://builds.apache.org/job/PreCommit-HADOOP-Build/9348/artifact/patchprocess/patch-unit-hadoop-common-project_hadoop-common-jdk1.8.0_91.txt |
| unit | https://builds.apache.org/job/PreCommit-HADOOP-Build/9348/artifact/patchprocess/patch-unit-hadoop-common-project_hadoop-common-jdk1.7.0_95.txt |
| unit test logs |  https://builds.apache.org/job/PreCommit-HADOOP-Build/9348/artifact/patchprocess/patch-unit-hadoop-common-project_hadoop-common-jdk1.8.0_91.txt https://builds.apache.org/job/PreCommit-HADOOP-Build/9348/artifact/patchprocess/patch-unit-hadoop-common-project_hadoop-common-jdk1.7.0_95.txt |
| JDK v1.7.0_95  Test Results | https://builds.apache.org/job/PreCommit-HADOOP-Build/9348/testReport/ |
| modules | C: hadoop-common-project/hadoop-common U: hadoop-common-project/hadoop-common |
| Console output | https://builds.apache.org/job/PreCommit-HADOOP-Build/9348/console |
| Powered by | Apache Yetus 0.3.0-SNAPSHOT   http://yetus.apache.org |


This message was automatically generated.

, | (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue} 0m 9s {color} | {color:blue} Docker mode activated. {color} |
| {color:green}+1{color} | {color:green} @author {color} | {color:green} 0m 0s {color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:green}+1{color} | {color:green} test4tests {color} | {color:green} 0m 0s {color} | {color:green} The patch appears to include 3 new or modified test files. {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 6m 42s {color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 5m 40s {color} | {color:green} trunk passed with JDK v1.8.0_91 {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 6m 42s {color} | {color:green} trunk passed with JDK v1.7.0_95 {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green} 0m 24s {color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green} 0m 59s {color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green} 0m 14s {color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green} 1m 36s {color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 0m 52s {color} | {color:green} trunk passed with JDK v1.8.0_91 {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 1m 5s {color} | {color:green} trunk passed with JDK v1.7.0_95 {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 0m 41s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 5m 39s {color} | {color:green} the patch passed with JDK v1.8.0_91 {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green} 5m 39s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 6m 41s {color} | {color:green} the patch passed with JDK v1.7.0_95 {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green} 6m 41s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green} 0m 24s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green} 0m 57s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green} 0m 14s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green} 0m 0s {color} | {color:green} The patch has no whitespace issues. {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green} 1m 53s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 0m 55s {color} | {color:green} the patch passed with JDK v1.8.0_91 {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 1m 6s {color} | {color:green} the patch passed with JDK v1.7.0_95 {color} |
| {color:red}-1{color} | {color:red} unit {color} | {color:red} 6m 50s {color} | {color:red} hadoop-common in the patch failed with JDK v1.8.0_91. {color} |
| {color:red}-1{color} | {color:red} unit {color} | {color:red} 7m 11s {color} | {color:red} hadoop-common in the patch failed with JDK v1.7.0_95. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green} 0m 24s {color} | {color:green} The patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black} 58m 25s {color} | {color:black} {color} |
\\
\\
|| Reason || Tests ||
| JDK v1.8.0_91 Failed junit tests | hadoop.cli.TestCLI |
| JDK v1.7.0_95 Failed junit tests | hadoop.cli.TestCLI |
\\
\\
|| Subsystem || Report/Notes ||
| Docker |  Image:yetus/hadoop:cf2ee45 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12803165/HADOOP-13079.002.patch |
| JIRA Issue | HADOOP-13079 |
| Optional Tests |  asflicense  compile  javac  javadoc  mvninstall  mvnsite  unit  findbugs  checkstyle  |
| uname | Linux abdbb76be9b1 3.13.0-36-lowlatency #63-Ubuntu SMP PREEMPT Wed Sep 3 21:56:12 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | /testptch/hadoop/patchprocess/precommit/personality/provided.sh |
| git revision | trunk / 87f5e35 |
| Default Java | 1.7.0_95 |
| Multi-JDK versions |  /usr/lib/jvm/java-8-oracle:1.8.0_91 /usr/lib/jvm/java-7-openjdk-amd64:1.7.0_95 |
| findbugs | v3.0.0 |
| unit | https://builds.apache.org/job/PreCommit-HADOOP-Build/9350/artifact/patchprocess/patch-unit-hadoop-common-project_hadoop-common-jdk1.8.0_91.txt |
| unit | https://builds.apache.org/job/PreCommit-HADOOP-Build/9350/artifact/patchprocess/patch-unit-hadoop-common-project_hadoop-common-jdk1.7.0_95.txt |
| unit test logs |  https://builds.apache.org/job/PreCommit-HADOOP-Build/9350/artifact/patchprocess/patch-unit-hadoop-common-project_hadoop-common-jdk1.8.0_91.txt https://builds.apache.org/job/PreCommit-HADOOP-Build/9350/artifact/patchprocess/patch-unit-hadoop-common-project_hadoop-common-jdk1.7.0_95.txt |
| JDK v1.7.0_95  Test Results | https://builds.apache.org/job/PreCommit-HADOOP-Build/9350/testReport/ |
| modules | C: hadoop-common-project/hadoop-common U: hadoop-common-project/hadoop-common |
| Console output | https://builds.apache.org/job/PreCommit-HADOOP-Build/9350/console |
| Powered by | Apache Yetus 0.3.0-SNAPSHOT   http://yetus.apache.org |


This message was automatically generated.

, Investigate TestCLI failure., Please review patch 003:
* Update hadoop-common/src/test/resources/testConf.xml to fix TestCLI failure , Could someone kindly code review the patch please?, Hi John, overall patch LGTM. Only tiny nit, could we rename "questionMark" and "isQuestionMark" and etc to something else? I feel like "isQuestionMark" in particular is confusing, since what we're testing is whether to substitute non-printable characters, not whether something is a question mark.

FWIW my ls man page calls this "--hide-control-characters", which seems like a reasonable variable name., Also thanks for adding all these new tests (and Allen for suggesting), it's great to see this level of thoroughness come with a contribution., Thanks [~andrew.wang] for the encouragement!

I can see your point about the question mark which is only what is used to hide the non-printable characters. How about renaming it to "hideNonPrintable" which is consistent to help message and the jira title?, Patch 004:
* Rename "questionMark" to "hideNonPrintable", | (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue}  0m 27s{color} | {color:blue} Docker mode activated. {color} |
| {color:green}+1{color} | {color:green} @author {color} | {color:green}  0m  0s{color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:green}+1{color} | {color:green} test4tests {color} | {color:green}  0m  0s{color} | {color:green} The patch appears to include 4 new or modified test files. {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green}  6m 35s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green}  6m 54s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  0m 24s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  1m  3s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green}  0m 11s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  1m 22s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 53s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green}  0m 39s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green}  6m 56s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green}  6m 56s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  0m 22s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  0m 52s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green}  0m 11s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green}  0m  0s{color} | {color:green} The patch has no whitespace issues. {color} |
| {color:green}+1{color} | {color:green} xml {color} | {color:green}  0m  1s{color} | {color:green} The patch has no ill-formed XML file. {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  1m 33s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 59s{color} | {color:green} the patch passed {color} |
| {color:red}-1{color} | {color:red} unit {color} | {color:red}  7m 47s{color} | {color:red} hadoop-common in the patch failed. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green}  0m 20s{color} | {color:green} The patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black} 38m 12s{color} | {color:black} {color} |
\\
\\
|| Reason || Tests ||
| Failed junit tests | hadoop.metrics2.impl.TestGangliaMetrics |
\\
\\
|| Subsystem || Report/Notes ||
| Docker |  Image:yetus/hadoop:2c91fd8 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12808538/HADOOP-13079.004.patch |
| JIRA Issue | HADOOP-13079 |
| Optional Tests |  asflicense  compile  javac  javadoc  mvninstall  mvnsite  unit  findbugs  checkstyle  xml  |
| uname | Linux 5f385b64f5d4 3.13.0-36-lowlatency #63-Ubuntu SMP PREEMPT Wed Sep 3 21:56:12 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | /testptch/hadoop/patchprocess/precommit/personality/provided.sh |
| git revision | trunk / 6de9213 |
| Default Java | 1.8.0_91 |
| findbugs | v3.0.0 |
| unit | https://builds.apache.org/job/PreCommit-HADOOP-Build/9674/artifact/patchprocess/patch-unit-hadoop-common-project_hadoop-common.txt |
|  Test Results | https://builds.apache.org/job/PreCommit-HADOOP-Build/9674/testReport/ |
| modules | C: hadoop-common-project/hadoop-common U: hadoop-common-project/hadoop-common |
| Console output | https://builds.apache.org/job/PreCommit-HADOOP-Build/9674/console |
| Powered by | Apache Yetus 0.4.0-SNAPSHOT   http://yetus.apache.org |


This message was automatically generated.

, Unit test failure is not related:
{noformat}
TestGangliaMetrics.testGangliaMetrics2:139->checkMetrics:161 Missing metrics: test.s1rec.Xxx
{noformat}, Hi [~andrew.wang] and [~aw], could you please continue to review patch 004? Thanks.

, LGTM will commit shortly, Committed back through branch-2.8. Thanks John for pushing on this one, and everyone who helped with reviews., SUCCESS: Integrated in Hadoop-trunk-Commit #9954 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/9954/])
HADOOP-13079. Add -q option to Ls to print ? instead of non-printable (wang: rev 0accc3306d830c3f2b16c4b8abf68729c7aba6cb)
* hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/shell/package-info.java
* hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/shell/TestPrintableString.java
* hadoop-common-project/hadoop-common/src/test/resources/testConf.xml
* hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/shell/PrintableString.java
* hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestFsShellList.java
* hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/shell/Ls.java
* hadoop-common-project/hadoop-common/src/site/markdown/FileSystemShell.md
, Thanks [~andrew.wang] for review and commit. Thanks [~aw] and [~cmccabe] for review and comments., Test doesn't work on Windows I'm afraid; HADOOP-14199 covers it. Probably simplest just to skip the test entirely there. Also looking at the test file, it should be using {{GenericTestUtils.getTempPath()}} to get  the temp dir]