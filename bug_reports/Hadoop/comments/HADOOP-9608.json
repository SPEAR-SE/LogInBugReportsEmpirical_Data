[To be clear, the other node that wasnt rebooted was not active at that time?, Right, the full sequence of events as I understand them was:

- NNA is active, NNB is standby.
- NNB's hardware is getting retired, so it is removed, and a new node NNC brought up.
- Configs updated with NNC's address, but NNA's ZKFC is not modified
- Manual failover occurred to NNC
- Some time later, NNC fails, and the automatic failover does not succeed because NNA's ZKFC still has NNB's address.
, Do you mean because NNA's ZKFC does not have C's address or there is a fixed mapping of the ith NN to a server and that mapping is stale?
The proposed solution is to make every standby ZKFC restart when it discovers an active leader that cannot be connected to? This would mean all standby NN would be rebooting in the above scenario when C becomes master, right?, bq. Do you mean because NNA's ZKFC does not have C's address or there is a fixed mapping of the ith NN to a server and that mapping is stale?

Right -- in this case even the namenode ID changed, so NNA's ZKFC didn't know what to do with the information in ZK which said it should go and fence the old namenode ID.

bq. The proposed solution is to make every standby ZKFC restart when it discovers an active leader that cannot be connected to? This would mean all standby NN would be rebooting in the above scenario when C becomes master, right?

Right - the standby NNs wouldn't themselves restart, but their ZKFCs would abort and require the admin to reconfigure and restart them. The general idea is that we shouldn't have a ZKFC in the election if, upon winning, it would fail to become active anyway.]