[To be precise, the suggested measure, that had such a big effect, was to adjust the timeout in the {{HttpServer2.configureChannelConnector(ServerConnector c)}} method. Currently it has the {{c.setIdleTimeout(10000);}} line. This timeout should be made configurable in the first place, and looks like we need to adjust it to a (much) smaller value when {{HttpServer2}} is used by KMS.

Here is a question that I have in this regard. If by closing HTTP connections on the server side, and thus recycling more quickly, we make KMS work better - does it mean that the KMS client doesn't reuse any such connections, and/or doesn't close a connection when it doesn't need it anymore? If so, it doesn't sound very optimal. I wonder how to prove or disprove this theory., Answering my own question: yes, it looks like indeed the KMS client opens a new HTTP connection for every request, and doesn't seem to close it explicitly. See methods such in {{KMSClientProvider}} , e.g. {{decryptEncryptedKey()}}, {{getCurrentKey()}}, {{deleteKey()}} etc. They all invoke {{createConnection()}}, then {{call()}} with this connection to send a request and get a response, and then I don't see any code that would close that connection.

It's hard for me to say whether it's by design or by neglect, but anyway, such a frequent creation of TCP connection and no explicit close/reuse look unusual. At a minimum, I think it's worth documenting this behavior briefly somewhere, maybe in the top-level javadoc of the {{KMSClientProvider}} class. I suggest to do it in the above patch so that this is not left behind.

 , Thanks Misha.

I attached a patch to do exactly what you suggest firstly: make the idle timeout configurable and make the KMS's default shorter.

There are a few things remain to do that I plan to work on:
 # find the optimal idle timeout value
 # figure out if the KMS client's behavior can be improved., I think the KMS client can be improved as follows. The goal is to avoid creating a TCP connection for each call as done now, but also avoid the situation when a call is blocked waiting for a connection to become available.

Let's use a {{BlockingQueue}} to store connections for reuse. When some client thread needs to make a call, it first checks the queue for an available old connection. If such a connection is available and not closed yet, it's reused and then stored back in the queue. If no open connection is available, a new one is created, used and then also stored back in the queue. In this situation we will normally need no more connection than the maximum number of concurrent client threads., Hi [~jojochuang]

As this jira is marked for 3.2 as a blocker, cud u pls help to take this forward or move out if its not feasible to finish in coming weeks. 3.2 code freeze date is nearby in a weeks. Kindly help to check the same., Thanks for the work here [~jojochuang] and [~misha@cloudera.com], good find and discussions!

Everything you said make sense. I'm not entirely sure, but I think originally with tomcat, this way of connection setup didn't cause any issue probably because the connection was polled by tomcat. This has proven to be problematic in Jetty, and glad having the idle timeout dropped helped this situation.

How about we do this jira first to make it configurable, and continue the connection reuse improvement as a follow-on? A tricky part for the connection reuse is (at least on current trunk) the connection object is created in relation to the caller ugi, so one would need to make sure the reuse doesn't expose any security concerns. From use case perspective, I agree the connection should be reused - and if not, the connection to be proactively closed by the client.

Minor code review comment on patch 1:
- Instead of calling it {{HTTP_IDLE_TIMEOUT}} we may call it {{HTTP_IDLE_TIMEOUT_MS}} for clarity about the millisecond unit
- It seems httpfs-default could also use such an update., [~xiaochen] I agree that any work on connection reusing is more complex and should be done under another jira.

Can you elaborate on "the connection object is created in relation to the caller ugi" statement? What's the exact condition for when a connection can be reused or not?, Thanks [~xiaochen] for review!

Upload rev 002 to address the comments, and submit it for precommit check, | (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue}  0m 24s{color} | {color:blue} Docker mode activated. {color} |
|| || || || {color:brown} Prechecks {color} ||
| {color:green}+1{color} | {color:green} @author {color} | {color:green}  0m  0s{color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:green}+1{color} | {color:green} test4tests {color} | {color:green}  0m  0s{color} | {color:green} The patch appears to include 1 new or modified test files. {color} |
|| || || || {color:brown} trunk Compile Tests {color} ||
| {color:blue}0{color} | {color:blue} mvndep {color} | {color:blue}  0m 23s{color} | {color:blue} Maven dependency ordering for branch {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 18m 35s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 20m 23s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  3m 25s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  2m 40s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} shadedclient {color} | {color:green} 18m 27s{color} | {color:green} branch has no errors when building and testing our client artifacts. {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  3m  1s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  1m 54s{color} | {color:green} trunk passed {color} |
|| || || || {color:brown} Patch Compile Tests {color} ||
| {color:blue}0{color} | {color:blue} mvndep {color} | {color:blue}  0m 20s{color} | {color:blue} Maven dependency ordering for patch {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green}  1m 42s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 15m  9s{color} | {color:green} the patch passed {color} |
| {color:red}-1{color} | {color:red} javac {color} | {color:red} 15m  9s{color} | {color:red} root generated 1 new + 1454 unchanged - 0 fixed = 1455 total (was 1454) {color} |
| {color:orange}-0{color} | {color:orange} checkstyle {color} | {color:orange}  3m 57s{color} | {color:orange} root: The patch generated 1 new + 91 unchanged - 0 fixed = 92 total (was 91) {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  2m 28s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green}  0m  0s{color} | {color:green} The patch has no whitespace issues. {color} |
| {color:green}+1{color} | {color:green} xml {color} | {color:green}  0m  2s{color} | {color:green} The patch has no ill-formed XML file. {color} |
| {color:green}+1{color} | {color:green} shadedclient {color} | {color:green} 11m 13s{color} | {color:green} patch has no errors when building and testing our client artifacts. {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  3m 15s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  1m 54s{color} | {color:green} the patch passed {color} |
|| || || || {color:brown} Other Tests {color} ||
| {color:green}+1{color} | {color:green} unit {color} | {color:green}  9m 15s{color} | {color:green} hadoop-common in the patch passed. {color} |
| {color:green}+1{color} | {color:green} unit {color} | {color:green}  4m  6s{color} | {color:green} hadoop-kms in the patch passed. {color} |
| {color:green}+1{color} | {color:green} unit {color} | {color:green}  4m  0s{color} | {color:green} hadoop-hdfs-httpfs in the patch passed. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green}  0m 41s{color} | {color:green} The patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black}124m 17s{color} | {color:black} {color} |
\\
\\
|| Subsystem || Report/Notes ||
| Docker | Client=17.05.0-ce Server=17.05.0-ce Image:yetus/hadoop:ba1ab08 |
| JIRA Issue | HADOOP-15696 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12937865/HADOOP-15696.002.patch |
| Optional Tests |  dupname  asflicense  compile  javac  javadoc  mvninstall  mvnsite  unit  shadedclient  findbugs  checkstyle  xml  |
| uname | Linux 148dbf1da6c2 3.13.0-144-generic #193-Ubuntu SMP Thu Mar 15 17:03:53 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | /testptch/patchprocess/precommit/personality/provided.sh |
| git revision | trunk / 50d2e3e |
| maven | version: Apache Maven 3.3.9 |
| Default Java | 1.8.0_181 |
| findbugs | v3.1.0-RC1 |
| javac | https://builds.apache.org/job/PreCommit-HADOOP-Build/15117/artifact/out/diff-compile-javac-root.txt |
| checkstyle | https://builds.apache.org/job/PreCommit-HADOOP-Build/15117/artifact/out/diff-checkstyle-root.txt |
|  Test Results | https://builds.apache.org/job/PreCommit-HADOOP-Build/15117/testReport/ |
| Max. process+thread count | 1718 (vs. ulimit of 10000) |
| modules | C: hadoop-common-project/hadoop-common hadoop-common-project/hadoop-kms hadoop-hdfs-project/hadoop-hdfs-httpfs U: . |
| Console output | https://builds.apache.org/job/PreCommit-HADOOP-Build/15117/console |
| Powered by | Apache Yetus 0.9.0-SNAPSHOT   http://yetus.apache.org |


This message was automatically generated.

, bq. Can you elaborate on "the connection object is created in relation to the caller ugi" statement? What's the exact condition for when a connection can be reused or not?
That's the {{conn = getActualUgi().doAs(...)}} part of the code, meaning that if userA and userB get a hold of the same client object, their calls should not reuse each other's connections. May be a little off topic, but the hadoop ipc equivalent is https://github.com/apache/hadoop/blob/branch-3.0.0/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java#L1564, +1 on patch 2 pending pre-commit fixes. (whitebox seems should work using HADOOP-14188 at least on trunk, or exposing a test-only method on HttpServer2. I don't feel strongly either way.)

Thanks for the work, Wei-Chiu!, Thanks [~xiaochen] Uploaded a new rev to use Java reflection instead of Whitebox., +1 pending jenkins, | (/) *{color:green}+1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue}  0m 35s{color} | {color:blue} Docker mode activated. {color} |
|| || || || {color:brown} Prechecks {color} ||
| {color:green}+1{color} | {color:green} @author {color} | {color:green}  0m  0s{color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:green}+1{color} | {color:green} test4tests {color} | {color:green}  0m  0s{color} | {color:green} The patch appears to include 1 new or modified test files. {color} |
|| || || || {color:brown} trunk Compile Tests {color} ||
| {color:blue}0{color} | {color:blue} mvndep {color} | {color:blue}  2m 15s{color} | {color:blue} Maven dependency ordering for branch {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 24m  0s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 24m 38s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  3m 36s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  3m 21s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} shadedclient {color} | {color:green} 20m 22s{color} | {color:green} branch has no errors when building and testing our client artifacts. {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  3m 20s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  1m 55s{color} | {color:green} trunk passed {color} |
|| || || || {color:brown} Patch Compile Tests {color} ||
| {color:blue}0{color} | {color:blue} mvndep {color} | {color:blue}  0m 19s{color} | {color:blue} Maven dependency ordering for patch {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green}  1m 44s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 16m 58s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green} 16m 58s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  3m 40s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  2m 30s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green}  0m  0s{color} | {color:green} The patch has no whitespace issues. {color} |
| {color:green}+1{color} | {color:green} xml {color} | {color:green}  0m  3s{color} | {color:green} The patch has no ill-formed XML file. {color} |
| {color:green}+1{color} | {color:green} shadedclient {color} | {color:green} 12m 33s{color} | {color:green} patch has no errors when building and testing our client artifacts. {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  3m 38s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  2m 21s{color} | {color:green} the patch passed {color} |
|| || || || {color:brown} Other Tests {color} ||
| {color:green}+1{color} | {color:green} unit {color} | {color:green}  9m  7s{color} | {color:green} hadoop-common in the patch passed. {color} |
| {color:green}+1{color} | {color:green} unit {color} | {color:green}  4m 10s{color} | {color:green} hadoop-kms in the patch passed. {color} |
| {color:green}+1{color} | {color:green} unit {color} | {color:green}  4m  8s{color} | {color:green} hadoop-hdfs-httpfs in the patch passed. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green}  0m 43s{color} | {color:green} The patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black}142m 29s{color} | {color:black} {color} |
\\
\\
|| Subsystem || Report/Notes ||
| Docker | Client=17.05.0-ce Server=17.05.0-ce Image:yetus/hadoop:ba1ab08 |
| JIRA Issue | HADOOP-15696 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12938414/HADOOP-15696.003.patch |
| Optional Tests |  dupname  asflicense  compile  javac  javadoc  mvninstall  mvnsite  unit  shadedclient  findbugs  checkstyle  xml  |
| uname | Linux 75a40e7d99e9 3.13.0-143-generic #192-Ubuntu SMP Tue Feb 27 10:45:36 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | /testptch/patchprocess/precommit/personality/provided.sh |
| git revision | trunk / 6ccb809 |
| maven | version: Apache Maven 3.3.9 |
| Default Java | 1.8.0_181 |
| findbugs | v3.1.0-RC1 |
|  Test Results | https://builds.apache.org/job/PreCommit-HADOOP-Build/15138/testReport/ |
| Max. process+thread count | 1353 (vs. ulimit of 10000) |
| modules | C: hadoop-common-project/hadoop-common hadoop-common-project/hadoop-kms hadoop-hdfs-project/hadoop-hdfs-httpfs U: . |
| Console output | https://builds.apache.org/job/PreCommit-HADOOP-Build/15138/console |
| Powered by | Apache Yetus 0.8.0   http://yetus.apache.org |


This message was automatically generated.

, +1 push this in 3.x branches. Will follow up with a client side investigation Jira to study if client can recycle connections., SUCCESS: Integrated in Jenkins build Hadoop-trunk-Commit #14882 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/14882/])
HADOOP-15696. KMS performance regression due to too many open file (weichiu: rev e780556ae9229fe7a90817eb4e5449d7eed35dd8)
* (edit) hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/http/TestHttpServer.java
* (edit) hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/http/HttpServer2.java
* (edit) hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/resources/httpfs-default.xml
* (edit) hadoop-common-project/hadoop-kms/src/main/resources/kms-default.xml
, Pushed 003 to trunk for 3.2.0 release. 

I was a little hesitate to push this in 3.1 and 3.0 as it changes the default idle time initially. Justification: this behavior made KMS unusable in production environment.

 

Branch-3.1 has a trivial conflict due to test cases. Attached [^HADOOP-15696.branch-3.1.001.patch] for reference. The patch compiles and test passed locally.

Branch-3.0 was cherry picked from branch-3.1 with no conflicts., | (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue}  0m  0s{color} | {color:blue} Docker mode activated. {color} |
| {color:red}-1{color} | {color:red} patch {color} | {color:red}  0m  9s{color} | {color:red} HADOOP-15696 does not apply to branch-3.1. Rebase required? Wrong Branch? See https://wiki.apache.org/hadoop/HowToContribute for help. {color} |
\\
\\
|| Subsystem || Report/Notes ||
| JIRA Issue | HADOOP-15696 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12938506/HADOOP-15696.branch-3.1.001.patch |
| Console output | https://builds.apache.org/job/PreCommit-HADOOP-Build/15143/console |
| Powered by | Apache Yetus 0.8.0   http://yetus.apache.org |


This message was automatically generated.

, Resolve this jira. Thanks [~xiaochen] and [~misha@cloudera.com] for review and suggestions! , +1 on fixing this in 3.1/3.0 given the severity and impact of this issue]