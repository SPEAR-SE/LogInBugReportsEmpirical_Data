[+1, shipping dependent jars is a core functionality for MR jobs, but other than Job.setJarByClass() Hadoop does not provide any utils for finding jars from the classpath. Every application has to do the uber-jar kind of approach, or write their own tool, or copy the code from Hadoop (which HBase did apparently). , +1 for the idea but lets move it out of Map/Reduce and put it in common, or YARN.  I ran into this recently writing an AM for storm.  I would love to use this instead of (ctl-c, ctl-v), but I don't really want to depend on the MR jars if I am not doing MR processing, and I assume others feel similarly., Done., Ship JarFinder as a general-purpose utility for resolving a jar path based on a class name, based on the available classpath., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12574914/0001-HADOOP-9426-Promote-JarFinder-out-of-test-jar.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:red}-1 findbugs{color}.  The patch appears to introduce 2 new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-common-project/hadoop-common.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HADOOP-Build/2352//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-HADOOP-Build/2352//artifact/trunk/patchprocess/newPatchFindbugsWarningshadoop-common.html
Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/2352//console

This message is automatically generated., I think it makes sense to add annotations, so that it becomes public API:
{code}
@InterfaceAudience.Public
@InterfaceStability.Stable
{code}, Do we really want this kind of functionality being part of Hadoop public API?

BTW, the {{jarDir()}} method should have javadocs.


, bq. Do we really want this kind of functionality being part of Hadoop public API?
Yes. MR and some yarn applications need the ability to ship jars to the cluster, and make it available for it's tasks. There is only limited support to set the jars through Job.setJarByClass(), but 1. This is MR specific, 2. This will only ship your main jar, not dependent jars, unless you are doing the uber-jar which is pretty inconvenient. 
We need to be able to say to ship these jars, OR make these classes available. , BTW, we only need the getJar() api, not the others. Maybe we should label them as such. , JarFinder only finds (or creates if an expanded DIR) a JAR for the a class, nothing else. ID ose not ship jars to the cluster, nor add thems them to distributed cache, no deal with dependent jars.

You don't need to use uber-jars, you can use -libjars to push jars to the cluster and have them in the classpath together with your job.

, bq. You don't need to use uber-jars, you can use -libjars to push jars to the cluster and have them in the classpath together with your job.
Yes, but you have to be able to find the jars which the jar finder does. We combine this with "tmpjars" to ship the jars currently. Not all jobs are invoked from command line. 
, bq. Not all jobs are invoked from command line.

[~tucu00] it is as [~enis] says. Please look more closely at HBASE-8140., New patch addressing comments: added interface annotations and javadocs., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12575569/0001-HADOOP-9426-Promote-JarFinder-out-of-test-jar.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:red}-1 findbugs{color}.  The patch appears to introduce 2 new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-common-project/hadoop-common.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HADOOP-Build/2367//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-HADOOP-Build/2367//artifact/trunk/patchprocess/newPatchFindbugsWarningshadoop-common.html
Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/2367//console

This message is automatically generated., [~tucu00],  The reason for putting this functionality in is because now that YARN is gaining traction there are more and more tools that run on top of YARN that want this ability, similar to how Map/Reduce uses it.  Yes -libjars is a great way to ship dependencies for Map/Reduce, but MR also exposes this through other interfaces and for non-mapreduce tools it would be nice to have this functionality in a common place.  I am not sure that hadoop-common is the best place for this.  yarn might be a better place, but I think common is an OK place., That being said, I don't see much reason to have most of the other methods in there.  You have grabbed a class that is designed for testing, and re-purposed it.  I see no reason to automatically create a jar if the .class file is not in a jar already.  Especially placing it in a directory defined by test.build.dir, and probably pointing to target/test-dir.  I also see no reason to turn an IOException in a RuntimeException.  This is fine for testing, but makes it more difficult to deal with exceptions correctly in other places.

I would much rather see ClassUtil.java be made public and stable.  It is what MR is using anyways, although it still turns an IOException into a RuntimeException, but I guess you cannot have everything., Bobby, your last comment hit the nail. JarFinder is meant for testing, to be able to find the JAR of class and, if necessary, create a JAR on the fly containing all the classes in the specified class classpath location, typically target/test-classes/*. This allows you to easily prepare a JAR for setting in the jobconf when doing testing.

And, using the JarFinder with classes that are in JARs assumes you'll know all the transitive dependencies JARs an specific classes from those transitive dependencies to get all the JARs.

If an application wants to do that, it is fine with me (Oozie does this), I would just not like Hadoop providing an API to do such thing which is quite error prone., Transitive dependency resolution would be awesome ([aether|https://github.com/sonatype/sonatype-aether], anyone?). However, it's well beyond the scope of this addition. For the purposes of HBase, we expect the user to itemize representative classes from all the jars needed by their job, so that burdon is on the user already. In this case, the jar doesn't actually exist, it's been extracted by a previous jobstep's runtime. We use JarFinder to package it back up again and pass it along to the next job., Projects are going to do this, like you said oozie does, and either they will copy and paste the content of ClassUtil.java (which I did for my storm on yarn work), implement their own version, or we can provide them approved access to ClassUtil.  I personally would prefer to provide the ability to do this so there is less duplication.  I can see how it is error prone but MR has been exposing this functionality for a long time.  If we are already on the hook for providing this functionality through MR, why not support it more broadly for YARN too?

Alejandro, Would moving this JIRA to YARN make it any more palatable to you?, Bobby, I don't think this should be a Hadoop public API for reasons I've mentioned before. But if we have it, I'd say it should be in common., bq.  I don't think this should be a Hadoop public API for reasons I've mentioned before
If hbase, oozie, storm on yarn, and some other yarn apps need it, I don't really understand why you don't want to support it. Would it be better to have every application to copy-paste the code for this. We can easily get out the test-related bits, and expose only getOrCreateJar(). , If for testing you can already use it out of the test jar, same as mini-cluster, no?, This is no longer about testing. This is about building and running user applications., Nick, that is my concern. run off the mill user applications should not be doing this kind of stuff. Said this, I won't push further, we should have a testcase and decide if the jar-ing on the fly is to be kept in the public version or not., I would prefer not to see jaring on the fly, or if we do include it that there is a separate option that does not do it.  It adds in a lot of complexity that I would prefer to not deal with, and I doubt that most people need it.  Even oozie I would argue does not need it any more.  The distributed cache does not fully unzip jars any more.  Because of this it is probably picking up the proper jar already., [~revans2] Perhaps you can provide some example code demonstrating how me might accomplish our needs via existing means using distributed cache., Now I'm confused, if the intention is not the JAR on the fly thingy, then this is already done by the hadoop-common's ClassUtils#findContainingJar() method, we just need to change the @InterfaceAudience.Private to @InterfaceAudience.Public. What am I missing?, The behavior I see indicates that jar classes are available on the classpath at the point at which the client creates a job. The desire was to use JarFinder to package those classes back into a jar, so that they can be re-submitted via -tmpjars along with the job.

It was suggested that this re-packaging and re-submission is not necessary as the jars should already be available in the distributed cache. If that is in face the case, I'd prefer to use those existing jars, and request additional guidance in such an implementation.

My understanding was that if the jars were already available, the existing code would have found them., If you've put the JARs in HDFS then they'll be there, nobody will put them there for you except of the job JAR (which is why JarFinder JARs up -typically- target/tests-classses/* for a class used in a testcase)., For the usecase I'm concerned about, the jars were shipped to the cluster and expanded via the parent job's use of the -tmpjars feature. The child job is launched from the context of that parent job, where it sees classes from the expanded jars, but not the jars themselves, available in the local fs tmp working directory. Hence the use of JarFinder.

Are you suggesting that the parent process could locate the original jars in the distributed cache and use them? This is an acceptable solution from the HBase perspective. How might I resolve the paths?

I don't know if it resolves [~revans2]'s needs.

All I really care about is that Hadoop provide APIs to easily resolve a jar path from a unique identifier of some kind (class-name, jar base-name, &c). If that's done through JarFinder's repackaging or some other construct, I'm largely ambivalent. HBase was already using JarFinder for some code-paths, so it made sense to extend its use.

Please advise., Bump., bq. Are you suggesting that the parent process could locate the original jars in the distributed cache and use them? This is an acceptable solution from the HBase perspective. How might I resolve the paths?

If you use the parent job conf to create your child job you'll get the distributed cached config for free.

For example, in Oozie's case we populate the jobconf for child job in the oozie server and copy it to HDFS for the parent to loaded and add it to the child jobconf it is creating (actually oozie server cooks up the full job conf for the child job, the parent job just loads and uses it for the submission).
, \\
\\
| (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:red}-1{color} | patch |   0m  0s | The patch command could not apply the patch during dryrun. |
\\
\\
|| Subsystem || Report/Notes ||
| Patch URL | http://issues.apache.org/jira/secure/attachment/12575569/0001-HADOOP-9426-Promote-JarFinder-out-of-test-jar.patch |
| Optional Tests | javadoc javac unit findbugs checkstyle |
| git revision | trunk / f1a152c |
| Console output | https://builds.apache.org/job/PreCommit-HADOOP-Build/6270/console |


This message was automatically generated., \\
\\
| (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:red}-1{color} | patch |   0m  0s | The patch command could not apply the patch during dryrun. |
\\
\\
|| Subsystem || Report/Notes ||
| Patch URL | http://issues.apache.org/jira/secure/attachment/12575569/0001-HADOOP-9426-Promote-JarFinder-out-of-test-jar.patch |
| Optional Tests | javadoc javac unit findbugs checkstyle |
| git revision | trunk / f1a152c |
| Console output | https://builds.apache.org/job/PreCommit-HADOOP-Build/6310/console |


This message was automatically generated.]