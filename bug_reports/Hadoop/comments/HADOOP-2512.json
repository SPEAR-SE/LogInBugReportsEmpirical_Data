[Patch attached.,  1) Sorry for the typo.
2) The way the Exception message is composed should be changed. Basically its composed of
    - Error stream output
    - Exit code error message

So
{code}
   if (errMsg.length() == 0) {
     errMsg.append("Command exit with status code " + exitCode);
   }
{code}
should be changed to
{code}
   if (errMsg.length() == 0) {
     errMsg.insert(0,"Command exit with status code " + exitCode + ",\n");
   }
{code}
3) In the patch you are waiting for the error stream to finish with the output stream still open. This could possibly lead to a deadlock
4) The reason {{completed}} was introduced is as follows
- If {{parseExec}} generates an exception then there is no need to wait for the error thread to complete, so interrupt
- the exit code is sufficient for determining the error and hence its fine to interrupt the error thread
- in normal case since there is no error its fine to do as join

A better solution would be to interrupt error thread for exception on {{parseExec}} and join for others. In which case the 'completed=true' should be done before throwing an exception.
Except the change of {{errThread.join}} block, rest seems fine.
comments?
, > 2) The way the Exception message is composed should be changed. 
I don't see any difference other than adding a "\n", is that true?

> 3) In the patch you are waiting for the error stream to finish with the output stream still open. This could possibly lead to a deadlock

Not really, the process has already exited. This patch has the same guarantees as when waitFor() returning '0'.

> [...] the rest [...]
What is the issue with the current patch? If you think errMsg is not important, then we should not try to put it in IOException, right? 
 , - Earlier I did {{append}} and here I am doing {{insert}} thus putting the exit  code message on the top. In your patch the exit code will be in the end, no?
- Yeah I think its fine to have the {{errThread.join}} immediately after {{waitFor()}} returns with non-zero exit code. 

Rest looks fine., > Earlier I did append and here I am doing insert thus putting the exit code message on the top. In your patch the exit code will be in the end, no?
That is inside ' {{if (errMsg.length() == 0) { ..}} ', so {{append()}} and {{insert(0)}} are the same. I am missing something? 

I am not sure what the policy should be regd errmsg. I would prefer not to modify it at all and let the user get exit code from {{getExitCode()}}. Here, I am just fixing code to align with the intent in HADOOP-2344., What I meant was (rewriting a part of the Raghu's patch)
{code}
       exitCode = process.waitFor();
+      try {
+        // make sure that the error thread exits
+        errThread.join();
+      } catch (InterruptedException ie) {
+        LOG.warn("Interrupted while reading the error stream", ie);
+      }
+      completed = true;
       if (exitCode != 0) {
-         if (errMsg.length() == 0) {
-           errMsg.append("Command exit with status code " + exitCode);
-         }
+          errMsg.insert(0,"Command exit with status code " + exitCode + "\n");
         throw new IOException(errMsg.toString());
       }
-      completed = true;
{code}
Something on similar lines.  Does this make sense? , _Now_ the patch inserts at the begging :). though I don't think there is any need to meddle with error msg. -1 from my side. If it is useful for a user, I would think one would prefer an actual error message., To make it easier for user to get exit code while using {{Shell.execCommand()}} I would rather throw a subclass of IOException that has getExitCode() call. I can do that in this patch., bq. though I don't think there is any need to meddle with error msg.
+1 (if the developer really wants to display an error msg like "Command exit with status code...  " to the user, he can invoke getExitCode and then print out a suitable msg)., Amar, thanks for the review. I am making it patch available so that it trickles through Hudson. Let me know if you still want some thing to be changed., +1, I think its easy to add the exit code later (for the developers using {{getExitCode()}}) than to remove it.
Now it makes sense to have something like
{code}
if (exitCode != 0) {
  throw new IOException(errMsg.toString());
}
{code}
I was of the belief that this error message will be directly passed to the end user, which might not be true., +1 overall.  Here are the results of testing the latest attachment 
http://issues.apache.org/jira/secure/attachment/12372431/HADOOP-2512.patch
against trunk revision .

    @author +1.  The patch does not contain any @author tags.

    javadoc +1.  The javadoc tool did not generate any warning messages.

    javac +1.  The applied patch does not generate any new compiler warnings.

    findbugs +1.  The patch does not introduce any new Findbugs warnings.

    core tests +1.  The patch passed core unit tests.

    contrib tests +1.  The patch passed contrib unit tests.

Test results: http://lucene.zones.apache.org:8080/hudson/job/Hadoop-Patch/1479/testReport/
Findbugs warnings: http://lucene.zones.apache.org:8080/hudson/job/Hadoop-Patch/1479/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Checkstyle results: http://lucene.zones.apache.org:8080/hudson/job/Hadoop-Patch/1479/artifact/trunk/build/test/checkstyle-errors.html
Console output: http://lucene.zones.apache.org:8080/hudson/job/Hadoop-Patch/1479/console

This message is automatically generated., > Now it makes sense to have something like [...]

The latest patch throws a sub class of IOException (Shell.ExitCodeException). This also makes it easy for users to get hold of exit code even with Shell.execCommand() interface. This simplifies patch for HADOOP-2420. Since these two are tested together, I merging HADOOP-2420 also into this., -1 overall.  Here are the results of testing the latest attachment 
http://issues.apache.org/jira/secure/attachment/12372651/HADOOP-2512.patch
against trunk revision .

    @author +1.  The patch does not contain any @author tags.

    javadoc +1.  The javadoc tool did not generate any warning messages.

    javac +1.  The applied patch does not generate any new compiler warnings.

    findbugs +1.  The patch does not introduce any new Findbugs warnings.

    core tests +1.  The patch passed core unit tests.

    contrib tests -1.  The patch failed contrib unit tests.

Test results: http://lucene.zones.apache.org:8080/hudson/job/Hadoop-Patch/1504/testReport/
Findbugs warnings: http://lucene.zones.apache.org:8080/hudson/job/Hadoop-Patch/1504/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Checkstyle results: http://lucene.zones.apache.org:8080/hudson/job/Hadoop-Patch/1504/artifact/trunk/build/test/checkstyle-errors.html
Console output: http://lucene.zones.apache.org:8080/hudson/job/Hadoop-Patch/1504/console

This message is automatically generated., I just committed this.]