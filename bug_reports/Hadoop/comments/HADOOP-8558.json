[This was introduced in 0.23 by HADOOP-7227., Here is an example of what I mean.
{{TestProtocol}} extends {{VersionedProtocol}} and {{ProtocolExtension}}. The latter is not versioned, and rpc fails with 
{code}
Tests in error:
testCalls(org.apache.hadoop.ipc.TestProtocolExtension): java.lang.NoSuchFieldException: versionID
{code}

I think there is no reason for this behavior, because {{TestProtocol}} is perfectly versioned.
The solution is to overload in {{TestProtocol}} the method declared in {{ProtocolExtension}}. (Uncomment the lines in the test to make it pass.) This is inconvenient if {{ProtocolExtension}} has a lot of methods.

This basically prevents from using other existing interfaces to define new protocols.
And this is incompatible with previous versions of hadoop, as the same test runs fine with e.g. 0.22.

Solution is simple enough - need get rid of getDeclaringClass() by passing the actual protocol into Invocation constructor. I would like to here if this is done intentionally and has some meaning I don't understand., Turns out that the version can be specified in annotation now. In my example above if I add {{ProtocolInfo}} annotation specifying the version like this
{code}
@ProtocolInfo(
    protocolName = "org.apache.hadoop.ipc.TestProtocolExtension$TestProtocol", 
    protocolVersion = TestProtocol.versionID)
public interface ProtocolExtention {
  void logClassName();
}
{code}
the test will pass. {{ProtocolInfo}} was introduced by HADOOP-7524., Attaching version of the test that passes under current trunk., Resolving as not a problem.]