[Discussed offline with Owen. While the sleep itself is one part of the problem, the more compelling case for having a separate thread would be the case where the JobTracker is slow and the shuffle scheduler is stuck because the actual call to getMapCompletionEvents is taking a long time to return., Attaching a patch. 

A 100 node, 100 byte, 100K maps loadgen showed a 3x performance improvement (~800 seconds with patch, ~2500 seconds without the patch)
{noformat}
bin/hadoop jar hadoop-$BUILD-test.jar loadgen \
-D test.randomtextwrite.bytes_per_map=$((100)) \
-D test.randomtextwrite.total_bytes=$((100*100000)) \
-D mapred.compress.map.output=false \
-r 1 \
-outKey org.apache.hadoop.io.Text \
-outValue org.apache.hadoop.io.Text \
-outFormat org.apache.hadoop.mapred.lib.NullOutputFormat \
-outdir fakeout
{noformat}

Testpatch results:

     [exec] -1 overall.  
     [exec] 
     [exec]     +1 @author.  The patch does not contain any @author tags.
     [exec] 
     [exec]     -1 tests included.  The patch doesn't appear to include any new or modified tests.
     [exec]                         Please justify why no tests are needed for this patch.
     [exec] 
     [exec]     +1 javadoc.  The javadoc tool did not generate any warning messages.
     [exec] 
     [exec]     +1 javac.  The applied patch does not increase the total number of javac compiler warnings.
     [exec] 
     [exec]     +1 findbugs.  The patch does not introduce any new Findbugs warnings.
     [exec] 
     [exec]     +1 Eclipse classpath. The patch retains Eclipse classpath integrity.
     [exec] 
, I propose this go to 0.18.3., I don't think this is a regression. I think we should apply this to trunk, but not 0.19 or 0.18., ant test and test-contrib passed on my local box, I just committed this. Thanks, Jothi!]