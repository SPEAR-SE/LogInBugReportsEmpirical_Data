[This looks inline with the intended behavior of -update option

[https://hadoop.apache.org/docs/current/hadoop-distcp/DistCp.html]
{code:java}
-update is used to copy files from source that don’t exist at the target or differ from the target version. -overwrite overwrites target-files that exist at the target.

The Update and Overwrite options warrant special attention since their handling of source-paths varies from the defaults in a very subtle manner. Consider a copy from /source/first/ and /source/second/ to /target/, where the source paths have the following contents:
hdfs://nn1:8020/source/first/1
hdfs://nn1:8020/source/first/2
hdfs://nn1:8020/source/second/10
hdfs://nn1:8020/source/second/20
When DistCp is invoked without -update or -overwrite, the DistCp defaults would create directories first/ and second/, under /target. Thus:
distcp hdfs://nn1:8020/source/first hdfs://nn1:8020/source/second hdfs://nn2:8020/target
would yield the following contents in /target:
hdfs://nn2:8020/target/first/1
hdfs://nn2:8020/target/first/2
hdfs://nn2:8020/target/second/10
hdfs://nn2:8020/target/second/20
When either -update or -overwrite is specified, the *contents* of the source-directories are copied to target, and not the source directories themselves. 
Thus:
distcp -update hdfs://nn1:8020/source/first hdfs://nn1:8020/source/second hdfs://nn2:8020/target

would yield the following contents in /target:

hdfs://nn2:8020/target/1
hdfs://nn2:8020/target/2
hdfs://nn2:8020/target/10
hdfs://nn2:8020/target/20

{code}
Performed a small test with encryption zone to validate the above point
{code:java}
Path sourcePath = new Path(dfs.getWorkingDirectory(), "source");
		initData10(sourcePath);
		
		Path foo = new Path("/source/foo");
		dfs.mkdirs(foo);
		dfs.createEncryptionZone(foo, "test");
		String[] args = new String[] {"-update","/.reserved/raw"+source.toString(), "/.reserved/raw"+target.toString() };
	    new DistCp(conf, OptionsParser.parse(args)).execute();
		RemoteIterator<EncryptionZone> listEncryptionZones = dfs.listEncryptionZones();
		while (listEncryptionZones.hasNext()) {
			System.out.println("Encryption Zone :: " + listEncryptionZones.next().getPath());
		}
{code}
This above code prints 2 encryption zones as I create the encryption zone on "foo"  a subdirectory of the source directory. Here we can observe that the encryption zone of the subdirectory is preserved at the target
{code:java}
Encryption Zone :: /source/foo
Encryption Zone :: /target/foo
{code}
On the other hand, the below code only prints one encryption zone as the encryption zone is created directly on the source directory and not the subdirectory. 
{code:java}
Path sourcePath = new Path(dfs.getWorkingDirectory(), "source");
		initData10(sourcePath);
		
		dfs.createEncryptionZone(source, "test");
		String[] args = new String[] {"-update","/.reserved/raw"+source.toString(), "/.reserved/raw"+target.toString() };
	    new DistCp(conf, OptionsParser.parse(args)).execute();
		RemoteIterator<EncryptionZone> listEncryptionZones = dfs.listEncryptionZones();
		while (listEncryptionZones.hasNext()) {
			System.out.println("Encryption Zone :: " + listEncryptionZones.next().getPath());
		}
{code}
{code:java}
Encryption Zone :: /source
{code}]