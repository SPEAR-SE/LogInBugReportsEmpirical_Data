[The patch removes System.exit from ToolBase and adjusts the interface of method "run" to throw IOException., I agree with removing the call to exit(), but I don't see the need to change the exception.

To my thinking, this replaces the standard main() signature:

public static void main(String[] args) throws Exception {
  ...
}

Folks frequently write main() to not throw anything, and then catch exceptions and print the stacktrace.  This just makes the code bigger, since the JVM already prints the stack trace when a main() throws an exception.  It also makes it harder to call the main() programatically (which is ocassionally useful) since you'll have no idea whether it has somehow failed.  So this is why I argue that main() routines should throw Exception, and analagously, why our replacement should do the same.  Otherwise we'll just have folks catching other exceptions and repackaging them in IOException, adding pointless code.
, 
I think it is better to be as explicit as possible about which (checked) Exceptions your main() routine is not handling.  It is useful to the reader to know that the only checked exception that can be thrown is an IOException.  This doesn't require any additional code, and in any case readability is more important than saving a line or two.

, But at issue here is not a particular main(), but an interface for main()-like methods.  So we cannot know which specific exceptions might be thrown., 
Agreed that the interface method needs to throw Exception.  I thought that you were disagreeing with the changes to the more specific IOException in the implementing classes also.
, Here is the new patch reflecting Doug's suggestion. In addition to removing System.exit, I changed the main function of DFSShell, JobClient, and CopyFiles to throw Exception instead of IOException., I just committed this.  Thanks, Hairong.

David: you are right, implementations of the Tool interface can throw more precise exceptions.]