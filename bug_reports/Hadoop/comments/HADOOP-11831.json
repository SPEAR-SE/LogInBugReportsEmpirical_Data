[We could try to override the system class list to have exclusion rules for these odd ball classes, but that approach won't really scale.

Another possibility is to allow the application classloader to fall back on the app classpath for a system class if it cannot load it from the system classpath. But I think we need to think through the implications of doing that. the semantics of system classes is they should be exclusively owned by the underlying system (system = container, framework, JDK, ...) and one should not fall back on the user classpath to load system classes.

Also, in practice, we need to think about security issues and whether there would be collisions between multiple versions of the same class (manifested as issues like loader constraint violation LinkageErrors)., Also note that other class isolation solutions have similar issues, including OSGi and webapp classloaders. OSGi would also fail miserably if one tries to split a system package.]