[Hey Jonathan, this is supposed to work that way. The outputstream is supposed to be closed by the app since it was created by the app. , Devaraj:   If that is the case, I think the javadoc documentation should be updated explaining these semantics because they are different from close semantics when creating the writer via SequenceFile.createWriter(...,Path,...).  

Inside SequenceFile.close(),  it eventually calls flush on the FSDataOutputStream.  Note that this test case is actually writing to the local file system (file:///tmp/testfile).  Is that flush call supposed to do nothing to maintain consistency with the semantics when writing to hdfs?

Thanks,
Jon., I agree that the app should close the underlying OutputStream. But after the SequenceFile.Writer is closed, its data should be available in the file. SequenceFile.Writer.close() in fact calls flush() on the underlying DataOutputStream. It is bizarre that this data is not available to other readers. I still consider this a bug.

at SequenceFile.java, line 985:
{code}
        // Close the underlying stream iff we own it...
        if (ownOutputStream) {
          out.close();
        } else {
          out.flush(); // <-- This does not seem to work right.
        }
        out = null;
{code}

, Actually, the flush call is somewhat misleading. If I am reading things right, it seems like LocalFilesystem's flush actually ends up being a no-op. ]