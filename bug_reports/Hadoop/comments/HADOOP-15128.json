[Thanks [~anu] and [~eyang].

The test failures in _TestViewFileSystemLocalFileSystem_ and _TestViewFileSystemWithAuthorityLocalFileSystem_ are because {{RawLocalFileSystem}} overrides the {{getOwner()}}, {{getGroup()}} and {{getPermission()}} functions from {{FileStatus}}. And in the overridden functions, there is a call to {{loadPermissionInfo()}} which can throw an Exception.

Possible fixes:
# Revert {{getOwner()}}, {{getGroup}} and {{getPermission()}} in _FileStatus#toString()_ to {{owner}}, {{group}} and {{permission}}.
# Catch the exception thrown by _RawLocalFileSystem#loadPermissionInfo()_ in _FileStatus#toString()_ and log a debug message.

I am inclined towards the second option. Thoughts?, In HADOOP-2381, the discussion thread contains good insights why the original code was written as such.  We should throw exception when it is unable to load permission information, and owner, group, permission information should not be null.  These safe guards are making sure the file system security is not compromised.  The recent change allows other class to extend RawLocalFileSystem base class and circumvent security.  HADOOP-10054 must be reverted to prevent security hole.  There are other ways to fix ViewFsFileStatus.toString() to make sure the path is initialized properly without modifying FileStatus class., We've had problems with RawLocalFileSystem#loadPermissionInfo() being a performance killer when it execs local fs operations, especially on Windows: HADOOP-14600.

What is toString being used for?

* If is being logged as the output of operations like {{hadoop fs -ls}} then we're duty bound by way of the compat guidelines to not break the format of the output. I believe the patch is safe there, other than the API changes
* If its just being logged in our info/debug strings, calling loadParmissions is a very expensive operation to undertake in some filesystems, and, as noted, it can fail. And, because it changes the state of the object, it means that log statements will have side effects when enabled. I don't want to be in the situation where logging @ debug makes code work, and turning it off fixes it; that's the bane of C/C++ debug macros.

Is there a way to do a fix which doesn't force an eval in a normal toString, but only when needed for logging to the console? I'm sure we've done it with other classes where we ended up adding a "for console output" toString equivalent. Though I like fileStatus to stay the same, given its ubiquity
, Thanks [~eyang] and [~stevel@apache.org] for the insights.

We can override the _toString()_ function in {{ViewFsFileStatus}} and {{ViewFsLocatedFileStatus}}. The rest of the classes extending FileStatus either override the toString() function already or do not override any of the get methods (_getPath()_, _isDirectory()_ etc.) we want to introduce in toString() ( with the exception of DeprecatedRawLocalFileSystem).

{{DeprecatedRawLocalFileSystem#toString()}} would remain the same as is (calliing _FileStatus#toString()_). The toString() output might not give the actual owner,  group and permission correctly. But it would avoid the calls to _loadPermissionInfo()_ every time toString() is called. And there won't be any modifications done to {{FileStatus}}., How close are we to a solution? HADOOP-10054 is neither critical nor difficult to maintain, so we should revert it if this isn't a simple fix., I'm in favour of a rollback, given how it's been outstanding for a few weeks and we are ignoring test failures again, Reverted HADOOP-10054, let's make the right fix there.]