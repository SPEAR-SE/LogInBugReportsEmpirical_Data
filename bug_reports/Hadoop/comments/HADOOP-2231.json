[There are many cases where {{df -k}} can hang like,
1. If it encounters a faulty NFS mount. In this case {{df -k}} hangs for ever waiting for the NFS.
2. If it encounters a faulty file system/block.
3. Due to overflow of the inputStream/errorStream buffers leading to some kind of deadlock.
Assuming the cause to be {{3}} I am uploading a patch. Similar bug was found in {{TaskRunner.java}}. Fixed that in this patch. 
Comments ?, Since we are going to Java 1.6 (ala HADOOP-2325), we can and should move to use java.io.File.getFreeSpace()., +1, -1 overall.  Here are the results of testing the latest attachment 
http://issues.apache.org/jira/secure/attachment/12370878/HADOOP-2231.patch
against trunk revision r600771.

    @author +1.  The patch does not contain any @author tags.

    javadoc -1.  The javadoc tool appears to have generated  messages.

    javac +1.  The applied patch does not generate any new compiler warnings.

    findbugs -1.  The patch appears to introduce 1 new Findbugs warnings.

    core tests +1.  The patch passed core unit tests.

    contrib tests -1.  The patch failed contrib unit tests.

Test results: http://lucene.zones.apache.org:8080/hudson/job/Hadoop-Patch/1251/testReport/
Findbugs warnings: http://lucene.zones.apache.org:8080/hudson/job/Hadoop-Patch/1251/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Checkstyle results: http://lucene.zones.apache.org:8080/hudson/job/Hadoop-Patch/1251/artifact/trunk/build/test/checkstyle-errors.html
Console output: http://lucene.zones.apache.org:8080/hudson/job/Hadoop-Patch/1251/console

This message is automatically generated., After some more thoughts we feel that 
1. The way free space is computed using {{DF.getAvailable()}} should now be done using {{File.getFreeSpace()}} and {{File.getUsableSpace()}} API available in java6. So as a part of this patch I will change the way {{df -k}} is used to compute the free space by making use of {{File.getUsableSpace()}}.
2. There are some classes which still use the {{getMount()}} API of {{DF.java}}. Java 6 does not provide any API for this. So the only way out is to make use of shell commands like {{stat}} or {{df}} for calculating the mount points. As discussed in {{HADOOP-2344}}, there are issues with the way shell commands are executed in {{ShellUtil.java}} and {{ShellCommand.java}}. A patch is made available for {{HADOOP-2344}}. 
----
Comments ?, I think we should fix HADOOP-2344 regardless.  We don't know for sure yet whether we'll upgrade to Java 6 in the 0.16 release, and, even if we do, we'll still need to invoke shell commands., HADOOP-2344 addresses the problem in general.]