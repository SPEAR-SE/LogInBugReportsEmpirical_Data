[My current guess is that the JobTracker went through recovery with running jobs. When looking at the callers to JobTracker.updateTaskTrackerStatus, which assums that the JobTracker is locked by the caller, the call tree from RecoverManager.recover doesn't ever lock the job tracker., The recovery manager processes one job at a time. During the recovery, the updateTaskTrackerStatus would create dummy TaskTrackerStatus objects with 0 map/reduce slots for the trackers. Also, the IPC server is not up until the recovery manager returns. I don't think the negative value for maps in the cluster summary has anything to do with the recovery process. This has been observed before and reported - HADOOP-5231., Forgot to mark this a blocker.

The number of running + pending tasks is used to determine the right level of loading for the cluster. If it is negative, the cluster will be under-utilized. , It should still lock the JobTracker, since it violates the assumption of the method and could easily be broken during later maintenance. 

We still need an explanation of what is going on., As Devaraj pointed out, problem is not with JobTracker restart.
In JobTracker, TaskTrackerStatus is cached in {{taskTrackers}} and is supposed to be read-only. But it is passed to updateTaskStatuses() method, in which task reports (TaskStatus objects) are passed to JobInProgress. In JobInProgress.updaTaskStatuses() and tip.updateStatus(), the TaskStatus object is getting modified.
The code in TaskInProgress modifying the TaskStatus reference :
{code}
    if (!isCleanupAttempt(taskid)) {
      taskStatuses.put(taskid, status);
    } else {
      taskStatuses.get(taskid).statusUpdate(status.getRunState(),
        status.getProgress(), status.getStateString(), status.getPhase(),
        status.getFinishTime());
    }
{code}

This could make total count negative in following scenario:
Tracker1 reported a task *t_0* is KILLED_UNCLEAN. 
Tracker2 is given the cleanup attempt for t_0.
Tracker2 reports saying it is running cleanup attempt t_0. Updates taskStatuses object,  which is holding TaskStatus object from tracker1's status.
JT calculates total count assuming the task is run by both the trackers, thus leading to negative totals.

Cloning TaskStatus object and passing to JIP looks like the correct solution. Thoughts?, Just FYI, the fair scheduler does not use the cluster status to find the total running maps / reduces. This is a different problem. But fortunately, this issue will not result in underutilization when used with the fair scheduler., Patch fixing -ve numbers in cluster summary, and adding synchronization for JobTracker methods in RecoveryManager.

-ve numbers are reproducible on cluster by running MRReliability test 95% of the time. Patch has been tested by running 4 runs of MRReliability on 100 node clusters. And we dont see -ve numbers anymore.

test-patch result:
{noformat}
     [exec]
     [exec] -1 overall.
     [exec]
     [exec]     +1 @author.  The patch does not contain any @author tags.
     [exec]
     [exec]     -1 tests included.  The patch doesn't appear to include any new or modified tests.
     [exec]                         Please justify why no tests are needed for this patch.
     [exec]
     [exec]     +1 javadoc.  The javadoc tool did not generate any warning messages.
     [exec]
     [exec]     +1 javac.  The applied patch does not increase the total number of javac compiler warnings.
     [exec]
     [exec]     +1 findbugs.  The patch does not introduce any new Findbugs warnings.
     [exec]
     [exec]     +1 Eclipse classpath. The patch retains Eclipse classpath integrity.
     [exec]
     [exec]     +1 release audit.  The applied patch does not increase the total number of release audit warnings.
     [exec]
{noformat}
It is difficult to write unit-test for this., Changes look good to me. , All unit tests passed on my machine. Also Ran Sort benchmark with the patch., This patch doesn't look like the right fix w.r.t the JobTracker locking in the JobRecovery methods. For example, the place where the call to updateTaskTrackerStatus is made, it locks only the taskTrackers object, but it should be locking JobTracker and trackerExpiryQueue as well. This is in line with keeping future maintenance in mind as Owen had pointed out.
For now, what I will do is that I will commit a portion of the patch that handles the negative counts of maps/reduces, and commit that part as part of HADOOP-5231., Patch incorporating Devaraj's comments for synchronization., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12404501/patch-5548-1.txt
  against trunk revision 761482.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no tests are needed for this patch.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs warnings.

    +1 Eclipse classpath. The patch retains Eclipse classpath integrity.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch-minerva.apache.org/106/testReport/
Findbugs warnings: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch-minerva.apache.org/106/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Checkstyle results: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch-minerva.apache.org/106/artifact/trunk/build/test/checkstyle-errors.html
Console output: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch-minerva.apache.org/106/console

This message is automatically generated., Hudson is not able to run core tests for some reason. All core tests passed on my machine.
Patch adds synchronization to RecoveryManager. Existing tests TestJobTrackerRestart, TestRecoveryManager will test the code changes., +1. Changes look fine to me., unfortunately the patch doesn't apply to trunk now., Patch updated with trunk.
Patch also adds JIP and TIP update statuses under JobTracker lock.

, test-patch and  ant test passed on machine.
The same patch applies to branch 0.20 as well., Looked at the patch. Looks like there is no other way to this. There are cyclic calls from jobtracker->jobinprogress->taskinprogress->jobtracker. There is no documentation today to indicate this. For now we can go with Amareshwari's patch and provide a quick fix. Later on in another jira we can get rid of these implicit assumptions. +1., I just committed this. Thanks Amareshwari!, -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12404804/patch-5548-2.txt
  against trunk revision 762509.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no tests are needed for this patch.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs warnings.

    -1 Eclipse classpath. The patch causes the Eclipse classpath to differ from the contents of the lib directories.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch-vesta.apache.org/159/testReport/
Findbugs warnings: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch-vesta.apache.org/159/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Checkstyle results: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch-vesta.apache.org/159/artifact/trunk/build/test/checkstyle-errors.html
Console output: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch-vesta.apache.org/159/console

This message is automatically generated., {quote}
Later on in another jira we can get rid of these implicit assumptions
{quote}

Amar, please file this Jira now so the issues doesn't get totally lost., Integrated in Hadoop-trunk #800 (See [http://hudson.zones.apache.org/hudson/job/Hadoop-trunk/800/])
    . Add synchronization for JobTracker methods in RecoveryManager. Contributed by Amareshwari Sriramadasu.
]