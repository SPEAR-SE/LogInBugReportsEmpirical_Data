[{color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12640897/hadoop-10522.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-common-project/hadoop-common.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HADOOP-Build/3817//testReport/
Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/3817//console

This message is automatically generated., Hi, [~kihwal].  Thank you for putting this patch together.

The changes look good to me for handling the other error codes in {{hadoop_user_info_fetch}} and limiting retries.  I didn't understand the part about {{errno}} though.  According to POSIX, mutation of {{errno}} on one thread is not visible in other threads:

http://www.unix.org/whitepapers/reentrant.html

The Linux man page specifically says that it's in thread-local storage:

http://linux.die.net/man/3/errno

Additionally, the POSIX docs say that both {{getgrgid_r}} and {{getpwnam_r}} are supposed to be thread-safe:

http://pubs.opengroup.org/onlinepubs/9699919799/functions/getgrgid.html

http://pubs.opengroup.org/onlinepubs/009695399/functions/getpwnam.html

Have you observed something different in practice?, [~cnauroth]: You are right. errno should be thread-safe on most modern platforms. I think it is still safer to use the return value than errno whenever possible. Buggy code could make decision based on errno set by previous sys call., +1  Looks good to me.  Since the *_r functions return errno, I think that's the safest value to use., {code}
+    // The following call returns errno. Reading the global errno wihtout
+    // locking is not thread-safe.
{code}

As [~cnauroth] mentioned, this is wrong.  Please remove

{code}
+    pwd = NULL;
+    ret = getpwnam_r(username, &uinfo->pwd, uinfo->buf,
                          uinfo->buf_sz, &pwd);
-    } while ((!pwd) && (errno == EINTR));
{code}

Unfortunately, this is wrong too. :(

{{getgrgrid_r}} does not set {{errno}} (or at least is not documented to do so by POSIX).  Instead, it returns the error number directly.  Here's the man page on my system:

{code}
       On  success,  getgrnam_r() and getgrgid_r() return zero, and set *result to grp.  If no matching group record was found, these functions return 0 and store NULL in *result.  In case of error, an error number is returned, and NULL is
       stored in *result.
{code}

Notice that {{errno}} is not mentioned.

{code}
   ret = hadoop_user_info_fetch(uinfo, username);
-  if (ret == ENOENT) {
-    jgroups = (*env)->NewObjectArray(env, 0, g_string_clazz, NULL);
+  if (ret) {
+    if (ret == ENOENT) {
+      jgroups = (*env)->NewObjectArray(env, 0, g_string_clazz, NULL);
+    } else { // handle other errors
+      char buf[128];
+      snprintf(buf, sizeof(buf), "getgrouplist: error looking up user. %d (%s)",
+               ret, terror(ret));
+      THROW(env, "java/lang/RuntimeException", buf);
+    }
{code}

Try {{(*env)->Throw(env, newRuntimeException("getgrouplist: error looking up user. %d (%s)", ret, terror(ret)))}} here instead.

{code}
+  for (i = 0, ret = 0; i < MAX_USER_LOOKUP_TRIES; i++) {
{code}

This is wrong.  Just because we get {{EINTR}} 5 times doesn't mean we should fail.  Maybe we're just handling a lot of signals (the JVM sends signals internally).  Also, why are we increasing the buffer size when we get {{EINTR}}?  We should only increase the buffer size when we get {{ERANGE}}.  I think the better way to do this would be to keep the old loop, but break out if we got an {{ERANGE}} and the buffer size was above some fixed amount.  However, this still seems strange to me.  Clearly the underlying library is buggy, if it keeps telling us {{ERANGE}} forever.  Is there a particular bug we are trying to work around in this patch?, Let's hold off on committing this until we fix these issues., Thanks for the reviews, Chris and Daryn. I've committed this to trunk, branch-2 and branch-2.4., [~kihwal], it seems like you missed my review.  You probably didn't hit refresh soon enough.  Do you mind if I back this out so we can fix some of the issues with this patch?, SUCCESS: Integrated in Hadoop-trunk-Commit #5544 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/5544/])
HADOOP-10522. JniBasedUnixGroupMapping mishandles errors. Contributed by Kihwal Lee. (kihwal: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1588949)
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/native/src/org/apache/hadoop/security/JniBasedUnixGroupsMapping.c
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/native/src/org/apache/hadoop/security/hadoop_group_info.c
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/native/src/org/apache/hadoop/security/hadoop_user_info.c
, Thanks for the feedback, [~cmccabe] 
bq. getgrgrid_r does not set errno (or at least is not documented to do so by POSIX).
The patch does not use errno. It explicitly use the return value. The code before my patch used errno.

bq. Try (*env)->Throw(env, newRuntimeException("getgrouplist: error looking up user. %d (%s)", ret, terror(ret))) here instead.
I don't think it is correct to throw a RuntimeException when a user is not found (ENOENT).

bq.  Just because we get EINTR 5 times doesn't mean we should fail. 
Probably. I will fix that.

bq. Also, why are we increasing the buffer size when we get EINTR?
We don't.

Another bug in my patch is to return EIO when user/group is not found.  I will fix it and enable retries for EINTR forever in a separate jira. I will file one and attach a patch., Filed HADOOP-10527 and attached a patch., Thanks for filing the follow-up, Kihwal.  I'll move my responses there., SUCCESS: Integrated in Hadoop-Yarn-trunk #548 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk/548/])
HADOOP-10522. JniBasedUnixGroupMapping mishandles errors. Contributed by Kihwal Lee. (kihwal: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1588949)
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/native/src/org/apache/hadoop/security/JniBasedUnixGroupsMapping.c
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/native/src/org/apache/hadoop/security/hadoop_group_info.c
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/native/src/org/apache/hadoop/security/hadoop_user_info.c
, SUCCESS: Integrated in Hadoop-Hdfs-trunk #1740 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/1740/])
HADOOP-10522. JniBasedUnixGroupMapping mishandles errors. Contributed by Kihwal Lee. (kihwal: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1588949)
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/native/src/org/apache/hadoop/security/JniBasedUnixGroupsMapping.c
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/native/src/org/apache/hadoop/security/hadoop_group_info.c
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/native/src/org/apache/hadoop/security/hadoop_user_info.c
, SUCCESS: Integrated in Hadoop-Mapreduce-trunk #1765 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/1765/])
HADOOP-10522. JniBasedUnixGroupMapping mishandles errors. Contributed by Kihwal Lee. (kihwal: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1588949)
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/native/src/org/apache/hadoop/security/JniBasedUnixGroupsMapping.c
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/native/src/org/apache/hadoop/security/hadoop_group_info.c
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/native/src/org/apache/hadoop/security/hadoop_user_info.c
]