[Attaching the fix and the test that validates the fix.

Problem is in {{PathData#expandAsGlob}} and is caused by {{new File(path).isAbsolute()}} returning false for absolute paths on Windows.

For example:
{code}
new File("/dir1").isAbsolute() == false
{code}

Fix is to use {{Path#isAbsolute}} instead as we already invested into making Path work well cross platform.

Additional problem I had to address is passing "." to PathData#expandAsGlob. Passing "." to Path constructor will run it thru the URI normalization which will leave an empty string only. Passing an empty string to {{new File("").isAbsolute()}} works fine and returns false, however, {{new Path("").isAbsolute()}} throws.

The patch fixes all TestHDFSCli test cases expect for the below ones (HADOOP-8139 is tracking those).
2013-03-05 01:43:25,967 INFO  cli.CLITestHelper (CLITestHelper.java:displayResults(239)) - 26: ls: Negative test for quoted /*/* globbing 
2013-03-05 01:43:25,967 INFO  cli.CLITestHelper (CLITestHelper.java:displayResults(239)) - 27: ls: Test for quoted globbing 
2013-03-05 01:43:25,967 INFO  cli.CLITestHelper (CLITestHelper.java:displayResults(239)) - 28: rm: Test for quoted globbing
, +1

I am not so sure why we need the empty string check in Path though.
{code}
  private void checkPathArg( String path ) throws IllegalArgumentException {
    // disallow construction of a Path from an empty string
    if ( path == null ) {
      throw new IllegalArgumentException(
          "Can not create a Path from a null string");
    }
    if( path.length() == 0 ) {
       throw new IllegalArgumentException(
           "Can not create a Path from an empty string");
    }   
  }
{code}, bq. I am not so sure why we need the empty string check in Path though.
Thanks Chuan, this is a good question. Java File does not complain about the empty string. I don't have a strong preference, so we can go both ways. Since I cannot think of a good scenario that would justify empty paths (other than the one in this Jira), I'm leaning toward not changing Path. If people generally think this is appropriate I can make this change., +1

The patch looks good.  I verified that the test passes on Mac with the patch applied to either trunk or branch-trunk-win.  On Windows, I verified that the test passes, and I verified that manually running hadoop fs -ls commands no longer has the erroneous leading "../.." .

I'm attaching the same patch generated a slightly different way just so that it can apply cleanly to trunk and then merge to branch-trunk-win.  Also, really minor nit: instead of globUri.getPath().equals(""), we can use globUri.getPath().isEmpty().  I changed it in the new patch.

Thanks!
, {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12572267/HADOOP-9364.2.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 tests included appear to have a timeout.{color}

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-common-project/hadoop-common.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HADOOP-Build/2276//testReport/
Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/2276//console

This message is automatically generated., Is this the fix in PathData?

{code}      } else if (!globUri.getPath().equals("") &&
                 new Path(globUri.getPath()).isAbsolute()) {{code}


I did not quite understand why it fixes the bug., Thanks for reviewing Arpit. Yes, the fix goes to PathData. The issue is that as part of {{FsShell fs -ls}} we go thru this codepath which incorrectly concludes that "/dir" is a relative path. This causes the later code to resolve the relative path to the current working dir, hence ../../

Let me know if this answers your question., Sorry I still don't see why the empty check and replacing the File constructor with Path fixes it., bq. Sorry I still don't see why the empty check and replacing the File constructor with Path fixes it.
Hi Arpit, as I mentioned above,
{code}
new File("/dir1").isAbsolute() == false
{code}
"/dir" is an absolute path, and this is where the problem is. Path#isAbsolute does not have this problem.

The empty check is just for the ".", quoting myself:
{quote}
Additional problem I had to address is passing "." to PathData#expandAsGlob. Passing "." to Path constructor will run it thru the URI normalization which will leave an empty string only. Passing an empty string to new File("").isAbsolute() works fine and returns false, however, new Path("").isAbsolute() throws.
{quote}, I think part of the confusion may come from the fact that the patch alone doesn't provide a lot of context about what is actually happening.  To really understand it, we need to look further down into some of the PathData logic that is not changing in the patch file:

{code}
      // convert stats to PathData
      items = new PathData[stats.length];
      int i=0;
      for (FileStatus stat : stats) {
        URI matchUri = stat.getPath().toUri();
        String globMatch = null;
        switch (globType) {
          case HAS_SCHEME: // use as-is, but remove authority if necessary
            if (globUri.getAuthority() == null) {
              matchUri = removeAuthority(matchUri);
            }
            globMatch = matchUri.toString();
            break;
          case SCHEMELESS_ABSOLUTE: // take just the uri's path
            globMatch = matchUri.getPath();
            break;
          case RELATIVE: // make it relative to the current working dir
            URI cwdUri = fs.getWorkingDirectory().toUri();
            globMatch = relativize(cwdUri, matchUri, stat.isDirectory());
            break;
        }
        items[i++] = new PathData(fs, globMatch, stat);
      }
{code}

Here, we see that if the glob type has been identified as RELATIVE, then the output will be made relative to the current working dir.  We really want SCHEMELESS_ABSOLUTE.  As per Ivan's earlier comment, {{File#isAbsolute}} states that it's a relative path when running on Windows, so it gets mis-classified as RELATIVE instead of SCHEMELESS_ABSOLUTE.  Switching to {{Path}} fixes it, because we've already invested in getting that code to correctly identify absolute paths according to the cross-platform rules that we need.
, Thanks! That is an odd bug in File. Now I see why this works.

+1, Attaching the patch., Ah, wrong Jira, I deleted the patch here and attached it to the right Jira.

bq. That is an odd bug in File. Now I see why this works.
Thanks Arpit. Java behavior changed between an older version and version 6, check out:
 - http://docs.oracle.com/javase/1.4.2/docs/api/java/io/File.html
 - http://docs.oracle.com/javase/6/docs/api/java/io/File.html, +1 for the patch., I committed the patch to trunk. Thank you Ivan., Integrated in Hadoop-trunk-Commit #3436 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/3436/])
    HADOOP-9364. PathData#expandAsGlob does not return correct results for absolute paths on Windows. Contributed by Ivan Mitic. (Revision 1454108)

     Result = SUCCESS
suresh : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1454108
Files : 
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/shell/PathData.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/shell/TestPathData.java
, Integrated in Hadoop-Yarn-trunk #149 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk/149/])
    HADOOP-9364. PathData#expandAsGlob does not return correct results for absolute paths on Windows. Contributed by Ivan Mitic. (Revision 1454108)

     Result = SUCCESS
suresh : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1454108
Files : 
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/shell/PathData.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/shell/TestPathData.java
, Integrated in Hadoop-Hdfs-trunk #1338 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/1338/])
    HADOOP-9364. PathData#expandAsGlob does not return correct results for absolute paths on Windows. Contributed by Ivan Mitic. (Revision 1454108)

     Result = SUCCESS
suresh : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1454108
Files : 
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/shell/PathData.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/shell/TestPathData.java
, Integrated in Hadoop-Mapreduce-trunk #1366 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/1366/])
    HADOOP-9364. PathData#expandAsGlob does not return correct results for absolute paths on Windows. Contributed by Ivan Mitic. (Revision 1454108)

     Result = SUCCESS
suresh : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1454108
Files : 
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/shell/PathData.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/shell/TestPathData.java
, Merged the change to branch-2]