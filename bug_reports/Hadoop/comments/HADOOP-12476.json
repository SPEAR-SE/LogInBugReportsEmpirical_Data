[Stack
{code}
java.lang.AssertionError: 
Expected: is "-DUMMY_HOSTNAME"
     but: was "localhost"
	at org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20)
	at org.junit.Assert.assertThat(Assert.java:865)
	at org.junit.Assert.assertThat(Assert.java:832)
	at org.apache.hadoop.net.TestDNS.testLookupWithoutHostsFallback(TestDNS.java:225)
{code}, This test has been failing since at least September 28., # This is unrelated to HADOOP-12449; that patch didn't touch the test case that is now failing.
# It surfaced (transiently) in a patch submission for [HADOOP-10775|https://issues.apache.org/jira/browse/HADOOP-10775?focusedCommentId=14949090&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-14949090]

The implication is that this is a transient, or that it's specific to one of the build machines/JVMs

Looking at the code it is playing reflection games; that doesn't help...some package-scoped modifier would be cleaner.
, I could not think of a practical alternative to reflection for this test case without significantly refactoring {{DNS}}. It's dependencies on DNS lookups and networking are not well isolated and make unit testing difficult.

However I am not sure why it fails at all. [~jojochuang], have you seen it fail outside of Jenkins?, No I can't. I ran this test case repeatedly for 100 times on my local Linux machine and couldn't reproduce the failure at all. Maybe it's caused by the configuration at the jenkins machine?, Thanks for confirming that., {quote}However I am not sure why it fails at all. Wei-Chiu Chuang, have you seen it fail outside of Jenkins?{quote}
This fails for me outside Jenkins. 

I'm running this on two machines: Ubuntu 16.10 and OS X El Capitan. It fails on Oracle 8 and OpenJDK 8.

It also fails on trunk and branch-2.8. (branch-2.7 doesn't have the same test). I also checked out the first commit with the test (df31c446) and it failed (pointing java to 8 or 7)., I think I found the issue. My Ubuntu box is/was running bind9 so it can resolve it's own dns requests. When we pretend that we can't hit a dns server, things are still getting resolved anyway.

OS X seems to be working, so maybe ignore what I said before about that., what system/network setup do you have?, I wonder if there's a way to detect this setup (e.g. bind9 running), or at least fail with a message about the topic, I think it's best to add something to the failure message can help people get past the error message while someone figures out if it's possible to fix entirely programmatically.

I've attached a minimal test case to demonstrate the issue.

{code}
$ javac -g WhatsMyDNS.java
# local dns is not active:
$ systemctl status -o short-precise bind9 | grep 'Active:'
   Active: inactive (dead) since Tue 2016-12-13 10:18:02 CET; 15s ago
$ java -Djava.net.preferIPv4Stack=true WhatsMyDNS 
Test Lookup with Hosts Fallback...
Removed some guava code. might be adding an ip address.. "localhost"
Hostname is "localhost" and we don't want "-DUMMY_HOSTNAME"
Test Lookup without Hosts Fallback...
Hostname is "-DUMMY_HOSTNAME" and we want "-DUMMY_HOSTNAME"
[10:18:30] ehigg90120@U2604089H0498[0] ~/src
$ sudo systemctl start bind9
$ systemctl status -o short-precise bind9 | grep 'Active:'
   Active: active (running) since Tue 2016-12-13 10:18:34 CET; 7s ago
$ java -Djava.net.preferIPv4Stack=true WhatsMyDNS 
Test Lookup with Hosts Fallback...
Hostname is "localhost" and we don't want "-DUMMY_HOSTNAME"
Test Lookup without Hosts Fallback...
Hostname is "localhost" and we want "-DUMMY_HOSTNAME"
{code}

The issue appears to be in reverseDns where InitialDirContext is happy to make requests against the local DNS. I haven't seen how to stop if from doing that. Even if I did, it's not clear that we want this in the code since people may very well want local dns daemons running on their nodes. ]