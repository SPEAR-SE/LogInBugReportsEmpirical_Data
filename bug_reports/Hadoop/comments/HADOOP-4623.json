[Attaching a patch that maintains the running structure irrespective of speculation. Modified {{TestJobInProgress}} to test this patch. Testing under progress. Benchmarking is pending., Attaching a new patch with some bug fixes and cleanup. Test patch result 
{code}
[exec] +1 overall.  
     [exec] 
     [exec]     +1 @author.  The patch does not contain any @author tags.
     [exec] 
     [exec]     +1 tests included.  The patch appears to include 32 new or modified tests.
     [exec] 
     [exec]     +1 javadoc.  The javadoc tool did not generate any warning messages.
     [exec] 
     [exec]     +1 javac.  The applied patch does not increase the total number of javac compiler warnings.
     [exec] 
     [exec]     +1 findbugs.  The patch does not introduce any new Findbugs warnings.
     [exec] 
     [exec]     +1 Eclipse classpath. The patch retains Eclipse classpath integrity.
{code}
Testing and benchmarking in progress., +1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12393871/HADOOP-4623-v1.2.patch
  against trunk revision 718232.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 32 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs warnings.

    +1 Eclipse classpath. The patch retains Eclipse classpath integrity.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/3601/testReport/
Findbugs warnings: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/3601/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Checkstyle results: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/3601/artifact/trunk/build/test/checkstyle-errors.html
Console output: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/3601/console

This message is automatically generated., I ran gridmix on _trunk_ and _trunk+patch-v1.2_ and here are the results 
||type||time(secs)||
|trunk|2373|
|trunk+patch-v1.2|2556|
This patch takes ~3min more than trunk. I will benchmark this again and see if the results are consistent. , Tried running gridmix again and here are the runtimes (comparing with trunk run from the above comment)
||run#|time(secs)|diff(secs)||
|1|2489|117|
|2|2634|262|
|3|2426|54|
, 
Currently the data structure for runningMapCache (logically a map from Node->Collection<TaskInProgress>).
Whenever a task is scheduled, a tip is added to this structure. Whenever a task is completed, the tip is deleted from the data structure.
This data structure is currently implemented as a LinkedHashMap. That means each operation involves link manipulation and objection creation.

I suspect that the performance would improve if a more efficient data structure is used.
Here is an idea.
Use a HashMap mapping nodes to fix sized arrays of tips. The fix size should be the number of slots per node. 
With this simple data structure, you need to initialize it once. Any add/delete operations be simply setting a reference in a fix sized array.
No object creation is involved. Their overhead will be lower and predictable.

 , bq. That means each operation involves link manipulation and objection creation.
There is no object creation involved. Node is passed by the jobtracker which it maintains per tracker/node. TIP is already created by the job as part of job-initialization. Only data structure updates will happen using object references.

bq. Use a HashMap mapping nodes to fix sized arrays of tips. The fix size should be the number of slots per node. 
Wouldnt this result into memory wastage as there might be many other jobs running in parallel and the whole(expanded) _running-cache_ might not be used. How will you take care of holes in the array? 

----
I think I should benchmark the patch again and see if the results are consistent. If yes then we can go ahead with the patch and file an optimization jira for running-cache. Thoughts?, Changes in JobInProgress look good.
In TestJobInProgress, instead of directly accessing JIP.runningMapTasks, JIP.runningMapTasks variables, you can use public methods runningMaps() and runningReduces().
I don't know whether UtilsForTest refactoring is needed in this jira, but the code changes look fine., Attaching a patch the incorporates Amareshwari's comment #1. I have added a testcase that requires {{WaitingMapper}} and the related _utils_ and hence I have re-factored the code. Here are the benchmark results
||trunk(secs)||trunk+4623-v1.2.patch(secs)||diff(secs)||
|2440|2407|-33|
| |2432|-8 secs|
| |2434|-6 secs|, Running through hudson. _test-patch_ result on my box
{code}
[exec] +1 overall.  
     [exec] 
     [exec]     +1 @author.  The patch does not contain any @author tags.
     [exec] 
     [exec]     +1 tests included.  The patch appears to include 32 new or modified tests.
     [exec] 
     [exec]     +1 javadoc.  The javadoc tool did not generate any warning messages.
     [exec] 
     [exec]     +1 javac.  The applied patch does not increase the total number of javac compiler warnings.
     [exec] 
     [exec]     +1 findbugs.  The patch does not introduce any new Findbugs warnings.
     [exec] 
     [exec]     +1 Eclipse classpath. The patch retains Eclipse classpath integrity.
{code}, some more comments:
1. In method,   private void waitTillReady(JobInProgress jip, JobConf job) in TestJobInProgress, you still use variables runningMapTasks and runningReduceTasks.
2. The code _private static Path TEST_DIR = new Path("jip-testing")_ will create jip-testing directory in current working dir. It should be
_new Path(System.getProperty("test.build.data","/tmp"), "jip-testing")_, -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12394738/HADOOP-4623-v1.3.patch
  against trunk revision 721415.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 32 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs warnings.

    +1 Eclipse classpath. The patch retains Eclipse classpath integrity.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/3668/testReport/
Findbugs warnings: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/3668/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Checkstyle results: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/3668/artifact/trunk/build/test/checkstyle-errors.html
Console output: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/3668/console

This message is automatically generated., Incorporating Amareshwari's comments. Result of _test-patch_
{noformat}
 [exec] +1 overall.  
     [exec] 
     [exec]     +1 @author.  The patch does not contain any @author tags.
     [exec] 
     [exec]     +1 tests included.  The patch appears to include 32 new or modified tests.
     [exec] 
     [exec]     +1 javadoc.  The javadoc tool did not generate any warning messages.
     [exec] 
     [exec]     +1 javac.  The applied patch does not increase the total number of javac compiler warnings.
     [exec] 
     [exec]     +1 findbugs.  The patch does not introduce any new Findbugs warnings.
     [exec] 
     [exec]     +1 Eclipse classpath. The patch retains Eclipse classpath integrity.

{noformat}, +1 
patch looks good, @Runping : This issue addresses the bug in the framework where _running-tasks_ are not maintained if _specualtion_ is OFF. Benchmarks have shown that this patch doesnt always degrade the performance. I feel we should go ahead and get this committed and open another _perforamce-related_ jira incase we see some performance degradation. This issue is blocking capacity-scheduler., sounds good.
, Result of _test-patch_ on trunk :
{noformat}
[exec] +1 overall.  
     [exec] 
     [exec]     +1 @author.  The patch does not contain any @author tags.
     [exec] 
     [exec]     +1 tests included.  The patch appears to include 32 new or modified tests.
     [exec] 
     [exec]     +1 javadoc.  The javadoc tool did not generate any warning messages.
     [exec] 
     [exec]     +1 javac.  The applied patch does not increase the total number of javac compiler warnings.
     [exec] 
     [exec]     +1 findbugs.  The patch does not introduce any new Findbugs warnings.
     [exec] 
     [exec]     +1 Eclipse classpath. The patch retains Eclipse classpath integrity.
{noformat}

Running _ant test_ now., _ant test_ passed on my local box., +1, I just committed this. Thanks, Amar !, Integrated in Hadoop-trunk #680 (See [http://hudson.zones.apache.org/hudson/job/Hadoop-trunk/680/])
    ]