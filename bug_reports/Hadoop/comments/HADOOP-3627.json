[I think the semantics is actually the best that we can do with the current protocols. I wouldn't want a windows-like semantics where a writer anywhere can keep you from deleting a file. I think it would make sense to introduce fileid's at some point so that renames while you are writing work in the unix-style, with the name and contents being completely separate from each other. That is a much bigger change to the name node though...

I'd propose that we make this wont-fix., We seek unix-like behavior when feasable, and the unix behavior here would be that the write would not fail.  So permitting deletion is not the bug.  The error in the writer is perhaps a bug, but fully supporting the unix notion of unlinked files that disappear when the last reader or writer is closed might prove difficult, and is not the subject of this issue anyway.

> I'd propose that we make this wont-fix.

+1
, Thanks Owen, Doug. I should have explained background of this issue as well. We saw this case (running 0.17), when coupled with NameNode dropping request when it is under load caused the write to hang. On trunk, namenode would no longer drop requests, and we agree that we are not changing semantics of deleted while writing. I will close this as wont fix. ]