[The close method closes this.in and this.out but does not close this.socket which might have helped in these scenarios.  One mechanism that can trigger this having a client trying to connect to HDFS on the wrong port (e.g.: web port instead of RPC port).  Doing so makes the SASL setup blow up with an OOM error since it's not checking for sane boundaries on string lengths and trying to allocate gigantic byte arrays.  Sample backtrace snippet from a 0.23 client:

{noformat}
Caused by: java.io.IOException: Couldn't set up IO streams
        at org.apache.hadoop.ipc.Client$Connection.setupIOstreams(Client.java:623)
        at org.apache.hadoop.ipc.Client$Connection.access$2100(Client.java:207)
        at org.apache.hadoop.ipc.Client.getConnection(Client.java:1204)
        at org.apache.hadoop.ipc.Client.call(Client.java:1074)
        ... 25 more
Caused by: java.lang.OutOfMemoryError
        at sun.misc.Unsafe.allocateMemory(Native Method)
        at java.nio.DirectByteBuffer.<init>(DirectByteBuffer.java:127)
        at java.nio.ByteBuffer.allocateDirect(ByteBuffer.java:306)
        at sun.nio.ch.Util.getTemporaryDirectBuffer(Util.java:174)
        at sun.nio.ch.IOUtil.read(IOUtil.java:196)
        at sun.nio.ch.SocketChannelImpl.read(SocketChannelImpl.java:359)
        at org.apache.hadoop.net.SocketInputStream$Reader.performIO(SocketInputStream.java:54)
        at org.apache.hadoop.net.SocketIOWithTimeout.doIO(SocketIOWithTimeout.java:142)
        at org.apache.hadoop.net.SocketInputStream.read(SocketInputStream.java:154)
        at org.apache.hadoop.net.SocketInputStream.read(SocketInputStream.java:127)
        at java.io.FilterInputStream.read(FilterInputStream.java:133)
        at java.io.BufferedInputStream.read1(BufferedInputStream.java:273)
        at java.io.BufferedInputStream.read(BufferedInputStream.java:334)
        at java.io.DataInputStream.readFully(DataInputStream.java:195)
        at java.io.DataInputStream.readFully(DataInputStream.java:169)
        at org.apache.hadoop.io.WritableUtils.readString(WritableUtils.java:125)
        at org.apache.hadoop.security.SaslRpcClient.readStatus(SaslRpcClient.java:114)
        at org.apache.hadoop.security.SaslRpcClient.saslConnect(SaslRpcClient.java:150)
        at org.apache.hadoop.ipc.Client$Connection.setupSaslConnection(Client.java:409)
        at org.apache.hadoop.ipc.Client$Connection.access$1300(Client.java:207)
        at org.apache.hadoop.ipc.Client$Connection$2.run(Client.java:578)
        at org.apache.hadoop.ipc.Client$Connection$2.run(Client.java:575)
        at java.security.AccessController.doPrivileged(Native Method)
{noformat}

There's probably a separate JIRA here for the fact that the SASL layer isn't doing sanity checks on the lengths of strings it's trying to read., Fixed to call closeConnection() method in close() method., +1 Patch looks good for me. 
, {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12613337/HADOOP-10081.1.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-common-project/hadoop-common.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HADOOP-Build/3278//testReport/
Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/3278//console

This message is automatically generated., Thank you for review, Vinay., I confirmed a latest patch can be applied to the trunk code. Any comments about this JIRA? , Sorry for the delay.  +1, lgtm.  Committing this shortly., SUCCESS: Integrated in Hadoop-trunk-Commit #4836 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/4836/])
HADOOP-10081. Client.setupIOStreams can leak socket resources on exception or error. Contributed by Tsuyoshi OZAWA (jlowe: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1548179)
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java
, Thanks, Tsuyoshi!  And thanks to Vinay for helping with the reviews.  I committed this to trunk, branch-2, branch-2.3, and branch-0.23., Thank you, Jason!, FAILURE: Integrated in Hadoop-Yarn-trunk #413 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk/413/])
HADOOP-10081. Client.setupIOStreams can leak socket resources on exception or error. Contributed by Tsuyoshi OZAWA (jlowe: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1548179)
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java
, FAILURE: Integrated in Hadoop-Hdfs-0.23-Build #812 (See [https://builds.apache.org/job/Hadoop-Hdfs-0.23-Build/812/])
svn merge -c 1548179 FIXES: HADOOP-10081. Client.setupIOStreams can leak socket resources on exception or error. Contributed by Tsuyoshi OZAWA (jlowe: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1548190)
* /hadoop/common/branches/branch-0.23/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/branches/branch-0.23/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java
, FAILURE: Integrated in Hadoop-Mapreduce-trunk #1630 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/1630/])
HADOOP-10081. Client.setupIOStreams can leak socket resources on exception or error. Contributed by Tsuyoshi OZAWA (jlowe: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1548179)
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java
, SUCCESS: Integrated in Hadoop-Hdfs-trunk #1604 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/1604/])
HADOOP-10081. Client.setupIOStreams can leak socket resources on exception or error. Contributed by Tsuyoshi OZAWA (jlowe: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1548179)
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java
]