[In addition to what is mentioned in the description of the issue, I also added a check for ping failures before the task kills itself. The logic in the patch is - if the progress report fails for three times consecutively, then try ping, and if ping too fails for three times, then kill the task. The reason for adding this is, I notice a few 65 deaths each time a large sort is run (500/900 nodes). Most of the time, the deaths happen in the progress reporting getting an exception. This new slightly different behavior will improve that case. It might increase the time before a task discovers a tasktracker is dead but not that significantly. It helps us eliminate the false negatives., IMHO, some of these suggestions are appropriate, while others may not be worth the effort. 

Since Tasks and a TastTracker (TT) run on the same machine, we don't care about network issues. All we need to do is detect if the TaskTracker is dead (or hung) or if it is running, but really really slowly. In the former case, you want to kill the task. In the latter case, you may want to wait a bit to see if the TT speeds up to normal. 

The current logic of sleeping for a bit and trying 3 times before giving up, is good enough to detect whether the TT is dead or just sluggish. If you're worried that we decide too quickly that the TT is dead (when it is not), then we should go ahead and have the progress reporting thread sleep for 3 secs instead of 1 (your first suggestion). If after 3 tries, we still fail connecting to the TT, we should die (we've given the TT 9 seconds; that seems like plenty of time). 

So it makes sense for #1 (set interval to 3 secs) and #3 (always sleep for a bit before trying again). #2 is a valid bug and needs to be fixed. #4 also makes sense, and the idle timeout should at least be a little more than the sleep interval. However, I don't think we need to implement the suggestions in your second comment. Keep the code simple. There's no difference between pinging the TT and sending it a progress report, in order to detect whether the TT is dead. If you're worried that we determine too quickly that the TT is dead, increase the interval from 3 secs to more, or retry more than 3 times, or determine why the TT is so loaded. I would recommend against adding additional code which will essentially do the same thing but in a more complicated manner. 

As far as details go, I'd modify the code of startCommunicationThread() (in Task.java) to be as follows: 

while (1) {
  sleep();
  try {
    call sendProgress() or ping();
  }
  catch() {
    set progressFlag to whatever it was at beginning of try block;
    decrement retry count; quit if we've retried enough
  }
}

Only changes are: 
- move sleep() to the beginning so we always sleep irrespective of whether there was a communication exception or not (your suggestion #3)
- in the catch block, set ProgressFlag to what it was (to fix suggestion #2)

Just my 2 bits. 

, the pseudo-code in my previous comment was not formatted correctly. Here it is again: 

{code}
while (1) {
  sleep();
  try { 
    call sendProgress() or ping(); 
  }
  catch() { 
    set progressFlag to whatever it was at beginning of try block; 
    decrement retry count; quit if we've retried enough 
  }
}
{code}, Thanks Vivek for the comments and thanks for pulling me out of my paranoia *smile* . Thought about the ping check, and I convinced myself that the ping check after the progress report failure might be an overkill. So the new patch implements everything else except that., This patch has some offline comments from Owen incorporated:
1) The InterruptedException causes the progress reporting thread to go away. In the current code base, it is just ignored.
2) The call to defaultConf.addFinalResource in TaskTracker.java has been put back (removing that might have some interesting & not-very-evident implications on the framework's ipc module, and we might break something by removing that ...), +1

http://issues.apache.org/jira/secure/attachment/12362635/1651.2.patch applied and successfully tested against trunk revision r559886.

Test results:   http://lucene.zones.apache.org:8080/hudson/job/Hadoop-Patch/473/testReport/
Console output: http://lucene.zones.apache.org:8080/hudson/job/Hadoop-Patch/473/console, I don't think we need to log the 'Ping thread started' at *info*, no?

Else, +1 for the patch.

Somewhat related gripe: I'd think it might be useful to stop the {{Task}} -> {{TaskTracker}} communication thread on Task completion i.e. at {{Task.done}} ... what do others think? I'm ok with this being done as a part of a separate issue of course., Updated with Arun's comments., +1, I've just committed this. Thanks Devaraj!]