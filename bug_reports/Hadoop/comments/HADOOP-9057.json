[This seems to be another race condition:
{code}
    ms.register("sink1", "sink1 desc", sink1);
    ms.register("sink2", "sink2 desc", sink2);
    ms.register("sink3", "sink3 desc", sink3);     <----- ms.register() will kick off a new MetricsSinkAdapter thread and there is no guarantee that this thread will start on time for onTimerEvent
    ms.onTimerEvent();  // trigger something interesting
{code}

To consistently repro the problem add a small sleep to MetricsSinkAdapter, thread#run. For example:

{code}
    sinkThread = new Thread() {
      @Override public void run() {
        try {
			Thread.sleep(10);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
        publishMetricsFromQueue();
      }
    };
{code}, Attaching a proposal for a fix. It's not an ideal fix but it does mitigate the problem., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12553872/HADOOP-9057.branch-1-win.metricsrace.patch
  against trunk revision .

    {color:red}-1 patch{color}.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/1767//console

This message is automatically generated., HDFS-3636 reports the same issue. One of the two should be resolved as duplicate., Instead of sleeping for a second, would the timeout() method from mockito help?

{{verify(sink1, timeout(1000).times(2)).putMetrics(r1.capture());}}
, Thanks Mostafa for the comment. If we don't want to change the semantic of the test, we will want to sleep before MetricsSink#stop, otherwise, the event might be lost. Both approaches boil down to the same outcome though, we end up sleeping for a while., Ah good point about needing to do it before the close. Would something like this work?

{{
try {
  verify(sink1, timeout(1000).times(2)).putMetrics(r1.capture());
} finally {
  ms.close();
}
}}

The reason I'm pushing for timeout() instead of straight-up sleep() is that timeout() is smart enough to finish early (it will wake up when it gets the required two calls), whereas with the sleep() approach we unnecessarily waste a second in this one test. A second may not seem like much, but it adds up in thousands of tests.

Another approach is to use latches in the sinks, but that seems too involved for no reason. Anyway, my votes/comments here are non-binding - just my 2 cents., Mostafa: the timeout in mockito verify is a good idea. If you can provide trunk patch and branch-1 patches, I'll commit them., The timeout in mockito verify is a great idea. It actually verify the callback before we call the stop function. 

But I think that we may need add another test case to verify the stop(). I think that the purpose of this stop()  is when I call this function, all the sink threads should stop no matter they are idle or they are doing something. 

And actually the test is fail, on the other side, it proved that our stop function is actually worked correctly. When we call the stop, everything is stopped no matter what they are doing right now. Based on that, I runned this test several times, I found that sometimes it will be successful, sometimes half rigth half wrong, sometimes all fails.
That is why orignally we try to add Thread.sleep() and try to buy some times for the sink threads to consume all the items in queue.

Maybe you can take a look at the HADOOP-8981, this is the duplication issue. I uploaded patches verion 3, including the test case that using the mockito timeout and another test case to verify stop function. , Thanks Xuan for posting the patch. I will take a look on the other Jira. Will resolve this one as a duplicate and we can backport from the other one., Duplicate of HADOOP-8981.]