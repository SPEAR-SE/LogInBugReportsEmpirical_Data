[Unfortunately the order of loading is not always consistent.  Just look at the bug I just did HDFS-3012.  Because we us static blocks to load the resources those static blocks are executed when the class file that contains them is loaded.  The order that class files are loaded is based off of when java decided to load the file, and because java currently does lazy loading it tends to only load them when code inside that class file is actually going to be executed for the first time.  Because core-default.xml and core-site.xml are part of the Configuration class they are always going to be the first to load.  But there is no guarantee the order that others will come in, or even if they will be loaded, which is the problem that showed up in HDFS-3012.

Because the ordering cannot really be controlled when using static blocks to load the configuration the only way to really do (1) is to give each file some sort of a globally universal priority.  Who wins when a configuration value is in hdfs-site.xml and also in mapred-site.xml?  We have that problem now, but because we tend to support more of (2) by convention instead of having the enforcement it is not really as much of a concern as if we officially support (1).  I personally would prefer to see option (2) as it is closer to what we do now, but I am not sure what the proper way is to implement it., Never leave the *-default.xml files in conf/ in modern versions of Hadoop.  Bad Things(tm) always seem to happen.

Lately I've been debating actually just having blank versions of hdfs-site.xml and mapred-site.xml and merging everything back into core-site.xml like the olden days.  It isn't of much practical use to have different versions of these files. Plus as we look towards doing an (internal) rewrite of the startup scripts to autogen the config information, it removes the decision making around which file is supposed to get which config., The order of loading wrt. mapred vs. hdfs vs. core is not something that can easily be made consistent. However default vs. site looks like it should be fairly straightforward. The full set of files gets re-loaded whenever a configuration file gets added to the list so it would be straightforward to make sure that the default ones are loaded first. This could be done based on the file names, based on whether they are in the jar files or the file system, or more properly by having the callers of Configuration.addDefaultResource say whether the resource is a default or not.
, Clarification based on Allen's comment: in my case, the -default.xml files were not in the conf directories, they were the ones from the jar files. I should have said -default.xml resources.
, Why are we using the static blocks to load these resources. Shouldn't the configuration classes constructor explicitly load all of the config files: core, hdfs, mapred, etc? ]