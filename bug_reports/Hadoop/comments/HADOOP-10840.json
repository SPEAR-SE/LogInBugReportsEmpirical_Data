[Patch attached. 

This patch added a finalize() method to NativeAzureFileSystem to force a call to close() which calls unregisterSoruce() on the metrics system impl. Note that close() can be called multiple times without negative impact so that in the future when we introduce close() to FileContext to let client manually call close() there shall be no changes in this area. I also removed registration code to DefaultMetricsSystem because we only need to register with one metrics system implementation which is AzureFileSystemMetricsSystem.

, [~cnauroth] Could you please review this patch? Thx!, Hi, [~shanyu].  I'm seeing some test failures when I run the tests under hadoop-tools/hadoop-azure.  Could you please investigate?  Here is a stack trace from one example:

{code}
Running org.apache.hadoop.fs.azure.TestNativeAzureFileSystemFileNameCheck
Tests run: 4, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 0.871 sec <<< FAILURE! - in org.apache.hadoop.fs.azure.TestNativeAzureFileSystemFileNameCheck
testMkdirs(org.apache.hadoop.fs.azure.TestNativeAzureFileSystemFileNameCheck)  Time elapsed: 0.04 sec  <<< ERROR!
java.lang.NullPointerException: null
	at org.apache.hadoop.fs.azure.metrics.AzureFileSystemMetricsSystem.unregisterSource(AzureFileSystemMetricsSystem.java:65)
	at org.apache.hadoop.fs.azure.NativeAzureFileSystem.close(NativeAzureFileSystem.java:1352)
	at org.apache.hadoop.fs.azure.AzureBlobStorageTestAccount.cleanup(AzureBlobStorageTestAccount.java:745)
	at org.apache.hadoop.fs.azure.TestNativeAzureFileSystemFileNameCheck.tearDown(TestNativeAzureFileSystemFileNameCheck.java:55)
{code}
, [~cnauroth] thanks for the findings. I couldn't reproduce the specific failure you posted, but I think it is caused by NativeAzureFileSystem.close() being called multiple times. I verified that NativeAzureFileSystemStore.close() can be called multiple times, but not NativeAzureFileSystem. And for this class, since the metrics system keeps a reference counting, we cannot call its close() multiple times, so I introduced Boolean isClosed to prevent it from being called multiple times. I added a new test case to call NativeAzureFileSystem.close() twice to verify this scenario.

New patch attached., {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12656152/HADOOP-10840.1.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-tools/hadoop-azure.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HADOOP-Build/4297//testReport/
Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/4297//console

This message is automatically generated., [~shanyu], nice find.  I think your theory was correct.  The last patch mostly fixed things, but I still see a few test failures.  With an Azure storage key configured for testing against the live service, I get a failure in {{TestAzureConcurrentOutOfBandIo}}:

{code}
Running org.apache.hadoop.fs.azure.TestAzureConcurrentOutOfBandIo
Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 0.81 sec <<< FAILURE! - in org.apache.hadoop.fs.azure.TestAzureConcurrentOutOfBandIo
testReadOOBWrites(org.apache.hadoop.fs.azure.TestAzureConcurrentOutOfBandIo)  Time elapsed: 0.765 sec  <<< ERROR!
org.apache.hadoop.metrics2.MetricsException: Metrics source AzureFileSystemMetrics already exists!
	at org.apache.hadoop.metrics2.lib.DefaultMetricsSystem.newSourceName(DefaultMetricsSystem.java:143)
	at org.apache.hadoop.metrics2.lib.DefaultMetricsSystem.sourceName(DefaultMetricsSystem.java:120)
	at org.apache.hadoop.metrics2.impl.MetricsSystemImpl.register(MetricsSystemImpl.java:218)
	at org.apache.hadoop.fs.azure.metrics.AzureFileSystemMetricsSystem.registerSource(AzureFileSystemMetricsSystem.java:58)
	at org.apache.hadoop.fs.azure.AzureBlobStorageTestAccount.createOutOfBandStore(AzureBlobStorageTestAccount.java:331)
	at org.apache.hadoop.fs.azure.TestAzureConcurrentOutOfBandIo.setUp(TestAzureConcurrentOutOfBandIo.java:51)
{code}

I tested on both Mac and Windows.  On the Windows VM only, I also get failures in {{TestRollingWindowAverage}} and {{TestNativeAzureFileSystemMocked}}:

{code}
Tests run: 1, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.149 sec <<< FAILURE! - in org.apache.hadoop.fs.azure.metrics.TestRollingWindowAverage
testBasicFunctionality(org.apache.hadoop.fs.azure.metrics.TestRollingWindowAverage)  Time elapsed: 0.112 sec  <<< FAILURE!
java.lang.AssertionError: expected:<15> but was:<10>
        at org.junit.Assert.fail(Assert.java:88)
        at org.junit.Assert.failNotEquals(Assert.java:743)
        at org.junit.Assert.assertEquals(Assert.java:118)
        at org.junit.Assert.assertEquals(Assert.java:555)
        at org.junit.Assert.assertEquals(Assert.java:542)
        at org.apache.hadoop.fs.azure.metrics.TestRollingWindowAverage.testBasicFunctionality(TestRollingWindowAverage.java:38)
{code}

{code}
Tests run: 27, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 4.431 sec <<< FAILURE! - in org.apache.hadoop.fs.azure.TestNativeAzureFileSystemMocked
testFolderLastModifiedTime(org.apache.hadoop.fs.azure.TestNativeAzureFileSystemMocked)  Time elapsed: 3.24 sec  <<< FAILURE!
java.lang.AssertionError: null
        at org.junit.Assert.fail(Assert.java:86)
        at org.junit.Assert.assertTrue(Assert.java:41)
        at org.junit.Assert.assertFalse(Assert.java:64)
        at org.junit.Assert.assertFalse(Assert.java:74)
        at org.apache.hadoop.fs.azure.NativeAzureFileSystemBaseTest.testFolderLastModifiedTime(NativeAzureFileSystemBaseTest.java:479)
{code}

Can you explain why the following code was removed from {{AzureFileSystemMetricsSystem#fileSystemClosed}}?  My understanding is that this code is important to guarantee timely publishing of metrics for an instance when it gets closed.  I expect your new checks against double close are also sufficient to protect against extraneous publishing of metrics.

{code}
-    if (instance != null) {
-      instance.publishMetricsNow();
-    }
{code}
, Hi [~cnauroth], sorry I missed the live test scenarios which I have to manually configure a storage account. The problem with TestAzureConcurrentOutOfBandIo is I removed the registration code with DefaultFileSystem in production code but not the unit test files. I fixed that in the new patch (v2).

Regarding the two windows test failure, looks like they are not related to my changes. It has something to do with system clock. Do they always fail or just transient? I cannot reproduce in my Ubuntu box. Let me try it on Windows box.

I removed the publishMetricsNow() from fileSystemClosed() because I moved it to unregisterSource(). The expectation is the caller calls unregisterSource() before calling fileSystemClosed() which will push the last metrics out. To prevent confusion when someone doesn't call unregisterSource() but just call fileSystemClosed() I just added publishMetricsNow() to fileSystemClosed() under the condition that "numFileSystems==1", this way before we are going to shutdown the metrics system, we'll do another "safety" push, usually at this point the metrics sources should be empty.

, {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12656178/HADOOP-10840.2.patch
  against trunk revision .

    {color:red}-1 patch{color}.  Trunk compilation may be broken.

Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/4298//console

This message is automatically generated., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12656201/HADOOP-10840.2.patch
  against trunk revision .

    {color:red}-1 patch{color}.  Trunk compilation may be broken.

Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/4299//console

This message is automatically generated., Trunk compilation is broken since commit of YARN-2219.  I've posted a comment on that issue asking for a quick fix or rollback.

Otherwise, all of the explanations make sense.  Thanks!  I agree that some of the tests are too sensitive to timing right now.  This is unrelated to your patch, and we can address it separately.

+1 for the patch, pending Jenkins run., {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12656201/HADOOP-10840.2.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 2 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-tools/hadoop-azure.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HADOOP-Build/4300//testReport/
Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/4300//console

This message is automatically generated., I committed this to trunk. I'm keeping the issue open for now until we merge to branch-2.
, FAILURE: Integrated in Hadoop-trunk-Commit #5898 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/5898/])
HADOOP-10840. Fix OutOfMemoryError caused by metrics system in Azure File System. Contributed by Shanyu Zhao. (cnauroth: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1611247)
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/NativeAzureFileSystem.java
* /hadoop/common/trunk/hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/metrics/AzureFileSystemMetricsSystem.java
* /hadoop/common/trunk/hadoop-tools/hadoop-azure/src/test/java/org/apache/hadoop/fs/azure/AzureBlobStorageTestAccount.java
* /hadoop/common/trunk/hadoop-tools/hadoop-azure/src/test/java/org/apache/hadoop/fs/azure/NativeAzureFileSystemBaseTest.java
, Thanks [~cnauroth]!, FAILURE: Integrated in Hadoop-Yarn-trunk #615 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk/615/])
HADOOP-10840. Fix OutOfMemoryError caused by metrics system in Azure File System. Contributed by Shanyu Zhao. (cnauroth: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1611247)
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/NativeAzureFileSystem.java
* /hadoop/common/trunk/hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/metrics/AzureFileSystemMetricsSystem.java
* /hadoop/common/trunk/hadoop-tools/hadoop-azure/src/test/java/org/apache/hadoop/fs/azure/AzureBlobStorageTestAccount.java
* /hadoop/common/trunk/hadoop-tools/hadoop-azure/src/test/java/org/apache/hadoop/fs/azure/NativeAzureFileSystemBaseTest.java
, FAILURE: Integrated in Hadoop-Mapreduce-trunk #1834 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/1834/])
HADOOP-10840. Fix OutOfMemoryError caused by metrics system in Azure File System. Contributed by Shanyu Zhao. (cnauroth: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1611247)
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/NativeAzureFileSystem.java
* /hadoop/common/trunk/hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/metrics/AzureFileSystemMetricsSystem.java
* /hadoop/common/trunk/hadoop-tools/hadoop-azure/src/test/java/org/apache/hadoop/fs/azure/AzureBlobStorageTestAccount.java
* /hadoop/common/trunk/hadoop-tools/hadoop-azure/src/test/java/org/apache/hadoop/fs/azure/NativeAzureFileSystemBaseTest.java
, FAILURE: Integrated in Hadoop-Hdfs-trunk #1807 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/1807/])
HADOOP-10840. Fix OutOfMemoryError caused by metrics system in Azure File System. Contributed by Shanyu Zhao. (cnauroth: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1611247)
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/NativeAzureFileSystem.java
* /hadoop/common/trunk/hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/metrics/AzureFileSystemMetricsSystem.java
* /hadoop/common/trunk/hadoop-tools/hadoop-azure/src/test/java/org/apache/hadoop/fs/azure/AzureBlobStorageTestAccount.java
* /hadoop/common/trunk/hadoop-tools/hadoop-azure/src/test/java/org/apache/hadoop/fs/azure/NativeAzureFileSystemBaseTest.java
]