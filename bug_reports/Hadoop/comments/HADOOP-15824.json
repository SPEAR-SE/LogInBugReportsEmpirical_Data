[Likely cause then, parent is null. If you are seeing this repeatedly, then can you have a go at debugging it, ideally with a breakpoint in {{RawLocalFileSystem.getInitialWorkingDirectory()}}. 

I can't see any obvious codepath where a null pointer would get it; the parent path being passed in is from the system property user.dir:  {{this.makeQualified(new Path(System.getProperty("user.dir")));}}, and that Path(String) constructor's checks should have failed fast at this point.

We could add a Preconditions.checkArgument to the constructor where the stack trace arises, but that's not going to fix the underlying problem. 
, it should caused by sbt dist, looks the right FileSystem implements exclude from sbt dist. because the same error not happened in develop mode while it throws at production mode which run sbt dist., that's a good start; like I said: anything you can do to help trace it down is good. I wonder if the system property is being set to something unparseable or null.

anyway, like I've said: you are the only person in a position to track down the root cause; we'll do our best to work out a fix once we get a better idea of what's going on. , For me, the workaround is run the app under target/universal folder after sbt dist. i will trace more about the dependency issue., The problem is property user.dir is not absolute like it must be.  The property has been smashed in the user's environment with an invalid value.

Now for the subtle and silly bug.  The working directory is defined by {{getInitialWorkingDirectory}} which is qualifying the user.dir path against {{getWorkingDirectory()}}.  Which obvious isn't set yet and is null..., bq. The working directory is defined by getInitialWorkingDirectory which is qualifying the user.dir path against getWorkingDirectory().  Which obvious isn't set yet and is null...

oh, that's funny

prebumably sbt is doing something about test process setup which it shouldn't]