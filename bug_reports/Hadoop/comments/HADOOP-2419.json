[This is a sample MR job that mimics what nutch's Fetcher2 does with threads and queuing url's to be fetched.  It takes 2 arguments on the command line, an input path and an output path.  All it does it reads a TextInputFormat, queues it up for threads to then write it back out as it came in.  The sample run I just did came back with the following exception.  Reverting HADOOP-1965 allows the job to finish without error.

java.lang.ArrayIndexOutOfBoundsException
	at java.lang.System.arraycopy(Native Method)
	at org.apache.hadoop.mapred.MergeSorter.sort(MergeSorter.java:45)
	at org.apache.hadoop.mapred.MapTask$MapOutputBuffer.sortAndSpillToDisk(MapTask.java:446)
	at org.apache.hadoop.mapred.MapTask$MapOutputBuffer.flush(MapTask.java:690)
	at org.apache.hadoop.mapred.MapTask.run(MapTask.java:193)
	at org.apache.hadoop.mapred.TaskTracker$Child.main(TaskTracker.java:2016)

java.lang.ArrayIndexOutOfBoundsException: 6
	at org.apache.hadoop.mapred.BasicTypeSorterBase.compare(BasicTypeSorterBase.java:133)
	at org.apache.hadoop.mapred.MergeSorter.compare(MergeSorter.java:59)
	at org.apache.hadoop.mapred.MergeSorter.compare(MergeSorter.java:35)
	at org.apache.hadoop.util.MergeSort.mergeSort(MergeSort.java:46)
	at org.apache.hadoop.util.MergeSort.mergeSort(MergeSort.java:56)
	at org.apache.hadoop.mapred.MergeSorter.sort(MergeSorter.java:46)
	at org.apache.hadoop.mapred.MapTask$MapOutputBuffer.sortAndSpillToDisk(MapTask.java:446)
	at org.apache.hadoop.mapred.MapTask$MapOutputBuffer.flush(MapTask.java:690)
	at org.apache.hadoop.mapred.MapTask.run(MapTask.java:193)
	at org.apache.hadoop.mapred.TaskTracker$Child.main(TaskTracker.java:2016)
, Here is an HTML of a fetching job that failed.  Interesting results., I just reverted HADOOP-1965., Integrated in Hadoop-Nightly #333 (See [http://lucene.zones.apache.org:8080/hudson/job/Hadoop-Nightly/333/]), Plz refer HADOOP-1965 for further details and discussions., Plz check the new patch [https://issues.apache.org/jira/secure/attachment/12371797/HADOOP-2419.patch]. Earlier the  calls to {{MapTask.Collect()}} were not thread-safe. Now the call to {{Collect()}} is made thread-safe. Let us know if this patch works fine., Amar, does HADOOP-2419.patch cover the same case as MapRunnableTest.java attached to this Jira?  If not, it would be good to incorporate the case covered by MapRunnableTest.java., The guess is that {{MapRunnableTest.java{}} assumes that {{MapTask.collect()}} is thread-safe. Which the earlier patch did not provide. So the change makes the call thread-safe. , Submitted a patch with added test for the *thread-safe* property. See HADOOP-1965, HADOOP-1965 got committed. Kindly check with the trunk and let us know., Assuming that concurrent access to {{MapTask.collect()}} was the cause (which is now fixed in HADOOP-1965), resolving the issue.]