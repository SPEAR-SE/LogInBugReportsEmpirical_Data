[The static method is required to avoid umask, as is sometimes required, yet still have mkdirs implement POSIX conventions.  So calling mkdirs(path, permissions) won't do what's desired here, will it?

I don't see the exception in your stack trace.  How does it fail?
, The non-static FileSystem.mkdirs(Path f, FsPermission permission) and the static FileSystem.mkdirs(FileSystem fs, Path dir, FsPermission permission) look similar but they are different in semantic:
- The non-static FileSystem.mkdirs(Path f, FsPermission permission) likes mkdir in Unix, it makes a directory with *umask*.
- However, the static FileSystem.mkdirs(FileSystem fs, Path dir, FsPermission permission) makes a directory with *absolute permission*.

So I think it is better to change one of the method name (probably the static one), otherwise, it would be confusing., Is there a reason you don't just jettison the static one and  use mkdir() followed by a chmod() like  UNIX?  The static one will break setuid/setgid if/when it is supported., > jettison the static one and use mkdir() followed by a chmod() like UNIX?

That's exactly what the static implementation does.  It's just a utility that saves applications a few lines of code.
]