[Digging around some more, I found that this is the call stack that creates the threads.

        at org.apache.hadoop.metrics.spi.AbstractMetricsContext.startTimer(AbstractMetricsContext.java:239)
        at org.apache.hadoop.metrics.spi.AbstractMetricsContext.startMonitoring(AbstractMetricsContext.java:153)
        at org.apache.hadoop.metrics.file.FileContext.startMonitoring(FileContext.java:105)
        at org.apache.hadoop.metrics.Metrics.createRecord(Metrics.java:60)
        at org.apache.hadoop.mapred.ReduceTask$ReduceTaskMetrics.<init>(ReduceTask.java:53)
        at org.apache.hadoop.mapred.ReduceTask.<init>(ReduceTask.java:87)
        at org.apache.hadoop.mapred.TaskInProgress.getTaskToRun(TaskInProgress.java:527)
        at org.apache.hadoop.mapred.JobInProgress.obtainNewReduceTask(JobInProgress.java:359)
        at org.apache.hadoop.mapred.JobTracker.getNewTaskForTaskTracker(JobTracker.java:1200)
        at org.apache.hadoop.mapred.JobTracker.heartbeat(JobTracker.java:992)
        at sun.reflect.GeneratedMethodAccessor5.invoke(Unknown Source)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
        at java.lang.reflect.Method.invoke(Method.java:585)
        at org.apache.hadoop.ipc.RPC$Server.call(RPC.java:337)
        at org.apache.hadoop.ipc.Server$Handler.run(Server.java:538)
, It looks like every task that gets created calls org.apache.hadoop.metrics.Metrics.createRecord.  This method calls ContextFactory.getFactory().getContext(contextName). 

ContextFactory.getContext creates a new instance of the configured context class (FileContext in my case, but NullContext by default).  I believe this should be a singleton per contextName string.  ContextFactory should store a hash table from contextName to context class.

As a side note, implementing the above should also help with the JobTracker memory footprint as 1 less object will be created per task., Attached a patch for review.  I'll run some tests with this patch tonight., +1 
Reviewed. , I just committed this.  Thanks, Nigel!]