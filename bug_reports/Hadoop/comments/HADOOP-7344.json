[I fall into this issue, and my (ugly) workaround is the following : 

Create a public class in the package {{org.apache.hadoop.fs}} to be able to access the package restricted class {{GlobExpander}}

{noformat}
package org.apache.hadoop.fs;

public class PublicGlobExpander extends GlobExpander {
}
{noformat}

And have a {{FileSystemHelper}} class that contains at least the following function (basically expanding the path and calling {{FS.globStatus}} on every components found) : 

{noformat}
    public static FileStatus[] globStatus(FileSystem fs, final Path pathPattern) throws IOException {

        final String filename = pathPattern.toUri().getPath();

        final List<String> filePatterns = PublicGlobExpander.expand(filename);

        final List<FileStatus> statuses = new LinkedList<FileStatus>();

        for (final String filePattern : filePatterns) {
            final FileStatus[] tmpStatuses = fs.globStatus(new Path(filePattern));
            if (tmpStatuses == null) {
                continue;
            }
            for (final FileStatus status : tmpStatuses) {
                statuses.add(status);
            }
        }
        return statuses.toArray(new FileStatus[statuses.size()]);
    }
{noformat}

Really looking forward to see the a {{if (files == null) continue;}} at line 1277 !, This was fixed by the globber rework in HADOOP-9817.

{code}
cmccabe@keter:~/hadoop4> /h/bin/hadoop fs -mkdir -p /a/b/c
cmccabe@keter:~/hadoop4> /h/bin/hadoop fs -ls '/{a,a/b}'
Found 1 items
drwxr-xr-x   - cmccabe supergroup          0 2013-09-20 15:20 /a/b
Found 1 items
drwxr-xr-x   - cmccabe supergroup          0 2013-09-20 15:20 /a/b/c
{code}]