[This does not appear to hamper normal DFS operation in any way. Looks like the Block constructor is registered as a writable factory but is not public. Does it need to be? Should Block objects ever be constructed this way?

This needs further investigation, making the constructor public just addresses the symptom, not the problem IMO. Need to figure out what part of the code is trying to create blocks through a writable factory, and should it be doing that or something different?

, I think this has been fixed, no?

The problem is that, when we modified Hadoop to use a classloader the writable factory stuff partially broke.  In particular, one can now obtain a reference to a Class instance when the static initializers of that class have not yet been run.  In particular, the RPC code calls something like 'WritableFactories.newInstance(ClassLoader.findClass("foo.bar.Baz")), and foo.bar.Baz's static initializer, which registers the writable factory, has not yet run, and the call to newInstance fails as above.  The work-around we've been using thus far is to, in the RPC client code, add a 'static { new Baz(); }' to force the static initializers of Baz to run.  Long-term we should find a better solution.

We'd like to be able to pass objects in RPCs that are not public classes.  This means that the RPC code needs to be able to construct an instance.  The WritableFactory mechanism was created to solve this, but, as described above, it mysteriously broke when we stopped using the bootstrap classloader., This is a general problem with new tools breaking because they get passed back objects back from RPC that haven't been loaded by the application., The exception occurs when we restart dfs after the namenode is reformated. The namenode starts as an empty file system so the Block class is loaded. When the name node receives block reports containing blocks from the previous file system, it throws the exception.

To avoid this, we can either make the Block class public or explicitly load the class in NameNode., I just committed this.  Thanks!]