[| (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue}  0m 21s{color} | {color:blue} Docker mode activated. {color} |
|| || || || {color:brown} Prechecks {color} ||
| {color:green}+1{color} | {color:green} @author {color} | {color:green}  0m  0s{color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:red}-1{color} | {color:red} test4tests {color} | {color:red}  0m  0s{color} | {color:red} The patch doesn't appear to include any new or modified tests. Please justify why no new tests are needed for this patch. Also please list what manual steps were performed to verify this patch. {color} |
|| || || || {color:brown} trunk Compile Tests {color} ||
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 21m 15s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 17m 10s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  1m  0s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  1m 13s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} shadedclient {color} | {color:green} 14m 25s{color} | {color:green} branch has no errors when building and testing our client artifacts. {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  1m 44s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  1m  4s{color} | {color:green} trunk passed {color} |
|| || || || {color:brown} Patch Compile Tests {color} ||
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green}  0m 56s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 16m 34s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green} 16m 34s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  0m 59s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  1m 10s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green}  0m  0s{color} | {color:green} The patch has no whitespace issues. {color} |
| {color:green}+1{color} | {color:green} shadedclient {color} | {color:green} 12m 17s{color} | {color:green} patch has no errors when building and testing our client artifacts. {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  1m 47s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  1m  6s{color} | {color:green} the patch passed {color} |
|| || || || {color:brown} Other Tests {color} ||
| {color:green}+1{color} | {color:green} unit {color} | {color:green}  9m 15s{color} | {color:green} hadoop-common in the patch passed. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green}  0m 40s{color} | {color:green} The patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black}102m 50s{color} | {color:black} {color} |
\\
\\
|| Subsystem || Report/Notes ||
| Docker | Client=17.05.0-ce Server=17.05.0-ce Image:yetus/hadoop:8f97d6f |
| JIRA Issue | HADOOP-15901 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12946889/HADOOP-15901-01.patch |
| Optional Tests |  dupname  asflicense  compile  javac  javadoc  mvninstall  mvnsite  unit  shadedclient  findbugs  checkstyle  |
| uname | Linux 8d7ea56ee5f1 3.13.0-144-generic #193-Ubuntu SMP Thu Mar 15 17:03:53 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | /testptch/patchprocess/precommit/personality/provided.sh |
| git revision | trunk / 15df2e7 |
| maven | version: Apache Maven 3.3.9 |
| Default Java | 1.8.0_181 |
| findbugs | v3.1.0-RC1 |
|  Test Results | https://builds.apache.org/job/PreCommit-HADOOP-Build/15465/testReport/ |
| Max. process+thread count | 1538 (vs. ulimit of 10000) |
| modules | C: hadoop-common-project/hadoop-common U: hadoop-common-project/hadoop-common |
| Console output | https://builds.apache.org/job/PreCommit-HADOOP-Build/15465/console |
| Powered by | Apache Yetus 0.8.0   http://yetus.apache.org |


This message was automatically generated.

, -1

I used to think MonotonicNow was good, but now I don't. 

h3. Monotonic now is not guaranteed to be consistent across cores in a single socket, absolutely not consistent across sockets

It is only safe to use in certain situations
* you are doing micro benchmarks where you can take averages of many runs discard outliers
* you want a very low cost time value for diagnostics and testing & can cope with inconsistency, and you are confident the probability of a thread being suspended and rescheduled is 0
* you are running code where you have used CPU affinity calls to bind a thread to a specific core, and you are confident that you are not running in a VM, where the host OS can remap virtual to physical cores as it chooses.

Given IPC blocks for network requests, I'm not sure it matches any of these.

Further reading: 
http://steveloughran.blogspot.com/2015/09/time-on-multi-core-multi-socket-servers.html



, That is depressing to learn., Thanks [~stevel@apache.org] for the pointers.

Yes! its depressing to see this. Previously I me only changed usage of {{Time.now()}} to {{Time.monotonicNow()}}  in many places. Should I go back now?

JDK guys says in this [JDKBug|https://bugs.java.com/bugdatabase/view_bug.do?bug_id=6458294] that monotocity of {{System.nanoTime()}} implementation depends on underlying platform. If the underlying platform supports MONOTONIC_CLOCK then {{System.nanoTime()}} should be monotonic, otherwise results will be same as {{System.currentTimeMillis()}}.

Many blogs pointed out problem in {{Windows XP with SP2}} due to TSC counter (core wise counter). SP3 onwards, power management timer (pmtimer) was enabled, which solved this problem.

Even though with problematic {{System.nanoTime()}}, one of the answers it was mentioned that difference can be ~ +/- 3ms.

But with {{System.currentTimeMillis()}} this could be even minutes when NTP is running. This could lead to serious miscalculations.

This [blog|http://btorpey.github.io/blog/2014/02/18/clock-sources-in-linux/] was really informative.

So what we should do? Remove all usages of {{System.nanoTime()}} in Hadoop?, bq. This blog was really informative.

doesn't look at the issue of multisocket systems whose return value of RDTSCP is inconsistent across sockets, even though it is (now( consistent across cores in a single socket.

bq. So what we should do? Remove all usages of System.nanoTime() in Hadoop?

don't know. 

big issue with time is in VMs where the clock can suddenly jump forwards (sometimes even backwards), far more frequently than you see with NTP —the latter can be set to slowly sync up at a rate less likely to break things (though again, its clock can go backwards.


Thoughts:

* if any clock goes backwards, we are in trouble, especially in any code which uses the diff and assumes its always positive.
* if a clock leaps forward through a NTP change, that's a spurious failure. Proposed: people set clock correction rate to be low
* if a clock leaps forward through a VM suspent/resume, then it may be that wall time has suddenly moved. things should (correctly) time out here
* I don't think we can rely on nanotime being consistent, but like you say, currentTimeMillis isn't monotonic either


]