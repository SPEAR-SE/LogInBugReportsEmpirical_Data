[Attached the patch. 
Unit Tests – Existing unit tests should validate this change. So no new unit tests are required., Most of the HIVE unit tests are failing on windows because of this resource leak., If I understand this right, Hive tries to create this object to validate file format and the creation fails often enough for a lot of tests to fail because of this issue. Isn't there a better way to validate the file format.

Back to this, are you sure about calling close() on a partially constructed object?

You are checking for in!=null but there is no explicit initialization of in to null to inform programmers about this dependency. Java default initializes in to null and so this works., Thanks Bikas.
I see it as two issues –

1)	Resource leak – which I am addressing here. (It is better to fix this irrespective of HIVE usage)
2)	Hive improvement – I am investigating to find an alternative to validate the file format without creating Sequence File object. 

< are you sure about calling close() on a partially constructed object>

    I thought of closing the file handle in Init method before throwing exception(s) from various places in the Init method,  but feel like a lot of redundant code. Close function has right protection to handle the partially constructed resources so it is safe to call the close directly from the constructor.

<in !=null>
    We have OpenFile function call in the constructor and it can throw IOException so when we call the close method from constructor it will attempt to close (in.close()) on null object.  
, I meant that it would be good to add an explicit in == null initializer to make it clear that we are depending on that because we are not checking in!=null before in.close()., Thanks Bikas. Attached the new patch with explicit null initializer change., Kanna, the patch looks good. A test case would be useful to ensure we don't regress in the future.

Also, pls mark the patch as 'Patch Available' when you think it's ready so I can track them. Thanks!, Attached the patch with unit test, Thanks Arun. Added the unit test to catch the regressions.

Note: I didn’t find an efficient way to unit test the file resource leaks on UNIX platform.
 , -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12531855/HADOOP-8486-branch-1-win-%283%29.patch
  against trunk revision .

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 1 new or modified test files.

    -1 patch.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/1113//console

This message is automatically generated., Test looks good! Thanks!, Ran patch through dos2unix, Committed to Hadoop-1 windows branch.
Thanks Kanna., This has caused build failure because Path.getUriPath is no longer available.
    [javac] c:\Users\bikas\Code\hdp\src\test\org\apache\hadoop\io\TestSequenceFile.java:59: cannot find symbol
    [javac] symbol  : method getUriPath()
    [javac] location: class org.apache.hadoop.fs.Path
    [javac]     File f = new File(nonSeqFile.getUriPath());, Attached the fix for build failure., lgtm. thanks for the quick fix., This patch also directly applies to trunk - can you please provide a trunk patch., @Sanjay - Trunk has a fix for it already with lot of other code changes so we may not require a patch for it. Please let me know if you see I am missing something. Thanks]