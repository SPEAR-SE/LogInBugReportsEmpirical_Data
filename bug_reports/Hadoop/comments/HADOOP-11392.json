[{color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12686633/HADOOP-11392.patch
  against trunk revision 8e9a266.

    {color:red}-1 patch{color}.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/5241//console

This message is automatically generated., Hi [~brahmareddy],

Thanks for finding the issue here and good catch of yours!

I have a few comments on the patch:
*  I saw there are two places that have the same issue in the same file, can we address them altogether?
*  Need to check whether a stream is null before calling IOUtils.closeStream. Instead of adding the check here, I think we can fix 
{{public static void cleanup(Log log, java.io.Closeable... closeables) {}} by adding a check in the beginning.
*  Format nit, put line 446-448 to the same line
{code}
446	      }
447	       finally
448	      {
449	          IOUtils.closeStream(out);
450	          IOUtils.closeStream(in);
451	      }
{code}
Thanks.
, Another one, the indentation should be 2 spaces at line 449-450.
, I don't think there is really a problem.  In the example in the description, the fourth argument to {{IOUtils#copyBytes}} is {{true}}.  This tells {{IOUtils#copyBytes}} to close the streams automatically.  This happens whether the copy is successful or not.

{code}
  /**
   * Copies from one stream to another.
   *
   * @param in InputStrem to read from
   * @param out OutputStream to write to
   * @param buffSize the size of the buffer 
   * @param close whether or not close the InputStream and 
   * OutputStream at the end. The streams are closed in the finally clause.  
   */
  public static void copyBytes(InputStream in, OutputStream out, int buffSize, boolean close) 
    throws IOException {
    try {
      copyBytes(in, out, buffSize);
      if(close) {
        out.close();
        out = null;
        in.close();
        in = null;
      }
    } finally {
      if(close) {
        closeStream(out);
        closeStream(in);
      }
    }
  }
{code}

There is one other point in {{FileUtil}} that passes {{false}} for the fourth parameter, but this one takes care of closing streams by itself in {{finally}} blocks., Hi @Yongjun Zhang
Thanks for taking look into this issue..

Hi [~cnauroth],
Yes, you are correct,Streams will be closed automatically as  *close=true* ..Thanks for pointing same..One more call is there where  *close=false* ,here I want close streams using Closeable..Please let me know your thoughts..
{code}
 try {
            IOUtils.copyBytes(in, out, conf, false);
            if (addString!=null)
              out.write(addString.getBytes("UTF-8"));
                
          } finally {
            in.close();
          } 
        }
      }
    } finally {
      out.close();
    }
{code}

want to fix like following..

{code}
 } finally {
           IOUtils.closeStream(in);
          } 
        }
      }
    } finally {
      IOUtils.closeStream(out);
    }
{code}, Thanks [~cnauroth], after looking closer at {{IOUtils.copyBytes(in, out, conf, true);}}, I think you are right. There is actually no functionality problem. I was a bit confused earlier because I didn't expect {{IOUtils.copyBytes(in, out, conf);}} would close the streams. 

I think having open/close of stream at the same piece of code would be more clear:
{code}
      InputStream in = null;
      try {
        in = new FileInputStream(src);
        // do stuff with in
      } catch (IOException e) {
        throw e;
      } finally {
        IOUtils.closeStream(in);
     }
{code}
Notice that IOUtils.closeStream() handles null input parameter.

Or, as an improvement for readability, we could rename {{IOUtils.copyBytes}} here to {{IOUtils.copyBytesAndCloseStreams}}. Unfortunately IOUtils is a public interface, making such a change would break compatibility.

Hi [~brahmareddy], the other case you listed in your latest comment is also not an issue because there is one outer "finally" block that closes "out" stream.

Thanks.


, Hi [~brahmareddy], somehow I misread your proposed change of the *close=false* case a moment ago. I think it would be more consistent to use {{IOUtils.closestream()}} as you proposed. Thanks.

, Please check updated patch on my proposal.., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12686789/HADOOP-11392-1.patch
  against trunk revision bda748a.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:red}-1 findbugs{color}.  The patch appears to introduce 3 new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:red}-1 core tests{color}.  The patch failed these unit tests in hadoop-common-project/hadoop-common:

                  org.apache.hadoop.crypto.random.TestOsSecureRandom

Test results: https://builds.apache.org/job/PreCommit-HADOOP-Build/5252//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-HADOOP-Build/5252//artifact/patchprocess/newPatchFindbugsWarningshadoop-common.html
Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/5252//console

This message is automatically generated., Above testcase failure not related to this jira..It is getting timed out(might be someother problem..)
{quote}
Error Message

test timed out after 120000 milliseconds
Stacktrace

java.lang.Exception: test timed out after 120000 milliseconds
	at java.io.FileInputStream.readBytes(Native Method)
	at java.io.FileInputStream.read(FileInputStream.java:272)
{quote}, Hello [~cnauroth] and [~yzhangal] 

can you please give your comments on latest patch..?, This patch changes {{FileUtil#copyMerge}}.  As it turns out, this method is currently unused in the Hadoop source tree.  In branch-1, it had been part of the implementation of the {{hadoop fs -getmerge}} shell command.  In branch-2, the code for that shell command was rewritten in a way that no longer requires this method.

Since the method is annotated {{Public}}, I scanned other ecosystem projects for references to it.  The only caller I could find was in Mahout.

Instead of maintaining this code, I'd like to suggest that we resolve this as won't fix.  We can file a separate jira to propose deprecation of the method, followed by eventual removal after politely asking Mahout to migrate off of it.  The class is annotated {{Evolving}}, so we have the right to make a breaking change at a minor version boundary.

Thoughts?, {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12686789/HADOOP-11392-1.patch
  against trunk revision 1047c88.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-common-project/hadoop-common.

Test results: https://builds.apache.org/job/PreCommit-HADOOP-Build/5788//testReport/
Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/5788//console

This message is automatically generated., Thanks a lot for your comment..

I agree with you.Yes, It's better to DEPRECATE as of now..will raise another jira..? is that ok Or any other thoughts..?, [~brahmareddy], yes, please go ahead and file a new jira to track the deprecation.  In the new jira, would you please add a comment linking to my earlier comment here?

https://issues.apache.org/jira/browse/HADOOP-11392?focusedCommentId=14339336&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-14339336

This will help us remember to track down the call site in Mahout and ask them to migrate off of it.  Thanks!, HADOOP-11661 to track deprecate this method and mentioned above link in that jira...Thanks!]