[Full Stack trace is  -:
2008-09-26 09:28:53,254 INFO org.apache.hadoop.ipc.Server: IPC Server handler 2 on 34441, call heartbeat(org.apache.hadoop.mapred.TaskTrackerStatus@29d75, false, true, 99) from <ip:port>: error: java.io.IOException: java.lang.Nu
llPointerException
java.io.IOException: java.lang.NullPointerException
        at org.apache.hadoop.mapred.CapacityTaskScheduler$TaskSchedulingMgr.updateQSIObjects(CapacityTaskScheduler.java:503)
        at org.apache.hadoop.mapred.CapacityTaskScheduler$TaskSchedulingMgr.assignTasks(CapacityTaskScheduler.java:717)
        at org.apache.hadoop.mapred.CapacityTaskScheduler$TaskSchedulingMgr.access$1100(CapacityTaskScheduler.java:243)
        at org.apache.hadoop.mapred.CapacityTaskScheduler.assignTasks(CapacityTaskScheduler.java:1093)
        at org.apache.hadoop.mapred.JobTracker.heartbeat(JobTracker.java:1853)
        at sun.reflect.GeneratedMethodAccessor9.invoke(Unknown Source)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
        at java.lang.reflect.Method.invoke(Method.java:597)
        at org.apache.hadoop.ipc.RPC$Server.call(RPC.java:452)
        at org.apache.hadoop.ipc.Server$Handler.run(Server.java:888)

, Can we have some more details on when this happens - the test scenario, etc. Because clearly it doesn't happen always., I think something like this *might* have happened
1) User _user_ submitted a job, say _job1_
2) {{CapacityTaskScheduler.TaskSchedulingMgr.jobAdded()}} gets invoked. {{numJobs}} for _user_ is set to 1 and {{numRunningTasks}} is set to 0.
3) Another job was submitted by _user_, say _job2_. Because of a bug in {{CapacityTaskScheduler.TaskSchedulingMgr.jobAdded()}}, {{numJobs}} for _user_ will still be 1.
4) _job1_ completes and {{CapacityTaskScheduler.TaskSchedulingMgr.jobRemoved()}} is invoked. All entries for _user_ in {{numJobs}} and {{numRunningTasks}} gets removed.
5) Any update for _job2_ will result into NPE as {{numRunningTasks}} is missing an entry for _user_.

Karam, could you plz verify this using the following steps
1) Find out the job for which the error occured, look at the attempt for which the update was called.
2) Find out the user of the job, say $user.
3) Check if there were other jobs submitted by the same user and if they have finished
4) If in DEBUG mode, check if you see the following line
{code}
JOb to be removed for user $user
No more jobs for user, number of users
{code}, It is unlikely that {{jobRemoved}} is called, due to the HADOOP-4053, unless the job retirement actually occurred. Karam should verify this, though. Irrespective of that, the bug you mention in {{jobAdded}} should be fixed. Likewise in {{jobRemoved}}., Yes, "JOb to be removed for user $user "and "No more jobs for user, number of users" are pesrent in Jobtracker log. And problem occurs when there more than one jobs submiitted by same user and one job of the job is finished as pointed out by Amar.
Also I  was using path for Hadoop-4053 [this|https://issues.apache.org/jira/secure/attachment/12390257/HADOOP-4053-v1.patch] which internally calls jobRemoved , Ah. So, the patch file currently uploaded for HADOOP-4053 was used. OK, then it makes sense. Was this patch also applied to the environment where HADOOP-4290 was found ?, Promoting to a blocker based on current diagnosis. This is a clear bug in the code that will result in this error whenever users run more than one jobs, assuming HADOOP-4053 is fixed., Assuming that the NPE is because of the scenario I have mentioned above, uploading a straight forward fix. Testing in progress., Attaching a patch with more bug fixes., At present, we limit users only by the particular user's total number of tasks and as such, numJobsByUser is not useful at all. Unless we wish to limit users by the number of jobs also in the future, we can altogether remove numJobsByUser. May or may not be in this patch though., bq. At present, we limit users only by the particular user's total number of tasks and as such, numJobsByUser is not useful at all.

We use number of jobs per user to compute limits. The computation of limit is as follows:
{code}
  int limit = Math.max((int)(Math.ceil((double)currentCapacity/
          (double)qsi.numJobsByUser.size())), 
          (int)(Math.ceil((double)(qsi.ulMin*currentCapacity)/100.0)));
{code}

So, I think it is required to hold this structure. Therefore, the patch also seems fine. But I think we need a unit test for this., bq. So, I think it is required to hold this structure.

Agreed. +1 for leaving it as is., Attaching a patch with the test case., - The code adds a debug LOG statement that could print a null value of the variable {{i}} in {{CapacityTaskScheduler.jobAdded}}. This will not cause any problem, but will not give the right information (that there is 1 job for the user).
- The test case does not seem to test that when job is removed, the associated structures are correctly cleaned up. Isn't that what should be tested? Also, I think the test case can be named something more relevant like {{testJobRemoval}} or something like that., Adding a patch that incorporates Hemanth's comments. 
bq. The code adds a debug LOG statement that could print a null value of the variable i in 
+1.

bq. The test case does not seem to test that when job is removed, the associated structures are correctly cleaned up
The internal structures are not visible in the test case. Since this issue is about getting NPE when two jobs are submitted by the same user and one of them finishes, I have written the test case just to check if {{assignTasks()}} works when expected. If {{assignTasks}} works then I assume internal structures should be fine., Patch looks good to me. I agree on the explanation regarding the test case that the failure path is implicitly tested. 

Just note that when this goes in, the patch for HADOOP-4053 would need to change this test case to call {{jobUpdated}} rather than {{jobRemoved}}.

, Running through hudson., _test-patch_ result
{code}
+1 overall.  
     [exec] 
     [exec]     +1 @author.  The patch does not contain any @author tags.
     [exec] 
     [exec]     +1 tests included.  The patch appears to include 3 new or modified tests.
     [exec] 
     [exec]     +1 javadoc.  The javadoc tool did not generate any warning messages.
     [exec] 
     [exec]     +1 javac.  The applied patch does not increase the total number of javac compiler warnings.
     [exec] 
     [exec]     +1 findbugs.  The patch does not introduce any new Findbugs warnings.

{code}
, Ran _ant test-contrib_ on my box. All tests passed except {{TestStreamingExitStatus}} which seems unrelated to this patch., I just committed this. Thanks, Amar!, Integrated in Hadoop-trunk #630 (See [http://hudson.zones.apache.org/hudson/job/Hadoop-trunk/630/])
    ]