[Actually, I'd suggest a much stronger goal.
  1. Make makeQualified a method on Path and make the FileSystem.makeQualified call it.
  2. Have all DfsPaths always be full qualified.
  3. Have DfsPath always return *this*, I like the approach that Owen suggested. However, for many dfs-only operations (e.g. list all files in a directory, etc.etc), returning a full-qualified path is more heavyweight work that is not really necessary. The namenode has to return fully-qualified names that the FsShell has to strip out before displaying.

I am putting up a patch for code review and comments., Why should we keep DfsPaths always fully qualified? If so, shall we make DfsPath override makeQualified which returns this?, If one invokes Path.makeQualified() on a path object that is already fully qualified, then it returns "this". This means that we do not need to override Path.makeQualified., +1, -1, build or testing failed

2 attempts failed to build and test the latest attachment http://issues.apache.org/jira/secure/attachment/12357405/makeQualified.patch against trunk revision r538722.

Test results:   http://lucene.zones.apache.org:8080/hudson/job/Hadoop-Patch/152/testReport/
Console output: http://lucene.zones.apache.org:8080/hudson/job/Hadoop-Patch/152/console

Please note that this message is automatically generated and may represent a problem with the automation system and not the patch., Shouldn't we ensure the makeQualified(DFSPath) returns a DFSPath, not a Path?  With the current patch, this will always return a Path.  I think the fix is to override makeQualified for DFSPath, no?, What I have done is to implement Owen's commant that HDFS paths returned in listTypes() are always fully qualified. So, when we we invoke Path.makeQualified() it returns the same Path object., > when we we invoke Path.makeQualified() it returns the same Path object.

No, it always returns a new Path.  DFSPath includes more fields that are used to optimize some operations.  These fields are lost.  Or did I miss something?, Path.makeQualified() has the following piece of code:

    if (scheme != null &&
        (authority != null || fsUri.getAuthority() == null))
      return path;

This means that if the path object already has the scheme and authority, then it returns "this". This should work, isn't it?, You're right.  I think I was scanning for 'return this' and somehow missed 'return path'.  Sorry!, -1, build or testing failed

2 attempts failed to build and test the latest attachment http://issues.apache.org/jira/secure/attachment/12357405/makeQualified.patch against trunk revision r539623.

Test results:   http://lucene.zones.apache.org:8080/hudson/job/Hadoop-Patch/165/testReport/
Console output: http://lucene.zones.apache.org:8080/hudson/job/Hadoop-Patch/165/console

Please note that this message is automatically generated and may represent a problem with the automation system and not the patch., For some reason this fails unit tests, both on zones and on my workstation., The problem with the earlier patch was that URI.relativize works to our convenience only if both paths are fullyQualified.

Task.getFinalPath() invokes taskOutputPath.toUri().relativize(). The problem is that relativize() does not "really-relativize" if one URI is fully-qualified whereas the other URI is not. This proposed fix is to keep the taskOutputPath as a fullyQualified path.

Please comment on whether keeping the task output path as a fullyQualified path could result in any un-intended behaviour.

, > Please comment on whether keeping the task output path as a fullyQualified path [...]

Sigh.  That code shouldn't be there in the first place.  I was asleep when HADOOP-1127 was committed.  We should try to keep the mapred kernel from touching input or output files, leaving that to InputFormats and OutputFormats.  It's a church/state thing.  (Also, taskOutputPath stuff is reduce specific, so if anywhere, it belongs in ReduceTask, no?)

File renaming for speculative reduce belongs in OutputFormatBase (which should really be called FileOutputFormat).  We'll need to add another method to the OutputFormat interface, something like complete(JobConf, String tempName, String finalName), that's called for each task to rename its temporary output when speculative reduces are enabled, where tempName is what was passed to getRecordWriter().  I'll file an issue for this.

Back to your question: I don't know why relative paths are used there.  Perhaps Arun does, since he wrote that code as a part of HADOOP-1127., <code>
  private Path getTaskOutputPath(JobConf conf) {
    return new Path(conf.getOutputPath(), ("_" + taskId));
  }
</code>

That is how taskOutputPath is created, and thus should be an absolute path. I'm not quite sure, looking at TestMiniMRWithDFS.launchWordCount atleast, how this could result in a relative path... not-fully-qualified maybe, but not relative.

Anyway, the short answer is making taskOutputPath fully-qualified shouldn't be a problem.

> Also, taskOutputPath stuff is reduce specific, so if anywhere, it belongs in ReduceTask, no?
This also comes into play with 'reducer -NONE' where map outputs need to go directly to dfs...

Urelated note: +1 to moving that code from mapred kernel to the OutputFormatBase., Thanks Arun and Doug fro your comments.

Anun: The taskOutputPath was absolute but not fullyQualified. This p[atch makes all HDFS path fullyQualified. Thus, taskOutputPath.toUri().relativize(dfspath) does not work well because taskOutputPath is not fullyQualified whereas dfspath is fullyQualified.

Doug: would appreciate it if you can create a separate JIRA for moving this code into the right place.
I am going to mark this issue as patch-available. , Merged patch with latest trunk., > This also comes into play with 'reducer -NONE' where map outputs need to go directly to dfs...

That code (in MapTask.java) looks okay to me: it seems to do all output through the OutputFormat.  Did I miss something?  However, this would not work correctly with speculative execution enabled.  I'll add a note to HADOOP-1416.

> Doug: would appreciate it if you can create a separate JIRA for moving this code into the right place.

I did that yesterday, HADOOP-1416.
, +1

http://issues.apache.org/jira/secure/attachment/12358011/makeQualified3.patch applied and successfully tested against trunk revision r540973.

Test results:   http://lucene.zones.apache.org:8080/hudson/job/Hadoop-Patch/189/testReport/
Console output: http://lucene.zones.apache.org:8080/hudson/job/Hadoop-Patch/189/console, I just committed this.  Thanks, Dhruba!, Integrated in Hadoop-Nightly #99 (See http://lucene.zones.apache.org:8080/hudson/job/Hadoop-Nightly/99/)]