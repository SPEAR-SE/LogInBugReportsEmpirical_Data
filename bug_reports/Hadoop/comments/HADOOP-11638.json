[Suggested patch., I don't quite understand the code here: do you really need gettid() here or it can be replaced with pthread_self()?, bq. I don't quite understand the code here: do you really need gettid() here or it can be replaced with pthread_self()?

{{pthread_self}} returns an opaque identifier.  On many platforms, this is not a {{long}}.  Since the {{pthreads_thread_id}} function requires a {{long}}, {{pthread_self}} will not do.  The fix is going to have to be platform-specific.  I don't know what it would be for OpenBSD but maybe someone here does., See this method in Wine source code https://github.com/wine-mirror/wine/blob/master/dlls/ntdll/server.c
It has platform specific code to get thread id

{code}
/***********************************************************************
 *           get_unix_tid
 *
 * Retrieve the Unix tid to use on the server side for the current thread.
 */
static int get_unix_tid(void)
{
    int ret = -1;
#ifdef HAVE_PTHREAD_GETTHREADID_NP
    ret = pthread_getthreadid_np();
#elif defined(linux)
    ret = syscall( __NR_gettid );
#elif defined(__sun)
    ret = pthread_self();
#elif defined(__APPLE__)
    ret = mach_thread_self();
    mach_port_deallocate(mach_task_self(), ret);
#elif defined(__NetBSD__)
    ret = _lwp_self();
#elif defined(__FreeBSD__)
    long lwpid;
    thr_self( &lwpid );
    ret = lwpid;
#elif defined(__DragonFly__)
    ret = lwp_gettid();
#endif
    return ret;
}
{code}, I have attached a patch. Currently included only Linux and FreeBSD platform specific code.

{code}
static unsigned long pthreads_thread_id(void)
{
  unsigned long thread_id = 0;
#if defined(__linux__)
  thread_id = (unsigned long)syscall(SYS_gettid);
#elif defined(__FreeBSD__)
  thread_id = (unsigned long)pthread_getthreadid_np();
#endif
  return thread_id;
}
{code}, {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12702400/HADOOP-11638-001.patch
  against trunk revision 3560180.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-common-project/hadoop-common.

Test results: https://builds.apache.org/job/PreCommit-HADOOP-Build/5842//testReport/
Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/5842//console

This message is automatically generated., Can you add an {{#else}} clause that has an {{#error}}?  +1 after that is done.

thanks., Thanks for review Colin. Added new patch as per comments.
[~trtrmitya], you can compile on FreeBSD and confirm if patch is working. , {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12702696/HADOOP-11638-002.patch
  against trunk revision 8d88691.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-common-project/hadoop-common.

Test results: https://builds.apache.org/job/PreCommit-HADOOP-Build/5852//testReport/
Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/5852//console

This message is automatically generated., Why not to include the whole patch from wine you provided?
There are efforts on porting hadoop to Solaris at least, which would automatically benefit from this., I really really hope someone checked the license on that code before they contaminated all of us., bq. Dmitry asked: Why not to include the whole patch from wine you provided? There are efforts on porting hadoop to Solaris at least, which would automatically benefit from this.

We cannot use code from Wine because Wine is under some flavor of the GPL.  This is class X license according to Apache.  (See http://www.apache.org/legal/resolved.html )

bq. Allen said: I really really hope someone checked the license on that code before they contaminated all of us.

This patch isn't a copy-paste of the code from Wine.  You can see that the Wine code uses {{thr_self}}, whereas this code uses {{pthread_getthreadid_np}}.

I am +1 on 002.  Will commit in a few hours if there's no more comments.  Thanks guys, [~aw], I quoted wine source code for reference. Not to use their code as-is. BTW wine is under LGPL.
You can find similar approach to get platform specific thread id in lots of other implementations also. I hope there should not be any license issues for the patch.

[~trtrmitya], In my opinion we should include platform specific code that we can actually compile and test on. Adding Solaris specific code is possible, I have also seen few JIRA related to that. But not sure who can compile and verify on Solaris. Did FreeBSD specific code work for you?

Let me know if Solaris specific code is needed.


, Does it mean we can never use ret = pthread_self(); for Solaris here just because Wine already used that?, Yes, that FreeBSD-specific code looks fine for me, thanks!, For the record, LGPL code is not allowed in ASF code.  http://www.apache.org/legal/resolved.html, bq. Does it mean we can never use ret = pthread_self(); for Solaris here just because Wine already used that?

I think that's not the case, we can use. This will be the type of code you will end up to be compatible with multiple platforms even if wine reference was not there., Attached 003 patch with Solaris specific code.
{code}
#elif defined(__sun)
  thread_id = (unsigned long)pthread_self();
{code}

Checked Solaris threading documentation http://docs.oracle.com/cd/E19455-01/806-5257/6je9h033p/index.html

{{thr_self}} and {{pthread_self}} are same, document says "you can safely mix Solaris threads functions and pthread functions in the same program"

We can go ahead with  {{pthread_self}}. No need to use {{thr_self}}, as this needs new include file {{#include <thread.h>}}. 

[~cmccabe], If Solaris support is needed, use 003 patch else 002 should be fine., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12702880/HADOOP-11638-003.patch
  against trunk revision 952640f.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:red}-1 core tests{color}.  The patch failed these unit tests in hadoop-common-project/hadoop-common:

                  org.apache.hadoop.ipc.TestRPCWaitForProxy

Test results: https://builds.apache.org/job/PreCommit-HADOOP-Build/5859//testReport/
Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/5859//console

This message is automatically generated., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12702884/HADOOP-11638-003.patch
  against trunk revision 952640f.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:red}-1 core tests{color}.  The patch failed these unit tests in hadoop-common-project/hadoop-common:

                  org.apache.hadoop.ipc.TestRPCWaitForProxy

Test results: https://builds.apache.org/job/PreCommit-HADOOP-Build/5860//testReport/
Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/5860//console

This message is automatically generated., Casting the return value of pthread_getthreadid_np may be lossy. FreeBSD uses an unsigned long for thread IDs, but that function casts it to an int. FreeBSD's pthread_t is a pointer to a structure whose first member is the thread id, so:

    thread_id = *(unsigned long *)pthread_self();

may be what is wanted. My concern about this, though, is that it's relying on undocumented implementation details., bq. Casting the return value of pthread_getthreadid_np may be lossy. FreeBSD uses an unsigned long for thread IDs, but that function casts it to an int.

Did you look at the wrong patch?  The function doesn't cast anything to an int.

{code}
 static unsigned long pthreads_thread_id(void)
 {
-  return (unsigned long)syscall(SYS_gettid);
+  unsigned long thread_id = 0;
+#if defined(__linux__)
+  thread_id = (unsigned long)syscall(SYS_gettid);
+#elif defined(__FreeBSD__)
+  thread_id = (unsigned long)pthread_getthreadid_np();
+#elif defined(__sun)
+  thread_id = (unsigned long)pthread_self();
+#else
+#error "Platform not supported"
+#endif
+  return thread_id;
 }
{code}

also, FreeBSD's pthread_getthreadid_np returns an int, not an unsigned long.  http://www.freebsd.org/cgi/man.cgi?query=pthread_getthreadid_np&sektion=3&apropos=0&manpath=FreeBSD%2B10.0-RELEASE

+1 for 003.  Let's commit this., Sorry, I could have been more clear. pthread_getthreadid_np() on FreeBSD casts the real thread ID into an int and returns it. The thread ID is stored as the first member of the pthread_t structure.

FreeBSD's pthread_getthreadid_np function does this:

struct pthread *curthread;
curthread = _get_curthread();
return (TID(curthread));

Where TID() is this:

#define TID(thread) ((uint32_t) ((thread)->tid))

And the member tid of struct pthread is an unsigned long. That said, the TID macro is used all over FreeBSD's pthread implementation, so it's safe to say it will never be bigger than a uint32_t.

, bq. And the member tid of struct pthread is an unsigned long. That said, the TID macro is used all over FreeBSD's pthread implementation, so it's safe to say it will never be bigger than a uint32_t.

Yes I had checked it, FreeBSD API itself is returning an {{int}}. So there should not be any issue.

I guess current patch-003 is fine. Let me know if any other comments need to be taken care., Thanks for that clarification, [~dankm].  That sounds like an internal implementation issue of the {{pthread_getthreadid_np}} function on FreeBSD and possibly even a kernel-level detail.  If FreeBSD later supplies an API for getting longer numeric thread IDs than 32-bits, we can think about switching over to it then.  But for now we have to use the OS-provided API that exists.

Committed to 2.7.  Thanks, all., I asked Jung-uk Kim <jkim@FreeBSD.org>, the author of pthread_getthreadid_np on FreeBSD, and he confirmed that pthread_getthreadid_np() is the correct solution for FreeBSD., FAILURE: Integrated in Hadoop-trunk-Commit #7290 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/7290/])
HADOOP-11638. OpensslSecureRandom.c pthreads_thread_id should support FreeBSD and Solaris in addition to Linux (Kiran Kumar M R via Colin P.  McCabe) (cmccabe: rev 3241fc2b17f11e621d8ffb6160caa4b850c278b6)
* hadoop-common-project/hadoop-common/src/main/native/src/org/apache/hadoop/crypto/random/OpensslSecureRandom.c
* hadoop-common-project/hadoop-common/CHANGES.txt
, This patch broke native compilation on Mac, because it falls through to the {{#error}} case.  Shall we revert?, Yes., Dimitry: I saw that. He committed a change to FreeBSD clarifying the use of the TID macro as well., FAILURE: Integrated in Hadoop-Yarn-trunk-Java8 #128 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk-Java8/128/])
HADOOP-11638. OpensslSecureRandom.c pthreads_thread_id should support FreeBSD and Solaris in addition to Linux (Kiran Kumar M R via Colin P.  McCabe) (cmccabe: rev 3241fc2b17f11e621d8ffb6160caa4b850c278b6)
* hadoop-common-project/hadoop-common/CHANGES.txt
* hadoop-common-project/hadoop-common/src/main/native/src/org/apache/hadoop/crypto/random/OpensslSecureRandom.c
, FAILURE: Integrated in Hadoop-Yarn-trunk #862 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk/862/])
HADOOP-11638. OpensslSecureRandom.c pthreads_thread_id should support FreeBSD and Solaris in addition to Linux (Kiran Kumar M R via Colin P.  McCabe) (cmccabe: rev 3241fc2b17f11e621d8ffb6160caa4b850c278b6)
* hadoop-common-project/hadoop-common/src/main/native/src/org/apache/hadoop/crypto/random/OpensslSecureRandom.c
* hadoop-common-project/hadoop-common/CHANGES.txt
, FAILURE: Integrated in Hadoop-Hdfs-trunk #2060 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/2060/])
HADOOP-11638. OpensslSecureRandom.c pthreads_thread_id should support FreeBSD and Solaris in addition to Linux (Kiran Kumar M R via Colin P.  McCabe) (cmccabe: rev 3241fc2b17f11e621d8ffb6160caa4b850c278b6)
* hadoop-common-project/hadoop-common/src/main/native/src/org/apache/hadoop/crypto/random/OpensslSecureRandom.c
* hadoop-common-project/hadoop-common/CHANGES.txt
, FAILURE: Integrated in Hadoop-Hdfs-trunk-Java8 #119 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk-Java8/119/])
HADOOP-11638. OpensslSecureRandom.c pthreads_thread_id should support FreeBSD and Solaris in addition to Linux (Kiran Kumar M R via Colin P.  McCabe) (cmccabe: rev 3241fc2b17f11e621d8ffb6160caa4b850c278b6)
* hadoop-common-project/hadoop-common/CHANGES.txt
* hadoop-common-project/hadoop-common/src/main/native/src/org/apache/hadoop/crypto/random/OpensslSecureRandom.c
, FAILURE: Integrated in Hadoop-Mapreduce-trunk-Java8 #128 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk-Java8/128/])
HADOOP-11638. OpensslSecureRandom.c pthreads_thread_id should support FreeBSD and Solaris in addition to Linux (Kiran Kumar M R via Colin P.  McCabe) (cmccabe: rev 3241fc2b17f11e621d8ffb6160caa4b850c278b6)
* hadoop-common-project/hadoop-common/src/main/native/src/org/apache/hadoop/crypto/random/OpensslSecureRandom.c
* hadoop-common-project/hadoop-common/CHANGES.txt
, FAILURE: Integrated in Hadoop-Mapreduce-trunk #2078 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/2078/])
HADOOP-11638. OpensslSecureRandom.c pthreads_thread_id should support FreeBSD and Solaris in addition to Linux (Kiran Kumar M R via Colin P.  McCabe) (cmccabe: rev 3241fc2b17f11e621d8ffb6160caa4b850c278b6)
* hadoop-common-project/hadoop-common/CHANGES.txt
* hadoop-common-project/hadoop-common/src/main/native/src/org/apache/hadoop/crypto/random/OpensslSecureRandom.c
, I have reverted this patch from trunk.  I see a comment that it was committed to 2.7, but I didn't find it there, so I only touched the trunk branch.  If you don't have access to a Mac and you need someone else to verify another version of the patch on Mac, I'm happy to help.  Thanks, Kiran., FAILURE: Integrated in Hadoop-trunk-Commit #7298 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/7298/])
Revert "HADOOP-11638. OpensslSecureRandom.c pthreads_thread_id should support FreeBSD and Solaris in addition to Linux (Kiran Kumar M R via Colin P.  McCabe)" (cnauroth: rev 8d5b01e005b2647262861acf522e9b5c6d6f8bba)
* hadoop-common-project/hadoop-common/src/main/native/src/org/apache/hadoop/crypto/random/OpensslSecureRandom.c
* hadoop-common-project/hadoop-common/CHANGES.txt
, Thanks for offering help Chris. I am checking best thread_id API to use on Mac, will submit a patch soon., FAILURE: Integrated in Hadoop-Yarn-trunk-Java8 #129 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk-Java8/129/])
Revert "HADOOP-11638. OpensslSecureRandom.c pthreads_thread_id should support FreeBSD and Solaris in addition to Linux (Kiran Kumar M R via Colin P.  McCabe)" (cnauroth: rev 8d5b01e005b2647262861acf522e9b5c6d6f8bba)
* hadoop-common-project/hadoop-common/CHANGES.txt
* hadoop-common-project/hadoop-common/src/main/native/src/org/apache/hadoop/crypto/random/OpensslSecureRandom.c
, FAILURE: Integrated in Hadoop-Yarn-trunk #863 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk/863/])
Revert "HADOOP-11638. OpensslSecureRandom.c pthreads_thread_id should support FreeBSD and Solaris in addition to Linux (Kiran Kumar M R via Colin P.  McCabe)" (cnauroth: rev 8d5b01e005b2647262861acf522e9b5c6d6f8bba)
* hadoop-common-project/hadoop-common/src/main/native/src/org/apache/hadoop/crypto/random/OpensslSecureRandom.c
* hadoop-common-project/hadoop-common/CHANGES.txt
, FAILURE: Integrated in Hadoop-Hdfs-trunk #2061 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/2061/])
Revert "HADOOP-11638. OpensslSecureRandom.c pthreads_thread_id should support FreeBSD and Solaris in addition to Linux (Kiran Kumar M R via Colin P.  McCabe)" (cnauroth: rev 8d5b01e005b2647262861acf522e9b5c6d6f8bba)
* hadoop-common-project/hadoop-common/CHANGES.txt
* hadoop-common-project/hadoop-common/src/main/native/src/org/apache/hadoop/crypto/random/OpensslSecureRandom.c
, FAILURE: Integrated in Hadoop-Hdfs-trunk-Java8 #120 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk-Java8/120/])
Revert "HADOOP-11638. OpensslSecureRandom.c pthreads_thread_id should support FreeBSD and Solaris in addition to Linux (Kiran Kumar M R via Colin P.  McCabe)" (cnauroth: rev 8d5b01e005b2647262861acf522e9b5c6d6f8bba)
* hadoop-common-project/hadoop-common/CHANGES.txt
* hadoop-common-project/hadoop-common/src/main/native/src/org/apache/hadoop/crypto/random/OpensslSecureRandom.c
, FAILURE: Integrated in Hadoop-Mapreduce-trunk-Java8 #129 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk-Java8/129/])
Revert "HADOOP-11638. OpensslSecureRandom.c pthreads_thread_id should support FreeBSD and Solaris in addition to Linux (Kiran Kumar M R via Colin P.  McCabe)" (cnauroth: rev 8d5b01e005b2647262861acf522e9b5c6d6f8bba)
* hadoop-common-project/hadoop-common/CHANGES.txt
* hadoop-common-project/hadoop-common/src/main/native/src/org/apache/hadoop/crypto/random/OpensslSecureRandom.c
, FAILURE: Integrated in Hadoop-Mapreduce-trunk #2079 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/2079/])
Revert "HADOOP-11638. OpensslSecureRandom.c pthreads_thread_id should support FreeBSD and Solaris in addition to Linux (Kiran Kumar M R via Colin P.  McCabe)" (cnauroth: rev 8d5b01e005b2647262861acf522e9b5c6d6f8bba)
* hadoop-common-project/hadoop-common/src/main/native/src/org/apache/hadoop/crypto/random/OpensslSecureRandom.c
* hadoop-common-project/hadoop-common/CHANGES.txt
, I have added new patch-004 to include Mac OS specific code.
Mac has {{int pthread_threadid_np(pthread_t thread, uint64_t *thread_id)}} method to get thread id 
- Its declared in {{pthread.h}} Refer https://opensource.apple.com/source/libpthread/libpthread-105.1.4/pthread/pthread.h
- Its implementation can be seen at https://opensource.apple.com/source/libpthread/libpthread-105.1.4/src/pthread.c
- Its usage can be seen at https://opensource.apple.com/source/libpthread/libpthread-105.1.4/src/pthread_rwlock.c as below
{code}
  uint64_t myid;
  (void)pthread_threadid_np(pthread_self(), &myid);
{code}

Now my patch code is:
{code}
static unsigned long pthreads_thread_id(void)
{
  unsigned long thread_id = 0;
#if defined(__linux__)
  thread_id = (unsigned long)syscall(SYS_gettid);
#elif defined(__FreeBSD__)
  thread_id = (unsigned long)pthread_getthreadid_np();
#elif defined(__sun)
  thread_id = (unsigned long)pthread_self();
#elif defined(__APPLE__ )
  (void)pthread_threadid_np(pthread_self(), &thread_id);
#else
#error "Platform not supported"
#endif
  return thread_id;
}
{code}

[~cnauroth], please check if patch-004 works on Mac
, Thanks for the update, Kiran.  I verified the new patch on Mac.  +1 from me.  I'll wait a bit before committing in case any of the other watchers want to take a look., Thanks, [~kirankumarmr].  The new patch looks fine to me, although I'm not familiar with Mac.

I would slightly prefer doing this in a new JIRA, since this one was already committed (and didn't mention Apple support in the description).  However, I don't feel strongly about this... I will leave it up to you guys., I committed this to trunk, branch-2 and branch-2.7.  Kiran, thank you for the patch.

bq. I would slightly prefer doing this in a new JIRA, since this one was already committed (and didn't mention Apple support in the description).

I had to revert the prior committed patch, because it actually broke compilation for Mac.  That's why I reopened this issue and asked for a corrected patch., SUCCESS: Integrated in Hadoop-trunk-Commit #7337 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/7337/])
HADOOP-11638. OpensslSecureRandom.c pthreads_thread_id should support FreeBSD and Solaris in addition to Linux. Contributed by Kiran Kumar M R. (cnauroth: rev 72cd4e4a4eb2a9f8695d4c67eb55dd2be36c52dc)
* hadoop-common-project/hadoop-common/src/main/native/src/org/apache/hadoop/crypto/random/OpensslSecureRandom.c
* hadoop-common-project/hadoop-common/CHANGES.txt
, bq. I had to revert the prior committed patch, because it actually broke compilation for Mac. That's why I reopened this issue and asked for a corrected patch.

I'm very surprised that it compiled on Mac earlier.  It was using system calls which we believed were Linux-specific.

{code}
288	#elif defined(__APPLE__)
289	  (void)pthread_threadid_np(pthread_self(), &thread_id);
{code}

I looked at this and found that {{pthread_threadid_np}} on Mac has the type signature: {{int pthread_threadid_np(pthread_t thread, __uint64_t *thread_id)}}  This doesn't match with using an {{unsigned long}}.  I'm not sure under what conditions an {{unsigned long}} is different than a {{uint64_t}} on Mac (on Linux, that would be the case with 32-bit compilation).  So this patch may have a buffer overflow in that case.

Should we file a follow-on to fix this?  Simplest fix is just using a temporary variable of type {{uint64_t}} and copying that into the {{unsigned long}}.  It's not a perfect solution since two threads may get the same ID in 32-bit land ( you can blame openssl's boneheaded use of a long here instead of a uint64_t) but it's sure better than a buffer overflow., Filed HDFS-7938 to fix type signature, Thanks, Colin.  While the previous code compiled on Mac, I'm not sure if anyone knows whether or not it really worked.  :-)  We only use Mac as a deployment environment and never as a real deployment environment (AFAIK), so it's quite possible that no one noticed a problem.  The revert was based on the fact that the prior patch took us from a working Mac build (but possibly with bugs in this part of the code) to a compilation failure.

Thanks for filing HDFS-7938., Thanks to Dmitry,  Dan McGregor, Allen, Colin and Chris for reviews and verification of the patch., FAILURE: Integrated in Hadoop-Yarn-trunk #869 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk/869/])
HADOOP-11638. OpensslSecureRandom.c pthreads_thread_id should support FreeBSD and Solaris in addition to Linux. Contributed by Kiran Kumar M R. (cnauroth: rev 72cd4e4a4eb2a9f8695d4c67eb55dd2be36c52dc)
* hadoop-common-project/hadoop-common/CHANGES.txt
* hadoop-common-project/hadoop-common/src/main/native/src/org/apache/hadoop/crypto/random/OpensslSecureRandom.c
, FAILURE: Integrated in Hadoop-Yarn-trunk-Java8 #135 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk-Java8/135/])
HADOOP-11638. OpensslSecureRandom.c pthreads_thread_id should support FreeBSD and Solaris in addition to Linux. Contributed by Kiran Kumar M R. (cnauroth: rev 72cd4e4a4eb2a9f8695d4c67eb55dd2be36c52dc)
* hadoop-common-project/hadoop-common/CHANGES.txt
* hadoop-common-project/hadoop-common/src/main/native/src/org/apache/hadoop/crypto/random/OpensslSecureRandom.c
, FAILURE: Integrated in Hadoop-Hdfs-trunk-Java8 #126 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk-Java8/126/])
HADOOP-11638. OpensslSecureRandom.c pthreads_thread_id should support FreeBSD and Solaris in addition to Linux. Contributed by Kiran Kumar M R. (cnauroth: rev 72cd4e4a4eb2a9f8695d4c67eb55dd2be36c52dc)
* hadoop-common-project/hadoop-common/CHANGES.txt
* hadoop-common-project/hadoop-common/src/main/native/src/org/apache/hadoop/crypto/random/OpensslSecureRandom.c
, FAILURE: Integrated in Hadoop-Hdfs-trunk #2067 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/2067/])
HADOOP-11638. OpensslSecureRandom.c pthreads_thread_id should support FreeBSD and Solaris in addition to Linux. Contributed by Kiran Kumar M R. (cnauroth: rev 72cd4e4a4eb2a9f8695d4c67eb55dd2be36c52dc)
* hadoop-common-project/hadoop-common/CHANGES.txt
* hadoop-common-project/hadoop-common/src/main/native/src/org/apache/hadoop/crypto/random/OpensslSecureRandom.c
, FAILURE: Integrated in Hadoop-Mapreduce-trunk-Java8 #135 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk-Java8/135/])
HADOOP-11638. OpensslSecureRandom.c pthreads_thread_id should support FreeBSD and Solaris in addition to Linux. Contributed by Kiran Kumar M R. (cnauroth: rev 72cd4e4a4eb2a9f8695d4c67eb55dd2be36c52dc)
* hadoop-common-project/hadoop-common/CHANGES.txt
* hadoop-common-project/hadoop-common/src/main/native/src/org/apache/hadoop/crypto/random/OpensslSecureRandom.c
, FAILURE: Integrated in Hadoop-Mapreduce-trunk #2085 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/2085/])
HADOOP-11638. OpensslSecureRandom.c pthreads_thread_id should support FreeBSD and Solaris in addition to Linux. Contributed by Kiran Kumar M R. (cnauroth: rev 72cd4e4a4eb2a9f8695d4c67eb55dd2be36c52dc)
* hadoop-common-project/hadoop-common/CHANGES.txt
* hadoop-common-project/hadoop-common/src/main/native/src/org/apache/hadoop/crypto/random/OpensslSecureRandom.c
, Yeah, that makes sense, [~cnauroth].  I definitely don't object to including mac support, just was commenting that I was kind of surprised that it compiled before :), I just realized there was a significant typo in my last comment.  I meant to say that we only use Mac as a *development* environment, not a deployment environment.]