[This issue fixes wildcard bug for incorrect exit code. , Incorrect return code for wildcard in hadoop is not limited to chown/chgrp.  
It's everywhere.
For example, 
In 'ls', this is how unix performs, 

{noformat}
% ls nonexist*
ls: No match.
% echo $?
1
% ls nonexist* file*
fileA
% echo $?
0
% ls file* nonexist* 
fileA
% echo $?
0
{noformat} 
*It returns 0 as long as one of the globing matches*.
and in hadoop 'ls'
{noformat}

% hadoop dfs -ls file\* nonexist\*
Found 1 items
-rw-------   3 knoguchi users          7 2010-04-08 15:57 /user/knoguchi/fileA
ls: Cannot access nonexist*: No such file or directory.
% echo $?
255

% hadoop dfs -ls nonexist\* file\* 
ls: Cannot access nonexist*: No such file or directory.
Found 1 items
-rw-------   3 knoguchi users          7 2010-04-08 15:57 /user/knoguchi/fileA
% echo $?
0
% 
{noformat}

hadoop 'ls' simply returns the result of the last globbing.

This behavior is also inconsistent from command to command. 
Picking three hadoop commands. chgrp/ls/du. 

|| command || single globbing  || multiple globbing ||
| chown/chgrp/etc | X (returns 0 even if globing returns empty) | X (returns 0 even if all the globbing returns empty) |
| ls | O | X (returns last globbing result) | 
| du | O | X (returns non-zero even if one of the globbing fail) |  

Suggested fix in this Jira would simply change the behavior of 'chown/chgrp'  to 'du'-like which means multiple globbing will still be incorrect.
, HADOOP-6701 Fixes this issue., bq. HADOOP-6701  Fixes this issue. 

Ravi, HADOOP-6701 just moved the error handling of globbing from one type to another. 
Should I create a separate Jira for glob handling?, 
bq.Should I create a separate Jira for glob handling?

Koji, could you please create Jira and explain desired fix for this error.
]