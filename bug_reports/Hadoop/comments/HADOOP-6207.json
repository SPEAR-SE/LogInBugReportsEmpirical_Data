[(Note: I have patches, but I can't figure out where libhdfs has gone after the project split!)

Here are the leaks I found so far:
hdfsJniHelper.c: constructNewArrayString -> reference to newly created string is not released after it has been added to array.  This leads to leaks when the array is destroyed, as all strings have reference count of at least one.
hdfs.c: hdfsOpen -> reference to jAttrString is never destroyed, resulting in leak
fuse-dfs.c: When a file is closed, the reference to the file system object is not destroyed.

The first one is the most critical - in FUSE, a string for each group the user is in is created per file open.  This results in many hundreds of bytes leaking per file open.

I was able to detect these by running FUSE with a heap size of 4MB, then opening and closing files until I got OOM exceptions., bq. hdfsJniHelper.c: constructNewArrayString -> reference to newly created string is not released after it has been added to array. This leads to leaks when the array is destroyed, as all strings have reference count of at least one.

constructNewArrayString got deleted because it was buggy and not actually used by anyone.

bq. hdfs.c: hdfsOpen -> reference to jAttrString is never destroyed, resulting in leak

I can't find jAttrString in the new code; it seems to have been removed by an earlier change.

bq. fuse-dfs.c: When a file is closed, the reference to the file system object is not destroyed.

Fixed by HDFS-3608, which added a background thread which cleans up unused connections.

It seems like we should close this bug because these issues have been resolved., There is a high probability that this has been fixed and/or is stale.  So closing it as such.  If not, please file a new jira.]