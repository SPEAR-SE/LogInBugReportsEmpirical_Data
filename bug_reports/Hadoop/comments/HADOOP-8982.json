[{code}
Running org.apache.hadoop.net.TestSocketIOWithTimeout
Tests run: 1, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 5.016 sec <<< FAILURE!
testSocketIOWithTimeout(org.apache.hadoop.net.TestSocketIOWithTimeout)  Time elapsed: 5016 sec  <<< FAILURE!
java.lang.AssertionError: Did not throw
	at org.junit.Assert.fail(Assert.java:91)
	at org.apache.hadoop.net.TestSocketIOWithTimeout.testSocketIOWithTimeout(TestSocketIOWithTimeout.java:149)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.runners.BlockJUnit4ClassRunner.runNotIgnored(BlockJUnit4ClassRunner.java:79)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:71)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:49)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:236)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:252)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:141)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:112)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)
	at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)
{code}
, 	The failure of this test case is, i think, because the partial write is handled differently by mac and windows. We actually write the bytes to channels, the Pipe.SinkChannel we are using here implements a interface WritableByteChannel, from Java Doc about write function of this interface, it said "Some types of channels, depending upon their state, may write only some of the bytes or possibly none at all." That is one reason why I think the differnet OS may cause the failure.
	Bacially, this test opens a pipe channel, and the sink will keep writing to the channel with 4192 bytes each time. When the channel is full, sink will do the parial write(write 3000 bytes to the channel, the channel is full, then the remaining bytes in the Bytebuffer is 1192) when the test is running on the mac environment, on the other hand, when we run this test on the windows environment, if the channel can not fit for the full Bytebuffer size, it will not allow us to write part of it. That means, when we try to write 4192 bytes to the channel when the channel still has 3000 bytes empty size. We can not write at all. The remaining bytes in the Bytebuffer is still 4192. 
	When this partial wirte happens, we check the condition buf.capacity > buf.remaining or not, if yes, we will close the stream. So, that is why the stream is close on Mac environment, but still open in windows environment. So, the next time, when we try to write, we will not go expected "stream is close "exception at Windows environment. 
	So far, this is from my observations. So, the questions is whether the windows and mac handle parital write as I decribed previous ? If it is true, in order to fix this test failure. What we can do is add the function called tryToWriteOneByte() in SocketOutPutStream.java file, this function is only for test purpose.

public void tryToWriteOneByte(){
    try{
	write(1);
	writer.close();
    }catch(IOException e){
	//do nothing
    }
} 

	Calling this function will insert a byte to the channel, if we can do that, that means the channel is not full, and the partial write happens, so we need to close the stream. If we can not do that, we will catch a exception, that means last time we got the exception is not because the partial write is happened, is because the channel is full before we do the next 4192 bytes write.

	Since this test failure is happened on Windows, in the TestSocketIOWithTimeout.java, we can check whether the environment is Windows before we call this function. 
After doIO(null,out,TIMEOUT), we can do
if(System.getProperty("os.name").toLowerCase().indexOf("win")>=0){
	out.tryToWriteOneByte();
}, After many, many failed attempts to simulate partial writes on Windows, I'm submitting a patch that bypasses just the portion of the test that depends on partial write when running on Windows.

The earlier analysis is correct that the test is not able to observe partial write on Windows.  At first, I thought the behavior was strictly due to differences in implementation of pipes between Linux and Windows, so I tried changing the test to use a real network socket.  Then, I tried ever-increasing write buffer sizes.  None of my attempts successfully simulated partial write on Windows.  At this point, I think we need to skip this portion of the test on Windows.

This page lists some interesting differences between Unix and Windows sockets:

http://itamarst.org/writings/win32sockets.html

The last point is particularly relevant., I am not sure his analysis is correct. Also he tested with Python so it may be changing the default buffering options.

Skipping it is reasonable. The problem with this kind of test is its behavior may change per combination of OS/JVM version., By 'his analysis' I meant the one on linked page., {quote}
I am not sure his analysis is correct. Also he tested with Python so it may be changing the default buffering options.
{quote}

In that case, I'd prefer not to mention that information in the comment.  Here is an updated patch that removes the hyperlink from the comment., Hi Chris,

I am not confident about this statement and I think we should just remove it.
{quote}
Windows appears to buffer large amounts of written data and send it all atomically, thus making it impossible to simulate a partial write scenario.
{quote}

It is equally likely the data is buffered on the peer's receiving socket. Ideally we rewrite the test later. :)

+1 otherwise.

Thanks,
Arpit, {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12584366/HADOOP-8982.2.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-common-project/hadoop-common.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HADOOP-Build/2558//testReport/
Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/2558//console

This message is automatically generated., Also seeing this failure in branch-2., bq. It is equally likely the data is buffered on the peer's receiving socket. Ideally we rewrite the test later.
Arpit and Chris, if needed, can you please create a jira to follow up on this.


+1 otherwise for the patch. I will commit it shortly., I committed this patch to trunk and branch-2., Integrated in Hadoop-trunk-Commit #3871 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/3871/])
    HADOOP-8982. TestSocketIOWithTimeout fails on Windows. Contributed by Chris Nauroth. (Revision 1490124)

     Result = SUCCESS
suresh : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1490124
Files : 
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/net/TestSocketIOWithTimeout.java
, Integrated in Hadoop-Yarn-trunk #232 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk/232/])
    HADOOP-8982. TestSocketIOWithTimeout fails on Windows. Contributed by Chris Nauroth. (Revision 1490124)

     Result = SUCCESS
suresh : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1490124
Files : 
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/net/TestSocketIOWithTimeout.java
, Integrated in Hadoop-Hdfs-trunk #1422 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/1422/])
    HADOOP-8982. TestSocketIOWithTimeout fails on Windows. Contributed by Chris Nauroth. (Revision 1490124)

     Result = FAILURE
suresh : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1490124
Files : 
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/net/TestSocketIOWithTimeout.java
, Integrated in Hadoop-Mapreduce-trunk #1448 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/1448/])
    HADOOP-8982. TestSocketIOWithTimeout fails on Windows. Contributed by Chris Nauroth. (Revision 1490124)

     Result = SUCCESS
suresh : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1490124
Files : 
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/net/TestSocketIOWithTimeout.java
, Thanks for committing this Suresh.

I filed HADOOP-9627 to fix the test.]