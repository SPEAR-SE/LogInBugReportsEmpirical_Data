[Root cause:
When you create a child process by using the CreateProcess function call in a multithreaded environment, the child may inherit handles that were not intended to be inherited (there is a race condition here). In our case, Hadoop is consistently calling CreateProcess on winutils.exe and as part of preparations for CreateProcess read/write handles are created on pipes used to redirect stdout/stderr. In scenario where we create for example one ShortLived and one LongLived child process, the LongLived process can end up inheriting handles of the ShortLived process. This will further cause ReadFile on the ShortLived processâ€™ stdout/stderr not to return until the LongLived process terminates, what is the behavior we observed. 

Pre Windows-Vista, the only way to mitigate the problem was to serialize all calls to CreateProcess. On Vista and later, there is a way to specify the list of handles that should be inherited by a child via PROC_THREAD_ATTRIBUTE_HANDLE_LIST in STARTUPINFOEX.

This KB article nicely explains the issue:
http://support.microsoft.com/kb/315939 - PRB: Child Inherits Unintended Handles During CreateProcess Call

I looked over the OpenJDK implementation for Process#start(), and this is exactly what is going on. Since we can repro the problem in Oracle JDK, it should be safe to assume that they have the same issue. 

The suggested workaround is to serialize all calls to CreateProcess. In Java world, this boils down to synchronizing on Process#start() as this call just delegates to CreateProcess. I tested this out and it worked out fine.
, Attaching the patch with the fix., +1. After this fix I dont see the intermittent failures after multiple runs., I just committed this. Thanks Ivan for the fix and Bikas for the review.]