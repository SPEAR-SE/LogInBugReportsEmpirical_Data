[thanks [~benoyantony][~cnauroth]replied on the mail list:
http://mail-archives.apache.org/mod_mbox/hive-user/201510.mbox/%3C737D5E42ADDB2C4E96DAF6A8900D75FE720EAB4D@szxema508-mbs.china.huawei.com%3E, Is UserGroupInformation.user OK for comparing?, Repeating my comment on the mailing list thread:

This sounds like potentially a dangerous change in the general case.  If there are 2 different
Subjects/UGIs with the same principal, but different credentials attached, then an equality
check on principal alone could cause a get from the FileSystem cache or IPC client connection
cache to return an instance with incorrect credentials.

This might be just a theoretical concern on my part.  For the case of proxy users, perhaps
an optimization is appropriate, since the proxied user's credentials are not in play anyway.

bq. Is UserGroupInformation.user OK for comparing?

My concerns above would apply to this proposal too.  I think of the Hadoop {{UserGroupInformation}} class as an abstraction over the JDK {{Subject}} and the Hadoop {{User}} class as an abstraction over the JDK {{Principal}}.  For 2 different instances of {{UserGroupInformation}}/{{Subject}}, even if they have the same {{User}}/{{Principal}}, they are not necessarily equal if there are different credentials attached to the 2 instances of {{UserGroupInformation}}/{{Subject}}.  That means there would be at least a theoretical possibility of introducing bugs related to pulling a {{FileSystem}} or RPC {{Connection}} out of the cache with the wrong credentials.  I don't know if any code paths really do this, but we need to be wary of it.  The effect of such a bug would be either an incorrect access denied, or worse, privilege escalation., Why cant we just use as below 
{code}  /**
   * Compare the subjects to see if they are equal to each other.
   */
  @Override
  public boolean equals(Object o) {
    if (o == this) {
      return true;
    } else if (o == null || getClass() != o.getClass()) {
      return false;
    } else {
      return subject.equals(((UserGroupInformation) o).subject);
    }
  }{code}


As per {{Subject.equals()}} javadoc it takes care of comparing both principals and credentials.
{code}  /**
     * Compares the specified Object with this {@code Subject}
     * for equality.  Returns true if the given object is also a Subject
     * and the two {@code Subject} instances are equivalent.
     * More formally, two {@code Subject} instances are
     * equal if their {@code Principal} and {@code Credential}
     * Sets are equal.{code}


bq. If there are 2 different Subjects/UGIs with the same principal, but different credentials attached, then an equality check on principal alone could cause a get from the FileSystem cache or IPC client connection cache to return an instance with incorrect credentials.

I think this problem also will be solved as well along with the one mentioned in description, i.e. creating two proxy users with same name. If the principals are same but credentials are different then subject.equals() will return false, so not re-using the connection of different credentials.

[~cnauroth], does that sounds fine?, [~vinayrpet], unfortunately, we cannot switch UGI to use value equality instead of reference equality.  The current behavior is by design as per HADOOP-6670.  Since UGI is mutable, use of value equality on the {{Subject}} had been causing other problems for the caches that use UGI as a part of the key.

Looking more closely at HADOOP-6670, I also see that tests were written as part of that patch, and those tests assert the current behavior.  I expect the changes proposed here would cause those tests to fail., Thanks [~cnauroth] for details. I agree, we cannot directly use equals, because UGI is mutable.

Just for the specific case of proxy users, How about using principal of the proxy User, and RealUser's subject ref comparison? 
Just like below
{code}public boolean equals(Object o) {
    if (o == this) {
      return true;
    } else if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserGroupInformation other = ((UserGroupInformation) o);
    if (getAuthenticationMethod() == other.getAuthenticationMethod()
        && getAuthenticationMethod() == AuthenticationMethod.PROXY) {
      User user = subject.getPrincipals(User.class).iterator().next();
      RealUser realUser =
          subject.getPrincipals(RealUser.class).iterator().next();
      User otherUser =
          other.subject.getPrincipals(User.class).iterator().next();
      RealUser otherRealUser =
          other.subject.getPrincipals(RealUser.class).iterator().next();
      return user.equals(otherUser) && realUser
          .getRealUser().subject == otherRealUser.getRealUser().subject;
    } else {
      return subject == other.subject;
    }
  }{code}

And for the hascode() can be like below 
{code}  @Override
  public int hashCode() {
    if (getAuthenticationMethod() == AuthenticationMethod.PROXY) {
      User user = subject.getPrincipals(User.class).iterator().next();
      RealUser realUser =
          subject.getPrincipals(RealUser.class).iterator().next();
      return user.hashCode()
          & System.identityHashCode(realUser.getRealUser().subject);
    }
    return System.identityHashCode(subject);
  }
{code}

Will this address concerns mentioned in above comments?, [~vinayrpet], I think in order to proceed with an optimization like that, we'd need to do an exhaustive review of both Hadoop and downstream ecosystem projects to check if they use any mutable operations on an instance returned from {{UserGroupInformation#createProxyUser}}.  Existing calls to {{addToken}} or {{addCredentials}} on a proxy user would make it difficult to proceed safely.

Interestingly, while browsing around, I noticed that Oozie maintains a cache of proxy user instances, perhaps for this very reason.  The class is {{org.apache.oozie.service.UserGroupInformationService}}.  This might imply that caching of proxy users is better handled as an application-specific concern, where that application knows the full lifecycle and usage of those instances, instead of at the core where we don't have that knowledge., I understand it.

bq. This might imply that caching of proxy users is better handled as an application-specific concern, where that application knows the full lifecycle and usage of those instances, instead of at the core where we don't have that knowledge.
So you mean to say, We leave the current behavior as is, in UGI, let the application cache the instance of proxy user if they want to re-use, based on their usecase. Right.?, Clarifying my earlier comment, I didn't mean to suggest that we should immediately close this as Won't Fix.  If there is an opportunity to optimize for proxy users at our layer and prevent the need for downstream applications to build a cache, then that's helpful for the whole ecosystem.

However, this is such a sensitive piece of logic that I'd want to see a diligent review across the ecosystem to check for mutable usage of proxy user UGI instances.  I'd also want to see a thorough code review from multiple committers.  I would not advocate committing a patch for this unless people are willing to put in that effort.

To summarize, I see the proposal as potentially helpful, but also highly risky.  Thanks!]