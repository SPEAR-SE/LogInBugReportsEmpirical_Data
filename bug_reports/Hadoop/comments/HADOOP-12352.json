[Does it make sense to not let the checkpoint time be equal to the clearing interval though? I'm not certain what benefit comes out of it anyway., Hello Harsh, 

Thanks for the comment.

The sleeping time is based on fs.trash.checkpoint.interval.

There is code to change the checkpoint interval to not be larger than the deletion interval in the constructor.
It could be changed to ensure that the checkpoint is no more than half the deletion interval.

One thing to consider is that currently the maximum time that you can recover a deleted file from trash is a fs.trash.checkpoint.interval + fs.trash.interval.

( With both trash defaults set to 24 hours, deleting a file one minute after midnight, that file gets placed into a checkpoint 24 hours later, 
and the checkpoint is deleted 24 hours later. )

Thanks,
Casey, These are changes to fix the checkpoint for all users to the same checkpoint time.  

I have tested those changes locally.  There are also changes to change the checkpoint to be a maximum of 1/2 of the deletion interval.

I have not yet tested those changes, but will be doing so over the weekend.
Let me know if that is what you were thinking about.

Thanks,
Casey, Thanks for explaining that Casey. It makes sense to constant-ise the checkpoint date for uniformity - and the fix for this looks alright to me.

It also may make sense that people want to set checkpoint intervals equal to the trash intervals. I think we can remove the change in the patch of capping it to 1/2 the value of intervals, but just add a small doc note in hdfs-default.xml to the trash checkpoint period property on what the behaviour could end up being if its set to equal of the trash clearing interval.

Would it also be possible to come up with a test-case for this? For example, load some files into trash such that multiple dirs need to be checkpointed, and issue a checkpoint (or await its lowered interval) and ensure only one date is observed before clearing occurs? It would help avoid regressions in future, just in case., Talked with Harsh about this offline.

Still working through a testcase.  We have talked about a method for delaying between the different checkpoints.
There are still difficulties, though , as the problem occurs when two different users delete files, and there is a delay between checkpointing each user's deletes.

However, TestTrash operates under the assumption that there is only one user that is creating files, and removing them for the trash.
( For example, the shell is used to getCurrentTrashDirectory, and that will only return one location.  For a test, I will either need to 
break Object Oriented walls, and create a path with users/d/.Trash/Current, or create a test that doesn't really test for the issue. )

Still trying to work on this.
, This is a simplified patch addressing only the defect, and not the testcases., I re-looked at the change and the problem, and although this can be difficult to test, the change does certainly fix the described changing-timestamp behaviour.

+1, will commit after verifying Jenkins result on the newer patch. Marking as Patch Available to trigger the build., \\
\\
| (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | pre-patch |  17m  9s | Pre-patch trunk compilation is healthy. |
| {color:green}+1{color} | @author |   0m  0s | The patch does not contain any @author tags. |
| {color:red}-1{color} | tests included |   0m  0s | The patch doesn't appear to include any new or modified tests.  Please justify why no new tests are needed for this patch. Also please list what manual steps were performed to verify this patch. |
| {color:green}+1{color} | javac |   7m 52s | There were no new javac warning messages. |
| {color:green}+1{color} | javadoc |   9m 45s | There were no new javadoc warning messages. |
| {color:green}+1{color} | release audit |   0m 23s | The applied patch does not increase the total number of release audit warnings. |
| {color:green}+1{color} | checkstyle |   1m  7s | There were no new checkstyle issues. |
| {color:green}+1{color} | whitespace |   0m  0s | The patch has no lines that end in whitespace. |
| {color:green}+1{color} | install |   1m 28s | mvn install still works. |
| {color:green}+1{color} | eclipse:eclipse |   0m 34s | The patch built with eclipse:eclipse. |
| {color:green}+1{color} | findbugs |   1m 56s | The patch does not introduce any new Findbugs (version 3.0.0) warnings. |
| {color:red}-1{color} | common tests |  22m 16s | Tests failed in hadoop-common. |
| | |  62m 33s | |
\\
\\
|| Reason || Tests ||
| Failed unit tests | hadoop.security.token.delegation.web.TestWebDelegationToken |
\\
\\
|| Subsystem || Report/Notes ||
| Patch URL | http://issues.apache.org/jira/secure/attachment/12750026/HDFS-8118.001.patch |
| Optional Tests | javadoc javac unit findbugs checkstyle |
| git revision | trunk / feaf034 |
| hadoop-common test log | https://builds.apache.org/job/PreCommit-HDFS-Build/12088/artifact/patchprocess/testrun_hadoop-common.txt |
| Test Results | https://builds.apache.org/job/PreCommit-HDFS-Build/12088/testReport/ |
| Java | 1.7.0_55 |
| uname | Linux asf902.gq1.ygridcore.net 3.13.0-36-lowlatency #63-Ubuntu SMP PREEMPT Wed Sep 3 21:56:12 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux |
| Console output | https://builds.apache.org/job/PreCommit-HDFS-Build/12088/console |


This message was automatically generated., Issue in the common tests is a bind issue in the unit test:  TestWebDelegationToken was a bind issue:

java.net.BindException: Address already in use

Is there a way to trigger the tests again to see if they clear independently?  That would provide some indication whether there is a timing issue with the TestWebDelegationToken test.

Thanks,
Casey, Thanks Casey,

You can run individual tests locally via {{mvn test -Dtest=TestWebDelegationToken}} for example. The jenkins build cannot retrigger specific tests, but you can always check past/future builds to also inspect if the test has been generally flaky, and search JIRA/emails to see if this has/is already been reported/being worked on.

It doesn't appear related to the behaviour fix we're making here, and the test does pass locally for me, so I'm committing this shortly., Committed to branch-2 and trunk. Thank you for the find and fix Casey! Hope to see many more., FAILURE: Integrated in Hadoop-trunk-Commit #8347 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/8347/])
HADOOP-12352. Delay in checkpointing Trash can leave trash for 2 intervals before deleting. Contributed by Casey Brotherton. (harsh: rev af78767870b8296886c03f8be24cf13a4e2bd4b0)
* hadoop-common-project/hadoop-common/CHANGES.txt
* hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/TrashPolicyDefault.java
, FAILURE: Integrated in Hadoop-Yarn-trunk #1036 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk/1036/])
HADOOP-12352. Delay in checkpointing Trash can leave trash for 2 intervals before deleting. Contributed by Casey Brotherton. (harsh: rev af78767870b8296886c03f8be24cf13a4e2bd4b0)
* hadoop-common-project/hadoop-common/CHANGES.txt
* hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/TrashPolicyDefault.java
, FAILURE: Integrated in Hadoop-Hdfs-trunk #2233 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/2233/])
HADOOP-12352. Delay in checkpointing Trash can leave trash for 2 intervals before deleting. Contributed by Casey Brotherton. (harsh: rev af78767870b8296886c03f8be24cf13a4e2bd4b0)
* hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/TrashPolicyDefault.java
* hadoop-common-project/hadoop-common/CHANGES.txt
, FAILURE: Integrated in Hadoop-Yarn-trunk-Java8 #308 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk-Java8/308/])
HADOOP-12352. Delay in checkpointing Trash can leave trash for 2 intervals before deleting. Contributed by Casey Brotherton. (harsh: rev af78767870b8296886c03f8be24cf13a4e2bd4b0)
* hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/TrashPolicyDefault.java
* hadoop-common-project/hadoop-common/CHANGES.txt
, FAILURE: Integrated in Hadoop-Mapreduce-trunk #2252 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/2252/])
HADOOP-12352. Delay in checkpointing Trash can leave trash for 2 intervals before deleting. Contributed by Casey Brotherton. (harsh: rev af78767870b8296886c03f8be24cf13a4e2bd4b0)
* hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/TrashPolicyDefault.java
* hadoop-common-project/hadoop-common/CHANGES.txt
, FAILURE: Integrated in Hadoop-Mapreduce-trunk-Java8 #303 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk-Java8/303/])
HADOOP-12352. Delay in checkpointing Trash can leave trash for 2 intervals before deleting. Contributed by Casey Brotherton. (harsh: rev af78767870b8296886c03f8be24cf13a4e2bd4b0)
* hadoop-common-project/hadoop-common/CHANGES.txt
* hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/TrashPolicyDefault.java
, FAILURE: Integrated in Hadoop-Hdfs-trunk-Java8 #295 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk-Java8/295/])
HADOOP-12352. Delay in checkpointing Trash can leave trash for 2 intervals before deleting. Contributed by Casey Brotherton. (harsh: rev af78767870b8296886c03f8be24cf13a4e2bd4b0)
* hadoop-common-project/hadoop-common/CHANGES.txt
* hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/TrashPolicyDefault.java
]