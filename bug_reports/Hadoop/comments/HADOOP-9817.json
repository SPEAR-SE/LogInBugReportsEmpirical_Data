[I moved this to HADOOP rather than HDFS, since the globbing code is in common., I'm just watching the same code.
Currently, globStatusInternal is implemented to invoke getFileStatus as follows.
{code}
    // seed the parent directory path, return if it doesn't exist
    try {
      matches.add(getFileStatus(new Path(baseDir)));
    } catch (FileNotFoundException e) {
      return patternHasGlob ? matches : null;
    }
{code}

But, I think it should invoke getFileLinkStatus not to replace symlink with target., I agree, Kousuke: we don't want to eliminate the resolve the symlink when it is on the end of the path.  Since this is used in the shell, I think we also want to preserve symlinks that are interior to the path.  For example when doing {{hadoop fs -ls /a/b}}, it would be nice to get back an entry like {{/a/b}}, even when {{/a}} or {{/a/b}} are symlinks.

This patch implements that.  I also unified the {{globStatus}} implementations, which were formerly separate between {{FileContext}} and {{FileSystem}}, Thank you for providing the patch, Colin!
I tried to apply your patch and met following 2 problems.

1. can not delete the link itself after deleting target.
When a path "/a/b" and "/a/link -> /a/b" exists, and then delete "/a/b", we can not delete "/a/link".
Before deleting "/a/b", I could delete "/a/link"

2. dfs -ls /symlink/ wouldn't list the entries.
I think dfs -ls behaves like unix's ls -l. If so, when "/a/symlink" is a symlink related to "/a/b" which is a directory, "dfs -ls /a/symlink/" ( ends with slash ) should show the entries included in "/a/b".

Perhaps, those problems are related to this jira, directly.
#1 may be related to HDFS-5021.
Are there any proper jira for #2 ?
If there are no jira for #2, I will create.
, Thanks for checking this out, Kousuke.  Those problems you listed are both essentially HDFS-5021 (FSShell doesn't support symlinks).  I would like to get this JIRA in soon so that HDFS-5021 can be fixed.

I will post a "combined" patch on HDFS-5021 in a minute or two so you can try out some FSShell operations., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12595492/HADOOP-9817.004.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 4 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:red}-1 core tests{color}.  The patch failed these unit tests in hadoop-common-project/hadoop-common hadoop-hdfs-project/hadoop-hdfs:

                  org.apache.hadoop.fs.TestFileUtil
                  org.apache.hadoop.fs.TestPath

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HADOOP-Build/2906//testReport/
Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/2906//console

This message is automatically generated., * fix tests that were relying on glob status returning things in a certain order.  The order that globStatus returns things in is undefined (the shell sorts paths before using them, to get around this).

* Add a blank space in files in hdfs, mapreduce, and yarn, to get the full Jenkins test run., Sorry, I meant to say "I will post a combined path on HDFS-4019."  That is the JIRA where we're making FSShell work with symlinks.  I would like to get this patch in before that, though, since HDFS-4019 relies on this JIRA (HADOOP-9817)., {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12595643/HADOOP-9817.005.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 6 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-common-project/hadoop-common hadoop-hdfs-project/hadoop-hdfs hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HADOOP-Build/2915//testReport/
Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/2915//console

This message is automatically generated., Hi Colin,

I like this single Globber class a lot more than the previous mess we were dealing with. The rewrite (with comments!) is much easier to follow.

Here are some comments for Globber:

- How about making this an abstract class, with subclasses for FileSystem and FileContext? Cleaner than having if statements.
- Whitespace is weird for these lines:
{code}
    ArrayList<FileStatus> results = 
        new ArrayList<FileStatus>(flattenedPatterns .size());
...
    for (String flatPattern : flattenedPatterns ) {
...
      Path absPattern =
          fixRelativePart(new Path(flatPattern .isEmpty() ? "." : flatPattern ));
{code}

- The comment around the {{sawWildcard}} if statement at the end could be beefed up. This looks like some kind of big compatibility wart for {{FileSystem}}, so it'd be helpful to see the expected cases laid out (and any more rationale, like the {{FSShell}}).
- Minor optimization, but we can break out of the {{components}} for loop early if {{candidates}} is empty.
- I think we can simplify this path expression:
{code}
            child.setPath(new Path(scheme, authority,
                new Path(candidate.getPath(),
                    new Path(child.getPath().getName())).toUri().getPath()));
            // equivalent to this?
            child.setPath(new Path(candidate.getPath(),
                    new Path(child.getPath().getName())));
{code}

- Shouldn't this be comparing against just the relevant component {{child.getPath().getName()}}? Also, could we even just push this filtering down to the NN by doing {{listStatus(Path, GlobFilter}}?
{code}
            if (globFilter.accept(child.getPath())) {
              newCandidates.add(child);
            }
{code}
- I don't understand this bit. If the flattened pattern is empty, we list the current working directory? This looks like a carry-over from FileSystem, where it looks like "." and other non-glob paths trigger some special logic via {{components = null}}. Probably warrants at least a comment.
- Also related, if we pass in some weird glob like \{a,\}/\{b,\}/\{c,\} that expands to an empty path multiple times, does this trigger listing the working directory multiple times?
{code}
      Path absPattern =
          fixRelativePart(new Path(flatPattern .isEmpty() ? "." : flatPattern ));
{code}
- Noticed that Globber does manual slash removal. Could we use {{URI#normalize}} for this? Normalization is supposed to happen as part of URI resolution, so the Path's underlying URI might already do this for you., bq. How about making this an abstract class, with subclasses for FileSystem and FileContext? Cleaner than having if statements.

I'll give it a try.  Hopefully it won't be that much longer.

bq. Minor optimization, but we can break out of the components for loop early if candidates is empty.

Ok.

bq. Whitespace is weird for these lines:

OK.

bq. I think we can simplify this path expression:

yeah.

bq. Shouldn't this be comparing against just the relevant component child.getPath().getName()

check {{GlobFilter#accept}}.  The first thing it does is call {{getName()}}.

bq. Also related, if we pass in some weird glob like {a,}/{b,}/{c,} that expands to an empty path multiple times, does this trigger listing the working directory multiple times?

The pattern you gave would expand to
{code}
$HOME/a/b/c
$HOME/a/b
$HOME/a/c
$HOME/a
$HOME/b/c
$HOME/b
$HOME
{code}

The home directory itself is only returned once because there's only one path through the subgroups that returns all empties.

Now if you had something like this
{code}
{,,}
{code}

Then you would be listing the home directory three times, because you requested it three times.

Similarly 
{code}
{a,a,a}
{code}

should map to 
{code}
/a
/a
/a
{code}

Nothing unusual here?

bq. Noticed that Globber does manual slash removal. Could we use URI#normalize for this? Normalization is supposed to happen as part of URI resolution, so the Path's underlying URI might already do this for you.

It's really more just going from a string to path components.  Normally the only component that gets removed is the first one (for /).  I agree that URI normalization should handle this, but this is kind of a belt-and-suspenders approach.

bq. The comment around the sawWildcard if statement at the end could be beefed up. This looks like some kind of big compatibility wart for FileSystem, so it'd be helpful to see the expected cases laid out (and any more rationale, like the FSShell).

I'll see if I can come up with a better comment.  And yes, as you guessed, it is a big compatibility wart (in my opinion at least.)

bq. I don't understand this bit. If the flattened pattern is empty, we list the current working directory?

Yeah.  Will add a comment., So I gave creating subclasses a try, but I don't think it's the way to go here.  The code was much longer due to the need to create explicit interfaces, and I also was not able to make the abstract functions private in the superclass.  They had to be package-private, which is more visibility than I wanted.  I added some better comments, and fixed the whitespace and other issues you pointed out.  I'm not sure that empty string -> home directory merits a comment, since it's how we handle things elsewhere.  Basically, the path '.' gets mapped to a URI with an empty path, which then gets mapped to the current working directory (which happens to be home in this case).  This is similar to how we treat all non-absolute paths, as you can see in the unit tests., Thanks Colin. The "." handling makes sense in retrospect, it's fine without a comment.

+1, will commit shortly., SUCCESS: Integrated in Hadoop-trunk-Commit #4217 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/4217/])
HADOOP-9817. FileSystem#globStatus and FileContext#globStatus need to work with symlinks. (Colin Patrick McCabe via Andrew Wang) (wang: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1510807)
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileContext.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileSystem.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/Globber.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/FSWrapper.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/FileContextTestWrapper.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/FileSystemTestWrapper.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestFileUtil.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestPath.java
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/fs/TestGlobPaths.java
, Committed to trunk and branch-2. Thanks again, Colin!, {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12596176/HADOOP-9817.006.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 6 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-common-project/hadoop-common hadoop-hdfs-project/hadoop-hdfs hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HADOOP-Build/2926//testReport/
Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/2926//console

This message is automatically generated., SUCCESS: Integrated in Hadoop-Yarn-trunk #293 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk/293/])
HADOOP-9817. FileSystem#globStatus and FileContext#globStatus need to work with symlinks. (Colin Patrick McCabe via Andrew Wang) (wang: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1510807)
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileContext.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileSystem.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/Globber.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/FSWrapper.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/FileContextTestWrapper.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/FileSystemTestWrapper.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestFileUtil.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestPath.java
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/fs/TestGlobPaths.java
, FAILURE: Integrated in Hadoop-Hdfs-trunk #1483 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/1483/])
HADOOP-9817. FileSystem#globStatus and FileContext#globStatus need to work with symlinks. (Colin Patrick McCabe via Andrew Wang) (wang: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1510807)
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileContext.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileSystem.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/Globber.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/FSWrapper.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/FileContextTestWrapper.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/FileSystemTestWrapper.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestFileUtil.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestPath.java
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/fs/TestGlobPaths.java
, FAILURE: Integrated in Hadoop-Mapreduce-trunk #1510 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/1510/])
HADOOP-9817. FileSystem#globStatus and FileContext#globStatus need to work with symlinks. (Colin Patrick McCabe via Andrew Wang) (wang: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1510807)
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileContext.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileSystem.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/Globber.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/FSWrapper.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/FileContextTestWrapper.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/FileSystemTestWrapper.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestFileUtil.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestPath.java
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/fs/TestGlobPaths.java
, Closing old tickets that are already part of a release.]