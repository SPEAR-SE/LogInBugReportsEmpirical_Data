[Trivial patch to fix the issue., Verified locally that clean and install work (in that order) on fresh m2 repo., Odd that prepare-resources worked. Per http://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html#Setting_Up_Your_Project_to_Use_the_Build_Lifecycle , it should be process-resources.

Uploading a new patch with process-resources.

Nuked hadoop-maven-plugins from .m2/repository, and ran mvn clean; mvn install successfully., +1, {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12566401/hadoop-9246.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-common-project/hadoop-common hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HADOOP-Build/2089//testReport/
Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/2089//console

This message is automatically generated., What about the annotation of the default phase in {{VersionInfoMojo}}?  Should we change that too?

{code}
@Mojo(name="version-info", defaultPhase=LifecyclePhase.INITIALIZE)
public class VersionInfoMojo extends AbstractMojo {
{code}

I think we still need to be explicit about the <phase> in the pom.xml files to prevent the HADOOP-9245 problem, but I'm wondering if we should update the annotation for consistency, or possibly just remove defaultPhase and require users to be specific.
, Chris, you right, we should., FYI, the HADOOP-9245 patch caused the built version info properties files to be incorrect.  Running in the compile phase populated the version info properties too late, and then the filtering left tokens unreplaced like ${version-info.build.time}.  Sorry for not catching this during my code review of HADOOP-9245.

Ultimately, this caused a test failure in YARN's {{TestNMWebServices}} while trying to parse the date returned from the web service.  I retested this with hadoop-9246.patch, which was binding to the prepare-resources phase, but it didn't fix the problem.

I'm uploading HADOOP-9246.2.patch, which binds to the generate-resources phase, which runs before resource filtering.  Once I did this, the version info properties files were populated correctly, and {{TestNMWebServices}} passed.  I've also removed the defaultPhase from the mojo annotation.
, Chris - thanks for correcting the patch. The latest patch looks good to me. +1, {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12566529/HADOOP-9246.2.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-common-project/hadoop-common hadoop-maven-plugins hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HADOOP-Build/2094//testReport/
Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/2094//console

This message is automatically generated., The -1 from Jenkins for lack of tests is expected, because this is a build script change., +1, Thanks Karthik and Chris!  I committed this to trunk., Integrated in Hadoop-trunk-Commit #3289 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/3289/])
    HADOOP-9246. Execution phase for hadoop-maven-plugin should be process-resources. Contributed by Karthik Kambatla and Chris Nauroth (Revision 1439620)

     Result = SUCCESS
jlowe : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1439620
Files : 
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/pom.xml
* /hadoop/common/trunk/hadoop-maven-plugins/src/main/java/org/apache/hadoop/maven/plugin/versioninfo/VersionInfoMojo.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/pom.xml
, Integrated in Hadoop-Yarn-trunk #111 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk/111/])
    HADOOP-9246. Execution phase for hadoop-maven-plugin should be process-resources. Contributed by Karthik Kambatla and Chris Nauroth (Revision 1439620)

     Result = SUCCESS
jlowe : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1439620
Files : 
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/pom.xml
* /hadoop/common/trunk/hadoop-maven-plugins/src/main/java/org/apache/hadoop/maven/plugin/versioninfo/VersionInfoMojo.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/pom.xml
, Integrated in Hadoop-Hdfs-trunk #1300 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/1300/])
    HADOOP-9246. Execution phase for hadoop-maven-plugin should be process-resources. Contributed by Karthik Kambatla and Chris Nauroth (Revision 1439620)

     Result = SUCCESS
jlowe : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1439620
Files : 
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/pom.xml
* /hadoop/common/trunk/hadoop-maven-plugins/src/main/java/org/apache/hadoop/maven/plugin/versioninfo/VersionInfoMojo.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/pom.xml
, Integrated in Hadoop-Mapreduce-trunk #1328 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/1328/])
    HADOOP-9246. Execution phase for hadoop-maven-plugin should be process-resources. Contributed by Karthik Kambatla and Chris Nauroth (Revision 1439620)

     Result = SUCCESS
jlowe : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1439620
Files : 
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/pom.xml
* /hadoop/common/trunk/hadoop-maven-plugins/src/main/java/org/apache/hadoop/maven/plugin/versioninfo/VersionInfoMojo.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/pom.xml
, I think a more correct way of fixing this (realized that while doing the protoc plugin, HADOOP-9117) is setting the default phase in the annotation of the plugin., addendum patch moving the phase binding to the plugin definition., Hi Alejandro,

The addendum patch would re-break HADOOP-9245 (mvn clean without running mvn install before fails).  Without specifying phase explicitly in the pom.xml, Maven needs to look at the mojo definition to determine default phase.  Unfortunately, if you don't have hadoop-maven-plugins installed yet, then there is no mojo definition to inspect, and mvn clean fails.

Of course, we can keep the change to add defaultPhase in the mojo code.  I think we just also need to keep <phase> in the pom.xml files.  +1 for just the change in {{VersionInfoMojo}}.

Thanks!
, arghh, got it, i was missing that. Closing it then.

I guess we have to do the same for the protoc plugin, HADOOP-9117, will test there.

]