[Linking to HADOOP-9817.  Before this patch, the bug was not present.  After this patch, the bug is present., I did some initial investigation on the issue.

I think the patch in HADOOP-9817 did not have the following check in the original {{FileSystem#globStatusInternal()}} method. The new relevant code is in {{Globber#glob()}}. As a result, Windows paths beginning with a drive letter no longer work with globStatus() method.

{code:java}
    // determine starting point
    int level = 0;
    String baseDir = Path.CUR_DIR;
    if (pathPattern.isAbsolute()) {
      level = 1; // need to skip empty item at beginning of split list
      baseDir = Path.SEPARATOR;
    }
{code}

I am not sure why we need the above check for Unix in original {{FileSystem#globStatusInternal()}} method. However, it does help to skip the drive letter that may appear in a Windows path. Without the equivalent logic, the code follows will fail for a path that begins with drive letter. 1) We divide the path into "components" separated by path separator; 2) we begin list from root, and add file/directory that matches the "component" for each "component" in the "components" list to the candidate list. For path begins with drive letter, the code will think the drive letter as some path on root directory; thus leads to the failure., Attaching a patch. I will run all the unit tests on Windows to verify the patch., Thanks for investigating this, Chuan.  The patch looks to me like it will work.  I confirmed that it fixes a few tests on Windows, such as {{TestJobClientGetJob}}.  I'm submitting this for a Jenkins run., [~chuanliu], do you think it would make more sense to fix this in {{Globber#getPathComponents}}, conditional on whether or not the pattern was absolute like in the old {{FileSystem#globStatusInternal}}?  Right now, this method doesn't seem to adhere to its contract stated in the comments.  (It doesn't skip the first path component.)  Perhaps we won't need a Windows-specific special case.

{code}
  /**
   * Translate an absolute path into a list of path components.
   * We merge double slashes into a single slash here.
   * The first path component (i.e. root) does not get an entry in the list.
   */
  private static List<String> getPathComponents(String path)
      throws IOException {
    ArrayList<String> ret = new ArrayList<String>();
    for (String component : path.split(Path.SEPARATOR)) {
      if (!component.isEmpty()) {
        ret.add(component);
      }
    }
    return ret;
  }
{code}
, {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12598995/HADOOP-9887-trunk.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-common-project/hadoop-common.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HADOOP-Build/3009//testReport/
Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/3009//console

This message is automatically generated., bq. do you think it would make more sense to fix this in Globber#getPathComponents, conditional on whether or not the pattern was absolute like in the old FileSystem#globStatusInternal?

One problem is that we will lost the drive letter from the components; and we will list directories from "/" instead of "/C:/". This has two effects: first, we could list from a wrong drive if the path passed in is not on the current drive; second, the result will be paths of the pattern without the drive letter. So I would still prefer the current approach. I can modify the comments to make it better fit the {{Globber#getPathComponents}} method. What do you think?, bq. One problem is that we will lost the drive letter from the components; and we will list directories from "/" instead of "/C:/".

That's a good point.  I missed this part, so thanks for the explanation.

Just one more minor nit on the patch: I think usage of {{"/"}} and {{"."}} in this {{Globber}} logic should be replaced with {{Path.SEPARATOR}} and {{Path.CUR_DIR}}.  With that change, I'll be +1., Thanks for the suggestion, Chris! Attach a new patch., +1 for the patch pending test-patch run from Jenkins, which I have triggered manually., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12599328/HADOOP-9887-trunk.2.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-common-project/hadoop-common.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HADOOP-Build/3010//testReport/
Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/3010//console

This message is automatically generated., {quote}
-1 tests included. The patch doesn't appear to include any new or modified tests.
Please justify why no new tests are needed for this patch.
Also please list what manual steps were performed to verify this patch.
{quote}

There are no new tests, but this patch is required for existing tests to pass on Windows.  Chuan and I have both verified the fix on Windows machines.

I plan to commit this later today., I've committed this to trunk and branch-2.  Thank you for the fix, Chuan!, SUCCESS: Integrated in Hadoop-trunk-Commit #4311 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/4311/])
HADOOP-9887. globStatus does not correctly handle paths starting with a drive spec on Windows. Contributed by Chuan Liu. (cnauroth: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1516608)
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/Globber.java
, SUCCESS: Integrated in Hadoop-Yarn-trunk #310 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk/310/])
HADOOP-9887. globStatus does not correctly handle paths starting with a drive spec on Windows. Contributed by Chuan Liu. (cnauroth: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1516608)
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/Globber.java
, SUCCESS: Integrated in Hadoop-Hdfs-trunk #1500 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/1500/])
HADOOP-9887. globStatus does not correctly handle paths starting with a drive spec on Windows. Contributed by Chuan Liu. (cnauroth: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1516608)
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/Globber.java
, FAILURE: Integrated in Hadoop-Mapreduce-trunk #1527 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/1527/])
HADOOP-9887. globStatus does not correctly handle paths starting with a drive spec on Windows. Contributed by Chuan Liu. (cnauroth: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1516608)
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/Globber.java
]