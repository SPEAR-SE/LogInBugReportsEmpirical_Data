[\\
\\
| (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | pre-patch |  14m 45s | Pre-patch trunk compilation is healthy. |
| {color:green}+1{color} | @author |   0m  0s | The patch does not contain any @author tags. |
| {color:red}-1{color} | tests included |   0m  0s | The patch doesn't appear to include any new or modified tests.  Please justify why no new tests are needed for this patch. Also please list what manual steps were performed to verify this patch. |
| {color:green}+1{color} | javac |   7m 30s | There were no new javac warning messages. |
| {color:green}+1{color} | javadoc |   9m 35s | There were no new javadoc warning messages. |
| {color:green}+1{color} | release audit |   0m 23s | The applied patch does not increase the total number of release audit warnings. |
| {color:green}+1{color} | checkstyle |   0m 22s | There were no new checkstyle issues. |
| {color:green}+1{color} | whitespace |   0m  0s | The patch has no lines that end in whitespace. |
| {color:green}+1{color} | install |   1m 38s | mvn install still works. |
| {color:green}+1{color} | eclipse:eclipse |   0m 36s | The patch built with eclipse:eclipse. |
| {color:green}+1{color} | findbugs |   0m 40s | The patch does not introduce any new Findbugs (version 3.0.0) warnings. |
| {color:green}+1{color} | tools/hadoop tests |   0m 14s | Tests passed in hadoop-openstack. |
| | |  35m 46s | |
\\
\\
|| Subsystem || Report/Notes ||
| Patch URL | http://issues.apache.org/jira/secure/attachment/12735755/HADOOP-12038.000.patch |
| Optional Tests | javadoc javac unit findbugs checkstyle |
| git revision | trunk / 5450413 |
| hadoop-openstack test log | https://builds.apache.org/job/PreCommit-HADOOP-Build/6850/artifact/patchprocess/testrun_hadoop-openstack.txt |
| Test Results | https://builds.apache.org/job/PreCommit-HADOOP-Build/6850/testReport/ |
| Java | 1.7.0_55 |
| uname | Linux asf906.gq1.ygridcore.net 3.13.0-36-lowlatency #63-Ubuntu SMP PREEMPT Wed Sep 3 21:56:12 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux |
| Console output | https://builds.apache.org/job/PreCommit-HADOOP-Build/6850/console |


This message was automatically generated., The change is too simple and may not need a unit test., 
bq. "The change is too simple "

Having spent 36 hours with a colleague tracking down a problem which turned out to be due to a patch "too trivial for tests", I now view any patch with that assertion as a warning sign:

http://steveloughran.blogspot.co.uk/2015/05/its-ok-to-submit-patches-without-tests.html

In the absence of a test, please give a state model describing the possible input states to the operation, listing what concurrent changes to the filesystem make take place between the exists() and delete() operation, then show how the patch completes successfully across all states. Yes, this is harsh, but it'll be good practise for the bigger tests, Hi [~steve_l], thank you for the comment. I should describe it more clear.

In hadoop-openstack module, it says there is not unit test but only functional test since it has dependency on swift server. If there is no swift server, all those unit tests in hadoop-openstack module will not be executed. 

I met this issue when I copying a large file to swift server. It returns to me this warning because the tmp file has already been deleted. 

I will try to add a unit test following the same pattern that previous unit tests have. , functional test in the openstack module is fine. 

What I do worry about is how this situation is developing -and whether it should be ignored at all.

if your tmp file was deleted during a large upload -that's a problem. You've just lost data. Silently skipping it is not the solution, Thanks, [~steve_l]. 

Actually, Openstack community has another version of swift driver for Hadoop. It supports files that are larger than 5GB, what I did is to add those functions to hadoop-openstack module. I don't know why Hadoo community does not have similar solution. The error was reported during my test process. 

Openstack driver is call Sahara. It breaks file (larger than 5GB) into a configurable chunks (default 4.6GB) and create a manifest fold in swift file system and point to those chunks. However, since swift "rename" process is to create a new file instead of changing original file's name (Because of Swift DHT using name to do the hash). It is inefficient for large file copying. I resolved this issue and will create issue and post patch later. 
, I didn't find data losing when it reports this warning. , 
bq. I don't know why Hadoop community does not have similar solution.

It does. Have you tried it? Or run {{TestSwiftFileSystemPartitionedUploads}}?


# The OS savannah driver is a fork of ours: they've diverged, and their has less/different tests
# the ASF bundled hadoop-openstack also supports partitioned uploads, as set by {{fs.swift.partion.size}}, which is also [set to 4608 MB|
https://github.com/apache/hadoop/blob/trunk/hadoop-tools/hadoop-openstack/src/main/java/org/apache/hadoop/fs/swift/http/SwiftProtocolConstants.java#L179]

One issue with partioned uploads, which is why we don't set it to small values (I experimented), is because those partitioned uploads break a fundamental requirement of a Hadoop FS:

h3. the length of a file from {{FileSystem.listStatus(Parent)}} matches the length of the file as returned by  {{FileSystem.listStatus(Path)}} and equals the actual length of the file.

When I wrote those tests, I saw different values —which is fundamentally against what Hadoop expects, especially in the job submission phase of queries, which get the lengths of the source data files and partition them up. If the listStatus command returns a smaller value, that whole job partition process breaks. One task could end up being allocated a 1KB file, while another 15 GB, because the listing information lied.

you can see this [in the test|https://github.com/apache/hadoop/blob/trunk/hadoop-tools/hadoop-openstack/src/test/java/org/apache/hadoop/fs/swift/TestSwiftFileSystemPartitionedUploads.java#L142], where we do a {{listStatus()}} but downgrade to a skip —rather than a failure— because its a fundamental behaviour of the version of Swift the client was written against. 

There's another issue in is that it's too easy to leak orphan artifacts in delete operations. To do it properly you'd need to look at every file before a delete to see if it is partitioned, and if so read the manifest & delete all the underlying files. 

If you can address these, with tests, then your patches would be welcome. However, start with what there is: the partitioning code that is there, the tests that are there to validate its behaviour. 
, Thank you very much, Steve. I will come up with a patch., Appologize, I will work on it tonight., Assign back to [~stevel@apache.org] who is professional and has more experiences in writing unit tests for Swift Driver. , assigning to [~airbots] as I have no time to work on this, | (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue} 13m 36s {color} | {color:blue} docker + precommit patch detected. {color} |
| {color:green}+1{color} | {color:green} @author {color} | {color:green} 0m 0s {color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:red}-1{color} | {color:red} test4tests {color} | {color:red} 0m 0s {color} | {color:red} The patch doesn't appear to include any new or modified tests. Please justify why no new tests are needed for this patch. Also please list what manual steps were performed to verify this patch. {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 10m 29s {color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 0m 13s {color} | {color:green} trunk passed with JDK v1.8.0_66 {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 0m 12s {color} | {color:green} trunk passed with JDK v1.7.0_79 {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green} 0m 12s {color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green} 0m 45s {color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green} 0m 43s {color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 0m 19s {color} | {color:green} trunk passed with JDK v1.8.0_66 {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 0m 16s {color} | {color:green} trunk passed with JDK v1.7.0_79 {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 0m 15s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 0m 13s {color} | {color:green} the patch passed with JDK v1.8.0_66 {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green} 0m 13s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 0m 13s {color} | {color:green} the patch passed with JDK v1.7.0_79 {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green} 0m 13s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green} 0m 9s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green} 0m 13s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green} 0m 0s {color} | {color:green} Patch has no whitespace issues. {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green} 0m 44s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 0m 15s {color} | {color:green} the patch passed with JDK v1.8.0_66 {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 0m 17s {color} | {color:green} the patch passed with JDK v1.7.0_79 {color} |
| {color:green}+1{color} | {color:green} unit {color} | {color:green} 0m 19s {color} | {color:green} hadoop-openstack in the patch passed with JDK v1.8.0_66. {color} |
| {color:green}+1{color} | {color:green} unit {color} | {color:green} 0m 16s {color} | {color:green} hadoop-openstack in the patch passed with JDK v1.7.0_79. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green} 0m 31s {color} | {color:green} Patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black} 31m 17s {color} | {color:black} {color} |
\\
\\
|| Subsystem || Report/Notes ||
| Docker | Client=1.7.0 Server=1.7.0 Image:test-patch-base-hadoop-date2015-10-26 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12735755/HADOOP-12038.000.patch |
| JIRA Issue | HADOOP-12038 |
| Optional Tests |  asflicense  javac  javadoc  mvninstall  unit  findbugs  checkstyle  compile  |
| uname | Linux dcd8c007166e 3.13.0-36-lowlatency #63-Ubuntu SMP PREEMPT Wed Sep 3 21:56:12 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | /home/jenkins/jenkins-slave/workspace/PreCommit-HADOOP-Build/patchprocess/apache-yetus-b9c369f/dev-support/personality/hadoop.sh |
| git revision | trunk / 56e4f62 |
| Default Java | 1.7.0_79 |
| Multi-JDK versions |  /usr/lib/jvm/java-8-oracle:1.8.0_66 /usr/lib/jvm/java-7-openjdk-amd64:1.7.0_79 |
| findbugs | v3.0.0 |
| JDK v1.7.0_79  Test Results | https://builds.apache.org/job/PreCommit-HADOOP-Build/7940/testReport/ |
| Max memory used | 228MB |
| Powered by | Apache Yetus   http://yetus.apache.org |
| Console output | https://builds.apache.org/job/PreCommit-HADOOP-Build/7940/console |


This message was automatically generated.

]