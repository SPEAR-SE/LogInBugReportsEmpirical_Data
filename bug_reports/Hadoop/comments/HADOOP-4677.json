[{code:title=FileSystem.java|borderStyle=solid}
  public BlockLocation[] getFileBlockLocations(FileStatus file, 
      long start, long len) throws IOException {
    if (file == null) {
      return null;
    }
    String[] name = { "localhost:50010" };
    String[] host = { "localhost" };
    return new BlockLocation[] { new BlockLocation(name, host, 0, len) };
  }
{code}

The last statement return statement should either be 

"return new BlockLocation[] { new BlockLocation(name, host, 0, file.getLen()) };"

 or

 "return new BlockLocation[] { new BlockLocation(name, host, start, len) };", Changed the call to return a block that contains the whole file., Same patch, for hadoop-trunk, Fixed the bug by returning one block covering the whole local file.

Added a unit test that verifies that the range returned by getFileBlockLocations cover the input (offset, length) region., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12394287/hadoop-4677-trunk.patch
  against trunk revision 719431.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    -1 patch.  The patch command could not apply the patch.

Console output: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/3620/console

This message is automatically generated., If start >= file.getLen(), should it return an empty array?  Also, should we check for invalid arguments, e.g. len < 0, start < 0, etc.?, +1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12394519/hadoop-4677-trunk.patch
  against trunk revision 719787.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs warnings.

    +1 Eclipse classpath. The patch retains Eclipse classpath integrity.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/3643/testReport/
Findbugs warnings: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/3643/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Checkstyle results: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/3643/artifact/trunk/build/test/checkstyle-errors.html
Console output: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/3643/console

This message is automatically generated., A couple nits on the test case:
* This should use
{code}
new Path(System.getProperty("test.build.data", "/tmp"), "work-dir")
{code}
for its temporary space, rather than hard-coding {{build/test/data/work-dir}}.
* TestCase is a subclass of Assert, isn't it? Is there a particular reason to use the static methods?

I also agree with Nicholas: if this is going to be corrected, it should handle its boundary conditions coherently., Added guard against negative start or len., Added boundary checking for input parameters. Updated unit test accordingly., bq.
    * This should use
 {code}
      new Path(System.getProperty("test.build.data", "/tmp"), "work-dir")
 {code}

Is it a common practice to store data under /tmp for unit tests? Might lead to problems if different developers share the same physical machine for testing. , bq. Is it a common practice to store data under /tmp for unit tests? Might lead to problems if different developers share the same physical machine for testing.
No; /tmp is used if test.build.data is undefined., Changed the default path to a sub directory under /tmp for unit test., +1, -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12394698/hadoop-4677-trunk.patch
  against trunk revision 720930.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs warnings.

    +1 Eclipse classpath. The patch retains Eclipse classpath integrity.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/3658/testReport/
Findbugs warnings: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/3658/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Checkstyle results: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/3658/artifact/trunk/build/test/checkstyle-errors.html
Console output: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/3658/console

This message is automatically generated., I just committed this. Thanks, Hong, Integrated in Hadoop-trunk #675 (See [http://hudson.zones.apache.org/hudson/job/Hadoop-trunk/675/])
    . Fix semantics of FileSystem::getBlockLocations to return
meaningful values. Contributed by Hong Tang.
]