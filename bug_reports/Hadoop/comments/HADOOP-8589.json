[I'm proposing a simple fix: mount the top level components of both test root dir (which is being done already) and home dir. In this case it would work fine in the described case. I tested it on a default Jenkins installation (1-node), on a Jenkins with slaves, on a MacOS laptop and on a Linux machine to verify it's addressing all kinds of home directories correctly., +1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12536143/HADOOP-8859.patch
  against trunk revision .

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 1 new or modified test files.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 eclipse:eclipse.  The patch built with eclipse:eclipse.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed unit tests in hadoop-common-project/hadoop-common.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HADOOP-Build/1195//testReport/
Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/1195//console

This message is automatically generated., HADOOP-8129 just brought back the test link, since HADOOP-8036 implicitly assumed that the tests are run under home and replaced the test link with the home link. So after HADOOP-8129 we have the two links.

Your patch basically changes how HADOOP-8036 adds the home link:

{code}
-    ConfigUtil.addLink(conf, homeDirRoot,
-        fsTarget.makeQualified(new Path(homeDirRoot)).toUri());
+    String homeDirFirstComponent = getDirFirstComponent(homeDirRoot);
+    ConfigUtil.addLink(conf, homeDirFirstComponent,
+        fsTarget.makeQualified(new Path(homeDirFirstComponent)).toUri());
{code}

Versus what was done in HADOOP-8036:

{code}
+    String homeDirRoot = fsTarget.getHomeDirectory()
+        .getParent().toUri().getPath();
+    ConfigUtil.addLink(conf, homeDirRoot,
+        fsTarget.makeQualified(new Path(homeDirRoot)).toUri());
{code}

So, the statement in your description: "The fix was provided in HADOOP-8036 but later it was reverted in HADOOP-8129" looks confusing, since your patch is basically changing how HADOOP-8036 adds the home link. Can you please clarify?
, The problem with the current code is that those 2 links can point to nested directories. In case of tests being run on a Jenkins master in it's default configuration one of the links the code will try to create will point to "/var" and another to "/var/lib", and the creation of the second link will fail with "Path /var already exists as dir; cannot create link". I'm proposing to use just the first component of the path for both links, i.e. cut off everything after "/var" in my example. It's already being done for the test link, and my patch is adding the same logic for the home link., bq. I'm proposing to use just the first component of the path for both links, i.e. cut off everything after "/var" in my example. It's already being done for the test link, and my patch is adding the same logic for the home link.

* Can you clarify that in the ticket description since it is misleading?
* Would it be better to check if (homeDirFirstComponent == testDirFirstComponent), and just add a single link, instead of adding the same link twice?, I'd like to see viewfs tests only accessing directories mounted under the build.test.dir.  There's been a number of recurring bugs centered around the mounting of the user's home dir.

Are you aware the trash test tries to blow away your home directory to verify it won't delete an ancestor of the trash dir?  Shining illustration of why everything should be under build.test.dir.

, I agree Daryn. Yes, TestViewFsTrash tries to delete the user's home directory!! Which raise the question of what if this testcase fails and it successfully deletes the user's home directory. I think this specific issue need to be prioritized and addressed in a separate ticket. , What I'm trying to say is if the viewfs tests are confined to build.test.dir, then the mount path problems _and_ the trash problem are both solved.  They are only orthogonal if you believe that viewfs should mount your home dir, and trust it to not munge the contents of you home directory, and/or your ~/.Trash if you are on OS X.  This is at least the third jira to "fix" mounting home dirs.  It always fixes for some & breaks for others.

Are there drawbacks to confining the tests to mounts within build.test.dir?, Providing an alternative patch:
1. An overloaded implementation of LocalFileSystem is used to a) override the tests root dir as the home dir b) validate that there are no "delete" operations executed out of the tests root dir
2. Just one link is created in the ViewFS mount table, the one for the tests root dir, +1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12536856/HADOOP-8589.patch
  against trunk revision .

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified test files.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 eclipse:eclipse.  The patch built with eclipse:eclipse.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed unit tests in hadoop-common-project/hadoop-common.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HADOOP-Build/1200//testReport/
Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/1200//console

This message is automatically generated., This is indeed still a problem on trunk:

/home/foo/bar

{code}
Running org.apache.hadoop.fs.viewfs.TestFSMainOperationsLocalFileSystem
Tests run: 49, Failures: 0, Errors: 49, Skipped: 0, Time elapsed: 1.28 sec <<< FAILURE!
{code}

/home/harsh

{code}
Running org.apache.hadoop.fs.viewfs.TestFSMainOperationsLocalFileSystem
Tests run: 49, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.574 sec
{code}

/foo

{code}
Running org.apache.hadoop.fs.viewfs.TestFSMainOperationsLocalFileSystem
Tests run: 49, Failures: 0, Errors: 49, Skipped: 0, Time elapsed: 1.29 sec <<< FAILURE!
{code}, Is that even with Andrey's latest patch applied?, No I didn't apply it, let me try today since I have the user env. anyway., Confirming - Applying Andrey's patch does solve the issue in all 3 cases (same as above, all org.apache.hadoop.fs.viewfs.TestFSMainOperationsLocalFileSystem tests passed in each count).

I've rebased his patch for trunk as it didn't apply cleanly (line offset issues). Lets have a jenkins run of the same again., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12546983/HADOOP-8589.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 3 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:red}-1 core tests{color}.  The patch failed these unit tests in hadoop-common-project/hadoop-common:

                  org.apache.hadoop.ha.TestZKFailoverController

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HADOOP-Build/1540//testReport/
Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/1540//console

This message is automatically generated., Daryn - Want to give this another look? Looks clean and passes on /foo, /home/harsh and /home/foo/bar as home directories., I like the sanity check in {{TestLFS#delete}}, but should the local fs maybe just use a chrooted fs to the build test dir?  That would help ensure that viewfs doesn't try to mount / - I think it does or used to do that., I had missed this jira and recently fixed this in another jira (will I will close as a duplicate).
This fixes the buig by linking the first component in tests and home dir (same as what others have suggested in this jira).
It also fixes the tests when run via eclipse where the test dir is relative to wd - ie it sets up wd correctly for viewfs.

I have cleaned up things so that all the set up is done in a single setup routing (one for viewFs and one viewFileSystem)

As part of this testing I found another bug for homedir and chrootedfs - also fixed this.

I have attached the patch here. , {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12548817/hadoop-8589-sanjay.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 6 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-common-project/hadoop-common.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HADOOP-Build/1615//testReport/
Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/1615//console

This message is automatically generated., Andrey
   in your patch why did you move TestLFS from TestViewFsTrash to ViewFileSystemTestSetup?
While ViewFileSystemTestSetup is used in many tests, TestLFS is used in only in ViewFileSystemTestSetup., I think we should separate the trash fix into a separate jira. I have extracted it out and, andrey if you agree I can create a new jira (assigned to you) and attach the trash patch to the new jira. , Sanjay, can you please describe the changes you're making in your patch? It's just so much bigger and seems to be fixing a part of the problem. Right now I don't see a necessity to do further work if the issue was fixed already and the patch was validated (see comments from Harsh)., My patch does the following (well commented in the patch it self)
# sets the mount points = 
{code}
+ * We set a viewFileSystems with 3 mount points: 
+ * 1) /<firstComponent>" of testdir  pointing to same in  target fs
+ * 2)   /<firstComponent>" of home  pointing to same in  target fs 
+ * 3)  /<firstComponent>" of wd  pointing to same in  target fs
+ * (note in many cases the link may be the same - viewFileSytem handles this)
{code}
# sets viewfs's wd  since otherwise if you runs the tests in eclipse it create the testdirs in your home dir.
# teardown ensures that junk is not left in your home dir (due to previous wd fix).
# the above changes are made for BOTH viewfs and viewFileSystem tests
# a couple of tests now calls the common setup routines
# the chroot test fails on mac - fixed that

I tried  doing some of the above in separate patches but then some tests were failing in either mac or linux.

My patch does not fix trash issue. I believe this should be separate patch (but if you prefer i can incorporate it here).
However the TestLFS should be moved back to where it was as I have indicated in a previous comment:
{quote}
in your patch why did you move TestLFS from TestViewFsTrash to ViewFileSystemTestSetup?
While ViewFileSystemTestSetup is used in many tests, TestLFS is used in only in ViewFileSystemTestSetup.
{quote}

If you prefer we can let your patch through (but move the TestLFS back to TestViewFsTrash since it is used only there).
I can then do the cleanup I want to do in a separate jira. , Is it possible to just make sure everything is rooted under build.test.data?  Then we may not need to worry about how deep the home dir is in the directory structure?, Maybe use a chroot fs over local fs to lock it down to build.test.data?, I had planned to make chroot fs a full fledged fs but it turns out it cannot and now it is used mostly internally in viewfs as a implementation. (I can't remember the reasons for why it cannot be made a full fledged file system.)
Are you suggesting this because trash test can delete your home dir? BTW  the issue of a trash test  deleting the home dir is also possible in the other trash tests (ie the non-viewfs trash tests).
I suggest we move the trash issue to another jira., {quote}
This is indeed still a problem on trunk:
/home/foo/bar
...
/home/harsh
..
/foo
..
{quote}
Harsh what did you mean in your comment above - did you run the tests with  the home directory or wd set to the above 3 paths?, Sanjay,
The idea of moving TestLFS into ViewFileSystemTestSetup was to make all tests related to viewfs use the same configuration with 1) home dir located under test dir 2) preventing any delete operations outside of test dir. I agree that using chroot fs would be even better - all the changes in the local FS would be locked under test dir, which is the right thing, but I really don't know any details on whether chroot is capable of that., bq. Harsh what did you mean in your comment above - did you run the tests with the home directory or wd set to the above 3 paths?

I created 3 users - bar, harsh and foo with those HOME dirs and cloned the patched trunk repo into each of them to run the tests from (i.e. in an su'd environment).

Lemme know if you'd like me to repeat the tests with your patch!, bq. The idea of moving TestLFS into ViewFileSystemTestSetup ...
*Only* the trash tests use TestLFS -- TestLFS is not used in any of the other viewfs tests.
ViewFileSystemTestSetup should not be setting up things that only ONE of the many tests that call it need.
Indeed TestLFS should move to a more general test-helper class because TestLFS is used in non-viewfs test - the other test trash (e.g. TestTrash) has its own copy of TestLFS. 

But your fix to TestLFS to ensure that there is no accidental delete during a TestTrash of home dirs is fine. I suggest we file a jira to make that change. If as part of that fix you also want to create a common TestLFS (for viewfs tests and for TestTrash) then that also makes sense.

At this stage I suggest we do the following
# file a jira to fix TestLFS - extract your fix from this patch in this jira.
# either 
** let a modified version of your patch without TestLFS go through and then I file another Jira to get my patch through (since it does more cleanup) OR 
** just let my patch go through in
, bq. just let my patch go through in

I'm fine with this if you're saying it does additional cleanup. I'm OK with extracting changes in TestLFS too., bq. Lemme know if you'd like me to repeat the tests with your patch!
Harsh, please repeat your  tests against the my patch  - thanks., Sorry for the delay:

With Sanjay's patch, with various HOMEDIRs: {{mvn clean install -Dtest=TestChRootedFileSystem,TestChRootedFs,TestFcMainOperationsLocalFs,TestFSMainOperationsLocalFileSystem}}:

* /home/harsh [Regular home dir]

Tests run: 174, Failures: 0, Errors: 0, Skipped: 0

{code}
Running org.apache.hadoop.fs.TestFSMainOperationsLocalFileSystem
Tests run: 49, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 2.583 sec
Running org.apache.hadoop.fs.viewfs.TestChRootedFileSystem
Tests run: 13, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.25 sec
Running org.apache.hadoop.fs.viewfs.TestChRootedFs
Tests run: 9, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.085 sec
Running org.apache.hadoop.fs.viewfs.TestFSMainOperationsLocalFileSystem
Tests run: 49, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 4.071 sec
Running org.apache.hadoop.fs.viewfs.TestFcMainOperationsLocalFs
Tests run: 54, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 4.279 sec
{code}

* /foo [For user 'foo']

Tests run: 277, Failures: 0, Errors: 206, Skipped: 0

{code}
Running org.apache.hadoop.fs.TestFSMainOperationsLocalFileSystem
Tests run: 49, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.701 sec
Running org.apache.hadoop.fs.viewfs.TestFcMainOperationsLocalFs
Tests run: 108, Failures: 0, Errors: 108, Skipped: 0, Time elapsed: 2.171 sec <<< FAILURE!
testFsStatus(org.apache.hadoop.fs.viewfs.TestFcMainOperationsLocalFs)  Time elapsed: 644 sec  <<< ERROR!
java.lang.StringIndexOutOfBoundsException: String index out of range: -1
	at java.lang.String.substring(String.java:1949)
	at org.apache.hadoop.fs.viewfs.ViewFsTestSetup.linkUpFirstComponents(ViewFsTestSetup.java:115)
	at org.apache.hadoop.fs.viewfs.ViewFsTestSetup.setupForViewFsLocalFs(ViewFsTestSetup.java:76)
	at org.apache.hadoop.fs.viewfs.TestFcMainOperationsLocalFs.setUp(TestFcMainOperationsLocalFs.java:42)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:616)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:27)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31)
	at org.junit.runners.BlockJUnit4ClassRunner.runNotIgnored(BlockJUnit4ClassRunner.java:79)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:71)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:49)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:236)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:252)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:141)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:112)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:616)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)
	at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)

testFsStatus(org.apache.hadoop.fs.viewfs.TestFcMainOperationsLocalFs)  Time elapsed: 645 sec  <<< ERROR!
java.lang.NullPointerException
	at org.apache.hadoop.fs.FileContextTestHelper.getAbsoluteTestRootPath(FileContextTestHelper.java:82)
	at org.apache.hadoop.fs.FileContextMainOperationsBaseTest.tearDown(FileContextMainOperationsBaseTest.java:105)
	at org.apache.hadoop.fs.viewfs.TestFcMainOperationsLocalFs.tearDown(TestFcMainOperationsLocalFs.java:49)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:616)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:37)
	at org.junit.runners.BlockJUnit4ClassRunner.runNotIgnored(BlockJUnit4ClassRunner.java:79)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:71)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:49)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:236)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:252)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:141)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:112)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:616)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)
	at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)
--truncated--
{code}

* /home/bar/eggs [For user 'eggs']

Tests run: 174, Failures: 0, Errors: 0, Skipped: 0

{code}
Running org.apache.hadoop.fs.TestFSMainOperationsLocalFileSystem
Tests run: 49, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.648 sec
Running org.apache.hadoop.fs.viewfs.TestChRootedFileSystem
Tests run: 13, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.268 sec
Running org.apache.hadoop.fs.viewfs.TestChRootedFs
Tests run: 9, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.094 sec
Running org.apache.hadoop.fs.viewfs.TestFSMainOperationsLocalFileSystem
Tests run: 49, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 2.967 sec
Running org.apache.hadoop.fs.viewfs.TestFcMainOperationsLocalFs
Tests run: 54, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 8.025 sec
{code}

Edit: Truncated command so that all web page loads do not need to serve back MBs of logs now that its no longer useful., [~sanjay.radia], can you please reassign to yourself? Thanks., Updated patch that fixes the bug related to home dir being at root (e.g. /joe).
I ran the tests though 3 different home dirs: /Users/foo, /foo, /x/y/foo, {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12552168/Hadoop-8589.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 6 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-common-project/hadoop-common.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HADOOP-Build/1707//testReport/
Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/1707//console

This message is automatically generated., {code}
+++ hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/ChRootedFileSystem.java
@@ -156,8 +156,11 @@ public Path getResolvedQualifiedPath(final Path f)
   
   @Override
   public Path getHomeDirectory() {
+    return super.getHomeDirectory();
+    /*
     return  new Path("/user/"+System.getProperty("user.name")).makeQualified(
           getUri(), null);
+          */
   }
{code}
The getHomeDirectory() in ChRootedFileSystem only calls super.getHomeDirectory().  Then, we can simply remove the entire method but not overriding it.  Patch looks good other than that., Update patch - incorporates Nicolas's feedaback and run successfully against homedir of /joe, /x/joe, /x/y/joe, +1 the new patch looks good., {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12552511/Hadoop-8589-v2.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 6 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-common-project/hadoop-common.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HADOOP-Build/1718//testReport/
Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/1718//console

This message is automatically generated., Integrated in Hadoop-trunk-Commit #2977 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/2977/])
    HADOOP-8589 ViewFs tests fail when tests and home dirs are nested (sanjay Radia) (Revision 1406939)

     Result = SUCCESS
sradia : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1406939
Files : 
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/DelegateToFileSystem.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/ChRootedFileSystem.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/ViewFileSystem.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/ViewFs.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/FileSystemTestHelper.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/viewfs/TestChRootedFileSystem.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/viewfs/TestChRootedFs.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/viewfs/TestFcMainOperationsLocalFs.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/viewfs/ViewFileSystemTestSetup.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/viewfs/ViewFsTestSetup.java
, Integrated in Hadoop-Yarn-trunk #30 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk/30/])
    HADOOP-8589 ViewFs tests fail when tests and home dirs are nested (sanjay Radia) (Revision 1406939)

     Result = SUCCESS
sradia : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1406939
Files : 
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/DelegateToFileSystem.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/ChRootedFileSystem.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/ViewFileSystem.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/ViewFs.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/FileSystemTestHelper.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/viewfs/TestChRootedFileSystem.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/viewfs/TestChRootedFs.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/viewfs/TestFcMainOperationsLocalFs.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/viewfs/ViewFileSystemTestSetup.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/viewfs/ViewFsTestSetup.java
, Integrated in Hadoop-Hdfs-trunk #1220 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/1220/])
    HADOOP-8589 ViewFs tests fail when tests and home dirs are nested (sanjay Radia) (Revision 1406939)

     Result = SUCCESS
sradia : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1406939
Files : 
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/DelegateToFileSystem.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/ChRootedFileSystem.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/ViewFileSystem.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/ViewFs.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/FileSystemTestHelper.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/viewfs/TestChRootedFileSystem.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/viewfs/TestChRootedFs.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/viewfs/TestFcMainOperationsLocalFs.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/viewfs/ViewFileSystemTestSetup.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/viewfs/ViewFsTestSetup.java
, Integrated in Hadoop-Mapreduce-trunk #1250 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/1250/])
    HADOOP-8589 ViewFs tests fail when tests and home dirs are nested (sanjay Radia) (Revision 1406939)

     Result = FAILURE
sradia : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1406939
Files : 
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/DelegateToFileSystem.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/ChRootedFileSystem.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/ViewFileSystem.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/ViewFs.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/FileSystemTestHelper.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/viewfs/TestChRootedFileSystem.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/viewfs/TestChRootedFs.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/viewfs/TestFcMainOperationsLocalFs.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/viewfs/ViewFileSystemTestSetup.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/viewfs/ViewFsTestSetup.java
, The reported issue is still not fixed. If tests are run on a Jenkins master node, with Jenkins using it's default home (/var/lib/jenkins), view fs tests fail with the error given in the description of this Jira., Apparently it's fixed in trunk only, while the "target versions" field points to 3.x/0.23/2.x. Can it be backported to 2.x/0.23 as well?, I merged this change to branch-2.]