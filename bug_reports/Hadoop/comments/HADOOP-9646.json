[+1 for the change. This change should be marked incompatible., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12587852/HADOOP-9646.001.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:red}-1 javac{color:red}.  The patch appears to cause the build to fail.

Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/2643//console

This message is automatically generated., Integrated in Hadoop-trunk-Commit #3927 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/3927/])
    HADOOP-9646: Inconsistent exception specifications in FileUtils#chmod (Revision 1493241)

     Result = FAILURE
cmccabe : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1493241
Files : 
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileUtil.java
, Colin, did you commit this patch. I see Jenkins flagging issue?, Integrated in Hadoop-trunk-Commit #3928 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/3928/])
    add CHANGES.txt description for HADOOP-9646. (Colin Patrick McCabe) (Revision 1493245)

     Result = FAILURE
cmccabe : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1493245
Files : 
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
, let's revert this and get jenkins to pass it, by the way, I assumed that it failed jenkins because of lack of tests.  however, looking again, I see that there was another issue in Hadoop-streaming., The patch looks fairly straight forward, so I am okay not reverting it and create unnecessary work. But making sure it compiles etc. should be fine., roll in fix from HADOOP-9647, If the build is indeed breaking, lets revert this patch and fix it all as a part of this change., Integrated in Hadoop-trunk-Commit #3929 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/3929/])
    revert HADOOP-9646 to fix hadoop-streaming compile issue (Revision 1493252)

     Result = SUCCESS
cmccabe : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1493252
Files : 
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileUtil.java
, {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12587901/HADOOP-9646.002.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-common-project/hadoop-common hadoop-tools/hadoop-streaming.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HADOOP-Build/2648//testReport/
Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/2648//console

This message is automatically generated., Integrated in Hadoop-Yarn-trunk #241 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk/241/])
    revert HADOOP-9646 to fix hadoop-streaming compile issue (Revision 1493252)
add CHANGES.txt description for HADOOP-9646. (Colin Patrick McCabe) (Revision 1493245)
HADOOP-9646: Inconsistent exception specifications in FileUtils#chmod (Revision 1493241)

     Result = SUCCESS
cmccabe : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1493252
Files : 
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileUtil.java

cmccabe : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1493245
Files : 
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt

cmccabe : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1493241
Files : 
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileUtil.java
, Integrated in Hadoop-Hdfs-trunk #1431 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/1431/])
    revert HADOOP-9646 to fix hadoop-streaming compile issue (Revision 1493252)
add CHANGES.txt description for HADOOP-9646. (Colin Patrick McCabe) (Revision 1493245)
HADOOP-9646: Inconsistent exception specifications in FileUtils#chmod (Revision 1493241)

     Result = FAILURE
cmccabe : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1493252
Files : 
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileUtil.java

cmccabe : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1493245
Files : 
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt

cmccabe : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1493241
Files : 
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileUtil.java
, Integrated in Hadoop-Mapreduce-trunk #1458 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/1458/])
    revert HADOOP-9646 to fix hadoop-streaming compile issue (Revision 1493252)
add CHANGES.txt description for HADOOP-9646. (Colin Patrick McCabe) (Revision 1493245)
HADOOP-9646: Inconsistent exception specifications in FileUtils#chmod (Revision 1493241)

     Result = FAILURE
cmccabe : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1493252
Files : 
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileUtil.java

cmccabe : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1493245
Files : 
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt

cmccabe : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1493241
Files : 
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileUtil.java
, can I get a +1 on the new iteration?  thanks., +1 for the patch.

However, on second thought, though this patch clearly cleans up the code, breaks the Java API compatibility (not wire compatibility). My thoughts are:
# This is a minor code cleanup, so lets not break the API compatibility. Lets deprecate this method and add a comment about using the other method instead of this. Remove this method in a later release.
# In 2.x release, we are striving for API stabilization. Given that applications need to recompile anyway against 2.x, lets make this change. Given compatibility issue is flagged during compile time, it should be easy for applications to change.

I am leaning towards (2) and hence going ahead with this Java API incompatibility. I want to make sure others do not have any concern with this., This should probably be a wider discussion. Removing/adding checked exceptions breaks source API compatibility, but not binary compatibility. So, users compiled code wouldn't break, but it might not compile. If a user is recompiling, I think it is okay to expect the calling code can be fixed to handle the changed signature.

As we can't deprecate the older version of the method, I believe we should treat these as a special case of source compatibility, which need not be deprecated before changing at major releases.

Along those lines, +1 for the patch, but would like to see a wider resolution first., bq. This should probably be a wider discussion. Removing/adding checked exceptions breaks source API compatibility, but not binary compatibility. So, users compiled code wouldn't break, but it might not compile. If a user is recompiling, I think it is okay to expect the calling code can be fixed to handle the changed signature

Users must recompile when they go to 2.1.0-beta. So the case where they do not compile does not arise.

bq. As we can't deprecate the older version of the method
I do not understand this part.

bq. Along those lines, +1 for the patch, but would like to see a wider resolution first.
What is the wider resolution you are looking for?, I was referring to the compatibility between 1.x and 2.x, and our policy of deprecating the method in one major release before removing it altogether in a subsequent release.

Let us say there is a method with signature 'a', and we want to change it to 'b'. To ensure compatibility and adhere to our deprecation rules, we deprecate 'a' and add 'b', as long as the method can be overloaded with both the signatures 'a' and 'b'. This usually works fine when the signature changes are in parameters. However, when the signature changes are in adding/removing Exceptions or the return type itself, it can't be overloaded - so we can't have two versions 'a' and 'b' of the method at the same time.

branch-1 and branch-2 have the following API:
{code}  
  public static int chmod(String filename, String perm
                          ) throws IOException, InterruptedException {
    return chmod(filename, perm, false);
  }
{code}

Ideally, we would like to do the following, but can't.
{code}  
  @Deprecated
  public static int chmod(String filename, String perm
                          ) throws IOException, InterruptedException {
    return chmod(filename, perm, false);
  }

  public static int chmod(String filename, String perm
                          ) throws IOException {
    return chmod(filename, perm, false);
  }
{code}

My proposal is to allow such API source incompatible changes in a major release, without the need for deprecation. Not just for this JIRA, but any future cases along the same lines.

, Hi Karthik, Suresh,

I think everyone wants this to go in, right?  Both you guys gave this a +1 earlier.

I think if we have wider points to make about compatibility, we should do it in a mailing list thread or another JIRA.  It's kind of out of scope for this, since it's just a small change.

Can I get a +1 on this to make it official?, {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12587901/HADOOP-9646.002.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:red}-1 javac{color:red}.  The patch appears to cause the build to fail.

Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/3496//console

This message is automatically generated., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12587901/HADOOP-9646.002.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:red}-1 javac{color:red}.  The patch appears to cause the build to fail.

Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/4479//console

This message is automatically generated., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12587901/HADOOP-9646.002.patch
  against trunk revision 1556f86.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

      {color:red}-1 javac{color}.  The applied patch generated 1229 javac compiler warnings (more than the trunk's current 1224 warnings).

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-client.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HADOOP-Build/5136//testReport/
Javac warnings: https://builds.apache.org/job/PreCommit-HADOOP-Build/5136//artifact/patchprocess/diffJavacWarnings.txt
Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/5136//console

This message is automatically generated., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12587901/HADOOP-9646.002.patch
  against trunk revision c3003eb.

    {color:red}-1 patch{color}.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/5903//console

This message is automatically generated., Cancelling patch, as it no longer applies]