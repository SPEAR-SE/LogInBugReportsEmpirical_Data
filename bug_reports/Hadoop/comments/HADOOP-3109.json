[Wouldn't it be easier to increase the sockets backlog size and remove the connect timeout?, > It should continue to accept connections and let the OS deal with limiting connections.
How can OS limit connections properly if application keeps accepting them?

There could be some global limit in the OS, but isn't that very harsh on everything else on the machine? Which parameter is this?

> The problem is that when there is a surge of requests, we would stop
> accepting connection and clients will get a connection failed (a change from old behavior).
timeout is removed in 2188.. if it is good for 2188, it good here too. Ideally we should just have 2188 :).

, 0.17? Yes!, > Wouldn't it be easier to increase the sockets backlog size and remove the connect timeout?
Increasing sockets backlog size might be a good solution. What should be a good backlog size? The connect timeout is already removed in HADOOP-2910., > What should be a good backlog size?

Perhaps this should be proportional to call queue?  Currently we queue 100 calls per handler with 10 handlers, or 1000 by default.  The backlog is currently 128.  So setting the backlog to the call queue length would make it 1000 by default.  Folks with large clusters increase the number of handlers to 50 or so, so they'd get a backlog of 5000.  Does that sound like enough, or should we use a multiple of this?
, Managing the backlog in a portable way is not easy. Many Linux versions will truncate the backlog to 128 (silently) if it is set higher, for example.


, That explains why more than 7 connect requests got served when I set the backlog length to be 1. Looks that Linux does not observe the backlog parameter., So what I plan to do is to have a thread that only accepts new connections and a threading that reads from accepted connections. Each thread has its own seclector. The accepting thread notifies the reading thread of the newly accepted connection through a pipe., I mark this jira to be resolved in 0.18. I will revert the patch to HADOOP-2910., > Many Linux versions will truncate the backlog to 128

The default max is 128, but it's easy to increase this:

  sudo sysctl -w net.core.somaxconn=2048

That doesn't seem too onerous.

We do need to limit the number of accepted connections to substantially less than the file handle limit.  Increasing the listen queue length is a cheap way to get headroom beyond this.
, This was incorporated into the ultimate resolution for 2910.
There is no independent patch or change.]