[I ran a simple program which just calls DefaultMetricsSystem.initialize against Hadoop 2.8.2 compared to 3.0.0 dist tarballs:

*2.8.2:

{code}
        683.416696      task-clock (msec)         #    1.793 CPUs utilized            ( +-  2.32% )
             1,790      context-switches          #    0.003 M/sec                    ( +-  1.07% )
                54      cpu-migrations            #    0.080 K/sec                    ( +- 17.64% )
            13,688      page-faults               #    0.020 M/sec                    ( +-  0.54% )
     2,216,866,739      cycles                    #    3.244 GHz                      ( +-  1.62% )
     2,299,332,469      instructions              #    1.04  insn per cycle           ( +-  1.21% )
       431,487,977      branches                  #  631.369 M/sec                    ( +-  1.17% )
        19,346,551      branch-misses             #    4.48% of all branches          ( +-  1.07% )

       0.381138028 seconds time elapsed                                          ( +-  2.52% )
{code}

*3.0.0:*

{code}
        924.881803      task-clock (msec)         #    1.902 CPUs utilized            ( +-  2.05% )
             1,962      context-switches          #    0.002 M/sec                    ( +-  0.73% )
                44      cpu-migrations            #    0.047 K/sec                    ( +- 11.15% )
            20,593      page-faults               #    0.022 M/sec                    ( +-  0.55% )
     3,042,371,457      cycles                    #    3.289 GHz                      ( +-  1.67% )
     3,165,586,053      instructions              #    1.04  insn per cycle           ( +-  1.41% )
       592,945,118      branches                  #  641.104 M/sec                    ( +-  1.36% )
        25,735,278      branch-misses             #    4.34% of all branches          ( +-  1.30% )

       0.486354791 seconds time elapsed                                          ( +-  2.04% )
{code}

Not all of the regression is due to the metrics system initialization, but with a small patch that avoids the "builder" APIs, I can recover some of the regression.

{code}
        885.276567      task-clock (msec)         #    2.009 CPUs utilized            ( +-  1.45% )
             1,608      context-switches          #    0.002 M/sec                    ( +-  2.02% )
                48      cpu-migrations            #    0.055 K/sec                    ( +- 12.98% )
            18,949      page-faults               #    0.021 M/sec                    ( +-  0.88% )
     2,908,533,684      cycles                    #    3.285 GHz                      ( +-  0.46% )
     3,045,577,520      instructions              #    1.05  insn per cycle           ( +-  0.66% )
       566,661,963      branches                  #  640.096 M/sec                    ( +-  0.67% )
        24,309,912      branch-misses             #    4.29% of all branches          ( +-  0.77% )

       0.440731241 seconds time elapsed                                          ( +-  2.98% )
{code}

It also loads fewer classes (1651 vs 1768) by eliminating usage of 'beanutil' and a bunch of ancillary classes in commons-configuration., Re-measured on trunk instead of 3.0.0, and also used 'taskset -c 1' to bind everything to one core to try to reduce variance:

2.8.2:
{code}
        535.052533      task-clock (msec)         #    0.918 CPUs utilized            ( +-  0.88% )
             3,055      context-switches          #    0.006 M/sec                    ( +-  1.02% )
                 1      cpu-migrations            #    0.002 K/sec                  
            12,644      page-faults               #    0.024 M/sec                    ( +-  0.06% )
     1,953,309,627      cycles                    #    3.651 GHz                      ( +-  0.16% )
     2,221,327,797      instructions              #    1.14  insn per cycle           ( +-  0.17% )
       417,919,978      branches                  #  781.082 M/sec                    ( +-  0.17% )
        18,726,810      branch-misses             #    4.48% of all branches          ( +-  0.19% )

       0.582855783 seconds time elapsed                                          ( +-  1.70% )
{code}

3.2 without patch:
{code}
        751.038338      task-clock (msec)         #    0.927 CPUs utilized            ( +-  0.43% )
             3,646      context-switches          #    0.005 M/sec                    ( +-  2.26% )
                 1      cpu-migrations            #    0.001 K/sec                    ( +- 25.00% )
            19,233      page-faults               #    0.026 M/sec                    ( +-  0.42% )
     2,735,218,817      cycles                    #    3.642 GHz                      ( +-  0.62% )
     3,218,012,767      instructions              #    1.18  insn per cycle           ( +-  0.54% )
       604,477,739      branches                  #  804.856 M/sec                    ( +-  0.48% )
        25,664,033      branch-misses             #    4.25% of all branches          ( +-  0.55% )

       0.810230298 seconds time elapsed                                          ( +-  0.98% )
{code}

3.2 with patch:
{code}
3.2 with patch:


        679.940626      task-clock (msec)         #    0.918 CPUs utilized            ( +-  1.14% )
             3,302      context-switches          #    0.005 M/sec                    ( +-  1.16% )
                 1      cpu-migrations            #    0.001 K/sec                  
            16,819      page-faults               #    0.025 M/sec                    ( +-  0.06% )
     2,375,283,537      cycles                    #    3.493 GHz                      ( +-  0.33% )
     2,722,724,476      instructions              #    1.15  insn per cycle           ( +-  0.27% )
       511,944,028      branches                  #  752.925 M/sec                    ( +-  0.24% )
        21,981,131      branch-misses             #    4.29% of all branches          ( +-  0.33% )

       0.740316578 seconds time elapsed                                          ( +-  0.96% )
{code}, Is this also why we get those messages in the s3a & wasb connectors about initialization of metrics?, I also noticed there were some weird error logs, but didn't investigate those. Just coming at this from a perf regression angle (trying to figure out various reasons why a sleep job with 1ms tasks regressed noticeably between Hadoop 2 and Hadoop 3), | (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue}  0m 33s{color} | {color:blue} Docker mode activated. {color} |
| {color:blue}0{color} | {color:blue} patch {color} | {color:blue}  0m  3s{color} | {color:blue} The patch file was not named according to hadoop's naming conventions. Please see https://wiki.apache.org/hadoop/HowToContribute for instructions. {color} |
|| || || || {color:brown} Prechecks {color} ||
| {color:green}+1{color} | {color:green} @author {color} | {color:green}  0m  0s{color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:red}-1{color} | {color:red} test4tests {color} | {color:red}  0m  0s{color} | {color:red} The patch doesn't appear to include any new or modified tests. Please justify why no new tests are needed for this patch. Also please list what manual steps were performed to verify this patch. {color} |
|| || || || {color:brown} trunk Compile Tests {color} ||
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 33m 44s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 29m 12s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  0m 19s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  1m  8s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} shadedclient {color} | {color:green} 12m 26s{color} | {color:green} branch has no errors when building and testing our client artifacts. {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  1m 33s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 55s{color} | {color:green} trunk passed {color} |
|| || || || {color:brown} Patch Compile Tests {color} ||
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green}  0m 48s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 27m 56s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green} 27m 56s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  0m 18s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  1m  8s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green}  0m  0s{color} | {color:green} The patch has no whitespace issues. {color} |
| {color:green}+1{color} | {color:green} shadedclient {color} | {color:green} 10m 43s{color} | {color:green} patch has no errors when building and testing our client artifacts. {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  1m 41s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 59s{color} | {color:green} the patch passed {color} |
|| || || || {color:brown} Other Tests {color} ||
| {color:green}+1{color} | {color:green} unit {color} | {color:green}  9m 49s{color} | {color:green} hadoop-common in the patch passed. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green}  0m 45s{color} | {color:green} The patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black}134m  7s{color} | {color:black} {color} |
\\
\\
|| Subsystem || Report/Notes ||
| Docker | Client=17.05.0-ce Server=17.05.0-ce Image:yetus/hadoop:abb62dd |
| JIRA Issue | HADOOP-15549 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12928506/hadoop-15549.txt |
| Optional Tests |  asflicense  compile  javac  javadoc  mvninstall  mvnsite  unit  shadedclient  findbugs  checkstyle  |
| uname | Linux f85ee0007c5d 3.13.0-137-generic #186-Ubuntu SMP Mon Dec 4 19:09:19 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | /testptch/patchprocess/precommit/personality/provided.sh |
| git revision | trunk / 9a9e969 |
| maven | version: Apache Maven 3.3.9 |
| Default Java | 1.8.0_171 |
| findbugs | v3.1.0-RC1 |
|  Test Results | https://builds.apache.org/job/PreCommit-HADOOP-Build/14796/testReport/ |
| Max. process+thread count | 1365 (vs. ulimit of 10000) |
| modules | C: hadoop-common-project/hadoop-common U: hadoop-common-project/hadoop-common |
| Console output | https://builds.apache.org/job/PreCommit-HADOOP-Build/14796/console |
| Powered by | Apache Yetus 0.8.0-SNAPSHOT   http://yetus.apache.org |


This message was automatically generated.

, bq. The patch doesn't appear to include any new or modified tests. Please justify why no new tests are needed for this patch. Also please list what manual steps were performed to verify this patch.

Existing tests cover this code path -- just using a different set of APIs. I'm not 100% sure the behavior didn't change, but if it did change, it probably isn't commonly used functionality (and likely going back to what it was in hadoop 2), LGTM, though I think we should wait for a review from someone who knows the code, [~mackrorysd] mind taking a look?, +1 I reviewed HADOOP-13660 so I take responsibility for that change :)

Verified manually properties are loaded properly, and also verified the same usage is limited to this file only. This change is more similar to pre-HADOOP-13660 so I feel safe about it., Committed to trunk. Thanks for the review!, SUCCESS: Integrated in Jenkins build Hadoop-trunk-Commit #14460 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/14460/])
HADOOP-15549. Upgrade to commons-configuration 2.1 regresses task CPU (todd: rev 59de9679540f6d0edfb34cf9f88e52b51d94b4f4)
* (edit) hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/impl/MetricsConfig.java
, FAILURE: Integrated in Jenkins build Hadoop-precommit-ozone-acceptance #20 (See [https://builds.apache.org/job/Hadoop-precommit-ozone-acceptance/20/])
HADOOP-15549. Upgrade to commons-configuration 2.1 regresses task CPU (todd: [https://github.com/apache/hadoop/commit/59de9679540f6d0edfb34cf9f88e52b51d94b4f4])
* (edit) hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/impl/MetricsConfig.java
]