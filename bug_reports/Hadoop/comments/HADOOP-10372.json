[Could we please update the wiki http://wiki.apache.org/hadoop/AmazonS3 before we commit this change?
, I agree.
I have never been able to get s3:// to work anyway. 
, I'm not sure about deprecation as S3 does some things that s3n doesn't. And if people have used it, they don't want to get logs telling them off.

Better just to correct documentation and examples to say "not generally used", Q: Is there concrete evidence that s3:// S3FileSystem actually continues to work? 

It is probably me but ...
I have tried several times over the last few months and have never been able to get it to work. 

> as S3 does some things that s3n doesn't

Q: What is the functionality that S3FileSystem provides that is not provided by NativeS3FileSystem? 

, Amazon EMR support says that they only uses NativeS3FileSystem within ElasticMapReduce. 
Case 165294761
A: On EMR both s3:// and s3n:// both map to the same implementation and they are using the same java class "org.apache.hadoop.fs.s3native.NativeS3FileSystem" . This is implemented with combination of AWS SDK for Java and open source 3rd party code as pointed by my colleague Fei. You can also confirm this by checking the job configuration XML file on an EMR cluster. If you have S3 logging enabled on an EMR cluster you can access this configuration file via s3://<bucket>/<JobFlow-ID>/jobs/job_XXXXXXXXXX_XXXX_conf.xml and you should be able to see the following lines: 
<property><name>fs.s3n.impl</name><value>org.apache.hadoop.fs.s3native.NativeS3FileSystem</value></property>
<property><name>fs.s3.impl</name><value>org.apache.hadoop.fs.s3native.NativeS3FileSystem</value></property>, bq. I'm not sure about deprecation as S3 does some things that s3n doesn't.

Interesting point, [~stevel@apache.org]. I'd be curious to understand more. What are the things that S3 does that are useful to users and that can't be done with S3N? If you think there is functionality in S3 because of which it should be kept around, would it make sense to consider implementing that in S3N and having a single option (if that implementation is possible)?, it implements an inode structure atop s3, therefore can perform atomic directory renames and deletes. The need for s3 and swifts blobstore clients to implement these bulk operations on a per-file basis can create race conditions in a cluster (alongside the existing consistency issues), which even s3:// cannot address. This cannot be corrected in a blobstore that does not offer these operations as atomic actions. 

Have a look at HADOOP-9361 to see more on what we really expect a filesystem to do -including contract tests that work with s3 as well as s3n, Thank you fro your explanation. 
In my (failed) struggles to get s3:// to work I saw references to inode in the S3FileSystem.java source and was puzzled. 
Presumably this inode structure is why I have been unable to get s3:// to work in my simple tests. 

Separately (but related), Amazon has implemented an EmrFileSystem which they are using for both s3:// and s3n:// in AWS EMR hadoop 2.2.0
EmrFileSystem is built on top of AWS SDK for Java instead of jets3t. 

, Closing this as a dupe.]