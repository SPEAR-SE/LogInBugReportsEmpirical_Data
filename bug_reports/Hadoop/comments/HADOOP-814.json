[1. Removes the global lock from the code path that processes a heartbeat.
2. Removes the global lock from the most common code path of the thread that periodically marks datanodes as "timedout".

Review comments welcome., = I like the idea of checking whether the data-node is alive before locking the whole namespace.

= I do not understand whether the removal of updateStats() is driven by the locking changes?
= As a result you calculate totalCapacity and totalRemaining every time a client requests it.
   I'm not worried that it'll take longer to sum fields for all nodes,
   I'm worried this it will lock the namespace for a longer period of time.
= NameNode.getStats() calculates totalCapacity twice, which gets expensive in your implementation.
        results[0] = namesystem.totalCapacity();
        results[1] = namesystem.totalCapacity() - namesystem.totalRemaining();
= Another bad result that you are not updating the totalLoad field,
   which disables load balancing on the cluster.
, A new patch that incorporates Konstantin's review comments.

The updateStats() method is removed because we do not want to acquire the global lock (just for computing statistics) while processing heartbeats.

The tradeoff is to compute the global stats from per-node stats when a user request to retrieve startistics is processed by the namenode. In the current code, every heartbeat request is acquiring the global lock to update the global statistics counters.
, 
If we do want to maintain variables totalCapacity, totalLoad etc we could make them Atomic longs or have a small lock around these variables. tatalCapacity() is called only when user requests but tatalLoad() is called in chooseTarget().

, This patch incorporates Raghu and Konstantin's review comments. The updating of statistics is protected by the heartbeat lock., 
Looks fine. Why do you assert on locking heartbeats instead of sychrnonizing on it?
, since totalLoad is an int. we don't need to lock while reading, right?, I think it is still better and cleaner to lock while reading totalLoad. (instead of relying on hardware architecture). Also, the overhead of locking it should be very very miniscule., locking overhead wont be much. Since heartbeat lock is also one of the 'hot' locks, most of the time it might wait for current heartbeat processing to complete.

, +1 on locking while reading totalLoad. Otherwise an inconsistent value may be read while totalLoad is still being accumulated., totalLoad is 'updated' as opposed to accumulated. ie, for every heartbeat, its value is increased or decreased a little bit. Actually chooseTarget() might wait for more than one heartbeats to finish sometimes. Only reason I think it matters is that it is in chooseTarget(), otherwise it does not matter. Anyway, I don't have any more arguments in favor of not locking.
, Tested conditions when data nodes arrive and dies while running load on the NameNode., +1, because http://issues.apache.org/jira/secure/attachment/12347142/heartbeatlock3.patch applied and successfully tested against trunk revision r487715., I just committed this.  Thanks, Dhruba!]