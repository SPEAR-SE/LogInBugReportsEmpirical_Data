[RPC Client$Connection.receiveResponse should catch all throwable and notifies the wating RPC clients before it dies., A patch for review., +1     Good find Hairong.  Patch looks good.  

I didn't see any other cases in the file where we've got a similar bug.  Would be great to use mockito to add test coverage., +1, code looks good. , Since we support only jdk 6+, why don't we just use {{new IOException(te)}} instead of {{(IOException)new IOException().initCause(te)}}, I just realized that this problem has already been fixed in the trunk. The fix is in Connection#run. Good job, the Hadoop community!, In one of my cluster i faced similar situation.
Clinet got OOME in Datastreamer thread, went for processDataNodeError. Here while creating datanode proxy connection, it got hanged.

here is the dump, attched as well.
{code}
"DataStreamer for file /ngcdn/report/file/toptraffic/20120120-102619003-91.log.tmp block blk_1326295273061_564234" daemon prio=10 tid=0xfec4e000 nid=0x38d0 in Object.wait() [0xffff1000]
   java.lang.Thread.State: WAITING (on object monitor)
	at java.lang.Object.wait(Native Method)
	at java.lang.Object.wait(Object.java:485)
	at org.apache.hadoop.ipc.Client.call(Client.java:940)
	- locked <0xb0a9d1e0> (a org.apache.hadoop.ipc.Client$Call)
	at org.apache.hadoop.ipc.RPC$Invoker.invoke(RPC.java:245)
	at $Proxy6.getProtocolVersion(Unknown Source)
	at org.apache.hadoop.ipc.RPC.getProxy(RPC.java:389)
	at org.apache.hadoop.ipc.RPC.getProxy(RPC.java:376)
	at org.apache.hadoop.ipc.RPC.getProxy(RPC.java:413)
	at org.apache.hadoop.hdfs.DFSClient.createClientDatanodeProtocolProxy(DFSClient.java:282)
	at org.apache.hadoop.hdfs.DFSClient$DFSOutputStream.processDatanodeError(DFSClient.java:3397)
	at org.apache.hadoop.hdfs.DFSClient$DFSOutputStream.access$2000(DFSClient.java:2809)
	at org.apache.hadoop.hdfs.DFSClient$DFSOutputStream$DataStreamer.run(DFSClient.java:3024)
	- locked <0xc55ad1e8> (a java.util.LinkedList)
{code}

I am in 20.2 version.
We already merged the fix what Hairong pointed here.
{code}
    try {
      while (waitForWork()) {// wait here for work - read or close
      // connection
      receiveResponse();
      }
    } catch (Throwable t) {
      // This truly is unexpected, since we catch IOException in receiveResponse
      // -- this is only to be really sure that we don't leave a client hanging
      // forever.
      LOG.warn("Unexpected error reading responses on connection " + this, t);
      markClosed(new IOException("Error reading responses", t));
    }
{code}

Looking at this, it should mark the connections closed and notify the waiting connections.

This did not happen. Some how this thread got exited. We can find this from attached dump. Only namenode IPC CLient thread is there. Can't see DataNode IPC Client thread.
Unportunately i ran with info logs and also not enabled console logs. I did not see any OOME from IPC Clinet therads in info logs.
If this thread silently exited with some exception, then it would have logged in console.

Only possible thing I see here is, throw OOME again from Throwable?
]