[Getting a PPC binary into maven is the obvious best choice, though it is clearly not on the leveldbjni roadmap.

Unless you can come up with a way which enables those tests to be skipped on PPC systems, you are going to have to locally build leveldbjni. 

, Solaris has exactly the same issue. If leveldbjni is built, where does it need to be installed in order to to be found?, Local maven repo or some other repo defined by maven's settings.xml., Thanks, it looks like all the necessary bits will build on Solaris, after some pummelling., OK, this problem is way worse than just test cases failing. (Although that bit does make it particularly hard to run nightlies on the ASF PowerPC box.)

leveldb is starting to go into several key bits of Apache Hadoop, especially in YARN.

Raising the priority of this, because this makes Hadoop pretty much unusable out of the box without building your own leveldb library and getting  java.library.path set appropriately.  

Right now, the known breakage is:

* NodeManager
* Timeline Server
* HDFS OIV
* ResourceManager
* JHS

So primarily YARN., FYI: the Linux libraries also have a dependency on the GCC runtime being present., I do have a recipe to get leveldb to build on Solaris, it needs a patch applying to do so, and some hand-copying of .so files after it is built.

The real problem however is leveldbjni. Because it includes .so and DLL files inside the JAR file, you need those libraries for *all* the platforms it can run on. You also have to force it to statically link against both snappy and leveldb. And there's no tarball containing the JNI code, you have to pull it down with maven. And then of course it's hard-coded to use a specific autoconf version, so you have to regen all that, and then you have to patch the POM so it knows about the new platforms you are adding.

Basically, if you don't have access to *all* the platforms it's exceedingly difficult to build. And even if you *do* have access to all the platforms, you are in a world of hurt anyway, building and then copying libraries and JAR files between platforms.

In my opinion, if there's any way leveldb can be removed as a dependency, it should be removed. It's pretty much toxic if you need to either build from ground up yourself, or are adding support for a new platform., FYI: The next version of leveldbjni will support ppc64le. https://github.com/fusesource/leveldbjni/pull/81, Trying to get leveldbjni community to make a new release but no luck so far.

https://github.com/fusesource/leveldbjni/issues/85, Pending LEGAL review, it looks like RocksDB has changed their license to be ASF compatible.  We should seriously consider switching to it, since it looks like they didn't divide their fat jar and slim jar dependencies.  (in other words, getting RocksDB working on something like ARM is going to be a lot easier.), Marking this as a blocker.  This really needs to get fixed prior to 3.0.0-beta1., Switching to RocksDB is really a good thing to do. It's a very active one unlike leveldb. The latest released ones 5.4.7 & 5.5.1 has PowerPC support (fat jar in maven central repo has Power native library). , Why is this a blocker? We've had multiple releases since 2015 when this was filed, trying to understand why this is escalated now., We didn't have a viable alternative until the licensing changed on rocksdb.  Now that we do, 3.0 is the time to do it., Can this be targeted at a future 3.x release, or does it need to be in beta?

What is our best guess at how long it would take to migrate to RocksDB?

My guess is that this is backwards compatible and would be more than 1.5 months of work (how far we are from the mid-Sept target release date), so I don't want to hold the beta1 release for this. I can add a 3.0.0 fix version if you'd like to retarget this at GA, or we can lower the priority., I'm dropping this to a major for now.]