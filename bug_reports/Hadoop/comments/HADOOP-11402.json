[{color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12688589/HADOOP-11402.001.patch
  against trunk revision 02b21b7.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:red}-1 findbugs{color}.  The patch appears to introduce 2 new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:red}-1 core tests{color}.  The patch failed these unit tests in hadoop-common-project/hadoop-common:

                  org.apache.hadoop.security.token.delegation.web.TestWebDelegationToken

Test results: https://builds.apache.org/job/PreCommit-HADOOP-Build/5329//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-HADOOP-Build/5329//artifact/patchprocess/newPatchFindbugsWarningshadoop-common.html
Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/5329//console

This message is automatically generated., Test failure seems unrelated. Passing in local. 
Test failing here due to socket bind failure., [~varun_saxena], Can we use Guava cache(https://code.google.com/p/guava-libraries/wiki/CachesExplained) for negative cache ?
Most of the added functionality is already encapsulated in  Guava cache.
You could also explore the possibility of using the existing Guava cache for +ve caching for negative caching also. , bq. Varun Saxena, Can we use Guava cache(https://code.google.com/p/guava-libraries/wiki/CachesExplained) for negative cache ?
Sure [~benoyantony], will check it., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12689151/HADOOP-11402.002.patch
  against trunk revision a164ce2.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:red}-1 findbugs{color}.  The patch appears to introduce 3 new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-common-project/hadoop-common.

Test results: https://builds.apache.org/job/PreCommit-HADOOP-Build/5343//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-HADOOP-Build/5343//artifact/patchprocess/newPatchFindbugsWarningshadoop-common.html
Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/5343//console

This message is automatically generated., [~benoyantony], have modified the code to use Guava cache. Kindly review.
I have also changed the description of the issue., Since the negativeCacheTimeout is already specified while building the cache, there is no benefit in storing expirationTime in each cache entry.
Instead, is it possible to keep it as a Set ?

An untested code snippet is below
 {code}
                  Set<String> negativeCache;
		 Cache<String, Boolean> tempNegativeCache = CacheBuilder.newBuilder()
				         .expireAfterWrite(negativeCacheTimeout, TimeUnit.MILLISECONDS)
				         .ticker(new TimerToTickerAdapter(timer))
				         .build();
		 negativeCache = Collections.newSetFromMap(tempNegativeCache.asMap());
{code}, [~benoyantony], this doesnt quite work.
Looking at the code of {{com.google.common.cache.LocalCache}}, set implementation doesnt seem likely. So an unnecessary value which will have to be stored for the key, Sorry, there was a mistake at my end. Will check this again., Updating patch which uses Set as suggested above, {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12689238/HADOOP-11402.003.patch
  against trunk revision 1454efe.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:red}-1 findbugs{color}.  The patch appears to introduce 2 new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-common-project/hadoop-common.

Test results: https://builds.apache.org/job/PreCommit-HADOOP-Build/5347//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-HADOOP-Build/5347//artifact/patchprocess/newPatchFindbugsWarningshadoop-common.html
Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/5347//console

This message is automatically generated., [~benoyantony], kindly review., Thanks [~varun_saxena]. 

The code looks clean. Few comments on the test code:

1. Fix the comment 
{code}
 // Ensure that Negative Cache deletion thread deletes stale entries
// from negative cache every 500 ms.
{code}
to 

{code}
// Ensure that stale entries are removed from negative cache  every 2 seconds.
{code}

2. Simplify statements

change from 
{code}
assertNotEquals(false, groups.getNegativeCache().contains("user1"));
{code}
to 
{code}
assertTrue(groups.getNegativeCache().contains("user1"));
{code}

Similarly, change from
{code}
assertEquals(false, groups.getNegativeCache().contains("user1"));
{code}
to 
{code}
assertFalse(groups.getNegativeCache().contains("user1"));
{code}
, {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12689748/HADOOP-11402.004.patch
  against trunk revision e7257ac.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:red}-1 findbugs{color}.  The patch appears to introduce 2 new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-common-project/hadoop-common.

Test results: https://builds.apache.org/job/PreCommit-HADOOP-Build/5355//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-HADOOP-Build/5355//artifact/patchprocess/newPatchFindbugsWarningshadoop-common.html
Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/5355//console

This message is automatically generated., The patch looks good. +1.
I'll commit this on monday if there are no other comments., Thanks [~benoyantony] for the review., FAILURE: Integrated in Hadoop-trunk-Commit #6811 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/6811/])
HADOOP-11402. Negative user-to-group cache entries are never cleared for never-again-accessed users. Contributed by Varun Saxena. (benoy: rev 53caeaa16b1450b54e994c77f5d0c8a767b88d57)
* hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/TestGroupsCaching.java
* hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/Groups.java
, Committed to trunk and branch-2.
Updated the title and type to reflect the original requirement.
Thank you, [~varun_saxena]., Thanks [~benoyantony] for the review and commit., FAILURE: Integrated in Hadoop-Yarn-trunk #799 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk/799/])
HADOOP-11402. Negative user-to-group cache entries are never cleared for never-again-accessed users. Contributed by Varun Saxena. (benoy: rev 53caeaa16b1450b54e994c77f5d0c8a767b88d57)
* hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/TestGroupsCaching.java
* hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/Groups.java
, FAILURE: Integrated in Hadoop-Yarn-trunk-Java8 #65 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk-Java8/65/])
HADOOP-11402. Negative user-to-group cache entries are never cleared for never-again-accessed users. Contributed by Varun Saxena. (benoy: rev 53caeaa16b1450b54e994c77f5d0c8a767b88d57)
* hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/Groups.java
* hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/TestGroupsCaching.java
, FAILURE: Integrated in Hadoop-Hdfs-trunk #1997 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/1997/])
HADOOP-11402. Negative user-to-group cache entries are never cleared for never-again-accessed users. Contributed by Varun Saxena. (benoy: rev 53caeaa16b1450b54e994c77f5d0c8a767b88d57)
* hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/Groups.java
* hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/TestGroupsCaching.java
, SUCCESS: Integrated in Hadoop-Hdfs-trunk-Java8 #62 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk-Java8/62/])
HADOOP-11402. Negative user-to-group cache entries are never cleared for never-again-accessed users. Contributed by Varun Saxena. (benoy: rev 53caeaa16b1450b54e994c77f5d0c8a767b88d57)
* hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/Groups.java
* hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/TestGroupsCaching.java
, FAILURE: Integrated in Hadoop-Mapreduce-trunk-Java8 #66 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk-Java8/66/])
HADOOP-11402. Negative user-to-group cache entries are never cleared for never-again-accessed users. Contributed by Varun Saxena. (benoy: rev 53caeaa16b1450b54e994c77f5d0c8a767b88d57)
* hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/TestGroupsCaching.java
* hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/Groups.java
, FAILURE: Integrated in Hadoop-Mapreduce-trunk #2016 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/2016/])
HADOOP-11402. Negative user-to-group cache entries are never cleared for never-again-accessed users. Contributed by Varun Saxena. (benoy: rev 53caeaa16b1450b54e994c77f5d0c8a767b88d57)
* hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/TestGroupsCaching.java
* hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/Groups.java
]