[Also, running "htop" on Linux, without anything else running, I've run the tool again. It started with 300 threads. Now it's at 524, 584. It doesn't seem to de-allocate threads, even if we're issuing a "flush ()" and "close ()" on the writers, which are instances of FSDataInput/OutputStreams. While I've written this it jumped to 644. So there's certainly a bug with how Hadoop does I/O threading., It ran for a while and died at 3881 threads. There's definitively a problem here in how Hadoop handles native threads. , Hi Catalin, 
 
Did you observe top report? Whether memory is growing for this process gradually?
Did you check the Jmap report? which objects are leaking?
It seems to me that native memory is growing....Which GC algorithm are you using for the process? Here is some info about that: http://mail-archives.apache.org/mod_mbox/hadoop-hdfs-user/201201.mbox/%3CCB3F0710.1D6DF%25knoguchi@yahoo-inc.com%3E
What is the thread-max support in your machine? # cat /proc/sys/kernel/threads-max, I monitored the code with htop. Over time it grew from: "Tasks: 35, 147 thr, 1 running" to "Tasks: 36, 3475 thr, 1 running". Once I killed it via "kill" the number of "thr" kept dropping to the same 147. So it seems it's a direct relation between the fact that the application allocates a big number of, I guess, native threads but does not kill them when done.

Also, I'm calling Runtime.getRuntime ().gc () every time the count of open streams is bigger than 5. Also, I'm explicitly flushing and closing these streams before removing them and before running the getRuntime ().gc () method. I'm not using any specific "GC" strategy, but the default one defined by openjdk-6. There are no other GC parameters on the command line when the program is run.

I'll be profiling the code today, using jmap and post the results here.

The output of cat /proc/sys/kernel/threads-max is: 48056
Still, the code only gets to about 3/4/5.000 "thr" (threads) in htop, reaches about 500M written records (or less by a few millions) and dies.

Here's a dump of jmap -histo:live pid:

 num     #instances         #bytes  class name
----------------------------------------------
   1:       1303640       96984920  [B
   2:        976162       69580696  [C
   3:        648949       31149552  java.nio.HeapByteBuffer
   4:        647505       31080240  java.nio.HeapCharBuffer
   5:        533222       12797328  java.util.HashMap$Entry
   6:        481595       11558280  java.lang.String
   7:          8086        4556064  [I
   8:         29805        3901240  <constMethodKlass>
   9:        177060        2832960  java.lang.Long
  10:         29805        2388304  <methodKlass>
  11:         58863        2354520  sun.misc.FloatingDecimal
  12:             1        2097168  [Lorg.h2.util.CacheObject;
  13:         50674        2041760  <symbolKlass>


Using "watch jmap -histo:live" to see reactions i get this on the CLI, every few million records:
OpenJDK Server VM warning: GC locker is held; pre-dump GC was skipped

Also, I see the "[B" class name, alternating between 20MB and 90MB, with both of them growing constantly over time.
Also, after running the code for 15 minutes, "Eden space" and "PS Old Generation" started growing like crazy. "Eden space" started with an acceptable 25MB while "PS Old Generation" something small also (10/25MB, can't remember).

Heap Configuration:
   MinHeapFreeRatio = 40
   MaxHeapFreeRatio = 70
   MaxHeapSize      = 792723456 (756.0MB)
   NewSize          = 1048576 (1.0MB)
   MaxNewSize       = 4294901760 (4095.9375MB)
   OldSize          = 4194304 (4.0MB)
   NewRatio         = 2
   SurvivorRatio    = 8
   PermSize         = 16777216 (16.0MB)
   MaxPermSize      = 134217728 (128.0MB)

Heap Usage:
PS Young Generation
Eden Space:
   capacity = 260177920 (248.125MB)
   used     = 104665056 (99.81637573242188MB)
   free     = 155512864 (148.30862426757812MB)
   40.22826225991814% used
From Space:
   capacity = 1441792 (1.375MB)
   used     = 1409864 (1.3445510864257812MB)
   free     = 31928 (0.03044891357421875MB)
   97.78553355823864% used
To Space:
   capacity = 1966080 (1.875MB)
   used     = 0 (0.0MB)
   free     = 1966080 (1.875MB)
   0.0% used
PS Old Generation
   capacity = 528482304 (504.0MB)
   used     = 31693784 (30.225547790527344MB)
   free     = 496788520 (473.77445220947266MB)
   5.9971324981205045% used
PS Perm Generation
   capacity = 16777216 (16.0MB)
   used     = 13510752 (12.884857177734375MB)
   free     = 3266464 (3.115142822265625MB)
   80.53035736083984% used

Hope  this ton of information helps you., Reading this article: http://blog.egilh.com/2006/06/2811aspx.html given that the latest JVM allocates about 1M per thread, means that the 3.000/4.000 threads are consistent to the node I'm running this on which has about 3GB available for "user-space". In theory I could reduce the stack size for native threads via -Xss, but that would only increase the number of threads, without actually resolving the problem. I think the problem is that Hadoop should let go of native threads that have already written their data to the HDFS. And I've checked, after writing a few million records, executing a "reader" class on that data, returns the data, meaning Hadoop got to write these to the HDFS, but watching "htop" the number of threads and memory for this code kept increasing and only when writing started. We're writing from one single thread (main).

Hadoop should let go of native threads or instruct the JVM to loose these threads once it knows it's written the corresponding data., {quote}
nd I've checked, after writing a few million records, executing a "reader" class on that data, returns the data, meaning Hadoop got to write these to the HDFS, but watching "htop" the number of threads and memory for this code kept increasing and only when writing started. We're writing from one single thread (main).
{quote}
You are not closing the file from application once your data write completed? When you open the stream to DFS, user only will start writing the data on that stream. Whatever data user writes, DataStreamer will writes to DNs. User only will will know, whether stream can be closed or not. Hadoop Client can not assume that user will not write any more data on that stream. Because, it is still possible that user can write some more data on that stream if stream still opens. Once that is closed automatically Streamer threads will exit. I am not sure you are about this lines or some other. Please correct if I understand ur point wrongly., It is also more likely that you're hitting a ulimit -n limit rather than an actual memory fill up. Hitting that limit will cause the JVM to exit with the same exception., Mark it as invalid please. We've found the culprit. The base writer was opening files but not closing them. It assumed that FileSystem.create (path, false) would append. A misinterpretation of the docs. We found "FileSystem.append" which does exactly what must be done in case a file exists. We were explicitly flushing and closing the streams. When we added a check to see if the file existed or not and opened a FSDataOutputStream via append, the number of threads and consumed memory kept well between 167 and 247, whenever our 'flushing & closing" scheme went in., Marking it as Invalid.]