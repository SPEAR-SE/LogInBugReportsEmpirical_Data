[class Block registers a factory in its static initializer.

So another thing which may occur here is:
class loading/initialization order is non-deterministic.

If class Block loads before this is called:
  WritableFactories.newInstance(Block.class)
then things work as expected, the Block factory is called.

Else 
WritableFactories does not find a registered factory for Block (yet),
tries to construct the instance reflectively,
and fails as explained in the bug.

In this case an alternate fix is to make sure that all
classes that have a factory method declared as a static initializer
are loaded before they are needed.
]