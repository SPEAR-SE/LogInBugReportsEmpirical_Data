[Attaching the last few lines of the output. , Looks like the problem lies with the _SYNC_ information passed by the job-tracker to the task-tracker. Upon restart, the job-tracker passes the size of task completion events that the jobtracker has rebuilt. Events at job-tracker's comprises of all the tasks (map/reduce/cleanup/setup) while the one at the tracker comprises of just the map tasks. Will upload a patch soon., Attaching a patch that removes the SYNC business and clears the tasktracker's task-completion-events list upon restart. This will force the tasktracker to pull back all the events. Result of test-patch
{code}
[exec] +1 overall.  
     [exec] 
     [exec]     +1 @author.  The patch does not contain any @author tags.
     [exec] 
     [exec]     +1 tests included.  The patch appears to include 3 new or modified tests.
     [exec] 
     [exec]     +1 javadoc.  The javadoc tool did not generate any warning messages.
     [exec] 
     [exec]     +1 javac.  The applied patch does not increase the total number of javac compiler warnings.
     [exec] 
     [exec]     +1 findbugs.  The patch does not introduce any new Findbugs warnings.
     [exec] 
     [exec]     +1 Eclipse classpath. The patch retains Eclipse classpath integrity.
     [exec] 
     [exec]     +1 release audit.  The applied patch does not increase the total number of release audit warnings.
{code}, Patch looks fine to me. But I dont think testcase changes are required.

, Tested the above patch on a 500node cluster and the reducers are no longer stuck and the job successfully completes after multiple JT restarts.
However, there is one thing to notice. The situation where "reducers wait for maps when none are running" still occurs. But due to the above patch,this situation is handled in a way that the reducers don't hang infinitely. Instead the TT pulls back all the events and completes the task successfully.
, Attaching a patch incorporating Amareshwari's comment. Fixed the bug in TestJobTrackerRestart. Now map-task-completion events in jobtracker is compared with the map-task-completion events with the task tracker.
{code}
[exec] +1 overall.  
     [exec] 
     [exec]     +1 @author.  The patch does not contain any @author tags.
     [exec] 
     [exec]     +1 tests included.  The patch appears to include 3 new or modified tests.
     [exec] 
     [exec]     +1 javadoc.  The javadoc tool did not generate any warning messages.
     [exec] 
     [exec]     +1 javac.  The applied patch does not increase the total number of javac compiler warnings.
     [exec] 
     [exec]     +1 findbugs.  The patch does not introduce any new Findbugs warnings.
     [exec] 
     [exec]     +1 Eclipse classpath. The patch retains Eclipse classpath integrity.
     [exec] 
     [exec]     +1 release audit.  The applied patch does not increase the total number of release audit warnings.
{code}, +1
Patch looks fine., Attaching a patch for branch 20., Resubmit patch to hudson, trunk test was broken by HADOOP-5409., Attaching a patch that fixes the test-case issue in 20. Result of test-patch
{code}
[exec] +1 overall.  
     [exec] 
     [exec]     +1 @author.  The patch does not contain any @author tags.
     [exec] 
     [exec]     +1 tests included.  The patch appears to include 3 new or modified tests.
     [exec] 
     [exec]     +1 javadoc.  The javadoc tool did not generate any warning messages.
     [exec] 
     [exec]     +1 javac.  The applied patch does not increase the total number of javac compiler warnings.
     [exec] 
     [exec]     +1 findbugs.  The patch does not introduce any new Findbugs warnings.
     [exec] 
     [exec]     +1 Eclipse classpath. The patch retains Eclipse classpath integrity.
     [exec] 
     [exec]     +1 release audit.  The applied patch does not increase the total number of release audit warnings.
{code}, I committed this to trunk and branch 0.20. Thanks, Amar !, Integrated in Hadoop-trunk #778 (See [http://hudson.zones.apache.org/hudson/job/Hadoop-trunk/778/])
    ]