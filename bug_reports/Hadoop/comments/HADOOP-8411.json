[Attaching patch., bq. renameAtomicWithOverride()
This handles the case of overriding an existing target with a new source file. What if target does not exist and rename should pass on its own?
, If the target always exists then perhaps rename the function to assert that?, Good point, will use Java's rename in case the target does not exist., Attaching new revision of the patch., Thanks! That works.
Sorry I forgot to add this in the initial comment. I get confused with the name renameAtomicWithOverride. The method is trying to rename a source to a potentially existing destination, as far as I see it., I don't think {{import org.apache.tools.ant.util.FileUtils}} is needed?

{{File tmpTargetFile = new File(target.getParentFile(), "original.tmp");}} will cause collisions if files are concurrently renamed in the same directory.  I'd do something more like {{new File(target+".tmp")}}.

Is {{renameAtomicWithOverride}} intended to handle the issue later commented "Files that are currently in use cannot be deleted on Windows"?  If so, won't the delete of the renamed target always fail?

I'm a bit leery of adding windows-specific behavior because those of us not running on windows may unknowingly break it.  Would it be possible to commonize the behavior by trying to do the rename, if that fails, try to do the double rename?  I'd also tag the renamed target with {{File#deleteOnExit()}} just in case an exception happens.

Is the windows conditional in {{TestStorageDirectoryFailure}} needed?  It seems like it should work for all platforms?

Have you tested that the ugi username changes in {{TestWebHdfsUrl}} won't break non-windows platforms?, Thanks Daryn, answers inline.

I don't think import org.apache.tools.ant.util.FileUtils is needed?
@Daryn: Fixed in next patch, thanks

File tmpTargetFile = new File(target.getParentFile(), "original.tmp"); will cause collisions if files are concurrently renamed in the same directory. I'd do something more like new File(target+".tmp").
@Daryn: It does not seem it can happen in this context, but it is a good change, so fixed.

Is renameAtomicWithOverride intended to handle the issue later commented "Files that are currently in use cannot be deleted on Windows"? If so, won't the delete of the renamed target always fail?
@Daryn: Actually not. Renaming into the existing file fails on Windows. In this case, while truncating the log, we are trying the rename the truncated tmp log file into the actual log (which might exist) in which case rename fails.

I'm a bit leery of adding windows-specific behavior because those of us not running on windows may unknowingly break it. Would it be possible to commonize the behavior by trying to do the rename, if that fails, try to do the double rename? I'd also tag the renamed target with File#deleteOnExit() just in case an exception happens.
@Daryn: In this case, I don't think I can get around with calling rename twice and I have to do this dance with files. Though, your concerns are valid, and are something we are also thinking about. At this point, goal is to make everything run on Windows, and as we move forward we'll see what can/should be improved.
@Daryn: It makes sense to add tmpTargetFile.deleteOnExit() if regular delete fails, thanks.

Is the windows conditional in TestStorageDirectoryFailure needed? It seems like it should work for all platforms?
@Daryn: I don't think it is required. It might make sense to leave it and test this scenario, as on Unix like systems users can go ahead and delete these files (OS is not preventing them from doing so). 

Have you tested that the ugi username changes in TestWebHdfsUrl won't break non-windows platforms?
@Daryn: Yes I have. Also, if you take a look at SecurityUtil.replacePattern { ...fqdn.toLowerCase() ... } you can see where the mismatch comes from., One correction:

Have you tested that the ugi username changes in TestWebHdfsUrl won't break non-windows platforms?
@Daryn: Missmatch comes from: WebHdfsFileSystem.toUrl -> new UserParam(ugi) -> ugi.getShortUserName(). And yes, the test passes on Linux., Attaching updated patch., please see some of the comments around File#deleteOnExit() on Google before deciding either ways. it seems that this has some undesirable characteristics., Thanks Bikas. I took a brief look, and I see some reported issues on memory leaks that date a few years back. I don't have a strong opinion either way, and given that this is not a mainstream scenario, my take is to keep it. Let me know if you think otherwise., Daryn, Bikas, have I addressed all of your concerns in the latest patch?, Looks ok to me. Thanks!, +1 I think it looks ok., Updated patch run through dos2unix, Committed patch. Thanks Ivan.]