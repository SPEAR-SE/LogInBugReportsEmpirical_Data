[I added a "Unknown Command" message instead of direct java execution as describe below.

{code}
$ bin/hadoop -version
Unknown Command : Type 'hadoop' without any parameters to see usage.

$ bin/hadoop asdf
Unknown Command : Type 'hadoop' without any parameters to see usage.

{code}, Submitting to TRUNK., > We should check whether the parameter is a valid class name before passing it to java.

I agree, but I don't see a way to do that in the bin/hadoop script.

In HADOOP-435 we discussed moving all the 'if [$COMMAND = ...]' logic into a Java class, so that bin/hadoop might always invoke something like org.apache.hadoop.util.ToolRunner, which contains the 'if ((command.equals(...)))' logic.  This is another good reason to do that, since, once you're in Java, it's easy to detect if a command names a class or not, and generate a nice error message if it does not.

So I think the best fix for this is to (at long last) move the command dispatch from bin/hadoop into a Java class., Class name is a QualifiedIdentifier defined in
http://java.sun.com/docs/books/jls/third_edition/html/syntax.html
(see also http://java.sun.com/docs/books/jls/third_edition/html/lexical.html#3.8)
Could we use a regular expression to check it?  For simplicity, we could ignore special cases like java keywords.

> So I think the best fix for this is to (at long last) move the command dispatch from bin/hadoop into a Java class.

I agree.  This is easier., Edward, valid class names are disallowed in your patch.  Then, something like "./bin/hadoop org.apache.hadoop.dfs.NNBench" won't work anymore.  We have to check for class names., >> So I think the best fix for this is to (at long last) move the command dispatch from bin/hadoop into a Java class.
>> Then, something like "./bin/hadoop org.apache.hadoop.dfs.NNBench" won't work anymore. We have to check for class names. 

Ooops. Sorry, i was overlooked a detail., -1 overall.  Here are the results of testing the latest attachment 
http://issues.apache.org/jira/secure/attachment/12381244/3281.patch
against trunk revision 645773.

    @author +1.  The patch does not contain any @author tags.

    tests included -1.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no tests are needed for this patch.

    javadoc +1.  The javadoc tool did not generate any warning messages.

    javac +1.  The applied patch does not generate any new javac compiler warnings.

    release audit +1.  The applied patch does not generate any new release audit warnings.

    findbugs +1.  The patch does not introduce any new Findbugs warnings.

    core tests +1.  The patch passed core unit tests.

    contrib tests +1.  The patch passed contrib unit tests.

Test results: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/2359/testReport/
Findbugs warnings: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/2359/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Checkstyle results: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/2359/artifact/trunk/build/test/checkstyle-errors.html
Console output: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/2359/console

This message is automatically generated., {code}
[root@udanax hadoop]# bin/hadoop
Usage: hadoop [--config confdir] COMMAND
where COMMAND is one of:
  namenode -format     format the DFS filesystem
...

[root@udanax hadoop]# bin/hadoop org.apache.hadoop.Tester arg1 arg2
org.apache.hadoop.Tester: command/class not found
[root@udanax hadoop]# bin/hadoop tester
tester: command/class not found
[root@udanax hadoop]# bin/hadoop org.apache.hadoop.dfs.NNBenchs
org.apache.hadoop.dfs.NNBenchs: command/class not found
[root@udanax hadoop]# bin/hadoop org.apache.hadoop.dfs.NNBench
NameNode Benchmark 0.4
08/05/02 11:05:11 INFO dfs.NNBench: Test Inputs: 
08/05/02 11:05:11 INFO dfs.NNBench:            Test Operation: none
08/05/02 11:05:11 INFO dfs.NNBench:                Start time: 2008-05-02 11:07:11,219
...

[root@udanax hadoop]# bin/hadoop dfs -ls /
Found 6 items
1    212752      2008-05-02 10:52  -rw-r--r--  root  supergroup  /CHANGES.txt
...
{code}, Hmm, Should vmArgs moved to java code, too?, Ideally there should be no per-command information in bin/hadoop.  When one adds or alters a command, one should only have to edit one file.  So the OPTS stuff should move into Java too, as should all the help strings.
, Thank you. BTW, How does this "$HADOOP_NAMENODE_OPTS" work? 
I can't find the related source code with it.

{code}
if [ "$COMMAND" = "namenode" ] ; then
  CLASS='org.apache.hadoop.dfs.NameNode'
  HADOOP_OPTS="$HADOOP_OPTS $HADOOP_NAMENODE_OPTS"
{code}, I think a better approach would be to observe java's return code and throw out an appropriate message? Apart from making the 'feature' of running classes from 'hadoop classpath' via 'hadoop clazz' more visible via docs/helpstrings., I'm going to close this as won't fix.  A few reasons:

1) Users actually really like being able to use arbitrary classes on the CLI.

2) As the hadoop code base gets more complex, it's going to be an increasingly long time to analyze the classpath to see if a method exists.

3) A lot of recent changes in shell code in trunk/3.x and the requirement that classes passed need to belong to a package have greatly reduced the amount of times this particular problem is hit.]