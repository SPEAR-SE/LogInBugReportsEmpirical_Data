[I'd like to do a minimal update on branch-2.8+ which doesn't force an update to jackson just for the AWS library; that makes it more traumatic.

Like you note, branch-2.6-2.7 is going to be harder., AWS SDK 1.11.0 declares that it expects Jackson 2.5+ https://mvnrepository.com/artifact/com.amazonaws/aws-java-sdk-core/1.11.0 ; not tested it on older versions yet, This is idiotic., {quote}
This is idiotic.
{quote}

I'm happy to have VP legal hear additional feedback on the decision. [here's the thread on legal-discuss@|https://lists.apache.org/thread.html/9627a9278d263378a2045d4bffccb6e83b9f01bb783c6dd6fa325faf@%3Clegal-discuss.apache.org%3E], bq. here's the thread on legal-discuss@
Thanks for the reference.

bq. I'm happy to have VP legal hear additional feedback on the decision.
No thanks. It's a waste of time already; no reason to compound it., too bad the license didn't say "be fluffy"; easier to argue compliance, Feel like assigning the homework of dealing with it to [~tdunning] though, "you broke it —you fix it", I have no problem with most of his reasoning. Swapping the org.json:json dep out reaches more users, faster... sure, this is dumb, but it's at least as dumb to argue about it. Blocking releases across the foundation by re-categorizing as CatX? That is avoidable nonsense., problem we are having is that there is code with the json libs inside their JAR, now we have upgrade problems, I hear you guys.

I have built a (mostly) compatible artifact and published it to maven central.  Pom insert is:

<dependency>
  <groupId>com.tdunning</groupId>
  <artifactId>json</artifactId>
  <version>1.0</version>
</dependency>

That won't help with all cases, especially where the source code was bodily lifted along with the irksome license.

, Chris,

Not sure what you mean by your comment here. I don't see that there is any choice to this. A growing number of our customers and prospects are using this issue to simply refuse to buy any software with this dependency.  As awareness of this issue grows, I expect this to become a major threat to the adoption of Apache software everywhere.

Yes, this *was* avoidable. But that was back when the JSON license was classified as anything other than Cat X. That led to adoption which led to the current mess. I don't think that the mess is avoidable at this point ... we all have to pitch in to clean it up. Hence me publishing a replacement.

, ted: how compatible is that artifact? I'm wondering if I could produce an org.json free version of the version of the AWS SDK used in 2.7.x, so be able to do 2.7.x releases with s3a support, while still retaining the same jackson version. For 2.6.x, I'd just cut the AWS SDK dependency and say "D/L and drop in aws-sdk version x.y for s3a, while knowing that s3a isn't considered stable in 2.6 anyway", If we look through the dependencies for instances of the class {{org.json.simple.JSONArray}} , we see it in {{com.googlecode.json-simple:json-simple}}, used in hadoop-hdfs-httpfs ; presumably came from here: https://code.google.com/archive/p/json-simple/


This is shipping with org.json code, already on our CP. It's what we should be using if we can switch over to it. Ted —have you looked at this?, 
That artifact should be *very* compatible.  Except where it isn't.

By that I mean that it should have limited coverage, but good fidelity where it has coverage. Almost all users of the json library use nothing more than JSON{Object,Array,Exception,Tokener,Stringer}. That is all there.

The json library from json.org has added things like JSONML (I think that is XML support), JSONWriter and a few other things.

That said, if you can say what you need, we can get it in very quickly. My only constraint on updates is that I want all code contributors to 

a) stay clean, don't copy the problem library even accidentally

b) agree to the Apache license (essentially like the Apache ICLA).

, Andrew Wang has pointed to: https://lists.apache.org/thread.html/bb18f942ce7eb83c11438303c818b885810fb76385979490366720d5@%3Clegal-discuss.apache.org%3E

bq. If you have been using it, and have done so in a *release*, AND there has been NO pushback from your community/eco-system, you have a temporary exclusion from the Cat-X classification thru April 30, 2017. At that point in time, ANY and ALL usage of these JSON licensed artifacts are DISALLOWED. You must either find a suitably licensed replacement, or do without. There will be NO exceptions.

This means that Hadoop 2.6-2.8 can continue to ship the older libs —with that disclaimer; with the jackson/aws SDK updates there's no issue in 2.9+ trunk. This gives us some headroom to come up with some shading.

What it doesn't do is let projects downstream, which weren't bundling the AWS SDK, to start doing so., I'm going to remove the 3.0.0-alpha2 affects version since the AWS and jackson deps have been upgraded in trunk

This is also just a stay of execution. We can keep spinning out maintenance releases until April, but we really need to get 2.8 (and 2.9?) out so we can retire the 2.6 and 2.7 lines.]