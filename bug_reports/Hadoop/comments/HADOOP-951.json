[chooseTargets() iterates over the heartbeats list. Looks like somebody else modified the list during iteration.
chooseTargets() should synchronize on the heartbeats list, since we have the heartbeats lock separate from
the global namespace lock now.
We should also check other places where heartbeats is used, and make sure both locks are enforced., pendingTransfers currently iterates over all the elements of 'heartbeats'. Instead can it be changed to invoke heartbeats.get(i) and then catch the ConcurrentModificationException? Maybe we can get away with not locking 'heartbeats' in the most frequently traveled codepath., Is there any reason that the heartbeats need to be a list? If not, then we could use java.util.concurrent.ConcurrentHashMap as a set (use a constant value). This would give much more concurrency than locking the whole collection. This change would also be beneficial for the other instance maps in FSNamesystem., Catching ConcurrentModificationException is not acceptable. You are not guaranteed to always get the exception. The race condition needs to be identified and prevented.

I haven't used the java.util.concurrent containers yet, so I don't know what the gotchas are. At the very least, we need to be conscious of memory usage in the namenode., One of the differences in using ConcurrentHashMap is that it offers slightly weaker semantics for some Map operations. For example, iterators are "weakly consistent" - that is, they don't freeze the collection while it is being iterated over. Often this doesn't matter - indeed it's one of the trade offs that we might be looking for - but it is worth bearing in mind.

Brian Goetz has written extensively about the concurrency collections. These are worth a read (despite being a few years old): http://www-128.ibm.com/developerworks/java/library/j-jtp07233.html and http://www-128.ibm.com/developerworks/java/library/j-jtp08223/
His book, Java Concurrency in Practice (http://jcip.net/) is good and very detailed.

I guess we can find out memory usage by running some benchmarks. I haven't seen anything on the web comparing ConcurrentHashMap to HashMap in terms of memory usage., IMO this issue is the race condition bug and should be fixed in a traditional way.

ConcurrentHashMap is an interesting concept, we should definitely take it into consideration
when we decide to optimize our data structures and locking.
I cannot estimate the amount of changes the name-node code will require at this point
if we introduce ConcurrentHashMap because of its different semantics.
And we should not forget in chooseTargets() the name-node is under the global lock.
Fine grained locking under that lock seems to be a waste of resources.
, The rack-awareness patch in HADOOP-692 completely rewrites chooseTargets method. Do we still want to fix this bug ? Because it would be irrelevant when that patch is applied., I saw another instance of this one. The unit test caused the namenode to to into a 99% CPU. This thread has the FSnamesystem lock and was looping. All datanodes timed out.  The stack trace shows that thread 27163 is using all 99% CPU and the state is "IN_JAVA". But it does not show the stack trace in detail. I am assuming that this is another case of using a HashMap without appropriate locking. The complete stack trace is attached here. Here is the Java bug that explains this behaviour:

http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6423457
, This problem does not happen any more because this entire section has been re-written.]