[bq. The assumption is that the groups mapping is used only in NameNode and that using a local credential file is not a problem.

Group mapping is used all over the place just in Hadoop due to the ACL system in hadoop-common!  Argh!, v01: Turns out that LdapGroupsMapping must remove a provider URI if it's a {{jceks://}}. So I expanded {{ProviderUtils#excludeIncompatibleCredentialProviders}}. If the class type passed in is a/subclass of {{FileSystem}}, the logic remains the same; otherwise, if the class type is a/subclass of {{AbstractJavaKeyStoreProvider}}, use it to trim provider URI differently.

Note: this patch changes the method signature of {{ProviderUtils#excludeIncompatibleCredentialProviders}} from {{Class<? extends FileSystem>}} to {{Class}}., | (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue}  0m 20s{color} | {color:blue} Docker mode activated. {color} |
| {color:green}+1{color} | {color:green} @author {color} | {color:green}  0m  0s{color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:green}+1{color} | {color:green} test4tests {color} | {color:green}  0m  0s{color} | {color:green} The patch appears to include 1 new or modified test files. {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green}  7m 25s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green}  7m 23s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  0m 24s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  1m  1s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green}  0m 12s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  1m 22s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 46s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green}  0m 40s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green}  7m 19s{color} | {color:green} the patch passed {color} |
| {color:red}-1{color} | {color:red} javac {color} | {color:red}  7m 19s{color} | {color:red} root generated 1 new + 709 unchanged - 0 fixed = 710 total (was 709) {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  0m 24s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  0m 57s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green}  0m 13s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green}  0m  0s{color} | {color:green} The patch has no whitespace issues. {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  1m 35s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 46s{color} | {color:green} the patch passed {color} |
| {color:red}-1{color} | {color:red} unit {color} | {color:red}  8m  5s{color} | {color:red} hadoop-common in the patch failed. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green}  0m 23s{color} | {color:green} The patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black} 40m 39s{color} | {color:black} {color} |
\\
\\
|| Reason || Tests ||
| Failed junit tests | hadoop.security.TestLdapGroupsMapping |
\\
\\
|| Subsystem || Report/Notes ||
| Docker |  Image:yetus/hadoop:9560f25 |
| JIRA Issue | HADOOP-13548 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12829231/HADOOP-13548.001.patch |
| Optional Tests |  asflicense  compile  javac  javadoc  mvninstall  mvnsite  unit  findbugs  checkstyle  |
| uname | Linux 9985652cc432 3.13.0-36-lowlatency #63-Ubuntu SMP PREEMPT Wed Sep 3 21:56:12 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | /testptch/hadoop/patchprocess/precommit/personality/provided.sh |
| git revision | trunk / b8a30f2 |
| Default Java | 1.8.0_101 |
| findbugs | v3.0.0 |
| javac | https://builds.apache.org/job/PreCommit-HADOOP-Build/10543/artifact/patchprocess/diff-compile-javac-root.txt |
| unit | https://builds.apache.org/job/PreCommit-HADOOP-Build/10543/artifact/patchprocess/patch-unit-hadoop-common-project_hadoop-common.txt |
|  Test Results | https://builds.apache.org/job/PreCommit-HADOOP-Build/10543/testReport/ |
| modules | C: hadoop-common-project/hadoop-common U: hadoop-common-project/hadoop-common |
| Console output | https://builds.apache.org/job/PreCommit-HADOOP-Build/10543/console |
| Powered by | Apache Yetus 0.4.0-SNAPSHOT   http://yetus.apache.org |


This message was automatically generated.

, Found a bug in the code, so cancel the patch., v02:
Fixed three bugs:
    (1) A TestLdapGroupsMapping test case used jceks://. Changed it to localjceks.
    (2) The ProviderUtils.excludeIncompatibleCredentialProviders had a bug
    identifying correct class corresponds to a scheme.
    (3) LdapGroupsMapping should also exclude user:// scheme., | (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue}  0m 24s{color} | {color:blue} Docker mode activated. {color} |
| {color:green}+1{color} | {color:green} @author {color} | {color:green}  0m  0s{color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:green}+1{color} | {color:green} test4tests {color} | {color:green}  0m  0s{color} | {color:green} The patch appears to include 2 new or modified test files. {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green}  9m 16s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green}  8m 22s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  0m 28s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  1m  9s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green}  0m 14s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  1m 38s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 49s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green}  0m 46s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green}  8m 15s{color} | {color:green} the patch passed {color} |
| {color:red}-1{color} | {color:red} javac {color} | {color:red}  8m 15s{color} | {color:red} root generated 1 new + 709 unchanged - 0 fixed = 710 total (was 709) {color} |
| {color:orange}-0{color} | {color:orange} checkstyle {color} | {color:orange}  0m 31s{color} | {color:orange} hadoop-common-project/hadoop-common: The patch generated 5 new + 65 unchanged - 0 fixed = 70 total (was 65) {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  1m 13s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green}  0m 19s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green}  0m  0s{color} | {color:green} The patch has no whitespace issues. {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  1m 39s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 52s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} unit {color} | {color:green}  9m 18s{color} | {color:green} hadoop-common in the patch passed. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green}  0m 24s{color} | {color:green} The patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black} 47m 10s{color} | {color:black} {color} |
\\
\\
|| Subsystem || Report/Notes ||
| Docker |  Image:yetus/hadoop:9560f25 |
| JIRA Issue | HADOOP-13548 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12829881/HADOOP-13548.002.patch |
| Optional Tests |  asflicense  compile  javac  javadoc  mvninstall  mvnsite  unit  findbugs  checkstyle  |
| uname | Linux 3ffaa5d72347 3.13.0-36-lowlatency #63-Ubuntu SMP PREEMPT Wed Sep 3 21:56:12 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | /testptch/hadoop/patchprocess/precommit/personality/provided.sh |
| git revision | trunk / 537095d |
| Default Java | 1.8.0_101 |
| findbugs | v3.0.0 |
| javac | https://builds.apache.org/job/PreCommit-HADOOP-Build/10572/artifact/patchprocess/diff-compile-javac-root.txt |
| checkstyle | https://builds.apache.org/job/PreCommit-HADOOP-Build/10572/artifact/patchprocess/diff-checkstyle-hadoop-common-project_hadoop-common.txt |
|  Test Results | https://builds.apache.org/job/PreCommit-HADOOP-Build/10572/testReport/ |
| modules | C: hadoop-common-project/hadoop-common U: hadoop-common-project/hadoop-common |
| Console output | https://builds.apache.org/job/PreCommit-HADOOP-Build/10572/console |
| Powered by | Apache Yetus 0.4.0-SNAPSHOT   http://yetus.apache.org |


This message was automatically generated.

, This fix is certainly not as crisp as I'd like it to be, but it solves the problem. [~anu] [~lmccay] may I ask for your review? Thanks!, [~jojochuang] Thanks for leaving pointers to the older JIRAs. It was very helpful in understanding how we got here.
Frankly  reading this patch gave me a headache :), thank you for the effort you have put into this patch.

Some high level comments and then to specifics.

Couple of suggestions:
* If it is not too complicated can you please add a test case which describes what you think Sqoop is doing, being able to debug the issue with and without this patch will be helpful. If it is too much work, leave me a set of instructions on how to repro this issue and I will try to do that.

* Would it make sense to write a wrapper function that invokes excludeIncompatibleCredentialProviders -- Which does the FileSystem.class isolation and then your code changes are pretty much isolated or factor out the code excludeIncompatibleCredentialProviders into reusable functions ? For example, something that returns the class, that gets checked for credential provider and Filesystem ? 

* Looks like we make some sort of an implied assumption that no class can inherit from both credentialProvider and FileSystem, which is true in today's code base. Do you want to make that explicit via a Precondition check ? It really does not matter as the the code will treat it as a credentialProvider for now.

Specific Comments:

* Both LocalJavaKeyStoreProvider and JavaKeyStoreProvider -- has a function called {{getSchemeName}} -- due to the inheritance from AbastractJavaKeyStore and now we have {{getScheme}} due to CredentialProvider.  It looks redundant, you might want to rename the base function to getSchemeName and use that for all the classes.

* {{SERVICE_CREDENTIAL_PROVIDER.put(cpf.getScheme(),cpf.getCredentialProviderClass());}} Looks like this could overwrite a value in the map ? Should we not throw if we find a duplicate ? 

* since we added the check for CredentialProvider.class are these comments and subsequenct handling still valid  ?
{code}
} catch (IOException ioe) {
            // not all providers are filesystem based
            // for instance user:/// will not be able to
            // have a filesystem class associated with it.
            if (newProviderPath.length() > 0) {
              newProviderPath.append(",");
            }
            newProviderPath.append(provider);

{code}

* In this following line -- 
{code} if (candidateClass.isAssignableFrom(clazz)) {code} I understand how we need to prevent recursive file path access, but does that semantics hold true for credential providers ? Can I not inherit a class from jkcsProvider and be compatible with jkcsProvider ? You don't need to solve this, but making sure that it was intentional and not accidental.





 ]