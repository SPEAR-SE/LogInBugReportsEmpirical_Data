[One way to handle this would be to disable symlinks on Windows unless JDK7 is present.  Another way would be a symlink-aware implementation of operations like {{File#renameTo}} on JDK6 and earlier.  This would have to be JNI, I think, and could be done in {{libhadoop.so}}., Attaching the patch. The patch does the following:

- If on Java6, do file copy instead of symlink. We've seen many problems with symlinks on files on Java6 and it is simply impossible to make all of them work. Recent examples include apps (like Oozie) built on top of MR that directly access symlinks using the Java File object (not thru RLFS), in which case things just donâ€™t work.
 - If on Java7, symlinks work as expected. There is no need to provide Native API we exposed previously to properly extract the symlink size, so I removed this code.

The only remaining scenario I can think of that can have problems is distributed cache symlinks for archives. In this case, we have symbolic links on folders, what is fine as long no one is trying to do File#renameTo on the symlink. To fix this, we cannot change FileUtil#symlink to copy the folder content, since the content could be populated afterwards (so symlink would completely lose its purpose). We would instead have to scope down the folder copy to disc cache scenario only. We can fix this via a separate Jira if it turns out to be a problem. 
, bq. One way to handle this would be to disable symlinks on Windows unless JDK7 is present. Another way would be a symlink-aware implementation of operations like File#renameTo on JDK6 and earlier. This would have to be JNI, I think, and could be done in libhadoop.so.
Thanks Colin for the comment! We started with a similar approach initially (by exposing a JNI for symlink target length extraction), however, even with this, we still have problems in case apps directly use File to access the symlink.

I believe the attached patch somewhat aligns with what you had in mind. Let me know what you think.
, I agree. Redoing things like rename and length are not future proof because folks can simply use File api's and get incorrect results. +1. Code looks good., +1. Committed the patch to branch-1-win. Thank you Ivan.]