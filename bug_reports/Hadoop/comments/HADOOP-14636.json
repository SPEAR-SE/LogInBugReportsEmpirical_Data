[Stack. Jenkins says failing since HADOOP-14563, which doesn't appear to go near the code.

{code}
org.apache.hadoop.security.KerberosAuthException: Login failure for user: foo@EXAMPLE.COM from keytab /testptch/hadoop/hadoop-common-project/hadoop-common/target/keytab javax.security.auth.login.LoginException: Unable to obtain password from user

	at com.sun.security.auth.module.Krb5LoginModule.promptForPass(Krb5LoginModule.java:897)
	at com.sun.security.auth.module.Krb5LoginModule.attemptAuthentication(Krb5LoginModule.java:760)
	at com.sun.security.auth.module.Krb5LoginModule.login(Krb5LoginModule.java:617)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at javax.security.auth.login.LoginContext.invoke(LoginContext.java:755)
	at javax.security.auth.login.LoginContext.access$000(LoginContext.java:195)
	at javax.security.auth.login.LoginContext$4.run(LoginContext.java:682)
	at javax.security.auth.login.LoginContext$4.run(LoginContext.java:680)
	at java.security.AccessController.doPrivileged(Native Method)
	at javax.security.auth.login.LoginContext.invokePriv(LoginContext.java:680)
	at javax.security.auth.login.LoginContext.login(LoginContext.java:587)
	at org.apache.hadoop.security.UserGroupInformation.loginUserFromKeytabAndReturnUGI(UserGroupInformation.java:1427)
	at org.apache.hadoop.security.KDiag.loginFromKeytab(KDiag.java:630)
	at org.apache.hadoop.security.KDiag.execute(KDiag.java:396)
	at org.apache.hadoop.security.KDiag.run(KDiag.java:236)
	at org.apache.hadoop.util.ToolRunner.run(ToolRunner.java:76)
	at org.apache.hadoop.security.KDiag.exec(KDiag.java:1047)
	at org.apache.hadoop.security.TestKDiag.kdiag(TestKDiag.java:119)
	at org.apache.hadoop.security.TestKDiag.testLoadResource(TestKDiag.java:196)

{code}

, Attached: fulll test output.

Looks like there isn't a foo@example.com file in the keytab, which would of course explain why the keytab login failed.

(side issue, {{java.library.path}} has an unexpanded env var in it; assume unrelated, but possibly of interest to [~aw].

{code}
java.library.path = "${env.LD_LIBRARY_PATH}:/testptch/hadoop/hadoop-common-project/hadoop-common/target/native/target/usr/local/lib:/testptch/hadoop/hadoop-common-project/hadoop-common/../../hadoop-common-project/hadoop-common/target/native/target/usr/local/lib:/usr/java/packages/lib/amd64:/usr/lib64:/lib64:/lib:/usr/lib"
{code}, HADOOP-14426 updated kerby for 1.0.0-RC2 to 1.0.0; went in 25-05-2017; no other obvious changes in the process of generating users in keytabs. Maybe kdiag could add a test to read the keytab in and verify that it was generated ok. Otherwise, no recent changes which appear to go near the kdc code, and, with it only failing in some cases, clearly some kind of execution env problem., {code}
${env.LD_LIBRARY_PATH}
{code}

... is a Configuration object-type setting, which means it is either coming from the test code/config itself and/or Configuration can't deal with empty env vars.


Three other points:

* This might be a nice, fat security hole.  If it's treating that as empty, then that gets translated to the current dir under normal shell semantics..... which means it's generally trivial to exploit by placing a bad shared library.

* We apparently have LD_LIBRARY_PATH all over the place but not DYLD_LIBRARY_PATH.  This means anything using dyld (such as OS X) will have a very different experience.

* I've been wondering for a while if we even need to set java.library.path if we are already setting DY/LD_LIBRARY_PATH.  Isn't one initialized from the other anyway?, bq. and/or Configuration can't deal with empty env vars.

the latter; doesn't resolve or reject any empty props. 

Java should be looking at PATH for library load too, shouldn't it? Certainly on windows I'd expect it, as that's how DLLs get resolved. Don't know about unix-land., This looks like a dup of HADOOP-14030.
, you are right resolving. Doesn't fix the problem though.

I think maybe we should hava a "yetus" profile where we turn of those tests which fail on the yetus builds but not elsewhere...that way test runs aren't confused by errors that appear to be some local env problem (network, kerberos, ...), I think we already have a profile that's for when yetus runs. the yetus personality for testing hadoop always activates the {{test-patch}} profile when it runs maven commands.

AFAICT we currently only use it for setting some java options: https://github.com/apache/hadoop/blob/625039ef20e6011ab360131d70582a6e4bf2ec1d/hadoop-project/pom.xml#L1688]