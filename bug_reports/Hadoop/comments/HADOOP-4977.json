[I managed to reproduce this, here's the full jstack output., Marking this as a blocker..., 
Found this while running tests for HADOOP-4830. Thought it might help.

{code}
    [junit] Found one Java-level deadlock:
    [junit] =============================
    [junit] "IPC Server handler 9 on 51089":
    [junit]   waiting to lock monitor 0x08120f38 (object 0xe5346a40, a org.apache.hadoop.mapred.JobTracker),
    [junit]   which is held by "IPC Server handler 7 on 51089"
    [junit] "IPC Server handler 7 on 51089":
    [junit]   waiting to lock monitor 0x08120ce0 (object 0xe5346d28, a org.apache.hadoop.mapred.CapacityTaskScheduler$MapSchedulingMgr),
    [junit]   which is held by "reclaimCapacity"
    [junit] "reclaimCapacity":
    [junit]   waiting to lock monitor 0x08120f38 (object 0xe5346a40, a org.apache.hadoop.mapred.JobTracker),
    [junit]   which is held by "IPC Server handler 7 on 51089"
    [junit] 
    [junit] Java stack information for the threads listed above:
    [junit] ===================================================
    [junit] "IPC Server handler 9 on 51089":
    [junit]     at org.apache.hadoop.mapred.JobTracker.getJobStatus(JobTracker.java:2783)
    [junit]     - waiting to lock <0xe5346a40> (a org.apache.hadoop.mapred.JobTracker)
    [junit]     at sun.reflect.GeneratedMethodAccessor5.invoke(Unknown Source)
    [junit]     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
    [junit]     at java.lang.reflect.Method.invoke(Method.java:597)
    [junit]     at org.apache.hadoop.ipc.RPC$Server.call(RPC.java:508)
    [junit]     at org.apache.hadoop.ipc.Server$Handler$1.run(Server.java:959)
    [junit]     at org.apache.hadoop.ipc.Server$Handler$1.run(Server.java:955)
    [junit]     at java.security.AccessController.doPrivileged(Native Method)
    [junit]     at javax.security.auth.Subject.doAs(Subject.java:396)
    [junit]     at org.apache.hadoop.ipc.Server$Handler.run(Server.java:953)
    [junit] "IPC Server handler 7 on 51089":
    [junit]     at org.apache.hadoop.mapred.CapacityTaskScheduler$TaskSchedulingMgr.updateQSIObjects(CapacityTaskScheduler.java:564)
    [junit]     - waiting to lock <0xe5346d28> (a org.apache.hadoop.mapred.CapacityTaskScheduler$MapSchedulingMgr)
    [junit]     at org.apache.hadoop.mapred.CapacityTaskScheduler$TaskSchedulingMgr.assignTasks(CapacityTaskScheduler.java:855)
    [junit]     at org.apache.hadoop.mapred.CapacityTaskScheduler$TaskSchedulingMgr.access$1000(CapacityTaskScheduler.java:294)
    [junit]     at org.apache.hadoop.mapred.CapacityTaskScheduler.assignTasks(CapacityTaskScheduler.java:1336)
    [junit]     - locked <0xe5346cd8> (a org.apache.hadoop.mapred.CapacityTaskScheduler)
    [junit]     at org.apache.hadoop.mapred.JobTracker.heartbeat(JobTracker.java:2288)
    [junit]     - locked <0xe5346a40> (a org.apache.hadoop.mapred.JobTracker)
    [junit]     at sun.reflect.GeneratedMethodAccessor2.invoke(Unknown Source)
    [junit]     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
    [junit]     at java.lang.reflect.Method.invoke(Method.java:597)
    [junit]     at org.apache.hadoop.ipc.RPC$Server.call(RPC.java:508)
    [junit]     at org.apache.hadoop.ipc.Server$Handler$1.run(Server.java:959)
    [junit]     at org.apache.hadoop.ipc.Server$Handler$1.run(Server.java:955)
    [junit]     at java.security.AccessController.doPrivileged(Native Method)
    [junit]     at javax.security.auth.Subject.doAs(Subject.java:396)
    [junit]     at org.apache.hadoop.ipc.Server$Handler.run(Server.java:953)
    [junit] "reclaimCapacity":
    [junit]     at org.apache.hadoop.mapred.JobTracker.getClusterStatus(JobTracker.java:2695)
    [junit]     - waiting to lock <0xe5346a40> (a org.apache.hadoop.mapred.JobTracker)
    [junit]     at org.apache.hadoop.mapred.CapacityTaskScheduler$MapSchedulingMgr.getClusterCapacity(CapacityTaskScheduler.java:939)
    [junit]     at org.apache.hadoop.mapred.CapacityTaskScheduler$TaskSchedulingMgr.updateQSIObjects(CapacityTaskScheduler.java:564)
    [junit]     - locked <0xe5346d28> (a org.apache.hadoop.mapred.CapacityTaskScheduler$MapSchedulingMgr)
    [junit]     at org.apache.hadoop.mapred.CapacityTaskScheduler$TaskSchedulingMgr.reclaimCapacity(CapacityTaskScheduler.java:405)
    [junit]     - locked <0xe5346d28> (a org.apache.hadoop.mapred.CapacityTaskScheduler$MapSchedulingMgr)
    [junit]     at org.apache.hadoop.mapred.CapacityTaskScheduler$TaskSchedulingMgr.access$700(CapacityTaskScheduler.java:294)
    [junit]     at org.apache.hadoop.mapred.CapacityTaskScheduler.reclaimCapacity(CapacityTaskScheduler.java:1278)
    [junit]     at org.apache.hadoop.mapred.CapacityTaskScheduler$ReclaimCapacity.run(CapacityTaskScheduler.java:1084)
    [junit]     at java.lang.Thread.run(Thread.java:619)
    [junit] 
    [junit] Found 1 deadlock.

{code}, Identified 2 scenarios where the deadlock can happen :-
1) {{ReclaimCapacity}} thread calls {{TaskSchedulingMgr.reclaimCapacity()}} which internally calls {{updateQSIObjects()}} which internally calls {{TaskTrackerManager.getClusterStatus()}} which is a _synchronized_ call.
2) {{ReclaimCapacity}} thread calls {{TaskSchedulingMgr.reclaimCapacity()}} which internally calls {{TaskTrackerManager.getNextHeartbeatInterval()}} which internally calls {{TaskTrackerManager.getClusterStatus()}} which is a _synchronized_ call.

Note that this can happen any time whenever a thread (from capacity scheduler) makes back call to {{TaskTrackerManager}} which tries to take a lock on the {{TaskTrackerManager}} while the {{TaskTrackerManager}} itself invokes {{TaskScheduler}}'s api after locking itself. The whole deadlock issue can be summarized as follows

||Who||Via||Locks?||Needs to lock?||Via||
|JobTracker|JobTracker.heartbeat()|JobTracker(itself)|TaskSchedulingMgr|CapacityTaskScheduler.assignTasks() calls TaskSchedulingMg.assignTasks() which calls updateQSIObjects() which is a _synchronized_ call|
|CapacityScheduler.ReclaimCapacityThread|TaskSchedulingMgr.reclaimCapacity()|TaskSchedulingMgr|JobTracker|TaskSchedulingMgr.reclaimCapacity() calls TaskSchedulingMgr.updateQSIObjects() which calls JobTracker.getClusterStatus() which is a _synchronized_ call and TaskSchedulingMgr.reclaimCapacity() which calls JobTracker.getNextHeartbeatInterval() which is a _synchronized_ call|

Spoke to Hemanth and Vivek on this and we all agree that various cluster parameters (cluster-status, heartbeat-interval) should be obtained/cached before invoking {{reclaimCapacity()}} and this should be a common rule while adding new threads., I think we should get this addressed very soon, now that HADOOP-4980 is committed. Also, because I committed HADOOP-4830, folks might hit this often while running tests. One Hudson build failed due to this, as reported on the core-dev mailing list., Attaching patch (4977.1.patch). As Amar points out, the problem is that JT loks itself, then calls the scheduler's assignTasks, which tries getting a lock for one of the scheduler's objects. In the meantime, a separate thread in the scheduler locks thsi objects, then calls a TaskTrackerManager method. TaskTrackerManager is implemented by the JT. Hence the deadlock. 

The fix is for threads in the scheduler to call TaskTrackerManager first, before locking anything in the Scheduler. 

I've made the following changes: 
* I've moved updateQSIObjects() from TaskSchedulingMgr to CapacitYScheduler. We may as well update both the map and reduce tasks in one go, rather than do them separately and walk the list of jobs in a queue twice. 
* updateQSI was called in three places: assignTasks (when processing a heartbeat), the reclaimCapacity thread, and in test cases. In all these calls, we get the cluster information from TaskTrackerManager first, then update the QSI objects. 
* I renamed one of the methods from updateQSIInfo to updateQSIInfoForTests to better suggest what it does. Hence the minor changes in TestCapacityScheduler.java. , Attaching new patch (4977.2.patch). Amar pointed out one more instance where reclaimCapacity() was calling TaskTrackerManager - to get the heartbeat interval. That has been fixed. reclaimCapacity() no longer calls any method in TaskTrackerManager. 
, Few comments:
- {{updateQSIObjects()}} and {{updateQSIObjects(...)}} might make it confusing as to which api to use. There seems to be no documentation to clarify which to call when. So I feel we can have only one api named {{updateQSIObjects()}} which first takes a snapshot of the required parameters from {{TaskTrackerManager}} and then syncs on the remaining main code.
- there is a extra line which says "for debugging", Valid points, Amar. I did some extra refactoring at the end and didn't realize the confusing calls. I do want to keep the update of the QSI objects separate from the fetching of the cluster status, as both these can come under different synchronization calls, if required. So each of the three callers: assignTasks(), reclaimCapacity, and the test cases, get the cluster stats on their own and then call updateQSIObjects(). See attached patch (4977.3.patch). 

The method printQSIs() is useful for printing debug information. We don't call it right now (we did, earlier), but I wanted to keep it around as it can prove quite useful. , Looks good. +1. We need to manually test this patch for deadlocks., Attaching another patch (4977.4.patch) with some minor cleanup - I removed a couple of methods that were no longer needed. , Attached a patch on which I've run dos2unix. Vivek, in future, can you please make sure the patch files do not have the windows EOL characters - maybe some setting in the editor can change this.

Also, in future, please attach test-patch results when you are uploading a patch. Here are the results for this one:

     [exec] +1 overall.
     [exec]
     [exec]     +1 @author.  The patch does not contain any @author tags.
     [exec]
     [exec]     +1 tests included.  The patch appears to include 3 new or modified tests.
     [exec]
     [exec]     +1 javadoc.  The javadoc tool did not generate any warning messages.
     [exec]
     [exec]     +1 javac.  The applied patch does not increase the total number of javac compiler warnings.
     [exec]
     [exec]     +1 findbugs.  The patch does not introduce any new Findbugs warnings.
     [exec]
     [exec]     +1 Eclipse classpath. The patch retains Eclipse classpath integrity.
, I committed this patch to trunk and Hadoop 0.20. Thanks, Vivek !]