[c6588_20100222.patch: replaced IllegalArgumentException by a log message.

BTW, I also suggest to have a static variable storing the CompressionCodec list since the operations in CompressionCodecFactory.getCodecClasses(..) are quite expensive., That is because you specified LzoCodec class in your conf file. I think it is better to leave the behavior as-is instead of issuing log messages., > That is because you specified LzoCodec class in your conf file. ...
It probably is the case.

> ... I think it is better to leave the behavior as-is instead of issuing log messages. 
I am fine for keeping the current behavior, i.e. throwing an exception.  However, it is better to change the exception since it is not an IllegalArgumentException.

Also, CompressionCodecFactory constructor calls getCodecClasses(..) which ultimately calls Class.forName(..).  As a consequence, Class.forName(..) will be invoked for every TextInputFormat.isSplitable(..).  It is unnecessary and expensive., bq. I am fine for keeping the current behavior, i.e. throwing an exception. However, it is better to change the exception since it is not an IllegalArgumentException.
Makes sense, probably should let it throw ClassNotFoundException.

bq. Also, CompressionCodecFactory constructor calls getCodecClasses(..) which ultimately calls Class.forName(..). As a consequence, Class.forName(..) will be invoked for every TextInputFormat.isSplitable(..). It is unnecessary and expensive.

I assume you mean o.a.h.mapreduce.TextInputFormat. Not sure how to fix it in CompressionCodecFactory though. Probably be better to cache an instance of the factory in TextInputFormat, but the semantics is slightly different from the current code - if different conf objects are passed down to multiple invocations of this method., > I assume you mean o.a.h.mapreduce.TextInputFormat. Not sure how to fix it in CompressionCodecFactory though. ...
It should be org.apache.hadoop.mapreduce.lib.input.TextInputFormat.

I think the CompressionCodecFactory should cache the codec classes and only calls Class.forName(..) at the first time., bq. I think the CompressionCodecFactory should cache the codec classes and only calls Class.forName(..) at the first time.
I generally do not like singleton caches. And I think caching the factory at TextInputFormat level is probably better, as it also saves the cost of creating a factory object for each isSplitable call. In fact, the o.a.h.mapred.TextInputFormat does exactly that. , 


, How about caching the classes in Configuration.getClassByName(..)?  It seems a right place since Configuration also manages a classLoader., This is not a problem anymore.]