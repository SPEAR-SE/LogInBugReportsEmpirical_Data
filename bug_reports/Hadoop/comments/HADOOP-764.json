[
Another memory overhead in processReport() is the fact that we seem to do blocks.clear() and rebuild the blocks tree each time. , Request for code review., If we use iterator for old report, then oldPos and oldsize become redundant
iter.hasNext() <=> oldPos < oldsize, Incorporated code review comments., 
As a related note, since we do a blocks.clear() in DatanodeDescriptor when we update blocks from , this results in one separate  copy of a block exists for each node (i.e. one for each replica) and one coy in NameNode's blockMap(). Ideally blocks in DatanodeDescriptor should be references to blocks in global blockMap.

This patch decreases number of times blocks.clear() is invoked but over time there will be separate copies of blocks. Fix is not to call blocks.clear() but update blocks map inline when new blocks are removed or added inside processReport().
 
, All those other places you mention actually contain references to the same block object. The block object is created when the blockReport RPC arrives at the namenode, and then references to it are stored in Namenode.blockMap as well as DatanodeDescriptor.blocks., This patch reduces namenode's memory consumption while processing block reports.  , +1, http://issues.apache.org/jira/secure/attachment/12346511/processBlockReport3.patch applied and successfully tested against trunk revision r483294, Regd  references:

Say Bx is a block in Namenode.blockMap and Bx_ref is in Dx.blocks as desired. Now when we update Dx.block in processReport(), we do Dx.blocks.clear() : i.e. Bx_ref is removed. Bx_new_ref in newReport array is added to Dx.block. So there are two separate objects referenced by namenode.blockMap and Dx.block. 

newReport[] does not hold reference to blocks in namenode.blockMap (as far as I can see). What I am missing?


, I agree with your observation. This is another level of refinement that we could do as a follow-on to this patch. Does it sound ok?, 
Yes, I was going to comment saying the patch should be applied.
, I just committed this.  Thanks, Dhruba.]