[Issue is a blocker, because in the case where maps have negligible output, but there's only one reduce (e.g., sort validator), the reduce sometimes never gets placed.  , Remove old initial estimate; instead, disk space estimation only kicks in after 10% of maps have finished., Javadoc crashes with out of memory on my machine -- I don't believe this patch is to blame, however., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12388338/resourceEstFix.patch
  against trunk revision 686893.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    -1 javadoc.  The javadoc tool appears to have generated 1 warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    -1 contrib tests.  The patch failed contrib unit tests.

Test results: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/3068/testReport/
Findbugs warnings: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/3068/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Checkstyle results: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/3068/artifact/trunk/build/test/checkstyle-errors.html
Console output: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/3068/console

This message is automatically generated., I just committed this. Thanks, Ari!, Integrated in Hadoop-trunk #586 (See [http://hudson.zones.apache.org/hudson/job/Hadoop-trunk/586/]), Hi, I have meet a special resource estimateion work. Several of the map's input files is zero, but there is also several bytes created in map's output. So :

double blowupOnThisTask = ts.getOutputSize() / 
        ((double) tip.getMapInputSize() + 1);

blowupOnThisTask  will be increased large, and the reduces can't be allocated the reduce tasks from the JobTracker., Can you post some numbers to clarify what you mean?, double blowupOnThisTask = ts.getOutputSize() /
((double) tip.getMapInputSize() + 1);

for example the tip.getMapInputSize() =0, and the ts.getOutputSize() =15000(I don't know why it is 15000)
I use streaming -mapper "cat" -reducer "cat".

here is the log:
2009-01-15 12:21:02,182 INFO  mapred.ResourceEstimator (ResourceEstimator.java:updateWithCompletedTask(78)) - measured blowup on tas
k_200901141908_0059_m_002291 was 15000/1 = 15000.0
2009-01-15 12:21:02,182 INFO  mapred.ResourceEstimator (ResourceEstimator.java:updateWithCompletedTask(90)) - new estimate is blowup
 = 23.271476813887574
2009-01-15 12:21:02,183 INFO  mapred.JobInProgress (JobInProgress.java:findNewMapTask(1746)) - Choosing a non-local task task_200901
141908_0059_m_002324
2009-01-15 12:21:02,183 INFO  mapred.JobTracker (JobTracker.java:createTaskEntry(1408)) - Adding task 'attempt_200901141908_0059_m_0
02324_0' to tip task_200901141908_0059_m_002324, for tracker 'tracker_xxxx:localhost.localdomain/127.0.0.1:
50961'
2009-01-15 12:21:02,183 INFO  mapred.JobInProgress (JobInProgress.java:addRunningTaskToTIP(1292)) - Choosing rack-local task task_20
0901141908_0059_m_002324
2009-01-15 12:21:02,282 INFO  mapred.JobInProgress (JobInProgress.java:completedTask(1910)) - Task 'attempt_200901141908_0059_m_0022
92_0' has completed task_200901141908_0059_m_002292 successfully.
2009-01-15 12:21:02,282 INFO  mapred.ResourceEstimator (ResourceEstimator.java:updateWithCompletedTask(78)) - measured blowup on tas
k_200901141908_0059_m_002292 was 15000/1 = 15000.0 

so the blowup is very large.

and then the new estimate newly computed also large, so:
2009-01-15 12:21:20,944 INFO  mapred.ResourceEstimator (ResourceEstimator.java:updateWithCompletedTask(90)) - new estimate is blowup = 819.2585444888223
2009-01-15 12:21:20,945 WARN  mapred.JobInProgress (JobInProgress.java:findNewMapTask(1652)) - No room for map task. Node /default-rack/xxxx has 132707577856 bytes free; but we expect map to take 345805904529]