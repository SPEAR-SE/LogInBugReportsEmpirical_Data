[Attaching a patch that works for me.

I am really not sure of the directory structures after the recent mavenisation. I also replaced some occurrences of HADOOP_PREFIX with HADOOP_HDFS_HOME which I am not sure.

Just to help debugging, I added a "bin/hdfs classpath".

Please review, thanks!, Hi Vinod,

Hadoop trunk supports two layouts.  The original layout where common, hdfs, mapreduce are in separated directories.  The new layout which merges common, hdfs, mapreduce into a single deploy directory.  (Recommend for production usage).

For original layout, use these command:

{noformat}
mvn package -Ptar -Dmaven.test.skip.exec=true
ant veryclean tar -Dresolvers=internal
export HADOOP_COMMON_HOME=/tmp/hadoop-common-0.23.0-SNAPSHOT
export HADOOP_HDFS_HOME=/tmp/hadoop-hdfs-0.23.0-SNAPSHOT
{noformat}

For the merged layout, use these command:

{noformat}
mvn package -Pbintar -Dmaven.test.skip.exec=true
ant veryclean binary -Dresolvers=internal
{noformat}

untar both tarballs into the same directory, i.e. /tmp/hadoop.  Make sure HADOOP_*_HOME environment are unset.

Let me know if you have any questions.  Thanks., @Eric,

Am I wrong, or the scripts only work with the new 'binary' layout? 

If that is the case, shouldn't we remove the 'legacy' TAR generation (HADOOP-7498) ?

, Is there a way to run parts of the cluster without having to make and untar a tar? It used to be I could edit the source, recompile in 20 seconds or so, and then run "hdfs namenode" from right there. Having to make a whole tar will increase this cycle up to several minutes, @Todd,

Current times are not several minutes, actually it is faster than 20secs for a prebuild run:

* Building the tar from clean (mvn clean package -DskipTests -Ptar) takes 30secs
* Building the tar from a pre-built (mvn package -DskipTests -Ptar) takes 17secs

Still, I've opened HADOOP-7497 a couple of days ago to make things faster as per your suggestion., I'm going to close this as won't fix.  it's pretty much impossible to fix this post-mavenization without at least setting where HADOOP_LIBEXEC_DIR lives.]