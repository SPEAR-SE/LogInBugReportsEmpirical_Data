[On #1 and #2, due to the lifecycle and singleton characteristics of this class and the JT this is not really an issue not have it synchronized. I would say there is not need for this.

On #3, the queue is a static variable statically initialized, thus is always not null.

I suggest closing this issue as invalid., The JobTracker  is only a singleton with the current deployment process. There is nothing to stop anyone imposing a different lifecycle, such as in unit tests. You can't do that now with any isolation or thread safety aound the JobEndNotifier. Create two job trackers, you leak one notifier thread.

1. The notifier is only live for the duration of the tracker - when jobTracker.stopTracker() is called, the notifier is closed too. 
2. The notifier is only invoked for notifications in JobTracker, and JobInProgress, which has its own reference to jobTracker.

With all uses via JobTracker-linked objects, and with a live lifespan of that of a JobTracker, the obvious way to manage these instances with an instance created by the JobTracker, and access the same way. It would only be a singleton if the JobTracker were used as a singleton -such as when created via the command line- but not when a JobTracker is brought up differently.


, I'm fine with such changes, as you claim the current implementation could have issues in a testing environment.

Regarding #3, the queue should be initialized then on startNotifier() to ensure it's clean.
, simple patch to fix a basic problem: the fact that a thread ref may be null during shutdown., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12385399/hadoop-3415.patch
  against trunk revision 674671.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no tests are needed for this patch.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    -1 contrib tests.  The patch failed contrib unit tests.

Test results: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/2808/testReport/
Findbugs warnings: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/2808/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Checkstyle results: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/2808/artifact/trunk/build/test/checkstyle-errors.html
Console output: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/2808/console

This message is automatically generated., This change makes more sense integrated into HADOOP-3628, where the "different lifecycle" motivation is not hypothetical. I agree with Alejandro; this isn't a valid bug., Linking to HADOOP-3628 so that it can be merged in properly. Regarding the INVALID state, I think WONTFIX is technically more correct, as this problem can be initiated during testing, though with <junit> set to fork for every test case class, it will only surface if a single TestCase class triggers the race.]