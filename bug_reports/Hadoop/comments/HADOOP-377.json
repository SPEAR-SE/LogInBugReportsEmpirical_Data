[Patch against hadoop 0.4.0, Can you say more about how you use this?  One can already name config files in jar files on the CLASSPATH, or at an absolute place in the filesystem.  Are you specifying a jar that's accessed from a jar not on the CLASSPATH?, Here are the details: we use an abstraction class that returns either a File or an URL.  An URL is returned by getClass().getResource("hadoop-client.xml") so it would be great if Hadoop could handle that., So the URL is a reference to something on the CLASSPATH?  Couldn't you simply add the String "hadoop-client-xml", since that would do the same thing?, You're right in this particular case I could do that.  But basically allowing to pass an URL is much more flexible: that way the config file can be in a JAR  or ZIP file (even outside of the classpath), at an HTTP(S) URL, etc.  The java.net.URL architecture even allows you to implement easily a custom protocol handler (this information is from http://java.sun.com/developer/onlineTraining/protocolhandlers/).

Another point: we are using Spring to instantiate the Hadoop configuration.  And in Spring you can specify custom editors for the properties you set.  We pass something like conf://hadoop-client.xml and this is resolved to a Spring Resource with a ResourceEditor (a custom editor that resolves to a org.springframework.core.io.Resource), which is holding either a File or an URL.  Creating a String editor to resolve a path is a bit awkward since a String is not a concept that is appropriate to represent a file location in the realm of OOP, it is just too generic.  An URL clearly represents the location of some piece of data, in our case the Hadoop Client configuration file.

To sum up, I think providing URL support to Hadoop's Configuration gives more choice to the end developer., I just committed this, minus the changes to the imports.  Thanks!]