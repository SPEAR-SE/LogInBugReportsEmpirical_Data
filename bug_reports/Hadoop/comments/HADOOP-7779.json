[Why won't wildcards do? I think it is a lot cleaner than having a long classpath. I would prefer to not have this change., Agreed that its a lot cleaner but not really useful for the following reasons:

* For cases where users want to include a jar in classpath by checking if one already exists or not, one has to manually traverse each and every directory just to locate the jar.  
* We have also had cases when jobs fail due to ClassNotFoundException. A quick check for this would be to see whether the corresponding jar is included/not in the "hadoop classpath" In the current case, the wildcards wont be of much help unless the user is ready to recursively check every directory. IMO, the idea of exposing "hadoop classpath" was to let users learn about all the jars included in the classpath. Masking that by just printing wildcards would not serve the purpose.
* Also, this was the behavior in hadoop-0.20.x. I would not want to change this behavior unless we agree to introduce a regression., I tend to agree with Ravi. I don't find it useful to see a very huge list of jars thrown on my screen when I demand a {{classpath}}. I just want a classpath I can use via {{-cp/-classpath}}.

bq. For cases where users want to include a jar in classpath by checking if one already exists or not, one has to manually traverse each and every directory just to locate the jar.

But there's maven for that purpose today. We should really be moving people down the proper project-based paths?

bq. IMO, the idea of exposing "hadoop classpath" was to let users learn about all the jars included in the classpath. Masking that by just printing wildcards would not serve the purpose.

That may have been so, but all I've seen as the use of this command from both dev and op side (specifically of those who've been running 2.x based version distributions) has been to rather check for the presence of certain projects or for use with a quick {{java/javac}} command. For these purposes, knowing the jar is not very important.

bq. Also, this was the behavior in hadoop-0.20.x. I would not want to change this behavior unless we agree to introduce a regression.

Functionally we're still printing a usable classpath (in whatever form - wildcards or no wildcards) for use with other programs, that much we haven't broken I think?

Also to note is that now we have tons of jars on the classpath, its not sane to print or read through them all anymore.

Let me know how you still feel about this change - I feel that we may instead devote more time to documenting how to use the apache hadoop maven-based projects, than anything else such as teaching people to use jars (which is so old style today!)., As of Apache Hadoop 2.6.0, we have enhanced the {{hadoop classpath}} command with additional options that allow you to:

* Expand the wildcards, resulting in the full list of all jars.
* Bundle the full classpath into a jar with a manifest file containing the Class-Path attribute.  This can be useful on Windows, where it's very easy for a long classpath to blow past the Windows limit on command line length of 8191.

The default behavior remains to display the wildcards, so that's unchanged for the people on this thread that expressed a preference for that.

Additional details are in the documentation here:

http://hadoop.apache.org/docs/r2.6.0/hadoop-project-dist/hadoop-common/CommandsManual.html#classpath

I'm resolving this as duplicate.]