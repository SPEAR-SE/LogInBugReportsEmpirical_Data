[Pete, let me know if I should un-assign this to you., I am taking a look - it looks like it  doesn't like the modification time for some reason.
, Raghu - do you have the NN log? May be something to do with permissions. (there was a change of permissions needed to set times dhruba told me about).

I cannot replicate it locally but will ask Dhruba to try in his environment.

Are you running this as root or non-root?

thanks, Sorry - now see that part of the code is where connected as super user and the file is 0666 so no problem there.

It is weird that the last modification time of the file is coming back as negative.  The time in FileStatus is a long in ms and hdfs.c converts that to a tTime by diving it to 1000. The result in JNI is treated as a long (J type) but then there''s a cast to a tTime:

{code}
                                                                                                                                                                         
    if (invokeMethod(env, &jVal, &jExc, INSTANCE, jStat,                                                                                                                  
                     HADOOP_STAT, "getModificationTime", "()J") != 0) {                                                                                                   
        errno = errnoFromException(jExc, env, "org.apache.hadoop.fs."                                                                                                     
                                   "FileStatus::getModificationTime");                                                                                                    
        return -1;                                                                                                                                                        
    }                                                                                                                                                                     
    fileInfo->mLastMod = (tTime) (jVal.j) / 1000;                                                                                                                         
                                                                     
{code}

Which is weird since it should be:

{code}
    fileInfo->mLastMod = (tTime) (jVal.j / 1000);                                                                                                                        
{code}

That may be causing the problem. I am using gcc 4.0.1 and not having a problem, but ...

, Can u try this out? I makes the precedence clear. Not including a test since this is to fix a test.

, Attached namenode log. I ran as non-root with gcc 3.4.3., The test still fails with the patch. 
did a '{{ant clean -Dlibhdfs=yes test-libhdfs}}' after applying the patch. 
The output looked pretty much the same., Must be 32 bit machine thing. jlong 'J' is supposed to be a long long but it may be that it's 4 bytes. I don't have access to a 32 bit machine, but will keep looking.

The crux is that getFileStatus uses longs and returns things in milliseconds.

One thing is depending on how fast we need to fix this is we could do is comment out that test and put a comment in the getFileStatus that for 32 bit machines mLastMod and mLastAccess may not be correct.

the right way is to figure out why the jlong is allowing overflow.  I will do some more research.

, $JAVA_HOME/include/linux/jni_md.h should define jlong.  on a 32 bit version of java i have, i see:

{code}
#ifdef _LP64 /* 64-bit Solaris */
typedef long jlong;
#else
typedef long long jlong;
#endif
{code}

does yours define it as long long?

, Yes. It is defined exactly the same way.

I think we have at least couple of weeks of time for proper fix. 
We can keep this blocker open but a temporarily comment out the failing test as you suggested.
Could you provide the temp patch?
, I commented out the bad test and also added a warning if jlong isn't 8 bytes long - hope that's ok. Won't fail, will just print out a WARN: ..., Pete, your first patch was half way through the fix. Test passes with the attached patch.

 hmm.. so HDFS allows negative times in {{setTImes()}}?, code looks good thanks.
, -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12390986/HADOOP-4280.patch
  against trunk revision 699119.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no tests are needed for this patch.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs warnings.

    +1 Eclipse classpath. The patch retains Eclipse classpath integrity.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/3379/testReport/
Findbugs warnings: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/3379/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Checkstyle results: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/3379/artifact/trunk/build/test/checkstyle-errors.html
Console output: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/3379/console

This message is automatically generated., I just committed this. Thanks Pete! 

The test failure is a known issue., Integrated in Hadoop-trunk #616 (See [http://hudson.zones.apache.org/hudson/job/Hadoop-trunk/616/])]