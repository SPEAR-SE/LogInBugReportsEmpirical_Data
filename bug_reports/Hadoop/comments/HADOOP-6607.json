[Instead of modify every Servlet/JSP, Filter (http://java.sun.com/products/servlet/Filters.html) is a good option to introduce some central control to all generated responses, adding the required headers to each of them., something like this, perhaps?, Reviewing this, I've had problems last year with bulk IO and these filters. If something is serving up a few GB of data you don't want that response cached just so you can add something to a filter.

1. the filter must not be applied to the entire path, only those pages where the data volumes are small and the content expires.

2. For anything that serves up lots of data, better for the servlet to set the expiry headers and then serve up the data. , Steve, I've commented HDFS-4042. Are you planing to provide a patch for this anytime soon? Else I'd ask you to permission to take over. Thx, I'd also like to check to see if anyone is going to patch this.  Please update.  Thank you., Updating the summary to reflect new scope, to handle HTTP/1.0. This is a follow up on HADOOP-8998 (which only added HTTP/1.1 non-cache header.

Also, we should fix the '*' import introduced in HttpServer in HADOOP-8998., {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12553507/HADOOP-6607.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-common-project/hadoop-common.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HADOOP-Build/1743//testReport/
Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/1743//console

This message is automatically generated., Per the RFC (http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html) shouldn't we use the date header rather than System#currentTimeMillis?
 
{quote}
To mark a response as "already expired," an origin server sends an Expires date that is equal to the Date header value.
{quote}
, Thsnks for digging that Eli, attached is a patch doing so, {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12553567/HADOOP-6607.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-common-project/hadoop-common.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HADOOP-Build/1747//testReport/
Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/1747//console

This message is automatically generated., +1, looks good. It'll probably still break against some random Netscape 3.x proxy or MS Windows Proxy somewhere in the field, but that's why nobody should be using them., +1 lgtm as well, Committed to trunk and branch-2., Integrated in Hadoop-trunk-Commit #3027 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/3027/])
    HADOOP-6607. Add different variants of non caching HTTP headers. (tucu) (Revision 1409921)

     Result = SUCCESS
tucu : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1409921
Files : 
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/http/HttpServer.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/http/NoCacheFilter.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/http/TestHttpServer.java
, Integrated in Hadoop-Yarn-trunk #38 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk/38/])
    HADOOP-6607. Add different variants of non caching HTTP headers. (tucu) (Revision 1409921)

     Result = SUCCESS
tucu : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1409921
Files : 
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/http/HttpServer.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/http/NoCacheFilter.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/http/TestHttpServer.java
, Integrated in Hadoop-Hdfs-trunk #1228 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/1228/])
    HADOOP-6607. Add different variants of non caching HTTP headers. (tucu) (Revision 1409921)

     Result = SUCCESS
tucu : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1409921
Files : 
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/http/HttpServer.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/http/NoCacheFilter.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/http/TestHttpServer.java
, Integrated in Hadoop-Mapreduce-trunk #1259 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/1259/])
    HADOOP-6607. Add different variants of non caching HTTP headers. (tucu) (Revision 1409921)

     Result = FAILURE
tucu : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1409921
Files : 
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/http/HttpServer.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/http/NoCacheFilter.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/http/TestHttpServer.java
]