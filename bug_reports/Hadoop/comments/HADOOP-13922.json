[pulled from my question on HADOOP-11804:

{quote}
Thinking about this more, the change to a pom type instead of an empty jar is better maven hygiene but means that downstream users who don't want to opt-in to the shaded dependencies will have to update their dependency declaration for the change.
i.e.

{code}
<dependency>
  <groupId>org.apache.hadoop</groupId>
  <artifactId>hadoop-client</artifactId>
</dependency>
{code}

has to change to

{code}
<dependency>
  <groupId>org.apache.hadoop</groupId>
  <artifactId>hadoop-client</artifactId>
  <type>pom</type>
</dependency>
{code}

Is that what we want? On the positive side, it means downstream folks have to think about wether they want to keep using the client-with-third-party-dependencies or switch to the shaded client. On the negative side, we are forcing all downstream users to think about things instead of just those who are interested in the shaded client.
{quote}

Happy to either clean up references to the non-pom dependency or change hadoop-client back to an empty jar. Just need to know which a committer would prefer.

(If I don't hear back one way or the other tonight, I'll decide which I think is better and put up a patch + reasoning tomorrow.), -01
  - changes hadoop-client packaging back to jar.


Here's my reasoning: keeping things as jar packaging means there's no impact for downstream clients who upgrade from hadoop 2.y to 3.y. Additionally, as the author of HADOOP-11804 and a person who's done a fair bit of maven build work, I failed to properly use the pom-type when specifying hadoop-client as a dependency everywhere in the project. :/ That reads pretty clearly to me as "downstream users are unlikely to grok a benefit for changing to pom packaging"., As a side comment, if we don't go with the approach of changing hadoop-client back to jar packaging then we should flag HADOOP-11804 as incompatible., | (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue}  0m 10s{color} | {color:blue} Docker mode activated. {color} |
| {color:green}+1{color} | {color:green} @author {color} | {color:green}  0m  0s{color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:red}-1{color} | {color:red} test4tests {color} | {color:red}  0m  0s{color} | {color:red} The patch doesn't appear to include any new or modified tests. Please justify why no new tests are needed for this patch. Also please list what manual steps were performed to verify this patch. {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 14m 45s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green}  0m 48s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  0m 53s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green}  0m 48s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 43s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green}  0m 32s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green}  0m 28s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green}  0m 28s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  0m 35s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green}  0m 33s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green}  0m  0s{color} | {color:green} The patch has no whitespace issues. {color} |
| {color:green}+1{color} | {color:green} xml {color} | {color:green}  0m  4s{color} | {color:green} The patch has no ill-formed XML file. {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 27s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} unit {color} | {color:green}  0m 32s{color} | {color:green} hadoop-client in the patch passed. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green}  0m 56s{color} | {color:green} The patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black} 24m 12s{color} | {color:black} {color} |
\\
\\
|| Subsystem || Report/Notes ||
| Docker |  Image:yetus/hadoop:a9ad5d6 |
| JIRA Issue | HADOOP-13922 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12844997/HADOOP-13922.1.patch |
| Optional Tests |  asflicense  compile  javac  javadoc  mvninstall  mvnsite  unit  xml  |
| uname | Linux bc53e608e003 3.13.0-106-generic #153-Ubuntu SMP Tue Dec 6 15:44:32 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | /testptch/hadoop/patchprocess/precommit/personality/provided.sh |
| git revision | trunk / f216276 |
| Default Java | 1.8.0_111 |
|  Test Results | https://builds.apache.org/job/PreCommit-HADOOP-Build/11331/testReport/ |
| modules | C: hadoop-client-modules/hadoop-client U: hadoop-client-modules/hadoop-client |
| Console output | https://builds.apache.org/job/PreCommit-HADOOP-Build/11331/console |
| Powered by | Apache Yetus 0.5.0-SNAPSHOT   http://yetus.apache.org |


This message was automatically generated.

, I confirmed that a build with a novel version number works with this patch.

With regard to the packaging question, my Maven experience is pretty vanilla, and I had to read up in the Sonatype book to get a better understanding of when and how pom packaging should be used.  To be honest, that left me with very little understanding/motivation for using pom packaging outside of inter-module dependencies within a single project., Yeah. The dev commentary on [extra-enforcer-rules #13|https://github.com/mojohaus/extra-enforcer-rules/issues/13] also left me with little confidence in the overall maven ecosystem's ability to cope with pom dependencies, which has been an issue even for inter-module dependencies within HBase (HBASE-17286).

Thanks for checking the fix [~jpallas]!

I think this is ready to go., +1 for the patch.  I had a clean new dev box that was hitting this build problem, and I confirmed that this patch fixes it.  I think it's the right thing to do in the interest of compatibility with existing downstream consumers.

Since it's right before a holiday and interested people might be offline partying hard, I will hold off the commit.  I plan to commit this on Monday, 1/2, unless I hear otherwise., The patch works for me (mvn package), however mvn eclipse:eclipse still fails with same error. I had a clean new env (osx 10.12.2, jdk8). I'll provide more details on request., [~mblo] please provide more context; the precommit test above shows the eclipse command working., I have committed this to trunk.  [~busbey], thank you for contributing the fix.

[~mblo], I chose to commit this, because it fixes the immediate problem that is impacting some of us.  If you continue to reproduce issues running {{mvn eclipse:eclipse}}, then please feel free to file a new JIRA issue with the details.  Thank you., SUCCESS: Integrated in Jenkins build Hadoop-trunk-Commit #11066 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/11066/])
HADOOP-13922. Some modules have dependencies on hadoop-client jar (cnauroth: rev ebdd2e03b7b8573cc3531958dbfda72cdbc277fd)
* (edit) hadoop-client-modules/hadoop-client/pom.xml
, Sorry for the noise - updating b31e195..e49e0a6 solved the issue. I have no clue what was going on yesterday. Thank you!, [~mblo], no worries, and thank you for coming back to confirm that the problem no longer repros.]