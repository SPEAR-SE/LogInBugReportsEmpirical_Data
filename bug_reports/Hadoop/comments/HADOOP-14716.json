[This is actually a fundamental issue with rename() itself, many failures (source doesn't exist, destination is a file) are required to be caught and downgraded to a "return false", which hides many problems and means that application code often goes 

{code}
if (!fs.rename(src, dest)) throw new IOException("rename failed")
{code}

# there's a protected rename operation,  {{FileSystem.rename(final Path src, final Path dst, final Rename... options)}}  which I've proposed making public and adopting broadly for renaming, which means "more spec, tests, update uses". See HADOOP-11452 for details. I've not done anything on that since january
# we ought to split out "exceptions to swallow" from "exceptions to throw up": authentication, networking, &c should be thrown. If the Swift client is catching them too, it shouldn't. Patches welcome
# And yes, logging too

Take a look at [https://github.com/apache/hadoop/blob/trunk/hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java#L690] to see how rename failures are handled there: the {{innerRename()}} method does throw exceptions, including explicit ones with conditions not being met; the outer one catches and downgrades exceptions, Thank you for the quick reply, [~steve_l]. IMHO, HADOOP-11452 is very helpful, at the same time, I will come up with a patch. , WIP patch. ]