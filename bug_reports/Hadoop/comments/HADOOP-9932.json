[Here is the trace:

{panel}
2013-09-03 23:30:05,342 [IPC Server handler 80 on 8020] INFO namenode.EditLogInputStream: Fast-forwarding stream '/some_shared_edits_dir/current/edits_0000000000007107855-0000000000007114171' to transaction ID 7107855
2013-09-03 23:30:05,359 [IPC Server handler 80 on 8020] ERROR namenode.FSEditLogLoader: Encountered exception on operation AddOp [length=0, inodeId=1200681, path=/some_path/infile605, replication=3, mtime=1378250937359, atime=1378250937359, blockSize=134217728, blocks=[], permissions=dfsload:hdfs:rw-------, clientName=DFSClient_NONMAPREDUCE_-673728062_1, clientMachine=1.2.3.4, RpcClientId=48381b03-7421-4fbf-bdbd-64d73ec09f0a, RpcCallId=2425, opCode=OP_ADD, txid=7107861]
java.lang.IllegalStateException
        at com.google.common.base.Preconditions.checkState(Preconditions.java:129)
        at org.apache.hadoop.util.LightWeightCache.evictExpiredEntries(LightWeightCache.java:178)
        at org.apache.hadoop.util.LightWeightCache.put(LightWeightCache.java:213)
        at org.apache.hadoop.ipc.RetryCache.addCacheEntryWithPayload(RetryCache.java:267)
        at org.apache.hadoop.hdfs.server.namenode.FSNamesystem.addCacheEntryWithPayload(FSNamesystem.java:703)
        at org.apache.hadoop.hdfs.server.namenode.FSEditLogLoader.applyEditLogOp(FSEditLogLoader.java:323)
        at org.apache.hadoop.hdfs.server.namenode.FSEditLogLoader.loadEditRecords(FSEditLogLoader.java:198)
        at org.apache.hadoop.hdfs.server.namenode.FSEditLogLoader.loadFSEdits(FSEditLogLoader.java:111)
        at org.apache.hadoop.hdfs.server.namenode.FSImage.loadEdits(FSImage.java:733)
        at org.apache.hadoop.hdfs.server.namenode.ha.EditLogTailer.doTailEdits(EditLogTailer.java:227)
        at org.apache.hadoop.hdfs.server.namenode.ha.EditLogTailer$1.run(EditLogTailer.java:183)
        at org.apache.hadoop.hdfs.server.namenode.ha.EditLogTailer$1.run(EditLogTailer.java:179)
{panel}, [~sureshms]: Will it be a simple matter of adding {{synchronized}} to cache entry add methods? Or do you think we should do more fine grained locking? Either way it will probably be common only change., I've moved this jira to hadoop common., Attaching a patch that adds synchronizations in LightWeightCache., Looks like neither LightWeightCache and LightWeightGSet is thread-safe (according to their javadoc). So maybe here we'd better do the synchronization in RetryCache.java? Specifically, I think we need to add synchronized to RetryCache#addCacheEntry and RetryCache#addCacheEntryWithPayload., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12601409/HADOOP-9932.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-common-project/hadoop-common.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HADOOP-Build/3059//testReport/
Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/3059//console

This message is automatically generated., bq. So maybe here we'd better do the synchronization in RetryCache.java? Specifically, I think we need to add synchronized to RetryCache#addCacheEntry and RetryCache#addCacheEntryWithPayload.

That's fine. I will update the patch. , Kihwal, thanks for catching this. You are right. Based on my discussion with Jing, here are the details:
# In all namesystem @AtMostOnce methods, at the beginning of the method, we take two steps:
#* Holding RetryCache.this monitor lock we check if an entry exists for RPC call. If it does not, we add an entry and we are done. 
#* If an entry already exists, we let go the RetryCache.this monitor lock and wait on the entry monitor for the call to be completed.
# In editlog processing, we add to RetryCache map entries without holding any locks.
# During system transitioning to active state, an RPC operation could result in call to waitForCompletion() and at the same time, editlog is adding entries to the RetryCache.

So we should just synchronize those methods using RetryCache monitor lock.
, Attaching a new patch., Also, in RetryCache#addCacheEntry and RetryCache#addCacheEntryWithPayload, instead of calling "newEntry.completed(true)" which acquires the entry monitor and makes a notifyAll call, maybe we can directly set the state of the entry to "SUCCESS" in a new setComplete/constructor method. I.e.,

{code}
   public void addCacheEntry(byte[] clientId, int callId) {
     CacheEntry newEntry = new CacheEntry(clientId, callId, System.nanoTime()
-        + expirationTime);
-    newEntry.completed(true);
-    set.put(newEntry);
+        + expirationTime, true);
+    synchronized (this) {
+      set.put(newEntry);  
+    }
   }
{code}, Jing, I will incorporate what you suggested in a new patch., Attaching a new patch that includes the suggested ctor changes., +1 for the patch., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12601438/HADOOP-9932.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-common-project/hadoop-common.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HADOOP-Build/3060//testReport/
Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/3060//console

This message is automatically generated., +1 as well. Thanks for the fix Kihwal!, I've committed this to trunk, branch-2 and branch-2.1-beta. Thanks for the reviews, Suresh and Jing., SUCCESS: Integrated in Hadoop-trunk-Commit #4366 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/4366/])
HADOOP-9932. Improper synchronization in RetryCache. Contributed by Kihwal Lee. (kihwal: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1520126)
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/RetryCache.java
, SUCCESS: Integrated in Hadoop-Yarn-trunk #323 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk/323/])
HADOOP-9932. Improper synchronization in RetryCache. Contributed by Kihwal Lee. (kihwal: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1520126)
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/RetryCache.java
, FAILURE: Integrated in Hadoop-Hdfs-trunk #1513 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/1513/])
HADOOP-9932. Improper synchronization in RetryCache. Contributed by Kihwal Lee. (kihwal: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1520126)
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/RetryCache.java
, FAILURE: Integrated in Hadoop-Mapreduce-trunk #1540 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/1540/])
HADOOP-9932. Improper synchronization in RetryCache. Contributed by Kihwal Lee. (kihwal: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1520126)
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/RetryCache.java
, Sorry - I think the keyboard shortcuts may have changed somewhat with the new JIRA version.]