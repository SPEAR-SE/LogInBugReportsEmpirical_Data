[A simple approach would be to initialize the scheduler early in JobTracker's constructor before making the state {{RUNNING}}., What are the semantics of submitting jobs to a scheduler that does not consider itself running? Is this a race condition in which the scheduler is responding to RPC operations but not yet scheduling work?

The Hadoop-3412 JobTracker declares itself running in the constructor; it says it is live, so perhaps the solution is for it not to declare its liveness until the scheduler is live.

Note that the  	HADOOP-3628 lifecycle changes would move the startup of the various services outside the constructor. I'm merging that patch with HADOOP-3412, and will move the starting of the scheduler up to the startup phase, bq. What are the semantics of submitting jobs to a scheduler that does not consider itself running?
I think you mean JobTracker. Ideally it should throw state exception. Here, the JT is responding to the RPCs but since the scheduler is not yet up, it fails to add to the {{JobInitQueue}}. 
, Looking at this code, there's always been a bit of an implicit race condition, with the offerService() method being the point where the service is meant to go live.

1. we could have the JT reject submitJob() operations until offerService() operation called to take the tracker live, and do not consider the service to be live until that operation is called.

2. In the HADOOP-3628 lifecycle changes, we could make offerService() a deprecated no-op (and delete its current uses), and instead
 -have the service go live in the start() lifecycle event
 -reject all attempts to submit work until that service is live

Clearly I'm biased towards option (2); I could even write a test to verify jobs were rejected unless the service was started. But for a quick inelegant fix, start the scheduler in the JobTracker's constructor. , bq. Prior to HADOOP-3412, job tracker could accept jobs without even offering service (i.e without JobTracker.offerService() being called). 

I see that in the latest code, job tracker calls {{TaskScheduler.start}} as the first statement in {{offerService}} and the {{interTrackerServer}} is started after that. I also checked that all schedulers currently implemented add their listeners to the JobTracker in the {{start}} method itself. Hence, currently, this issue doesn't exist.

I am moving this out of the Hadoop 0.19 blocker list based on this, but keeping the issue open - as it is possible that the schedulers don't add their listeners at startup theoretically. I think this fact needs to be made more explicit and the contract well defined.

But for now, things do work fine. Amar, if this diagnosis is incorrect, can you please explain and mark it back as a blocker ?, HADOOP-3245 seems to have fixed this issue. With HADOOP-3245 the order is
- start the scheduler process
- recover incomplete jobs
- start the ipc server
- make the state running

Hence there is no corner case as ipc server starts only after the scheduler is started.]