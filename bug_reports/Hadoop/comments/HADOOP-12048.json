[There might be some relevance to HADOOP-11804., result of the current dependency violations, certainly happy for anything that can get pulled out of the artifacts I'm building. Undeclared used probably not a problem for me on HADOOP-11804 because they likely show up as transitive., Starting point for cleanup, I uploaded a WIP patch.

Is there a good way to validate that 

$ mvn dependency:analyze

doesn't show false positives/negatives?, \\
\\
| (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | pre-patch |  14m 35s | Pre-patch trunk compilation is healthy. |
| {color:green}+1{color} | @author |   0m  0s | The patch does not contain any @author tags. |
| {color:red}-1{color} | tests included |   0m  0s | The patch doesn't appear to include any new or modified tests.  Please justify why no new tests are needed for this patch. Also please list what manual steps were performed to verify this patch. |
| {color:red}-1{color} | javac |   0m 17s | The patch appears to cause the build to fail. |
\\
\\
|| Subsystem || Report/Notes ||
| Patch URL | http://issues.apache.org/jira/secure/attachment/12742428/HADOOP-12048.1.patch |
| Optional Tests | javadoc javac unit |
| git revision | trunk / c6793dd |
| Console output | https://builds.apache.org/job/PreCommit-HADOOP-Build/7075/console |


This message was automatically generated., The build shows several:

rm: missing operand
Try 'rm --help' for more information., [~gliptak] they will be resolved if HADOOP-12113 is merged into trunk. According to its release note:

bq. smart-apply-patch has a stray rm fixed., \\
\\
| (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | pre-patch |  14m 44s | Pre-patch trunk compilation is healthy. |
| {color:green}+1{color} | @author |   0m  0s | The patch does not contain any @author tags. |
| {color:red}-1{color} | tests included |   0m  0s | The patch doesn't appear to include any new or modified tests.  Please justify why no new tests are needed for this patch. Also please list what manual steps were performed to verify this patch. |
| {color:red}-1{color} | javac |   0m 21s | The patch appears to cause the build to fail. |
\\
\\
|| Subsystem || Report/Notes ||
| Patch URL | http://issues.apache.org/jira/secure/attachment/12742623/HADOOP-12048.2.patch |
| Optional Tests | javadoc javac unit |
| git revision | trunk / 8e33372 |
| Console output | https://builds.apache.org/job/PreCommit-HADOOP-Build/7084/console |


This message was automatically generated., Jenkins shows a javac failure, but the log doesn't have the error.

https://builds.apache.org/job/PreCommit-HADOOP-Build/7084/console

What is the best way to identify how this failed?, \\
\\
| (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | pre-patch |  15m 16s | Pre-patch trunk compilation is healthy. |
| {color:green}+1{color} | @author |   0m  0s | The patch does not contain any @author tags. |
| {color:red}-1{color} | tests included |   0m  0s | The patch doesn't appear to include any new or modified tests.  Please justify why no new tests are needed for this patch. Also please list what manual steps were performed to verify this patch. |
| {color:red}-1{color} | javac |   0m 22s | The patch appears to cause the build to fail. |
\\
\\
|| Subsystem || Report/Notes ||
| Patch URL | http://issues.apache.org/jira/secure/attachment/12742662/HADOOP-12048.3.patch |
| Optional Tests | javadoc javac unit |
| git revision | trunk / d3797f9 |
| Console output | https://builds.apache.org/job/PreCommit-HADOOP-Build/7089/console |


This message was automatically generated., OK, I found the error at:

https://builds.apache.org/job/PreCommit-HADOOP-Build/7089/artifact/patchprocess/patchJavacWarnings.txt

I do not see this locally so I need to identify the difference., bq. What is the best way to identify how this failed?

FYI, we've fixed this newer versions of test-patch, but they aren't on hadoop's trunk yet.  You can always force Jenkins to switch to branch HADOOP-12111 and triggering the newer version by doing two things:

a) naming your patch blah.HADOOP-12111.xx.patch
b) changing something in test-patch.sh as part of that patch (such as adding a line)

be aware that test-patch.sh in HADOOP-12111 is clearly different, so make it a simple, not-likely-to-conflict change like adding a line after the bang path, [~gliptak], the compilation failure is definitely caused by the patch, and I am able to reproduce it. It is because jetty-util was removed from the (test) dependencies in hadoop-auth.

As a rule, we need to be real careful in *removing* dependencies. There are many necessary runtime dependencies that cannot be verified by the maven dependency plugin. One cannot remove them unless we're 100% certain that runtime dependency is not needed.

The easier problem to solve (but probably of lesser value) is to add direct but undeclared dependencies. Those are easily detected by the maven dependency plugin., I would like to work this in phases. I submitted HADOOP-12168 as the first set., [~sjlee0] Thank you for looking at the patches. I didn't not get the error on jetty-util locally ... I will keep modifying until both local and Jenkins pass.]