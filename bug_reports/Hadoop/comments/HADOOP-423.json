[To fix this, we'll detect and normalize relative paths in the Path class.  For backwards compatibility, we'll allow people to rename or remove existing files/dirs that contain '.' or '..' .  Or do people think that's not necessary because it's unlikely anyone has been using '.' and '..' in their paths intentionally?  (Though I suppose if they did unintentionally, it might be nice to let them remove them.)
      , The patch also includes changes in Path.java as well as added tests in TestPath.java., I think, as a safeguard, we should probably also disallow "." and ".." as file or directory names at the namenode, throwing an exception for attempts to create directories or files with these names.

While we're at it, should we also prohibit "/" and ":" in names?  I think so.  Currently it is impossible to create a Path with a slash in a name, although colons are permitted., I can add a check to disallow "." and ".." (and prohibit ":") as file or directory names.  Should this be done in DFSClient or the namenode?  We can save an rpc by putting it in the client., I think we want it as a sanity check in the namenode, so that we're sure they never enter the filesystem.  I don't think it's worth trying to optimize this., This patch also contains the check in the namenode. , I think the check in the NameNode isn't quite right.  We should never permit "." or ".." at any point in a path here, since paths should always be fully qualifited and normalized by the time they reach the namenode, right?

Also, it seems a shame to have to call Path.toString().  Perhaps we should add a Path method like:

  public String element(int i) { return elements[i]; }

Then the path checker could be implemented with something like:

if (!path.isAbsolute()) {
  throw ... 
}
for (int i = 0; i < path.depth(); i++) {
  String element = path.element(i);
  if (element.equals("..") || element.equals(".") || element.indexOf("/") >= 0) {
    throw ...
  }
}
, You're right, I've changed the logic in the namenode check.

I don't understand where you don't want to call Path.toString(), in DFSClient?  The namenode only gets a String, which I parse for the offending sequences.    Do you mean we should convert it to a Path there?, > I don't understand where you don't want to call Path.toString(), in DFSClient?

You're right.  I mistakenly assumed that src.toString() was used to convert a Path to a String, when it's really used to convert a UTF8 to a String.  Sorry!, I just committed this.  Thanks, Wendy!]