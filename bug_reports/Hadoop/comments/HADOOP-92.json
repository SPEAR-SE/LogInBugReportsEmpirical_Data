[specifically, I'm hoping that we can create a well known file in the output directory with a log of all interesting job output.

Perhaps we should put it in a subdirectory /INFO/ of the output directory, so that when the directory is used for future input, it is not confused with data?  This will also allow us to add other things later., It could be done with a logs directory in output_dir. So, the output_dir/logs/tasks/  would contain all the information per task (a file per task). This file would contain information like -- machine name, start time, end time, result status, error messages. Also, there should be a file per job  output_dir/logs/job_id.log. This file would contains job specific data -- no of mapreduce tasks that were running at some time, number of machines it was running on, and the start time and end time of the job. This log could also contain information on which of the task failed, so that the user can take a look at the respective task log to know why it failed., Another approach to this would be to expose this through the JobClient API.  Job-related events can be reported to the job client.  Events can be queued in the job tracker and the JobClient can retrieve them as it polls for job status.  Then the JobClient can decide where to log them.  By default they can be logged to standard error.

The events I think one might care about are:
  - task start (task_id, type & host)
  - task completion (task_id)
  - task failure (task_id, error message)

The jobtracker already tracks most of this, so I don't think this places a huge new burden on the jobtracker.

I don't like polluting the job's output directory with log data since it would require changes to the InputFormat implementations and other code to make them skip this specially named sub-directory (unless the name begins with a dot, which the fs code already ignores).

In any case, we could add an option to JobClient to log to the job's output fs.
, here is patch that reports the machine on which a specific task failed. Clicking on the jobid takes you to a page where  the information is displayed as before (with a little more parsing). But each of the task's is made clickable to show all the attempts that were made to execute this task. On clikcing on this task, you can see the machine on which a particular task attempt was executed and what the error was., I am including a patch that improves upon the job tracker interface. The tipid is made clickable so that it shows all the attempts for a particular task with the machine name. I found it useful, so am uplodaing it again., I took this patch for a spin.  +1 on commit., I've been using it today too. +1 on commit., This mostly looks good.  I committed it with the following changes:

1. TaskStatus is not a public class, so a public method in another public class should not return it.  For now, I just made the method package-private, since the jsp pages are compiled in the same package.  Longer-term we should probably copy this information into the TaskReport, the public version of a TaskStatus, or something.  This information should be available to other applications through a public API, and through an RPC in the JobSubmissionProtocol.

2. I renamed JobTracker.getallTaskStatus to be getTaskStatuses, like the JobInProgress method, and also using correct camel-case.

3. Rather than add a new TaskStatus contructor, leaving an old one that is no longer called, I removed the old one.  We don't need dead code around.  This is package-private, so we can be sure that no code outside of this package uses the old constructor.

4. The patch removed some inter-method whitespace.  I restored it.
]