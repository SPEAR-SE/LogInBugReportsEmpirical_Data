[this is a very important feature. Just spent a few hours trying to figure out why NativeIO was still being invoked by RawLocalFileSystem even though i had turned io.native.lib.available off.  

, Attaching a patch.
Now NativeCodeLoader always try to load native library in static method.
The patch will check configuration in the method. If io.native.lib.available is false, NativeCodeLoader never try to load native library., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12622832/HADOOP-8642.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:red}-1 core tests{color}.  The patch failed these unit tests in hadoop-common-project/hadoop-common:

                  org.apache.hadoop.io.compress.TestCodec
                  org.apache.hadoop.metrics2.impl.TestMetricsSystemImpl

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HADOOP-Build/3431//testReport/
Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/3431//console

This message is automatically generated., Renewed the patch to pass the failed tests., {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12622852/HADOOP-8642.2.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-common-project/hadoop-common.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HADOOP-Build/3432//testReport/
Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/3432//console

This message is automatically generated., Update the patch to
# discard the change in {{getLoadNativeLibraries(Configuration)}}
# clean up the code, Probably, {{TestNativeCodeLoader}} will be skipped in Jenkins. The test can be run manually by {{mvn test -Pnative -Dtest=TestNativeCodeLoader -Drequire.test.libhadoop=true}}, {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12662733/HADOOP-8642.3.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:red}-1 core tests{color}.  The patch failed these unit tests in hadoop-common-project/hadoop-common:

                  org.apache.hadoop.ha.TestActiveStandbyElector
                  org.apache.hadoop.ha.TestZKFailoverController

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HADOOP-Build/4509//testReport/
Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/4509//console

This message is automatically generated., The test failures seem to be unrelated to the patch., It looks like this is the right thing to do, although the patch would need a rebase at this point., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12662733/HADOOP-8642.3.patch
  against trunk revision 1a0f508.

    {color:red}-1 patch{color}.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/5689//console

This message is automatically generated., Thank you Chris! Rebased and refactored the patch., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12698829/HADOOP-8642.4.patch
  against trunk revision 8752568.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:red}-1 core tests{color}.  The patch failed these unit tests in hadoop-common-project/hadoop-common:

                  org.apache.hadoop.security.token.delegation.web.TestWebDelegationToken

Test results: https://builds.apache.org/job/PreCommit-HADOOP-Build/5691//testReport/
Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/5691//console

This message is automatically generated., Akira, sorry to go back and forth, but I'm now having second thoughts about this change after a deeper review.

Digging into revision history, I can see that this functionality was first introduced in HADOOP-1570.  The git commit hash is f9f6143876a1ff6e8eb1266917f4992f642aaea7.  The property was named {{hadoop.native.lib}} then.  This was a point in the project's history when the only native code in Hadoop was native compression codecs.  The current codebase of course has a lot more native code that's important for a lot of different things beyond the compression codecs.  I'm concerned about possible backwards incompatibility.  Existing deployments might be using this property to disable the native compression codecs, but are still dependent on the rest of the native code for other functionality.  If we were to push this change to those existing clusters, then they'd suddenly lose the rest of that important native code.

Another concern is the instantiation of yet another {{Configuration}} and all of the parsing that entails.  I don't think there would be any way around that, because this is all driven from static initialization.

All things considered, I have to vote -1 on changing the behavior of this property, at least within the 2.x line where we need to maintain backwards compatibility.  I would be +1 for a patch that updates the description in core-default.xml to clarify that it really only controls the native bz2 and zlib compression codecs., bq. If we were to push this change to those existing clusters, then they'd suddenly lose the rest of that important native code.
I agree with you. I'll update the patch to update the description in core-default.xml. Thanks [~cnauroth] for the deeper review!, Attaching a patch to update core-default.xml., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12698866/HADOOP-8642.5.patch
  against trunk revision 2efb234.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-common-project/hadoop-common.

Test results: https://builds.apache.org/job/PreCommit-HADOOP-Build/5692//testReport/
Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/5692//console

This message is automatically generated., +1 for the patch.  Thanks for taking care of this, Akira.

Let's hold off on committing until next week.  I see a lot of watchers, and this has gone in a different direction than originally described, so let's give them a chance to comment if they want.

bq. -1 tests included. The patch doesn't appear to include any new or modified tests.

This is a documentation patch only updating an XML file, so no new tests are required., Thanks, guys.  I agree with the patch as it's written here.  It is a good solution for 2.x.

I wonder if we can get rid of this property completely in 3.x?  I don't see a lot of use for it, to be honest.  Don't we (semi) silently omit the native support for bz2 and zlib during the build if those libraries are not installed?

Stepping back even further than that, we have too many options for doing partial or weirdo builds that nobody actually wants.  Would that many tears be shed if we just made zlib and bz2 mandatory for {{\-Pnative}}?  I bet that probably fewer tears would be shed because fewer people would accidentally get incomplete builds (nobody in the world actually wants a {{\-Pnative}} build without bz2 and zlib.... it's a square wheel), bq. I wonder if we can get rid of this property completely in 3.x?
Agree with you. I'm +1 for getting rid of the property in trunk., +1 for deprecating the property in branch-2 and removing it in trunk.  Reading the ancient history, it appears the property was introduced to offer a quick deploy-time safety net in case the native compression codecs (very new code at the time) encountered bugs.  At this point, the native compression codec code has been relatively stable for a while, so I see little use for this flag in practice.  As you said, there are alternative workarounds.

+1 for reducing the build permutations on trunk too.  I personally have no use case for building native without bz2 and zlib, and it can only cause confusion if builds pass but then fail in system test due to lack of those symbols linked into libhadoop.so/hadoop.dll.  I also have no use case for building without Snappy, though I imagine removing the options for that one could be a little more controversial., HADOOP-10409 and HADOOP-10452 are further evidence that all of the native build variants can cause confusion., At the time we added snappy support to Hadoop, Linux distros had only just started to include the snappy libs.  If we did that work today, we probably wouldn't put so many build knobs and dials in, since nearly every Linux distro now has snappy support easily available as standard.

I would not oppose making snappy mandatory for the native build in 3.0.0, although I think it's too late for 2.x., Committing this. Thanks [~cnauroth] and [~cmccabe] for reviews and discussions. I'll create a separate jira to remove the property from trunk., Committed this to trunk and branch-2. Thanks all., FAILURE: Integrated in Hadoop-trunk-Commit #7181 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/7181/])
HADOOP-8642. Document that io.native.lib.available only controls native bz2 and zlib compression codecs. (aajisaka) (aajisaka: rev ab5976161f3afaaf2ace60bab400e0d8dbc61923)
* hadoop-common-project/hadoop-common/src/main/resources/core-default.xml
* hadoop-common-project/hadoop-common/CHANGES.txt
, Filed HADOOP-11627 to remove the property from trunk., FAILURE: Integrated in Hadoop-Yarn-trunk-Java8 #114 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk-Java8/114/])
HADOOP-8642. Document that io.native.lib.available only controls native bz2 and zlib compression codecs. (aajisaka) (aajisaka: rev ab5976161f3afaaf2ace60bab400e0d8dbc61923)
* hadoop-common-project/hadoop-common/src/main/resources/core-default.xml
* hadoop-common-project/hadoop-common/CHANGES.txt
, SUCCESS: Integrated in Hadoop-Yarn-trunk #848 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk/848/])
HADOOP-8642. Document that io.native.lib.available only controls native bz2 and zlib compression codecs. (aajisaka) (aajisaka: rev ab5976161f3afaaf2ace60bab400e0d8dbc61923)
* hadoop-common-project/hadoop-common/src/main/resources/core-default.xml
* hadoop-common-project/hadoop-common/CHANGES.txt
, FAILURE: Integrated in Hadoop-Hdfs-trunk-Java8 #105 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk-Java8/105/])
HADOOP-8642. Document that io.native.lib.available only controls native bz2 and zlib compression codecs. (aajisaka) (aajisaka: rev ab5976161f3afaaf2ace60bab400e0d8dbc61923)
* hadoop-common-project/hadoop-common/CHANGES.txt
* hadoop-common-project/hadoop-common/src/main/resources/core-default.xml
, SUCCESS: Integrated in Hadoop-Hdfs-trunk #2046 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/2046/])
HADOOP-8642. Document that io.native.lib.available only controls native bz2 and zlib compression codecs. (aajisaka) (aajisaka: rev ab5976161f3afaaf2ace60bab400e0d8dbc61923)
* hadoop-common-project/hadoop-common/CHANGES.txt
* hadoop-common-project/hadoop-common/src/main/resources/core-default.xml
, FAILURE: Integrated in Hadoop-Mapreduce-trunk-Java8 #114 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk-Java8/114/])
HADOOP-8642. Document that io.native.lib.available only controls native bz2 and zlib compression codecs. (aajisaka) (aajisaka: rev ab5976161f3afaaf2ace60bab400e0d8dbc61923)
* hadoop-common-project/hadoop-common/CHANGES.txt
* hadoop-common-project/hadoop-common/src/main/resources/core-default.xml
, FAILURE: Integrated in Hadoop-Mapreduce-trunk #2064 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/2064/])
HADOOP-8642. Document that io.native.lib.available only controls native bz2 and zlib compression codecs. (aajisaka) (aajisaka: rev ab5976161f3afaaf2ace60bab400e0d8dbc61923)
* hadoop-common-project/hadoop-common/src/main/resources/core-default.xml
* hadoop-common-project/hadoop-common/CHANGES.txt
]