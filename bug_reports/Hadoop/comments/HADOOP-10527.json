[Kihwal wrote:

bq. I don't think it is correct to throw a RuntimeException when a user is not found (ENOENT).

We can't throw an IOException because the JNI function does not declare "{{throws IOException}}"  Throwing an exception not in the throw spec causes undefined behavior.  If you want to change the throw spec, that would also work.

You can see in JniBasedUnixGroupsMapping.java that the JNI function is declared like this:
{code}
  native static String[] getGroupsForUser(String username);
{code}

(There is no "{{throws IOException}}")

bq. The patch does not use errno. It explicitly use the return value. The code before my patch used errno.

OK, I missed the part where you removed this line:
{code}
-    } while ((!pwd) && (errno == EINTR));
{code}

That was indeed a good line to remove.

However, your patch adds these lines:
{code}
+    // The following call returns errno. Reading the global errno wihtout
+    // locking is not thread-safe.
{code}

This is doubly wrong because
* {{getpwnam_r}} doesn't set errno -- it returns the error code as a result
* {{errno}} is not global and is always thread-safe

So we need to remove this comment.

I think we need to get rid of {{MAX_USER_LOOKUP_TRIES}} and replace it with a maximum buffer size that we don't go over when we get {{ERANGE}}.  The problem with the current scheme is that it doesn't actually put a limit on buffer size since we don't consider this in our decision to multiply the buffer size by 2x or not.

{code}
+      char buf[128];
+      snprintf(buf, sizeof(buf), "getgrouplist: error looking up user. %d (%s)",
+               ret, terror(ret));
+      THROW(env, "java/lang/RuntimeException", buf);
{code}

Should use either {{newRuntimeException}} or {{newIOException}} here., bq. We can't throw an IOException because ...
I am not suggesting that. If a lookup successfully returns no result, it is supposed to return an empty collection without throwing any exception.

bq. So we need to remove this comment.
Agreed. 

bq. I think we need to get rid of MAX_USER_LOOKUP_TRIES and replace it with a maximum buffer size....
What do you think is the reasonable buffer size?

bq. Should use either newRuntimeException or newIOException here.
I think I misread your earlier comment in HADOOP-10522. I understand now. , {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12641130/hadoop-10527.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-common-project/hadoop-common.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HADOOP-Build/3823//testReport/
Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/3823//console

This message is automatically generated., The new patch sets the buffer size limit to 64K., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12641147/hadoop-10527.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:red}-1 javac{color:red}.  The patch appears to cause the build to fail.

Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/3824//console

This message is automatically generated., Sorry, a wrong version of patch was attached.  Here is the right one., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12641258/hadoop-10527.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-common-project/hadoop-common.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HADOOP-Build/3831//testReport/
Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/3831//console

This message is automatically generated., Looks better.

{code}
+  for (ret = 0, buf_sz = uinfo->buf_sz;  buf_sz < MAX_USER_BUFFER_SIZE;) {
{code}

This means that once {{uinfo->buf_sz}} reaches {{MAX_USER_BUFFER_SIZE}}, we'll never run the loop again.  This doesn't seem like what you intended.  How about a do... while loop?

Also, please remove the comments about errno not being thread-safe., >  This doesn't seem like what you intended.
Rearranged the code. Since the terminal condition of the loop has changed (no more fixed limit on # of iterations), I moved realloc() back to after the sys/lib calls.  Compared to pre-HADOOP-10522, it uses single loop instead of nested loop and return code/error handling was modified.

> Also, please remove the comments about errno not being thread-safe.
They were removed in the previous patch. For a second, I though I screwed up and posted an old patch again!

Here is something new about this patch.  

I thought about what the reasonable initial buffer size and the limit would be.  For user lookups, the buffer can be relatively small and {{_SC_GETPW_R_SIZE_MAX}} won't be too big. So the max buffer size here will mostly be for avoiding infinite lookup loop caused by a bug in library.  I think 32KB is far more than enough for containing a single user's passwd entry. So I set the buffer size limit to 32KB.  I did not change the initial buffer size as {{_SC_GETPW_R_SIZE_MAX}} won't be excessively big and using it as the initial buffer size will avoid realloc() in most cases, if not all.

Group lookups are different.The number of members in the group can vary a lot. {{_SC_GETGR_R_SIZE_MAX}} is usually very big and allocating this much upfront may not be ideal.  So I set the initial buffer to be 8KB and allowed it to grow up to 2MB. Assuming average user name length of 15 bytes, 8KB will be large enough to store a group with about 500 members. 2MB will be large enough for a group with about 130K members.

What do you think about the new initial buffer size and the limit?, bq. Rearranged the code. Since the terminal condition of the loop has changed (no more fixed limit on # of iterations), I moved realloc() back to after the sys/lib calls. Compared to pre-HADOOP-10522, it uses single loop instead of nested loop and return code/error handling was modified.

This looks good.  Thanks.

bq. \[the comments about errno\] were removed in the previous patch. For a second, I though I screwed up and posted an old patch again!

Oh, you're right.  Sorry, I feel dumb now.

bq. Group lookups are different.The number of members in the group can vary a lot. _SC_GETGR_R_SIZE_MAX is usually very big and allocating this much upfront may not be ideal. So I set the initial buffer to be 8KB and allowed it to grow up to 2MB.... What do you think about the new initial buffer size and the limit?

I was curious about this myself, so I ran the following program:
{code}
#include <stdio.h>
#include <unistd.h>

int main(void) {
  fprintf(stderr, "%lld\n", (long long)sysconf(_SC_GETGR_R_SIZE_MAX));
  return 0;
}
{code}

For me, it returned 1024.  So I don't think {{_SC_GETGR_R_SIZE_MAX}} is usually very big.  Apparently the value of {{_SC_GETGR_R_SIZE_MAX}} is merely "an initial suggested size" and not the actual maximum (as you might think by reading its name).  At least according to this:
http://tomlee.co/2012/10/problems-with-large-linux-unix-groups-and-getgrgid_r-getgrnam_r/

Anyway, I think your new starting size is good, because it will prevent re-allocation in most cases.  So I am +1 on the patch as-is.  Thanks for looking into this, Kihwal.
, {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12641356/hadoop-10527.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-common-project/hadoop-common.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HADOOP-Build/3834//testReport/
Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/3834//console

This message is automatically generated., The information I looked at was based on POSIX.1-2001. In POSIX.1-2008, it was revised like this:
{panel}
 A call to sysconf(_SC_GETGR_R_SIZE_MAX) returns either -1 without 
 changing errno or an initial value suggested for the size of this buffer.
{panel}

Thanks for the reviews, Colin., I've committed this to trunk, branch-2 and branch-2.4., SUCCESS: Integrated in Hadoop-trunk-Commit #5553 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/5553/])
HADOOP-10527. Fix incorrect return code and allow more retries on EINTR. Contributed by Kihwal Lee. (kihwal: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1589405)
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/native/src/org/apache/hadoop/security/JniBasedUnixGroupsMapping.c
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/native/src/org/apache/hadoop/security/hadoop_group_info.c
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/native/src/org/apache/hadoop/security/hadoop_user_info.c
, ABORTED: Integrated in Hadoop-Yarn-trunk #550 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk/550/])
HADOOP-10527. Fix incorrect return code and allow more retries on EINTR. Contributed by Kihwal Lee. (kihwal: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1589405)
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/native/src/org/apache/hadoop/security/JniBasedUnixGroupsMapping.c
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/native/src/org/apache/hadoop/security/hadoop_group_info.c
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/native/src/org/apache/hadoop/security/hadoop_user_info.c
, FAILURE: Integrated in Hadoop-Mapreduce-trunk #1767 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/1767/])
HADOOP-10527. Fix incorrect return code and allow more retries on EINTR. Contributed by Kihwal Lee. (kihwal: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1589405)
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/native/src/org/apache/hadoop/security/JniBasedUnixGroupsMapping.c
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/native/src/org/apache/hadoop/security/hadoop_group_info.c
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/native/src/org/apache/hadoop/security/hadoop_user_info.c
, FAILURE: Integrated in Hadoop-Hdfs-trunk #1742 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/1742/])
HADOOP-10527. Fix incorrect return code and allow more retries on EINTR. Contributed by Kihwal Lee. (kihwal: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1589405)
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/native/src/org/apache/hadoop/security/JniBasedUnixGroupsMapping.c
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/native/src/org/apache/hadoop/security/hadoop_group_info.c
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/native/src/org/apache/hadoop/security/hadoop_user_info.c
]