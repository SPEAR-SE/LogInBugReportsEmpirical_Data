[I'd like to propose that we merge auth + annotations and common into a single jar., @Owen, I don't know if you recall our conversation about this, but hadoop-auth being on its own has a reason. It is lightweight dependencies speaking and this is a quite convenient when used on the client side without bringing in all commons dependencies. Particularly in oozie-client side. I'd prefer to keep it that way.

Regarding hadoop-annotations, this JAR is used for the build only and it does not end up in the distribution.

, There is a high cost to having our code spread out in so many roots, because it practically requires and IDE to navigate the Hadoop code base at this point. Making the source easy to navigate and understand is a very very important goal that we've lost in the current structure. (Granted I'm starting on the easy stuff (ie. common), but I want to go through and simply our whole structure.)

Are there any projects that actually use just auth? , bq. Are there any projects that actually use just auth?

oozie-client does.

Agree we have to simplify modules. Don't understand the issue with the IDEs, they don't care, and navigation through modules is seamless.

IMO we should have the following modules:

* auth (1)
* client-api (only the project public interfaces/classes)
* hdfs-client-impl (client impl)
* yarn-client-impl (client impl)
* mapreduce-client-impl (client impl)
* common-server
* hdfs-server
* yarn-server
* tools
* httpfs (2)

(1: it is used outside of Hadoop on client side)
(2: it produces a WAR, maven modules should produce one artifact, a JAR, a WAR, a POM)


, The fact that there is a dependence loop between the stuff in auth and common is indicative of a problem. To address that you pulled the annotations out, but that just makes the whole structure very complex.

I'd suggest a structure that looks like:
* common
* hdfs
  ** hdfs-client
  ** hdfs-server
* yarn
  ** yarn-client
  ** yarn-server
* mapreduce
* extras
  ** distcp
  ** har
  ** httpfs
* examples

If you want to add an extra project that pulls auth package out of the common jar, I guess we could do it that way. That way, the base case for Hadoop works well and it is easy to find things., Your proposed structure makes sense. Har is currently part of common, I assume you meant hadoop-archives

I may have expressed myself incorrectly, there is not dependency loop between common and auth, common depends on auth, auth does not depend on common.

My concern with folding auth into common is that common has tons of dependencies for runtime (all the ones that end with *:compile*)

{code}
[INFO] org.apache.hadoop:hadoop-common:jar:0.24.0-SNAPSHOT
[INFO] +- org.apache.hadoop:hadoop-annotations:jar:0.24.0-SNAPSHOT:provided
[INFO] |  \- jdiff:jdiff:jar:1.0.9:provided
[INFO] +- com.google.guava:guava:jar:r09:compile
[INFO] +- commons-cli:commons-cli:jar:1.2:compile
[INFO] +- org.apache.commons:commons-math:jar:2.1:compile
[INFO] +- xmlenc:xmlenc:jar:0.52:compile
[INFO] +- commons-httpclient:commons-httpclient:jar:3.1:compile
[INFO] +- commons-codec:commons-codec:jar:1.4:compile
[INFO] +- commons-net:commons-net:jar:1.4.1:compile
[INFO] +- javax.servlet:servlet-api:jar:2.5:compile
[INFO] +- org.mortbay.jetty:jetty:jar:6.1.26:compile
[INFO] +- org.mortbay.jetty:jetty-util:jar:6.1.26:compile
[INFO] +- asm:asm:jar:3.2:compile
[INFO] +- com.sun.jersey:jersey-core:jar:1.8:compile
[INFO] +- com.sun.jersey:jersey-json:jar:1.8:compile
[INFO] |  +- org.codehaus.jettison:jettison:jar:1.1:compile
[INFO] |  |  \- stax:stax-api:jar:1.0.1:compile
[INFO] |  +- com.sun.xml.bind:jaxb-impl:jar:2.2.3-1:compile
[INFO] |  |  \- javax.xml.bind:jaxb-api:jar:2.2.2:compile
[INFO] |  |     \- javax.activation:activation:jar:1.1:compile
[INFO] |  +- org.codehaus.jackson:jackson-core-asl:jar:1.7.1:compile
[INFO] |  +- org.codehaus.jackson:jackson-jaxrs:jar:1.7.1:compile
[INFO] |  \- org.codehaus.jackson:jackson-xc:jar:1.7.1:compile
[INFO] +- com.sun.jersey:jersey-server:jar:1.8:compile
[INFO] +- tomcat:jasper-compiler:jar:5.5.23:compile
[INFO] +- tomcat:jasper-runtime:jar:5.5.23:compile
[INFO] +- javax.servlet.jsp:jsp-api:jar:2.1:compile
[INFO] +- commons-el:commons-el:jar:1.0:compile
[INFO] +- commons-logging:commons-logging:jar:1.1.1:compile
[INFO] +- commons-logging:commons-logging-api:jar:1.1:compile
[INFO] +- log4j:log4j:jar:1.2.15:compile
[INFO] +- net.java.dev.jets3t:jets3t:jar:0.6.1:compile
[INFO] +- org.apache.mina:mina-core:jar:2.0.0-M5:test
[INFO] +- org.apache.ftpserver:ftplet-api:jar:1.0.0:test
[INFO] +- org.apache.ftpserver:ftpserver-core:jar:1.0.0:test
[INFO] +- org.apache.ftpserver:ftpserver-deprecated:jar:1.0.0-M2:test
[INFO] +- junit:junit:jar:4.8.2:test
[INFO] +- commons-lang:commons-lang:jar:2.5:compile
[INFO] +- commons-collections:commons-collections:jar:3.2.1:compile
[INFO] +- commons-configuration:commons-configuration:jar:1.6:compile
[INFO] |  +- commons-digester:commons-digester:jar:1.8:compile
[INFO] |  |  \- commons-beanutils:commons-beanutils:jar:1.7.0:compile
[INFO] |  \- commons-beanutils:commons-beanutils-core:jar:1.8.0:compile
[INFO] +- hsqldb:hsqldb:jar:1.8.0.7:compile
[INFO] +- org.slf4j:slf4j-api:jar:1.6.1:compile
[INFO] +- org.slf4j:slf4j-log4j12:jar:1.6.1:compile
[INFO] +- org.eclipse.jdt:core:jar:3.1.1:compile
[INFO] +- oro:oro:jar:2.0.8:compile
[INFO] +- org.codehaus.jackson:jackson-mapper-asl:jar:1.7.1:compile
[INFO] +- org.aspectj:aspectjrt:jar:1.6.5:compile
[INFO] +- org.mockito:mockito-all:jar:1.8.5:test
[INFO] +- org.apache.avro:avro:jar:1.5.3:compile
[INFO] |  +- com.thoughtworks.paranamer:paranamer:jar:2.3:compile
[INFO] |  \- org.xerial.snappy:snappy-java:jar:1.0.3.2:compile
[INFO] +- net.sf.kosmosfs:kfs:jar:0.3:compile
[INFO] +- org.apache.ant:ant:jar:1.8.1:provided
[INFO] |  \- org.apache.ant:ant-launcher:jar:1.8.1:provided
[INFO] +- com.google.protobuf:protobuf-java:jar:2.4.0a:compile
[INFO] +- org.apache.hadoop:hadoop-auth:jar:0.24.0-SNAPSHOT:compile
[INFO] \- com.googlecode.json-simple:json-simple:jar:1.1:compile
{code}

Regarding annotations, it is something not needed/used at runtime, same as the test stuff, thus it should not be in the runtime JARs.
, Looks reasonable, I like the moving up of yarn and it's separation from mapreduce., I understand the large number of dependencies, but if we carried that to its logical conclusion, all of the many many unrelated parts of common would split out into separate jars. (Writables, file formats, security, rpc, ...) That would create a huge mess.

For oozie client, just use the common jar and block all of the dependencies you don't want. (Or as I proposed earlier, we can create extras/auth that has a pom & jar that is just the auth package pulled out of common.), We don't need to  carry this to its logical conclusion. I don't think we have any other part of common that is used outside of hadoop in the same why as auth is.

Yes, oozie-client could use common JAR and block all dependencies that are not needed. However this has 2 problems, you have to be aware of which dependencies are needed for auth and when common adds a new dependency oozie-client will have to filter that out. In other words, you lose the dependency management.

What is your proposal for extra/auth? (I may have missed that), bq. Looks reasonable, I like the moving up of yarn and it's separation from mapreduce.

Agree. Ditto for the separation of client and server, that's one of the biggest pain points., {quote}
What is your proposal for extra/auth? (I may have missed that)
{quote}

I'm hardly a Maven pro, but it looks like you should be able to set up a module under extras that uses the assembly plugin to take the common jar and pull out the auth package. I'm not wild about it, but at least it doesn't cause pain for Hadoop developers to simplify oozie's dependencies. , @Owen, I guess your suggestion could work. But still you'd have the same number of modules as hadoop-auth would still exists. You'd only save from having an additional JAR in Hadoop classpath. Don't think is worth the trouble, is it? And it is a bit non-expected stuff.]