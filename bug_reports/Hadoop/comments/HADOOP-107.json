[It looks like your write to a file takes too long.
The client has 1 minute to complete one block write until
the lease issued for that client expires. When the lease expires the
namenode thinks the block is abandoned. If your files are small,
consisting of only 1 block, then the file will be considered abandoned
as well. So the namenode removes the file before the client reports
its completion.
Lease duration is not configurable, so you cannot control that.
But you can retry everything starting from file creation when you
receive that exception.
Is it true that your writes take longer than a minute?
, A connection to a datanode is opened for the checksum file when a file is opened.  Then lots of data is written to the main file, and only a little to the parallel checksum file.  So the checksum file might not get touched in up to a minute.

The last block of every file (checksum & main) is tee'd to a temporary local file, so that if the network connection dies then attempts can be made to re-transmit it to another datanode.

This patch changes things so that connections to datanodes are not initiated until the block is complete.  All writes are initially to the local, temporary file and only copied to a datanode when the block is complete., This is correct - I tryed to write log files directly to DFS and depending on activity it could take pretty long time between calls. As a workaround - I changed my code to write to local output first and move to DFS only after file is closed (startLocalOutput/completeLocalOutput) and the problem went away.

The question is whether this behavior is expected? I though that with buffered output the blocks should not be requested until flush. If the block is requested too soon and the output takes a while for whatever reason - it's practically guaranteed to hit this problem, right? Also I never saw this happening with data files, only checksum files., Just tested the patch and now it works as expected. 
Thanks!, I just committed a fix for this.]