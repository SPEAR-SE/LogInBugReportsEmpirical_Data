[- Why does it do stat.getPath().toString().contains("job.xml") but not new Path(parent, "job.xml")?
Also If the parent path contains "job.xml", all stat will be matched.

- Do we really need jobFileSize or jarFileSize?  It seems working fine even the computation in the for-loop is wrong.

See also https://issues.apache.org/jira/browse/HADOOP-3182?focusedCommentId=12585877#action_12585877, bq Do we really need jobFileSize or jarFileSize? It seems working fine even the computation in the for-loop is wrong.

We need them to make sure the LocalDirAllocator checks for size before allocating.  If size is -1, LocalDirAllocator does not to check. thatswhy, things were fine.

, Patch fixing the bug in calculating jarFileSize and jobFileSize. 
Also incorporated Nicholas's suggestion in comparison., In this case, you should use FileSystem.getFileStatus(Path) instead of FileSystem.listStatus(Path)., Cancelling patch to incorporate Nicholas's suggestion., bq. you should use FileSystem.getFileStatus(Path) instead of FileSystem.listStatus(Path).

Using listStatus(Path) makes only one RPC. Do you think we should go for FileSystem.getFileStatus(Path) and make two RPCs?
, If we use FileSystem.listStatus(Path), it requires 'r' permission in the parent dir.  It seems that this additional permission requirement is not necessary.

For saving RPCs, do we really need the size of job.xml?  In most cases, the file size is < 20kB., bq. Using listStatus(Path) makes only one RPC. Do you think we should go for FileSystem.getFileStatus(Path) and make two RPCs?

This section of code should be called once per TaskTracker per Job, right? The difference between one RPC and two RPCs here is insufficient to measure, let alone effect a performance bottleneck or load we should worry about. Since the 5x expansion of the jar is a pessimistic estimate, the config should scarcely matter, but given HADOOP-3048 and the possibility of serialized objects in the config, it's worth checking its size, too., Patch incorporating review comments., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12381858/patch-3203.txt
  against trunk revision 655410.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no tests are needed for this patch.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/2451/testReport/
Findbugs warnings: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/2451/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Checkstyle results: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/2451/artifact/trunk/build/test/checkstyle-errors.html
Console output: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/2451/console

This message is automatically generated., +1, I just committed this. Thanks, Amareshwari!, Integrated in Hadoop-trunk #492 (See [http://hudson.zones.apache.org/hudson/job/Hadoop-trunk/492/])]