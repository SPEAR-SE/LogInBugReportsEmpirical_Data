[The problems were:
- a compare() method whose signature is wrong.  I think this is a bug.
- two cases with multiple top-level classes per file.  I don't know if this a bug with Harmony or not, but it's not an encouraged style anyway: placing these in separate files seems like an improvement.
, +1

Does this also resolve HADOOP-1826?, This patch doesn't compile under Mac OS. The change to the compare method is wrong because JobEndStatusInfo implements Delayed and Delayed implements Comparable<Delayed>. 

{code}
    [javac] /Users/oom/work/eclipse/hadoop-trunk/src/java/org/apache/hadoop/mapred/JobEndNotifier.java:169: org.apache.hadoop.mapred.JobEndNotifier.JobEndStatusInfo is not abstract and does not override abstract method compareTo(java.util.concurrent.Delayed) in java.lang.Comparable
    [javac]   private static class JobEndStatusInfo implements Delayed {
    [javac]                  ^
{code}

and therefore the compare's operand should be Delayed. I suspect this is a bug in Harmony., Sigh.  I can't find a way to get a class that 'implements Delayed' to compile in both Sun Java and Harmony.

Given:

{noformat}
public interface Comparable<T> {
  int compareTo(T o);
}
public interface Delayed extends Comparable<Delayed> {}
{noformat}

Harmony requires the first of the following methods, but doesn't mind the second, while Sun permits only the second.

{noformat}
public class DelayedImpl implements Delayed {
  public int compareTo(Object o);
  public int compareTo(Delayed o);
}
{noformat}

My hunch is that Sun is correct here and that we should file a bug against Harmony.
, Filed as HARMONY-5807., Note that although the original bug HARMONY-5807 is fixed, until Harmony moves to Java 6, Hadoop will not compile under it., RIP Harmony.



]