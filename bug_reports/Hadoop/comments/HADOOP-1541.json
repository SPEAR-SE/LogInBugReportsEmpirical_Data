[These messages are harmless because it happens when the client is trying to delete a non-existant file. But we should make sure that these message do not appear in the namenode log at INFO log level., One solution would be to make the IPC server log these exception messages at debug level.  But this might hide other important exceptions in the namenode.

Another option would be to make the client change FileSystem.isDir() to first invoke fs.exists(f) and only if the file exists then call getFileInfo(). This introduces the overhead of two RPCs for the isDir() call., If the Namenode generates an exception object of type NoExceptionLogging for a RPC call, then the IPC server does not log it in the Server log., 1. Changed name of the exception class to NoLogException.

2. A new method to NoLogException to extract the real underlying exception., +1 The patch looks good., -1, build or testing failed

2 attempts failed to build and test the latest attachment http://issues.apache.org/jira/secure/attachment/12361822/ipcExceptionLog2.patch against trunk revision r555813.

Test results:   http://lucene.zones.apache.org:8080/hudson/job/Hadoop-Patch/412/testReport/
Console output: http://lucene.zones.apache.org:8080/hudson/job/Hadoop-Patch/412/console

Please note that this message is automatically generated and may represent a problem with the automation system and not the patch., I think this would better be fixed by making deletion of a non-existent file optionally not generate exceptions, by adding a 'force' flag to delete().  Perhaps we can implement this by permitting getFileInfo() to return null for non-existing files, and we can check for that.  Could that work?

Also, is this really a blocker?, I think it is natural for getFileInfo() to throw an exception if the file is not found (instead of returning null). I would hate to go back to a C-style coding form (and check for null everywhere getFileInfo is called) just to accomodate a certain logging behavour in the server logs.

The reason it is a blocker is that exceptions in the namenode logs makes a cluster administrator jittery and results in lots of questions., My primary point is that if something is non-exceptional, like trying to remove a non-existant file, then we shouldn't rely on exception handling to implement it.  Exceptions should not be used for normal control flow.  Perhaps we need to adjust the FileSystem API to support this operation explicitly, but I don't think just masking the exception is the right approach., I agree that we should not rely on exceptions to handle a normal control flow. But this patch has nothing to do with "deletion of a non-existent file". The FileSystem.isDir() method invokes getFileInfo(). if the file does not exist, then getFileInfo() throws an exception. The Filesystem.isDir() method catches this exception and returns false.

The "masking the exception" is being done on the client by FileSystem.isDir()., > The "masking the exception" is being done on the client by FileSystem.isDir().

Then that is what we should fix, no?  And if fixing it requires changes to FileSystem's API, that's what we should do., If we do not want to depend on exceptions in the normal flow of code, then how about making FileSystem.isDir() first do an exists() and only if the path exists, it will do a getFileInfo() RPC. 

This might increase the number of RPCs on the namenode but has the elegant design that normal code flow avoids generating exceptions. (Earlier the ChecksumFileSystem used to invoke isDir() for each file deletion but with the coming of the BlockCRC, this code path is not used.), The isDirectory call first checks if the path exists before it issues a GetFileInfo() RPC., We probably shouldn't spend a lot of time trying to improve FileSystem#isDir(), since it is deprecated.  Applications are now encouraged to instead call getFileInfo() directly.

The application-level call that's triggering this is to remove a non-existant file, right?  So maybe we should add a method FileSystem#delete(Path, boolean quiet) that, when 'quiet' is specified, does not throw an exception for non-existent paths.  The default implementation can use exists().  Then, if we like, we can optimize this for HDFS, by adding a new RPC for delete-if-exists.  Could that work?, With the coming of the block level CRC, the delete-if-exists code in the ChecksumFileSystem is not invoked in the regular code path at all. So, this problem has gone away. 

A nightly benchmark run with the old code caused about 200 of these  exceptions in the namenode log. With the current trunk, i do not see a single exception in the namenode log. I am inclined to mark this as 'resolved', or at least move it off the "Blocker" queue. Does it sound reasonable? , > I am inclined to mark this as 'resolved', or at least move it off the "Blocker" queue.

+1

The bug is that isDir() uses exception handling to handle non-existent files rather than calling exists().  Since isDir() is no longer called in this way by the core, this is no longer a blocker.  If we intend to fix isDir() to call exists() then we should re-target this for 0.15, but if we instead, intend to remove calls to isDir() in 0.15, then we should resolve this now and file a new issue for that.
]