[Here is one bug: {get|set}ContentLength apis use 'int's instead of 'long's... I'll keep poking around., We should use standard HTTP header strings like "Content-Length" as opposed to HttpFields.__ContentLength. Secondly, the part of the patch meant for getFile will apply to only the deprecated getFile call., Oh, sorry if it wasn't clear, this patch is of course preliminary and is meant to be illustrative - we will need to make substantial changes (lots of the apis in InMemoryFileSystem e.g. reserveSpaceWithChecksum, reserveSpace, FileAttributes etc. take 'int' for a file size) to arrive at a working solution.

HttpFields.__ContentLength is a constant defined by jetty5... I'd guess it's safer to rely on that than raw strings?, I know the patch is preliminary. I just wanted to point out that we should use standard HTTP headers as opposed to Jetty's constants. We should not rely on Jetty's constants as far as possible especially when we are using the standard HTTP.header strings., Here is another shot which fixes all assumptions (in MapOuputLocation/InMemoryFileSystem) on file-sizes of map outputs being greater than 2GB... 

Wrt to the HTTP headers, this is jetty's definition:
    public final static String
        __ContentLength = "Content-Length";

I think it's not very useful to redefine it on our own, but I don't care too much to fight over it! :)
, +1, with the understanding that it would be problematic to write a test case for this., Un-tested patch, I'd like a bit more testing before we get this one in..., Uh oh, looks like a blocker from Jetty which can't seem to handle >2G files... :(

Thanks to Hairong for helping test my patch.

Summary:
java.lang.NumberFormatException: For input string: "13130336782"
        at 
java.lang.NumberFormatException.forInputString(NumberFormatException.java:48
)
        at java.lang.Integer.parseInt(Integer.java:459)
        at java.lang.Integer.parseInt(Integer.java:497)
        at org.mortbay.http.HttpFields.getIntField(HttpFields.java:986)
        at org.mortbay.http.HttpMessage.getIntField(HttpMessage.java:333)
        at org.mortbay.http.HttpConnection.firstWrite(HttpConnection.java:599)
        at org.mortbay.http.HttpConnection.outputNotify(HttpConnection.java:556)
        at org.mortbay.http.HttpOutputStream.notify(HttpOutputStream.java:546)
        at org.mortbay.http.HttpOutputStream.prepareOutput(HttpOutputStream.java:457)
        at org.mortbay.http.HttpOutputStream.write(HttpOutputStream.java:421)
        at org.mortbay.jetty.servlet.ServletOut.write(ServletOut.java:54)
        at org.apache.hadoop.mapred.TaskTracker$MapOutputServlet.doGet(TaskTracker.java:1675)

Basically:
org.mortbay.http.HttpConnection.firstWrite(HttpConnection.java:599) assumes that 'Content-Length' header is an 'integer' which invalidates my earlier patch which removed that assumption in org.apache.hadoop.mapred.TaskTracker$MapOutputServlet.doGet(TaskTracker.java:1675). 

Looks quite tricky to fix; maybe we need to invest time trying to override the protected jetty method: org.mortbay.http.HttpConnection.firstWrite() - ugly, no?

Thoughts?, Apart from trying out things like the webserver in Java 1.6, jetty-6, one thing which will help solving the 2 GB limit with the current jetty version in Hadoop is to have Chunked Transfer-Encoding for the HTTP responses if the size of the file happens to be more than 2 GB. Does jetty-5 support chunked encoding well-enough for us to use?, Thanks for the 'chunked' encoding suggestion Das! Here's a patch which uses chunked encoding for map-outputs >2G... 
, +1 test passed., Here is another patch which does away with the hacky 
if (size > 2GB) 
  set 'Transfer-Encoding' to 'chunked'
else 
  set 'Content-Length'
and instead relies on a custom http header to send the size and does 'chunked' encoding all the time., Updated to reflect changes to trunk..., +1 patch 5 works., Thanks to Hairong for helping test it..., +1

http://issues.apache.org/jira/secure/attachment/12356182/HADOOP-1176_20070425_5.patch applied and successfully tested against trunk revision r532083.

Test results:   http://lucene.zones.apache.org:8080/hudson/job/Hadoop-Patch/80/testReport/
Console output: http://lucene.zones.apache.org:8080/hudson/job/Hadoop-Patch/80/console, I just committed this.  Thanks, Arun!, Integrated in Hadoop-Nightly #71 (See http://lucene.zones.apache.org:8080/hudson/job/Hadoop-Nightly/71/)]