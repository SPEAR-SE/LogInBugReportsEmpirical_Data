[The problem seems to be that 

1) Runjar does nto implement tools.
2) also if runjar implements tools then the parsing done by the generic opptions parser will be lost when a user does new JobConf() --(unless the user implements his/hers job as a Tools which breaks backwards compatibility and would break all the user applications). The problem seems to be that the libjars and other parsed options needs to be available to the jobclient when jobclient.runJob() is inovoked. 

I do not have any suggestions right now. I will update the jira if I have any suggestions regarding this.
, Now (after HADOOP-3417), the -libjars, -files and -archives options are Generic command line options. So, they should be passed to the ToolRunner. 
For example, *wordcount* should be run as :
{noformat}
hadoop jar build/hadoop-0.18.0-dev-examples.jar wordcount -libjars mylib.jar -files cache-file.txt input output
{noformat}

And I see no documentation available for the options in mapred-tutorial. The tutorial has to be updated with the usage.
, Here is a patch adding the usage documentation in mapred_tutorial for -libjars, -files and -archives.
And there is a link from tutorial to commands_manual. , please read my previous comment. The above example that you attcahed is working because it implemenets tools. this will nto work with user applications that have been running without implementing tools and i think most of them dont implement tools. 0.17 works with users mapreducde job not implementing tools so we should try and make this work in 0.18 as well., I agree with Mahadev. User's main class should not have to implement Tool in order to run. The lesser hard requirements the better., One solution I could see is to make org.apache.hadoop.streaming.StreamJob and org.apache.hadoop.mapred.pipes.Submitter implement ToolRunner, -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12385837/patch-3743.txt
  against trunk revision 676069.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no tests are needed for this patch.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/2851/testReport/
Findbugs warnings: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/2851/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Checkstyle results: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/2851/artifact/trunk/build/test/checkstyle-errors.html
Console output: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/2851/console

This message is automatically generated., I think we should have users move to the style of the hadoop examples programs (e.g. o.a.h.e.RandomWriter) which implements Tool and all that. I can't see any other way other than hacking a solution to work around this constraint and HADOOP-3417 had actually removed that hack. I think long term it makes sense to have the users migrate to implement apps using Tool, etc. That includes the framework client classes o.a.h.s.StreamJob and o.a.h.m.p.Submitter as Amareshwari pointed out.

I understand that we have broken 0.17 java apps that use -files, -achives, and -libjars arguments and don't implement Tool, but unless we revert HADOOP-3417, I can't see how we can provide this functionality.

Till the time user apps are moved to implementing Tool, with 0.18 and beyond, users could set the values for the options tmpfiles, tmparchives and tmpjars in the configuration they use to submit jobs (that's what the three arguments, -files, -archives and -jars, do).

Thoughts?
, 
I think Devaraj's suggestion should work:
Change StreamJob to implement Tools,
and ask normal user jobs to explicitly add -Dn=v for libjars and archives.
However, we should choose  more informative names such as mapred.use.additional.jars and mapred.use.archive, Had an offline discussion with Sameer on the aspect of backward compatibility and here is a proposal to address that:
1) Put back JobShell and let JobShell forward the arguments to GenericOptionsParser
2) Protect the access to the static jobconf object
So this is mostly HADOOP-3417 reverted + the above two changes implemented., I think Devaraj's and Sameer's plan is a big step backwards. We need to have the users using GenericOptionsParser (http://hadoop.apache.org/core/docs/r0.17.1/api/org/apache/hadoop/util/GenericOptionsParser.html), regardless of whether they use the Tool/ToolRunner interface to do it. The proper place to add options that are generic for Hadoop applications is in GenericOptionsParser, not in JobShell. I had started a patch for HADOOP-3676 that moves Streaming and Pipes over to use the GenericOptionsParser, which is a better way to go., I don't understand. Why is providing back compatibility a step backwards? I'm not arguing against the use of GenericOptionsParser, I'm arguing that we should invoke it for users that don't implement Tools via JobShell., Ok, I propose the following:

1. We put back JobShell for 0.18, but we make it pass the original arguments strings to runJar.
2. We leave the -files, -libjars, and -archives int the GenericOptionsParser.
3. In JobClient.submitJob we warn to log4j that the application should use GenericOptionParser if the values of the attributes for tmpfiles, tmplibjars, and tmparchives in the submitted JobConf and static JobConf are different.

Thoughts?, seems fine to me.. also can we print a warning message if the main class does nto implment Tools? that way we can get rid of the static jobconf in 0.19.
, Mahadev, that was my goal. Actually, I guess we could go one step farther and add a new attribute "mapred.used.genericoptionparser" that is set to true by the generic option parser. Then submitJob can print the warning if they use a JobConf that isn't from the generic option parser. (Tool/ToolRuner use the generic option parser internally.), Here is a patch doing the following:

1. Adds org.apache.hadoop.mapred.JobShell and org.apache.hadoop.mapred.TestJobShell
2. Adds the static Configuration in JobClient
3. Parsing in JobShell is removed as is not necessary. Because JobShell implements Tool and ToolRunner does the parsing for it. So, JobShell is used to set the static config for JobClient for the applications that doesnt implement ToolRunner.

bq. but we make it pass the original arguments strings to runJar.
We cannot send all the remaining arguments to RunJar, because RunJar expects the first argument to be the MainClass if there is no MainClass in the manifest.

A warning is printed in JobClient if _mapred.used.genericoptionparser_ is not set to _yes_
And also applications that implement ToolRunner, but use JobShell for -libjars or -files or -archives are warned.

Added earlier usage documentation patch again., The patch applies to both trunk and branch 0.18, review comments:

1) the file Jobshell has all the parser and options -- is it needed? since we are parsing with genericoptions parser? we can get rid of them.
2) also since the generic options parser always does the parsing --- in case of JobShell as well --- the property     conf.set("mapred.used.genericoptionsparser", "yes"); will always be set? right? In that case it will always print the warning always.

3) 
Here is a problem -- 

case 1) 
bin/hadoop jar -libjars <comma seperated jars> userjar 

case 2) 

bin/hadoop jar userjar -libjars <comma seperated jars> 

I am not sure if in both the cases JobShell tools will parse the -libjars option. If it does then the warning is no use since it will be printed even if the userjar implements tools. If JobShell does not parse -libjars in case 2) then we can print the warning in JobShell if the properties of libjars and others are set in JobShell.

, Here is patch with:
* Removed code for Parser and Options in JobShell.
* TestJobShell is modified not to create temporary file (files_tmp) in the cwd

bq. also since the generic options parser always does the parsing — in case of JobShell as well — the property conf.set("mapred.used.genericoptionsparser", "yes"); will always be set? right?
Yes. The static configuration has _mapred.used.genericoptionsparser_ value set to yes.

bq. In that case it will always print the warning always.
Warning will not be printed, because JobClient checks for the configuration property in JobConf submitted to the _submitJob_. And _mapred.used.genericoptionsparser_ will be set in JobConf, submitted to the _submitJob_, only if the application is implementing Tool. Thus applications not implementing Tool will be warned to do the same.

bq.3)Here is a problem -
In case 1) -libjars is passed by JobShell. In case 2) -libjars is parsed by application.

bq. If JobShell does not parse -libjars in case 2) then we can print the warning in JobShell if the properties of libjars and others are set in JobShell.
No. Because the actual parsing is done by GenericOptionsParser. , changed _mapred.used.genericoptionsparser_ to set boolean instead of 'yes/no', -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12386135/patch-3743.txt
  against trunk revision 677127.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 10 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/2872/testReport/
Findbugs warnings: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/2872/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Checkstyle results: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/2872/artifact/trunk/build/test/checkstyle-errors.html
Console output: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/2872/console

This message is automatically generated., its failing its own test case.

, Test was failing saying files_tmp doesnt exist, because it was looking in wrong path. It was passing on my machine because the file was already there in the path. It was my mistake., Here is patch with the path fixed in the testcase., +1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12386261/patch-3743.txt
  against trunk revision 677470.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 10 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/2890/testReport/
Findbugs warnings: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/2890/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Checkstyle results: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/2890/artifact/trunk/build/test/checkstyle-errors.html
Console output: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/2890/console

This message is automatically generated., +1 .. looks good.

, i just committed this to trunk and 0.18. Thanks Amareshwari., Integrated in Hadoop-trunk #581 (See [http://hudson.zones.apache.org/hudson/job/Hadoop-trunk/581/]), I use Hadoop inside a larger system, and create JobConf instances programmatically, not via command line tools. With 0.18 I now have to set a magic flag, simply to silence the unrelated warning:

bq.  job.setBoolean("mapred.used.genericoptionsparser", true);

Wouldn't it be better to add this as a part of the JobConf API, so that it can be set or cleared as needed? This way client code wouldn't have to resort to sprinkling magic strings around.
, bq. job.setBoolean("mapred.used.genericoptionsparser", true);
This configuration is set by the framework to know whether the application has used GenericOptionsParser or not. I dont think we can expose this to set by users through JobConf API. , My concern is: I'm not using command-line options at all, the JobConf is generated by my code. Should I be getting a warning that there is something wrong with command-line parsing?

And if not, what's the best way to get rid of the warning?
, This is broken in 0.20, see https://issues.apache.org/jira/browse/MAPREDUCE-2056]