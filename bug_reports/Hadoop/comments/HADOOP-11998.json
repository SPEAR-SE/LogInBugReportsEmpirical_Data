[It just so happens I did a bunch of research on this topic last week while working on the Docker patch.  End result: this isn't a Jenkins thing, this is a maven thing.  Maven doesn't lock the repo.

e.g., http://docs.codehaus.org/display/MAVEN/Local+repository+separation

Pretty much the ONLY way to solve this problem is to have every single spawned instance use a different local repo. In order to do this in a completely safe manner, it means a fresh repo stored in the workspace directory, which also means you've added 5-10 minutes to redownload the dependency tree every time.

There are less safe methods, but at that point you might as well just live with the risk of these collisions., My understanding is that the Jenkins machine is set up to run one job exclusively at a time. Can anyone confirm that?

bq.  it means a fresh repo stored in the workspace directory, which also means you've added 5-10 minutes to redownload the dependency tree every time.
 
Is it possible to set up a HTTP proxy to cache most of the downloads?, bq. My understanding is that the Jenkins machine is set up to run one job exclusively at a time. Can anyone confirm that?

Not all of them are.  A look at builds.apache.org will show that.

bq. Is it possible to set up a HTTP proxy to cache most of the downloads?

You'll have to ask INFRA that.  There's also the issue of configuring maven to use it.]