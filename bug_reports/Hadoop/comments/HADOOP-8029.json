[this is a patch for branch-1.  The issue has already been resolved upstream in trunk., bq. The issue has already been resolved upstream in trunk.
Do you know which jira addresses this?, check {{hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-shuffle/src/main/java/org/apache/hadoop/mapred/FadvisedFileRegion.java}} in trunk.  You'll see:
{code}
      try {
        NativeIO.posixFadviseIfPossible(fd, getPosition(), getCount(),
            NativeIO.POSIX_FADV_DONTNEED);
      } catch (Throwable t) {
        LOG.warn("Failed to manage OS cache for " + identifier, t);
      }
{code}

In other words, we are catching any possible exception from fadvise, including EINVAL.

similarly, {{hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-shuffle/src/main/java/org/apache/hadoop/mapred/FadvisedChunkedFile.java}} has this:
{code}
      try {
        NativeIO.posixFadviseIfPossible(fd, getStartOffset(), getEndOffset()
            - getStartOffset(), NativeIO.POSIX_FADV_DONTNEED);
      } catch (Throwable t) {
        LOG.warn("Failed to manage OS cache for " + identifier, t);
      }
{code}

Those are the only uses of posixFadviseIfPossible in {{hadoop-mapreduce-project}} in trunk.

It looks like MAPREDUCE-3289 added that code to trunk in its current form., One thought: both in trunk and in branch-1, it seems like we should eventually disable fadvise - otherwise performance is still going to be terrible because it will spit a WARN out for every chunk read. Maybe something like, if we fail to fadvise, then we disable it for the next 60 seconds, so at the worst case we only log once a minute instead of potentially tens or hundreds of times per second?, [~tlipcon] it seems like those whose performance is affected should disable tracker.manageOsCacheInShuffle.  rate-limiting the error message is not done in trunk, so we'd have to do another upstream change to make that happen.  I also suspect it would get complex due to the many ways fadvise can be used., * disable fadvise after it fails, [~cmccabe], I see you had done some prior work on this issue.  The current status is unclear to me.  You mentioned that trunk doesn't have this problem.  Is it time to close this issue?  Thank you., This is so old I don't remember anymore.  Sorry.

On Fri, Feb 13, 2015 at 3:42 PM, Chris Nauroth (JIRA) <jira@apache.org>

, I'm closing this.  If any of the watchers think there is still relevant work to track here, then please feel free to reopen., The fallback logic is complicated and a little bit gross.  But the basic gist of it is here (in trunk):

{code}
    if (manageOsCache && getEndOffset() - getStartOffset() > 0) {                                                        
      try {
        NativeIO.POSIX.getCacheManipulator().posixFadviseIfPossible(identifier,                                          
            fd,                                                                                                          
            getStartOffset(), getEndOffset() - getStartOffset(),                                                         
            NativeIO.POSIX.POSIX_FADV_DONTNEED);
      } catch (Throwable t) {
        LOG.warn("Failed to manage OS cache for " + identifier, t);                                                      
      }   
    }   
{code}

... and another similar block in {{FadvisedFileRegion.java}}.

I think it's fair to close this.  Thanks for looking, [~cnauroth], and sorry that it took me a few days to respond (email backlog).]