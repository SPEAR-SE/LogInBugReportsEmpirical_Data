[
I am not sure if we need to use 'allocateDirect' in ipc.Server yet. According to documentation it essentially reduces one copy from native buffer to user buffer. But ipd.Server already copies data from ByteBuffer to local array anyway (in processData()).



, 
After replacing both allocateDirect() with allocate Christian did not notice any memory groth. 

Looks like removing allocateDirect() is simple and does not cost anything. There are two places where we use allocateDirect:

 1) SocketChannelOutputStream() : constructor creates a 4k buffer. but this buffer is not really require. All writes in this class are blocking. It never stores data.
2) in ips.Server() :  by removing a copy in processData() we can keep number copies the same as before (plus one less allocation). Later sometime, once allocateDirect() is supposed to  be stable, we can look into using it. 

I will submit a patch.
, There is an open java bug on this issue. http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6296278

After discusing with Milind, following is what seems to be happenning :

direct buffers allocated don't count towards NameNode's heap. We create a couple of direct buffers for each RPC call.  Since Java gc is based on NameNode's allocated memory it does not kick in though real resident memory  of JVM keeps on growing.

This explains why the problem is much more severe when NameNode has heavy load. On other clusters where it is less loaded memory foot print kind of stabilizes over time.

, 
directbuffers.patch is attatched. It fixes both issues mentioned in second comment above.
, I just committed this.  Thanks, Raghu!]