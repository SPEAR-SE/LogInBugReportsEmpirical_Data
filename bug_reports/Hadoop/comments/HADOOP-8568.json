[Since I see hbase in the stacktrace, it's interesting that it's using an unstable interface reserved for hdfs and mapreduce.  Should {{NetUtils}} be used instead?, Yea, it's worth getting HBase off the DNS class., The existing DNS.java tests fail for IPv6
addresses.
This only fixes IPv6 reverse resolution.
IPv6 tests still fail with IPv6 nameservers (at least partly due to problems in Sun's JNDI.)
, Thanks for the patch, Tony. At first glance, the patch looks like it should solve the problem.

I am marking the JIRA Unassigned. Please feel free to assign it to yourself., Thanks Tony. TestDNS#testRDNS now passes on an IPV6 enabled host with your change?

Mind filing a jira for the remaining ipv6 test failures you're seeing?, -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12541638/HADOOP-8568.patch
  against trunk revision .

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 eclipse:eclipse.  The patch built with eclipse:eclipse.

    -1 findbugs.  The patch appears to introduce 1 new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed unit tests in hadoop-common-project/hadoop-common.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HADOOP-Build/1331//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-HADOOP-Build/1331//artifact/trunk/patchprocess/newPatchFindbugsWarningshadoop-common.html
Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/1331//console

This message is automatically generated., Per findbugs let's use StringBuilder.

{noformat}
SBSC	Method org.apache.hadoop.net.DNS.reverseDns(InetAddress, String) concatenates strings using + in a loop
{noformat}
, Revised patch, uses StringBuffer to build the reverseIP String, {code}
+        int rawintaddr = rawaddr[i] < 0 ? rawaddr[i] + 256 : rawaddr[i];
{code}
It's a bit simpler and faster (and has the same results) to say
{code}
int rawintaddr = rawaddr[i] & 0xff;
{code}
but I would have thought that there would be a standard idiom for treating a byte[] as a list of unsigned 8 bit values.  Maybe not?

bq. Revised patch, uses StringBuffer to build the reverseIP String

Doesn't look like an updated upload happened, the current attachment has string concatenation in a loop., This includes the missing StringBuffer code  & the updated byte to int conversion, -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12542364/HADOOP-8568.patch
  against trunk revision .

    -1 patch.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/1356//console

This message is automatically generated., right patch file this time (God willing!), -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12542389/HADOOP-8568.patch
  against trunk revision .

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 eclipse:eclipse.  The patch built with eclipse:eclipse.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed unit tests in hadoop-common-project/hadoop-common.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HADOOP-Build/1357//testReport/
Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/1357//console

This message is automatically generated., Any objection to listing this issue as fixed?

Tony, Tony,

no need to delete old patches when uploading a new one, it can be useful to reviewers to have old patches available to use {{interdiff}} or similar tools or simply to review advancement of a change.  I tend to use a new name (hdfs-123.patch, hdfs-123-1.patch, etc) for each upload, but that's just for my convenience since Jira keeps track of different uploads with the same name just fine.

{code}
+      byte rawaddr[] = hostIp.getAddress();
...
+      String[] parts = hostaddr.split("\\.");
+      reverseIP = parts[3] + "." + parts[2] + "." + parts[1] + "."
+        + parts[0] + ".in-addr.arpa";
{code}
I think the {{byte[]}} version of this code, used for IPv6, is significantly superior to the regex based string version used for IPv4.  Could you rewrite the IPv4 section of the code using {{getAddress()}}?  This may also result in greater code sharing between the two branches.
, {code}
+        // rawaddr bytes are of type unsigned int - this converts the given
+        // byte to a (signed) int "rawintaddr"
+        int rawintaddr = rawaddr[i] & 0xff;
+        // format "rawintaddr" into a hex String
+        String addressbyte = String.format("%02x", rawintaddr);
{code}
This can be more simply and clearly written as
{code}
String addressbyte = String.format("%02x", rawaddr[i] & 0xff);
{code}
It's actually sufficient to say {{format("%02x", rawaddr[i])}} but I find that a little too magic; making the 8-bit truncation explicit seems to more clearly express the intent to me.  (The mask-free version only gives the correct two-nibble output because of the overspecified {{FormatSpecifier#print(byte, Locale)}} implementation in {{java.util.Formatter}}, and breaks if you change to a local int variable for example.), I'm still puzzled why hbase is using a class marked:
{noformat}@InterfaceAudience.LimitedPrivate({"HDFS", "MapReduce"})
@InterfaceStability.Unstable{noformat}

Why isn't hbase using {{NetUtils}}?
, This issue is related to

https://issues.apache.org/jira/browse/HADOOP-3619

I provided a similar patch which includes also a testcase., Similar patches are available in both issues, {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12542389/HADOOP-8568.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:red}-1 core tests{color}.  The patch failed these unit tests in hadoop-common-project/hadoop-common:

                  org.apache.hadoop.metrics2.impl.TestMetricsSystemImpl
                  org.apache.hadoop.fs.TestSymlinkLocalFSFileContext
                  org.apache.hadoop.ipc.TestIPC
                  org.apache.hadoop.fs.TestSymlinkLocalFSFileSystem

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HADOOP-Build/4260//testReport/
Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/4260//console

This message is automatically generated., I'm closing this JIRA out in favor of HADOOP-3619 since it has a more modern patch associated with it.]