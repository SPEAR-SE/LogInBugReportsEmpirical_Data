[This patch, pulls the classloader stuff out of JobConf and puts it into ReflectionUtils. It also fixes this bug by using the default class loader if there isn't a thread specific class loader., Previously different configurations and threads were permitted to use different classloaders.  After this patch, all use the same classloader.  I'm not sure that's always right.  Ideally, shouldn't Configuration.getResource() and Configuration.getClass("foo.class") be able to refer to configuration-specific resources, like the job jar?
, ok, after chatting with doug, here is a different version.

It leaves the class loader in the Configuration, but it exposes a getClassByName method that allows a class lookup by class name rather than by attribute name.

If the thread does not have a class loader, it will use the default, which fixes the precise bug that Christian was hitting.

It also pulls all of the other places that were using the thread's class loader to find classes into the same code, based on the config. Note that some of the writeObject methods needed to have their signatures changed to pass in the config object so that it was clear what class loader should be used.
, I just committed this.  I changed NullWritable to extend Configured instead of implenting Configurable, saving a few lines of code.  Thanks, Owen!]