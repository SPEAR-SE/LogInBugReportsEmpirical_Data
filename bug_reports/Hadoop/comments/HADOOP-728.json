[planning to make following changes in streaming for this - 

1. Use PhasedFileSystem for mapoutput  in case of reducer -NONE. Its currently package protected I have made it public for streaming to be able to use it. This enables maps to generate multiple files with side effect and avoids duplicate functionality. 

2. Currently in case of reducer -NONE, the output of maps is written explicitly to a DFS file, so all map tasks try to write to the same file in DFS. (@see PipeMapRed.java:264) causing this problem. This part is changed to treat <-output> as  directory and map output goes in this. Each map output file name includes the task id to avoid conflict, PhasedFileSystem now takes care of speculative maps trying to write to same DFS file. 

Comments?
, This patch makes following changes, for review - 
1. Uses phasedFileSystem. 
2. Fixes a bug where if  -mapsideoutput is not defined then it still tried to write to same file. With this patch is -mapsideout is not defined then it uses -output as the output directory and all map tasks create output files in that directory. 

from older documentation -mapsideoutput option should be deprecated, Is anyone using this option or should we remove it?, I haven't looked at this patch in any detail, but, if PhasedFileSystem is to be public, it probably should not be in the mapred package, since it's not mapred-specific, but rather in the fs package, no?  It should also perhaps build on a FilteredFileSystem abstract base class that wraps another FS impl., The reason of keeping PhasedFileSystem in mapred package was that it works only for tasks in a mapred job as of now. it used jobid/tipid/taskid in "mapred.system.dir" for temporary storage to avoid any possible conflicts among task outputs. Is it ok to have this in fs package with this dependency ? 
Also currently it extends FileSystem abstract base class for API compatibility, it takes another pre initialized file system as constructor argument and channels calls to that, Just for this there doesnt seem to be a need for another FIlterFileSystem. 

, Currently, the PhasedFileSystem assumes it is running in a map/reduce context. It gets the task id out of the JobConf to make the unique name and counts on the TaskTracker cleaning up the storage if the process dies. So currently the mapred package is right in my opinion. Arguably, the map/reduce dependencies should be removed to make it a more general class, but that would be a different bug.

I haven't run this bug, but it looks like the right direction for streaming. Streaming needs to become much more unified with the rest of Hadoop., Ok, after running streaming for the first time and looking at the code to see why it is doing various things, you've got the wrong filename in the output files. The sideEffecURI_ is basically the temporary name. The final filename should be sideEffectPathFinal_.

The names should be ugly, but not that ugly. *smile*, This patch fixes a few other issues as well - 
1. Some map tasks writing to DFS were generating incomplete files, added flush() in MROutputThread
2. Added extra checks in TaskTracker and PhasedFileSystem to check for temporary file existence before attempting delete. This avoids extra lines in namenode logs. 
3. Changed a variable name, sideEffectURI_ is now finalOutputURI and is used to get correct file name. 

off topic : I was not aware that there are real languages written bottom to top http://en.wikipedia.org/wiki/Writing_system#Directionality , Fixed another issue in PipeMapRed where output file may not get closed properly., +1, http://issues.apache.org/jira/secure/attachment/12346211/Hadoop-728_1.patch applied and successfully tested against trunk revision 481099, I just committed this.  Thanks, Sanjay!]