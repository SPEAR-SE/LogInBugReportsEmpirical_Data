[A better implementation, very similar to the one you might find in BufferedReader (but with bytes instead of chars), would be the best solution. The basic issue stems from the fact that read() is called on a per byte basis in the current readLine implementation rather than using the more efficient read([], o, l) call thats available and then manipulating the array., Ok, here is a patch that does:
  1. Avoids encoding the data as a string and stores it directly in the Text object, which avoids the encode/decode cycle.
  2. Merges the buffer and the readLine code, so that it can use direct buffer access.
  3. Adds a new method to Text to append bytes.
  4. Adds a new method to Text to clear back to an empty string.
  5. Adds test cases for the new functionality.

Using the benchmark on HADOOP-2406, I see a 3x speed up using TextInputFormat. (32 seconds down to 11). This should be a big win for any jobs that scan a lot of text data., +1 overall.  Here are the results of testing the latest attachment 
http://issues.apache.org/jira/secure/attachment/12372239/fast-line.patch
against trunk revision r607325.

    @author +1.  The patch does not contain any @author tags.

    javadoc +1.  The javadoc tool did not generate any warning messages.

    javac +1.  The applied patch does not generate any new compiler warnings.

    findbugs +1.  The patch does not introduce any new Findbugs warnings.

    core tests +1.  The patch passed core unit tests.

    contrib tests +1.  The patch passed contrib unit tests.

Test results: http://lucene.zones.apache.org:8080/hudson/job/Hadoop-Patch/1427/testReport/
Findbugs warnings: http://lucene.zones.apache.org:8080/hudson/job/Hadoop-Patch/1427/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Checkstyle results: http://lucene.zones.apache.org:8080/hudson/job/Hadoop-Patch/1427/artifact/trunk/build/test/checkstyle-errors.html
Console output: http://lucene.zones.apache.org:8080/hudson/job/Hadoop-Patch/1427/console

This message is automatically generated., +1 Looks good; I'm seeing better than a 3x speedup., Minor nit: this patch removes a public constructor rather than add a new one:

{noformat}
-  public LineRecordReader(InputStream in, long offset, long endOffset)
+  public LineRecordReader(InputStream in, long offset, long endOffset,
+                          Configuration job)
{noformat}, Attaching a simple fix to my previous comment on Owen's behalf..., +1; speed was increased., -1 overall.  Here are the results of testing the latest attachment 
http://issues.apache.org/jira/secure/attachment/12372697/fast-line2.patch
against trunk revision .

    @author +1.  The patch does not contain any @author tags.

    javadoc +1.  The javadoc tool did not generate any warning messages.

    javac +1.  The applied patch does not generate any new compiler warnings.

    findbugs -1.  The patch appears to cause Findbugs to fail.

    core tests -1.  The patch failed core unit tests.

    contrib tests -1.  The patch failed contrib unit tests.

Test results: http://lucene.zones.apache.org:8080/hudson/job/Hadoop-Patch/1513/testReport/
Checkstyle results: http://lucene.zones.apache.org:8080/hudson/job/Hadoop-Patch/1513/artifact/trunk/build/test/checkstyle-errors.html
Console output: http://lucene.zones.apache.org:8080/hudson/job/Hadoop-Patch/1513/console

This message is automatically generated., Use LineReader.DEFAULT_BUFFER_SIZE for conf-less LineRecordReader, I just committed this. Thanks Owen!]