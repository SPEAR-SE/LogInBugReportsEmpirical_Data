[Good find.  We had this problem in a few cases with hadoop commands in the past.  Seems like an easy patch if you're up for it... just fix a few "return -1" cases.  Probably better to do this before we make a release with this code and start having to talk about compatibility issues., Patch available: changes return value, added javadoc, changes test code to match., Looks good overall. Do we want the tests to instead be doing assertEquals(1) rather than assertNotEquals(0)? If someone changed a "return 1" to a "return 2" that would technically be an incompatible change, so it'd be good to have this contract tested., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12655637/HADOOP-10816.001.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:red}-1 core tests{color}.  The patch failed these unit tests in hadoop-common-project/hadoop-common:

                  org.apache.hadoop.fs.shell.TestCopyPreserveFlag
                  org.apache.hadoop.fs.TestSymlinkLocalFSFileContext
                  org.apache.hadoop.fs.shell.TestTextCommand
                  org.apache.hadoop.ipc.TestIPC
                  org.apache.hadoop.fs.TestSymlinkLocalFSFileSystem
                  org.apache.hadoop.fs.shell.TestPathData
                  org.apache.hadoop.fs.TestDFVariations

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HADOOP-Build/4267//testReport/
Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/4267//console

This message is automatically generated., {quote}
Do we want the tests to instead be doing assertEquals(1)
{quote}
Yeah, I was thinking about this... to be pedantic, the contract (as specified only in comments) only says "small positive integer" and not "must be 1".  Therefore one could say the test is correct.  If in the future we add another return code, say "2", it would still mean failure, but a failure mode that would differentiate itself from "1" - and the test code would still be correct, although we'd want to add additional tests.

Or, we could change "small positive integer" to "1" in the comments, and enforce the return of "1" on failure as you suggest.

Either way works and doesn't matter that much to me.
, I think we should still say "small positive integer", but also test that it returns 1 right now. I think this will let us add new return codes later, but also make sure that the code for a particular error doesn't change between releases. Does this make sense to you too? Thanks Mike. :), {quote}
Does this make sense to you too?
{quote}
Ever notice how the most inconsequential things spark the big disagreements? :-)

I'd really rather that both the comments about the return value in the code and the tests against that code agree.  So either say it returns one and test that it returns 1, or say it returns a nonzero value and test that it returns a nonzero value.  I see what you're trying to get at, but...

{quote}
but also make sure that the code for a particular error doesn't change between releases
{quote}
To be pedantic, if the contract says that it returns a small positive integer, it does not matter what that integer is.  It might "happen to" return 1, but that's an implementation detail.  

Or we could just say "it returns 1" in the contract and deal with the 1.

For all practical purposes, it seems highly unlikely that we're going to introduce new error return values.  So this whole argument is probably moot.  Or, we could actually define some different error codes: 
# Argument processing error
# Command validation error
# Command execution error

I've uploaded patch 2 for your consideration, should we choose to go this way, which says that it returns 1, and tests that it returns 1, and has the following language:
{noformat}
+   * @return 0 on success and 1 on failure.  This value is passed back to
+   * the unix shell, so we must follow shell return code conventions:
+   * the return code is an unsigned character, and 0 means success, and
+   * small positive integers mean failure.
{noformat}

I'd also be happy to implement multiple return codes as above.  Then we'd have three choices from which to pick. :-), {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12655792/HADOOP-10816.002.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:red}-1 core tests{color}.  The patch failed these unit tests in hadoop-common-project/hadoop-common:

                  org.apache.hadoop.fs.TestSymlinkLocalFSFileContext
                  org.apache.hadoop.ipc.TestIPC
                  org.apache.hadoop.fs.TestSymlinkLocalFSFileSystem

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HADOOP-Build/4273//testReport/
Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/4273//console

This message is automatically generated., Your pedantry has bested me, let's go with with the v2 patch :) Thanks for being a good sport Mike, I'll commit this shortly., Thanks again Mike, committed to trunk., FAILURE: Integrated in Hadoop-trunk-Commit #5896 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/5896/])
HADOOP-10816. KeyShell returns -1 on error to the shell, should be 1. (Mike Yoder via wang) (wang: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1611229)
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/KeyShell.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/crypto/key/TestKeyShell.java
, {quote}
Your pedantry has bested me
{quote}
\*laughing\*

I'm not sure that's a compliment, but I'll take it. :-), FAILURE: Integrated in Hadoop-Yarn-trunk #615 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk/615/])
HADOOP-10816. KeyShell returns -1 on error to the shell, should be 1. (Mike Yoder via wang) (wang: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1611229)
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/KeyShell.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/crypto/key/TestKeyShell.java
, FAILURE: Integrated in Hadoop-Mapreduce-trunk #1834 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/1834/])
HADOOP-10816. KeyShell returns -1 on error to the shell, should be 1. (Mike Yoder via wang) (wang: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1611229)
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/KeyShell.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/crypto/key/TestKeyShell.java
, FAILURE: Integrated in Hadoop-Hdfs-trunk #1807 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/1807/])
HADOOP-10816. KeyShell returns -1 on error to the shell, should be 1. (Mike Yoder via wang) (wang: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1611229)
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/KeyShell.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/crypto/key/TestKeyShell.java
]