[Patch for the second option. FSEditLog.java is modified as a demo of the use case., Some comments that indicates methods overridden from {{JournalStream}} are deleted. Not sure if that is intentional. +1 other than that., > Some comments that indicates methods overridden from JournalStream are deleted. 
yes. I removed "@Override" since these methods were "implementing" abstract methods rather than overriding. My eclipse flagged them as errors. I could remove those.

I still could not get rid of one warning in DeprecatedUTF8.java. "@SupressWarnings("deprecated")" didn't work for  {{extends UTF8} part., > Some comments that indicates methods overridden from JournalStream are deleted. Not sure if that is intentional. 

Updated patch removes these changes since they are not related to UTF8 warnings., +1 for the second option

It would be great if we can complete remove UTF8 in the near future., ant test-patch :
{noformat}
     [exec] -1 overall.  
     [exec] 
     [exec]     +1 @author.  The patch does not contain any @author tags.
     [exec] 
     [exec]     -1 tests included.  The patch doesn't appear to include any new or modified tests.
     [exec]                         Please justify why no tests are needed for this patch.
     [exec] 
     [exec]     +1 javadoc.  The javadoc tool did not generate any warning messages.
     [exec] 
     [exec]     +1 javac.  The applied patch does not increase the total number of javac compiler warnings.
     [exec] 
     [exec]     +1 findbugs.  The patch does not introduce any new Findbugs warnings.
     [exec] 
     [exec]     +1 Eclipse classpath. The patch retains Eclipse classpath integrity.
     [exec] 
     [exec]     +1 release audit.  The applied patch does not increase the total number of release audit warnings.
     [exec] 
{noformat}, I just committed this., Since the use of this new class is confined to FSEditLog, why not make it package-private there, rather than pollute the public, documented namespace with a new class?  For that matter, if FSEditLog is really the only user, we could move UTF8 to a private class in its package., UTF8 is currently used in many places. FSEditLog.java is just an example. That said, I am not opposed to any changes related this., We could move DeprecatedUTF8 to hdfs as a package private class., > UTF8 is currently used in many places.

Yes, but FSEditLog has been identified as a place that UTF8 will continue to be used for a long time yet, long-enough that we want to squash the warnings there.  Are there other places where it should continue to be used, whose warnings should also be squashed?  If not, then moving it to be private in HDFS makes sense.

> We could move DeprecatedUTF8 to hdfs as a package private class.

+1
, 
I am not sure about the other warnings. I thought others might want to use the wrapper where UTF8 is still used.  I doubt if use of UTF8 outside HDFS will be removed anytime soon.

I filed HADOOP-5866 to move the new class to hdfs.]