[This is already possible, by using the auth_to_local mapping. The cluster operator can define arbitrary mappings between long (FOO@DOMAIN) and short names (DOMAINFOO).

See http://hortonworks.com/blog/fine-tune-your-apache-hadoop-security-settings/
, This JIRA mainly targets unseucre HADOOP; The configuration suggested by [~owen.omalley] is for secure Hadoop, and does not apply here.

I have given this issue some new thoughts. We can solve this issue with the following two rules.

1) If the user is a local user, remove the machine prefix and use only its user name as the ID in Hadoop, e.g. 'Win1\Alex' and 'Win2\Alex' will both be identified as 'Alex' in Hadoop. For service accounts on the machine, like 'NT AUTHORITY\SYSTEM', we can include the prefix as there is no machine name in the ID.

2) If the user is a domain user, use the full name include domain as its ID, e.g. 'Redmond\Alex' will be used in Hadoop to represent the user.

One important scenario for unsecure Hadoop is to allow local users of the same name to run Hadoop cluster without a domain controller. For example, users can create local user 'Alex' on the two machines 'Win1' and 'Win2', and run Hadoop under the local user 'Alex'. With rule 1) above, we can be consistent with this usage because 'Win1\Alex' and 'Win2\Alex' will be recognized as 'Alex' in Hadoop.

With rule 2), we can distinguish local user and domain user in Hadoop thus solve the issue of this JIRA. Since domain user representation is consistent across machines, the domain user scenarios will not be affected. 

]