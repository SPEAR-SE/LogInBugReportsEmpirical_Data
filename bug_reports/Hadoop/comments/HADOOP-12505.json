[I will submit a patch when HADOOP-12468 is done., Copying my comment:

bq. AD permits group names with space (e.g. "Domain Users").

Yes, but that doesn't mean they are POSIX compliant, which much match this regex: [_a-z][-0-9_a-z]*\$? .

So a definite -1 on this., Thanks for your comment, Allen.
I am OK with that if HDFS must be POSIX-compliant., yeah, it'll break the universe in really awful ways if we accept groups with spaces.  Think about folks parsing hadoop fs -ls for example. or the REST interfaces.  or ACLs.  or ...  ugh!

, FWIW, the JNI based groups plugin can grab the space-carrying groups accurately., The Hadoop code itself does not consistently enforce POSIX compliance for user names or group names.  It's more a function of the hosting OS.  For example, Harsh has pointed out that for operators using the JNI-based implementation instead of shell-based, Hadoop users already can show up with membership in groups that don't have a POSIX-compliant name.  I've seen that for Windows deployments, and it sounds like the use case here was a Linux deployment connected to Active Directory.

The group mapping alone is not sufficient to enforce POSIX compliance either.  This is only used to populate the user's set of groups.  It does not control other input paths for group names.  For example, WebHDFS and Java {{FileSystem#setOwner}} API calls can accept names with spaces.  Here is an example, tested on Mac.

{code}
> curl -X PUT 'http://127.0.0.1:50070/webhdfs/v1/hello2?op=SETOWNER&owner=Chris%20Nauroth&group=Domain%20Users&user.name=chris'

> hdfs dfs -ls /hello2
-rw-r--r--   3 Chris Nauroth Domain Users          6 2014-07-10 11:24 /hello2
{code}

This kind of data of course complicates parsing of shell output, and I imagine many operators would prefer to enforce POSIX-compliant names by policy.  However, I don't believe Hadoop has taken responsibility for that enforcement.

I don't think the existing implementation of {{ShellBasedUnixGroupsMapping}} really provides any POSIX compliance benefits, at least not intentionally.  In the example given, it would split the group "Domain Users" on spaces and decide to put the user into 2 groups: "Domain" and "Users".  While those split names don't have spaces, they're also still not POSIX compliant because of the capital letters, and more importantly, they're completely erroneous.  Hopefully the split isn't putting anyone into a real group where they don't really belong.

I see this as a bug rather than a POSIX compliance feature.  I would prefer to see the -1 lifted and have the bug fixed.  That said, I also see it as low priority, since the majority of deployments I see use the JNI-based implementation now, which does not have the bug., I just want to add that Linux also allows numerical group names (i.e. group names that starts with digits), so POSX-compliant is not strictly enforced. I wonder if there's documentation for this kind of thing on Linux or *NIX., bq. I just want to add that Linux also allows numerical group names (i.e. group names that starts with digits)

Let's be careful here.  An admin can add whatever they want to the group file; that doesn't mean it's *legal*.  Rarely to do folks run group check utilities (grpck on Linux) to verify that their definitions are actually valid.

bq. . I wonder if there's documentation for this kind of thing on Linux or *NIX.

Yes, definitely. See section "3.190 Group Name":  http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap03.html .  The "portable filename character set" is defined later on in the same manual.

(... and, for those unclear, that above is the *official* definition for anything that carries the UNIX trademark.), bq.  However, I don't believe Hadoop has taken responsibility for that enforcement.

I'd argue by calling something "ShellBased *Unix* GroupMapping", one is agreeing to the terms and conditions set forth by UNIX(tm).  If one doesn't want to abide by those rules, then someone should create the "ShellBasedNonCompliantUnixGroupMapping". :), I'm curious then about what is your stance on {{JniBasedUnixGroupsMapping}}.  Do you see it as a bug that it works correctly with non-Unix-compliant names?

Something else for us to consider is the severity to which tools break in the presence of non-compliant names.  For a local file system, it can break parsing in scripts, but it can't harm permission checks, which are based on numeric UID/GID.  In Hadoop, we don't have access to a canonical UID/GID, so we rely on the string names.  (Arguably, we'd be better off with a real UID/GID, but that would be a significant design change.)  Since the bug places users into incorrect groups (i.e. "Domain" and "Users" in the example), there is a risk of influencing permission checks.  I see this as a more severe problem and something worthy of a bug fix., bq. I'm curious then about what is your stance on JniBasedUnixGroupsMapping. Do you see it as a bug that it works correctly with non-Unix-compliant names?

Yes, because it means unpredictable behavior.  Unpredictable behavior almost always turns into a security hole. It's trivial to construct a group that turns into ../.. (or whatever) in the path structure if I'm interpreting the output of hadoop fs -ls.  That's very very bad.  (that said: it'd be an awesome crack.  Change the default user's group and watch everyone nuke their own files...)

bq.  In Hadoop, we don't have access to a canonical UID/GID,

The NFS folks added some code to do it, but didn't really integrate it correctly. Expedience always trumps correctness. :(
]