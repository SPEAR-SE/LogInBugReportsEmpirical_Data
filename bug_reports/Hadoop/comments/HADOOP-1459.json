[Marking this issue as a blocker for 0.14 release because it breaks locality of map-reduce with DFS. , The getBlockLocations patch HADOOP-894 had a sideeffect that getHints started returning IP addresses instead of hostnames. This patch fixes this problem.

, This allows the WebUI to display machine names as hostNames rather than IP address., Could you please remove redundant
import org.apache.hadoop.io.UTF8
if you change DatanodeInfo.

I think this is the right fix for the time being, although I'm not happy that
# we should keep 2 different identifications for the nodes and that
# we have different ways of node identification in different components of hadoop.

My proposition would be to return back to hostnames instead of ip addresses.
But this of course belongs to a different issue., The namenode now serializes the hostName as part of DatanodeInfo.  The namenode already had the hostName readily available.

Another alternative would have been to make a getHostName() call on the DFSClient. But we did not adopt this approach because a getHostName() call for every replica of every block could be somewhat time-consuming. , Note that this increases serialization cost for any DatanodeInfo tranfer, which is pretty much most RPC. This will needs a protocol version change since this won't work with prev clients/datanodes.
, {quote}
I think this is the right fix for the time being, although I'm not happy that
# we should keep 2 different identifications for the nodes and that
# we have different ways of node identification in different components of hadoop
{quote}
+1.
Till now Namenode kept 'hostName' only for information purpose.
, > My proposition would be to return back to hostnames instead of ip addresses.
Please see HADOOP-985 for context why we moved to using IP addresses. It is just that not all Hadoop components moved to IPs.

, This perticular issue was considered in HADOOP-985 : 
from https://issues.apache.org/jira/browse/HADOOP-985#action_12473585 :
{quote}
Thanks Hairong. I will include both in a new patch.

This changes the what DFS returns for getDatanodeHints(), which is ultimately used by mapreduce. Two options for handling this:

a) we can modify getDatanodeHints() to return what it used return before this patch. i.e. return descriptor.getHostName() instead of descriptor.getHost(). Advantage is that no changes are necessary in mapreduce. But does not confirm to 'ip every where' policy.

b) Make Job and task tracker also deal in ips. I am not sure yet how intrusive this change is.

My preference is (a). comments?
{quote}, bq. Note that this increases serialization cost for any DatanodeInfo tranfer, which is pretty much most RPC. This will needs a protocol version change since this won't work with prev clients/datanodes.

Does this also affect fsimage version?, This does not affect fsimage version. DatanodeInfo is used to communicate over-the-wire whereas DatanodeImage is used to persistent info into fsImage. I di dnot change the serialization of DatanodeImage.
, This patch should change protocol version., The protocol version was already bumped up since the 0.13 release. hence I have not changed it in this patch. , Protocol version should be changed any time the protocol is changing, which is what this patch does., Bump up ClientProtocol version too., +1
Should we file a separate issue for replacing ips by fully qualified hostnames?, Yes, I like the idea where DFS keeps fully qualified hostnames and sends
these to the map-reduce framework. 

Thanks,
dhruba

, In the medium term we should move all of Hadoop to use IP addresses instead of hostnames. I've filed the relevant bug in HADOOP-1487., I just committed this.  Thanks, Dhruba!, Integrated in Hadoop-Nightly #127 (See [http://lucene.zones.apache.org:8080/hudson/job/Hadoop-Nightly/127/])]