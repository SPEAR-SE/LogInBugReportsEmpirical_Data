[(!) A patch to test-patch or smart-apply-patch has been detected. 
Re-executing against the patched versions to perform further tests. 
The console is at https://builds.apache.org/job/PreCommit-HADOOP-Build/6490/console in case of problems., \\
\\
| (/) *{color:green}+1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | reexec |   0m  0s | dev-support patch detected. |
| {color:blue}0{color} | pre-patch |   0m  0s | Pre-patch trunk compilation is healthy. |
| {color:blue}0{color} | @author |   0m  0s | Skipping @author checks as test-patch has been patched. |
| {color:green}+1{color} | release audit |   0m 14s | The applied patch does not increase the total number of release audit warnings. |
| {color:blue}0{color} | shellcheck |   0m 14s | Shellcheck was not available. |
| {color:green}+1{color} | whitespace |   0m  0s | The patch has no lines that end in whitespace. |
| | |   0m 17s | |
\\
\\
|| Subsystem || Report/Notes ||
| Patch URL | http://issues.apache.org/jira/secure/attachment/12730619/HADOOP-11923.patch |
| Optional Tests | shellcheck |
| git revision | trunk / 9809a16 |
| Java | 1.7.0_55 |
| uname | Linux asf902.gq1.ygridcore.net 3.13.0-36-lowlatency #63-Ubuntu SMP PREEMPT Wed Sep 3 21:56:12 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux |
| Console output | https://builds.apache.org/job/PreCommit-HADOOP-Build/6490/console |


This message was automatically generated., This might be a more widespread issue than whitespace. Newly added files do not trigger:

find_changed_modules
determine_needed_tests
check_reexec
check_author
check_modified_unittests

Maybe somebody can comment why new files were being filtered?

Thanks, It's likely just because these files didn't previously exist, so they don't match the "what's changed" filter., does CHANGED_FILES get used in some way that we can't just alter how it finds the list?, I don't see why we should care about whitespace in patch; we can just lay down that whoever commits the patch needs to merge it in with

{code}
git apply --whitespace=fix  
{code}

& let git sort things out. , I think part of the advantage would be signaling to whoever commits that they need to use --whitespace=fix., I suspect there is a much easier fix here.  

{code}
  done < <("${GIT}" diff --unified=0 --no-color)
{code}

should probably be

{code}
  done < <("${GIT}" diff --unified=0 --no-color  ${PATCH_BRANCH})
{code}
, Oh, and to answer this question:

bq. does CHANGED_FILES get used in some way that we can't just alter how it finds the list?

No.  It really should be a list of all the files that are touched.  The tricky part is that it is attempting to interpret the patch file and there are all sorts of ways that could be built.  It all depends upon which diff command lines were used. :(, [~aw] I'm not sure that I follow  this distinction. A newly added file seems to be just a change where all lines of that file were updated (and to be checked by the various quality tools like whitespace checker)., I haven't had a chance to double check the logic in CHANGED_FILES, but it should have both modified and new files in it.   There's a  chance that the find_changedfiles needs to have more logic in it to deal with different types of patchfiles.  But ultimately, it doesn't matter:

GITDIFFLINES isn't going to have new files in it either since the git diff won't register them. Thus
{code} ${GREP} -f "${GITDIFFLINES}"{code} swallows those lines and they disappear from the output.  So we need to add a git add -N as well as make sure that git diff is tied to the branch.

Additionally, it is probably easier to use git diff --check to actually do the whitespace check., After a bit of playing, yes, the git add -N is pretty much the only fix needed here.  I've got it included in the docker patch for the time being.]