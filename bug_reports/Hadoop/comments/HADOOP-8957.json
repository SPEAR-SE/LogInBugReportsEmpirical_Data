[The failing test suites are:

org.apache.hadoop.fs.viewfs.TestFcCreateMkdirLocalFs
org.apache.hadoop.fs.viewfs.TestFcMainOperationsLocalFs
org.apache.hadoop.fs.viewfs.TestFcPermissionsLocalFs

{code}
testMkdirNonRecursiveWithExistingDir(org.apache.hadoop.fs.viewfs.TestFcCreateMkdirLocalFs)  Time elapsed: 125 sec  <<< ERROR!
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.apache.hadoop.fs.AbstractFileSystem.newInstance(AbstractFileSystem.java:123)
	at org.apache.hadoop.fs.AbstractFileSystem.createFileSystem(AbstractFileSystem.java:149)
	at org.apache.hadoop.fs.AbstractFileSystem.get(AbstractFileSystem.java:234)
	at org.apache.hadoop.fs.FileContext$2.run(FileContext.java:324)
	at org.apache.hadoop.fs.FileContext$2.run(FileContext.java:321)
	at java.security.AccessController.doPrivileged(Native Method)
	at javax.security.auth.Subject.doAs(Subject.java:396)
	at org.apache.hadoop.security.UserGroupInformation.doAs(UserGroupInformation.java:1378)
	at org.apache.hadoop.fs.FileContext.getAbstractFileSystem(FileContext.java:321)
	at org.apache.hadoop.fs.FileContext.getFileContext(FileContext.java:435)
	at org.apache.hadoop.fs.viewfs.ViewFsTestSetup.setupForViewFsLocalFs(ViewFsTestSetup.java:73)
	at org.apache.hadoop.fs.viewfs.TestFcCreateMkdirLocalFs.setUp(TestFcCreateMkdirLocalFs.java:34)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:27)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31)
	at org.junit.runners.BlockJUnit4ClassRunner.runNotIgnored(BlockJUnit4ClassRunner.java:79)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:71)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:49)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:236)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:252)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:141)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:112)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)
	at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)
Caused by: java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:39)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:27)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:513)
	at org.apache.hadoop.fs.AbstractFileSystem.newInstance(AbstractFileSystem.java:121)
	... 41 more
Caused by: org.apache.hadoop.fs.InvalidPathException: Invalid path name Path part /C:/hdc/hadoop-common-project/hadoop-common/target/test/data/test from URI C:/hdc/hadoop-common-project/hadoop-common/target/test/data/test is not a valid filename.
	at org.apache.hadoop.fs.AbstractFileSystem.getUriPath(AbstractFileSystem.java:392)
	at org.apache.hadoop.fs.FilterFs.getUriPath(FilterFs.java:167)
	at org.apache.hadoop.fs.viewfs.ChRootedFs.<init>(ChRootedFs.java:93)
	at org.apache.hadoop.fs.viewfs.ViewFs$1.getTargetFileSystem(ViewFs.java:212)
	at org.apache.hadoop.fs.viewfs.ViewFs$1.getTargetFileSystem(ViewFs.java:202)
	at org.apache.hadoop.fs.viewfs.InodeTree.createLink(InodeTree.java:261)
	at org.apache.hadoop.fs.viewfs.InodeTree.<init>(InodeTree.java:334)
	at org.apache.hadoop.fs.viewfs.ViewFs$1.<init>(ViewFs.java:202)
	at org.apache.hadoop.fs.viewfs.ViewFs.<init>(ViewFs.java:202)
	... 46 more
{code}
, Additional test suites failing because of this:

org.apache.hadoop.fs.viewfs.TestViewFsLocalFs
org.apache.hadoop.fs.viewfs.TestViewFsWithAuthorityLocalFs
, I am in progress on a fix., Additional test suites failing because of this:

org.apache.hadoop.fs.viewfs.TestChRootedFs
, The attached patch fixes multiple bugs in ViewFS when running on Windows.  I'd like to start the patch on trunk and then immediately merge to branch-trunk-win after commit.  Here is a summary of the changes:

# AbstractFileSystem.isValidName was catching file names with ':' as invalid.  This is not correct on a local file system on Windows, where ':' is valid in a drive specification.  To fix this, I refactored isValidName such that only HDFS (and not other file systems like local) enforce these rules.  I added new tests to check that this worked.  I also enhanced a test in TestDFSUtil.
# ChRootedFs was calling Path.toString and then trimming the first character to remove the first slash.  On Windows, if the Path has a drive specification, then toString removes the first slash.  Instead, we can use Path.toUri().getPath().
# ViewFileSystem.InternalDirOfViewFs.getFileStatus contained a call to Path.makeQualified with a null working directory.  This throws NullPointerException if the default URI is not absolute.  This condition can happen on Windows, where the tree of paths can transition from absolute to relative to absolute.  (/ is absolute, /C: is relative, and /C:/foo is absolute.)  To fix this, we can resolve against / for the working directory instead of null.
, {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12551168/HADOOP-8957.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 4 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-common-project/hadoop-common hadoop-hdfs-project/hadoop-hdfs.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HADOOP-Build/1681//testReport/
Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/1681//console

This message is automatically generated., Chris, some minor comments:
# Hdfs.java - no need for @see. @override takes care of ensuring that the javadoc points to the base class. This change is needed also for FilterFs.java, ChRootedFs,
# Hdfs.java Instead of saying "Check for ...", please be explicit in the comment that the patterns are prohibited.
# ViewFileSystem.java - Can you describe why isValidName override and check is removed?

Otherwise change looks good.
, Thank you, Suresh.  Here is an updated patch with all @see docs removed and the phrasing of the comment in Hdfs.isValidName changed to say "prohibit".

The name validation logic is removed from ViewFileSystem, because ViewFileSystem delegates to other file systems, and it doesn't know the rules for file names in each of those file systems.  For example, the old logic would have rejected ':'.  The ':' is invalid for a ViewFileSystem wrapping a DistributedFileSystem, but it is valid for a ViewFileSystem wrapping a LocalFileSystem on Windows, due to the drive specification.  This patch removes the check from ViewFileSystem so that the specific file systems it delegates to can execute their own checks.

Specifically, TestFSMainOperationsLocalFileSystem fails on Windows unless we remove this check.
, {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12551829/HADOOP-8957.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 4 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-common-project/hadoop-common hadoop-hdfs-project/hadoop-hdfs.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HADOOP-Build/1696//testReport/
Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/1696//console

This message is automatically generated., * You have added viewFS#resolveFromFSState where you validate the path for mounts
** The mounted file systems will validate the path names anyway - so is this necessary?
** What about validating internal names (ie within the mounted) which your patch does not.
*** Add a test for that.
*** One could argue that the pathname validity check for internal names is needed *only* when the mount table is created, since illegal names will not match to any internal names within the mount table.  This translates to  whether one wants IllegalNameException or PathNotFoundException when the user does open("illegal:path"). I think your patch returns PathNotFoundException for internal names that are illegal.
** You didn't use resolveFromFSState in  ViewFileSystem? Shouldn't ViewFs and ViewFileSystem be consistent?
** Minor - a better name would have been validatePathAndResolve

* AbstractFileSystem#isValidName - Being able to override isValidName makes sense but the default impl should not return true;  instead the default impl should be the code needed by HDFS -- file systems that need a different impl can override this method., The jira name should be "AbstractFileSystem#IsValidName should be overridden for embedded file systems like ViewFs", Setting Affects/Target Version to trunk-win.  branch-trunk-win has diverged a bit from trunk, so we'll have to commit a patch just to branch-trunk-win for this issue right now, and deal with the divergence later when we merge back to trunk., Sanjay, thank you for the feedback.  Your suggestion to keep the HDFS validation rules in the base class and let the subclasses override to turn it off really simplified the whole change.  I have attached an updated patch.  Can you take a look?

{quote}
The mounted file systems will validate the path names anyway - so is this necessary?
{quote}

Now that the HDFS rules are back in the base class, the answer is no, it is not necessary to do an additional pre-validation by delgating to the mounted file system's isValidName in ViewFS.  The new patch does not have the resolveFromFSState refactoring.

{quote}
What about validating internal names (ie within the mounted) which your patch does not.
{quote}

I agree that checking at mount table creation time (fail fast) makes the most sense.  Right now, the only such validation that occurs at initialization time is a check for Path#isAbsoluteAndSchemAuthorityNull inside InodeTree#createLink.  Do you think additional validation rules make sense here?  If so, what would be the rules?  Match HDFS validation rules?  Check the union of the validation rules for all mounted file systems, so that users see consistent path names across the whole ViewFS?  If we need enhancements here, I'd like to suggest that we file a separate jira.
, RawLocalFs#isValidName returning true is incorrect.
It uses DelegatesToFileSystem to delegate to RawLocalFileSystem which does not implement isValidName. This is Tricky.
Proposal:
* RawLocalFs#isValidName does a isWindows check otherwise calls super#isValidName., bq. RawLocalFs#isValidName .. DelegatesToFileSystem to delegate to RawLocalFileSystem which does not implement isValidName.
FileSystem does not have corresponding #isValidName. It does have checkPath but that checks if the path belongs to the right file system (in AbstractFileSystem this part is checked by FileContext).
Looks like RawLocalFileSystem is not checking for ":" in path. Should it be?

, Update JavaDoc of AbstractFileSystem#isValidname to say that it is checking for validity of the path part of a URI (ie parameter src is the path part of the URI.) , Thank you, Sanjay.  I have uploaded version 3 of the patch to address the latest feedback.  I changed {{RawLocalFs#isValidName}} so that it only returns true on Windows and otherwise calls the base class.  I updated the JavaDoc on {{AbstractFileSystem#isValidName}}.

{quote}
Looks like RawLocalFileSystem is not checking for ":" in path. Should it be?
{quote}

This reminds me why I originally chose to return true from {{RawLocalFs#isValidName}}.  Since {{RawLocalFileSystem}} doesn't enforce this, and since it is older than {{RawLocalFs}}, it made me wonder if {{RawLocalFs}} was actually incorrect to enforce this validation.  It means that some file names that could be supported on the local file system will get rejected.  {{RawLocalFileSystem}} doesn't have this limitation.

Still, it's more conservative to add the if (WINDOWS) check like you suggested and preserve the current behavior of {{RawLocalFs}} on non-Windows.  We can always remove the if (WINDOWS) check later if we decide we want to change the behavior., Also, I filed HADOOP-9129 for follow-up regarding validation of internal names in the mount table., bq.  Since RawLocalFileSystem doesn't enforce this [isValidName] ..
You are right - lets keep RawLocalFs consistent with RawLocalFileSystem.
RawLocalFileSystem does allow ':' in path - bin/hadoop fs -mkdir /tmp/x:foo succeeds on a mac.
(Sorry to ask you to change your patch - it was correct). We can file a separate jira if we want to enforce this.

+1 on the patch modulo the following
* change RawLocalFs to return true as in your previous patch . Add comment that we rely on OS checking and that RawLocalFs is consistent with RawLocalFileSystem.
* viewfs#isValidName update comment:
    // Prefix validated at mount time and rest of path validated by mount target.
, No problem.  Thank you for the review.  Here is version 4 of the patch to address your final 2 comments., Have modified the patch 4 slightly so that it applies on both trunk and branch-trunk-win, {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12560487/HADOOP-8957-trunk.4.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 3 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-common-project/hadoop-common hadoop-hdfs-project/hadoop-hdfs.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HADOOP-Build/1844//testReport/
Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/1844//console

This message is automatically generated., Integrated in Hadoop-trunk-Commit #3118 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/3118/])
    HADOOP-8957 AbstractFileSystem#IsValidName should be overridden for embedded file systems like ViewFs (Chris Nauroth via Sanjay) (Revision 1420965)

     Result = SUCCESS
sradia : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1420965
Files : 
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/AbstractFileSystem.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FilterFs.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/local/RawLocalFs.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/ChRootedFs.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/ViewFileSystem.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/ViewFs.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/viewfs/TestChRootedFs.java
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/CHANGES.txt
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/fs/TestHDFSFileContextMainOperations.java
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/TestDFSUtil.java
, Integrated in Hadoop-Hdfs-trunk #1253 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/1253/])
    HADOOP-8957 AbstractFileSystem#IsValidName should be overridden for embedded file systems like ViewFs (Chris Nauroth via Sanjay) (Revision 1420965)

     Result = FAILURE
sradia : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1420965
Files : 
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/AbstractFileSystem.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FilterFs.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/local/RawLocalFs.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/ChRootedFs.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/ViewFileSystem.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/ViewFs.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/viewfs/TestChRootedFs.java
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/CHANGES.txt
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/fs/TestHDFSFileContextMainOperations.java
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/TestDFSUtil.java
, Integrated in Hadoop-Mapreduce-trunk #1284 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/1284/])
    HADOOP-8957 AbstractFileSystem#IsValidName should be overridden for embedded file systems like ViewFs (Chris Nauroth via Sanjay) (Revision 1420965)

     Result = SUCCESS
sradia : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1420965
Files : 
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/AbstractFileSystem.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FilterFs.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/local/RawLocalFs.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/ChRootedFs.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/ViewFileSystem.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/ViewFs.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/viewfs/TestChRootedFs.java
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/CHANGES.txt
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/fs/TestHDFSFileContextMainOperations.java
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/TestDFSUtil.java
, Integrated in Hadoop-Yarn-trunk #64 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk/64/])
    HADOOP-8957 AbstractFileSystem#IsValidName should be overridden for embedded file systems like ViewFs (Chris Nauroth via Sanjay) (Revision 1420965)

     Result = SUCCESS
sradia : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1420965
Files : 
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/AbstractFileSystem.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FilterFs.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/local/RawLocalFs.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/ChRootedFs.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/ViewFileSystem.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/ViewFs.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/viewfs/TestChRootedFs.java
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/CHANGES.txt
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/fs/TestHDFSFileContextMainOperations.java
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/TestDFSUtil.java
, can you please update fix versions on this?, Also seeing this failure in branch-2., Reopen for porting to branch-2., Attaching a branch-2 patch. It is almost identical to the original patch., Chuan, some of these jiras can just be merged to branch-2, without a need for posting another patch. Please post a comment on jira that needs to be merged to branch-2. In case the original patch does not apply (very unlikely), we can work on branch-2 patch., I merged the change to branch-2., Integrated in Hadoop-trunk-Commit #3869 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/3869/])
    Move HADOP-9131, HADOOP-8957 to release 2.0.1 section and HADOOP-9607, HADOOP-9605 to BUG FIXES (Revision 1490119)

     Result = SUCCESS
suresh : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1490119
Files : 
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/CHANGES.txt
, Integrated in Hadoop-Yarn-trunk #232 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk/232/])
    Move HADOP-9131, HADOOP-8957 to release 2.0.1 section and HADOOP-9607, HADOOP-9605 to BUG FIXES (Revision 1490119)

     Result = SUCCESS
suresh : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1490119
Files : 
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/CHANGES.txt
, Integrated in Hadoop-Hdfs-trunk #1422 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/1422/])
    Move HADOP-9131, HADOOP-8957 to release 2.0.1 section and HADOOP-9607, HADOOP-9605 to BUG FIXES (Revision 1490119)

     Result = FAILURE
suresh : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1490119
Files : 
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/CHANGES.txt
, Integrated in Hadoop-Mapreduce-trunk #1448 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/1448/])
    Move HADOP-9131, HADOOP-8957 to release 2.0.1 section and HADOOP-9607, HADOOP-9605 to BUG FIXES (Revision 1490119)

     Result = SUCCESS
suresh : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1490119
Files : 
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/CHANGES.txt
]