[Patch to check the type of keys and values generated by the mapper against the types specified in JobConf, +1, because http://issues.apache.org/jira/secure/attachment/12354321/1001.patch applied and successfully tested against trunk revision http://svn.apache.org/repos/asf/lucene/hadoop/trunk/522597. Results are at http://lucene.zones.apache.org:8080/hudson/job/Hadoop-Patch, +1, This is inner-loop code and should use the fields keyClass and valClass rather than calling the JobConf methods, which are considerably slower., Using fields keyClass and valClass instead of calling JobConf methods., Rather than assume that the objects print well, I'd rather have error messages that print the class names like:

"Type mismatch in key from map: expected " + keyClass.getName() + ", received " + key.getClass().getName()

, Oh yes, reporting the expected and received type names is the right thing to do :)

Besides trying to print them, is there a better way of reporting some information about which key/value pair triggered the error? The mapper may have some conditional code-paths that generate correctly typed pairs some times and incorrect pairs other times. Knowing which key/value triggered the error could help locating such code., +1, because http://issues.apache.org/jira/secure/attachment/12354628/1001.patch applied and successfully tested against trunk revision http://svn.apache.org/repos/asf/lucene/hadoop/trunk/524205. Results are at http://lucene.zones.apache.org:8080/hudson/job/Hadoop-Patch, I'm sorry, I wasn't very clear. The error message should be included in a thrown IOException as you were doing. That would be caught and log the stack trace too, which should help the user find the source of the problem., Re-written exception message to be more meaningful., +1, because http://issues.apache.org/jira/secure/attachment/12354644/1001.patch applied and successfully tested against trunk revision http://svn.apache.org/repos/asf/lucene/hadoop/trunk/524271. Results are at http://lucene.zones.apache.org:8080/hudson/job/Hadoop-Patch, I'm sorry, I forgot to request a unit test case that tests this code., Here's a JUnit test case that generates the exceptions. Unfortunately, the exceptions always cause it to be reported as a failure. I don't know how to make it pass on exception and fail otherwise. Suggestions?, See examples in following link for expecting exception.
http://junit.sourceforge.net/javadoc/junit/extensions/ExceptionTestCase.html
, Rather than using a special test case (ExceptionTestCase) it is usually simpler to use the following idiom in a regular test method (which is more general than the one in the javadoc for ExceptionTestCase):

 try {
   shouldThrow();
   fail("Should have thrown SpecialException.");
 } catch (SpecialException e) {
   // expected
 }
// the rest of the test...
, The problem with this test is that the exception thrown by MapTask doesn't get propagated to the client. The best effort here is to just make sure that the test cases fail for whatever reason when wrong key or value types are specified and pass with correct types. Hopefully the earlier runs would've failed due to type mismatch exceptions rather than something else. Attaching the revised version of the test now. Here's the kind of output it produces in the logs:

$ cat build/test/TEST-org.apache.hadoop.mapred.TestMapOutputType.txt
Testsuite: org.apache.hadoop.mapred.TestMapOutputType
Tests run: 3, Failures: 0, Errors: 0, Time elapsed: 5.585 sec
------------- Standard Output ---------------
2007-04-03 00:18:02,162 WARN  util.NativeCodeLoader (NativeCodeLoader.java:<clinit>(51)) - Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
2007-04-03 00:18:02,508 INFO  mapred.InputFormatBase (InputFormatBase.java:validateInput(141)) - Total input paths to process : 1
2007-04-03 00:18:03,238 WARN  mapred.LocalJobRunner (LocalJobRunner.java:run(166)) - job_bzpgha
java.io.IOException: Type mismatch in key from map: expected org.apache.hadoop.io.IntWritable, recieved org.apache.hadoop.io.Text
        at org.apache.hadoop.mapred.MapTask$MapOutputBuffer.collect(MapTask.java:312)
        at org.apache.hadoop.mapred.TestMapOutputType$TextGen.map(TestMapOutputType.java:50)
        at org.apache.hadoop.mapred.MapRunner.run(MapRunner.java:48)
        at org.apache.hadoop.mapred.MapTask.run(MapTask.java:175)
        at org.apache.hadoop.mapred.LocalJobRunner$Job.run(LocalJobRunner.java:126)
2007-04-03 00:18:04,121 INFO  mapred.InputFormatBase (InputFormatBase.java:validateInput(141)) - Total input paths to process : 1
2007-04-03 00:18:04,249 WARN  mapred.LocalJobRunner (LocalJobRunner.java:run(166)) - job_4f7xh3
java.io.IOException: Type mismatch in value from map: expected org.apache.hadoop.io.IntWritable, recieved org.apache.hadoop.io.Text
        at org.apache.hadoop.mapred.MapTask$MapOutputBuffer.collect(MapTask.java:317)
        at org.apache.hadoop.mapred.TestMapOutputType$TextGen.map(TestMapOutputType.java:50)
        at org.apache.hadoop.mapred.MapRunner.run(MapRunner.java:48)
        at org.apache.hadoop.mapred.MapTask.run(MapTask.java:175)
        at org.apache.hadoop.mapred.LocalJobRunner$Job.run(LocalJobRunner.java:126)
2007-04-03 00:18:05,324 INFO  mapred.InputFormatBase (InputFormatBase.java:validateInput(141)) - Total input paths to process : 1
2007-04-03 00:18:05,604 INFO  mapred.LocalJobRunner (LocalJobRunner.java:progress(188)) - file:/home/tahir/Desktop/Hadoop/build/test/test.mapred.spill/in/part0:0+150
2007-04-03 00:18:05,752 INFO  mapred.LocalJobRunner (LocalJobRunner.java:progress(188)) - reduce > reduce
------------- ---------------- ---------------

Testcase: testKeyMismatch took 3.144 sec
Testcase: testValueMismatch took 1.128 sec
Testcase: testNoMismatch took 1.302 sec
, This looks like a reasonable approach. Please put the patches together into a single patch.

In the future, to facilitate this kind of testing in the future, we probably should add to the LocalJobRunner:

/**
* Get the exception that killed the job.
* @return The Throwable that killed the job or null if the the job was not killed by an exception.
*/
public static Throwable getJobException(String jobId);

Adding a field to the LocalJobRunner.Job to hold the Throwable and setting it with the caught exception should be easy.

Then your test could actually check the exception that was throw to see if it was the right type & message., Unified patch for 1001, +1

http://issues.apache.org/jira/secure/attachment/12355240/final.1001.patch applied and successfully tested against trunk revision r527057.

Results are at http://lucene.zones.apache.org:8080/hudson/job/Hadoop-Patch/18/console, +1, I've just committed this. Thanks Tahir!, Integrated in Hadoop-Nightly #55 (See http://lucene.zones.apache.org:8080/hudson/job/Hadoop-Nightly/55/)]