[Here are a list of proposed approaches that I'm aware of. [~atm], please feel free to chime in if I miss anything.


* Fix all FileSystem implementations so that they continue to proceed if they fail to obtain a delegation token from the remote cluster (HDFS-6776). The advantage is that it is easy to implement in {{WebHdfsFileSystem}}. The disadvantage is that it prohibits security-sensitive applications to enforce some security policy. For example, implementing a secure distcp application that can only write to secure clusters on top of these FileSystem become impossible.

* Fix all applications that need to this type of integration (proposed in the discussion of HDFS-6776). The application can ignore the DT isssues  and continue to proceed. The advantage is that application has more information to make this informed decisions (again, think of the secure distcp use case).  The disadvantage is that the application itself needs to be fixed.

* Issue a dummy delegation token in insecure clusters (proposed in the discussion of HDFS-6776). It changes the server implementation to issue a dummy delegation token when the server is in insecure mode. The advantage is that neither the applications nor the FileSystem need to be changed. The disadvantage is that older versions of server might need to be upgraded to enable this fix, though it can be mitigated by using a proxy as suggested in HDFS-6776.

, HI [~wheat9],

Thanks for creating this jira. For the dummy delegation token approach you listed, will it solve the "implementing a secure distcp application that can only write to secure clusters" issue? 

For the "fix all application" approach, I found that for distcp, there is a wildcard issue that the change has to go beyond distcp. See my latest comment in HDFS-7036. I wonder if it's feasible even if we go beyond distcp without any fundamental thing like approach 1 and 3 you listed. It'd be nice if you can comment in that jira.

Thanks.

, bq. will it solve the "implementing a secure distcp application that can only write to secure clusters" issue?

Yes. Obviously the application to verify whether the token is authentic, but it is feasible as long as you don't swallow the error at the file system layer.

bq. For the "fix all application" approach, I found that for distcp, there is a wildcard issue that the change has to go beyond distcp. See my latest comment in HDFS-7036. 

Just to echo my comments in HDFS-6776 (at least for the distcp use case):

bq. What can be done is to put the hack there, and to inject a corresponding token into token cache so that the filesystem no longer need to get the DT from the server. 

https://issues.apache.org/jira/browse/HDFS-6776?focusedCommentId=14121719&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-14121719

]