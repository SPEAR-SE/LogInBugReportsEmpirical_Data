[- Fix the regex to correctly parse the ADD command
- Add a test case to validate the ADD command, Ps: The ChukwaTestAdaptor could be useful for testing the AdaptorManager implementation
https://issues.apache.org/jira/browse/HADOOP-4893?focusedCommentId=12663916#action_12663916, Does this regex work if an adaptor has no parameters?  Do we have a test case to cover this?, Yes, HADOOP-5087-2.patch now contains 2 additional test case:
- "ADD org.apache.hadoop.chukwa.datacollection.adaptor.ChukwaTestAdaptor  chukwaTestAdaptorType 0 114027"
- "ADD org.apache.hadoop.chukwa.datacollection.adaptor.ChukwaTestAdaptor  chukwaTestAdaptorType 114027"
, Awesome.  +1, Junit failed because of HADOOP-5138, I think this is the right one -- I fiddled for a while and checked a bunch of the test cases., This patch removes trailing spaces from adaptor parameters; I'm pretty sure this is the Right Thing., The definition for the ADD command is: 

      // words should contain (space delimited):
      // 0) command ("add")
      // 1) AdaptorClassname
      // 2) dataType (e.g. "hadoop_log")
      // 3) params <optional>
      // (e.g. for files, this is filename,
      // but can be arbitrarily many space
      // delimited agent specific params )
      // 4) offset

How can you remove trailing spaces from adaptor parameters, this is adator specific and the adaptor should take care of that and this should not be automatically by the processCommand: HADOOP-5087-2.patch is doing that

Current tests cases are failing for 2 reasons:
-> space on the filename and the adaptor should be fixed
-> A test case send some chunks to the queue but do not clean up after itself and the shutdown method on the agent is not doing any sort of cleanup since in the real world the agent is calling System.exit(0). The solution is to move that test in a separate test case. Since we are forking, it will be fine.


, Currently, no adaptors assume that their parameters can end with spaces.  So we can change that part of the spec without breaking things.  And I think it's generally more confusing than useful; if an adaptor needs parameters to end with spaces, they can quote their parameters. , The idea of HADOOP-4947 was to have a more flexible parsing for chukwa commands.
Moving to regex was a good idea but the current regex to match the previous parsing (6-7 simple statements) seems to be very complicated and will be difficult to extend in the future.

So, I'm asking if in order to keep it simple, shouldn't we revert back to something similar to the initial parsing?



, I wouldn't revert.  The previous code was very complex and difficult to extend, too.  And had a number of quirks, or bugs, depending on what you think the proper behavior was.  I think this is actually simpler.  I vote keep.  , Regex is very powerful and could provide an elegant solution to the right problem. However, it's not the easiest thing to read and maintain.

A typical answer to regex maintainability issue is to have detailed comment on the regex. O'Reilly has an article on how to maintain regex which I thought was quite useful (http://www.perl.com/pub/a/2004/01/16/regexps.html). I think we should do something like that if we want to take the regex approach.

, Comments are good.  It should be easy to split the regex into pieces with comments and I'm happy to do it.  But we should decide exactly what the behavior we want is, in the case where you have multiple spaces between an Adaptor's parameters and the starting offset.  Which spaces belong to the parameter, and which are discarded?
That is, suppose have something that looks like:
       add ...FileTailingAdaptor... foo    10
Is the filename "foo" or "foo   " or?

This is basically a matter of taste.  I vote for the former; I think Jerome preferrs the latter.  Other opinions?, +1 on "foo"., another +1 for "foo", You asked for it, you got it.  Now with comments, and reluctant matching., This has been languishing for a while and I'd like to resolve it; I don't want to commit anything without a little more consensus, though.

Thoughts on the most recent patch?  [Is there a way to trigger hudson to re-check a patch?], FTA doesn't parse its argument correctly., patch should only affect file tailing adaptor, existing tests cover this case, none added, +1 on fixftaregex.patch, -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12401259/fixftaregex.patch
  against trunk revision 749318.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no tests are needed for this patch.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs warnings.

    +1 Eclipse classpath. The patch retains Eclipse classpath integrity.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch-vesta.apache.org/39/testReport/
Findbugs warnings: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch-vesta.apache.org/39/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Checkstyle results: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch-vesta.apache.org/39/artifact/trunk/build/test/checkstyle-errors.html
Console output: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch-vesta.apache.org/39/console

This message is automatically generated., Integrated in Hadoop-trunk #778 (See [http://hudson.zones.apache.org/hudson/job/Hadoop-trunk/778/])
    ]