[Would adding a flush on the command socket when sending the progress address the problem? It is already limited to 1/second, so it shouldn't cause excessive load., That was my work around to pin point the failure, and it resolved the issue., This patch adds a flush method to the stream interface and causes the progress method to call it., -1 overall.  Here are the results of testing the latest attachment 
http://issues.apache.org/jira/secure/attachment/12367040/pipe-flush.patch
against trunk revision r581745.

    @author +1.  The patch does not contain any @author tags.

    javadoc +1.  The javadoc tool did not generate any warning messages.

    javac +1.  The applied patch does not generate any new compiler warnings.

    findbugs +1.  The patch does not introduce any new Findbugs warnings.

    core tests +1.  The patch passed core unit tests.

    contrib tests -1.  The patch failed contrib unit tests.

Test results: http://lucene.zones.apache.org:8080/hudson/job/Hadoop-Patch/879/testReport/
Findbugs warnings: http://lucene.zones.apache.org:8080/hudson/job/Hadoop-Patch/879/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Checkstyle results: http://lucene.zones.apache.org:8080/hudson/job/Hadoop-Patch/879/artifact/trunk/build/test/checkstyle-errors.html
Console output: http://lucene.zones.apache.org:8080/hudson/job/Hadoop-Patch/879/console

This message is automatically generated., +1
One could argue, that the status message should be flushed as well such that users see updated c++ application status in JobTracker GUI as soon as possible.
Or even better, move 
          uplink->progress(progressFloat);
after
          uplink->status(status)
, I just committed this, with Christian's suggestion for sending the status before the flush instead of after., Integrated in Hadoop-Nightly #263 (See [http://lucene.zones.apache.org:8080/hudson/job/Hadoop-Nightly/263/])]