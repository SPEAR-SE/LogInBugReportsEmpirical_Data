[Patch for Hadoop trunk (0.24)., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12510965/HADOOP-7979.trunk.v1.txt
  against trunk revision .

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    -1 javadoc.  The javadoc tool appears to have generated 7 warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 eclipse:eclipse.  The patch built with eclipse:eclipse.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed unit tests in .

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HADOOP-Build/517//testReport/
Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/517//console

This message is automatically generated., > Please justify why no new tests are needed for this patch.

Since it's a fix of the build config, I don't think there is a good way to test it apart from running the build itself successfully.

> Also please list what manual steps were performed to verify this patch.

The patched version of trunk (as of commit 78147a9 from two days ago) builds successfully on our side on Ubuntu 11.10.

We don't have Macs here, so I can't directly test the maven profile that triggers on Macs only.  However the activation trigger of the Mac profile follows the Maven docs ([1] and also [2] which defines the possible values for OS families, of which "mac" is used for Macs).  Also, I verified that the Mac maven profile setup properly disables the LDFLAGS option when it (i.e. the profile) is actually triggered.

[1] http://maven.apache.org/guides/introduction/introduction-to-profiles.html
[2] http://maven.apache.org/plugins/maven-enforcer-plugin/rules/requireOS.html
, Thanks for the patch Michael!

I'll commit this, can you please check if we need this for native code in other parts of Hadoop? E.g. linux-container-executor in MR. Thanks., Won't explicitly setting LDFLAGS and CXXFLAGS break gcc's that don't know what these flags are?  Can users override?, @Allen:

> Won't explicitly setting LDFLAGS and CXXFLAGS break gcc's that don't
> know what these flags are?

I am not overly familiar with gcc and ld.  While patching a similar issue for Hadoop-LZO we learned that the gcc on Mac OS X Lion doesn't support the {{-Wl,\--no-as-needed}} option for LDFLAGS, hence the patch includes a Maven profile for not setting LDFLAGS on Macs.  But as you suggested there might be other OS'es (Solaris?) or gcc versions that behave differently but I don't have any direct experience there to provide further information.

> Can users override?

What would be the preferred way to do this in the current (trunk) Maven setup?  I have seen that native code compilation must explicitly be enabled by running the build with the proper Maven profile, e.g. {{mvn -Pnative ...}}.

At the moment, the patch is designed to work like so:
"By default enable the LDFLAGS option, and only disable it under /these/ specific conditions [currently: if running on a Mac box]."  You'd prefer it the other way around (disable by default)?

@Arun:

> Can you please check if we need this for native code in other
> parts of Hadoop? E.g. linux-container-executor in MR.

I am still working on this (and it takes some time because re-running the build including tests takes several hours).

I have only found a few occasions of native code references in pom.xml files in trunk, with linux-container-executor in MR being one of them:

{code}
$ find . -name "pom.xml" | xargs grep native | sed -r 's/^([^:]*):.*/\1/' | sort -u
./hadoop-common-project/hadoop-common/pom.xml
./hadoop-hdfs-project/hadoop-hdfs/pom.xml
./hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/pom.xml
./hadoop-project-dist/pom.xml
./hadoop-project/pom.xml
{code}


However, at least for linux-container-executor (i.e. {{./hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/pom.xml}}), I could run the build via {{mvn -Pnative compile}} successfully as it is -- even on the "problematic" Ubuntu 11.10 OS version.  Should these components still be patched even though they compile without problems in their current state of development?, This is the same issue as https://issues.apache.org/jira/browse/HADOOP-7868, Allen, Arun, any updates on this?  I am not sure how to follow up because of the open questions described above., I'm not sure that this is the right fix; the build failure is caused by the autoconf macro that determines the name of the .so libraries failing due -W,--as-needed.

I think it would be better to fix the macro ONLY to use -W,--no-as-needed rather than using this setting for the entire native build.

See https://issues.apache.org/jira/browse/HADOOP-7868 - although that does need to be adapted to deal with platforms that don't understand this flag as well., This patch works for me although I think James is right that more fine-grained configuration would be nice. Perhaps {{hadoop-common/hadoop-common-project/hadoop-common/src/main/native/configure.ac}} would be the place to look and set ld flags according to platform and ld version., Dupe of HADOOP-7868.]