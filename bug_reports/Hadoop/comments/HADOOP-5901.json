[examples
{code}
fixName("") = "hdfs://" // invalid URI at parse time
fixName("/something-with-a-slash")  = "/something-with-a-slash" // invalid URI at parse time

where it does work is mapping "local" to "file:///" and  fixName("real-hostname") -> "hdfs://real-hostname". 

If it is to be retained, the empty string and / handing should be looked at and ideally dropped. , Worse than that -- setting {{fs.default.name}} to {{"/foo"}} actually causes a stack overflow in FileSystem.get(). It never makes it to {{fixName()}}., I think this has been generating warnings long enough.  Setting fs.default.name to a URI with a null scheme should be an error., Anyway, given that {{fs.default.name}} itself is deprecated at this point, I'm +1 on removing the whole {{fixName()}} method.

I'll submit a patch which makes FileSystem in general a bit more strict about its inputs, and fixes the aforementioned stack overflow., Attaching a patch which removes {{fixName}} and adds {{checkName}} in its place. Added unit tests that check a variety of potential default fs URLs and make sure that {{FileSystem.get()}} still returns something reasonable (e.g., the FileSystem associated with the {{DEFAULT_FS}} URI).

The aforementioned stack overflow is prevented by this patch.

Locally, I get the following from test-patch:
{code}
     [exec] +1 overall.  
     [exec] 
     [exec]     +1 @author.  The patch does not contain any @author tags.
     [exec] 
     [exec]     +1 tests included.  The patch appears to include 3 new or modified tests.
     [exec] 
     [exec]     +1 javadoc.  The javadoc tool did not generate any warning messages.
     [exec] 
     [exec]     +1 javac.  The applied patch does not increase the total number of javac compiler warnings.
     [exec] 
     [exec]     +1 findbugs.  The patch does not introduce any new Findbugs warnings.
     [exec] 
     [exec]     +1 release audit.  The applied patch does not increase the total number of release audit warnings.
{code}, +1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12422974/HADOOP-5901.patch
  against trunk revision 828886.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch-h4.grid.sp2.yahoo.net/103/testReport/
Findbugs warnings: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch-h4.grid.sp2.yahoo.net/103/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Checkstyle results: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch-h4.grid.sp2.yahoo.net/103/artifact/trunk/build/test/checkstyle-errors.html
Console output: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch-h4.grid.sp2.yahoo.net/103/console

This message is automatically generated., bq. Worse than that - setting fs.default.name to "/foo" actually causes a stack overflow in FileSystem.get(). It never makes it to fixName(). 
Aaron, can you please see if HDFS-51 is the same issue? If yes, can you close that as duplicate? One less open issue :) Thanks!, Good catch. I tested -- this patch fixes that error as well., # In {{setDefaultURI()}} you catch an IOException and throw the IllegalArgumentException instead. We shouldn't be throwing RunTimeExceptions from the code because this means a bug in the code itself. Here you want to report a bad configuration parameter. Therefore, you should just let the IOException flow up. Especially if in your case the IOExceptions contain more information than mere "Invalid uri in setDefaultUri()".
# {{checkName()}} should be declared void.
# Also in {{checkName()}} the {{else{...}}} part can be dropped, I mean not the internals but the enclosing brackets. This is a style thing, but simplifies code imho.
# I really liked a bunch of new tests for the file system parameter. Please check if you need to close all successfully opened file systems., I liked the tests too, but there is a lot of cut-and paste replication in those tests which could be replaced by a couple of methods. Test code is code to maintain too, so a quick "replace with method" operation in the IDE would be nice, Konstantin, changing {{setDefaultURI()}} to throw an IOException is an incompatible interface change for {{FileSystem}}. I'm not strictly against doing this, but I thought that it was frowned upon. Code in other places (e.g., {{GenericOptionsParser}}) which uses {{setDefaultURI}} will need to be modified at the same time. I had spoken with Doug offline and he suggested converting to IllegalArgumentException for that reason. Do you still think the public interface change is a good idea?, Here's a new patch that includes the {{throws IOException}} on {{setDefaultURI}}. This changes the implementation of GenericOptionsParser slightly to continue compiling.

Also refactors tests per Steve's suggestion. There should not be a need to explicitly close filesystems; the tests instantiate LocalFileSystem instances., +1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12423267/HADOOP-5901.2.patch
  against trunk revision 829289.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch-h4.grid.sp2.yahoo.net/104/testReport/
Findbugs warnings: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch-h4.grid.sp2.yahoo.net/104/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Checkstyle results: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch-h4.grid.sp2.yahoo.net/104/artifact/trunk/build/test/checkstyle-errors.html
Console output: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch-h4.grid.sp2.yahoo.net/104/console

This message is automatically generated., > ... Doug offline suggested converting to IllegalArgumentException for that reason.

I see.

> Do you still think the public interface change is a good idea?

I think it is a good change in this case. Throwing a runtime exception in public api would be worse.

+1, > We shouldn't be throwing RunTimeExceptions from the code because this means a bug in the code itself.

FileSystem, Path and FileContext currently throw IllegalArgumentException for path problems like this.
, Konstantin: are you still in favor of the IOE? If so, what's your opinion on patch #2?, > FileSystem, Path and FileContext currently throw IllegalArgumentException for path problems like this.

I know, and I don't think this is right.
Also this case is a bit different. Patch #1 was catching IOException and converting it to IllegalArgumentException.

> what's your opinion on patch #2? 

My plus one was related to your last patch. It looks good to me., This patch no longer applies cleanly., New patch synced with trunk., +1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12427993/HADOOP-5901.3.patch
  against trunk revision 890588.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch-h4.grid.sp2.yahoo.net/205/testReport/
Findbugs warnings: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch-h4.grid.sp2.yahoo.net/205/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Checkstyle results: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch-h4.grid.sp2.yahoo.net/205/artifact/trunk/build/test/checkstyle-errors.html
Console output: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch-h4.grid.sp2.yahoo.net/205/console

This message is automatically generated., I've just committed this. Thanks Aaron!, Integrated in Hadoop-Common-trunk-Commit #115 (See [http://hudson.zones.apache.org/hudson/job/Hadoop-Common-trunk-Commit/115/])
    . FileSystem.fixName() has unexpected behaviour. Contributed by Aaron Kimball.
, Integrated in Hadoop-Common-trunk #188 (See [http://hudson.zones.apache.org/hudson/job/Hadoop-Common-trunk/188/])
    . FileSystem.fixName() has unexpected behaviour. Contributed by Aaron Kimball.
, I've just reverted this change, since FileSystem.setDefaultUri(conf, "file:///") fails., Integrated in Hadoop-Common-trunk-Commit #116 (See [http://hudson.zones.apache.org/hudson/job/Hadoop-Common-trunk-Commit/116/])
    Reverting . FileSystem.fixName() has unexpected behaviour.
, The proposed changes (namely throwing {{IOException}} from {{setDefaultUri}} method) will break other parts of Hadoop. E.g. in MR MiniMRCluster
{noformat}
342:     FileSystem.setDefaultUri(result, namenode);
{noformat}

will surely fail because now {{IOException}} has to be caught. So, the patch has to, at very least, address such issues. I'll link MAPREDUCE-1297 with this JIRA for tracking purposes., This seems to be caused by the modification in question., Yes, changing the signature for {{FileSystem.setDefaultUri(Configuration, String)}} to throw an IOException if it cannot create a proper URI from the String argument would be an incompatible change.

Digging into the changes necessary in the MapReduce codebase, it appears that  ({{MiniMRCluster.configureJobConf()}}) is the only use of FileSystem.setDefaultUri(). So that could be changed to itself throw IOException easily enough. But that is called by {{MiniMRCluster.createJobConf()}} which is used in several dozen places throughout the test codebase.

On the HDFS codebase side, it looks as though all the uses of setDefaultUri are in test cases which can all be modified to throw more exceptions than they do now in a straightforward way; or else in places where the URI is generated programmatically and we know that it's going to be valid. (Hence we can swallow the IOException.)

So I think our options are as follows:

# Modify {{MiniMRCluster.createJobConf()}} to also throw IOException and modify all call-sites to catch IOException.
# Early in this patch's development I was throwing an IllegalArgumentException (unchecked) for this reason (preventing incompatibility). Konstantin S: Are you still pro-IOException here?
# Make the {{FileSystem.checkName()}} method public. The {{namenode}} argument in MiniMRCluster which is used to format the URI is passed into MiniMRCluster's constructor. With a public checkName, we could call {{checkName(namenode)}} in the MiniMRCluster constructor, which already throws IOException, so clients already trap that. Then we could swallow the exception (maybe with a log4j message) in {{createJobConf()}}, knowing that it should never be thrown since we already verified the URI's sanity. This increases the size of the public static FileSystem API.
, Integrated in Hadoop-Common-trunk #189 (See [http://hudson.zones.apache.org/hudson/job/Hadoop-Common-trunk/189/])
    Reverting . FileSystem.fixName() has unexpected behaviour.
, Reviewing this, throwing an {{IllegalArgumentException}} would be compile-time and Java-methodology compatible, and consistent with the other file APIs. , Here's another take at this with IllegalArgumentException behavior restored.

MapReduce compilation is ok with this since it does not change the statically-typed API. (If this is committed, MAPREDUCE-1297 should be resolved as Invalid.)

I've posted a patch at HDFS-835 to handle the HDFS test failure that occurred the first time this was committed. If this patch is committed, HDFS-835 should be committed as well., +1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12430328/HADOOP-5901.4.patch
  against trunk revision 898740.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch-h1.grid.sp2.yahoo.net/37/testReport/
Findbugs warnings: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch-h1.grid.sp2.yahoo.net/37/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Checkstyle results: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch-h1.grid.sp2.yahoo.net/37/artifact/trunk/build/test/checkstyle-errors.html
Console output: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch-h1.grid.sp2.yahoo.net/37/console

This message is automatically generated., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12430328/HADOOP-5901.4.patch
  against trunk revision 1031422.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    -1 patch.  The patch command could not apply the patch.

Console output: https://hudson.apache.org/hudson/job/PreCommit-HADOOP-Build/74//console

This message is automatically generated., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12430328/HADOOP-5901.4.patch
  against trunk revision 1031675.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    -1 patch.  The patch command could not apply the patch.

Console output: https://hudson.apache.org/hudson/job/PreCommit-HADOOP-Build/75//console

This message is automatically generated., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12430328/HADOOP-5901.4.patch
  against trunk revision 1071364.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    -1 patch.  The patch command could not apply the patch.

Console output: https://hudson.apache.org/hudson/job/PreCommit-HADOOP-Build/292//console

This message is automatically generated., Canceling this patch as it is over a year old and no longer applies to trunk., This should really get revisited to finish this up.]