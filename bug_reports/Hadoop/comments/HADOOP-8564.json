[+1 for the second option. This will also allow adding future optimization at the stream level on Windows, similar to the ones done for Linux., Can this be merged into the existing NativeIO JNI library? Or are the number of {{#ifdef WINDOWS}} macros required so numerous that we should just have two entirely separate libhadoops?, {quote}
Can this be merged into the existing NativeIO JNI library? Or are the number of #ifdef WINDOWS macros required so numerous that we should just have two entirely separate libhadoops?
{quote}
NativeIO JNI library is only available on Linux while this class is only needed on Windows. I think it make sense to create a separate native lib file. We don't necessary need to name it libhadoop. For example, if the class is called 'WindowsFileInputStream', the new lib could be 'WindowsFileInputStream.dll'. Is there any concern over this? E.g. you want to reduce native library files exposed in Hadoop in general?, bq. NativeIO JNI library is only available on Linux while this class is only needed on Windows. I think it make sense to create a separate native lib file. We don't necessary need to name it libhadoop. For example, if the class is called 'WindowsFileInputStream', the new lib could be 'WindowsFileInputStream.dll'. Is there any concern over this? E.g. you want to reduce native library files exposed in Hadoop in general?

Currently NativeIO JNI is Linux-only, but I think all of the stuff found in there is useful on Windows as well. For example:
- Native CRC32 computation: the SSE instructions probably need slightly different syntax for the Windows C++ compiler, but are necessary for good performance
- Various other flags to open() needed for race-condition free security support: probably needs different APIs in Windows but likely there are equivalents available
- Compression: Windows equally needs fast compression libraries, etc

So, I think it makes sense to get libhadoop generally compiling on Windows and making it the central place for native dependency code., Hi Todd, thanks for the clarification. I see you point now. However I think there are three things here.

# Make existing NativeIO works on Windows.
# Create new Windows native IO functionality that solves the above issue.
# Build and organize the code/lib so that we have a central place for the native code.

For this Jira, we only intend to solve 2. I agree with you on 1. For 3, I can see both pros and cons. But once 1 is done, there should be only modest work to create a common lib for all native code. Does this make sense to you?, Yes, that makes sense. I was thinking that it makes sense to tackle #1 first -- even if it means that many of the native pieces are disabled for now on Windows. That way we only have to fix the build in one place, rather than adding a new build component and later merging the two builds., Hi Todd, I did some further investigation and coding. A basic porting of NativeIO is not working on Windows. However I did see some issues for a cross platform native library. For example, the open() method and fstat() method have some flags that are mostly specific to Linux or POSIX world. It may be difficult to find an exact mapping of those flags to Windows equivalent. Does it make sense to create sub classes to separate Unix/POSIX and Windows functions? E.g. we can have NativeIO.POSIX.open() and NativeIO.Windows.createFile(). However this will break existing APIs. I am not sure what is the best way to proceed., Hi Chuan. Thanks for taking a look into that.

I wouldn't be concerned about API compatibility here, since these are private-facing (internal) APIs. We can change them between versions without breaking any contracts with downstream projects.

I think your idea of separating the windows calls from the POSIX ones makes sense. But, we should probably also enumerate the uses of the POSIX calls and figure out what the equivalents are on the Windows side - for example, we use fstat and open(O_EXCL) for a lot of security reasons. I don't know for sure whether Windows has equivalent APIs or we need to take another route entirely in those situations., Attaching a patch and update the JIRA title to reflect the change.

We port and extend Hadoop native libraries to Windows.

The POSIX native functions and flags are moved under the new nested class NativeIO.POSIX. The Windows functions and flags are created under NativeIO.Windows.

We spent some time on investigating how to map POSIX APIs, specially all the flags to Windows equivalent. However, this seems very difficult if even possible given all the IO options and error codes.

Instead, we created some special IO functions in NativeIO, i.e. getShareDeleteFileInputStream(), getCreateForWriteFileOutputStream() that abstract the IO usage pattern.

We changed the related data node functions to use the new native library functions to get the desired I/O streams.

Some new test cases are added to TestNativeIO. TestFileConcurrentReader is fixed to test concurrent reading and writing scenarios., Todd, please post if you have any comments. Otherwise I am going to commit this tomorrow., Sorry, I missed that the new patch was uploaded. Can I have a couple days to review it? It's a big patch. If you want to go ahead and commit to the branch, that's OK so long as review feedback can be addressed afterwards., I will commit this patch, since there are other patches that are dependent on this. 

One you post your review comments, it can be addressed in another Jira. , Attaching the patch with indentation changed to spaces and CRLF changed LF., +1 for the patch. I committed it to branch-1-win. Thank you Chuan.

Todd, please do post your comments. It will be addressed by a separate jira., I reverted the commit. 

Chuan the patch fails build:
{noformat}
    [javac] .../src/test/org/apache/hadoop/io/nativeio/TestNativeIO.java:83: cannot find symbol
    [javac] symbol  : method setOwner(java.io.File,java.lang.String,<nulltype>)
    [javac] location: class org.apache.hadoop.fs.FileUtil
    [javac]     FileUtil.setOwner(testFile, username, null);
{noformat}

Is this patch dependent on any other jira?, Let me try it on my machine., Suresh, sorry for the break.

This indeed depends on another JIRA HADOOP-8763.

FileUtil.setOwner() method was added in that JIRA., Reopened because I had reverted the patch earlier due to build issue., I committed the patch.

Thank you Chuan., I forgot to include two new Windows build files. Attach a new patch of the two missing files., I committed additional files missed in previous commit to branch-1-win.]