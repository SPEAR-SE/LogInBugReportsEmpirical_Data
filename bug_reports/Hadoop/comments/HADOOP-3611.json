[patch to fix these issues, +1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12384402/TestNetworkTopology.patch
  against trunk revision 669986.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/2710/testReport/
Findbugs warnings: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/2710/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Checkstyle results: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/2710/artifact/trunk/build/test/checkstyle-errors.html
Console output: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/2710/console

This message is automatically generated., bq. (a) has some of its private static final modifiers in the wrong order

According to the [language spec|http://java.sun.com/docs/books/jls/third_edition/html/classes.html#8.3.1], it is "customary, though not required" that they appear in some order, but there's no semantic relevance; this "custom" is violated in the very next example in the spec, so enforcing it in test code scarcely seems worth it.

bq. (b) in an assertEquals, has the static and dynamic values wrong, so the error message won't be correct

This might be worth fixing- one almost always needs to examine the assertion in the test to know how the test failed, and there the context is unambiguous- but surely there are other examples in the unit tests of this. An omnibus bug (an omnibug?) fixing many instances of "backwards" asserts might be helpful, but this particular fix strikes me as unnecessary. There are at least four other examples of this in TestNetworkTopology alone that remain inverted.

I'm opening HADOOP-3679 to track (b) more generally and closing this.]