[When this happens, the temp files for the task are never cleared., Here are relevant logs:

{noformat}
1. 2007-10-09 12:19:15,055 INFO org.apache.hadoop.mapred.TaskTracker: Received KillTaskAction for task: task_200710090910_0003_r_001792_1
2. 2007-10-09 12:19:15,055 INFO org.apache.hadoop.mapred.TaskTracker: About to purge task: task_200710090910_0003_r_001792_1
3. 2007-10-09 12:19:15,056 INFO org.apache.hadoop.mapred.TaskTracker: task_200710090910_0003_r_001792_1 0.67524564% reduce > reduce
4. 2007-10-09 12:19:15,056 INFO org.apache.hadoop.mapred.TaskRunner: task_200710090910_0003_r_001792_1 done; removing files.
5. 2007-10-09 12:19:15,491 WARN org.apache.hadoop.mapred.TaskTracker: Unknown child task finshed: task_200710090910_0003_r_001792_1. Ignored.
6. 2007-10-09 12:19:18,059 WARN org.apache.hadoop.mapred.TaskTracker: Progress from unknown child task: task_200710090910_0003_r_001792_1
{noformat}

With particular emphasis on line #3 above, it looks like this can happen due to the fact that a task's progress update (child-vm) got interspersed with methods which were called while purging the task i.e. 
{{TaskTracker#purgeTask}} -> {{TaskTracker#TaskInProgress#jobHasFinished}} which then calls {{TaskTracker#TaskInProgress#kill}} and {{TaskTracker#TaskInProgress#cleanup}}.

Unfortunately there are a couple of issues which result in this scenario:
a) {{TaskTracker#TaskInProgress#jobHasFinished}} isn't a synchronized method and hence there is no transaction semantics for calls made from there i.e. {{TaskTracker#TaskInProgress#kill}} and {{TaskTracker#TaskInProgress#cleanup}}. 
b) Thus the call to kill and clean can be interspersed with a call to {{TaskTracker#TaskInProgress#reportProgress}} (as seen in the logs). This is dangerous since it is the *{{TaskTracker#TaskInProgress#cleanup}}* call which removes the taskid from {{TaskTracker#tasks}}.
c) {{TaskTracker#TaskInProgress#reportProgress}} unconditionally marks the task's run-state as {{RUNNING}} which clearly is wrong, since it overwrites the task's {{KILLED}} status set in {{TaskTracker#TaskInProgress#kill}}.

Overall a combination of the above leads to the task never being removed from {{TaskTracker#runningTasks}} which leads to the bug in question.

The way to get around is to:
a) Call {{tasks.remove(taskid)}} from {{TaskTracker#TaskInProgress#kill}} to ensure the interspersed call to {{TaskTracker#TaskInProgress#reportProgress}} fails to wrongly update the task status as {{RUNNING}}
or
b) Check to ensure the task's state is actually {{RUNNING}} before updating it's status when the child reports in.

I'd go with (b).
, First cut - relatively straight-forward; I'll continue testing., I figured that a less intrusive approach to just ignore the child's status-update and not asking it to kill itself right-away would work as well. A more conservation option., +1, although moving the logging line up seems more confusing than helpful., Submitting patch, I've run this multiple times and checked that there are no tell-tale signs of stray _${taskid} directories lying in ${mapred.output.dir}., I just committed this., Integrated in Hadoop-Nightly #270 (See [http://lucene.zones.apache.org:8080/hudson/job/Hadoop-Nightly/270/])]