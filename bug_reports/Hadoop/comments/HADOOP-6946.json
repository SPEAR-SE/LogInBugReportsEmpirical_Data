[Patch for secure-20, Patch for trunk, -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12454181/hadoop-6946.txt
  against trunk revision 995285.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    -1 javadoc.  The javadoc tool appears to have generated 1 warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

    +1 system tests framework.  The patch passed system tests framework compile.

Test results: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch-h4.grid.sp2.yahoo.net/680/testReport/
Findbugs warnings: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch-h4.grid.sp2.yahoo.net/680/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Checkstyle results: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch-h4.grid.sp2.yahoo.net/680/artifact/trunk/build/test/checkstyle-errors.html
Console output: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch-h4.grid.sp2.yahoo.net/680/console

This message is automatically generated., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12454181/hadoop-6946.txt
  against trunk revision 1031422.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

    +1 system test framework.  The patch passed system test framework compile.

Test results: https://hudson.apache.org/hudson/job/PreCommit-HADOOP-Build/14//testReport/
Findbugs warnings: https://hudson.apache.org/hudson/job/PreCommit-HADOOP-Build/14//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://hudson.apache.org/hudson/job/PreCommit-HADOOP-Build/14//console

This message is automatically generated., Can someone familiar with the security code please review this?, The change looks good (using the login user if the current subject is null), but in fetchServiceTicket doesn't the same subject from getTgtFromSubject need to be used when adding private credentials? ie won't the subject be null there as well if it's null in the current version of getTgtFromSubject?

Nit: need to update the javadoc to remove that the IOException is no longer thrown.  Verified that no callers depend on that behavior. , bq. in fetchServiceTicket doesn't the same subject from getTgtFromSubject need to be used when adding private credentials? ie won't the subject be null there as well if it's null in the current version of getTgtFromSubject?

Not sure I follow. In fetchServiceTicket, after the patch, we use getTgtFromSubject - which now goes to {{UGI.getCurrentUser().getSubject()}} - and then add the new ticket to the same place in the last line of this function.

bq. need to update the javadoc to remove that the IOException is no longer thrown

Where do you mean? UGI.getCurrentUser() throws IOE, so the functions both still throw IOE like they used to., These methods were initially added as pure utility methods that have no concepts of UGI or CurrentUser. They operate on the Subject associated with current AccessControlContext and are meant to fail if the Subject can't be found. I'm not familiar with the issue you had with secondary namenode, but if you wanted it to operate on CurrentUser, can you add a doAs() block instead? UGI.getCurrentUser() has the side-effect of calling login() if it hasn't been called before. You don't want an innocent-looking utility method to have such side-effect. , Kan: from the point of view of someone who has mostly been a user of the functions in UGI/SecurityUtil, it actually seems equally strange to me that {{UGI.getCurrentUser()}} has a side effect. Once we've made that concession that there is a Hadoop-specific idea of a JVM-wide (static) current/login user that is implicitly logged in when you call security-related functions, I'd expect all of these functions to be consistent about falling back to that same behavior.

That is to say, from the perspective of someone using this API, the following looks pretty reasonable:
{code}
SecurityUtil.login(...)
SecurityUtil.getTgtFromSubject()
{code}
but in the current implementation it will crash., > Kan: from the point of view of someone who has mostly been a user of the functions in UGI/SecurityUtil, it actually 
> seems equally strange to me that UGI.getCurrentUser() has a side effect.

That login() side effect has already caused one bug for us, where UGI.getCurrentUser() was called before loginFromKeytab() and for a brief period the currentUser is whatever the TGT that happens to be in the system's TGT cache. Maybe we shouldn't have allowed such side effect in the first place. But I definitely don't want to see more possibilities for such side effects.

> Once we've made that concession that there is a Hadoop-specific idea of a JVM-wide (static) current/login user that 
> is implicitly logged in when you call security-related functions, I'd expect all of these functions to be consistent about 
> falling back to that same behavior.

Yes, there is such a concept of system-wide current/login user, but to use it you have to explicitly invoke UGI.getCurrentUser().doAs(). That is what happened in the RPC layer. I think it's safer to explicitly invoke doAs(). Another option could be after login, we put everything inside a loginUser.doAs() block. That way the current Subject is always available and is the user we have logged in, unless we are in nested doAs() blocks. However, we had gone a different path., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12454181/hadoop-6946.txt
  against trunk revision 1071364.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

    +1 system test framework.  The patch passed system test framework compile.

Test results: https://hudson.apache.org/hudson/job/PreCommit-HADOOP-Build/260//testReport/
Findbugs warnings: https://hudson.apache.org/hudson/job/PreCommit-HADOOP-Build/260//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://hudson.apache.org/hudson/job/PreCommit-HADOOP-Build/260//console

This message is automatically generated., Canceling the patch as the patch is out of date.]