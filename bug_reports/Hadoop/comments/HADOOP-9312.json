[This came up during code review for HADOOP-9232, which adds a native implementation for this method on Windows.  It turns out that both the Linux implementation and the Windows implementation headed for branch-trunk-win have this problem.

Pasting my comments from HADOOP-9232:

Is the following code not thread-safe?

{code}
...
static jobjectArray emptyGroups = NULL;
...
  if (emptyGroups == NULL) {
    jobjectArray lEmptyGroups = (jobjectArray)(*env)->NewObjectArray(env, 0,
            (*env)->FindClass(env, "java/lang/String"), NULL);
    if (lEmptyGroups == NULL) {
      goto cleanup;
    }
    emptyGroups = (*env)->NewGlobalRef(env, lEmptyGroups);
    if (emptyGroups == NULL) {
      goto cleanup;
    }
  }
{code}

For example, assume 2 threads concurrently call getGroupForUser. Thread 1 executes the NULL check, enters the if body, and then gets suspended by the OS. Thread 2 executes and emptyGroups is still NULL, so it initializes it. Then, the OS resumes thread 1, which proceeds inside the if body and calls NewObjectArray again. Since emptyGroups never gets freed, I believe the net effect would be a small memory leak., I agree it is not thread safe.

The problem is mitigated a bit because "getGroups()" and "emptyGroups" are both instance members not class members.

Do we require this class to be thread safe from its use pattern?, We expect the patch submitted on HADOOP-9439 to fix this memory leak for the Unix version of the code.]