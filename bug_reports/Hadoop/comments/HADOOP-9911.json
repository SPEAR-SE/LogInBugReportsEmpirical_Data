[I guess a bigger question is whether it actually even makes sense to ship native bits at all. I'm afraid there's no way that Hadoop binary convenience artifacts can satisfy all the possible Linux combinations out there. 32bit vs. 64bit is just one aspect of it., The latest hadoop stable (1.2.1) is doing it. Why would hadoop 2.x not be able to do the same?, There was a change in layout in 2.x of where the native binaries are coming from -- they are no longer under and arch-specific folder. , I saw that the vote for hadoop 2.2 is open and this is still open. Is nobody using the native libs any longer or has this been overlooked?, I just tried 2.2 and it is the same problem., Voting for this because applications built around libhdfs depend on the binaries being available to end users. Missing 64bit binary lib would force users to build the hdfs project which might be simple for us, but it could be a deal breaker for end users.
As it has been pointed out, the arch specific libs had been provided in past versions. Can we extend the "native" dir with the arch subfolders, and the appropriate libs? Thanks., While migrating from 1.2 to 2.2, we ran into this. We are using a golang wrapper around libhdfs. So had to build the 64 bit binary ourselves. Would be great if it can be packaged., Why not ship the 64 bit library and leave the warning for the 32 bit users or ship both. But as it currently stands, shipping the 32 bit lib "breaks" a majority of the users., It seems that the current releases (2.5.2 and 2.6.0) are shipping with 64bit versions of the libraries. I guess this is related to changes in the build infrastructure or something. Whatever you do, please keep it this way., @André Kelpe are the 64bit versions packaged in the Apache release packages? I wasn't able to find them and was wondering where you found them. Thanks.  , [~rpastrana] yes, in 2.6.0 for instance I get this now:

{code}
 $ pwd
/home/fs111/tools/hadoop-2.6.0/lib/native

$ file *
libhadoop.a:        current ar archive
libhadooppipes.a:   current ar archive
libhadoop.so:       symbolic link to `libhadoop.so.1.0.0'
libhadoop.so.1.0.0: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, BuildID[sha1]=0x2c42803ac908d7781a6c66a16723dd8ebb7dd76e, not stripped
libhadooputils.a:   current ar archive
libhdfs.a:          current ar archive
libhdfs.so:         symbolic link to `libhdfs.so.0.0.0'
libhdfs.so.0.0.0:   ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, BuildID[sha1]=0xea14c6974f6b0f55237ec3bf233e9899750964b0, not stripped
{code}, Thanks @André Kelpe, I didn't see this change reported anywhere and would not have noticed if it weren't for your post., It does not look like a deliberate change, more like a side effect caused by build-system changes. Let's hope it stays this way...]