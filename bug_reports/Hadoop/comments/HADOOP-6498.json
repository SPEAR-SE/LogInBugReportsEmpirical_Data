[This bug is related to the ipc/Client.java. In receiveResponse() methods, we first remove the call, then read the data. When reading encouters exception, the thread waiting the call object will not be waken forever., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12430656/hadoop-6498.patch
  against trunk revision 899866.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch-h4.grid.sp2.yahoo.net/280/testReport/
Findbugs warnings: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch-h4.grid.sp2.yahoo.net/280/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Checkstyle results: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch-h4.grid.sp2.yahoo.net/280/artifact/trunk/build/test/checkstyle-errors.html
Console output: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch-h4.grid.sp2.yahoo.net/280/console

This message is automatically generated., Though the fix is a proper direction to avoid client hangs, we should first fix the original problem. Heartbeat hanging would mean some kind of uncaught exception like NPE on the JobTracker side which left unhandled may result in inconsistent state. Can you dig through JT logs and see if any such issue happened?, Two points:

1) Connection exception(networking has some problem) also causes socket  reading exception. It's not always server exception.

2) Even if jobtracker gives the exception, we wouldn't hang the client.

In my opinion, this is a pure coding logic bug.

, P.S. This bug is not related to uncaught exception like NPE on the JobTracker side., In Client.java->receiveResponse():

        Call call = calls.remove(id);

        int state = in.readInt();    
        if (state == Status.SUCCESS.state) {
          Writable value = ReflectionUtils.newInstance(valueClass, conf);
          value.readFields(in);               // if here throws exception,  who will wake up the current call's waiting thread? 
          call.setValue(value);
        } else if (state == Status.ERROR.state) {
          call.setException(new RemoteException(WritableUtils.readString(in),
                                                WritableUtils.readString(in)));
        } else if (state == Status.FATAL.state) {
          // Close the connection
          markClosed(new RemoteException(WritableUtils.readString(in), 
                                         WritableUtils.readString(in)));
        }, Good catch, Ruyue! It would be nice that we get it fixed in 0.20 as well. Could you please post a patch for 0.20? I know that it is hard. Is it possible to write a unit test to reproduce the bug?, Ruyue.. I am not against this fix. Just trying to make sure if you've already stumbled upon another bug in JobTracker. How did you find this bug? During code browsing or on a real cluster? If it is the later, that might point us to any bugs in JT APIs which we can fix right-away if you have traces on JT too.

In any case, if such a bug indeed is there, this patch will make it more conspicuous by throwing it to the client., The bug was found two times in our cluster.

1. tasktracker heartbeat rpc hang:  when hang occurs, the networking load is very high.  Two nodes hang.

2. Another time, our networking has some problem (ping latency is 200~300ms).  get map events threads hang. About 50 nodes.

This patch will be deployed our online cluster. 

Now, I can't make sure if jobtracker has some bug. , for branch 0.20, To: Hairong

Unit test is very difficult.

You can modify the code according to the following: 

{code:title=Client.java|borderStyle=solid}

    private void receiveResponse() {
      if (shouldCloseConnection.get()) {
        return;
      }
      touch();
      
      try {
        int id = in.readInt();                   

        if (LOG.isDebugEnabled())
          LOG.debug(getName() + " got value #" + id);

        Call call = calls.remove(id);

        int state = in.readInt();    
        if (state == Status.SUCCESS.state) {
          Writable value = ReflectionUtils.newInstance(valueClass, conf);

         // < MODIFIED BY ME
         if (id == 100) {
              throw new IOException("network error");
         } else {
              value.readFields(in); 
         }        
         // > MODIFIED BY ME 
       
          call.setValue(value);
        } else if (state == Status.ERROR.state) {
          call.setException(new RemoteException(WritableUtils.readString(in),
                                                WritableUtils.readString(in)));
        } else if (state == Status.FATAL.state) {
          // Close the connection
          markClosed(new RemoteException(WritableUtils.readString(in), 
                                         WritableUtils.readString(in)));
        }
      } catch (IOException e) {
        markClosed(e);
      }
    }

{code} 

The 100th rpc call will hang., Right then. The fix looks good to me. We will need a test-case to verify that this call and any other queued calls are all notified so that they can properly exit., oh.. comments collided.. well

For testing this, I guess we can modify {{TestIPCServerResponder}} to add a new test similar to {{testServerResponder()}}, but instead of BytesWritable for value class we can use a custom Writable that throws exception in readFields()., Ruyue: could you make this a unit test by making a client using a subclass of ObjectWritable as the valueClass which throws exceptions on readFields?

The fault injection stuff in test-fi probably could also be used here., I think we're having comment race conditions here ;-), Ok, Ruyue, I know that you are busy but this is a critical bug. So I worked on the fix.

Here comes a new patch. It has two changes to Ruyue's patch:
1. adds a unit test.
2. do calls.remove(id) only only when the call succeeds., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12431330/hangClient.patch
  against trunk revision 902745.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    -1 javac.  The applied patch generated 1032 javac compiler warnings (more than the trunk's current 1031 warnings).

    +1 findbugs.  The patch does not introduce any new Findbugs warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch-h4.grid.sp2.yahoo.net/290/testReport/
Findbugs warnings: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch-h4.grid.sp2.yahoo.net/290/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Checkstyle results: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch-h4.grid.sp2.yahoo.net/290/artifact/trunk/build/test/checkstyle-errors.html
Console output: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch-h4.grid.sp2.yahoo.net/290/console

This message is automatically generated., +1. The patch looks good. , This patch fixed the javac warnings.

     [exec] +1 overall.
     [exec]
     [exec]     +1 @author.  The patch does not contain any @author tags.
     [exec]
     [exec]     +1 tests included.  The patch appears to include 3 new or modified tests.
     [exec]
     [exec]     +1 javadoc.  The javadoc tool did not generate any warning messages.
     [exec]
     [exec]     +1 javac.  The applied patch does not increase the total number of javac compiler warnings.
     [exec]
     [exec]     +1 findbugs.  The patch does not introduce any new Findbugs warnings.
     [exec]
     [exec]     +1 release audit.  The applied patch does not increase the total number of release audit warnings.
, A patch for branch 0.20., I've just committed this. Thanks Ruyue!, Integrated in Hadoop-Common-trunk-Commit #149 (See [http://hudson.zones.apache.org/hudson/job/Hadoop-Common-trunk-Commit/149/])
    . IPC client bug may cause rpc call hang. Contributed by Ruyue Ma and Hairong Kuang.
, Integrated in Hadoop-Common-trunk #234 (See [http://hudson.zones.apache.org/hudson/job/Hadoop-Common-trunk/234/])
    . IPC client bug may cause rpc call hang. Contributed by Ruyue Ma and Hairong Kuang.
]