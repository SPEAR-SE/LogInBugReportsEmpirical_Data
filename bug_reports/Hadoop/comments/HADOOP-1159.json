[Although this issue can be solved by handling the NPE, this and other such problems, in general, can be handled by a fix for HADOOP-1158., NPE is fixed by HADOOP-1123., This patch makes the exception handler catch Exception, which includes NullPointerException, so that they will be handled correctly. It still requires HADOOP-1158 in the general case., +1, because http://issues.apache.org/jira/secure/attachment/12354286/h1159.patch applied and successfully tested against trunk revision http://svn.apache.org/repos/asf/lucene/hadoop/trunk/522597. Results are at http://lucene.zones.apache.org:8080/hudson/job/Hadoop-Patch, By catching Exception, InterruptedException is also caught so it can no longer be interrupted as descibed in the javadoc. Looks like this needs remedying. Could you supply another patch please?

Also, this looks different to HADOOP-1123 - so both patches need applying, I think. (Please correct me if I'm wrong.), Good catch, Tom. I'll upload a patch shortly., This patch moves the catch of InterruptedException before the catch of Exception., +1, because http://issues.apache.org/jira/secure/attachment/12354356/h1159-2.patch applied and successfully tested against trunk revision http://svn.apache.org/repos/asf/lucene/hadoop/trunk/523072. Results are at http://lucene.zones.apache.org:8080/hudson/job/Hadoop-Patch, Sorry, should have looked at this patch earlier. The problem with this patch is that it handles the client side exception. However, the exception occurs on the server side (TaskTracker.java::doGet). The client actually gets IOException and not the NPE. I don't think the client part needs to change at all., Owen, this patch handles the server side exception as well (it doesn't have the client-side exception handling that you do in your patch). Basically, changed the exception handling in doGet method to also handle NPE. The body of the IOException and NPE handlers are common and so moved to a separate method. , patches need to be merged into 1 patch, This patch merges the two patches (1159.patch and h1159-2.patch)., +1, because http://issues.apache.org/jira/secure/attachment/12354541/1159-merge.patch applied and successfully tested against trunk revision http://svn.apache.org/repos/asf/lucene/hadoop/trunk/523752. Results are at http://lucene.zones.apache.org:8080/hudson/job/Hadoop-Patch, Catching NPEs is generally considered bad form since it hides the problem. In this case it's not clear what's null. Would it be possible to rewrite this patch to be more explicit and check for the null value and handle it appropriately (doing what the catch block does)?

Also, Devaraj said the client only gets the IOException, so is the client patch needed?, Well, the NPE is caught and logged. Since the doGet method doesn't explicitly document throwing NPE (as it does for IOException), it is not rethrown; the task is declared lost (just as in the IOException case). For debugging purposes the logs can be dug.
Regarding the client part, it doesn't harm if the NPE is caught and logged. It potentially improves debugging., By the way, just to point out, in both cases, the entire exception stack trace is logged (on the server side)., I understand that the NPE is logged fully, but NPEs typically indicate a programming problem (which is why APIs don't document them as being thrown, except to indicate a programming problem), so we should strive to fix the underlying problem.

Put another way - which line in TaskTracker throws the NPE? If we know this, then can we check for the condition that causes it to be thrown and then declare the task lost.
, We saw the NPE coming from the call to mapOutputIn.read( ) in the MapOutputServlet.doGet method in TaskTracker.java. Hairong said that HADOOP-1123 should fix the NPE problem in the read method, but am not sure since it is not possible to consistently reproduce this problem. But if the NPE has really been fixed in the read method, I think we don't have to touch the doGet method (since ideally all exceptions to do with read/write should come to us as IOExceptions, which we already handle)., >We saw the NPE coming from the call to mapOutputIn.read( ) in the MapOutputServlet.doGet method in TaskTracker.java. Hairong said
>that HADOOP-1123 should fix the NPE problem in the read method, but am not sure since it is not possible to consistently reproduce
>this problem.

I'm inclined to not apply this patch, but instead see if HADOOP-1123 fixes the problem. If it doesn't then hopefully we can get another case that better characterizes the problem, and allows us to produce a better fix. Unless there's strong objection to this I would mark it as open and not fixed in 0.12.3.

(I also wonder if the logging is hindering the diagnosis of this bug, since there is no stacktrace for the NPE.), Per Tom's suggestion, let's wait too see if this is still a problem., Let's close this for now. Catching NPE is problematic and it looks like HADOOP-1123 is avoiding the problem.]