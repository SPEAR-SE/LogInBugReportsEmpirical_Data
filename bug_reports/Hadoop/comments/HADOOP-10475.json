[{code}
Caused by: java.util.ConcurrentModificationException
	at java.util.HashMap$HashIterator.nextEntry(HashMap.java:894)
	at java.util.HashMap$ValueIterator.next(HashMap.java:922)
	at java.util.Collections$UnmodifiableCollection$1.next(Collections.java:1067)
	at org.apache.hadoop.security.token.delegation.AbstractDelegationTokenSelector.selectToken(AbstractDelegationTokenSelector.java:53)
	at org.apache.hadoop.hdfs.HAUtil.cloneDelegationTokenForLogicalUri(HAUtil.java:260)
	at org.apache.hadoop.hdfs.server.namenode.ha.ConfiguredFailoverProxyProvider.<init>
{code}, Looks like the issue is that AbstractDelegationTokenSelector#selectToken tries to iterate the tokensMap, while another thread tries to add a new token to the UGI. The monitor of UGI cannot prevent this race, since the UserGroupInformation#getTokens returns the whole token map. , Currently we directly get the whole token map through UserGroupInformation#getTokens, and pass it around for works like token selection. Instead of doing this, we may want to provide a different API in UGI class which takes token selector as parameter and process the token selection.

Another quick and simple fix is to use a ConcurrentMap for Credentials#tokenMap., The patch with the simple fix using ConcurrentHashMap. This may bring us some performance penalty., Let's put a comment there to show why {{ConcurrentHashMap}} is used. +1 after address it., Thanks for the quick review, [~wheat9]! Update the patch to address your comments., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12639306/HADOOP-10475.001.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:red}-1 core tests{color}.  The patch failed these unit tests in hadoop-common-project/hadoop-common:

                  org.apache.hadoop.security.TestUserGroupInformation
                  org.apache.hadoop.fs.TestFileSystemCaching

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HADOOP-Build/3765//testReport/
Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/3765//console

This message is automatically generated., Tests failed because ConcurrentHashMap does not support null key. I'm not sure why we want to allow null key for token map. I will post a patch which simply reverts the corresponding change from HADOOP-8726., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12639332/HADOOP-10475.002.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-common-project/hadoop-common.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HADOOP-Build/3768//testReport/
Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/3768//console

This message is automatically generated., Reverting HADOOP-8726 looks good to me. +1, I've committed this to trunk and branch-2. Thanks to Haohui for review!, SUCCESS: Integrated in Hadoop-trunk-Commit #5473 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/5473/])
HADOOP-10475. ConcurrentModificationException in AbstractDelegationTokenSelector.selectToken(). Contributed by Jing Zhao. (jing9: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1585888)
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/Credentials.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/UserGroupInformation.java
, SUCCESS: Integrated in Hadoop-Yarn-trunk #534 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk/534/])
HADOOP-10475. ConcurrentModificationException in AbstractDelegationTokenSelector.selectToken(). Contributed by Jing Zhao. (jing9: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1585888)
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/Credentials.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/UserGroupInformation.java
, FAILURE: Integrated in Hadoop-Mapreduce-trunk #1752 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/1752/])
HADOOP-10475. ConcurrentModificationException in AbstractDelegationTokenSelector.selectToken(). Contributed by Jing Zhao. (jing9: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1585888)
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/Credentials.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/UserGroupInformation.java
, SUCCESS: Integrated in Hadoop-Hdfs-trunk #1726 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/1726/])
HADOOP-10475. ConcurrentModificationException in AbstractDelegationTokenSelector.selectToken(). Contributed by Jing Zhao. (jing9: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1585888)
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/Credentials.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/UserGroupInformation.java
, While the patch in this jira looks ok, I haven't had to chance to see if my HADOOP-8726 was truly reverted.

At any rate, _please don't file and resolve security related tickets within ~6h_ - let alone contemplate reverting jiras w/o input from the assignee.  I have had to fix many delicate issues over the years and can state from personal experience that small changes can cause subtle bugs., bq.  that small changes can cause subtle bugs

Yes, totally agree. Actually this bug was introduced by a small change in HADOOP-8726 (see the change between https://issues.apache.org/jira/secure/attachment/12542820/HADOOP-8726.patch and https://issues.apache.org/jira/secure/attachment/12542928/HADOOP-8726.patch).  We should be more careful when checking in small changes in the future., I don't think this patch fixes the problem.  The ArrayList constructor is also iterating over the values in the token map to make a copy, so it too can encounter the CME.  The race is now smaller but the problem remains., From the UGI point of view, getTokens and addToken are both protected by the UGI's monitor, thus can protect the race in UGI?, No, UGI synchronization is not trustworthy.   Calling {{UGI.getCurrentUser()}} twice will return you two distinct objects which means synchronization is often worthless.  I've contemplated multiple ways to fix this but haven't had time to devote to the task.  In the scope of this jira, you may want to synch on the Subject which is indeed shared between UGI instances., bq. Calling UGI.getCurrentUser() twice will return you two distinct objects which means synchronization is often worthless
Hmm, you're right. I will create a separate jira to track this., I've created HADOOP-10489. Thanks for pointing out the issue, [~daryn]! Please feel free to assign that jira to yourself.]