[The attached patch addresses the issue by changing FileSystem#checkPath to check if the passed-in path does not contain a port but this FS URI does contain a port. In this case, the default port is added to the provided Path's authority before checking for equality of the authorities., {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12585908/HADOOP-9617.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-common-project/hadoop-common.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HADOOP-Build/2596//testReport/
Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/2596//console

This message is automatically generated., I think something else is wrong because I specifically made port/no-port work last I time I was in that code.  Canonicalizing the uri is supposed to handle it.

bq.  Though this is not necessarily incorrect behavior
I believe it's incorrect behavior.  Users should not have to fully qualify path authorities with ports.  It will break customers., [~daryn] -- maybe the reason why your code isn't taking effect is that we explicitly _don't_ call {{NetUtils.getCanonicalUri(...)}} for the case of logical authorities?, bq. I think something else is wrong because I specifically made port/no-port work last I time I was in that code. Canonicalizing the uri is supposed to handle it.

Sorry, not quite sure I follow. What else do you think is wrong?

bq. I believe it's incorrect behavior. Users should not have to fully qualify path authorities with ports. It will break customers.

I think this pattern of using FileSystem with Paths with different authorities is itself incorrect. One should not create a FileSystem object using one authority and then pass Paths to that FileSystem which use another authority. Instead, users should be calling Path#getFileSystem to get the proper FS associated with that Path.

Regardless, this issue is moot because the change was an inadvertent backward incompatible one, which I think we all agree should be fixed., It looks like Todd is right.  DFS isn't canonicalizing as "expected", ie. adding a default port, after the change to prevent attempts to resolve logical names.  I think it may be better to change {{DistributedFileSystem#canonicalizeUri}} to add the default port to a logical uri lacking a port so it conforms to the behavior expected by {{checkPath}}, instead of modifying {{checkPath}} itself?, Wouldn't we have to add that in other places as well, like viewfs, etc? 

Here's another thought: what would happen if {{DistributedFileSystem.getDefaultPort()}} returned 0 if it's a logical URI? Would that fix the issue?, Viewfs appears ok.  It falls back to the default impl of {{canonicalizeUri}} which uses {{if (uri.getPort() == -1 && getDefaultPort() > 0)}} to decide if it should add the default port.  So... I think it might just work if {{DFS#canonicalizeUri}} calls super when it's HA logical, instead of returning the uri as-is.

HA logical URIs are an interesting twist, where the port can be argued to be irrelevant.  However just as context for my concern, there's a distinct possibility that our HA logical uris will be the former primary NN's host address.  If so, it's critical that HA logical uris must have identical behavior to non-HA uris., Thanks a lot for the comments, Daryn and Todd. I took Daryn's suggestion of changing DistributedFileSystem#canonicalizeUri to call FileSystem#canonicalizeUri in the event of a logical URI, which I think should cover all the bases. I also created a new test case to suit, which is restricted to just DistributedFileSystem.

Please have a look., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12586843/HADOOP-9617.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 2 new or modified test files.

      {color:red}-1 javac{color}.  The applied patch generated 1153 javac compiler warnings (more than the trunk's current 1152 warnings).

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-hdfs-project/hadoop-hdfs.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HADOOP-Build/2624//testReport/
Javac warnings: https://builds.apache.org/job/PreCommit-HADOOP-Build/2624//artifact/trunk/patchprocess/diffJavacWarnings.txt
Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/2624//console

This message is automatically generated., The new javac warning is because I'm using a Sun-proprietary API in the test. The test uses an Assume check so that this test will not be run on a non-Sun JDK.

Daryn, Todd - does this look OK to you?, \\
\\
| (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:red}-1{color} | patch |   0m  0s | The patch command could not apply the patch during dryrun. |
\\
\\
|| Subsystem || Report/Notes ||
| Patch URL | http://issues.apache.org/jira/secure/attachment/12586843/HADOOP-9617.patch |
| Optional Tests | javadoc javac unit findbugs checkstyle |
| git revision | trunk / f1a152c |
| Console output | https://builds.apache.org/job/PreCommit-HADOOP-Build/6278/console |


This message was automatically generated., \\
\\
| (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:red}-1{color} | patch |   0m  0s | The patch command could not apply the patch during dryrun. |
\\
\\
|| Subsystem || Report/Notes ||
| Patch URL | http://issues.apache.org/jira/secure/attachment/12586843/HADOOP-9617.patch |
| Optional Tests | javadoc javac unit findbugs checkstyle |
| git revision | trunk / f1a152c |
| Console output | https://builds.apache.org/job/PreCommit-HADOOP-Build/6290/console |


This message was automatically generated.]