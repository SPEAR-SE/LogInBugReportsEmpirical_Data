[Thank you for the bug report, Ian.  Fortunately, this function is generally only called during one-time initialization in a Hadoop process, so that lessens the severity of the leak.  We can still fix it though.

Our native codebase is in C, so we'll have to stick with doing our own resource management instead of the smart pointers., This change makes sure that we de-allocate memory on the way out. No tests were modified since it is a very minor change that is already covered by existing tests., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12696315/HADOOP-11526.001.patch
  against trunk revision b73e776.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:red}-1 core tests{color}.  The patch failed these unit tests in hadoop-common-project/hadoop-common:

                  org.apache.hadoop.ha.TestZKFailoverController

Test results: https://builds.apache.org/job/PreCommit-HADOOP-Build/5572//testReport/
Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/5572//console

This message is automatically generated., looks like this test failure is not related to code change:
Code change avoids a memory leak in native code and should not effect this code path. This is probably a race condition in tests.

Error Message

Address already in use
Stacktrace

java.net.BindException: Address already in use
	at sun.nio.ch.Net.bind0(Native Method)
	at sun.nio.ch.Net.bind(Net.java:444)
	at sun.nio.ch.Net.bind(Net.java:436)
	at sun.nio.ch.ServerSocketChannelImpl.bind(ServerSocketChannelImpl.java:214), Hi Anu.  Thank you for taking care of this.  The patch looks good.  However, I also noticed that we have the same bug in both Bzip2Compressor.c and Bzip2Decompressor.c.  Could you please fix it in both places?  The change will be very similar to what you've already done in this patch.  Thank you., Thanks for catching this Chris. I also read thru the rest of code in that directory and it looks we have one more memory leak. I have fixed it in the code. I confirmed the leak by writing a sample program and then running it under valgrind.

Here is my test program:
#include <bzlib.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

void main()
{
        bz_stream *stream = (bz_stream *) malloc(sizeof(bz_stream));
        memset((void *)stream, 0, sizeof(bz_stream));
        BZ2_bzCompressInit(stream,9,0,0);
        BZ2_bzCompressEnd(stream);
        
}

if I run this run under valgrind, then valgrind complains about 80 bytes which are missing. The stream that we alloc has to be freed. That fix is also in this change.

, {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12696628/HADOOP-11526.002.patch
  against trunk revision 43d5cae.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-common-project/hadoop-common.

Test results: https://builds.apache.org/job/PreCommit-HADOOP-Build/5589//testReport/
Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/5589//console

This message is automatically generated., +1 for the patch.  I plan to commit this later today.

bq. -1 tests included. The patch doesn't appear to include any new or modified tests.

This patch is cleaning a memory leak, and the code paths are covered by existing tests., I have committed this to trunk and branch-2.  Ian, thank you for reporting the bug.  Anu, thank you for contributing the fix., FAILURE: Integrated in Hadoop-trunk-Commit #7033 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/7033/])
HADOOP-11526. Memory leak in Bzip2Compressor and Bzip2Decompressor. Contributed by Anu Engineer. (cnauroth: rev 6583ad148be5447eb2f086a2c6c7006631dff4da)
* hadoop-common-project/hadoop-common/src/main/native/src/org/apache/hadoop/io/compress/bzip2/Bzip2Compressor.c
* hadoop-common-project/hadoop-common/src/main/native/src/org/apache/hadoop/io/compress/bzip2/Bzip2Decompressor.c
* hadoop-common-project/hadoop-common/CHANGES.txt
, same JDK tools error , that we have seen earlier

[ERROR] Artifact: jdk.tools:jdk.tools:jar:1.7 has no file.
[ERROR] Artifact: org.xerial.snappy:snappy-java:jar:1.0.4.1 has no file.
[ERROR] Artifact: xerces:xercesImpl:jar:2.9.1 has no file.
[ERROR] Artifact: xml-apis:xml-apis:jar:1.3.04 has no file.
[ERROR] Artifact: xmlenc:xmlenc:jar:0.52 has no file., FAILURE: Integrated in Hadoop-Yarn-trunk-Java8 #96 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk-Java8/96/])
HADOOP-11526. Memory leak in Bzip2Compressor and Bzip2Decompressor. Contributed by Anu Engineer. (cnauroth: rev 6583ad148be5447eb2f086a2c6c7006631dff4da)
* hadoop-common-project/hadoop-common/src/main/native/src/org/apache/hadoop/io/compress/bzip2/Bzip2Compressor.c
* hadoop-common-project/hadoop-common/CHANGES.txt
* hadoop-common-project/hadoop-common/src/main/native/src/org/apache/hadoop/io/compress/bzip2/Bzip2Decompressor.c
, FAILURE: Integrated in Hadoop-Yarn-trunk #830 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk/830/])
HADOOP-11526. Memory leak in Bzip2Compressor and Bzip2Decompressor. Contributed by Anu Engineer. (cnauroth: rev 6583ad148be5447eb2f086a2c6c7006631dff4da)
* hadoop-common-project/hadoop-common/src/main/native/src/org/apache/hadoop/io/compress/bzip2/Bzip2Compressor.c
* hadoop-common-project/hadoop-common/src/main/native/src/org/apache/hadoop/io/compress/bzip2/Bzip2Decompressor.c
* hadoop-common-project/hadoop-common/CHANGES.txt
, FAILURE: Integrated in Hadoop-Hdfs-trunk-Java8 #93 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk-Java8/93/])
HADOOP-11526. Memory leak in Bzip2Compressor and Bzip2Decompressor. Contributed by Anu Engineer. (cnauroth: rev 6583ad148be5447eb2f086a2c6c7006631dff4da)
* hadoop-common-project/hadoop-common/src/main/native/src/org/apache/hadoop/io/compress/bzip2/Bzip2Decompressor.c
* hadoop-common-project/hadoop-common/src/main/native/src/org/apache/hadoop/io/compress/bzip2/Bzip2Compressor.c
* hadoop-common-project/hadoop-common/CHANGES.txt
, SUCCESS: Integrated in Hadoop-Hdfs-trunk #2028 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/2028/])
HADOOP-11526. Memory leak in Bzip2Compressor and Bzip2Decompressor. Contributed by Anu Engineer. (cnauroth: rev 6583ad148be5447eb2f086a2c6c7006631dff4da)
* hadoop-common-project/hadoop-common/CHANGES.txt
* hadoop-common-project/hadoop-common/src/main/native/src/org/apache/hadoop/io/compress/bzip2/Bzip2Compressor.c
* hadoop-common-project/hadoop-common/src/main/native/src/org/apache/hadoop/io/compress/bzip2/Bzip2Decompressor.c
, FAILURE: Integrated in Hadoop-Mapreduce-trunk-Java8 #97 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk-Java8/97/])
HADOOP-11526. Memory leak in Bzip2Compressor and Bzip2Decompressor. Contributed by Anu Engineer. (cnauroth: rev 6583ad148be5447eb2f086a2c6c7006631dff4da)
* hadoop-common-project/hadoop-common/src/main/native/src/org/apache/hadoop/io/compress/bzip2/Bzip2Compressor.c
* hadoop-common-project/hadoop-common/CHANGES.txt
* hadoop-common-project/hadoop-common/src/main/native/src/org/apache/hadoop/io/compress/bzip2/Bzip2Decompressor.c
, FAILURE: Integrated in Hadoop-Mapreduce-trunk #2047 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/2047/])
HADOOP-11526. Memory leak in Bzip2Compressor and Bzip2Decompressor. Contributed by Anu Engineer. (cnauroth: rev 6583ad148be5447eb2f086a2c6c7006631dff4da)
* hadoop-common-project/hadoop-common/src/main/native/src/org/apache/hadoop/io/compress/bzip2/Bzip2Decompressor.c
* hadoop-common-project/hadoop-common/CHANGES.txt
* hadoop-common-project/hadoop-common/src/main/native/src/org/apache/hadoop/io/compress/bzip2/Bzip2Compressor.c
, Question on the implications of this bug...
Given you open a couple of hundreds bzip compressed files, all mostly below 1MB, could that crash an 2.5 GB jvm with an OutOfMemory ?, Hello [~oae].  This bug would have been a small one-time leak per process during codec initialization.  There would not have been an additional leak per file.  I doubt the effect of this leak would have been noticeable in any realistic usage scenario.]