[What should it do?  I always thought it was an error to call any method on a stream after it is closed.  NullPointerException isn't the most friendly.  Perhaps it should be IllegalOperationException.  Is that what you want?, I think it should throw an IOException., > I think it should throw an IOException.

Hmm.  Maybe.  I think runtime exceptions are appropriate when folks simply use APIs incorrectly, whereas IOException are more for unexpected stuff having to do with external state.  This seems more like an ArrayOutOfBounds or an IllegalArgumentException to me than something that application logic might try to handle, like an IOException., BufferedInputStream.available() throws an IOException (this is closest to getPos()). And some or all of the other calls like read(), seek() throw IOException if the stream is closed. In fact, if getPos() used BufferedInputStream.avaiable() instead of '(cur - pos)' in the calculation, it would have resulted in an IOException., I second everything Raghu said! I was going to say exactly the same, but I see that he has beat me to it., Fine.  I don't really care that strongly what exception is thrown., I do not think this still applies. While an old post like http://badcheese.com/?q=node/80 tells me there used to be a Buffer subclass in FSInputDataStream that threw this before, it does not really exist anymore.

If I load an FSDataInputStream via a LocalFileSystem#open(â€¦) in a test case and wrap it to a BufferedInputStream, close the latter and issue BufferedInputStream#available, it throws a stream-closed IO exception appropriately. There is no BufferedInputStream#getPos, however.

Along the same lines, DFSInputStream recently added a closed-so-ioexception in itself to protect against post-closed seeks, but there the closes were managed directly. HDFS-1615.

This one looks fixed, meanwhile, due to all the refactoring since '07. Do reopen if I've got all of this wrong., This one looks irrelevant now. Please see my earlier comment. Do feel free to reopen if it still applies after all these years of refactoring though.]