[This high CPU load was caused by not enough heap size for the jvm., The error messages I initially copy&pasted are probably not directly related to this problem.
Once I increased the HADOOP_HEAPSIZE, this high CPU load problem went away.

Raghu pointed out 
"If increase of 500mb fixed the issue, wouldn't the main suspect be Java  GC?"

"attaching gdb to the pid shows jvm is handling "failed allocation" most of the time. I don't know if it is possible to check java stack for a given pid. I tried attaching multiple times and stack looks pretty much the same each time: "

#0  0xf771bea8 in instanceKlass::oop_adjust_pointers ()
   from libjvm.so
#1  0xf7937999 in PSMarkSweepDecorator::adjust_pointers ()
   from libjvm.so
#2  0xf79383af in PSOldGen::adjust_pointers () from libjvm.so
#3  0xf79370d6 in PSMarkSweep::mark_sweep_phase3 ()
   from libjvm.so
#4  0xf7936184 in PSMarkSweep::invoke_no_policy ()
   from libjvm.so
#5  0xf7940e7d in PSScavenge::invoke () from libjvm.so
#6  0xf790b40f in ParallelScavengeHeap::failed_mem_allocate ()
   from libjvm.so
#7  0xf79dfa6f in VM_ParallelGCFailedAllocation::doit ()
   from libjvm.so
#8  0xf79df466 in VM_Operation::evaluate () from libjvm.so
#9  0xf79dea77 in VMThread::evaluate_operation ()
   from libjvm.so
#10 0xf79dece5 in VMThread::loop () from libjvm.so
#11 0xf79de850 in VMThread::run () fromlibjvm.so
#12 0xf78fe338 in _start () from libjvm.so
#13 0xf7fd4341 in start_thread () from /lib/tls/libpthread.so.0
#14 0xf7f686fe in clone () from /lib/tls/libc.so.6 



, For the records, the namenode been stable after applying Raghu's directio-memory leak fix.  , Investigation revealed that the Namenode CPU usage was caused by lack of heap space. Reducing memory consumption in the Namenode is partially addressed by HADOOP-803. More improvements will follow.]