[It appears the cause is that the following test ({{FileContextMainOperationsBaseTest#testGetFileContext1}}) is using the default configuration rather than the ADLS test specific config {{hadoop-azure-datalake/src/test/resources/contract-test-options.xml}}.
{code}
  @Test
  /*
   * Test method
   *  org.apache.hadoop.fs.FileContext.getFileContext(AbstractFileSystem)
   */
  public void testGetFileContext1() throws IOException {
    final Path rootPath = getTestRootPath(fc, "test");
    AbstractFileSystem asf = fc.getDefaultFileSystem();
    // create FileContext using the protected #getFileContext(1) method:
    FileContext fc2 = FileContext.getFileContext(asf); //<<<< this uses the default config
    // Now just check that this context can do something reasonable:
    final Path path = new Path(rootPath, "zoo");
    FSDataOutputStream out = fc2.create(path, EnumSet.of(CREATE),
        Options.CreateOpts.createParent());
    out.close();
    Path pathResolved = fc2.resolvePath(path);
    assertEquals(pathResolved.toUri().getPath(), path.toUri().getPath());
  }
{code}

The default config does not have {{dfs.adls.oauth2.access.token.provider.type}} defined., the setup of the test should be setting up the FC to have ADL as that default FS; if it's failing then look at the test setup., Hi [~steve_l], thanks a lot for your response.

{{TestAdlFileContextMainOperationsLive}} does setup the FC to use ADL as default FS:
{code}
public class TestAdlFileContextMainOperationsLive
    extends FileContextMainOperationsBaseTest {
...
  @Override
  public void setUp() throws Exception {
    Configuration conf = AdlStorageConfiguration.getConfiguration();
    String fileSystem = conf.get(KEY_FILE_SYSTEM);
    if (fileSystem == null || fileSystem.trim().length() == 0) {
      throw new Exception("Default file system not configured.");
    }
    URI uri = new URI(fileSystem);
    FileSystem fs = AdlStorageConfiguration.createStorageConnector();
    fc = FileContext.getFileContext(
        new DelegateToFileSystem(uri, fs, conf, fs.getScheme(), false) {
        }, conf);
    super.setUp();
  }
{code}

However the test that's failing is creating a second FC, with default config:
{code}
  @Test
  /*
   * Test method
   *  org.apache.hadoop.fs.FileContext.getFileContext(AbstractFileSystem)
   */
  public void testGetFileContext1() throws IOException {
    final Path rootPath = getTestRootPath(fc, "test");
    AbstractFileSystem asf = fc.getDefaultFileSystem();
    // create FileContext using the protected #getFileContext(1) method:
    ////<<<<<<<<<<<<<<
    FileContext fc2 = FileContext.getFileContext(asf); ////<<<<<<<<<<<<<< 2nd FC created
    ////>>>>>>>>>>>>>>
    // Now just check that this context can do something reasonable:
    final Path path = new Path(rootPath, "zoo");
    FSDataOutputStream out = fc2.create(path, EnumSet.of(CREATE),
        Options.CreateOpts.createParent());
    out.close();
    Path pathResolved = fc2.resolvePath(path);
    assertEquals(pathResolved.toUri().getPath(), path.toUri().getPath());
  }
{code}

{{FileContext.getFileContext()}} uses the default configuration:
{code}
  /**
   * Create a FileContext for specified file system using the default config.
   * 
   * @param defaultFS
   * @return a FileContext with the specified AbstractFileSystem
   *                 as the default FS.
   */
  protected static FileContext getFileContext(
    final AbstractFileSystem defaultFS) {
    return getFileContext(defaultFS, new Configuration());
  }
{code}

It looks like {{TestAdlFileContextMainOperationsLive#testGetFileContext1}} should be using {{AdlStorageConfiguration.getConfiguration()}} to create {{fc2}}. Or maybe {{testGetFileContext1}} should be omitted as the protected API {{FileContext#getFileContext(final AbstractFileSystem defaultFS)}} does not appear to be used anywhere else but this test case.

The rest of {{TestAdlFileContextMainOperationsLive}} and all other {{hadoop-azure-datalake}} live tests passes successfully during my test.]