[The attached patch fixes the issue for HBASE-6581 and should not have side-effect on any other HttpServer consumers., [~echarles], the first approach has been deprecated for a while. These methods will be removed from trunk shortly. Can you please fix HBase instead?, Thx [~wheat9] for the feedback.

Although HDFS-5760-1.patch works well for hbase, it breaks hadoop.

I checked the o.a.h.h.u.InfoServer class, and rather than using inheritance, we could use composition, but we would need additional getters (will submit a patch proposal - see method fixupLogsServletLocation in [1])
[1] https://github.com/apache/hbase/blob/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/util/InfoServer.java#L68 
, Additional accessors and also parameter in the builder to make it more friendly for HBASE-10336 and any other consumer willing to run with a webapp located somewhere else than the harcoded webapps path., btw, don't know why I created under HDFS. This is a common component, so it should be a HADOOP jira., [~echarles] Do you mean 'Hadoop Common'?  If so, I can move it there for you if you do not have credential.

+1 on patch from me., [~stack] yes, please move it to Hadoop Common, I don't have the credentials. Thx., Done sir., That's cool [~stack], {code}
+    private String webapps = WEBAPPS;
+
+
+    public Builder setWebapps(String webapps) {
+      this.webapps = webapps;
+      return this;
+    }
+
+  
+  public String getWebAppsPath(String appName) throws FileNotFoundException {
+      return getWebAppsPath(this.webapps, appName);
+  }
 
{code}

It seems to me that it might not be the right fix. We probably should add a new property {{appDir}} in the builder and deprecate {{name}}.

{code}
+  public Map<Context, Boolean> getDefaultContexts() {
+      return this.defaultContexts;
+  }
+
+  public Server getWebServer() {
+      return this.webServer;
+  }
{code}

These methods are not supposed to be publicly accessible. Looking at the hbase code, it seems what you want to do is to override the log servlet. If this is the case, calling {{addServlet}} on the same path probably can do the trick.
, [~wheat9] HADOOP-10232-3.patch takes your comments into account. The logDir option is needed for hbase (just adding a servlet is not enough)., [~echarles] The +  protected String logDir; is needed for the logs servlet?

Would your life be easier Mr Eric Charles if we just let go of our use of hadoop's jetty and servlets (we could copy the few we need local).  Loser coupling, etc., Otherwise patch lgtm., [~stack] yes, the logDir is needed to do the job of the InfoServer.java#fixupLogsServletLocation. With that logDir conf, hbase's life is easier than ever :) But yes, decoupling the hbase-jetty stuff from hadoop may be something to evaluate. but we would have to redevelop around the same, with ssl support... If this jira finally goes to trunk, it will be nice. Also, decoupling can be risky: I already had issues with mixed mortaby (6.x) and eclipe (9.x) environments, so keeping in sync will avoid clashes., bq.  I already had issues with mixed mortaby (6.x) and eclipe (9.x) environments, so keeping in sync will avoid clashes.

Hmm... yeah.  We depend on hadoop and since its poms include the all the jars of the world (caveat [~stevel@apache.org] effort), as a downstreamer, we could run into 'interesting' conflcts.   Lets hold with the devil we know as you suggest., bq. Would your life be easier Mr Eric Charles if we just let go of our use of hadoop's jetty and servlets (we could copy the few we need local). Loser coupling, etc.

+1 for the decoupling. The class is an internal class, it is never intended to be used outside of HDFS and YARN. You can copy the class to the hbase repository and be done with it.

In the near term it looks like that we might revisit the implementation of this class and change the API again, so this type of jira might happen over and over again., Sounds like we can close this and copy the code... No sense to further push if hadoop doesn't commit to provide the http common services.
Still waiting one day for any further comment before closing this jira and copying the class.

[~stack] between all jars of the world and all the issues of it, the wise man has to choose. Btw, any link on [~stevel@apache.org] effort, wondering if it can help the hbase-shim?
, bq. +1 for the decoupling. The class is an internal class, it is never intended to be used outside of HDFS and YARN...

From HttpServer class branch-2 (and trunk has the same):

{code}
@InterfaceAudience.LimitedPrivate({"HDFS", "MapReduce", "HBase"})
@InterfaceStability.Evolving
public class HttpServer implements FilterContainer {
{code}

HBase has been ordained limited private (YARN is only in the list via proxy).

If the choice is between this small patch here and an all day maven hell transitive include weeding project down the road -- that may or may not succeed -- I'd vote add this patch now and meantime we'll work on decoupling (we'll circle back and remove our selves from the LimitedPrivate list should we prevail).  Thanks., I added the annotation in 2.2 just to indicate that HBase does use this class. The class does not intend to support users other than HDFS / MapReduce.

I don't quite follow the value of putting in this patch right now. Indeed this patch can make Hbase compile against trunk right now, but I believe that the compatibility will be broken pretty soon (at least I plan to revisit this class in near term). Therefore I would suggest to start the work of decoupling the class today., bq. I added the annotation in 2.2 just to indicate that HBase does use this class.

If I do git blame, it says I added the annotation, not you.

{code}
bfc1e08c src/java/org/apache/hadoop/http/HttpServer.java                                          (Michael Stack           2011-06-02 18:54:40 +0000   93) @InterfaceAudience.LimitedPrivate({"HDFS", "MapReduce", "HBase"})
bfc1e08c src/java/org/apache/hadoop/http/HttpServer.java                                          (Michael Stack           2011-06-02 18:54:40 +0000   94) @InterfaceStability.Evolving
{code}

bq. I don't quite follow the value of putting in this patch right now.

The answer to the above is in your next sentence...

bq.  Indeed this patch can make Hbase compile against trunk right now

On the below....

bq. ...but I believe that the compatibility will be broken pretty soon (at least I plan to revisit this class in near term).

... is there a JIRA we can consult where what you are thinking is outlined?

bq. Therefore I would suggest to start the work of decoupling the class today.

Please tell us more what you are thinking regards refactoring.   We'd like to avoid being in a situation where say, we have jetty9 and jetty6 and all their dependencies trying to duke it out on the one downstream CLASSPATH (or poms full of crafted includes/excludes hard won after spending hours figuring what combination 'works').

Thanks.

, Jetty 6 has been definitely a pain so far. My preliminary plan is to move away from Jetty 6 towards netty. It means a much smaller set of dependency. However, many servlets and the HttpServer has to be revisited.

In this case it would be almost impossible to maintain any API compatibilities., Thx git to tell us the truth.
My 2 cents would be going to jetty9 (spdy, comet, websocket...).
Netty to develop a webapp would be a pain (no filter. no jsp...) even with their nice HTTP handlers. Keep netty for RPC communication. 
To be discussed on another JIRA, so will close and fork the HTTP part to HBase., Just for clarification, I confused myself with the annotation that I added for {{AbstractDelegationTokenSecretManager}} and the one of {{HttpServer}}.

Sorry for the confusion.]