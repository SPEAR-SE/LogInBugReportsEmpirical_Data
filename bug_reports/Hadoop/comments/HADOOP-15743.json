[Out of the box, throughput under production load was ~1-2k ops/sec with such a high failure rate that production incidents robbed over a week of my life.  The cited settings increase the throughput to an "acceptable" yet dismal ~5k ops/sec.  At least it's stable.  Ie. No client failures and excessive latency that caused client read timeouts.  That's embarrassing compared to the NN which is capable of _hundreds of thousands_ of open ops/sec.

We directly use the 2.8 KMS war (not embedded) with jetty 9.  I don't have the cycles, so I'd suggest someone translate the configuration into HttpServer2 and continue to refine the tunings.

 

 , Thanks [~daryn] for the good summary and thanks for your week of life. :)

FWIW we have also found JDK8 121+ (or said to be jdk9, untested) is more efficient in doing SSLHandShakes, mostly from https://bugs.openjdk.java.net/browse/JDK-8133070 and https://bugs.openjdk.java.net/browse/JDK-8129988., Thanks [~daryn]. For the most part, your observation is consistent with what we observed in Hadoop 3 (where KMS was ported using Jetty) although we didn't dive into that deep and wide. IMHO, the biggest problem is KMS client doesn't reuse a connection. How about designing a connection reuse mechanism that's similar to Hadoop IPC? i.e. reuse an idle connection that belongs to the same user?, Yes, there's a dumb java bug that prevents connection reuse which causes the client to have multiple defunct connections open until the idle timeout closes the connections.

I have a patch that allows the client to reuse connections.  Will try to dig it up today.]