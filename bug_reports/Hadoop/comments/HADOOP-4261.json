[One solution i could see is JobClient should not do setupJob, even setupJob should also be done as a seperate task (InitTask), similar to cleanup task. Then, after the completion of 'job initialization', setup will be done by the InitTask. If initializations fails, there will be no setup or cleanup task launched., Attaching patch thats modifies committer.setupJob() as a separate task similar to cleanupTask.

* With the patch, JobInProgress.initTasks() initializes all the tips (including setup and cleanup tips). SetupTask will be launched when the job is in PREP state, after the tasks get initialized. Once the setupTask completes, the Job is moved to RUNNING state. 
* JobTracker first iterates over the jobs for cleanup tasks, then setup tasks. If there are no cleanup and setup tasks, it calls taskScheduler.assignTasks() for maps and reduces.
* This task is logged in JobHistory with SETUP as TASK_TYPE. 
* The Job web UI and History web UI is modified to add setup task. The UI change is similar to the cleanup task UI. 
* Updated Javadoc and documentation

, Few comments w.r.t job-recovery
1) Upon restart, the task-completion-events/task-reports for the setup tasks should also match.
2) It would make more sense to call the job run-state as {{SETUP}} when {{logInited()}} is invoked. While recovering, check if the SETUP state is reached before calling {{init()}}.
3) Check if {{JobInProgress.obtainSetupTask()}} can reuse {{JobInProgress.addRunningTaskToTIP()}}.
4) I think {{JobInProgress.canLaunchSetupTask()}} can also be written as
{code}
private synchronized boolean canLaunchSetupTask() {
    // check if the job is in PREP, initialized and not setup
    return status.getRunState() == JobStatus.PREP && tasksInited.get() && !launchedSetup;
}
{code}
5) I dont see any code that deals with setup task in job-recovery i.e recovery-manager. Just make sure that the effect of scheduling setup tasks before restart is same as the effect of replaying it from history. I assume that when the JIP is given a task-attempt update, it figures out if the task if setup or not. Ideally the way setup is launched from a recvory-manager should mimic the way its invoked from the real(live) jobtracker., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12391115/patch-4261.txt
  against trunk revision 699676.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 6 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs warnings.

    +1 Eclipse classpath. The patch retains Eclipse classpath integrity.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/3390/testReport/
Findbugs warnings: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/3390/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Checkstyle results: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/3390/artifact/trunk/build/test/checkstyle-errors.html
Console output: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/3390/console

This message is automatically generated., Modified TestJobTrackerRestart to test setuptask Reports. 
Modified ObtainSetup/CleanupTask to use addRunningTaskToTIP()
Changed canLaunchSetupTask's implementation as suggested by Amar

bq. It would make more sense to call the job run-state as SETUP when logInited() is invoked
This would not be in consistent with JobStatus. Adding SETUP as JobStatus is not necessary.

bq.I dont see any code that deals with setup task in job-recovery i.e recovery-manager
There is no specific change required. Change in checkAndInit method will do.

, -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12391129/patch-4261.txt
  against trunk revision 700163.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 9 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs warnings.

    +1 Eclipse classpath. The patch retains Eclipse classpath integrity.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/3393/testReport/
Findbugs warnings: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/3393/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Checkstyle results: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/3393/artifact/trunk/build/test/checkstyle-errors.html
Console output: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/3393/console

This message is automatically generated., All core and contrib tests passed on my machine., Test result for the failed tests on hudson:
{noformat}
    [junit] Running org.apache.hadoop.mapred.TestJobQueueInformation
    [junit] Tests run: 1, Failures: 0, Errors: 0, Time elapsed: 69.908 sec
    [junit] Running org.apache.hadoop.mapred.TestJobTrackerRestartWithLostTracker
    [junit] Tests run: 1, Failures: 0, Errors: 0, Time elapsed: 265.076 sec
{noformat}, Found that check for tip.isSetupTask() got missed with isMapTask check in JobTracker., Uploading patch incorporating the the above fix and review comments from Sharad and Amar., test-patch result:
{noformat}
     [exec] +1 overall.
     [exec]
     [exec]     +1 @author.  The patch does not contain any @author tags.
     [exec]
     [exec]     +1 tests included.  The patch appears to include 9 new or modified tests.
     [exec]
     [exec]     +1 javadoc.  The javadoc tool did not generate any warning messages.
     [exec]
     [exec]     +1 javac.  The applied patch does not increase the total number of javac compiler warnings.
     [exec]
     [exec]     +1 findbugs.  The patch does not introduce any new Findbugs warnings.
     [exec]
     [exec]     +1 Eclipse classpath. The patch retains Eclipse classpath integrity.
     [exec]
{noformat}
All core and contrib tests passed on machine. Ran Sort benchmark on the cluster., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12391267/patch-4261.txt
  against trunk revision 700923.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 9 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs warnings.

    +1 Eclipse classpath. The patch retains Eclipse classpath integrity.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/3419/testReport/
Findbugs warnings: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/3419/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Checkstyle results: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/3419/artifact/trunk/build/test/checkstyle-errors.html
Console output: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/3419/console

This message is automatically generated., Test failure is not related to the patch. I don't see the failure on my machine., +1, looks fine to me from the recovery point of view. One general comment
- Can we have a enum in {{JobHistory}} (say {{TaskType}}) and pass {{TaskType}} as a parameter instead of {{isCleanup}}, {{isSetup}} etc. Can you check if its possible? The reason is in future we can simply grow the enum and make appropriate calls. , bq. Can we have a enum in JobHistory (say TaskType) and pass TaskType as a parameter instead of isCleanup, isSetup etc.
I feel this should be done as part of HADOOP-4122, because now the code is in tact with existing apis. Having separate enum for TaskType will break the existing checks such as Task.get(Keys.TASK_TYPE).equals(Values.Map().name()), because they have to be modifed for the new enum.  *And also I strongly feel HADOOP-4122 should be done in 0.19*, because re-factoring the code breaks many things. So, the sooner the better., bq. Having separate enum for TaskType will break the existing checks such as Task.get(Keys.TASK_TYPE).equals(Values.Map().name()
What I meant was pass enum instead of booleans. What goes in the jobhistory remains same and hence what gets retrieved also remains same. Something like
{code}
// before
public static void logStarted(TaskAttemptID taskAttemptId, long startTime, String trackerName, int httpPort,  boolean isCleanup, boolean isSetup){}
//after
public static void logStarted(TaskAttemptID taskAttemptId, long startTime, String trackerName, int httpPort,  TaskType type){}
{code}
and 
{code}
// before
isCleanup ? Values.CLEANUP.name() :  isSetup ? Values.SETUP.name() : Values.MAP.name(),
//after
type.name()
{code}

But you could also do something like
{code}
// before
public static void logStarted(TaskAttemptID taskAttemptId, long startTime, String trackerName, int httpPort,  String taskType){}
{code}
and pass appropriate tasktype from JIP.

But if this turns out to be a big change then we can do it in HADOOP-4122 as Amareshwari suggested., Passing taskType as String should not break any. Cancelling patch to incorporate Amar's comments. , Patch after incorporating review comments., +1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12391515/patch-4261.txt
  against trunk revision 701476.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 9 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs warnings.

    +1 Eclipse classpath. The patch retains Eclipse classpath integrity.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/3434/testReport/
Findbugs warnings: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/3434/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Checkstyle results: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/3434/artifact/trunk/build/test/checkstyle-errors.html
Console output: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/3434/console

This message is automatically generated., I just committed this. Thanks, Amareshwari!, Integrated in Hadoop-trunk #626 (See [http://hudson.zones.apache.org/hudson/job/Hadoop-trunk/626/])
    . Adds a setup task for jobs. This is required so that we don't setup jobs that haven't been inited yet (since init could lead to job failure). Only after the init has successfully happened do we launch the setupJob task. Contributed by Amareshwari Sriramadasu.
, A setup task (for doing OutputCommitter.setupJob()) will be launched, when the job is in PREP state and after initializing tasks. Once the setup task completes, the job will be moved to RUNNING state.]