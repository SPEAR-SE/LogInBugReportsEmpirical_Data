[This patch fixes the c++ vint serialization.
In addition it fixes issues in generated C++ code:
Getters and setters for map were not correctly generated., Looks good, but produces some warnings when compiled with -Wall. It'd be better if these were fixed., Fixed  warnings with -Wall. (In fact there were two real bugs in deserialization of buffer in XML and CSV, that -Wall pointed out.), Looks good.

+1, 
Scanning this patch I noticed a typo in an error message in a couple of files: csvarchive.cc and xmlarchive.cc both contain multiple occurrences of "Errror".

I suppose it is a bit late to question the format of negative Vints (again)?  There seems to be no necessity to do the ones-complement.  We could instead store bytes of negative ints up to the point where all the more-significant bytes are 255.  This would make the code a bit simpler and faster.

E.g. the current Java code for writing a Vint is this:

  public static void writeVLong(DataOutput stream, long i) throws IOException {
      if (i >= -112 && i <= 127) {
          stream.writeByte((byte)i);
          return;
      }
      int len = -112;
      if (i < 0) {
          i ^= -1L; // take one's complement'
          len = -120;
      }
      long tmp = i;
      while (tmp != 0) {
          tmp = tmp >> 8;
          len--;
      }
      stream.writeByte((byte)len);
      len = (len < -120) ? -(len + 120) : -(len + 112);
      for (int idx = len; idx != 0; idx--) {
          int shiftbits = (idx - 1) * 8;
          long mask = 0xFFL << shiftbits;
          stream.writeByte((byte)((i & mask) >> shiftbits));
      }
  }

It could be:

  public static void writeVLong(DataOutput stream, long i) throws IOException {
      if (i >= -120 && i <= 127) {
          stream.writeByte((byte)i);
          return;
      }
      int len = -120;
      long done = ( i < 0 ? -1L : 0L);
      long tmp = i;
      while (tmp != done) {
          tmp = tmp >> 8;
          len--;
      }
      stream.writeByte((byte)len);
      len += 120;
      for (int idx = len; idx != 0; idx--) {
          int shiftbits = (idx - 1) * 8;
          long mask = 0xFFL << shiftbits;
          stream.writeByte((byte)((i & mask) >> shiftbits));
      }
  }




, 
Never mind.  That code is wrong.  (Consider 128.)  Although there might be a simpler fix than the one chosen...  it is probably not worth worrying about.  , I've just committed this. Thanks Milind!]