[suggestion of code fix.






svn diff
Index: src/main/java/org/apache/hadoop/fs/ftp/FTPFileSystem.java
===================================================================
--- src/main/java/org/apache/hadoop/fs/ftp/FTPFileSystem.java	(revision 1453599)
+++ src/main/java/org/apache/hadoop/fs/ftp/FTPFileSystem.java	(working copy)
@@ -380,7 +380,7 @@
     FTPFile[] ftpFiles = client.listFiles(absolute.toUri().getPath());
     FileStatus[] fileStats = new FileStatus[ftpFiles.length];
     for (int i = 0; i < ftpFiles.length; i++) {
-      fileStats[i] = getFileStatus(ftpFiles[i], absolute);
+      fileStats[i] = getFileStatus(ftpFiles[i], absolute, workDir);
     }
     return fileStats;
   }
@@ -422,7 +422,7 @@
     if (ftpFiles != null) {
       for (FTPFile ftpFile : ftpFiles) {
         if (ftpFile.getName().equals(file.getName())) { // file found in dir
-          fileStat = getFileStatus(ftpFile, parentPath);
+          fileStat = getFileStatus(ftpFile, parentPath, workDir);
           break;
         }
       }
@@ -442,7 +442,7 @@
    * @param parentPath
    * @return FileStatus
    */
-  private FileStatus getFileStatus(FTPFile ftpFile, Path parentPath) {
+  private FileStatus getFileStatus(FTPFile ftpFile, Path parentPath, Path workDir) {
     long length = ftpFile.getSize();
     boolean isDir = ftpFile.isDirectory();
     int blockReplication = 1;
@@ -456,7 +456,7 @@
     String group = ftpFile.getGroup();
     Path filePath = new Path(parentPath, ftpFile.getName());
     return new FileStatus(length, isDir, blockReplication, blockSize, modTime,
-        accessTime, permission, user, group, filePath.makeQualified(this));
+        accessTime, permission, user, group, filePath.makeQualified(this.getUri(), workDir));
   }
, James, just posting the diff as attachment is sufficient. Also when you wan to post code snippets, you could surround it with \{code\}\{code\} to format it as code. See for details - https://issues.apache.org/jira/secure/WikiRendererHelpAction.jspa?section=texteffects (or click the question mark below the comment box), {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12572490/HADOOP-9377.diff
  against trunk revision .

    {color:red}-1 patch{color}.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/2286//console

This message is automatically generated., I looked into this a bit, the slowness is probably because of the call to {{fs#getWorkingDirectory}} inside makeQualified:

{code}
  @Deprecated
  public Path makeQualified(FileSystem fs) {
    return makeQualified(fs.getUri(), fs.getWorkingDirectory());
  }
{code}

Looking in {{FTPFileSystem#getWorkingDirectory}}, this is kind of a bogus call, since it returns the user's home directory, which involves connecting to the FTP server (slow!). So, unless people are depending on their relative paths being qualified with their home dir, the behavior in the posted patch should be fine., yes, actually in the attached patch file, I put a suggested fix, to pass the WorkingDirectory from caller method., bq. the behavior in the posted patch should be fine.
My cursory look at the patch, I came to the same conclusion. What I did not have time to finish was, should FTPFileSystem be caching home directory from the time of the creation and not use remote connection to get that information at all.

Thoughts?, Do we have any tests for this FS yet?, Seeing how you cant set the home dir, nor should it be mutable via another service (since it would have been set for the session), cacheing the home dir would be safe to do.  Even if the home dir is cached, most of the ftp logic still would require the current state of WD (setWD is stubbed out, but might be implemented in the future).  If you go with the solution in the patch to pass the WD that was used during the list operation, you would future prof this call.  Example, if you list a dir with 3k files in it and another thread updates the WD, this would cause list to now use the wrong WD (locking would solve this) for part of the files; passing the known WD would be safer., Reading in more, the semantics for this filesystem are rather loose, since we create a new FTPClient within each of the public FileSystem methods. Thus, there's no persistent concept of a working directory, and everything relies on absolute paths. Seems like FTPFileSystem could use some love beyond this JIRA.

Since the current working directory can be gotten from {{FTPClient#printWorkingDirectory}}, I think we could simply use that in {{getFileStatus}} without passing in a separate {{workDir}} parameter.

[~sureshms] I think we can cache the home dir, we just need to set it in {{initialize()}}. I don't think homedirs don't change often, if at all, so pretty safe.

[~stevel@apache.org] Poking in the test directory, I see no tests., Is there some reason to not solve this issue at version 2.4 ?

The workingDirectory feature continue unimplemented and the listStatus is very slow. It doesn't work. I need to list a folder with more than 2000 files and it takes several hours. No way.

Add a new parameter in getFileStatus avoid to brake something in the future when workingDirectory be implemented. And it imply that the app only query the workingDirectory once in each listStatus execution (instead by file).

But don't cache the workingDirectory in the initialize() method doesn't have sense. At the end getHomeDirectory query the workingDirectory, then if the workingDirectory feature is implemented in a future, it should be necessary reimplement the getHomeDirectory method and all the methods that depend on it.

Cache the workingDirectory is a quick and enough solution, and with less impact that have an useless implementation. , {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12572490/HADOOP-9377.diff
  against trunk revision b38e52b.

    {color:red}-1 patch{color}.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/4824//console

This message is automatically generated.]