[
Here's the trace.
{code}
2009-02-08 16:27:57,496 ERROR org.apache.hadoop.mapred.FairScheduler: Failed to update fair share calculations
java.util.ConcurrentModificationException
        at java.util.HashMap$HashIterator.nextEntry(HashMap.java:793)
        at java.util.HashMap$ValueIterator.next(HashMap.java:822)
        at org.apache.hadoop.mapred.FairScheduler.getTotalSlots(FairScheduler.java:703)
        at org.apache.hadoop.mapred.FairScheduler.updateFairShares(FairScheduler.java:622)
        at org.apache.hadoop.mapred.FairScheduler.update(FairScheduler.java:358)
        at org.apache.hadoop.mapred.FairScheduler$UpdateThread.run(FairScheduler.java:212)
2009-02-08 16:27:57,500 ERROR org.apache.hadoop.mapred.JobTracker: Tracker Expiry Thread got exception: java.lang.NullPointerException
{code}

And the underlying problem is that getTotalSlots gets the list of trackers via TaskTrackerManager.taskTrackers() and iterates through it to calculate the total number of map and reduce slots in the cluster. The exception occurs when JT internally modifies the list of TaskTrackers for e.g while updating the list of lost TaskTrackers.

This information is already available via ClusterStatus. Using it will fix the issue., Had thought about following approaches in mind.

1. Generate the local copy of taskTrackers and go over them to find out total slots.
2. Synchronizing the access points of taskTrackers().values esp making sure iterators are in synchronizing block.
3. Using ClusterStatus to fetch the required information , ClusterStatus already calculates the MaxMapTasks and MaxReduceTasks at cluster level ( cluster's maximum capacity for running map or reduce tasks).

took the 3rd approach.

changed the synchronzation of update() method to more granular level , this allows us to directly get lock over JobTracker to fetch the clusterStatus, instead of taking JobTracker lock and then scheduler lock.
Currently update() method is like below
{code}
 protected void update() {
    ClusterStatus clusterStatus = taskTrackerManager.getClusterStatus();
    synchronized(this){
{code}

getTotalSlots now takes additional parameter clusterStatus.
PS : We have made getTotalSlots private , as we couldnt find any usage of this method outside the class and reason why we would need to make this method public.

updateFairShare() method also takes clusterStatus as parameter.

PS : Matei can you look into the patch., Attaching the patch , i have mentioned changes in my comment earlier., Hi Rahul,

The fix in the patch looks good. I have a few comments about the style though:
- Can you put a space after the commas in the places where you write (TaskType.MAP,clusterStatus) and similar?
- There are some tabs in the patch. Change to use all spaces to ensure that we have an indent of 2 spaces per level., included matei's comment, Looks good to me. +1. I guess this is ready to go once Hudson approves., Actually, no, but only minor nits:

- The patch seems to have some extra control characters (a different line terminator ?). It applied on Linux, but may not on solaris from where we should commit.
- In the update method, the for loop computing the remove list is not indented correctly.
, added hemanth's changes, +1. Pushing through Hudson., +1 Looks good to me., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12400502/5214.patch
  against trunk revision 746010.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no tests are needed for this patch.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs warnings.

    +1 Eclipse classpath. The patch retains Eclipse classpath integrity.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/3885/testReport/
Findbugs warnings: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/3885/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Checkstyle results: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/3885/artifact/trunk/build/test/checkstyle-errors.html
Console output: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/3885/console

This message is automatically generated., There are no tests in this patch, because it is essentially fixing a threading synchronization issue that is hard to write unit tests for. The existing FairShare scheduler tests make sure that everything is still functional., We ran gridmix just to be sure that the performance is not hit huge because of the locking business. And the results turned out to be in the same range of 2700-2800 secs of our previous runs of FairScheduler without this patch.

I also had a look at the patch. Looks good. +1., I just committed this to trunk and branch 0.20. Thanks, Rahul !, Integrated in Hadoop-trunk #763 (See [http://hudson.zones.apache.org/hudson/job/Hadoop-trunk/763/])
    ]