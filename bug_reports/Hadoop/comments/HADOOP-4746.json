[The patch is fine, though ignoring the exception bothers me. Should we atleast log that exception, if not abort?, This patch has two changes:
1. make FileOutputFormat#setOutputPath to throw an IOException;
2. The output dir could be in a file system which is different from the one defined in jobconf; So use Path.getFileSystem to get the file system handle., Rather than make the incompatible API change, I'd propose putting the qualification into JobClient where it is about to be submitted to the JobTracker. I believe the input path is already made absolute there., Output directory is set by the map/reduce application. I am not familiar with JobClient code. But I do not think how it works if we make change in JobClient. Reading it from jobConf, normailizing it, and then seting it again?, This patch incorporates Owen's comment. It normalize the output directory in JobClient#submitJob. Ideally setInputPath & getInputPath should be methods of JobConf., A patch for 0.18., Might this be done in FileOutputFormat#checkOutputSpecs()?  That would better encapsulate this file-specific operation, and it already throws IOException, so it wouldn't break compatibility.

> Ideally setInputPath & getInputPath should be methods of JobConf. 

No, we'd like to keep all file-specific stuff in FileOutputFormat, since jobs can take non-file input and output.
, The down side of doing this in FileOutputFormat#checkOutputSpecs() is that if a user writes its own customized OutputFormat, the user might forget to normalize the output directory in checkOutputSpecs(). Otherwise I am OK with this suggestion., Here comes a new patch, which normalizes the output directory in FileOutputFormat#checkOutputSpecs()., +1 This looks good to me., ant test-core passed:
BUILD SUCCESSFUL
Total time: 114 minutes 21 seconds

ant test-patch result:
     [exec] -1 overall.

     [exec]     +1 @author.  The patch does not contain any @author tags.

     [exec]     -1 tests included.  The patch doesn't appear to include any new or modified tests.
     [exec]                         Please justify why no tests are needed for this patch.

     [exec]     +1 javadoc.  The javadoc tool did not generate any warning messages.

     [exec]     +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

     [exec]     +1 findbugs.  The patch does not introduce any new Findbugs warnings.

     [exec]     +1 Eclipse classpath. The patch retains Eclipse classpath integrity.

, A unit test will be added in HADOOP-4717 to test the new code.

I've just committed this!, Integrated in Hadoop-trunk #680 (See [http://hudson.zones.apache.org/hudson/job/Hadoop-trunk/680/])
    ]