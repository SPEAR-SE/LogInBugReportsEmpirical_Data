[Attaching a patch that prevents {{RecoveryManager}} from taking down the jobtracker. Added a testcase to test it., Attaching a new patch., Result of test-patch
{code}
[exec] +1 overall.  
     [exec] 
     [exec]     +1 @author.  The patch does not contain any @author tags.
     [exec] 
     [exec]     +1 tests included.  The patch appears to include 3 new or modified tests.
     [exec] 
     [exec]     +1 javadoc.  The javadoc tool did not generate any warning messages.
     [exec] 
     [exec]     +1 javac.  The applied patch does not increase the total number of javac compiler warnings.
     [exec] 
     [exec]     +1 findbugs.  The patch does not introduce any new Findbugs warnings.
     [exec] 
     [exec]     +1 Eclipse classpath. The patch retains Eclipse classpath integrity.
     [exec] 
     [exec]     +1 release audit.  The applied patch does not increase the total number of release audit warnings.

{code}, Attaching a new patch. Result of test-patch 
{code}
[exec] +1 overall.  
     [exec] 
     [exec]     +1 @author.  The patch does not contain any @author tags.
     [exec] 
     [exec]     +1 tests included.  The patch appears to include 3 new or modified tests.
     [exec] 
     [exec]     +1 javadoc.  The javadoc tool did not generate any warning messages.
     [exec] 
     [exec]     +1 javac.  The applied patch does not increase the total number of javac compiler warnings.
     [exec] 
     [exec]     +1 findbugs.  The patch does not introduce any new Findbugs warnings.
     [exec] 
     [exec]     +1 Eclipse classpath. The patch retains Eclipse classpath integrity.
     [exec] 
     [exec]     +1 release audit.  The applied patch does not increase the total number of release audit warnings.
{code}
Ant test passes on my box., If the JobTracker fails to recover a job, it should do a job.kill() (essentially kill the job). This will kill all the tips and do a finalizeJob(). Then patch doesnt need the change to do with updateTaskStatuses., Amareshwari,
The job gets ignored before it gets added to jobtracker (i.e if the filename is not recoverable or restoration of master file fails). Once the filename is recovered, the recovery manager recovers whatever it can and continues. There is no killing done after that. Hence there is no need to do a job.kill(). , The change in updateTaskStatuses takes care of the case where the job which was running in the earlier jobtracker goes missing/undetected during recovery in the new jobtracker. Hence every job that is missing in the jobtracker should get removed from the tasktracker. Hence the change is required., Framework changes look good. 
Some comments in Testcase:
1. testJobTracker() does not have any assertion in  the test.
2. Comments for testRecoveryManager() look different from implementation. Also can you add the assertion that Job1 is ignored and Job2 succeeded?, Incorporated Amareshwari's comments.  Result of test-patch 
{code}
[exec] +1 overall.  
     [exec] 
     [exec]     +1 @author.  The patch does not contain any @author tags.
     [exec] 
     [exec]     +1 tests included.  The patch appears to include 3 new or modified tests.
     [exec] 
     [exec]     +1 javadoc.  The javadoc tool did not generate any warning messages.
     [exec] 
     [exec]     +1 javac.  The applied patch does not increase the total number of javac compiler warnings.
     [exec] 
     [exec]     +1 findbugs.  The patch does not introduce any new Findbugs warnings.
     [exec] 
     [exec]     +1 Eclipse classpath. The patch retains Eclipse classpath integrity.
     [exec] 
     [exec]     +1 release audit.  The applied patch does not increase the total number of release audit warnings.
{code}, +1 patch looks good., I committed this to trunk and the 0.19 and 0.20 branches. Thanks, Amar !, Integrated in Hadoop-trunk #778 (See [http://hudson.zones.apache.org/hudson/job/Hadoop-trunk/778/])
    ]