[The way I am thinking of doing this is to add a new field in DatanodeRegistration class called infoPort. The infoPort is set to the value that the jetty could bind to (after retrials if applicable). This becomes known to the namenode as a part of the registration process. The namenode puts the port in a (new) field of the DatanodeInfo object that it creates for every datanode. Later on, anyone wishing to contact the jetty on a specific datanode (say, for redirecting the user to a datanode containing a particular data block) can do so by looking at the port number obtained from the DatanodeInfo object (for e.g., LocatedBlock contains an array of DatanodeInfo objects where a given block can be found). Makes sense?, it would be good to have a unit test for multiple datanodes in a machine, Testcase for multiple datanodes is not included in this patch. Maybe, that should be a separate issue., Since the patch to Hadoop-376 made this patch go out of sync, resubmitting it again with a one line change., I'm confused by the 'started' field added to StatusHttpServer.  It is set at the end of the 'start' method.  Then in DataNode, you add the code:

         this.infoServer.start();
+        while (!this.infoServer.started()) {
+          try {
+            wait(1);
+          } catch (InterruptedException ie){}
+        }
+        infoPort = this.infoServer.getPort();

Won't started() always be true here?  Why the loop?  Why call wait(1)?  Wait() is used with notify(), and there are no calls to notify(), and a 1ms wait makes for a rather tight loop.  Did you mean Thread.sleep(1000)?

, The 'started' field is there to just make sure that we do getPort() only after the webserver starts up. Since the webserver starts in a new thread, we should wait before doing getPort() (to avoid timing issues). Note that 'started' is set to false in the field initialization in StatusHttpServer. 'started' is set to true only when the webserver has successfully started up (towards the end of the 'start' method in StatusHttpServer). Note that if there was an exception while starting the webserver, it would throw an exception and 'started' would not be touched. Only after the exceptions are handled (e.g. a new port is found, etc.) will 'started' be set to true (after it 'breaks' out of the outermost 'while' loop inside 'start' method).

The wait(1) is can be replaced with Thread.sleep(1). I meant that and no issues with replacing that. The loop seems tight but I expect the webserver to start soon enough that it actually makes this loop not that tight (but in any case it could be replaced by Thread.sleep(100) or something).

Makes sense?, Some more points:
I think the timing issue requires to be handled when we allow for port roll-overs. The webserver may end up binding to a port other than the default port and unless the webserver starts up successfully, we won't be able to know which port it bound to. If we do a getPort() before the webserver starts up fully, then the port that is returned is the port value at which the webserver is currently *trying* to bind to (but it is not guaranteed that the attempt will be successful). 
If we don't allow port roll-overs (the last argument to StatusHttpServer's constructor is false), then the timing issue isn't there since getPort() will always (& supposed to) return the default port (in the absence of any exception)., Perhaps I'm missing something, but I still don't see how this works.  The loop retrying ports is in StatusHttpServer().start().  When this method returns, the port is known.  There's nothing more to wait for, is there?, Well!!! 
I seem to have had an impression that StatusHttpServer is started in a thread by itself!! (that start method led me astray) :-(
Really sorry about this. That part of the patch is not needed., Sorry for spamming the dev list with comments/mails on this issue. Hopefully, I won't make such blunders any more .., Sorry, this has conflicts with HADOOP-321, which I just committed.  Can you please regenerate this?  Thanks., Attached the modified patch, I just committed this.  Thanks!]