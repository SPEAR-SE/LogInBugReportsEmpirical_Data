[I like (2), make the namenode limit the number of blocks per blockInvalidate message., 1. Option 2 is simple to implement, very few code change.

2. The namenode migth not have detailed knowledge about the computing resources of a Datanode. A Datanode that has a faster disk could process a blockinvalidate message faster than a datanode that has slower disk IO speeds. Thus it is best left to the datanodes to figure out the amount of computing power they want to spend on deleting blocks. This votes for Option 1.

2, Option 1 seems to be scalable because the namenode has to do bookkeeping for invalidatedNodes for lesser time. The namenode, once its sends out the blockInvalidate command, can get rid of the blocks from the recentInvalidateSets map immediately. This might mean that this piece of memory can be reused earlier. If the namenode adopts Option 2, it might take a while before all the blocks get sent to the Datanode. The memory for these block objects will hang around longer.

3. With Option1, the speed of blockinvalidation depends on the heartbeat frequency. Thus changing the heartbeat frequency might have an unintended side-effect on the block reclamation speed of the cluster.

4. Option 2 has the disadvantage that the Datanode has to throttle the creation of new threads (and queue if needed) if too-many individual block-invalidate commands arrive within a short period of time. This code might be non-trivial.

Given the above, I would go ahead and implement Option 2., I think (1) is simpler, from namenode point of view.

One modification for (1) is that, Datanode should first delete the mapping inline and queue the physical file deletion on a separate thread.  This is required so that Datanode does not send the already invalidated blocks in in its next heartbeat.

Of course,  datanode should not create one thread for each RPC call. It could delete them inline if the number is small (say < 20), otherwise queue them up to be deleted by a thread (It will create one if one does not exist). The thread exits if there are no files to be deleted.
, +1 for option 2.
Making it conifgurable would be good too.
This btw does not exclude option 1 in the future., Limit the maximum number of blocks that can be sent in a single blockInvalidate RPC., Limit the maximum number of blocks that can be sent in a single blockInvalidate RPC., +1, http://issues.apache.org/jira/secure/attachment/12346376/chunkinvalidateBlocks.java applied and successfully tested against trunk revision 482405, Incorporated review comments., >  Incorporated review comments

I don't see any review comments here or on the dev list.  Was there an offline review?, My apologies. My comment should have said "Better comments in the code"., I just committed this.  Thanks, Dhruba!]