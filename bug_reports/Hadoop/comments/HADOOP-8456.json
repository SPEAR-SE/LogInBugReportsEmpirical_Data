[Attaching the patch., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12550730/HADOOP-8456.branch-1-win.spaces.patch
  against trunk revision .

    {color:red}-1 patch{color}.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/1672//console

This message is automatically generated., AccessControlList depends on a space delimiter, you will need to somehow address that too., Two questions:
# Does the wrapping of double quotes around the command args imply that the windows shell is re-parsing the group name?  If so, that would seem to be a security issue if the user is somehow able to inject input with metachars.
# Maybe turn the delimiter into a general option so it's not hardcoded throughout the patch?
, How does Cygwin, MS SUA, etc handle this problem?  We should do the same thing on Windows in order maintain compatibility with those systems., Thanks all for the feedback! My answers are below.

bq. AccessControlList depends on a space delimiter, you will need to somehow address that too.
You bring up a good poing Vinod. I discussed this part with the team before posting a patch. At this point, we will keep the current HDFS user and group name semantics, so no spaces. If we decide to make this change, that would be a separate Jira. The goal of this patch is to provide accurate information to Hadoop in the first place since providing false information can lead some other problems. Does this make sense?

bq. 1.Does the wrapping of double quotes around the command args imply that the windows shell is re-parsing the group name? If so, that would seem to be a security issue if the user is somehow able to inject input with metachars.
Daryn, I am relatively confident that Windows deals with this stuff properly. I would assume the same for the thin JNI layer. Passing in paramaters under quotes means that they are passed as separate args to app underneath (C argc/argv). Do you maybe know of some problems here?

bq. 2.Maybe turn the delimiter into a general option so it's not hardcoded throughout the patch?
Make sense, I'll prepare the updated patch.

bq. How does Cygwin, MS SUA, etc handle this problem? We should do the same thing on Windows in order maintain compatibility with those systems.
Thanks Allen. I just checked using Cygwin's {{id -Gn}}, and it seems that Cygwin keeps some internal metadata about groups. I know this was also true for permissions/ownership.
{code}
>id -Gn ivanmi
mkpasswd
{code}
Actual groups:
{code}
>bin\winutils.exe groups ivanmi
AutoSql Admin Group HelpLibraryUpdaters Administrators
{code}
And now with the separator:
{code}
>bin\winutils.exe groups -F ivanmi
AutoSql Admin Group|HelpLibraryUpdaters|Administrators
{code}
Generally, we want to natively integrate Hadoop with Windows, in a sense that Windows user/group information flows thru Hadoop.

Let me know if this makes sense., bq. Passing in paramaters under quotes means that they are passed as separate args to app underneath (C argc/argv). Do you maybe know of some problems here?

Quotes aren't adequate if the shell is involved.  Ex.  A typical exploit is to pass constructs like {{";malicious-cmd;"}} or {{$(malicious-cmd)}}.  If the shell is completely bypassed, as it should be, the list of args can be passed through execve with no quotes.  The shell should never be involved in command execution unless you actually want it to possibly mangle your parameters which is almost never the case.
, bq. Quotes aren't adequate if the shell is involved. Ex. A typical exploit is to pass constructs like ";malicious-cmd;" or $(malicious-cmd). If the shell is completely bypassed, as it should be, the list of args can be passed through execve with no quotes. The shell should never be involved in command execution unless you actually want it to possibly mangle your parameters which is almost never the case.
I see, thanks for clarifying. I don't think we have this problem here as windows shell is not involved. The quoted strings go thru the following stack: Java#ProcessBuilder->Win32#CreateProcess->Winutils.exe#argc/argv. On the other hand, we have to place username under quotes, as it won't be passed as a single argument to underlying winutils exe. For example:
{{winutils groups user name}}
does not work (4 args), while
{{winutils groups "user name"}}
works. Make sense, or am I missing something?, Let me investigate a bit further., bq. Generally, we want to natively integrate Hadoop with Windows, in a sense that Windows user/group information flows thru Hadoop.

bq. Let me know if this makes sense.


It does, but I'm just trying to get a measure for what the user expectation/experience is going to be for those that are going to use this interface.  (Which, I suspect, is what Daryn's questions are about as well).  'ls' is a UNIXy thing, which why I asked specifically about cygwin and SUA.  If Windows users are expecting different output, it may be worthwhile to implement a dir subcommand.

In other words, we should implement 'expected behavior' not necessarily what is convenient if there is a collision. (But convenience can always be provided via an option...)  So if cygwin/sua show with spaces by default, that's what we should do.  If they provide an option that puts separators in place, that's what we should.  Consistency is key for (inter)operability., bq. Maybe turn the delimiter into a general option so it's not hardcoded throughout the patch?
Fixed in the next iteration. Let me know if it looks good. , bq. In other words, we should implement 'expected behavior' not necessarily what is convenient if there is a collision. (But convenience can always be provided via an option...) So if cygwin/sua show with spaces by default, that's what we should do. If they provide an option that puts separators in place, that's what we should. Consistency is key for (inter)operability.
Thanks Allen for commenting. We have generally tried to keep the consistency for expected behavior. For example, {{winutils ls}} will by default use the same format as Cygwin {{ls}} (with spaces). Given that this does not work for all cases on Windows, we introduced a flag that gives us the functionality we need. I honestly tried to find an existing flag when I first implemented this, but couldn't find one. It is totally possible that I missed it, please let me know if this is the case., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12551677/HADOOP-8456.branch-1-win.spaces.2.patch
  against trunk revision .

    {color:red}-1 patch{color}.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/1694//console

This message is automatically generated., Allen, Daryn, Vinod, please let me know if you have any additional feedback on the patch. , Only suggestion would be to use {{getopt}} to process the args to simplify the logic, otherwise I think it looks good., bq. Only suggestion would be to use getopt to process the args to simplify the logic, otherwise I think it looks good.
Thanks Daryn. If I understood your comment correctly, you are referring to [GNU C lib function|http://www.gnu.org/software/libc/manual/html_node/Using-Getopt.html#Using-Getopt] which does not exist in the C runtime lib we are using on Windows :), +1 If others are ok with it., +1. I committed the patch to branch-1-win. Thank you Ivan., Thanks Daryn and Suresh.]