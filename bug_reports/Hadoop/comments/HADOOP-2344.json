[Submitting a patch for {{ShellCommand.java}} and {{ShellUtil.java}}. 
Comments?, +1 overall.  Here are the results of testing the latest attachment 
http://issues.apache.org/jira/secure/attachment/12370922/HADOOP-2231.patch
against trunk revision r600952.

    @author +1.  The patch does not contain any @author tags.

    javadoc +1.  The javadoc tool did not generate any warning messages.

    javac +1.  The applied patch does not generate any new compiler warnings.

    findbugs +1.  The patch does not introduce any new Findbugs warnings.

    core tests +1.  The patch passed core unit tests.

    contrib tests +1.  The patch passed contrib unit tests.

Test results: http://lucene.zones.apache.org:8080/hudson/job/Hadoop-Patch/1258/testReport/
Findbugs warnings: http://lucene.zones.apache.org:8080/hudson/job/Hadoop-Patch/1258/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Checkstyle results: http://lucene.zones.apache.org:8080/hudson/job/Hadoop-Patch/1258/artifact/trunk/build/test/checkstyle-errors.html
Console output: http://lucene.zones.apache.org:8080/hudson/job/Hadoop-Patch/1258/console

This message is automatically generated., I think you mean to override Thread#run(), not Thread#start(), no?

Also, do we need both ShellUtil & ShellCommand?  It would seem less error prone to have a single utility for executing command lines.

I think this is a bug worth fixing.  In a previous version of DF.java, I recall finding that failing to explicitly close all streams could cause file descriptor leaks.  Now it seems that in the current version streams are no longer closed again.  And reading process output before checking for exit status also seems prudent., This patch now merges the functionalities of {{ShellCommand}} and {{ShellUtil}}. I have deprecated {{ShellUtil}}. Now one can use {{ShellCommand}} in the following ways
* use {{ShellCommand.ShellCommandExecutor}} to simply execute a command
* extend {{ShellCommand}} to do some advance level output parsing

Basically use {{ShellCommandExecutor}}
* if the expected output is small and the requirement is to simply execute the command  

Extending {{ShellCommand}} might be useful in cases where there is a need to control 
* input directories
* command
* shell environment

Regarding the "Process.waitFor() hangs" issue, this patch clears the error stream using a separate thread while the input stream is read in the current thread (so that they happen in parallel). Once the streams are cleared, {{ShellCommand}} waits for the process to terminate and come out of {{waitFor()}}. Finally the process is destroyed closing the input/error streams. As done in {{ShellUtil}}, the process is made accessible outside {{ShellCommand}} so that the process can be externally terminated., +1 overall.  Here are the results of testing the latest attachment 
http://issues.apache.org/jira/secure/attachment/12371201/HADOOP-2344.patch
against trunk revision r601961.

    @author +1.  The patch does not contain any @author tags.

    javadoc +1.  The javadoc tool did not generate any warning messages.

    javac +1.  The applied patch does not generate any new compiler warnings.

    findbugs +1.  The patch does not introduce any new Findbugs warnings.

    core tests +1.  The patch passed core unit tests.

    contrib tests +1.  The patch passed contrib unit tests.

Test results: http://lucene.zones.apache.org:8080/hudson/job/Hadoop-Patch/1290/testReport/
Findbugs warnings: http://lucene.zones.apache.org:8080/hudson/job/Hadoop-Patch/1290/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Checkstyle results: http://lucene.zones.apache.org:8080/hudson/job/Hadoop-Patch/1290/artifact/trunk/build/test/checkstyle-errors.html
Console output: http://lucene.zones.apache.org:8080/hudson/job/Hadoop-Patch/1290/console

This message is automatically generated., This looks mostly good.  A few problems:
- public and protected methods on public classes need javadoc
- SimpleCommandExecutor needs javadoc
- inReader and errReader should be closed in a 'finally' clause
- there's an empty 'else' clause that should be deleted.
, {{Process.destroy()}} in {{java.lang.UNIXProcess}} indicates that a call to {{destroy()}} clears the streams. So I thought its redundant to invoke it explicitly, no?, bq. Regarding the "Process.waitFor() hangs" issue, this patch clears the error stream using a separate thread while the input stream is read in the current thread (so that they happen in parallel). Once the streams are cleared, ShellCommand waits for the process to terminate and come out of waitFor(). Finally the process is destroyed closing the input/error streams. As done in ShellUtil, the process is made accessible outside ShellCommand so that the process can be externally terminated.

Amar, I'm not very sure this is the right approach. 

We've had this same structure before and had to remove it since we had a number of issues with threads reading the exec'ed process's stdout/stderr streams which kept hanging, and Owen finally had to resort to bash redirections: see HADOOP-1553 for details., Sorry for the confusion about {{UNIXProcess}}. I am using sun java. So as pointed out by Doug I should close the streams before invoking {{Process.destroy()}}., Arun: In HADOOP-1553, I don't recall hung threads as an issue, but rather simply performance.  We never figured out why the performance was bad when using Java threads to handle voluminous sub-process output.  But, in this case, where we don't expect huge outputs, that may be less of an issue.

It might be worth developing a standalone benchmark that repeatedly spawns a process that writes to standard error and/or output in order to test various approaches.  If we cannot figure out how to write an efficient thread-based version, then perhaps we should change ShellCommand to redirect outputs to temporary files, but I'd rather avoid that if we can.
, Changes made to the patch other than the javadoc changes
* logging some of the exceptions in {{ShellCommand}} and throwing the main/imp ones.
* closing the streams explicitly.
* ignoring the error of {{df -k}} since exit code provides the required error information
----
comments ?, +1 overall.  Here are the results of testing the latest attachment 
http://issues.apache.org/jira/secure/attachment/12371486/HADOOP-2344.patch
against trunk revision r603428.

    @author +1.  The patch does not contain any @author tags.

    javadoc +1.  The javadoc tool did not generate any warning messages.

    javac +1.  The applied patch does not generate any new compiler warnings.

    findbugs +1.  The patch does not introduce any new Findbugs warnings.

    core tests +1.  The patch passed core unit tests.

    contrib tests +1.  The patch passed contrib unit tests.

Test results: http://lucene.zones.apache.org:8080/hudson/job/Hadoop-Patch/1326/testReport/
Findbugs warnings: http://lucene.zones.apache.org:8080/hudson/job/Hadoop-Patch/1326/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Checkstyle results: http://lucene.zones.apache.org:8080/hudson/job/Hadoop-Patch/1326/artifact/trunk/build/test/checkstyle-errors.html
Console output: http://lucene.zones.apache.org:8080/hudson/job/Hadoop-Patch/1326/console

This message is automatically generated., +1 This looks good to me.

Has anyone tested to see if this fixes HADOOP-2231?, Christian could you plz try this patch and let us know the outcome?, Good fix. There is one more possibility of deadlock (might be theoritical):
If processResult() throws an IOException, then we don't drain OutputStream and wait for error reader to reach EOF.

, Two things,
- whatever happens, {{ShellCommand.run()}} makes sure that an attempt is made to close the streams and destroy the the process in the end of each run.
- one can always redirect the error to {{/dev/null}} as the patch does in case of {{DF}} so that explicit command-error handling is not required. This is done to avoid the buffer related issues with respect to error streams.
comments? , > Two things,
Are these about my comment above?, Yeah. This could possibly lead to a deadlock. I will fix that soon., Uploading the modified patch. Comments ?, +1 overall.  Here are the results of testing the latest attachment 
http://issues.apache.org/jira/secure/attachment/12371743/HADOOP-2344.patch
against trunk revision r604451.

    @author +1.  The patch does not contain any @author tags.

    javadoc +1.  The javadoc tool did not generate any warning messages.

    javac +1.  The applied patch does not generate any new compiler warnings.

    findbugs +1.  The patch does not introduce any new Findbugs warnings.

    core tests +1.  The patch passed core unit tests.

    contrib tests +1.  The patch passed contrib unit tests.

Test results: http://lucene.zones.apache.org:8080/hudson/job/Hadoop-Patch/1359/testReport/
Findbugs warnings: http://lucene.zones.apache.org:8080/hudson/job/Hadoop-Patch/1359/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Checkstyle results: http://lucene.zones.apache.org:8080/hudson/job/Hadoop-Patch/1359/artifact/trunk/build/test/checkstyle-errors.html
Console output: http://lucene.zones.apache.org:8080/hudson/job/Hadoop-Patch/1359/console

This message is automatically generated., A few questions about naming:
- should we move this class to the util package, since it's not fs-specific?
- should SimpleCommandExecutor#getResponse() instead be named getOutput()?, {quote}
A few questions about naming:

    * should we move this class to the util package, since it's not fs-specific?
{quote}
+1, since we are using it like a _shell_. 
{quote} *  should SimpleCommandExecutor#getResponse() instead be named getOutput()?{quote}
Did you mean {{SimpleCommandExecutor#getReply()}}?  
{{output}} is more appropriate as in _output of a command (execution)_. 

, bq. Did you mean SimpleCommandExecutor#getReply()? 

Yes.
, Cancelling this patch while Doug's comments get incorporated..., Incorporated Doug's comment., +1 overall.  Here are the results of testing the latest attachment 
http://issues.apache.org/jira/secure/attachment/12372087/HADOOP-2344.patch
against trunk revision r606058.

    @author +1.  The patch does not contain any @author tags.

    javadoc +1.  The javadoc tool did not generate any warning messages.

    javac +1.  The applied patch does not generate any new compiler warnings.

    findbugs +1.  The patch does not introduce any new Findbugs warnings.

    core tests +1.  The patch passed core unit tests.

    contrib tests +1.  The patch passed contrib unit tests.

Test results: http://lucene.zones.apache.org:8080/hudson/job/Hadoop-Patch/1419/testReport/
Findbugs warnings: http://lucene.zones.apache.org:8080/hudson/job/Hadoop-Patch/1419/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Checkstyle results: http://lucene.zones.apache.org:8080/hudson/job/Hadoop-Patch/1419/artifact/trunk/build/test/checkstyle-errors.html
Console output: http://lucene.zones.apache.org:8080/hudson/job/Hadoop-Patch/1419/console

This message is automatically generated., Some comments:
1) The implementation of the deprecated classes should be using the new code.
2) The javadoc needs @link for the deprecated classes.
3) In TaskRunner.kill, a check for shexec being null should be made
4) Should SimpleCommandExecutor be non-static?
, Incorporating Devaraj's comments. Submitting a new patch applicable to trunk. , I propose that we mark this issue for 0.16. One reason is that this patch deprecates classes that were there in the previous releases of 0.15. Also, this patch requires work to make it apply to 0.15 branch. Thoughts?, Changed fix version to 0.16.0 on request by Devaraj., There are some minor nits (broken links etc.), I'll supply a new patch..., Updated patch for Amar...

1. Fixed some broken links.
2. Fixed the logger in Shell.java
3. Renamed {{SimpleCommandExecutor}} to {{ShellCommandExecutor}}.
4. Added some documentation., Submitting patch, changed fix version to 0.16.0., +1. Seems fine., Resubmitting to Mr. Hudson, who is back from vacation..., -1 overall.  Here are the results of testing the latest attachment 
http://issues.apache.org/jira/secure/attachment/12372246/HADOOP-2344.patch
against trunk revision r607330.

    @author +1.  The patch does not contain any @author tags.

    javadoc -1.  The javadoc tool appears to have generated  messages.

    javac +1.  The applied patch does not generate any new compiler warnings.

    findbugs +1.  The patch does not introduce any new Findbugs warnings.

    core tests +1.  The patch passed core unit tests.

    contrib tests -1.  The patch failed contrib unit tests.

Test results: http://lucene.zones.apache.org:8080/hudson/job/Hadoop-Patch/1436/testReport/
Findbugs warnings: http://lucene.zones.apache.org:8080/hudson/job/Hadoop-Patch/1436/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Checkstyle results: http://lucene.zones.apache.org:8080/hudson/job/Hadoop-Patch/1436/artifact/trunk/build/test/checkstyle-errors.html
Console output: http://lucene.zones.apache.org:8080/hudson/job/Hadoop-Patch/1436/console

This message is automatically generated., I just committed this. Thanks, Amar!, Integrated in Hadoop-Nightly #353 (See [http://lucene.zones.apache.org:8080/hudson/job/Hadoop-Nightly/353/]), This patch has a Javadoc warning.
, Ugh, the long story is that a similar patch didn't generate a javadoc... sad excuse. My bad.

I filed/fixed HADOOP-2511 to fix the javadoc warning. , While working on HADOOP-2420, I noticed that error buffer (message in IOException) was inconsistent. I guess that is because 'completed' was not set to true immediately after waitFor() returns. Should I fix it as part of HADOOP-2420? Its a small change.
, The way the Exception message is composed should be changed. Basically its composed of 
- Error stream output
- Exit code error message

So
{code}
 exitCode = process.waitFor();
 if (exitCode != 0) {
   if (errMsg.length() == 0) {
     errMsg.append("Command exit with status code " + exitCode);
   }
   throw new IOException(errMsg.toString());
 }
completed = true;
{code}
should be changed to
{code}
 exitCode = process.waitFor();
 if (exitCode != 0) {
   if (errMsg.length() == 0) {
     errMsg.insert(0,"Command exit with status code " + exitCode + ",\n");
   }
   throw new IOException(errMsg.toString());
 }
 completed = true;
{code}
, See HADOOP-2512.
]