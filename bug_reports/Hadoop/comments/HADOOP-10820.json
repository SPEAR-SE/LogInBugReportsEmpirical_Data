[An update to GenericOptionsParser which silently ignores empty tokens. A code review would be appreciated - thanks!, If finalArr.size() is zero, what should we do?
For example -libjars ,,,
Should validateFiles return null if finalArr.size() is zero?
if (finalArr.size() == 0) return null;, Thanks for the feedback. I've updated the patch with the following changes:

- Return null in validateFiles if the array of files is empty
- Only set configs if non-null, non-empty return from validateFiles
- Unset configs if null or empty return from validateFiles, +1 
The new patch looks good for me.
, {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12656524/HADOOP-10820-1.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:red}-1 core tests{color}.  The patch failed these unit tests in hadoop-common-project/hadoop-common:

                  org.apache.hadoop.fs.TestSymlinkLocalFSFileContext
                  org.apache.hadoop.ipc.TestIPC
                  org.apache.hadoop.fs.TestSymlinkLocalFSFileSystem

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HADOOP-Build/4325//testReport/
Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/4325//console

This message is automatically generated., It looks like the tests that failed were failing prior to this build - the unit test added in this ticket succeeded:

{code}
Running org.apache.hadoop.util.TestGenericOptionsParser
Tests run: 7, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.875 sec - in org.apache.hadoop.util.TestGenericOptionsParser
{code}
, [~zxu] Thank you for reminding me of this issue from MAPREDUCE-5980. When does the patch release? , This reminds me of a very old bug HADOOP-1386 from 7 years ago. 
Maybe it's better to fix this issue at the lower layer and disallow creation of Path from an empty URI.
Simple test code as below.  If you uncomment the 'delete', it'll wipe the entire current directory instead of throwing the IllegalArgumentException.

{code:java}
import org.apache.hadoop.fs.Path;
import java.lang.IllegalArgumentException;
import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.RawLocalFileSystem;
import java.net.URI;

public class TestEmptyPath {

  public static void main(String[] args) throws Exception {
    FileSystem fs = new RawLocalFileSystem();
    try {
      Path path = new Path("");
      System.out.println("Path from empty String is " + path);
      System.exit(123);
    } catch (IllegalArgumentException ex) {
      System.out.println("Empty Path creation error successfully captured [" + ex + "]");
    }

    try {
      URI emptyuri = new URI("");
      Path path = new Path(emptyuri);
      System.out.println("Path from empty URI is " + path);
      // IF YOU UNCOMMENT THIS LINE, IT WILL WIPE YOUR ENTIRE CURRENT DIR!!!
      //fs.delete(path, true);
      System.exit(234);
    } catch (IllegalArgumentException ex) {
      System.out.println("Empty Path creation error successfully captured [" + ex + "]");
      System.exit(0);
    }
  }
}
{code}

{noformat}
-bash-4.1$ ls -l
total 8
drwxr-xr-x 2 ___ users 4096 Jul 21 16:54 bcd
-rw-r--r-- 1 ___ users    5 Jul 21 16:54 efg
-bash-4.1$java -cp.....  TestEmptyPath
Empty Path creation error successfully captured [java.lang.IllegalArgumentException: Can not create a Path from an empty string]
Path from empty URI is
-bash-4.1$ echo $?
234
-bash-4.1$ ls -l
total 0
-bash-4.1$
{noformat}

, [~knoguchi] you suggest to change Path constructor at public Path(URI aUri) to check the empty URI and throw IllegalArgumentException.
I am OK with this suggestion but we need make sure it won't break other usage cases who want to create a Path with empty URI., Since the string-based constructor checks for an empty string, for consistency it would make sense that the URI-based constructor do the same thing.

What would be the desired user experience in the case of an empty token entry in libjars - throwing an exception from the Path constructor, or handling it as per this patch and allowing the command to continue? If it's the later then it would make sense to commit this patch.

In both cases it seems like a new ticket needs to be opened to check for an empty URI in the constructor - please let me know if you'd like me to do that., Given careless ",," started uploading the entire current working directory, maybe someday this same ",," could start *deleting* entire current working directory for some application.  I still remember the nightmare we had when our user lost his entire homedir due to his pig script containing one extra 'space'(HADOOP-1386).  So yes, I'd love to see this fixed.  Zhihai or Alex, if one of you want to create the jira with the fix, please go ahead.

As for this jira, I don't have a strong preference.  We can
*  just fail with IllegalArgumentException from Path constructor, 
* catch at GenericOptionsParser and give better error message
or
* catch at GenericOptionsParser and ignore the empty string., [~knoguchi] I will create a JIRA to fix empty URI path.
Alex solution looks OK to me., I just created a JIRA HADOOP-10876 to address the empty URI issue from  Path constructor. I will submit a patch for HADOOP-10876., Hi [~knoguchi]
I just submitted the patch in HADOOP-10876 for review.
thanks
zhihai, Since HADOOP-10876 turned out to be flawed, let's re-examine fixing this in GenericOptionsParser. The latest patch looks like roughly the right idea, but I'd suggest throwing an exception if we encounter the null/empty. It's almost certainly a typo on the part of the user, so we should alert. If they really want to specify the local WD, they can say ".".

I haven't looked into how Parser works, but I was also wondering if this would allow us to keep all the required changes within validateFiles. Would make the patch smaller / simpler.

I think specifying -libjars etc without a value is also an error we should be aborting on. It looks like the current patch tires to gracefully keep going by unsetting the conf., I agree with [~andrew.wang],  throw an exception is safer than silently discard the empty tokens., Should we trim the  leading and trailing whitespace in the string when check whether the token is empty string?
{code}
"".equals(tmp) => "".equals(tmp.trim())
{code}, A filename with only space character are valid. So my suggestion is not good. We should't trim space when check empty string., Hi [~alex.holmes], It look like you don't have time to work on this issue, if you don't mind, I will create a patch based on your patch to address the comment from [~andrew.wang]. thanks zhihai, I attached a new patch HADOOP-10820-2.patch based on [~andrew.wang] comments.
Also I find the filename with space character is not permitted in URI parser. My previous concern is already handled in original code.
So I add a test case "a, ,b" which will trigger URISyntaxException at line 394 in GenericOptionsParser.java., {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12661083/HADOOP-10820-2.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-common-project/hadoop-common.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HADOOP-Build/4449//testReport/
Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/4449//console

This message is automatically generated., Hi Zhihai, only comment I have is that it would be nice to validate for empty string before the file list length, e.g.:

{noformat}
-> % hadoop fs -files ,, 
Exception in thread "main" java.lang.IllegalArgumentException: File list length can't be zero
{noformat}

I think if we just need to do this check on the finalArr instead at the end. +1 pending this., As discussed with [~andrew.wang] offline, I made two changes in the HADOOP-10820-3.patch.
1. change the "File list length can't be zero" to "File name can't be empty string" because both are caused by empty string.
2. use tmp.isEmpty() instead of "".equals(tmp) for more semantic. and also split function for String will guarantee the the string element in the array is not null., +1 pending Jenkins, thanks Zhihai!, {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12661108/HADOOP-10820-3.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:red}-1 core tests{color}.  The patch failed these unit tests in hadoop-common-project/hadoop-common:

                  org.apache.hadoop.security.token.delegation.web.TestWebDelegationToken

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HADOOP-Build/4454//testReport/
Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/4454//console

This message is automatically generated., I tested TestWebDelegationToken at local. I didn't see the error. Also the error is 
"java.net.BindException: Address already in use", which looks like some address conflict in the test environment.


-------------------------------------------------------
 T E S T S
-------------------------------------------------------
Running org.apache.hadoop.security.token.delegation.web.TestWebDelegationToken
Tests run: 7, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 5.484 sec - in org.apache.hadoop.security.token.delegation.web.TestWebDelegationToken

Results :

Tests run: 7, Failures: 0, Errors: 0, Skipped: 0

, Alright, sounds good. I'll commit this shortly., Committed to trunk and branch-2. Thanks Alex and Zhihai for working on this, I credited both of you in CHANGES.txt and the commit message., FAILURE: Integrated in Hadoop-trunk-Commit #6051 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/6051/])
HADOOP-10820. Throw an exception in GenericOptionsParser when passed an empty Path. Contributed by Alex Holmes and Zhihai Xu. (wang: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1617542)
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/GenericOptionsParser.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestGenericOptionsParser.java
, FAILURE: Integrated in Hadoop-Yarn-trunk #644 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk/644/])
HADOOP-10820. Throw an exception in GenericOptionsParser when passed an empty Path. Contributed by Alex Holmes and Zhihai Xu. (wang: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1617542)
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/GenericOptionsParser.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestGenericOptionsParser.java
, FAILURE: Integrated in Hadoop-Hdfs-trunk #1836 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/1836/])
HADOOP-10820. Throw an exception in GenericOptionsParser when passed an empty Path. Contributed by Alex Holmes and Zhihai Xu. (wang: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1617542)
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/GenericOptionsParser.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestGenericOptionsParser.java
, FAILURE: Integrated in Hadoop-Mapreduce-trunk #1862 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/1862/])
HADOOP-10820. Throw an exception in GenericOptionsParser when passed an empty Path. Contributed by Alex Holmes and Zhihai Xu. (wang: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1617542)
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/GenericOptionsParser.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestGenericOptionsParser.java
]