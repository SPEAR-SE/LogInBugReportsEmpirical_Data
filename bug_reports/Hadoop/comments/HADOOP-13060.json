[bq. We are using aws-java-sdk.jar version 1.10.69...

HADOOP-12269 changed the dependency from aws-java-sdk:1.7.4 to aws-java-sdk-s3:1.10.6.  Can you try checking again that you were using "aws-java-sdk-s3" and not "aws-java-sdk"?  We are successfully testing with aws-java-sdk-s3:1.10.6.  This is potentially confusing because the names are so similar., I was using aws-java-sdk-1.10.69. I added aws-java-sdk-s3:1.10.6 but we would still need to include aws-java-sdk.jar. Which version should we be using for that? , Jenny: you need to have the AWS versions of your libraries in sync with what Hadoop was built against; amazon changed the signature of a method, moving an argument from an int to a long, which is something that ends up getting frozen at compile time. 

If you are working with Hadoop 2.7.x, then you will need aws-java-sdk 1.7.4 on your classpath. Sorry, but we can't do anything about amazon quietly breaking binary compatibility on their JARs.

Now, if you really want the latest aws SDK against hadoop  2.7.x, you can actually rebuild hadoop (more specifically, tools/hadoop-aws) against the latest amazon JAR; it's just you need to do it at compile time, after which the library choice is frozen, I've created HADOOP-13062 to propose using introspection in the 2.7.x branch to have it link to the newer SDKs.

[~jennydong272]: S3A is very much a community project: whoever uses it gets to help maintain it. If you could provide the patch for this I'll help nurture it into the 2.7 branch, Just noticed this is still open. Jenny, you are hitting a version mismatch between JARs: you need to have the hadoop JAR and AWS SDK JAR in sync, which happens if you download any of the hadoop releases.

Sorry, there's nothing else we can do. Closing as a WORKSFORME as don't have an entry "incompatible change of external dependency"]