[ActiveStandbyElector is missing the checks for SyncConnected event and not waiting for the connection establishment. I think we would be having a connection timeout associated with zk client and if it doesn't get the connection after this period throw exception saying 'unable to establish connection with zk server'

{noformat}
protected synchronized ZooKeeper getNewZooKeeper() throws IOException {
    ZooKeeper zk = new ZooKeeper(zkHostPort, zkSessionTimeout, null);    
    zk.register(new WatcherWithClientRef(zk));
    .......
    .......
}
{noformat}, Do you want to take a crack at a patch, Rakesh?, Attached patch. I have reused zkSessionTimeout as waiting period for zk connection establishment.
Please review., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12530543/HDFS-3477.patch
  against trunk revision .

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 1 new or modified test files.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 eclipse:eclipse.  The patch built with eclipse:eclipse.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed these unit tests in hadoop-common-project/hadoop-common:

                  org.apache.hadoop.ha.TestZKFailoverController

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HDFS-Build/2564//testReport/
Console output: https://builds.apache.org/job/PreCommit-HDFS-Build/2564//console

This message is automatically generated., +1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12530557/HDFS-3477.1.patch
  against trunk revision .

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 1 new or modified test files.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 eclipse:eclipse.  The patch built with eclipse:eclipse.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed unit tests in hadoop-common-project/hadoop-common.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HDFS-Build/2565//testReport/
Console output: https://builds.apache.org/job/PreCommit-HDFS-Build/2565//console

This message is automatically generated., Nice work. Thanks for fixing this. A few comments below:

- When you catch and swallow InterruptedException, you should call {{Thread.currentThread().interrupt()}} afterward, so that the interrupt status isn't lost

----
{code}
+  /**
+   * Watcher for waiting(connectionTimeout in milliseconds) to establish
+   * connection with the zookeeper server.
+   */
{code}
I don't think you need the parenthetical ("connectionTimeout in milliseconds") since you already specify that down below in the relevant javadoc.

----
- In the case that the ZK connection fails (eg ZK is just not listening) do we now have to wait for the full session timeout? I think the latch should fire on either SyncConnected or Disconnected events, not just on SyncConnected.
- We probably want some kind of sanity check that we don't get any other kind of events in the ZKConnectionWatcher. Otherwise I'm afraid we might end up swallowing an event inadvertently, which could result in the elector hanging. In that case, we should also make sure that the "authenticated" message we get from a SASL-capable ZK is in the list of acceptable events.

----
- Nit: can you make ZKConnectionWatcher private, and move it to the bottom of the file? Also, I think zkConnectLatch can be made private.
- Test nit: can you please use the {{GenericTestUtils.assertExceptionContains()}} utility to check the exception? I've found that the JUnit "expected exception" trick isn't great, since it catches all sorts of exceptions instead of just the targeted error you want to verify
, Thanks Todd for the comments. I'll rework and upload the patch.

For the following comment:
{quote}In the case that the ZK connection fails (eg ZK is just not listening) do we now have to wait for the full session timeout? I think the latch should fire on either SyncConnected or Disconnected events, not just on SyncConnected.
We probably want some kind of sanity check that we don't get any other kind of events in the ZKConnectionWatcher. Otherwise I'm afraid we might end up swallowing an event inadvertently, which could result in the elector hanging. In that case, we should also make sure that the "authenticated" message we get from a SASL-capable ZK is in the list of acceptable events.
{quote}

I'm just thinking to change ZKConnectionWatcher logic like, it will just wait for any events from ZK and pass it to the activestandbyelector.processWatchEvent(zk, event). Here it will be processed those events. With this we would be able to avoid sanity checks in different places.

Activestandbyelector.processWatchEvent(zk, event) is considering only the following events and there is no special sasl checks exists. 
case SyncConnected:
case Disconnected:
case Expired:
default:

Could you please tell me your thoughts on this., Attached latest patch by fixing the comments. Please review., +1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12531384/HDFS-3477.2.patch
  against trunk revision .

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 1 new or modified test files.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 eclipse:eclipse.  The patch built with eclipse:eclipse.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed unit tests in hadoop-common-project/hadoop-common.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HDFS-Build/2621//testReport/
Console output: https://builds.apache.org/job/PreCommit-HDFS-Build/2621//console

This message is automatically generated., Hey Rakesh. Looking good. One more small comment which I missed:

- We currently have the following code lower down inside {{doRun()}}:
{code}
      if (ioe.getCause() instanceof KeeperException.ConnectionLossException) {
        LOG.fatal("Unable to start failover controller. Unable to connect " +
            "to ZooKeeper quorum at " + zkQuorum + ". Please check the " +
            "configured value for " + ZK_QUORUM_KEY + " and ensure that " +
            "ZooKeeper is running.");
        return ERR_CODE_NO_ZK;
      } else {
        throw ioe;
      }
{code}

but with your bug fix, we'll never get here since {{initZK()}} would have failed already. So, can you move this fatal error message up to where you catch {{KeeperException}} around {{initZK()}}? This way we'll give a nice message for users who have a mistake in their configuration. Thanks., Thanks Todd. I have updated the patch by fixing the comment., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12531773/HDFS-3477.3.patch
  against trunk revision .

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 1 new or modified test files.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 eclipse:eclipse.  The patch built with eclipse:eclipse.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed these unit tests in hadoop-common-project/hadoop-common:

                  org.apache.hadoop.ha.TestZKFailoverController
                  org.apache.hadoop.io.file.tfile.TestTFileByteArrays
                  org.apache.hadoop.io.file.tfile.TestTFileJClassComparatorByteArrays

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HDFS-Build/2643//testReport/
Console output: https://builds.apache.org/job/PreCommit-HDFS-Build/2643//console

This message is automatically generated., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12533626/HDFS-3477.3.patch
  against trunk revision .

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 1 new or modified test files.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    -1 javadoc.  The javadoc tool appears to have generated 2 warning messages.

    +1 eclipse:eclipse.  The patch built with eclipse:eclipse.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed these unit tests in hadoop-common-project/hadoop-common:

                  org.apache.hadoop.ha.TestZKFailoverController
                  org.apache.hadoop.io.file.tfile.TestTFileByteArrays
                  org.apache.hadoop.io.file.tfile.TestTFileJClassComparatorByteArrays

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HDFS-Build/2711//testReport/
Console output: https://builds.apache.org/job/PreCommit-HDFS-Build/2711//console

This message is automatically generated., Added links to HDFS-3635 as I feel the cause is same and failing after timeout:
{code}java.lang.Exception: test timed out after 30000 milliseconds
	at java.lang.Object.wait(Native Method)
	at org.apache.hadoop.ha.ZKFailoverController.waitForActiveAttempt(ZKFailoverController.java:457)
	at org.apache.hadoop.ha.ZKFailoverController.doGracefulFailover(ZKFailoverController.java:645)
	at org.apache.hadoop.ha.ZKFailoverController.access$400(ZKFailoverController.java:58)
	at org.apache.hadoop.ha.ZKFailoverController$3.run(ZKFailoverController.java:590)
	at org.apache.hadoop.ha.ZKFailoverController$3.run(ZKFailoverController.java:587){code}, Hey Rakesh,

I modified your patch a bit and came up with this new rev. I'm afraid there might have been a race in the old version -- if multiple events came in to the registration watcher, it might have missed forwarding the second to the main watcher, which could produce an inconsistent state. I changed it around a bit so that the existing watcher wrapper takes care of the latching.

If you're able to reproduce this in a real cluster, can you give it a try? I've never seen the problem in practice, but my patch passes the unit test you added., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12552945/hdfs-3477.txt
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:red}-1 findbugs{color}.  The patch appears to introduce 1 new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-common-project/hadoop-common.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HDFS-Build/3479//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-HDFS-Build/3479//artifact/trunk/patchprocess/newPatchFindbugsWarningshadoop-common.html
Console output: https://builds.apache.org/job/PreCommit-HDFS-Build/3479//console

This message is automatically generated., Fix inconsistent synchronization findbugs - just had to add a synchronized block around an access to the {{zk}} variable in the watcher, {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12553145/hdfs-3477.txt
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-common-project/hadoop-common.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HDFS-Build/3484//testReport/
Console output: https://builds.apache.org/job/PreCommit-HDFS-Build/3484//console

This message is automatically generated., Added links to HDFS-3635 as I feel the cause is same and failing after timeout:

java.lang.Exception: test timed out after 30000 milliseconds
	at java.lang.Object.wait(Native Method)
	at org.apache.hadoop.ha.ZKFailoverController.waitForActiveAttempt(ZKFailoverController.java:457)
	at org.apache.hadoop.ha.ZKFailoverController.doGracefulFailover(ZKFailoverController.java:645)
	at org.apache.hadoop.ha.ZKFailoverController.access$400(ZKFailoverController.java:58)
	at org.apache.hadoop.ha.ZKFailoverController$3.run(ZKFailoverController.java:590)
	at org.apache.hadoop.ha.ZKFailoverController$3.run(ZKFailoverController.java:587)
two reason，
1.one reason same to Rakesh.
2.second reason
when doGracefulFailover command is run in active NameNode,the test case will time out.because waitForActiveAttempt exit wait in standby NameNode,when the standby NameNode become active NameNode. The waitForActiveAttempt exit wait in actvie NameNode  when waitForActiveAttempt time out,and the time out defaut value is 70000.
the test case time out is 30000.30000<70000,so we need modify the test case timeout value.change it 30000 to 75000.
@Test(timeout=30000)
  public void testOneOfEverything() throws Exception {
    try {
 

change to 
@Test(timeout=75000)
  public void testOneOfEverything() throws Exception {
    try {


, @Todd
Sorry for the late reply. Yeah, you are absolutely correct. I had missed the case of receiving multiple events in between wait completion and watcher registration. 

I also could see a very corner case like: 
Recevived the ZK connection event, immediately before the watcher registration, say ZK got Disconnected the event will be received to the old watcher and will never execute this event. In this case would be still in Synconnected and could go to an inconsistent state. I have tried this scenario in my cluster, but not able to re-produce the same, finally I just tried keeping debug points and has re-produced. Your approach of queuingup the events is fine and this is executing all the events sequentially without missing anything., +1, the latest patch looks good to me., I moved this JIRA to Common since the patch only affects the common ZKFC components., Committed to trunk and branch-2. Thanks, Rakesh., Integrated in Hadoop-trunk-Commit #3107 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/3107/])
    HADOOP-9126. FormatZK and ZKFC startup can fail due to zkclient connection establishment delay. Contributed by Rakesh R and Todd Lipcon. (Revision 1419831)

     Result = SUCCESS
todd : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1419831
Files : 
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/ActiveStandbyElector.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/ZKFailoverController.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/ha/TestActiveStandbyElector.java
, Integrated in Hadoop-Yarn-trunk #62 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk/62/])
    HADOOP-9126. FormatZK and ZKFC startup can fail due to zkclient connection establishment delay. Contributed by Rakesh R and Todd Lipcon. (Revision 1419831)

     Result = FAILURE
todd : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1419831
Files : 
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/ActiveStandbyElector.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/ZKFailoverController.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/ha/TestActiveStandbyElector.java
, Integrated in Hadoop-Hdfs-trunk #1251 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/1251/])
    HADOOP-9126. FormatZK and ZKFC startup can fail due to zkclient connection establishment delay. Contributed by Rakesh R and Todd Lipcon. (Revision 1419831)

     Result = FAILURE
todd : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1419831
Files : 
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/ActiveStandbyElector.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/ZKFailoverController.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/ha/TestActiveStandbyElector.java
, Integrated in Hadoop-Mapreduce-trunk #1282 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/1282/])
    HADOOP-9126. FormatZK and ZKFC startup can fail due to zkclient connection establishment delay. Contributed by Rakesh R and Todd Lipcon. (Revision 1419831)

     Result = SUCCESS
todd : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1419831
Files : 
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/ActiveStandbyElector.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/ZKFailoverController.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/ha/TestActiveStandbyElector.java
]