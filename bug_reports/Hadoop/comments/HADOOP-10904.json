[WebAppUtils use of conf.getPassword for SSL passwords, HDFS-6790 uptakes credential provider api for ssl passwords through cond.getPassword., [~lmccay], how about following a common pattern such as...

All components that load a password (i.e. {{FileBaseKeyStoresFactory}} for SSL stuff) would add a new property (the old one + ".ref", ie: {{ssl.server.keystore.password.ref}}) that points to the credential ID. If the *REF* the property is defined, it takes precedence over the old property, if the *REF* property is not present, we print a deprecation warning and use the old property.

, Hi [~tucu00] - that was something that was discussed early on in development of the credential provider api in HADOOP-10607 and it was decided that it would be better to just add the getPassword method that basically does the same thing without adding additional properties.

If you look at the getPassword method you will see that:
1. if there is no provider.path defined for credential providers then it fallsback to config
2. if there is alias of the provided name then it fallsback to config
3. it is possible to turn off the fallback for deployments where it isn't acceptable to have passwords in config

I think the deprecation warning may be interesting as a separate jira. I haven't actually proposed that we deprecate the existing mechanisms - that may need some additional discussion.

What do you think?, #2 above was supposed to say "if there is NO alias of the provided name then it fallsback to config", got it, sounds good. BTW, the {{Configuration.getPasswordFromCredenitalProviders()}} method has a typo., Ugh - it sure does. Thanks, [~tucu00]., Please fix {{CredentialProvider#unnestUri}}, in this jira or subtask, to not violate URI syntax.  Specifically:

bq. For example, "myscheme://hdfs@nn/my/path" is converted to "hdfs://nn/my/path".

The "@" is RFC defined to separate userinfo and host:port in an authority.  I've been meaning to take advantage of the userinfo for a legit purpose (well beyond the scope of this discussion) and an "abuse" like this will likely conflict.  A more URI-friendly approach is using subschemes: "myscheme+hdfs://nn/my/path"., We should fix this for KeyProvider too, since it currently does the same thing with repurposing the authority. Googling for "subscheme" didn't turn up much, but there is some precedent for using "+" like this, e.g. "svn+ssh".

https://www.csoft.net/docs/svn.html.en, Seems reasonable to me. I can't get to this till next week - if that's okay
then we can assign a new jira to me.

, Daryn, This is a very different use case from "svn+ssh" and this reads really badly. 

jks+hdfs://nn.example.com/foo/bar.jks 

furthermore, it doesn't nest right:

jks+har+hdfs://nn.example.com/foo/bar

is a complete mess. What are you trying to accomplish that this makes difficult?, Why not do jks://hdfs/nn.example.com/foo/bar.jks and jks://har/hdfs/nn.example.com/foo/bar.jks, where nesting simply adds a path prefix, and the un-nesting  bring it back as scheme?, [~lmccay] Can this be marked as closed now, given that all sub-tasks are resolved?, Hi [~jnp] - You are right - I've closed it. Thanks!]