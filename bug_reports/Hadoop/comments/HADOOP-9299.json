[Changing targets version to 2.0.4, since 2.0.3 has already been released., If you know, please link the jira that caused this issue., [~tucu00] have you triaged this too? Thanks., On it, taking care of this makes other things bubble up, trying to figure out if it is the same thing or a different one., Thanks!, One fix that is likely required is - getDelegationToken on the RM and HistoryServer need to handle security being disabled., I know exactly what the problem is - UGI will always favor kerberos even if security isn't enabled + UGI always uses HadoopKerberosName.  So if the user has a realm, and the default realm cannot be determined, it will fail as shown above.  It's the same issues that causes unit tests on my laptop to fail unless I kdestroy first.  For the SASL work, which is on the back-burner, I had a patch that almost fixed this., [~daryn] Thanks for the analysis. Do you mind putting up your patch? Thanks!, Also, do you know how/when this broke? This is a long-term issue? Why is Oozie hitting this only now?, Daryn, Arun,

I don't know when this broke as the previous version of Hadoop 2 we tested successfully in Apache Oozie was 0.23.x.

When testing oozie/hadoop in bigtop for the prev release, using hadoop 2.0.2-alpha this was not a problem, so I assume something went wrong after that.

By looking at the code, o.a.h.security.User constructor always does KerberosName resolution by calling 'new KerberosName(name).getShortName()'

This does not seem correct to me. IMO, the correct way -because of the fallback from secure to unsecure of the client- is:

* If hadoop client is configured with Kerberos and the cluster has kerberos enabled, then the kerberos shortName should be used.
* Regardless of the hadoop client configuration, if the cluster is unsecure, the Java System Property 'user.name' should be used.

What change make things to break, I don't know, but unless I'm missing something, if the logic just described is not done then you may end up in all sort of weird issues depending of KRB5 settings and rules settings in the core-site.xml

Thoughts?, I'll try to find my patch, but it was incomplete, and I tried various approaches.  First, I tried to avoid using {{KerberosName}} if possible, but that caused problems because kerberos is always favored regardless of the client config.  I actually think that's a good thing, more on that later.  I believe the last approach was to blindly strip the realm if the client is insecure.

My problem is running an insecure mini-cluster on my laptop.  If I have no TGT, the unix principal has no realm so passes the rules.  If I do have a TGT (bound to corporate directory), it wants to strip the realm from the kerberos principal.  If the default realm cannot be determined, or does not match my principal's realm, the rules fail.  

On favoring kerberos:  If I'm kerberos authenticated, it stands to reason that's who I am so the user should be derived from the kerberos principal regardless of whether security is enabled/disabled on the client.  Similarly, shouldn't an "insecure" client be allowed to communicate with a secure cluster if the user has the necessary kerberos credentials?  Maybe I'm trying to copy data between secure/insecure cluster.

I spoke to Owen awhile back about this issue, and we agreed that the client should be able to use kerberos credentials regardless of the client config.  Where we had mild disagreement is whether the client should be trying to apply the name rules.  I'd make the case that the client should never apply rules which are meant for arbitrarily rewriting the principal.  All we are using the rules for on the client is stripping the default realm - if the client changes the username in the principal I believe it's going to fail the kerberos auth with the server due to a mismatch with the TGT.  Only the server should use the rules to arbitrarily rewrite the principal into a simple username for the namesystem.  The problem is how some of the fields in a token are converted to a simple username on the client, which Owen and I agreed is probably wrong.  We might be able to fix this w/o causing incompatibility.

On a tangent: These issues illustrate the growing problem with not being able to have (semi)universal configs that allow communicating with multiple clusters.  Client security setting shouldn't matter, client shouldn't need the server's name rules., On the 'On the tangent': Yep, this has always been a pain (for Oozie) for different motives. IMO, a possible way to solve this would be (using MR that would be JT/YARN):

* client configs indicate user preferences (default MR/NN/replication factor/retries, etc)
* On contacting a MR/NN the client gets the service site conf
* the client configs are merged into the service site conf
* the resulting conf is used to interact with the corresponding service
, Great mind think alike!  I've been internally proposing that since I started working on Hadoop..., (or we have the same mosquito brain :) ), I should add I also spoke to [~atm] about the kerberos entangled quite awhile ago.  He said they had an issue where the static initialization of the kerberos classes were triggering dns discovery of the KDCs which overwhelmed the dns server.  I think the problem was even a bit more severe.

I'm trying to re-familiarize myself with the code and what I thought needed to be done w/o breaking anything., While this is an actual low-level problem, would you please check if {{yarn.resourcemanager.principal}} might be set to "yarn/localhost@LOCALREALM"?, I might know why this wasn't seen before.  Sometime back the job client was modified, for oozie, to get a HS token if the conf {{mapreduce.history.server.delegationtoken.required}} is defined.  Acquiring a RM token will implicitly set the conf value.  If set, job submission will automatically get a HS token with a renewer of {{Master.getMasterPrincipal(conf)}} which returns {{yarn.resourcemanager.principal}}.  Perhaps the HS token fetching was added post-2.0.2?, Scratch that, FS tokens acquired during job submission will also use the renewer returned by {{Master.getMasterPrincipal(conf)}}...  I'm back to thinking it's a config change that broke it., bq. I might know why this wasn't seen before. Sometime back the job client was modified, for oozie, to get a HS token if the conf mapreduce.history.server.delegationtoken.required is defined. Acquiring a RM token will implicitly set the conf value. If set, job submission will automatically get a HS token with a renewer of Master.getMasterPrincipal(conf) which returns yarn.resourcemanager.principal. Perhaps the HS token fetching was added post-2.0.2?
I think the change in MAPREDUCE-4921 (using Master.getMasterPrincipal(conf) as the renewer) is what exposed this. Doesn't affect the DFS tokens, since there's an explicit isSecurityEnabled() check before attempting to get HDFS delegation tokens. , That might be it.  On a tangent, there shouldn't be an explicit check because the remote server might have security enabled, but that's a separate issue...

I've got a patch I'm almost done testing that will reduce principals to simple names if security is off.  I can also finally run all but a few tests when my machine is kinit-ed!, I'd be more than happy to test any patches in Bigtop, This should allow kinit-ed users, or full principals, to be reduced to simple user names when the client is using SIMPLE auth.  I did this by changing the default auth_to_local value if it's not set.  Kerberos does what it did before, other auths now default to simple reduction unless explicit rules are defined.

Seems to pass all the auth/token related tests.

[~tucu00], please take a look at my removal and simplification of the seemingly awkward rules loading logic.  I traced it down to an old jira of yours that appears to have worked around a manifestation of this bug.

[~rvs], sure, please give it a whirl!, {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12573606/HADOOP-9299.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 tests included appear to have a timeout.{color}

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-common-project/hadoop-common.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HADOOP-Build/2325//testReport/
Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/2325//console

This message is automatically generated., In UGI, the skip check should be kept, else it will break things for things using hadoop-auth which don't use hadoop config files in their classpath (Oozie, HttpFS).

{code}
-      if (!skipRulesSetting) {
-        HadoopKerberosName.setConfiguration(conf);
-      }
+      HadoopKerberosName.setConfiguration(conf);
{code}
, Unless I'm missing something, we are using the Kerberos principal short name when interacting with an unsecure cluster, that seems wrong, no?, bq. In UGI, the skip check should be kept, else it will break things for things using hadoop-auth which don't use hadoop config files in their classpath.

I think in those cases the defaults will kick in, which is the behavior we'd want?  Or is there a quirk that will cause problems?

bq. Unless I'm missing something, we are using the Kerberos principal short name when interacting with an unsecure cluster, that seems wrong, no?

Please elaborate?  Overall, I don't believe this patch causes any fundamental change in behavior - other than making insecure clients/servers be able to perform simple reduction of a principal in the absence of explicit rules.  A few observations:
* Within the UGI, the short name appears to be computed in the ctor for use as a key in the group name cache.  That's typically not required on the client-side.  External to the UGI usage should experience no change in behavior.  In either case, I don't think new issues have been introduced?
* An IPC connection will (already) pass the full principal in the connection context.  It's up to the insecure server to reduce the principal to a short name.  I haven't tested, but w/o this patch, I think an insecure server will choke on the kerberos principal unless configured with rules.
* The token operations do already inconsistently pass a short name or principal for the various fields.  Now that's wrong, and should always be the full principal, but it's a separate issue to fix.

Is there somewhere that I've made something "worse"?  Or are you referring to pre-existing issues that should be addressed on another jira?, Oh, I see the problem regarding skipping rules.  Hadoop-auth is explicitly setting the rules itself.  I'm surprised I missed that since I scrutinized the code after seeing that seemingly odd condition.  The interactions seem a bit fragile, but I'll put it back in. , on the rules setting, you got it.

on using the kerberos principal short name instead the uid for non-secure cluster, you are right that you are not changing behavior or making it worse, that is the current behavior. still it seems wrong to me as it would mean that a client depending on being kinit-ed or not it could be a different user for a non-secure cluster. we should not fix this as part of this ticket, but I think we should fix that.

, Restored prior behavior of rule setting, and added a bunch of tests for it., I can see the kinit and non-secure issue going either way.  I'd actually lean towards the TGT is the source of truth if present.  Having the user appear as the TGT user on a secure cluster, and as the unix user to a insecure cluster may be a bit jarring.  Or if security is enabled but then disabled on a cluster, the user may be surprised that the TGT user is no longer their identity., Daryin, patch looks good, still don't see the need for the skipRulesSetting to overrideNameRules logic change. Is that necessary ? I don't see how the new || condition would exercise a different selection than the previous logic.

On the kerberos principal shortname and uid, I don't know what to make out of it, I don't think the current behavior is entirely correct but I see you point., {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12573765/HADOOP-9299.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 tests included appear to have a timeout.{color}

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-common-project/hadoop-auth hadoop-common-project/hadoop-common.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HADOOP-Build/2329//testReport/
Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/2329//console

This message is automatically generated., The boolean & corresponding logic change aren't strictly necessary.  The dispersed logic for setting rules was a bit puzzling when I started on the jira.  I thought it would be cleaner and easier to understand if all the rule logic is encapsulated within one method., [~alejandro.villa], are you ok with the implementation?, +1 (sorry, thought I've +1ed yesterday, my jira app may have acted up), Daryn, thanks for providing a patch! I've updated it to be applicable to the branch-2.0.4-alpha and pulled into Bigtop. Things did improve slighly but we don't seem to be out of the woods yet. Now, I'm getting the exception that seems to be somehow krb related when Oozie tries to submit a job. I filed HADOOP-9409 to track it.

Thank you guys for your help tracking this down!, Integrated in Hadoop-trunk-Commit #3484 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/3484/])
    HADOOP-9299.  kerberos name resolution is kicking in even when kerberos is not configured (daryn) (Revision 1457763)

     Result = SUCCESS
daryn : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1457763
Files : 
* /hadoop/common/trunk/hadoop-common-project/hadoop-auth/src/main/java/org/apache/hadoop/security/authentication/util/KerberosName.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/HadoopKerberosName.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/UserGroupInformation.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/TestUserGroupInformation.java
, Thanks!  I've committed to branch trunk/2., Wasn't there an agreement for this to be fixed for 2.0.4-alpha?, As far as I remember it should go to 2.0.4-alpha branch. I will commit it in in the afternoon unless it is done earlier., Thanks Cos! I'm attaching a backport of the original patch into branch-2.0.4, Backporting to 2.0.4-alpha, Apparently it has been already merged into branch-2 earlier
r1457770 | daryn | 2013-03-18 07:05:09 -0700 (Mon, 18 Mar 2013) | 2 lines

svn merge -c 1457763 FIXES: HADOOP-9299.  kerberos name resolution is kicking in even when kerberos is not configured (daryn)

Thanks Daryn! The ticket hasn't been marked as such.
, Arguably, the record in the CHANGES.txt file should go to 2.0.4-alpha section., bq. Apparently it has been already merged into branch-2 earlier
But is hasn't been ported back to branch-2.0.4-alpha. It's there now., Sorry, didn't mean to assign this to myself., Integrated in Hadoop-Yarn-trunk #160 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk/160/])
    HADOOP-9299.  kerberos name resolution is kicking in even when kerberos is not configured (daryn) (Revision 1457763)

     Result = SUCCESS
daryn : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1457763
Files : 
* /hadoop/common/trunk/hadoop-common-project/hadoop-auth/src/main/java/org/apache/hadoop/security/authentication/util/KerberosName.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/HadoopKerberosName.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/UserGroupInformation.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/TestUserGroupInformation.java
, Integrated in Hadoop-Hdfs-trunk #1349 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/1349/])
    HADOOP-9299.  kerberos name resolution is kicking in even when kerberos is not configured (daryn) (Revision 1457763)

     Result = FAILURE
daryn : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1457763
Files : 
* /hadoop/common/trunk/hadoop-common-project/hadoop-auth/src/main/java/org/apache/hadoop/security/authentication/util/KerberosName.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/HadoopKerberosName.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/UserGroupInformation.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/TestUserGroupInformation.java
, Integrated in Hadoop-Mapreduce-trunk #1377 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/1377/])
    HADOOP-9299.  kerberos name resolution is kicking in even when kerberos is not configured (daryn) (Revision 1457763)

     Result = FAILURE
daryn : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1457763
Files : 
* /hadoop/common/trunk/hadoop-common-project/hadoop-auth/src/main/java/org/apache/hadoop/security/authentication/util/KerberosName.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/HadoopKerberosName.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/UserGroupInformation.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/TestUserGroupInformation.java
]