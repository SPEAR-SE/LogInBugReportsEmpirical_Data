[This resolves the issue by branching the Path.getFileSystem if the conditions are met (WINDOWS, null scheme and drive in path). Tested this and resolves the problems I was having., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12648469/HADOOP-10663.1.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:red}-1 core tests{color}.  The patch failed these unit tests in hadoop-common-project/hadoop-common:

                  org.apache.hadoop.net.TestNetUtils

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HADOOP-Build/4010//testReport/
Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/4010//console

This message is automatically generated., The test failure does not seem to be related to the patch., OK, the test fails because it has a dependency on 3w.org being resolved in DNS. That is 3w.org, not w3.org. 3w.org does no resolve today. So I guess the 'possible' issue in HADOOP-8372 has become a real issue..., HADOOP-10664 tracks the infra test failure, Reload patch again to trigger QA , {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12648604/HADOOP-10663.1.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-common-project/hadoop-common.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HADOOP-Build/4014//testReport/
Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/4014//console

This message is automatically generated., I'm not in favor of committing this patch.  This is a continuation of comments that I left on MAPREDUCE-5912 here:

https://issues.apache.org/jira/browse/MAPREDUCE-5912?focusedCommentId=14029597&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-14029597

The issue raised in MAPREDUCE-5912 is that a change was made that started looking for map outputs on the default file system instead of the local file system.  This causes problems on Windows if HDFS is the default file system, because the path will have a colon due to the drive specifier, and a colon isn't a valid character in an HDFS file name.  As I said in my MAPREDUCE-5912 comment, I don't think that change was correct, even if it appears to be working in non-Windows environments.

For the patch here, imagine a situation where the default file system is neither the local file system nor HDFS, and that file system implementation does allow colons in file names.  With this patch, a {{Path}} with no scheme and a path that "looks like" a Windows path with a drive spec can get misrouted to local file system instead of the default file system.  I admit this is somewhat contrived, but it sure would create confusion if anyone ran into it.

I'd like to resolve this as won't fix.  [~rusanu] and [~chris.douglas], does this sound OK?, I'm confused. This was the change:
{noformat}
         Path mapOutput =  mapOutputFile.getOutputFile();
-        FileSystem localFS = FileSystem.getLocal(conf);
-        return localFS.getFileStatus(mapOutput).getLen();
+        FileSystem fs = mapOutput.getFileSystem(conf);
+        return fs.getFileStatus(mapOutput).getLen();
{noformat}

That code should work if {{mapOutput}} is a fully qualified {{Path}}, right?, [~cnauroth] I agree, lets go with MAPREDUCE-5912. But on the argument of the hypothetical FS that accepts colon I would say than, on the same logic, there will never ever be a way to determine the FS from a Path that has not scheme. Any heuristic that infers the FS from name can be defeated by a carefully constructed future FS :) In other words scheme should be mandatory, bq. That code should work if {{mapOutput}} is a fully qualified {{Path}}, right?

Yes, that's correct.  You mentioned that MAPREDUCE-5269 includes changes to guarantee the {{Path}} instances are fully qualified.  Thanks for pointing that out.  The problem is that MAPREDUCE-5269 isn't committed yet, and it's a larger patch that will take more time to review, so I'm going to proceed with committing MAPREDUCE-5912 for a short-term fix.

bq. Any heuristic that infers the FS from name can be defeated by a carefully constructed future FS  In other words scheme should be mandatory

In general, yes, I agree.  I prefer using a fully-qualified {{Path}}, particularly around service or process boundaries where the {{Configuration}} instances might be different.  Even better would be a way to statically type-check relative vs. fully-qualified, but this is a long-standing limitation of the {{Path}} class and the underlying {{URI}} that it wraps.

However, we've also historically had the behavior that if the {{Path}} doesn't have a scheme, then it gets mapped to the default {{FileSystem}} based on configuration.  Like you said, it's imperfect, but it's sometimes convenient, and we need to maintain that behavior for backwards-compatibility.  The patch here would create a risk of bypassing that logic, which is an expected part of the contract., Ah, I misunderstood this bug, then. I thought that {{Path}} instances that included the drive spec failed to resolve to the local FS, and missed the interaction with the default FS.

Closing this as WONTFIX makes sense., Thanks, Chris.  Resolving.]