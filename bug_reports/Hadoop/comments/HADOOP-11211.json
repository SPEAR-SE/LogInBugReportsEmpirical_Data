[I'm thinking about change the return first match logic to an "AND" logic.

In this way, if a class name matches both a positive pattern and a negative pattern, that class will still be excluded.

For example settings like:
mapreduce.job.classloader.system.classes=-foo.bar.tar.,foo.bar.
and mapreduce.job.classloader.system.classes=foo.bar.,-foo.bar.tar.

Should behave as including all foo.bar.* classes into system classes other than foo.bar.tar.* classes. 

And if we see mapreduce.job.classloader.system.classes=foo.bar.,-foo.bar, we end up not including foo.bar in this logic.

Could anyone point out whether this makes sense?, Thanks for reporting this [~timyitong]!

Actually this needs a little discussion. I agree that the current behavior is not as well documented as it should. As you stated, it is a "first-match-wins" behavior.

What you propose also seems reasonable, but needs more clarification. Your proposal is to disregard the order and consider all matches and do their logical AND's. But there can be cases where that rule is counter-intuitive. In your example, if you have "foo.bar.,-foo.bar." it would mean that the class is not considered a system class. Does that mean that an exclusion match is stronger than an inclusion match?

Here is an even more interesting case: how about "foo.bar.tar.,-foo.bar."? One reasonable interpretation of this may be that "exclude everything that belongs to foo.bar. but still include foo.bar.tar.". However, using the AND rule, it would mean that all classes under "foo.bar" would be excluded and the "foo.bar.tar." rule would be effectively ignored.

Also, how about a exact match (e.g. "foo.bar.MyClass")? Would it need to be considered over package matches?, In grep and and seemingly with ant's fileset exclusion has higher precedence than inclusion.

{quote}
     --include
             If specified, only files matching the given filename pattern are searched.  Note that --exclude patterns take priority over
             --include patterns.  Patterns are matched to the full path specified, not only to the filename component.
{quote}

I suggest we follow this for consistency. Mathematically it matches best the intuition.
SET = INCL_SET \  EXCL_SET, Sounds reasonable. [~timyitong], let me know if you want to work on this. Otherwise, I can take it on., Hi [~sjlee0]: if you do not mind, I'd be happy to continue working on this issue.

To follow up the previous discussion: the example you provided "foo.bar.tar.,-foo.bar." can actually be simplified into "foo.bar.tar." to achieve the equivalent effect because for anything not listed in the property, it is assumed not to be a system class. The more often reason for introducing an exclusion in this property could be to do a minor adjustment over a larger inclusion. Combining [~jira.shegalov]'s comments, giving exclusion a higher priority over inclusion seems to be reasonable here. 

Any further thoughts?, Sounds good., I'm having troubles in successfully running all tests in my local repo. (Getting errors related with Kerberos and authentication. Feels like I need some more time to figure out how to fix it.)

I did test it with the class alone and succeeded. Should I try fix my local test environment before trying to run the patch Hudson?

Also it seems like dev-support/test-patch.sh does not work either, my guess is because of the same reason "mvn test" fails., [~timyitong], I think it's fine to just check whether the tests in the patch work locally. In this case:
{code}
> mvn clean test -Dtest=org.apache.hadoop.util.TestApplicationClassLoader
{code}

Don't forget to click "Submit Patch" to change the JIRA status to "Patch available" to kick off Jenkins., Submitting patch... , {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12679394/HADOOP-11211.patch
  against trunk revision 0762b4a.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-common-project/hadoop-common.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HADOOP-Build/5025//testReport/
Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/5025//console

This message is automatically generated., LGTM., +1 (non-binding) for the code change. 

I would add javadoc to {{o.a.h.u.ApplicationClassLoader#isSystemClass}} with the behavior description: a class is a system class iff it matches one of the positive patterns and none of the negative ones. Similarly in mapred-default.xml for {{mapreduce.job.classloader.system.classes}} we should clarify that exclusions take precedence , +1.
I also concur with [~jira.shegalov] comments to include some description in the method level. Anyone want to make changes in future, will get the benefit.
 , [~jira.shegalov]: good suggestion! I'll update the javadoc for {code}ApplicationClassLoader#isSystemClass{code}. And also I found mapred-default.xml at {code}hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/resources/mapred-default.xml{code}. Is this {code}mapred-default.xml{code} you are referring to? Is there any other places I might need to consider?, Yep, that's the one., [~timyitong], you'll have to do minor tweaks when rebasing your patch because [~jlowe] committed MAPREDUCE-6163., Sure. [~jira.shegalov] thanks for letting me know that., Submitting an updated patch, merging with [HADOOP-11309|https://issues.apache.org/jira/browse/HADOOP-11309] and also added docs in mapred-default.xml., Resubmitting... Seems like I should firstly upload files and then click submit.., [~timyitong], you should rebase to/merge with the latest trunk. You somehow have some of MAPREDUCE-6128.v05.patch in mapred-default.xml, {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12682358/HADOOP-11211.patch
  against trunk revision 5bd048e.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-common-project/hadoop-common hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HADOOP-Build/5103//testReport/
Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/5103//console

This message is automatically generated., Hi [~jira.shegalov]: 
Compared to MAPREDUCE-6128.v05.patch, it does seem like I have some old stuff in mapred-default.xml:
{code}
// Mine:
-    in '.' (period) are treated as package names, and names starting with a '-'
-    are treated as negative matches.
+    in '.' (period) are treated as package names, names containing '$' are treated
+    as nested classses, and names starting with a '-' are treated as negative matches.

// MAPREDUCE-6128.v05.patch
-    in '.' (period) are treated as package names, and names starting with a '-'
+    in '.' (period) are treated as package names, names ending with a '$'
+    are treated as inner classes, and names starting with a '-'
{code}

Somehow my dev-box's connection with the apache git server (git://git.apache.org/hadoop.git) is jammed, and I cannot get a response from it after a long wait; so I rebased my repo against the github trunk. I'm pretty the github trunk does not contain MAPREDUCE-6128.v05.patch changes in mapred-default.xml. Could that be a problem? Should I try fix the connection with apache server and rebase against that git?

But is that patch already submitted into the trunk? The JIRA ticket is still open., [~timyitong] MAPREDUCE-6128 is not committed, so you must have some leftovers from your local repo if you tried it out at some point. I recommend that you create a branch for each JIRA to avoid mixups. It's probably better if you could work with Apache Git directly to have the latest trunk. Then you could have your JIRA patch branches track the upstream trunk:
{code}
git branch --set-upstream-to=git branch --set-upstream-to=apache-git/trunk/trunk 
{code}

where apache-git is a remote for the Apache repo. Then you can easily {{git pull --rebase}} to refresh your patch
, [~jira.shegalov]: I'm a bit confused. If MAPREDUCE-6128 is not committed, then why my change in mapred-default.xml is a problem? Both of the two lines are added by me including the one regarding inner classes (not pulled in from any branch), I just feel it necessary to also add a comment about inner classes after I merged my change with it.

Do you actually mean that I should only add comments regarding to my fix in system classloader, and remove the line about inner classes?, [~timyitong], sorry for confusion, I did not realize it was your intention to add wording about the nested classes. The reason for confusion is that patterns with '$' are not supported and it was the patch MAPREDUCE-6128.v05.patch that tried to add this pattern.

HADOOP-11309 implements matching all nested classes of the class C if the pattern is a single class C.

If you want to be precise, you can spell out the format of system.classes: comma-separated list of patterns.
A pattern may define an inclusion (positive):
# A single class 'C' that matches C and transitively all nested classes C$* defined in C
# A package name followed by a '.' (e.g., "com.example.") that matches all classes files from the package

Exclusion can be defined by a negative pattern -P if P is a positive pattern as defined above.

A class is considered a system class if and only if it matches one of the positive patterns and none of the negative ones. More formally:

A class is member of the Inclusion set {{I}} if it is matched by one of the positive patterns. A class is member of the Exclusion set {{E}} if it is matched by one of negative patterns P. The set of system classes {{S = I \ E}}




, [~timyitong], will you be able to update the patch soon?, Hi [~jira.shegalov]: thanks for the notice. I'll update it in these two days. Sorry for keeping you waiting., Updated patch., {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12685528/HADOOP-11211.003.patch
  against trunk revision e227fb8.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-common-project/hadoop-common hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HADOOP-Build/5173//testReport/
Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/5173//console

This message is automatically generated., +1, will hold off until early next week before committing., Looks good to me, too., Committed to trunk and branch-2. Thanks [~timyitong] for contribution, [~sjlee0] and [~kamrul] for helping review the patch. , FAILURE: Integrated in Hadoop-trunk-Commit #6700 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/6700/])
HADOOP-11211. mapreduce.job.classloader.system.classes semantics should be order-independent. (Yitong Zhou via gera) (gera: rev 0bcea111e5daa9a4315346cf6919a4cfc8d90e0d)
* hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestApplicationClassLoader.java
* hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/ApplicationClassLoader.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/resources/mapred-default.xml
* hadoop-common-project/hadoop-common/CHANGES.txt
, FAILURE: Integrated in Hadoop-Yarn-trunk-Java8 #38 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk-Java8/38/])
HADOOP-11211. mapreduce.job.classloader.system.classes semantics should be order-independent. (Yitong Zhou via gera) (gera: rev 0bcea111e5daa9a4315346cf6919a4cfc8d90e0d)
* hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/ApplicationClassLoader.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/resources/mapred-default.xml
* hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestApplicationClassLoader.java
* hadoop-common-project/hadoop-common/CHANGES.txt
, FAILURE: Integrated in Hadoop-Yarn-trunk #773 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk/773/])
HADOOP-11211. mapreduce.job.classloader.system.classes semantics should be order-independent. (Yitong Zhou via gera) (gera: rev 0bcea111e5daa9a4315346cf6919a4cfc8d90e0d)
* hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestApplicationClassLoader.java
* hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/ApplicationClassLoader.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/resources/mapred-default.xml
* hadoop-common-project/hadoop-common/CHANGES.txt
, SUCCESS: Integrated in Hadoop-Hdfs-trunk #1970 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/1970/])
HADOOP-11211. mapreduce.job.classloader.system.classes semantics should be order-independent. (Yitong Zhou via gera) (gera: rev 0bcea111e5daa9a4315346cf6919a4cfc8d90e0d)
* hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/ApplicationClassLoader.java
* hadoop-common-project/hadoop-common/CHANGES.txt
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/resources/mapred-default.xml
* hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestApplicationClassLoader.java
, FAILURE: Integrated in Hadoop-Hdfs-trunk-Java8 #36 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk-Java8/36/])
HADOOP-11211. mapreduce.job.classloader.system.classes semantics should be order-independent. (Yitong Zhou via gera) (gera: rev 0bcea111e5daa9a4315346cf6919a4cfc8d90e0d)
* hadoop-common-project/hadoop-common/CHANGES.txt
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/resources/mapred-default.xml
* hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestApplicationClassLoader.java
* hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/ApplicationClassLoader.java
, FAILURE: Integrated in Hadoop-Mapreduce-trunk-Java8 #40 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk-Java8/40/])
HADOOP-11211. mapreduce.job.classloader.system.classes semantics should be order-independent. (Yitong Zhou via gera) (gera: rev 0bcea111e5daa9a4315346cf6919a4cfc8d90e0d)
* hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/ApplicationClassLoader.java
* hadoop-common-project/hadoop-common/CHANGES.txt
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/resources/mapred-default.xml
* hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestApplicationClassLoader.java
, FAILURE: Integrated in Hadoop-Mapreduce-trunk #1990 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/1990/])
HADOOP-11211. mapreduce.job.classloader.system.classes semantics should be order-independent. (Yitong Zhou via gera) (gera: rev 0bcea111e5daa9a4315346cf6919a4cfc8d90e0d)
* hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/ApplicationClassLoader.java
* hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestApplicationClassLoader.java
* hadoop-common-project/hadoop-common/CHANGES.txt
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/resources/mapred-default.xml
]