[I just fixed this., Doug,
   Doesn't your fix break on unix if the user has a directory named "\\foo"? Certainly it would be a strange name, but it is legal. I was also curious why you took out setting the System property. It was convienent to be able to set the working directory on the local file system and be able to use File.getAbsolutePath(). Could we extend the FileSystem interface to add makeAbsolute?, > Doesn't your fix break on unix if the user has a directory named "\\foo"?

Perhaps.  I did not test this case.  I was just despately trying to get Nutch to work correctly standalone & pseudo-distributed on Windows and linux.  There may still be bugs.

Changing the global system directory caused strange behaviour on Windows, and also seems like a bad idea.  Isn't the point of a default directory for job and fs instances to insulate them from the global system default directory?  We do currently cache the LocalFs instance, which may be a bug, but changing the process's CWD affects other applications in the JVM (like even our own datanode & namenode) which might not expect the CWD to move under them.

> Could we extend the FileSystem interface to add makeAbsolute?

The long-term fix that I'd like to see is that we stop using java.io.File for file names.  We could use String, we could use our own FileName class, or we could perhaps use java.net.URI.  The advantage of URI is that it can also naturally include the namenode host and port.  The disadvantage is that URI does not support tree operations like getParent().  I'll log a bug for this.]