[The things to fix look like:
# document that the method eats up {{InterruptedException}}
# break after setting interrupted to true in the catch block
# throw appropriate exception in the {{else}} branch of {{if (call.error != null)}}, (1) is insufficient since clients often do not directly call this method. I believe that if this method gets interrupted:
* Clean up the call object - seems like some clean up is required in the Connection object.
* throw InterruptedException, regardless of whether the calls complete successfully or not., To ensure that the real client that calls this should know that the call was interrupted, rather than forcing it to check the thread's interrupt flag. , My take on what should really happen in the catch block:
* call.setException()
* Remove call from the calls table.
* In the receiveResponse method, check if calls.get(callId) returns null before proceeding.
* throw the InterruptedException (or wrap it and then throw), so client code can know something went wrong and the call failed., This is similar to HADOOP-6221, though you are proposing more cleanup. 

Could you use that patch and test as a starting point?, I agree that both are pretty similar, but I think we still need to do the cleanup I am proposing here right?, From HADOOP-6221:
bq. I think a good tactic would be rather than trying to make the old RPC stack interruptible, focus on making Avro something that you can interrupt, so that going forward you can interrupt client programs trying to talk to unresponsive servers.

Steve, is there a reason for not making the old RPC stack interruptible?

I feel we should do both - what Hari is proposing here, and what HADOOP-6221 addresses., given the RPC stack is still around, +1 to making it interruptible -it hurts external clients the most.

and +1 to both fixes -they should all go together, Karthik, Steve - makes complete sense.]