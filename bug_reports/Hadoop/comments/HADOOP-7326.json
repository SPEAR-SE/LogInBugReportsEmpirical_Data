[The problem is that testTrashEmptier() naively counts all the objects in .Trash, but it needs to filter for only Trash checkpoint subdirectory objects, the same way Trash.expunge() does.

This patch fixes the problem, and also cleans up some logging in the Trash class, to make it more useful in interpreting such situations., - Rather than making CHECKPOINT public, can you add a new method like Trash.isCheckpointFileName(String)?
- It's still not clear why TestHDFSTrash was putting stuff in the local filesystem's .Trash folder. There are two things wrong there - 1) TestHDFSTrash is supposed to test HDFS, not local, and 2) it seems to try to set up the .Trash dir inside build/ so that different builds dont interact poorly., Hi Todd,
bq. Rather than making CHECKPOINT public, can you add a new method like Trash.isCheckpointFileName(String)?

I'd prefer not to create this new API, for the following reasons:
* CHECKPOINT isn't public, it's protected, which is common practice in the Hadoop codebase for exposing internal stuff to unit tests.  
* It's a static final constant, so there's no harm in exposing it.  
* I only want to test the basename, not the whole path, so claiming "isCheckpointFileName" is larger scope than needed.  
* There's no other demand for a test for "isCheckpointBasename", as shown by the fact that it doesn't already exist.

bq. It's still not clear why TestHDFSTrash was putting stuff in the local filesystem's .Trash folder. There are two things wrong there - 1) TestHDFSTrash is supposed to test HDFS, not local...

Completely agree, so I've copied your comment into HDFS-1967, which deals with TestHDFSTrash.  If you can help me understand what TestHDFSTrash thinks it's doing, and whether it accomplishes it, I'd appreciate it.  (I think it's trying to do exactly equivalent tests on Local FileSystem with TestTrash and HDFS FileSystem with TestHDFSTrash, but it doesn't seem to be succeeding.)

bq. ...and 2) it seems [it should] try to set up the .Trash dir inside build/ so that different builds dont interact poorly.

Yah, this is a weird one.  I'm told that Trash is a fairly old feature, and was deliberately set up so that on local filesystems it would use the local canonical Trash.  Not what I would have chosen, but changing would require not just a change to the unit test, but a large change to the semantics of Trash.

Please let me know if you can +1 this patch on the basis of these responses.  Thanks., Minor goof: the last LOG.warn() statement uses "+ e" but should use ", e", In HADOOP-7284, Todd observes that TestTrash is "supposed to set up a LocalFileSystem subclass (TestLFS) that responded with a directory inside build/ as a home dir".  Seems like that would be a good way to get around this silliness with shared .Trash directory.  It looks like the current implementation is deficient.  I'll look into fixing it., FSMainOperationsBaseTest is a nice class that seems well-behaved for sharing between unit tests of multiple FileSystems, both Local and HDFS.  It uses FileSystemTestHelper for setting up test data root directories.
, I think I found the problem with TestTrash using one's personal .Trash folder instead of something from the "TestLFS" file system.  The main testcase, #testTrash() sets the TestLFS correctly, then calls #trashShell(FileSystem, Path), which throws away the config object in which the TestLFS was set, and instantiates a new one instead.  I've changed it to call fs.getConf() instead, thereby preserving the use of the TestLFS configuration., I think we need to incorporate the patch submitted in HDFS-1967
]