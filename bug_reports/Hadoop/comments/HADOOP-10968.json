[This patch fixes an isssue, Improved version, check first if ppc64le is used. 

Note: IBM Java is using it., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12661469/0001-Set-java_libarch-for-ppc64le-1.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:red}-1 javac{color:red}.  The patch appears to cause the build to fail.

Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/4463//console

This message is automatically generated., Fixed cmake syntax, {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12661482/0001-Set-java_libarch-for-ppc64le-2.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:red}-1 core tests{color}.  The patch failed these unit tests in hadoop-common-project/hadoop-common:

                  org.apache.hadoop.security.token.delegation.web.TestWebDelegationToken
                  org.apache.hadoop.metrics2.impl.TestMetricsSystemImpl
                  org.apache.hadoop.ha.TestZKFailoverController
                  org.apache.hadoop.ha.TestZKFailoverControllerStress
                  org.apache.hadoop.ipc.TestDecayRpcScheduler

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HADOOP-Build/4465//testReport/
Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/4465//console

This message is automatically generated., Thanks for this, Dinar.

{code}
+    ELSEIF (CMAKE_SYSTEM_PROCESSOR MATCHES "^(powerpc|ppc)64le")
+        IF(EXISTS "${_JAVA_HOME}/jre/lib/ppc64le")
+                SET(_java_libarch "ppc64le")
+        ELSE()
+                SET(_java_libarch "ppc64")
+        ENDIF()
{code}

I don't understand how this works with big-endian powerpcs.  I don't think this regex will match "powerpc" or "ppc", but only "powerpc64le" and "ppc64le", right?  Do big-endian powerpcs show up as ppc64le?  That seems odd.

I also don't understand why we're checking for the existence of a directory to decide on the architecture... is this really the only option?

Of course, I might be completely off base here, since I don't have access to any ppc systems., On ppc64 (big-endian) javaarch matches ppc64. While on ppc64le it can be ppc64(openjdk) or ppc64le(IBM Java).
openJDK since 2.5 sets ppc64 as java arch, openJDK lower than 2.5 has ppc64le. IBM Java still sets ppc64le so we need that check for backward compatibility.
It is no possible to run LE code on ppc64, so there is no chance to see ppc64le libarch on big-endian. , OK, so this patch only helps little-endian PPC machines.  That's fine.  Someone else can contribute a patch for the big-endian ones later if they want.

I am +1 on this patch.  Will wait a day or so to commit in case anyone else wants to comment., ppc64(BE) still should be fine,since libarch matches CMAKE_SYSTEM_PROCESSOR, Thanks, Dinar.  +1.  Will commit to 2.6, P.S. Test failures are unrelated to this change to the native code, FAILURE: Integrated in Hadoop-trunk-Commit #6088 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/6088/])
HADOOP-10968. hadoop native build fails to detect java_libarch on ppc64le (Dinar Valeev via Colin Patrick McCabe) (cmccabe: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1618919)
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/JNIFlags.cmake
, FAILURE: Integrated in Hadoop-Mapreduce-trunk #1868 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/1868/])
HADOOP-10968. hadoop native build fails to detect java_libarch on ppc64le (Dinar Valeev via Colin Patrick McCabe) (cmccabe: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1618919)
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/JNIFlags.cmake
, SUCCESS: Integrated in Hadoop-Yarn-trunk #652 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk/652/])
HADOOP-10968. hadoop native build fails to detect java_libarch on ppc64le (Dinar Valeev via Colin Patrick McCabe) (cmccabe: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1618919)
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/JNIFlags.cmake
, FAILURE: Integrated in Hadoop-Hdfs-trunk #1843 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/1843/])
HADOOP-10968. hadoop native build fails to detect java_libarch on ppc64le (Dinar Valeev via Colin Patrick McCabe) (cmccabe: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1618919)
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/JNIFlags.cmake
, I think that this patch is wrong. The issue is not in Hadoop, but in OpenJDK, which says that arch=ppc64 (BE) instead of ppc64le.
Instead of patching all tools that follow OpenJDK mistake on PPC64LE (saying it is ppc64 and thus Big-Endian), one has to patch OpenJDK only.

I have opened (RHEL 7.1 beta / PPC64LE):
https://bugzilla.linux.ibm.com/show_bug.cgi?id=121218
https://bugzilla.linux.ibm.com/show_bug.cgi?id=121669
Second one has shown issues with Maven.

WIth OpenJDK  (RHEL 7.1 beta / PPC64LE), Maven says:
$ mvn -version
Apache Maven 3.2.1 (ea8b2b07643dbb1b84b6d16e1f08391b666bc1e9; 2014-02-14T11:37:52-06:00)
Maven home: /opt/apache-maven-3.2.1
Java version: 1.7.0_71, vendor: Oracle Corporation
Java home: /usr/lib/jvm/java-1.7.0-openjdk-1.7.0.71-2.5.3.4.ael7b.ppc64le/jre
Default locale: en_US, platform encoding: ISO-8859-1
OS name: "linux", version: "3.10.0-221.ael7b.ppc64le", arch: "ppc64", family: "unix"
                                                                                      ^^^^^^^^^^^^^

WIth IBM JVM  (RHEL 7.1 beta / PPC64LE), Maven says (arch=ppc64le):
$ mvn -version
Apache Maven 3.2.3 (33f8c3e1027c3ddde99d3cdebad2656a31e8fdf4; 2014-08-11T15:58:10-05:00)
Maven home: /opt/apache-maven-3.2.3
Java version: 1.7.0, vendor: IBM Corporation
Java home: /usr/lib/jvm/ibm-java-ppc64le-71/jre
Default locale: en_US, platform encoding: UTF-8
OS name: "linux", version: "3.10.0-221.ael7b.ppc64le", arch: "ppc64le", family: "unix"
                                                                                       ^^^^^^^^^^^^^, Nuts ! The JIRA tools suppress blanks at beg of lines before the "^^^^^^^^^^^^".
The examples of Maven are:

WIth OpenJDK (RHEL 7.1 beta / PPC64LE), Maven says: arch=ppc64
$ mvn -version
...
OS name: "linux", version: "3.10.0-221.ael7b.ppc64le", arch: "ppc64", family: "unix"
.......................................................................................^^^^^^^^^^^

WIth IBM JVM (RHEL 7.1 beta / PPC64LE), Maven says: arch=ppc64le
$ mvn -version
...
OS name: "linux", version: "3.10.0-221.ael7b.ppc64le", arch: "ppc64le", family: "unix"
.......................................................................................^^^^^^^^^^^^^^
, both BE and LE have ppc64 as javalibarch in openJDK since version 2.5.0. That was upstream descision to go that way.

maven you're pointing to seems haven't catched up with that change yet.

Note prior 2.5 we had ppc64le for LE., I do not understand the rationale for OpenJDK to consider PPC64LE machine as ppc64 architecture and ask all tools using a JVM to adapt their code in order to fix this strange choice. This change is not compatible with past.

I'm using version 3.2.1 of Maven because other versions (older or fresher) have shown issues with Hadoop. This one seems stable.
I do not understand why I should patch this version of Maven, or use a fresh new one because someone has decided that OpenJDK will mess up ppc64 and ppc64le.
I do not understand why I should check that all the tools I'm using have been patched for adapting with the choice made by OpenJDK.
I do not see the benefits of this choice. I only see drawbacks.

Owner of https://bugzilla.linux.ibm.com/show_bug.cgi?id=121669 seems to want to "bring this up with upstream".

Maven 3.2.1 and OpenJDK:
$ mvn -version
Apache Maven 3.2.1 (ea8b2b07643dbb1b84b6d16e1f08391b666bc1e9; 2014-02-14T11:37:52-06:00)
Maven home: /opt/apache-maven-3.2.1
Java version: 1.7.0_71, vendor: Oracle Corporation
Java home: /usr/lib/jvm/java-1.7.0-openjdk-1.7.0.71-2.5.3.4.ael7b.ppc64le/jre
Default locale: en_US, platform encoding: ISO-8859-1
OS name: "linux", version: "3.10.0-221.ael7b.ppc64le", arch: "ppc64", family: "unix"

Maven 3.2.1 and IBM JVM:
$ mvn -version
Apache Maven 3.2.1 (ea8b2b07643dbb1b84b6d16e1f08391b666bc1e9; 2014-02-14T11:37:52-06:00)
Maven home: /opt/apache-maven-3.2.1
Java version: 1.7.0, vendor: IBM Corporation
Java home: /usr/lib/jvm/ibm-java-ppc64le-71/jre
Default locale: en_US, platform encoding: ISO-8859-1
OS name: "linux", version: "3.10.0-221.ael7b.ppc64le", arch: "ppc64le", family: "unix", If this is concern, then why don't you write a test that {{cmake}} can execute to determine the endianness of the ARM machine directly?  See how we handle {{HAVE_BETTER_TLS}} and {{HAVE_INTEL_SSE_INTRINSICS}}., OpenJDK team has decided to have arch="ppc64le" on PPC64LE architecture. And "mvn compile/package" with Hadoop 2.4.1 is now OK. Good ! ;)
See: https://bugzilla.linux.ibm.com/show_bug.cgi?id=121669 , Thanks, Tony.  Can you add the information about which releases of OpenJDK have this problem to the description of this JIRA?  That will help people who are trying to compile., The 2 versions that shown issue with ppc64 arch are:

/usr/lib/jvm/java-1.7.0-openjdk-1.7.0.71-2.5.3.4.ael7b.ppc64le
/usr/lib/jvm/java-1.7.0-openjdk-1.7.0.75-2.5.4.4.ael7b.ppc64le

The version that I have tested with success is:
/usr/lib/jvm/java-1.7.0-openjdk-1.7.0.75-2.5.4.5.ael7b.ppc64le


Please note the comments in 121669 :
"It's good to keep in mind that  even if they "fix" it, both JDK7 and JDK8 have releases out there that are reporting "ppc64" instead of "ppc64" for PPC64LE systems, so everyone will have to either:
1. check for all conditions (os.arch "ppc64le" -OR- os.arch "ppc64" && sun.cpu.endian "little") for backward compatibility with JDK7/JDK8 JVMs (lets hope no other JVM decides to use "ppc64" without a way to tell the endianness)
2. Ignore releases that report "ppc64" for PPC64LE (and tell users not to use those versions)
Anyway, should they decide to fix it anyone depending on JDK9+ only (or ignoring backward compatibility on JDK7/8) will be happy enough.
Hopefully, the life of 2.5.x on ppc64le platforms will be short-lived. 2.6.0 is due to be released, following the upstream release of 7u80 in April."

It is not perfectly clear for me. At least, I understand that there will be a new 1.7 version in April, and that JDK8 also has this issue. Not sure if they plan to fix it. I do not use Java8.]