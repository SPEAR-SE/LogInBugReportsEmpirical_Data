[[~hitesh], what is the intend of doing this?

By reading the JAR spec I don't think it is of much use for us:

  http://download.java.net/jdk8/docs/technotes/guides/jar/jar.html#JAR_Index

Also, looking at Tomcat's issue tracking found:

  https://issues.apache.org/bugzilla/show_bug.cgi?id=49236
, {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12592868/HADOOP-9741.1.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in .

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HADOOP-Build/2803//testReport/
Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/2803//console

This message is automatically generated., [~tucu00] Was mostly looking at it from a performance improvement point of view. I don't believe hadoop has any nested jars or fat-jars that could create the problem raised in the tomcat bug. Do you see a cause for concern with use of indexed jars?, I'm not familiar with the how the indexing works, looking at the generated index file in the META-INF dir of the generated JAR may answer things.

The thing that worries me is that if the index has 'hardcoded' locations of JARs locally, which are determined at build time, that will break things when the JARs are moved to the share/hadoop/*/ directories.

From what I understand, the index disables class lookup in the JARs that are part of an index in another JAR.

Assuming it works, do you know what is the speed-up impact of this?, [~hitesh], I've just applied your patch and created the JARs, for the RM JAR the index looks like:

{code}
META-INF
META-INF/maven
META-INF/maven/org.apache.hadoop
META-INF/maven/org.apache.hadoop/hadoop-yarn-server-resourcemanager
org
org/apache
org/apache/hadoop
org/apache/hadoop/yarn
org/apache/hadoop/yarn/server
org/apache/hadoop/yarn/server/resourcemanager
org/apache/hadoop/yarn/server/resourcemanager/amlauncher
org/apache/hadoop/yarn/server/resourcemanager/monitor
org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity
org/apache/hadoop/yarn/server/resourcemanager/recovery
org/apache/hadoop/yarn/server/resourcemanager/recovery/records
org/apache/hadoop/yarn/server/resourcemanager/recovery/records/impl
org/apache/hadoop/yarn/server/resourcemanager/recovery/records/impl/pb
org/apache/hadoop/yarn/server/resourcemanager/resource
org/apache/hadoop/yarn/server/resourcemanager/rmapp
org/apache/hadoop/yarn/server/resourcemanager/rmapp/attempt
org/apache/hadoop/yarn/server/resourcemanager/rmapp/attempt/event
org/apache/hadoop/yarn/server/resourcemanager/rmcontainer
org/apache/hadoop/yarn/server/resourcemanager/rmnode
org/apache/hadoop/yarn/server/resourcemanager/scheduler
org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity
org/apache/hadoop/yarn/server/resourcemanager/scheduler/common
org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica
org/apache/hadoop/yarn/server/resourcemanager/scheduler/event
org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair
org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/policies
org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo
org/apache/hadoop/yarn/server/resourcemanager/security
org/apache/hadoop/yarn/server/resourcemanager/security/authorize
org/apache/hadoop/yarn/server/resourcemanager/webapp
org/apache/hadoop/yarn/server/resourcemanager/webapp/dao
{code}

no references to other JARs as I was reading in the http://download.java.net/jdk8/docs/technotes/guides/jar/jar.html#JAR_Index. So I'm a bit confused here.

But I guess this could not hurt. Do you have concrete improvement number of this? 
, Attaching an index file for hadoop-common-3.0.0-SNAPSHOT.jar. It is relative to the top of the jar so re-location of the jar itself should not affect this.

The performance improvement from what I have seen is quite small - around 10-20 ms when cycling through the jars in the hadoop classpath with a test program.

Given your concerns with jar-of-jars and the other tomcat issue that I had not come across, I am becoming inclined to not push this in until I can prove more substantial gains on a cluster.





]