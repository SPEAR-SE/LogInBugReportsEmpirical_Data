[Attaching a quick fix. Modified the testcase to reflect the changes. Result of running _test-patch_ on my box :
{code}
[exec] +1 overall.  
     [exec] 
     [exec]     +1 @author.  The patch does not contain any @author tags.
     [exec] 
     [exec]     +1 tests included.  The patch appears to include 3 new or modified tests.
     [exec] 
     [exec]     +1 javadoc.  The javadoc tool did not generate any warning messages.
     [exec] 
     [exec]     +1 javac.  The applied patch does not increase the total number of javac compiler warnings.
     [exec] 
     [exec]     +1 findbugs.  The patch does not introduce any new Findbugs warnings.
{code}
_ant test-contrib_ passes on my box., Though this patch looks correct, we realized when reviewing it, that there are conditions when this can lead to a 'priority inversion' - where jobs of a lower priority which started running first actually block reduce slots from a higher priority job, and hence the higher priority job can effectively not complete. Indeed in some of the initial discussions when doing capacity scheduler, we had said that due to this issue, we will not bump jobs over other running jobs, which is what is currently implemented.

I think this needs some discussion and consensus before closing., Had an offline discussion with Sameer, Owen and Vivek, and we concluded that for the time being we *should* sort the jobs in the running queue. We recognize this could cause a priority inversion problem. However, not sorting seemed extremely counter-intuitive to what the user would expect. There is also no way in which the user can workaround the problem of bumping the priority of his jobs and getting them to run, short of killing other jobs ahead in the queue.

Given these points, we think it will be a good idea to:
- sort the jobs in the running queue as part of this jira.
- solve the problem of priority inversion in a separate jira that can be looked at a little later., bq. solve the problem of priority inversion in a separate jira that can be looked at a little later.

I filed HADOOP-4557 to address the problem of priority inversion., I am documenting a few more discussions that Vivek, Owen and I had.

It is worthwhile to note that there is another problem with maintaining running jobs sorted by priorities. That is the problem of temporary disk space usage. 

For e.g. consider a low priority job that has started running. The maps run for this job will use disk space for storing the intermediate outputs. At this point, if a higher priority job is submitted and it starts running, the space used for the low priority job would be held up until it completes. 

This situation is not new, and exists even with the default scheduler. However, because the capacity scheduler runs multiple jobs concurrently (from multiple queues, or from different users), the problem is slightly more serious in this case.

That said, it is still not clear what a right way of fixing this problem is. At the same time, not sorting running jobs still makes it extremely difficult for users to run high priority jobs in preference to lower priority ones if the need arises. Hence, while the problems with sorting running jobs are acknowledged, we may still want to do this and address the issues in related jiras like HADOOP-4557., Based on the discussions above, we are deciding to go ahead with this fix. I have checked verified the patch applies still to trunk, and here are the latest test-patch results:

     [exec] +1 overall.

     [exec]     +1 @author.  The patch does not contain any @author tags.

     [exec]     +1 tests included.  The patch appears to include 3 new or modified tests.

     [exec]     +1 javadoc.  The javadoc tool did not generate any warning messages.

     [exec]     +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

     [exec]     +1 findbugs.  The patch does not introduce any new Findbugs warnings.

     [exec]     +1 Eclipse classpath. The patch retains Eclipse classpath integrity.

Capacity scheduler tests pass with this patch. No other components should be affected., I just committed this. Thanks, Amar., Integrated in Hadoop-trunk #660 (See [http://hudson.zones.apache.org/hudson/job/Hadoop-trunk/660/])
    . Sort running jobs by priority in the capacity scheduler. Contributed by Amar Kamat.
, Forrest documentation (0.19) for capacity scheduler still maintains that "once a job is running, it will not be preempted for a higher priority job". Need to fix this.]