[jstack dump attached.
, Not sure what is going on since there is not much information in the stack trace.  

Runping, could you apply 3762_20080715.patch to get the stack trace again?  It will show more information in the LeaseChecker stack trace., 3762_20080715b.patch: added stack trace to show who is creating the DFSClient., 3762_20080715c.patch: added debug message to print out FileSystem.CACHE., {code}
//in NameNode.java
  static URI getUri(InetSocketAddress namenode) {
    int port = namenode.getPort();
    String portString = port == DEFAULT_PORT ? "" : (":"+port);
    return URI.create("hdfs://"+ namenode.getHostName()+portString);
  }
{code}
The problem is that the port is not returned if port == DEFAULT_PORT (=8020).  The FileSystem.CACHE does not work if the default port is given.
, For example, calls FileSystem.get("hdfs://host:8020/", conf), then it looks up the cache with username (may be null since user might not have logged in yet) and the uri "hdfs://host:8020/" as a key.  Suppose it fails, it will create a file system object (depending on the FileSystem class, user might login) and put it to the cache with a new key.  The uri in the new key will be "hdfs://host" (no port) since 8020 is the DEFAULT_PORT.  Then, if there is another call to FileSystem.get("hdfs://host:8020/", conf), it won't hit the cache., Here's a potential patch. (I've not tested it yet.)

The problem is that the FileSystem cache uses two different keys: one created from the URI the user passes in and one created from the URI that the FileSystem implementation returns to describe itself.

This patch changes that, so the user-provided URI is always used.  Ideally we could use the normalized form that the FileSystem provides, but we don't yet have a FileSystem instance when we're performing cache lookups., FileSystem.checkPath(Path path) cannot handle hdfs DEFAULT_PORT.  For example,
{code}
FileSystem.checkPath(new Path("hdfs://host:8020/"));
//will get "IllegalArgumentException: Wrong FS: hdfs://host:8020, expected: hdfs://host"
{code}, {code}
//in FileSystem.java
  protected void checkPath(Path path) {
    URI uri = path.toUri();
    if (uri.getScheme() == null)                // fs is relative 
      return;
    String thisScheme = this.getUri().getScheme();
    String thatScheme = uri.getScheme();
    String thisAuthority = this.getUri().getAuthority();
    String thatAuthority = uri.getAuthority();
    //authority and scheme are not case sensitive
    if (thisScheme.equalsIgnoreCase(thatScheme)) {// schemes match
      if (thisAuthority == thatAuthority ||       // & authorities match
          (thisAuthority != null && 
           thisAuthority.equalsIgnoreCase(thatAuthority)))
        return;

      if (thatAuthority == null &&                // path's authority is null
          thisAuthority != null) {                // fs has an authority
        URI defaultUri = getDefaultUri(getConf()); // & is the default fs
        if (thisScheme.equalsIgnoreCase(defaultUri.getScheme()) &&
            thisAuthority.equalsIgnoreCase(defaultUri.getAuthority()))
          return;
      }
      throw new IllegalArgumentException("Wrong FS: "+path+
                                         ", expected: "+this.getUri());
    }
  }
{code}
FileSystem.checkPath(Path path) seems having another problem that if the path has a different scheme, the path passes the check., Here's a new patch that overrides checkPath in DistributedFileSystem to permit paths which explicitly specify the default port., 3762_20080717.patch: fixed FileSystem.checkPath(...) and added a test, This fixes things to use equalsIgnoreCase in DistributedFileSystem#checkPath(), and also so that paths which differ only in scheme are correctly detected., +1 patch looks good, -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12386359/HADOOP-3762.patch
  against trunk revision 677781.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no tests are needed for this patch.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/2897/testReport/
Findbugs warnings: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/2897/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Checkstyle results: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/2897/artifact/trunk/build/test/checkstyle-errors.html
Console output: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/2897/console

This message is automatically generated., Oops.  I forgot to include the test that Nicholas wrote in the patch!, New version of patch that includes tests., +1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12386435/HADOOP-3762.patch
  against trunk revision 678080.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 4 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/2908/testReport/
Findbugs warnings: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/2908/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Checkstyle results: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/2908/artifact/trunk/build/test/checkstyle-errors.html
Console output: http://hudson.zones.apache.org/hudson/job/Hadoop-Patch/2908/console

This message is automatically generated., I just committed this. Thanks, Doug!, Integrated in Hadoop-trunk #581 (See [http://hudson.zones.apache.org/hudson/job/Hadoop-trunk/581/])]