[Here's a patch that implements the recommendation in the RFC.

If you want to actually see the fail-before-pass-after behavior of the new test, run {{mvn test -Dtest=TestHDFSFileContextMainOperations#testPathSchemeNoAuthority}}. The new code only kicks in when the defaultFS has a non-null authority (thus you need {{Hdfs}} and not {{RawLocalFs}})., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12571972/hadoop-9357-1.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

  {color:red}-1 one of tests included doesn't have a timeout.{color}

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-common-project/hadoop-common.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HADOOP-Build/2258//testReport/
Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/2258//console

This message is automatically generated., Add test timeout., {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12571995/hadoop-9357-2.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 tests included appear to have a timeout.{color}

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-common-project/hadoop-common.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HADOOP-Build/2259//testReport/
Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/2259//console

This message is automatically generated., Hey Andrew,

The rationale and change looks good. Nits:
- The new code can live in the first case of the existing if right? Ie all URIs that need fixing are absolute. 
- More descriptive name than "fixPath"? 
- Consider adding new Path method (similar to isAbsoluteAndSchemeAuthorityNull)

Not something we need to fix with this change, but what do you think about moving this logic into the path constructor so we don't have to call this fixup method explicitly all over the place?, Hi Eli, thanks for the review,

bq. The new code can live in the first case of the existing if right? Ie all URIs that need fixing are absolute.

I thought about this a bit, and I think you can have URIs with a scheme and relative path, e.g. {{hdfs:foo/bar}}, which should then just be treated as {{foo/bar}}. I added a test case for this.

bq. More descriptive name than "fixPath"?

Since "fixRelativePartAndSchemaNoAuthority" doesn't roll off the tongue so well, I just changed it back to the original "fixRelativePart". In FileSystem, this is done in checkPath (not a great name either).

bq. Consider adding new Path method (similar to isAbsoluteAndSchemeAuthorityNull)

Good idea, added. I didn't refactor FileSystem's handling to use this since it's kind of gnarly, but I could if desirable.

On putting this in the constructor, I don't think we can easily pursue that path. We can't do the fixup until we know the default scheme of the filesystem where the path is being resolved, which would mean passing un-fixed URIs around as a {{URI}} or {{String}} or {{NewPath}} before we can make it into a {{Path}}. FS and FC already process incoming paths in fixup/check methods, so that's probably the right place for this too., {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12575626/hadoop-9357-3.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-common-project/hadoop-common.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HADOOP-Build/2368//testReport/
Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/2368//console

This message is automatically generated., +1 looks great, I've committed this and merged to branch-2. Thanks Andrew!, Integrated in Hadoop-trunk-Commit #3537 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/3537/])
    HADOOP-9357. Fallback to default authority if not specified in FileContext. Contributed by Andrew Wang (Revision 1461898)

     Result = SUCCESS
eli : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1461898
Files : 
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileContext.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/Path.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/FileContextMainOperationsBaseTest.java
, Hi, Andrew.  I've just started to see a test failure in YARN nodemanager: {{TestContainerLocalizer#testContainerLocalizerMain}}.  git bisect indicates that the problem was introduced with this patch for HADOOP-9357.  I first noticed the problem because of a test failure during pre-commit checks on my patch for YARN-493.  Here is the output from the pre-commit test failure:

https://builds.apache.org/job/PreCommit-YARN-Build/619//testReport/org.apache.hadoop.yarn.server.nodemanager.containermanager.localizer/TestContainerLocalizer/testContainerLocalizerMain/

It looks like a mock was strictly expecting to see "file" authority, and now it's no longer receiving it.  Are you seeing this test fail too?  Thanks!, [~cnauroth], we are seeing this consistently, filed YARN-516.

[~andrew.wang], [~eli], it seems like an incompatible change, mark it so?, I think this patch also has caused a problem with {{TestFcHdfsSymlink}} in HDFS.  I saw a failure during the pre-commit checks on my patch for HDFS-4372:

https://builds.apache.org/job/PreCommit-HDFS-Build/4164//testReport/

Are you also seeing this one fail?  Thanks again!
, Yes, the 4 test-cases are all failing for me too, with same exception message., The fix version was set to 2.0.4-alpha, should be 2.0.5-beta? Also, it was left unresolved?, Hi guys,

Thanks for looking into this. You're right about the test breakages. Reverting this to do a fixup is fine; I already have fixes lined up for both. The symlink test is incorrectly enforcing the old behavior, and the yarn test is testing a mocked AFS call that just needs to be updated.

Agree that this is an incompatible change to FileContext in that we can now consume a broader class of URIs, but it's still quite desirable since it makes FileContext more FileSystem-like., Integrated in Hadoop-Yarn-trunk #169 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk/169/])
    HADOOP-9357. Fallback to default authority if not specified in FileContext. Contributed by Andrew Wang (Revision 1461898)

     Result = FAILURE
eli : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1461898
Files : 
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileContext.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/Path.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/FileContextMainOperationsBaseTest.java
, Integrated in Hadoop-Hdfs-trunk #1358 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/1358/])
    HADOOP-9357. Fallback to default authority if not specified in FileContext. Contributed by Andrew Wang (Revision 1461898)

     Result = FAILURE
eli : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1461898
Files : 
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileContext.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/Path.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/FileContextMainOperationsBaseTest.java
, Integrated in Hadoop-Mapreduce-trunk #1386 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/1386/])
    HADOOP-9357. Fallback to default authority if not specified in FileContext. Contributed by Andrew Wang (Revision 1461898)

     Result = SUCCESS
eli : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1461898
Files : 
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileContext.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/Path.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/FileContextMainOperationsBaseTest.java
, Thanks, Andrew!, If not reverting is preferred, I'm attaching an additional patch which fixes the broken tests., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12576152/hadoop-9357-testfixup.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 3 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:red}-1 core tests{color}.  The patch failed these unit tests in hadoop-common-project/hadoop-common hadoop-hdfs-project/hadoop-hdfs hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager:

                  org.apache.hadoop.hdfs.server.balancer.TestBalancerWithNodeGroup

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HADOOP-Build/2382//testReport/
Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/2382//console

This message is automatically generated., The test failure is not related to this patch. I partial fixed it in HDFS-4261, but still some timeout in occasional case. So I will continue to fix that in HDFS-4261. I am fine with testfixup patch and I think it should be checked in soon to get rid of -1 for other patches., Also, I filed HDFS-4653 to track tests failure before I found this jira (Thanks Andrew for noting). If we don't want to roll back previous 9357 patch, I think it could be better to put fixup patch there., @Andrew, I am posting your YARN fix at YARN-516, and committing it to unblock builds., Failing when authority-port is not specified was consciously done when fileContext was implemented.
* A user wanting /tmp on the default file system should say "/tmp" and not "hdfs:///tmp".
* While the notion of a default file system is very appropriate, the notion of default authority per scheme does not make sense, especially if it is derived from the default file system. 
* In a multi-cluster environment, getting in the default authority/port from the default file system can lead to accessing the files at the wrong HDFS cluster/volume (each cluster has its own default and a user is allowed to access the HDFS volumes in different HDFS clusters from within the same application (as in distcp)).
* If you encourage the use of hdfs:///tmp then as you change your default file system from hdfs to localfs, the app can suddenly fail.  Being able to change the local file system to different HDFS volumes/clusters, s3, localfs in a fairly transparent fashion is a useful feature of Hadoop. For example, if /tmp  refers to the tmp on the default file system then things work transparently when the the default file system is changed from hdfs://cluster1NN:37 to hdfs://cluster2NN:55 to file:/// to s3fs etc. 

Is this Jira being driven by customer apps that are breaking?, Hi Sanjay,

Thanks for taking a look, I understand and agree with most of your points. I created this JIRA after some end user confusion when porting an app from FileSystem to FileContext. I felt that URIs like {{hdfs:///tmp}} should be discouraged but supported, since they are supported by FileSystem, and this case is specifically mentioned in the RFC as an okay fallback.

A couple potentially clarifying points:

bq. A user wanting /tmp on the default file system should say "/tmp" and not "hdfs:///tmp".

This code triggers when the schema matches the schema of the default FS. {{hdfs:///tmp}} will only work if the default FS is an HDFS instance.

bq. While the notion of a default file system is very appropriate, the notion of default authority per scheme does not make sense, especially if it is derived from the default file system.

There is not a default authority per scheme, as per the previous.

bq. In a multi-cluster environment, getting in the default authority/port from the default file system can lead to accessing the files at the wrong HDFS cluster/volume...
bq. If you encourage the use of hdfs:///tmp then as you change your default file system from hdfs to localfs...

I agree there could be ambiguity if you have multiple FS with the same schema, or change the default FS.

Moving toward a meta question, we already have all these problems with FileSystem, which is the dominant interface to HDFS. Have we encountered these problems in FileSystem with ambiguity and changing the default FS? I at least haven't heard of any, but I did see the mail that led to this JIRA., Integrated in Hadoop-trunk-Commit #3546 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/3546/])
    YARN-516. Fix failure in TestContainerLocalizer caused by HADOOP-9357. Contributed by Andrew Wang. (Revision 1463362)

     Result = SUCCESS
vinodkv : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1463362
Files : 
* /hadoop/common/trunk/hadoop-yarn-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/test/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/TestContainerLocalizer.java
, Integrated in Hadoop-Yarn-trunk #173 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk/173/])
    YARN-516. Fix failure in TestContainerLocalizer caused by HADOOP-9357. Contributed by Andrew Wang. (Revision 1463362)

     Result = SUCCESS
vinodkv : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1463362
Files : 
* /hadoop/common/trunk/hadoop-yarn-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/test/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/TestContainerLocalizer.java
, Integrated in Hadoop-Hdfs-trunk #1362 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/1362/])
    YARN-516. Fix failure in TestContainerLocalizer caused by HADOOP-9357. Contributed by Andrew Wang. (Revision 1463362)

     Result = FAILURE
vinodkv : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1463362
Files : 
* /hadoop/common/trunk/hadoop-yarn-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/test/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/TestContainerLocalizer.java
, Integrated in Hadoop-Mapreduce-trunk #1389 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/1389/])
    YARN-516. Fix failure in TestContainerLocalizer caused by HADOOP-9357. Contributed by Andrew Wang. (Revision 1463362)

     Result = SUCCESS
vinodkv : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1463362
Files : 
* /hadoop/common/trunk/hadoop-yarn-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/test/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/TestContainerLocalizer.java
, [~andrew.wang] sorry I do not have time to look through all the comments. I see that this commit has caused test issues. Are we trying to fix those issues by attaching more patches to this jira? My suggestion would be revert this change and once all the discussions are done, committing a new consolidated patch? Thoughts?, I posted a fixup patch here which I'm fairly sure is okay. I'm okay with revert and recommit, but do note that Vinod already split and committed the YARN test fixup from my patch, so you'd have to revert that too. Whatever is easier., I'll revert both changes, let's figure out the right behavior here and then we can post one cross-project patch that also has the yarn and hdfs test fixes (if necessary)., Integrated in Hadoop-trunk-Commit #3555 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/3555/])
    Revert initial HADOOP-9357 patch. (Revision 1464182)
Revert YARN-516 per HADOOP-9357. (Revision 1464181)

     Result = SUCCESS
eli : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1464182
Files : 
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileContext.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/Path.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/FileContextMainOperationsBaseTest.java

eli : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1464181
Files : 
* /hadoop/common/trunk/hadoop-yarn-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/test/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/TestContainerLocalizer.java
, Integrated in Hadoop-Yarn-trunk #174 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk/174/])
    Revert initial HADOOP-9357 patch. (Revision 1464182)
Revert YARN-516 per HADOOP-9357. (Revision 1464181)

     Result = SUCCESS
eli : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1464182
Files : 
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileContext.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/Path.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/FileContextMainOperationsBaseTest.java

eli : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1464181
Files : 
* /hadoop/common/trunk/hadoop-yarn-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/test/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/TestContainerLocalizer.java
, Integrated in Hadoop-Hdfs-trunk #1363 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/1363/])
    Revert initial HADOOP-9357 patch. (Revision 1464182)
Revert YARN-516 per HADOOP-9357. (Revision 1464181)

     Result = FAILURE
eli : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1464182
Files : 
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileContext.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/Path.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/FileContextMainOperationsBaseTest.java

eli : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1464181
Files : 
* /hadoop/common/trunk/hadoop-yarn-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/test/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/TestContainerLocalizer.java
, Integrated in Hadoop-Mapreduce-trunk #1390 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/1390/])
    Revert initial HADOOP-9357 patch. (Revision 1464182)
Revert YARN-516 per HADOOP-9357. (Revision 1464181)

     Result = SUCCESS
eli : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1464182
Files : 
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/CHANGES.txt
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileContext.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/Path.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/FileContextMainOperationsBaseTest.java

eli : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1464181
Files : 
* /hadoop/common/trunk/hadoop-yarn-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/test/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/TestContainerLocalizer.java
, Hi [~sanjay.radia], have you had a chance to take another look at this? Again, my main point is that these URIs are allowed by the RFC and allowed by FileSystem, and would make things a little easier for users transitioning from FS to FC (which is the origin of this JIRA)., Eli, has this patch been reverted in branch-2? , I reverted this patch committed from branch-2 as well to fix test failures., Instead of stripping a scheme with no authority and deferring the qualification (which appears to be causing issues), why not just immediately re-construct the URI by subbing in the authority of the default fs?, [~daryn] I suppose we could, it'd mean we'd no longer need the YARN test fixup, but considering that it's just one test that's not a big deal. I just did it this way because it's the approach recommended in the RFC., Daryn. I am missing your comment. The current patch does exactly what your are proposing - take the authority from the default fs IF the default fs is hdfs. , Andrew, the challenge I am having is that FileSystem has a bogus incorrect solution  since it is taking the authority from the default file system iff the scheme matches.
 The URI RFC can assert  that a notion of default authority is sensible because one can arrange for a default for each of the schemes.
To pick the default form the default fs (which is a hadoop concept that is not necessarily translatable to URIs in general) is what I am not happy about. 
I have a concern with allowing folks to move from FS to FC for a usage pattern that we believe is incorrect (as outlined by me above) and which we want to discourage
(since /path is better then hdfs:///path).
The only merit I see is compatibility -- FS allowed it (even though it was incorrect) and hence FC should allow it.
Wouldn't you want folks to catch the hdfs:///path and change it to /path if that is what they really intended?
What do others think?, bq. Daryn. I am missing your comment. The current patch does exactly what your are proposing - take the authority from the default fs IF the default fs is hdfs.
[~sanjay.radia], unless I'm looking at the wrong patch: if there's no authority, it's immediately dropping it and relying on it being re-added later, instead of just adding the authority immediately.  I'm unclear which is the more desirable behavior of this method.

bq. The URI RFC can assert that a notion of default authority is sensible because one can arrange for a default for each of the schemes.

The default uri is providing the default authority for a scheme.  Given it's not flexible to support multiple schemes, it is arguable doing the right thing for one specific case.

I agree specifying /path is preferable to hdfs:///path and assuming the defaultFS must be hdfs, else it breaks.  My big concern is the backwards incompatibility since this has been long standing behavior in hadoop.  Perhaps a deprecated warning should be emitted in 2.x, and we can remove it in 3.x?

, bq. unless I'm looking at the wrong patch: if there's no authority, it's immediately dropping it and relying on it being re-added later, instead of just adding the authority immediately. I'm unclear which is the more desirable behavior of this method.

If the authority is missing and the scheme is default fs then it changes path from hdfs:///path to /path.
Whether this is "immediate" or "later" the effect is the same as grabbing the default authority from the defaultfs.
bq. .. incompatibility ... 
as I mentioned this is the only reason to do it. Let me sleep over this one. Maybe there is an actual use case for this usage.
, I'm going to just resolve this one, unlikely we're going to make any FileContext changes at this point.]