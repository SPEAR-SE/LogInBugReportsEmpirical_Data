[The failing test suites are:

org.apache.hadoop.fs.shell.TestPathData
org.apache.hadoop.fs.shell.TestTextCommand

Here is a sample stack trace:

{code}
java.io.IOException: No FileSystem for scheme: C
	at org.apache.hadoop.fs.FileSystem.getFileSystemClass(FileSystem.java:2284)
	at org.apache.hadoop.fs.FileSystem.createFileSystem(FileSystem.java:2291)
	at org.apache.hadoop.fs.FileSystem.access$200(FileSystem.java:85)
	at org.apache.hadoop.fs.FileSystem$Cache.getInternal(FileSystem.java:2330)
	at org.apache.hadoop.fs.FileSystem$Cache.get(FileSystem.java:2312)
	at org.apache.hadoop.fs.FileSystem.get(FileSystem.java:316)
	at org.apache.hadoop.fs.shell.PathData.<init>(PathData.java:63)
	at org.apache.hadoop.fs.shell.TestPathData.testToFile(TestPathData.java:114)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31)
	at org.junit.runners.BlockJUnit4ClassRunner.runNotIgnored(BlockJUnit4ClassRunner.java:79)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:71)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:49)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:236)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:252)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:141)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:112)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)
	at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)
{code}
, What format are the URIs?  I would expect file uris formatted per this link to work, if not, it's a bug:
http://blogs.msdn.com/b/ie/archive/2006/12/06/file-uris-in-windows.aspx

In one of the original windows jiras it was agreed that going forward only standard uris will be supported by hadoop., Resolves TestPathData failures. The patch may need to be updated as we resolve more path-related issues on Windows., Hi Daryn, would you have a link to the jira handy? File URIs formatted as described in that MSDN article should work already., {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12551240/HADOOP-8953-branch-trunk-win.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-common-project/hadoop-common.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HADOOP-Build/1687//testReport/
Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/1687//console

This message is automatically generated., Thanks Arpit for the patch.

bq. In one of the original windows jiras it was agreed that going forward only standard uris will be supported by hadoop.
Right, we agreed on only supporting valid URIs in HADOOP-8409 for hadoop generic options. The same should hold on trunk.

Arpit, please wait for me to review and test the patch. The goal of the patch is to fix the above two unittests, right? Two early comments
 - I don't think we want to have Windows specific code in FileSystem.java
 - PathData seems to replicate a lot of the logic from Path, can we avoid this?, bq. PathData seems to replicate a lot of the logic from Path, can we avoid this?
Sadly, no.  The {{Path}} object will munge the path in various ways such that you can't get the string back used to create the {{Path}} object.  This requires {{PathData}} to maintain its own copy of the path string so the output to the user matches exactly what they provided to the command.  {{Path}} also strips trailing slashes which breaks the shell's ability to disambiguate if the path is to be treated as a directory., What we really should be doing is removing the drive letter support from {{Path}}.  Uris formatted according to the MSDN article shouldn't require the special handling., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12551261/HADOOP-8953-branch-trunk-win.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:red}-1 javac{color:red}.  The patch appears to cause the build to fail.

Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/1688//console

This message is automatically generated., Some ideas have been discussed for refactoring Path and its numerous call sites.  That's a fairly large scope considering how many other classes are coupled to Path, and the fact that many callers assume return values of a certain format to use in additional string concatenation.

At this point, we'd prefer to work towards full test pass on Windows with minimal changes to the current trunk code, and then refactor slowly towards the ideal state after we have those tests as a safety net.  This would be a conservative approach towards improving the codebase's path handling logic.
, Arpit, could you upload a new version of the patch?  It looks like the current version was generated without the git diff --no-prefix option.  Also, I got this compilation error:

[ERROR] /Users/chris/git/hadoop-common/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/shell/TestPathData.java:[123,12] WINDOWS is not public in org.apache.hadoop.fs.Path; cannot be accessed from outside package

I'm guessing that the idea was to make Path.WINDOWS public, or to use the equivalent Shell.WINDOWS, which is already public.

Thanks!
, bq.  At this point, we'd prefer to work towards full test pass on Windows with minimal changes to the current trunk code, and then refactor slowly towards the ideal state after we have those tests as a safety net. This would be a conservative approach towards improving the codebase's path handling logic.

I generally agree that minimal change is best.  I may not understand the whole problem here, but it appears the cart is dragging the horse?  Ie. Are moving in the wrong direction with {{FileSystem}} to appease a test?  Unfortunately the original patch was deleted (please don't do that, just post another) so I can't refer back the problem in its entirety.

Note that the change to the {{PathData}} test is breaking what it's trying to test:  path in = path out.  I spent a lot of effort trying to ensure that the output path matches the input to allow scripts to easily parse the output when multiple args are given., Daryn, the goal is to support Windows paths that do not conform to the URI syntax and not just appease the test.

However the patch can be updated to maintain the PathData invariant (path in = path out). I am also looking into avoiding the change to FileSystem., bq. In one of the original windows jiras it was agreed that going forward only standard uris will be supported by hadoop.
The agreement was that HDFS paths will not allow windows back slashes. We still have to support the local OS's path format. This patch is only fixing for local paths for windows (ie paths that begin with "x:")., I have just uploaded a new patch that I hope addresses the concerns raised by Daryn and Ivan.

Thanks., Sanjay, I completely agree.  I just feel the change is more complicated than necessary, so I'm working offline with Arpit and Chris to see if there's a simpler solution., +1, bq.  I'm working offline with Arpit and Chris to see if there's a simpler solution.
Is this done? If there are no further comments, I will commit this patch soon., Daryn has not yet commented on the latest patch., Daryn, this is important change for making progress on this jira. If there are no further comments, I will commit this jira by the end of the day. Any comments post the commit can be addressed in a separate jira., I replied to our offline discussion.  I'm really uneasy with all the PathData changes when they are working around a problem caused by the artificial ban on ":" in Paths that is preventing well-formed URIs with drive letters from working., Given that this change is needed for making progress on gettign 100% unit tests passing on Windows, I recommend creating a follow on jira for completing the discussion and finishing the remaining discussion. Arpit, can you create another jira?, Daryn suggested a few further improvements to make Windows URI handling more rigorous and I have filed HADOOP-9018 to track them.

I would like to avoid inflating the scope of HADOOP-8953 and allow us to make forward progress with getting Windows support working in trunk-win., I committed the patch to branch-trunk-win. Thank you Arpit.

Please continue additional work needed in HADOOP-9018.]