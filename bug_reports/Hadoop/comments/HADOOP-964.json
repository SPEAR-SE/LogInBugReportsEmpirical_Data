[This patch adds any jars in the HADOOP_HOME directory to the hadoop classpath that starts the Tasktracker., Patch added, +1, because http://issues.apache.org/jira/secure/attachment/12350088/classpath.patch applied and successfully tested against trunk revision r502030., Fixes the classpath in the ReduceTaskRunner instead of the shell scripts, The second patch classpath2.path (sorry should be patch) attacks the problem from the ReduceTaskRunner instead of the hadoop shell script.  The problem is that Writable classes are not being found by the ReduceTaskRunner upon initialization.  It needs these Writable classes to perform sorting, etc in the prepare stage.  The first solution was to change the hadoop script to load any jars in the HADOOP_HOME.  The hadoop script sets the classpath for the TaskTracker which is then passed to the ReduceTaskRunner and therefore by loading any jars in the home directory the necessary jars would be in the classpath and accessible.  There are a few issues with that fix.  First this reverses HADOOP-700 which we don't want to do.  Second is we went down this path of setting classpath through the script for Writable classes then anytime new classes were added we would have to restart the TaskTracker nodes.  Again not a good solution.

So instead what I did with this patch is to change the ReduceTaskRunner to dynamically configure it classpath from the local unjarred work directory.  It does this through creating a new URLClassLoader and adding in the same elements that are added to classpath of the TaskTracker$Child spawns while keeping the old context class loader as its parent.  The new URLClassLoader is then set into the current JobConf as its classloader and it is used for the sorting, etc.  This allows us to not have to change the hadoop script and two allows new writable classes to by dynamically added to the system without restarting TaskTracker nodes.

I have run this patch on a development system using the Nutch injector as well as ran the TestMapRed unit tests.  Both completed sucessfully., This is really more of a ReduceTaskRunner than a shell script issue so changing title., This is a serious bug, introduced by the new merge code.  Previously, comparators were only used in the child process: ReduceTaskRunner.prepare() only copied binary data before, but not it does some sorting too.  Hence, this logic should move into the child process.  (Architecturally, the goal is to keep user code out of long-running daemon processes.)

I think we should proceed as follows:

1. Add a unit test where the comparator is in the jar file.
2. Make a short-term fix that loads these classes into the TaskTracker.
3. Add another bug to move all comparator access into the child process.

, Are we going to be able to move all comparator access int the child process.  This is occurring during the sorting and merging.  Would that process have to be moved to the child?

The short term fix for loading the classes into the ReduceTaskRunner is classpath2.path, should I change this to occur in TaskTracker?  It would essentially just be moving the method over to the TaskTracker and changing where it gets called.

I will create a unit test for the comparator in the jar file now , the new bug has already been created as HADOOP-968., > Are we going to be able to move all comparator access int the child process.

Yes, I think so.  That's the subject of HADOOP-968.

> should I change this to occur in TaskTracker?

No.  I was referring to the TaskTracker process, which is wherre ReduceTaskRunner runs.  I have not yet looked closely at your patch, but it is certainly a candidate for (2), the short-term fix.  HADOOP-968 is  the long-term fix.

> I will create a unit test for the comparator in the jar file now

Great!  That would be most welcome.  There are already some unit tests that use a job jar file, so this can probably be bundled into one of those.

I think Owen's planning to review your patch more closely., The unit tests that verify the classpath2.path, dynamically loading external writable from job.jar., I think the classpath2.patch looks like the right approach for the short term fix. Thanks for the unit test.

+1, (Although the preferred style is to make a new patch that includes all of the proposed changes in a single patch.), This patch contains both the classloader (classpath2.path) and the unit test (classpath2_unittest.patch) in a single file.   Thanks for the heads up Owen!, I just fixed this.  Thanks, Dennis!]