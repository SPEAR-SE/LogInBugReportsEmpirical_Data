[Can you please set the Affects Version/s field to the release where you observed this issue? Or did you observe this issue on both 1.0.3 and 0.21.0?, BTW 0.21.0 release never became stable. Are you using it? No 0.21.x releases are planned. So you may want to set the target version to 2.2.0 perhaps., However, I think that it should not be seen as the indicator of success for the setup or initialization of the Connection instance ,that property socket is not null!
, The source code about the initialization of the Connection instance:
{code}
 private synchronized void setupIOstreams() throws InterruptedException {
      
-     if (socket != null || shouldCloseConnection.get()) {
-       return;
-     }
      
+     if(this.out != null || shouldCloseConnection.get()){
+   	  return;
+     }
      
      short ioFailures = 0;
      short timeoutFailures = 0;
      try {
        if (LOG.isDebugEnabled()) {
          LOG.debug("Connecting to "+server);
        }
        while (true) {
          try {
            this.socket = socketFactory.createSocket();
            this.socket.setTcpNoDelay(tcpNoDelay);
            // connection time out is 20s
            NetUtils.connect(this.socket, remoteId.getAddress(), 20000);
            this.socket.setSoTimeout(pingInterval);
            break;
          } catch (SocketTimeoutException toe) {
            /* The max number of retries is 45,
             * which amounts to 20s*45 = 15 minutes retries.
             */
            handleConnectionFailure(timeoutFailures++, 45, toe);
          } catch (IOException ie) {
            handleConnectionFailure(ioFailures++, maxRetries, ie);
          }
        }
        InputStream inStream = NetUtils.getInputStream(socket);
        OutputStream outStream = NetUtils.getOutputStream(socket);
        writeRpcHeader(outStream);
        if (useSasl) {
          final InputStream in2 = inStream;
          final OutputStream out2 = outStream;
          UserGroupInformation ticket = remoteId.getTicket();
          if (authMethod == AuthMethod.KERBEROS) {
            if (ticket.getRealUser() != null) {
              ticket = ticket.getRealUser();
            }
          }
          if (ticket.doAs(new PrivilegedExceptionAction<Boolean>() {
            @Override
            public Boolean run() throws IOException {
              return setupSaslConnection(in2, out2);
            }
          })) {
            // Sasl connect is successful. Let's set up Sasl i/o streams.
            inStream = saslRpcClient.getInputStream(inStream);
            outStream = saslRpcClient.getOutputStream(outStream);
          } else {
            // fall back to simple auth because server told us so.
            authMethod = AuthMethod.SIMPLE;
            header = new ConnectionHeader(header.getProtocol(),
                header.getUgi(), authMethod);
            useSasl = false;
          }
        }
        if (doPing) {
          this.in = new DataInputStream(new BufferedInputStream
            (new PingInputStream(inStream)));
        } else {
          this.in = new DataInputStream(new BufferedInputStream
            (inStream));
        }
        
        
        //byte[] data = new byte[1024*1024*5];
        
        this.out = new DataOutputStream(new BufferedOutputStream(outStream));
        
        writeHeader();

        // update last activity time
        touch();

        // start the receiver thread after the socket connection has been set up
        start();

      } catch (IOException e) {
        markClosed(e);
        close();
      }
    }

{code}
On the other hand,the program just olny catchs IOException, but does not catch and process any Errors, such as OutOfMemoryError., It May be better that:
{code}
 private synchronized void setupIOstreams() throws InterruptedException {
      
-     if (socket != null || shouldCloseConnection.get()) {
-       return;
-     }
      
+     if(this.out != null || shouldCloseConnection.get()){
+   	  return;
+     }
      
      short ioFailures = 0;
      short timeoutFailures = 0;
      try {
        if (LOG.isDebugEnabled()) {
          LOG.debug("Connecting to "+server);
        }
        while (true) {
          try {
            this.socket = socketFactory.createSocket();
            this.socket.setTcpNoDelay(tcpNoDelay);
            // connection time out is 20s
            NetUtils.connect(this.socket, remoteId.getAddress(), 20000);
            this.socket.setSoTimeout(pingInterval);
            break;
          } catch (SocketTimeoutException toe) {
            /* The max number of retries is 45,
             * which amounts to 20s*45 = 15 minutes retries.
             */
            handleConnectionFailure(timeoutFailures++, 45, toe);
          } catch (IOException ie) {
            handleConnectionFailure(ioFailures++, maxRetries, ie);
          }
        }
        InputStream inStream = NetUtils.getInputStream(socket);
        OutputStream outStream = NetUtils.getOutputStream(socket);
        writeRpcHeader(outStream);
        if (useSasl) {
          final InputStream in2 = inStream;
          final OutputStream out2 = outStream;
          UserGroupInformation ticket = remoteId.getTicket();
          if (authMethod == AuthMethod.KERBEROS) {
            if (ticket.getRealUser() != null) {
              ticket = ticket.getRealUser();
            }
          }
          if (ticket.doAs(new PrivilegedExceptionAction<Boolean>() {
            @Override
            public Boolean run() throws IOException {
              return setupSaslConnection(in2, out2);
            }
          })) {
            // Sasl connect is successful. Let's set up Sasl i/o streams.
            inStream = saslRpcClient.getInputStream(inStream);
            outStream = saslRpcClient.getOutputStream(outStream);
          } else {
            // fall back to simple auth because server told us so.
            authMethod = AuthMethod.SIMPLE;
            header = new ConnectionHeader(header.getProtocol(),
                header.getUgi(), authMethod);
            useSasl = false;
          }
        }
        if (doPing) {
          this.in = new DataInputStream(new BufferedInputStream
            (new PingInputStream(inStream)));
        } else {
          this.in = new DataInputStream(new BufferedInputStream
            (inStream));
        }
        
        
        //byte[] data = new byte[1024*1024*5];
        
        this.out = new DataOutputStream(new BufferedOutputStream(outStream));
        
        writeHeader();

        // update last activity time
        touch();

        // start the receiver thread after the socket connection has been set up
        start();

      } 
-	  catch (IOException e) {
-       markClosed(e);
-       close();
-      }
+     catch (Throwable tb){
+		IOException ex = null;
+		
+		if(tb instanceof IOException) ex = (IOException) tb;
+		
+		markClosed(ex);
+		close();
+		
+		if(tb instanceof Error) throw (Error)tb;	
	  }
    }

{code}, I asked couple of question. Could you please answer them?]