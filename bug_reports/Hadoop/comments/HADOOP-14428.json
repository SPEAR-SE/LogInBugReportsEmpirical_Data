[Just confirming after:

{code}
git revert b053fdc547ddbb6322674142a14010683006d123
{code}

I no longer get the "No such file or directory", FYI [~stevel@apache.org] [~liuml07]. Let me know if you guys can reproduce it easily., I'll test this tomorrow. I've no idea how the unit tests fools me. This is a blocker for sure. Thanks,, maybe its the special case of a trailing "/" at the end? we may just have missed that as a test case. In which case, it's something that should go up to the contract tests against all filesystems, [~stevel@apache.org] I saw the same behavior without the trailing '/', [~fabbri],

I can confirm that the problem happens w/ the trailing '/' when mkdir. But if I mkdir w/o trailing '/', the problem is gone. I'll debug for a while why this happens., Ah, ok. I tested the *ls* with/without trailing slash, but not sure I tested the mkdir with/without it., Yes, reverting the b053fdc547ddbb6322674142a14010683006d123 did solve the problem (that is, mkdir w/ trailing '/' will not make following ls get FNFE any more)., The idea in [HADOOP-14255] is to delete the unnecessary fake object for all its ancestors. The idea makes sense if we start deleting unnecessary fake objects from current empty directory's parent.
{code}
deleteUnnecessaryFakeDirectories(f.getParent());
{code}
However, with trailing slash, the {{Path::getParent()}} is not behaviouring what we expected: {{s3a://my-bucket/dir/}}'s parent is {{s3a://my-bucket/dir}} instead of {{s3a://my-bucket}}. The original patch got passing unit tests because we didn't add trailing '/' in the test path.
{code:title=Path::getParent()}

  /**
   * Returns the parent of a path or null if at root.
   * @return the parent of a path or null if at root
   */
  public Path getParent() {
    String path = uri.getPath();
    int lastSlash = path.lastIndexOf('/');
    int start = startPositionWithoutWindowsDrive(path);
    if ((path.length() == start) ||               // empty path
        (lastSlash == start && path.length() == start+1)) { // at root
      return null;
    }
    String parent;
    if (lastSlash==-1) {
      parent = CUR_DIR;
    } else {
      parent = path.substring(0, lastSlash==start?start+1:lastSlash);
    }
    return new Path(uri.getScheme(), uri.getAuthority(), parent);
  }
{code}

So we simply trusted {{Path::getParent()}} but it betrays us here. We may normalize (remove the trailing '/') before we calls {{getParent}}, or we figure out the parent by ourselves., This is showing up a bad assumption in all our test code: we've been constructing paths "properly", when sometimes we should be building them from bad strings and handing them in. I'd like a patch here to do something in the Mkdir contract tests too in case its a broader problem elsewhere, The {{Path::getParent()}} behavior has been known for years but we accepted it, e.g.
{code:title=Mkdir.java::processNonexistentPath()}
  @Override
  protected void processNonexistentPath(PathData item) throws IOException {
    // check if parent exists. this is complicated because getParent(a/b/c/) returns a/b/c, but
    // we want a/b
    if (!createParents &&
        !item.fs.exists(new Path(item.path.toString()).getParent())) {
      throw new PathNotFoundException(item.toString());
    }
    if (!item.fs.mkdirs(item.path)) {
      throw new PathIOException(item.toString());
    }
  }
{code}

Here I'd suggest not to change the existing behavior of {{Path::getParent()}} which returns {{s3a://my-bucket/dir}} for {{s3a://my-bucket/dir/}}. Instead we bypass this by creating a new Path object which removes the trailing "/".

Thanks [~stevel@apache.org] for the suggestion for adding unit tests. The newly added tests can not pass w/o this patch, and pass w/ this patch., | (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue}  0m 16s{color} | {color:blue} Docker mode activated. {color} |
| {color:green}+1{color} | {color:green} @author {color} | {color:green}  0m  0s{color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:green}+1{color} | {color:green} test4tests {color} | {color:green}  0m  0s{color} | {color:green} The patch appears to include 1 new or modified test files. {color} |
| {color:blue}0{color} | {color:blue} mvndep {color} | {color:blue}  0m 17s{color} | {color:blue} Maven dependency ordering for branch {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 12m 42s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 12m 53s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  1m 40s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  1m 26s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green}  0m 48s{color} | {color:green} trunk passed {color} |
| {color:red}-1{color} | {color:red} findbugs {color} | {color:red}  1m 24s{color} | {color:red} hadoop-common-project/hadoop-common in trunk has 19 extant Findbugs warnings. {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  1m  0s{color} | {color:green} trunk passed {color} |
| {color:blue}0{color} | {color:blue} mvndep {color} | {color:blue}  0m 16s{color} | {color:blue} Maven dependency ordering for patch {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green}  0m 58s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 13m  7s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green} 13m  7s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  1m 46s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  1m 32s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green}  0m 42s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green}  0m  0s{color} | {color:green} The patch has no whitespace issues. {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  2m 19s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  1m 13s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} unit {color} | {color:green}  7m 59s{color} | {color:green} hadoop-common in the patch passed. {color} |
| {color:green}+1{color} | {color:green} unit {color} | {color:green}  0m 28s{color} | {color:green} hadoop-aws in the patch passed. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green}  0m 32s{color} | {color:green} The patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black} 87m 41s{color} | {color:black} {color} |
\\
\\
|| Subsystem || Report/Notes ||
| Docker |  Image:yetus/hadoop:14b5c93 |
| JIRA Issue | HADOOP-14428 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12869734/HADOOP-14428.001.patch |
| Optional Tests |  asflicense  compile  javac  javadoc  mvninstall  mvnsite  unit  findbugs  checkstyle  |
| uname | Linux 05029a38e378 4.4.0-43-generic #63-Ubuntu SMP Wed Oct 12 13:48:03 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | /testptch/hadoop/patchprocess/precommit/personality/provided.sh |
| git revision | trunk / d049bd2 |
| Default Java | 1.8.0_131 |
| findbugs | v3.1.0-RC1 |
| findbugs | https://builds.apache.org/job/PreCommit-HADOOP-Build/12389/artifact/patchprocess/branch-findbugs-hadoop-common-project_hadoop-common-warnings.html |
|  Test Results | https://builds.apache.org/job/PreCommit-HADOOP-Build/12389/testReport/ |
| modules | C: hadoop-common-project/hadoop-common hadoop-tools/hadoop-aws U: . |
| Console output | https://builds.apache.org/job/PreCommit-HADOOP-Build/12389/console |
| Powered by | Apache Yetus 0.5.0-SNAPSHOT   http://yetus.apache.org |


This message was automatically generated.

, which filesystems have you tested against?, I tested the following ones: {{ITestS3AContractMkdir}} for S3, {{TestHDFSContractMkdir}} for HDFS, {{TestRawlocalContractMkdir}} and {{TestLocalFSContractMkdir}} for local FS, {{TestAzureNativeContractMkdir}} for WASB, and {{TestAdlContractMkdirLive}} for ADLS.

I also have run all S3 integration tests successfully against us-west-1 region, as the change is in {{S3AFileSystem}}.

I built the jar file and operated the fs shell commands [~fabbri] reported in the description, and it shows the directory instead of complaining FNFE. Can you verify this from your side?, As this is a blocker, can you help review/verify here? [~fabbri] and [~stevel@apache.org]., Will do.  Looking at it now [~liuml07], Ok [~liuml07], I confirmed that your patch fixes the reproduction I mentioned (mkdir with trailing slash).

One question on your patch:  I'm wondering why the existing test code did not catch this bug?  It looks like you added new test cases that also use unqualified paths.  I would guess that the trailing slash gets removed in S3AFileSystem in qualify(), but only when it is not absolute?  So the existing test did not catch it?

My reproduction uses an absolute path though, so I'm confused.

Anyways, just curious.  I am still +1 on the patch assuming you get a clean Yetus run., Thanks [~fabbri] and [~stevel@apache.org] for review. This is tricky; I know. :)

The reason that existing test code did not catch this bug is because, as you said, the trailing slash was removed before it's passed to S3AFileSystem. There are several places that will remove trailing slashes, mostly {{URI::normalize()}} and {{Path::normalizePath()}}. All Path constructors will call {{URI::normalize()}} implicitly after which there will be _at most_ one trailing slash. Meanwhile, some Path constructors call {{normalizePath()}} as well. Last, {{Path::makeQualified()}} method _sometimes_ removes the trailing slash. In our existing code, the {{Path::makeQualified()}} is called via {{path()}} helper method and it does remove trailing slashes if any. So overall, the existing test code will not get a chance to carry trailing slashes before passing to S3AFileSystem.

You can add as many trailing slashes, and it should pass always.
{code:title=AbstractContractMkdirTest::testMkdirSlashHandling()}
    // With trailing slash
    assertTrue(fs.mkdirs(path("testmkdir/b////////////")));
    assertPathExists("mkdir with trailing slash failed", path("testmkdir/b/"));
{code}

Comes back to our case,
# note that we say _some Path constructors_ call {{normalizePath()}} and constructor {{Path(URI)}} does not.
{code}
public Path(URI aUri) {
    uri = aUri.normalize();
}
{code}
So the uri is allowed to have one trailing slash. Unfortunately, fs.shell package is using {{PathData}} class which creates a Path object from command line arguments via {{Path(URI)}} constructor. In our case the trailing slash is preserved in constructor.
# Actually {{PathData}} will also call {{Path::makeQualified()}} method after constructing a Path. However,  {{Path::makeQualified()}} _sometimes removes the trailing slash_ by calling {{Path::normalizePath()}}, and sometimes === not fully qualified.
{code}
  /*  ...
   * @return this path if it contains a scheme and authority and is absolute, or
   * a new path that includes a path and authority and is fully qualified
   */
  public Path makeQualified(URI defaultUri, Path workingDir ) {
  ...
  }
{code}
Here in the command line of this JIRA, we provide a fully qualified path string. As a result, the trailing slash is preserved again. Eventually the trailing slash gets passed to S3AFileSystem, where we got fooled to believe {{/a/b/c/}} getParent returns {{/a/b}} while it actually returns {{/a/b/c}}.

As to the new test case in this patch, the {{new Path(getContract().getTestPath() + "/testMkdirSlashHandling/e///")}} will fail w/o this fix because:
# We have triple trailing slashes, while {{Path::normalizePath()}} is only able to remove two of them (refer to its source code)
# After {{Path::normalizePath()}}, {{URI::normalize()}} allows one trailing slash.
So in S3AFileSystem, the Path to mkdir has the trailing slash and we have to remove before calling {{getParent}}.

If only you find this amusing. Part of my understanding maybe wrong; correct me.

The findbugs warnings are unrelated, and the patch still apply cleanly. I'll hold on commit by tomorrow. Thanks,, good trackdown of the underlying problem. It may come back again somewhere, but at least now we have a test for all the filesystems.

+1, Yes, thank you for the detailed description [~liuml07]
, Committed to {{branch-2}} and {{trunk}} branches. Thanks for your report and review [~ajfabbri]. Thanks for your review and discussion, [~stevel@apache.org]., SUCCESS: Integrated in Jenkins build Hadoop-trunk-Commit #11823 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/11823/])
HADOOP-14428. s3a: mkdir appears to be broken. Contributed by Mingliang (liuml07: rev 6aeda55bb8f741d9dafd41f6dfbf1a88acdd4003)
* (edit) hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java
* (edit) hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/contract/AbstractContractMkdirTest.java
, SUCCESS: Integrated in Jenkins build Hadoop-trunk-Commit #14057 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/14057/])
HADOOP-14428. s3a: mkdir appears to be broken. Contributed by Mingliang (xyao: rev ce634881ced7ff14118a7789cb70ff6428710e00)
* (edit) hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/contract/AbstractContractMkdirTest.java
* (edit) hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java
]