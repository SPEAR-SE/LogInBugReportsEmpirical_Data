[I realized that as well as I was looking at ZOOKEEPER-1549. I think that logic needs to change a bit to deal with the issue in that other jira.

As is, the exception will bring the server back into leader election. If it keeps getting an exception, then the server will be spinning and will make no useful progress. Depending on what is causing it to throw an exception, it might be better to exit (e.g., there is some issue with the file system), but in some cases it will eventually heal itself by pulling a snapshot from the leader. 

Perhaps we should differentiate in {{FileTxnLog.truncate}} between an IOException from the constructor of {{FileTxnIterator}} and the input stream being null. The input stream being null is like we couldn't find a file to truncate (e.g., ZOOKEEPER-1549), so this is a case for returning false. 

On weather to exit or keep going, I'm personally not a big fan of exits in the middle of the code like that, so if we are to shut down the server, perhaps we should looking into doing it differently. Bringing the broken server back to leader election has the downside that it will keep making the leader do work to get it to follow and in the case it isn't recoverable, we will have that broken server annoying the leader. From an ops point of view, the solution in either case is to inspect the error and determine whether there is something wrong with the server data, and one solution is to wipe out that server data.]