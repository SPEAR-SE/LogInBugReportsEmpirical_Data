[Thank you for the bug report Ted. Would it be ok if I assign the ticket to you?, Sure.

Here is the patch., Thank you for the patch Ted. Here are my comments:

- This patch only fixes the issue at line 210, but not the one at 307.
- There is a similar issue at 338, though this one is slightly more complicated since it does more than putting something in a map inside the containsKey block., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12622695/zookeeper-1861-v1.txt
  against trunk revision 1556976.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1881//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1881//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1881//console

This message is automatically generated., Patch v2 addresses Michi's comments, -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12622714/zookeeper-1861-v2.txt
  against trunk revision 1556976.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1882//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1882//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1882//console

This message is automatically generated., [~michim]:
Can you take a look at patch v2 ?, With this patch, we allocate bq even when we don't use it. I'm not sure if we want to do that. I'll let somebody more familiar with the code base review the patch.

Thanks!
--Michi, To avoid allocating extra ArrayBlockingQueue, I am thinking of the following:
* create a singleton ArrayBlockingQueue which serves as marker
* if queueSendMap.putIfAbsent(sid, singleton) returns null, create the real ArrayBlockingQueue, named bq, and call queueSendMap.replace(sid, bq)
* if queueSendMap.putIfAbsent(sid, singleton) returns non-null value, check whether the return is singleton, if so, wait till queueSendMap.get(sid) returns a value which is not singleton., The above suggestion would involve more complex logic.

Maybe the first two hunks in patch v2 can be integrated first ?, Further review on this would be appreciated., How are the first hunks different? They also do the allocation even though you might not need them as well, no? I think that to avoid eagerly allocating and solve the concurrency issues you could put the check/set bits in a synchronized method and call that instead. , How about patch v3 ?, -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12628301/zookeeper-1861-v3.txt
  against trunk revision 1566748.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1923//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1923//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1923//console

This message is automatically generated., Need to fix the formatting on that new method. Other than that, looks ok to me.
, Actually, I'm going to go back on this. The whole point of using a concurrent data structure is so we don't synchronize on this operation. Which means we have to allocate potentially unnecessarily.
I prefer patch v2. If you really want to try and not worry about allocation, check for existence, then create, and put if not absent, but meh. I don't know that I care about an (unlikely) extra allocation., bq. I prefer patch v2

I agree.

Patch v3 basically makes the map a HashMap.

bq. then create, and put if not absent

I guess you meant 'put if absent'

The chance of extra allocation should be low., Yup. I'm gonna put in patch v2 unless someone else has a comment., SUCCESS: Integrated in ZooKeeper-trunk #2217 (See [https://builds.apache.org/job/ZooKeeper-trunk/2217/])
ZOOKEEPER-1861. ConcurrentHashMap isn't used properly in QuorumCnxManager (Ted Yu via camille) (camille: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1568176)
* /zookeeper/trunk/CHANGES.txt
* /zookeeper/trunk/src/java/main/org/apache/zookeeper/server/quorum/QuorumCnxManager.java
]