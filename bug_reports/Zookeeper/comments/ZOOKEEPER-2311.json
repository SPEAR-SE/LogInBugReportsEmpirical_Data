[Another interesting link related to this:

https://bugzilla.kernel.org/show_bug.cgi?id=80981, A very specific LKML thread related to this exact behavior: https://lkml.org/lkml/2005/1/13/485

This email thread indicates that there is in general an assumption that reading from /dev/urandom will never result in a short read. In actuality, in the face of signals, that's not really guaranteed. As with any call to read(2), it must handle short reads properly. , Uploaded patch to harden setup_random against short reads from /dev/urandom per LKML thread indicating this is a valid non-error path., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12774911/ZOOKEEPER-2311.patch
  against trunk revision 1715590.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    -1 patch.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2971//console

This message is automatically generated., I got another recreate of this and this time got a core file. And I was wrong originally. It's not a short read that is causing this. Instead the read is failing with a return code of -1 and errno is set to EBADF. The manpage for read(2) indicates this can only happen when:

{code}
       EBADF  fd is not a valid file descriptor or is not open for reading.
{code}

But we specifically opened it 2 lines of code above that and checked to ensure it wasn't -1. 

In the core file I also see that the fd is valid:

{code}
#4  0x00007f9ff8e4070a in setup_random () at src/zookeeper.c:476
476	in src/zookeeper.c
(gdb) print errno
$3 = 9
(gdb) print fd
$4 = 140
(gdb) print seed
$5 = 32671
{code}

It's odd that seed has something in it. That could mean we read _something_, but it could also be because this code never initialized seed to zero and it's got whatever garbage was on the stack.

The only other thing that's very curious here is that I think when this happens it coincides with a call to zookeeper_close. But this is a local stack variable so I can't fathom how that could cause this failure scenario.

I'll keep digging., [~marshall]: i'd like to apply the patch and follow-up the EBADF in a separate jira - makes sense? Thanks!, (that is - not checking for short reads is a real bug. the EBADF case is still unclear). , [~rgs] - Yes, I agree. The short read is still a problem. I think the EBADF is actually a bug in our application not in ZooKeeper. So unless I discover otherwise, I think we should ignore the EBADF for now. I'll open a separate jira if I find it's a real issue.

I will regenerate this patch though b/c I didn't create it properly the first time., Updated patch to be generated from the right directory this time., Applied:

https://github.com/apache/zookeeper/commit/b4da11fc946c7c40fda2096943cdff5af30ae6c2
https://github.com/apache/zookeeper/commit/2e0c902dfc013060d409803a107b803015dc97d7
https://github.com/apache/zookeeper/commit/5d4b5c4283b4bac6d41775d9208c85f73dd22844

Thanks [~marshall]!, SUCCESS: Integrated in ZooKeeper-trunk #2820 (See [https://builds.apache.org/job/ZooKeeper-trunk/2820/])
ZOOKEEPER-2311: assert in setup_random
(Marshall McMullen via rgs) (rgs: [http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1718207])
* trunk/CHANGES.txt
* trunk/src/c/src/zookeeper.c
]