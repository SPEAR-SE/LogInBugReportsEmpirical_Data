[Hi,

*Approach:* Added the 'finally block' for the SendThread, this will do the cleanup activities and do graceful shutdown. So all the successive operations will get ConectionLossException and will not be hanged forever.

I have attached the patch, please review.

Thanks in advance,
Rakesh, -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12496627/ZOOKEEPER-1100.patch
  against trunk revision 1176159.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/591//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/591//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/591//console

This message is automatically generated., I failed to write a test case for this Error scenario. Manually verified the patch and causes no test failures. Any help would be appreciated.

Thanks,
Rakesh, I'm reviewing this issue. Can I get some clarity? Is the issue that you get a runtime exception outside of the try block after while (state.isAlive()) so the thread dies and hangs? Why put the try block there instead of around the entire method?, More to the point, are you expecting just a watcher event for this? As it stands, if your send thread dies you will still have send requests hang even with a cleanup call because the state doesn't change to anything but CONNECTING. If just getting a watch event and notification on pending send requests is fine, then I think we can work with this., example test using mockito. Minus of course the mockito jar that would maek this work and the fixes it may or may not be testing., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12501834/ZOOKEEPER-1100.patch
  against trunk revision 1196025.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    -1 javac.  The patch appears to cause tar ant target to fail.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/757//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/757//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/757//console

This message is automatically generated., The issue we faced was that an OutOfMemoryError was thrown in the send thread which silently killed it. After that all other threads interacting with ZooKeeper just hung because there was no send thread and the ZooKeeper connection was still considered fine., Camille,
 I dont think we have a dependency on mockito yet. I am adding one in ZOOKEEPER-1271., Rakesh, 
 Can you please take a look at the failing test and also look at adding a test case?
, Mahadev/Camille/Gunnar,

I have checked the trunk versions, currently ClientCnxn.SendThread.run() has been modified as follows by catching 'Throwable'. So the clients will get Disconnected events and the problem mentioned in the issue will never be occured.

Earlier it was 'Exception' when the defect was raised. I think the patch neednot be required. Please give your opinion.

{noformat}
void run() {
  while (zooKeeper.state.isAlive()) {
    try {
      ...
    } catch (Throwable e) {
      // handled all exceptions and sending Disconnected events. retrying
    }
  }
  ...
}
{noformat}

Thanks,
Rakesh, FWIW, in our case it was an OutOfMemoryError that killed the send thread. Catching Throwable might be ok but I wonder if a OutOfMemoryError should be handled differently, i.e. any subsequent memory allocation  might fail because of lack of resources. Should an error be re-thrown?, Hi Gunnar,

In case of OutOfMemoryError also:
ZKClient will get the notification of 'Disconnected' event, here the other threads which are interacting with the ZooKeeper can listen for this event before any datatransfer. So the client applications can be able to gracefully handle the scenario of interacting threads.

IMO, if required we can introduce 'timed reconnect' only for new clients, but it makes the client code more complex., Previously the OOME escaped and the send thread died silently. If that's no longer the case then I think the issue can be marked as fixed (or works-for-me). :), Hi Gunnar, Thanks a lot for your comments!

Just to sum up my current understanding, any exception/error conditions 'SendThread' would dispatch the 'Disconnected' event and retrying.

I think it works. If no one else objects I'll mark this as fixed., Hi Gunnar, 

Un-assigning myself. If you agree the comments, please mark as 'Resolved' and close it. 
I don't want to appear to be blocking it or such. Will keep watching to see if there is some way I can help out:)

Thanks,
Rakesh
, As a user an non-commiter I'm reluctant marking this issue resolved. Is that the common processes used at ZK?, Seems like you all think this is a non-issue, so I will mark it as resolved. Please do feel free to re-open if you see the issue again., Fixed by other refactorings and changes to client cnxn., bq. Fixed by other refactorings and changes to client cnxn.

Did these refactorings happen in any 3.3.X or 3.4.X release?  What JIRA are they related to?  I think I am hitting this, and want to patch my system without upgrading to trunk.  Do you all think I can just apply the attached patch to fix it?  Or should I instead apply the patches Camille refers to above that are in trunk?, 3.4.X and trunk, I believe. Are you seeing it in 3.4.X? We did a big refactor between 3.3.X and 3.4... I can look for a jira if you're interested., No, this was on 3.3.3 (sorry, I should have mentioned that before).  That's great to know, thanks!, Hi Jeremy, I have seen 'ClientCnxn.java' code has been refactored as part of ZOOKEEPER-1174 and has modified to Throwable instead of Exception block. Later when reviewing the code, I feel there is a minor chance of OOME due to object creation. Please refer ZOOKEEPER-1375 for more info.]