[Started working on this.
Making the KeyManager and TrustManager algorithm as a configurable property , which user can pass as the vm arguments.
In addition to the already existing properties

-Dzookeeper.ssl.keyStore.location
-Dzookeeper.ssl.keyStore.password
-Dzookeeper.ssl.trustStore.location
-Dzookeeper.ssl.trustStore.password

2 new properties can also be defined in the server startup script.
-Dzookeeper.ssl.keyManager.algorithm
-Dzookeeper.ssl.trustManager.algorithm

If the properties are missing then it will fallback to the default algorithm supported by underlying jre., Additional user-facing configuration for this might not be necessary, and it might push more operational complexity onto administrators.  FWIW, there is a bit of code in Hadoop that takes the approach of runtime detection of the IBM JRE, and then automatically toggles between the two algorithms.  See the [SSLFactory|https://github.com/apache/hadoop/blob/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/ssl/SSLFactory.java#L71] and [PlatformName|https://github.com/apache/hadoop/blob/trunk/hadoop-common-project/hadoop-auth/src/main/java/org/apache/hadoop/util/PlatformName.java#L46-L50] classes.

A challenge we've had in the Hadoop community is that not many (none?) of the committers have access to the IBM JRE for verification of proposed patches.  Saurabh, if you can help on any testing efforts related to IBM JRE support, we would greatly appreciate that., I believe Eugene took much of the original implementation from Hadoop, so this makes sense to me (what Chris said)., Yeah , if some solution already exists for the same problem then there is no meaning in reinventing the wheel.

I had gone through the classes as you mentioned in the above comment and will take the same approach to fix it.

Thanks for pointing it out.

I will keep you posted once i test it.
]