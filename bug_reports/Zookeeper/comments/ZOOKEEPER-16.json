[Ben please document the spec for this and reassign to Andrew for implementation.

Needs to be implemented in both c and java clients.
, The following characters cannot be used because they don't display well (or render in confusing ways):
 * overlong encodings
 * \u0000 (we use null terminated strings!)
 * \u0001-\u0019,\u00-\u009F.
 * '.' and '..' cannot be path elements. For example, the following would be invalid paths '/a/b/./c' and '/a/b/../c'.  (This could result in confusion since ZooKeeper does not use relative references.)
 * The following characters are also not valid for use \ud800-\uf8ff, \ufff0-\uffff, \uXfffe-\uXffff (where X is 1 to e), \uf0000-\ufffff

Any of these violations should result in an error, decoding should stop, and an exception thrown or error returned., one thing i just realized is that -- 

is /user/mahadev//test == /user/mahadev/test in Zookeeper?

We do raw string comparison. So i think the above is false. 

, What do we want it to be? A NOP (they are equal as in bash) or an error? Error might be easier to deal with (simplifies equality test/path processing) and could be an indication of "code smell" anyway (ie error in the client path consing code). My personal pref would be error.

, what i menat was ... a client doing 

get on /user/mahadev/test 
and a get on /user/mahadev//test.
usually any filesystem like namespace handles this and would return the same thing.

an error is fine ... this has nothing to do with this jira. Sorry abt the comment. 

, I agree it should be (and for that example will be) an error. All valid paths are canonical paths., Are we validating that the path is not null?

See ZOOKEEPER-77 which seems to be throwing an NPE due to null path.
, As part of this fix we need to verify that the patch specified by the user is non-null.
, this patch starts to validate the path, but quickly runs into an issue.

create(//sync) handles validation fine, we throw KeeperException.BadArgumentException

however create(//async) is not declared to throw KeeperException

we can call the async callback handler with rc code of BadArgument, however this is suboptimal, it would be much better to throw an exception right away. We lose the error message as well (contained by the exception)

our best option afiak is to deprecate the current async methods and create new async methods which throw KE and have "Path path" arguments instead of "String path" arguments. We could validate the path when Path is created (a new zk type), also passing around Path objects might allow us to optimize serialization/deser during the marshalling stages.

It really is unfortunate that the async methods aren't declared to throw KeeperException, adding this would allow error handling flexibility in future (perhaps some other error type we haven't throught of, separate from path validation).

Thoughts?
, We could throw an IllegalArgumentException, then the API wouldn't be a problem. Arguably an invalid path is along the same lines as a null pointer. (Especially given that a null path is an invalid case.)

If we want to make it a checked exception we should throw BadArgumentException and not KeeperException. The async methods have the nice property that you don't have to worry about KeeperExceptions happening. Any exceptions will come through the callback. It is a pain to have to handle exceptions in two places: once when you make the call and again when you get the callback., I like Illegalargumentexception... we dont have to throw a checked exception.... the application should not be using invalid paths for creating zookeeper nodes, so i am fine with illegalargument exceptions.
, Hm, I didn't think of IAE, that's a good idea. I didn't know about the concept of not having checked excep on async either, that's an interesting idea. Can we document that somewhere? perhaps the internals documentation in forrest?

I'll update the patch to use IAE.
, Updated patch based on comment/feedback.

We now throw IllegalArgumentException in the java client if the path is not valid
In the c client we return a rc of ZBADARGUMENT (c client was already checking for null - just added the addl conditions)

Tests added to both c and java.

Note: valid path definition already existed in the programmer guide, no additional doc changes were necessary -- although I did update the java and c client API docs as appropriate.
, I went over the patch and it looks good to me, although it is stale and I couldn't apply it to trunk. Also, one question I have is why you don't have to declare all methods in ZooKeeper.java that invoke validatePath as throwing IllegalArgumentException.

I'm canceling the patch for now.

(Never mind about the comment on IllegalArgumentException. I just found out the reason: it is an unchecked exception.), Patch is stale., Remerged against the mainline.

Not declaring throws IAE because it's a runtime exception - but I did document in the javadoc for the effected methods.
, The patch looks good. there are two issues that i see:

1) we don't validate the path at the server. in some sense that is the most important place to do it. we need to put checks into PrepRequestProcessor and FinalRequestProcessor.
2) the check for C may give false positives for unicode characters. if the server check is in place, we can probably just make the client do the obvious check: c > 0x00 && c < 0x1f and then let the server catch the rest., i think the we should avoid doing more work at the server and let the client handle the path checking. Doing this check in the PrepRequestPRocessor will have performance impact. On the other hand we could do some minor chekcing on the server to see if the path is null, starts with / and others... 

we can open up another jira for path validation on server side if you feel strongly abt it.

for 2) 
their should be some client c libarary that should catch unicode characters .. again we can open another jira for that. for now we can go with this... 
, well thinking abt it more ... 

- if we just do a check for path in "create" in prep requestprocessor then it should not be a performance impact  , Included Ben's suggestion regarding c client check.
Also fixed a test broken by other commit., this patch adds the check at the server only on create. also added a test ot verify it,, I just committed this. Thanks pat., Committed revision 739446.
(closing on behalf of mahadev who committed this), Integrated in ZooKeeper-trunk #217 (See [http://hudson.zones.apache.org/hudson/job/ZooKeeper-trunk/217/])
    ]