[The valgrind run looks like this:

{code}
==19544==
==19544== HEAP SUMMARY:
==19544==     in use at exit: 7,183 bytes in 6 blocks
==19544==   total heap usage: 649 allocs, 643 frees, 61,217 bytes allocated
==19544==
==19544== 5 bytes in 1 blocks are definitely lost in loss record 1 of 5
==19544==    at 0x4C297CD: malloc (in /usr/lib64/valgrind/vgpreload_memcheck-amd64-linux.so)
==19544==    by 0x5748D81: strdup (in /lib64/libc-2.14.1.so)
==19544==    by 0x402BF1: processline (cli.c:458)
==19544==    by 0x401825: main (cli.c:612)
==19544==
==19544== 10 bytes in 2 blocks are definitely lost in loss record 2 of 5
==19544==    at 0x4C297CD: malloc (in /usr/lib64/valgrind/vgpreload_memcheck-amd64-linux.so)
==19544==    by 0x5748D81: strdup (in /lib64/libc-2.14.1.so)
==19544==    by 0x402AB1: processline (cli.c:433)
==19544==    by 0x401825: main (cli.c:612)
==19544==
==19544== 2,048 bytes in 1 blocks are definitely lost in loss record 4 of 5
==19544==    at 0x4C297CD: malloc (in /usr/lib64/valgrind/vgpreload_memcheck-amd64-linux.so)
==19544==    by 0x4C29957: realloc (in /usr/lib64/valgrind/vgpreload_memcheck-amd64-linux.so)
==19544==    by 0x4E43771: addrvec_grow (addrvec.c:85)
==19544==    by 0x4E43912: addrvec_append (addrvec.c:140)
==19544==    by 0x4E367B0: update_addrs (zookeeper.c:827)
==19544==    by 0x4E37A67: zookeeper_init (zookeeper.c:1069)
==19544==    by 0x4017A7: main (cli.c:583)
==19544==
==19544== LEAK SUMMARY:
==19544==    definitely lost: 2,063 bytes in 4 blocks
==19544==    indirectly lost: 0 bytes in 0 blocks
==19544==      possibly lost: 0 bytes in 0 blocks
==19544==    still reachable: 5,120 bytes in 2 blocks
==19544==         suppressed: 0 bytes in 0 blocks
==19544== Reachable blocks (those to which a pointer was found) are not shown.
==19544== To see them, rerun with: --leak-check=full --show-reachable=yes
==19544==
==19544== For counts of detected and suppressed errors, rerun with: -v
{code}, -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12567068/ZOOKEEPER-1632.001.patch
  against trunk revision 1438375.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    -1 release audit.  The applied patch generated 26 release audit warnings (more than the trunk's current 24 warnings).

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1369//testReport/
Release audit warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1369//artifact/trunk/patchprocess/patchReleaseAuditProblems.txt
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1369//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1369//console

This message is automatically generated., no tests included because this simply fixes a minor memory leak, Colin, it seems we're freeing zh->addrs twice now in destroy. Line 409 already existed.

bq.     addrvec_free(&zh->addrs);
, that's a good catch-- we don't need to call {{addrvec_free(&zh->addrs)}} multiple times (although it is safe to do so.), -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12567876/ZOOKEEPER-1632.002.patch
  against trunk revision 1441922.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1381//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1381//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1381//console

This message is automatically generated., +1, thanks, Colin. If there is no other concern with this patch, I'll get this one committed shortly., Patch does not apply to 3.4 and while preparing to commit it, I realized that there is another case in cli.c that we were not covering. Specifically, I believe we need to use my_string_completion_free_data with the "sync" command.

I'll upload new patches shortly., Can I get a +1 (or not) here, please?, -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12616266/ZOOKEEPER-1632-trunk.patch
  against trunk revision 1546227.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1810//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1810//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1810//console

This message is automatically generated., Haven't look at those source files before, but the fix and the patches lgtm. So +1 with the caveat of not knowing those files. , Actually, what happens in:

{noformat}
-        rc = zoo_async(zh, line, my_string_completion, strdup(line));
+        rc = zoo_async(zh, line, my_string_completion_free_data, strdup(line));
         if (rc) {
             fprintf(stderr, "Error %d for %s\n", rc, line);
         }
{noformat}

when rc != 0? It seems that my_string_completion_free_data wouldn't be call at that point, so the result of strdup(line) wouldn't be free. We should probs save it in a temp ptr and free that when zoo_async returns rc != 0. , So -1 until we clarify that :), you're right, we don't necessarily call the completion function in the case of an error. thanks for spotting it., I'm actually thinking that we should leave as my lastest patch proposed. It only leaks in the case the client fails to submit an operation, so something internal to ZK went wrong. In the regular case, it frees the line dup just fine.

Trying to fix it by simply freeing the line dup in the if(rc) block may cause the completion function to find a dangling pointer. , Re-submitting the same patch., How so? Isn't the promise that if rc != 0 then your callback won't ever be called?, Actually, the error checking in zoo_async doesn't return early on every case:

https://github.com/apache/zookeeper/blob/trunk/src/c/src/zookeeper.c#L3513

So you could get rc distinct from ZOK  but still adaptor_send_queue(zh, 0) could have been called. So we'll just have to leak in the case of an error it seems :(., Agreed, that's how I see it too. Properly fixing it might require a bit more work than this. Shall we create a jira to work on it for some future release?, Yup â€” could you please create one? Otherwise I will, later on (my connectivity isn't great atm). Thanks, [~fpj]., Does this sound reasonable: https://issues.apache.org/jira/browse/ZOOKEEPER-1828 ?, Thank you for opening the jira Raul. I'm checking these patches in., SUCCESS: Integrated in ZooKeeper-trunk #2140 (See [https://builds.apache.org/job/ZooKeeper-trunk/2140/])
ZOOKEEPER-1632. fix memory leaks in cli_st (fpj via michim) (michim: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1547702)
* /zookeeper/trunk/CHANGES.txt
* /zookeeper/trunk/src/c/src/cli.c
* /zookeeper/trunk/src/c/src/zookeeper.c
, Thanks, guys! I'm adding a release note about this fix., Closing issues after releasing 3.4.6.]