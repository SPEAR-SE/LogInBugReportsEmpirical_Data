[Patch for trunk., Thanks for reporting this issue. Could you please point me the way PrepRequestProcessor producing the transaction larger than the max buffer size of jute?. Also, I hope in your cluster all zk servers are having the default "jute.maxbuffer=1MB", [~rakeshr]
{quote}
Could you please point me the way PrepRequestProcessor producing the transaction larger than the max buffer size of jute?
{quote}
It's a multi request from hbase regionserver which wants to copy a large replication queue of a dead regionserver.

{quote}
I hope in your cluster all zk servers are having the default "jute.maxbuffer=1MB"
{quote}
OK. I am trying to reproduce the problem in a test cluste with jute.maxbuffer=1MB.
, [~rakeshr]
Add log in ZKDatabase to validate that the  size of Proposal may larger than the request size.

{code}
2015-01-16 17:56:07,469 [myid:] - INFO  [SyncThread:0:ZKDatabase@261] - Request type 14 size: 5499 zxid: 2, Proposal size:5526
{code}, Limit the size of packet less than the half of jute max buffer size, -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12693209/ZOOKEEPER-2101-v2.diff
  against trunk revision 1646992.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2483//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2483//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2483//console

This message is automatically generated., Check proposal size in PrepRequestProcessor and throw ProposalTooLargeException exception when proposal is larger then the max jute buffer size.
, -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12693844/ZOOKEEPER-2101-v3.diff
  against trunk revision 1646992.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    -1 javadoc.  The javadoc tool appears to have generated 2 warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2484//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2484//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2484//console

This message is automatically generated., Thanks for the patch. I've few comments:
- The attached log is comparing {{request.request.capacity()}}  and {{data.length}}. But {{data.length}} contains both request and additional fields. So comparing these both won't give exact values.
- It would be really great if you can add unit test.
- In the log message, use {} instead of +
{code} 
LOG.error("Proposal size larger than max buffer:" + BinaryInputArchive.maxBuffer
+                + " set by jute.maxbuffer");
{code}
- Make this to debug level
{code}
if (request.request != null) {
+                LOG.info("Request type " + request.type + " size: " + request.request.capacity()
+                    + " zxid: " + request.zxid + ", Proposal size:" + data.length);
             }
{code}
, I notice this patch introduces a new error code, "PROPOSALTOOLARGE". If you add a new error code, you will need to modify the C client to recognize the new error code as well.

However, perhaps an existing error code would be suited to this, such as "BADARGUMENTS"?, -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12693844/ZOOKEEPER-2101-v3.diff
  against trunk revision 1672934.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    -1 patch.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2636//console

This message is automatically generated., Update for [~rakeshr] review.
- Add unit tests
- Fix the log problems

{quote}
The attached log is comparing request.request.capacity() and data.length. But data.length contains both request and additional fields. So comparing these both won't give exact values.
{quote}
Just add more info in the log, [~rakeshr]
Sorry for late replay.
Could you help to review the new patch? Thanks., [~iandi]
{quote}
However, perhaps an existing error code would be suited to this, such as "BADARGUMENTS"?
{quote}
Good advice. Change the error code to BADARGUMENTS. Thanks.
, -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12732837/ZOOKEEPER-2101-v4.diff
  against trunk revision 1679313.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 5 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2698//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2698//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2698//console

This message is automatically generated., The failed test has no relation with this patch. 
And rerun it in my machine for many times and all passed.
, [~michim]
Could you help to review this patch? I saw you help to update fix versions. :), Thanks [~liushaohui] for taking care this. Just few comments:

# Move {{          baos.close();}} to finally block
# Please format the lines, few lines exceeds > 80 lines.
# In tests, any specific reason to increase the value of {{TEST_MAXBUFFER}} to 1000?
# I missed this part in my previous review. I've checked other places, it is checking < 0 condition also.
  IMO good to follow the same way like,
{code}
if (barr.length < 0 || barr.length > BinaryInputArchive.maxBuffer) {
{code}, Update for [~rakeshr]'s review.
{quote}
Move {{ baos.close();}} to finally block
{quote}
Done.
{quote}
Please format the lines, few lines exceeds > 80 lines.
{quote}
Done.
{quote}
In tests, any specific reason to increase the value of TEST_MAXBUFFER to 1000?
{quote}
The size of extra fields in transaction is large than 100.
So we increase the TEST_MAXBUFFER to 1000.

{quote}
checking < 0 condition also.
{quote}
Done.
, +1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12733704/ZOOKEEPER-2101-v5.diff
  against trunk revision 1679951.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 5 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2702//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2702//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2702//console

This message is automatically generated., Thanks for all your work!

Apart from the following comments +1 from me.

# Instead of try-catch, can we use {{IOUtils.cleanup(LOG, baos);}} for the cleaning up ?
{code}
 try {
+            baos.close();
+          } catch (IOException e) {
+            LOG.error("This really should be impossible", e);
+          }
{code}
# Now with the new condition, it can throw exception < 0 and > maxbuffer. In that case, good to reflect the message more clear like below. Presently its saying {{larger than max buffer}}. Also, please do the necessary changes for the log messages.
{code}
throw new IOException("Len error " + len);
{code}, Update for [~rakeshr]'s review.
- Using IOUtils.cleanup(LOG, baos) Instead of try-catch.
- Update the log messages:
{code}
        throw new IOException("Len error " + barr.length
            + ", less than 0 or larger than max buffer: "
            + BinaryInputArchive.maxBuffer + " set by jute.maxbuffer");
{code}, +1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12733762/ZOOKEEPER-2101-v6.diff
  against trunk revision 1679951.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 5 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2703//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2703//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2703//console

This message is automatically generated., [~rakeshr]
Do we need another +1 for commit? Or could you help to push this issue?
, It would be good to get another +1 from a committer. Any one would like to review. Thanks!

cc: [~rgs], [~hdeng], [~michim], [~shralex], * BinaryOutputArchive.java:
indent.

* PrepRequestProcessor:
I am not sure about this. How can a failed op get a zxid? Does the zxid increment here? I'm also asking a question here :)

* BufferSizeTest:
indent., Update for [~hdeng]'s reivew.

- Fix the indent., [~hdeng]
{code}
        checkProposalSize(request);
        request.zxid = zks.getZxid();
{code}
According to my understanding， the zxid has increamed before this codes by calling zks.getNextZxid().
The zks.getZxid() just get current zxid.
, +1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12734317/ZOOKEEPER-2101-v7.diff
  against trunk revision 1680471.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 5 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2707//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2707//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2707//console

This message is automatically generated., Another question:

in SerializeUtils:
{code}
serializeRequest():
   catch (IOException e) {
	            LOG.error("This really should be impossible", e);
{code}

If such an unexpected exception happens, should the exception goes up and let server fail?, [~hdeng]
Actually, these code are just moved from ZKDatabase.java or Leader.java. Please see the patch.
I am not very sure about why it just ingore those exceptions. Maybe it's really impossible.

Or we can open another jira issue to discuss it., [~hdeng]
Any suggestion?, It's just my personal opinion. Swallowing a system failure exception doesn't look like a good choice. I usually prefer to let the system crash if not recoverable.

I'm not sure why in Leader and ZKDatabase it did that. So I will leave it to others to comment., {quote}
Swallowing a system failure exception doesn't look like a good choice. I usually prefer to let the system crash if not recoverable.
{quote}
Agreed

{quote}
So I will leave it to others to comment.
{quote}
From the log, the last changes of these code are done by [~fpj] in ZOOKEEPER-106

[~fpj]
Do you know why the exceptions is ignored in ZKDatabase.java or Leader.java? Thanks~
{code}
      ByteArrayOutputStream baos = new ByteArrayOutputStream();
      BinaryOutputArchive boa = BinaryOutputArchive.getArchive(baos);
      try {
          request.hdr.serialize(boa, "hdr");
          if (request.txn != null) {
              request.txn.serialize(boa, "txn");
          }
          baos.close();
      } catch (IOException e) {
          LOG.error("This really should be impossible", e);
      }
{code}, Can we get this finished up folks?, I will review it by this weekend and hopefully get it committed soon., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12734317/ZOOKEEPER-2101-v7.diff
  against trunk revision 1697551.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 5 new or modified tests.

    -1 patch.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2843//console

This message is automatically generated., Awesome thanks [~hdeng]!, I have one and only one comment on the swallowed exception as mentioned above. It would be great if other committers can review and give more feedback.

[~liushaohui], are you still available for the JIRA? Otherwise I can take care of it. I want to get this done by the weekend., [~hdeng]/[~liushaohui] any update on this issue..?, -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12734317/ZOOKEEPER-2101-v7.diff
  against trunk revision 1715590.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 5 new or modified tests.

    -1 patch.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2972//console

This message is automatically generated., Rebase on the trunk

[~brahmareddy] [~hdeng]
Could you help to push this patch?, +1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12774993/ZOOKEEPER-2101-v8.diff
  against trunk revision 1715590.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 5 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2973//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2973//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2973//console

This message is automatically generated., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12774993/ZOOKEEPER-2101-v8.diff
  against trunk revision 1733348.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 5 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    -1 findbugs.  The patch appears to introduce 1 new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3061//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3061//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3061//console

This message is automatically generated., +1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12774993/ZOOKEEPER-2101-v8.diff
  against trunk revision 1748630.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 5 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3221//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3221//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3221//console

This message is automatically generated., Hello, 
Can anybody shed some light on why it is not yet resolved? 
, GitHub user anmolnar opened a pull request:

    https://github.com/apache/zookeeper/pull/412

    ZOOKEEPER-2101: Transaction larger than max buffer of jute makes zookeeper unavailable

    This patch has been created to reanimate an ancient, unclosed Jira:
    https://issues.apache.org/jira/browse/ZOOKEEPER-2101
    
    Original patch was done by Liu Shaohui and applied to latest trunk
    without any modification.
    
    This one would be a nice kick off for implementing jute (max) buffer size
    monitoring.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/anmolnar/zookeeper ZOOKEEPER-2101

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/zookeeper/pull/412.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #412
    
----
commit 68a5672aa2df542d7f7979d3876be871b685a197
Author: Andor Molnár <andor@cloudera.com>
Date:   2017-10-30T14:28:28Z

    ZOOKEEPER-2101: This patch has been created to reanimate an ancient, unclosed Jira:
    
    https://issues.apache.org/jira/browse/ZOOKEEPER-2101
    
    Original patch was done by Liu Shaohui and applied to latest trunk
    without any modification.
    
    This one would be a nice kick off for implementing jura buffer size
    monitoring.

----
, I picked this one up and created a PR: https://github.com/apache/zookeeper/pull/412

Please review., -1 overall.  GitHub Pull Request  Build
      

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 5 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 3.0.1) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/1128//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/1128//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/1128//console

This message is automatically generated., +1 overall.  GitHub Pull Request  Build
      

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 5 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 3.0.1) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/1129//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/1129//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/1129//console

This message is automatically generated., Github user afine commented on a diff in the pull request:

    https://github.com/apache/zookeeper/pull/412#discussion_r147818798
  
    --- Diff: src/java/main/org/apache/jute/BinaryOutputArchive.java ---
    @@ -115,6 +115,11 @@ public void writeBuffer(byte barr[], String tag)
         		out.writeInt(-1);
         		return;
         	}
    +    	if (barr.length >= BinaryInputArchive.maxBuffer) {
    --- End diff --
    
    maybe we could also use UNREASONABLE_LENGTH from BinaryInputArchive?
, Github user afine commented on a diff in the pull request:

    https://github.com/apache/zookeeper/pull/412#discussion_r147798914
  
    --- Diff: src/java/main/org/apache/zookeeper/server/PrepRequestProcessor.java ---
    @@ -905,10 +907,22 @@ protected void pRequest(Request request) throws RequestProcessorException {
                     request.setTxn(new ErrorTxn(Code.MARSHALLINGERROR.intValue()));
                 }
             }
    +        checkProposalSize(request);
             request.zxid = zks.getZxid();
             nextProcessor.processRequest(request);
         }
     
    +    private void checkProposalSize(Request request) {
    +        if (request.getHdr() == null) return;
    +        byte[] data = SerializeUtils.serializeRequest(request);
    --- End diff --
    
    I'm concerned about possible performance implications here. Are we serializing this request an extra time here?
, Github user afine commented on a diff in the pull request:

    https://github.com/apache/zookeeper/pull/412#discussion_r147816281
  
    --- Diff: src/java/main/org/apache/zookeeper/server/PrepRequestProcessor.java ---
    @@ -905,10 +907,22 @@ protected void pRequest(Request request) throws RequestProcessorException {
                     request.setTxn(new ErrorTxn(Code.MARSHALLINGERROR.intValue()));
                 }
             }
    +        checkProposalSize(request);
             request.zxid = zks.getZxid();
             nextProcessor.processRequest(request);
         }
     
    +    private void checkProposalSize(Request request) {
    +        if (request.getHdr() == null) return;
    +        byte[] data = SerializeUtils.serializeRequest(request);
    +        if (data.length > BinaryInputArchive.maxBuffer) {
    +            LOG.error("Len error {}, larger than max buffer: {} set by jute.maxbuffer",
    +              data.length, BinaryInputArchive.maxBuffer);
    --- End diff --
    
    maybe there is a more appropriate place for maxBuffer since it applies to input and output archive
, Github user afine commented on a diff in the pull request:

    https://github.com/apache/zookeeper/pull/412#discussion_r147811470
  
    --- Diff: src/java/main/org/apache/jute/BinaryOutputArchive.java ---
    @@ -115,6 +115,11 @@ public void writeBuffer(byte barr[], String tag)
         		out.writeInt(-1);
         		return;
         	}
    +    	if (barr.length >= BinaryInputArchive.maxBuffer) {
    --- End diff --
    
    I'm not sure how valid this check is. The output buffer could contain other data that makes it larger than the maxBuffer even if barr is small right? Wouldn't it make more sense to track how much data has been written to "out"?
, Github user afine commented on a diff in the pull request:

    https://github.com/apache/zookeeper/pull/412#discussion_r147803340
  
    --- Diff: src/java/main/org/apache/zookeeper/server/util/SerializeUtils.java ---
    @@ -148,4 +152,20 @@ public static void serializeSnapshot(DataTree dt,OutputArchive oa,
             dt.serialize(oa, "tree");
         }
     
    +    public static byte[] serializeRequest(Request request) {
    +        if (request == null || request.getHdr() == null) return null;
    --- End diff --
    
    are there valid situations where this could return null?
, Github user afine commented on a diff in the pull request:

    https://github.com/apache/zookeeper/pull/412#discussion_r147815941
  
    --- Diff: src/java/main/org/apache/zookeeper/server/PrepRequestProcessor.java ---
    @@ -905,10 +907,22 @@ protected void pRequest(Request request) throws RequestProcessorException {
                     request.setTxn(new ErrorTxn(Code.MARSHALLINGERROR.intValue()));
                 }
             }
    +        checkProposalSize(request);
             request.zxid = zks.getZxid();
             nextProcessor.processRequest(request);
         }
     
    +    private void checkProposalSize(Request request) {
    +        if (request.getHdr() == null) return;
    +        byte[] data = SerializeUtils.serializeRequest(request);
    +        if (data.length > BinaryInputArchive.maxBuffer) {
    --- End diff --
    
    why do we need this if we are also checking how much data has been written when writing to the binary output archive?
, Github user anmolnar commented on the issue:

    https://github.com/apache/zookeeper/pull/412
  
    Thanks @afine for looking into this and the detailed explanation.
    
    Unfortunately I cannot answer your question whether there could be other cases than multi when proposal size is bigger than the request. I'd would say *no*, but I'm not sure.
    
    Original patch was intended to implement a generic validation on the proposal size, but to stay on safe side I can move that check inside multi to avoid the performance implication in other cases.
    
    What do you think?
, Github user anmolnar commented on the issue:

    https://github.com/apache/zookeeper/pull/412
  
    I'm unable to create proper unit test for the issue, because cannot reliably reproduce the problem. Closing this PR.
, Github user anmolnar closed the pull request at:

    https://github.com/apache/zookeeper/pull/412
, I was working on creating a proper unit test which is reliably reproduces the original problem, because the patch doesn't contain any. Unfortunately I couldn't find a multi command which would end up in a too large proposal, so unable to create test.

I suggest to close this ticket until someone provides example/test for it., Closing due to lack of response/interest.]