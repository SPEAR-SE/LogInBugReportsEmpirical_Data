[Following are some of the proposals. Any thoughts or better suggestion would be appreciated.

*Proposal-1*
The main reason for the READY state transition is due to the multiple offer (ephemeral node) creation, so the successive starts can have validation logic by checking the existence of the ephemeral node which would be created during the previous startup. If exists, return by giving warning msg.

The same logic can be applied to the stop() api also. Here if the ephemeral node exists, it can allow the stop execution logic. Otherwise return by giving warn msg.

*Proposal-2*
During startup, after the successful creation of offer it can set the ‘running’ flag to true and all the further startup will be validated.
During stop after the successful deletion of the offer it will reset the ‘running’ flag to false. If running==true, it can allow the stop otherwise just give warn message.

*Note:* In the case if the LES is in FAILED state, then user has to explicitly stop() the LES and starts again. So the previous offer(ephemeral will be deleted).

I feel the +first approach+ is better, because let’s say if the zookeeper session got expired, here the client node can create new zookeeper session and simply starts. 
But in the +second approach+ user has to explicitly stop() and then start(). Also when stopping it will fail since the session got expired and goes to FAILED state transitions.


Thanks,
Rakesh
, Attached the patch based on the *proposal-1* : provided start & stop validation logics by checking whether the offer (ephemeral node) exists or not. Please review the test cases and the fix.

Thanks,
Rakesh, +1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12498880/ZOOKEEPER-1225.patch
  against trunk revision 1180217.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/619//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/619//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/619//console

This message is automatically generated., Hi Rakesh, One question here. In makeOffer, we create an ephemeral, sequential node. Consequently, multiple invocations of start() with the trunk code would create multiple znodes for the same client. Isn't it sufficient that we just consider the first one when we try to determine if a given client is the leader in determineElectionStatus()? , Hi Flavio, Thanks for the interest. Yeah, here the determineElectionStatus() is judging with the recently created ephemeral node and updating its status accordingly.

As you suggested, LEStrategy would either consider the first one or not to allow multiple znode creation on start(). Anyway in the first case, its ignoring all the subsequent znodes and is having no extra logic with these znodes. IMO, better option would be restricts the multiple invocations & creation of znodes on start(). Also the recipe would be able to avoid the multiple/duplicate dispatchEvents., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12498880/ZOOKEEPER-1225.patch
  against trunk revision 1615240.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    -1 patch.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2260//console

This message is automatically generated., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12498880/ZOOKEEPER-1225.patch
  against trunk revision 1748630.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    -1 patch.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3234//console

This message is automatically generated.]