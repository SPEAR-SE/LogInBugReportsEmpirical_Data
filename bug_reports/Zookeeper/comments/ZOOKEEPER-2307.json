[There is a problem in the code. Runtime value of acceptedEpoch is being updated before writing to acceptedEpoch file
    {code}    
    public void setAcceptedEpoch(long e) throws IOException {
        acceptedEpoch = e;
        writeLongToFile(ACCEPTED_EPOCH_FILENAME, e);
    }
    {code}
To fix the issue we should first write to file and then update the run time value. Same change should be done for currentEpoch as well., Submitting test patch ZOOKEEPER-2307-01.patch to reproduce the scenario, also to have better understanding of the scenario. Please review the proposed solution., I don't see a problem with inverting the order of the operations, but I'm thinking that these methods that update epochs might need to be synchronized. The problem you're describing seems to be due to concurrent access., Thanks [~fpj] for your quick response
AFAIK, operation order is the real problem
Have a look at code snippet in {org.apache.zookeeper.server.quorum.Learner.registerWithLeader(int)}
{code}
if (newEpoch > self.getAcceptedEpoch()) {
    wrappedEpochBytes.putInt((int)self.getCurrentEpoch());
    self.setAcceptedEpoch(newEpoch);
} else if (newEpoch == self.getAcceptedEpoch()) {
    // since we have already acked an epoch equal to the leaders, we cannot ack
    // again, but we still need to send our lastZxid to the leader so that we can
    // sync with it if it does assume leadership of the epoch.
    // the -1 indicates that this reply should not count as an ack for the new epoch
    wrappedEpochBytes.putInt(-1);
}
{code}
Suppose, newEpoch=1 and self.getAcceptedEpoch()=0
If self.setAcceptedEpoch(newEpoch); throws error while writing to file. The server will go for leader election and when again comes at code {{if (newEpoch > self.getAcceptedEpoch())}} this time self.getAcceptedEpoch() will return 1  and will proceed for Leader.ACKEPOCH. 

self.getAcceptedEpoch() should not have returned 1 because the initial value was 0 and setAcceptedEpoch() was unsuccessful.
, ZOOKEEPER-2162 seems very similar
, The issue seems similar but actually it is not. Scenarios are completely different., Hi [~fpj], What is your opinion on the proposed fix now.
Any other opinion on the proposed fix.
Junit test case patch is already attached, I think it will help to quickly understand the scenario. , Submitting the fix., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12770769/ZOOKEEPER-2307-02.patch
  against trunk revision 1712218.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 5 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    -1 release audit.  The applied patch generated 1 release audit warnings (more than the trunk's current 0 warnings).

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2943//testReport/
Release audit warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2943//artifact/trunk/patchprocess/patchReleaseAuditProblems.txt
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2943//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2943//console

This message is automatically generated., Previous patch failed two tested cases {{testTxnTimeout}} and {{testNormalRun}} in {{org.apache.zookeeper.server.quorum.Zab1_0Test}} This happened because after this issue fix currentEpoch and acceptedEpoch update takes more time as it is first written to file and then run time value is changed. 

To fix the these failing test case, now we should wait at least for a time taken to write small data to a file., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12772143/ZOOKEEPER-2307-03.patch
  against trunk revision 1713774.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 8 new or modified tests.

    -1 javadoc.  The javadoc tool appears to have generated 1 warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2956//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2956//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2956//console

This message is automatically generated., {quote}
-1 javadoc. The javadoc tool appears to have generated 1 warning messages.
{quote}
This patch has not introduced any new javadoc warning, The patch generally lgtm, a few nits and observations:

* do you mind adding java docs for QuorumPeer#setCurrentEpoch and QuorumPeer#setAcceptedEpoch? Specially, noting why they don't have to be synchronized would be useful (i.e.: they can only be called from the Leader and Learner classes and it all happens from one thread

* in src/java/test/org/apache/zookeeper/server/quorum/QuorumPeerTestBase.java why is getQuorumPeer added? Can't see where it's used. Also, there's some whitespaces/tabs before the method...

* i think waitUptoAFileWriteTime() is a bit racy and hackish and will break in the future. as much as i dislike sleep() calls in tests, in this case it's probably alright to loop a few times until getAcceptedEpoch() and getCurrentEpoch() converge

Other than, it looks good. Thanks [~arshad.mohammad]!

cc [~fpj] for further thoughts. , Ignore my comment about getQuorumPeer not being used, forgot to look at the new file src/java/test/org/apache/zookeeper/test/EpochWriteFailureTest.java..., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12772143/ZOOKEEPER-2307-03.patch
  against trunk revision 1748630.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 8 new or modified tests.

    -1 patch.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3227//console

This message is automatically generated., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12822995/ZOOKEEPER-2307-04.patch
  against trunk revision 1755379.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 5 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3347//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3347//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3347//console

This message is automatically generated., bq. -1 core tests. The patch failed core unit tests.
{{org.apache.zookeeper.test.AsyncHammerTest.testHammer}} failed. But the failure is not related to this patch. Verified locally, testHammer passed., Hi [~rgs], hope you remember this issue.
Submitted new patch ZOOKEEPER-2307-04.patch which addressed  your comments.
* updated logic toverify current epoch in Zab1_0Test
* removed unused method from org.apache.zookeeper.server.quorum.Zab1_0Test.deserializeSnapshot(), -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12822995/ZOOKEEPER-2307-04.patch
  against trunk revision 42c75b5f2457f8ea5b4106ce5dc1c34c330361c0.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 5 new or modified tests.

    -1 patch.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3564//console

This message is automatically generated.]