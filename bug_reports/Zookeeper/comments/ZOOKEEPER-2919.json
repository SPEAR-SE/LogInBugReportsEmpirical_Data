[Attached are the logs from 2 ZK servers., [~hanm], do you think this is a real issue in ZK? Thanks., [~junrao] Give me sometime to figure out this.. still in the process of figuring out legal issues after job change., [~junrao] I think this is a bug in ZK. We promised (as [~fpj] also pointed in the [email thread|http://mail-archives.apache.org/mod_mbox/zookeeper-user/201701.mbox/%3CB512F6DE-C0BF-45CE-8102-6F242988268E%40apache.org%3E]) that {quote} Receiving a session expiration means
that a closeSession has been committed {quote}, but this is not true in every case, and sometimes even when a client receives session expire event it's possible the session close is not committed across the quorum. This is because we don't differentiate "session closing" with "session closed" state internally at ZK. Between a session starts expiring and the session expired, a client will receive session expire for its requests to server but if the quorum is down at the same time, it's possible the close session is not committed.

Here is a canonical example similar to this Kafka case: 

Client A connects to Server 1. Server 1, 2 and 3 forms an ensemble.
1. For some reasons like network interruption, Server 1 thinks A is dead, so it starts expiring the session. It starts by setting the "is Closing" property of session object associated with A to true.
2. A fires a request to Server 1 (and network heals) and gets back session expire event. A thinks its session is expired but actually the session expiration was not finished yet. A gave up and starts a new session.
3. Meanwhile, Server 1 proposes to close the old session of A and at the same time, the quorum is down (1 was leader but got partitioned from 2 and 3). The proposal never landed at Server 2 and Server 3. 
4. 2 and 3 can talk, and they elects 2 as leader, who still has old session of A.
5. Network heals, 1 reconnects to ensemble, and found there is already a leader 2, sync with 2, truncate its log when needed.
6. 2 now happily accepts a new session request from A.
7. Eventually 2 expired old session object because there was not active client associates with that old session. Now between the new session established and the old session expiration, the old ephemeral nodes will be visible to clients.

There are two approaches to solve this issue. 

1. ZK users (e.g. Kafka ZK util client) could check the presence of the old ephemeral (either through polling or register a watcher) before trying recreate another ephemeral with same old path.
2. ZK fixes the semantic of session expire so when a client sees session expired, the session is really expired (instead of expiring). 

I'll propose a fix for 2, starting with a test case that can deterministically reproduce this issue.]