[I think you've set the cal but your client hasn't really authenticated. You need to configure the client with a jaas file and such., Actually I did that. I have a {{jaas.conf}} with the following content:

{code}
Client {
  com.sun.security.auth.module.Krb5LoginModule required
  useKeyTab=true
  keyTab="/tmp/my.keytab"
  storeKey=true
  useTicketCache=false
  principal="me/hostname@EXAMPLE.COM";
};
{code}

and then I set the CLIENT_JVMFLAGS to "-Djava.security.auth.login.config=/tmp/jaas.conf", and did {{kinit}} with the keytab:

{code}
kinit -k -t my.keytab me/hostname@EXAMPLE.COM
{code}

And, when the client is started, I see the following message:

{code}
2016-02-23 07:53:58,965 [myid:] - INFO  [main-SendThread(hostname:2181):ZooKeeperSaslClient$1@252] - Client will use GSSAPI as SASL mechanism.
2016-02-23 07:53:58,973 [myid:] - INFO  [Thread-1:Login@301] - TGT valid starting at:        Tue Feb 23 07:53:58 PST 2016
2016-02-23 07:53:58,973 [myid:] - INFO  [Thread-1:Login@302] - TGT expires:                  Thu Mar 24 08:53:58 PDT 2016
2016-02-23 07:53:58,973 [myid:] - INFO  [Thread-1:Login$1@181] - TGT refresh sleeping until: Sat Mar 19 03:50:26 PDT 2016
{code}

Doesn't this indicate the client is already authenticated?
, hey [~csun], I suggest you check the client logs to see if the client is authenticating successfully., Do you know where to get the client logs? I only found server logs in my machine...
Also, I don't quite understand why do you think the authentication doesn't happen successfully. Here is the complete output:

{code}
[zk: hostname(CONNECTING) 0] 2016-02-23 10:35:39,486 [myid:] - INFO  [main-SendThread(hostname:2181):Login@293] - successfully logged in.
2016-02-23 10:35:39,488 [myid:] - INFO  [Thread-1:Login$1@127] - TGT refresh thread started.
2016-02-23 10:35:39,493 [myid:] - INFO  [main-SendThread(hostname:2181):ZooKeeperSaslClient$1@252] - Client will use GSSAPI as SASL mechanism.
2016-02-23 10:35:39,500 [myid:] - INFO  [Thread-1:Login@301] - TGT valid starting at:        Tue Feb 23 10:35:39 PST 2016
2016-02-23 10:35:39,500 [myid:] - INFO  [Thread-1:Login@302] - TGT expires:                  Thu Mar 24 11:35:39 PDT 2016
2016-02-23 10:35:39,500 [myid:] - INFO  [Thread-1:Login$1@181] - TGT refresh sleeping until: Fri Mar 18 19:32:14 PDT 2016
2016-02-23 10:35:39,507 [myid:] - INFO  [main-SendThread(hostname:2181):ClientCnxn$SendThread@975] - Opening socket connection to server hostname/172.26.13.160:2181. Will attempt to SASL-authenticate using Login Context section 'Client'
2016-02-23 10:35:39,514 [myid:] - INFO  [main-SendThread(hostname:2181):ClientCnxn$SendThread@852] - Socket connection established, initiating session, client: /172.26.13.160:41593, server: hostname/172.26.13.160:2181
2016-02-23 10:35:39,521 [myid:] - INFO  [main-SendThread(hostname:2181):ClientCnxn$SendThread@1235] - Session establishment complete on server hostname/172.26.13.160:2181, sessionid = 0x1530e4d2d1c05cd, negotiated timeout = 30000

WATCHER::

WatchedEvent state:SyncConnected type:None path:null

WATCHER::

WatchedEvent state:SaslAuthenticated type:None path:null
{code}

From the message, it is clear that it recognized the "Client" section in my {{jaas.conf}} and established a session with the server. In the end there's also "state:SaslAuthenticated".
I would be very surprised if this authentication is unsuccessful - it should have some kind of error message in the output.
, Turned out I need to set the ACL to be:

{code}
[zk: hostname(CONNECTED) 1] setAcl /zk-test sasl:me:cdrwa
{code}

Without the hostname and Kerberos domain name.
This is very confusing and is not the same as described in this [doc|https://cwiki.apache.org/confluence/display/ZOOKEEPER/Zookeeper+and+SASL]!

, I got this one too.

It turns out that the root cause is that the service is started with:

{code}authProvider.1=org.apache.zookeeper.server.auth.SASLAuthenticationProvider
jaasLoginRenew=3600000
kerberos.removeHostFromPrincipal=true
kerberos.removeRealmFromPrincipal=true
{code}

Not putting the server and the realm when doing the setAcl in zkCli is giving a match when accessing the node as the message is then gone.

But if one puts the realm in, one is just locking him or herself out.

To remove the znode, I guess the only way is to start ZK zithout ACL checks (not very practical in production) or user a super user.

Now, how is one logging in with such a user in ZK with zkCli.sh ?

]