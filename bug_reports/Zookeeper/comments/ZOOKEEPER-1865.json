[-1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12654667/ZOOKEEPER-1865.patch
  against trunk revision 1608872.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    -1 javac.  The patch appears to cause tar ant target to fail.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2181//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2181//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2181//console

This message is automatically generated., The new unit test in the patch failed to build on Jenkins because it uses InetAddress.getLoopbackAddress(), which was introduced in Java 7.  Are there plans to require Java 7 or later for Zookeeper in the near future?, I don't think we have made plans to have such a requirement, but you can propose and see what others think. I don't object., Can we address this issue w/o jdk7?, bq. Are there plans to require Java 7 or later for Zookeeper in the near future?
[~ecarter], since ZOOKEEPER-1963 is in, we can go ahead with this. 
BTW could you tell me the reason for (self.initLimit - self.syncLimit). Also, there could be chance of self.syncLimit > self.initLimit and evaluate to negative integer?, -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12654667/ZOOKEEPER-1865.patch
  against trunk revision 1646992.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2475//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2475//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2475//console

This message is automatically generated., I'm not super crazy jazzed with all the inline calls to System.currentTimeMillis tbh. Feels like it will be a nightmare to test. Why not make it an overridable method to check this invariant?, We just hit this in our internal testing today too.

connect() throws a SocketTimeoutException if the specified timeout was reached.  This isn't perfect, but could this be leveraged to assume connect was "fast" if that exception wasn't thrown, and it was "slow" otherwise?  Unfortunately, if connect() takes just under the timeout to throw a different error, then we'll "lose" that time.  Probably not ideal, but wanted to suggest it as an option., Alternate patch using nanoTime instead of currentTimeMillis.  No unittests yet., Camille, we didn't like the use of currentTimeMillis because its not safe against time jumps and we've had problems with that in the past, so I'm thinking of polishing up the patch I just attached that uses System.nanoTime instead.  What do you think of that approach?

Do you have suggestions for some good tests that can leverage the nanoTime overridable method without further poking into the internals of connectToLeader?  Or were you thinking we should use it in already existing tests?, -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12694892/ZOOKEEPER-1865-nanoTime-noUT.patch
  against trunk revision 1655082.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    -1 patch.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2496//console

This message is automatically generated., Corrected diff format., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12695662/ZOOKEEPER-1865-nanoTime.patch
  against trunk revision 1655910.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2499//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2499//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2499//console

This message is automatically generated., Are the core unit tests stable?  I don't believe either of the failures were caused by my patch (there would be a specific new exception printed in the logs)., I'm going to retrigger a build. Can't believe this patch has been open for a year..., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12695662/ZOOKEEPER-1865-nanoTime.patch
  against trunk revision 1666760.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2566//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2566//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2566//console

This message is automatically generated., So, the test as written does not actually exhibit the error we're fixing; if we revert the meaningful change you've proposed to Learner it will still pass. I updated it a bit to get it to fail with the (mostly) old code (modulo some helper methods you wrote), and pass with the new code. Have attached. [~michim] if you have a chance to look at this quickly it would be nice to get this into 3.5.1, fix test, leaves Learner changes as-is, +1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12704626/ZOOKEEPER-1865-testfix.patch
  against trunk revision 1666764.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2568//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2568//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2568//console

This message is automatically generated., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12704626/ZOOKEEPER-1865-testfix.patch
  against trunk revision 1666764.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2569//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2569//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2569//console

This message is automatically generated., +1, trunk: http://svn.apache.org/viewvc?view=revision&revision=1666784
branch-3.5: http://svn.apache.org/viewvc?view=revision&revision=1666785, FAILURE: Integrated in ZooKeeper-trunk #2629 (See [https://builds.apache.org/job/ZooKeeper-trunk/2629/])
ZOOKEEPER-1865 Fix retry logic in Learner.connectToLeader() (Edward Carter via michim) (michim: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1666784)
* /zookeeper/trunk/CHANGES.txt
* /zookeeper/trunk/src/java/main/org/apache/zookeeper/server/quorum/Learner.java
* /zookeeper/trunk/src/java/test/org/apache/zookeeper/server/quorum/LearnerTest.java
, Do you think the test failure is related to this patch? It's failing intermittently on my box as well.

https://paste.apache.org/fQih?action=download, Not sure, I can't get it to fail but let me look., [~michim] is this failing on trunk or precommit builds? Can you point to the build that you saw fail besides your local?, It failed on trunk: https://builds.apache.org/job/ZooKeeper-trunk/2629/

The failure might not be related to this patch. I just ran the test without this patch and it still failed. It looks like the test is timing dependent. It fails if 2 snapshots don't finish within 200ms.]