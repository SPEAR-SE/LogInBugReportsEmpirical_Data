[i think it would be great to use intrinsics here! michi is the one that wrote that code. the first lock addl with an operand of 0 is interesting. i'm not sure why that is needed. do you know michi? it is not incorrect though. the lock makes the operation atomic., we should also use __sync_fetch_and_add in the non windows case :), Do the two LOCKs combine together to make the whole thing atomic overall?

If they don't, I guess the worst case scenario is that two callers would get the same return value while the value would still be incremented by two., i really think you only need the one. (that is the case for non-windows.) you'll notice that the first xadd is adding 0, so there is no double add., Yah, I did notice that. The first xadd appears to be used to retrieve the end-return value, where the second is actually doing the work (unless I really read the asm wrong, I don't have it in front of me right now).

I'm seeing a potential non-atomic operation with the current formulation and two simultaneous callers, where both callers trade off on the "LOCK XADD 0" pulling the same return result, then both trade off on the "LOCK XADD n".  The two operations are still individually atomic and the variable still gets bumped by the proper amount, but the return value for one of the callers would be wrong.

In any case, it would be good to get something a little less processor-specific here.  I'm actually surprised that no one has tried to compile this on a non-intel linux machine yet..., ah you are correct. the comment // result = ebx is correct, but i think the actual code mov result, ecx is incorrect as you point out. the fix/simplification is to use the intrinsic. we should probably also use __sync_fetch_and_add in the non windows case., I didn't write the code, but I agree with Erik and Ben.

- For windows, we should use InterlockedExchangeAdd.
- For non-windows, we should use  __sync_fetch_and_ad

Erik, would you be interested in providing a patch?

Thanks!
--Michi, Just an FYI, still here but a bit busy.  I hope to have a patch by the end of the week., first version proposed patch, +1

Thanks for the patch, Erik. The code looks much nicer now., Merged to trunk.

http://svn.apache.org/viewvc?view=revision&revision=1448007, Integrated in ZooKeeper-trunk #1840 (See [https://builds.apache.org/job/ZooKeeper-trunk/1840/])
    ZOOKEEPER-1643. Windows: fetch_and_add not 64bit-compatible, may not be correct (Erik Anderson via michim) (Revision 1448007)

     Result = SUCCESS
michim : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1448007
Files : 
* /zookeeper/trunk/CHANGES.txt
* /zookeeper/trunk/src/c/src/mt_adaptor.c
, cherry picked to branch-3.4: https://github.com/apache/zookeeper/commit/7956f138a781b2b4bd166c50e49bbad83d40c2a8]