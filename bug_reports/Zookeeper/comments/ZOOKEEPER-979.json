[Ok, I think I've got to the bottom of this. We were programmatically building a java.util.Properties object, using

for (InetAddress host : hosts) {
    properties.put(String.format("server.%d", i++), String.format("%s:2888:3888", host.toString()));
}

This was building properties of the form

/10.0.0.1:2888:3888

Notice the leading slash. We then passed the Properties object into QuorumPeerConfig.parseProperties(), which duly constructs an InetSocketAddress with hostname '/10.0.0.1' and port 3888. Note that since the hostname contains the bogus character at the start, the resulting electionAddr.isUnresolved() will be true, since the attempt to resolve the hostname will have failed.

Everything then continues until the first attempt is made to do Socket.connect() with that InetSocketAddress. At this point, some undocumented behaviour in the Socket class comes into play. In sun.nio.ch.SocketAdaptor.connect() (line 140 in openjdk 1.6.0_17 that I'm using) it calls Net.translateException(), which takes the UnresolvedAddressException and instead throws an UnknownHostException. The rationale behind this seems to be that UnresolvedHostException is an unchecked exception, and they want to throw an IOException ("Throw UnknownHostException from here since it cannot be thrown as a SocketException"). So instead they just obscure the true source of the problem, and the developer is none the wiser. It doesn't seem to be stated anywhere, but apparently you may only call Socket.connect() with a resolved InetSocketAddress.

Anyway, it seems to me the thing to do here would be to try to resolve the provided server addresses much earlier. Perhaps even in QuorumPeerConfig, via InetAddress.getByName().]