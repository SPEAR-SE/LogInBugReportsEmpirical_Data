[I've just seen the messages on zookeeper-dev, and I'm not sure this is right:

# readPacket is implemented in Learner.java, and the socket read is performed in this line: leaderIs.readRecord(pp, "packet");
# leaderIs is an InputArchive instance instantiated in Learner:connectToLeader;
# The socket used to instantiate leaderIs has its SO_TIMEOUT value set right before in connectToLeader: sock.setSoTimeout(self.tickTime * self.initLimit).

Consequently, the operation should not be delayed indefinitely and should return after self.tickTime * self.initLimit. This discussion on SO_TIMEOUT sounds familiar, huh? ;-), good point Flavio! I totally forgot about that. That should prevent this failure case. Vishal your thoughts?
, Hi Flavio,

I was aware of that. However, this is not the case of idefinite TCP IO hang. If the leader hangs (e.g., software deadlock in ZooKeeper) its TCP connection will remain active. The follower will not see a socket timeout. Now, how can the follower determine if the leader is down?, vishal,
 Here is the definition of setSoTimeout -

{code}
public void setSoTimeout(int timeout)
                  throws SocketException
Enable/disable SO_TIMEOUT with the specified timeout, in milliseconds. With this option set to a non-zero timeout, a read() call on the InputStream associated with this Socket will block for only this amount of time. If the timeout expires, a java.net.SocketTimeoutException is raised, though the Socket is still valid. The option must be enabled prior to entering the blocking operation to have effect. The timeout must be > 0. A timeout of zero is interpreted as an infinite timeout.
{code}

This means is that the read would block till timeout and throw an exception if it doesnt hear from the leader during that time. Wouldnt this suffice?, ok, I see your point. I mis-analyzed this part of the code. I will wait for Flavio to comment and then close the jira., Hi Vishal, My understanding is that the readRecord call in readPacket will timeout, even if the TCP connection is still up. The documentation in: http://download.oracle.com/javase/6/docs/api/java/net/SocketOptions.html

says that:
{noformat}
static int 	SO_TIMEOUT
          Set a timeout on blocking Socket operations:
{noformat}, sorry for the false alarm. I got confused since SocketChannel is used in quorumCnxManager but this part of the code uses Socket and InputArchive., No worries Vishal. Resolving the issue as wont fix. , My understanding is that SO_TIMEOUT also affects SocketChannel, since it builds on top of a Socket object., Hi Flavio,

Can you please try it with SocketChannel and confirm?, The documentation refers to SocketInputStream.read(), but it doesn't mention SocketChannel.read(). I ran a quick test with QuorumCnxManager and it doesn't seem to work. So maybe it is true that setting SO_TIMEOUT has no effect on SocketChannel.read(), which is kind of surprising to me. , according to this it's not a bug:
http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4614802

specifically:

The read methods in SocketChannel (and DatagramChannel) do not
support timeouts.  If you need the timeout functionality then use the read
methods of the associated Socket (or DatagramSocket) object.

notice this was asked/answered a while ago though, however I suspect it's still true., Good point, Pat. I should have remembered this, since our hack to introduce the 
connection timeout in QCM previously was through the socket directly, so it makes
sense that we would have to do the same for other blocking operations. In fact, I 
have quickly tried replacing the read call in receiveConnection with the following:

{noformat}
s.socket().getInputStream().read(msgBytes);
{noformat}

and I get a SocketTimeoutException after the especified timeout. , Hi Flavio,

Thats correct. I was planning to do this change (in addition to other changes) as a part of ZOOKEEPER-900.
But now I think it is better if we make this change first and not wait for other changes. So that we don't have to wait till 3.4.0 for this fix.
At least, that will get us around the block forever problem.

-Vishal


]