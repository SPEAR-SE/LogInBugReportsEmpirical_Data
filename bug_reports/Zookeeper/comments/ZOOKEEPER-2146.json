[-1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12706084/ZOOKEEPER-2146.patch
  against trunk revision 1667358.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2577//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2577//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2577//console

This message is automatically generated., lgtm, r+. One small nit though, I'd put the comment outside the method, i.e.:

{noformat}
// Since this is a rough sanity check, add some padding to maxBuffer to
// make up for extra fields, etc. (otherwise e.g. clients may be able to
// write buffers larger than we can read from disk!)
private void checkLength(int len) throws IOException {
  if (len < 0 || len > maxBuffer + 1024) {
        throw new IOException("Unreasonable length = " + len);
  }
}
{noformat}, Updating the changelog file would be nice too!, Does the client ever send a zero-length packet? If not, maybe change the check to len <= 0?, Uploaded new patch and addressed comments. Thanks [~rgs] and [~michim], -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12706570/ZOOKEEPER-2146.patch
  against trunk revision 1667358.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2580//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2580//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2580//console

This message is automatically generated., lgtm - but while are at this, do any of the other read*() methods need this fix too?, I think that's not a scalable way to manage this.

I'm handling a scanning problem and trying to get more information / also provide some patch here.

BTW, looks "<=0" doesn't work. Should be "<0"., Ah, never mind - you already fixed readBuffer as well. I guess startVector has the same problem too and could benefit from checkLen:

{noformat}
    public Index startVector(String tag) throws IOException {
        int len = readInt(tag);
        if (len == -1) {
            return null;
        }
{noformat}

But we can surely do it in another patch. Thanks [~hdeng]., Though in the case of startVector, it's less likely to be exploited by a random packet on the network. It would, most likely, have to be a malicious intent., I don't think the startVector needs a check. It won't allocate more memory.

The problem scope of mine is to defend ZK server from crashing. A malformed packet usually causes only a connection close, which wouldn't crash entire server., Uploaded a new patch.

[~michim], "<=0" seems to fail some tests, while "<0" works and defends ZK server from random scanning. I think there are assumptions made on 0 length. Any ideas? Or do we need to handle it here, the patch seems minimal change., Yeah, you are right - it would just be a malformed packet. Thanks for checking Hongchao!, -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12706746/ZOOKEEPER-2146.patch
  against trunk revision 1667358.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2582//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2582//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2582//console

This message is automatically generated., Added a test for readString(), Nit: we can drop the comment, the name of test is self-descriptive 

{noformat}
+    /**
+     * This test checks that
+     */
{noformat}

Instead of:

{noformat}
+        byte[] buf = new byte[4];
+        for (int i = 0; i < 4; i++) {
+            buf[i] = Byte.MAX_VALUE;
+        }
{noformat}

maybe:

{noformat}
byte[] buf = new byte[] {
   Byte.MAX_VALUE, Byte.MAX_VALUE, Byte.MAX_VALUE, Byte.MAX_VALUE};
{noformat}

Nit, instead of:

{noformat}
+            if (!e.getMessage().startsWith(BinaryInputArchive.UNREASONBLE_LENGTH)) {
+                Assert.fail("Not 'Unreasonable length' exception: " + e);
+            }
{noformat}

maybe, simpler:

{noformat}
Assert.assertTrue(e.getMessage().startsWith(BinaryInputArchive.UNREASONBLE_LENGTH));
{noformat}

Otherwise, lgtm!
, +1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12707025/ZOOKEEPER-2146.patch
  against trunk revision 1667358.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 2 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2586//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2586//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2586//console

This message is automatically generated., +1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12707053/ZOOKEEPER-2146.patch
  against trunk revision 1667358.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 2 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2587//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2587//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2587//console

This message is automatically generated., +1 Ok let's keep leave the condition as is (len <= 0). Thanks Hongchao!, trunk: http://svn.apache.org/viewvc?view=revision&revision=1669060
branch-3.5: http://svn.apache.org/viewvc?view=revision&revision=1669061, FAILURE: Integrated in ZooKeeper-trunk #2640 (See [https://builds.apache.org/job/ZooKeeper-trunk/2640/])
ZOOKEEPER-2146 BinaryInputArchive readString should check length before allocating memory (Hongchao Deng via michim) (michim: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1669060)
* /zookeeper/trunk/CHANGES.txt
* /zookeeper/trunk/src/java/main/org/apache/jute/BinaryInputArchive.java
* /zookeeper/trunk/src/java/test/org/apache/jute
* /zookeeper/trunk/src/java/test/org/apache/jute/BinaryInputArchiveTest.java
, Hi [~michim].

This patch should also work for branch-3.4.
Since we're cutting 3.4.7 soon, can you help commit this into 3.4?
, Since [~rgs] also reviewed it, can you help get this into branch-3.4? Thanks!, branch-3.4: http://svn.apache.org/viewvc?view=revision&revision=1674424]