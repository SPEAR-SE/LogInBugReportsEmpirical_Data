[Can this call to ZooTrace be replaced with another logging call (since basically all other logging to ZooTrace has been removed anyway)? This is sort of an annoying thing to see in the logs during every shutdown of an application. In fact, a temporary "fix" has been put in place to make a call to ZooTrace before calling close() so that the class is actually loaded in memory. This works, but it's ugly., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12835316/ZOOKEEPER-1394.patch
  against trunk revision f6349d16fcd5f04b560095417fd2a1813ac3e855.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3502//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3502//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3502//console

This message is automatically generated., The patch is trivial and it simply replaces the call to {{ZooTrace}} with {{LOG.debug}}, but I'm not convinced that this is the right way to fix this issue. In fact, I'm not even sure I fully understand the issue. Is there a way to reliably reproduce it?

I'm also thinking that {{ZooTrace}} is a bit abandoned, so we might want to make some fixes there., Canceling patch until we converge., Look here http://zookeeper-user.578899.n2.nabble.com/java-lang-NoClassDefFoundError-org-apache-zookeeper-server-ZooTrace-td7578739.html

when using Zookeeper client API in tomcat and shut down tomcat.
, also in  jboss

jBPMClusteredScheduler_$_brmsperf02.mw.lab.eng.bos.redhat.com1425567199094 shutdown complete.
09:58:29,651 INFO  [org.jbpm.executor.impl.ExecutorImpl] (MSC service thread 1-6)  >>>>> Destroying Executor !!!
09:58:29,733 ERROR [org.apache.zookeeper.ClientCnxn] (MSC service thread 1-6-SendThread(brmsperf03:2181)) from MSC service thread 1-6-SendThread(brmsperf03:2181): java.lang.NoClassDefFoundError: org/apache/zookeeper/server/ZooTrace
	at org.apache.zookeeper.ClientCnxn$SendThread.run(ClientCnxn.java:1223) [zookeeper-3.3.4.jar:3.3.3-1203054]
Caused by: java.lang.ClassNotFoundException: org.apache.zookeeper.server.ZooTrace from [Module "deployment.business-central.war:main" from Service Module Loader]
	at org.jboss.modules.ModuleClassLoader.findClass(ModuleClassLoader.java:213) [jboss-modules.jar:1.3.6.Final-redhat-1]
	at org.jboss.modules.ConcurrentClassLoader.performLoadClassUnchecked(ConcurrentClassLoader.java:459) [jboss-modules.jar:1.3.6.Final-redhat-1]
	at org.jboss.modules.ConcurrentClassLoader.performLoadClassChecked(ConcurrentClassLoader.java:408) [jboss-modules.jar:1.3.6.Final-redhat-1]
	at org.jboss.modules.ConcurrentClassLoader.performLoadClass(ConcurrentClassLoader.java:389) [jboss-modules.jar:1.3.6.Final-redhat-1]
	at org.jboss.modules.ConcurrentClassLoader.loadClass(ConcurrentClassLoader.java:134) [jboss-modules.jar:1.3.6.Final-redhat-1]
	... 1 more
, Let me elaborate. I understand that folks are getting it with Tomcat and JBoss, but why would the class not be found? Is it because it is not loading the server package? Would it make any difference if {{ZooTrace}} were in a different package?

It is not a big deal to remove that {{ZooTrace}} call because it is really the only call to {{ZooTrace}} in the client currently, but I'd rather understand why it happens and fix the problem rather than remove the call if possible. Do you understand why this happens, [~wuwen]n? I read the explanation in the description, but I don't understand why the class isn't being loaded. Granted that I don't understand Tomcat and JBoss well enough to determine whether it is problem with those frameworks., I get regularly into this error. 
IMHO the problem is that the container closes  the Classloader and so no class can be loaded anymore.
Another fix is to make the client eagerly load the ZooTrace class by using it at boot or in other convenient place.
A workaround can be to use the ZooTrace class in the WebApplication and so force the classloader to load it, i think this is a class loading time problem,If ZooTrace.xxx()  has been used already before the application stopped, it can be loaded normally.

{code:java}
class SendThread extends Thread {
        //..igonre       
        @Override
        public void run() {
          //..igonre

            //*********for exampleï¼Œ If ZooTrace is called here, the problem does not occur.*******
            ZooTrace.logTraceMessage(LOG, ZooTrace.getTextTraceLevel(),
                                     "SendThread starting loop.");

            while (state.isAlive()) {
                //..igonre
                //there is loop

            }

            //...executing

            /***At this time, may be this web application instance has been stopped already.**/
        
   /**java.lang.IllegalStateException: Illegal access: this web application instance has been stopped already. Could not         load [org.apache.zookeeper.server.ZooTrace]**/
            //The container seems to think this is an illegal load
            ZooTrace.logTraceMessage(LOG, ZooTrace.getTextTraceLevel(),
                                     "SendThread exitedloop.");
        }

        void close() {
            state = States.CLOSED;
            clientCnxnSocket.wakeupCnxn();
        }
       
    }
{code}, Hi [~fpj], I start to agree that this is not a problem, the problem is that the application does not have a graceful shutdown.
i think zookeeper client should be closed before application shutdown, rather than rely on shutdownhook.
Does this issue need to be closed?, Hi [~wuwen], If we agree that it isn't an issue, then we do resolve this jira with "Not a problem". But, [~eolivelli] seems to be observing this problem as well, so I wonder if he agrees that shutting down zk before the application in his setting solves the problem. It sounds right to me, though., Hi [~eolivelli] there are two solutions
1. shutting down zk client before the application.
2. to make the client eagerly load the ZooTrace class by using it at boot or in other convenient place.

I think the problem is that the application does not have a graceful shutdown., shutting down zk client before the application., Ok, my 2 cents as the original filer of the issue (even though it was almost 5 years ago and I'm no longer working with ZooKeeper at the moment). The problem happened when trying to shut down zookeeper gracefully when the application is shut down. As the report mentions zookeeper was being stopped in the contextdestroyed (the only hook there is in an application container). So nothing was done wrong in my opinion., In my case I use ZooKeeper.close() in contextDestroyed() method of my ServletContextListener

I think that call does not wait for all the support threads to finish

maybe it is the same of ZOOKEEPER-1916
, You can try to use the {{@PreDestroy}}  annotation to close the zkclient.

for example
{code:java}
@PreDestroy
public void destroy() {
       ZooKeeper.close();
}
{code}
]