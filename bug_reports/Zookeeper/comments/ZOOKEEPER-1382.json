[Found this bug on 3.3.4 and hence, am uploading a draft patch with a possible fix for 3.3.4 first. If it looks good, I'll try doing the same on trunk.

Here is what I think is causing this bug. Please correct me if I'm wrong -

Say a client connects to a > 1 node ZK cluster and registers watch on some path. After that, if the client goes into a GC pause, the leader expires the session and proposes closing the session to the followers. Meanwhile, the client wakes up and tries to renew its session with one of the followers. Now, when the follower detects that the session is invalid, it sends a close session response to the client, and enables receive on the selector key for that connection. So it receives the setWatches request during the renew session. There is a race condition since the request processors on the follower merely "pass-through" the non-transactional setWatches request while the NIOServerCnxn has sent the close session request to the client. Due to the above, sometimes, the watches are set right after the NIOServerCnxn is removed from the ZooKeeperServer. Hence, the watches are left on the servers, for expired sessions, effectively causing a memory leak.  

The fix is to enable reads on the connection only if the session is found to be valid.

For testing, I wrote a test and added it as part of the DisconnectedWatcherTest. However, it uses the in-memory ZK ensemble class from curator, with a few modifications to test watches. In addition to this, have added a timeoutSession() API to TestableZooKeeper to simulate the client side GC pause. However, it involves suspending and resuming the event thread. 

I have 2 concerns about tests for this patch -
1. Method used to simulate a client side GC pause
2. Longer test duration, since the test runs multiple iterations to reproduce this corner case race condition

For 1, this is hacky, works, but it will be good to know other alternatives for writing this test.
For 2, since this is more of a system test, wonder what is the best way to include it in zookeeper. Also, the new helper classes are from curator. 

Lastly, I left the DEBUG/TRACE logging, that I found useful to understand the server code, in the patch. Maybe, not all of it follows logging conventions.
, -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12514699/ZOOKEEPER-1382_3.3.4.patch
  against trunk revision 1242982.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 16 new or modified tests.

    -1 patch.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/956//console

This message is automatically generated., This is a lot of change for a fix that seems to be really small. Can you put this into reviewboard for more careful review? I'm not sure we will want all the logging changes so you might want to go through and trim that stuff up before putting it up there. Thanks!, this is a good one to get in, see the feedback provided so far though. (also, likely we'll need a patch for post 3.3)., Moving it out, Neha can you please provide a patch for trunk and 3.4 as well? Good to see the tests that you added., Moving it out again, Neha any chance you will have some bandwidth to follow up on this?, Since we monitor sessions and watches we note that we encounter this problem from time to time.
This is not a big issue but it causes a memory leak.
I'll try to see if I can work on it but it does seem hard to reproduce in a unit test., I managed to create a JUnit test case that demonstrate the "watches leak", unfortunately i had to promote a few methods to the public scope.

As Neha pointed out the unit test shows that if a client send a connection request with an expired session the NIOServerCnxn class still processes upcoming messages like OpCode.setWatches.

Actually the fix simply consists to call cnxn.enableRecv() only if the session has been validated by the leader., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12571815/ZOOKEEPER-1382.patch
  against trunk revision 1448007.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    -1 patch.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1419//console

This message is automatically generated., Current patch is for branch 3.4
Sorry, -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12571817/ZOOKEEPER-1382-branch-3.4.patch
  against trunk revision 1448007.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    -1 patch.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1420//console

This message is automatically generated., Michael,
 Would you be able to upload a patch for trunk as well?, It seems that the behavior of disableRecv() / enableRecv() has changed a bit in 3.5 : there is a new thread (SelectorThread) in charge of interest op updates and updates are processed in a non blocking fashion (updates are queued to be handled later by the SelectorThread, if i understand correctly it is more a throttle mechanism than something else). The unit test is no more relevant.

If we want to fix the two branches (3.4 and 3.5) it is imho no more a good idea to rely on enableRecv().
May be it would be cleaner to introduce a new function ServerCnxn.setValidSession(boolean valid) that informs the implementation (NIOServerCnxn or NettyServerCnxn) that the session has been (re)validated and then allow subsequent messages to be processed.

If you don't mind i will try to provide an other patch and a unit test for both branches.


, Can you explain a bit more why we cannot rely on disableRecv() / enableRecv() in 3.5 to fix this issue? 

From my understanding, although the request is now process in non-blocking fashion, we are calling disableRecv() while processing a ConnectRequest packet, so the SelectorThread won't try to select this socket again for reading after we finished processing the packet. 

, My bad, I have not spend enough time on the new branch, you are right. The same fix could be applied.
Nevertheless the unit test is no more relevant.
I'll try to work on that., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12572967/ZOOKEEPER-1382.patch
  against trunk revision 1453693.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1427//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1427//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1427//console

This message is automatically generated., testTransactionLogCorruption fails, not sure if is related to the patch or if it's because of ZOOKEEPER-1629, I can't even get the TruncateCorruptionTest to run to completion or failure at all with or without this patch. I think we need to open a separate bug report on it. Besides that, this fix looks good to me., I've opened a bug for this some time ago: ZOOKEEPER-1629 perhaps we should disable this test for now ? for example, if one of the Java tests fails, the C tests don't run at all., The fix looks good to me overall, I just have a couple of comments:

# Some classes have been made public for testing. Could we use mock classes instead (classes that extend the target ZK classes)?
# We don't really name the test classes after the jiras that originated them. Could we use a more expressive name here?, I would like to propose to skip the tests cases for this JIRA.
The modification required is minimal and it seems clearly correct. However, trying to build a test that works and that doesn't require future maintenance seems to be very complex.
I have done the mock classes as suggested by Flavio above, but the tests don't work any more (at least in trunk). My guess is that it is because of latest changes in the code. I don't see an easy fix (at least easy for me), and what is worse, it seems to me that these test cases will require review very often, since they depend very deeply on how things are implemented., Hi, is ZooKeeper 3.4.3 affected by this bug?, Yes, No luck with the previous lazy proposal, so I think this is it., +1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12609581/ZOOKEEPER-1382.patch
  against trunk revision 1534390.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 12 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1714//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1714//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1714//console

This message is automatically generated., Given that the Mock* classes are only used in WatchLeakTest, I was wondering if it wouldn't be best to have them defined inside the WatchLeakTest class. 

Also, there is a test case not running because @Test is commented out., At some point I commented that out. I thought that the test case didn't make much sense since it was passing both with and without the change. It is also not there in the 3.4 version. But this was hiding an error in the test cases.
Now it is fixed. 
I had to make a small modification in NIOServerCnxn.java in order to allow the test to work. SocketChannel.isOpen is a final method and can't be mocked by Mockito.
The Mock classes can't be moved to a different package. Otherwise they don't have access to the protected elements in that package any more. , +1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12610262/ZOOKEEPER-1382.patch
  against trunk revision 1535491.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 12 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1722//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1722//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1722//console

This message is automatically generated., I wouldn't recommend to run zookeeper using ramdisk without having an additional method that ensures consistency. Ramdisk means data is not persistent after a reboot, and this JIRA shows that losing data in one node when the quorum was in minority may lead to permanent inconsistencies in the quorum., Added a review request for this [https://reviews.apache.org/r/15259/], spaces and style changes, +1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12612572/ZOOKEEPER-1382.patch
  against trunk revision 1539529.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 12 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1747//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1747//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1747//console

This message is automatically generated., I forgot to thank [~rgs] for reviewing the patch. ... dicen que más vale tarde que nunca., [~fpj], could you please take a look at this and say if it is ok now?, Hi German, 
Patch looks very nice, especially test cases are really good:)

Add few suggestions:
- Please add message while asserting, this will give more clarity, like
{code}
assertEquals("There must be NO watches!", 0, watchCount);
{code}
- Formatting is not proper in MockSelectorThread.java. Normally, between methods there will be a newline.
- This is a suggestion and FYI. I would like to use @RunWith(Parameterized.class), when there are situations to run the same test case with different input values. In the patch, we have testcases with sessiontimeout and without sessiontimeout flags. Please refer MultiTransactionTest to understand more on this pattern. This way it will again make the test cases very simple.
, Thank you [~rakeshr], but the test cases are originally from someone else, [~barkbay] I believe. And I agree, it seems very difficult to come up with a way to test this and he has done a good job.
And thank you for the suggestions, I will try to take care of them in a few days and propose a new patch., Updated with last comments., +1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12617336/ZOOKEEPER-1382.patch
  against trunk revision 1547702.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 12 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1818//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1818//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1818//console

This message is automatically generated., Pretty sweet tests. I think this looks good on trunk, will check it in., Looks good on 3.4 as well, will close this as soon as builds complete successfully. Thanks to all who helped with this!, SUCCESS: Integrated in ZooKeeper-trunk #2150 (See [https://builds.apache.org/job/ZooKeeper-trunk/2150/])
ZOOKEEPER-1382. Zookeeper server holds onto dead/expired session ids in the watch data structures
  (Germán Blanco and Michael Morello via camille) (camille: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1550213)
* /zookeeper/trunk/CHANGES.txt
* /zookeeper/trunk/src/java/main/org/apache/zookeeper/server/NIOServerCnxn.java
* /zookeeper/trunk/src/java/main/org/apache/zookeeper/server/ZooKeeperServer.java
* /zookeeper/trunk/src/java/test/org/apache/zookeeper/MockPacket.java
* /zookeeper/trunk/src/java/test/org/apache/zookeeper/server/MockNIOServerCnxn.java
* /zookeeper/trunk/src/java/test/org/apache/zookeeper/server/MockSelectorThread.java
* /zookeeper/trunk/src/java/test/org/apache/zookeeper/server/quorum/WatchLeakTest.java
, Thank you [~fournc]!, Closing issues after releasing 3.4.6., the same issue is still can be found on 3.4.6, https://issues.apache.org/jira/browse/ZOOKEEPER-2615.

when the client app reconnect to a server, the setWatchs and close still stay in the race condition as following possible:

Daemon Thread [NIOServerCxn.Factory:0.0.0.0/0.0.0.0:6181] (Suspended (breakpoint at line 966 in NIOServerCnxn))	
NIOServerCnxn.close() line: 966	
NIOServerCnxn.doIO(SelectionKey) line: 360	
NIOServerCnxnFactory.run() line: 208	
Thread.run() line: 745

and then

Thread [CommitProcessor:1] (Suspended (breakpoint at line 303 in FinalRequestProcessor))	
FinalRequestProcessor.processRequest(Request) line: 303	
CommitProcessor.run() line: 74

the issue cause our production leak about 1 million watchs]