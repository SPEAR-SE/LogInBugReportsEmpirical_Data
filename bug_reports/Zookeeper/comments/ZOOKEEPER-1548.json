[Leader election seems to complete but the leader abandons leadership. Here is something suspicious:

{noformat}
java.lang.Exception: shutdown Leader! reason: Only 2 followers, need 2
 at org.apache.zookeeper.server.quorum.Leader.shutdown(Leader.java:496)
  at org.apache.zookeeper.server.quorum.Leader.lead(Leader.java:471)
   at org.apache.zookeeper.server.quorum.QuorumPeer.run(QuorumPeer.java:753)
{noformat}

To get to this message, we need this predicate to hold true:

{code}
(!tickSkip && !self.getQuorumVerifier().containsQuorum(syncedSet))
{code}

and I don't understand yet why containsQuorum is false. Could you share your configuration file as well, please?, 
Sure, here you go. I've sanitized the hostnames, but the rest is as it is on the nodes :
myid files are consistent, and the same config is on all five nodes.

{noformat}
# zk members
server.0=zookeeper0:2889:3888
server.1=zookeeper1:2889:3888
server.2=zookeeper2:2889:3888
server.3=zookeeper3:2889:3888
server.4=zookeeper4:2889:3888
# The number of milliseconds of each tick
tickTime=2000
# The number of ticks that the initial
# synchronization phase can take
initLimit=20
# The number of ticks that can pass between
# sending a request and getting an acknowledgement
syncLimit=10
# the directory where the snapshot is stored.
dataDir=/data/zookeeper
# where txlog  are written
dataLogDir=/data/zookeeper/txlog
# the port at which the clients will connect
clientPort=2181
# limit on queued clients - default: 1000
globalOutstandingLimit=1000

# number of transactions before snapshots are taken - default: 100000
snapCount=100000
# max # of clients - 0==unlimited
maxClientCnxns=150
# Election implementation to use. A value of "0" corresponds to the original
# UDP-based version, "1" corresponds to the non-authenticated UDP-based
# version of fast leader election, "2" corresponds to the authenticated
# UDP-based version of fast leader election, and "3" corresponds to TCP-based
# version of fast leader election. Currently, only 0 and 3 are supported,
# 3 being the default
electionAlg=3
# Leader accepts client connections. Default value is "yes". The leader
# machine coordinates updates. For higher update throughput at thes slight
# expense of read throughput the leader can be configured to not accept
# clients and focus on coordination.
leaderServes=yes
# Skips ACL checks. This results in a boost in throughput, but opens up full
# access to the data tree to everyone.
skipACL=yes
{noformat}, I can't see any problem with the configuration file, but thanks for posting.

I'm not sure why the size of synced is 2 and not 3. Given that the leader has synchronized with the other two followers, I would expect the size of synced to be 3. If you can reproduce it easily, perhaps you could print the content of the synced set. From the logs I couldn't see anything else suspicious.

I suppose that the pattern you posted keep repeating itself indefinitely. If there is any difference, it would be good to see so that we can determine if it is a race. On my end, I'll see if I observe it as well and will report back., Hey Flavio,

How would I print the content of the synced set ? Sorry, I'm a bit new with zookeeper :)

Cheers,

Al
, It appears the issue is that the syncLimit is not long enough to cover the initial snapshotting. Increasing the syncLimit allows it to work, but it doesn't feel like a good solution. Would you accept a patch which used initLimit (or a new configuration parameter) when waiting for a snapshot to complete?, I think in both 1548 and 1115 the problem is about the follower not being able to ack on time due to the time it takes to write the snapshot., I'm resolving this one as a duplicate of ZOOKEEPER-1115. , Closing issues after releasing 3.4.6.]