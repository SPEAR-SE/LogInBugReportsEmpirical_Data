[-1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12832832/ZOOKEEPER-2614.branch-3.4.00.patch
  against trunk revision f78061aafb19b102c37cb6d744ec6258d5f5b66e.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    -1 patch.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3485//console

This message is automatically generated., This is really odd, I went over ZOOKEEPER-1576 and it does have a patch for 3.4 and comments mentioning 3.4, but it was committed to trunk only. The fix version says only 3.5.0, which might have been the source of confusing, I'm not sure.

cc [~eribeiro] [~fournc], Yeah [~fpj] observed the same. looks it got missed during merging to various branch., This failed during merging to master. not sure how to restrict that., Yup, my fault. I should have checked it was backported to 3.4 back then (it's an old patch). Any committer can check and commit [~vishk] patch, please?

It LGTM, but a second opinion would be great. Thanks!, I just tested the patch with my Zookeeper ensemble running in Kubernetes. It was works fine now. Previously without the patch, my Kafka-cluster failed as soon as one Zookeeper node died even though a healthy ensemble was still present.
Please merge this patch and release it., Hi Michael,
thanks for assigning it to 3.4.11. Is there any way I can help in the process? Should I create PR out of the attached patch?, Hi Thomas, take a look at https://cwiki.apache.org/confluence/display/ZOOKEEPER/HowToContribute on how to contribute via Github. I can take a look today yet or as soon as it is available., GitHub user tschuettel opened a pull request:

    https://github.com/apache/zookeeper/pull/320

    ZOOKEEPER-2614 Port ZOOKEEPER-1576 to branch 3.4

    This is a backport of ZOOKEEPER-1576 to the 3.4-line.
    When running Zookeeper as an ensemble in a dynamic environment such as
    Kubernetes, the DNS entry of a Zookeeper pod is apparently instantly
    purged as one of the nodes goes down. This leads to an UnknownHostException
    when interacting with the cluster, even though a healthy majority of nodes
    is still working.
    This behavior is also observed in a firewall situation as described in
    ZOOOKEEPER-1576.
    This fix catches and logs the UnkownHostException and continues trying the
    next node.
    Thanks to Vishal Khandelwal for providing the patch.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/DaimlerTSS/zookeeper ZOOKEEPER-2614

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/zookeeper/pull/320.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #320
    
----
commit 67eff1c9984c0081cd36d4f978fcce642362b4b3
Author: Thomas Sch√ºttel <thomas.schuettel@daimler.com>
Date:   2017-07-30T10:50:23Z

    ZOOKEEPER-2614 Port ZOOKEEPER-1576 to branch 3.4
    
    This is a backport of ZOOKEEPER-1576 to the 3.4-line.
    When running Zookeeper as an ensemble in a dynamic environment such as
    Kubernetes, the DNS entry of a Zookeeper pod is apparently instantly
    purged as one of the nodes goes down. This leads to an UnknownHostException
    when interacting with the cluster, even though a healthy majority of nodes
    is still working.
    This behavior is also observed in a firewall situation as described in
    ZOOOKEEPER-1576.
    This fix catches and logs the UnkownHostException and continues trying the
    next node.
    Thanks to Vishal Khandelwal for providing the patch.

----
, Github user hanm commented on a diff in the pull request:

    https://github.com/apache/zookeeper/pull/320#discussion_r130246293
  
    --- Diff: src/java/main/org/apache/zookeeper/client/StaticHostProvider.java ---
    @@ -52,34 +52,36 @@
          * 
          * @param serverAddresses
          *            possibly unresolved ZooKeeper server addresses
    -     * @throws UnknownHostException
          * @throws IllegalArgumentException
          *             if serverAddresses is empty or resolves to an empty list
          */
    -    public StaticHostProvider(Collection<InetSocketAddress> serverAddresses)
    -            throws UnknownHostException {
    +    public StaticHostProvider(Collection<InetSocketAddress> serverAddresses) {
             for (InetSocketAddress address : serverAddresses) {
    -            InetAddress ia = address.getAddress();
    -            InetAddress resolvedAddresses[] = InetAddress.getAllByName((ia!=null) ? ia.getHostAddress():
    -                address.getHostName());
    -            for (InetAddress resolvedAddress : resolvedAddresses) {
    -                // If hostName is null but the address is not, we can tell that
    -                // the hostName is an literal IP address. Then we can set the host string as the hostname
    -                // safely to avoid reverse DNS lookup.
    -                // As far as i know, the only way to check if the hostName is null is use toString().
    -                // Both the two implementations of InetAddress are final class, so we can trust the return value of
    -                // the toString() method.
    -                if (resolvedAddress.toString().startsWith("/") 
    -                        && resolvedAddress.getAddress() != null) {
    -                    this.serverAddresses.add(
    -                            new InetSocketAddress(InetAddress.getByAddress(
    -                                    address.getHostName(),
    -                                    resolvedAddress.getAddress()), 
    -                                    address.getPort()));
    -                } else {
    -                    this.serverAddresses.add(new InetSocketAddress(resolvedAddress.getHostAddress(), address.getPort()));
    -                }  
    -            }
    +        	try {
    --- End diff --
    
    Indentation here is a little bit off. 4 spaces instead of 8. Please update. Other than this patch looks good.
, Github user tschuettel commented on the issue:

    https://github.com/apache/zookeeper/pull/320
  
    I fixed the indentation problem. Please check again.
, Github user eribeiro commented on the issue:

    https://github.com/apache/zookeeper/pull/320
  
    LGTM, that is, on par with the version on `master/branch-3.5`. Wdyt @hanm ?
, Issue resolved by pull request 320
[https://github.com/apache/zookeeper/pull/320], Github user hanm commented on the issue:

    https://github.com/apache/zookeeper/pull/320
  
    Merged to 3.4: https://github.com/apache/zookeeper/commit/be1409cc9a14ac2e28693e0e02a0ba6d9713565e
    
    Thanks for the work @tschuettel, please close this pull request.
, Github user tschuettel closed the pull request at:

    https://github.com/apache/zookeeper/pull/320
]