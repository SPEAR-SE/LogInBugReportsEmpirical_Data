[-1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12662037/ZOOKEEPER-2012-trunk.patch
  against trunk revision 1617921.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2283//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2283//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2283//console

This message is automatically generated., lgtm, in src/java/main/org/apache/zookeeper/ClientCnxn.java:

{noformat}
-            Packet packet;
-            synchronized (pendingQueue) {
-                if (pendingQueue.size() == 0) {
-                    throw new IOException("Nothing in the queue, but got "
+            Packet packet = null;
+            try {
+                synchronized (pendingQueue) {
+                    if (pendingQueue.size() == 0) {
+                        throw new IOException("Nothing in the queue, but got "
                             + replyHdr.getXid());
+                    }
+                    packet = pendingQueue.remove();
                 }
-                packet = pendingQueue.remove();
-            }
{noformat}

won't actually change anything, since finishPacket in the finally block will be a no-op with packet == null. or what do you actually win by adding this inside of the try block?, Thanks [~stack], [~rgs],

bq. src/java/main/org/apache/zookeeper/ClientCnxn.java:

it is to protect pendingQueue.remove call, the error could happen during its execution as well..:-)
, [~tianq]: why is that what we currently have is not enough to protect the remove call:

{noformat}
            synchronized (pendingQueue) {
                if (pendingQueue.size() == 0) {
                    throw new IOException("Nothing in the queue, but got "
                             + replyHdr.getXid());
                 }
                packet = pendingQueue.remove();
            }
{noformat}

?

It's already synchronized, it already throws when remove *would* fail. I still think that part of the patch is a no-op, the rest looks good though. , Hi [~rgs],
yes, but this scenario is about OOM, if it is thrown just after we remove the packet from the queue, we would lose it in cleanup call of upper caller's catch block-- the packet is not in both of the 2 queues, so the main thread will hang there.
]