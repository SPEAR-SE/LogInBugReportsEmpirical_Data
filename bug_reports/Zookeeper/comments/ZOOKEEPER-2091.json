[Hi,

I've seen the following exception in my environment
{code}
org.apache.zookeeper.ClientCnxn$SendThread.run(ClientCnxn.java:1127)
java.io.IOException: Nothing in the queue, but got 425467
                at org.apache.zookeeper.ClientCnxn$SendThread.readResponse(ClientCnxn.java:788)
                at org.apache.zookeeper.ClientCnxnSocketNIO.doIO(ClientCnxnSocketNIO.java:94)
                at org.apache.zookeeper.ClientCnxnSocketNIO.doTransport(ClientCnxnSocketNIO.java:366)
                at org.apache.zookeeper.ClientCnxn$SendThread.run(ClientCnxn.java:1106)
{code}

I'm thinking the reason is due to not adding the packet to the 'pendingQueue'. It looks like similar problem occurred here also in the below snippet. What do you say?
{code}
ClientCnxnSocketNIO.java

                    sock.write(p.bb);
                    if (!p.bb.hasRemaining()) {
                        .....
                        .....
                        .....
                        pendingQueue.add(p);
                    }
{code}, Hi Rakesh,

By the following call flow:
    SendThread#run()
      -> ZooKeeperSaslClient#initialize()
        -> ZooKeeperSaslClient#sendSaslPacket()
          -> ClientCnxn#sendPacket()
            -> SendThread#sendPacket()
              -> ClientCnxnSocketNIO#sendPacket() 
It seems that the SaslPacket has been put into the pendingQueue after it is sent to the ZooKeeper Server. So when the SASL response comes, it will not find the corresponding Packet in the pendingQueue.

Is the analysis correct ?, Sorry, it should be:  It seems that the SaslPacket has NOT been put into the pendingQueue after it is sent to the ZooKeeper Server. 
, -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12686301/ZOOKEEPER-2091.patch
  against trunk revision 1642444.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2456//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2456//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2456//console

This message is automatically generated., This seems right... can someone seeing this error try this patch and see if it fixes it?, Isn't that changing non-blocking IO to blocking again?
I think it's OK to change since in most cases client won't fill out socket buffer. However it is an assumption.

bq. the reason is due to not adding the packet to the 'pendingQueue'
I am confused how it reads the returning result without finishing sending the entire packet?, bq.I am confused how it reads the returning result without finishing sending the entire packet?
As I remember the situation happened in one of the cluster due to the heavy system resource usage like cpu/memory was high(due to map reduce job execution).
It was continuously hitting the below exception and all the operations was failing.
{code}
org.apache.zookeeper.ClientCnxn$SendThread.run(ClientCnxn.java:1127)
java.io.IOException: Nothing in the queue, but got 425467
                at org.apache.zookeeper.ClientCnxn$SendThread.readResponse(ClientCnxn.java:788)
{code}

Now with the patch, the cluster is running and no issue reported till now., Did you try only loop writing in ClientCnxnSocketNIO#SendPacket() and see if it works? I can tell that's a problem., I agree that it seems like only sending the full packet in ClientCnxnSocketNIO#SendPacket() would fix this issue. We don't do this in doIO presumably because we might only send part of the buffer, then allow another read to come in before we send the rest of the packet so as not to block on the complete send of the pending outgoing packet? Is that correct for implementing the nonblocking socket, can someone verify?, bq. then allow another read to come in

From what I understand in the code, reading the returning result for the packet sent needs to be complete, a.k.a. after the packet sent completely.
{code}
  if (!incomingBuffer.hasRemaining()) {
...
...
                    sendThread.readResponse(incomingBuffer);
...
  }
{code}
incomingBuffer needs to be filled., I'm all the way in the bottom of this code and don't even remember the invariants. Why don't we wait till all the bytes are flushed to the buffer if we don't read anything until that's done?

FWIW, I looked into the depth's of Netty's NIO socket handling. In particular to verify that Netty sockets will sometimes switch to reading before all of the outgoing bytes are written, which they will. I thought it was interesting though that they also configure a "writeSpinCount" that lets them try to flush all bytes a configurable number of times before going back to the selector to do other IO. Might be something worth considering. Or, you know, not doing this socket stuff ourselves at all and just using netty :)
https://github.com/netty/netty/blob/0eb059bf58642f3c06144e1ea4a9d6c7632eb4d5/transport/src/main/java/io/netty/channel/nio/AbstractNioByteChannel.java#L198

In conclusion, I think that it may not matter much either way but probably we should only add this to the SendPacket method., Thanks [~fournc] for the in-depth thinking. I do have another JIRA, ZOOKEEPER-2069 to drive Netty things.

Back to this issue. The problem I can find here is that SendPacket() assumes a successful write. The other problem is that Sasl process implementation is too hackish. It stops/puts aside the nonblocking write logic. My point is that this is a good chance to fix it., I agree [~hdeng] but I'm not sure what conclusion you're driving to. From my observation, we can do one of two obvious things:
1) Only change SendPacket, not doIO, which I *think* I agree should solve the observed problem with less impact than the current patch

2) Something more drastic to actually fix the hack that is our current Sasl hacks, which I don't have a patch to do and I'm not sure if we have any other open tickets that will resolve this.

If we think solution 1 solves the issue, I think it is a simple enough fix to go ahead and use while we look into Netty etc., bq.Did you try only loop writing in ClientCnxnSocketNIO#SendPacket() and see if it works? I can tell that's a problem.

What could be the case [of missing pendingQueue.add(p)| https://issues.apache.org/jira/browse/ZOOKEEPER-2091?focusedCommentId=14227396&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-14227396] ?. Unfortunately now I didn't get chance to put one more patch into the cluster where it hits this problem., Any more thoughts on this?, bq.Only change SendPacket, not doIO,
[~fournc], sorry, I failed to understand the reason why it is not required to fix the same in *doIO()* call., Hi [~rakeshr]. 
Justifying the case, if the byte buffer hasn't been sent out completely
1. the packet won't be added to pendingQueue, and
2. the result won't be read.
Is it true?
{code}
               sock.write(p.bb);
                if (!p.bb.hasRemaining()) {
                    sentCount++;
                    outgoingQueue.removeFirstOccurrence(p);
                    if (p.requestHeader != null
                            && p.requestHeader.getType() != OpCode.ping
                            && p.requestHeader.getType() != OpCode.auth) {
                        synchronized (pendingQueue) {
                            pendingQueue.add(p);
                        }
                   
{code}
If so, why does it need to use a loop here?, Yes, [~rakeshr], as [~hdeng] says, the doIO is written to accommodate packets that are not completely sent; changing that will change the semantics of that method and make it blocking for the duration of a packet. You're right that in SendPacket we need to handle that and worrying about blocking is not as important, but I don't think this is actually an error in doIO., OK. Thank you [~hdeng] and [~fournc] for the explanation. Will fix the case of #sendPacket() now.

I'd like to learn more on the below code flow, any idea when the following condition can occur. Does this harm the clients, should we need to address the possible error resulting this.
{code}
                if (pendingQueue.size() == 0) {
                    throw new IOException("Nothing in the queue, but got "
                            + replyHdr.getXid());
                }
{code}, -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12686301/ZOOKEEPER-2091.patch
  against trunk revision 1672934.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    -1 patch.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2625//console

This message is automatically generated., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12686301/ZOOKEEPER-2091.patch
  against trunk revision 1748630.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    -1 patch.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3222//console

This message is automatically generated.]