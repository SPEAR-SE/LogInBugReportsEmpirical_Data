[i am noticing similar issues in my set up where YARN Resource Mgr and HDFS Name Node HA components failover due to ZooKeeper exception stated above., This is also visible in 3.4.6.
The fix seems quite straightforward. In NIOServerCnxn.java there seems to be a missing "sk.isValid()" before "sk.interestOps()":
{code:title=NIOServerCnxn.java|borderStyle=solid}
          if (bb != ServerCnxnFactory.closeConn) {
                 // We check if write interest here because if it is NOT set,
                 // nothing is queued, so we can try to send the buffer right
                 // away without waking up the selector
                 if ((sk.interestOps() & SelectionKey.OP_WRITE) == 0) { // <= SHOULD BE HERE
                    try \{
                        sock.write(bb);
                     } catch (IOException e) {
                         // we are just doing best effort right now
                     }
                 }
                 // if there is nothing left to send, we are done
                 if (bb.remaining() == 0) {
                     packetSent();
                     return;
                 }
             }
 
             synchronized(this.factory){
                 sk.selector().wakeup();
                 if (LOG.isTraceEnabled()) {
                     LOG.trace("Add a buffer to outgoingBuffers, sk " + sk
                             + " is valid: " + sk.isValid());
                 }
                 outgoingBuffers.add(bb);
                 if (sk.isValid()) {// <= AS IT IS IN HERE
                     sk.interestOps(sk.interestOps() | SelectionKey.OP_WRITE);
                 }
             }
{code}, I am changing this issue to minor since it seems to happen when the client closes the socket at a certain point of time. It is more of a false reporting of an error than a problem in the server., In order to reproduce this problem, I inserted a "Thread.sleep(100)" in the line just before the one that needs to be modified. Otherwise, I just didn't get this error.
With that line modified, the problem was solved even with the delay.
I have no idea of how to make a test case for this problem, so I will just submit the extremely simple patch without a test case.
If anybody wants to reproduce the problem, I created a program that watches in a znode (receives any event and then subscribes again), and a program that writes continuously in that znode. The error occurs when the program that watches is killed., The patch is for branch-3.4. It does not apply to trunk correctly.
This problem doesn't seem to be present in trunk., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12774760/ZOOKEEPER-2044.patch
  against trunk revision 1715590.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    -1 patch.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2968//console

This message is automatically generated., [~abranzyck] - thanks for the patch and sorry for the lack of review. Given we are running late with 3.4.8, lets get to this in 3.4.9. , Here is a patch with a test case. [~abranzyck] [~rgs] Let me know what you think., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12791627/ZOOKEEPER-2044.patch
  against trunk revision 1733679.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    -1 patch.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3092//console

This message is automatically generated., I get bugged about this issue quite a bit, but it's really just cosmetic. Are you sure the risk outweighs the reward wrt 3.4, vs fixing in 3.5/trunk only?, The patch works perfectly for me. Thank you for requesting my opinion.
In my personal opinion, the risk is very low and confusing messages in the logs will be disturbing for system administrators. But as stated, is not a big issue.
, I think it is very low risk, but I also don't think it is strictly necessary to have it in 3.4. If you're uneasy about having this one in 3.4 because it is mostly an improvement, I won't oppose [~phunt].
  , I'm not saying I'm against it per se. I agree it is a bug. I just want to make sure you folks feel strongly that the risk/reward is there. :-) 

Given the feedback I don't see why we shouldn't include it. Up to you all., Having been woken up for this and finding its a false alarm, I'd like to see it in 3.4.x branch., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12791627/ZOOKEEPER-2044.patch
  against trunk revision 1748630.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    -1 patch.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3195//console

This message is automatically generated., looks similar to ZOOKEEPER-1237 - could this be the same thing?, -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12791627/ZOOKEEPER-2044.patch
  against trunk revision 8616a9ec8ce4bc8ac2987b7417a6f0c4b7333658.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    -1 patch.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3551//console

This message is automatically generated., This patch does not apply to master / 3.5 - due to work in ZOOKEEPER-1504. Not sure if master / 3.5 is impacted by this issue. I'll see if I can take a stab and reproduce on master / 3.5 and provide a rebased patch.

In any case, should we get this in before cutting a 3.4.10 RC build? This seems to be a low risk and high impact fix (we've seen this a lot in our 3.4.x product env too) / cc [~rakeshr]., [~hanm], Agreed to include this, considering that, its a long waited issue and I also feel its a low risk fix.
Could you please create a pull request for the same. I hope folks will help in reviews and push asap. Thanks!
, GitHub user hanm opened a pull request:

    https://github.com/apache/zookeeper/pull/156

    ZOOKEEPER-2044:CancelledKeyException in zookeeper 3.4.5.

    Patch from Germán Blanco, test case from Flavio.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/hanm/zookeeper ZOOKEEPER-2044

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/zookeeper/pull/156.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #156
    
----
commit a220d95f2aefd0bf6f72d2757a87dc5480f9891e
Author: Michael Han <hanm@apache.org>
Date:   2017-01-25T04:35:05Z

    ZOOKEEPER-2044:CancelledKeyException in zookeeper 3.4.5.
    Patch from Germán Blanco, test case from Flavio.

----
, Github user rakeshadr commented on a diff in the pull request:

    https://github.com/apache/zookeeper/pull/156#discussion_r97716727
  
    --- Diff: src/java/test/org/apache/zookeeper/server/NIOServerCnxnTest.java ---
    @@ -18,6 +18,12 @@
     package org.apache.zookeeper.server;
     
     import java.io.IOException;
    +import java.nio.ByteBuffer;
    +import java.nio.channels.CancelledKeyException;
    +import java.nio.channels.SelectionKey;
    --- End diff --
    
    Please remove unused imports.
, Github user rakeshadr commented on a diff in the pull request:

    https://github.com/apache/zookeeper/pull/156#discussion_r97716640
  
    --- Diff: src/java/test/org/apache/zookeeper/server/NIOServerCnxnTest.java ---
    @@ -68,4 +74,38 @@ public void testOperationsAfterCnxnClose() throws IOException,
                 zk.close();
             }
         }
    +
    +    /**
    +     * Mock extension of NIOServerCnxn to test for
    +     * CancelledKeyException (ZOOKEEPER-2044).
    +     */
    +    class MockNIOServerCnxn extends NIOServerCnxn {
    +        public MockNIOServerCnxn( NIOServerCnxn cnxn )
    +                throws IOException {
    +            super( cnxn.zkServer, cnxn.sock, cnxn.sk, cnxn.factory );
    +        }
    +
    +        public void mockSendBuffer(ByteBuffer bb) throws Exception {
    +            super.internalSendBuffer( bb );
    +        }
    +    }
    +
    +    @Test(timeout = 30000)
    +    public void testValidSelectionKey() throws Exception {
    +        final ZooKeeper zk = createClient();
    +        try {
    +            Iterable<ServerCnxn> connections = serverFactory.getConnections();
    +            for (ServerCnxn serverCnxn : connections) {
    +                MockNIOServerCnxn mock = new MockNIOServerCnxn((NIOServerCnxn) serverCnxn);
    +                // Cancel key
    +                ((NIOServerCnxn) serverCnxn).sock.keyFor(((NIOServerCnxnFactory) serverFactory).selector).cancel();;
    +                mock.mockSendBuffer( ByteBuffer.allocate(8) );
    +            }
    +        } catch (CancelledKeyException e) {
    +            e.printStackTrace();
    --- End diff --
    
    Instead of printStackTrace, can we use LOG.error("Exception while sending bytes!", e);
, Github user rakeshadr commented on a diff in the pull request:

    https://github.com/apache/zookeeper/pull/156#discussion_r97717262
  
    --- Diff: src/java/test/org/apache/zookeeper/server/NIOServerCnxnTest.java ---
    @@ -68,4 +74,38 @@ public void testOperationsAfterCnxnClose() throws IOException,
                 zk.close();
             }
         }
    +
    +    /**
    +     * Mock extension of NIOServerCnxn to test for
    +     * CancelledKeyException (ZOOKEEPER-2044).
    +     */
    +    class MockNIOServerCnxn extends NIOServerCnxn {
    +        public MockNIOServerCnxn( NIOServerCnxn cnxn )
    +                throws IOException {
    +            super( cnxn.zkServer, cnxn.sock, cnxn.sk, cnxn.factory );
    --- End diff --
    
    This line has extra spaces and I could see formatting issues in many places. Please remove unwanted spaces and correct it.
, Github user rakeshadr commented on a diff in the pull request:

    https://github.com/apache/zookeeper/pull/156#discussion_r97716986
  
    --- Diff: src/java/test/org/apache/zookeeper/server/NIOServerCnxnTest.java ---
    @@ -68,4 +74,38 @@ public void testOperationsAfterCnxnClose() throws IOException,
                 zk.close();
             }
         }
    +
    +    /**
    +     * Mock extension of NIOServerCnxn to test for
    +     * CancelledKeyException (ZOOKEEPER-2044).
    +     */
    +    class MockNIOServerCnxn extends NIOServerCnxn {
    --- End diff --
    
    Please make MockNIOServerCnxn class ''private static''
, bq. This patch does not apply to master / 3.5 - due to work in ZOOKEEPER-1504. Not sure if master / 3.5 is impacted by this issue. I'll see if I can take a stab and reproduce on master / 3.5 and provide a rebased patch.
[~hanm], How about creating a separate jira task to do the analysis and fix, if requires. This jira can be used to push code changes only to {{branch-3.4}}, right?, Github user hanm commented on the issue:

    https://github.com/apache/zookeeper/pull/156
  
    @rakeshadr thanks for review, patch updated. 
, Github user rakeshadr commented on a diff in the pull request:

    https://github.com/apache/zookeeper/pull/156#discussion_r97935895
  
    --- Diff: src/java/test/org/apache/zookeeper/server/NIOServerCnxnTest.java ---
    @@ -68,4 +69,38 @@ public void testOperationsAfterCnxnClose() throws IOException,
                 zk.close();
             }
         }
    +
    +    /**
    +     * Mock extension of NIOServerCnxn to test for
    +     * CancelledKeyException (ZOOKEEPER-2044).
    +     */
    +    private static class MockNIOServerCnxn extends NIOServerCnxn {
    +        public MockNIOServerCnxn(NIOServerCnxn cnxn)
    +                throws IOException {
    +            super(cnxn.zkServer, cnxn.sock, cnxn.sk, cnxn.factory);
    +        }
    +
    +        public void mockSendBuffer(ByteBuffer bb) throws Exception {
    +            super.internalSendBuffer(bb);
    +        }
    +    }
    +
    +    @Test(timeout = 30000)
    +    public void testValidSelectionKey() throws Exception {
    +        final ZooKeeper zk = createClient();
    +        try {
    +            Iterable<ServerCnxn> connections = serverFactory.getConnections();
    +            for (ServerCnxn serverCnxn : connections) {
    +                MockNIOServerCnxn mock = new MockNIOServerCnxn((NIOServerCnxn) serverCnxn);
    +                // Cancel key
    +                ((NIOServerCnxn) serverCnxn).sock.keyFor(((NIOServerCnxnFactory) serverFactory).selector).cancel();;
    +                mock.mockSendBuffer(ByteBuffer.allocate(8));
    +            }
    +        } catch (CancelledKeyException e) {
    +            LOG.error("Exception while sending bytes!", e);
    +            Assert.fail(e.toString());
    +        } finally {
    +            zk.close();
    --- End diff --
    
    Thanks @hanm , the latest changes looks good to me. I will leave this pull request for one more day and if there is no more comments then will commit this tomorrow.
    
    I've an observation while running the unit test case, "zk.close()" call is taking 15-20secs to complete. I think, this delay is due to the previously submitted mocked buffer. Could you please run test in your env and let me know your observation.
, bq. This patch does not apply to master / 3.5 - due to work in ZOOKEEPER-1504. Not sure if master / 3.5 is impacted by this issue. I'll see if I can take a stab and reproduce on master / 3.5 and provide a rebased patch.
[~hanm], I've raised separate jira task ZOOKEEPER-2677 to do the analysis in branch-3.5 and master. For now, I've assigned the ZOOKEEPER-2677 jira to you. Please feel free to re-assign. Thanks!

IMHO, this jira can be used to push code changes only in {{branch-3.4}} as I hope we all agree on the fix., Github user hanm commented on a diff in the pull request:

    https://github.com/apache/zookeeper/pull/156#discussion_r98120457
  
    --- Diff: src/java/test/org/apache/zookeeper/server/NIOServerCnxnTest.java ---
    @@ -68,4 +69,38 @@ public void testOperationsAfterCnxnClose() throws IOException,
                 zk.close();
             }
         }
    +
    +    /**
    +     * Mock extension of NIOServerCnxn to test for
    +     * CancelledKeyException (ZOOKEEPER-2044).
    +     */
    +    private static class MockNIOServerCnxn extends NIOServerCnxn {
    +        public MockNIOServerCnxn(NIOServerCnxn cnxn)
    +                throws IOException {
    +            super(cnxn.zkServer, cnxn.sock, cnxn.sk, cnxn.factory);
    +        }
    +
    +        public void mockSendBuffer(ByteBuffer bb) throws Exception {
    +            super.internalSendBuffer(bb);
    +        }
    +    }
    +
    +    @Test(timeout = 30000)
    +    public void testValidSelectionKey() throws Exception {
    +        final ZooKeeper zk = createClient();
    +        try {
    +            Iterable<ServerCnxn> connections = serverFactory.getConnections();
    +            for (ServerCnxn serverCnxn : connections) {
    +                MockNIOServerCnxn mock = new MockNIOServerCnxn((NIOServerCnxn) serverCnxn);
    +                // Cancel key
    +                ((NIOServerCnxn) serverCnxn).sock.keyFor(((NIOServerCnxnFactory) serverFactory).selector).cancel();;
    +                mock.mockSendBuffer(ByteBuffer.allocate(8));
    +            }
    +        } catch (CancelledKeyException e) {
    +            LOG.error("Exception while sending bytes!", e);
    +            Assert.fail(e.toString());
    +        } finally {
    +            zk.close();
    --- End diff --
    
    @rakeshadr Good observation on the long running of the test. This is definitely something we should fix. The actual delay indeed happens at client close and the root cause is session timeout: when a client closing itself it sends a request to server, and this request packet will stuck forever in our case because server has canceled the selector; so client session will expire eventually and by default, the timeout value between client / server is set as 30 sec and 2/3 about it - which is 20 sec is exactly what it would cost for a heart beat to fail. I fixed this by adjusting the timeout value to 3 sec instead just for this single test. PTAL.
, Github user rakeshadr commented on a diff in the pull request:

    https://github.com/apache/zookeeper/pull/156#discussion_r98146418
  
    --- Diff: src/java/test/org/apache/zookeeper/server/NIOServerCnxnTest.java ---
    @@ -68,4 +69,41 @@ public void testOperationsAfterCnxnClose() throws IOException,
                 zk.close();
             }
         }
    +
    +    /**
    +     * Mock extension of NIOServerCnxn to test for
    +     * CancelledKeyException (ZOOKEEPER-2044).
    +     */
    +    private static class MockNIOServerCnxn extends NIOServerCnxn {
    +        public MockNIOServerCnxn(NIOServerCnxn cnxn)
    +                throws IOException {
    +            super(cnxn.zkServer, cnxn.sock, cnxn.sk, cnxn.factory);
    +        }
    +
    +        public void mockSendBuffer(ByteBuffer bb) throws Exception {
    +            super.internalSendBuffer(bb);
    +        }
    +    }
    +
    +    @Test(timeout = 30000)
    +    public void testValidSelectionKey() throws Exception {
    +        int oldTimeout = ClientBase.CONNECTION_TIMEOUT;
    +        ClientBase.CONNECTION_TIMEOUT = 3000;
    +        final ZooKeeper zk = createClient();
    --- End diff --
    
    Thanks @hanm for the analysis and fixing it. Instead of directly changing the static value, how about simplifying the ZooKeeper client creation like below,
    
    ``final ZooKeeper zk = createZKClient(hostPort, 3000);``
, Github user hanm commented on a diff in the pull request:

    https://github.com/apache/zookeeper/pull/156#discussion_r98244348
  
    --- Diff: src/java/test/org/apache/zookeeper/server/NIOServerCnxnTest.java ---
    @@ -68,4 +69,41 @@ public void testOperationsAfterCnxnClose() throws IOException,
                 zk.close();
             }
         }
    +
    +    /**
    +     * Mock extension of NIOServerCnxn to test for
    +     * CancelledKeyException (ZOOKEEPER-2044).
    +     */
    +    private static class MockNIOServerCnxn extends NIOServerCnxn {
    +        public MockNIOServerCnxn(NIOServerCnxn cnxn)
    +                throws IOException {
    +            super(cnxn.zkServer, cnxn.sock, cnxn.sk, cnxn.factory);
    +        }
    +
    +        public void mockSendBuffer(ByteBuffer bb) throws Exception {
    +            super.internalSendBuffer(bb);
    +        }
    +    }
    +
    +    @Test(timeout = 30000)
    +    public void testValidSelectionKey() throws Exception {
    +        int oldTimeout = ClientBase.CONNECTION_TIMEOUT;
    +        ClientBase.CONNECTION_TIMEOUT = 3000;
    +        final ZooKeeper zk = createClient();
    --- End diff --
    
    @rakeshadr done. I was looking for something similar in createClient - did not find it so ended up using the old approach.
, We are seeing similar Zookeeper errors when trying to launch HBase while testing Impala on RHEL7. Is there enough information in the following log output to determine if it's the same bug?

{noformat}
17/01/04 21:31:35 ERROR server.NIOServerCnxn: Unexpected Exception: 
java.nio.channels.CancelledKeyException
	at sun.nio.ch.SelectionKeyImpl.ensureValid(SelectionKeyImpl.java:73)
	at sun.nio.ch.SelectionKeyImpl.interestOps(SelectionKeyImpl.java:77)
	at org.apache.zookeeper.server.NIOServerCnxn.sendBuffer(NIOServerCnxn.java:153)
	at org.apache.zookeeper.server.NIOServerCnxn.sendResponse(NIOServerCnxn.java:1075)
	at org.apache.zookeeper.server.FinalRequestProcessor.processRequest(FinalRequestProcessor.java:404)
	at org.apache.zookeeper.server.SyncRequestProcessor.run(SyncRequestProcessor.java:138)
{noformat}, Yes from the log it sounds the same issue of what this JIRA is trying to address., Thanks [~hanm]., Github user rakeshadr commented on the issue:

    https://github.com/apache/zookeeper/pull/156
  
    Thanks @hanm , I've committed the changes to branch-3.4
, Thanks [~hanm], [~fpj], [~abranzyck] and others for the help in resolving this issue.

Committed to branch-3.4:
https://git-wip-us.apache.org/repos/asf?p=zookeeper.git;a=commit;h=4b9fe5ea71d73ba26ca722e3919b8d0afe84ab86, Github user eribeiro commented on the issue:

    https://github.com/apache/zookeeper/pull/156
  
    @rakeshadr @hanm For whatever reason this PR was not closed. Could you close it Michael?
, Github user hanm commented on the issue:

    https://github.com/apache/zookeeper/pull/156
  
    Closing pull request now it's merged. 
, Github user hanm closed the pull request at:

    https://github.com/apache/zookeeper/pull/156
]