[I had the same issue but thanks to the log messages I was able to find and fix at the source, the situation when a IP address is still unavailable or changes all the sudden is actually VERY common in most major cloud solutions nowadays, what actually makes this bug SEVERE for the high availability does not work at all in such DNS changes, even overriding the DNS caching setting in Java is useless.

This issue affects, at least, the following methods:
org.apache.zookeeper.server.quorum.Follower.followLeader(Follower.java:71)
connectOne(QuorumCnxManager.java:369)

And the solution was to add a call to a new method located in:
org.apache.zookeeper.server.quorum.QuorumPeer.QuorumServer.refreshDNS()

And call it upon a IOException on the methods listed above, now I can start nodes anytime (even saving my DNS container for last), restart them (IPs are always different) and the negotiation works like a charm.

To say this issue is "Minor" is not understandable for nowadays all sorts of systems are virtualized and, most the time, IPs  address are dynamically assigned upon system startup and when multiple nodes start as the same time it is likely that a few moments will be needed for the IPs to be assigned... that is exactly what I go through with docker and Zookeeper.

This is the new method added (org.apache.zookeeper.server.quorum.QuorumPeer.QuorumServer.refreshDNS()):
        /**
         * Forces the resolution of the hostname to IP address, for this can be dynamic and on some
         * occasions even not available by the time the service starts
         */
        public void refreshDNS() {
        	LOG.debug("Refreshing DNS for Quorum Peer " + electionAddr);
        	
        	if (electionAddr != null) {
        		electionAddr = new InetSocketAddress(electionAddr.getHostName(), electionAddr.getPort());
        	}
        	
        	if (addr != null) {
        		addr = new InetSocketAddress(addr.getHostName(), addr.getPort());
        	}

This is how the catch clauses of the affected methods look like now:
} catch (IOException e) {
                //This code corrects a negative or out-dated cache hits avoid the servers from communicating, by forcing it to resolve again of the Hostname to a IP Address
                self.getView().get(sid).refreshDNS();
                self.quorumPeers.get(sid).refreshDNS();
                
                LOG.warn("Cannot open channel to " + sid
                        + " at election address " + electionAddr,
                        e);
            }, I had the same issue but thanks to the log messages I was able to find and fix at the source, the situation when a IP address is still unavailable or changes all the sudden is actually VERY common in most major cloud solutions nowadays, what actually makes this bug SEVERE for the high availability does not work at all in such DNS changes, even overriding the DNS caching setting in Java is useless.

This issue affects, at least, the following methods:
org.apache.zookeeper.server.quorum.Follower.followLeader(Follower.java:71)
connectOne(QuorumCnxManager.java:369)

And the solution was to add a call to a new method located in:
org.apache.zookeeper.server.quorum.QuorumPeer.QuorumServer.refreshDNS()

And call it upon a IOException on the methods listed above, now I can start nodes anytime (even saving my DNS container for last), restart them (IPs are always different) and the negotiation works like a charm.

To say this issue is "Minor" is not understandable for nowadays all sorts of systems are virtualized and, most the time, IPs  address are dynamically assigned upon system startup and when multiple nodes start as the same time it is likely that a few moments will be needed for the IPs to be assigned... that is exactly what I go through with docker and Zookeeper.

This is the new method added (org.apache.zookeeper.server.quorum.QuorumPeer.QuorumServer.refreshDNS()):
        /**
         * Forces the resolution of the hostname to IP address, for this can be dynamic and on some
         * occasions even not available by the time the service starts
         */
        public void refreshDNS() {
        	LOG.debug("Refreshing DNS for Quorum Peer " + electionAddr);
        	
        	if (electionAddr != null) {
        		electionAddr = new InetSocketAddress(electionAddr.getHostName(), electionAddr.getPort());
        	}
        	
        	if (addr != null) {
        		addr = new InetSocketAddress(addr.getHostName(), addr.getPort());
        	}

This is how the catch clauses of the affected methods look like now:
} catch (IOException e) {
                //This code corrects a negative or out-dated cache hits avoid the servers from communicating, by forcing it to resolve again of the Hostname to a IP Address
                self.getView().get(sid).refreshDNS();
                self.quorumPeers.get(sid).refreshDNS();
                
                LOG.warn("Cannot open channel to " + sid
                        + " at election address " + electionAddr,
                        e);
            }, Forces the re-resolve, on error, of the Peers' Hostname to IP address, which is an issue in virtual/cloud environments where IPs are assigned dynamically upon every container startup.
If the Hostname is unresolvable or the connection fails (IP change), this DNS refresh process is immediately triggered., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12700663/QuorumCnxManager.java
  against trunk revision 1662055.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    -1 patch.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2532//console

This message is automatically generated., Forces the re-resolve, on error, of the Peers' Hostname to IP address, which is an issue in virtual/cloud environments where IPs are assigned dynamically upon every container startup.
If the Hostname is unresolvable or the connection fails (IP change), this DNS refresh process is immediately triggered., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12700667/DynamicIP.java.patch
  against trunk revision 1662055.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    -1 patch.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2533//console

This message is automatically generated., Forces the re-resolve, on error, of the Peers' Hostname to IP address, which is an issue in virtual/cloud environments where IPs are assigned dynamically upon every container startup.
If the Hostname is unresolvable or the connection fails (IP change), this DNS refresh process is immediately triggered., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12700668/DynamicIP.java.patch
  against trunk revision 1662055.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    -1 patch.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2534//console

This message is automatically generated., GitHub user yongtang opened a pull request:

    https://github.com/apache/zookeeper/pull/37

    ZOOKEEPER-1846: Always recreate socket addresses for any DNS change.

    This pull is also related to ZOOKEEPER-1506. The fix allows DNS changes to be applied when ZooKeeper is running. ZOOKEEPER-1506 partially solves this issue, which has already been
    applied to ZooKeeper 3.5.1 (RC3). This pull request allows ZOOKEEPER-1846 to be fixed as well.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/yongtang/zookeeper branch-3.5

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/zookeeper/pull/37.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #37
    
----
commit 92a55a764f54521d3cd745a26f2fedfa7b5804ac
Author: yongtang <yongtang@users.noreply.github.com>
Date:   2015-07-07T01:15:50Z

    ZOOKEEPER-1846: Always recreate socket addresses for any DNS change. This fix is also related to ZOOKEEPER-1506.

----
, -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12700668/DynamicIP.java.patch
  against trunk revision 1689211.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    -1 patch.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2807//console

This message is automatically generated., Is this a duplicate of ZOOKEEPER-1506?, Looks like a duplicate of [Zookeeper-1506|https://issues.apache.org/jira/browse/ZOOKEEPER-1506] to me.  The patch on this one looks  nice and small too..., [~benjamin.jaton] can you confirm that this is resolved by ZOOKEEPER-1506 ?, -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12700668/DynamicIP.java.patch
  against trunk revision 1736259.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    -1 patch.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3119//console

This message is automatically generated., Moving out of PA given we're waiting on feedback (see recent comments) on whether this is already fixed by ZOOKEEPER-1506, I am pretty sure this is a duplicate of ZOOKEEPER-1506; resolve as dup.]