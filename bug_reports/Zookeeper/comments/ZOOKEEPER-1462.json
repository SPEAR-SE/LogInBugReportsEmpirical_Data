[Manually verified that the db get initialized correctly. 

Writing unit test for this case will take a bit of effort., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12525378/ZOOKEEPER-1462.patch
  against trunk revision 1331246.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1059//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1059//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1059//console

This message is automatically generated., Thawan, 
 would you be able to add a unit test for this?, Moving it out since we do not have a patch., I'd like to consider this issue for 3.4.6. I was looking at how to write a test case for this issue and realized that it was very close to testConnectionEvents() in ReadOnlyModeTest. This test doesn't seem to fail without this patch, though, and I would expect it to fail. I originally thought it was because we were not using an observer in that test, but I couldn't find a reasonable explanation for that being the case. If you have any insight here, [~thawan], I would appreciate. , I have been able to reproduce this problem only for Observers.
The reason seems to be related with the different handling in QuorumPeer.run ... sorry but this is as far as I got for now.
Unfortunately the patch doesn't seem to work for me.
, After looking a bit more, it seems that the Observer doesn't write the last transactions in the transaction log and that is the reason for not being up-to-date when it restarts.
If the Observer is started using the transaction log of a Follower, then it works.
Anybody can tell why is it that the Observer doesn't write those transactions?, It seems to me that the Observer is not sending anything through SyncRequestProcessor ... is that so?
It seems that if I add "syncProcessor.processRequest(request);" as the first line of ObserverZooKeeperServer.commitRequest, the problem is solved.
I will start preparing a patch with a test case, but given the amount of guessing that I am doing for this I would really appreciate some feedback :-), bq. It seems to me that the Observer is not sending anything through SyncRequestProcessor ... is that so?

This is related to ZOOKEEPER-1552., The root cause of this issue is the same as reported in ZOOKEEPER-1552. The current proposed patch for ZOOKEEPER-1552 also corrects this issue (at least when disk sync is enabled for the Observer). However, given this additional problem, perhaps it should be considered whether some configuration options should not be allowed (e.g. read-only option for observers that do not sync to disk)., German, I was wondering if we can close this jira and move the discussion to ZOOKEEPER-1552, since that patch seems to solve the problem you reported, at least partially. If there is any issue that is specific to the problem you reported here, then let's keep it., Actually, perhaps I should ask this same question to [~thawan], since he is currently marked as the assignee of this jira. , ZOOKEEPER-1552 make sure that observer has up-to-date information on disk. So it partially fix the problem that German has with the observer. 

This patch fixed when any type of server restarted and transition into Read-only server. It will use on-disk state to populate its data-tree.  

When thinking about this, it doesn't seem like it is safe to use read-only server with participants. Since it may have uncommitted txn in its txnlog.

Internally, we use ZOOKEEPER-1607, so I didn't put more effort on read-only server related features. , as far as I am concerned it is ok to close this one.
It sounds like the discussion on unsafe options doesn't fit within this JIRA that well., bq. When thinking about this, it doesn't seem like it is safe to use read-only server with participants. Since it may have uncommitted txn in its txnlog.

It does sound wrong, an RO server should serve requests from its in-memory, committed state. Loading from disk sounds wrong. It sounds like a good idea to revisit this, but not in this jira. Resolving this one. , I'll close this one once we get ZOOKEEPER-1552 in., Kind reminder ... I guess it is now time to close it, or?, Closing issues after releasing 3.4.6.]