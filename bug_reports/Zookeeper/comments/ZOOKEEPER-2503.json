[I believe that the myid is used as part of the server id, in order to get a unique value for quorum formation. iirc it's the top 8 bits of the server id. Hence the reason why we mention that in the docs. afaik we never "enforced" this at the code level. On the plus side it would be a good idea, on the minus side it might break existing configurations....
, Honestly, it's probably for the best to break those hypothetical existing configurations, since in some ways they are already broken. It sounds like the behavior would result in truncation down to one byte of effective server ID, and from personal experience, I can say that if two servers are running with the same Server ID in an ensemble it can have weird results. We had a configuration issue in one of our ensembles at one point where two servers had been misconfigured to use the same ServerId, which the Leader happily allows, and which we think resulted in duplicate session IDs getting handed out to two different sessions, and then to strange side-effects down the line. We actually have a fix in our Zookeeper fork to make LearnerHandler block any server from being allowed in if the Learner is trying to claim a Server ID that's already in use by another Learner, to prevent this configuration problem from sneaking in again., Thanks for the feedback [~dbenediktson] - any chance you could contribute that patch back? (if so please create another jira for it linked to this).

Makes sense to close this hole, perhaps in 3.5+?, Absolutely, I'd be delighted to. Will file the JIRA today, and will try to get a patch attached today, or latest on Monday., We require it in the processing of session ids, here are the two references I got:

{noformat}
    nextSessionId = SessionTrackerImpl.initializeNextSession(this.serverId);

    public static long initializeNextSession(long id) {
        long nextSid = 0;
        nextSid = (System.currentTimeMillis() << 24) >>> 8;
        nextSid =  nextSid | (id <<56);
        return nextSid;
    }
{noformat}


and in LeaderSessionTracker:

{noformat}
    // Returns the serverId from the sessionId (the high order byte)
    public static long getServerIdFromSessionId(long sessionId) {
        return sessionId >> 56;
    }
{noformat}

I couldn't find it anywhere else. , To complement what I said above, as I understand it, we shouldn't really need to limit myid to 255, but instead what we need is the lower 8 bits to be different across all server ids in the config. For example, 1024, 2048, 4096 form a bad set of ids for a 3-server ensemble. This should work in the 3.4 branch, but that code in LeaderSessionTracker for local sessions might break it., bq. shouldn't really need to limit myid to 255

Given most users will have 3/5/7 servers, and certainly never approaching 256, perhaps we should just enforce the 0-255 limitation explicitly and make sure it's well documented. That seems like it would be the most user friendly in terms of understanding/implementing? We can also add the check that Dan mentioned above., I agree that the range [1, 255] should be sufficient to cover virtually every case we have. Perhaps not even extreme cases with a ton of observes would need more than that. I'm wondering about if there is any issue with automating configuration. I can't think of anything, but we should ask around., FYI - Please consider ZOOKEEPER-2901 when making this change. ]