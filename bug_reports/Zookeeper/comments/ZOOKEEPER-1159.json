[Oh I had a user actually hit this bug I believe but I couldn't reproduce it for the life of me. I'll take a look at this for 3.4., Now I remember my own analysis here. The only way to get a SessionExpired exception there so far as I can tell is if onConnected detects a SessionExpired. At which point it sets the state variable to CLOSED, so the "if(state.isAlive())" check will fail and it will never call that queueEvent.

This is about where my digging into this issue ended. I couldn't reproduce this error and nothing in the code seems to me that it should be able to get that SessionExpired exception and not set the state to CLOSED, which will then always show a SESSIONEXPIRED exception to the client. If you can reproduce this error though, perhaps it is worth more investigation.
, It's possible that the send thread dies, but the state of the connection remains alive (due to race conditions). In that case, we queue a Disconnected event:
<code>
            ...
            cleanup();
            clientCnxnSocket.close();
            if (state.isAlive()) {
                eventThread.queueEvent(new WatchedEvent(Event.EventType.None,
                        Event.KeeperState.Disconnected, null));
            }
            ZooTrace.logTraceMessage(LOG, ZooTrace.getTextTraceLevel(),
                                     "SendThread exitedloop.");
        }
</code>
I would expect a Expired event here. But improved state management would be even better.
, Can you show the race condition that illustrates this?, The patch provided in the initial report fixes a problem we observed in our production., Looking at the current implementation, if a SessionExpiredException was thrown, then the expired event is enqueued, as is the event-of-death for the event thread; and isAlive() is false. So, as indicated by Camille, your patch doesn't appear to have the affect you expect.

As for the race conditions. A call to close() will put the client in the closing mode, but the state may end up being CLOSED, CONNECTING or CONNECTED as the send thread doesn't enforce strict state transitions. The client will close, but state.isAlive() may still return true after the send thread has died. Note that this isn't easy to test, but you can step through it with a debugger to see how CLOSED can easily be stomped by CONNECTING (especially with the random sleep happening after a test for closing when isFirstConnect is false).
Another, rather exotic case (hopefully doesn't ever happen), is when a Throwable isn't caught, e.g. an error that is not an Exception.

In any case, I'm still not sure whether a dying send-thread should indicate the session has expired. I looked at the state diagram, but it seems to conflict with what I see in the code., As I understand it, the problem here may be that a disconnected client cannot discover that its session has expired. Only the server can declare a session expired which on the client side leads to the SessionExpiredException, but only when the client is connected.
If this assumption is correct, I'm not sure how best to address it.

, FWIW - here's a little test that shows the problem:

{code}
TestingServer           server = new TestingServer();   // uses Curator's TestingServer
final CountDownLatch    connectedLatch = new CountDownLatch(1);
final CountDownLatch    expiredLatch = new CountDownLatch(1);
Watcher                 watcher = new Watcher()
{
    @Override
    public void process(WatchedEvent event)
    {
        System.out.println(event);
        if ( event.getState() == Event.KeeperState.SyncConnected )
        {
            connectedLatch.countDown();
        }
        else if ( event.getState() == Event.KeeperState.Expired )
        {
            expiredLatch.countDown();
        }
    }
};
ZooKeeper       zk = new ZooKeeper(connectString, 5000, watcher);
connectedLatch.await();
zk.exists("/", true);

server.close();

if ( !expiredLatch.await(10, TimeUnit.SECONDS) )
{
    Assert.fail("Expired never happened");
}
{code}, ^^^^ Ignore my code above. I'm mistaken., Is this still an outstanding issue or can we close it by any chance?

[~mspycher] and [~fournc] 's analysis and comments are pretty much accurate and I'm not sure what else we can do about it?

 ]