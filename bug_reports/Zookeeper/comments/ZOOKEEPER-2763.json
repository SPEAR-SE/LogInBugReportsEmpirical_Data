[This also appears to be broken for any bytes with negative value, in which case it prints the full eight-digit int equivalent. For example, the byte array \{0x10, 0x05, -0x20\} serializes to #105ffffffe0, rather than the expected #1005e0, One possible fix:

{code}
    static String toCSVBuffer(byte barr[]) {
        if (barr == null || barr.length == 0) {
            return "";
        }
        StringBuilder sb = new StringBuilder(barr.length + 1);
        sb.append('#');
        for(int idx = 0; idx < barr.length; idx++) {
            String hex = Integer.toHexString(barr[idx] & 0xff);
            if (hex.length() == 1) {
                sb.append('0');
            }
            sb.append(hex);
        }
        return sb.toString();
    }
{code}, this one will also fix the negative case:
{code:borderStyle=solid}
            if (hex.length() == 1) {
                sb.append('0');
            } else if (hex.length() > 2) {
            	sb.append(hex.substring(hex.length() - 2));
            }
            sb.append(hex);
{code}


, Brandon Berg, I'm a big fan for zookeeper, and would like to contribute my time to it. 

after reading HowToContribute doc, still a little confused.

I think one PR in https://github.com/apache/zookeeper would be enough, right? or I have to get assigned tickets first?, [~weitang] A pull request is enough. It takes a while to get an issue assign to new contributor because only a handful of people has JIRA admin permission. So if you are interested on contributing you can start working right away.

[~rakeshr] Can you add Alburt to JIRA contributor list?, bq. Can you add Alburt to JIRA contributor list?
Done. [~weitang], please create a PR with the fix. All the best!, [~weitang]: Note that the "& 0xff" in the fix I suggested handles the negative case by masking off any bits outside of the least significant byte. There's no need to check for hex.length() > 2, because Integer.toHexString(barr[idx] & 0xff) will never return a string longer than two characters.

I don't actually know anything about the process for submitting fixes; submitting this bug report is the only interaction I've ever had with the project so far., Thx Guys for helping me on this. this is awksome.

[~bberg] you are correct. 0xff can handle negative case correctly.
You still want me to submit PR to fix toCSVBuffer and toXMLBuffer?

Also these two methods are almost the same, kinda of duplicate.
Any strong reason that we keep them in this way? because same issue will require two changes.....

Regards, I just noticed that this is a duplicate of ZOOKEEPER-1716. There's a better-performing fix suggested there, but it seems the assignee abandoned it over a year ago after it caused some unit tests to fail (possibly because the unit tests were expecting the wrong result, but I don't know because the test results have long since been deleted). I would suggest using that fix (the NIBBLE_TO_HEX one, not the String.format one) instead of mine. Note also that the initial allocation of the StringBuffer is incorrect. The size should be 2 * barr.length + 1, not barr.length + 1. This is fine functionally, but leads to an unnecessary reallocation when the initial buffer is filled.

You could make a generic version of the function that takes a "prefix" String argument, like:

{code}
private static String toHexString(String prefix, byte[] barr) {
    if (barr == null || barr.length == 0) {
        return ""; // Or should it return the prefix? Current behavior is not to, but we've already identified multiple problems with the current behavior.
    }
    StringBuilder sb = new StringBuilder(2 * barr.length + prefix.length());
    sb.append(prefix);
    for(int idx = 0; idx < barr.length; idx++) {
        byte b = barr[idx];
        sb.append(NIBBLE_TO_HEX[b&0x0f]);
        sb.append(NIBBLE_TO_HEX[(b&0xf0)>>4]);
    }
    return sb.toString();
}

public static String toCSVBuffer(byte[] barr) {
    return toHexString("#", barr);
}

public static String toXMLBuffer(byte[] barr) {
    return toHexString("", barr);
}
{code}

Also, it may be better to close this bug as duplicate and submit a fix for the original bug. I don't really know what the procedure is. [~chelin], are you still around? Do you remember what happened with ZOOKEEPER-1716?, agreed. the patch for ZOOKEEPER-1716 works for this issue. this one should be closed if ZOOKEEPER-1716 was resolved., The patch is available I do not believe it has been merged though., [~chelin] Thx for confirm. Since ur patch is only for toCsvBuffer. I will submit another pull request for toXMLBuffer() today., GitHub user alburthoffman opened a pull request:

    https://github.com/apache/zookeeper/pull/238

    ZOOKEEPER-2763: Utils.toCsvBuffer() omits leading 0 for bytes < 0x10

    1. fix toCsvBuffer() and toXMLBuffer()
    2. reduce duplicate code

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/alburthoffman/zookeeper ZOOKEEPER_2763

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/zookeeper/pull/238.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #238
    
----
commit a1461e47e89878f8772b2136f1f2ff978b1f6f4b
Author: wtang3 <wtang3@ebay.com>
Date:   2017-04-24T05:46:57Z

    fix https://issues.apache.org/jira/browse/ZOOKEEPER-2763

----
, PR: https://github.com/apache/zookeeper/pull/238, +1 overall.  GitHub Pull Request  Build
      

    +1 @author.  The patch does not contain any @author tags.

    +0 tests included.  The patch appears to be a documentation patch that doesn't require tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 3.0.1) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/588//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/588//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/588//console

This message is automatically generated., +1 overall.  GitHub Pull Request  Build
      

    +1 @author.  The patch does not contain any @author tags.

    +0 tests included.  The patch appears to be a documentation patch that doesn't require tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 3.0.1) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/589//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/589//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/589//console

This message is automatically generated., +1 overall.  GitHub Pull Request  Build
      

    +1 @author.  The patch does not contain any @author tags.

    +0 tests included.  The patch appears to be a documentation patch that doesn't require tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 3.0.1) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/590//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/590//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/590//console

This message is automatically generated., Not a reviewer, so I don't think I have a say here, but just to give my opinion: This mostly looks good, but I'm not a huge fan of the way the '#' is added via String concatenation. This reallocates another potentially very large buffer and copies the whole hex string just to prepend a single hash character. The approach I suggested in my last comment (passing a prefix in as an argument to toHexString()) avoids the reallocation and copy by allocating space for it in the original StringBuilder.

Granted, AFAIK this is only used in debug logging, and the whole thing is network IO bounded, so maybe it doesn't really matter anyway, but it's an easy fix that gives a free performance improvement., Github user afine commented on a diff in the pull request:

    https://github.com/apache/zookeeper/pull/238#discussion_r113297764
  
    --- Diff: src/java/main/org/apache/jute/Utils.java ---
    @@ -190,19 +190,32 @@ static String fromCSVString(String s) throws IOException {
         }
         
         /**
    +     * convert byte array to a string in hex format
          * 
    -     * @param s 
    -     * @return 
    +     * @param barr
    +     * @return
          */
    -    static String toXMLBuffer(byte barr[]) {
    --- End diff --
    
    Great catch @alburthoffman
    
    Just wondering if there is anything wrong with java's built in XML tooling here. Using the example from the JIRA:
    `javax.xml.bind.DatatypeConverter.printHexBinary(new byte[] {0x10, 0x05, -0x20})` => "1005E0"
, Github user alburthoffman commented on a diff in the pull request:

    https://github.com/apache/zookeeper/pull/238#discussion_r113356883
  
    --- Diff: src/java/main/org/apache/jute/Utils.java ---
    @@ -190,19 +190,32 @@ static String fromCSVString(String s) throws IOException {
         }
         
         /**
    +     * convert byte array to a string in hex format
          * 
    -     * @param s 
    -     * @return 
    +     * @param barr
    +     * @return
          */
    -    static String toXMLBuffer(byte barr[]) {
    --- End diff --
    
    you are right. printHexBinary works exactly as same as toHexString.
    I will change it to use printHexBinary and add test cases.
    
    Thx for ur suggestion
, afine is right about javax.xml.bind.DatatypeConverter.printHexBinary,

so I'm going to update my PR to use javax.xml.bind.DatatypeConverter.printHexBinary.
since dont need to implement our own method., Change is done.

[~bberg] agreed with u about the StringBuffer thing. this is one thing I'm not sure about. Because what I'm thinking is to make toHexString simple, which means it just convert bytes array to string. and for the prefix string, it should be done with another method, like padString?

because it's easier to understand and toHexString can be used in other places later or replaced by DatatypeConverter.printHexBinary....

But it does have performance issue implicitly. 

So I dont know actually....

Regards, -1 overall.  GitHub Pull Request  Build
      

    +1 @author.  The patch does not contain any @author tags.

    +0 tests included.  The patch appears to be a documentation patch that doesn't require tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 3.0.1) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/631//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/631//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/631//console

This message is automatically generated., -1 overall.  GitHub Pull Request  Build
      

    +1 @author.  The patch does not contain any @author tags.

    +0 tests included.  The patch appears to be a documentation patch that doesn't require tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 3.0.1) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    -1 contrib tests.  The patch failed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/632//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/632//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/632//console

This message is automatically generated., -1 overall.  GitHub Pull Request  Build
      

    +1 @author.  The patch does not contain any @author tags.

    +0 tests included.  The patch appears to be a documentation patch that doesn't require tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 3.0.1) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/633//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/633//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/633//console

This message is automatically generated., -1 overall.  GitHub Pull Request  Build
      

    +1 @author.  The patch does not contain any @author tags.

    +0 tests included.  The patch appears to be a documentation patch that doesn't require tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 3.0.1) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/634//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/634//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/634//console

This message is automatically generated., -1 overall.  GitHub Pull Request  Build
      

    +1 @author.  The patch does not contain any @author tags.

    +0 tests included.  The patch appears to be a documentation patch that doesn't require tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 3.0.1) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/635//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/635//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/635//console

This message is automatically generated., avoid DatatypeConverter because JAXB has to been initialized at some point, otherwise it will throw NullPointerException.

In utils class, initialize JAXB is too heavy, so let's make it simple...., Github user alburthoffman commented on a diff in the pull request:

    https://github.com/apache/zookeeper/pull/238#discussion_r113880584
  
    --- Diff: src/java/main/org/apache/jute/Utils.java ---
    @@ -190,19 +190,32 @@ static String fromCSVString(String s) throws IOException {
         }
         
         /**
    +     * convert byte array to a string in hex format
          * 
    -     * @param s 
    -     * @return 
    +     * @param barr
    +     * @return
          */
    -    static String toXMLBuffer(byte barr[]) {
    --- End diff --
    
    @afine found the reason why not use DatatypeConverter:
    JAXB Providers are required to call the setDatatypeConverter api at some point before the first marshal or unmarshal operation (perhaps during the call to JAXBContext.newInstance). This step is necessary to configure the converter that should be used to perform the print and parse functionality.
    
    In utils class, initialize JAXB is too heavy, so let's make it simple....
, +1 overall.  GitHub Pull Request  Build
      

    +1 @author.  The patch does not contain any @author tags.

    +0 tests included.  The patch appears to be a documentation patch that doesn't require tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 3.0.1) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/657//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/657//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/657//console

This message is automatically generated., Github user afine commented on a diff in the pull request:

    https://github.com/apache/zookeeper/pull/238#discussion_r114011352
  
    --- Diff: src/java/main/org/apache/jute/Utils.java ---
    @@ -190,19 +190,32 @@ static String fromCSVString(String s) throws IOException {
         }
         
         /**
    +     * convert byte array to a string in hex format
          * 
    -     * @param s 
    -     * @return 
    +     * @param barr
    +     * @return
          */
    -    static String toXMLBuffer(byte barr[]) {
    --- End diff --
    
    Are you sure about that? I know next to nothing about JAXB so I can definitely be wrong, but I was able to drop `DatatypeConverter.printHexBinary` in place and have everything just work. Digging through the implementation and DatatypeConverter instantiation happening behind the scenes everything looked reasonable. Can you link me to something that shows what I am missing?
    
    Thanks
, Github user alburthoffman commented on a diff in the pull request:

    https://github.com/apache/zookeeper/pull/238#discussion_r117419956
  
    --- Diff: src/java/main/org/apache/jute/Utils.java ---
    @@ -190,19 +190,32 @@ static String fromCSVString(String s) throws IOException {
         }
         
         /**
    +     * convert byte array to a string in hex format
          * 
    -     * @param s 
    -     * @return 
    +     * @param barr
    +     * @return
          */
    -    static String toXMLBuffer(byte barr[]) {
    --- End diff --
    
    I'm not able to dig into Zookeeper internal to find the root cause.
    but this link would help:
    http://stackoverflow.com/questions/12498256/why-the-npe-using-static-method-of-datatypeconverter
    https://developer.ibm.com/answers/questions/200553/jaxb-datatypeconverter-throws-nullpointerexception.html

, Github user afine commented on a diff in the pull request:

    https://github.com/apache/zookeeper/pull/238#discussion_r117538863
  
    --- Diff: src/java/main/org/apache/jute/Utils.java ---
    @@ -190,19 +190,32 @@ static String fromCSVString(String s) throws IOException {
         }
         
         /**
    +     * convert byte array to a string in hex format
          * 
    -     * @param s 
    -     * @return 
    +     * @param barr
    +     * @return
          */
    -    static String toXMLBuffer(byte barr[]) {
    --- End diff --
    
    I went through the links that you provided. Would you mind including the version of the JVM that you are running? According to https://issues.apache.org/jira/browse/CAMEL-4893 the issue I think you are running into was fixed in JDK's greater than 1.7.0_02.
    
    It would also be great if you could include a stack trace of the issue you are running into.
, Github user eribeiro commented on the issue:

    https://github.com/apache/zookeeper/pull/238
  
    @alburthoffman @afine Hey guys, did you notice that the body of `bufEquals` method could be replaced by  `return Arrays.equals(onearray, twoarray);`? 
    
    In fact, the current implementation of `bufEquals` is almost a clone of `Arrays.equals`
, Github user eribeiro commented on the issue:

    https://github.com/apache/zookeeper/pull/238
  
    Also, loops like the one below:
    ```
            for (int idx = 0; idx < s.length(); idx++) {
              char ch = s.charAt(idx);
    ```
    could be simplified to  `for (char ch : s.toCharArray()) {` in some **very specific methods that don't increment the counter inside the loop**.
    

, Github user alburthoffman commented on the issue:

    https://github.com/apache/zookeeper/pull/238
  
    @eribeiro you are correct. foreach loop is more readable. 
    
    But for bufEquals, it should be in another commit(code refractor?). cause this PR is for  ZOOKEEPER-2763
    
    let's make it simple. 
, Github user eribeiro commented on the issue:

    https://github.com/apache/zookeeper/pull/238
  
    Totally agree. It is worth another jira, for sure. :)
, Github user chelin commented on the issue:

    https://github.com/apache/zookeeper/pull/238
  
    Regarding 
    > for (char ch : s.toCharArray())
    
    The difference is that toCharArray() results in a copy of the intrinsic array, leading to increased memory usage
, Github user alburthoffman commented on a diff in the pull request:

    https://github.com/apache/zookeeper/pull/238#discussion_r120258026
  
    --- Diff: src/java/main/org/apache/jute/Utils.java ---
    @@ -190,19 +190,32 @@ static String fromCSVString(String s) throws IOException {
         }
         
         /**
    +     * convert byte array to a string in hex format
          * 
    -     * @param s 
    -     * @return 
    +     * @param barr
    +     * @return
          */
    -    static String toXMLBuffer(byte barr[]) {
    --- End diff --
    
    @afine I belive it's the testing environment, because the tests for datatypeconverter will fail. here is what I found from their jenkins job console:
    java version "1.7.0_80"
    Java(TM) SE Runtime Environment (build 1.7.0_80-b15)
    Java HotSpot(TM) 64-Bit Server VM (build 24.80-b11, mixed mode) 
, Github user afine commented on a diff in the pull request:

    https://github.com/apache/zookeeper/pull/238#discussion_r120479760
  
    --- Diff: src/java/main/org/apache/jute/Utils.java ---
    @@ -190,19 +190,32 @@ static String fromCSVString(String s) throws IOException {
         }
         
         /**
    +     * convert byte array to a string in hex format
          * 
    -     * @param s 
    -     * @return 
    +     * @param barr
    +     * @return
          */
    -    static String toXMLBuffer(byte barr[]) {
    --- End diff --
    
    Hi @alburthoffman -
    
    I have been trying to reproduce the issue that you described. A stack trace would be helpful here. Do you know exactly which test was failing for you (as I don't think the logs for any relevant jenkins job still exists)? I was able to get the whole test suite to pass with `DatatypeConverter.printHexBinary`. 
    
    Although, if I do not add null check I can get `testJuteToString` to fail. 
    
    ```
    java.lang.NullPointerException
    	at javax.xml.bind.DatatypeConverterImpl.printHexBinary(DatatypeConverterImpl.java:479)
    	at javax.xml.bind.DatatypeConverter.printHexBinary(DatatypeConverter.java:626)
    	at org.apache.jute.Utils.toHexString(Utils.java:203)
    	at org.apache.jute.Utils.toCSVBuffer(Utils.java:242)
    	at org.apache.jute.CsvOutputArchive.writeBuffer(CsvOutputArchive.java:100)
    	at org.apache.zookeeper.proto.SetDataRequest.toString(SetDataRequest.java:77)
    	at org.apache.zookeeper.server.ToStringTest.testJuteToString(ToStringTest.java:36)
    ```
    
    I was able to remedy this with a null check before the javax call. 
    
    ```
        private static String toHexString(byte barr[]) {
            if (barr == null) {
                return "";
            }
            return javax.xml.bind.DatatypeConverter.printHexBinary(barr);
        }
    ```
    
    Thanks for your patience on this.
    
    Abe
, -1 overall.  GitHub Pull Request  Build
      

    +1 @author.  The patch does not contain any @author tags.

    +0 tests included.  The patch appears to be a documentation patch that doesn't require tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 3.0.1) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/859//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/859//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/859//console

This message is automatically generated., Github user alburthoffman commented on a diff in the pull request:

    https://github.com/apache/zookeeper/pull/238#discussion_r133361758
  
    --- Diff: src/java/main/org/apache/jute/Utils.java ---
    @@ -190,19 +190,32 @@ static String fromCSVString(String s) throws IOException {
         }
         
         /**
    +     * convert byte array to a string in hex format
          * 
    -     * @param s 
    -     * @return 
    +     * @param barr
    +     * @return
          */
    -    static String toXMLBuffer(byte barr[]) {
    --- End diff --
    
    @afine I changed the code to use DatatypeConverter.printHexBinary(barr). but the tests keep failing. 
    I take a look at the failures. it's very wired, because should be caused by this change.
    
    Also I got different test cases failure in local and in hadoop jenkins report. 
    
    Not sure how to trigger hadoop jenkins job to run tests, so no way to paste it here.
]