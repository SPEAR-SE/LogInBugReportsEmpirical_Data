[after discussion this on the list, we realized that we can detect a big jump in time change in the session expiration thread. since we expire a bucket of sessions each tick, if we run into the situation where we are going to expire more than one bucket in a row, we know we have jumped forward in time. we can "smooth" the jump by requiring at least a 1/2 ticktime wait between each bucket. , this patch smooths out the effect of a radical time change by always sleeping at least 1/2 tickTime. this means that if we really needed to do a big jump forward, it will take up 1/2 of the jump to converge on the real time. because clients ping for idle times of 1/3 the timeout, there should be few sessions that expire. we could reduce that number, but take even longer to converge if we always sleep at least 3/4 of the tickTime., anyone have an idea of how to test this? i need to mock System.currentTimeMillis()., perhaps we should have a "Clock" utility that normally wraps System.currentTimeMillis() but can be mocked for testing purposes. If you want to do mocks we should do it via mockito., You can avoid the entire problem by only comparing deltas from nanoTime, which is independent of "time" and simply increases monotonously., holger you are correct. nanoTime is the way to go. i'll prepare a fix. one problem with it is that the fix will be impossible to test., One thing we should do - add sufficient logging (warn level or higher I would say) to ensure if this does happen in production we have a record of it in the log., FYI, this came up again today on hbase list:

14:59 < _hp_> man this system time update on a bunch of machines causing zookeeper session timeouts causing hr's to die is really taking its toll, count on a table now hangs, i disabled and enabled the table, tried count again, and it hangs at the same place still.  Arg.


Ben any progress on this? Should we try to get it into 3.3.3?, i haven't had a chance to get back to this. we really need to convert all the currentTimeMillis() to nanoTime(). we need to do a similar change in the C client.

i don't think we can do a test for this., I am all for making it for 3.3.3. I'd be willing to fix it probably not this week. , Mahadev.

Can we have some traction on this fix?
We have experienced the same problem, and thus it wreak havoc on our deployment.

Can we have the patch updated for current release?

Thank you very much.

Chang
, Chang,
 I probably wont have time over the next few weeks to fix this (given the 3.4 release). Please feel free to take it over or if someone else wants to fix it, he/she is welcome to do so., History repeats itself.  I have patches on ZOOKEEPER-1366 that use nanoTime to avoid these problems, but don't include the limit on number of expirations per tick.

I suggest that we mark this issue as a duplicate of that issue and apply that patch since it is up to date.  Any objections?
, sounds good to me., We now have a measure of the memory half life for the community.  Half of us forget an issue after 1000 JIRA's.  Happily Pat is part of the other half.

In any case the fix for ZOOKEEPER-1366 supersedes the proposed fix here., hey, i vaguely remembered it! :) ZOOKEEPER-1366 is the correct fix, dup of https://issues.apache.org/jira/browse/ZOOKEEPER-1366]