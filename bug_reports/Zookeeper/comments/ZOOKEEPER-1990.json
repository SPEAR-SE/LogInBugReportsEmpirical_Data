[Regarding StaticHostProvider.java - Randomness stuff was introduced in ZK-1355 to make sure that each client has a different permutation of the servers, and that client-side rebalancing after reconfig ends up with equal load.

75:       sourceOfRandomness = new Random(System.currentTimeMillis() ^ this.hashCode());

If I remember correctly the goal here is to make sure that when multiple client threads start at the same time on the same machine (such as in our systest) and execute this line each one is likely to have a different random seed. 

src/java/test/org/apache/zookeeper/test/StaticHostProviderTest.java
40:    private Random r = new Random(1);
src/java/main/org/apache/zookeeper/client/StaticHostProvider.java
98:        sourceOfRandomness = new Random(randomnessSeed);

These two are only used in tests. I want repeatable results, hence the seed of 1. But I still want each client to have a StaticHostProvider that creates a unique permutation, so I pass the StaticHostProvider a randomness seed like this:

    private StaticHostProvider getHostProvider(byte size) {
        return new StaticHostProvider(getServerAddresses(size), r.nextLong());
    }
, Thanks [~shralex], that makes sense. We should incorporate those comments into this patch for future reference., Please don't change the StaticHostProvider and StaticHostProviderTest instantiations of random.

This is done to test the client rebalancing algorithm. The test creates thousands of clients roughly at the same time, but each client has to have a different random number for the algorithm to work. 

Also, just curious, why is this marked as a Critical Bug ?

 , Oh, I see that I already wrote the same above 4 years ago. Time flies :), [~shralex] According to Random's source, the parameterless instantiation of Random (new Random()) does the following:
{code:java}
public Random() {
    this(seedUniquifier() ^ System.nanoTime());
}{code}

The above looks to me at least as random as

{code:java}
sourceOfRandomness = new Random(System.currentTimeMillis() ^ this.hashCode());
{code}

or probably new Random() is even more random, as seedUniquifier() seems to be different each time, but this.hashCode() returns the same value if the same StaticHostProvider instance is used.

I understand those cases, when in tests, we would like to have the same repeatable results (e.g. when new Random(1) is used), but what is the purpose of setting a less random seed (e.g. sessionId ^ superSecret) instead of using new Random(), which appears to be more random?
, [~shralex]

I understand the Random(1) call in tests and why it's necessary to make this injectable in StaticHostProvider.

The question is if tests are not involved why do you instantiate Random like this:
{code:java}
new Random(System.currentTimeMillis() ^ this.hashCode());
{code}
Instead of using the default constructor which gives better randomness., Hi Andor,

At some point, I was doing experiments to evaluate the client load-balancing across servers.

In these experiments I was running thousands of clients on the same host. I don't really remember,

but this must have been needed to improve load balance. You can do an experiment - spawn thousands

of threads in a test function at the same time and see if there are some seeds that are more frequent then others.

If this shows that Random() is sufficient, lets use it.

Same reason for tests (besides being deterministic, which is also a reason) - the test is doing exactly that - spawns

tons of clients at the same time, so if I remember correctly it didn't work using Random(). But - you're welcome to test

it and see.

 

Alex 

 , Got that, thanks for the detail explanation.

I'll give it a try., As you are tackling this issue, it would be nice to evaluate the use of ThreadLocalRandom ( [https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ThreadLocalRandom.html] ) instead of Random, if possible. It's been available since JDK7 and offers less contention and overhead., Are you still working on this [~mfenes]? 
I can take this over and have a look., The options mentioned in this ticket (and basically these are the only options in the JDK):
- call Random() -> yes, since java 7, it uses this(seedUniquifier() ^ System.nanoTime()); - This should give randomly distributed  uncorrelated seeds even after subsequent initializations and across different threads.
- The currently used "new Random(System.currentTimeMillis() ^ this.hashCode());" - basically yields the same results as the Random() call
- ThreadLocalRandom - it has a Random instance per thread - so basically safeguards against multiple threads using the same Random instance, which we already making sure to use different instances. (Otherwise System.currentTimeMillis() ^ this.hashCode() would be useless as well). One downside is you cannot control the initial seed. But I don't think that's a problem.

Thinking about it, using new Random() with System.currentTimeMillis() does look like it is much more correlated then just calling Random(). 

We could also change it to ThreadLocalRandom if needed, but I just don't see the advantages this would bring (other then it would be more "fail-safe" in terms of future refactor / modification - which might be a valid reason to still go with the changes).

I will do some tests with changing the mentioned calls to Random() and I will post my results., [~phunt] what do you think? - using just new Random() everywhere except  in StaticHostProvider where we can keep new Random(System.currentTimeMillis() ^ this.hashCode());, Hi [~nkalmar], I raised the possibility of using _ThreadLocalRandom_, so my two cents: we can call _Random()_ (option 1), imo. _ThreadLocalRandom_ advantage is avoiding thread contention and overhead of sharing a global math.Random among many threads, but I don't think this is a issue with current ZK codebase., Hi [~eribeiro], thanks for the update.
Yes, it looks like we create a new Random instance every time anyway.
The only thing that bothers mi a bit personally is why we use " new Random(System.nanoTime())" why not empty constructor instead, it is more random as it gets a different seed even if called at the same time.
So this is the only thing I would change. Perheps also the session generation of new Random(sessionId ^ superSecret), in the comments, superSecret is supposed to be used only for password generation., +1 overall.  GitHub Pull Request  Build
      

    +1 @author.  The patch does not contain any @author tags.

    +0 tests included.  The patch appears to be a documentation patch that doesn't require tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 3.0.1) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/2114//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/2114//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/2114//console

This message is automatically generated.]