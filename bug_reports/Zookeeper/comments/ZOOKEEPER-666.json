[Yes, the subclassing issue in particular is nasty. We've fixed a number of these in the server
implementation already (not all iirc). In this case I'm not sure if we can do it in 3.3.0 though. It's too 
near term and the solution for this is going to be disruptive - the main public client interface needs
to be changed.

I suspect that we should 

1) deprecate the existing constructors
2a) either add a new empty constructor and a "connect(connect, watcher,timeout)
or 
2b) add a new empty constructor, methods; setconnect/setwatcher(have alredy)/settimeout, and a connect() string
(or perhaps connect(connectstring), etc...) One nice thing about this rather than 2a is that we can add new
parameters in future w/o changing/overloading the connect(param1,param2,param3,...) method

existing users can migrate as they like (old methods deprecated)
, Indeed, breaking backward-compatibility would be a big issue.

One drawback I see with 2b is that the API would seem to allow calling those methods after connect() has been called. What would the semantics be in that scenario?

How about a builder-based approach instead? E.g,

{noformat}
ZooKeeper client = ZooKeeper.builder()
                            .timeout(...)
                            .watcher(...)
                            .connect(connectString);
{noformat}

This would make it possible to add future parameters without breaking the public API, while preserving immutability semantics for initialization parameters., Martin, yes, that is a good idea. (you picked a good jira ID number for this one btw ;-) )

So to subclass ZooKeeper the user would just create their own builder? Or subclass builder and cast if necessary?

Is the builder approach "container friendly"? I haven't looked at spring and such (di/ioc) lately but my setter idea was along the
lines of allowing easy integration with those types of frameworks. I guess builder is essentially just another class with setter methods?
I'd really like to get some kind of container support tested out and in particular setup as a unit test in ZK so we can "officially"
support, perhaps we should do that as part of this change., ZOOKEEPER-837 removes the ZooKeeper reference from ClientCnxn and would therefor also solve this issue.]