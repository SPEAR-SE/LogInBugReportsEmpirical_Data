[-1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12820621/ZOOKEEPER-2491.patch
  against trunk revision 1754188.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    -1 patch.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3296//console

This message is automatically generated., [~spooky000] I've seen a couple of your patches can't be applied. It might because your patches were not generated properly. Please checkout https://cwiki.apache.org/confluence/display/ZOOKEEPER/HowToContribute for reference on generating a patch (in particular if you are using git make sure use '--no-prefix' option)., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12820844/ZOOKEEPER-2491.patch
  against trunk revision 1754188.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3303//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3303//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3303//console

This message is automatically generated., LGTM.
One suggestion, we might want to emulate snprintf() instead of using _snprintf() for MSVC prior to 15, because _snprintf() doesn't zero-terminate the buffer. Something like what libuv is doing:
https://github.com/libuv/libuv/blob/9e7568ea7b2b9375be6563c9fb5e795c9753287e/test/task.h#L187-L209, copied from libuv., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12820930/ZOOKEEPER-2491.patch
  against trunk revision 1754188.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3307//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3307//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3307//console

This message is automatically generated., I think "-1 core tests" is not releated my patch.
, bq. copied from libuv.

If this code is a straight-up copy of libuv code, then we are required to acknowledge that project and its license in our NOTICE.txt file.

https://github.com/libuv/libuv/blob/v1.x/LICENSE, [~cnauroth] - lubuv is not an apache license. From what I read in the linked file

"The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software."

perhaps we can just have a separate source file (.h) that includes that comment section in it's entirety?

fwiw also says "substantial portions of the Software", does a single utility method meet that bar? (regardless I'm hoping we can use the approach I suggest earlier in this comment), Cancelling while the IP issue is being discussed. Some change will be necessary to address that., I think we can possibly review and commit the version 2 patch (timestamp 28/Jul/16). This JIRA is essentially fix a regression caused by new version of MSVC and simulating snprintf is not a regression as the problem was there before... so we can probably use another JIRA to track that issue? On that topic, instead of making a complete copy of code from libUV we could write our own safer version of snprintf for lower version of MSVC.. would that be a better approach to get into the license issue?, bq. better approach to get into the license issue

I think either is fine as long as we follow the license, if we go that way., bq. perhaps we can just have a separate source file (.h) that includes that comment section in it's entirety?

This might be a good idea anyway for code organization, but I don't think it removes the requirement to update the NOTICE file.

bq. fwiw also says "substantial portions of the Software", does a single utility method meet that bar?

In other projects, we have followed this rule even for a small utility method like this.

bq. On that topic, instead of making a complete copy of code from libUV we could write our own safer version of snprintf for lower version of MSVC.. would that be a better approach to get into the license issue?

This is my preferred option.  It's a small enough amount of code that I'd favor writing our own version of it.

I should qualify this by saying that I don't consider myself an expert on licensing requirements.  I'm speaking from the viewpoint of past experience on other projects, not authoritative interpretation of the rules.  If anyone would prefer to dig deeper into it, there is more information here:

http://www.apache.org/dev/licensing-howto.html

If there are still points of confusion, then general@incubator.apache.org is a good place to get advice on licensing issues., [~hanm] I believe we can close this issue; I fixed it in my patch that's upstream now for 3.5+, [~andschwa] 
There are two issues described in this JIRA actually - one is MSVC 15 finally implemented C99 complaint snprintf so we don't need define that in header, this is fixed by your patch. The other is how to deal with the fact that prior to MSVC 15 _snprintf does not add null terminator at end of buffer, and this discussion somehow got involved with legal / license issue. I think it's OK to close the JIRA, and let its scope only covers what the JIRA title describes. For the _snprintf MSVC complaint issue, if it turns out to be an issue we can create a separate JIRA to track it.]