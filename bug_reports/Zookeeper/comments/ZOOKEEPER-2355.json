[At step 6, while creating the ephemeral node /e1  following error is observed at faulted node B but after adjusting the parent c version it continues and user does not get any error
{code}
2016-01-18 20:17:47,928 [myid:3] - DEBUG [CommitProcWorkThread-1:DataTree@961] - Failed: 72279218071011328,5,8589934597,1453128465886,1
:'/e1,,v{s{31,s{'world,'anyone}}},T,2

org.apache.zookeeper.KeeperException$NodeExistsException: KeeperErrorCode = NodeExists
	at org.apache.zookeeper.server.DataTree.createNode(DataTree.java:514)
	at org.apache.zookeeper.server.DataTree.processTxn(DataTree.java:827)
	at org.apache.zookeeper.server.ZKDatabase.processTxn(ZKDatabase.java:401)
	at org.apache.zookeeper.server.ZooKeeperServer.processTxn(ZooKeeperServer.java:1216)
	at org.apache.zookeeper.server.ZooKeeperServer.processTxn(ZooKeeperServer.java:1207)
	at org.apache.zookeeper.server.FinalRequestProcessor.processRequest(FinalRequestProcessor.java:109)
	at org.apache.zookeeper.server.quorum.CommitProcessor$CommitWorkRequest.doWork(CommitProcessor.java:296)
	at org.apache.zookeeper.server.WorkerService$ScheduledWorkRequest.run(WorkerService.java:162)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
2016-01-18 20:17:50,378 [myid:3] - DEBUG [CommitProcWorkThread-1:DataTree@1003] - Adjusting parent cversion for Txn: 1 path:/e1 err: -110
{code}, In think following points to be analysed to figure out the root cause,
# When faulted server B joins the quorum after recovery, why still it has the extra node /e1, why not synchronized with the current leader.
# Why only C version updated, why not the other information like ephemeral owner etc.

Submitting a test patch ZOOKEEPER-2355-01.patch for reproducing the scenario., test patch, I wonder if this is the same issue described in https://issues.apache.org/jira/browse/ZOOKEEPER-2145, Thanks for the patch [~arshad.mohammad] - reviewing it now.

[~fpj], [~rakeshr]: if this bug is confirmed, do we want to include in 3.4.8? (probably yes), Well, the bug is apparently confirmed (I read the test case, it makes sense to me). Unclear on what the fix is. I'd definitely like to have this for 3.4.8. 

[~arshad.mohammad]: a few nits:

* there's a typo in the filename for EphemralNodeNotDeletedTest.java 
* there are few extra (unneeded) tabs in QuorumPeerTestBase.java (you can see them with git diff)

Other than that, the test looks great - thanks! , Very good catch [~arshad.mohammad]! My two cents*:

Other typo:

{code}
Stat firstEphemralNode = new Stat();
{code}

PS: have been absent for a loooong time, coming back now, cheers! :), oops, in fact, "{{ephemral}}" is repeated across the text., Also, if the reason to add a {{QuorumPeer#getZkDb()}} is to use it in {{CustomPeer#makeFollower}} then **I** would advise to make this method **protected** instead of **public** as {{CustomPeer}} extends {{QuorumPeer}}. Making it public is too much exposition (imho) just to make a test run. A protected method is more conservative (again, imho)., [~arshad.mohammad] could you have a look at the txn logs (using log formatter) and see what is in there in the situation you describe above?, Hi [~fpj], I checked the transaction log and snapshot, both do not have entry for the failed transaction.
# Because actual transaction proposal failed, it is expected that failed transaction will not be in the transaction log
# While receiving the diff from leader, again proposal got failed, that is why no entry in snapshot also., The lastProcessedZxid is getting updated even proposal failed. So next time follower sends this updated zxid and getting blank DIFF. This is the root cause why sync is not happening. 

Don't know why lastProcessedZxid is updated here [Learner.java#L398|https://github.com/arshadmohammad/zookeeper/blob/trunk/src/java/main/org/apache/zookeeper/server/quorum/Learner.java#L398].
as the data received still not presisted in case of DIFF.

[~fpj], what is your thought on this, Per discussion in the mailing list, lets punt this to 3.4.9.

cc: [~fpj], Thanks [~rgs], [~eribeiro] for your review comments on test code.
Submitting the solution. [~fpj] please have a look, -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12785227/ZOOKEEPER-2355-02.patch
  against trunk revision 1726354.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 5 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3023//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3023//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3023//console

This message is automatically generated., [~arshad.mohammad]:

I'm looking into fixing this since I'm seeing the same issue. I understand the reasoning behind your fix, but it seems to be causing some other tests to fail consistently when applied to trunk. The Jenkins build is too old to view, but I'm guessing it failed for similar reasons. Were you seeing these failures and did you look at what was happening? I've only scratched the surface with investigating this bug and your patch, but I wanted to check to avoid repeating any work you had already done. I'll keep investigating to see if I can find a solution.

Failures listed below:

Zab1_0Test:
{noformat}
Testcase: testNormalFollowerRun took 4.198 sec
    FAILED
expected:<4294967297> but was:<4294967296>
junit.framework.AssertionFailedError: expected:<4294967297> but was:<4294967296>
    at org.apache.zookeeper.server.quorum.Zab1_0Test$4.converseWithFollower(Zab1_0Test.java:705)
    at org.apache.zookeeper.server.quorum.Zab1_0Test.testFollowerConversation(Zab1_0Test.java:511)
    at org.apache.zookeeper.server.quorum.Zab1_0Test.testNormalFollowerRun(Zab1_0Test.java:643)
    at org.apache.zookeeper.JUnit4ZKTestRunner$LoggedInvokeMethod.evaluate(JUnit4ZKTestRunner.java:79)

Testcase: testNormalFollowerRunWithDiff took 4.073 sec
    FAILED
expected:<4294967298> but was:<4294967296>
junit.framework.AssertionFailedError: expected:<4294967298> but was:<4294967296>
    at org.apache.zookeeper.server.quorum.Zab1_0Test$5.converseWithFollower(Zab1_0Test.java:847)
    at org.apache.zookeeper.server.quorum.Zab1_0Test.testFollowerConversation(Zab1_0Test.java:511)
    at org.apache.zookeeper.server.quorum.Zab1_0Test.testNormalFollowerRunWithDiff(Zab1_0Test.java:771)
    at org.apache.zookeeper.JUnit4ZKTestRunner$LoggedInvokeMethod.evaluate(JUnit4ZKTestRunner.java:79)

Testcase: testNormalObserverRun took 4.054 sec
    FAILED
expected:<4294967298> but was:<4294967296>
junit.framework.AssertionFailedError: expected:<4294967298> but was:<4294967296>
    at org.apache.zookeeper.server.quorum.Zab1_0Test$8.converseWithObserver(Zab1_0Test.java:1072)
    at org.apache.zookeeper.server.quorum.Zab1_0Test.testObserverConversation(Zab1_0Test.java:562)
    at org.apache.zookeeper.server.quorum.Zab1_0Test.testNormalObserverRun(Zab1_0Test.java:997)
    at org.apache.zookeeper.JUnit4ZKTestRunner$LoggedInvokeMethod.evaluate(JUnit4ZKTestRunner.java:79)

{noformat}

ZxidRolloverTest:
{noformat}
Testcase: testRolloverThenFollowerRestart took 23.677 sec
    Caused an ERROR
KeeperErrorCode = ConnectionLoss for /foofoofoo-connected
org.apache.zookeeper.KeeperException$ConnectionLossException: KeeperErrorCode = ConnectionLoss for /foofoofoo-connected
    at org.apache.zookeeper.KeeperException.create(KeeperException.java:99)
    at org.apache.zookeeper.KeeperException.create(KeeperException.java:51)
    at org.apache.zookeeper.ZooKeeper.exists(ZooKeeper.java:1846)
    at org.apache.zookeeper.ZooKeeper.exists(ZooKeeper.java:1874)
    at org.apache.zookeeper.server.ZxidRolloverTest.checkClientConnected(ZxidRolloverTest.java:119)
    at org.apache.zookeeper.server.ZxidRolloverTest.checkClientsConnected(ZxidRolloverTest.java:90)
    at org.apache.zookeeper.server.ZxidRolloverTest.start(ZxidRolloverTest.java:165)
    at org.apache.zookeeper.server.ZxidRolloverTest.testRolloverThenFollowerRestart(ZxidRolloverTest.java:345)
    at org.apache.zookeeper.JUnit4ZKTestRunner$LoggedInvokeMethod.evaluate(JUnit4ZKTestRunner.java:79)
{noformat}

WatchEventWhenAutoResetTest:
{noformat}
Testcase: testNodeChildrenChanged took 0.001 sec
    Caused an ERROR
Timeout occurred. Please note the time in the report does not reflect the time until the timeout.
junit.framework.AssertionFailedError: Timeout occurred. Please note the time in the report does not reflect the time until the timeout.
{noformat}, -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12785227/ZOOKEEPER-2355-02.patch
  against trunk revision 1746511.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 5 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3181//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3181//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3181//console

This message is automatically generated., I've been playing with some variations on the proposed fix and trying to reason about what's actually going wrong. When syncing with the leader, of the three leader responses (DIFF, SNAP, TRUNC), I think there's only an issue with setting the last processed ZXID the way it's currently done in the DIFF case. In the SNAP and TRUNC cases, we've already deserialized the snapshot or truncated the log by the time setLastProcessedZxid is called. In the DIFF case, the reason it's incorrect is because we're setting the last processed ZXID as if we've already committed all the transactions we're about to receive, so a failure before that actually happens leaves us in an inconsistent state.

The logic in the patch of moving the call to setLastProcessedZxid to when the follower receives UPTODATE or NEWLEADER makes sense to me, but this isn't consistent with the behavior expected by some of the other unit tests.

I don't think setLastProcessedZxid needs to be explicitly called at all when the follower receives a DIFF message because we will update the last processed ZXID as we commit transactions received from the leader anyway. I do think it needs to be preserved as-is for SNAP and TRUNC to keep the currently expected behavior. Whether there are other problematic scenarios associated with how SNAP and TRUNC are processed can be investigated separately since there may still be cases where the last processed ZXID and the actual transaction log state are out of sync.

I'm submitting a modified version of the patch provided by [~arshad.mohammad]. The patch includes his original unit test which still fails against trunk and passes with the patch, but the changes to Learner.java are the slightly different ones that I'm proposing.

(I do have two unit tests failing locally that are also failing against trunk, so I think it's an unrelated issue with my environment that I'll need to look into when I get time. If that turns out to not be the case based on the Jenkins build, I'll investigate.), Martin is unable to attach patches to Jiras for some reason. So I'm going to help him out and cancel the existing patch and upload a new patch., Updated patch with Martin's proposed solution., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12809019/ZOOKEEPER-2355-03.patch
  against trunk revision 1747408.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 6 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3185//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3185//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3185//console

This message is automatically generated., [~makuchta] - I'll leave you to investigate the failure reported above., A search for the new test failures shows them as known flaky tests (ZOOKEEPER-1806, ZOOKEEPER-1807, ZOOKEEPER-2137), and they seem far removed from anything this patch touches. I haven't seen them at all locally.

, Do we need a patch for 3.5 and trunk as well, or is it an issue only in the 3.4 branch?, I had a look at the latest patch and the solution sounds sensible. The patch doesn't apply to the 3.4, which is the one that this issue to be fixed in. I believe the issue exists in both 3.5 and trunk as well.

I also liked the way the error was injected here. It'd be nice to have a more general and structured way of doing it so that we could use in other scenarios too. It is not a blocker for this patch, but really one of those "nice to have" features for my todo list., Thanks [~arshad.mohammad], [~makuchta] for working on this issue. The patch looks overall good. I've few comments:

# Good test case. I could see an existing {{class MockTestQPMain}} in [RaceConditionTest.java|https://github.com/apache/zookeeper/blob/trunk/src/java/test/org/apache/zookeeper/server/quorum/RaceConditionTest.java#L235], can we reuse the same. One idea is to move MockTestQPMain class to a separate java file.
# Can we include {{qp.getZxid()}} in the below log message.
{code}
LOG.info("Getting a snapshot from leader");
{code}
, One small nit, these two methods:

{code}
+    private QuorumPeer getLeader(MainThread[] mt) {
+        for (int i = mt.length - 1; i >= 0; i--) {
+            QuorumPeer quorumPeer = mt[i].getQuorumPeer();
+            if (null != quorumPeer && ServerState.LEADING == quorumPeer.getPeerState()) {
+                return quorumPeer;
+            }
+        }
+        return null;
+    }
+
+    private QuorumPeer getFollower(MainThread[] mt) {
+        for (int i = mt.length - 1; i >= 0; i--) {
+            QuorumPeer quorumPeer = mt[i].getQuorumPeer();
+            if (null != quorumPeer && ServerState.FOLLOWING == quorumPeer.getPeerState()) {
+                return quorumPeer;
+            }
+        }
+        return null;
+    }
{code}

Can probably be reduced to one more general method:

{code}
+    private QuorumPeer getByServerState(MainThread[] mt, ServerState state) {
+        for (int i = mt.length - 1; i >= 0; i--) {
+            QuorumPeer quorumPeer = mt[i].getQuorumPeer();
+            if (null != quorumPeer && state == quorumPeer.getPeerState()) {
+                return quorumPeer;
+            }
+        }
+        return null;
+    }
{code}

, I am moving this out to 3.4.10 for now. Please feel free to discuss the target version, Thanks!, We've now experienced this at Elasticsearch. This is a Critical issue that should be released sooner rather than later., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12809019/ZOOKEEPER-2355-03.patch
  against trunk revision 1757584.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 6 new or modified tests.

    -1 patch.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3384//console

This message is automatically generated., ping [~arshad.mohammad] [~makuchta]., # Submited ZOOKEEPER-2355-04.patch . This patch is for branch-3.5 and trunk, After commit to  branch-3.5 and trunk i will prepare patch for branch-3.4
# Handled comments by [~rakeshr], I got better way to inject QuorumPeer. Modified RaceConditionTest.java also. Now I think there is no need to move the mock  classed to different class as not much code duplication
# Handled comments by [~rgs]
# Reanamed test class and test method and other small improvments, +1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12826909/ZOOKEEPER-2355-04.patch
  against trunk revision 1757584.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 5 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3386//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3386//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3386//console

This message is automatically generated., This is a very serious bug for us at Elasticsearch. Is there any way to get an emergency release out for this?, I agree this is an important bug. Perhaps we could do thorough reviews and push the patch in so that make this fix ready for the next release, hopefully will include this in 3.4.10 version., FYI - We're on 3.5.x so that's needed as well, sure, while committing will target branches {{3.4}}, {{3.5}} and trunk., [~arshad.mohammad], Can you check 2nd point in the [review comment|https://issues.apache.org/jira/browse/ZOOKEEPER-2355?focusedCommentId=15399696&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-15399696]. I think logging {{last processed zxid}} would help in debugging, right?, Thanks [~arshad.mohammad] for the patch. Just few comments, apart from this +1 from me.
# Can you look at the 2nd point in [review comment|https://issues.apache.org/jira/browse/ZOOKEEPER-2355?focusedCommentId=15399696&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-15399696]. I think logging {{last processed zxid}} would help in debugging, right?
# Move {{mt = new MainThread}} this to the object reference like, {code}private MainThread[] mt = new MainThread[SERVER_COUNT];{code}
Then make the teardown section like, 
{code}
    @After
    public void tearDown() {
        // stop all severs
        for (int i = 0; i < mt.length; i++) {
            try {
                if (mt[i] != null) {
                    mt[i].shutdown();
                }
            } catch (InterruptedException e) {
                LOG.warn("Quorum Peer interrupted while shutting it down", e);
            }
        }
    }
{code}
# Close {{followerZK.close();}} session at the end., Thanks [~rakeshr],
Addressed all the comments, submitted new patch., +1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12833189/ZOOKEEPER-2355-05.patch
  against trunk revision f78061aafb19b102c37cb6d744ec6258d5f5b66e.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 5 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3489//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3489//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3489//console

This message is automatically generated., +1, latest patch looks good to me.

ping  [~fpj], [~rgs], I will wait to see your votes before commits. Thanks!, Hi [~arshad.mohammad],  it is better to open a pull request for wider reviews. Could you make the PR, please?. Since this is a critical issue, it would be good to get one more +1 from a committer., GitHub user arshadmohammad opened a pull request:

    https://github.com/apache/zookeeper/pull/112

    ZOOKEEPER-2355:Ephemeral node is never deleted if follower fails while reading the proposal packet

    ZOOKEEPER-2355:Ephemeral node is never deleted if follower fails while reading the proposal packet

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/arshadmohammad/zookeeper ZOOKEEPER-2355

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/zookeeper/pull/112.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #112
    
----
commit e8b2b59758c755afedfec8d6ab87d3f7ca0a0ffe
Author: arshadmohammad <arshad.mohammad.k@gmail.com>
Date:   2016-11-21T18:29:33Z

    Ephemeral node is never deleted if follower fails while reading the proposal packet

----
, -1 overall.  GitHub Pull Request  Build
      

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 5 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    -1 findbugs.  The patch appears to introduce 20 new Findbugs (version 3.0.1) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/83//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/83//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/83//console

This message is automatically generated., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12833189/ZOOKEEPER-2355-05.patch
  against trunk revision 8771ffdaacb87126a485ae740558f6a288ab980b.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 5 new or modified tests.

    -1 patch.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3570//console

This message is automatically generated., we saw this bug in 3.4.10, is there any schedule of fixing it in branch 3.4 ?, Can this bug be fixed in 3.4.11??? As I know the consistency is the most important property of ZooKeeper, so I think this bug has higher priority than many others. 
Hope it can be fixed soon., bq. Can this bug be fixed in 3.4.11???
Thanks for the interest [~fjcyue], [~jiangjiafu], will include this in 3.4.11, if there is no objection from anyone. Since the priority is critical, I'd like to see one more +1 from a committer.

Hi [~hanm], do you have some time to review this pull request and give your vote. Thanks!, It does look like a good candidate to be resolved soon. There is a patch available, but it seems to be stale. I also have had a look at it some time back, so I need to refresh my view.

In any case, help is appreciated., [~fpj], I didn't see your comment, looks like we both commented at the same time:) Thanks for pitches in.

Yes, the [PR_112|https://github.com/apache/zookeeper/pull/112] has to be rebased. [~arshad.mohammad], would you mind rebasing the pull req., +1 overall.  GitHub Pull Request  Build
      

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 2 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 3.0.1) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/782//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/782//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/782//console

This message is automatically generated., Github user hanm commented on a diff in the pull request:

    https://github.com/apache/zookeeper/pull/112#discussion_r121793647
  
    --- Diff: src/java/main/org/apache/zookeeper/server/quorum/Learner.java ---
    @@ -390,6 +391,7 @@ else if (qp.getType() == Leader.SNAP) {
                                 + Long.toHexString(qp.getZxid()));
                         System.exit(13);
                     }
    +                zk.getZKDatabase().setlastProcessedZxid(qp.getZxid());
    --- End diff --
    
    The fix looks good to me.
    
    I think we should also set the zxid extracted from the current proposal packet after each proposal is [committed](https://github.com/arshadmohammad/zookeeper/blob/master/src/java/main/org/apache/zookeeper/server/quorum/Learner.java#L460). Otherwise the follower will have a lagged view of the committed transactions, because with the fix in this patch, we will never do setlastProcessedZxid during a DIFF sync. For example imagine a case like this:
    * Follower has its latest zxid with value a before DIFF SYNC happens.
    * Leader send over proposals with zxids value b, c, d. 
    * Follower received and applied proposals b and c. Before follower had a chance to get hands on d, network partition happens.
    * Now partition healed, follower will do a DIFF think again. Because the zk database would not be reloaded from logs (it's already initialized), follower has a skewed view of the world - it thinks it only has tnx a, but in fact it has a, b, and c. So rather asking b, c, and d, the follower could just ask d.
    
    Anyway I think it is an optimization that might worth doing - it is not functional critical because the idempotent nature of applying transactions.
, Github user hanm commented on a diff in the pull request:

    https://github.com/apache/zookeeper/pull/112#discussion_r121795494
  
    --- Diff: src/java/test/org/apache/zookeeper/server/quorum/EphemeralNodeDeletionTest.java ---
    @@ -0,0 +1,222 @@
    +/**
    + * Licensed to the Apache Software Foundation (ASF) under one
    + * or more contributor license agreements.  See the NOTICE file
    + * distributed with this work for additional information
    + * regarding copyright ownership.  The ASF licenses this file
    + * to you under the Apache License, Version 2.0 (the
    + * "License"); you may not use this file except in compliance
    + * with the License.  You may obtain a copy of the License at
    + *
    + *     http://www.apache.org/licenses/LICENSE-2.0
    + *
    + * Unless required by applicable law or agreed to in writing, software
    + * distributed under the License is distributed on an "AS IS" BASIS,
    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    + * See the License for the specific language governing permissions and
    + * limitations under the License.
    + */
    +package org.apache.zookeeper.server.quorum;
    +
    +import static org.apache.zookeeper.test.ClientBase.CONNECTION_TIMEOUT;
    +import static org.junit.Assert.assertEquals;
    +import static org.junit.Assert.assertNotNull;
    +import static org.junit.Assert.assertNull;
    +
    +import java.io.IOException;
    +import java.net.SocketTimeoutException;
    +
    +import org.apache.zookeeper.CreateMode;
    +import org.apache.zookeeper.PortAssignment;
    +import org.apache.zookeeper.ZooDefs.Ids;
    +import org.apache.zookeeper.ZooKeeper;
    +import org.apache.zookeeper.data.Stat;
    +import org.apache.zookeeper.server.persistence.FileTxnSnapLog;
    +import org.apache.zookeeper.server.quorum.QuorumPeer.ServerState;
    +import org.apache.zookeeper.test.ClientBase;
    +import org.apache.zookeeper.test.ClientBase.CountdownWatcher;
    +import org.junit.After;
    +import org.junit.Assert;
    +import org.junit.Test;
    +
    +public class EphemeralNodeDeletionTest extends QuorumPeerTestBase {
    +    private static int SERVER_COUNT = 3;
    +    private MainThread[] mt = new MainThread[SERVER_COUNT];
    +
    +    /**
    +     * Test case for https://issues.apache.org/jira/browse/ZOOKEEPER-2355.
    +     * ZooKeeper ephemeral node is never deleted if follower fail while reading
    +     * the proposal packet.
    +     */
    +
    +    @Test(timeout = 120000)
    +    public void testEphemeralNodeDeletion() throws Exception {
    +        final int clientPorts[] = new int[SERVER_COUNT];
    +        StringBuilder sb = new StringBuilder();
    +        String server;
    +
    +        for (int i = 0; i < SERVER_COUNT; i++) {
    +            clientPorts[i] = PortAssignment.unique();
    +            server = "server." + i + "=127.0.0.1:" + PortAssignment.unique()
    +                    + ":" + PortAssignment.unique() + ":participant;127.0.0.1:"
    +                    + clientPorts[i];
    +            sb.append(server + "\n");
    +        }
    +        String currentQuorumCfgSection = sb.toString();
    +        // start all the servers
    +        for (int i = 0; i < SERVER_COUNT; i++) {
    +            mt[i] = new MainThread(i, clientPorts[i], currentQuorumCfgSection,
    +                    false) {
    +                @Override
    +                public TestQPMain getTestQPMain() {
    +                    return new MockTestQPMain();
    +                }
    +            };
    +            mt[i].start();
    +        }
    +
    +        // ensure all servers started
    +        for (int i = 0; i < SERVER_COUNT; i++) {
    +            Assert.assertTrue("waiting for server " + i + " being up",
    +                    ClientBase.waitForServerUp("127.0.0.1:" + clientPorts[i],
    +                            CONNECTION_TIMEOUT));
    +        }
    +
    +        CountdownWatcher watch = new CountdownWatcher();
    +        ZooKeeper zk = new ZooKeeper("127.0.0.1:" + clientPorts[1],
    +                ClientBase.CONNECTION_TIMEOUT, watch);
    +        watch.waitForConnected(ClientBase.CONNECTION_TIMEOUT);
    +
    +        /**
    +         * now the problem scenario starts
    +         */
    +
    +        Stat firstEphemeralNode = new Stat();
    +
    +        // 1: create ephemeral node
    +        String nodePath = "/e1";
    +        zk.create(nodePath, "1".getBytes(), Ids.OPEN_ACL_UNSAFE,
    +                CreateMode.EPHEMERAL, firstEphemeralNode);
    +        assertEquals("Current session and ephemeral owner should be same",
    +                zk.getSessionId(), firstEphemeralNode.getEphemeralOwner());
    +
    +        // 2: inject network problem in one of the follower
    +        CustomQuorumPeer follower = (CustomQuorumPeer) getByServerState(mt,
    +                ServerState.FOLLOWING);
    +        follower.setInjectError(true);
    +
    +        // 3: close the session so that ephemeral node is deleted
    +        zk.close();
    +
    --- End diff --
    
    Yes the test case depends on these happened between starting of the partition (injected fault) and ending of the partition. The key invariant I see here is to make sure that during this period, the follower that currently disconnected with the quorum has gone through at least one leader election cycle and also have gone through at least one SYNC cycle. Otherwise the code path that this patch fixes will not be executed - i.e. there will be no errors during syncing the DIFF and everything will just work as expected. We need trigger at least one fault during the first DIFF sync cycle, and currently the test case is not doing this in a fine grained way and potentially due to timing issue we can get flaky behavior.
    
    Though, I am not sure how to precisely control this - I think it will be a nice improvement in test case to explicitly control the behavior as i just said, but this should not block this patch landed.
, Github user hanm commented on the issue:

    https://github.com/apache/zookeeper/pull/112
  
    lgtm overall, with one nit on a potential optimization we can do and one potential improvement on test case. 
, Just reviewed the patch, I think the key issue that this patch fixes is that each SYNC type should have transaction semantic around the {{setlastProcessedZxid}} - otherwise we might end up with inconsistent view when errors happen during SYNC phase. Previously TRNC and SNAP has transaction semantic W.R.T {{setlastProcessedZxid}} but DIFF does not. 

Patch looks good to me, though I am wondering what do you [~rakeshr], [~arshad.mohammad] [~fpj] think about the optimization I mentioned in the git PR. In addition I had a comment about test case which [~jiangjiafu] also observed similar issue but I don't think that is a blocker., Github user hanm commented on the issue:

    https://github.com/apache/zookeeper/pull/112
  
    If no objection I will commit this one soon given the interests and criticality of the fix.
, Github user rakeshadr commented on the issue:

    https://github.com/apache/zookeeper/pull/112
  
    @hanm, Thanks for the heads up. I will give my feedback soon, in a day or two.
, Github user rakeshadr commented on a diff in the pull request:

    https://github.com/apache/zookeeper/pull/112#discussion_r125264767
  
    --- Diff: src/java/main/org/apache/zookeeper/server/quorum/Learner.java ---
    @@ -390,6 +391,7 @@ else if (qp.getType() == Leader.SNAP) {
                                 + Long.toHexString(qp.getZxid()));
                         System.exit(13);
                     }
    +                zk.getZKDatabase().setlastProcessedZxid(qp.getZxid());
    --- End diff --
    
    @hanm, Do we have any issue created to handle this case, if not please create one for tracking this change. Thanks!
, Github user rakeshadr commented on the issue:

    https://github.com/apache/zookeeper/pull/112
  
    Thanks Michael for pushing this long standing issue.
    
    +1 from me, I'm OK to commit this patch after creating an issue for the code changes suggested previously.
, Github user hanm commented on a diff in the pull request:

    https://github.com/apache/zookeeper/pull/112#discussion_r125391857
  
    --- Diff: src/java/main/org/apache/zookeeper/server/quorum/Learner.java ---
    @@ -390,6 +391,7 @@ else if (qp.getType() == Leader.SNAP) {
                                 + Long.toHexString(qp.getZxid()));
                         System.exit(13);
                     }
    +                zk.getZKDatabase().setlastProcessedZxid(qp.getZxid());
    --- End diff --
    
    @rakeshadr Created https://issues.apache.org/jira/browse/ZOOKEEPER-2833 to avoid this gets lost.
, Github user hanm commented on the issue:

    https://github.com/apache/zookeeper/pull/112
  
    @rakeshadr Thanks for double check. Followed your suggestion created ZOOKEEPER-2833 tracking the optimization work. I am merging this now.
, Github user asfgit closed the pull request at:

    https://github.com/apache/zookeeper/pull/112
, Committed to master 69710181042a8c1f0461c1739b96171d88f2b126, 3.5: ca22b3db19371f6b0f5507b7dd80b283cddc7700.

Pending resolve JIRA after committing to branch-3.4 - the current pull request has merge conflicts., FAILURE: Integrated in Jenkins build ZooKeeper-trunk #3454 (See [https://builds.apache.org/job/ZooKeeper-trunk/3454/])
ZOOKEEPER-2355: Ephemeral node is never deleted if follower fails while (hanm: rev 69710181042a8c1f0461c1739b96171d88f2b126)
* (edit) src/java/main/org/apache/zookeeper/server/quorum/Learner.java
* (add) src/java/test/org/apache/zookeeper/server/quorum/EphemeralNodeDeletionTest.java
, GitHub user hanm opened a pull request:

    https://github.com/apache/zookeeper/pull/304

    ZOOKEEPER-2355: Ephemeral node is never deleted if follower fails while reading the proposal packet.

    This commit is a port of the commit ca22b3db19371f6b0f5507b7dd80b283cddc7700 from branch-3.5 to branch-3.4. Changes include a few interfaces that required by the test case. The test case itself is also updated so it works with 3.4 code base.
    
    @arshadmohammad @rakeshadr Could you please review this to close the loop of ZOOKEEPER-2355?

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/hanm/zookeeper ZOOKEEPER-2355

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/zookeeper/pull/304.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #304
    
----
commit 007e2b37f24907c03e4e28547756b91aea4f78d4
Author: Michael Han <hanm@apache.org>
Date:   2017-07-05T21:23:58Z

    ZOOKEEPER-2355: Ephemeral node is never deleted if follower fails while reading the proposal packet.
    
    This commit is a back port of the commit ca22b3db19371f6b0f5507b7dd80b283cddc7700 on branch-3.5. Changes include a few interfaces that required by the test case. The test case itself is also updated so it works with 3.4 code base.

----
, Github user asdf2014 commented on a diff in the pull request:

    https://github.com/apache/zookeeper/pull/304#discussion_r125798526
  
    --- Diff: src/java/test/org/apache/zookeeper/server/quorum/EphemeralNodeDeletionTest.java ---
    @@ -0,0 +1,219 @@
    +/**
    + * Licensed to the Apache Software Foundation (ASF) under one
    + * or more contributor license agreements.  See the NOTICE file
    + * distributed with this work for additional information
    + * regarding copyright ownership.  The ASF licenses this file
    + * to you under the Apache License, Version 2.0 (the
    + * "License"); you may not use this file except in compliance
    + * with the License.  You may obtain a copy of the License at
    + *
    + *     http://www.apache.org/licenses/LICENSE-2.0
    + *
    + * Unless required by applicable law or agreed to in writing, software
    + * distributed under the License is distributed on an "AS IS" BASIS,
    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    + * See the License for the specific language governing permissions and
    + * limitations under the License.
    + */
    +package org.apache.zookeeper.server.quorum;
    +
    +import static org.apache.zookeeper.test.ClientBase.CONNECTION_TIMEOUT;
    +import static org.junit.Assert.assertNotNull;
    +import static org.junit.Assert.assertNull;
    +
    +import java.io.IOException;
    +import java.net.SocketTimeoutException;
    +
    +import org.apache.zookeeper.CreateMode;
    +import org.apache.zookeeper.PortAssignment;
    +import org.apache.zookeeper.ZooDefs.Ids;
    +import org.apache.zookeeper.ZooKeeper;
    +import org.apache.zookeeper.data.Stat;
    +import org.apache.zookeeper.server.persistence.FileTxnSnapLog;
    +import org.apache.zookeeper.server.quorum.QuorumPeer.ServerState;
    +import org.apache.zookeeper.test.ClientBase;
    +import org.apache.zookeeper.test.ClientBase.CountdownWatcher;
    +import org.junit.After;
    +import org.junit.Assert;
    +import org.junit.Test;
    +
    +import javax.security.sasl.SaslException;
    +
    +public class EphemeralNodeDeletionTest extends QuorumPeerTestBase {
    +    private static int SERVER_COUNT = 3;
    +    private MainThread[] mt = new MainThread[SERVER_COUNT];
    +
    +    /**
    +     * Test case for https://issues.apache.org/jira/browse/ZOOKEEPER-2355.
    +     * ZooKeeper ephemeral node is never deleted if follower fail while reading
    +     * the proposal packet.
    +     */
    +
    +    @Test(timeout = 120000)
    +    public void testEphemeralNodeDeletion() throws Exception {
    +        final int clientPorts[] = new int[SERVER_COUNT];
    +        StringBuilder sb = new StringBuilder();
    +        String server;
    +
    +        for (int i = 0; i < SERVER_COUNT; i++) {
    +            clientPorts[i] = PortAssignment.unique();
    +            server = "server." + i + "=127.0.0.1:" + PortAssignment.unique()
    +                    + ":" + PortAssignment.unique();
    +            sb.append(server + "\n");
    --- End diff --
    
    Maybe use the following code style will be better.
    ```java
    sb.append(server).append("\n");
    ```
, Github user asdf2014 commented on a diff in the pull request:

    https://github.com/apache/zookeeper/pull/304#discussion_r125798689
  
    --- Diff: src/java/test/org/apache/zookeeper/server/quorum/EphemeralNodeDeletionTest.java ---
    @@ -0,0 +1,219 @@
    +/**
    + * Licensed to the Apache Software Foundation (ASF) under one
    + * or more contributor license agreements.  See the NOTICE file
    + * distributed with this work for additional information
    + * regarding copyright ownership.  The ASF licenses this file
    + * to you under the Apache License, Version 2.0 (the
    + * "License"); you may not use this file except in compliance
    + * with the License.  You may obtain a copy of the License at
    + *
    + *     http://www.apache.org/licenses/LICENSE-2.0
    + *
    + * Unless required by applicable law or agreed to in writing, software
    + * distributed under the License is distributed on an "AS IS" BASIS,
    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    + * See the License for the specific language governing permissions and
    + * limitations under the License.
    + */
    +package org.apache.zookeeper.server.quorum;
    +
    +import static org.apache.zookeeper.test.ClientBase.CONNECTION_TIMEOUT;
    +import static org.junit.Assert.assertNotNull;
    +import static org.junit.Assert.assertNull;
    +
    +import java.io.IOException;
    +import java.net.SocketTimeoutException;
    +
    +import org.apache.zookeeper.CreateMode;
    +import org.apache.zookeeper.PortAssignment;
    +import org.apache.zookeeper.ZooDefs.Ids;
    +import org.apache.zookeeper.ZooKeeper;
    +import org.apache.zookeeper.data.Stat;
    +import org.apache.zookeeper.server.persistence.FileTxnSnapLog;
    +import org.apache.zookeeper.server.quorum.QuorumPeer.ServerState;
    +import org.apache.zookeeper.test.ClientBase;
    +import org.apache.zookeeper.test.ClientBase.CountdownWatcher;
    +import org.junit.After;
    +import org.junit.Assert;
    +import org.junit.Test;
    +
    +import javax.security.sasl.SaslException;
    +
    +public class EphemeralNodeDeletionTest extends QuorumPeerTestBase {
    +    private static int SERVER_COUNT = 3;
    +    private MainThread[] mt = new MainThread[SERVER_COUNT];
    +
    +    /**
    +     * Test case for https://issues.apache.org/jira/browse/ZOOKEEPER-2355.
    +     * ZooKeeper ephemeral node is never deleted if follower fail while reading
    +     * the proposal packet.
    +     */
    +
    +    @Test(timeout = 120000)
    +    public void testEphemeralNodeDeletion() throws Exception {
    +        final int clientPorts[] = new int[SERVER_COUNT];
    +        StringBuilder sb = new StringBuilder();
    +        String server;
    +
    +        for (int i = 0; i < SERVER_COUNT; i++) {
    +            clientPorts[i] = PortAssignment.unique();
    +            server = "server." + i + "=127.0.0.1:" + PortAssignment.unique()
    +                    + ":" + PortAssignment.unique();
    +            sb.append(server + "\n");
    +        }
    +        String currentQuorumCfgSection = sb.toString();
    +        System.out.println(currentQuorumCfgSection);
    +        // start all the servers
    +        for (int i = 0; i < SERVER_COUNT; i++) {
    +            mt[i] = new MainThread(i, clientPorts[i], currentQuorumCfgSection) {
    +                @Override
    +                public TestQPMain getTestQPMain() {
    +                    return new MockTestQPMain();
    +                }
    +            };
    +            mt[i].start();
    +        }
    +
    +        // ensure all servers started
    +        for (int i = 0; i < SERVER_COUNT; i++) {
    +            Assert.assertTrue("waiting for server " + i + " being up",
    +                    ClientBase.waitForServerUp("127.0.0.1:" + clientPorts[i],
    +                            CONNECTION_TIMEOUT));
    +        }
    +
    +        CountdownWatcher watch = new CountdownWatcher();
    +        ZooKeeper zk = new ZooKeeper("127.0.0.1:" + clientPorts[1],
    +                ClientBase.CONNECTION_TIMEOUT, watch);
    +        watch.waitForConnected(ClientBase.CONNECTION_TIMEOUT);
    +
    +        /**
    +         * now the problem scenario starts
    +         */
    +
    +        // 1: create ephemeral node
    +        String nodePath = "/e1";
    +        zk.create(nodePath, "1".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);
    +
    +        // 2: inject network problem in one of the follower
    +        CustomQuorumPeer follower = (CustomQuorumPeer) getByServerState(mt,
    +                ServerState.FOLLOWING);
    +        follower.setInjectError(true);
    +
    +        // 3: close the session so that ephemeral node is deleted
    +        zk.close();
    +
    +        // remove the error
    +        follower.setInjectError(false);
    +
    +        Assert.assertTrue("Faulted Follower should have joined quorum by now",
    +                ClientBase.waitForServerUp(
    +                        "127.0.0.1:" + follower.getClientPort(),
    +                        CONNECTION_TIMEOUT));
    +
    +        QuorumPeer leader = getByServerState(mt, ServerState.LEADING);
    +        assertNotNull("Leader should not be null", leader);
    +        Assert.assertTrue("Leader must be running", ClientBase.waitForServerUp(
    +                "127.0.0.1:" + leader.getClientPort(), CONNECTION_TIMEOUT));
    +
    +        watch = new CountdownWatcher();
    +        zk = new ZooKeeper("127.0.0.1:" + leader.getClientPort(),
    +                ClientBase.CONNECTION_TIMEOUT, watch);
    +        watch.waitForConnected(ClientBase.CONNECTION_TIMEOUT);
    +
    +        Stat exists = zk.exists(nodePath, false);
    +        assertNull("Node must have been deleted from leader", exists);
    +
    +        CountdownWatcher followerWatch = new CountdownWatcher();
    +        ZooKeeper followerZK = new ZooKeeper(
    +                "127.0.0.1:" + follower.getClientPort(),
    +                ClientBase.CONNECTION_TIMEOUT, followerWatch);
    +        followerWatch.waitForConnected(ClientBase.CONNECTION_TIMEOUT);
    +        Stat nodeAtFollower = followerZK.exists(nodePath, false);
    +
    +        // Problem 1: Follower had one extra ephemeral node /e1
    +        assertNull("ephemeral node must not exist", nodeAtFollower);
    +
    +        // Create the node with another session
    +        zk.create(nodePath, "2".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);
    +
    +        // close the session and newly created ephemeral node should be deleted
    +        zk.close();
    +
    +        nodeAtFollower = followerZK.exists(nodePath, false);
    +
    +        // Problem 2: Before fix, after session close the ephemeral node
    +        // was not getting deleted. But now after the fix after session close
    +        // ephemeral node is getting deleted.
    +        assertNull("After session close ephemeral node must be deleted",
    +                nodeAtFollower);
    +        followerZK.close();
    +    }
    +
    +    @After
    +    public void tearDown() {
    +        // stop all severs
    +        for (int i = 0; i < mt.length; i++) {
    +            try {
    +                mt[i].shutdown();
    +            } catch (InterruptedException e) {
    +                LOG.warn("Quorum Peer interrupted while shutting it down", e);
    +            }
    +        }
    +    }
    +
    +    private QuorumPeer getByServerState(MainThread[] mt, ServerState state) {
    +        for (int i = mt.length - 1; i >= 0; i--) {
    +            QuorumPeer quorumPeer = mt[i].getQuorumPeer();
    +            if (null != quorumPeer && state == quorumPeer.getPeerState()) {
    +                return quorumPeer;
    +            }
    +        }
    +        return null;
    +    }
    +
    +    static class CustomQuorumPeer extends QuorumPeer  {
    +        private boolean injectError = false;
    +
    +        public CustomQuorumPeer() throws SaslException {
    +        }
    +
    +        @Override
    +        protected Follower makeFollower(FileTxnSnapLog logFactory)
    +                throws IOException {
    +            return new Follower(this, new FollowerZooKeeperServer(logFactory,
    +                    this, null /*DataTreeBuilder is never used*/,
    +                    this.getZkDb())) {
    +
    +                @Override
    +                void readPacket(QuorumPacket pp) throws IOException {
    +                    /**
    +                     * In real scenario got SocketTimeoutException while reading
    +                     * the packet from leader because of network problem, but
    +                     * here throwing SocketTimeoutException based on whether
    +                     * error is injected or not
    +                     */
    +                    super.readPacket(pp);
    +                    if (injectError && pp.getType() == Leader.PROPOSAL) {
    +                        String type = LearnerHandler.packetToString(pp);
    +                        throw new SocketTimeoutException(
    +                                "Socket timeout while reading the packet for operation "
    +                                        + type);
    +                    }
    +                }
    +
    +            };
    +        }
    +
    +        public void setInjectError(boolean injectError) {
    +            this.injectError = injectError;
    +        }
    +
    +    }
    +
    +    static class MockTestQPMain extends TestQPMain {
    +        @Override
    +        protected QuorumPeer getQuorumPeer() throws SaslException {
    +            return new CustomQuorumPeer();
    +        }
    +    }
    +}
    --- End diff --
    
    Should add a new line for the end of file.
, -1 overall.  GitHub Pull Request  Build
      

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 5 new or modified tests.

    -1 javadoc.  The javadoc tool appears to have generated 1 warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 3.0.1) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/861//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/861//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/861//console

This message is automatically generated., Github user hanm commented on a diff in the pull request:

    https://github.com/apache/zookeeper/pull/304#discussion_r127123189
  
    --- Diff: src/java/test/org/apache/zookeeper/server/quorum/EphemeralNodeDeletionTest.java ---
    @@ -0,0 +1,219 @@
    +/**
    + * Licensed to the Apache Software Foundation (ASF) under one
    + * or more contributor license agreements.  See the NOTICE file
    + * distributed with this work for additional information
    + * regarding copyright ownership.  The ASF licenses this file
    + * to you under the Apache License, Version 2.0 (the
    + * "License"); you may not use this file except in compliance
    + * with the License.  You may obtain a copy of the License at
    + *
    + *     http://www.apache.org/licenses/LICENSE-2.0
    + *
    + * Unless required by applicable law or agreed to in writing, software
    + * distributed under the License is distributed on an "AS IS" BASIS,
    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    + * See the License for the specific language governing permissions and
    + * limitations under the License.
    + */
    +package org.apache.zookeeper.server.quorum;
    +
    +import static org.apache.zookeeper.test.ClientBase.CONNECTION_TIMEOUT;
    +import static org.junit.Assert.assertNotNull;
    +import static org.junit.Assert.assertNull;
    +
    +import java.io.IOException;
    +import java.net.SocketTimeoutException;
    +
    +import org.apache.zookeeper.CreateMode;
    +import org.apache.zookeeper.PortAssignment;
    +import org.apache.zookeeper.ZooDefs.Ids;
    +import org.apache.zookeeper.ZooKeeper;
    +import org.apache.zookeeper.data.Stat;
    +import org.apache.zookeeper.server.persistence.FileTxnSnapLog;
    +import org.apache.zookeeper.server.quorum.QuorumPeer.ServerState;
    +import org.apache.zookeeper.test.ClientBase;
    +import org.apache.zookeeper.test.ClientBase.CountdownWatcher;
    +import org.junit.After;
    +import org.junit.Assert;
    +import org.junit.Test;
    +
    +import javax.security.sasl.SaslException;
    +
    +public class EphemeralNodeDeletionTest extends QuorumPeerTestBase {
    +    private static int SERVER_COUNT = 3;
    +    private MainThread[] mt = new MainThread[SERVER_COUNT];
    +
    +    /**
    +     * Test case for https://issues.apache.org/jira/browse/ZOOKEEPER-2355.
    +     * ZooKeeper ephemeral node is never deleted if follower fail while reading
    +     * the proposal packet.
    +     */
    +
    +    @Test(timeout = 120000)
    +    public void testEphemeralNodeDeletion() throws Exception {
    +        final int clientPorts[] = new int[SERVER_COUNT];
    +        StringBuilder sb = new StringBuilder();
    +        String server;
    +
    +        for (int i = 0; i < SERVER_COUNT; i++) {
    +            clientPorts[i] = PortAssignment.unique();
    +            server = "server." + i + "=127.0.0.1:" + PortAssignment.unique()
    +                    + ":" + PortAssignment.unique();
    +            sb.append(server + "\n");
    --- End diff --
    
    @asdf2014 Yes, I agree. Though I'd prefer doing this in a separate JIRA as a refactoring task as it's used everywhere in tests. If you have time, you are more than welcome to file a JIRA and do the refactoring work (btw, sorry for lagging on reviewing your refactoring patches, we got many high priority JIRAs in the backlog that we want to get in first.).
, Github user hanm commented on a diff in the pull request:

    https://github.com/apache/zookeeper/pull/304#discussion_r127123221
  
    --- Diff: src/java/test/org/apache/zookeeper/server/quorum/EphemeralNodeDeletionTest.java ---
    @@ -0,0 +1,219 @@
    +/**
    + * Licensed to the Apache Software Foundation (ASF) under one
    + * or more contributor license agreements.  See the NOTICE file
    + * distributed with this work for additional information
    + * regarding copyright ownership.  The ASF licenses this file
    + * to you under the Apache License, Version 2.0 (the
    + * "License"); you may not use this file except in compliance
    + * with the License.  You may obtain a copy of the License at
    + *
    + *     http://www.apache.org/licenses/LICENSE-2.0
    + *
    + * Unless required by applicable law or agreed to in writing, software
    + * distributed under the License is distributed on an "AS IS" BASIS,
    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    + * See the License for the specific language governing permissions and
    + * limitations under the License.
    + */
    +package org.apache.zookeeper.server.quorum;
    +
    +import static org.apache.zookeeper.test.ClientBase.CONNECTION_TIMEOUT;
    +import static org.junit.Assert.assertNotNull;
    +import static org.junit.Assert.assertNull;
    +
    +import java.io.IOException;
    +import java.net.SocketTimeoutException;
    +
    +import org.apache.zookeeper.CreateMode;
    +import org.apache.zookeeper.PortAssignment;
    +import org.apache.zookeeper.ZooDefs.Ids;
    +import org.apache.zookeeper.ZooKeeper;
    +import org.apache.zookeeper.data.Stat;
    +import org.apache.zookeeper.server.persistence.FileTxnSnapLog;
    +import org.apache.zookeeper.server.quorum.QuorumPeer.ServerState;
    +import org.apache.zookeeper.test.ClientBase;
    +import org.apache.zookeeper.test.ClientBase.CountdownWatcher;
    +import org.junit.After;
    +import org.junit.Assert;
    +import org.junit.Test;
    +
    +import javax.security.sasl.SaslException;
    +
    +public class EphemeralNodeDeletionTest extends QuorumPeerTestBase {
    +    private static int SERVER_COUNT = 3;
    +    private MainThread[] mt = new MainThread[SERVER_COUNT];
    +
    +    /**
    +     * Test case for https://issues.apache.org/jira/browse/ZOOKEEPER-2355.
    +     * ZooKeeper ephemeral node is never deleted if follower fail while reading
    +     * the proposal packet.
    +     */
    +
    +    @Test(timeout = 120000)
    +    public void testEphemeralNodeDeletion() throws Exception {
    +        final int clientPorts[] = new int[SERVER_COUNT];
    +        StringBuilder sb = new StringBuilder();
    +        String server;
    +
    +        for (int i = 0; i < SERVER_COUNT; i++) {
    +            clientPorts[i] = PortAssignment.unique();
    +            server = "server." + i + "=127.0.0.1:" + PortAssignment.unique()
    +                    + ":" + PortAssignment.unique();
    +            sb.append(server + "\n");
    +        }
    +        String currentQuorumCfgSection = sb.toString();
    +        System.out.println(currentQuorumCfgSection);
    +        // start all the servers
    +        for (int i = 0; i < SERVER_COUNT; i++) {
    +            mt[i] = new MainThread(i, clientPorts[i], currentQuorumCfgSection) {
    +                @Override
    +                public TestQPMain getTestQPMain() {
    +                    return new MockTestQPMain();
    +                }
    +            };
    +            mt[i].start();
    +        }
    +
    +        // ensure all servers started
    +        for (int i = 0; i < SERVER_COUNT; i++) {
    +            Assert.assertTrue("waiting for server " + i + " being up",
    +                    ClientBase.waitForServerUp("127.0.0.1:" + clientPorts[i],
    +                            CONNECTION_TIMEOUT));
    +        }
    +
    +        CountdownWatcher watch = new CountdownWatcher();
    +        ZooKeeper zk = new ZooKeeper("127.0.0.1:" + clientPorts[1],
    +                ClientBase.CONNECTION_TIMEOUT, watch);
    +        watch.waitForConnected(ClientBase.CONNECTION_TIMEOUT);
    +
    +        /**
    +         * now the problem scenario starts
    +         */
    +
    +        // 1: create ephemeral node
    +        String nodePath = "/e1";
    +        zk.create(nodePath, "1".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);
    +
    +        // 2: inject network problem in one of the follower
    +        CustomQuorumPeer follower = (CustomQuorumPeer) getByServerState(mt,
    +                ServerState.FOLLOWING);
    +        follower.setInjectError(true);
    +
    +        // 3: close the session so that ephemeral node is deleted
    +        zk.close();
    +
    +        // remove the error
    +        follower.setInjectError(false);
    +
    +        Assert.assertTrue("Faulted Follower should have joined quorum by now",
    +                ClientBase.waitForServerUp(
    +                        "127.0.0.1:" + follower.getClientPort(),
    +                        CONNECTION_TIMEOUT));
    +
    +        QuorumPeer leader = getByServerState(mt, ServerState.LEADING);
    +        assertNotNull("Leader should not be null", leader);
    +        Assert.assertTrue("Leader must be running", ClientBase.waitForServerUp(
    +                "127.0.0.1:" + leader.getClientPort(), CONNECTION_TIMEOUT));
    +
    +        watch = new CountdownWatcher();
    +        zk = new ZooKeeper("127.0.0.1:" + leader.getClientPort(),
    +                ClientBase.CONNECTION_TIMEOUT, watch);
    +        watch.waitForConnected(ClientBase.CONNECTION_TIMEOUT);
    +
    +        Stat exists = zk.exists(nodePath, false);
    +        assertNull("Node must have been deleted from leader", exists);
    +
    +        CountdownWatcher followerWatch = new CountdownWatcher();
    +        ZooKeeper followerZK = new ZooKeeper(
    +                "127.0.0.1:" + follower.getClientPort(),
    +                ClientBase.CONNECTION_TIMEOUT, followerWatch);
    +        followerWatch.waitForConnected(ClientBase.CONNECTION_TIMEOUT);
    +        Stat nodeAtFollower = followerZK.exists(nodePath, false);
    +
    +        // Problem 1: Follower had one extra ephemeral node /e1
    +        assertNull("ephemeral node must not exist", nodeAtFollower);
    +
    +        // Create the node with another session
    +        zk.create(nodePath, "2".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);
    +
    +        // close the session and newly created ephemeral node should be deleted
    +        zk.close();
    +
    +        nodeAtFollower = followerZK.exists(nodePath, false);
    +
    +        // Problem 2: Before fix, after session close the ephemeral node
    +        // was not getting deleted. But now after the fix after session close
    +        // ephemeral node is getting deleted.
    +        assertNull("After session close ephemeral node must be deleted",
    +                nodeAtFollower);
    +        followerZK.close();
    +    }
    +
    +    @After
    +    public void tearDown() {
    +        // stop all severs
    +        for (int i = 0; i < mt.length; i++) {
    +            try {
    +                mt[i].shutdown();
    +            } catch (InterruptedException e) {
    +                LOG.warn("Quorum Peer interrupted while shutting it down", e);
    +            }
    +        }
    +    }
    +
    +    private QuorumPeer getByServerState(MainThread[] mt, ServerState state) {
    +        for (int i = mt.length - 1; i >= 0; i--) {
    +            QuorumPeer quorumPeer = mt[i].getQuorumPeer();
    +            if (null != quorumPeer && state == quorumPeer.getPeerState()) {
    +                return quorumPeer;
    +            }
    +        }
    +        return null;
    +    }
    +
    +    static class CustomQuorumPeer extends QuorumPeer  {
    +        private boolean injectError = false;
    +
    +        public CustomQuorumPeer() throws SaslException {
    +        }
    +
    +        @Override
    +        protected Follower makeFollower(FileTxnSnapLog logFactory)
    +                throws IOException {
    +            return new Follower(this, new FollowerZooKeeperServer(logFactory,
    +                    this, null /*DataTreeBuilder is never used*/,
    +                    this.getZkDb())) {
    +
    +                @Override
    +                void readPacket(QuorumPacket pp) throws IOException {
    +                    /**
    +                     * In real scenario got SocketTimeoutException while reading
    +                     * the packet from leader because of network problem, but
    +                     * here throwing SocketTimeoutException based on whether
    +                     * error is injected or not
    +                     */
    +                    super.readPacket(pp);
    +                    if (injectError && pp.getType() == Leader.PROPOSAL) {
    +                        String type = LearnerHandler.packetToString(pp);
    +                        throw new SocketTimeoutException(
    +                                "Socket timeout while reading the packet for operation "
    +                                        + type);
    +                    }
    +                }
    +
    +            };
    +        }
    +
    +        public void setInjectError(boolean injectError) {
    +            this.injectError = injectError;
    +        }
    +
    +    }
    +
    +    static class MockTestQPMain extends TestQPMain {
    +        @Override
    +        protected QuorumPeer getQuorumPeer() throws SaslException {
    +            return new CustomQuorumPeer();
    +        }
    +    }
    +}
    --- End diff --
    
    I'll update once I collect all feedbacks.
, Github user hanm commented on the issue:

    https://github.com/apache/zookeeper/pull/304
  
    @arshadmohammad @rakeshadr gentle nudge on reviewing this before it's getting stale. We already have this in 3.5 and master, and this is to get same change in 3.4.
, Github user asdf2014 commented on a diff in the pull request:

    https://github.com/apache/zookeeper/pull/304#discussion_r127135317
  
    --- Diff: src/java/test/org/apache/zookeeper/server/quorum/EphemeralNodeDeletionTest.java ---
    @@ -0,0 +1,219 @@
    +/**
    + * Licensed to the Apache Software Foundation (ASF) under one
    + * or more contributor license agreements.  See the NOTICE file
    + * distributed with this work for additional information
    + * regarding copyright ownership.  The ASF licenses this file
    + * to you under the Apache License, Version 2.0 (the
    + * "License"); you may not use this file except in compliance
    + * with the License.  You may obtain a copy of the License at
    + *
    + *     http://www.apache.org/licenses/LICENSE-2.0
    + *
    + * Unless required by applicable law or agreed to in writing, software
    + * distributed under the License is distributed on an "AS IS" BASIS,
    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    + * See the License for the specific language governing permissions and
    + * limitations under the License.
    + */
    +package org.apache.zookeeper.server.quorum;
    +
    +import static org.apache.zookeeper.test.ClientBase.CONNECTION_TIMEOUT;
    +import static org.junit.Assert.assertNotNull;
    +import static org.junit.Assert.assertNull;
    +
    +import java.io.IOException;
    +import java.net.SocketTimeoutException;
    +
    +import org.apache.zookeeper.CreateMode;
    +import org.apache.zookeeper.PortAssignment;
    +import org.apache.zookeeper.ZooDefs.Ids;
    +import org.apache.zookeeper.ZooKeeper;
    +import org.apache.zookeeper.data.Stat;
    +import org.apache.zookeeper.server.persistence.FileTxnSnapLog;
    +import org.apache.zookeeper.server.quorum.QuorumPeer.ServerState;
    +import org.apache.zookeeper.test.ClientBase;
    +import org.apache.zookeeper.test.ClientBase.CountdownWatcher;
    +import org.junit.After;
    +import org.junit.Assert;
    +import org.junit.Test;
    +
    +import javax.security.sasl.SaslException;
    +
    +public class EphemeralNodeDeletionTest extends QuorumPeerTestBase {
    +    private static int SERVER_COUNT = 3;
    +    private MainThread[] mt = new MainThread[SERVER_COUNT];
    +
    +    /**
    +     * Test case for https://issues.apache.org/jira/browse/ZOOKEEPER-2355.
    +     * ZooKeeper ephemeral node is never deleted if follower fail while reading
    +     * the proposal packet.
    +     */
    +
    +    @Test(timeout = 120000)
    +    public void testEphemeralNodeDeletion() throws Exception {
    +        final int clientPorts[] = new int[SERVER_COUNT];
    +        StringBuilder sb = new StringBuilder();
    +        String server;
    +
    +        for (int i = 0; i < SERVER_COUNT; i++) {
    +            clientPorts[i] = PortAssignment.unique();
    +            server = "server." + i + "=127.0.0.1:" + PortAssignment.unique()
    +                    + ":" + PortAssignment.unique();
    +            sb.append(server + "\n");
    --- End diff --
    
    @hanm Okay, After this patch merged, i will do the refactoring work in a separate `JIRA`. I understand we should put more attentions into the high priority tasks, thank you for explaining this. :D
, Github user asdf2014 commented on a diff in the pull request:

    https://github.com/apache/zookeeper/pull/304#discussion_r127135485
  
    --- Diff: src/java/test/org/apache/zookeeper/server/quorum/EphemeralNodeDeletionTest.java ---
    @@ -0,0 +1,219 @@
    +/**
    + * Licensed to the Apache Software Foundation (ASF) under one
    + * or more contributor license agreements.  See the NOTICE file
    + * distributed with this work for additional information
    + * regarding copyright ownership.  The ASF licenses this file
    + * to you under the Apache License, Version 2.0 (the
    + * "License"); you may not use this file except in compliance
    + * with the License.  You may obtain a copy of the License at
    + *
    + *     http://www.apache.org/licenses/LICENSE-2.0
    + *
    + * Unless required by applicable law or agreed to in writing, software
    + * distributed under the License is distributed on an "AS IS" BASIS,
    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    + * See the License for the specific language governing permissions and
    + * limitations under the License.
    + */
    +package org.apache.zookeeper.server.quorum;
    +
    +import static org.apache.zookeeper.test.ClientBase.CONNECTION_TIMEOUT;
    +import static org.junit.Assert.assertNotNull;
    +import static org.junit.Assert.assertNull;
    +
    +import java.io.IOException;
    +import java.net.SocketTimeoutException;
    +
    +import org.apache.zookeeper.CreateMode;
    +import org.apache.zookeeper.PortAssignment;
    +import org.apache.zookeeper.ZooDefs.Ids;
    +import org.apache.zookeeper.ZooKeeper;
    +import org.apache.zookeeper.data.Stat;
    +import org.apache.zookeeper.server.persistence.FileTxnSnapLog;
    +import org.apache.zookeeper.server.quorum.QuorumPeer.ServerState;
    +import org.apache.zookeeper.test.ClientBase;
    +import org.apache.zookeeper.test.ClientBase.CountdownWatcher;
    +import org.junit.After;
    +import org.junit.Assert;
    +import org.junit.Test;
    +
    +import javax.security.sasl.SaslException;
    +
    +public class EphemeralNodeDeletionTest extends QuorumPeerTestBase {
    +    private static int SERVER_COUNT = 3;
    +    private MainThread[] mt = new MainThread[SERVER_COUNT];
    +
    +    /**
    +     * Test case for https://issues.apache.org/jira/browse/ZOOKEEPER-2355.
    +     * ZooKeeper ephemeral node is never deleted if follower fail while reading
    +     * the proposal packet.
    +     */
    +
    +    @Test(timeout = 120000)
    +    public void testEphemeralNodeDeletion() throws Exception {
    +        final int clientPorts[] = new int[SERVER_COUNT];
    +        StringBuilder sb = new StringBuilder();
    +        String server;
    +
    +        for (int i = 0; i < SERVER_COUNT; i++) {
    +            clientPorts[i] = PortAssignment.unique();
    +            server = "server." + i + "=127.0.0.1:" + PortAssignment.unique()
    +                    + ":" + PortAssignment.unique();
    +            sb.append(server + "\n");
    +        }
    +        String currentQuorumCfgSection = sb.toString();
    +        System.out.println(currentQuorumCfgSection);
    +        // start all the servers
    +        for (int i = 0; i < SERVER_COUNT; i++) {
    +            mt[i] = new MainThread(i, clientPorts[i], currentQuorumCfgSection) {
    +                @Override
    +                public TestQPMain getTestQPMain() {
    +                    return new MockTestQPMain();
    +                }
    +            };
    +            mt[i].start();
    +        }
    +
    +        // ensure all servers started
    +        for (int i = 0; i < SERVER_COUNT; i++) {
    +            Assert.assertTrue("waiting for server " + i + " being up",
    +                    ClientBase.waitForServerUp("127.0.0.1:" + clientPorts[i],
    +                            CONNECTION_TIMEOUT));
    +        }
    +
    +        CountdownWatcher watch = new CountdownWatcher();
    +        ZooKeeper zk = new ZooKeeper("127.0.0.1:" + clientPorts[1],
    +                ClientBase.CONNECTION_TIMEOUT, watch);
    +        watch.waitForConnected(ClientBase.CONNECTION_TIMEOUT);
    +
    +        /**
    +         * now the problem scenario starts
    +         */
    +
    +        // 1: create ephemeral node
    +        String nodePath = "/e1";
    +        zk.create(nodePath, "1".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);
    +
    +        // 2: inject network problem in one of the follower
    +        CustomQuorumPeer follower = (CustomQuorumPeer) getByServerState(mt,
    +                ServerState.FOLLOWING);
    +        follower.setInjectError(true);
    +
    +        // 3: close the session so that ephemeral node is deleted
    +        zk.close();
    +
    +        // remove the error
    +        follower.setInjectError(false);
    +
    +        Assert.assertTrue("Faulted Follower should have joined quorum by now",
    +                ClientBase.waitForServerUp(
    +                        "127.0.0.1:" + follower.getClientPort(),
    +                        CONNECTION_TIMEOUT));
    +
    +        QuorumPeer leader = getByServerState(mt, ServerState.LEADING);
    +        assertNotNull("Leader should not be null", leader);
    +        Assert.assertTrue("Leader must be running", ClientBase.waitForServerUp(
    +                "127.0.0.1:" + leader.getClientPort(), CONNECTION_TIMEOUT));
    +
    +        watch = new CountdownWatcher();
    +        zk = new ZooKeeper("127.0.0.1:" + leader.getClientPort(),
    +                ClientBase.CONNECTION_TIMEOUT, watch);
    +        watch.waitForConnected(ClientBase.CONNECTION_TIMEOUT);
    +
    +        Stat exists = zk.exists(nodePath, false);
    +        assertNull("Node must have been deleted from leader", exists);
    +
    +        CountdownWatcher followerWatch = new CountdownWatcher();
    +        ZooKeeper followerZK = new ZooKeeper(
    +                "127.0.0.1:" + follower.getClientPort(),
    +                ClientBase.CONNECTION_TIMEOUT, followerWatch);
    +        followerWatch.waitForConnected(ClientBase.CONNECTION_TIMEOUT);
    +        Stat nodeAtFollower = followerZK.exists(nodePath, false);
    +
    +        // Problem 1: Follower had one extra ephemeral node /e1
    +        assertNull("ephemeral node must not exist", nodeAtFollower);
    +
    +        // Create the node with another session
    +        zk.create(nodePath, "2".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);
    +
    +        // close the session and newly created ephemeral node should be deleted
    +        zk.close();
    +
    +        nodeAtFollower = followerZK.exists(nodePath, false);
    +
    +        // Problem 2: Before fix, after session close the ephemeral node
    +        // was not getting deleted. But now after the fix after session close
    +        // ephemeral node is getting deleted.
    +        assertNull("After session close ephemeral node must be deleted",
    +                nodeAtFollower);
    +        followerZK.close();
    +    }
    +
    +    @After
    +    public void tearDown() {
    +        // stop all severs
    +        for (int i = 0; i < mt.length; i++) {
    +            try {
    +                mt[i].shutdown();
    +            } catch (InterruptedException e) {
    +                LOG.warn("Quorum Peer interrupted while shutting it down", e);
    +            }
    +        }
    +    }
    +
    +    private QuorumPeer getByServerState(MainThread[] mt, ServerState state) {
    +        for (int i = mt.length - 1; i >= 0; i--) {
    +            QuorumPeer quorumPeer = mt[i].getQuorumPeer();
    +            if (null != quorumPeer && state == quorumPeer.getPeerState()) {
    +                return quorumPeer;
    +            }
    +        }
    +        return null;
    +    }
    +
    +    static class CustomQuorumPeer extends QuorumPeer  {
    +        private boolean injectError = false;
    +
    +        public CustomQuorumPeer() throws SaslException {
    +        }
    +
    +        @Override
    +        protected Follower makeFollower(FileTxnSnapLog logFactory)
    +                throws IOException {
    +            return new Follower(this, new FollowerZooKeeperServer(logFactory,
    +                    this, null /*DataTreeBuilder is never used*/,
    +                    this.getZkDb())) {
    +
    +                @Override
    +                void readPacket(QuorumPacket pp) throws IOException {
    +                    /**
    +                     * In real scenario got SocketTimeoutException while reading
    +                     * the packet from leader because of network problem, but
    +                     * here throwing SocketTimeoutException based on whether
    +                     * error is injected or not
    +                     */
    +                    super.readPacket(pp);
    +                    if (injectError && pp.getType() == Leader.PROPOSAL) {
    +                        String type = LearnerHandler.packetToString(pp);
    +                        throw new SocketTimeoutException(
    +                                "Socket timeout while reading the packet for operation "
    +                                        + type);
    +                    }
    +                }
    +
    +            };
    +        }
    +
    +        public void setInjectError(boolean injectError) {
    +            this.injectError = injectError;
    +        }
    +
    +    }
    +
    +    static class MockTestQPMain extends TestQPMain {
    +        @Override
    +        protected QuorumPeer getQuorumPeer() throws SaslException {
    +            return new CustomQuorumPeer();
    +        }
    +    }
    +}
    --- End diff --
    
    Thanks a lot! It will be a huge job. Look forward to!
, Github user hanm closed the pull request at:

    https://github.com/apache/zookeeper/pull/304
, GitHub user hanm reopened a pull request:

    https://github.com/apache/zookeeper/pull/304

    ZOOKEEPER-2355: Ephemeral node is never deleted if follower fails while reading the proposal packet.

    This commit is a port of the commit ca22b3db19371f6b0f5507b7dd80b283cddc7700 from branch-3.5 to branch-3.4. Changes include a few interfaces that required by the test case. The test case itself is also updated so it works with 3.4 code base.
    
    @arshadmohammad @rakeshadr Could you please review this to close the loop of ZOOKEEPER-2355?

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/hanm/zookeeper ZOOKEEPER-2355

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/zookeeper/pull/304.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #304
    
----
commit 007e2b37f24907c03e4e28547756b91aea4f78d4
Author: Michael Han <hanm@apache.org>
Date:   2017-07-05T21:23:58Z

    ZOOKEEPER-2355: Ephemeral node is never deleted if follower fails while reading the proposal packet.
    
    This commit is a back port of the commit ca22b3db19371f6b0f5507b7dd80b283cddc7700 on branch-3.5. Changes include a few interfaces that required by the test case. The test case itself is also updated so it works with 3.4 code base.

----
, +1 overall.  GitHub Pull Request  Build
      

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 5 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 3.0.1) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/915//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/915//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/915//console

This message is automatically generated., Github user arshadmohammad commented on the issue:

    https://github.com/apache/zookeeper/pull/304
  
    LGTM +1
, Github user hanm closed the pull request at:

    https://github.com/apache/zookeeper/pull/304
, Github user hanm commented on the issue:

    https://github.com/apache/zookeeper/pull/304
  
    Thanks for reviewing @arshadmohammad. Committed to 3.4: https://github.com/apache/zookeeper/commit/1789e0d6f5d4dd170193f4c13fb381e98597db77
, Resolving issue as Fixed now it's committed to all branches:
master: https://github.com/apache/zookeeper/commit/69710181042a8c1f0461c1739b96171d88f2b126
3.5: 
https://github.com/apache/zookeeper/commit/ca22b3db19371f6b0f5507b7dd80b283cddc7700
3.4:
https://github.com/apache/zookeeper/commit/1789e0d6f5d4dd170193f4c13fb381e98597db77]