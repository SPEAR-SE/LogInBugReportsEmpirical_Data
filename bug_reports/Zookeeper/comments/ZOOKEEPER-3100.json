[The relevant Kafka ticket for reference https://issues.apache.org/jira/browse/KAFKA-7193, [~rsivaram]

Thanks for testing the new version so quickly and accurately. This is very useful.

In theory a server should answer on all addresses that it resolves to, so if the client is unable to connect to the chosen address, host is considered to be down. That was one the reasons why I was against choosing randomly from the resolved addresses. The other one is random behaviour is a code smell.

Anyway. 

Why is the server not connectable on the IPv6 address? ZooKeeper usually binds client port (2181) on the wildcard address, which means it listens on all network interfaces and all protocols. (I'll double check this to make sure.)

What's your server configuration look like?, [~andorm] In the failing tests, ZooKeeper was being started on `127.0.0.1` explicitly ([https://github.com/apache/kafka/blob/trunk/core/src/test/scala/unit/kafka/zk/EmbeddedZookeeper.scala).] Clients were connecting using `localhost`. We are fixing this for now in the tests by changing the clients to use `127.0.0.1`, but it used to work fine before upgrading ZK clients., Got it.

I've run a quick test with the standalone ZooKeeper and it looks like "wildcard" address means IPv6, if it's enabled and IPv4 otherwise. Server don't listen on both protocols.

We might want the client to follow the same behaviour and prefer IPv6 addresses, if the protocol is enabled in the system and fallback to IPv4, if not.

Let's wait for other people's thoughts., Btw. Regarding the embedded ZooKeeper: this might not be a bug exactly, because you should follow the same configuration convention on both sides: e.g. if you configure your server to listen on 127.0.0.1, you should set up your client exactly the same way., [~rsivaram]

I've run a few tests with current 3.4 and 3.5 versions of ZooKeeper and I got the same results:

I spoke a little bit soon regarding the wildcard address, because ZooKeeper opens a unified socket this way. Although netstat shows that Zk is listening only on v6 socket, clients are able to connect with both protocols:
{noformat}
andor@andor-centos zkconf]$ sudo netstat -plnt | grep 2181
tcp6 0 0 :::2181 :::* LISTEN 9249/java 

[andor@andor-centos zkconf]$ echo "stat" | nc -4 -v localhost 2181
Ncat: Version 7.50 ( https://nmap.org/ncat )
Ncat: Connected to 127.0.0.1:2181.
stat is not executed because it is not in the whitelist.
Ncat: 5 bytes sent, 57 bytes received in 0.01 seconds.

[andor@andor-centos zkconf]$ echo "stat" | nc -6 -v localhost 2181
Ncat: Version 7.50 ( https://nmap.org/ncat )
Ncat: Connected to ::1:2181.
stat is not executed because it is not in the whitelist.
Ncat: 5 bytes sent, 57 bytes received in 0.01 seconds.{noformat}
So back to your original issue, I'm not able to repro it. CLI also works perfectly for me.

I need to look into the Kafka ticket, it must be something specific to that client.

 

 

 , [~andorm] In the failing Kafka test, ZooKeeper was not listening on the wilcard address, it was listening specifically on 127.0.0.1 (([https://github.com/apache/kafka/blob/trunk/core/src/test/scala/unit/kafka/zk/EmbeddedZookeeper.scala)|https://github.com/apache/kafka/blob/trunk/core/src/test/scala/unit/kafka/zk/EmbeddedZookeeper.scala).]. Hence the connection to the IPv6 address was failing. I think in the example above, you were running ZooKeeper on the wildcard address and hence it worked for both IPv4 and IPv6.

We have fixed the Kafka tests by changing clients to connect to `127.0.0.1` instead of `localhost` and that is a reasonable workaround since the server is bound explicitly to that address. But since this used to work before, perhaps it would be better to guarantee that all the possible addresses are attempted before applying backoff as large as a second?, Got it. Sorry, I keep forgetting about this is with embedded ZooKeeper.]