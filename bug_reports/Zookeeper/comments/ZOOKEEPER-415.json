[the stack traces are - 

- thread 1
{code}
0  0x0000003f41e075a5 in pthread_join () from /lib64/libpthread.so.0
#1  0x000000000044cef4 in pthread_join (t=1075841344, r=0x0) at zootestbuild/trunk/src/c/tests/PthreadMocks.cc:70
#2  0x00000000004591ce in adaptor_finish (zh=0x2aaaac0024d0) at zootestbuild/trunk/src/c/src/mt_adaptor.c:218
#3  0x000000000045066e in zookeeper_close (zh=0x2aaaac0024d0) at zootestbuild/trunk/src/c/src/zookeeper.c:1870
#4  0x000000000044856b in ~watchCtx (this=0x7fff244a1290) at zootestbuild/trunk/src/c/tests/TestClient.cc:111
#5  0x0000000000448675 in Zookeeper_simpleSystem::testWatcherAutoResetWithLocal (this=0x12450330) at zootestbuild/trunk/src/c/tests/TestClient.cc:671
#6  0x00000000004403d6 in CppUnit::TestCaller<Zookeeper_simpleSystem>::runTest (this=0x12450350) at /usr/local/include/cppunit/TestCaller.h:166
#7  0x00002aaaaaaef2bf in CppUnit::TestCaseMethodFunctor::operator() (this=0x402009d0) at TestCase.cpp:32
#8  0x00002aaaaaadc664 in CppUnit::DefaultProtector::protect (this=0x1244db80, functor=@0x402009d0, context=@0x7fff244a1680) at DefaultProtector.cpp:15
#9  0x00002aaaaaaeb049 in CppUnit::ProtectorChain::ProtectFunctor::operator() (this=0x402009d0) at ProtectorChain.cpp:20
#10 0x00002aaaaaaeac3f in CppUnit::ProtectorChain::protect (this=0x1244d8c0, functor=@0x7fff244a16e0, context=@0x7fff244a1680) at ProtectorChain.cpp:77
#11 0x00002aaaaaafb964 in CppUnit::TestResult::protect (this=0x7fff244a1a00, functor=@0x7fff244a16e0, test=0x31f3, shortDescription=@0x0) at TestResult.cpp:178
#12 0x00002aaaaaaeefb4 in CppUnit::TestCase::run (this=0x12450350, result=0x7fff244a1a00) at TestCase.cpp:27
#13 0x00002aaaaaaef869 in CppUnit::TestComposite::doRunChildTests (this=0x1244fb70, controller=0x7fff244a1a00) at TestComposite.cpp:64
#14 0x00002aaaaaaef776 in CppUnit::TestComposite::run (this=0x1244fb70, result=0x7fff244a1a00) at TestComposite.cpp:23
#15 0x00002aaaaaaef869 in CppUnit::TestComposite::doRunChildTests (this=0x1244e110, controller=0x7fff244a1a00) at TestComposite.cpp:64
#16 0x00002aaaaaaef776 in CppUnit::TestComposite::run (this=0x1244e110, result=0x7fff244a1a00) at TestComposite.cpp:23
#17 0x00002aaaaaafb8da in CppUnit::TestResult::runTest (this=0x7fff244a1a00, test=0x1244e0b0) at TestResult.cpp:145
#18 0x00002aaaaaaff705 in CppUnit::TestRunner::run (this=0x402009d0, controller=@0x7fff244a1a00, testPath=@0x31f3) at TestRunner.cpp:96
#19 0x00000000004059e1 in main (argc=1, argv=0x7fff244a1bd8) at zootestbuild/trunk/src/c/tests/TestDriver.cc:91
{code}

- thread 2

{code}
#0  0x0000003f41e0c878 in __lll_mutex_lock_wait () from /lib64/libpthread.so.0
#1  0x0000003f41e088a5 in _L_mutex_lock_107 () from /lib64/libpthread.so.0
#2  0x0000003f41e08333 in pthread_mutex_lock () from /lib64/libpthread.so.0
#3  0x000000000041096e in Mutex::acquire (this=0x7fff244a1280) at zootestbuild/trunk/src/c/tests/ThreadingUtil.cc:40
#4  0x0000000000442121 in watchCtx::putEvent (this=0x7fff244a1260, evt=@0x401ffea0) at zootestbuild/trunk/src/c/tests/TestClient.cc:134
#5  0x00000000004421c3 in Zookeeper_simpleSystem::watcher (type=1, state=3, path=0x12459e80 "/watchtest/child2", v=0x7fff244a1260)
    at zootestbuild/trunk/src/c/tests/TestClient.cc:181
#6  0x0000000000458338 in deliverWatchers (zh=0x2aaaac0024d0, type=1, state=3, path=0x12459e80 "/watchtest/child2", list=0x12456ad8)
    at  zootestbuild/trunk/src/c/src/zk_hashtable.c:270
#7  0x000000000040ca9e in __wrap_deliverWatchers (zh=0x2aaaac0024d0, type=1, state=3, path=0x12459e80 "/watchtest/child2", list=0x12456ad8)
    at zootestbuild/trunk/src/c/tests/ZKMocks.cc:218
#8  0x0000000000450ab8 in process_completions (zh=0x2aaaac0024d0) at zootestbuild/trunk/src/c/src/zookeeper.c:1407
#9  0x0000000000458af1 in do_completion (v=<value optimized out>) at zootestbuild/trunk/src/c/src/mt_adaptor.c:332
#10 0x0000003f41e062e7 in start_thread () from /lib64/libpthread.so.0
#11 0x0000003f412ce3bd in clone () from /lib64/libc.so.6
{code}

, it turns out that we were facing a problem with the list.get() throwing an excpetion when the list is empty, whcih would result in lock not being released and the other thread waiting on the lock and never able to acquire it leading to tests hanging. for the soln.

- added wait for events before we ever call getEvents() 
- added assertion in getEvent that would fail if there are no elements available.

, +1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12408761/ZOOKEEPER-415.patch
  against trunk revision 777265.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: http://hudson.zones.apache.org/hudson/job/Zookeeper-Patch-vesta.apache.org/88/testReport/
Findbugs warnings: http://hudson.zones.apache.org/hudson/job/Zookeeper-Patch-vesta.apache.org/88/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: http://hudson.zones.apache.org/hudson/job/Zookeeper-Patch-vesta.apache.org/88/console

This message is automatically generated., +1, thanks Mahadev
Committed revision 777413., Integrated in ZooKeeper-trunk #322 (See [http://hudson.zones.apache.org/hudson/job/ZooKeeper-trunk/322/])
    . zookeeper c tests hang.
]