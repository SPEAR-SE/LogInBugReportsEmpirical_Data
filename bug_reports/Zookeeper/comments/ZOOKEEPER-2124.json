[In org.apache.zookeeper.version.util.VerGen, we have:
{code}
   public static Version parseVersionString(String input) {
        Version result = new Version();

        Pattern p = Pattern.compile("^(\\d+)\\.(\\d+)\\.(\\d+)((\\.\\d+)*)(-(.+))?$");
        Matcher m = p.matcher(input);
{code}

We can update the pattern to:
{code}
Pattern p = Pattern.compile("^(\\d+)\\.(\\d+)\\.(\\d+)((\\.\\d+)*)([-_](.+))?$");
{code}
, Attached a patch.  Please help review.  Thanks in advance., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12700055/ZOOKEEPER-1911-trunk.patch
  against trunk revision 1658888.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2523//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2523//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2523//console

This message is automatically generated., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12700058/ZOOKEEPER-2124-trunk.patch
  against trunk revision 1658888.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2524//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2524//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2524//console

This message is automatically generated., Thank you for the patch Jerry. Allowing underscore sounds fine to me. Could you add a testcase in VerGenTest.java?, Hi, Michi

Thanks for your comment. 
After looking in it and thinking about it further, now I think Zookeeper has a valid and consistent version scheme:  maj.min.micro[-qualifier].
The parser allows additional number version after the micro with additional "."
Everything after the dash "-" is the qualifier.
This complies to and is consistent with conventional standard.  For example, http://books.sonatype.com/mvnref-book/reference/pom-relationships-sect-pom-syntax.html#pom-reationships-sect-versions

Zookeeper only allows numeric values for the maj.min.micro seem to follow conventional standard too. Any non-numeric char should go into the qualifier.
Therefore I don't see there is a need to change here.

What do you think?  I intend to close this JIRA as 'Won't Fix' after a few days.
, Sounds good. Thanks Jerry!, I just encountered this while trying to build an rpm from the 3.5.1-alpha release candidate.  The {{ant rpm}} command fails as follows:

{code}
rpm:
     [copy] Copying 1 file to /tmp/zkpython_build_cnauroth/SOURCES
      [rpm] Building the RPM based on the zkpython.spec file
      [rpm] error: line 51: Illegal char '-' in: Version: 3.5.1-alpha
{code}

I see the earlier comment that the versioning scheme already follows a consistent standard.  That makes sense, but if {{ant rpm}} actually doesn't work, then should we reopen this issue and fix it?

Thanks!, Hi, Chris

rpm does not like the '-' in the version string.  I see we have two options to fix this:
1.  Specifically specify the rpm version string to be different from the real zookeeper version string. For example, let the rpm version string to be 3.5.1_alpha.  But no change to the zookeeper version string.
Bigtop has two properties:
ZOOKEEPER_BASE_VERSION=
ZOOKEEPER_PKG_VERSION=
I ended up having these two to be different.  I am not sure if this is a good practice.

2.  Modify the zookeeper version scheme to allow more flexibility., I suppose another option could be:

3. Put logic in build.xml to replace hyphen with underscore in the version string before token replacement into the zookeeper.spec file.

I don't have a strong preference as long as {{ant rpm}} can succeed.  #3 would achieve that and still preserve the existing versioning scheme if that's what the project prefers., Agree, and I don't have strong preference either., I'm attaching a patch for consideration that replaces hyphen with underscore automatically in build.xml.  While testing this, I also discovered an old email thread with some rpm fixes that never made it into the source tree.

http://mail-archives.apache.org/mod_mbox/zookeeper-user/201212.mbox/%3C50D2D481.8010507@pt-consulting.eu%3E

I'm not including those fixes in my patch file, because I think it would be more appropriate to track them separately and ensure they get credited to the original author if accepted.

ZOOKEEPER-1604 was an old proposal to remove the packaging entirely from the project.  I'm going to follow up on that to see if there has been a resolution to that discussion., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12726641/ZOOKEEPER-2124.001.patch
  against trunk revision 1672934.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2640//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2640//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2640//console

This message is automatically generated., See below for an abridged list of the test failures, which I pulled from the Jenkins console log.  I expect any test failures are unrelated to this patch, because it's a change in the rpm packaging only.  Jenkins doesn't cover this in test runs.

{code}
     [exec]     [junit] 2015-04-20 19:48:07,327 [myid:] - INFO  [main:JUnit4ZKTestRunner$LoggedInvokeMethod@62] - TEST METHOD FAILED testReadArrayOffsetLength_LengthTooLarge
     [exec]     [junit] java.lang.IndexOutOfBoundsException

     [exec]     [junit] 2015-04-20 19:50:46,555 [myid:] - INFO  [main:JUnit4ZKTestRunner$LoggedInvokeMethod@62] - TEST METHOD FAILED testTooManySnapshotsNonessential
     [exec]     [junit] org.apache.zookeeper.server.quorum.SnapshotThrottleException: new snapshot would make 6 concurrently in progress; maximum is 5

     [exec]     [junit] 2015-04-20 19:50:46,575 [myid:] - INFO  [main:JUnit4ZKTestRunner$LoggedInvokeMethod@62] - TEST METHOD FAILED testTryWithResourceThrottle
     [exec]     [junit] org.apache.zookeeper.server.quorum.SnapshotThrottleException: new snapshot would make 2 concurrently in progress; maximum is 1

     [exec]     [junit] 2015-04-20 19:50:53,062 [myid:] - INFO  [main:JUnit4ZKTestRunner$LoggedInvokeMethod@62] - TEST METHOD FAILED connectionRetryTimeoutTest
     [exec]     [junit] java.io.IOException: Test injected Socket.connect() error.

     [exec]     [junit] 2015-04-20 20:25:20,473 [myid:] - INFO  [main:JUnit4ZKTestRunner$LoggedInvokeMethod@62] - TEST METHOD FAILED testTwoInvalidHostAddresses
     [exec]     [junit] java.lang.IllegalArgumentException: A HostProvider may not be empty!

     [exec]      [exec] Zookeeper_readOnly::testReadOnly : elapsed 4081 : OK
     [exec]      [exec] /home/jenkins/jenkins-slave/workspace/PreCommit-ZOOKEEPER-Build/trunk/src/c/tests/TestReconfig.cc:183: Assertion: equality assertion failed [Expected: 1, Actual  : 0]
{code}
, I had a quick look and the patch seems ok to me. I want to build with ant rpm before I +1 it. I can't do it from this computer., There are multiple jiras open for TestReconfig.cc, I think the latest is ZOOKEEPER-2152. In general, I agree that the changes here shouldn't cause test failures., lgtm. thanks.
Please re-assign this JIRA to you, Chris., Jerry, thanks for taking a look at the patch., +1, lgtm.

[~cnauroth]: are you planning on backporting this for 3.4 (so that we can include it with 3.4.7)? Thanks!, Merged:

trunk: http://svn.apache.org/viewvc?view=revision&revision=1677529
branch-3.5: http://svn.apache.org/viewvc?view=revision&revision=1677530

Leaving open until we get a patch for 3.4. Thanks [~cnauroth]!
, SUCCESS: Integrated in ZooKeeper-trunk #2681 (See [https://builds.apache.org/job/ZooKeeper-trunk/2681/])
ZOOKEEPER-2124 Allow Zookeeper version string to have underscore '_'

(Chris Nauroth via rgs) (rgs: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1677529)
* /zookeeper/trunk/CHANGES.txt
* /zookeeper/trunk/build.xml
* /zookeeper/trunk/src/contrib/zkpython/build.xml
, [~rgs], thank you for the commit.  I'm attaching a branch-3.4 patch.  The patch command was able to apply the trunk patch with a bit of fuzzing, so the differences in the branch-3.4 patch file are just cosmetic.

Just as a reminder, I had left an earlier comment explaining that the rpm build doesn't fully work without also applying some spec file patches that had turned up on the mailing list a while ago.

https://issues.apache.org/jira/browse/ZOOKEEPER-2124?focusedCommentId=14503481&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-14503481

http://mail-archives.apache.org/mod_mbox/zookeeper-user/201212.mbox/%3C50D2D481.8010507@pt-consulting.eu%3E

I didn't include them in my original patch, because I wanted to make sure the original author received credit.  For reference, I'm attaching a separate patch file that consolidates those spec file changes from the mailing list., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12730211/zookeeper-rpm-spec-files.patch
  against trunk revision 1677529.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2675//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2675//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2675//console

This message is automatically generated., +1 for the 3.4 patch. Thanks Chris!, branch-3.4: http://svn.apache.org/viewvc?view=revision&revision=1681418, Raul and Michi, thank you for the reviews and the commit.]