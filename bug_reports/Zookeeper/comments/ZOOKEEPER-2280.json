[Submitting a first cut to review., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12762626/ZOOKEEPER-2280.patch
  against trunk revision 1705482.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    -1 findbugs.  The patch appears to introduce 2 new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2887//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2887//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2887//console

This message is automatically generated., Thanks for the patch [~eribeiro]. A few nits:

In:

{code}
+                LOG.error("Too many connections from " + addr + " - max is " + maxClientCnxns);
{code}

can we please us interpolation ({}) instead of concatenation (+)?

After that line, in:

{code}
+                cnxn.close();
+                ctx.getChannel().close().awaitUninterruptibly();
{code}

Can any of that throw anything? If so, should we - silently - catch that and ignore?

In getClientCnxnCount:

{code}
+            if (s == null) return 0;
+                return s.size();
{code}

you can do it in one line (or use braces if you want multiple lines):

{code}
return s == null ? 0 : s.size();
{code}

In testMaxClientConnections() a small nit:

{code}
+    @Test(timeout = 40000)
+         public void testMaxClientConnections() throws Exception {
{code}

with indentation.

In that file as well, lets try not to sleep:

{code}
+            TestableZooKeeper[] clients = new TestableZooKeeper[CLIENTS];
+            for (int i = 0; i < CLIENTS; i++) {
+                clients[i] = new TestableZooKeeper("127.0.0.1:" + CLIENT_PORT, 3000, new CountdownWatcher());
+            }
+
+            Thread.sleep(5000);
+
+            assertEquals(MAX_CLIENT_CONN, scf.getNumAliveConnections());
{code}

I guess you are sleeping to wait for the clients[] to be connnected? Calling waitForConnected for each would a worse, so how about implementing a Watcher that counts the KeeperState.SyncConnected events seen. And then you can wait for that watcher to reach CLIENTS.

Super nit, in:

{code}
+        }
+        finally {
+            scf.shutdown();
+            zks.shutdown();
+        }
{code}

closing curly brace and finally in the same line pls (and ditto in testConnections()), i.e.:

{code}
} finally {
  scf.shutdown();
  zks.shutdown();
}
{code}

Finally, testConnections() and testMaxConnections() are pretty much the same except one asserts MAX_CLIENT_CONN == connected and the other one asserts CLIENTS == connected. Can we put the body of these tests in a helper (i.e.: testConns) and just call it with the limit we want to check?

Thanks!, GitHub user eribeiro opened a pull request:

    https://github.com/apache/zookeeper/pull/46

    ZOOKEEPER-2280: NettyServerCnxnFactory doesn't honor maxClientCnxns p…

    …aram

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/eribeiro/zookeeper ZOOKEEPER-2280

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/zookeeper/pull/46.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #46
    
----
commit d430e1c2dbdf774177fcd8f96d014b28435d1a94
Author: Edward Ribeiro <edward.ribeiro@gmail.com>
Date:   2015-09-28T01:55:36Z

    ZOOKEEPER-2280: NettyServerCnxnFactory doesn't honor maxClientCnxns param

----
, Hi [~rgs], thanks for the review. I addressed your review points.

{quote}
    cnxn.close();
   ctx.getChannel().close().awaitUninterruptibly();

Can any of that throw anything? If so, should we - silently - catch that and ignore?
{quote}

*Afaik, it doesn't throw anything but I am gonna double check that asap!*

{{NIOServerCnxnFactory}} throws an exception when the connection is refused. Throwing an exception in {{NettyServerCnxnFactory}} would still let the connection proceed, so I opted for explicitly close the connection and log the error. _Please_, I would like to hear from you guys ([~phunt]?) if this is the right way of doing so...

I implemented the Watcher to keep track of the connections with a CountDownLatch, but the initial value of this CountDownLatch has to be the max number of accepted connections, because otherwise the Thread will hang (as the patch refuses connections beyond that limit). 

Finally, I have solved two Findbugs issues that were created when I changed {{ipMap}} in {{NettyServerCnxnFactory}} from {{Map}} to a  {{ConcurrentMap}}. Please, let me know what you think. You can see all those changes on the github PR above. Cheers!, The PR looks great [~eribeiro]! Added just two more nits about style and we are good to go.

Can you squash it all into 1 patch and upload it here so that Jenkins can run? I'll merge it after that passes. Thanks!, Hi [~rgs], addressed your review comments, so I am uploading a new version of the patch. _Please_, Let me know if I miss something. Thanks!, -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12764119/ZOOKEEPER-2280.2.patch
  against trunk revision 1705482.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    -1 contrib tests.  The patch failed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2897//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2897//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2897//console

This message is automatically generated., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12764119/ZOOKEEPER-2280.2.patch
  against trunk revision 1755379.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3339//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3339//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3339//console

This message is automatically generated., Github user eribeiro closed the pull request at:

    https://github.com/apache/zookeeper/pull/46
, GitHub user eribeiro opened a pull request:

    https://github.com/apache/zookeeper/pull/77

    ZOOKEEPER-2280: NettyServerCnxnFactory doesn't honor maxClientCnxns p…

    …aram

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/eribeiro/zookeeper ZOOKEEPER-2280

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/zookeeper/pull/77.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #77
    
----
commit 59f4d58640190773722d2c6afd56aa60703c934c
Author: Edward Ribeiro <edward.ribeiro@gmail.com>
Date:   2015-09-28T01:55:36Z

    ZOOKEEPER-2280: NettyServerCnxnFactory doesn't honor maxClientCnxns param

----
, Hi [~eribeiro], I verified the patch https://github.com/apache/zookeeper/pull/77.patch. Basic Functionality works fine, it limits the number of the client connections based on configured value. But there is problem with the default value.
what is the purpose of {{int maxClientCnxns = -1;}}. Do you want to disable maxClientCnxns feature in NettyServerCnxnFactory by default ?, Yup. This was one of my latest changes, but I will  revert it to its previous value (60)., variable maxClientCnxns is common between  NettyServerCnxnFactory and NIOServerCnxnFactory.
I think we should move  maxClientCnxns to ServerCnxnFactory from NettyServerCnxnFactory and NIOServerCnxnFactory, Agree, sounds very nice to do so., Thanks for the patch [~eribeiro]. I've left some comments in your PR #77. It also sounds like you need to rebase the patch., GitHub user eribeiro opened a pull request:

    https://github.com/apache/zookeeper/pull/208

    ZOOKEEPER-2280: NettyServerCnxnFactory doesn't implement maxClientCnxns

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/eribeiro/zookeeper ZOOKEEPER-2280

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/zookeeper/pull/208.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #208
    
----
commit ceaa5a2f0cf851620a6e61a84e597d30d42da131
Author: Edward Ribeiro <edward.ribeiro@gmail.com>
Date:   2017-03-25T03:59:12Z

    ZOOKEEPER-2280: NettyServerCnxnFactory doesn't implement maxClientCnxns

----
, Github user eribeiro commented on the issue:

    https://github.com/apache/zookeeper/pull/77
  
    Closing this PR as the patch has moved to https://github.com/apache/zookeeper/pull/208 (still needs to address review comments tough). 
, Github user eribeiro closed the pull request at:

    https://github.com/apache/zookeeper/pull/77
, Github user eribeiro commented on a diff in the pull request:

    https://github.com/apache/zookeeper/pull/208#discussion_r108027783
  
    --- Diff: src/java/main/org/apache/zookeeper/server/NettyServerCnxnFactory.java ---
    @@ -109,6 +110,20 @@ public void channelConnected(ChannelHandlerContext ctx,
                         zkServer, NettyServerCnxnFactory.this);
                 ctx.setAttachment(cnxn);
     
    +            InetAddress addr = ((InetSocketAddress)cnxn.channel.getRemoteAddress()).getAddress();
    +            Set<NettyServerCnxn> s = ipMap.get(addr);
    +            if (s != null) {
    +                synchronized (s) {
    +                    int cnxncount = s.size();
    +                    if (maxClientCnxns > 0 && cnxncount >= maxClientCnxns) {
    +                        LOG.warn("Closed new connection from address {} ({} connections established) - max is {}",
    +                                addr, cnxncount, maxClientCnxns);
    +                        cnxn.close();
    +                        ctx.getChannel().close().awaitUninterruptibly();
    --- End diff --
    
    TODO: double-check that this is the right order of closing cnxn and channel
, Github user eribeiro commented on a diff in the pull request:

    https://github.com/apache/zookeeper/pull/208#discussion_r108027802
  
    --- Diff: src/java/main/org/apache/zookeeper/server/NettyServerCnxn.java ---
    @@ -100,11 +101,15 @@ public void close() {
                             + Long.toHexString(sessionId));
                 }
     
    -            synchronized (factory.ipMap) {
    -                Set<NettyServerCnxn> s =
    -                    factory.ipMap.get(((InetSocketAddress)channel
    -                            .getRemoteAddress()).getAddress());
    -                s.remove(this);
    +            InetAddress address = ((InetSocketAddress) channel.getRemoteAddress()).getAddress();
    +            Set<NettyServerCnxn> s = factory.ipMap.get(address);
    --- End diff --
    
    TODO: "This management of the ipMap looks like something that should be done by the factory, not the connection. should we move this logic to the factory?"
, +1 overall.  GitHub Pull Request  Build
      

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 3.0.1) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/480//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/480//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/480//console

This message is automatically generated., -1 overall.  GitHub Pull Request  Build
      

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 3.0.1) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/481//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/481//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/481//console

This message is automatically generated., Github user vincentpoon commented on a diff in the pull request:

    https://github.com/apache/zookeeper/pull/208#discussion_r108028137
  
    --- Diff: src/java/main/org/apache/zookeeper/server/NettyServerCnxn.java ---
    @@ -100,11 +101,15 @@ public void close() {
                             + Long.toHexString(sessionId));
                 }
     
    -            synchronized (factory.ipMap) {
    -                Set<NettyServerCnxn> s =
    -                    factory.ipMap.get(((InetSocketAddress)channel
    -                            .getRemoteAddress()).getAddress());
    -                s.remove(this);
    +            InetAddress address = ((InetSocketAddress) channel.getRemoteAddress()).getAddress();
    +            Set<NettyServerCnxn> s = factory.ipMap.get(address);
    +            if (s != null) {
    +                synchronized (s) {
    --- End diff --
    
    Do you need the synchronized here if you're using Collections.synchronizedSet already?
, Github user vincentpoon commented on a diff in the pull request:

    https://github.com/apache/zookeeper/pull/208#discussion_r108028293
  
    --- Diff: src/java/main/org/apache/zookeeper/server/NettyServerCnxnFactory.java ---
    @@ -109,6 +110,20 @@ public void channelConnected(ChannelHandlerContext ctx,
                         zkServer, NettyServerCnxnFactory.this);
                 ctx.setAttachment(cnxn);
     
    +            InetAddress addr = ((InetSocketAddress)cnxn.channel.getRemoteAddress()).getAddress();
    +            Set<NettyServerCnxn> s = ipMap.get(addr);
    +            if (s != null) {
    +                synchronized (s) {
    --- End diff --
    
    Same here - check if synchronized is needed
, Github user afine commented on a diff in the pull request:

    https://github.com/apache/zookeeper/pull/208#discussion_r108225920
  
    --- Diff: src/java/main/org/apache/zookeeper/server/NettyServerCnxnFactory.java ---
    @@ -170,7 +185,6 @@ public void messageReceived(ChannelHandlerContext ctx, MessageEvent e)
                     throw ex;
                 }
             }
    -
    --- End diff --
    
    unnecessary line removal
, Github user afine commented on a diff in the pull request:

    https://github.com/apache/zookeeper/pull/208#discussion_r108219703
  
    --- Diff: src/java/test/org/apache/zookeeper/server/NettyServerCnxnTest.java ---
    @@ -51,9 +65,9 @@ public void setUp() throws Exception {
          * 
          * @see <a href="https://issues.jboss.org/browse/NETTY-412">NETTY-412</a>
          */
    -    @Test(timeout = 40000)
    +    @Test(timeout = 30000)
    --- End diff --
    
    why was this changed?
, Github user afine commented on a diff in the pull request:

    https://github.com/apache/zookeeper/pull/208#discussion_r108229036
  
    --- Diff: src/java/main/org/apache/zookeeper/server/NettyServerCnxnFactory.java ---
    @@ -109,6 +110,20 @@ public void channelConnected(ChannelHandlerContext ctx,
                         zkServer, NettyServerCnxnFactory.this);
                 ctx.setAttachment(cnxn);
     
    +            InetAddress addr = ((InetSocketAddress)cnxn.channel.getRemoteAddress()).getAddress();
    +            Set<NettyServerCnxn> s = ipMap.get(addr);
    --- End diff --
    
    Not sure if this is an issue or not, but if multiple connections (from a new address) hit this line before reaching the next one, the maxclientcnxns will never be checked as factory.ipMap.get(address) will return null for all of the connections?
, Github user afine commented on a diff in the pull request:

    https://github.com/apache/zookeeper/pull/208#discussion_r108230180
  
    --- Diff: src/java/main/org/apache/zookeeper/server/NettyServerCnxnFactory.java ---
    @@ -524,17 +538,14 @@ public InetSocketAddress getLocalAddress() {
     
         private void addCnxn(NettyServerCnxn cnxn) {
             cnxns.add(cnxn);
    -        synchronized (ipMap){
    -            InetAddress addr =
    -                ((InetSocketAddress)cnxn.channel.getRemoteAddress())
    -                    .getAddress();
    -            Set<NettyServerCnxn> s = ipMap.get(addr);
    -            if (s == null) {
    -                s = new HashSet<NettyServerCnxn>();
    -            }
    -            s.add(cnxn);
    -            ipMap.put(addr,s);
    +
    +        InetAddress addr = ((InetSocketAddress)cnxn.channel.getRemoteAddress()).getAddress();
    --- End diff --
    
    I think it may be cleaner to inline this method instead of casting again.
, Github user afine commented on a diff in the pull request:

    https://github.com/apache/zookeeper/pull/208#discussion_r108230944
  
    --- Diff: src/java/test/org/apache/zookeeper/server/NettyServerCnxnTest.java ---
    @@ -84,4 +98,78 @@ public void testSendCloseSession() throws Exception {
                 zk.close();
             }
         }
    +
    +    @Test(timeout = 30000)
    +    public void testMaxClientConnectionsReached() throws Exception {
    +        final int maxClientCnxns = 4;
    +        final int numClients = 10;
    +        createAndTestConnections(numClients, maxClientCnxns, maxClientCnxns);
    +    }
    +
    +    @Test(timeout = 30000)
    +    public void testMaxClientConnectionsDisabled() throws Exception {
    +        final int maxClientCnxns = 0; // disabled cnxns limit
    +        final int numClients = 10;
    +        createAndTestConnections(numClients, maxClientCnxns, numClients);
    +    }
    +
    +    private void createAndTestConnections(int numClients, int maxClientCnxns, int cnxnsAccepted) throws Exception {
    +
    +        File tmpDir = ClientBase.createTmpDir();
    +        final int CLIENT_PORT = PortAssignment.unique();
    +
    +        ZooKeeperServer zks = new ZooKeeperServer(tmpDir, tmpDir, 3000);
    +        ServerCnxnFactory scf = ServerCnxnFactory.createFactory(CLIENT_PORT, maxClientCnxns);
    +        scf.startup(zks);
    +
    +        try {
    +            assertTrue("waiting for server being up",
    +                    ClientBase.waitForServerUp("127.0.0.1:" + CLIENT_PORT, CONNECTION_TIMEOUT));
    +            assertTrue("Didn't instantiate ServerCnxnFactory with NettyServerCnxnFactory!",
    +                    scf instanceof NettyServerCnxnFactory);
    +
    +            assertEquals(0, scf.getNumAliveConnections());
    +
    +            assertTrue(cnxnsAccepted <= numClients);
    +
    +            final CountDownLatch countDownLatch = new CountDownLatch(cnxnsAccepted);
    +
    +            TestableZooKeeper[] clients = new TestableZooKeeper[numClients];
    +            for (int i = 0; i < numClients; i++) {
    +                clients[i] = new TestableZooKeeper("127.0.0.1:" + CLIENT_PORT, 3000, new Watcher() {
    +                    @Override
    +                    public void process(WatchedEvent event)
    +                    {
    +                        if (event.getState() == Event.KeeperState.SyncConnected) {
    +                           countDownLatch.countDown();
    +                        }
    +                    }
    +                });
    +            }
    +
    +            countDownLatch.await();
    +
    +            assertEquals(cnxnsAccepted, scf.getNumAliveConnections());
    +
    +            ConcurrentMap<InetAddress, Set<NettyServerCnxn>> ipMap = ((NettyServerCnxnFactory) scf).ipMap;
    +            assertEquals(1, ipMap.size());
    +            Set<NettyServerCnxn> set = ipMap.get(ipMap.keySet().toArray()[0]);
    +            assertEquals(cnxnsAccepted, set.size());
    +
    +            int connected = 0;
    +            for (int i = 0; i < numClients; i++) {
    +                if (clients[i].getState().isConnected()) connected++;
    --- End diff --
    
    nit: I think we prefer multi-line if statements.
, Github user afine commented on a diff in the pull request:

    https://github.com/apache/zookeeper/pull/208#discussion_r108229544
  
    --- Diff: src/java/main/org/apache/zookeeper/server/NettyServerCnxn.java ---
    @@ -100,11 +101,15 @@ public void close() {
                             + Long.toHexString(sessionId));
                 }
     
    -            synchronized (factory.ipMap) {
    -                Set<NettyServerCnxn> s =
    -                    factory.ipMap.get(((InetSocketAddress)channel
    -                            .getRemoteAddress()).getAddress());
    -                s.remove(this);
    +            InetAddress address = ((InetSocketAddress) channel.getRemoteAddress()).getAddress();
    +            Set<NettyServerCnxn> s = factory.ipMap.get(address);
    --- End diff --
    
    I agree that that ipMap management would be cleaner if it was handled in the factory.
, Github user afine commented on a diff in the pull request:

    https://github.com/apache/zookeeper/pull/208#discussion_r108220399
  
    --- Diff: src/java/test/org/apache/zookeeper/server/NettyServerCnxnTest.java ---
    @@ -28,6 +32,16 @@
     import org.slf4j.Logger;
     import org.slf4j.LoggerFactory;
     
    +import java.io.File;
    +import java.net.InetAddress;
    +import java.util.Set;
    +import java.util.concurrent.ConcurrentMap;
    +import java.util.concurrent.CountDownLatch;
    +
    +import static junit.framework.TestCase.assertEquals;
    +import static junit.framework.TestCase.assertNotNull;
    --- End diff --
    
    i don't believe this import is being used
, Github user afine commented on a diff in the pull request:

    https://github.com/apache/zookeeper/pull/208#discussion_r108231907
  
    --- Diff: src/java/test/org/apache/zookeeper/server/NettyServerCnxnTest.java ---
    @@ -84,4 +98,78 @@ public void testSendCloseSession() throws Exception {
                 zk.close();
             }
         }
    +
    +    @Test(timeout = 30000)
    +    public void testMaxClientConnectionsReached() throws Exception {
    +        final int maxClientCnxns = 4;
    +        final int numClients = 10;
    +        createAndTestConnections(numClients, maxClientCnxns, maxClientCnxns);
    +    }
    +
    +    @Test(timeout = 30000)
    +    public void testMaxClientConnectionsDisabled() throws Exception {
    +        final int maxClientCnxns = 0; // disabled cnxns limit
    +        final int numClients = 10;
    +        createAndTestConnections(numClients, maxClientCnxns, numClients);
    +    }
    +
    +    private void createAndTestConnections(int numClients, int maxClientCnxns, int cnxnsAccepted) throws Exception {
    +
    +        File tmpDir = ClientBase.createTmpDir();
    +        final int CLIENT_PORT = PortAssignment.unique();
    +
    +        ZooKeeperServer zks = new ZooKeeperServer(tmpDir, tmpDir, 3000);
    --- End diff --
    
    it seems strange to me to have some tests that start their on zookeeper server and another which uses the one provided by the @before from the superclass. I think we should pick one approach per test class. What do you think?
, Github user eribeiro commented on a diff in the pull request:

    https://github.com/apache/zookeeper/pull/208#discussion_r108239884
  
    --- Diff: src/java/test/org/apache/zookeeper/server/NettyServerCnxnTest.java ---
    @@ -51,9 +65,9 @@ public void setUp() throws Exception {
          * 
          * @see <a href="https://issues.jboss.org/browse/NETTY-412">NETTY-412</a>
          */
    -    @Test(timeout = 40000)
    +    @Test(timeout = 30000)
    --- End diff --
    
    Due to @fpj previous review on previous incarnation this patch: https://github.com/apache/zookeeper/pull/77/files#r80003749 (sorry, should have put the original link).
, Github user eribeiro commented on a diff in the pull request:

    https://github.com/apache/zookeeper/pull/208#discussion_r108240078
  
    --- Diff: src/java/main/org/apache/zookeeper/server/NettyServerCnxnFactory.java ---
    @@ -170,7 +185,6 @@ public void messageReceived(ChannelHandlerContext ctx, MessageEvent e)
                     throw ex;
                 }
             }
    -
    --- End diff --
    
    Ops, again Flavio's previous review comment: https://github.com/apache/zookeeper/pull/77/files#r80004333 (should have put referenced this here).
, Github user eribeiro commented on a diff in the pull request:

    https://github.com/apache/zookeeper/pull/208#discussion_r108242052
  
    --- Diff: src/java/main/org/apache/zookeeper/server/NettyServerCnxn.java ---
    @@ -100,11 +101,15 @@ public void close() {
                             + Long.toHexString(sessionId));
                 }
     
    -            synchronized (factory.ipMap) {
    -                Set<NettyServerCnxn> s =
    -                    factory.ipMap.get(((InetSocketAddress)channel
    -                            .getRemoteAddress()).getAddress());
    -                s.remove(this);
    +            InetAddress address = ((InetSocketAddress) channel.getRemoteAddress()).getAddress();
    +            Set<NettyServerCnxn> s = factory.ipMap.get(address);
    +            if (s != null) {
    +                synchronized (s) {
    --- End diff --
    
    Yeah... in the context of this call I think it is not necessary to synchronize here if -- as you said -- we use a synchronized set (**currently it's not**). I would also change `ipMap` to be a `ConcurrentMap` but unsure if it's worth the effort, tbh. :thinking: thoughts?
, Github user eribeiro commented on a diff in the pull request:

    https://github.com/apache/zookeeper/pull/208#discussion_r108242277
  
    --- Diff: src/java/main/org/apache/zookeeper/server/NettyServerCnxnFactory.java ---
    @@ -109,6 +110,20 @@ public void channelConnected(ChannelHandlerContext ctx,
                         zkServer, NettyServerCnxnFactory.this);
                 ctx.setAttachment(cnxn);
     
    +            InetAddress addr = ((InetSocketAddress)cnxn.channel.getRemoteAddress()).getAddress();
    +            Set<NettyServerCnxn> s = ipMap.get(addr);
    +            if (s != null) {
    +                synchronized (s) {
    --- End diff --
    
    If we change `s` to be a synchronized set I think we can get rid of this synchronized block. 
, Github user eribeiro commented on a diff in the pull request:

    https://github.com/apache/zookeeper/pull/208#discussion_r108242887
  
    --- Diff: src/java/test/org/apache/zookeeper/server/NettyServerCnxnTest.java ---
    @@ -84,4 +98,78 @@ public void testSendCloseSession() throws Exception {
                 zk.close();
             }
         }
    +
    +    @Test(timeout = 30000)
    +    public void testMaxClientConnectionsReached() throws Exception {
    +        final int maxClientCnxns = 4;
    +        final int numClients = 10;
    +        createAndTestConnections(numClients, maxClientCnxns, maxClientCnxns);
    +    }
    +
    +    @Test(timeout = 30000)
    +    public void testMaxClientConnectionsDisabled() throws Exception {
    +        final int maxClientCnxns = 0; // disabled cnxns limit
    +        final int numClients = 10;
    +        createAndTestConnections(numClients, maxClientCnxns, numClients);
    +    }
    +
    +    private void createAndTestConnections(int numClients, int maxClientCnxns, int cnxnsAccepted) throws Exception {
    +
    +        File tmpDir = ClientBase.createTmpDir();
    +        final int CLIENT_PORT = PortAssignment.unique();
    +
    +        ZooKeeperServer zks = new ZooKeeperServer(tmpDir, tmpDir, 3000);
    --- End diff --
    
    +1. :+1: 
, Github user eribeiro commented on a diff in the pull request:

    https://github.com/apache/zookeeper/pull/208#discussion_r108242965
  
    --- Diff: src/java/test/org/apache/zookeeper/server/NettyServerCnxnTest.java ---
    @@ -84,4 +98,78 @@ public void testSendCloseSession() throws Exception {
                 zk.close();
             }
         }
    +
    +    @Test(timeout = 30000)
    +    public void testMaxClientConnectionsReached() throws Exception {
    +        final int maxClientCnxns = 4;
    +        final int numClients = 10;
    +        createAndTestConnections(numClients, maxClientCnxns, maxClientCnxns);
    +    }
    +
    +    @Test(timeout = 30000)
    +    public void testMaxClientConnectionsDisabled() throws Exception {
    +        final int maxClientCnxns = 0; // disabled cnxns limit
    +        final int numClients = 10;
    +        createAndTestConnections(numClients, maxClientCnxns, numClients);
    +    }
    +
    +    private void createAndTestConnections(int numClients, int maxClientCnxns, int cnxnsAccepted) throws Exception {
    +
    +        File tmpDir = ClientBase.createTmpDir();
    +        final int CLIENT_PORT = PortAssignment.unique();
    +
    +        ZooKeeperServer zks = new ZooKeeperServer(tmpDir, tmpDir, 3000);
    +        ServerCnxnFactory scf = ServerCnxnFactory.createFactory(CLIENT_PORT, maxClientCnxns);
    +        scf.startup(zks);
    +
    +        try {
    +            assertTrue("waiting for server being up",
    +                    ClientBase.waitForServerUp("127.0.0.1:" + CLIENT_PORT, CONNECTION_TIMEOUT));
    +            assertTrue("Didn't instantiate ServerCnxnFactory with NettyServerCnxnFactory!",
    +                    scf instanceof NettyServerCnxnFactory);
    +
    +            assertEquals(0, scf.getNumAliveConnections());
    +
    +            assertTrue(cnxnsAccepted <= numClients);
    +
    +            final CountDownLatch countDownLatch = new CountDownLatch(cnxnsAccepted);
    +
    +            TestableZooKeeper[] clients = new TestableZooKeeper[numClients];
    +            for (int i = 0; i < numClients; i++) {
    +                clients[i] = new TestableZooKeeper("127.0.0.1:" + CLIENT_PORT, 3000, new Watcher() {
    +                    @Override
    +                    public void process(WatchedEvent event)
    +                    {
    +                        if (event.getState() == Event.KeeperState.SyncConnected) {
    +                           countDownLatch.countDown();
    +                        }
    +                    }
    +                });
    +            }
    +
    +            countDownLatch.await();
    +
    +            assertEquals(cnxnsAccepted, scf.getNumAliveConnections());
    +
    +            ConcurrentMap<InetAddress, Set<NettyServerCnxn>> ipMap = ((NettyServerCnxnFactory) scf).ipMap;
    +            assertEquals(1, ipMap.size());
    +            Set<NettyServerCnxn> set = ipMap.get(ipMap.keySet().toArray()[0]);
    +            assertEquals(cnxnsAccepted, set.size());
    +
    +            int connected = 0;
    +            for (int i = 0; i < numClients; i++) {
    +                if (clients[i].getState().isConnected()) connected++;
    --- End diff --
    
    Oops, indeed! +1.
, Github user eribeiro commented on a diff in the pull request:

    https://github.com/apache/zookeeper/pull/208#discussion_r108255892
  
    --- Diff: src/java/main/org/apache/zookeeper/server/NettyServerCnxnFactory.java ---
    @@ -109,6 +110,20 @@ public void channelConnected(ChannelHandlerContext ctx,
                         zkServer, NettyServerCnxnFactory.this);
                 ctx.setAttachment(cnxn);
     
    +            InetAddress addr = ((InetSocketAddress)cnxn.channel.getRemoteAddress()).getAddress();
    +            Set<NettyServerCnxn> s = ipMap.get(addr);
    --- End diff --
    
    Good catch! Congrats! :smiley:
    
    Now, I am a bit unsure if this:
    
    * this is a real issue and/or worth fixing;
    * how to achieve a good compromise without entangling the logic too much.
    
    Wdyt?
, Github user eribeiro commented on a diff in the pull request:

    https://github.com/apache/zookeeper/pull/208#discussion_r108256234
  
    --- Diff: src/java/main/org/apache/zookeeper/server/NettyServerCnxnFactory.java ---
    @@ -524,17 +538,14 @@ public InetSocketAddress getLocalAddress() {
     
         private void addCnxn(NettyServerCnxn cnxn) {
             cnxns.add(cnxn);
    -        synchronized (ipMap){
    -            InetAddress addr =
    -                ((InetSocketAddress)cnxn.channel.getRemoteAddress())
    -                    .getAddress();
    -            Set<NettyServerCnxn> s = ipMap.get(addr);
    -            if (s == null) {
    -                s = new HashSet<NettyServerCnxn>();
    -            }
    -            s.add(cnxn);
    -            ipMap.put(addr,s);
    +
    +        InetAddress addr = ((InetSocketAddress)cnxn.channel.getRemoteAddress()).getAddress();
    --- End diff --
    
    Indeed, there's too much call for casting in this class already. Are you suggesting to extract this line into a method?
, Github user afine commented on a diff in the pull request:

    https://github.com/apache/zookeeper/pull/208#discussion_r108256938
  
    --- Diff: src/java/main/org/apache/zookeeper/server/NettyServerCnxnFactory.java ---
    @@ -524,17 +538,14 @@ public InetSocketAddress getLocalAddress() {
     
         private void addCnxn(NettyServerCnxn cnxn) {
             cnxns.add(cnxn);
    -        synchronized (ipMap){
    -            InetAddress addr =
    -                ((InetSocketAddress)cnxn.channel.getRemoteAddress())
    -                    .getAddress();
    -            Set<NettyServerCnxn> s = ipMap.get(addr);
    -            if (s == null) {
    -                s = new HashSet<NettyServerCnxn>();
    -            }
    -            s.add(cnxn);
    -            ipMap.put(addr,s);
    +
    +        InetAddress addr = ((InetSocketAddress)cnxn.channel.getRemoteAddress()).getAddress();
    --- End diff --
    
    we can pass the InetAddress as a param?
, Github user afine commented on a diff in the pull request:

    https://github.com/apache/zookeeper/pull/208#discussion_r108258656
  
    --- Diff: src/java/main/org/apache/zookeeper/server/NettyServerCnxnFactory.java ---
    @@ -109,6 +110,20 @@ public void channelConnected(ChannelHandlerContext ctx,
                         zkServer, NettyServerCnxnFactory.this);
                 ctx.setAttachment(cnxn);
     
    +            InetAddress addr = ((InetSocketAddress)cnxn.channel.getRemoteAddress()).getAddress();
    +            Set<NettyServerCnxn> s = ipMap.get(addr);
    --- End diff --
    
    So I can't imagine this causing much more than the occasional extra single connection, but I do think it is worth fixing.
    
    My feeling here is that if we move the ipMap logic to the factory this should be easier to fix as synchronization in a singleton is much simpler than trying to figure out what Netty does with these CnxnChannelHandler objects.
]