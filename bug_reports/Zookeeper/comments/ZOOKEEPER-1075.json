[The issue I think is this code below in FastLeaderElection.java
/**
                         * Before joining an established ensemble, verify that
                         * a majority are following the same leader.
                         */
                        outofelection.put(n.sid, new Vote(n.leader, n.zxid,
                                n.epoch, n.state));
                        if (termPredicate(outofelection, new Vote(n.leader,
                                n.zxid, n.epoch, n.state))
                                && checkLeader(outofelection, n.leader, n.epoch)) {



In the case above, there is only one entry in outofelection that does not constitute the majority. What we really need to check is whether outofelection.size() + 1(this server) forms a majority because once this server accepts the leader, the leader will have a majority of followers., Hi Vishal,

Can you please attach logs? Also, it might be good to use the trunk since there have been some relevant code changes (https://issues.apache.org/jira/browse/ZOOKEEPER-975).

Thanks,
Vishal :-), I am syncing from the trunk and trying it out. 
This issue looks different from the one in 975 - in this issue, we never reach convergence.

I lost the logs as I reran the server after implementing my fix. I'll upload the logs after rerunning it.

Thanks!, Hi Vishal, In the scenario you're describing, it sounds like 1 will eventually release leadership (it doesn't have enough supporters), and in that case both 1 and 2 are looking for a leader and a leader is elected regularly, no? , I did not see 1 relinquish the leadership when I ran the repro. 1 continued to think it was the leader and 2 continued to refuse accepting that and they stayed in this state indefinitely (over an hour I think), Could you post your configuration here, please? It sounds awkward that your leader was hanging there for over an hour without support for a quorum. It should have timed out., ah, that makes sense. I was using high timeouts because I was debugging some other issue. It doesn't occur with low timeouts (and I am embarrassed it didn't occur to me :). 

I am attaching the patch anyway if you folks think it is a nice optimization - this way the node can join right away instead of having to wait for the timeout and start a new election.

I'll close the Jira.

, This is a simple patch to optimize the case when a server that would restore the quorum is coming up.

Instead of leader giving up and leader election happening, this change will make the new server join the existing ensemble., Heh, no worries, Vishal. It is good already that you considered contributing.]