[would be great to get this into 3.3.2, I noticed another issue in this same area:

{noformat}

                        if ((k.readyOps() & SelectionKey.OP_ACCEPT) != 0) {
                            SocketChannel sc = ((ServerSocketChannel) k
                                    .channel()).accept();
                            InetAddress ia = sc.socket().getInetAddress();
                            int cnxncount = getClientCnxnCount(ia);
                            if (maxClientCnxns > 0 && cnxncount >= maxClientCnxns){
                                LOG.warn("Too many connections from " + ia
                                         + " - max is " + maxClientCnxns );
                                sc.close();
{noformat}

Notice that if macclientcnxns is exceeded we close the connection - iirc default linger time on linux is typically 60seconds. So if we have a mis-behaving client we can still run into trouble ("still" meaning we added this code to keep clients from DOS attacking the server) with TIME_WAIT state on the tcp connection.

We need to set the linger time down to 0 in this case before closing., moving this out to 3.3.3 and 3.4 for investigation., not a blocker. Moving it out of 3.4 release., - Fixed accept() code to trap errors so the select handler loop doesn't skip handling any other IO requests (such as, eg, closing a socket)
- Added rate limiting to error logging. Noticed when stressing the server with too many connections that the server was pegging on hammering the error logs
- Reproduced issue Patrick noted and fixed closing of too many connects from single client so they wouldn't park in CLOSE_WAIT, -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12522030/ZOOKEEPER-517.patch
  against trunk revision 1307644.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1028//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1028//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1028//console

This message is automatically generated., How tested:
  - set file descriptor limit low on server, started server
  - opened connections until no longer able to establish session
  - opened additional connections to set up large pool of pending accepts
  - closed connected session
  - verified pending accepts made it through

For max connections per client testing, set a low value and kept opening more than that # of connections from the same IP, verified that no longer see sockets parked in CLOSE_WAIT., Superseded and made obsolete by ZOOKEEPER-1504]