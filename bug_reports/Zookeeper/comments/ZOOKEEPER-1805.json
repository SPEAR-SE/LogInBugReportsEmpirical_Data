[This patch is missing a test case, but this is actually how I think we should be fixing this., I forgot to mention that it would be nice if [~abranzyck] and [~rgs] could comment and test this fix.

, Sorry but, according to my tests, your changes do not work. When doing a rolling upgrade of zookeeper 3.4.5 to the trunk with this patch applied, the third server fails to join the quorum after restart.
Since I had the setup ready, I tested this other patch and it seems to work., The "third" server is the third server in a quorum of 5.
There is a bit of crap in the end of the patch, but I think it doesn't do any harm. , I don't understand why it needs to be epoch - 1 for the rolling upgrade to work. I also don't understand why my changes didn't work in your setting (not that I have had time to test exhaustively). Could you post the logs please? , I think I get it now, in ZOOKEEPER-1732 we have made two fields "don't care" and we update the epoch value. The epoch value is causing the comparison to fail, but I think that the "don't care" values also have to be updated in the way I propose, otherwise the comparison will fail too, no? 

"newEpoch - 1" sounds like a hack to me, not a principled solution. I need to think a bit more about this one., What about this, [~abranzyck]?, I want to see what QA says (other than complaining about the absence of a test case)., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12611110/ZOOKEEPER-1805.patch
  against trunk revision 1535491.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1728//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1728//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1728//console

This message is automatically generated., Testing this now - thanks for the patch [~fpj]., [~fpj]: did a quick test and followers joined nicely - thanks!, Though a test case is still needed ;-), The reason why the changes in Vote are not required is because all the Votes inserted in "outofelection" have the same values for zxid and election epoch. So the comparison is already based only in the other fields of Vote.

The value "newEpoch - 1" works because we want to get back to the last accepted epoch of the leader, and the leader is sending the last accepted epoch plus one. The newEpoch that is sent from the Leader to all learners is calculated in "getEpochToPropose" in Leader.java. My interpretation of that method is that the new epoch will always be lastAcceptedEpoch plus one.

There are at least these other alternatives, but they look worse:
- ignoring also peerEpoch in the comparison. Which will have the risk of taking into account left-over votes of ensembles established before the current one.
- setting peerEpoch to any other value. Has the same problem that we are trying to fix.
- changing the protocol in order to send lastAcceptedEpoch (and maybe zxid and election epoch, since the protocol is changed anyway) instead of the new epoch.

I will provide the logs tomorrow., I sent that last comment without refreshing the page.
It seems the logs are not needed any longer, since the last patch fixes the problem.
My interpretation of your last patch is that you are not taking peerEpoch in the comparison. For outofelection all zxids equal Vote.DONTCARE, so the condition results in not using peerEpoch. That is the first option in my previous comment.
, Added unit tests. Thanks for having a look, guys., +1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12611251/ZOOKEEPER-1805.patch
  against trunk revision 1535491.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1729//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1729//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1729//console

This message is automatically generated., Patch looks correct to me - thanks for the swift response [~fpj]., Added one more test case., +1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12611390/ZOOKEEPER-1805.patch
  against trunk revision 1535491.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1730//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1730//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1730//console

This message is automatically generated., 2nd test looks fine to me as well. I guess you could DRY it up a bit by having:

{noformat}
HashMap<Long, Vote> getVotes(long a, long b) {
    	HashMap<Long, Vote> votes = new HashMap<Long, Vote>();
    	votes.put(0L, new Vote(4L, Vote.DONTCARE, Vote.DONTCARE, a, ServerState.FOLLOWING));
    	votes.put(1L, new Vote(4L, Vote.DONTCARE, Vote.DONTCARE, a, ServerState.FOLLOWING));
    	votes.put(3L, new Vote(4L, 10L, 10L, b, ServerState.FOLLOWING));
    	votes.put(4L, new Vote(4L, 10L, 10L, b, ServerState.LEADING));
        return votes;
}
{noformat}

but I guess copy/pasta is alright in test cases for readability (though I rather DRY it).  Thanks [~fpj]., yeah, I shouldn't have been lazy, thanks for pushing., +1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12611541/ZOOKEEPER-1805.patch
  against trunk revision 1535491.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1731//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1731//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1731//console

This message is automatically generated., [~abranzyck], are you ok with the patch too? could you both +1 it, please?, Uploading 3.4 patch., Small formatting change to the patch., +1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12611551/ZOOKEEPER-1805.patch
  against trunk revision 1535491.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1732//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1732//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1732//console

This message is automatically generated., +1
Thank you [~rgs] and [~fpj] for spotting this and the quick fix before release of 3.4.6.
Only a very mild suggestion, if you wish you could remove the changes introduced by ZOOKEEPER-1732 in Leader.java, Learner.java and QuorumPeer.java. I think they don't do anything significant anymore. Of course I might also be wrong, and the change would require testing things again, so ..., +1. , Thanks, guys.

bq. Only a very mild suggestion, if you wish you could remove the changes introduced by ZOOKEEPER-1732 in Leader.java, Learner.java and QuorumPeer.java.

I don't understand this comment. The change here simply detects that there is a mix of messages with and without don't care values, which must correspond to a rolling upgrade, so it ignores the corresponding fields and simply verifies that the epoch is greater. If this is right, then the changes of ZOOKEEPER-1732 are still required when everyone is sending don't care values. Am I missing anything? , As far as I can see, there is never a mix of messages with and without don't care values.
The don't care values never get sent over the network ... or at least that was not intentional.
I have noticed that the current value (-1) happens to be the same that was being used by default in Vote.java for some of the incomplete constructors, and this is why the value does appear in the traces sent by Raúl for the epoch (note that the epoch was not set to don't care value in this case). But it has nothing to do with the patch for ZOOKEEPER-1732. You can see that e.g. zxid does not have a don't care value in these traces.
What your change is doing is that if there is a don't care value, then it checks if the epoch is greater or equal between the vote with the don't care value and the other. All votes in the outofelection collection have don't care values, so the result is that the comparison for the epochs ignores the value of the epochs in all cases. Epoch may be greater of equal or smaller or equal for the comparison to be succesful when both votes being compared have don't care values.
The same result would have been achieved by setting the epoch to the don't care value when inserting the vote in the outofelection collection (and in the call to termPredicate) and not making any changes at all in the comparisons in Vote.java. And in that case also, the changes in learner.java leader.java and QuorumPeer.java are not good for anything any more, since all they do is setting the value of the epoch to a common value in Learners and Leader and that value is going to be ignored. That would be the approach that I would be taking to implement your proposal. For a test case, it would be enough to modify the test case added in ZOOKEEPER-1732 and just set the peerEpoch to any value, so that it is clear that this value is also ignored in the comparison. But as far as I can see, the current patch has the same behaviour, and the last decision of how to code behaviours is yours, so both solutions to this problem are fine for me.
If the decision was mine, I would go for setting epoch to newEpoch-1. Which might be (arguably) a bit hacky, but the hackery is actually only covering the case of the upgrade and it doesn't have any effect in other cases. Ignoring the epoch applies to all cases in which a new server joins an established ensemble and it might have (at least) the problem of votes of ensembles established with different epochs to be taken into account as if they belonged to the same ensemble. I don't like that too much, but failures don't seem likely and they might not cause problems, since even if the new server joins the wrong leader, this leader will not process any transaction unless it has acks from sufficient followers. So the potential problem seems to be only an small possibility of a delay when joining the right ensemble. That means both (newEpoch-1 and ignoring epoch) look to me as working solutions.
Sorry if that was too long, but I think it summarises all corners of my personal view of this issue. The short summary is "I am ok with this solution". If you want a patch with my alternative implementation of the option of ignoring the epoch, I can also prepare that., One mistake above: Epoch in the third paragraph is the election epoch (n.round), and this did happen to be set to don't care value both in the patch code and in the constructor in Vote.java. But that was only by chance anyway., bq. The don't care values never get sent over the network

How do you think we prevent don't care values to go over the network? I think they get inserted in election notifications and sent just the same.

bq.  All votes in the outofelection collection have don't care values

This is not necessarily the case when performing a rolling upgrade because we can have a mix of servers with and without ZOOKEEPER-1732.

bq. The same result would have been achieved by setting the epoch to the don't care value

The patch I proposed should only allow different epoch values if the there is a mix of don't care and regular values. Also, when two notifications n and n' are being compared (Vote.equals), n has don't care values and n' doesn't, it also makes sure that the epoch in n is at least as large as the one in n'. It doesn't sound like this achieves the same effect as your proposal, no?

, Something went wrong when I generated the previous patch, so I deleted it. This one seems fine., Don't care values don't go over the network because they are never sent. The only vote that gets sent over the network in the block where don't care values are used, is the one returned by the function lookForLeader, and that one doesn't have any don't care value:
{noformat}
                            Vote endVote = new Vote(n.leader, n.zxid, n.peerEpoch);
                            leaveInstance(endVote);
                            return endVote;
{noformat}
All votes in the outofelection collection of a server with the ZOOKEEPER-1732 patch applied have don't care values. None of the votes in the outofelection collection of servers without the ZOOKEEPER-1732 patch applied have don't care values. I was talking about the first case, in any case, there is never a mixture of the two *in a single zookeeper server* which is where they get compared. As you can see in the line where votes are inserted in the outofelection collection (patch applied), all votes inserted there have the don't care value (first sentence below):
{noformat}
                        outofelection.put(n.sid, new Vote(n.leader, 
                                IGNOREVALUE, IGNOREVALUE, n.peerEpoch, n.state));
                        if (termPredicate(outofelection, new Vote(n.leader,
                                IGNOREVALUE, IGNOREVALUE, n.peerEpoch, n.state))
                                && checkLeader(outofelection, n.leader, IGNOREVALUE)) {
{noformat}, Thanks for the insight, [~abranzyck]. I´m trying out a few things., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12611846/ZOOKEEPER-1805.patch
  against trunk revision 1535491.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1736//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1736//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1736//console

This message is automatically generated., Another attempt., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12611853/ZOOKEEPER-1805.patch
  against trunk revision 1535491.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1737//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1737//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1737//console

This message is automatically generated., Here is a new patch after some thinking and feedback from German. It ignores the epoch in the comparison when the votes come from servers that are not looking, but I have done now in a way that we don't need to define a don't care value any longer. I'm not entirely happy with the test case, though., Thank you for considering my comments. Here are a few more ...
Personally, I would check that both Votes are out of the election before ignoring the fields in Vote.java. And I believe peerEpoch should be taken into account for normal votes:
{noformat}
>> +        if ((state != ServerState.LOOKING) && (other.state != ServerState.LOOKING)) {^M
 +           return (id == other.id);^M
 +        } else {^M
 +           return (id == other.id^M
 +                   && (zxid == other.zxid) ^M
 +                   && (electionEpoch == other.electionEpoch)
>> +               && (peerEpoch == other.peerEpoch));^M
 +        }^M
{noformat}
I think that the previous test case (testJoinInconsistentEnsemble in FLETest.java) would look better if we now change also the peerEpoch:
{noformat}
 +        Vote newVote = new Vote(leaderSid, zxid+100, electionEpoch+100, peerEpoch+100, state);
{noformat}
In this way, this test case also verifies the new changes.
As indicated before, I would also remove the method updateElectionVote in QuorumPeer.java and the line under the comment for ZOOKEEPER-1732 in Leader.java and Learner.java. The value of peerEpoch will be ignored, so updating it looks like a waste of time to me., It still bothers me that we can't distinguish between old and new notification messages. I was thinking about introducing a format version field so that we can get around this problem and make the check in the way proposed instead of working around it.

I have a patch mostly ready, but I'd like to know if this a direction that is ok to pursue. If this ok, then I can add a sub-task here so that we can work this out separately, before fixing this issue., I understand that you want to add a version field to notifications in order to know which come from a server that ignores zxid and electionEpoch for an established ensemble and which come from a server without this change, corrrect?
Once that is done, then it would be possible to make the correct comparison for the epoch when joining an ensemble with a mixture of updated and not-updated servers.
That sounds good for me. Having a version field will help in the future if any other change is required in notifications for fast leader election. For this problem, it means that the comparison between votes only needs to be different for the special case in which there is a mixture of servers, and it doesn't need to be modified at all for the rest of the cases, which seems to be a safer approach., Is this still a blocker for 3.4.6? Any updates?, This is not a blocker for 3.4.6 any longer, the sub-tasks for 3.4.6 have been checked in. The reason why this issue is still open is that we haven't got the trunk changes in yet. , Flavio, can we move this to 3.4.7? This looks like the last remaining 3.4.6 issue. Yay!, Check my previous comments, this is not an issue for the 3.4 branch any longer. The fix version is 3.4.6 for the 3.4 branch. We simply need to get the trunk version done. ;-), Oh I see. That's even better!, I have promoted the sub-tasks for 3.5.0 to issues so that I can resolve and close this one., Missed one issue when closing issues for release 3.4.6.]