[s/ack/acl/, fixed spelling, added code snippet in question, Trivial patch to fix the issue., +1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12492215/ZOOKEEPER-847.patch
  against trunk revision 1163106.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 12 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/480//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/480//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/480//console

This message is automatically generated., Shouldn't this be done for setAcl as well? I am a little worried that this changes the api signatures in 3.4. I dont see this as a very urgent fix to break compatibility just for this corner case. Others?, i'm also worried about changing the signature. i think this is an optimization to save the server from detecting the problem. its not just about the change, but none of the async methods throw exceptions. in reality, if we want to detect this at the client, we need to invoke the callback, which is a bit tricky due to threading issues. i think we should just allow the server to detect it as it currently happens., I don't think we should commit this patch as it currently stands for 3.x. We don't break api b/w compatibility outside of a major version change. 

Can we add this as "create2(...)throws .." (idea for a better name?) and leave create() as-is?

We'd also need to be explicit in the docs for create and create2 as to why create2 exists and when to use it.

It does seem like we should deprecate create(), although that's going to generate alot of deprecation warnings..., Moving this out to later, since this is a change in API (backward incompatible).]