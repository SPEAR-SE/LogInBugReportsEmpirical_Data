[We have marked LE deprecated in ZOOKEEPER-1153, and said that we would remove it in the next branch, so my suggestion is that we simply drop this test. Any concern about that?

I'm attaching in any case the logs for a run that failed., Hi [~fpj] I saw you mentioned that we could remove the this test because the code it is testing, the LeaderElection is deprecated. Should we just do that for this test, or you prefer we keep this test for now and remove it along with the LE code in future releases? What others think about this proposal? 

Anyway, the curios part of me looked at the problem briefly today and it can be a little bit easier reproducible if we increase the thread count, from 30 to 60, and can be hardly reproducible if I decrease the thread count from 30 to 5. Thread dump indicates that one or more LE threads were in WAITING state which implies they never bail out (that they never finds a leader for some reasons). Sounds another threading related issue., This test failed a lot recently - since the code it's testing is deprecated, I don't see much value of keeping the test around. Probably we should remove LeaderElection class along with the test too? This patch just removed testLE., +1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12832555/ZOOKEEPER-1932.patch
  against trunk revision f78061aafb19b102c37cb6d744ec6258d5f5b66e.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 2 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3479//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3479//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3479//console

This message is automatically generated., I'm +1 on this patch and on removing the LeaderElection class, although it might be better to remove the LeaderElection class on trunk only because earlier versions of 3.5 already contain it. What do you think?

cc [~hanm], [~fpj] Yes removing the class on master branch only sounds good., Patch to remove both deprecated LeaderElection class and associated tests., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12832786/ZOOKEEPER-1932.patch
  against trunk revision f78061aafb19b102c37cb6d744ec6258d5f5b66e.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 7 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    -1 findbugs.  The patch appears to introduce 1 new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3482//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3482//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3482//console

This message is automatically generated., GitHub user hanm opened a pull request:

    https://github.com/apache/zookeeper/pull/106

    ZOOKEEPER-1932: Remove deprecated LeaderElection class.

    The motivation of removing LeaderElection class:
    * It has been long deprecated and no one uses it.
    * Tests around it is flaky.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/hanm/zookeeper ZOOKEEPER-1932

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/zookeeper/pull/106.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #106
    
----
commit f6f1ad497c71b54ae8944e7d1b1726e66b8153f6
Author: Michael Han <hanm@cloudera.com>
Date:   2016-11-15T18:57:04Z

    ZOOKEEPER-1932: Remove deprecated LeaderElection class.

----
, -1 overall.  GitHub Pull Request  Build
      

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 7 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    -1 findbugs.  The patch appears to introduce 21 new Findbugs (version 3.0.1) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/71//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/71//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/71//console

This message is automatically generated., Github user lvfangmin commented on the issue:

    https://github.com/apache/zookeeper/pull/106
  
    Since we're deprecating the LeaderElection, should we also remove LeaderElection.java itself? Any reason we keep it there even no code is referencing it?
, Github user hanm commented on the issue:

    https://github.com/apache/zookeeper/pull/106
  
    @lvfangmin Good catch, thanks for looking at the PR. I can't remember why LeaderElection.java was not removed in the patch, let me double check before updating the PR.
, +1 overall.  GitHub Pull Request  Build
      

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 19 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 3.0.1) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/103//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/103//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/103//console

This message is automatically generated., Github user hanm commented on the issue:

    https://github.com/apache/zookeeper/pull/106
  
    PR updated:
    
    * Removed LeaderElection class that not referenced anywhere.
    * Fixed a couple of places in tests that still reference the LeaderElection algorithm. 
    
    Would be good to get this in as this LETest was one of most frequent flaky tests in recent builds. @rgs1 @rakeshadr @fpj if you have cycles please review and merge if it's lgty.
, Github user hanm commented on the issue:

    https://github.com/apache/zookeeper/pull/106
  
    Need another committer view to merge this in; @arshadmohammad, can you please review this? Flavio had +1 on an older version of the patch as commented in JIRA, and this is only going to trunk.
, Github user arshadmohammad commented on the issue:

    https://github.com/apache/zookeeper/pull/106
  
    I will review it soon
, Github user hanm commented on the issue:

    https://github.com/apache/zookeeper/pull/106
  
    Thanks @arshadmohammad 
, Github user arshadmohammad commented on the issue:

    https://github.com/apache/zookeeper/pull/106
  
    Jira ZOOKEEPER-1932 title is completely different from what is being done in its MR. It think we should change the title as well as the description
, Github user arshadmohammad commented on a diff in the pull request:

    https://github.com/apache/zookeeper/pull/106#discussion_r115112178
  
    --- Diff: src/java/main/org/apache/zookeeper/server/quorum/QuorumPeer.java ---
    @@ -930,39 +918,36 @@ protected Election createElectionAlgorithm(int electionAlgorithm){
     
             //TODO: use a factory rather than a switch
             switch (electionAlgorithm) {
    -        case 0:
    -            le = new LeaderElection(this);
    -            break;
    -        case 1:
    -            le = new AuthFastLeaderElection(this);
    -            break;
    -        case 2:
    -            le = new AuthFastLeaderElection(this, true);
    -            break;
    -        case 3:
    -            qcm = new QuorumCnxManager(this);
    -            QuorumCnxManager.Listener listener = qcm.listener;
    -            if(listener != null){
    -                listener.start();
    -                FastLeaderElection fle = new FastLeaderElection(this, qcm);
    -                fle.start();
    -                le = fle;
    -            } else {
    -                LOG.error("Null listener when initializing cnx manager");
    -            }
    -            break;
    -        default:
    -            assert false;
    +            case 0:
    +                assert false : "Leader election algorithm type 0 is not supported anymore.";
    --- End diff --
    
    Another option is  validate electionAlg in org.apache.zookeeper.server.quorum.QuorumPeerConfig and exit from there for wrong input and remove the case from here 
, Github user arshadmohammad commented on a diff in the pull request:

    https://github.com/apache/zookeeper/pull/106#discussion_r115111872
  
    --- Diff: src/docs/src/documentation/content/xdocs/zookeeperAdmin.xml ---
    @@ -948,15 +948,14 @@ server.3=zoo3:2888:3888</programlisting>
                 <listitem>
                   <para>(No Java system property)</para>
     
    -              <para>Election implementation to use. A value of "0" corresponds
    -              to the original UDP-based version, "1" corresponds to the
    +              <para>Election implementation to use. A value of "1" corresponds to the
                   non-authenticated UDP-based version of fast leader election, "2"
                   corresponds to the authenticated UDP-based version of fast
                   leader election, and "3" corresponds to TCP-based version of
    -              fast leader election. Currently, algorithm 3 is the default</para>
    +              fast leader election. Currently, algorithm 3 is the default.</para>
                   
                   <note>
    -              <para> The implementations of leader election 0, 1, and 2 are now 
    +              <para> The implementations of leader election 1, and 2 are now
                   <emphasis role="bold"> deprecated </emphasis>. We have the intention
                   of removing them in the next release, at which point only the 
                   FastLeaderElection will be available. 
    --- End diff --
    
    There is at least one more reference of election alog type 0. Should be deleted.
    Reference Text : If electionAlg is 0, then the second port is not 
                  necessary
, Github user arshadmohammad commented on a diff in the pull request:

    https://github.com/apache/zookeeper/pull/106#discussion_r115111921
  
    --- Diff: src/java/main/org/apache/zookeeper/server/quorum/QuorumPeer.java ---
    @@ -809,28 +809,16 @@ synchronized public void stopLeaderElection() {
             responder.interrupt();
    --- End diff --
    
    The import java.net.SocketException is never used
, Github user arshadmohammad commented on a diff in the pull request:

    https://github.com/apache/zookeeper/pull/106#discussion_r115112169
  
    --- Diff: src/java/main/org/apache/zookeeper/server/quorum/QuorumPeer.java ---
    @@ -930,39 +918,36 @@ protected Election createElectionAlgorithm(int electionAlgorithm){
     
             //TODO: use a factory rather than a switch
             switch (electionAlgorithm) {
    -        case 0:
    -            le = new LeaderElection(this);
    -            break;
    -        case 1:
    -            le = new AuthFastLeaderElection(this);
    -            break;
    -        case 2:
    -            le = new AuthFastLeaderElection(this, true);
    -            break;
    -        case 3:
    -            qcm = new QuorumCnxManager(this);
    -            QuorumCnxManager.Listener listener = qcm.listener;
    -            if(listener != null){
    -                listener.start();
    -                FastLeaderElection fle = new FastLeaderElection(this, qcm);
    -                fle.start();
    -                le = fle;
    -            } else {
    -                LOG.error("Null listener when initializing cnx manager");
    -            }
    -            break;
    -        default:
    -            assert false;
    +            case 0:
    +                assert false : "Leader election algorithm type 0 is not supported anymore.";
    --- End diff --
    
    I think we should log error here and make sure the server jvm exit in this case
, Github user arshadmohammad commented on a diff in the pull request:

    https://github.com/apache/zookeeper/pull/106#discussion_r115111914
  
    --- Diff: src/java/main/org/apache/zookeeper/server/quorum/QuorumPeer.java ---
    @@ -930,39 +918,36 @@ protected Election createElectionAlgorithm(int electionAlgorithm){
     
             //TODO: use a factory rather than a switch
             switch (electionAlgorithm) {
    -        case 0:
    -            le = new LeaderElection(this);
    -            break;
    -        case 1:
    -            le = new AuthFastLeaderElection(this);
    -            break;
    -        case 2:
    -            le = new AuthFastLeaderElection(this, true);
    -            break;
    -        case 3:
    -            qcm = new QuorumCnxManager(this);
    -            QuorumCnxManager.Listener listener = qcm.listener;
    -            if(listener != null){
    -                listener.start();
    -                FastLeaderElection fle = new FastLeaderElection(this, qcm);
    -                fle.start();
    -                le = fle;
    -            } else {
    -                LOG.error("Null listener when initializing cnx manager");
    -            }
    -            break;
    -        default:
    -            assert false;
    +            case 0:
    +                assert false : "Leader election algorithm type 0 is not supported anymore.";
    +                break;
    +            case 1:
    +                le = new AuthFastLeaderElection(this);
    +                break;
    +            case 2:
    +                le = new AuthFastLeaderElection(this, true);
    +                break;
    +            case 3:
    +                qcm = new QuorumCnxManager(this);
    +                QuorumCnxManager.Listener listener = qcm.listener;
    +                if(listener != null){
    +                    listener.start();
    +                    FastLeaderElection fle = new FastLeaderElection(this, qcm);
    +                    fle.start();
    +                    le = fle;
    +                } else {
    +                    LOG.error("Null listener when initializing cnx manager");
    +                }
    +                break;
    +            default:
    +                assert false;
             }
             return le;
         }
     
         @SuppressWarnings("deprecation")
         protected Election makeLEStrategy(){
             LOG.debug("Initializing leader election protocol...");
    -        if (getElectionType() == 0) {
    -            electionAlg = new LeaderElection(this);
    -        }
             return electionAlg;
         }
     
    --- End diff --
    
    org.apache.zookeeper.server.quorum.QuorumPeerConfig.parseDynamicConfig(Properties, int, boolean, boolean)
    has a logic related to election algo type 0. This should be removed
, +1 overall.  GitHub Pull Request  Build
      

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 19 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 3.0.1) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/668//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/668//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/668//console

This message is automatically generated., Github user hanm commented on a diff in the pull request:

    https://github.com/apache/zookeeper/pull/106#discussion_r115352994
  
    --- Diff: src/java/main/org/apache/zookeeper/server/quorum/QuorumPeer.java ---
    @@ -930,39 +918,36 @@ protected Election createElectionAlgorithm(int electionAlgorithm){
     
             //TODO: use a factory rather than a switch
             switch (electionAlgorithm) {
    -        case 0:
    -            le = new LeaderElection(this);
    -            break;
    -        case 1:
    -            le = new AuthFastLeaderElection(this);
    -            break;
    -        case 2:
    -            le = new AuthFastLeaderElection(this, true);
    -            break;
    -        case 3:
    -            qcm = new QuorumCnxManager(this);
    -            QuorumCnxManager.Listener listener = qcm.listener;
    -            if(listener != null){
    -                listener.start();
    -                FastLeaderElection fle = new FastLeaderElection(this, qcm);
    -                fle.start();
    -                le = fle;
    -            } else {
    -                LOG.error("Null listener when initializing cnx manager");
    -            }
    -            break;
    -        default:
    -            assert false;
    +            case 0:
    +                assert false : "Leader election algorithm type 0 is not supported anymore.";
    +                break;
    +            case 1:
    +                le = new AuthFastLeaderElection(this);
    +                break;
    +            case 2:
    +                le = new AuthFastLeaderElection(this, true);
    +                break;
    +            case 3:
    +                qcm = new QuorumCnxManager(this);
    +                QuorumCnxManager.Listener listener = qcm.listener;
    +                if(listener != null){
    +                    listener.start();
    +                    FastLeaderElection fle = new FastLeaderElection(this, qcm);
    +                    fle.start();
    +                    le = fle;
    +                } else {
    +                    LOG.error("Null listener when initializing cnx manager");
    +                }
    +                break;
    +            default:
    +                assert false;
             }
             return le;
         }
     
         @SuppressWarnings("deprecation")
         protected Election makeLEStrategy(){
             LOG.debug("Initializing leader election protocol...");
    -        if (getElectionType() == 0) {
    -            electionAlg = new LeaderElection(this);
    -        }
             return electionAlg;
         }
     
    --- End diff --
    
    good catch. fixed.
, Github user hanm commented on a diff in the pull request:

    https://github.com/apache/zookeeper/pull/106#discussion_r115353017
  
    --- Diff: src/java/main/org/apache/zookeeper/server/quorum/QuorumPeer.java ---
    @@ -809,28 +809,16 @@ synchronized public void stopLeaderElection() {
             responder.interrupt();
    --- End diff --
    
    removed.
, Github user hanm commented on a diff in the pull request:

    https://github.com/apache/zookeeper/pull/106#discussion_r115353053
  
    --- Diff: src/docs/src/documentation/content/xdocs/zookeeperAdmin.xml ---
    @@ -948,15 +948,14 @@ server.3=zoo3:2888:3888</programlisting>
                 <listitem>
                   <para>(No Java system property)</para>
     
    -              <para>Election implementation to use. A value of "0" corresponds
    -              to the original UDP-based version, "1" corresponds to the
    +              <para>Election implementation to use. A value of "1" corresponds to the
                   non-authenticated UDP-based version of fast leader election, "2"
                   corresponds to the authenticated UDP-based version of fast
                   leader election, and "3" corresponds to TCP-based version of
    -              fast leader election. Currently, algorithm 3 is the default</para>
    +              fast leader election. Currently, algorithm 3 is the default.</para>
                   
                   <note>
    -              <para> The implementations of leader election 0, 1, and 2 are now 
    +              <para> The implementations of leader election 1, and 2 are now
                   <emphasis role="bold"> deprecated </emphasis>. We have the intention
                   of removing them in the next release, at which point only the 
                   FastLeaderElection will be available. 
    --- End diff --
    
    removed.
, Github user hanm commented on a diff in the pull request:

    https://github.com/apache/zookeeper/pull/106#discussion_r115353405
  
    --- Diff: src/java/main/org/apache/zookeeper/server/quorum/QuorumPeer.java ---
    @@ -930,39 +918,36 @@ protected Election createElectionAlgorithm(int electionAlgorithm){
     
             //TODO: use a factory rather than a switch
             switch (electionAlgorithm) {
    -        case 0:
    -            le = new LeaderElection(this);
    -            break;
    -        case 1:
    -            le = new AuthFastLeaderElection(this);
    -            break;
    -        case 2:
    -            le = new AuthFastLeaderElection(this, true);
    -            break;
    -        case 3:
    -            qcm = new QuorumCnxManager(this);
    -            QuorumCnxManager.Listener listener = qcm.listener;
    -            if(listener != null){
    -                listener.start();
    -                FastLeaderElection fle = new FastLeaderElection(this, qcm);
    -                fle.start();
    -                le = fle;
    -            } else {
    -                LOG.error("Null listener when initializing cnx manager");
    -            }
    -            break;
    -        default:
    -            assert false;
    +            case 0:
    +                assert false : "Leader election algorithm type 0 is not supported anymore.";
    --- End diff --
    
    I like the idea of catching invalid electionAlg value when parsing config file. Code updated by throwing an exception when input value is bad.
, Github user hanm commented on the issue:

    https://github.com/apache/zookeeper/pull/106
  
    @arshadmohammad thanks for review, code is updated, please take a look at. I also updated JIRA description so it's consistent with the pull request title.
, Github user arshadmohammad commented on the issue:

    https://github.com/apache/zookeeper/pull/106
  
    LGTM  +1
, Github user asfgit closed the pull request at:

    https://github.com/apache/zookeeper/pull/106
, Issue resolved by pull request 106
[https://github.com/apache/zookeeper/pull/106], Thanks [~hanm] for working on this issue.
Merged to master: https://github.com/apache/zookeeper/commit/a680655a3569bfc546712cb85eeaea8c9b7de3ad, Thanks [~arshad.mohammad] for code review and commit!, SUCCESS: Integrated in Jenkins build ZooKeeper-trunk #3386 (See [https://builds.apache.org/job/ZooKeeper-trunk/3386/])
ZOOKEEPER-1932: Remove deprecated LeaderElection class. (arshad: rev a680655a3569bfc546712cb85eeaea8c9b7de3ad)
* (delete) src/java/test/org/apache/zookeeper/test/LENonTerminateTest.java
* (edit) src/java/main/org/apache/zookeeper/server/quorum/QuorumPeerConfig.java
* (delete) src/java/main/org/apache/zookeeper/server/quorum/LeaderElection.java
* (edit) src/java/systest/org/apache/zookeeper/test/system/QuorumPeerInstance.java
* (edit) src/java/main/org/apache/zookeeper/server/quorum/QuorumPeer.java
* (edit) src/docs/src/documentation/content/xdocs/zookeeperAdmin.xml
* (edit) src/java/test/config/findbugsExcludeFile.xml
* (delete) src/java/test/org/apache/zookeeper/test/LETest.java
* (edit) src/java/test/org/apache/zookeeper/test/TruncateTest.java
* (edit) src/java/systest/org/apache/zookeeper/test/system/BaseSysTest.java
* (edit) src/java/test/org/apache/zookeeper/test/HierarchicalQuorumTest.java
]