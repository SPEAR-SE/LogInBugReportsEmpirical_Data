[Should it? Zookeeper operations are well-ordered for one session, so any subsequent operation is going to have the authentication you provide via zoo_add_auth whether or not the I/O thread is woken up., Hi Stephen,

I think it should. As you point out, it doesn't matter if you are calling zoo_add_auth() asynchronously, but it gets annoying when you want to call it synchronously. For example, I was doing something like this in my unit test:

{code}
1. Call zookeeper_init().
2. Wait for the session to become CONNECTED.
3. Call zoo_add_auth().
4. Wait for SUCCESS response.
{code}

and it took me a while to figure out why the test was blocked for 10 seconds in step 4 (I was using 30 second session timeout). 

In general, I think we should wake up the IO thread whenever there is some stuff to send. Do you see any drawbacks in doing that?

Thanks!
--Michi
, Aside from being used in unit tests, is there a use case for synchronous zoo_add_auth? The downside of this is that anyone using zoo_add_auth for synchronous work does marginally more work than they did before for no benefit, which is something that ideally would be avoided. If this is such an issue for developers (as I could imagine it being), maybe for development builds of Zookeeper there could be a preprocessor flag, say ZOOKEEPER_SYNCHRONOUS_ADD_AUTH, which wakes the IO thread following the call. Then release builds could simply not use the flag, and we end up getting the best of both worlds. 

On the one hand, this is ugly as sin and reeks of leaving printf's throughout your code to aid in debugging. But on the other, this gives the best of both worlds. Thoughts?]