[Thanks @fpj for pointing out this. Following are the testcases which takes huge amount of time. Most of them have verification points by checking that the watcher(data/child) is really removed or not, its done by waiting few seconds(CONNECTION_TIMEOUT/5) for the watch notifications. This certainly needs improvement and can think for a better verification idea.

{code}
RemoveWatchesTest.java
       Assert.assertFalse("Shouldn't remove data watcher", w1.matches());

       // matches logic is waiting for the watch notification ?
        public boolean matches() throws InterruptedException {
            if (!latch.await(CONNECTION_TIMEOUT/5, TimeUnit.MILLISECONDS)) {
                LOG.error("Failed waiting to remove the watches");
                return false;
            }
{code}

{code}
testRemoveAllChildWatchesOnAPath[0]	30 sec	Passed
testRemoveAllChildWatchesOnAPath[1]	30 sec	Passed
testRemoveAllDataWatchesOnAPath[0]	30 sec	Passed
testRemoveAllDataWatchesOnAPath[1]	30 sec	Passed
testRemoveWatcherWhenNoConnection[0]	14 sec	Passed
testRemoveWatcherWhenNoConnection[1]	14 sec	Passed
testMultipleChildWatchers[0]		9 sec	Passed
testMultipleChildWatchers[1]		9 sec	Passed
testManyWatchersWhenNoConnection[1]	6.9 sec	Passed
testChRootRemoveWatcher[0]		6.1 sec	Passed
testChRootRemoveWatcher[1]		6 sec	Passed
testMultipleDataWatchers[0]		6 sec	Passed
testMultipleDataWatchers[1]		6 sec	Passed
testRemoveAnyChildWatcher[0]		6 sec	Passed
testRemoveAnyChildWatcher[1]		6 sec	Passed
testRemoveAnyDataWatcher[0]		6 sec	Passed
testRemoveAnyDataWatcher[1]		6 sec	Passed
testRemoveSingleWatcher[0]		6.4 sec	Passed
testRemoveSingleWatcher[1]		6 sec	Passed
testManyWatchersWhenNoConnection[0]	5.2 sec	Passed
{code}, Again, few of these test cases has similar kinda false notification checks by waiting long time. Here its 30secs wait period to see any possibility of getting a false notification:
{code}
Assert.assertFalse("Received data watch notification!",
                dWatchCount.await(CONNECTION_TIMEOUT, TimeUnit.MILLISECONDS));
{code}, [~rakeshr], I'm attaching a patch that speeds up the 4 slowest tests in the suite.  Would you be interested in reviewing?  Running the entire {{RemoveWatchesTest}} suite from trunk on my machine takes ~5 minutes.  With this patch, that drops to ~2 minutes.

This required hooking into the internals of some of the production code.  This is the least intrusive way to do it that I could find, but let me know if you have other ideas.  I've defined a new {{WatchManagerListener}} interface that receives direct notification when the {{WatchManager}} triggers a watch.  For the tests that need to check that they did not receive notification after removing a watch, they can use the listener to check immediately instead of relying on a long wait to be sure.  This also makes the tests deterministic as opposed to the waiting approach.

I wanted to make sure I didn't harm what the tests were trying to prove.  To do that, I temporarily introduced a bug in my local environment.  I hacked {{ZKDatabase#removeWatch}} so that it didn't actually remove the watch.  When I did that, the tests still failed and caught the bug (as they should).

Please let me know your thoughts on the patch.  It would be nice to shave a few minutes off of every pre-commit run.  :-)
, +1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12728183/ZOOKEEPER-2062.001.patch
  against trunk revision 1672934.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2648//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2648//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2648//console

This message is automatically generated., I'm attaching patch v002, which simplifies the test a bit by having it directly implement the {{WatchManagerListener}} interface.  I also corrected a JavaDoc typo in {{WatchManagerListener}}., +1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12728243/ZOOKEEPER-2062.002.patch
  against trunk revision 1672934.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2650//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2650//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2650//console

This message is automatically generated.,  [~cnauroth] I really appreciate your thoughts. Its very nice approach by directly using the {{DataTree}} watch information in tests. This would make the tests more deterministic as opposed to the waiting approach. Your idea of {{WatchManagerListener}} makes it simple. On a second thought I'm trying to avoid creating an extra listener just for testing purpose, if we couldn't manage to find a best way, I agree to go ahead with the {{WatchManagerListener}}. Can we first think of using existing data structures and the APIs available in {{DataTree}} to satisfy the test assertions.


I've tried slightly different approach. Please see the below improvement and does this sound good to you? If yes, we will modify all the similar waiting cases into this kinda approach.

1. In {{testRemoveAllDataWatchesOnAPath}}. Modify the below part
{code}
        Assert.assertNotNull("Didn't set data watches",
                zk2.exists("/node1", w2));

        removeAllWatches(zk2, "/node1", WatcherType.Data, false, Code.OK);
        Assert.assertTrue("Didn't remove data watcher",
                rmWatchCount.await(CONNECTION_TIMEOUT, TimeUnit.MILLISECONDS));

        zk1.setData("/node1", "test".getBytes(), -1);
        LOG.info("Waiting for data watchers notification after watch removal");
        Assert.assertFalse("Received data watch notification!",
                dWatchCount.await(CONNECTION_TIMEOUT, TimeUnit.MILLISECONDS));
        Assert.assertEquals("Received watch notification after removal!", 2,
                dWatchCount.getCount());
{code}

to

{code}
        Set<Long> sessions = getServer(serverFactory).getZKDatabase()
                .getDataTree().getWatchesByPath().getSessions("/node1");
        Assert.assertNotNull("Didn't find the session", sessions);
        final long sessionId = sessions.iterator().next();
        Assert.assertEquals("Session mismatches", zk2.getSessionId(), sessionId);

        removeAllWatches(zk2, "/node1", WatcherType.Data, false, Code.OK);

        Assert.assertTrue("Didn't remove data watcher",
                rmWatchCount.await(CONNECTION_TIMEOUT, TimeUnit.MILLISECONDS));
        Assert.assertFalse("Child watchers exists after removal!",
                getServer(serverFactory).getZKDatabase().getDataTree()
                .getWatchesByPath().hasSessions("/node1"));
{code}

2. In {{testChRootRemoveWatcher}}. Modify the below part
{code}
Assert.assertFalse("Shouldn't remove data watcher", w2.matches());
{code}

to 

{code}
        Assert.assertEquals("Didn't find child watcher", 1, zk2
                .getChildWatches().size());
        removeWatches(zk2, "/node1", w2, WatcherType.Any, false, Code.OK);
        Assert.assertTrue("Didn't remove child watcher", w2.matches());
{code}, I dig this a bunch.
[~rakeshr] if you wanna upload an updated patch with your changes I will review it and pending my +1 you can check it in., Thanks, Camille.  I've got something in progress making similar changes across the suite., I also wanted to mention that {{DataTree#getWatchesByPath}} returns only data watchers (not child watchers), so I modified the suggestion from Rakesh a bit to check if the {{ServerCnxn}} is registered as a watcher for covering both cases.  Thanks for the help Rakesh!, I'm attaching patch v003.  This brings the whole test suite run down to 1 minute 20 seconds on my machine.

This applies the suggestions from the last comment from Rakesh.  As mentioned in my last comment though, I found that {{DataTree#getWatchesByPath}} returned only data watches.  Instead of relying on that, I've added assertions on whether or not the server-side session is registered as a watcher.  Let me know if this is sufficient.

{{testRemoveSingleWatcher}} and {{testMultipleDataWatchers}} are still a tad slow.  However, I didn't want to change these, because it seems these are specifically intended to check session close semantics.  Once the session is closed, trying to do these new assertions wouldn't be valid, so I left these tests waiting on the latches for timeouts.

I also didn't change the {{*NoConnection}} tests.  It seems the only option here would be to downtune client timeout settings, which could get finicky.

I verified again that introducing bugs in {{ZKDatabase}} causes test failures, so the tests are still capable of catching regressions.

Rakesh and Camille, what do you think of this version?  Thanks again for your guidance!
, +1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12728495/ZOOKEEPER-2062.003.patch
  against trunk revision 1676359.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2652//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2652//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2652//console

This message is automatically generated., I just spotted ZOOKEEPER-1274 tracking an enhancement to include child watches in the watch reports for {{wchc}} and {{wchp}}.  I'm linking the issues for the benefit of anyone who stumbles onto this conversation later., Thanks [~cnauroth] for taking care this. Latest patch looks nice!

For the {{testRemoveSingleWatcher}} and {{testMultipleDataWatchers}}. Its written to see any events triggered after the session closure. I think there is a space to improve this also. In these tests, {{assertFalse}} is too costly and we could replace the {{assertFalse}} statement like below and move them above {{zk1.close();}} statement.

{code}
        Assert.assertTrue("Didn't remove data watcher", w1.matches());
        Assert.assertFalse("Should have removed data watcher", w2.matches());
{code}

to 

{code}
        Assert.assertEquals("Didn't find data watcher", 1, zk2.getDataWatches().size());
        Assert.assertEquals("Didn't find data watcher", "/node2", zk2.getDataWatches().get(0));
        removeWatches(zk2, "/node2", w2, WatcherType.Any, false, Code.OK);
        Assert.assertTrue("Didn't remove data watcher", w2.matches());
{code}, Thanks again, Rakesh.  Here is patch v004 incorporating your last suggestion., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12729218/ZOOKEEPER-2062.004.patch
  against trunk revision 1676359.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2657//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2657//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2657//console

This message is automatically generated., bq. -1 core tests. The patch failed core unit tests.

The test failure looks unrelated, since the patch changed only one test suite, and the failure is in a different test suite.

There is a nice speed-up visible in that last Jenkins run!  :-)

Before:
Tests run: 46, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 306.188 sec

After:
Tests run: 46, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 54.075 sec
, Thanks [~cnauroth], Nice to see the tests passed in 53secs in the latest jenkins report. I could see only {{*NoConnection}} tests are taking more time, but I'm OK as these unit test cases depending on zookeeper client connection timeouts.

{code}
testChRootRemoveWatcher[0]			86 ms	Passed
testChRootRemoveWatcher[1]			76 ms	Passed
testManyChildWatchers[0]			0.3 sec	Passed
testManyChildWatchers[1]			0.24 secPassed
testManyDataWatchers[0]				0.28 secPassed
testManyDataWatchers[1]				0.26 secPassed
testManyPreNodeWatchers[0]			0.21 secPassed
testManyPreNodeWatchers[1]			0.19 secPassed
testManyWatchersWhenNoConnection[0]		5.7 sec	Passed
testManyWatchersWhenNoConnection[1]		6.3 sec	Passed
testMultipleChildWatchers[0]			3 sec	Passed
testMultipleChildWatchers[1]			3 sec	Passed
testMultipleDataWatchers[0]			67 ms	Passed
testMultipleDataWatchers[1]			58 ms	Passed
testNoWatcherException[0]			79 ms	Passed
testNoWatcherException[1]			60 ms	Passed
testNoWatcherServerException[0]			58 ms	Passed
testNoWatcherServerException[1]			46 ms	Passed
testNullWatcherReference[0]			48 ms	Passed
testNullWatcherReference[1]			45 ms	Passed
testRemoveAllChildWatchers[0]			59 ms	Passed
testRemoveAllChildWatchers[1]			59 ms	Passed
testRemoveAllChildWatchesOnAPath[0]		50 ms	Passed
testRemoveAllChildWatchesOnAPath[1]		47 ms	Passed
testRemoveAllDataWatchers[0]			65 ms	Passed
testRemoveAllDataWatchers[1]			64 ms	Passed
testRemoveAllDataWatchesOnAPath[0]		55 ms	Passed
testRemoveAllDataWatchesOnAPath[1]		48 ms	Passed
testRemoveAllNoWatcherException[0]		55 ms	Passed
testRemoveAllNoWatcherException[1]		46 ms	Passed
testRemoveAllWatchers[0]			73 ms	Passed
testRemoveAllWatchers[1]			62 ms	Passed
testRemoveAllWatchesOnAPath[0]			55 ms	Passed
testRemoveAllWatchesOnAPath[1]			51 ms	Passed
testRemoveAnyChildWatcher[0]			62 ms	Passed
testRemoveAnyChildWatcher[1]			53 ms	Passed
testRemoveAnyDataWatcher[0]			66 ms	Passed
testRemoveAnyDataWatcher[1]			52 ms	Passed
testRemoveSingleWatcher[0]			0.36 secPassed
testRemoveSingleWatcher[1]			54 ms	Passed
testRemoveWatcherWhenNoConnection[0]		16 sec	Passed
testRemoveWatcherWhenNoConnection[1]		15 sec	Passed
testRemoveWhenMultipleChildWatchesOnAPath[0]	55 ms	Passed
testRemoveWhenMultipleChildWatchesOnAPath[1]	50 ms	Passed
testRemoveWhenMultipleDataWatchesOnAPath[0]	58 ms	Passed
testRemoveWhenMultipleDataWatchesOnAPath[1]	51 ms	Passed
{code}

+1 latest patch looks good to me., Thanks [~cnauroth] for the contribution!

Committed to trunk : http://svn.apache.org/viewvc?view=revision&revision=1677724
Committed to br3.5 : http://svn.apache.org/viewvc?view=revision&revision=1677726, [~rakeshr], thank you for the helpful code review feedback and the commit!, SUCCESS: Integrated in ZooKeeper-trunk #2682 (See [https://builds.apache.org/job/ZooKeeper-trunk/2682/])
ZOOKEEPER-2062 RemoveWatchesTest takes forever to run (Chris Nauroth via rakeshr) (rakeshr: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1677724)
* /zookeeper/trunk/CHANGES.txt
* /zookeeper/trunk/src/java/test/org/apache/zookeeper/RemoveWatchesTest.java
]