[The last several paragraphs here explain the general problem pretty well:

http://docs.oracle.com/javase/6/docs/technotes/guides/net/articles/connection_release.html

For whatever reason, I'm having a much easier time reproducing the ultimate problem (the TCP RST) on Windows instead of Linux or OS X.  In Hadoop Common, we see test failures on Windows pretty consistently in test suites like {{TestActiveStandbyElectorRealZK}}.
, I'm attaching a patch that disables write interest on the client socket's selection key right after sending the initial connection request packet.  Write interest gets restored later after successful completion of the connection.  With this patch in place, the failing tests in Hadoop Common pass consistently on mutliple platforms: OS X, Linux, and Windows.

I tried to write a test for this.  Unfortunately, none of my attempts at a functional test were able to reproduce the problem, and my attempt at mocking broke down when I discovered that {{SocketChannel#register}} is final and therefore can't be mocked.  Existing test suites passed for me after the patch.

The same patch can apply to both trunk and branch-3.4.
, -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12582508/ZOOKEEPER-1702.1.patch
  against trunk revision 1463329.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1475//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1475//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1475//console

This message is automatically generated., {quote}
-1 tests included. The patch doesn't appear to include any new or modified tests.
Please justify why no new tests are needed for this patch.
Also please list what manual steps were performed to verify this patch.
{quote}

See earlier comment.  I couldn't come up with a functional test that could repro the problem, and some of the internal classes involved can't be mocked.  This patch does get some failing tests in Hadoop Common to pass consistently.
, Nice one, thanks Chris. Is this issue something we should consider for the C client as well, or is it java specific?, Thanks, Patrick.  I hadn't considered the C client until now.  This is more of a general socket programming issue than a Java-specific issue, so in theory the bug could be there too.

From a very quick glance at the C code, I couldn't find the bug there.  I'm basing that statement on the fact that {{zookeeper_interest}} only turns on write interest while connecting or after fully connected:

{code}
        /* we are interested in a write if we are connected and have something
         * to send, or we are waiting for a connect to finish. */
        if ((zh->to_send.head && (zh->state == ZOO_CONNECTED_STATE))
        || zh->state == ZOO_CONNECTING_STATE) {
            *interest |= ZOOKEEPER_WRITE;
        }
{code}

And it only enters {{ZOO_CONNECTED_STATE}} after successful negotation of connection and checking session inside {{check_events}}:

{code}
                oldid = zh->client_id.client_id;
                newid = zh->primer_storage.sessionId;
                if (oldid != 0 && oldid != newid) {
                    zh->state = ZOO_EXPIRED_SESSION_STATE;
                    errno = ESTALE;
                    return handle_socket_error_msg(zh,__LINE__,ZSESSIONEXPIRED,
                            "sessionId=%#llx has expired.",oldid);
                } else {
                    zh->recv_timeout = zh->primer_storage.timeOut;
                    zh->client_id.client_id = newid;
                 
                    memcpy(zh->client_id.passwd, &zh->primer_storage.passwd,
                           sizeof(zh->client_id.passwd));
                    zh->state = ZOO_CONNECTED_STATE;
{code}

Therefore, I don't think the C client has the bug.  At least that's my very naive take on it after a whole 10 minutes reading the code.  :-)

On the Java side, the logic was different in that it would immediately turn on both read and write interest in {{ClientCnxn#SendThread#primeConnection}}, and leave write interest on until the outgoing queue got drained.
, I'm interested in getting this patch into a ZooKeeper release and upgrading to that release in Hadoop core to enable some functionality that's currently broken on Windows.  Is there anything more I can do to help move this patch forward?  Thanks!, Hi [~cnauroth] I'll see what I can do - I added this to my toreview list., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12582508/ZOOKEEPER-1702.1.patch
  against trunk revision 1490358.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1502//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1502//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1502//console

This message is automatically generated., Thanks, [~phunt].  I appreciate it!, Committed to 3.4.6 and trunk. Thanks Chris!, Integrated in ZooKeeper-trunk #1978 (See [https://builds.apache.org/job/ZooKeeper-trunk/1978/])
    ZOOKEEPER-1702. ZooKeeper client may write operation packets before receiving successful response to connection request, can cause TCP RST (Chris Nauroth via phunt) (Revision 1498732)

     Result = SUCCESS
phunt : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1498732
Files : 
* /zookeeper/trunk/CHANGES.txt
* /zookeeper/trunk/src/java/main/org/apache/zookeeper/ClientCnxnSocketNIO.java
, Thanks very much for reviewing and committing this, Patrick!, Closing issues after releasing 3.4.6.]