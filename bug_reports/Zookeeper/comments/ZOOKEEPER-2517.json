[Proposed patch, Proposed Patch, Thanks [~benjamin.jaton] for reporting and submitting a patch.
One review comment on the patch.
Can we handled NumberFormatException and use default in case of NumberFormatException., The issue is introduced in ZOOKEEPER-2139. Should we make packetLen testable and write a test case for this?, sorry [~benjamin.jaton], I assigned the issue without asking you. Please feel free to unassign form your or assign me if you don't have cycle to work on it., # I am submitting new patch ZOOKEEPER-2517-01.patch for this issue, I feel this is very important bug and it should be fixed ASAP. Hope [~benjamin.jaton] you wont mind it.
# Thanks [~hanm] for your suggestion, I made it testable
, -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12826918/ZOOKEEPER-2517-01.patch
  against trunk revision 1757584.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3387//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3387//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3387//console

This message is automatically generated., Hi [~arshad.mohammad], 

A few comments:

{code}
        String value = getProperty(key);
        if (value == null) {
            return defaultValue;
        } else {
            try {
                return Integer.parseInt(value);
            } catch (NumberFormatException e) {
                if (LOG.isDebugEnabled()) {
                    LOG.debug("Configured value {} for property {} can not be parsed to int. Using default value {}.",
                            value, key, defaultValue);
                }
            }
        }
        return defaultValue;
{code}

can be rewritten as:

{code}
        String value = getProperty(key);
        if (value != null && value.trim().length() > 0) {
            try {
                return Integer.parseInt(value);
            } catch (NumberFormatException e) {
                    LOG.warn("Configured value {} for property {} can not be parsed to int. Using default value {}.", value, key, defaultValue);
            }
        }
        return defaultValue;
{code}

Also, I think a parser error of a parameter can be more insidious and dangerous bug to relegate it to debug only logging. I think it should be at least {{LOG.WARN}}. wdyt?

Finally, I don't like the name of the unit test: {{testGetInt}}. I think it's a bit vague so a more verbose, but clear name would be nice. Maybe {{testIntegerRetrievalFromProperty}} or something else... I no good with naming, btw.

Best regards!

, [~arshad.mohammad] - do you want to update the patch with Edward's comments?, Thanks [~eribeiro], Handled review comments, please have a look
# instead of just checking trimmed value length, we should use the trimmed value. Not checking length after trim to log the warning
# getInt is a common class. The classes using it will log the returned value. If it was a method meant to be used in specific class, no doubt it would have been a WARN. no problem, changing to WARN
# Because getInt is a small method and I was testing the complete getInt method but it can be renamed to testIntegerRetrievalFromProperty]Handled review comments, please have a look., +1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12827512/ZOOKEEPER-2517-02.patch
  against trunk revision 1759739.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3402//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3402//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3402//console

This message is automatically generated., [~fpj] - could you help with this one (review/commit), given you had participated in ZOOKEEPER-2139 ?, It has been updated. LGTM., Nice points, Arshad. LGTM., It looks mostly good. There are a couple of long lines that I would appreciate if we could break into multiple.

I'm wondering about the warning on number format exception. If I make a mistake, then I'll get a warning in my log, but the server will keep going. I might get an undesired behavior that I'll only realize after a while. Is it better to propagate the exception rather than just writing the warning?, Just to complement what I said before, if we propagate the exception, then it should end up caught in {{zookeeper.getClientCnxnSocket}} and transformed into an {{IOException}}. I think this is a better course of action compared to swallowing the exception, but feel free to disagree.

cc [~arshad.mohammad], Thanks [~fpj] for reviews.
# I was using maximum line width 120 in eclipse. now changed to 80 and formatted the modified code. is this OK? or is there any other zookeeper guideline for this.
# Throwing NumberFormatException from ZKConfig.getInt(String, int). 
# bq. If we propagate the exception, then it should end up caught in zookeeper.getClientCnxnSocket and transformed into an IOException
can we log the warning here and use the default value?, +1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12828521/ZOOKEEPER-2517-03.patch
  against trunk revision b2a484cfe743116d2531fe5d1e1d78b3960c511e.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3430//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3430//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3430//console

This message is automatically generated., bq. can we log the warning here and use the default value?

This sounds good as it will be consistent with old client side behavior, where we don't bail out on bogus just.maxbuffer
{code}
public static final int packetLen = Integer.getInteger("jute.maxbuffer",4096 * 1024);
{code}

On server side, I think the behavior is different, that the server is less tolerant with bogus configuration value. In most if not all cases server will not start with bogus value which makes sense as it's better to bail out early than running into unknown states with bogus configuration. 

We could make client behavior consistent with server, so when client has a bogus maxbuffer config value client will abort? 

, In the new patch, throwing {{IOException}} in case invalid {{jute.maxbuffer}} is configured., +1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12829061/ZOOKEEPER-2517-04.patch
  against trunk revision b2a484cfe743116d2531fe5d1e1d78b3960c511e.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 5 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3439//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3439//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3439//console

This message is automatically generated., GitHub user arshadmohammad opened a pull request:

    https://github.com/apache/zookeeper/pull/113

    ZOOKEEPER-2517:jute.maxbuffer is ignored

    ZOOKEEPER-2517:jute.maxbuffer is ignored

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/arshadmohammad/zookeeper ZOOKEEPER-2517

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/zookeeper/pull/113.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #113
    
----
commit d722cacd247cee4352ce4012db92cb604f8fa57b
Author: arshadmohammad <arshad.mohammad.k@gmail.com>
Date:   2016-11-21T19:09:41Z

    jute.maxbuffer is ignored

----
, -1 overall.  GitHub Pull Request  Build
      

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 5 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    -1 findbugs.  The patch appears to introduce 20 new Findbugs (version 3.0.1) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/84//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/84//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/84//console

This message is automatically generated., Github user hanm commented on the issue:

    https://github.com/apache/zookeeper/pull/113
  
    +1, looks good. We should definitely get this in before cutting RC build for 3.5.3.
, +1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12829061/ZOOKEEPER-2517-04.patch
  against trunk revision d72f27279a13986ee0c011e1e5b34edf3a310da9.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 5 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 3.0.1) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3537//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3537//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3537//console

This message is automatically generated., Github user hanm commented on the issue:

    https://github.com/apache/zookeeper/pull/113
  
    @rgs1 this is the blocker issue we were talking about, please take a look at it.
, Github user rakeshadr commented on the issue:

    https://github.com/apache/zookeeper/pull/113
  
    +1, LGTM. Thanks @arshadmohammad for the patch.
, Github user asfgit closed the pull request at:

    https://github.com/apache/zookeeper/pull/113
, Issue resolved by pull request 113
[https://github.com/apache/zookeeper/pull/113], SUCCESS: Integrated in Jenkins build ZooKeeper-trunk #3217 (See [https://builds.apache.org/job/ZooKeeper-trunk/3217/])
ZOOKEEPER-2517: jute.maxbuffer is ignored (hanm: rev de5c0e9abeb87721f4157662210dfcd38a7c15ea)
* (edit) src/java/main/org/apache/zookeeper/common/ZKConfig.java
* (edit) src/java/test/org/apache/zookeeper/client/ZKClientConfigTest.java
* (add) src/java/test/org/apache/zookeeper/ClientCnxnSocketTest.java
* (edit) src/java/main/org/apache/zookeeper/ClientCnxnSocket.java
* (edit) src/java/main/org/apache/zookeeper/ClientCnxnSocketNetty.java
]