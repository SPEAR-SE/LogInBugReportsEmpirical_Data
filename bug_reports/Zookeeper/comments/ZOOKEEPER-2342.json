[To reproduce the issue, run {{ant clean tar}} on the tip of current trunk, unpack the distro, copy zoo_sample.cfg to zoo.cfg, and then run it.  Both {{zkServer.sh start-foreground}} and {{zkCli.sh}} will show this error:

{code}
SLF4J: Failed to load class "org.slf4j.impl.StaticLoggerBinder".
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.
{code}

There will be no additional logging after that., I've confirmed that the problem was introduced by ZOOKEEPER-1371, which corresponds to git commit hash 4be4adfa32dc0bae0736ee1d6c04cb4cfc2d13a4.  If I check out the commit right before that, then the problem no longer repros., Hi [~cnauroth], it is right that log4j dependency has been removed but this was the intention of the ZOOKEEPER-1371 jira.  May be we can document some where that users  have to put runtime library of the logging framework of their choice. For example to use log4j user should put slf4j-log4j12-1.7.5.jar and slf4j-log4j12-1.7.5.jar in <ZOOKEEPER_HOME>/lib, small correction: user should put slf4j-log4j12-1.7.5.jar and log4j-1.2.17.jar in <ZOOKEEPER_HOME>/lib, small correction: user should put slf4j-log4j12-1.7.5.jar and log4j-1.2.17.jar in <ZOOKEEPER_HOME>/lib, small correction: user should put slf4j-log4j12-1.7.5.jar and log4j-1.2.17.jar in <ZOOKEEPER_HOME>/lib, System administrators will consider it unacceptable if we ship a product that has logging broken by default.  I just caught up on the full thread of ZOOKEEPER-1371, and it seems this point was lost in the lengthy (multi-year) course of discussion.

At some point in the lifetime of that patch, someone did consider this, because the documentation part of the patch stated that we ship the Log4J binding by default for backwards compatibility.  The documentation also still references use of log4j.properties to control logging.

{code}
    <section id="sc_logging">
      <title>Logging</title>

    <para>
        ZooKeeper uses <emphasis role="bold"><ulink url="http://www.slf4j.org">SLF4J</ulink></emphasis>
        version 1.7 as its logging infrastructure. For backward compatibility it is bound to
        <emphasis role="bold">LOG4J</emphasis> but you can use
        <emphasis role="bold"><ulink url="http://logback.qos.ch/">LOGBack</ulink></emphasis>
        or any other supported logging framework of your choice.
    </para>
    <para>
        The ZooKeeper default <filename>log4j.properties</filename>
        file resides in the <filename>conf</filename> directory. Log4j requires that
        <filename>log4j.properties</filename> either be in the working directory
        (the directory from which ZooKeeper is run) or be accessible from the classpath.
    </para>

    <para>For more information about SLF4J, see
      <ulink url="http://www.slf4j.org/manual.html">its manual</ulink>.</para>

    <para>For more information about LOG4J, see
      <ulink url="http://logging.apache.org/log4j/1.2/manual.html#defaultInit">Log4j Default Initialization Procedure</ulink> 
      of the log4j manual.</para>
      
    </section>
{code}

The patch implementation doesn't match the documentation though, so logging is broken.

I see 2 possible solutions.
# Reintroduce the Log4J 1 binding as a runtime dependency.  This choice retains backwards-compatibility with existing deployments that use log4j.properties to control their logging.
# Include the Log4J 2 binding as a runtime dependency.  This choice is not backwards-compatible, because the configuration format has changed in a non-backwards-compatible way in Log4J 2
http://logging.apache.org/log4j/2.x/manual/configuration.html
If we go with Log4J 2, then it must be done within the alpha timeline, because we have stated a plan of stopping backwards-incompatible changes once 3.5 produces a beta release.

However, we would never write new code directly to the Log4J API (either version 1 or version 2).  It would only ship in the distro as a runtime dependency.

Overall, I suppose now is the time to jump to Log4J 2, considering version 1 is end of life.  We probably won't get another opportunity for a backwards-incompatible change of this magnitude for a long time.

Could others please chime in too before we proceed with any changes?
, I know i'm a nobody - but I'm voting for option 2 (log4j2 as a runtime dependency), Hi [~flyinprogrammer].  Thanks for commenting!  It's valuable to get the input.  Nobody is a nobody (if that makes any sense).  :-), I am +1 for Log4J v2 and I agree that now is the right timing. Thanks for driving this [~cnauroth]!
, I'm trying to understand the impact of option 2 not being BC. Does it mean that the properties file needs to be rewritten during a rolling upgrade from say branch 3.4 to branch 3.5? [~cnauroth] [~rgs], bq. Does it mean that the properties file needs to be rewritten during a rolling upgrade from say branch 3.4 to branch 3.5?

Yes, that's correct.  Instead of using a log4j.properties file with the Log4J 1 syntax, it looks like you'd now need a log4j2.properties file, written in the new Log4J 2 syntax.  For administrators who have customized their log4j.properties file to do something different from what we ship, they'd need to prepare an equivalent log4j2.properties before the upgrade.

There are more details on this in the Log4J 2 configuration documentation, especially the sections on "Automatic Configuration" and "Configuration with Properties".

http://logging.apache.org/log4j/2.x/manual/configuration.html, +1 for Log4J 2 runtime dependency, Here are my specific suggestions:
* Do not bundle any binding as part of non-server artifacts a.k.a. libraries. This is a place where the power/choice should solely lie in the hands of the person integrating the libraries into their applications.
* The choice on the server side should be as follows
  * Bind to log4j-v1 as part of patch releases on existing GA/supported branches
  * Bind to the chosen, modern implementation on a new minor version build. I guess everyone likes log4j-v2 and we shall let it be that way
  * Provide adequate documentation on how to use some other binding of choice for those users/admins who wish to bring in their favourite binding (logback fans, put your hands up), [~anomalizer], yes, agreed.  Thanks!, I'm attaching a v001 patch for a migration to Log4J 2, based on my reading of the Log4J 2 [Configuration|http://logging.apache.org/log4j/2.x/manual/configuration.html] guide.  Here is a summary of the changes.

# Some of the ZOOKEEPER-1371 build script changes are partly rolled back.  We no longer need a {{junit.run.nolog4j}} target.  This was kind of bogus anyway, because there aren't really any test suites that match the {{NoLog4J*.java}} pattern.
# The top-level ivy.xml prevents the Log4J 2 dependencies from leaking into client applications via transitive dependency.
# Delete all log4j.properties files and replace them with a roughly equivalent log4j2.properties file.   (More on this later.)  We now need to use system property {{log4j.configurationFile}} to refer to it.  I added a log4j2.properties to some components that didn't previously have a log4j.properties, so they can log correctly now.
# Several tests depended on programmatic access to the Log4J API for capturing and verifying log messages.  I updated this code to the new Log4J 2 APIs.

This revision of the patch has not yet updated documentation.

I have verified that all tests are passing and emitting logs.  I also built the distro and verified successful logging from zkServer.sh and zkCli.sh.

I'm not completely satisfied with this.  With Log4J 1, we were able to parameterize which appender to attach to the root logger by substituting the {{zookeeper.root.logger}} property with something like {{INFO, CONSOLE}} or {{INFO, ROLLINGFILE}}.  It appears this is not as easily controlled in Log4J 2, where the configuration is more structured and switching appenders requires more changes in the configuration file.  For this first revision of the patch, the log4j2.properties is logging to both the {{CONSOLE}} and {{ROLLINGFILE}} appenders, which isn't desirable for the final solution.  I'm attaching this version of the patch anyway to see if anyone else has ideas on how to achieve a configurable split.

I also have not yet replicated the functionality of the zookeeper_trace.log from our log4j.properties file., +1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12780382/ZOOKEEPER-2342.001.patch
  against trunk revision 1720227.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 10 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3002//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3002//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3002//console

This message is automatically generated., Should we backout ZOOKEEPER-1371 instead? 

I don't see where we've done much thought on b/w compatibility. It's barely mentioned on these two jiras. We need to consider both developers as well as administrators. Perhaps this is just because I'm not familiar myself with log4j2. (if so please tell me) I realize I need to go look into this more... but that's part of my point. Is this something we really want to be changing now?

Have we considered what other Hadoop ecosystem components are doing? e.g. is this going to cause a problem for other components of hadoop and elsewhere that rely on ZK and, for e.g., not yet moved to log4j2.

What's the impact on systems that need to manage ZK? e.g. do they need to change the way they generate/edit/manage the log4j.conf file?, At this point, I am +1 for reverting ZOOKEEPER-1371.  From my incomplete work on this patch so far, it looks like it's going to be a huge effort to migrate to Log4J 2 if we hope to maintain some basic level of compatibility/usability that administrators are used to.  I don't want that to hold up further 3.5 releases.

bq. I don't see where we've done much thought on b/w compatibility. It's barely mentioned on these two jiras.

Backward compatibility absolutely was one of my goals for the scope of this JIRA.  The attached v001 patch doesn't achieve it, so it is not yet committed.  ZOOKEEPER-1371 was a backwards-incompatible change committed for 3.5.2-alpha, hence my motivation for marking this one a 3.5.2-alpha blocker.  I was hoping to restore backwards-compatibility in the scope of this patch, but I'm no longer comfortable with the risk.

bq. Have we considered what other Hadoop ecosystem components are doing?

At least for Hadoop itself, I know Log4J 2 migration is not on the schedule yet.  It has been mentioned casually, but there is no real plan yet.

bq. What's the impact on systems that need to manage ZK? e.g. do they need to change the way they generate/edit/manage the log4j.conf file?

From my work so far, I can tell that there is no way to achieve complete backwards-compatibility for administrators editing (and by extension systems that auto-generate) the Log4J configuration file.  I've been trying to find a good way to at least maintain our behavior of allowing appender/level overrides by passing the {{zookeeper.root.logger}} property on JVM startup.  Even if we can at least maintain that, the actual content of the Log4J configuration file is completely different in version 2., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12780382/ZOOKEEPER-2342.001.patch
  against trunk revision 1735116.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 10 new or modified tests.

    -1 patch.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3100//console

This message is automatically generated., I'm +1 for reverting the breaking patch. I don't honestly see the value in that change that outweighs the cost of trying to make it not backward-breaking. If someone wants to advocate for it with some concrete examples of the pain it is causing, I am all ears, otherwise, let's revert., [~fournc] so this is somewhat a bummer for me because I was hoping that with us adopting a new logger I'd finally have a solution for the old SyslogAppender exception-newline problem. for example: http://stackoverflow.com/questions/33177076/escape-newlines-in-zookeeper-logs-using-log4j-1-2-syslogappender 

I understand the backwards compatibility issues, they're valid, and we probably should revert this patch -- it just begs the question though, what's the plan to rip the bandaid off?, ZOOKEEPER-2393 now tracks restoring the SLF4J binding on the runtime classpath as a blocker for 3.5.2.  I have downgraded priority on this issue to major and retargeted it to 3.6.0 for long-term tracking of Log4J 2 migration., [~flyinprogrammer], sorry to disappoint.  From discussion on the related JIRAs and the dev mailing list, we think our best path forward is to remain on Log4J 1 to unblock the upcoming 3.5.2 release.  Since Log4J 1 is end of life, we do need to migrate to Log4J 2 someday ("rip the bandaid off" as you said), but we'll have to wait until 3.6.0 to consider that., It should be possible to retain bulk of the changes to sl4fj while making it bind to log4j-v1. We don't have to revert the usage of slf4j; just the choice of default bindings needs to be revisited. I'm not sure if we have to revert the code references to slf4j to accomplish this., bq. We don't have to revert the usage of slf4j; just the choice of default bindings needs to be revisited.

Yes, this is what was done in ZOOKEEPER-2393.  All of the code still calls SLF4J as the logging API, and we'll stick to that in future patches too.  We just reverted the part that omitted the SLF4J Log4J 1 binding from the distro., For your information, logback is much more closely related to log4j 1 than is log4j 2. It also provides a smoother path of migration than log4j 2. For instance, it can [translate|http://logback.qos.ch/translator/] log4j.properties files to logback.xml format. , Hi,

I am member of Apache Logging project PMC.

Due to various issues in Log4j 1.2.x, it will no longer work in JDK9: http://mail.openjdk.java.net/pipermail/jigsaw-dev/2016-July/008654.html

As Log4j 1.x is EOL (https://blogs.apache.org/foundation/entry/apache_logging_services_project_announces), these issues will not be fixed. We suggest upgrading to Log4j 2.x, we can offer help to do so.
, Maybe this will be easier if you fix ZOOKEEPER-233 and provide separate server and client artifacts., We in the Log4j 2 team are working on supporting Log4j 1 log4j.properties configurations. The plan is to have that ready in the next release of Log4j (2.7)., [~mikaelstaldal], backward-compatibility with the Log4J 1 properties file format would be hugely beneficial for us.  Thank you.  I'm linking to LOG4J2-63, which seems to be the master JIRA tracking that effort against Log4J 2.7., [~cnauroth] - I was not aware of this existing JIRA and I opened ZOOKEEPER-2659. I have opened a pull request with the required changes. I looked at patch you attached to this ticket and most of the changes we have have made seem identical. 
Would you mind taking a look at the PR and let me know if it looks good.

I have to clean the PR a bit, but logging functionality seems to be working with log4j2. , I second the advice of [~anomalizer], "Do not bundle any binding as part of non-server artifacts a.k.a. libraries. This is a place where the power/choice should solely lie in the hands of the person integrating the libraries into their applications."

Otherwise people who use a Zookeeper client in their code (and don't use log4j) have to add exclusions for log4j & the slf4j-log4j12 binding in order to avoid the "SLF4J: Detected both log4j-over-slf4j.jar AND slf4j-log4j12.jar on the class path, preempting StackOverflowError." error caused by multiple bindings in their app. Well-behaved sl4j based libraries should only have a test-scope or {{<optional>true</optional>}} dependency on slf4j bindings & logger implementations.]