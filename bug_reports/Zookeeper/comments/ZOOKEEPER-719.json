[Is this really a bug or improvement? If not a bug it should go to 3.4.0 and not 3.3.1. Marking for 3.3.1/3.4.0 for now., I'm not sure how to classify this one. In my test cases, the only problem it causes me so far is that it makes it more difficult to measure throughput because some bookies can be arbitrarily ahead of others in an ensemble while writing. One could see it as a bug too, I suppose, since throttling is desirable to keep the flow of requests under control.

It is fine to have it marked for 3.4.0 for me., I added a semaphore object to count the number of writes and reads pending to LedgerHandle. This solution does not cause a deadlock in the case of bookie crashes, which happens if we change the pendingAddOps ArrayDeque to a blocking data structure., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12440549/ZOOKEEPER-719.patch
  against trunk revision 929564.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no tests are needed for this patch.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: http://hudson.zones.apache.org/hudson/job/Zookeeper-Patch-h1.grid.sp2.yahoo.net/41/testReport/
Findbugs warnings: http://hudson.zones.apache.org/hudson/job/Zookeeper-Patch-h1.grid.sp2.yahoo.net/41/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: http://hudson.zones.apache.org/hudson/job/Zookeeper-Patch-h1.grid.sp2.yahoo.net/41/console

This message is automatically generated., I'm not happy with this patch for two reasons:

# In this current form, it is not possible to set the maximum number of outstanding operations;
# Because of the use of a semaphore, I had to catch InterruptedException in a few places. The most critical ones for me are the ones in the procedure to recover a ledger. I believe in the way I have currently implemented, it could cause problems if an instance of InterruptedException is raised when recovering a ledger, since the procedure could complete successfully. I need to investigate this further and either determine that it isn't a problem or find a better way. 

Any suggestion would be appreciated.     , 3. tests missing
, I have added a call to set the throttling threshold in LedgerHandle and a test to set the threshold value while reading and writing. I have also added calls to interrupt the current thread in the catch block of InterruptedException in LedgerRecoveryOp. , -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12445236/ZOOKEEPER-719.patch
  against trunk revision 947063.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: http://hudson.zones.apache.org/hudson/job/Zookeeper-Patch-h1.grid.sp2.yahoo.net/103/testReport/
Findbugs warnings: http://hudson.zones.apache.org/hudson/job/Zookeeper-Patch-h1.grid.sp2.yahoo.net/103/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: http://hudson.zones.apache.org/hudson/job/Zookeeper-Patch-h1.grid.sp2.yahoo.net/103/console

This message is automatically generated., The core test failure is unrelated to this patch. This patch does not affect any ZK core code., there are a couple of problems:

1) you seem to have a stray opCounterSem in PerClientBookieClient. you define it, but you never use it.

2) i think it might be better to use a system property to set the throttling rather than allow it to be dynamically changed. it simplifies the code. setThrottle is especially problematic since you are catching InterruptedException and it isn't thread safe.
, Thanks for the comments, Ben. I see three options to set the throttling threshold:

# Use a configuration file to set the parameter value. Unfortunately, there are a couple of issues to this option. First, we currently don't have a config file on the client side, and I'm not sure if one variable would justify setting it up. Second, I'm not convinced that it is a good idea to have config files on the client side. It is nice to instantiate a BookKeeper object without having to bother about config files (on the client side);
# Add an input variable to BookKeeper constructors or to createLedger/openLedger calls. This one sounds like a bad option to me because I don't think it will be used often and it is not related to the corresponding operations; 
# Use set/get calls to change the threshold value. This is what I used with this patch.

A fourth option is to have an environment variable, but this is similar to having a config file, so I'm not sure there is any great advantage.

Any thoughts?, Canceling patch until we decide how to control throttling on the client., i think using a system property is still the easiest, but i'm fine with the set/get if you want to do it. you just need to make it thread safe., Submitting a new patch that uses a system property.

In LedgerHandle, I'm currently throwing NumberFormatException instead of catching it locally. My rationale is that if a user is trying to set the throttling threshold, then we should not proceed when the input value is not correct. To catch and handle a NFE exception that may arise in both LedgerCreateOp and LedgerOpenOp, I created a new BKException called BKIncorrectParameterException.

 , -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12448407/ZOOKEEPER-719.patch
  against trunk revision 958096.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no tests are needed for this patch.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: http://hudson.zones.apache.org/hudson/job/Zookeeper-Patch-h7.grid.sp2.yahoo.net/91/testReport/
Findbugs warnings: http://hudson.zones.apache.org/hudson/job/Zookeeper-Patch-h7.grid.sp2.yahoo.net/91/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: http://hudson.zones.apache.org/hudson/job/Zookeeper-Patch-h7.grid.sp2.yahoo.net/91/console

This message is automatically generated., My bad, forgot to include the test file in the patch... Resubmitting in a second. , +1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12448478/ZOOKEEPER-719.patch
  against trunk revision 958096.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: http://hudson.zones.apache.org/hudson/job/Zookeeper-Patch-h7.grid.sp2.yahoo.net/92/testReport/
Findbugs warnings: http://hudson.zones.apache.org/hudson/job/Zookeeper-Patch-h7.grid.sp2.yahoo.net/92/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: http://hudson.zones.apache.org/hudson/job/Zookeeper-Patch-h7.grid.sp2.yahoo.net/92/console

This message is automatically generated., +1 looks good, Committed revision 962693., Integrated in ZooKeeper-trunk #881 (See [http://hudson.zones.apache.org/hudson/job/ZooKeeper-trunk/881/])
    ]