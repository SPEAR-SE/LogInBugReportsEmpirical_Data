[nice finding!, I suppose this is because we force to disk with the metadata option set to false (FileTxnLog.commit):

{noformat}
log.getChannel().force(false);
{noformat}

Are you suggesting that we force to disk with the metadata option set to true upon creating a new file? We do flush the BufferedOutputStream associated to the FileOutputStream, but that only flushes the buffer of BOS to FOS, my understanding of the documentation is that it doesn't induce a force., Seems there's no JAVA api could do this,  one possible solution is JNI.
ps: It's still safe if using XFS:)   but really need a directory fsync w/ ext4, in theory.
[~fpj], i think you missed Samer's point...
, Fair enough, let's go into more detail here. According to the analysis in the description, I read two potential problems:

- The directory data of a newly created directory isn't persisted to disk
- A newly created log file isn't persisted as a directory entry

Both cases may lead to the loss of an otherwise persisted log file and they imply that we need to fsync the directory data. There is a third point that I believe is important, which is making sure that the metadata is updated when we pad the log file. 

The fsync documentation says that we need to fsync the directory as well to make sure that the directory change is persisted to disk. You claim that it is not possible to do this in java, but I think that with Java 7 we can fsync directories, no?

It seems that there are two parts to this discussion. First, we need to understand to what extent this is really a problem in the current code. I must say that I haven't thought about this part of ZK in a while, so I don't have it entirely fresh. Second, assuming there is something to be fixed, we need to determine how to do it in Java.



, bq. To be safe, both the log directory, and parent directory of the log directory should be fsynced as well.

That sounds like more than needed. We only need to fsync the parent directory when the logfile has *just been created*, every other append doesn't need an fsync of the parent dir (maybe you meant that, but the last statement seems to be overreaching).

See: http://www.quora.com/Linux/When-should-you-fsync-the-containing-directory-in-addition-to-the-file-itself]