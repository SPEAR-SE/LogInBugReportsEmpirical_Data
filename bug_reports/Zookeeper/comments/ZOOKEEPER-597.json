[this patch updates the test to log the threads/stacks if an error occurrs during session est., I just committed this. thanks pat., Integrated in ZooKeeper-trunk #558 (See [http://hudson.zones.apache.org/hudson/job/ZooKeeper-trunk/558/])
    , still an issue, reopening, I have added some more log messages on my own to track the session that causes a run of the test to fail, and here is what I got for the culprit:

{noformat}
2009-12-01 13:04:07,883 - INFO  [FollowerRequestProcessor:1:CommitProcessor@167] - Adding request to queue (CP): 1254a2022040016
2009-12-01 13:04:07,884 - INFO  [ProcessThread:-1:PrepRequestProcessor@353] - Processing create session in PRP: 1254a2022040016
2009-12-01 13:04:07,884 - INFO  [ProcessThread:-1:CommitProcessor@167] - Adding request to queue (CP): 1254a2022040016
2009-12-01 13:04:07,886 - INFO  [SyncThread:2:SendAckRequestProcessor@41] - Send ack is processing create session (SARP): 1254a2022040016
2009-12-01 13:04:07,886 - INFO  [SyncThread:1:SendAckRequestProcessor@41] - Send ack is processing create session (SARP): 1254a2022040016
2009-12-01 13:04:07,886 - WARN  [LeanerHandler-/127.0.0.1:57817:Leader@470] - Processing ack (Leader): 1254a2022040016, 1
2009-12-01 13:04:07,886 - WARN  [SyncThread:0:Leader@470] - Processing ack (Leader): 1254a2022040016, 2
2009-12-01 13:04:07,887 - WARN  [SyncThread:0:Leader@481] - Going to apply (Leader): 1254a2022040016, 2
2009-12-01 13:04:07,887 - WARN  [CommitProcessor:0:Leader$ToBeAppliedRequestProcessor@542] - Applying (TBARP): 1254a2022040016
2009-12-01 13:04:40,000 - INFO  [SessionTracker:ZooKeeperServer@327] - Expiring session 0x1254a2022040016, timeout of 30000ms exceeded
2009-12-01 13:04:40,000 - INFO  [ProcessThread:-1:PrepRequestProcessor@386] - Processed session termination for sessionid: 0x1254a2022040016
{noformat}

For a session that has been correctly established, we can see that there is an extra message for FinalRequestProcessor:

{noformat}
2009-12-01 13:04:37,924 - INFO  [FollowerRequestProcessor:2:CommitProcessor@167] - Adding request to queue (CP): 2254a2022070017
2009-12-01 13:04:37,924 - INFO  [ProcessThread:-1:PrepRequestProcessor@353] - Processing create session in PRP: 2254a2022070017
2009-12-01 13:04:37,925 - INFO  [ProcessThread:-1:CommitProcessor@167] - Adding request to queue (CP): 2254a2022070017
2009-12-01 13:04:37,925 - WARN  [SyncThread:0:Leader@470] - Processing ack (Leader): 2254a2022070017, 1
2009-12-01 13:04:37,925 - INFO  [SyncThread:2:SendAckRequestProcessor@41] - Send ack is processing create session (SARP): 2254a2022070017
2009-12-01 13:04:37,925 - WARN  [LeanerHandler-/127.0.0.1:57817:Leader@470] - Processing ack (Leader): 2254a2022070017, 2
2009-12-01 13:04:37,926 - WARN  [LeanerHandler-/127.0.0.1:57817:Leader@481] - Going to apply (Leader): 2254a2022070017, 2
2009-12-01 13:04:37,926 - WARN  [CommitProcessor:0:Leader$ToBeAppliedRequestProcessor@542] - Applying (TBARP): 2254a2022070017
2009-12-01 13:04:37,926 - INFO  [SyncThread:1:SendAckRequestProcessor@41] - Send ack is processing create session (SARP): 2254a2022070017
2009-12-01 13:04:37,926 - INFO  [CommitProcessor:2:FinalRequestProcessor@175] - Processing create session in FRP: 2254a2022070017
{noformat}

It sounds like the createSession request goes as far as ToBeAppliedProcessor, but it doesn't make it to FinalRequestProcessor. If my observation is correct, I think it is getting lost between the two. Is that possible?

, I have also been able to verify that createSession operations that do not complete are exiting FinalRequestProcessor.processRequest here (around line 138):

{noformat}
if (request.cnxn == null) {
            return;
}
{noformat}
 
which is executed before the switch/case block that would finalize the operation., according to the latest log the commit processor thread is exiting. I notice that we are not logging exceptions from that thread. We should include logging the exception as part of this fix. Really we need to add to the ThreadGroup -- handle uncaught exceptions -- log them at error level, It is ok to have cnxn = null in FinalRequestProcessor. For example, if a follower is forwarding a request, cnxn will be null for the leader. The problem, as Pat points out, seems to be that CommitProcessor is exiting at the follower that was supposed to finalize it.

Here is the stack trace from a faulty run:


{noformat}
java.nio.channels.CancelledKeyException
	at sun.nio.ch.SelectionKeyImpl.ensureValid(SelectionKeyImpl.java:55)
	at sun.nio.ch.SelectionKeyImpl.interestOps(SelectionKeyImpl.java:59)
	at org.apache.zookeeper.server.NIOServerCnxn.sendBuffer(NIOServerCnxn.java:350)
	at org.apache.zookeeper.server.NIOServerCnxn.sendResponse(NIOServerCnxn.java:1065)
	at org.apache.zookeeper.server.FinalRequestProcessor.processRequest(FinalRequestProcessor.java:360)
	at org.apache.zookeeper.server.quorum.CommitProcessor.run(CommitProcessor.java:73)
{noformat}, added link to 602 for logging uncaught exception, A runtime exception was killing the CommitProcessor., +1 ... one minor nit .. can you change Throwable to Exception?, changes to cache Exception not Throwable., Committed revision 886241.
(waiting for a couple of successful runs before i close), Integrated in ZooKeeper-trunk #565 (See [http://hudson.zones.apache.org/hudson/job/ZooKeeper-trunk/565/])
    . ASyncHammerTest is failing intermittently on hudson trunk
, log the throwable if commit rp exits, please commit 597_2 to trunk this will allow us to see why commit rp is exiting, I just committed 597_2., Integrated in ZooKeeper-trunk #569 (See [http://hudson.zones.apache.org/hudson/job/ZooKeeper-trunk/569/])
    , this installs an uncaught exception handler for all threads., this patch removes the deadlock and the useless flag that was causing the deadlock and installs a default uncaught exception handler., +1 for the patch. i just committed this., looks like the build is normal now.

http://hudson.zones.apache.org/hudson/job/ZooKeeper-trunk/571/

ill let the hudson trunk build run a few more times and then close this jira., this is still happening, but in another area:

http://hudson.zones.apache.org/hudson/view/ZooKeeper/job/ZooKeeper-trunk/577/testReport/org.apache.zookeeper.test/AsyncHammerTest/testObserversHammer/

It is good to have the handler here!

2009-12-04 13:46:13,493 - ERROR [CommitProcessor:0:CommitProcessor@146] - Unexpected exception causing CommitProcessor to exit
java.nio.channels.CancelledKeyException
    at sun.nio.ch.SelectionKeyImpl.ensureValid(SelectionKeyImpl.java:55)
    at sun.nio.ch.SelectionKeyImpl.interestOps(SelectionKeyImpl.java:64)
    at org.apache.zookeeper.server.NIOServerCnxn.sendBuffer(NIOServerCnxn.java:378)
    at org.apache.zookeeper.server.NIOServerCnxn.sendCloseSession(NIOServerCnxn.java:349)
    at org.apache.zookeeper.server.FinalRequestProcessor.processRequest(FinalRequestProcessor.java:356)
    at org.apache.zookeeper.server.quorum.Leader$ToBeAppliedRequestProcessor.processRequest(Leader.java:532)
    at org.apache.zookeeper.server.quorum.CommitProcessor.run(CommitProcessor.java:73)
, this patch fixes the 2 latest failuires we saw:

- http://bugs.sun.com/view_bug.do?bug_id=6427854, a bug in the jvm which is fixed by a selector.open.close() call in a static block in NIOServerCnxn (thanks ben for the idea)

- the other cancelled key exception is fixed by wrapping sendbuffer with try catch for exceptions.

i looked for any other calls that can cause commitprocessor to fail in this way and could not find anything else. hopefully this is the last of such problems.
, +1 looks great, Integrated in ZooKeeper-trunk #578 (See [http://hudson.zones.apache.org/hudson/job/ZooKeeper-trunk/578/])
    . ASyncHammerTest is failing intermittently on hudson trunk (take 5) (mahadev)
, patch for 3.1 release., patch for 3.2 release., +1 for 3.1 and 3.2, ant test passes for both 3.1 and 3.2 branch., I just committed this to 3.1 and 3.2 branches. ]