[Here's a log showing this behavior, along with the log file that got produced (all zeroes, I think)., This appears like it might be a duplicate of ZOOKEEPER-1060; if so, sorry for not finding it earlier.  Feel free to close if so; I'll try out the recommended fix in that JIRA in my setup., Thanks for the feedback Jeremy, can you provide feedback on ZOOKEEPER-1060 as to whether you have/had success with that patch?, I added a comment there, but as I mentioned, we've only hit this once in months of testing, and unfortunately I don't have the time to try to carefully reproduce it.  I will update if I ever see the problem again even with this patch, but based on my analysis of the logs I'm pretty sure these issues are related., 
I think this is serious bug. 1060 is just interrupting
QuorumPeer if it is waiting in poll() in lookForLeader().

This bug I think is because of incorrect use of Java FileChannel and
BufferedOutputStream which is causing data to be flushed to the log
out of order.

From FileTxnLog.append():
{quote}
    [...]
    fhdr.serialize(oa, "fileheader"); <====== Buffered write
    currentSize = fos.getChannel().position();
    streamsToFlush.add(fos);
   }
   padFile(fos);
{quote}


From Util.padLogFile()
{quote}
f.getChannel().write(fill, currentSize-fill.remaining());  <========= Non buffered write
{quote}

A failure after call to padLogFile, but before flushing the
BufferedOutputStream will lead to this bug. :-(

I am raising the priority of this bug.
Please correct me if I am wrong., Jeremy,

Can I suggest a better usage of QuorumPeer for embedded ZK? 

Start a thread (main) which calls QuorumPeerMain.initializeAndRun()

In your application's shutdown method do:
quorumpeer.shutdown();
main.join();

initializeAndrun() invokes runFromConfig() which does a quorumpeer.join.

I think we need a standardize APIs for embedded ZK. I will open a JIRA for that., Thanks for the suggestion, but calling initializeAndRun() would mean that we'd have to write our config out to a file, right?  Right now our config gets transferred to the wrapper class via RPC from another program.  We could of course write it all to a file after its transferred, but it seems like a waste of code.

The other problem is that we need to be able to transition between 1 node cluster and 3 node clusters (and back), so we'd need a similar method for ZooKeeperServer.  Maybe there is one and I just haven't found it yet.

Could I just do a QuorumPeer.join() from my own shutdown method?, {quote}
Could I just do a QuorumPeer.join() from my own shutdown method?
{quote}

Yeah, that should work. BTW, why are you calling commit after shutdown?, {quote}
Yeah, that should work. BTW, why are you calling commit after shutdown?
{quote}

If I remember correctly, I think I ran into this problem a really long time ago, and I figured it was because I was shutting down the QuorumPeer without giving it a chance to commit to disk.  (A cursory glance at shutdown() didn't show anything that was committing the log.)  Should a QuorumPeer.join() (plus a fix for this bug) be enough to guarantee that everything gets pushed consistently do disk?, Attaching patch. 

The bug can be reproduced by  killing the server after call to padLog. Verified that the patch fixes the problem (server can read the magic number after restart)., Submitting patch for trunk., The patch looks ok but could the test perhaps simulate creating a transaction log, appending the magic number, then verifying the log looks good without calling close? FileTxnLog.append is a public method so should be pretty easy to do., +1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12480487/ZOOKEEPER-1069
  against trunk revision 1125581.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 7 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/hudson/job/PreCommit-ZOOKEEPER-Build/291//testReport/
Findbugs warnings: https://builds.apache.org/hudson/job/PreCommit-ZOOKEEPER-Build/291//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/hudson/job/PreCommit-ZOOKEEPER-Build/291//console

This message is automatically generated., need a better test., Hi Camille,

Attaching patch with modified test., +1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12480581/ZOOKEEPER-1069.patch
  against trunk revision 1125581.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 4 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/hudson/job/PreCommit-ZOOKEEPER-Build/295//testReport/
Findbugs warnings: https://builds.apache.org/hudson/job/PreCommit-ZOOKEEPER-Build/295//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/hudson/job/PreCommit-ZOOKEEPER-Build/295//console

This message is automatically generated., Looks good Vishal, +1 from me.
The LoadFromLogTest is not in 3.3.3. Do we want to apply this just to trunk, or to trunk and 3.3.3 minus the test?, Thanks. I would think path for both ZOOKEEPER-1046 and this bug need to go on 3.3. I think you pointed out earlier about some issues while porting to 3.3. I also think ZOOKEEPER-975 needs to go in 3.3.  I am not clear about the rationale behind which patch goes to which version.
, I'm not either. Could someone else chime in on the process for this?, the basic rule i that only bug fixes go into old releases. usually we try to commit bug fixes to both the latest branch and to trunk., Integrated in ZooKeeper-trunk #1205 (See [https://builds.apache.org/hudson/job/ZooKeeper-trunk/1205/])
    ZOOKEEPER-1069: Calling shutdown() on a QuorumPeer too quickly can lead to a corrupt log

camille : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1132489
Files : 
* /zookeeper/trunk/src/java/main/org/apache/zookeeper/server/persistence/FileTxnLog.java
* /zookeeper/trunk/src/java/test/org/apache/zookeeper/test/LoadFromLogTest.java
* /zookeeper/trunk/CHANGES.txt
, Was a bit hasty closing this, I see that Camille is still trying to backport this to 3.3.3., I will try to finish this up later this week., It should be 3.3.4 and not 3.3.3 (thanks for pointing out, Mahadev)., Camille/Falvio,
 Any progress on this? Can we close this now?, My understanding is that we have committed a patch for this jira to trunk, but there is still a patch missing for the 3.3 branch. Is there anyone working on a patch for 3.3? Camille, Vishal?, Whoops sorry, somehow I lost this one. Will take a look today., Ok the only merge needed now is deleting the LOG statement from the test (relies on slf4j) so I'm just going to check it in.]