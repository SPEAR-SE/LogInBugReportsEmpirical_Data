[Since we don't have async multi-op in Java, the unit test have to be in c-client unit test  , +1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12565429/ZOOKEEPER-1624.patch
  against trunk revision 1434978.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1343//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1343//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1343//console

This message is automatically generated., Any multi-op expert can help on initial feedback?, Clean up wait counter so that future test can run correctly, I started looking at this. I am very unhappy that we have to write a C client test to reveal a bug in our Java core. I'm working on writing a java test to replicate because we really should not have to rely on tests that should only be for the client side code to test our server., It should be simple to replicate if ZOOKEEPER-1572 is committed to trunk.  We just need async functionality to test this. , Oh that's great Thawan, I will see about getting 1572 committed so we can get an easy Java-side test for this bug., The fix would be backported to 3.4, right ?, -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12567638/ZOOKEEPER-1624.patch
  against trunk revision 1438375.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    -1 release audit.  The applied patch generated 26 release audit warnings (more than the trunk's current 24 warnings).

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1375//testReport/
Release audit warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1375//artifact/trunk/patchprocess/patchReleaseAuditProblems.txt
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1375//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1375//console

This message is automatically generated., Can we get a test for this in Java now that ZOOKEEPER-1572 has been committed? I can't get the cppunit build to run and I'm uncomfortable approving a patch where I can't see the tests fail and pass., A version of with Java unit test.  

Since this version relies on ZOOKEEPER-1572, it can only be applied to trunk.  For 3.4.6, we have to use the previous version. , +1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12570018/ZOOKEEPER-1624.patch
  against trunk revision 1447621.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1398//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1398//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1398//console

This message is automatically generated., This new patch still doesn't seem to have the Java test., Oops uploaded the wrong file.  This one should have it , -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12570055/ZOOKEEPER-1624.patch
  against trunk revision 1447982.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 6 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1400//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1400//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1400//console

This message is automatically generated., This is a direct port of c-client test. However, I found that it cannot detect the bug because of a timing issue. I think it is because both server and client are in the same process for Java unit test, each multi request will get committed before the next one arrive, so the bug won't occur.

On the other hand, with c-client test, the bug is always reproducible in my box.    

If anyone can help me on Java test I will be appreciated. , +1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12570079/ZOOKEEPER-1624.patch
  against trunk revision 1447982.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 6 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1402//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1402//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1402//console

This message is automatically generated., I was wondering about what to do with this jira. We need to work on the java test case, and on top of it decide what to do for the 3.4 branch. I believe that we didn't check in ZOOKEEPER-1572 to the 3.4. branch because [~mahadev] said that we don't check in new features into an ongoing branch. Well, in this case, I'd say we should so that we can cleanly apply this patch, unless we come up with a way of testing that does not rely on the async multi api. 

On the java test case, [~thawan] says that it doesn't pass, but the last run on jenkins returned +1 for the core unit tests. Did you mean to say that it doesn't pass reliably?

Could you people give me some feedback here, please, [~thawan], [~fournc]?, @thawan, Could you give me some feedback here as well, please?

As for the Java test, I was thinking that to make a multi-op transaction fail reliably, you could use check() with a znode, version pair that doesn't match, which will cause the transaction to fail. If the transaction also includes the creation of a sequential znode, then you should be able to trigger this bug, no?, For Java, I think the best approach is to unit test the PrepRequestProcessor itself directly (and mock the rest of system). With this approach, we won't need async interface.  I haven't have time to rewrite the test yet but if we want this in 3.4.6, I will find some time to work on it after I am done with ZK-1551,1552, I'd like to have this one in for 3.4.6 if possible., [~thawan], would you have time to generate a patch for 3.4.6?, The problem is that ZOOKEEPER-1572 is necessary for the test he wrote for this. Do we want to push that into 3.4.6?, We typically don't add features in fix releases., Right. So should we push the patch without the Java test in 3.4.6?, Can a test not be created that meets the criteria?, I understand that we typically don't add new features to bug fix releases, but I don't really see a problem with having ZOOKEEPER-1572 into b3.4, it is not really a whole new feature., As I already comment earlier, the current Java test doesn't actually catch the bug due to timing issue.  I guess, I will have to rewrite it to test PrepRequestProcessor directly (which is probably not going to rely on ZOOKEEPER-1572)

If you want to commit this now,  the patch itself has a proper and reliable (at least on my box) unit test in C.  Our test infrastructure do run C unit test and report the result right?  I agree with Camile that it would be nice to have Java test for server-side functionality but it isn't strictly needed right? , I'm comfortable with pushing the patch for 3.4 without the Java test. , bq. it is not really a whole new feature

fwiw a public facing client API change that adds async support to multi is a feature imo., Given the recent set of comments, I'm not sure it matters, but my point was simply that adding async calls for a feature that already exists is not really adding a whole new feature, just extending the scope of an existing one. For me, the feature is multi. But fine if we can make progress without it., patch for 3.4, -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12607473/ZOOKEEPER-1624-3.4
  against trunk revision 1530166.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    -1 patch.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1662//console

This message is automatically generated., This patch just makes it apply to 3.4 and removes the Java test. If there are no objections I'll check it in., No objection on my end., SUCCESS: Integrated in ZooKeeper-trunk #2085 (See [https://builds.apache.org/job/ZooKeeper-trunk/2085/])
ZOOKEEPER-1624. PrepRequestProcessor abort multi-operation incorrectly. (thawan via camille) (camille: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1531061)
* /zookeeper/trunk/CHANGES.txt
* /zookeeper/trunk/src/c/tests/TestMulti.cc
* /zookeeper/trunk/src/java/main/org/apache/zookeeper/server/PrepRequestProcessor.java
* /zookeeper/trunk/src/java/test/org/apache/zookeeper/test/MultiAsyncTransactionTest.java
, Closing issues after releasing 3.4.6.]