[This does sound like incorrect behavior to me. Henry what do you think? slating for 3.4.0, Hi Henry ,

Any comments?

Thanks.
-Vishal, going once, going twice ... :), Hi Vishal - 

Sorry for the slow turnaround on this one. It doesn't surprise me that this is the behaviour, although it's slightly unexpected that the node becomes an observer, rather than a follower. What evidence do you have for that? (Given that Mode: follower - I haven't checked the code in a while, but I would have thought it would print Mode: Observer).

Henry, I have not used observers yet. Looks like then I need to verify if this follower can become a leader.  I think I had tried this. If I remember, the 4th node did not become a leader. But this was a while back. I will try it again and update the jira., I think what happens is that the leader happily lets the new follower connect, but that it won't be part of any voting procedure. It shouldn't become leader because no other nodes know about it to  propose or support a vote for it. 

To add a new node, you'll need to incrementally restart every node in your cluster with the new config., not a blocker. Moving it out of 3.4 release., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12492214/ZOOKEEPER-851.patch
  against trunk revision 1163106.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    -1 javac.  The applied patch generated 11 javac compiler warnings (more than the trunk's current 10 warnings).

    -1 findbugs.  The patch appears to introduce 1 new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/479//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/479//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/479//console

This message is automatically generated., I would like to know any review comments on the approach in patch.

Will the check the test failures and Javac warnings.
, Vishal -
I am actually using this behavior as a feature to add observers on demand without having to restart the core ensemble. It is slightly different from the scenario you tried. In my scenario, the 4th node thinks it is an observer (instead of it being a participant). Could you please make sure that the unknown observer scenario works fine with your patch? From what I could tell from reviewing the patch, even an unknown observer will get an INVALID_PEER message.

Thanks!
Vishal (FB) , Hi Vishal,

I'm also relying on this feature in the implementation of ZK-107 - this way the new servers are able to join and transfer state before they are added to the cluster, which reduces the time to reconfigure. They become "non-voting followers" (actually, currently they can vote which is fixed in ZK-1113, a sub-bug of ZK-107). This feature also allows removed servers to continue serving clients until the clients switch to new cluster members.


Thanks,
Alex, i think we need to identify exactly what the problem is with the current behavior and fix that, since the ability to connect to a zk server as an unlisted follower or observer is useful. i think the core problem is that anyone is able to do it, so perhaps the issue is really about authorizing server connections., Thanks for all your inputs.

Initially I looked at this as a problem which needs to be fixed by rejecting the unknown peer. But I understand that this is expected behavior which is used in current development of some features (like ZK-107).

{quote}Could you please make sure that the unknown observer scenario works fine with your patch?{quote}
I think this is better approach. I can accommodate this change in my patch.

@Alex, allowing unlisted follower to join the quorum will bring in some more scenarios. I will go through the approach discussed under ZK-107 and its sub-tasks before proceeding with this issue. 

@Ben, IMO, authentication should not be the core problem. In our scenario, this was due to a wrong configuration., laxman/Alex,
 I think I agree with Ben, we need to fix this as part of (server to server)/(observer to leader) authentication. 

 More importantly, I think the scope and discussion indicate that this might be a bigger change and might need some consensus. I'd suggest moving this out of 3.4. Comments? Thought?, Yes, it is an authorization issue. the intention was to ensure that only the authorized servers will take the role of voting members/observers. 

This is also somewhat related to ZOOKEEPER-933. 933 talks about auto generating some unique identifier for the observer instead of using observer id for all observers. It is not directly related to this jira but covers the same code path.

This jira is (correctly) not marked as a blocker for 3.4. Isn't it already out of 3.4? If not, then I vote to move it out of 3.4 as well.
, I also agree to move this out of 3.4 as this issue needs more discussion to finalize on approach., IMHO, this issue can be treated separately and can start working on this once ZK-1045 is completed.]