[This may be caused by ClientCnxnSocketNIO.java:

    void registerAndConnect(SocketChannel sock, InetSocketAddress addr) 
    throws IOException {
        sockKey = sock.register(selector, SelectionKey.OP_CONNECT);
        boolean immediateConnect = sock.connect(addr);
        if (immediateConnect) {
            sendThread.primeConnection();
        }
    }

In the immediate case, there are several bugs:

a) updateSocketAddresses() is never called, as it is when the select-loop in doTransport(). This means that clientCnxnSocket.getRemoteSocketAddress() will return null for the lifetime of this socket?
b) CONNECT still in the interest set for the socket.
c) updateLastSendAndHeard() is never called either., Note that since connect() is called by SendThread, if connect() is NOT immediate ClientCnxn.start() may return immediately, and so the following call sequence will return null:
zk = new ZooKeeper(...)
zk.[....].getRemoteSocketAddress()

So I think this breaks on both code paths. Perhaps the immediate-case above is a strictly separate bug., Thanks Shevek. I'd like to focus on the bug in updateServerList(), so I think its a good idea to split the other issue into a separate jira.

For updateServerList() I was at first thinking to treat the case of currentHost being null similarly to the case where the currentHost is not in the new list of servers. But then I realized that this will create imbalance. Now I'm thinking maybe we should look on the server to which the client should have been connected as currentHost and run the algorithm from there. Or maybe if we consider the null case to be very rare we could ignore the imbalance that it can create :) I'm still looking into it., The trouble is that there's hidden state in flight. The question is, what is the state of the ZooKeeper client when the constructor returns.

If it is determined that it has a remote socket address, i.e. updateServerList should be callable as-written, and be safe, then ClientCnxn needs to SYNCHRONOUSLY, i.e. not via SendThread.start() record the "intended" target connection address.

If we follow the proposal to allow the address to be null in updateServerList, then either:
a) We nulls (treat it as always in the list), in which case the "invisible" state of the intended server address of the in-flight connect may still allow us to connect to a "wrong" server.
b) We say a null is never in the list, in which case repeated fast calls to updateServerList could cause a denial of service of the ZooKeeper client.

The difficulty, I think, is that the state of the client when "new ZooKeeper" returns is defined by a race condition. The INTENT of the connection needs to be recorded in 'new ClientCnxn' before SendThread.start() goes asynchronous.

A somewhat uglier hack might be to make StaticHostProvider cache the previously returned value and give the ClientCnxn a kicking if the cached value was removed from the list. While this would also work, I feel that it would contribute negatively to the overall complexity and coupledness of the code., TL;DR: It should never be null. That's the bug. When "new ZooKeeper()" returns, we know which host we intend to connect to. We just don't have that information due to a sequence of bugs and races., The patch fixes the problem of currentHost being null and also handles the case of updateServerList being called twice, without migration completing in between the calls. This case wasn't previously handled.

The idea is that if migration hasn't completed yet, and updateServerList is called again, we need to complete it "virtually" - we don't need to connect to the new server, but we should figure out where we should connect to. This is the case whether or not currentHost is null.

If migration is not in progress, and currentHost is null, we should look on the last host to which the client was connected, or the first host in the list in case it hasn't connected to any host yet. , -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12577438/ZOOKEEPER-1683.patch
  against trunk revision 1463329.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    -1 findbugs.  The patch appears to introduce 3 new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1447//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1447//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1447//console

This message is automatically generated., +1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12577457/ZOOKEEPER-1683-ver1.patch
  against trunk revision 1463329.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1448//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1448//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1448//console

This message is automatically generated., +       		if (lastIndex >=0) {
+            	// take the last server to which we were connected
+       			myServer = this.serverAddresses.get(lastIndex);

I don't see why this is guaranteed not to throw an IndexOutOfBoundsException. There is no relationship between lastIndex from the previous server list, and serverAddresses, the new server list., Withdraw that; it's the previous server list., exactly. thanks for reviewing, Shevek!, Actual testing failed, when first connected to invalid server, then attempting to update to valid server.

java.lang.NullPointerException
        at org.apache.zookeeper.ClientCnxnSocketNIO.testableCloseSocket(ClientCnxnSocketNIO.java:376) ~[zookeeper-3.5.0.jar:3.5.0--1]
        at org.apache.zookeeper.ZooKeeper.updateServerList(ZooKeeper.java:187) ~[zookeeper-3.5.0.jar:3.5.0--1]
, sockKey == null, because previously:

2013-04-10 05:19:52,787 WARN  [main-SendThread(localhost:2181)] org.apache.zookeeper.ClientCnxn$SendThread.run (ClientCnxn.java:1122
) - Session 0x0 for server null, unexpected error, closing socket connection and attempting reconnect
java.net.ConnectException: Connection refused
        at sun.nio.ch.SocketChannelImpl.checkConnect(Native Method) ~[?:1.6.0_24]
        at sun.nio.ch.SocketChannelImpl.finishConnect(SocketChannelImpl.java:592) ~[?:1.6.0_24]
        at org.apache.zookeeper.ClientCnxnSocketNIO.doTransport(ClientCnxnSocketNIO.java:353) ~[zookeeper-3.5.0.jar:3.5.0--1]
        at org.apache.zookeeper.ClientCnxn$SendThread.run(ClientCnxn.java:1101) [zookeeper-3.5.0.jar:3.5.0--1]
2013-04-10 05:19:52,788 DEBUG [main-SendThread(localhost:2181)] org.apache.zookeeper.ClientCnxnSocketNIO.cleanup (ClientCnxnSocketNI
O.java:193) - Ignoring exception during shutdown input
java.nio.channels.ClosedChannelException
        at sun.nio.ch.SocketChannelImpl.shutdownInput(SocketChannelImpl.java:656) ~[?:1.6.0_24]
        at sun.nio.ch.SocketAdaptor.shutdownInput(SocketAdaptor.java:378) ~[?:1.6.0_24]
        at org.apache.zookeeper.ClientCnxnSocketNIO.cleanup(ClientCnxnSocketNIO.java:190) [zookeeper-3.5.0.jar:3.5.0--1]
        at org.apache.zookeeper.ClientCnxn$SendThread.cleanup(ClientCnxn.java:1190) [zookeeper-3.5.0.jar:3.5.0--1]
        at org.apache.zookeeper.ClientCnxn$SendThread.run(ClientCnxn.java:1130) [zookeeper-3.5.0.jar:3.5.0--1]
2013-04-10 05:19:52,789 DEBUG [main-SendThread(localhost:2181)] org.apache.zookeeper.ClientCnxnSocketNIO.cleanup (ClientCnxnSocketNI
O.java:200) - Ignoring exception during shutdown output
java.nio.channels.ClosedChannelException
        at sun.nio.ch.SocketChannelImpl.shutdownOutput(SocketChannelImpl.java:667) ~[?:1.6.0_24]
        at sun.nio.ch.SocketAdaptor.shutdownOutput(SocketAdaptor.java:386) ~[?:1.6.0_24]
        at org.apache.zookeeper.ClientCnxnSocketNIO.cleanup(ClientCnxnSocketNIO.java:197) [zookeeper-3.5.0.jar:3.5.0--1]
        at org.apache.zookeeper.ClientCnxn$SendThread.cleanup(ClientCnxn.java:1190) [zookeeper-3.5.0.jar:3.5.0--1]
        at org.apache.zookeeper.ClientCnxn$SendThread.run(ClientCnxn.java:1130) [zookeeper-3.5.0.jar:3.5.0--1]

thus clearing sockKey., I reviewed these changes as well and they look good to me. A few observations:

1) I definitely like the additional tests. 
2) Is there any documentation in the doxygen regarding selection of the next server that needs to be updated? 
3) Have you looked at Shevek's real-world testing failure he saw above?
4) I'm going to look at the related C code now to see if the same problems exist over there.


, The C client code doesn't suffer from this bug. It already deals gracefully with the current host being null and for zoo_set_servers being called twice before the reconfig completes. So I think we're good in the C client side already., thanks Shevek and Marshall!

seems like first sockkey is set, then remoteSocketAddress is set.
should we be checking for both before attempting to close the socket or just for sockkey != null ?, I think you can't just check isConnected() / sockKey != null because it's being set to null on a different thread, so then there will be a race for the NPE instead of just an NPE.

One of the other issues with this thread contract, where values are set within an object which is accessible to more than one thread is that JSR133 says that assignments performed in constructors do not happen-before the constructor returns unless the variable being assigned is final. Since ClientCnxnNIO is accessible to more than one thread at the point variables like sockKey are initialized, I suspect the code violates the JMM anyway.

A much better solution would be to use more immutable variables, and discard and reconstruct objects rather than attempting to modify them. An ideal solution would be to use something like netty, which is designed to handle and abstract all these cases., I see. There's actually a comment there in the code "should this be synchronized?" and the answer is probably yes :)

How about making sockKey volatile ?, volatile causes a write-read pair of the variable to form a transitive happen-before relationship in the JMM. It does not solve the race - we (A) could check sockKey != null, then the close() (B) could clear it, then we (A) indirect on it, and we have an ABA race.

Personally, I would probably change testableCloseSocket to load sockKey into a temporary local, then test for nullness of the local before indirecting on that. No synchronization needed, and pointer assignment is always atomic, even in 64-bit JVMs., you're right of course. do you mind adding your proposed solution to my patch ?, It's going to be a while, I'm afraid; I'm flying every other day for a bit. Right now, I just catch the NPE in upstream code and reset totally, ditching the session. :(, addresses the race using a local variable as suggested, -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12578570/ZOOKEEPER-1683-ver2.patch
  against trunk revision 1463329.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1457//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1457//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1457//console

This message is automatically generated., resubmitting as previous test result hits ZOOKEEPER-1629, -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12578573/ZOOKEEPER-1683-ver2.patch
  against trunk revision 1463329.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1458//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1458//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1458//console

This message is automatically generated., +1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12578583/ZOOKEEPER-1683-ver2.patch
  against trunk revision 1463329.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1459//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1459//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1459//console

This message is automatically generated., Shevek, can you please see if it looks ok / solves the bug ?

Thanks,
Alex, I think it looks OK.

We put the code into production on several clusters on Monday afternoon, and we're waiting on results. It's a bit early to promise anything from tests.

I'm still somewhat unhappy with the client code overall, as I don't think the contracts of many of the states are clear enough to definitively claim correctness., very glad to hear you're running client-side reconfiguration in production!!, Shevek, did this patch resolve the issue ?, [~shralex] This looks like a +1 to me, since you created the original patch do you want to check this in?, -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12578583/ZOOKEEPER-1683-ver2.patch
  against trunk revision 1605517.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2154//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2154//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2154//console

This message is automatically generated., rebasing for trunk, -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12653978/ZOOKEEPER-1683-ver3.patch
  against trunk revision 1607525.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    -1 findbugs.  The patch appears to introduce 2 new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2171//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2171//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2171//console

This message is automatically generated., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12653989/ZOOKEEPER-1683-ver5.patch
  against trunk revision 1607525.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2172//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2172//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2172//console

This message is automatically generated., tests pass locally, trying to trigger hudson tests again, -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12654013/ZOOKEEPER-1683-ver5.patch
  against trunk revision 1607525.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2174//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2174//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2174//console

This message is automatically generated., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12654014/ZOOKEEPER-1683-ver6.patch
  against trunk revision 1607525.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 6 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2175//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2175//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2175//console

This message is automatically generated., Looks fine now, not sure but perhaps the failure was related to zktest-mt failures we've been seeing.
In any case, I added a more meaningful message so that if this fails in the same place we have more info.
Any objections that I commit this ? [~fournc] can you please have another look ?, Sorry for pitch in late. Thanks [~shralex] for the patch. Could you please correct the code format too.

1) {code} +        if (tmp!=null) { {code}
could be {code} if (tmp != null) { {code}

2) {code} if (lastIndex >=0) { {code}
could be  {code} if (lastIndex >= 0) { {code}

3) Moved the sync block to method level. I hope you have skipped the formatting of this code section just to reduce the changes in patch, but I'd prefer to correct this section too.
{code}
-        synchronized(this) {
{code}

4) {code} addr.getAddress()!=null && myServer.getAddress()!=null {code}
could be {code} addr.getAddress() != null && myServer.getAddress() != null {code}

5) I could see tabs in many places, please use spaces instead of this. Below is one such case.
{code}
+        // if the client is not currently connected to any server
+        if (myServer == null) {
+        	// reconfigMode = false (next shouldn't return null).       	
+       		if (lastIndex >=0) {
+            	// take the last server to which we were connected
+       			myServer = this.serverAddresses.get(lastIndex);
+       		}
+       		else {
+       			// take the first server on the list
+       			myServer = this.serverAddresses.get(0);
+       		}
{code}


6) Also, I could see many whitespaces in the patch. Kindly remove these. Below are few such cases:
{code}
+        
+        InetSocketAddress myServer = currentHost;
+        
{code}
{code}
+            lastIndex = currentIndex;              
{code}
{code}
+        newList = getServerAddresses((byte) 9);
+        
+        for (int i = 0; i < numClients; i++) {
{code}, Thanks Rakesh. Attaching another patch that addresses most of the formatting issues.
, -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12654378/ZOOKEEPER-1683-ver7.patch
  against trunk revision 1607774.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 6 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2178//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2178//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2178//console

This message is automatically generated., trunk: http://svn.apache.org/viewvc?view=revision&revision=1611474, SUCCESS: Integrated in ZooKeeper-trunk #2376 (See [https://builds.apache.org/job/ZooKeeper-trunk/2376/])
ZOOKEEPER-1683. ZooKeeper client NPE when updating server list on disconnected client (shralex via michim) (michim: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1611474)
* /zookeeper/trunk/CHANGES.txt
* /zookeeper/trunk/src/c/tests/TestReconfig.cc
* /zookeeper/trunk/src/java/main/org/apache/zookeeper/ClientCnxnSocketNIO.java
* /zookeeper/trunk/src/java/main/org/apache/zookeeper/client/StaticHostProvider.java
* /zookeeper/trunk/src/java/test/org/apache/zookeeper/test/StaticHostProviderTest.java
]