[Applies against r687111., stu,
 do you mean that the tests are broken? I am not sure what the jira means? Are you not getting statcallbacks?

, The test shows that StatCallback does not get triggered (there are remaining outstanding calls at the end of the test, so it fails).

We have noticed this in our code when using the latest trunk of ZooKeeper, so I wanted to try and reproduce it in the ZooKeeper testsuite., Sorry, it appears I left some code commented.

If you uncomment that block, it will make an exists (StatCallback) call, and increment the outstanding requests. The HammerThread implements StatCallback to decrement the outstanding requests. Therefore, at the end of the test getOutstanding() == 0. Correct?

It fails consistently on my system with 0 != 32., assigning it to 3.0 to investigate., stu,
i just tried the patch on trunk and saw that the test passes on my machine.... what OS are you running on? , Its listed above in the Environment section.

Did you uncomment the two lines I mentioned? When I get back to that machine, I'll test it again with trunk.

Thanks!, Just tested again on the listed machine with r693912, and I'm still seeing the exact same results.

I'm reattaching the patch, with the two lines I mentioned uncommented, for convenience., thanks stu. i apologize, i might have forgotten to un comment the lines you mentioned. ill take a look at this ... thanks again. .. , I'll look into this, I have a very similar environment., This is failing on my machine as well. 

1) I think this is related to ZOOKEEPER-137 - there is a flaw in the watcher handling if the same watcher object is registered on the same node for data watches while async operations are performed on the node

2) the test as modified by the current attached patch is flawed. when bang is set to false all of the hammer threads will immediately close their zk clients and exit the run method. pending callbacks are dropped and the counters will not be updated properly. to make the test valid we'd have to have the hammer threads wait (for some bounded amt of time) while they still had outstanding requests. The testHammer() driver method would also have to remove the added sleep(5000) because I don't think this is enough time for all of the hammers to exit cleanly (before interrupting them)., This looks like ZOOKEEPER-137 to me., Stu, btw. You do know that if you call something like:

watcher = new watcher();
zk.exists("/foo", watcher); // sync or async doesn't matter
zk.exists("/foo", watcher);
zk.exists("/foo", watcher);

that only a single event will ever come back to the watcher, correct? I mean that we don't store duplicates (where the node name and watcher together define uniqueness).

Of course 

zk.exists("/foo, new watcher()); // sync or async doesn't matter
zk.exists("/foo", new watcher());
zk.exists("/foo", new watcher());

would result in three events triggered on the client (one for each unique watcher)


, I understand that a watch can only ever being triggered once and that only one watch can exist per client and znode. But I'm not sure how it is relevant to this test: each znode in the test is created with CreateMode.PERSISTENT_SEQUENTIAL, so multiple threads adding watches should never result in the condition you mentioned.

Thanks!, I think there are 2 orthogonal issues here:

1) I believe you are having a problem in your (real) client code, I think it's due to 137, dropping of events
2) however the test you created is broken, it will fail regardless of 137. the problem is as I described, by closing the zk client when bang=false you will lose events (those not yet delivered to the watchers).

I'm working on 1, you might try changing the test as I described and see if you still see 2 (or just wait for the fix for 1...), Stu, can you tell me if this issue was addressed with the fix for ZOOKEEPER-137 ?, I just spent an hour trying to reproduce the issue, only to discover that it was not caused by StatCallback at all.

In fact, it was caused by the removal of the default sort for getChildren (doh), so you were mostly right about #1. And, therefore you were right about #2.

Very sorry to have wasted your time, but I'm glad 137 is fixed. Thanks!, haha, that's funny. I love those. 

No worries. Thanks for the feedback and taking the time to followup.
, 3.0.0 has been released, closing issues.]