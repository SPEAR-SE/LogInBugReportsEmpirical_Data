[This is required by ZK-107 in order for newly joining servers to send their leader election address during initial connection (since they are new no one has their address).

During upgrade from 3.4, the 3.4 doesn't actually need this information since membership doesn't change. But without the patch the 3.4 server will not be able to find the server id in the message or remove the entire message from the stream., Attaching patch from 3.4 branch., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12567320/ZOOKEEPER-1633.patch
  against trunk revision 1438375.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    -1 findbugs.  The patch appears to introduce 1 new Findbugs (version 1.3.9) warnings.

    -1 release audit.  The applied patch generated 26 release audit warnings (more than the trunk's current 24 warnings).

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1371//testReport/
Release audit warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1371//artifact/trunk/patchprocess/patchReleaseAuditProblems.txt
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1371//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1371//console

This message is automatically generated., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12567326/ZOOKEEPER-1633.patch
  against trunk revision 1438375.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    -1 release audit.  The applied patch generated 26 release audit warnings (more than the trunk's current 24 warnings).

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1372//testReport/
Release audit warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1372//artifact/trunk/patchprocess/patchReleaseAuditProblems.txt
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1372//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1372//console

This message is automatically generated., Ok, apparently I was wrong and this jira shouldn't go to 3.5.0, only to the 3.4 branch., Just to clarify - this patch enables upgrade from 3.4 to 3.5, but the upgrade has to go through 3.4.6.
If a 3.5.0 server attempts to connect to a 3.4.5 server, this is the error that will be produced (the negative server id is in fact the protocol number which is sent first by 3.5.0):

2013-01-30 11:32:10,663 [myid:2] - INFO  [localhost/127.0.0.1:2784:QuorumCnxManager$Listener@498] - Received connection request /127.0.0.1:60876
2013-01-30 11:32:10,663 [myid:2] - WARN  [localhost/127.0.0.1:2784:QuorumCnxManager@349] - Invalid server id: -65536
2013-01-30 11:32:11,466 [myid:2] - INFO  [localhost/127.0.0.1:2784:QuorumCnxManager$Listener@498] - Received connection request /127.0.0.1:60878
2013-01-30 11:32:11,467 [myid:2] - WARN  [localhost/127.0.0.1:2784:QuorumCnxManager@349] - Invalid server id: -65536
2013-01-30 11:32:13,069 [myid:2] - INFO  [localhost/127.0.0.1:2784:QuorumCnxManager$Listener@498] - Received connection request /127.0.0.1:60880
2013-01-30 11:32:13,070 [myid:2] - WARN  [localhost/127.0.0.1:2784:QuorumCnxManager@349] - Invalid server id: -65536
2013-01-30 11:32:16,273 [myid:2] - INFO  [localhost/127.0.0.1:2784:QuorumCnxManager$Listener@498] - Received connection request /127.0.0.1:60882
2013-01-30 11:32:16,273 [myid:2] - WARN  [localhost/127.0.0.1:2784:QuorumCnxManager@349] - Invalid server id: -65536
, [~shralex] the idea of adding a protocol version sounds like a good one, but I'm wondering how this patch is going to work out. If a 3.5.0 server tries to connect to a 3.4.5 server, then I believe it will be dropping the connection according to the log messages above. I forgot exactly how it goes, but I think the one with highest id is supposed to start the connection. If that's the case, then the two servers will never be able to establish a connection. 

About the protocol version, I suppose it wouldn't hurt to have it in future versions too, it is a good practice and we should have done it before. It might be a good idea to create a jira for it if you don't want to this feature more generally. 

I was also wondering if we need a test here. Since this is just to enable migrations from 3.4.5 to 3.5.0, it is not necessary to guarantee no regression in future 3.5.0, but we might need to make sure that the 3.4 remains correct. What do you think?

 , The intention is for this patch to be in 3.4.6. It will have no effect on 3.4.5 and 3.4.6 normal operation, since they will not send 
a protocol number, they'll send their id. Starting with 3.5.0, we'll send the protocol number first, and this patch will allow a 3.5.0 server to connect to a 3.4.6 server. Of course if a 3.5.0 server tries to connect to a 3.4.5 server (that doesn't have the patch) we'll get the error message above (so if you get the errors above this means you haven't applied the patch, Patrick asked me to document this). 

My intention was to start sending the protocol version starting with 3.5.0 in future releases too and this is part of zk-107 that already does it.

In my view this has absolutely no effect on 3.4 since the code will never run until a 3.5.0 or later server tries to connect (the if in the patch will be false since before 3.5.0 servers send their id first, which is positive). 

I tested this with servers running trunk + zk-107 connecting to servers running 3.4 + this patch.


, I think the release note section for ZK-107 will have to mention that rolling upgrade to 3.5.x is only possible via 3.4.6 (or any release that have this patch) , bq. The intention is for this patch to be in 3.4.6. It will have no effect on 3.4.5 and 3.4.6 normal operation, since they will not send a protocol number, they'll send their id

agreed.

bq. Starting with 3.5.0, we'll send the protocol number first, and this patch will allow a 3.5.0 server to connect to a 3.4.6 server. Of course if a 3.5.0 server tries to connect to a 3.4.5 server (that doesn't have the patch) we'll get the error message above (so if you get the errors above this means you haven't applied the patch, Patrick asked me to document this). 

I just noticed that my example was not correct, but I realize now (duh!) that 3.4.6 servers won't send protocol numbers. They are only capable of receiving them.

about a test case, I was referring to the testing the upgrade process by testing that the interaction with quorum cnx manager will work as expected once we send the protocol number. , sure, I can add this, but just to clarify - this is a 3.4.6 only code (that will only run during upgrade to 3.5.0). The test is 3.4.6 only too. I can add a test that will just make sure that the receiving server finds the connecting server's id in the stream and ignores the rest. If you were thinking of something different please let me know., what I'm trying to say is that a unit test like this will test something very limited (that the very beginning of an upgrade process works). I don't mind adding it, just think this is better tested by the separate upgrade testing that's done before releases., Attached patch includes a test. I verified that the test fails without the patch code. [~fpj] can you please take a look and commit if everything's fine ?, +1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12571138/ZOOKEEPER-1633-ver2.patch
  against trunk revision 1448007.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1411//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1411//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1411//console

This message is automatically generated., The test case looks mostly good, Alex. I just have one request. I'd rather have a mock cnxmanager class extending QCM and adding the method you currently have in QCM:

{noformat}
+    // used from a test to know that a connection succeeded
+    public boolean testServerInServerWorkerMap(long sid) {
+    	return senderWorkerMap.containsKey(sid);
+    }
+
{noformat}

I thought we had a mock class already in CnxManageTest. If I'm not mistaken, perhaps you could add the method you need there and instantiate that class instead of adding this test method to QCM directly. Does it make sense?
, Flavio,

First, I didn't find the mock class you're talking about. In any case, if I follow what you're saying, and we extend QCM, in order
to access senderWorkerMap we have to make it protected or public (it is currently private). Then why go to all this trouble and not
just make it public and use it directly from the test ? I already had to change a few other fields to public for this same test. I remind you 
that the test and all of the changes in this jira are not going to the main branch - they will only be in 3.4. 

Alex, +1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12571678/ZOOKEEPER-1633-ver3.patch
  against trunk revision 1448007.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1412//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1412//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1412//console

This message is automatically generated., [~shralex] I have implemented what I was suggesting and I have moved the test file to a different package to make access easier. Let me know if it works for you., good idea about changing the package. did you do svn add for the new file ? (the patch doesn't apply for me), yeah, so here is what svn status shows me:

{noformat}
D       src/java/test/org/apache/zookeeper/test/CnxManagerTest.java
A  +    src/java/test/org/apache/zookeeper/server/quorum/CnxManagerTest.java
M       src/java/main/org/apache/zookeeper/server/quorum/QuorumCnxManager.java
{noformat}

that A + apparently means that the file is moved upon commit. I thought that svn knew what it was doing but it probably doesn't. let me try to figure out if it is possible to remove the +., Ok, fixed. Could you check it out now, Alex?, looks fine to me. thanks!, +1 for me too. does anyone else want to comment on this patch?, looks like this can be committed :), Alex,

Sorry to come in late here.

I have a few comments.

1) is a version number really what you want here?  Shouldn't it be done more like modern protocols such as protobufs to introduce a mechanism of optional fields?  Strict versioning of protocols is very unpopular any more because of the brittleness introduced into protocols.

2) it is possible that there is an irreconciliable conflict in version between correspondents.  In such cases, it is important to signal this clearly.  As such, it is good to add not only versioning information to the original request, but a very stable reply that indicates that there is an irreconciliable version mismatch.  Is there a way that you can do this in your proposal?

, Hi Ted,

Thanks for the comments. In this specific patch I was trying to solve the following problem: currently the first thing a server
wants to hear from another server connecting to it is a long, which is the id of the connecting server. Once the connection is 
established, and a leader is elected, they start sending protobufs. For ZK-107 an id was not enough - I also needed to send the leader election address and port (a string) of the connecting server, which may be new. We needed a way for an old 3.4 server
to understand that the connecting server is sending id + string/protobuf and not just id, and at least remove the string/protobuf from the stream, even if it only ends up using the id from this message. This is why in the latter case we're sending a negative number followed by an id, followed by the length of the remaining message, and the 3.4 server can realize that this is not just "id", remove the remaining message from the stream, and move on.

So while I agree with you that it would be nicer if that first message is a protobuf and not just a long as in 3.4, I don't see how this would help us solve the backward compatibility issue that this current patch is trying to address. 

Thanks,
Alex
, Revision number r1463399. http://svn.apache.org/r1463399, Seems like there is a small bug in the patch. Instead of  "if (sid < 0) {" it should say "if (sid < -1)" because of the special ObserverId which is -1. , Are observers mandated to have -1 as their sid? (lots of test cases in the code base (and deployments!) use something > 0). Plus the docs don't indicate that -1 should be used: http://zookeeper.apache.org/doc/r3.3.1/zookeeperObservers.html., Ah - never mind. Alex clarified this in ZOOKEEPER-1789. , I'm not sure if ObserverId = -1 is actually something we need to support ? Is it used by anyone ? 
Perhaps someone can clarify [~breed] [~henryr] [~fpj] ?

In any case, some of the reconfig functionality such as converting observers to followers is not supported for this kind of
observers., Now that I come to think of it, I might have seen it in prod. , Closing issues after releasing 3.4.6.]