[The attached patch file removes locking, and also marks a number of functions static as per ZOOKEEPER-317.  It further moves some private struct definitions into zk_hashtable.c and removes the unused count variable from collectWatchers() and the associated countList() function.

These changes obviously remove from functions from the API and so should be considered in the light of the discussion in ZOOKEEPER-317., Renamed patch file with issue key., Note that this patch does not comprehensively deal with ZOOKEEPER-317; there remain others functions that might be marked static and excluded from the exported symbols besides the ones dealt with in this patch., i looked thorugh the code and what you suggest looks right to me. Thoguh, did you see any performance impact from using the lcoks? if not, I would proabably leave the locks their, since it prevents against future changes (say we have two threads accessing the methods in zk_hashtable.c).. what do you think?, Well, my own take on things like this and ZOOKEEPER-262 is that it's always good to keep things clean and simple -- a good day of programming in my book is one that removes more lines of code than are created and yet keeps the same or better functionality.

Aside from any incremental performance gains, I think the big win with both of these patches is that they make the purpose of the code that much more apparent.  A significant part of programming, I believe, is psychology.  A programmer who comes across a package laced with pthread_mutex_lock() statements immediately makes two pretty reasonable assumptions: the code is used in a multi-threaded context, and it's MT-safe.

In this case, both assumptions are incorrect; the code isn't used in an MT context and if it were to be, collect_keys() appears to be lacking the necessary locks and I suspect it would be MT-unsafe.  There could always be other subtle MT-related bugs which haven't been shaken out too, should one start using it in MT code.

Thus my own feeling is that it's better to simplify and remove these locks for a variety of reasons: it makes the code more self-documenting; easier to read, understand, and revise; and marginally faster.

Should the hashtables need to be used in an MT context in the future, the existing code can always be recovered quickly from SVN.  If there's an explanatory note in the SVN log that mentions the collect_keys() issue, all the better; then whoever might need to do this work will be prompted to think that aspect through as well.

That's just my two cents, of course.  :-), your 2 cents are well received :) .. 
ill just explain where I come from. From my perspective, a multithreaded c code is the most difficult to debug (after ofcourse assembly language :) ) ... So, I get really uncomfortable removing locks from the c code (maybe i am a little paranoid). I would rather add locks and make it MT safe and be future problem resilient. But ofcourse thats my stand on it. I am not too biased on my opinion and would not like to reject any contributions on my own personal opinion. If you do want to contribute the patch as it is, Ill go ahead with that.
, I just committed this. Thnaks chris., Cool, thanks.  Much appreciated., Integrated in ZooKeeper-trunk #251 (See [http://hudson.zones.apache.org/hudson/job/ZooKeeper-trunk/251/])
    ]