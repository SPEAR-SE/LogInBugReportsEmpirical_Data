[-1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12826888/ZOOKEEPER-2547-01.patch
  against trunk revision 1757584.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3385//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3385//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3385//console

This message is automatically generated., Test case failure is not related to this patch., In the submitted patch, I added  client IP as the default authorized id. This is the exactly same is being done when we use NIOServerCnxnFactory, Nice catch [~arshad.mohammad]! A few comments: in the snippet below you can use the diamond operator -- {{ArrayList<>()}} -- and use {{InetAddress.getLocalHost().getAddress().toString()}} instead of a fixed String ({{127.0.0.1/8}}), right?

{quote}
List<ACL> acls = new ArrayList<ACL>();
acls.add(new ACL(ZooDefs.Perms.ALL, new Id("ip", "127.0.0.1/8")));
{quote}

Also, what do you think about adding a second unit test (or pair of to account for both Netty and NIO) that fails with an invalid address, for example?
, Thanks [~eribeiro] for reviewing the patch.
# I think the diamond operator is only for saving few key strokes. is there any other advantage?
# We are running the server on 127.0.0.1. The result of {{InetAddress.getLocalHost().getAddress().toString()}} will be different in different environment. So can not use InetAddress.getLocalHost().getAddress().toString()
# The added test case is testing both Netty and NIO. 
NIO passes before and after the fix
Netty fails before the fix but passed after the fix.

so no change in the current patch. please let me know if i am missing something, {quote}
I think the diamond operator is only for saving few key strokes. is there any other advantage?
{quote}

To modernize the code base. ;) But that's okay to leave as it is, no problem at all. 

{quote}
We are running the server on 127.0.0.1. The result of InetAddress.getLocalHost().getAddress().toString() will be different in different environment. So can not use InetAddress.getLocalHost().getAddress().toString()
{quote}

Yup, you right. In fact, I should have suggested to use {{InetAddress.getLoopbackAddress().getAddress().toString()}}, but, again, we can leave this as it is.

{quote}
The added test case is testing both Netty and NIO.
NIO passes before and after the fix
Netty fails before the fix but passed after the fix.
{quote}

Yes, I saw that. My original recommendation was to add another tests to check if the znode creation *fails* when a different IP address is set up in the ACL (say, "192.0.0.1"). The current test checks if the loopback address can create (a "positive" test), but *maybe* a negative test can be worth. I don't know., Thanks [~eribeiro] for the clarification.
Added negative scenario test in the new patch., +1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12829065/ZOOKEEPER-2547-02.patch
  against trunk revision b2a484cfe743116d2531fe5d1e1d78b3960c511e.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3440//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3440//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3440//console

This message is automatically generated.]