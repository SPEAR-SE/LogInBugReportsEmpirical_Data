[GitHub user hanm opened a pull request:

    https://github.com/apache/zookeeper/pull/191

    ZOOKEEPER-2722: fix flaky testSessionEstablishment test.

    Use retry with timeouts to deal with ConnectionLossException in flaky apache test environment.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/hanm/zookeeper ZOOKEEPER-2722

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/zookeeper/pull/191.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #191
    
----
commit 8dd261e359207f4a2ac1846c32d7897755f3e974
Author: Michael Han <hanm@apache.org>
Date:   2017-03-14T23:46:10Z

    ZOOKEEPER-2722: fix flaky testSessionEstablishment test.
    Use retry with timeouts to deal with ConnectionLossException in flaky apache test environment.

----
, -1 overall.  GitHub Pull Request  Build
      

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 7 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 3.0.1) warnings.

    -1 release audit.  The applied patch generated 2 release audit warnings (more than the trunk's current 0 warnings).

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/417//testReport/
Release audit warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/417//artifact/trunk/patchprocess/patchReleaseAuditProblems.txt
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/417//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/417//console

This message is automatically generated., Github user hanm commented on the issue:

    https://github.com/apache/zookeeper/pull/191
  
    >> So are we saying that the watcher.waitForConnected(CONNECTION_TIMEOUT) is not working correctly? 
    
    I believe this works as expected. I don't see any of the flaky / normal test results complain about this particular check.
    
    >> Because it seems like in most of the places you've added the check
    
    The check `testConnection` is not new, it simply improves the robustness of `zk.create("/test", "test".getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT)` by wrapping it with retry, as from Jenkins test log this is the place where ConnectionLossException was thrown. Internal stress test indicates this is effective. I haven't figured out what exactly caused the ConnectionLossException in `zk.create` call for this particular test...
    

, Github user hanm commented on the issue:

    https://github.com/apache/zookeeper/pull/191
  
    So what happened chronically on Jenkins for this test could be:
    
    * ZK client connect to server. Watcher received connected (read only) events.
    * For some reasons when invoke zk.create we get a ConnectionLossException.
    * We did not retry zk.create so the test was marked as failed.

, Github user skamille commented on the issue:

    https://github.com/apache/zookeeper/pull/191
  
    Right but my point is, if that creation is failing due to connection loss, shouldn't the places that check the watcher connection fail there instead of in your check? The first place you added the retries there is no watcher connection check, the rest of them there already is, and my understanding is that the watcher should not get past that check if the connection isn't established.
, Github user skamille commented on the issue:

    https://github.com/apache/zookeeper/pull/191
  
    Basically, I think it's worth understanding why we are getting a connection event in the watcher that should be waiting for connection, but still failing by not connecting, instead of fixing this with additional waiting.
, Github user hanm commented on the issue:

    https://github.com/apache/zookeeper/pull/191
  
    >> if that creation is failing due to connection loss, shouldn't the places that check the watcher connection fail there instead of in your check?
    
    ConnectionLossException can happen *after* a connection between ZooKeeper client and server has been established, right? So having the check only in watcher is not enough. A pass in watcher does not guarantee ConnectionLossException will not occur in a later point in time. Imagine an extreme case where the a network partition happened between client / server after a session establishment - the client will first get a connected event, and watcher happily reports everything is fine, then subsequent operation (e.g. create) will fail with ConnectionLossException until the network healed. 
    
    >> I think it's worth understanding why we are getting a connection event in the watcher that should be waiting for connection, but still failing by not connecting, instead of fixing this with additional waiting.
    
    Yes I'd like to know what causes this though I had a hard time to reproduce this failure locally / in internal Jenkins. It is so far only reproducible in Apache Jenkins. I can add some loggings to capture more contexts when the failure happens on Apache Jenkins, but in that case the retry logic in create is still needed, unless we can prove it is not possible to get a ConnectionLossException after a session establishment.

, Github user skamille commented on the issue:

    https://github.com/apache/zookeeper/pull/191
  
    > ConnectionLossException can happen after a connection between ZooKeeper client and server has been established, right? So having the check only in watcher is not enough. A pass in watcher does not guarantee ConnectionLossException will not occur in a later point in time. Imagine an extreme case where the a network partition happened between client / server after a session establishment - the client will first get a connected event, and watcher happily reports everything is fine, then subsequent operation (e.g. create) will fail with ConnectionLossException until the network healed.
    
    Right but we're talking about a test case. If we have the issue that our tests can connect to ZK, then randomly drop connections while in the midst of the testing, that feels like a problem we should figure out. It should not happen, and we rely on this particular "watch till connection then proceed with test" functionality in tests throughout the code base. The fact that it is only failing here seems to me a stranger problem. I'm supportive of adding more logging to see if we can debug it.
, Github user skamille commented on the issue:

    https://github.com/apache/zookeeper/pull/191
  
    FWIW I can repro this on my desktop so let me see if I can figure out what's happening
, Github user hanm commented on the issue:

    https://github.com/apache/zookeeper/pull/191
  
    @skamille Interesting, curious to see what you find out. 
, Github user skamille commented on the issue:

    https://github.com/apache/zookeeper/pull/191
  
    Is it possible that what happens is the client connects again in read-only mode, and then is bumped when quorum happens to be achieved? It seems like that shouldn't happen but it seems like the one race condition that I can somewhat imagine.
, Github user hanm commented on the issue:

    https://github.com/apache/zookeeper/pull/191
  
    That's a good one, it sounds possible. We can force the watcher only wait for SyncConnected event (rather than both SyncConnectedEvent and ConnectedReadyOnly event), so we will guarantee the client connected to a RW server before executing the write operation.
, Github user hanm commented on the issue:

    https://github.com/apache/zookeeper/pull/191
  
    Let me also check the Apache Jenkins logs on the failed cases see what happened there.
, Github user skamille commented on the issue:

    https://github.com/apache/zookeeper/pull/191
  
    Are we running multiple tests in parallel on Jenkins? I think the logs support this thesis but they seem to have many different tests logging into the same lines as the testSessionEstablishment test and I'm terrible confused by how that is happening.
, Github user hanm commented on the issue:

    https://github.com/apache/zookeeper/pull/191
  
    I think we support running concurrent JUNIT tests and the number of parallel tests is controlled by test.junit.threads - which has default value of 1 in build.xml. The Jenkins log indicates that this number is 8 on Apache Jenkins, though I haven't found where to set it in the job configuration yet. 
, Github user skamille commented on the issue:

    https://github.com/apache/zookeeper/pull/191
  
    I think your idea to create a connector that waits for specific types of connection (RO or R/W) is a good idea to try to fix this issue.
, Github user hanm commented on the issue:

    https://github.com/apache/zookeeper/pull/191
  
    @skamille 
    Implementing the idea of waiting for sync connected event to make sure we wait until a quorum is formed before prematurely trying a write operation. Made some comments in the test case that describes a possible case that client will drop connection between connected to r/o server and a quorum reforming. 
, -1 overall.  GitHub Pull Request  Build
      

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 7 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 3.0.1) warnings.

    -1 release audit.  The applied patch generated 2 release audit warnings (more than the trunk's current 0 warnings).

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/433//testReport/
Release audit warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/433//artifact/trunk/patchprocess/patchReleaseAuditProblems.txt
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/433//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/433//console

This message is automatically generated., Github user hanm commented on the issue:

    https://github.com/apache/zookeeper/pull/191
  
    I think this does not quite work still https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/434/testReport/junit/org.apache.zookeeper.test/ReadOnlyModeTest/testSessionEstablishment/ - need more dig see what exactly cause the connection drop.
, -1 overall.  GitHub Pull Request  Build
      

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 7 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 3.0.1) warnings.

    -1 release audit.  The applied patch generated 2 release audit warnings (more than the trunk's current 0 warnings).

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/435//testReport/
Release audit warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/435//artifact/trunk/patchprocess/patchReleaseAuditProblems.txt
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/435//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/435//console

This message is automatically generated., -1 overall.  GitHub Pull Request  Build
      

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 7 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 3.0.1) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/449//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/449//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/449//console

This message is automatically generated., +1 overall.  GitHub Pull Request  Build
      

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 7 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 3.0.1) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/451//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/451//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/451//console

This message is automatically generated., +1 overall.  GitHub Pull Request  Build
      

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 7 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 3.0.1) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/452//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/452//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/452//console

This message is automatically generated., +1 overall.  GitHub Pull Request  Build
      

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 7 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 3.0.1) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/453//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/453//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/453//console

This message is automatically generated., +1 overall.  GitHub Pull Request  Build
      

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 7 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 3.0.1) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/454//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/454//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/454//console

This message is automatically generated., +1 overall.  GitHub Pull Request  Build
      

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 7 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 3.0.1) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/455//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/455//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/455//console

This message is automatically generated., +1 overall.  GitHub Pull Request  Build
      

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 7 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 3.0.1) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/456//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/456//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/456//console

This message is automatically generated., -1 overall.  GitHub Pull Request  Build
      

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 7 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 3.0.1) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/457//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/457//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/457//console

This message is automatically generated., +1 overall.  GitHub Pull Request  Build
      

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 7 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 3.0.1) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/458//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/458//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/458//console

This message is automatically generated., +1 overall.  GitHub Pull Request  Build
      

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 7 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 3.0.1) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/459//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/459//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/459//console

This message is automatically generated., -1 overall.  GitHub Pull Request  Build
      

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 7 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 3.0.1) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/460//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/460//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/460//console

This message is automatically generated., +1 overall.  GitHub Pull Request  Build
      

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 7 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 3.0.1) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/461//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/461//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/461//console

This message is automatically generated., Github user hanm commented on the issue:

    https://github.com/apache/zookeeper/pull/191
  
    @skamille OK, for some reasons I can't even get a single repro with this patch now on Apache Jenkins. I've kicked 10+ builds on apache jenkins and all of them pass this test. Unfortunately the link I posted earlier use a version of patch that does have instrumented logs so I can't tell the state of ZK when weird thing happened.
    
    I think we can commit this if this patch is OK with you, and let it hammered by daily builds / other pre-commit jobs so we can gather more log data on the contexts when it reproduces.
, Github user afine commented on a diff in the pull request:

    https://github.com/apache/zookeeper/pull/191#discussion_r107237908
  
    --- Diff: src/java/test/org/apache/zookeeper/test/ClientBase.java ---
    @@ -96,24 +96,34 @@ public void process(WatchedEvent event) { /* nada */ }
         public static class CountdownWatcher implements Watcher {
             // XXX this doesn't need to be volatile! (Should probably be final)
             volatile CountDownLatch clientConnected;
    +        // Set to true when connected to a read-only server, or a read-write (quorum) server.
             volatile boolean connected;
    +        // Set to true when connected to a quorum server.
    +        volatile boolean syncConnected;
     
             public CountdownWatcher() {
                 reset();
             }
             synchronized public void reset() {
                 clientConnected = new CountDownLatch(1);
                 connected = false;
    +            syncConnected = false;
             }
             synchronized public void process(WatchedEvent event) {
    -            if (event.getState() == KeeperState.SyncConnected ||
    -                event.getState() == KeeperState.ConnectedReadOnly) {
    +            KeeperState state = event.getState();
    +            if (state == KeeperState.SyncConnected) {
    +                connected = true;
    +                syncConnected = true;
    +            } else if (state == KeeperState.ConnectedReadOnly) {
                     connected = true;
    --- End diff --
    
    would there be value in setting syncConnected to false here?
, Github user hanm commented on a diff in the pull request:

    https://github.com/apache/zookeeper/pull/191#discussion_r107239959
  
    --- Diff: src/java/test/org/apache/zookeeper/test/ClientBase.java ---
    @@ -96,24 +96,34 @@ public void process(WatchedEvent event) { /* nada */ }
         public static class CountdownWatcher implements Watcher {
             // XXX this doesn't need to be volatile! (Should probably be final)
             volatile CountDownLatch clientConnected;
    +        // Set to true when connected to a read-only server, or a read-write (quorum) server.
             volatile boolean connected;
    +        // Set to true when connected to a quorum server.
    +        volatile boolean syncConnected;
     
             public CountdownWatcher() {
                 reset();
             }
             synchronized public void reset() {
                 clientConnected = new CountDownLatch(1);
                 connected = false;
    +            syncConnected = false;
             }
             synchronized public void process(WatchedEvent event) {
    -            if (event.getState() == KeeperState.SyncConnected ||
    -                event.getState() == KeeperState.ConnectedReadOnly) {
    +            KeeperState state = event.getState();
    +            if (state == KeeperState.SyncConnected) {
    +                connected = true;
    +                syncConnected = true;
    +            } else if (state == KeeperState.ConnectedReadOnly) {
                     connected = true;
    --- End diff --
    
    watcher.reset should be called between two process calls so syncConnected should be false here, no need reset.
, Github user afine commented on a diff in the pull request:

    https://github.com/apache/zookeeper/pull/191#discussion_r107254406
  
    --- Diff: src/java/test/org/apache/zookeeper/test/ClientBase.java ---
    @@ -96,24 +96,34 @@ public void process(WatchedEvent event) { /* nada */ }
         public static class CountdownWatcher implements Watcher {
             // XXX this doesn't need to be volatile! (Should probably be final)
             volatile CountDownLatch clientConnected;
    +        // Set to true when connected to a read-only server, or a read-write (quorum) server.
             volatile boolean connected;
    +        // Set to true when connected to a quorum server.
    +        volatile boolean syncConnected;
     
             public CountdownWatcher() {
                 reset();
             }
             synchronized public void reset() {
                 clientConnected = new CountDownLatch(1);
                 connected = false;
    +            syncConnected = false;
             }
             synchronized public void process(WatchedEvent event) {
    -            if (event.getState() == KeeperState.SyncConnected ||
    -                event.getState() == KeeperState.ConnectedReadOnly) {
    +            KeeperState state = event.getState();
    +            if (state == KeeperState.SyncConnected) {
    +                connected = true;
    +                syncConnected = true;
    +            } else if (state == KeeperState.ConnectedReadOnly) {
                     connected = true;
    --- End diff --
    
    but what if some event happens that causes the state to drop from syncconnected -> connectedreadonly during a test (before reset is ever called). If expecting a reset call was sufficient, we would not need the "else" clause in that if statement right?
, Github user hanm commented on a diff in the pull request:

    https://github.com/apache/zookeeper/pull/191#discussion_r107259910
  
    --- Diff: src/java/test/org/apache/zookeeper/test/ClientBase.java ---
    @@ -96,24 +96,34 @@ public void process(WatchedEvent event) { /* nada */ }
         public static class CountdownWatcher implements Watcher {
             // XXX this doesn't need to be volatile! (Should probably be final)
             volatile CountDownLatch clientConnected;
    +        // Set to true when connected to a read-only server, or a read-write (quorum) server.
             volatile boolean connected;
    +        // Set to true when connected to a quorum server.
    +        volatile boolean syncConnected;
     
             public CountdownWatcher() {
                 reset();
             }
             synchronized public void reset() {
                 clientConnected = new CountDownLatch(1);
                 connected = false;
    +            syncConnected = false;
             }
             synchronized public void process(WatchedEvent event) {
    -            if (event.getState() == KeeperState.SyncConnected ||
    -                event.getState() == KeeperState.ConnectedReadOnly) {
    +            KeeperState state = event.getState();
    +            if (state == KeeperState.SyncConnected) {
    +                connected = true;
    +                syncConnected = true;
    +            } else if (state == KeeperState.ConnectedReadOnly) {
                     connected = true;
    --- End diff --
    
    yeah fair enough , fixing ...
, -1 overall.  GitHub Pull Request  Build
      

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 7 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 3.0.1) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/468//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/468//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/468//console

This message is automatically generated., Github user hanm commented on the issue:

    https://github.com/apache/zookeeper/pull/191
  
    @skamille - gentle nudge.. any opinions my proposal regarding commit this to branch-3.5? I am eager to get some logging from daily build (if the patch itself does not fix the issue). I think we had all green builds in past week except one fail build caused by this https://builds.apache.org/job/ZooKeeper_branch35_jdk7/892/
, Github user rakeshadr commented on the issue:

    https://github.com/apache/zookeeper/pull/191
  
    +1 the patch looks good to me. Thanks @hanm 
, Github user hanm commented on the issue:

    https://github.com/apache/zookeeper/pull/191
  
    Thanks for the review @rakeshadr - I'll commit this after 3.5.3 released since this PR is targeting branch-3.5 (tried to change base branch from 3.5 to master makes git generates crazy diffs).
, Github user asfgit closed the pull request at:

    https://github.com/apache/zookeeper/pull/191
, Issue resolved by pull request 191
[https://github.com/apache/zookeeper/pull/191], SUCCESS: Integrated in Jenkins build ZooKeeper-trunk #3359 (See [https://builds.apache.org/job/ZooKeeper-trunk/3359/])
ZOOKEEPER-2722: fix flaky testSessionEstablishment test. (hanm: rev 3946f0b1dfaa847eaa73cae5634d7d28da94eec9)
* (edit) src/java/test/org/apache/zookeeper/test/ClientBase.java
* (edit) src/java/test/org/apache/zookeeper/test/ReadOnlyModeTest.java
, [~hanm], branch-3.4 does not compile since your last commit has been pushed on it. 


    [javac] /Users/pbarna/Desktop/apache-source/zookeeper/src/java/test/org/apache/zookeeper/test/ClientBase.java:151: error: cannot find symbol
    [javac]             long expire = Time.currentElapsedTime() + timeout;
    [javac]                           ^
    [javac]   symbol:   variable Time
    [javac]   location: class CountdownWatcher
    [javac] /Users/pbarna/Desktop/apache-source/zookeeper/src/java/test/org/apache/zookeeper/test/ClientBase.java:155: error: cannot find symbol
    [javac]                 left = expire - Time.currentElapsedTime();
, Thanks for the report, [~bpgergo]. I'll fix this., GitHub user hanm opened a pull request:

    https://github.com/apache/zookeeper/pull/235

    ZOOKEEPER-2722: fix flaky testSessionEstablishment test.

    Make sure client is connected to a quorum before issuing a write operation to avoid possible race condition between connected to a RO server and forming a new quorum.
    
    Cherry picked from commit 212201131f8eb01dd2209deb37656ccc4096de77 with a tweak to make it work with branch-3.4.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/hanm/zookeeper ZOOKEEPER-2722

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/zookeeper/pull/235.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #235
    
----
commit 4c2e3e85394803af09be90a6e2aada365f0209b3
Author: Michael Han <hanm@apache.org>
Date:   2017-04-17T23:37:19Z

    ZOOKEEPER-2722: fix flaky testSessionEstablishment test.
    
    Make sure client is connected to a quorum before issuing a write operation to avoid possible race condition between connected to a RO server and forming a new quorum.
    
    Author: Michael Han <hanm@apache.org>
    
    Reviewers: Rakesh Radhakrishnan <rakeshr@apache.org>, Camille Fournier <camille@apache.org>
    
    (cherry picked from commit 212201131f8eb01dd2209deb37656ccc4096de77)
    Signed-off-by: Michael Han <hanm@apache.org>

----
, -1 overall.  GitHub Pull Request  Build
      

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 7 new or modified tests.

    -1 javadoc.  The javadoc tool appears to have generated 1 warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    -1 findbugs.  The patch appears to introduce 90 new Findbugs (version 3.0.1) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/572//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/572//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/572//console

This message is automatically generated., Github user hanm commented on the issue:

    https://github.com/apache/zookeeper/pull/235
  
    Merge and close pr.
, Github user hanm closed the pull request at:

    https://github.com/apache/zookeeper/pull/235
]