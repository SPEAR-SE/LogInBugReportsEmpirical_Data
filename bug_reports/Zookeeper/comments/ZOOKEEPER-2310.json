[Patch for above issue which:
# Syncs snapshot file
# Syncs snapshot directory
# Debug log message about snapshot file once written., Hi [~abhishekrai], Thanks for reporting this issue. I'm not sure what's causing what you're seeing, but some of the premises in your description don't seem right to me. If the snapshot is corrupted or missing altogether, then the server should be able to recover from the txn log using an older snapshot file if there is one. It should be loading txns 21-30 from the log in the case the snapshot isn't there. 

I suggest we have a look at the issues we have seen reported for branch 3.4 to see if there is anything that matches. Also, we may want to test with the head of branch 3.4 to see if this issue will be fixed in 3.4.7 already.

The bottom line is that I'm not convinced that we should be syncing the snapshots, but we need to track the bug you've spotted., Thanks for your response [~fpj].  I think my claim about the "diff" being present in the snapshot and not in the log looks incorrect.  When pushing a diff, leader (LearnerHandler) pushes individual transactions which the follower writes to its log (Learner.syncWithLeader).  Leader eventually sends a "NEWLEADER", in response, the follower snapshots.  Ultimately, the diff is visible in both the log and snapshot.

But consider the case of leader (LearnerHandler) pushing a full snapshot to the follower.  In this case, the follower does not receive the individual transactions contributing to that snapshot.  In fact, it's not practical to do so - by design, the snapshot is sent when the diff is too large.  Thus, the follower can have a snapshot which reflects some transactions that are not present in the log.  After writing the snapshot, the follower continues writing subsequent transactions to the log.

Imagine a crash + recovery is induced at this point, such that the latest snapshot file is incomplete or non-existent.  The follower would try to load the preceding healthy snapshot, and replay the log since then.  Since the log does not contain some transactions corresponding to the missing snapshot file, the follower would never find out about them.  This would cause the inconsistency scenario I described above.

Without syncing the snapshot file (and its parent directory) to disk, we cannot guarantee that the snapshot file exists during recovery.  And the loss of finalized snapshot files can result in data loss since all transactions may not be present in the log., Hi [~abhishekrai], this patch not work on Windows because of FileChannel.open on a folder seems not support on Windows. 
We do not always run zk server on Windows but have many code like hbase UT there., Thanks for bringing this up [~zhangyongxyz].  As you pointed out, FileChannel does not provide a way of accomplishing this in Windows.  There are conflicting opinions online about whether it's even necessary for Windows based on how it automatically handles updates to folders.

I've provided a modified patch (zookeeper-2310-version-2.patch) which skips syncing of directory on Windows.  The pattern I used has been used elsewhere in Zookeeper source, so should be safe., I am not sure whether only Windows has different behavior, I prefer to only allow Linux to call this FileChannel.open.
Just a suggestion., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12802042/zookeeper-2310-version-2.patch
  against trunk revision 1759917.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    -1 patch.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3412//console

This message is automatically generated., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12827922/ZOOKEEPER-2310.3.patch
  against trunk revision 1759917.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3413//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3413//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3413//console

This message is automatically generated.]