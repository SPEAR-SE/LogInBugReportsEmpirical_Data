[[~iocanel] This is new logic added in 3.4.6 version. Are you running in Windows env ?

Can you check which is causing the failure - deletion of the currentEpoch or renaming of currentEpoch.tmp
{code}
AtomicFileOutputStream.java
    if (!origFile.delete() || !tmpFile.renameTo(origFile)) {
	throw new IOException(
		"Could not rename temporary file " + tmpFile
			+ " to " + origFile);
    }
{code}

Also, could you see any other external process is accessing the currentEpoch., No I am not using Windows. I am using Linux, so yes the only logical explanation is that the file is kept open by someone (since renaming is expected to work).

I can't think of any processes messing up with this file. 

, OK. To find the exact reason why it is not working you could debug this. Also, could you try to rename them from OS level.

QuorumPeer#writeLongToFile() and QuorumPeer#readLongFromFile() are the calls which access the 'currentEpoch' file through BufferedWriter & BufferedReader.  I could see one case, its not closing the out stream when there is an exception during writeLongToFile.
{code}
QuorumPeer#writeLongToFile()
        } finally {
            if (!aborted) {
                // if the close operation (rename) fails we'll get notified.
                // worst case the tmp file may still exist
                out.close();
            }
        }
{code}, Can you execute this in your environment. I tried to simulate the operations which is performing during startup. , I'll try to add it to our test suite and see if it ever causes issues. The problem is that the issue doesn't always reproduce. So it will take quite a few runs to happen., Do we believe this issue is still valid?]