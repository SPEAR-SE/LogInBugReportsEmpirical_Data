[Contains two logs, one for server 0 and one for server 1.  The logs are annotated to describe where the cluster was restarted., I see the problem, a change made in ZOOKEEPER-1136 is causing this regression. setting of lastProposed in the lead() method of Leader was commented out for some reason. As a result the new follower is getting an empty diff rather than a snapshot.

This is a serious issue as it's causing the follower to get an inconsistent view of the database. We'll need to roll 3.4.1 asap.

Jeremy -- Thanks for reporting this issue!, I didn't see lastProposed commented out in the patch of ZOOKEEPER-1136. Have I misunderstood your comment, Pat?, @flavio look at line 268 of the patch for 1136., This patch fixes the problem.

It seems that Zab1_0 tests were not checking for the correct sequence of events on the learner side - that's really frustrating (and why 1136 commented out that section of setting lastProposed - because with it zab1_0 tests failed). Otw (if zab1_0 was right) we would have found this before 3.4.0 shipped. 

Please double check my changes to zab1_0 tests - in particular should we be seeing this sequence? Two NEWLEADERS? (iirc that's expected), btw, I added a new test which fails prior to fixing the issue in Leader.java, it succeeds subsequent to fixing the issue.
org.apache.zookeeper.test.FollowerResyncConcurrencyTest.testLaggingFollowerResyncsUnderNewEpoch(), minor change to patch - fixed indent issue., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12506515/ZOOKEEPER-1319.patch
  against trunk revision 1208979.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 6 new or modified tests.

    -1 patch.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/807//console

This message is automatically generated., Same patch applied to trunk., +1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12506524/ZOOKEEPER-1319_trunk.patch
  against trunk revision 1208979.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 6 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/808//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/808//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/808//console

This message is automatically generated., +1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12506524/ZOOKEEPER-1319_trunk.patch
  against trunk revision 1208979.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 6 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/809//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/809//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/809//console

This message is automatically generated., +1, looks good, Pat. About the double occurrence of NEWLEADER, it happens because we insert NEWLEADER in outstandingRequests in Leader.lead() and queue a NEWLEADER message in LearnerHandler.run(). When we execute LearnerHandler.startForwarding() from LearnerHandler.run(), we queue the packets in outstandingRequests, including NEWLEADER. 

It is not necessary to send it again in startForwarding(), but we do need it in outstandingRequests to collect acks. Since we have to add it to outstandingRequests, one simple way to avoid it is by performing a check like this in startForwarding:

{noformat}
                if(outstandingProposals.get(zxid).packet.getType() != NEWLEADER){
                    handler.queuePacket(outstandingProposals.get(zxid).packet);
                }

{noformat}

I have verified that by including this check, I can remove the double occurrence of NEWLEADER in Pat's patch and the test passes. We may want to consider this check in some later release., Flavio/Pat,
 Ben and I had a long discussion on this.
 Here is the gist - There are 2 NEWLEADER packets one added when the Leader just has become a leader and one added in startforwarding as Flavio mentioned above. We need to skip adding the first one (the one in leader.lead())  to the queue of packets to send to the follower. Flavio is right above that if we skip the adding of NEWLEADER in start forwarding we are good. We need to send the NEWLEADER packet in LearnerHandler (Line 390) because that means the end of all syncing up transactions from the Leader for the follower.

Ben has an updated patch and will update the jira soon tonight., this should fix everything. i'd like to add a couple more unit tests, but the functional fixes are in., +1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12506569/ZOOKEEPER-1319_trunk2.patch
  against trunk revision 1208979.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 6 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/812//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/812//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/812//console

This message is automatically generated., never mind, i figured out that the case i wanted to test for was impossible: an outstandingProposal queue with a NL and other proposals, but i realized that other proposals will not be generated until the NL message is committed at which point it will no longer be in the outstandingProposal queue, so the double NL is completely innocuous..., never mind, i figured out that the case i wanted to test for was impossible: an outstandingProposal queue with a NL and other proposals, but i realized that other proposals will not be generated until the NL message is committed at which point it will no longer be in the outstandingProposal queue, so the double NL is completely innocuous..., sounds fine, two questions come to mind though.

1) why make this change now, this has been the behavior for a while, no? seems safer to just leave it as is for 3.4 and change in 3.5+

2) what are the implications, if any, for backward compatibility with 3.3 based servers?, Since the double NEWLEADER is harmless, it doesn't sound like a big deal to me to postpone to a future release. It is mainly inefficient to have it that way. At the same time, the fix seems to be simple enough so we could consider.

I don't think it causes backward compatibility problems. In my understanding, all it happens in the Leaner is executing this twice:

{noformat}
                case Leader.NEWLEADER: // it will be NEWLEADER in v1.0
                    zk.takeSnapshot();
                    self.setCurrentEpoch(newEpoch);
                    snapshotTaken = true;
                    writePacket(new QuorumPacket(Leader.ACK, newLeaderZxid, null, null), true);
                    break;
                }

{noformat}


I believe this is idempotent., Patch 2 fixes the problem my tests were seeing.  Thanks!, That's great, thanks for following up!, I am more inclined towards what flavio mentioned above. To reduce the number of changes I think its best we dont remove the duplicate NEWLEADER. Ben any thoughts? , mahadev - jeremy mentioned that he tested with the second version of the patch, is that going to be a problem? (re confirmation of fix)., Patch 1 also seems to do the trick., I am going ahead and checking in Pat's patch. I have opened ZOOKEEPER-1324 to track the duplicate NEWLEADER packets. Just being paranoid here and making minimal changes for the RC., I just committed Pat's patch to 3.4 and trunk. Thanks all for contributing on this!, Integrated in ZooKeeper-trunk #1390 (See [https://builds.apache.org/job/ZooKeeper-trunk/1390/])
    ZOOKEEPER-1319. Missing data after restarting+expanding a cluster. (phunt and breed via mahadev)

mahadev : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1212578
Files : 
* /zookeeper/trunk/CHANGES.txt
* /zookeeper/trunk/src/java/main/org/apache/zookeeper/server/quorum/Leader.java
* /zookeeper/trunk/src/java/test/org/apache/zookeeper/server/quorum/Zab1_0Test.java
* /zookeeper/trunk/src/java/test/org/apache/zookeeper/test/FollowerResyncConcurrencyTest.java
]