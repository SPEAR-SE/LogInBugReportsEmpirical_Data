[AFAIK Once Zk Client got session ID from ZK server, there is no check for session id validation.. seen ZOOKEEPER-2146 which checking the only length of the packet.., [~cnauroth] ,[~rakeshr] and [~phunt] any suggestions for this..? this is blocked for HDFS-8161..., Thanks [~brahmareddy] for the good analysis. Yes, this is a case of packet corruption while transferring the packets between client and the connected ZK server. Here the tricky part is, only one bit of {{session id}} got corrupted. Following are the suggestions I can think of,
# IIUC packet corruption/malformation would get resolved if we have wire-encryption in place. ZooKeeper is supporting this feature 3.5.x version onwards. The major work has been completed and few more to go. Please see ZOOKEEPER-2120, ZOOKEEPER-2125 jira to watch the progress. I think the issue reported on 3.4.6 version, it doesn't have wire-encryption feature available. It would be good to test this scenario(can use Wireshark simulator tool) once wire-encryption feature is fully implemented : client-to-server and server-to-server communication.
# Secondly, I feel we could think of providing additional checks by validating the {{session id}} on every client-server communication.But this won't completely solve the problem because consider another case where the user data is getting corrupted., Hi [~brahmareddy].  I agree with Rakesh that this is excellent debugging work!  Thank you for posting the details.

[~rakeshr], what would you think of a feature request to support a checksum validation when wire encryption is not used?  I'd be happy to help.  Our use case is HDFS NameNode HA, which relies on 2 NameNode processes coordinating on a distributed lock in ZooKeeper.  The data is not private, so there might not be a strong motivation for an HDFS deployment to enable ZooKeeper wire encryption.

[~brahmareddy], the HDFS logic in this area is driven by ZooKeeper status code checks like the following in {{ActiveStandbyElector}}:

{code}
  private static boolean isSuccess(Code code) {
    return (code == Code.OK);
  }
{code}

I'm wondering if there is something that we can do in the HDFS code to check for a specific ZooKeeper status code, and then reconnect our session and retry taking the lock instead of transitioning to standby.  Do you know if there was a particular ZooKeeper status code that you saw when this happened?  Do you have capability to repro consistently?

I'll comment on HDFS-8161 too., Thanks [~rakeshr] and [~cnauroth] for looking into this issue..

[~rakeshr] I agree with [~cnauroth] ( just pasting chris comments as I also want to stress these points)
The data is not private, so there might not be a strong motivation for an HDFS deployment to enable ZooKeeper wire encryption..

what would you think of a feature request to support a checksum validation when wire encryption is not used?

[~cnauroth] I responded for your comments in HDFS-8161, Thanks [~cnauroth] for the interest in introducing/contributing a new feature. Yes, {{checksum}} validation will be helpful to detect the transmission errors. I think there is a space to discuss this feature in detail and implementing here. At very high level I can think of performance aspect because this will have the additional overhead of CPU computation and I/O resources - network layer and disk persistence layer (as packet size will increase).

In this particular case [~brahmareddy] has mentioned that client {{sessionId}} has corrupted when the request reaches at the server and not the {{user data}}. By seeing this I still have doubt in my mind why both NN has transition to standby, but I couldn't find the reason what has happened to the ZooKeeper client due to the {{sessionId}} corruption. This question is actually not relevant to ZK project, I'm posting my doubt here because the discussions are revolving around ZK transmission errors. Probably I'll also try to look at the {{ActiveStandbyElector}} code and ZK code again., bq. By seeing this I still have doubt in my mind why both NN has transition to standby, but I couldn't find the reason what has happened to the ZooKeeper client due to the sessionId corruption.
Because of following,
1. ZK-client has established session - and session Id returned to client. Now, returned sessionId differs from server's sessionId due to bit corruption.
2. ZK will create the ephemeral-Node. Node creation success at server side and call back also success. So transition to Active.
3. Now, ZK-client will set the exists-watcher, and verify the stat of return callback. While verifying it verifies sessionId too. Now it differs, hence current Active changed back to standby.
4. ZK-client is still having active session and it continues to heartbeat to zk-server. So server side session also active. Not expired. So corrupted session is active at both server and client.

Either one of this can be done to make some progress IMO.
1. To fix this specific sessionId corruption case, can include sessionId in heartbeat messages to server, and validate in server side. Invalid/corrupted sessions can be closed immediately.
2. Generic checksum validation for all the request/response packets for the communications between ZK-client/server. As Rakesh said, this might have performance impacts.

So, #1 should be relatively easy and feasible. 
Please give your opinions on this.
]