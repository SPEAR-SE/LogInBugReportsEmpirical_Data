[+1 overall.  GitHub Pull Request  Build
      

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 6 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 3.0.1) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/1705//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/1705//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/1705//console

This message is automatically generated., -1 overall.  GitHub Pull Request  Build
      

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 6 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 3.0.1) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/1707//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/1707//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/1707//console

This message is automatically generated., +1 overall.  GitHub Pull Request  Build
      

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 6 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 3.0.1) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/1714//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/1714//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/1714//console

This message is automatically generated., +1 overall.  GitHub Pull Request  Build
      

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 6 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 3.0.1) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/1715//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/1715//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/1715//console

This message is automatically generated., +1 - thanks [~bkanivets], SUCCESS: Integrated in Jenkins build ZooKeeper-trunk #32 (See [https://builds.apache.org/job/ZooKeeper-trunk/32/])
ZOOKEEPER-3046: added junit timeout to precede 'ant' timeout (phunt: rev 587898ac9fc2a8588971197b977ecd9c00a7221e)
* (edit) src/java/test/org/apache/zookeeper/server/quorum/StandaloneDisabledTest.java
* (edit) src/java/test/org/apache/zookeeper/test/DisconnectedWatcherTest.java
, FYI [~bkanivets]

https://builds.apache.org/view/S-Z/view/ZooKeeper/job/ZooKeeper_branch35_java10/37/testReport/junit/org.apache.zookeeper.test/DisconnectedWatcherTest/testManyChildWatchersAutoReset/

org.junit.runners.model.TestTimedOutException: test timed out after 600000 milliseconds
	at java.base@10.0.1/java.lang.Object.wait(Native Method)
	at java.base@10.0.1/java.lang.Object.wait(Object.java:328)
	at app//org.apache.zookeeper.ClientCnxn.submitRequest(ClientCnxn.java:1499)
	at app//org.apache.zookeeper.ClientCnxn.submitRequest(ClientCnxn.java:1487)
	at app//org.apache.zookeeper.ZooKeeper.create(ZooKeeper.java:1448)
	at app//org.apache.zookeeper.test.DisconnectedWatcherTest.testManyChildWatchersAutoReset(DisconnectedWatcherTest.java:229)
	at java.base@10.0.1/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base@10.0.1/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base@10.0.1/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at app//org.apache.zookeeper.JUnit4ZKTestRunner$LoggedInvokeMethod.evaluate(JUnit4ZKTestRunner.java:79)
	at java.base@10.0.1/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base@10.0.1/java.lang.Thread.run(Thread.java:844)
, [~phunt] I still don't have enough info to diagnose this test. Sometimes it takes ~ 10mins to create 10000 nodes and sometimes it's ~10 seconds.

I've tried running this test in the loop locally and no time fluctuations.

Also, it seems there is a correlation between slower builds and this test time.

[Test time history |https://builds.apache.org/job/ZooKeeper_branch35_jdk8/978/testReport/junit/org.apache.zookeeper.test/DisconnectedWatcherTest/testManyChildWatchersAutoReset/history/]

[Total test time history|https://builds.apache.org/job/ZooKeeper_branch35_jdk8/978/testReport/history/]

When test takes ~10 mins, total tests ~1h 40m

When test takes ~20 sec, total tests ~50m 

Maybe we get different/busier disks and this test is 'write' heavy.

I'll try to add more logs, collect some additional system info inside the test.

For ref, here are a sample of logs from slow and fast run.

[3.5 java 8 #978 |https://builds.apache.org/job/ZooKeeper_branch35_jdk8/978/artifact/build/test/logs/TEST-org.apache.zookeeper.test.DisconnectedWatcherTest.xml]
{noformat}
2018-05-24 11:53:08,756 [myid:] - INFO [Time-limited test:JMXEnv@120] - found:0x1010aa7c0390001 org.apache.ZooKeeperService:name0=StandaloneServer_port27383,name1=Connections,name2=127.0.0.1,name3=0x1010aa7c0390001
2018-05-24 11:53:10,452 [myid:] - INFO [SessionTracker:SessionTrackerImpl@163] - SessionTrackerImpl exited loop! 
2018-05-24 12:00:51,370 [myid:] - INFO [Time-limited test:DisconnectedWatcherTest@202] - Created 10,000 nodes.
{noformat}
[3.5 java 8 #977|https://builds.apache.org/job/ZooKeeper_branch35_jdk8/977/artifact/build/test/logs/TEST-org.apache.zookeeper.test.DisconnectedWatcherTest.xml]
{noformat}
2018-05-23 11:51:01,686 [myid:] - INFO  [Time-limited test:JMXEnv@120] - found:0x10bb6bac4bc0001 org.apache.ZooKeeperService:name0=StandaloneServer_port13918,name1=Connections,name2=127.0.0.1,name3=0x10bb6bac4bc0001
2018-05-23 11:51:03,967 [myid:] - INFO  [SessionTracker:SessionTrackerImpl@163] - SessionTrackerImpl exited loop!
2018-05-23 11:51:10,051 [myid:] - INFO  [Time-limited test:DisconnectedWatcherTest@202] - Created 10,000 nodes.
{noformat}, I checked job 37 above log artifacts and I don't see any "fsync" issues as you would typically expect if the disk is slow. 

{noformat}
                if (syncElapsedMS > fsyncWarningThresholdMS) {
                    LOG.warn("fsync-ing the write ahead log in "
                            + Thread.currentThread().getName()
                            + " took " + syncElapsedMS
                            + "ms which will adversely effect operation latency. "
                            + "File size is " + channel.size() + " bytes. "
                            + "See the ZooKeeper troubleshooting guide");
                }
{noformat}

Do you see it in any of the failures you're looking at?

Perhaps we should turn on GC logging and include that in the artifact?, [~bkanivets] - any chance this is a deadlock?, {quote} any chance this is a deadlock? {quote}

Possible, if for some reasons the current expected packet never arrives at client side, we will wait forever (current Java client library does not used timed wait while finishing a packet). 

The symptom here sounds similar as what's reported by many users in ZOOKEEPER-2251. Note in that issue, we still don't figure out what is the real cause of the (so called "packet loss" - which not might be a precise term, see [~suda]'s comment and analysis in that issue). It seems this test case can lead to such "packet loss" in high probability. I feel what this test case and user stories in ZOOKEEPER-2251 is correlated to a real bug hidden somewhere in our client library., [~hanm]

[~phunt]

I've done some digging into the performance of this test by adding more system and time logging.

I've tested using fake [PR|https://github.com/apache/zookeeper/pull/538] to collect data in apache CI system. I'm using fake 'testCreateManyChildren' that just creates 10k nodes.

Also, I've tested locally by running all tests in the loop and recording all logs until the disk is full.

My hypothesis:

there is some other write-heavy test or build(maybe hadoop tests) that slows down creation of 10K children.

Here fake test took 10s

[https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/1912/testReport/]

Here fake took 3m 20s

[https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/1907/testReport/]
 # I don't think there is a deadlock, because I'm logging 'stat' after every 1K nodes created and it's pretty consistent.
 ** "Latency min/avg/max: 2/32/596" on slow
 ** "Latency min/avg/max: 0/0/25" on fast
 # Locally, when disk is getting full, I've seen this test slowing down.
 # I've tried logging vmstat, but not very helpful
 ** load average is bit higher on slow "load average: 12.54, 12.04, 10.95"
 ** "load average: 4.16, 4.56, 4.86" on fast
 # Since iostat isn't available, I've logged 'less /proc/diskstats'. Not very meaningful because I'm logging at differently spaced timestamps right now. But one observation is that column 12 "I/Os currently in progress" is usually 1 or 2 on slow and usually 0 on fast.
 # Looking at column 9 of /proc/diskstats (writes completed) for 'sda' device and calculating writes per ms using timestamps LOG.info:
 ** 0.18 writes/ms on slow
 ** 9.1 writes/ms on fast
 ** warning - this calculation shouldn't be trusted - I've done it only on one sample 

As a result I've tried to pin point some slow jenkins apache hosts, but wasn't successful. I don't see the pattern. Also tried looking at jobs that run at the same time, again no luck.

Maybe the next steps can be:
 # Trying to run this test with memory mapped files
 # Somehow pinning the host just for zk builds
 # Getting access to the box and doing better profiling
 # I can try writing a better version of /proc/diskstats stats collector

 

 

 

 , +1 overall.  GitHub Pull Request  Build
      

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 3.0.1) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/1966//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/1966//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/1966//console

This message is automatically generated., This is an odd one. I committed the PR 576, let's see if that helps at all...., SUCCESS: Integrated in Jenkins build ZooKeeper-trunk #111 (See [https://builds.apache.org/job/ZooKeeper-trunk/111/])
ZOOKEEPER-3046: increased test timeout (phunt: rev 25035f10ec188a2f3d5c29dbda4b84391eee267d)
* (edit) src/java/test/org/apache/zookeeper/test/DisconnectedWatcherTest.java
]