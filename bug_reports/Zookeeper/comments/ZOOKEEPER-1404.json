[Unfortunately, letting the SEQUENCE number be the highest, instead of the smallest, lend it itself to a scenario that is both unstable, more complex, and with more operations. Consider the following scenarios where the highest number identifies the leader.

A server connect and creates a sequential-ephemeral node. It's the first one, so it elects itself the leader. Following that a couple of servers connect and each one will have the largest number, even if for very a brief period of time, so the leadership will start to "hop" from one server to the other until it stabilizes. This generates a couple of net messages and watch setup/delivery.
 
Furthermore, a servers looses its connection and connects again, it will "usurp" the leadership even if only the connection of this specific is troublesome and transient. In a super stable server scenario, this will not be a problem (after the initial burst of leader elections), but the number of messages send and received (and watches setup) will be considerably higher. But on a faulty scenario, this will cause a lot of serious liveness problems.

On the other hand, a server with the lowest number would probably stay on-line for a longer period of time, and once elected it doesn't need to change. If the leader looses the connection, the second most oldest will take the place. There can be "n" new connections, but the leader will stay stable and well known for a longer period of time., Therefore, I think the use of the smallest is correct, imo., Edward, the intention wasn't "highest" but that client i watches the "highest sequence number j such that j < i", so highest which is still smaller than its own sequence number. The suggestion on the jira seems correct to me - otherwise everyone watch the znode of the current leader and wake up when it fails., Sorry, I read quickly and forgot that "j < i and n_j is a znode in C" while writing my comment., Some one created duplicate issue ZOOKEEPER-1483 and that got marked fixed and this was overlooked.]