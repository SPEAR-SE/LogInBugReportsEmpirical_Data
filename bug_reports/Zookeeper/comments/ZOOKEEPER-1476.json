[We've experienced this identical problem where reverse name lookup prevents zookeeper leader election from ever completing successfully. In our case this was failing on Linux with IPv4 not IPv6. As it turns out, there is a lot of code in zookeeper server that calls GetHostName which does a reverse dns lookup. I've patched the code in question to use GetHostString instead which does not do a reverse name lookup. Eventually it does perform a lookup but it uses getByName to do a normal dns lookup if necessary (if it's not an IP address already). 

I'm happy to upload the patch we use, but I can only vouch for it compiling properly on openjdk7. The function I had to use (GetHostString) was wrongly private in openjdk6 and made public in openjdk7. I don't know whether that function is public or private in Sun or IBM or any other flavor of java., I should have mentioned that in our restricted environment we do not have DNS and cannot have DNS. So we only ever use IP Addresses and never hostnames., Update... I just compiled our patched version with Sun's java6 and it compiles just fine. It must have been a bug specific to openjdk6. If there's interest in my patch, let me know., Here's a small program that replicates the problem. If I execute it, I get the following output:

/etc/hosts:
##
# Host Database
#
# localhost is used to configure the loopback interface
# when the system is booting.  Do not change this entry.
##
127.0.0.1	localhost
255.255.255.255	broadcasthost
::1             localhost 
fe80::1%lo0	localhost

localhost resolved in 1ms. to localhost
localhost resolved in 1ms. to localhost
fe80:0:0:0:0:0:0:1%1 resolved in 5002ms. to fe80:0:0:0:0:0:0:1%1
java.lang.IllegalStateException: localhost resolves to fe80:0:0:0:0:0:0:1%1 but reverse dns lookup takes too long 5002 resolved back to fe80:0:0:0:0:0:0:1%1
	at com.nokia.search.test.LocalhostLookupTest.main(LocalhostLookupTest.java:28)

If I preresolve localhost to 127.0.0.1, the exception never gets thrown.


import java.io.BufferedReader;
import java.io.FileReader;
import java.net.InetAddress;

public class LocalhostLookupTest {
    public static void main(String[] args) {
        try {
            InetAddress[] addresses = InetAddress.getAllByName("localhost");
            
            BufferedReader br = null;
            try {
                br = new BufferedReader(new FileReader("/etc/hosts"));
                StringBuilder buf = new StringBuilder();
                String line;
                while((line = br.readLine()) != null) {
                    buf.append(line + '\n');
                }
                String hostsFile = buf.toString();
                System.out.println("/etc/hosts:\n"+hostsFile);
                for (InetAddress inetAddress : addresses) {
                    long now = System.currentTimeMillis();
                    String hostName = inetAddress.getCanonicalHostName();
                    long duration = System.currentTimeMillis() - now;
                    System.out.println(hostName + " resolved in " + duration + "ms. to " + hostName);
                    if(duration > 50) {
                        throw new IllegalStateException("localhost resolves to " + inetAddress.getHostAddress() + " but reverse dns lookup takes too long " + duration + " resolved back to " + hostName);
                    }
                }
            } finally {
                br.close();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            System.exit(0);
        }
    }
}, To be clear, the problematic zookeeper class is org.apache.zookeeper.client.StaticHostProvider, which does a InetAddress resolvedAddresses[] = InetAddress.getAllByName(address.getHostName()); 
, hi [~jillesvangurp], it is better if you upload repro code as attachments to the jira rather than posting as a comment, just a hint. given that you spotted the culprit, I was wondering if you want to propose a patch.]