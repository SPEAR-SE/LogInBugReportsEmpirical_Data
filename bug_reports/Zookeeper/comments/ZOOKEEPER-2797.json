[GitHub user packysauce opened a pull request:

    https://github.com/apache/zookeeper/pull/267

    ZOOKEEPER-2797 Defend against bad TTLs from misbehaving clients

    Validate the TTL before it makes it to the commit processor to prevent blowing up ZK

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/packysauce/zookeeper protect_from_bad_ttl

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/zookeeper/pull/267.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #267
    
----
commit 00541acbbffcd6c3d4267078f1644e554e1200f8
Author: Patrick White <patrick@patrickwhite.org>
Date:   2017-05-30T20:22:41Z

    ZOOKEEPER-2797 Defend against bad TTLs from misbehaving clients

----
, -1 overall.  GitHub Pull Request  Build
      

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 3.0.1) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/751//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/751//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/751//console

This message is automatically generated., Github user packysauce commented on the issue:

    https://github.com/apache/zookeeper/pull/267
  
    The failed test in jenkins runs fine for me locally, and the logs indicated succeeded (if I'm interpreting that correctly)
, Github user afine commented on a diff in the pull request:

    https://github.com/apache/zookeeper/pull/267#discussion_r119269582
  
    --- Diff: src/java/test/org/apache/zookeeper/server/CreateTTLTest.java ---
    @@ -69,6 +75,23 @@ public void testCreate()
         }
     
         @Test
    +    public void testBadTTLs()
    +            throws IOException, KeeperException, InterruptedException {
    +        Stat stat = new Stat();
    --- End diff --
    
    nit: is this needed?
, Github user packysauce commented on a diff in the pull request:

    https://github.com/apache/zookeeper/pull/267#discussion_r119270375
  
    --- Diff: src/java/test/org/apache/zookeeper/server/CreateTTLTest.java ---
    @@ -69,6 +75,23 @@ public void testCreate()
         }
     
         @Test
    +    public void testBadTTLs()
    +            throws IOException, KeeperException, InterruptedException {
    +        Stat stat = new Stat();
    --- End diff --
    
    Ah! the first version of this went through the zk client-ish interface, so probably not needed anymore
, +1 overall.  GitHub Pull Request  Build
      

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 3.0.1) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/753//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/753//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/753//console

This message is automatically generated., Github user hanm commented on the issue:

    https://github.com/apache/zookeeper/pull/267
  
    lgtm, merging.
, Github user asfgit closed the pull request at:

    https://github.com/apache/zookeeper/pull/267
, Issue resolved by pull request 267
[https://github.com/apache/zookeeper/pull/267], Committed to master: https://github.com/apache/zookeeper/commit/3824da0b649c6a6a698cfe6c79ca3d44a9e94f29
Committed to branch-3.5:
https://github.com/apache/zookeeper/commit/90495d96131cc4cf6a8f2533c06b796136234c35, [~phunt] / [~rakeshr]: please add [~patrickwhite] to contributor list and assign this issue to him., Side note: I think it's good to have the ttl validation on server side anyway, but it would also be good to have same validation on client side so invalid ttl value will be caught earlier before sending over to server. I believe the Java client does ttl validation, so kazoo client should do something similar., The client doing it is nice, but the server should always be validating all fields of all requests.

Kazoo doesn't support TTL and containers at the moment. I'll have a diff up soon. I also validate client side. Guess how I figured out how to kill ZK via TTLs :), As an aside, any insight into why create flags moved from being bitfield-like to an enum?, SUCCESS: Integrated in Jenkins build ZooKeeper-trunk #3410 (See [https://builds.apache.org/job/ZooKeeper-trunk/3410/])
ZOOKEEPER-2797: Defend against bad TTLs from misbehaving clients (hanm: rev 3824da0b649c6a6a698cfe6c79ca3d44a9e94f29)
* (edit) src/java/main/org/apache/zookeeper/server/PrepRequestProcessor.java
* (edit) src/java/test/org/apache/zookeeper/server/CreateTTLTest.java
, bq. the server should always be validating all fields of all requests.
Absolutely, to prevent bad clients. I mentioned client side check because if we control the clients, then doing client side check is more efficient as it prevents unnecessary round trips.

bq. any insight into why create flags moved from being bitfield-like to an enum?
If you are referring to the EphemeralType as the enum, my guess would be for readability. ]