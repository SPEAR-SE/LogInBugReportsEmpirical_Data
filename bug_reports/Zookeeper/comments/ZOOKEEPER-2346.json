[If the ZK service cannot authenticate the SASL connection  the client (here slider) will only see a connection refused message.

server logs

{code}
2015-12-15 14:35:08,265 - WARN  [NIOServerCxn.Factory:0.0.0.0/0.0.0.0:2181:ZooKeeperServer@969] - Client failed to SASL authenticate: javax.security.sasl.SaslException: GSS initiate failed [Caused by GSSException: Failure unspecified at GSS-API level (Mechanism level: Specified version of key is not available (44))]
2015-12-15 14:35:08,266 - WARN  [NIOServerCxn.Factory:0.0.0.0/0.0.0.0:2181:ZooKeeperServer@975] - Closing client connection due to SASL authentication failure.

+ a stack trace in nio, which sees the connection closed and is surprised by the unexpected state
{code}

The client sees a connection closure and reacts to it by trying to re-open the connection, until eventually it gives up
{code}
2015-12-15 15:07:46,066 [main-SendThread(devix.cotham.uk:2181)] WARN  zookeeper.ClientCnxn (run(1102)) - Session 0x0 for server null, unexpected error, closing socket connection and attempting reconnect
java.net.ConnectException: Connection refused
	at sun.nio.ch.SocketChannelImpl.checkConnect(Native Method)
	at sun.nio.ch.SocketChannelImpl.finishConnect(SocketChannelImpl.java:739)
	at org.apache.zookeeper.ClientCnxnSocketNIO.doTransport(ClientCnxnSocketNIO.java:361)
	at org.apache.zookeeper.ClientCnxn$SendThread.run(ClientCnxn.java:1081)
2015-12-15 15:07:46,169 [main] ERROR curator.ConnectionState (checkTimeouts(200)) - Connection timed out for connection string (devix.cotham.uk:2181) and timeout (15000) / elapsed (31695)
org.apache.curator.CuratorConnectionLossException: KeeperErrorCode = ConnectionLoss
{code}

This means that what appears to be a connectivity problem, is actually an authentication problem â€”you need to look at the ZK server logs to identify the cause., It looks like this is a race in the code that handles SASL authentication failures. While testing out SASL on our installation, I've observed both the behavior described in this issue and a more correct version, in which the server sends a null SASL token back to the client before closing the connection.

I have a short patch for this, but it doesn't look like I can upload it unless I'm assigned this issue. Can someone fix that for me?, [~fpj] should be able to assign the issue to you [~mkizner].
Alternatively, you can send a pull request to [apache/zookeeper|https://github.com/apache/zookeeper]., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12836147/ZOOKEEPER-2346.patch
  against trunk revision f6349d16fcd5f04b560095417fd2a1813ac3e855.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    -1 patch.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3505//console

This message is automatically generated., [~mkizner] Patch looks good - the missing part is tests (for both Java and C client). Also FYI I am using similar approach in ZOOKEEPER-1634 (work in progress), so we might want to consolidate our patches at some point if you are adding more tests. Though my change in ZOOKEEPER-1634 will be a superset of your change (including all tests) here so you could also wait and review ZOOKEEPER-1634 when it's ready., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12840691/ZOOKEEPER-2346.patch
  against trunk revision d72f27279a13986ee0c011e1e5b34edf3a310da9.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 3.0.1) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3535//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3535//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3535//console

This message is automatically generated., It's a little difficult to write a regression test for this issue specifically, because the bug is a race condition, so two different behaviors can be observed. I believe the Java client already has tests for SASL authentication failure, which leads me to believe that the race will be hard to reproduce in the test--I haven't put much thought into it, though. (The C client doesn't have SASL support.)

One way to make this testable would be to have the server return the auth failed error code in the reply header, instead of just sending a null token. I wasn't sure of the implications of this for compatibility, though, so I left it as is. Do you have any thoughts on that?

If the patch you're working on is a superset of this change, I'd be happy to wait and review it. It would be nice to get this change in 3.4.x though., bq. One way to make this testable would be to have the server return the auth failed error code in the reply header, instead of just sending a null token. 

I think this is what I am actually doing in ZOOKEEPER-1634 - client would now get typed keeper exception such as AuthFailed rather than getting a ConnectionLoss exception which is too generic for client such as Curator to handle as ConnectionLoss could be caused by many things. I added tests / updated existing ones so the tests verify that an expected type of KeeperException will be observed on client side, instead of the generic ConnectionLoss exception, which is the key benefit of the change proposed here (to have server gracefully ask client to close cnx instead of having server itself do it.).

bq. The C client doesn't have SASL support.
Good point - I forgot the context here is this JIRA instead of ZOOKEEPER-1634 where i do need C tests for regression :)]