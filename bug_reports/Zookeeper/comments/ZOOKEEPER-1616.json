[Cooooooool, [~tlipcon]

One thing need to explain is that the implement of currentTimeMillis&nanoTime is affected by lower OS version as wellï¼Œso the good proposal will benefit newer OS only.  Here is the code snappiet from hs20 just for reference :

{code}
jlong os::javaTimeNanos() {
  if (Linux::supports_monotonic_clock()) {
    struct timespec tp;
    int status = Linux::clock_gettime(CLOCK_MONOTONIC, &tp);
    assert(status == 0, "gettime error");
    jlong result = jlong(tp.tv_sec) * (1000 * 1000 * 1000) + jlong(tp.tv_nsec);
    return result;
  } else {
    timeval time;
    int status = gettimeofday(&time, NULL);
    assert(status != -1, "linux error");
    jlong usecs = jlong(time.tv_sec) * (1000 * 1000) + jlong(time.tv_usec);
    return 1000 * usecs;
  }
}

jlong os::javaTimeMillis() {
  timeval time;
  int status = gettimeofday(&time, NULL);
  assert(status != -1, "linux error");
  return jlong(time.tv_sec) * 1000  +  jlong(time.tv_usec / 1000);
}
{code}
, Uh...

I thought we patched this ages ago.

See ZOOKEEPER-1366

, 
THis is the previous time we fixed this., Todd,

Can you fill in the versions for which you observed this problem?, Ted, ZOOKEEPER-1366 was never committed. , Admittedly I was looking at a git checkout I haven't updated since July, but as Marshall said, it doesn't look like it's committed anywhere. Happy to close this as dup, but someone should probably commit ZOOKEEPER-1366.

[~xieliang007], supports_monotonic_clock is true if dlsym("clock_gettime") returns non-NULL. According to some googling, it's been available since glibc 2.2 (or maybe earlier) and even early Linux 2.4. So I don't think anyone's running ZooKeeper on a system that wouldn't support it., IMHO, "CLOCK_MONOTONIC_RAW" is a better choice, which comes from 2.6.28+ .  I'm not a expert, please correct me if anything wrong, [~tlipcon], True, but you can't get at that without JNI (the JVM just uses CLOCK_MONOTONIC). The non-RAW version is still worlds better than gettimeofday, which is what ZK is using now - the only downside is that it can run a bit fast or slow when NTP is in "catchup" or "slow down" mode - but generally that's only some small percentage off from true time progression., Agree, really thanks for your nice explain, [~tlipcon], OK,

So can we get ZOOKEEPER-1366 patches reviewed and committed?  I can bring them up to date on whatever branch anybody would like.  Just let me know which branches you are willing to review on., There was discussion on where to release it on ZOOKEEPER-1366 -- it's marked for 3.5.0, so trunk would be a good place., This is fixed in ZOOKEEPER-1366.]