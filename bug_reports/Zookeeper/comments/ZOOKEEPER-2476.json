[Here is a test that shows the problem, Jordan, if I understand your description correctly, it seems like its working as intended. See https://zookeeper.apache.org/doc/trunk/zookeeperReconfig.html#sc_reconfig_errors
especially the last part "Changing an observer into a follower"., In this case we have 1 participant and 1 observer. I can't think of a reason why the upgrade shouldn't be allowed. The 1 existing server can manage the entire "quorum". The observer being upgraded cannot possibly be out of sync., We need a vote (ACCEPT message if I remember correctly) from a quorum of the new configuration (2 votes) and unfortunately observers do not vote (observers just get the commit messages).  This is the main reason for throwing an error. But actually, observers may be missing operations that are currently being voted on., The recommended way to deal with this is to first remove the observer (reconfig it out) which will turn it into a "non-voting follower", and then he can technically vote (his votes will not be counted for the old config, but will be counted during a reconfig you'll do next). Then reconfig add it as a participant. So the conversion is possible using two reconfigs instead of one. , Seems harsh to force clients to do this. Why can't ZK do this for me?

Also, what's the difference between a "non-voting follower" and an Observer? I thought that that was what an Observer was., Non-voting follower is what happens if you connect a participant to a leader, for example, with the intention to add it to the cluster. Logically he's not yet part of the cluster. But it does act as a follower - votes on commits, etc. His votes don't count when the leader gathers a majority of votes. This is something that exists in 3.4 and in fact I remember that such server's votes were actually counted, which was a bug. I just exploited this for the purpose of adding new servers. Non-voting followers, just like followers, waste the leader's bandwidth. 

Observers get and send only part of the messages - no voting is going on, they just listen to commits, and when they come they update their in-memory database, from which they serve requests. So if you need 10 servers to withstand client requests, you don't need all of them to be voters - having 5 of them be observers is much more efficient in terms of not wasting the leader's bandwidth.

> Why can't ZK do this for me?

To do this, we'd need to have observers receive a reconfig request and vote for it, which they never do otherwise. I chose not to implement it for simplicity - the changes were already extensive enough and its simple enough to issue two reconfigs in this case.

, But Observers _can_ be upgraded to Participants right? What's the difference here. Why would an Observer ever reject the proposal?, Yes, observers can be upgraded in case there is already enough other participants, such that their vote isn't needed. For example if we have (A, B, C) and C is an observer, we can upgrade it to participant because (A, B) is a majority of both the old and the new config, so their vote is enough and C's vote isn't needed. But in your scenario, C's vote is necessary to get a majority of the new config. 

The leader is the one throwing the exception in prep-request-processor, when it realizes that he doesn't have a quorum of participants in the new config connected (as participants)., Closing since it works as intended...]