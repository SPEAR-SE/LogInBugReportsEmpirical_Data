[Attached a patch that does the null checking for watcher., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12626596/ZOOKEEPER-1875.patch
  against trunk revision 1561672.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    -1 patch.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1915//console

This message is automatically generated., The patch was generated based on trunk. I am not sure why it can not be applied.
Re-submitting ..., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12626598/ZOOKEEPER-1875-trunk.patch
  against trunk revision 1561672.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    -1 patch.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1916//console

This message is automatically generated., Can someone look to see why the patch can not apply on the build server?
I can apply fine locally.

Also regarding the NPE, it can be easily re-created when you instantiate a zookeeper class with null watcher. , Patch need to be in svn format, Thanks, Thawan.
Attached a re-formatted patch.  Hope it will work this time., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12627002/ZOOKEEPER-1875-trunk.patch
  against trunk revision 1561672.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1917//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1917//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1917//console

This message is automatically generated., +1, Hi, 

Are we good with the patch?, No easy test possible?, Hi, Camille

Are you asking for a unit test case? 
Can you give a pointer or suggestion to a test case I can follow or add to?, Yes, it would be good to add a test case. I would add a new test file ClientCnxnTest.java under trunk/src/java/test/org/apache/zookeeper/test. Just as one example, SessionTest.java starts a server and tests the client against the server. , Actually I'm not sure if watcher or pair.event is ever supposed to be null. Maybe there is a bug somewhere else?, [~michim] When reviewing the code, I've come across one case where it can result in NPE. Zookeeper client.register(null) allows null watcher and during connection event the following code results in null watcher.

{code}
            case None:
                result.add(defaultWatcher);
                boolean clear = ClientCnxn.getDisableAutoResetWatch() &&
                        state != Watcher.Event.KeeperState.SyncConnected;
{code}

I've attached a patch to validate the null connection watcher at the api level. I hope this wont be a compatibility issue for 3.5 release?, -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12648821/ZOOKEEPER-1875.patch
  against trunk revision 1600481.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2123//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2123//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2123//console

This message is automatically generated., +1 Good catch Rakesh. I don't think this would be a compatibility problem, but I'll wait for others to confirm before checking this in to 3.5., Hi, guys
It is possible that existing user code instantiate ZooKeeper with a null watcher.
It is a valid use case: I need a ZooKeeper but I don't want to watch or get any event.

Do I misunderstand anything?, AFAIK mostly everyone will have logic against connection watch notifications and act upon. If anyone has null watcher pattern, still it can be achieved by passing NullWatcher implementation. I thought of avoiding null checks during 'result.add(defaultWatcher);', if anyone has strong reason we can have this alternate way:), bq. It is a valid use case: I need a ZooKeeper but I don't want to watch or get any event.

That's valid wrt not interested in setting any znode watches. However watchers are also notified about service state changes - such as being connected/disconnected from the ZK service. You can't operate w/o this (creating a zk object is not sufficient, you are async notified when you are eventually connected to the service - that goes to a watcher).

Unfortunately I see the current patch as a b/w incompat issue - users might be passing null watcher when contructing the ZK object even though they shouldn't be. Take a look at the results here (not everything is apropos but there are enough there...)

https://github.com/search?q=%22new+zookeeper%22+null&type=Code&ref=searchresults

We might be able to fix this over time, but for the time being I believe we need to live with it.

imo the patch should be updated to just address the original issue - handle the case where we get a null watcher., Hi, [~phunt], [~rakeshr]
Are you ok with the original patch first patch?
I think it is simple guard against null watcher during processing of events that we should have in place anyway.
, I agree not to break compatibility. So in this jira will just handle the original null watcher issue.

[~jinghe] How about doing the null checks at the place where it is adding the null defaultWatcher to the list, like below. Please see my [previous comments for the root cause | https://issues.apache.org/jira/browse/ZOOKEEPER-1875?focusedCommentId=14020864&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-14020864]

{code}
ZooKeeper.java


if (defaultWatcher != null) {
    result.add(defaultWatcher);
{code}, Hi, [~rakeshr]

Good suggestion! That will do.
Maybe add the customary null checking in my first patch as well? , [~jinghe] will you generate a patch?, I can confirm this bug affects 3.4.10 also. Will there be a 3.4.11 to fix this, or will this only be fixed in 3.5+?
This issue affects the [zookeeper-maven-plugin|https://github.com/revelc/zookeeper-maven-plugin]. I've had to create a NOOPWatcher to work around, because null cannot be passed as a watcher in the constructor.]