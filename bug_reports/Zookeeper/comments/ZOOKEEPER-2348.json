[In the first scenario, you say that the session expired, and the removal happened, then fault, then it wasn't removed. Does the new leader eventually detect the session expiration, or does it never detect it?

In the second scenario, is the delete returned as succeeded to the client?, maybe the same with  ZOOKEEPER-2355 ?, This case might be the same as ZOOKEEPER-2355, and it could be a different case. Session expire on cluster level requires quorum consensus, and if only (old) leader saw the session expired but rest of the quorum does not, then after leader re-election the old leader should truncate its log entry that records appertains to the session expire / ephemeral clean up, and reload data base - and ephemeral node should reappear on old leader node. This is expected behavior - that one node may be back in history. Other than this, the rest should be covered by ZOOKEEPER-2355., [~hanm] if only the old leader saw the session expiredï¼Œwhat the client saw? Connection lost, or session expired?
it's ok for connection lost but inconsistent  if client saw the session expired.
, What client saw depends on how the session is expired. There are two cases:

* Session is expired by client by explicitly calling close which will set the client state to "closed" and any future requests will yield session expired exception. I think this is the only case that client might see a session expire event before the client's session really gets terminated on the quorum. It would be inconsistent if the current ZK client can reconnect to the new quorum and find out that the session state changed from expired to reestablished, but since the current ZK client is already closed, that is not possible. The last session event the current closed ZK client saw reflects the state of the session. Other clients will eventually see the removal of the ephemerals appertained to the closed session as well (and there is no middle state in between).

* Session is expired because heart beats between client / server failed (e.g. network partition, server overloaded, client overloaded, and so on). In this case, client will get connection loss event. When client reconnects to the quorum, client will first try reestablish the session, which also requires consensus. Because ordering guarantees, when the quorum processes the request from this client the session is either already expired by the quorum, or the session is still valid. In either case, the client would either only see session expired event after reconnecting (by which time ephemerals are gone from other client's view as well), or the old state. It is still a consistent view across all clients.]