[node.getChildren() can legally return null, -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12816094/ZOOKEEPER-2464.patch
  against trunk revision 1750739.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3261//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3261//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3261//console

This message is automatically generated., 1 line change and no test case was provided - so I didn't add a test, +1, lgtm. Thanks for the patch [~randgalt]., +1, LGTM.

Hey, [~randgalt], I have just seen that ZK projects imports mockito framework but only uses it on a single test case (as far as my quick-and-dirty search showed).

*If you want to add a test case to this bug*, then I am attaching a class that can be uses mockito to do so. If you decide it's too much boilerplate for little benefit then no problem leaving it out of this patch. *It's up to you to include it or not, just an idea*. :)

In either case, we are good to go with this patch, IMHO. Please, any committer would mind to merge it as soon as possible?

/cc [~hanm], [~arshadmohammad]?, -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12849173/ContainerManagerTest.java
  against trunk revision 762f4af65bb1056a582a6f36183a9e28fe0ccab8.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    -1 patch.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3568//console

This message is automatically generated., Root cause of the problem is the inconsistent behavior of DataNode.getChildren() API.
DataNode.getChildren() API Current Behaviour:
# returns null initially
When DataNode is created and no children are added yet, DataNode.getChildren() returns null
# returns empty set after all the children are deleted:
created a Node
add a child
delete the child
DataNode.getChildren() returns empty set.

I think we should fix this issue by modifying the DataNode.getChildren() API. We should always return empty set if there is no child., Yeah... makes sense, it's pretty inconsistent behavior. It would require some defensive code as {{DataNode.setChildren(null)}} could introduce the null again. In fact, it is a total  refactoring of {{DataNode}}, albeit a small class. Wdyt [~randgalt]? , [~eribeiro] - I think a 1 line change is too much for a test, [~arshad.mohammad] IMO it should be a separate issue. , [~randgalt], I created ZOOKEEPER-2680. 
After ZOOKEEPER-2680 fix this issue will get automatically fixed., Hi, we are also seeing this. We have a lot of zNodes building up in production as we speak (currently at 3127223). We have a temporary script that can remove older znodes, but this is a real big operational risk waiting to explode since failover will be very heavy.

What's the next step here? Can we help any way? Is there any date for when a release with a fix for this is in place?, This issue is fixed as part of ZOOKEEPER-2680 and it will in 3.5.3 release.]