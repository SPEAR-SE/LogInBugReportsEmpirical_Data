[this is a patch set on 3.4.6 version. this issue seems to exist in the latest version (master) too.

{{diff --git a/apache_release/src/java/main/org/apache/zookeeper/server/ZooKeeperServer.java b/apache_release/src/java/main/org/apache/zookeeper/server/ZooKeeperServer.java
index c1812c4..dddf976 100644
--- a/apache_release/src/java/main/org/apache/zookeeper/server/ZooKeeperServer.java
+++ b/apache_release/src/java/main/org/apache/zookeeper/server/ZooKeeperServer.java
@@ -30,6 +30,8 @@ import java.util.HashMap;
 import java.util.LinkedList;
 import java.util.List;
 import java.util.Random;
+import java.util.SortedSet;
+import java.util.TreeSet;

 import javax.security.sasl.SaslException;

@@ -936,8 +938,30 @@ public class ZooKeeperServer implements SessionExpirer, ServerStats.Provider {
                 cnxn.sendResponse(rh,rsp, "response"); // not sure about 3rd arg..what is it?
             }
             else {
+                List<Id> authInfo = cnxn.getAuthInfo();
+                // Iterate over auth info and create this
+                SortedSet<String> providedAuthSchemes = new TreeSet<String>();
+                for (Id authid : authInfo) {
+                    providedAuthSchemes.add(authid.getScheme());
+                }
+
+                SortedSet<String> neededAuthSchemes =
+                    ProviderRegistry.getSchemesRequiringAuth();
+                if (!providedAuthSchemes.containsAll(neededAuthSchemes)) {
+                    // We got a data packet without completing the necessary
+                    // authentication; so, nuke it!
+                    LOG.warn("Missing required authentication; closing connection");
+                    ReplyHeader rh = new ReplyHeader(h.getXid(), 0,
+                            KeeperException.Code.NOAUTH.intValue());
+                    cnxn.sendResponse(rh, null, null);
+                    // ... and close connection
+                    cnxn.sendBuffer(ServerCnxnFactory.closeConn);
+                    cnxn.disableRecv();
+                    return;
+                }
+
                 Request si = new Request(cnxn, cnxn.getSessionId(), h.getXid(),
-                  h.getType(), incomingBuffer, cnxn.getAuthInfo());
+                  h.getType(), incomingBuffer, authInfo);
                 si.setOwner(ServerCnxn.me);
                 submitRequest(si);
             }
diff --git a/apache_release/src/java/main/org/apache/zookeeper/server/auth/AuthenticationProvider.java b/apache_release/src/java/main/org/apache/zookeeper/server/auth/AuthenticationProvider.java
index dd6e32f..3e1ff3a 100644
--- a/apache_release/src/java/main/org/apache/zookeeper/server/auth/AuthenticationProvider.java
+++ b/apache_release/src/java/main/org/apache/zookeeper/server/auth/AuthenticationProvider.java
@@ -79,4 +79,13 @@ public interface AuthenticationProvider {
      * @return true if id is well formed.
      */
     boolean isValid(String id);
+
+    /**
+     * This method is used to check and see if the provider has to
+     * authenticate the client before any requests from it can be processed.
+     *
+     * @return true if this provider needs to authenticate the client before
+     * it can honor any requests from it
+     */
+    boolean needAuthentication();
 }
diff --git a/apache_release/src/java/main/org/apache/zookeeper/server/auth/DigestAuthenticationProvider.java b/apache_release/src/java/main/org/apache/zookeeper/server/auth/DigestAuthenticationProvider.java
index 2427e7a..c2805b4 100644
--- a/apache_release/src/java/main/org/apache/zookeeper/server/auth/DigestAuthenticationProvider.java
+++ b/apache_release/src/java/main/org/apache/zookeeper/server/auth/DigestAuthenticationProvider.java
@@ -126,6 +126,10 @@ public class DigestAuthenticationProvider implements AuthenticationProvider {
         return id.equals(aclExpr);
     }

+    public boolean needAuthentication() {
+        return false;
+    }
+
     /** Call with a single argument of user:pass to generate authdata.
      * Authdata output can be used when setting superDigest for example.
      * @param args single argument of user:pass
diff --git a/apache_release/src/java/main/org/apache/zookeeper/server/auth/IPAuthenticationProvider.java b/apache_release/src/java/main/org/apache/zookeeper/server/auth/IPAuthenticationProvider.java
index 192dc06..c48a8ba 100644
--- a/apache_release/src/java/main/org/apache/zookeeper/server/auth/IPAuthenticationProvider.java
+++ b/apache_release/src/java/main/org/apache/zookeeper/server/auth/IPAuthenticationProvider.java
@@ -114,4 +114,8 @@ public class IPAuthenticationProvider implements AuthenticationProvider {
     public boolean isValid(String id) {
         return addr2Bytes(id) != null;
     }
+
+    public boolean needAuthentication() {
+        return false;
+    }
 }
diff --git a/apache_release/src/java/main/org/apache/zookeeper/server/auth/ProviderRegistry.java b/apache_release/src/java/main/org/apache/zookeeper/server/auth/ProviderRegistry.java
index 406015f..e2df13c 100644
--- a/apache_release/src/java/main/org/apache/zookeeper/server/auth/ProviderRegistry.java
+++ b/apache_release/src/java/main/org/apache/zookeeper/server/auth/ProviderRegistry.java
@@ -20,6 +20,9 @@ package org.apache.zookeeper.server.auth;

 import java.util.Enumeration;
 import java.util.HashMap;
+import java.util.Collections;
+import java.util.SortedSet;
+import java.util.TreeSet;

 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -32,6 +35,9 @@ public class ProviderRegistry {
     private static boolean initialized = false;
     private static HashMap<String, AuthenticationProvider> authenticationProviders =
         new HashMap<String, AuthenticationProvider>();
+    // Set of authentication schemes that needs to see an auth packet from
+    // the client before letting it transact with zookeeper
+    private static TreeSet<String> schemesRequiringAuth = new TreeSet<String>();

     public static void initialize() {
         synchronized (ProviderRegistry.class) {
@@ -41,6 +47,13 @@ public class ProviderRegistry {
             DigestAuthenticationProvider digp = new DigestAuthenticationProvider();
             authenticationProviders.put(ipp.getScheme(), ipp);
             authenticationProviders.put(digp.getScheme(), digp);
+
+            if (ipp.needAuthentication()) {
+                schemesRequiringAuth.add(ipp.getScheme());
+            }
+            if (digp.needAuthentication()) {
+                schemesRequiringAuth.add(digp.getScheme());
+            }
             Enumeration<Object> en = System.getProperties().keys();
             while (en.hasMoreElements()) {
                 String k = (String) en.nextElement();
@@ -52,6 +65,20 @@ public class ProviderRegistry {
                         AuthenticationProvider ap = (AuthenticationProvider) c
                                 .newInstance();
                         authenticationProviders.put(ap.getScheme(), ap);
+
+                        // Check if the authentication provider supports the
+                        // new interface
+                        try {
+                            ap.getClass().getDeclaredMethod("needAuthentication");
+                        }
+                        catch (NoSuchMethodException e) {
+                            LOG.warn("Provider for " + ap.getScheme() +
+                                     " does not define needAuthentication");
+                            continue;
+                        }
+                        if (ap.needAuthentication()) {
+                            schemesRequiringAuth.add(ap.getScheme());
+                        }
                     } catch (Exception e) {
                         LOG.warn("Problems loading " + className,e);
                     }
@@ -74,4 +101,10 @@ public class ProviderRegistry {
 }
         return sb.toString();
     }
+
+    public static SortedSet<String> getSchemesRequiringAuth() {
+        if(!initialized)
+            initialize();
+        return Collections.unmodifiableSortedSet(schemesRequiringAuth);
+    }
 }
diff --git a/apache_release/src/java/main/org/apache/zookeeper/server/auth/SASLAuthenticationProvider.java b/apache_release/src/java/main/org/apache/zookeeper/server/auth/SASLAuthenticationProvider.java
index 063304f..f098cf0 100644
--- a/apache_release/src/java/main/org/apache/zookeeper/server/auth/SASLAuthenticationProvider.java
+++ b/apache_release/src/java/main/org/apache/zookeeper/server/auth/SASLAuthenticationProvider.java
@@ -66,5 +66,7 @@ public class SASLAuthenticationProvider implements AuthenticationProvider {
         }
    }

-
+   public boolean needAuthentication() {
+        return false;
+    }
 }
}}, GitHub user sriramch opened a pull request:

    https://github.com/apache/zookeeper/pull/418

    [zookeeper-2937] disallow client requests without completing authentication...

    - https://issues.apache.org/jira/browse/ZOOKEEPER-2937
    - do not process data packets, if authentication via providers that
      *requires* authentication aren't completed

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/sriramch/zookeeper master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/zookeeper/pull/418.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #418
    
----
commit ed6986b83eea71e280976df78b13c44088915efa
Author: Sriram Chandramouli <sriramch@csp0094.csp.corp.gq1.yahoo.com>
Date:   2017-11-15T21:25:29Z

    [zookeeper-2937]
    
    - https://issues.apache.org/jira/browse/ZOOKEEPER-2937
    - do not process data packets, if authentication via providers that
      *requires* authentication aren't completed

commit 2e2e4b5b4a57212da70e004c402711412b1d6f07
Author: Sriram Chandramouli <sriramch@csp0094.csp.corp.gq1.yahoo.com>
Date:   2017-11-16T02:54:29Z

    - do the auth checks only once after connection establishment before
      processing data packets

commit 74271caa44484b06b435e39cd5e22362bb2c73cf
Author: Sriram Chandramouli <sriramch@csp0094.csp.corp.gq1.yahoo.com>
Date:   2017-11-16T02:57:42Z

    Merge branch 'master' of https://github.com/apache/zookeeper

----
]