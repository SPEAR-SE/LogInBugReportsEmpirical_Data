[Here is a simple patch that sets the default to 1G, -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12573957/ZOOKEEPER-1670.patch
  against trunk revision 1455387.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1430//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1430//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1430//console

This message is automatically generated., No tests added but manually started a server and if not defined it started with 1G heap. When i set SERVER_JVMFLAGS and started the server it picked up what i set., The patch looks good, but I am wondering whether it makes sense to add a default conf/zookeeper-env.sh, and add the default there. bin/zkEnv.sh roughly corresponds to bin/hadoop-config.sh, and conf/zookeeper-env.sh roughly corresponds to conf/hadoop-env.sh from my understanding. , [~enis]

The problem with zookeeper-env.sh is that people can replace the default configs. So i think the check should be in zkEnv.sh

However another problem exists where SERVER_JVMFLAGS is also used to set the jaas configuration file. I feel we need to introduce another variable called ZK_SERVER_HEAP which defaults to 1G and we set the SERVER_JVMFLAGS="$ZK_SERVER_HEAP $SERVER_JVMFLAGS"

That way any existing settings user do for heap size still works but will default to 1G if nothing is found., attached a patch with the new approach., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12574412/ZOOKEEPER-1670.patch
  against trunk revision 1458356.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1435//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1435//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1435//console

This message is automatically generated., I've looked at how we do it for HBase as a reference: 

Mainly, we define HBASE_HEAPSIZE in conf/hbase-env.sh, but commented out: 
{code}
# The maximum amount of heap to use, in MB. Default is 1000.
# export HBASE_HEAPSIZE=1000
{code}

And in actual bin/hbase script that we do append Xmx, and have a default value: 
{code}
JAVA_HEAP_MAX=-Xmx1000mÂ·
...
# check envvars which might override default args
if [ "$HBASE_HEAPSIZE" != "" ]; then
  #echo "run with heapsize $HBASE_HEAPSIZE"
  JAVA_HEAP_MAX="-Xmx""$HBASE_HEAPSIZE""m"
  #echo $JAVA_HEAP_MAX
fi
{code}, Updated the patch to be similar to what Hadoop and HBase do.

Also added the default to the client as well., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12577295/ZOOKEEPER-1670.patch
  against trunk revision 1463329.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1443//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1443//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1443//console

This message is automatically generated., This looks good. Should we add this to the .cmd files as well? , [~enis]

I can make the change but i dont have the HW to test it out. Let me know. Also been debating this.. do we want different default env vars for server and client? If they are different you can have the same config on the client and the server machines., bq. I can make the change but i dont have the HW to test it out
I can test it. 
bq. do we want different default env vars for server and client?
From what it seems, CLIENT only refers to zkCli. We do not need a huge heap for that. Are you thinking of ZOOKEEPER_CLIENT_HEAPSIZE and ZOOKEEPER_SERVER_HEAPSIZE? 
, Yes thats what i am thinking. I was going to default both to 1G but i can make the default for the client smaller. Let me know how much you think we should set the default to., Created ZK_CLIENT_HEAP default of 256m and ZK_SERVER_HEAP default of 100m, -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12577635/ZOOKEEPER-1670.patch
  against trunk revision 1463329.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1449//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1449//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1449//console

This message is automatically generated., sorry for the noise.. here is a more optimized patch.

Also did not generate a windows patch because the windows start scripts do not seem to be setting jvm flags., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12577655/ZOOKEEPER-1670.patch
  against trunk revision 1463329.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1450//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1450//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1450//console

This message is automatically generated., Looks good to me. , +1, looks good to me. I'll create a jira for the jvm flags for windows start scripts., Trunk: Committed revision 1519655.
b3.4: Committed revision 1519650., I think we should revert this change:

1) The original defaults were based on the JVM egonomics. To change things as this patch does, arbitrarily, might cause problems for some folks. If someone wants a specific value for the heap they should just specify it on the command line - I'd be a lot more comfortable if we set the heap only when a user specified a value (it's ok to have specific env settings for this, just shouldn't have a default).

2) Also many folks are already specifying the heap size using the command line "SERVER_JVMFLAGS" parameter. This change will now cause potential problems as the new defaults may override the SERVER_JVMFLAGS settings already in place.


, bq. Also many folks are already specifying the heap size using the command line "SERVER_JVMFLAGS" parameter. This change will now cause potential problems as the new defaults may override the SERVER_JVMFLAGS settings already in place.

I dont think this is true as SERVER_JVMFLAGS is at the end. So if you were specifying the heap size using SERVER_JVMFLAGS it should still be applied as the last heap size setting is what will be the picked up., Also rather than patching this for specific issues we might want to think about it more in the large, esp wrt ZOOKEEPER-545. The default collector is really a poor setting for us at this point. (esp re stop-the-world collections), Thanks for the feedback, Pat. I can really go either way, but given that this has been here for a long time and I have given time for folks to dispute my +1, I'd rather not revert it unless you argue that this will really break things for our users. Is it acceptable to you that we keep it and discuss separately what you think is the best way to deal with it?, SUCCESS: Integrated in ZooKeeper-trunk #2044 (See [https://builds.apache.org/job/ZooKeeper-trunk/2044/])
ZOOKEEPER-1670. zookeeper should set a default value for SERVER_JVMFLAGS and CLIENT_JVMFLAGS so that memory usage is controlled (Arpit Gupta via fpj) (fpj: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1519655)
* /zookeeper/trunk/CHANGES.txt
* /zookeeper/trunk/bin/zkEnv.sh
, [~phunt], I'd really to come to a conclusion on this patch. Could you please respond to my last comment?, Here's another reason - we typically fix bugs in bug fix releases (like 3.4.6). People expect the old behavior(s) to be unchanged in fixes. This seems like it would be better in a minor update like 3.5.0. Least surprise., Also I'd still like us to address the default GC setup, but that would wait for a separate jira (although it might have impact on what this jira is trying to accomplish - hence my previous comment., This issue is marked as a bug and I understood it as if the absence of defaults was causing problems. As I said, I can really go either way with respect to the fix and I understand the argument that this is borderline as a bug fix. 

Now, is your proposal to revert it on the 3.4 branch only or both? From your argument, I understand that keeping it on 3.5.0 is acceptable. [~arpitgupta], is it acceptable to you?
 , Sure that works., Reverting from 3.4 and keeping in trunk is good for me. Thanks!, Reverted b3.4 commit. Committed revision 1528221.]