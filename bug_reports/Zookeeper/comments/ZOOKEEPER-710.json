[ZooKeeper::getChildren() path='/ggmboxlocks/16314'; callback error='session moved to another server, so operation is ignored' logs are printed using 
log_error(logger, "ZooKeeper::getChildren() path='%s'; callback error='%s'", path.c_str(), zerror(retval)) where retval is rc code from callback., lukasz, can you elaborate on what this code is doing?

{code}
Mar 16 14:21:49 XXXXXXXXXX-c1-mbox-2 XXXXXXXXXX_mbox[25112]: DEBUG: ZooKeeper: ZooKeeper::execWatch() executing watch
Mar 16 14:21:49 XXXXXXXXXX-c1-mbox-2 XXXXXXXXXX_mbox[25112]: INFO: ZooKeeper: ZooKeeper::watcherFunHandleSessionEvent() state change to 3
Mar 16 14:21:49 XXXXXXXXXX-c1-mbox-2 XXXXXXXXXX_mbox[25112]: INFO: ZooKeeper: ZooKeeper::fireAllWatchFunctions() calling all watches
{code}

which all watches are your firing?, This is application stuff.

Lets take exist function from our code which wraps zookeeper library as an example.
Its declaration is:
{noformat}
ZooKeeper::ErrorCode::Type ZooKeeper::exists(const std::string& path,
                                             Stat &stat,
                                             const WatchFunction& watchFunction,
                                             WatchId& watchId,
                                             apr_time_t timeout) 
{noformat}

As you see caller passes high level watchFunction to be called. 
Our wrapper maintains a map (node,operationtype)->watcherFunction. Internal watch function which is used in zoo_* calls
is responsible for calling user provided watchFunctions stored in map in case of change concerning one of nodes.

When client disconnects from zookeeper all watches are invalidated (at least AFAIK) so we are calling all user provided functions in such case.
We are doing this as soon client is reconnected to zookeeper. We simulate situation when change occured to all nodes application was interested in. That is what fireAllWatchFunctions function do.

Is it somewhat clear?




, lukasz thank you for the logs! they have really helped pinpoint the problem. it appears that message delays are the cause of the problem. it appears that what is happening is that the client is connecting to a follower that is running very slow. the follower is slow processing the reconnect request and forwarding it to the leader. for example, the following shows a case where it takes 7 seconds for the follower to process a reestablish connection request.

{quote}
zookeeper-node3.log.2010-03-16:2010-03-16 14:21:41,267 - INFO  [NIOServerCxn.Factory:2181:NIOServerCnxn@964] - Finished init of 0x224ea5675b4007b valid:true
zookeeper-node3.log.2010-03-16:2010-03-16 14:21:48,937 - INFO  [NIOServerCxn.Factory:2181:NIOServerCnxn@612] - Renewing session 0x224ea5675b4007b
{quote}

the problem is that within that 7 seconds a client can drop the connection to the follower and establish a connection to the leader. if the renew session request is delayed until after the client reestablishes the connection with the leader, the session will get marked as managed by the previous follower and all requests set to the leader will get MOVED error, which is what you are seeing.

the problem is that we consider the MOVED error to be a request error rather than a connection error. the leader needs to drop the connection when it sees the MOVED error so that the client can reestablish the session properly with another machine., Marking this to fix for 3.3.0 and 3.2.3
, fixes this session moved issue by closing the invalid connection, +1 great work pat! and thanx Lukasz for identifying this failure condition., +1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12439239/ZOOKEEPER-710_3.3.patch
  against trunk revision 924942.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: http://hudson.zones.apache.org/hudson/job/Zookeeper-Patch-h8.grid.sp2.yahoo.net/143/testReport/
Findbugs warnings: http://hudson.zones.apache.org/hudson/job/Zookeeper-Patch-h8.grid.sp2.yahoo.net/143/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: http://hudson.zones.apache.org/hudson/job/Zookeeper-Patch-h8.grid.sp2.yahoo.net/143/console

This message is automatically generated., this 3.2 patch is against the current 3.2 svn branch

fixes the issue in my tests
, Committed revision 925104.
, Lukasz feel free to try the attached 3.2 patch. It passes all tests on my system. You should be able to patch/compile against the 3.2 release (patch -p0 < patchfile) or svn 3.2 branch.

It would be great if you could try this out and verify that it fixes the issue you've been seeing with moved., I will build version with patch and deploy it on Monday. But as I will also tweak client timeout parameter and GC; and bug itself is not manually reproducable, it wont be best check if fix is working :)
, I just committed this to 3.2 branch. thanks pat!, Integrated in ZooKeeper-trunk #763 (See [http://hudson.zones.apache.org/hudson/job/ZooKeeper-trunk/763/])
    . Forgot to run ant docs
]