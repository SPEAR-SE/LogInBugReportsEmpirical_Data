[-1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12575640/TruncateCorruptionTest-patch.patch
  against trunk revision 1458648.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 9 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1439//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1439//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1439//console

This message is automatically generated., After some debugging, here's what seems to be the problem.
There were some timing related failures, which the attached patch mostly addresses, revealing a different problem.

The failure above is that zk1 sees znode /test2 but zk2 doesn't.
From the log:
2013-03-27 02:39:59,438 [myid:] - INFO  [main:TruncateCorruptionTest@160] - List of children at zk2 before zk1 became master
2013-03-27 02:39:59,440 [myid:] - INFO  [main:TruncateCorruptionTest@162] - [test, zookeeper, test3]
2013-03-27 02:39:59,440 [myid:] - INFO  [main:TruncateCorruptionTest@164] - List of children at zk1 before zk1 became master
2013-03-27 02:39:59,442 [myid:] - INFO  [main:TruncateCorruptionTest@166] - [test, zookeeper, test2, test3]

The test is designed in a way that /test2 is first committed to servers 1 and 3, but then the test deletes the data dir of server 3,
disconnects server 1, has server 3 form a quorum with server 2 and when server 1 connects to the new ensemble it is being forced
to truncate the committed transaction that created /test2. So why does it still
have /test2 in its data tree ? This is because earlier it managed to make a snapshot (39:17). Truncate doesn't touch the snapshot. After the truncate when we load the database, we first start from the snapshot, then apply the truncated log. So /test2 showing up is perfectly OK in this case. 

If we want to keep the current structure of this test, we should disable snapshotting for its duration. Is there a way to do that ?



, WHile you are at it, could you fix the spelling of the test case name?, can we get a few more comments in the code on the overall strategy of the test. wrapper1 uses a different port that the rest and then there is some port forwarding going on. i understand that the objective is to do an add after a trunc, but i'm not sure how/why it is achieved with this code.
, Hi Ben,

The test was added here: https://issues.apache.org/jira/browse/ZOOKEEPER-1489, and there are some explanations on what it does on that jira.
I think I more or less understand what it tried to do, but whoever wrote it should probably explain it.

In my opinion, besides small bugs which are the ones causing our periodic builds to fail, the test just doesn't take snapshots into account and 
this results in the failure we're seeing in the pre-commit build (see my previous comment above). We should probably disable the test until it is fixed., ah you are right. it would be good to have the steps as comments in the code. that should be rock solid reproducible. we shouldn't disable snapshotting. if it really is causing a problem, we should make sure it happens to fix the bug., I think the snapshotting is a problem by looking at the log above: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1439//testReport/org.apache.zookeeper.server/TruncateCorruptionTest/testTransactionLogCorruption/

zk1 still sees /test2 (39:59), even after its log is truncated (39:57). This is because earlier zk1 managed to make a snapshot (39:17). I think the explanation is this: truncate doesn't touch the snapshot. After the truncate when we load the database, we first start from the snapshot, then apply the truncated log. So /test2 is showing up, and we have an inconsistent state between the servers (only zk1 sees /test2). 

The reason why I think this is not a ZooKeeper bug but a bug of this test is that the test explicitly erases the state of 2 out of 3 servers in order to cause truncate on the log of zk1. This situation is not something that was considered possible in ZooKeeper (for good reasons), and it doesn't work as can be seen from the log.

I suggest to first figure out if this is something we can fix. If not, there is no point in explaining this test better :), This failed trunk again last night. Alex did you come to a conclusion on bug vs bad test?, I spent some time trying to fix the test today, but no luck so far. I suggest to disable it.

We can fix the periodic failures by applying the patch attached to the Jira, but then there are going to be periodic failures of a different kind. The scenario this test creates is problematic - it deletes the data of 2 servers and expects the third server to loose committed data. The third server doesn't loose the data when it succeeds to snapshot it, in which case the test fails. I tried to delete the snapshot but this creates other problems.
, i think alex is right. i think we could test this case with a simpler, more reliable test., The attached patch disables testTransactionLogCorruption, and includes a minor fix to TruncateTest (specifies leader election and client ports).

As explained above the logic of testTransactionLogCorruption is problematic. But it was introduced in ZOOKEEPER-1489 to solve some problem, so I wanted to make sure we're still covering that problem. ZOOKEEPER-1489 makes changes to two functions. Reverting either of these changes causes one of the tests in TruncateTest to fail. On the other hand, reverting the ZOOKEEPER-1489 changes doesn't cause testTransactionLogCorruption to fail. Even more reason to disable it.

Alex, -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12592176/ZOOKEEPER-1629-ver1.patch
  against trunk revision 1498732.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 6 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1510//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1510//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1510//console

This message is automatically generated., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12592180/ZOOKEEPER-1629-ver2.patch
  against trunk revision 1498732.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 6 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1511//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1511//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1511//console

This message is automatically generated., +1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12592182/ZOOKEEPER-1629.patch
  against trunk revision 1498732.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 6 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1512//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1512//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1512//console

This message is automatically generated., Instead of removing this at the build.xml level why not just use the @Ignore annotation on the test?, good idea, I didn't know about this option, +1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12592208/ZOOKEEPER-1629-ver1.patch
  against trunk revision 1498732.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 6 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1513//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1513//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1513//console

This message is automatically generated., Not to belabor this too much since I am super eager to get this done, but of course my second thought on this is do we just remove the test entirely? Is it providing value living in the code base albiet not run? There's a lot of code in the test class so I'm not sure if it's worth keeping or not, but if we're going to disable it maybe we should just remove the class entirely., The main thing I liked about this test is its use of PortForwarder, which is actually implemented in a separate file. But the test is the only example of how to use it. 

Perhaps we can take stopForwarding and startForwarding functions from the test and put it in a commented out section in the beginning of PortForwarder.java, just as an example of use, and remove the test ?, Hmmm that's a good point. I think that is the right thing to do, can you make that last change? I will give it a last review and check it in after that!, +1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12592211/ZOOKEEPER-1629-ver2.patch
  against trunk revision 1498732.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 12 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1514//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1514//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1514//console

This message is automatically generated., +1 checked in thanks!!, thanks!!, SUCCESS: Integrated in ZooKeeper-trunk #1991 (See [https://builds.apache.org/job/ZooKeeper-trunk/1991/])
ZOOKEEPER-1629. testTransactionLogCorruption occasionally fails. (shralex via camille) (camille: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1503045)
* /zookeeper/trunk/CHANGES.txt
* /zookeeper/trunk/src/java/test/org/apache/zookeeper/server/TruncateCorruptionTest.java
* /zookeeper/trunk/src/java/test/org/apache/zookeeper/server/util/PortForwarder.java
* /zookeeper/trunk/src/java/test/org/apache/zookeeper/test/TruncateTest.java
, patch for 3.4 branch, -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12592217/ZOOKEEPER-1629-34.patch
  against trunk revision 1503045.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 12 new or modified tests.

    -1 patch.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1515//console

This message is automatically generated., forgot to add this earlier (was hitting this problem in PortForwarder while debugging the test we removed), +1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12592222/ZOOKEEPER-1629-small-fix.patch
  against trunk revision 1503045.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1516//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1516//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1516//console

This message is automatically generated., Added that small fix., SUCCESS: Integrated in ZooKeeper-trunk #1992 (See [https://builds.apache.org/job/ZooKeeper-trunk/1992/])
ZOOKEEPER-1629. testTransactionLogCorruption occasionally fails. (shralex via camille) (camille: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1503101)
* /zookeeper/trunk/src/java/test/org/apache/zookeeper/server/util/PortForwarder.java
, Closing issues after releasing 3.4.6.]