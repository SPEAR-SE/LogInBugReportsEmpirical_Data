[I'm attaching a patch which implements the reference counted solution discussed on email.  This patch is for the 3.4 branch., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12771977/ZOOKEEPER-2141.patch
  against trunk revision 1713774.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    -1 patch.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2955//console

This message is automatically generated., Attaching trunk patch, -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12792212/ZOOKEEPER-2141.patch
  against trunk revision 1733679.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    -1 findbugs.  The patch appears to introduce 3 new Findbugs (version 2.0.3) warnings.

    -1 release audit.  The applied patch generated 2 release audit warnings (more than the trunk's current 0 warnings).

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3094//testReport/
Release audit warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3094//artifact/trunk/patchprocess/patchReleaseAuditProblems.txt
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3094//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3094//console

This message is automatically generated., qabot identified a couple issues:

1) missing license headers in the new files
2) findbugs noticed some locking issues., I'll take a look and fix these - thanks, Including fix for findbugs issues and headers, QA bot didn't pick up my last patch upload - JIRA was being incredibly slow at the time so I don't know if that was related. Uploading the patch again., Hi Adam. qabot only looks at jiras in the "patch availabile" state. You need to "submit patch" button for that to happen., Thanks Patrick. It looks like I did it correctly the first time but not subsequently., Ticket in correct state now - uploading patch., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12793592/ZOOKEEPER-2141.patch
  against trunk revision 1735116.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    -1 findbugs.  The patch appears to introduce 1 new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3099//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3099//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3099//console

This message is automatically generated., I don't think the test failure was related to my change but it does look like I might have missed a find bugs warning - sorry about that., Patrick,

The remaining findbugs complaint was the lack of synchronisation around "that.aclIndex" in the equals(). The equals is only used by the tests and if passing the findbugs were not a requirement I probably wouldn't have been too worried about it - I'm not generally fond of an equals including mutable fields. I've added the synchronized(that) block in for now. Please do let me know if you don't think this is appropriate and would prefer something else like moving the equals logic to the test class only. 

I ran test-core-java again locally and  ReconfigRecoveryTest.testCurrentObserverIsParticipantInNewConfig passed. Given the tests in ReconfigRecoveryTest seem a little intermittent on the trunk right now (https://builds.apache.org/job/ZooKeeper-trunk-jdk8/521/) I don't think this was related to my change.

Do let me know if you have any feedback on the code and I'll have a crack at any changes that you'd like to see.

Thanks,
Adam, -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12793634/ZOOKEEPER-2141.patch
  against trunk revision 1735116.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3101//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3101//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3101//console

This message is automatically generated., It's failing in AsyncHammerTest. Not sure if this is a flaky test or not. [~adammilnesmith_gs] if you'll run that test locally and see if you think it should pass, I'll review this and get it committed. Thanks for this, nice to see you folks contributing!, Thanks [~fournc]. AsyncHammerTest was passing for me locally before I uploaded the most recent patch and it didn't fail AsyncHammerTest in the version of the patch before that either (PreCommit-ZOOKEEPER-Build/3099). The only change between patches was a synchronize block in an equals that is only invoked by the new test included in the patch., I just ran the failing test locally 5 times with the patch and 5 times without the patch; it succeeded every time., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12793634/ZOOKEEPER-2141.patch
  against trunk revision 1735369.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3105//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3105//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3105//console

This message is automatically generated., This one failed on a cpp test....
 TestReconfigServer::testRemoveConnectedFollowerStarting zookeeper ... FAILED TO START

Is this test flaky? Does anyone know? I don't think I can run the cpp tests from my computer., +1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12793634/ZOOKEEPER-2141.patch
  against trunk revision 1735836.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3112//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3112//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3112//console

This message is automatically generated., Do you all want this fixed on the 3.4 branch? The patch will only apply to trunk currently. LMK., Fixing this for the 3.4 branch too would be ideal. Would you like me to provide a modified patch for the 3.4 branch? If so, should I attach it in the same way or differently for the branch version?, Yes please just make a patch that applies to the 3.4 branch and attach it here with a naming indication that it's for 3.4. Thanks!, No problem - will do - I should have some time one evening this week to do it., Reviewed the patch against trunk, +1 on that and checked in. Waiting on patch against 3.4. Checking existing patch against 3.5., Into 3.5 as well. Just waiting on 3.4., SUCCESS: Integrated in ZooKeeper-trunk #2865 (See [https://builds.apache.org/job/ZooKeeper-trunk/2865/])
ZOOKEEPER-2141. ACL cache in DataTree never removes entries
(Adam Milne-Smith via camille) (camille: [http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1736259])
* trunk
* trunk/CHANGES.txt
* trunk/src/java/main/org/apache/zookeeper/server/DataTree.java
* trunk/src/java/main/org/apache/zookeeper/server/FinalRequestProcessor.java
* trunk/src/java/main/org/apache/zookeeper/server/PrepRequestProcessor.java
* trunk/src/java/main/org/apache/zookeeper/server/ReferenceCountedACLCache.java
* trunk/src/java/main/org/apache/zookeeper/server/ZKDatabase.java
* trunk/src/java/test/org/apache/zookeeper/server/ReferenceCountedACLCacheTest.java
, Sorry for the delay - I've attached a patch for the 3.4 branch. I ran test-core-java successfully twice. If there are any issues with it please let me know. Thanks!, -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12795560/ZOOKEEPER-2141-3.4.patch
  against trunk revision 1736259.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    -1 patch.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3123//console

This message is automatically generated., QA bot tried to apply the 3.4 branch patch to trunk, hence the failure above., This is great, +1 on all of it, I've applied to trunk, 3.5 and 3.4. Thank you all!, Hi [~adammilnesmith] and [~fournc], I am *really* sorry for only having (limited) time to review/check this patch after it has been committed to trunk. :( So, please, take it more like a couple of highlights, if you like.

The patch is really cool, and great work, but I have seen some things that raised some questions I would like to point, plus a couple of minor (i.e., irrelevant) issues.

1. The piece of code below, from {{ReferenceCountedACLCache}}, worried me a bit:

{code}
public synchronized boolean equals(Object o) {
	if (this == o) return true;
	if (o == null || getClass() != o.getClass()) return false;

    ReferenceCountedACLCache that = (ReferenceCountedACLCache) o;
    synchronized (that) {
            if (aclIndex != that.aclIndex) return false;
    }    
        (...)
{code}

See, we are acquiring a lock of object {{foo1}} and then acquiring the lock of object {{foo2}} ({{that}}, in this case) inside it. My question is: wouldn't this potentially leads to a DEADLOCK? I mean, imagine a situation below, or something alike:

{code}
Thread-1: foo1.equals(foo2);
Thread-2: foo2.equals(foo1);
{code}

I guess that with the *right thread interleaving*, it could lead to a deadlock. I was so amused by this possibility that wrote a dummy snippet to evaluate  this, as you can see here (with appropriate insertion of  {{Thread.sleeps}} to reproduce the desired interleaving):

https://gist.github.com/eribeiro/bd2aca6fbae0255b64ba0b4f896e6a8d

and got some runs to successfully reproduce a deadlock as seen here:

https://gist.github.com/eribeiro/96f95b295a4b90c0d261057d4542063a

Disclaimer: maybe this situation NEVER happens in this particular case (if so, sorry for disturbing you, *really*), but I thought it was worth mentioning. ;)

I *guess* a possible solution would be to make {{aclIndex}} a {{volatile}} variable as a "lightweight" alternative to {{synchronized}}, right? Volatile makes has a happens before semantic and it prevents reordering of statements. Wdyt?

2. The inherited code has the following snippet (now moved to {{ReferenceCountedACLCache}}):

{code}
public synchronized Long convertAcls(List<ACL> acls) {
	if (acls == null)
		return -1L;
{code}

What if the acls list is empty, i.e., {{acls = new ArrayList<>()}}? It's okay to cache an empty ACL {{List}} or could we just change the lines above to:

{code}
public synchronized Long convertAcls(List<ACL> acls) {
	if (acls == null || acls.isEmpty())
		return -1L;
{code}

Again, this can NEVER happen in this case above so, I am all for letting it as-is today. :)
 
 
 3. The comment in the following snippet seems a bit out of date (list of longs???):
 
 {code}
    /**
     * converts the list of acls to a list of longs.
     * Increments the reference counter for this ACL.
     * @param acls
     * @return a list of longs that map to the acls
     */
    public synchronized Long convertAcls(List<ACL> acls) {
{code}

 4. AtomicLongWithEquals extends AtomicLong. I failed to see a _good_ reason to create a custom AtomicLong, as its instances are not used as keys. What is the rationale behind this? Disclaimer: IMO, extending a j.u. library is an anti-pattern as we don't have control over it and future changes in the parent class can easily break the codebase.
 
 
 5. ReferenceCountedACLCache.OPEN_UNSAFE_ACL_ID could be made static besides being final.
 
 6. ReferenceCountedACLCacheTest#convertACLsNTimes performs n-1 convertions as seen here (see the ``<`` and the ``-1``):
 
{code}
	for (int i = 0; i < num -1; i++) {
		cache.convertAcls(acl);
	}
{code}

Is this the intended behaviour?

There are other irrelevant observations, but I will refrain myself from citing them by now.

Cheers!
Eddie, Nice catch Eddie. Issue #1 is worth addressing, I'm less sure about the rest. 
[~adammilnesmith] why did you synchronize that value in the equals?, I'm changing the priority to blocker to make sure we don't ship the next release with a deadlock in it. Thanks a lot [~eribeiro]., Ok, I checked the code [~eribeiro] has pointed out and it seems to be fairly harmless because it is in the equals code of the new cache class and I haven't seen it called anywhere else other than one test case ({{testSerializeDesirialize}}). We should fix it nonetheless.

Can we simply remove that synchronization block around {{aclIndex}}? Would it make a significant difference to the semantics of the method? Also, since we are on the topic, has anyone checked carefully the synchronization in this patch? There are 22 matches and some of them were part of the code base already. I'm sure [~adammilnesmith] checked it carefully, but I wonder if [~fournc] or maybe [~phunt] have been able to do it too just to have a second opinion. , I think I made a comment about being uncertain about it further up in the thread somewhere but it was to make findbugs be quiet. I justified it as only used in a test and suggested I move it to the test code if you wanted., I checked it carefully before findbugs suggested some synchronisation changes which I might have been too quick to adopt so I may have made some mistakes there. The feedback is greatly appreciated., Thanks [~eribeiro] - I'll take a stab at fixing some of these., To remove the deadlock concerns in the equals(), I was considering just making the access package local on those fields and moving the equals logic to the test class given this is the only place that uses it. Does this sound reasonable?, That's an option and I'm fine if you want to move the code to the tests, but I'm thinking that you have a couple of other options here:

# Make the synchronization of this and that non-overlapping. You can remove the synchronized modifier from the signature, have a {{synchronized (that)}} block that collects the values of the variables to be compared, and have a {{synchronized (this)} block that performs the comparisons with the local instance variables.
# Make aclIndex an AtomicLong would also work, although it might be overkill., I had been tempted to move the equals out on the basis of it not being required by any main code but happy to go with option 1. I can make that change now., Responses to each (now that I'm at a computer):
1. Absolutely - will provide a patch for this very shortly.
2. Good question - I would have assumed if a node were assigned no acls at all then it should have no access rather than open unsafe. I believe there is no change in behaviour from this patch though.
3. I'll correct this in the aforementioned patch.
4. It was to be able to lean on the Map.equals() where there is an AtomicLong as the value - happy to make this change if desired.
5. I'll correct this in the aforementioned patch.
6. This is the intended behaviour as the line after the for loop calls it an extra time and returns., Attaching trunk patch for equals() synchronization as discussed. Unlike before, this should apply to the 3.4 branch too., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12796041/ZOOKEEPER-2141.patch
  against trunk revision 1736259.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3129//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3129//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3129//console

This message is automatically generated., Notes on the pre-commit build results above:
- No new tests: I didn't include a test for the change to the equals. Would you like me to add a test to show deadlocking isn't possible?
- Core unit test failure: Some of the reconfig tests failed - they don't call any code touched by this patch., I've provided a patch for using option 1. The only remaining issue I can see with this is that we are delegating to HashMap.equals() which could result in a ConcurrentModificationException if another method was called on "that" concurrently. I can't envisage a reason why main code would have 2 ACL caches and compare them, but if we wanted to be cautious so this doesn't come back to bite anyone later, we could replace the HashMaps with ConcurrentHashMaps., Hi [~adammilnesmith], I will try to check your patch today. :)

Nevertheless, I would like to step back a bit and ask you *what would be the gain of having an equality check between two caches*? Why not get rid of the {{equals()}} in {{ReferenceCountedACLCache}} and let the equality be handled by the parent Object class (i.e., using the object reference)? Maybe, to make Findbugs happy it would be rewritten as:

{code}
public synchronized equals(Object object) {
   return this == object;
}
{code}


Caches are highly changing objects so I don't see any multi-threading {{equals()}} implementation being short of complex and error prone (beside that, two caches can be equal now and different a second later). And I question myself if there will be a really compelling reason to check for equality besides the test that [~fpj] pointed out. IMHO, we could also change {{testSerializeDeserialize}} to assert the class fields to make sure the serialization/deserialization worked fine.

Furthermore, it's class is mean to be used by {{DataTree}} only so a single instance is okay, imho. But I am certainly missing some points here, so I would be glad if you help me figure it out a scenario where semantic equality is really necessary here by users of the cache.

Regards,
Eddie, I completely agree, I can't envisage a reason why main code would have 2 ACL caches and compare them, hence my suggestion above to make the access package local on those fields and moving the equals logic to the test class. I have an alternative patch locally doing just that which I can share as well if you'd like.

Thanks,
Adam, Providing alternative patch with no equals on the cache itself and an assertCachesEqual method in the test instead., I've provided the alternative patch for consideration (ZOOKEEPER-2141-equalsMovedToTest.patch) without an equals on the cache. Happy for either to be used. This one is my preference but this is my first contribution and it's not really my call., I'm fine with the version that moves the assertion to the test. I think you've introduced some white spaces in and I was wondering if you could just elaborate a bit on this comments:

{noformat}
-
+    
     /*
     For reasons we don't all agree with, AtomicLong does not have an equals.
      */
{noformat}

both really minor, hope you don't mind., I didn't notice which bit of whitespace was introduced  but will look for and remove it. I'll remove the comment too and provide a new patch in the morning. The initial pass on a patch was a while ago but I think it was some sort of nod to the JDKs reasoning for AtomicLong not having a semantic equals - this shouldn't have made it into the patch - sorry about that., Here's a version with the comment and accidental whitespace removed. I'm attaching it as ZOOKEEPER-2141.patch and deleting the ZOOKEEPER-2141-equalsMovedToTest.patch file to remove any ambiguity in case it affects QA bot's patch choice., +1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12796401/ZOOKEEPER-2141.patch
  against trunk revision 1736259.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3133//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3133//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3133//console

This message is automatically generated., OK I'm looking at this patch more carefully this time. It looks OK to me but would love for [~eribeiro] to take a look as well since he caught some details last time. If you +1 I'll check it in [~eribeiro], Hi [~fournc], thank you for your consideration! :) And sorry for the delay to answer. Well, *I looked carefully and it's +1, IMHO.*


[~adammilnesmith], congrats for the good work! I would only to suggest a little thing (but see, this is *not* required to commit this patch, I am +1 in spite of this): you could have made {{aclIndex}} a volatile as below:

{code}
volatile long aclIndex = 0;
{code}

See this link for further information about the advantage of using {{volatiles}} with long/int/double: http://stackoverflow.com/a/3038233/2698109 . But again, *I am +1 even without this change*.

Cheers,
Ed, FAILURE: Integrated in ZooKeeper-trunk #2880 (See [https://builds.apache.org/job/ZooKeeper-trunk/2880/])
ZOOKEEPER-2141 ACL cache in DataTree never removes entries (Adam Milne-Smith via camille) (camille: [http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1738012])
* trunk/src/java/main/org/apache/zookeeper/server/ReferenceCountedACLCache.java
* trunk/src/java/test/org/apache/zookeeper/server/ReferenceCountedACLCacheTest.java
]