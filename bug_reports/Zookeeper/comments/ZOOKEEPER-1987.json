[I used the following to create the configuration:
https://github.com/phunt/zkconf

running the following:

bq. ./zkconf.py --count 3 ~/dev/svn/test/zookeeper-3.5.0-alpha test3

Where zookeeper-3.5.0-alpha is a build of zk from trunk.

I cd'd into the test3 directory and ran

bq. ./start.sh

waited for it to come up, tried connecting a client then

bq. ./stop.sh

waited for down

bq. ./start.sh

at which point it never came back up, See the attached "test3.tar.gz" if you want to try reproducing w/o using zkconf. This is the repo in the state I left it after the second start failed. Just untar this, cd into the directory and run "./start.sh" to reproduce., PS - the logs, configs, etc... of the 3 servers is included in that tar if you want to investigate.

Note that I started with a legacy config, you'll notice it's been converted into a dynamic config (although that all looks fine to me), I turned on trace logging and here's what I see on the leader:

{noformat}
2014-07-23 17:20:14,789 [myid:1] - INFO  [QuorumPeer[myid=1]/0:0:0:0:0:0:0:0:35549:Leader@1243] - Have quorum of supporters, sids: [ [1, 3] ]; starting up and setting last processed zxid: 0x600000000
2014-07-23 17:20:14,789 [myid:1] - DEBUG [QuorumPeer[myid=1]/0:0:0:0:0:0:0:0:35549:QuorumPeer@1330] - 1 setQuorumVerifier called with known or old config 4294967296. Current version: 4294967296
2014-07-23 17:20:14,809 [myid:1] - DEBUG [LearnerHandler-/127.0.0.1:50288:LearnerHandler@467] - Received NEWLEADER-ACK message from 2
2014-07-23 17:20:14,810 [myid:1] - INFO  [QuorumPeer[myid=1]/0:0:0:0:0:0:0:0:35549:CommitProcessor@253] - Configuring CommitProcessor with 4 worker threads.
2014-07-23 17:20:14,826 [myid:1] - DEBUG [LearnerHandler-/127.0.0.1:50288:LearnerHandler@488] - Sending UPTODATE message to 2
2014-07-23 17:20:14,826 [myid:1] - DEBUG [LearnerHandler-/127.0.0.1:50289:LearnerHandler@488] - Sending UPTODATE message to 3
2014-07-23 17:20:14,834 [myid:1] - TRACE [LearnerHandler-/127.0.0.1:50289:Leader@785] - Ack zxid: 0x600000000
2014-07-23 17:20:14,834 [myid:1] - TRACE [LearnerHandler-/127.0.0.1:50289:Leader@791] - outstanding proposals all
2014-07-23 17:20:14,837 [myid:1] - TRACE [LearnerHandler-/127.0.0.1:50288:Leader@785] - Ack zxid: 0x600000000
2014-07-23 17:20:14,837 [myid:1] - TRACE [LearnerHandler-/127.0.0.1:50288:Leader@791] - outstanding proposals all
{noformat}
, Here's the jstack from when it is stuck. f1 is the follower (2181) and l3 is the leader (2183), I can see that the leader is leading and the follower is following the leader (per the jstack)., Ah! I see what happened. The dynamic code has dropped

bq. clientPort=218#

from the original config. That's the issue. When I add that back to the respective zoo.cfg files now the service is again available.
, Here's the original zoo.cfg prior to ever running the server(s) (this is as generated by zkconf):

{noformat}
tickTime=2000
initLimit=10
syncLimit=5
dataDir=./localhost:2182/data
clientPort=2182



server.1=localhost:3181:4181
server.2=localhost:3182:4182
server.3=localhost:3183:4183


{noformat}
, Hi Patrick,

Client port/adress are now part of the dynamic information that can be changed by reconfig. Therefore it is removed from the static file (leaving it there could result in having one port in the static file and another in the dynamic file). 

The dynamic config info is replicated, and it is identical (ignoring delays) in all servers from the beginning. So all of the servers must among other things know the client ports of other servers. (Otherwise, suppose the leader would only know its own port and push out a config - the followers would have to edit it and merge with their port info, etc., which is probably not safe to do). 

From the config file you have in the last message, it would not be possible for the server to know the ports of other servers - only its own. So with 3.5.0 you have to include the ports when you list the servers. 

tickTime=2000
initLimit=10
syncLimit=5
dataDir=./localhost:2182/data

server.1=localhost:3181:4181;2182
server.2=localhost:3182:4182;2183
server.3=localhost:3183:4183;2184

You could include the clientPort line - it doesn't hurt but it would be redundant and in any case, the server removes it., See examples here:
https://docs.google.com/document/d/1AF8pIfQbN5cKxe0c4cQ4_DW6ZjBJqSkyANcTGUwkzjc/edit, Attaching a patch that includes a new test for this scenario., I removed the old test checking config file backward compatibility - the new one has better coverage., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12657568/ZOOKEEPER-1987.patch
  against trunk revision 1612906.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 6 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2224//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2224//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2224//console

This message is automatically generated., [~shralex] Please include Apache License for the DynamicConfigBackwardCompatibilityTest.java., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12657571/ZOOKEEPER-1987-ver1.patch
  against trunk revision 1612906.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 9 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    -1 release audit.  The applied patch generated 1 release audit warnings (more than the trunk's current 0 warnings).

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2225//testReport/
Release audit warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2225//artifact/trunk/patchprocess/patchReleaseAuditProblems.txt
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2225//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2225//console

This message is automatically generated., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12657578/ZOOKEEPER-1987-ver2.patch
  against trunk revision 1612906.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 9 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2226//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2226//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2226//console

This message is automatically generated., [~shralex] Thanks for the patch. It looks good to me. Just one suggestion,

When I'm executing the tests in _Windows environment_. I have seen the following code path is updating the "zoo.cfg" with 'dynamicConfigFile file path'. Here its not converting the windows path to UNIX to avoid problems with "\" and due to this test case is failing. I've done conversion and after that its passing consistently. I'm thinking to add this conversion logic too, what do you say?

{code}
QPC#writeDynamicConfig()
out.write("dynamicConfigFile=".concat(actualDynamicConfigFilename).concat("\n"));
{code}

-Rakesh, Hi Rakesh,

I see. So you're adding something like this to QPC#writeDynamicConfig()? 
            if (osname.toLowerCase().contains("windows")) {
                actualDynamicConfigFilename = actualDynamicConfigFilename.replace('\\', '/');
            }

I don't have a windows machine available to test this, but please feel free to just update the patch.

Thanks,
Alex, [~shralex] I've done the changes and updated a new patch. Please have a look., Thanks, Rakesh. It looks good to me. [~bfreuden], can you please take a look as well ? (mainly the change to QuorumPeerConfig)., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12657613/ZOOKEEPER-1987-ver3.patch
  against trunk revision 1612906.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 9 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2228//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2228//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2228//console

This message is automatically generated., Hi Alex

bq. Client port/adress are now part of the dynamic information that can be changed by reconfig.

That's fine. However I see a few issues we'll need to resolve:

1) backward compatibility. We support n to n+1 backward compatibility (upgrading 3.4 to 3.5). This currently breaks that compatibility. What you are saying in your comment is fine, however the conversion from old, non-dynamic, (but valid) config to new, dynamic config is not working properly. There's even an existing jira for this same issue that a user faced - ZOOKEEPER-1950.

2) The server is not properly validating the configuration. 

bq. with 3.5.0 you have to include the ports when you list the servers

if that's the case (missing required parameter) the server needs to log an error and refuse to come up

3) The server needs to output XX.bak# files when modifying the configuration files. Currently they are overwritten, in order to support this in a production environment we need .bak files to be created on each change, so that we have a history to look at if things go wrong, or if we need to revert if something goes wrong.

4) afaict there is no documentation. existing documentation (zk admin guide, examples, etc...) are all based on the "pre-reconfig" requirements. If this were an optional feature it would be less important (people could just ignore it). However reconfig is effecting every single user due to the change in configuration requirements. The config file format has changed, this is a requirement to run the server.

It looks to me like 1 and 4 need to be addressed asap, otw folks won't really be able to try out a release. They will run into the same issue I did, the same issue that was reported in ZOOKEEPER-1950.

Perhaps we can create some sub-tasks on this jira and work through the issues individually?
, Alex pointed me at ZOOKEEPER-1660 which contains the doc changes. Let's try to get that into 3.5.0. Reviews welcome!, Re item 1, perhaps we need to not automatically convert the config, and only support reconfig if the user manually converts the config over. Otw stay with the existing configuration until the user does the upgrade (which is detailed in ZOOKEEPER-1660)
, Small readability (possibly correctness) nit:

{noformat}
+        for (int i = 0; i < SERVER_COUNT; i++) {
+            mt[i] = new MainThread(i, clientPorts[i], currentQuorumCfgSection, false);
+            // check that a dynamic configuration file wasn't created
+            Assert.assertFalse(mt[i].dynamicConfigFile.exists());
+            mt[i].start();
+            zk[i] = new ZooKeeper("127.0.0.1:" + clientPorts[i],
+                    ClientBase.CONNECTION_TIMEOUT, this);
+        }
+        // Check that the servers are up, have the right config and can process operations
+        // Check that the static config was split to static and dynamic files correctly
+        for (int i = 0; i < SERVER_COUNT; i++) {
+            Assert.assertTrue("waiting for server 0 being up", ClientBase
+                    .waitForServerUp("127.0.0.1:" + clientPorts[0],
+                            CONNECTION_TIMEOUT));
+            Assert.assertTrue(mt[i].dynamicConfigFile.exists());
+            ReconfigTest.testServerHasConfig(zk[i], allServers, null);
{noformat}

I think it makes more sense to start the ZooKeeper clients in the 2nd loop, after you've asserted that the server is up?

Also, server 0 is hard-coded in the assert message (should be %d, i).

Another small readability nit:

{noformat}
+            Properties cfg = new Properties();
+            FileInputStream in = new FileInputStream(mt[0].confFile);
+            try {
+                cfg.load(in);
+            } finally {
+                in.close();
+            }
{noformat}

is used twice. Mind having a small helper method to get the cfg:

{noformat}
           Properties cfg = getProperties(mt[0].confFile);
{noformat}

Same thing with regards starting clients after the servers are up (and same with hard coded server number in the assert error message):

{noformat}
+        for (int i = 0; i < SERVER_COUNT; i++) {
+            mt[i].start();
+            zk[i] = new ZooKeeper("127.0.0.1:" + clientPorts[i],
+                    ClientBase.CONNECTION_TIMEOUT, this);
+        }
+        for (int i = 0; i < SERVER_COUNT; i++) {
+            Assert.assertTrue("waiting for server 0 being up", ClientBase
+                    .waitForServerUp("127.0.0.1:" + clientPorts[0],
+                            CONNECTION_TIMEOUT));
+            ReconfigTest.testServerHasConfig(zk[i], allServers, null);
+        }
{noformat}
, Can we move the "new test patch" to a subtask and use this jira for high level discussion (umbrella)? Thanks., to sum up some offline discussion with [~phunt]:

comments 1 and 2 - its possible to disable reconfig when the user doesn't upgrade the config file or alternatively to avoid changing the config file and return an error message without bringing up the server. I'd prefer the latter because of the additional code that will be needed to patch the dynamic config using to clientPort, disable reconfig, and creating a state where different servers have different configs with the same config version. I'd rather clearly state somewhere that users should add the ports to config file like I did in the doc. Having said that, I understand that users may not be reading the docs, so its up to you. We should warn the user that the reconfig is disabled only on the server where config file wasn't upgraded, so if he upgrades part of the config files but not all of them, things may go wrong.

comment 3 - since we can't write bak files atomically with changing the config file, I suggest to number them like bak3, bak4, etc, I think this is what you meant too. Writing it should probably be done in QuorumPeerConfig right before the dynamic config file is updated. 

comment 4 - please see ZOOKEEPER-1660, which also talks about upgrading from 3.4.6

Thanks,
Alex

, hey [~shralex]. Thanks for sharing. Preserving backward compatibility definitely makes the project harder to maintain. However, it encourages people to try 3.5.x without being stopped at the start. So it's good to support that :)

Moreover, I am wondering what the version in dynamic file is? Is it helping to locate the reconfig command more quickly? Or just a notion of version..

I thought about the dynamic file again carefully and had a second thought on this:
https://medium.com/@hdeng/zookeeper-dynamic-config-file-b7557a2fb42f

Basically, I am suggesting:
1. separate the version (zxid) to another files.
2. Append a sequential number to the filename in backup.
3. backup should be an optional argument (e.g. a directory maybe?). This would be nice to separate production and testing environment.

Please take a moment to review the ideas and share your feedback here., Configurations are ordered using their version numbers. This is how we can compare two configs and determine which one is older. Initially when you start up a cluster or a new server is joining its file doesn't have to include a version. In fact the user should NEVER specify a version. When a leader comes up, if the config wasn't set yet it sets it to its new zxid, and all config files are updated. If a new config is proposed, its version is the reconfig op zxid. 

Storing the version in a separate file creates a problem of keeping this file in sync with the dynamic config file. How would one update them atomically? I like your idea of making the version part of the filename. This means however that we'd need to update the static config file every time too, as it has a link to the dynamic file. But the good thing is that we may not need the bak files - we can just leave the old dynamic config files. 

I'm not sure whether this should be done for 3.5.0 or perhaps later.



, bq.  I like your idea of making the version part of the filename. This means however that we'd need to update the static config file every time too, as it has a link to the dynamic file.

The static config file could specify just the prefix, and not the full file name (iow: exclude the version suffix from the static file), I like the idea of using BAK files to track changes over time, it sounds good for debugging. As for the file updates, it is doable to update files atomically. It is a bit of work, but doable. 

bq. The static config file could specify just the prefix, and not the full file name

and in this case we get the latest dynamic file?
 , bq. and in this case we get the latest dynamic file?

That was my thought. And as a result we get the .bak for free., [~shralex]
My first thought is that it's a little ambiguous to put version under the server list. It's best to give reusable config file. A version and other info could be separated.

> Storing the version in a separate file creates a problem of keeping this file in sync with the dynamic config file.

It's doable. A server can hold acking back until files are finished. And it takes the final written file as a flag. Anyway, it's a bit of work but doable., The patch has been moved to ZOOKEEPER-1988. This is now a supertask (umbrella) for the issue.]