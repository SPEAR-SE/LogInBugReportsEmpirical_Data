[Attached patch applies to trunk and branch-3.4, -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12663176/ZOOKEEPER-1936.patch
  against trunk revision 1619166.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    -1 patch.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2292//console

This message is automatically generated., lgtm, +1. cc: [~shralex], [~phunt], We encountered this issue during testing, though intermittently.

Can the fix be committed ?
[~shralex] [~phunt], -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12663176/ZOOKEEPER-1936.patch
  against trunk revision 1720227.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    -1 patch.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3005//console

This message is automatically generated., [~fpj]:
Can you take a look ?

Thanks, Alternate patch for consideration.

Only throw exception if dataDir doesn't exist and mkdirs() call fails., Thanks [~tedyu@apache.org] - looking. Maybe we can get this in for 3.4.8 as well. , cc: [~cnauroth], [~rakeshr], -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12782377/ZOOKEEPER-1936.v2.patch
  against trunk revision 1720227.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    -1 patch.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3008//console

This message is automatically generated., Thanks [~yuzhihong@gmail.com] for the fix. +1 for the additional {{#exists()}} check.

I've few comments:
# Could you consider {{snapDir}} creation too.
{code}
            if (!this.snapDir.mkdirs()) {
                throw new DatadirException("Unable to create snap directory "
                        + this.snapDir);
            }
{code}
# Can we reduce the nested calls. How about using AND operator like,
{code}
if (!this.dataDir.mkdirs() && !this.dataDir.exists())
{code}, what happens if the call to mkdir legitimaly fails? It looks like we would assume that the directory exists and would move on. I think we need to differentiate the dir existing from other issues when creating it. Does it sound reasonable?, After logging onto the node where the error happened, we found that dataDir didn't exist. 
So my patch doesn't suffice. 

Manual start on that node didn't reproduce the error though.

Comment is welcome., I'm in favor of the approach in patch v2.  This would be a deterministic fix.  Adding a delay like the first patch might still not work if we got unlucky in the way the OS scheduled the threads.  What do others think?

[~tedyu], could you please do the following?

# Make the same fix for {{snapDir}}, which is right after the code you already changed in {{FileTxnSnapLog}}.  Otherwise, we might get past the {{dataDir}} creation only to fail again on {{snapDir}}.
# Post 2 patch files: one that applied to trunk and one that applies to branch-3.4.
# Generate the patch files with {{git diff --no-prefix}} for compatibility with our pre-commit automation.

Thank you!, Patch v3 addresses comments from Chris and Rakesh.

The same patch can be applied smoothly on branch-3.4

Let me know if separate patch for branch-3.4 should be attached., but [~ted_yu] said that even with his patch {{dataDir}} wasn't created, and if what you suggest in step 1 fixed it, then the directory would be there, no? I'm actually wondering if there is something else causing trouble., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12782581/ZOOKEEPER-1936.v3.patch
  against trunk revision 1720227.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    -1 patch.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3009//console

This message is automatically generated., Yeah, my comments got crossed up, because I hadn't refreshed the page to see the latest.

Unfortunately, [{{File#mkdirs}}|http://docs.oracle.com/javase/7/docs/api/java/io/File.html#mkdirs()] only gives us a boolean response with no further information about root cause.  [~tedyu], do you think you can try as a troubleshooting step switching it to call [{{Files#createDirectories}}|http://docs.oracle.com/javase/7/docs/api/java/nio/file/Files.html#createDirectories(java.nio.file.Path,%20java.nio.file.attribute.FileAttribute...)] ?  That might give us more detailed information about the error.

We can't use the JDK 1.7 file APIs in the 3.4 maintenance line, so this would just be a temporary troubleshooting step.  We can use those APIs in trunk/branch-3.5 though., [~tedyu@apache.org]: mind generating the patch with something like:

{code}
git diff --no-prefix HEAD~1.. > ZOOKEEPER-1936.patch
{code}

The latest one you uploaded didn't apply cleanly. Patch lgtm, +1.

[~fpj], [~cnauroth]: mind giving it one last look?, Previous patch was generated for branch-3.4

Attached patch for trunk., For better understanding about the target branch, probably can include branch details while naming the patch, something like {{ZOOKEEPER-1936-br-3-4.patch}} and for trunk can use like {{ZOOKEEPER-1936.patch}}, -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12783285/ZOOKEEPER-1936.v3.patch
  against trunk revision 1720227.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3010//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3010//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3010//console

This message is automatically generated., https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3010//testReport/org.apache.zookeeper.test/AsyncHammerTest/testHammer/

doesn't seem to be related to the patch., Any thing I need to do here ? [~rgs], [~yuzhihong@gmail.com], my understanding is that you only can repro this in standalone mode, not when deploying a full ensemble.  Is that correct?  Did you get to a point where you had a consistent repro and were able to verify that this patch helped fix it?

The logic change looks correct to me, but I'm trying to figure out if there is really something more going on, as suggested in earlier comments.  Thanks!, Haven't got a chance to reproduce the bug.

After some QE fix, hbase un-secure deployment works reliably., It's a tough call then.  I don't see a way to write a deterministic JUnit test to prove the fix.  I'm reluctant to accept a code change without a test or a manual verification, at least on a stable maintenance line.

Here is my take on it.  Even without a consistent repro, I see the theoretical problem in the code.  The logic change in the patch looks correct to me, even if there might have been something more happening when Ted reported it.  Let's put a fix into trunk and branch-3.5, but not branch-3.4.  In trunk and branch-3.5, we also can make the switch to [{{Files#createDirectories}}|http://docs.oracle.com/javase/7/docs/api/java/nio/file/Files.html#createDirectories(java.nio.file.Path,%20java.nio.file.attribute.FileAttribute...)] that I mentioned earlier, because those branches are compiling to JDK 7.  That way, if we see another repro, we'll get additional debugging information to help with any subsequent patches.

Would some other committers like to comment on that plan?  Thanks!, Patch v4 addresses Chris' comment above, -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12785223/ZOOKEEPER-1936.v4.patch
  against trunk revision 1726354.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    -1 patch.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3021//console

This message is automatically generated., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12785224/ZOOKEEPER-1936.v4.patch
  against trunk revision 1726354.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3022//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3022//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3022//console

This message is automatically generated., There was a test failure in {{WatcherTest#testWatcherAutoResetWithLocal}}, but I can't reproduce it., Are there any known scenarios that will trigger this race? We've seen it intermittently in an EC2 environment, but have yet to figure out why it happens there and not other environments. 

Also, any updates on the status of this issue?, -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12785224/ZOOKEEPER-1936.v4.patch
  against trunk revision 1754188.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3298//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3298//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3298//console

This message is automatically generated., Hello [~mumrah].  At this point, I don't believe any of us have a repro, so bringing in this patch was not prioritized.  I'm going to update fix version to 3.5.3 to indicate that as the next potential release to contain the patch.

I'm curious if you are running the 3.5 release line of ZooKeeper, and if so, do you have the ability to apply the latest proposed patch?  If we can get confirmation that the patch fixes the problem you're seeing in your environment, then that would help build confidence in the patch., [~cnauroth] Is it going to be viciously hard to patch this against the 3.4 release? I took a stab at it and the codebases are pretty different so i didn't get too far and figured I'd ask you.

I looking into testing on the latest branch, Hello [~nicholas.dipiazza].  The v3 patch attachment is similar logic that is compatible with the 3.4 release line.  If you can test your 3.4-based environment with that patch, then that would be interesting for us.  Thanks!, v1 and v2 patch with no changes. v3 doesn't:

{code}
branch-3.4
{code}

{code}
patch -p0 < ZOOKEEPER-1936.v3.patch
patching file src/java/main/org/apache/zookeeper/server/persistence/FileTxnSnapLog.java
Hunk #1 FAILED at 101.
Hunk #2 FAILED at 117.
2 out of 2 hunks FAILED -- saving rejects to file src/java/main/org/apache/zookeeper/server/persistence/FileTxnSnapLog.java.rej
{code}

{code}
cat src/java/main/org/apache/zookeeper/server/persistence/FileTxnSnapLog.java.rej
--- src/java/main/org/apache/zookeeper/server/persistence/FileTxnSnapLog.java
+++ src/java/main/org/apache/zookeeper/server/persistence/FileTxnSnapLog.java
@@ -101,7 +101,7 @@ public FileTxnSnapLog(File dataDir, File snapDir) throws IOException {
                         + " is false). Please create this directory manually.");
             }
 
-            if (!this.dataDir.mkdirs()) {
+            if (!this.dataDir.mkdirs() && !this.dataDir.exists()) {
                 throw new DatadirException("Unable to create data directory "
                         + this.dataDir);
             }
@@ -117,7 +117,7 @@ public FileTxnSnapLog(File dataDir, File snapDir) throws IOException {
                         + " is false). Please create this directory manually.");
             }
 
-            if (!this.snapDir.mkdirs()) {
+            if (!this.snapDir.mkdirs() && !this.snapDir.exists()) {
                 throw new DatadirException("Unable to create snap directory "
                         + this.snapDir);
             }
{code}

My attempt at patching 3.4.9:

https://github.com/apache/zookeeper/pull/75

**zookeeper-1936-port-3.4.patch**
{code}
diff --git a/src/java/main/org/apache/zookeeper/server/persistence/FileTxnLog.java b/src/java/main/org/apache/zookeeper/server/persistence/FileTxnLog.java
index b1682c3..3f26b0a 100644
--- a/src/java/main/org/apache/zookeeper/server/persistence/FileTxnLog.java
+++ b/src/java/main/org/apache/zookeeper/server/persistence/FileTxnLog.java
@@ -355,7 +355,20 @@
      * logs
      */
     public TxnIterator read(long zxid) throws IOException {
-        return new FileTxnIterator(logDir, zxid);
+        return read(zxid, true);
+    }
+
+    /**
+     * start reading all the transactions from the given zxid.
+     *
+     * @param zxid the zxid to start reading transactions from
+     * @param fastForward true if the iterator should be fast forwarded to point
+     *        to the txn of a given zxid, else the iterator will point to the
+     *        starting txn of a txnlog that may contain txn of a given zxid
+     * @return returns an iterator to iterate through the transaction logs
+     */
+    public TxnIterator read(long zxid, boolean fastForward) throws IOException {
+        return new FileTxnIterator(logDir, zxid, fastForward);
     }
 
     /**
@@ -375,10 +388,10 @@
             }
             long pos = input.getPosition();
             // now, truncate at the current position
-            RandomAccessFile raf = new RandomAccessFile(itr.logFile, "rw");
+            RandomAccessFile raf=new RandomAccessFile(itr.logFile,"rw");
             raf.setLength(pos);
             raf.close();
-            while (itr.goToNextLog()) {
+            while(itr.goToNextLog()) {
                 if (!itr.logFile.delete()) {
                     LOG.warn("Unable to truncate {}", itr.logFile);
                 }
@@ -523,12 +536,34 @@
          * create an iterator over a transaction database directory
          * @param logDir the transaction database directory
          * @param zxid the zxid to start reading from
+         * @param fastForward   true if the iterator should be fast forwarded to
+         *        point to the txn of a given zxid, else the iterator will
+         *        point to the starting txn of a txnlog that may contain txn of
+         *        a given zxid
+         * @throws IOException
+         */
+        public FileTxnIterator(File logDir, long zxid, boolean fastForward)
+                throws IOException {
+            this.logDir = logDir;
+            this.zxid = zxid;
+            init();
+
+            if (fastForward && hdr != null) {
+                while (hdr.getZxid() < zxid) {
+                    if (!next())
+                        break;
+                }
+            }
+        }
+        
+        /**
+         * create an iterator over a transaction database directory
+         * @param logDir the transaction database directory
+         * @param zxid the zxid to start reading from
          * @throws IOException
          */
         public FileTxnIterator(File logDir, long zxid) throws IOException {
-          this.logDir = logDir;
-          this.zxid = zxid;
-          init();
+            this(logDir, zxid, true);
         }
 
         /**
@@ -552,10 +587,17 @@
             goToNextLog();
             if (!next())
                 return;
-            while (hdr.getZxid() < zxid) {
-                if (!next())
-                    return;
+        }
+        
+        /**
+         * Return total storage size of txnlog that will return by this iterator.
+         */
+        public long getStorageSize() {
+            long sum = 0;
+            for (File f : storedFiles) {
+                sum += f.length();
             }
+            return sum;
         }
 
         /**
@@ -637,8 +679,6 @@
                 crc.update(bytes, 0, bytes.length);
                 if (crcValue != crc.getValue())
                     throw new IOException(CRC_ERROR);
-                if (bytes == null || bytes.length == 0)
-                    return false;
                 hdr = new TxnHeader();
                 record = SerializeUtils.deserializeTxn(bytes, hdr);
             } catch (EOFException e) {
diff --git a/src/java/main/org/apache/zookeeper/server/persistence/FileTxnSnapLog.java b/src/java/main/org/apache/zookeeper/server/persistence/FileTxnSnapLog.java
index 6f0df51..98d94b4 100644
--- a/src/java/main/org/apache/zookeeper/server/persistence/FileTxnSnapLog.java
+++ b/src/java/main/org/apache/zookeeper/server/persistence/FileTxnSnapLog.java
@@ -58,6 +58,10 @@
     
     private static final Logger LOG = LoggerFactory.getLogger(FileTxnSnapLog.class);
     
+    public static final String ZOOKEEPER_DATADIR_AUTOCREATE =
+            "zookeeper.datadir.autocreate";
+
+    public static final String ZOOKEEPER_DATADIR_AUTOCREATE_DEFAULT = "true";
     /**
      * This listener helps
      * the external apis calling
@@ -80,15 +84,38 @@
 
         this.dataDir = new File(dataDir, version + VERSION);
         this.snapDir = new File(snapDir, version + VERSION);
+        // by default create snap/log dirs, but otherwise complain instead
+        // See ZOOKEEPER-1161 for more details
+        boolean enableAutocreate = Boolean.valueOf(
+                System.getProperty(ZOOKEEPER_DATADIR_AUTOCREATE,
+                        ZOOKEEPER_DATADIR_AUTOCREATE_DEFAULT));
         if (!this.dataDir.exists()) {
-            if (!this.dataDir.mkdirs()) {
-                throw new IOException("Unable to create data directory "
+            if (!enableAutocreate) {
+                throw new DatadirException("Missing data directory "
+                        + this.dataDir
+                        + ", automatic data directory creation is disabled ("
+                        + ZOOKEEPER_DATADIR_AUTOCREATE
+                        + " is false). Please create this directory manually.");
+            }
+
+            if (!this.dataDir.mkdirs() && !this.dataDir.exists()) {
+                throw new DatadirException("Unable to create data directory "
                         + this.dataDir);
             }
         }
         if (!this.snapDir.exists()) {
-            if (!this.snapDir.mkdirs()) {
-                throw new IOException("Unable to create snap directory "
+            // by default create this directory, but otherwise complain instead
+            // See ZOOKEEPER-1161 for more details
+            if (!enableAutocreate) {
+                throw new DatadirException("Missing snap directory "
+                        + this.snapDir
+                        + ", automatic data directory creation is disabled ("
+                        + ZOOKEEPER_DATADIR_AUTOCREATE
+                        + " is false). Please create this directory manually.");
+            }
+
+            if (!this.snapDir.mkdirs() && !this.snapDir.exists()) {
+                throw new DatadirException("Unable to create snap directory "
                         + this.snapDir);
             }
         }
@@ -164,6 +191,33 @@
             }
         }
         return highestZxid;
+    }
+
+    /**
+     * Get TxnIterator for iterating through txnlog starting at a given zxid
+     *
+     * @param zxid starting zxid
+     * @return TxnIterator
+     * @throws IOException
+     */
+    public TxnIterator readTxnLog(long zxid) throws IOException {
+        return readTxnLog(zxid, true);
+    }
+
+    /**
+     * Get TxnIterator for iterating through txnlog starting at a given zxid
+     *
+     * @param zxid starting zxid
+     * @param fastForward true if the iterator should be fast forwarded to point
+     *        to the txn of a given zxid, else the iterator will point to the
+     *        starting txn of a txnlog that may contain txn of a given zxid
+     * @return TxnIterator
+     * @throws IOException
+     */
+    public TxnIterator readTxnLog(long zxid, boolean fastForward)
+            throws IOException {
+        FileTxnLog txnLog = new FileTxnLog(dataDir);
+        return txnLog.read(zxid, fastForward);
     }
     
     /**
@@ -338,4 +392,14 @@
         txnLog.close();
         snapLog.close();
     }
+
+    @SuppressWarnings("serial")
+    public static class DatadirException extends IOException {
+        public DatadirException(String msg) {
+            super(msg);
+        }
+        public DatadirException(String msg, Exception e) {
+            super(msg, e);
+        }
+    }
 }
{code}

*UPDATE:* Testing 3.4.9 with this patch looks ok for me. you might have squashed this issue., GitHub user nddipiazza opened a pull request:

    https://github.com/apache/zookeeper/pull/75

    https://issues.apache.org/jira/browse/ZOOKEEPER-1936

    https://issues.apache.org/jira/browse/ZOOKEEPER-1936
    
    port fix to 3.4

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/nddipiazza/zookeeper ZOOKEEPER-1936

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/zookeeper/pull/75.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #75
    
----
commit bdd8798895e21bf3158c63c1d00aa99fba5e9f34
Author: Nicholas DiPiazza <nicholas.dipiazza@lucidworks.com>
Date:   2016-07-29T05:32:03Z

    https://issues.apache.org/jira/browse/ZOOKEEPER-1936 
    
    port fix to 3.4

----
, This patch has been stalled, because there is no easy way to write a unit test for it, and no one has been able to produce a consistent repro in a live environment.

I have good news.  I was able to find a consistent repro with an environment that could reproduce the problem in approximately 80% of ZooKeeper server starts.  FWIW, the OS was SUSE11sp3, and it was running ZooKeeper 3.4.6.  I applied the v3 patch, deployed it in this environment, and we could no longer repro.

Based on successful manual testing, I am now +1 to commit patch v4 to trunk and branch-3.5, and commit patch v3 to branch-3.4.  I will wait until later in the week in case other committers who have been watching the issue would like to discuss further., [~cnauroth], please do commit.  +1.  Thanks., [~rgs] or [~fpj], could I please trouble one of you to do one last review pass to make sure we're in agreement before I commit?  Thank you., I was looking at this pull request:

https://github.com/apache/zookeeper/pull/75.patch

but it looks like it doesn't correspond to the v4 patch attached. What is it precisely that we are proposing to merge?, Is it better to catch {{FileAlreadyExistsException}} for the {{Files.createDirectories}} call to be safe, in the case the directory is created concurrently?

I'm actually wondering why we added that {{DatadirException}}. I'd much rather just keep it {{IOException}} instead... I understand this isn't being introduced in this patch, although maybe for 3.4 if we merge there. Actually, what are the fix versions for this issue?   
, Given that I'm not sure what exactly we are considering to merge at this point, I don't know who the assignee is. Once we clarify it, I can assign accordingly., [~fpj], thank you for looking.  I am proposing that we fix this for 3.5.3 and 3.4.10.  I am proposing separate patches for the 2 branches, so that we can use the NIO APIs with the richer error reporting in trunk/branch-3.5 and use the JDK 6 APIs in branch-3.4.

I now realize that the trunk/branch-3.5 patch wasn't ready.  Thanks for pointing out the problem.  [~yuzhihong@gmail.com], would you please update that to catch the exception from {{Files#createDirectories}} and allow the method to succeed if the directory already exists?  That will keep it similar to the branch-3.4 logic.  Would you please upload new patch files for both trunk/branch-3.5 and branch-3.4?  That will help eliminate the current confusion about which patch files to use.

Ted has contributed the most recent patches that I am proposing to commit after another revision, so I'll assign to him.

bq. I'm actually wondering why we added that DatadirException. I'd much rather just keep it IOException instead.

This traces back to ZOOKEEPER-1161, which introduced the ability to disable automatic directory creation.  Part of that includes special handling of {{DatadirException}} in {{QuorumPeerMain}} and {{ZooKeeperServerMain}} so that they can return unique exit codes when directory creation fails.  I think we need to keep this as is for now to preserve backward compatibility., Is there anything I can do to move this forward ?, I'd expect [~cnauroth] to +1 it. In the meanwhile, I've had another look, and there are a couple of things I don't understand:

- With the 3.4 patch, we have this:

{noformat}
if (!this.dataDir.exists()) {
            if (!this.dataDir.mkdirs() && !this.dataDir.exists()) {
{noformat} 

why do we need the first call to {{this.dataDir.exists()}} and the encapsulating if block? It sounds like we don't need the outer if block.

- In the 3.5 patch, I'm not sure why we need this if:

{noformat}
if (!this.snapDir.exists())
{noformat}

In the case {{Files.createDirectories}} fails to create the directory, then we will have an exception, so the two possible outcomes are: 1) directory is created just fine; 2) exception is thrown. Consequently, it doesn't look like we need that last if, but maybe I'm missing something., Github user Humbedooh closed the pull request at:

    https://github.com/apache/zookeeper/pull/75
, this issue is marked as fixversion = 3.5.4, the PR #75 has been closed.
I cannot find commits in 3.5 branch
which is the actual status ?

I am very interested in this fix, I think it was simply closed, I had a few comments there that were never addressed., It also looks like the diff was broken as the number of commits listed is large. I haven't looked closely but it seems that merges weren't done appropriately., [~fpj] [~yuzhihong@gmail.com] [~cnauroth] 

I can pick up the issue a propose my local patch.

This issue is quite annoying in JUnit tests cases of projects which use ZK and spawn ZK servers.

I would like to provide a patch for 3.5 branch and 3.6
]