[FWIW,           {noformat}  LOG.warn("Not attempting to re-login since the last re-login was " +
                    "attempted less than " + (MIN_TIME_BEFORE_RELOGIN/1000) + " seconds"+
                    " before.");{noformat}
seems to sabotage this retry anyway., Additionally, after that reLogin quietly returns (due to Not attempting), so if it fails once, the exception is swallowed, the retry doesn't happen and the loop ends, [~cnauroth] [~enis] [~mahadev] can you assign this to me?, [~sershe] done., I suspect logout would also fail on retry if it succeeded the first time, producing a different error, so here's a small update, [~enis] can you review? thanks, [~cnauroth] can you review rather? Enis is not a committer it appears., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12816737/ZOOKEEPER-2469.patch
  against trunk revision 1750739.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3263//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3263//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3263//console

This message is automatically generated., Nice catch [~sershe]! I am not aware of this code path, but [~arshadmohammad] has been working with credentials on ZK so I think it's nice to let him take a look at the patch too. :) I would like to make a few comments though. 

The "is" prefix is usually used to Java boolean methods. In the case a boolean parameter, {{immediateRetry}} seems more readable, imho.

{code}
        if (!hasSufficientTimeElapsed(isImmediateRetry)) {
            return;
        }
{code}

can be rewritten as:

{code}
        if (!immediateRetry && !hasSufficientTimeElapsed()) {
            return;
        }
{code}

That is, there's no need to propagate the {{immediateRetry}} boolean down {{hasSuficientTimeElapsed()}} if it is only needed at the {{reLogin}} level.

{quote}
// TODO: should we also exit the refresh thread?
{quote}

Well, see that there's an outer try-catch block that catches the LoginException and exit the thread. As far as I can see, this means that we would need to re-throw the last exception {{le}} at this exact same line.

I see you trying to preserve the first LoginException, but I am asking myself if it was not better just to spit out the {{LOG.error}} as below:

{code}
                       catch (LoginException le) {
                              LOG.error("Could not refresh TGT for principal: {}.", principal, le);
                                if (retry > 0) {
                                    // sleep for 10 seconds.
                                    try {
                                        Thread.sleep(10 * 1000);
                                    } catch (InterruptedException e) {
                                        LOG.error("Interrupted during login retry after LoginException:", le);
                                        throw le;
                                    }
                                } else {
                                    throw le; 
                                }
                                LOG.debug("Retrying login for principal:{}...", principal);
                                --retry;
                       }
{code}

It would be nice to provide some unit tests to exercise those scenarios. This probably would require some method extraction tough, so it is harder and more error prone, but maybe worth doing (idk).

Last but not least, as we are using Java 7, then we can replace {{Thread.sleep(10 * 1000);}} by {{TimeUnit.SECONDS.sleep(10);}} (more clearer, no need to code comment anymore).
, hasSufficient... also updates the latest time, so it still  needs to be called.
I am not really familiar with the code enough to refactor, just trying to fix the immediate issue that we see where error is swallowed and the retry is broken, so it's impossible to debug. Perhaps it can be done in a followup, but it doesn't look like this class has any test coverage and the method is quite a tangle. 
I can make the rest of the changes. Does ZK officially not support Java 6?, returning from the else rather than rethrowing; that is what the other side of the higher level "if" does. We can log more details in that catch, at least in theory., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12816877/ZOOKEEPER-2469.01.patch
  against trunk revision 1750739.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3267//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3267//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3267//console

This message is automatically generated., bq. Does ZK officially not support Java 6?
ZK supports Java 6 (at least that is what the doc said https://zookeeper.apache.org/doc/r3.5.1-alpha/zookeeperAdmin.html - similar for 3.4.x) - I did not personally tried to build ZK on Java 6 though.

Also good to add a unit test case to cover the bug that this patch fixes., Hi [~sershe], I was not so clear about my previous comments.

Totally agree with you: a refactoring should be part of another ticket. The code is *very* entangled indeed. :(

{quote}
Does ZK officially not support Java 6?
{quote}

java.util.concurrent.TimeUnit has been in JDK since Java 1.5

We are in the middle of cutting an alpha release (release 3.5.2-alpha candidate 1), among other things, so *it can take some time until a committer takes a closer look and apply your patch, ok?*

_Btw, it would be great if you could spare some time to test the 3.5 branch. Any help is welcome._ ;)

Finally, when I say you can "up" the immediateRetry what I was meaning was to replace this:

{code}
    private synchronized void reLogin(boolean immediateRetry)
            throws LoginException {
        (...)
        if (!hasSufficientTimeElapsed(immediateRetry)) {
            return;
        }
  (...)
    private boolean hasSufficientTimeElapsed(boolean immediateRetry) {
        long now = Time.currentElapsedTime();
        // Ignore the min-time if we are retrying a failed login.
        if (!immediateRetry && now - getLastLogin() < MIN_TIME_BEFORE_RELOGIN ) {
            LOG.warn("Not attempting to re-login since the last re-login was "
                    + "attempted less than {} seconds before.",
                    (MIN_TIME_BEFORE_RELOGIN / 1000));
            return false;
        }
        // register most recent relogin attempt
        setLastLogin(now);
        return true;
    }

{code}

With this

{code}
     private synchronized void reLogin(boolean immediateRetry)
            throws LoginException {
        (...)
        if (!immediateRetry && !hasSufficientTimeElapsed()) {
            return;
        }
  (...)
    private boolean hasSufficientTimeElapsed() {
        long now = Time.currentElapsedTime();
        // Ignore the min-time if we are retrying a failed login.
        if (now - getLastLogin() < MIN_TIME_BEFORE_RELOGIN ) {
            LOG.warn("Not attempting to re-login since the last re-login was "
                    + "attempted less than {} seconds before.",
                    (MIN_TIME_BEFORE_RELOGIN / 1000));
            return false;
        }
        // register most recent relogin attempt
        setLastLogin(now);
        return true;
    }
{code}

The main reason would be that {{immediateRetry}} doesn't need to be passed down to {{hasSufficientTimeElapsed}}.

But {{hasSufficientTimeElapsed}} can still be called, and it would only set the last login if the if condition inside the method was false (among other things, it requires that {{immediateRetry}} is false in your patch, so I guess it equates to my code change suggestion, right?). But I am okay with it as-is now, no problem. I have other questions with your patch, but I would need more context about this particular code piece to make an informed decision, so I will absent myself by now. :)

Cheers!, Thanks [~sershe] for reporting and working on this issue
Few comments on latest patch
# I think we should not exit the refresh thread, let it keep trying, there may be cases where relogin succeeds after few retries, for example relogin fails becuase of KDC is down so relogin will succeed when KDC is up. 
# Same as [~eribeiro] said, use {{immediateRetry}} in {{reLogin}} method. no need to pass the {{immediateRetry}} to {{hasSufficientTimeElapsed}} method, hasSufficientTimeElapsed method  also logs a message that would be logged misleadingly under the above approach. I'll actually just fold the method in, it's only called in one place..., Updated, -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12817212/ZOOKEEPER-2469.02.patch
  against trunk revision 1750739.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3271//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3271//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3271//console

This message is automatically generated., Thanks [~sershe] for update.
# I think it is better to leave the method {{hasSufficientTimeElapsed}} as it is. you can use bellow code sniped and will get the same result as you get after merging methods
{code}
if (!immediateRetry && !hasSufficientTimeElapsed()) {
            return;
        }
{code}
When {{immediateRetry}} is true {{hasSufficientTimeElapsed()}} will not get called and there will not be anything logged from {{hasSufficientTimeElapsed() }}
# Correct the log message, as thread is not exiting now
{noformat}
LOG.error("Could not refresh TGT for principal: {}. Exiting refresh thread.", principal, le);
{noformat}, When {{immediateRetry}} is true {{hasSufficientTimeElapsed()}} will not get called and there will not be anything logged from {{hasSufficientTimeElapsed() }}. When {{immediateRetry}} is false then then log is ok, The result will be different because it also sets the login time, which will not be done if we don't call it. 
It does two things:
1) When delaying, logs a message.
2) When not delaying, updates time.
So, it must be called in either case, and it must tell them apart (otherwise the message in (1) would be spurious).
I think it's good to roll this in cause you don't normally expect a hasBlah method to have side effects, hence the confusion. 
I wonder if it's such a big deal to just get rid of it since it's a private 3-line method called on one place.
, Updated the message , -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12817301/ZOOKEEPER-2469.03.patch
  against trunk revision 1750739.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3272//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3272//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3272//console

This message is automatically generated., Given the fact that {{lastLogin}} update is required in case {{immediateRetry}} is true, surely not a big deal :-) go ahead.., Latest patch LGTM, +1 (non-binding), ping for a binding +1/commit? ;), Thanks [~sershe] for the patch and [~arshad.mohammad], [~eribeiro] for the reviews. I understand that this part of the code badly needs a re-write, but I'm not sure I like this current patch as is. I do see the issue reported, though.

Here are a couple of comments:
# I know that {{immediateRetry}} has been mentioned a few times in this jira, but it isn't clear to me why we need it. Is it necessary for correctness or is it just convenience? If it is convenience, then I'd rather not have it because the whole {{retry}}/{{initialRetry}} logic isn't really contributing to the code being cleaner.
# I wanted to check that my understanding is correct. The latest patch seems to exit the while loop upon the second login exception and {{immediateRetry}} is false during the first execution iteration but not the second. Shouldn't we keep retrying but making sure that it is sleeping in each iteration rather than run in a tight loop?

Another point unrelated to your changes but in the same scope. Instead of throwing {{le}} upon an InterruptedException in that loop, we should restore the interrupt status as suggested here:

https://www.ibm.com/developerworks/library/j-jtp05236/

There are a couple of instances around that code, so if you don't want to do it in this patch, please I'd appreciate if you could create a new jira for it.

, # immediateRetry  is not required if relogin is tried at least after MIN_TIME_BEFORE_RELOGIN, but here we are trying to relogin immediately after the first relogin failure
# bq.Shouldn't we keep retrying but making sure that it is sleeping in each iteration rather than run in a tight loop?
This would help in maintaining the cleaner code. But we will end up trying re-login forever intentionally and this JIRA would be just a code cleanup task, not a bug actually.
are you suggesting to replace code from line 236 to 260 with bellow code.
{code}
while (true) {
	try {
		reLogin();
		break;
	} catch (LoginException le) {
		try {
			Thread.sleep(MIN_TIME_BEFORE_RELOGIN + 1);
		} catch (InterruptedException e) {
			LOG.error("Interrupted during login retry after LoginException:", le);
			break;
		}
	}
}
{code}




]