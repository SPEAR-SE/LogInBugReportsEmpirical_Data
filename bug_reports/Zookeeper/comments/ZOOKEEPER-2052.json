[Attached zookeeper server debug log, This issue looks very similar to https://issues.apache.org/jira/browse/ZOOKEEPER-1424 
where it was reported on ZooKeeper v3.4.2, Got abit curious, so went through the code in the PrepRequestProcessor class, particularly the multi logic path.  Here are some observations:

a)  There were no outstanding changes to the /metadata or /metadata/resources node prior the first multi.

b)  During the first multi with delete, it saves the pending changes in getPendingChanges() but I noticed that it is calling getRecordForPath(path) which saves a ChangeRecord with zxid = -1 
     (zks.outstandingChangesForPath.get(path) returns null and hence, it produces this ChangeRecord from the ZKDatabase if the node exists.) 

c)  The multi op with delete failed since there was an ephemeral node under /metadata/resources and the operation rolls back in rollbackPendingChanges(); it removes the new ChangeRecords added by the multi; however, the ChangeRecords with zxid = -1 are injected back to outstandingChangesForPath since getPendingChanges() saved them.

Can someone with knowledge in this code area comment on c)?   

Shouldn't getPendingChanges() only obtain actual "pending changes" strictly from outstandingChangeForPath instead?
, Attach patch with fix and  junit to reproduce the symptom.

Fix summary:

getPendingChanges() should only save ChangeRecord
strictly from zks.outstandingChanges since getRecordForPath() can 
return ChangeRecord with zxid = -1 which is from the ZKDatabase and 
not the actual outstanding change.  This would cause unwanted *new* 
ChangeRecords added to zks.outstandingChanges during 
rollbackPendingChanges() when the multi() fails., Appreciate if someone can review and comment on the patch.  Thanks!, -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12672951/ZOOKEEPER-2052.patch
  against trunk revision 1628224.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    -1 patch.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2369//console

This message is automatically generated., The patch was generated on v3.4.6. Will resubmit patch for trunk when I get a chance., Hi [~yipng].

This sounds a known issue. Can you explain your solution with an example? Thanks., Resubmit patch for trunk.  Patch includes junit testcase to reproduce the issue and the fix., Hi Hongchao:

As illustrated in the junit testcase, the first multi failure was the culprit to this issue.  When the first multi with delete executes, it stores the pending changes for the path but in this specific case, there were no outstanding changes for those paths.  The getPendingChanges() method mistakenly saved the records that was obtained by the ZKDatabase with zxid = -1 (these are not outstanding changes).  When multi delete fails(there were ephemeral nodes under /mymetadata/resources), it attempts to remove the added change records from the multi operation and restore the outstanding changes for the paths.  But there were none to begin with, so the rollback actually added new change records.  When the multi op rolls back, one would expect that there shouldn't be any *new* change records.

When client B's session expired, all its ephemeral nodes get removed, so the subsequent multi delete should succeed; however, due to this lingering change record in the zks.outstandingChanges, it prevents any deletion to /mymetadata/resources since the ChangeRecord still have the count for the ephemeral nodes.

Hence, the solution is to save pending changes only if there is an actual outstanding change for that path.  (zxid != -1)
, -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12673056/ZOOKEEPER-2052.patch
  against trunk revision 1628224.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    -1 release audit.  The applied patch generated 2 release audit warnings (more than the trunk's current 0 warnings).

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2370//testReport/
Release audit warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2370//artifact/trunk/patchprocess/patchReleaseAuditProblems.txt
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2370//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2370//console

This message is automatically generated., [~yipng]
Thanks for the explanation and hard work on patch.
I think your patch doesn't work for the following case:
{code}
multi:
  delete "/existed" => succeed
  delete "/non-existed" => failed
{code}

In such case, the entire operation set should be aborted. However, your patch will lead to non-aborted operations.

This case seems specific on "number of children". I wonder if a Children.count() could substitute the variable to fix this problem. I didn't have enough time to look at it now.

I wonder why you want to call a delete within multi(). This bug would be fixed later... However, in your case, I didn't why you need to call multi for the delete. multi() was introduced in ZOOKEEPER-965 to do multi-update. I think it isn't checked very well for other usages by far., Hongchao:

Thanks for taking a look at the patch.  The patch only deals with saving pending changes and it does not change any of precondition checkings for delete; hence, I am not sure 
why it didn't work the way you described.  Anyhow, I verified your scenario and it works as expected where the second  delete on a non-exist node will triggered the abort of the entire 
operation.  A KeeperException.NoNodeException was thrown at getPathForRecord() in this case and the /existed node was not deleted.   

2014-10-06 02:38:21,795 [myid:] - INFO  [ProcessThread(sid:0 cport:11221)::PrepRequestProcessor@798] - Got user-level KeeperException when processing sessionid:0x148e4d2ed5b0000 type:multi cxid:0x4 zxid:0x4 txntype:2 reqpath:n/a aborting remaining multi ops. Error Path:/non-existed Error:KeeperErrorCode = NoNode for /non-existed
org.apache.zookeeper.KeeperException$NoNodeException: KeeperErrorCode = NoNode
...

I did ran the patch with "ant clean test" before submitting it and the all tests passed in my environment.  Is there a particular test case you are referring to for the core tests that failed?  
I see 6 failed tests in core test report but its error details show that the "Address already in use" for 4 of the testcases and the other 2 are "waiting for server being up"  and 
"Forked Java VM exited abnormally. Please note the time in the report does not reflect the time until the VM exit." respectively.  It looks like socket bind issues 
preventing the tests to run in completion.

The testcase was a simplified version to reproduce the issue.   We use multi() with delete to remove a set of nodes in its entirety or none at all as advertised by the multi javadoc.
Partial deletions will result in inconsistency of the application state. , [~yipng] Good catch and thanks for unit test to understand it more.

I didn't fully understood the logic why change record is adding into the {{outstandingChangesForPath}} when {{outstandingChanges}} is empty. I think this is resulting into the failure situation. Could anyone knows this logic.

{code}
PrepRequestProcessor#rollbackPendingChanges(){
     //....
     boolean empty = zks.outstandingChanges.isEmpty(); 
     //....
     if (!empty && (c.zxid < firstZxid)) {
          continue;
     }

     zks.outstandingChangesForPath.put(c.path, c);
}
{code}, Added a testcase to confirm what Hongchao's scenario works.  Rerun with 
ant clean test, all tests passed in my environment , -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12673165/ZOOKEEPER-2052.patch
  against trunk revision 1628224.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    -1 release audit.  The applied patch generated 2 release audit warnings (more than the trunk's current 0 warnings).

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2372//testReport/
Release audit warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2372//artifact/trunk/patchprocess/patchReleaseAuditProblems.txt
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2372//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2372//console

This message is automatically generated., Thanks Rakesh, it took some time for us to reproduce this issue since it happens intermittently.  

I see there are a great deal of discussion and information exchange in https://issues.apache.org/jira/browse/ZOOKEEPER-965 ,
particularly there was a comment there regarding details on the rollbackPendingChanges() implementation.  It would certainly be 
very helpful if folks involved with that jira can comment further.

Nevertheless, there seems to be a bug in getPendingChanges() where it can save a ChangeRecord with zxid = -1 (obtained from getRecordForPath )
If I understand this correctly, this ChangeRecord is NOT an entry from the zks.outstandingChangesForPath map but came from ZKDatabase.   Since 
it is not an actual outstanding change for the path, it shouldn't be saved in getPendingChanges() as then it will introduce new ChangeRecords when the
multi() fails., Thanks for [~yipng] and [~rakeshr]'s discussion here. I dig into the code a little bit.

Let me brief up how the error is caused in code level:
1. when a multi delete was initiated, _pendingChanges_ add a copy of parent node ([github link|https://github.com/apache/zookeeper/blob/ac3371a133fffcb31e3f0c489a3564fe5ed2a851/src/java/main/org/apache/zookeeper/server/PrepRequestProcessor.java#L231]).
2. when delete failed and multi rolled back, it adds back _pendingChanges_ to _outstandingsForPath_ (should this be reamed _lastChangeForPath_)
3. when a session was closed, unfortunately, its parent's last change isn't modified ([github link|https://github.com/apache/zookeeper/blob/ac3371a133fffcb31e3f0c489a3564fe5ed2a851/src/java/main/org/apache/zookeeper/server/PrepRequestProcessor.java#L670]).
4. when another delete happened, unfortunately (again &_&), it checked parent's record which is put back by multi rollback ([github link|https://github.com/apache/zookeeper/blob/ac3371a133fffcb31e3f0c489a3564fe5ed2a851/src/java/main/org/apache/zookeeper/server/PrepRequestProcessor.java#L482]).

The fix is simple: do what delete do ([github link|https://github.com/apache/zookeeper/blob/ac3371a133fffcb31e3f0c489a3564fe5ed2a851/src/java/main/org/apache/zookeeper/server/PrepRequestProcessor.java#L491])

[~yipng], Do you wanna work on this or will I create a patch based on the above discussion?, So in the fix I mean also changing parent's record like what delete operation does., I have another question: what's diff between create and create2?, Hi [~thawan].

ZOOKEEPER-1624 adds parent record into pendingOutstandings which introduces a concern in the [following line|https://github.com/apache/zookeeper/blob/ac3371a133fffcb31e3f0c489a3564fe5ed2a851/src/java/main/org/apache/zookeeper/server/PrepRequestProcessor.java#L284]:
{code}
  Iterator<ChangeRecord> priorIter = pendingChangeRecords.values().iterator();
            while (priorIter.hasNext()) {
                ChangeRecord c = priorIter.next();
                 ...
                zks.outstandingChangesForPath.put(c.path, c);
            }
{code}

This might take parent records not in outstandingChanges (e.g. delete) into outstandingChangesForPath. Could you share any insight into this?

, I think the root cause is for something that didn't exist in _outstandingChangesForPath_ would be added back because of [this line|https://github.com/apache/zookeeper/blob/ac3371a133fffcb31e3f0c489a3564fe5ed2a851/src/java/main/org/apache/zookeeper/server/PrepRequestProcessor.java#L284].

In my humble understanding, the purpose of rollback is to restore what original _outstandingChanges_ and _outstandingChangesForPath_. So something that wasn't there should be removed instead of put zxid=-1., I also believe that in closeSession it's neccesary to addChangeRecord ( parentCr ). Even though this isn't the main problem and the effect is ephemeral -- outstandingChanges will be removed at the end., Hi [~marshall].

Please see my above two comments. Can you share any insight to fix this problem?, Hongchao Deng wrote:
>I think the root cause is for something that didn't exist in outstandingChangesForPath would be added back because of this line.
>In my humble understanding, the purpose of rollback is to restore what original outstandingChanges and outstandingChangesForPath. So something that wasn't there should be removed >instead of put zxid=-1.

Right, so if there was no entry in outstandingChangesForPath for the path to begin with, why save it during getPendingChanges()?  This is what the current patch is addressing, it checks to see if zxid != -1 before saving actual outstanding change for the path.  

, [~yipng]
I agree that your patch is a good start on finding the root cause.

Checking zxid != -1 is kinda obscure in code and sounds a temp patch. Certain paths doesn't exist in _outstandingChangesForPath_ and we shouldn't put it back in rollback. This means the change record doesn't need to be constructed., [~yipng]
And the test should also reflect that the root cause for _outstandingChangesForPath_ is fixed., Hongchao

I agree, perhaps getPendingChanges() should not call getRecordsForPath() and just check with outstandingChangesForPath directly.  I see difference places in the code where it has these hardcoded zxids with 0 and -1, perhaps they can get clean up in another jira to bring code clarity.  Let's continue to improve the patch.  =), [~rakeshr]
Good catch!
I think the code
{code}
 if (!empty && (c.zxid < firstZxid)) {
          continue;
 }
{code}
means that for anything that wasn't in outstanding shouldn't be put back into outSForPath. However, it failed when outstanding is empty, Rakesh R, Hongchao Deng.

Yes, I think you guys are right.  Since the list is empty after the revert in rollbackPendingChanges(), this means possibly the FinalRequestProcessor thread have processed ChangeRecord and have removed it from the outstandingChanges list; hence, the logic in rollbackPendingChanges() should not apply any of the prior saved changes back into outstandingChangesForPath map.

So in summary, it appears there are two bugs found so far:

1) getPendingChanges() saves ChangeRecord(s) for path that does not exist in outstandingChangesForPath ( zxid = -1 )
2) rollbackPendingChanges() puts back prior saved changes back to outstandingChangesForPath when the outstandingChange list is empty.

Working on another patch now and will resubmit it for review.
, [~yipng]
I am almost done with my patch..., [~yipng]
I am familiar with the outstanding stuff. Let me handle this in the low level code. Thanks :), Hongchao:
Sure, no problem., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12673516/test-jenkins.patch
  against trunk revision 1628224.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    -1 release audit.  The applied patch generated 2 release audit warnings (more than the trunk's current 0 warnings).

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2377//testReport/
Release audit warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2377//artifact/trunk/patchprocess/patchReleaseAuditProblems.txt
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2377//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2377//console

This message is automatically generated., Just took a brief look at the latest patch.  In rollingPendingChange(), the logic to compare with the firstZxid has been removed and now it applies the pending changes directly to outstandingChangesForPath.   Is it safe to do this?

Note that between the time the pending changes are saved and the time the multi abort, the outstanding changes may have been removed by the FinalRequestProcessor thread.


+            // add previously existed records back.
+            for (ChangeRecord c: pendingChangeRecords.values()) {
                 zks.outstandingChangesForPath.put(c.path, c);
             }, That's right.
I should add a comment there., Hongchao:

You meant you will place back the logic for the firstZxid comparision in rollingPendingChange() right?  Since it may not be correct to assume that the saved pending changes are still in the outstandingChanges list due to race condition I mentioned on my previous comment.  , Yes. I also added a note on the code., Created a RB: https://reviews.apache.org/r/26437/diff/#, -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12673530/ZOOKEEPER-2052-v2.patch
  against trunk revision 1628224.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 9 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    -1 release audit.  The applied patch generated 2 release audit warnings (more than the trunk's current 0 warnings).

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2378//testReport/
Release audit warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2378//artifact/trunk/patchprocess/patchReleaseAuditProblems.txt
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2378//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2378//console

This message is automatically generated., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12673651/ZOOKEEPER-2052-v3.patch
  against trunk revision 1630026.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 9 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    -1 release audit.  The applied patch generated 2 release audit warnings (more than the trunk's current 0 warnings).

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2380//testReport/
Release audit warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2380//artifact/trunk/patchprocess/patchReleaseAuditProblems.txt
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2380//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2380//console

This message is automatically generated., [~fpj] [~rakeshr] [~rgs]

This bug is reproducible by aborting multi for a delete.
Can you take a look at the patch: https://reviews.apache.org/r/26437/diff/# ?

The release audit might be caused by the legacy Apache header starting with "/**" (should be one star). I have updated them in latest patch., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12673687/ZOOKEEPER-2052-v3.patch
  against trunk revision 1630026.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 9 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    -1 release audit.  The applied patch generated 2 release audit warnings (more than the trunk's current 0 warnings).

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2381//testReport/
Release audit warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2381//artifact/trunk/patchprocess/patchReleaseAuditProblems.txt
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2381//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2381//console

This message is automatically generated., [~hdeng]: reviewed. , -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12673707/ZOOKEEPER-2052-v3-release.patch
  against trunk revision 1630026.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 9 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    -1 release audit.  The applied patch generated 2 release audit warnings (more than the trunk's current 0 warnings).

    -1 core tests.  The patch failed core unit tests.

    -1 contrib tests.  The patch failed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2382//testReport/
Release audit warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2382//artifact/trunk/patchprocess/patchReleaseAuditProblems.txt
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2382//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2382//console

This message is automatically generated., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12673710/ZOOKEEPER-2052-v4.patch
  against trunk revision 1630026.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 9 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    -1 release audit.  The applied patch generated 2 release audit warnings (more than the trunk's current 0 warnings).

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2383//testReport/
Release audit warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2383//artifact/trunk/patchprocess/patchReleaseAuditProblems.txt
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2383//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2383//console

This message is automatically generated., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12673758/ZOOKEEPER-2052-v4.patch
  against trunk revision 1630026.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 9 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    -1 release audit.  The applied patch generated 2 release audit warnings (more than the trunk's current 0 warnings).

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2384//testReport/
Release audit warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2384//artifact/trunk/patchprocess/patchReleaseAuditProblems.txt
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2384//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2384//console

This message is automatically generated., [~rakeshr] [~fpj] [~marshall] [~tdunning]

The failure seems irrelevant. Please review this patch: https://reviews.apache.org/r/26437/diff/#
Thanks!, I haven't been following this issue closely, give me some time to digest it., [~fpj]
Great!
Just a brief sum-up :)
The issue is caused by multi rollback that put records from zkDatabase into outStandingChangesForPath:

https://github.com/apache/zookeeper/blob/ac3371a133fffcb31e3f0c489a3564fe5ed2a851/src/java/main/org/apache/zookeeper/server/PrepRequestProcessor.java#L232

https://github.com/apache/zookeeper/blob/ac3371a133fffcb31e3f0c489a3564fe5ed2a851/src/java/main/org/apache/zookeeper/server/PrepRequestProcessor.java#L284, I'm just seeing this jira for the first time as well. It looks like a really fantastic find and definitely very concerning if the issue is indeed as you describe. I'm pretty swamped at work at present so it may take me a few days before I'll have a chance to dig into this but I'll be very happy to do so... Will update when I've had a chance to digest this issue and comment on it., Here is my initial reaction to the patch. The changes to rollback seem ok. I'm wondering though if we can't get around with getRecordForPath() and if we really need to declare getOutstandingChange(). One of the problems pointed out here is that getPendingChanges is adding a record for a path that doesn't exist and I was wondering why a nonode exception is not being thrown for such a znode, which would skip the addition of the -1 record to the hashmap. , Hi [~fpj]. Thanks for looking at it.

bq. One of the problems pointed out here is that getPendingChanges is adding a record for a path that doesn't exist and I was wondering why a nonode exception is not being thrown for such a znode, which would skip the addition of the -1 record to the hashmap.

I didn't get your question..
So the case described is:

* ClientA.create( "/a", ... PERSISTENT) => succeed
* ClientB.create( "/a/b", ... EPHEMERAL) => succeed
* ClientA.multi([ delete("/a") ]) => fail, abort. This left a OutStandingRecord{ path="/a", zxid=-1, childCount=1} which didn't get removed.
* ClientB disconnect.
* ClientA.delete("/a") => fail. Because it gets the left [OutStandingRecord|https://github.com/fengjingchao/zookeeper/blob/trunk/src/java/main/org/apache/zookeeper/server/PrepRequestProcessor.java#L482] and thinks [childCount > 0|https://github.com/fengjingchao/zookeeper/blob/trunk/src/java/main/org/apache/zookeeper/server/PrepRequestProcessor.java#L485], [~fpj]

bq. I was wondering why a nonode exception is not being thrown for such a znode, which would skip the addition of the -1 record to the hashmap.

I think I understand kinda... So the node does exist. It's just not in outstanding changes. Every operation will be removed from outstanding changes after FinalRequestProcessor., bq. I'm wondering though if we can't get around with getRecordForPath()

I think using getRecordForPath() would still work :) Let me know what you think., Sure, got it. Initially I didn't like that much that we are adding getOutstandingChange, which is a tweaked version of getRecordForPath, but after having another look, I think it is clean like this. It is fine with me to leave getOutstandingChange unless you can think of clean way of removing it.

Let me do some local testing and I'll +1 it. Also, have you checked if we need separate patches for branches 3.4, 3.5, and trunk? , This patch is tested on trunk. I was waiting for feedback from you or anyone else who have experience in multi() stuff.
As long as the patch makes sense, it would be easy for me to create relevant patches for 3.4, 3.5 :), I'm going to go look over the final version of this patch on RB, but I think you guys have absolutely nailed this problem. I would I could give some useful insight into why it was originally implemented this way but I think it was just an oversight on our part. The particular use case of deleting a multi with intermixed ephemeral nodes is one we would never have encountered or tested against and thus I probably just didn't think of that... Anyhow, great find., I reviewed the RB and the changes look solid to me. +1 from me., [~hdeng] Thanks for the patch. Test cases looks nice. I've added few comments in RB, pls see before preparing the final patch., I'm cancelling the patch until we fix the issues that [~rakeshr] has raised and we have patches for all branches. Otw, +1, lgtm., [~rakeshr]
Thanks for the comments. Addressed them and feel welcome to take a look at the new changes. https://reviews.apache.org/r/26437/diff/#, +1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12675045/ZOOKEEPER-2052-v5.patch
  against trunk revision 1631280.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 6 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2391//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2391//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2391//console

This message is automatically generated., +1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12675054/ZOOKEEPER-2052-v5.patch
  against trunk revision 1631280.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 6 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2392//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2392//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2392//console

This message is automatically generated., My local jenkins job showed the branch34 patch also passed., [~fpj][~rakeshr]
The two patches for trunk and branch-3.4 has been uploaded and tested.
Please take a time to review it., +1, the latest patch looks good to me., I think [~fpj] has already given +1. Please feel free to stop me if anything else:)

I'll commit this tomorrow sometime. Thanks everyone for the reviews!, Thank you [~hdeng] and [~yipng].

Committed to trunk : http://svn.apache.org/viewvc?view=revision&revision=1634776
Committed to br3.4 : http://svn.apache.org/viewvc?view=revision&revision=1634777
Committed to br3.5 : http://svn.apache.org/viewvc?view=revision&revision=1634778, FAILURE: Integrated in ZooKeeper-trunk #2484 (See [https://builds.apache.org/job/ZooKeeper-trunk/2484/])
ZOOKEEPER-2052 Unable to delete a node when the node has no children (Hongchao Deng and Yip Ng via rakeshr) (rakeshr: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1634776)
* /zookeeper/trunk/CHANGES.txt
* /zookeeper/trunk/src/java/main/org/apache/zookeeper/server/PrepRequestProcessor.java
* /zookeeper/trunk/src/java/test/org/apache/zookeeper/server/PrepRequestProcessorTest.java
* /zookeeper/trunk/src/java/test/org/apache/zookeeper/test/MultiTransactionTest.java
]