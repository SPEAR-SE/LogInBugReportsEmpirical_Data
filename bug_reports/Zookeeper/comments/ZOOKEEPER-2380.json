[It is very similar to ZOOKEEPER-2347 but it is different. , Good catch, [~arshad.mohammad]. Probably we could try moving the {{this.shutdown}} call outside synchronization block.

*Deadlock sequence is:*

Quorum Leader Thread:
1=> {{leader.lead()}}
2=> Say, leader losts quorum and call {{this.shutdown()}}. This shutdown call is made under {{synchronized (this)}} [Leader.java#L554|https://github.com/apache/zookeeper/blob/trunk/src/java/main/org/apache/zookeeper/server/quorum/Leader.java#L554]
3=> Shutdown will trigger {{firstProcessor.shutdown();}} and reaches {{SyncRequestProcessor#shutdown()}} call.
4=> Now, SyncRequestProcessor will add {{requestOfDeath}} and wait to {{this.join()}};

SyncThread:
1=> SyncRequestProcessor forwards the request to its next processor {{nextProcessor.processRequest(si);}}, which is AckRequestProcessor.
2=> AckRequestProcessor, forwards the request the leader {{leader.processAck}}
3=> Since {{leader.processAck}} is synchronized at method level and requires {{leader.this}} lock [Leader.java#L783|https://github.com/apache/zookeeper/blob/trunk/src/java/main/org/apache/zookeeper/server/quorum/Leader.java#L783]. Since {{leader.this}} is already acquired by [Leader.java#L554|https://github.com/apache/zookeeper/blob/trunk/src/java/main/org/apache/zookeeper/server/quorum/Leader.java#L554], thus results in deadlock.
, Moved shutdown() call out of synchronized block. 
Used string variable shutdownMessage instead of boolean as it can server two purpose, shut-down flag and shut-down message holder, -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12791608/ZOOKEEPER-2380-01.patch
  against trunk revision 1733679.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3087//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3087//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3087//console

This message is automatically generated., bq. -1 core tests. The patch failed core unit tests.
Failed test is not related to this patch. Verified locally it is passing, Thanks [~arshad.mohammad] for the patch. Instead of checking {{shutdownMessage != null}} inside loop everytime, how about sets {{shutdownMessage}} and break the while loop. After loop, if message exists then do the shutdown call. Also, could you check the possibility of unit testing this behavior., Thanks [~rakeshr], for your very valid comment.
Moved shutdown call out of the while loop,
For UT, it see no value add here. so submitting the path without UT, -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12791715/ZOOKEEPER-2380-02.patch
  against trunk revision 1733679.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3090//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3090//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3090//console

This message is automatically generated., I'm just adding a point to avoid confusions, this issue has no relation with the ZOOKEEPER-2347. The call sequence or the execution path is completely different for both these issues., Thank you [~arshad.mohammad] for the updates. Since this is a critical issue, its good to back with unit tests. I know it is not that simple, but could you check any chance to write unit tests by stubbing {{MockSyncRequestProcessor extends SyncRequestProcessor}} or welcome some other approach., Submitting patch with test case, -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12794739/ZOOKEEPER-2380-03.patch
  against trunk revision 1736090.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 5 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3114//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3114//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3114//console

This message is automatically generated., bq. -1 core tests. The patch failed core unit tests.
No test case failed, one test case is skipped which is not related to this patch, Thanks [~arshad.mohammad] for the updates. Overall patch looks good,  please take a look at the following comments.

# In RaceConditionTest.java, it uses tab space. Please change the indentation by using spaces instead of tabs.
# Please change {{null != quorumPeer}} checks to {{quorumPeer != null}}, we are using this fashion and would be good to follow same way.
# Please remove the following overridden method {{#runFromConfig()}} from class TestQPMain, its not required.
{code}
        @Override
        public void runFromConfig(QuorumPeerConfig config) throws IOException,
                AdminServerException {
            super.runFromConfig(config);
        }
{code}
Also, remove unused code.
{code}
/**
 * it is same as Container feature is disabled
 */
// setupContainerManager();
{code}
# Make the following methods to use private access specifier
{code}
static class MockTestQPMain
static class MockSyncRequestProcessor
static class MockProposalRequestProcessor
protected MainThread[] startQuorum()
{code}
# Change {{e.printStackTrace();}} to LOG.warn("") messaging
# {{"Leader must have gone into LOOKING state"}}, here it should be {{Leader failed to transition to LOOKING state}}, right?
# Good unit test. Could you please write the sequence of steps which results in deadlock in the unit test case, that would help to maintain it well and convey the idea quickly to others., # Fixed
# Fixed
# {{runFromConfig()}} in {{QuorumPeerTestBase.TestQPMain}} is required. it can not be removed
It is added so that other test cases can customise runFromConfig() behaviour as it is done in {{MockTestQPMain}}
# Fixed
# Fixed
# Fixed
# Jira number is mentioned in the test case, jira can provide the complete information and step, shall we duplicate the same information in the test case as well?, +1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12799919/ZOOKEEPER-2380-04.patch
  against trunk revision 1738012.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 5 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3141//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3141//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3141//console

This message is automatically generated., [~rakeshr], have you had a chance to review the latest patch revision from [~arshad.mohammad]?  I'd like to see if we can get this into a 3.5.2 release candidate.  I can volunteer to do a second review too, but I wanted to make sure your feedback had been addressed., Thanks [~cnauroth] for the reminder. 

Thanks [~arshad.mohammad] for the good work. Apart from the following minor comment, I'm +1 for the patch. I think this bug doesn't exists in branch3-4. Arshad, can you please confirm once.

{quote}
runFromConfig() in QuorumPeerTestBase.TestQPMain is required. it can not be removed
It is added so that other test cases can customise runFromConfig() behaviour as it is done in MockTestQPMain
{quote}
I've removed the overridden method {{#runFromConfig()}} from class TestQPMain and couldn't see any impact. If someone needs then they can override {{QuorumPeerMain#runFromConfig}} method at that time, do we really need this now?, # yes, This bug does not exist in branch-3.4. In branch-3.4 shutdown is not called from sychronised block.
# [~rakeshr] you are correct. runFromConfig() in {{QuorumPeerTestBase.TestQPMain}} is not requried at all. Same method is in super class of TestQPMain. So we can override it without adding it in {{QuorumPeerTestBase.TestQPMain}}. 
I removed it.
# Another correction I did, removed shutdown call from shutdownFollowers() as "stop ping" itself will lead to shutdown., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12806820/ZOOKEEPER-2380-05.patch
  against trunk revision 1745534.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 5 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3176//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3176//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3176//console

This message is automatically generated., bq. -1 core tests. The patch failed core unit tests.
There is no test case failure. One test case is skipped which is not because of this patch. For skip reason please refer ZOOKEEPER-2285, Thanks [~arshad.mohammad] for the updates.

Hi [~cnauroth], latest patch looks good to me, please do a second review. Thanks!, [~arshad.mohammad], the change in {{Leader}} looks right, but the new test is failing intermittently for me.  In approximately 1 out of every 10 attempts, the assertion on {{LOOKING_STATE}} fails.  Instead, it goes to {{FOLLOWING_STATE}} after a successful leader election.  My theory is that there is still a brief window in which the dropped pings haven't taken effect yet, so 2 of 3 peers still appear to be alive, and thus  new leader election is still possible.  I have attached the output from one of my failed test runs in case it's helpful for you., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12812046/ZOOKEEPER-2380-fail.out
  against trunk revision 1748630.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 55 new or modified tests.

    -1 patch.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3193//console

This message is automatically generated., Thanks [~cnauroth]
# The problem is that if assertion is not made timely leader moves to LOOKING state, this is fine. In this test we just need to ensure that Leader is not stuck in LEADING state even when there no majority, it gives up its leadership.It can be in LOOKING or FOLLOWING state and keep switching very frequently as ping problem is injected.
# Corrected the intermittent failure by validating that state is either LOOKING or FOLLOWING., +1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12812076/ZOOKEEPER-2380-06.patch
  against trunk revision 1748630.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 8 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3194//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3194//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3194//console

This message is automatically generated., The bug is in a code path for handling loss of quorum.  Unfortunately, if it enters FOLLOWING state, then it means the test run hasn't really covered that code path.  It would be great if this test could be made to cover the fixed code path predictably.  Maybe it would help if the stubbed code dropped more packet types than just the PING?, It enters into FOLLOWING state when fix is applied. If the code fix is not applied it will not enter into FOLLOWING state. Can you please apply only test code modification and run the test case to verify the efficacy of code and test code., Actually, I was wrong in my earlier comment.  It's acceptable for test coverage to enter either LOOKING or FOLLOWING state.  In both cases, since it has left LEADING state, by definition that means it lost its previous quorum, and therefore the code path is covered.  The change in revision 06 is sufficient.  Thank you.

I just have one more request.

{code}
        // shutdown 2 followers so that leader does not have majority and goes
        // in looking state
        shutdownFollowers(mt);
        assertTrue("Leader failed to transition to LOOKING or FOLLOWING state", ClientBase.waitForServerState(leader,
                15000, QuorumStats.Provider.LOOKING_STATE, QuorumStats.Provider.FOLLOWING_STATE));
{code}

Please update the comment to state that FOLLOWING is acceptable too, depending on the timing of the test., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12812315/ZOOKEEPER-2380-07.patch
  against trunk revision 1748630.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 8 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    -1 contrib tests.  The patch failed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3199//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3199//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3199//console

This message is automatically generated., bq. -1 core tests. The patch failed core unit tests.
The failure is not related to this patch. Verified locally it passes.
bq. -1 contrib tests. The patch failed contrib unit tests
Can't figure out which contrib test failed. But it should not be because of this patch as in the latest patch only a comment is changed and for previous patch all test case were passed., +1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12812315/ZOOKEEPER-2380-07.patch
  against trunk revision 1748630.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 8 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3236//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3236//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3236//console

This message is automatically generated., +1 for patch 07.  I'll make sure to commit this before the 3.5.2 release candidate., I have committed this to trunk and branch-3.5.  [~arshad.mohammad], thank you for the patch.  [~rakeshr], thank you for code reviewing., SUCCESS: Integrated in ZooKeeper-trunk #2972 (See [https://builds.apache.org/job/ZooKeeper-trunk/2972/])
ZOOKEEPER-2380: Deadlock between leader shutdown and forwarding ACK to the leader. (Arshad Mohammad via cnauroth) (cnauroth: [http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1750022])
* trunk/CHANGES.txt
* trunk/src/java/main/org/apache/zookeeper/server/quorum/Leader.java
* trunk/src/java/main/org/apache/zookeeper/server/quorum/QuorumPeer.java
* trunk/src/java/test/org/apache/zookeeper/server/quorum/QuorumPeerTestBase.java
* trunk/src/java/test/org/apache/zookeeper/server/quorum/RaceConditionTest.java
* trunk/src/java/test/org/apache/zookeeper/test/ClientBase.java
]