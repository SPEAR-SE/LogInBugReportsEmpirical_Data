[GitHub user enixon opened a pull request:

    https://github.com/apache/zookeeper/pull/476

    ZOOKEEPER-2988: NPE triggered if server receives a vote for a server …

    …id not in their voting view

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/enixon/zookeeper ZOOKEEPER-2988

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/zookeeper/pull/476.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #476
    
----
commit 1862a718168ee07287d0b9769a0f4ce20bd1bd32
Author: Brian Nixon <nixon@...>
Date:   2018-03-01T19:19:51Z

    ZOOKEEPER-2988: NPE triggered if server receives a vote for a server id not in their voting view

----
, GitHub user enixon opened a pull request:

    https://github.com/apache/zookeeper/pull/477

    ZOOKEEPER-2988: NPE triggered if server receives a vote for a server …

    …id not in their voting view

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/enixon/zookeeper ZOOKEEPER-2988-3.5

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/zookeeper/pull/477.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #477
    
----
commit a1364d8c4ec9fdf1c4210b6485a6a143c1e14f5f
Author: Brian Nixon <nixon@...>
Date:   2018-03-01T19:21:47Z

    ZOOKEEPER-2988: NPE triggered if server receives a vote for a server id not in their voting view

----
, GitHub user enixon opened a pull request:

    https://github.com/apache/zookeeper/pull/478

    ZOOKEEPER-2988: NPE triggered if server receives a vote for a server …

    …id not in their voting view

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/enixon/zookeeper ZOOKEEPER-2988-3.4

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/zookeeper/pull/478.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #478
    
----
commit 6fc857a1cfe97a46a4f453613b95f9682adcce96
Author: Brian Nixon <nixon@...>
Date:   2018-03-01T19:19:51Z

    ZOOKEEPER-2988: NPE triggered if server receives a vote for a server id not in their voting view

----
, Github user afine commented on a diff in the pull request:

    https://github.com/apache/zookeeper/pull/476#discussion_r171972029
  
    --- Diff: src/java/test/org/apache/zookeeper/server/quorum/QuorumPeerMainTest.java ---
    @@ -1012,4 +1012,113 @@ public void testFailedTxnAsPartOfQuorumLoss() throws Exception {
                 Assert.assertNull("server " + i + " should not have /zk" + leader, servers.zk[i].exists("/zk" + leader, false));
             }
         }
    +
    +    /**
    +     * Verify that a node without the leader in its view will not attempt to connect to the leader.
    +     */
    +    @Test
    +    public void testLeaderOutOfView() throws Exception {
    +        ClientBase.setupTestEnv();
    +
    +        Layout layout = new PatternLayout("%d{ISO8601} [,yid:%X{myid}] - %5p [%t:%C{1}@%L] - %m%n");
    +        ByteArrayOutputStream os = new ByteArrayOutputStream();
    +        WriterAppender appender = new WriterAppender(layout, os);
    +        appender.setThreshold(Level.DEBUG);
    +        Logger qlogger = Logger.getLogger("org.apache.zookeeper.server.quorum");
    +        qlogger.addAppender(appender);
    +
    +        try {
    +            final int CLIENT_PORT_QP1 = PortAssignment.unique();
    +            final int CLIENT_PORT_QP2 = PortAssignment.unique();
    +            final int CLIENT_PORT_QP3 = PortAssignment.unique();
    +
    +            String quorumCfgIncomplete = getUniquePortCfgForId(1) + "\n" + getUniquePortCfgForId(2);
    +            String quorumCfgComplete = quorumCfgIncomplete + "\n" + getUniquePortCfgForId(3);
    +
    +            // Node 1 is started without the leader (3) in its config view
    +            MainThread q1 = new MainThread(1, CLIENT_PORT_QP1, quorumCfgIncomplete);
    +            MainThread q2 = new MainThread(2, CLIENT_PORT_QP2, quorumCfgComplete);
    +            MainThread q3 = new MainThread(3, CLIENT_PORT_QP3, quorumCfgComplete);
    +
    +            // Node 1 must be started first, before quorum is formed, to trigger the attempted invalid connection to 3
    +            q1.start();
    +            QuorumPeer quorumPeer1 = waitForQuorumPeer(q1, CONNECTION_TIMEOUT);
    +            Assert.assertTrue(quorumPeer1.getPeerState() == QuorumPeer.ServerState.LOOKING);
    +
    +            // Node 3 started second to avoid 1 and 2 forming a quorum before 3 starts up
    +            q3.start();
    +            QuorumPeer quorumPeer3 = waitForQuorumPeer(q3, CONNECTION_TIMEOUT);
    +            Assert.assertTrue(quorumPeer3.getPeerState() == QuorumPeer.ServerState.LOOKING);
    +
    +            // Node 2 started last, kicks off leader election
    +            q2.start();
    +
    +            // Nodes 2 and 3 now form quorum and fully start. 1 attempts to vote for 3, fails, returns to LOOKING state
    +            Assert.assertTrue("waiting for server 2 to start",
    +                    ClientBase.waitForServerUp("127.0.0.1:" + CLIENT_PORT_QP2, CONNECTION_TIMEOUT));
    +            Assert.assertTrue("waiting for server 3 to start",
    +                    ClientBase.waitForServerUp("127.0.0.1:" + CLIENT_PORT_QP3, CONNECTION_TIMEOUT));
    +
    +            Assert.assertTrue(q1.getQuorumPeer().getPeerState() == QuorumPeer.ServerState.LOOKING);
    +            Assert.assertTrue(q2.getQuorumPeer().getPeerState() == QuorumPeer.ServerState.FOLLOWING);
    +            Assert.assertTrue(q3.getQuorumPeer().getPeerState() == QuorumPeer.ServerState.LEADING);
    +
    +            q1.shutdown();
    +            q2.shutdown();
    +            q3.shutdown();
    +
    +            Assert.assertTrue("waiting for server 1 down",
    +                    ClientBase.waitForServerDown("127.0.0.1:" + CLIENT_PORT_QP1,
    +                            ClientBase.CONNECTION_TIMEOUT));
    +            Assert.assertTrue("waiting for server 2 down",
    +                    ClientBase.waitForServerDown("127.0.0.1:" + CLIENT_PORT_QP2,
    +                            ClientBase.CONNECTION_TIMEOUT));
    +            Assert.assertTrue("waiting for server 3 down",
    +                    ClientBase.waitForServerDown("127.0.0.1:" + CLIENT_PORT_QP3,
    +                            ClientBase.CONNECTION_TIMEOUT));
    +
    +        } finally {
    +            qlogger.removeAppender(appender);
    +        }
    +
    +        // Verify that Node 1 never threw an exception
    +        LineNumberReader r = new LineNumberReader(new StringReader(os.toString()));
    +        String line;
    +        boolean found = false;
    +        Pattern p = Pattern.compile(".*java.lang.NullPointerException.*");
    +        while ((line = r.readLine()) != null) {
    +            found = p.matcher(line).matches();
    +            if (found) {
    +                break;
    +            }
    +        }
    +
    +        Assert.assertFalse("Node should not attempt connection to out of view leader", found);
    +    }
    +
    +    private String getUniquePortCfgForId(int id) {
    +        return String.format("server.%d=127.0.0.1:%d:%d", id, PortAssignment.unique(), PortAssignment.unique());
    +    }
    +
    +    private QuorumPeer waitForQuorumPeer(MainThread mainThread, int timeout) {
    +        long start = Time.currentElapsedTime();
    +        while (true) {
    +            QuorumPeer quorumPeer = mainThread.getQuorumPeer();
    +            if (quorumPeer != null) {
    +                return quorumPeer;
    +            }
    +
    +            if (Time.currentElapsedTime() > start + timeout) {
    +                LOG.error("Timed out while waiting for QuorumPeer");
    +                break;
    +            }
    +
    +            try {
    +                Thread.sleep(250);
    +            } catch (InterruptedException e) {
    +                // ignore
    +            }
    +        }
    +        throw new NullPointerException();
    --- End diff --
    
    Can we use a better exception?
, Github user afine commented on a diff in the pull request:

    https://github.com/apache/zookeeper/pull/476#discussion_r171972608
  
    --- Diff: src/java/test/org/apache/zookeeper/server/quorum/QuorumPeerMainTest.java ---
    @@ -1012,4 +1012,113 @@ public void testFailedTxnAsPartOfQuorumLoss() throws Exception {
                 Assert.assertNull("server " + i + " should not have /zk" + leader, servers.zk[i].exists("/zk" + leader, false));
             }
         }
    +
    +    /**
    +     * Verify that a node without the leader in its view will not attempt to connect to the leader.
    +     */
    +    @Test
    +    public void testLeaderOutOfView() throws Exception {
    +        ClientBase.setupTestEnv();
    +
    +        Layout layout = new PatternLayout("%d{ISO8601} [,yid:%X{myid}] - %5p [%t:%C{1}@%L] - %m%n");
    +        ByteArrayOutputStream os = new ByteArrayOutputStream();
    +        WriterAppender appender = new WriterAppender(layout, os);
    +        appender.setThreshold(Level.DEBUG);
    +        Logger qlogger = Logger.getLogger("org.apache.zookeeper.server.quorum");
    +        qlogger.addAppender(appender);
    +
    +        try {
    +            final int CLIENT_PORT_QP1 = PortAssignment.unique();
    +            final int CLIENT_PORT_QP2 = PortAssignment.unique();
    +            final int CLIENT_PORT_QP3 = PortAssignment.unique();
    +
    +            String quorumCfgIncomplete = getUniquePortCfgForId(1) + "\n" + getUniquePortCfgForId(2);
    +            String quorumCfgComplete = quorumCfgIncomplete + "\n" + getUniquePortCfgForId(3);
    +
    +            // Node 1 is started without the leader (3) in its config view
    +            MainThread q1 = new MainThread(1, CLIENT_PORT_QP1, quorumCfgIncomplete);
    +            MainThread q2 = new MainThread(2, CLIENT_PORT_QP2, quorumCfgComplete);
    +            MainThread q3 = new MainThread(3, CLIENT_PORT_QP3, quorumCfgComplete);
    +
    +            // Node 1 must be started first, before quorum is formed, to trigger the attempted invalid connection to 3
    +            q1.start();
    +            QuorumPeer quorumPeer1 = waitForQuorumPeer(q1, CONNECTION_TIMEOUT);
    +            Assert.assertTrue(quorumPeer1.getPeerState() == QuorumPeer.ServerState.LOOKING);
    +
    +            // Node 3 started second to avoid 1 and 2 forming a quorum before 3 starts up
    +            q3.start();
    +            QuorumPeer quorumPeer3 = waitForQuorumPeer(q3, CONNECTION_TIMEOUT);
    +            Assert.assertTrue(quorumPeer3.getPeerState() == QuorumPeer.ServerState.LOOKING);
    +
    +            // Node 2 started last, kicks off leader election
    +            q2.start();
    +
    +            // Nodes 2 and 3 now form quorum and fully start. 1 attempts to vote for 3, fails, returns to LOOKING state
    +            Assert.assertTrue("waiting for server 2 to start",
    +                    ClientBase.waitForServerUp("127.0.0.1:" + CLIENT_PORT_QP2, CONNECTION_TIMEOUT));
    +            Assert.assertTrue("waiting for server 3 to start",
    +                    ClientBase.waitForServerUp("127.0.0.1:" + CLIENT_PORT_QP3, CONNECTION_TIMEOUT));
    +
    +            Assert.assertTrue(q1.getQuorumPeer().getPeerState() == QuorumPeer.ServerState.LOOKING);
    +            Assert.assertTrue(q2.getQuorumPeer().getPeerState() == QuorumPeer.ServerState.FOLLOWING);
    +            Assert.assertTrue(q3.getQuorumPeer().getPeerState() == QuorumPeer.ServerState.LEADING);
    +
    +            q1.shutdown();
    --- End diff --
    
    is there a way we can use the existing tearDown code. So we make sure we never leave any servers running even if an assertion fails?
, Github user afine commented on a diff in the pull request:

    https://github.com/apache/zookeeper/pull/476#discussion_r171972228
  
    --- Diff: src/java/test/org/apache/zookeeper/server/quorum/QuorumPeerMainTest.java ---
    @@ -1012,4 +1012,113 @@ public void testFailedTxnAsPartOfQuorumLoss() throws Exception {
                 Assert.assertNull("server " + i + " should not have /zk" + leader, servers.zk[i].exists("/zk" + leader, false));
             }
         }
    +
    +    /**
    +     * Verify that a node without the leader in its view will not attempt to connect to the leader.
    +     */
    +    @Test
    +    public void testLeaderOutOfView() throws Exception {
    +        ClientBase.setupTestEnv();
    +
    +        Layout layout = new PatternLayout("%d{ISO8601} [,yid:%X{myid}] - %5p [%t:%C{1}@%L] - %m%n");
    +        ByteArrayOutputStream os = new ByteArrayOutputStream();
    +        WriterAppender appender = new WriterAppender(layout, os);
    +        appender.setThreshold(Level.DEBUG);
    +        Logger qlogger = Logger.getLogger("org.apache.zookeeper.server.quorum");
    +        qlogger.addAppender(appender);
    +
    +        try {
    +            final int CLIENT_PORT_QP1 = PortAssignment.unique();
    +            final int CLIENT_PORT_QP2 = PortAssignment.unique();
    +            final int CLIENT_PORT_QP3 = PortAssignment.unique();
    +
    +            String quorumCfgIncomplete = getUniquePortCfgForId(1) + "\n" + getUniquePortCfgForId(2);
    +            String quorumCfgComplete = quorumCfgIncomplete + "\n" + getUniquePortCfgForId(3);
    +
    +            // Node 1 is started without the leader (3) in its config view
    +            MainThread q1 = new MainThread(1, CLIENT_PORT_QP1, quorumCfgIncomplete);
    +            MainThread q2 = new MainThread(2, CLIENT_PORT_QP2, quorumCfgComplete);
    +            MainThread q3 = new MainThread(3, CLIENT_PORT_QP3, quorumCfgComplete);
    +
    +            // Node 1 must be started first, before quorum is formed, to trigger the attempted invalid connection to 3
    +            q1.start();
    +            QuorumPeer quorumPeer1 = waitForQuorumPeer(q1, CONNECTION_TIMEOUT);
    +            Assert.assertTrue(quorumPeer1.getPeerState() == QuorumPeer.ServerState.LOOKING);
    +
    +            // Node 3 started second to avoid 1 and 2 forming a quorum before 3 starts up
    +            q3.start();
    +            QuorumPeer quorumPeer3 = waitForQuorumPeer(q3, CONNECTION_TIMEOUT);
    +            Assert.assertTrue(quorumPeer3.getPeerState() == QuorumPeer.ServerState.LOOKING);
    +
    +            // Node 2 started last, kicks off leader election
    +            q2.start();
    +
    +            // Nodes 2 and 3 now form quorum and fully start. 1 attempts to vote for 3, fails, returns to LOOKING state
    +            Assert.assertTrue("waiting for server 2 to start",
    +                    ClientBase.waitForServerUp("127.0.0.1:" + CLIENT_PORT_QP2, CONNECTION_TIMEOUT));
    +            Assert.assertTrue("waiting for server 3 to start",
    +                    ClientBase.waitForServerUp("127.0.0.1:" + CLIENT_PORT_QP3, CONNECTION_TIMEOUT));
    +
    +            Assert.assertTrue(q1.getQuorumPeer().getPeerState() == QuorumPeer.ServerState.LOOKING);
    +            Assert.assertTrue(q2.getQuorumPeer().getPeerState() == QuorumPeer.ServerState.FOLLOWING);
    +            Assert.assertTrue(q3.getQuorumPeer().getPeerState() == QuorumPeer.ServerState.LEADING);
    +
    +            q1.shutdown();
    +            q2.shutdown();
    +            q3.shutdown();
    +
    +            Assert.assertTrue("waiting for server 1 down",
    +                    ClientBase.waitForServerDown("127.0.0.1:" + CLIENT_PORT_QP1,
    +                            ClientBase.CONNECTION_TIMEOUT));
    +            Assert.assertTrue("waiting for server 2 down",
    +                    ClientBase.waitForServerDown("127.0.0.1:" + CLIENT_PORT_QP2,
    +                            ClientBase.CONNECTION_TIMEOUT));
    +            Assert.assertTrue("waiting for server 3 down",
    +                    ClientBase.waitForServerDown("127.0.0.1:" + CLIENT_PORT_QP3,
    +                            ClientBase.CONNECTION_TIMEOUT));
    +
    +        } finally {
    +            qlogger.removeAppender(appender);
    +        }
    +
    +        // Verify that Node 1 never threw an exception
    +        LineNumberReader r = new LineNumberReader(new StringReader(os.toString()));
    +        String line;
    +        boolean found = false;
    +        Pattern p = Pattern.compile(".*java.lang.NullPointerException.*");
    +        while ((line = r.readLine()) != null) {
    +            found = p.matcher(line).matches();
    +            if (found) {
    +                break;
    +            }
    +        }
    +
    +        Assert.assertFalse("Node should not attempt connection to out of view leader", found);
    +    }
    +
    +    private String getUniquePortCfgForId(int id) {
    +        return String.format("server.%d=127.0.0.1:%d:%d", id, PortAssignment.unique(), PortAssignment.unique());
    +    }
    +
    +    private QuorumPeer waitForQuorumPeer(MainThread mainThread, int timeout) {
    --- End diff --
    
    I believe this has the potential to be flaky since we can return `quorumPeer` before the thread actually starts. We should ensure that the thread started.
, Github user afine commented on a diff in the pull request:

    https://github.com/apache/zookeeper/pull/476#discussion_r171970721
  
    --- Diff: src/java/test/org/apache/zookeeper/server/quorum/QuorumPeerMainTest.java ---
    @@ -1012,4 +1012,113 @@ public void testFailedTxnAsPartOfQuorumLoss() throws Exception {
                 Assert.assertNull("server " + i + " should not have /zk" + leader, servers.zk[i].exists("/zk" + leader, false));
             }
         }
    +
    +    /**
    +     * Verify that a node without the leader in its view will not attempt to connect to the leader.
    +     */
    +    @Test
    +    public void testLeaderOutOfView() throws Exception {
    +        ClientBase.setupTestEnv();
    +
    +        Layout layout = new PatternLayout("%d{ISO8601} [,yid:%X{myid}] - %5p [%t:%C{1}@%L] - %m%n");
    --- End diff --
    
    It would be great if we did not specify the pattern as a literal. Take a look at some of the other tests and see if the way they get the patternlayout could apply here (`testElectionFraud` for example).
, Github user afine commented on a diff in the pull request:

    https://github.com/apache/zookeeper/pull/476#discussion_r171973588
  
    --- Diff: src/java/test/org/apache/zookeeper/server/quorum/QuorumPeerMainTest.java ---
    @@ -1012,4 +1012,113 @@ public void testFailedTxnAsPartOfQuorumLoss() throws Exception {
                 Assert.assertNull("server " + i + " should not have /zk" + leader, servers.zk[i].exists("/zk" + leader, false));
             }
         }
    +
    +    /**
    +     * Verify that a node without the leader in its view will not attempt to connect to the leader.
    +     */
    +    @Test
    +    public void testLeaderOutOfView() throws Exception {
    +        ClientBase.setupTestEnv();
    +
    +        Layout layout = new PatternLayout("%d{ISO8601} [,yid:%X{myid}] - %5p [%t:%C{1}@%L] - %m%n");
    +        ByteArrayOutputStream os = new ByteArrayOutputStream();
    +        WriterAppender appender = new WriterAppender(layout, os);
    +        appender.setThreshold(Level.DEBUG);
    +        Logger qlogger = Logger.getLogger("org.apache.zookeeper.server.quorum");
    +        qlogger.addAppender(appender);
    +
    +        try {
    +            final int CLIENT_PORT_QP1 = PortAssignment.unique();
    +            final int CLIENT_PORT_QP2 = PortAssignment.unique();
    +            final int CLIENT_PORT_QP3 = PortAssignment.unique();
    +
    +            String quorumCfgIncomplete = getUniquePortCfgForId(1) + "\n" + getUniquePortCfgForId(2);
    +            String quorumCfgComplete = quorumCfgIncomplete + "\n" + getUniquePortCfgForId(3);
    +
    +            // Node 1 is started without the leader (3) in its config view
    +            MainThread q1 = new MainThread(1, CLIENT_PORT_QP1, quorumCfgIncomplete);
    +            MainThread q2 = new MainThread(2, CLIENT_PORT_QP2, quorumCfgComplete);
    +            MainThread q3 = new MainThread(3, CLIENT_PORT_QP3, quorumCfgComplete);
    +
    +            // Node 1 must be started first, before quorum is formed, to trigger the attempted invalid connection to 3
    +            q1.start();
    +            QuorumPeer quorumPeer1 = waitForQuorumPeer(q1, CONNECTION_TIMEOUT);
    +            Assert.assertTrue(quorumPeer1.getPeerState() == QuorumPeer.ServerState.LOOKING);
    +
    +            // Node 3 started second to avoid 1 and 2 forming a quorum before 3 starts up
    +            q3.start();
    +            QuorumPeer quorumPeer3 = waitForQuorumPeer(q3, CONNECTION_TIMEOUT);
    +            Assert.assertTrue(quorumPeer3.getPeerState() == QuorumPeer.ServerState.LOOKING);
    +
    +            // Node 2 started last, kicks off leader election
    +            q2.start();
    +
    +            // Nodes 2 and 3 now form quorum and fully start. 1 attempts to vote for 3, fails, returns to LOOKING state
    +            Assert.assertTrue("waiting for server 2 to start",
    +                    ClientBase.waitForServerUp("127.0.0.1:" + CLIENT_PORT_QP2, CONNECTION_TIMEOUT));
    +            Assert.assertTrue("waiting for server 3 to start",
    +                    ClientBase.waitForServerUp("127.0.0.1:" + CLIENT_PORT_QP3, CONNECTION_TIMEOUT));
    +
    +            Assert.assertTrue(q1.getQuorumPeer().getPeerState() == QuorumPeer.ServerState.LOOKING);
    +            Assert.assertTrue(q2.getQuorumPeer().getPeerState() == QuorumPeer.ServerState.FOLLOWING);
    +            Assert.assertTrue(q3.getQuorumPeer().getPeerState() == QuorumPeer.ServerState.LEADING);
    +
    +            q1.shutdown();
    +            q2.shutdown();
    +            q3.shutdown();
    +
    +            Assert.assertTrue("waiting for server 1 down",
    +                    ClientBase.waitForServerDown("127.0.0.1:" + CLIENT_PORT_QP1,
    +                            ClientBase.CONNECTION_TIMEOUT));
    +            Assert.assertTrue("waiting for server 2 down",
    +                    ClientBase.waitForServerDown("127.0.0.1:" + CLIENT_PORT_QP2,
    +                            ClientBase.CONNECTION_TIMEOUT));
    +            Assert.assertTrue("waiting for server 3 down",
    +                    ClientBase.waitForServerDown("127.0.0.1:" + CLIENT_PORT_QP3,
    +                            ClientBase.CONNECTION_TIMEOUT));
    +
    +        } finally {
    +            qlogger.removeAppender(appender);
    +        }
    +
    +        // Verify that Node 1 never threw an exception
    +        LineNumberReader r = new LineNumberReader(new StringReader(os.toString()));
    +        String line;
    +        boolean found = false;
    +        Pattern p = Pattern.compile(".*java.lang.NullPointerException.*");
    --- End diff --
    
    It would be great to have a more direct way of expressing that this member never enters the following state. Can we check the logs for `FOLLOWING` like in `testElectionFraud`?
, Github user afine commented on a diff in the pull request:

    https://github.com/apache/zookeeper/pull/476#discussion_r171972767
  
    --- Diff: src/java/main/org/apache/zookeeper/server/quorum/FastLeaderElection.java ---
    @@ -1064,7 +1065,12 @@ else if (self.getCurrentAndNextConfigVoters().contains(n.sid)) {
                             break;
                         }
                     } else {
    -                    LOG.warn("Ignoring notification from non-cluster member " + n.sid);
    +                    if (!self.getCurrentAndNextConfigVoters().contains(n.leader)) {
    +                        LOG.warn("Ignoring notification for non-cluster member sid {} from sid {}", n.leader, n.sid);
    +                    }
    +                    if (!self.getCurrentAndNextConfigVoters().contains(n.sid)) {
    +                        LOG.warn("Ignoring notification from non-cluster member sid {}", n.sid);
    --- End diff --
    
    nit: lets say "quorum" instead of "cluster"
, Github user afine commented on a diff in the pull request:

    https://github.com/apache/zookeeper/pull/476#discussion_r171964902
  
    --- Diff: src/java/main/org/apache/zookeeper/server/quorum/FastLeaderElection.java ---
    @@ -1064,7 +1065,12 @@ else if (self.getCurrentAndNextConfigVoters().contains(n.sid)) {
                             break;
                         }
                     } else {
    -                    LOG.warn("Ignoring notification from non-cluster member " + n.sid);
    +                    if (!self.getCurrentAndNextConfigVoters().contains(n.leader)) {
    +                        LOG.warn("Ignoring notification for non-cluster member sid {} from sid {}", n.leader, n.sid);
    +                    }
    +                    if (!self.getCurrentAndNextConfigVoters().contains(n.sid)) {
    +                        LOG.warn("Ignoring notification from non-cluster member sid {}", n.sid);
    --- End diff --
    
    lets log which member was voted for
, Github user maoling commented on the issue:

    https://github.com/apache/zookeeper/pull/476
  
    @enixon can we move on ?
, Github user enixon commented on the issue:

    https://github.com/apache/zookeeper/pull/476
  
    @maoling I was about 2/3 done with cleaning up this diff when I got dragged into different projects. Thanks for the ping, I'll try to update here this week.
, Github user enixon commented on the issue:

    https://github.com/apache/zookeeper/pull/476
  
    Made all changes requested in comments, I can alter the pull requests for the other ZooKeeper branches once we reach agreement on this one.
, Github user hanm commented on the issue:

    https://github.com/apache/zookeeper/pull/476
  
    @enixon testLeaderOutOfView deterministically fails for me both locally and on Jenkins. Please take a look.
, Github user enixon commented on the issue:

    https://github.com/apache/zookeeper/pull/476
  
    Tests passing again.
    
    This is what can happen when you use a different logging config and your tests rely on scraping the logs.  :(
, Github user eribeiro commented on a diff in the pull request:

    https://github.com/apache/zookeeper/pull/476#discussion_r182127687
  
    --- Diff: src/java/main/org/apache/zookeeper/server/quorum/FastLeaderElection.java ---
    @@ -927,10 +927,11 @@ public Vote lookForLeader() throws InterruptedException {
                                 tmpTimeOut : maxNotificationInterval);
                         LOG.info("Notification time out: " + notTimeout);
                     } 
    -                else if (self.getCurrentAndNextConfigVoters().contains(n.sid)) {
    +                else if (self.getCurrentAndNextConfigVoters().contains(n.sid) &&
    --- End diff --
    
    As this PR modifies this line and add similar ones, wouldn't be the case of creating a private method with a meaningful name like below?
    ```
    private boolean configVotersContains(long sid) {
        return self.getCurrentAndNextConfigVoters().contains(sid);
    }
    ```
    
    This makes this line and the lines below more readable, imho.
, Github user enixon commented on a diff in the pull request:

    https://github.com/apache/zookeeper/pull/476#discussion_r182175483
  
    --- Diff: src/java/main/org/apache/zookeeper/server/quorum/FastLeaderElection.java ---
    @@ -927,10 +927,11 @@ public Vote lookForLeader() throws InterruptedException {
                                 tmpTimeOut : maxNotificationInterval);
                         LOG.info("Notification time out: " + notTimeout);
                     } 
    -                else if (self.getCurrentAndNextConfigVoters().contains(n.sid)) {
    +                else if (self.getCurrentAndNextConfigVoters().contains(n.sid) &&
    --- End diff --
    
    There are five uses of `getCurrentAndNextConfigVoters().contains` in the class, seems reasonable to make it a method.
, Github user enixon commented on the issue:

    https://github.com/apache/zookeeper/pull/476
  
    What's the build failure on this commit?
, Github user anmolnar commented on the issue:

    https://github.com/apache/zookeeper/pull/476
  
    @enixon this: https://issues.apache.org/jira/browse/INFRA-16349
, Issue resolved by pull request 476
[https://github.com/apache/zookeeper/pull/476], Github user asfgit closed the pull request at:

    https://github.com/apache/zookeeper/pull/476
, I've committed this to 3.5 and master. Thanks for the patch [~nixon]. Is the patch also applicable to 3.4? I assume this happens only in 3.5+ with dynamic reconfiguration. , FAILURE: Integrated in Jenkins build ZooKeeper-trunk #6 (See [https://builds.apache.org/job/ZooKeeper-trunk/6/])
ZOOKEEPER-2988: NPE triggered if server receives a vote for a server … (hanm: rev 2022766ec907f63b1b43fc5455e9e7761cd332f6)
* (edit) src/java/test/org/apache/zookeeper/server/quorum/QuorumPeerMainTest.java
* (edit) src/java/main/org/apache/zookeeper/server/quorum/FastLeaderElection.java
, [~hanm] thanks for merging it to 3.5 too, I'll shut down that second pr. This bug is applicable to 3.4 as well - imo it's a worse danger on that branch since its easy for configuration files to be stale. I'll fix up pr 478 for the 3.4 branch to reflect the comments I got on pr 476 so it can be ready for review., +1 overall.  GitHub Pull Request  Build
      

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 3.0.1) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/1655//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/1655//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/1655//console

This message is automatically generated., Github user enixon commented on the issue:

    https://github.com/apache/zookeeper/pull/477
  
    Change merged to branch-3.5 with https://github.com/apache/zookeeper/pull/476, closing this PR as redundant. 
, Github user enixon closed the pull request at:

    https://github.com/apache/zookeeper/pull/477
, -1 overall.  GitHub Pull Request  Build
      

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 3.0.1) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/1656//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/1656//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/1656//console

This message is automatically generated., Github user enixon commented on the issue:

    https://github.com/apache/zookeeper/pull/478
  
    The only failure report out of Jenkins is "Test org.apache.zookeeper.test.FollowerResyncConcurrencyTest FAILED (crashed)". I'm unable to repro any issue with that test on my branch locally, is there a good way to re-run the test?
, Github user hanm commented on the issue:

    https://github.com/apache/zookeeper/pull/478
  
    @enixon "FollowerResyncConcurrencyTest " is a known flaky test (and the error in this case is infrastructure issues - the JVM abnormally exit). I tested your patch using a Jenkins job and everything looks good. Committed, please close this pull request.
    
    >> is there a good way to re-run the test
    
    P.S. to kick off the pre-commit build bot, you can close the pull request and reopen it.
, {quote}This bug is applicable to 3.4 as well - imo it's a worse danger on that branch since its easy for configuration files to be stale.
{quote}
Make sense. Just committed the patch for branch-3.4, and updated the Jira fixed version to include 3.4., Github user enixon commented on the issue:

    https://github.com/apache/zookeeper/pull/478
  
    Thanks, @hanm !
, Github user enixon closed the pull request at:

    https://github.com/apache/zookeeper/pull/478
]