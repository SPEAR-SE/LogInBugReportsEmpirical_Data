[This is a serious issue, although it does have a pretty straightforward workaround. I'll respin a new 3.3.5 rc that includes a fix for this (I'm working on it)., These three patches fix the issue on the respective branches. I verified the tests failed before the fix, and passed subsequent to the fix. All tests are passing for me on the three branches.

I believe accessing/returning the lastzxid as I do in FinalRequestProcessor is valid, but it took me some time to convince myself. Please double check that the lastzxid I send back to the client is the one corresponding to the zxid at the time the read was performed, On second thought it does look like this there's a problem with this approach. If the follower sees a commit subsequent to doing the read op, but prior to getting the lastzxid in FRP the client will end up getting an invalid lastzxid. I'll have to look at how to handle this a different way. Canceling for now. Any ideas? For the write case the leader is updating the request zxid, perhaps we need to do that here. The alternative is to have the read ops return the lastzxid, but that's going to be pretty disruptive..., +1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12518091/ZOOKEEPER-1412_trunk.patch
  against trunk revision 1297740.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 6 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/990//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/990//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/990//console

This message is automatically generated., +1 looks good pat. my one small comment is that you comment one of the methods in TestableZooKeeper, but not the other. since it is kind of a public interface it might be good to comment both., Looks good. +1 for the patch (pending fixing ben's comments :))., Ok, updated with comments. Good to see I was right (at least initially). thanks., +1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12518111/ZOOKEEPER-1412_trunk.patch
  against trunk revision 1297740.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 6 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/991//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/991//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/991//console

This message is automatically generated., Thanks for the patch Patrick.

As I mentioned in my second mail I see a difference between java and c client in regards how they update lastzxid. The c client updates it for all operations and java not. This bug was not surfacing when c client was used because c client updates the lastzxid on every ping. 

Do you see any problem with this inconsistency between the c and java client? Is it worth changing one to behave like the other?, i agree with botond that we should also fix the java client to update lastzxid on every message. it might be worth doing in a separate jira., Honestly I didn't have time to look into all of these scenarios, but I have a concern wrt introducing this change into 3.3 code line, I'd be more comfortable look at such a change for 3.4 or 3.5. For example, if we did introduce this further changes, is there any chance to get a ping response which updates the lastzxid, then disconnect from the server before getting a notification that would then be missed on reconnect?

I'd like to cut a 3.3.5 with what I have so far, which clearly fixes the issue identified (and 3.3.5 fixes another critical issues to get in user's hands). We can then look at further improvements in a separate jira. Make sense?, I think its ok to go with the current patch for 3.3 line and update the patch to match the zxid's for 3.4 and trunk. I agree with Pat on keeping the changes minimal for 3.3 line. , Integrated in ZooKeeper-trunk #1493 (See [https://builds.apache.org/job/ZooKeeper-trunk/1493/])
    ZOOKEEPER-1412. java client watches inconsistently triggered on reconnect (phunt) (Revision 1301089)

     Result = SUCCESS
phunt : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1301089
Files : 
* /zookeeper/trunk/CHANGES.txt
* /zookeeper/trunk/src/java/main/org/apache/zookeeper/ClientCnxn.java
* /zookeeper/trunk/src/java/main/org/apache/zookeeper/server/FinalRequestProcessor.java
* /zookeeper/trunk/src/java/test/org/apache/zookeeper/TestableZooKeeper.java
* /zookeeper/trunk/src/java/test/org/apache/zookeeper/test/FollowerResyncConcurrencyTest.java
, Once applied this fix, a NodeDataChanged is received instead of a NodeCreated.
More information in user mailing list thread "Unexpected NodeCreated with 3.4.3?"
Affected versions: 3.3.5 and 3.4.3 + ZK-1412, Hi CÃ©sar, I just tried reproducing using the java cli (zk shell) client and was unable (iirc I was able to reproduce previously) using the latest on branch-3.4 (includes this fix).

started client against a follower (3 server ensemble)

WatchedEvent state:SyncConnected type:None path:null
[zk: (CONNECTED) 0] ls /foo 1

killed the server
WatchedEvent state:Disconnected type:None path:null

restarted the server
WatchedEvent state:SyncConnected type:None path:null

that was it

I then started a second client and deleted /foo, which caused

WatchedEvent state:SyncConnected type:NodeDeleted path:/foo

so afaict it looks right to me.

If you still see issues please open a separate jira. A test that reproduces this would also be useful.

]