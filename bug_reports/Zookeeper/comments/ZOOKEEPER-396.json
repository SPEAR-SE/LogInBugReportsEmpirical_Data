[here is a simple way to reproduce this. Doing an exists in a loop with some other thread closing the zookeeper handle. This test code will hang (sometimes in different places). We might want to have a state called closing in the client wherein we dont allow other operations to proceed as soon as a close() gets called. Also, we need to make sure that the operations that have been called before close do not hang. They should atleast get an error response., after some thinking and digging deep it seems that the problem is occuring after we call zookeeper_close and get use the same handle in a seperate thread to get data. Similar to FILE api in libc, the behavior of using the handle after close is called is undefined and might create problems. So, I have just updated the docs in the c code to reflect this in the docs and warn users on not doing this., +1 looks good., I just committed this., Integrated in ZooKeeper-trunk #343 (See [http://hudson.zones.apache.org/hudson/job/ZooKeeper-trunk/343/])
    ]