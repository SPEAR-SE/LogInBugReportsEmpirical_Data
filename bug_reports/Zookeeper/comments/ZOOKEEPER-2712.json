[I'm attaching the failure test case log., The culprit is https://github.com/apache/zookeeper/commit/e8247eec1103e387e02bbb1e8859b4d468688f48 (ZOOKEEPER-2689). These tests fail consistently after this commit., [~hanm], Yes test case was consistently passing with Kerby dependency. Also, it was pretty simple compares to ApacheDS but Kerby has build requirement of jdk1.7+, http://directory.apache.org/kerby/developer-guide.html]. Since branch-3.4.x support Java 1.6 or higher, Apache Kerby dependency is not possible, right?

I'm still searching the root cause of this test failure, kerb related logs are not helping much to identify the real problem.

, [~rakeshr] Yes it is sad that we still need 1.6 support otherwise this is not an issue. 

Since you mentioned that these tests (with ZOOKEEPER-2689) pass consistently on your windows, could this be a JDK / OS issue? Otherwise if the test itself is flaky then I would imagine windows test will fail sometimes. , GitHub user rakeshadr opened a pull request:

    https://github.com/apache/zookeeper/pull/200

    ZOOKEEPER-2712: MiniKdc test case intermittently failing due to princâ€¦

    After long long analysis, I have observed concurrency issues at `ApacheDs `(used for unit test) causing the trouble and failing minikdc test cases. Introduced delay between the ZK server's startup to avoid simultaneous login context init across servers. Also, modified few test code for better debugging.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/rakeshadr/zookeeper-1 ZK-2712

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/zookeeper/pull/200.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #200
    
----
commit 3d1db97770a23ab8a9d9dd5700544518f865647a
Author: Rakesh Radhakrishnan <rakeshr@apache.org>
Date:   2017-03-17T15:25:56Z

    ZOOKEEPER-2712: MiniKdc test case intermittently failing due to principal not found in Kerberos database

----
, -1 overall.  GitHub Pull Request  Build
      

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 18 new or modified tests.

    -1 javadoc.  The javadoc tool appears to have generated 1 warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    -1 findbugs.  The patch appears to introduce 97 new Findbugs (version 3.0.1) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/444//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/444//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/444//console

This message is automatically generated., [~hanm], Yes the test cases are happily running in my Windows env. Later, I have tried running in Linux and it is failing. After putting the delay between the server startup, I could see it is passing consistently.

[~hanm], [~phunt], It would be really helpful if you could post your feedback on the proposed fix. Thanks!
, Thanks [~hanm] for the offline discussion about the static tool warnings.
{code}
-1 javadoc. The javadoc tool appears to have generated 1 warning messages.
{code}
Jira has broken links, am adding [patchJavadocWarnings.txt|https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/444/artifact/patchprocess/patchJavadocWarnings.txt] link.

{code}
-1 findbugs. The patch appears to introduce 97 new Findbugs (version 3.0.1) warnings.
{code}
Jira has broken links, am adding [newPatchFindbugsWarnings.html|https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/444/artifact/build/test/findbugs/newPatchFindbugsWarnings.html] link.

It looks like entire project items are showing and those are unrelated to the patch. The proposed fix is majorily touching test code apart from one source code QuorumPeer.java. So, anything required here?


, Github user hanm commented on a diff in the pull request:

    https://github.com/apache/zookeeper/pull/200#discussion_r106792158
  
    --- Diff: src/java/test/org/apache/zookeeper/server/quorum/auth/QuorumAuthUpgradeTest.java ---
    @@ -83,7 +83,7 @@ public void testNullAuthLearnerServer() throws Exception {
             Map<String, String> authConfigs = new HashMap<String, String>();
             authConfigs.put(QuorumAuth.QUORUM_SASL_AUTH_ENABLED, "false");
     
    -        String connectStr = startQuorum(2, authConfigs, 0);
    +        String connectStr = startQuorum(2, authConfigs, 0, false);
    --- End diff --
    
    I am curious why we don't need a delay here - is it because the ApacheDS is not used in this test case?
, Github user hanm commented on a diff in the pull request:

    https://github.com/apache/zookeeper/pull/200#discussion_r106792170
  
    --- Diff: src/java/test/org/apache/zookeeper/server/quorum/auth/QuorumDigestAuthTest.java ---
    @@ -87,7 +87,7 @@ public void testValidCredentials() throws Exception {
             authConfigs.put(QuorumAuth.QUORUM_SERVER_SASL_AUTH_REQUIRED, "true");
             authConfigs.put(QuorumAuth.QUORUM_LEARNER_SASL_AUTH_REQUIRED, "true");
     
    -        String connectStr = startQuorum(3, authConfigs, 3);
    +        String connectStr = startQuorum(3, authConfigs, 3, false);
    --- End diff --
    
    Similarly wondering why no delay is added here.
, Github user hanm commented on the issue:

    https://github.com/apache/zookeeper/pull/200
  
    I tested this patch, it works good for my local Linux environment. The previous test cases that failed deterministically now pass consistently. I've left a comment here and a couple of comments in the JIRA, let's resolve those before merging this.
, [~rakeshr] Good job on hunting down the culprit of the race! 

I am curious what exactly cause the races though - from the description it was not very clear to me. Do you mind to elaborate a little bit with regards to what code in test case that uses what function in the dependency library and what the race condition is?

Regarding find bug warnings - I tried find bugs (3.0.1) locally and I also get 97 warnings. I suspect we did not get such warnings either because we did not run find bugs at all for branch-3.4, or find bug version updates. I think we should fix the warnings before releasing of 3.4.10, not sure if you agree with this or not. Regardless of this, I think fixing findbug warning is out scope of this particular JIRA and we could use another JIRA to track it (same for the javadoc warnings)., Github user rakeshadr commented on a diff in the pull request:

    https://github.com/apache/zookeeper/pull/200#discussion_r106797363
  
    --- Diff: src/java/test/org/apache/zookeeper/server/quorum/auth/QuorumAuthUpgradeTest.java ---
    @@ -83,7 +83,7 @@ public void testNullAuthLearnerServer() throws Exception {
             Map<String, String> authConfigs = new HashMap<String, String>();
             authConfigs.put(QuorumAuth.QUORUM_SASL_AUTH_ENABLED, "false");
     
    -        String connectStr = startQuorum(2, authConfigs, 0);
    +        String connectStr = startQuorum(2, authConfigs, 0, false);
    --- End diff --
    
    Only those test cases which are extending `KerberosSecurityTestcase` class has the dependency with ApacheDS libraries. So, it is not required to add delay for other test cases.
    
     Internally, KerberosSecurityTestcase class is instantiating MiniKdc instance and ZK quorum auth module does handshaking using the credentials configured in `jaas.config` file.
, Github user rakeshadr commented on a diff in the pull request:

    https://github.com/apache/zookeeper/pull/200#discussion_r106797401
  
    --- Diff: src/java/test/org/apache/zookeeper/server/quorum/auth/QuorumDigestAuthTest.java ---
    @@ -87,7 +87,7 @@ public void testValidCredentials() throws Exception {
             authConfigs.put(QuorumAuth.QUORUM_SERVER_SASL_AUTH_REQUIRED, "true");
             authConfigs.put(QuorumAuth.QUORUM_LEARNER_SASL_AUTH_REQUIRED, "true");
     
    -        String connectStr = startQuorum(3, authConfigs, 3);
    +        String connectStr = startQuorum(3, authConfigs, 3, false);
    --- End diff --
    
    This test is not depending on `KerberosSecurityTestcase ` and not required delay. My above comment is answering this question, kindly refer that.
, Thanks a lot [~hanm] for the unit test results and comments.

bq. I am curious what exactly cause the races though - from the description it was not very clear to me. Do you mind to elaborate a little bit with regards to what code in test case that uses what function in the dependency library and what the race condition is?

I hope the following explanation will help to understand the concurrency flow.

Below is the auth failed exception which frequently hits in our {{KerberosSecurityTestcase}} related unit test cases.
{code}
2017-03-17 15:55:51,397 [myid:] - WARN  [NioProcessor-3:KerberosProtocolHandler@241] - Server not found in Kerberos database (7)
2017-03-17 15:55:51,398 [myid:] - WARN  [NioProcessor-3:KerberosProtocolHandler@242] - Server not found in Kerberos database (7)
		[Krb5LoginModule] authentication failed 
Server not found in Kerberos database (7) - Server not found in Kerberos database
2017-03-17 15:55:51,409 [myid:1] - ERROR [Thread-3:QuorumPeerTestBase$MainThread@145] - unexpected exception in run
javax.security.sasl.SaslException: Failed to initialize authentication mechanism using SASL [Caused by javax.security.auth.login.LoginException: Server not found in Kerberos database (7) - Server not found in Kerberos database]
	at org.apache.zookeeper.server.quorum.auth.SaslQuorumAuthServer.<init>(SaslQuorumAuthServer.java:69)
	at org.apache.zookeeper.server.quorum.QuorumPeer.initialize(QuorumPeer.java:570)
	at org.apache.zookeeper.server.quorum.QuorumPeerMain.runFromConfig(QuorumPeerMain.java:162)
{code}

As we know, test case is creating a ZK cluster of size 3 and uses [QuorumAuthTestBase.startServer() #L186|https://github.com/apache/zookeeper/blob/branch-3.4/src/java/test/org/apache/zookeeper/server/quorum/auth/QuorumAuthTestBase.java#L186] function to start server in a separate thread. Now, we have three servers starting parallel in three different threads. During startup, each server will initialize SaslQuorumAuthServer and SaslQuorumAuthLearner [QuorumPeer#init|https://github.com/apache/zookeeper/blob/branch-3.4/src/java/main/org/apache/zookeeper/server/quorum/QuorumPeer.java#L570] and does auth login. For Krb login, it internally uses ApacheDS library as this test case is based on {{KerberosSecurityTestcase}}. I have experimented a test scenario of doing multiple Krb {{javax.security.auth.login.LoginContext#login()}} simultaneously and hits exactly the same error {{server not found in Kerberos database}}. Later, I made the login in a sequential fashion and never hits server not found problem. I personally feel, that ApacheDS login module is sharing some resources and resulting in concurrency failure. IMHO, fixing ApacheDS is not our scope and the sequential login changes makes the test case more consistent, does this make sense to you?, bq. Regarding find bug warnings - I tried find bugs (3.0.1) locally and I also get 97 warnings. I suspect we did not get such warnings either because we did not run find bugs at all for branch-3.4, or find bug version updates. I think we should fix the warnings before releasing of 3.4.10, not sure if you agree with this or not. Regardless of this, I think fixing findbug warning is out scope of this particular JIRA and we could use another JIRA to track it (same for the javadoc warnings).

Thank you [~hanm] for bringing the findbug warnings point. Its true, Jenkins was not running findbug tool for branch-3.4 and the report was not visible. I personally would like to avoid postponing the 3.4.10 release even further as there are many critical, security defects fixed and quorum auth sasl feature available in this. IMHO, we should fix findbugs if anything critical and should cut a {{3.4.10}} release and all the other warnings can be pushed to {{3.4.11}}? I have quickly gone through the warnings and didn't notice any critical items. Please feel free to add if you would like to discuss any specific case. Probably, could raise a jira to fix those and continue discussion over there.

, FYI, I've raised issue ZOOKEEPER-2728 to cleanup {{br-3.4}} findbugs warnings., Github user hanm commented on the issue:

    https://github.com/apache/zookeeper/pull/200
  
    lgtm!
, Thanks Rakesh for the explain on the root cause of the issue. I give +1 on the patch.

Regarding find bugs, I tend to agree that they are not blockers but I'd like to make sure that these warnings are not introduced after 3.4.9 - in other words, Do these warnings, or a large subset of it also exists in 3.4.9 (and possibly previous 3.4.x releases)? If that is the case I think we can postpone fixing these, as it is not regression and previous releases all contain them. [~rakeshr] Can you please confirm that previous 3.4.x release (at leaset 3.4.9) has similar scale of find bug warnings?, Thanks [~hanm], Attached sheet contains the warnings present in previous 3.4.x release. Compare to the previous, we have 8 new {{Medium Priority Warnings}} - Correctness Warnings(2), Dodgy code Warnings(3), Malicious code vulnerability Warnings(3), Github user rakeshadr commented on the issue:

    https://github.com/apache/zookeeper/pull/200
  
    Thanks a lot @hanm for the useful comments, I will merge this changes shortly.
, Issue resolved by pull request 200
[https://github.com/apache/zookeeper/pull/200], Github user rakeshadr closed the pull request at:

    https://github.com/apache/zookeeper/pull/200
]