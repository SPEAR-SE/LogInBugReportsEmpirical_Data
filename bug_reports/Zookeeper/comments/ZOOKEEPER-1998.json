[[~rgs] - yep, you're right. I added that code as part of ZOOKEEPER-107 working with [~shralex]. But if I recall correctly, the original code also unconditionally called resolve_hosts. Though I'd have to go look at the original code to confirm that. I'm guessing you've done that already and that it did not do that? 

Do you have thoughts on how we could avoid this? I suppose we could easily just check if the addrvec is the same and if it is bypass resolving the hosts. , I actually didn't look at 3.4! Since the code looked new, I just guessed. But, it turns out the that getaddrs is only called from zookeeper_init in 3.4 (unless I am overlooking something):

https://github.com/apache/zookeeper/blob/branch-3.4/src/c/src/zookeeper.c#L836

bq. Do you have thoughts on how we could avoid this? I suppose we could easily just check if the addrvec is the same and if it is bypass resolving the hosts. 

Well, but lookups should only happen upon reconnects right? When things are healthy (i.e.: connected), it doesn't matter if we have (even new) unresolved hosts. So I'd say we only call resolve_hosts() when a new connection is needed.. Thoughts?, [~rgs] - Looking at the 3.4 code I agree with you. It seems like we should only do the lookup when we are connecting., hey [~rgs].
One suggestion -- when pointing Github link don't use "trunk" use specific commit hash in the URL. This would make it point to where you meant when trunk commits change. :)
, I've filed MESOS-2681 which tracks Apache Mesos being affected by this as well in the 3.4.x branch., We've got a few hundred ZooKeeper clients per datacenter that are doing ~30 lookups a minute each that they don't need to be doing any as far as I can tell, which I think is because of this issue. Is there active work on a fix for this?, I think MESOS-2681 is not directly affected by this issue (ZOOKEEPER-1998). The problematic code path we are talking about here in ZOOKEEPER-1998 is a different code path: *zookeeper_interest* is the entry point instead of *zookeeper_init*. 

What Mesos experienced was caused by *Mesos forcefully expires session (locally) if it is disconnected from ZK for >10s.* according to the comment made in MESOS-2681, and when ZK client in Mesos tried to re-establish the session it was the *zookeeper_init()* code gets called (which, would call resolve_hosts). I tend to think the proper fix on Mesos side would be to try avoid frequent session expiration if possible, which would reduce the attempts to re-establishment of sessions and thus reduces the DNS lookup.



]