[flavio can you explain the race condition so that a reviewer would know what the problem is and it would be easier for him to review the patch. thanks , Sounds like something that we should verify via a unit test. Any way to test this case?, When calling sync() with multiple asynchronous requests pending, a zookeeper server delivers the requests out of order. For example, if a client submits a request, say an asynchronous create, followed by a sync, then the zookeeper server the client is connected to might deliver the sync and create in the inverse order, causing the client to drop the connection. This happens because pendingSyncs in CommitProcessor is updated in the wrong place. 

In the attached patch, I have moved pendingSyncs to FollowerZooKeeperServer, and have made pendingSyncs thread safe by using a ConcurrentLinkedQueue. Note that there is also code on Leader.java to handle syncs, and I have added code to process syncs locally in the case the client is connected to the leader.

, This is the java program that I used to debug this problem., as far as I understand this patch .... 

the problem seems to be that the leader is sending the commit for sync's out of order. Is that true? 
Also I dont understand the reasoning behind moving the pedning syncs up to the servers?
, it took me a while to understand the bug and the fix :) ...

the patch looks good -- with a few comments -- 

1) there are two unnecessary imports -- 

one of commitprocessor in followerrequestprocessor
the other one of linkedlist in followerzookeeperserver

can we remove them?

2) 
this code is a little confusing thugh it was there before as well -- 

        if(request.type == ZooDefs.OpCode.sync){
            zks.getLeader().processSync(request);

            if(!zks.getLeader().syncHandler.containsKey(request.sessionId)){
                zks.getLeader().syncHandler.put(request.sessionId, null);
                nextProcessor.processRequest(request);
            }

        }

this is in ProposalRequestProcessor -

why dont we do nextprocessor.processRequest if we have the session in the synchandler?
, Thanks for the comments, Mahadev. I have removed the unnecessary imports and added a comment on the code you found confusing. The new patch reflects those changes.
, Forgot to make the patch relative to the trunk., +1 for the patch. , I just committed this. THanks Flavio. , The test was not committed. I'll submit a patch once ZOOKEEPER-111 goes in., Don't worry, Pat. I have a patch almost ready for the test., my mistake. :) I shouldnt have committed it without a test., Adding test for sync call. This test currently only checks the implementation of a standalone zookeeper. If I get a +1 on this test, then I can work on adding a second test that performs the same sequence of operations, but for a quorum configuration instead.  , ZOOKEEPER-108.patch has been committed already. The new patch to review is ZOOKEEPER-108-TEST.patch., Minor cleanups of warnings/findbugs issues., Committed ZOOKEEPER-108-TEST.patch as revision 684175.

, Integrated in ZooKeeper-trunk #50 (See [http://hudson.zones.apache.org/hudson/job/ZooKeeper-trunk/50/]), 3.0.0 has been released, closing issues.]