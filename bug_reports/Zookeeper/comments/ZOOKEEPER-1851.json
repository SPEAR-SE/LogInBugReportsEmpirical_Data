[diff --git a/src/java/main/org/apache/zookeeper/server/TraceFormatter.java b/src/java/main/org/apache/zookeeper/server/TraceFormatter.java
index 70a63d1..582383d 100644
--- a/src/java/main/org/apache/zookeeper/server/TraceFormatter.java
+++ b/src/java/main/org/apache/zookeeper/server/TraceFormatter.java
@@ -35,6 +35,8 @@ public class TraceFormatter {
             return "notification";
         case OpCode.create:
             return "create";
+        case OpCode.create2:
+            return "create2";
         case OpCode.delete:
             return "delete";
         case OpCode.exists:
diff --git a/src/java/main/org/apache/zookeeper/server/quorum/CommitProcessor.java b/src/java/main/org/apache/zookeeper/server/quorum/CommitProcessor.java
index f45e871..04cb772 100644
--- a/src/java/main/org/apache/zookeeper/server/quorum/CommitProcessor.java
+++ b/src/java/main/org/apache/zookeeper/server/quorum/CommitProcessor.java
@@ -129,6 +129,7 @@ public class CommitProcessor extends Thread implements RequestProcessor {
     protected boolean needCommit(Request request) {
         switch (request.type) {
             case OpCode.create:
+            case OpCode.create2:
             case OpCode.delete:
             case OpCode.setData:
             case OpCode.reconfig:
diff --git a/src/java/main/org/apache/zookeeper/server/quorum/FollowerRequestProcessor.java b/src/java/main/org/apache/zookeeper/server/quorum/FollowerRequestProcessor.java
index 79b2b05..23cbb2b 100644
--- a/src/java/main/org/apache/zookeeper/server/quorum/FollowerRequestProcessor.java
+++ b/src/java/main/org/apache/zookeeper/server/quorum/FollowerRequestProcessor.java
@@ -81,6 +81,7 @@ public class FollowerRequestProcessor extends Thread implements
                     zks.getFollower().request(request);
                     break;
                 case OpCode.create:
+                case OpCode.create2:
                 case OpCode.delete:
                 case OpCode.setData:
                 case OpCode.reconfig:
diff --git a/src/java/main/org/apache/zookeeper/server/quorum/ObserverRequestProcessor.java b/src/java/main/org/apache/zookeeper/server/quorum/ObserverRequestProcessor.java
index a9857ca..ce421af 100644
--- a/src/java/main/org/apache/zookeeper/server/quorum/ObserverRequestProcessor.java
+++ b/src/java/main/org/apache/zookeeper/server/quorum/ObserverRequestProcessor.java
@@ -90,6 +90,7 @@ public class ObserverRequestProcessor extends Thread implements
                     zks.getObserver().request(request);
                     break;
                 case OpCode.create:
+                case OpCode.create2:
                 case OpCode.delete:
                 case OpCode.setData:
                 case OpCode.reconfig:
diff --git a/src/java/test/org/apache/zookeeper/server/quorum/QuorumRequestPipelineTest.java b/src/java/test/org/apache/zookeeper/server/quorum/QuorumRequestPipelineTest.java
new file mode 100644
index 0000000..0106cc9
--- /dev/null
+++ b/src/java/test/org/apache/zookeeper/server/quorum/QuorumRequestPipelineTest.java
@@ -0,0 +1,173 @@
+package org.apache.zookeeper.server.quorum;
+
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.HashSet;
+import java.util.Set;
+import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.TimeUnit;
+
+import org.junit.After;
+import org.junit.Assert;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.Parameterized;
+
+import org.apache.zookeeper.AsyncCallback.VoidCallback;
+import org.apache.zookeeper.CreateMode;
+import org.apache.zookeeper.TestableZooKeeper;
+import org.apache.zookeeper.ZooDefs.Ids;
+import org.apache.zookeeper.data.Stat;
+import org.apache.zookeeper.server.quorum.QuorumPeer.ServerState;
+import org.apache.zookeeper.test.QuorumBase;
+
+@RunWith(Parameterized.class)
+public class QuorumRequestPipelineTest extends QuorumBase {
+  protected ServerState serverState;
+  protected final CountDownLatch callComplete = new CountDownLatch(1);
+  protected boolean complete = false;
+  protected final static String PARENT_PATH = "/foo";
+  protected final static Set<String> CHILDREN = new HashSet(Arrays.asList("1", "2", "3"));
+  protected final static String AUTH_PROVIDER = "digest";
+  protected final static byte[] AUTH = "hello".getBytes();
+  protected final static byte[] DATA = "Hint Water".getBytes();
+
+  protected TestableZooKeeper zkClient;
+
+  @Parameterized.Parameters
+  public static Collection<Object[]> data() {
+    return Arrays.asList(
+        new Object[][] {
+            {ServerState.LEADING},
+            {ServerState.FOLLOWING},
+            {ServerState.OBSERVING}});
+  }
+
+  public QuorumRequestPipelineTest(ServerState state) {
+    this.serverState = state;
+  }
+
+  @Before
+  public void setUp() throws Exception {
+    CountdownWatcher clientWatch = new CountdownWatcher();
+    super.setUp(true);
+    zkClient = createClient(clientWatch, getPeersMatching(serverState));
+    zkClient.addAuthInfo(AUTH_PROVIDER, AUTH);
+    clientWatch.waitForConnected(CONNECTION_TIMEOUT);
+  }
+
+  @After
+  public void tearDown() throws Exception {
+    zkClient.close();
+    super.tearDown();
+  }
+
+  private Stat create2EmptyNode(TestableZooKeeper zkClient, String path) throws Exception {
+    Stat stat = new Stat();
+    zkClient.create(path, null, Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT, stat);
+    return stat;
+  }
+
+  @Test
+  public void testCreate() throws Exception {
+    zkClient.create(PARENT_PATH, DATA, Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);
+    Assert.assertArrayEquals(
+        String.format("%s Node created (create) with expected value", serverState),
+        DATA,
+        zkClient.getData(PARENT_PATH, false, null));
+  }
+
+  @Test
+  public void testCreate2() throws Exception {
+    zkClient.create(PARENT_PATH, DATA, Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT, null);
+    Assert.assertArrayEquals(
+        String.format("%s Node created (create2) with expected value", serverState),
+        DATA,
+        zkClient.getData(PARENT_PATH, false, null));
+  }
+
+  @Test
+  public void testDelete() throws Exception {
+    create2EmptyNode(zkClient, PARENT_PATH);
+    zkClient.delete(PARENT_PATH, -1);
+    Assert.assertNull(
+        String.format("%s Node no longer exists", serverState),
+        zkClient.exists(PARENT_PATH, false));
+  }
+
+  @Test
+  public void testExists() throws Exception {
+    Stat stat = create2EmptyNode(zkClient, PARENT_PATH);
+    Assert.assertEquals(
+        String.format("%s Exists returns correct node stat", serverState),
+        stat,
+        zkClient.exists(PARENT_PATH, false));
+  }
+
+  @Test
+  public void testSetAndGetData() throws Exception {
+    create2EmptyNode(zkClient, PARENT_PATH);
+    zkClient.setData(PARENT_PATH, DATA, -1);
+    Assert.assertArrayEquals(
+        String.format("%s Node updated with expected value", serverState),
+        DATA,
+        zkClient.getData(PARENT_PATH, false, null));
+  }
+
+  @Test
+  public void testSetAndGetACL() throws Exception {
+    create2EmptyNode(zkClient, PARENT_PATH);
+    Assert.assertEquals(
+        String.format("%s Node has open ACL", serverState),
+        Ids.OPEN_ACL_UNSAFE,
+        zkClient.getACL(PARENT_PATH, new Stat()));
+    zkClient.setACL(PARENT_PATH, Ids.READ_ACL_UNSAFE, -1);
+    Assert.assertEquals(
+        String.format("%s Node has world read-only ACL", serverState),
+        Ids.READ_ACL_UNSAFE,
+        zkClient.getACL(PARENT_PATH, new Stat()));
+  }
+
+  @Test
+  public void testSetAndGetChildren() throws Exception {
+    create2EmptyNode(zkClient, PARENT_PATH);
+    for (String child : CHILDREN) {
+      create2EmptyNode(zkClient, PARENT_PATH + "/" + child);
+    }
+    Assert.assertEquals(
+        String.format("%s Parent has expected children", serverState),
+        CHILDREN,
+        new HashSet(zkClient.getChildren(PARENT_PATH, false)));
+  }
+
+  @Test
+  public void testSetAndGetChildren2() throws Exception {
+    create2EmptyNode(zkClient, PARENT_PATH);
+    for (String child : CHILDREN) {
+      create2EmptyNode(zkClient, PARENT_PATH + "/" + child);
+    }
+    Assert.assertEquals(
+        String.format("%s Parent has expected children", serverState),
+        CHILDREN,
+        new HashSet(zkClient.getChildren(PARENT_PATH, false, null)));
+  }
+
+  @Test
+  public void testSync() throws Exception {
+    complete = false;
+    create2EmptyNode(zkClient, PARENT_PATH);
+    VoidCallback onSync = new VoidCallback() {
+      @Override
+      public void processResult(int rc, String path, Object ctx) {
+        complete = true;
+        callComplete.countDown();
+      }
+    };
+    zkClient.sync(PARENT_PATH, onSync, null);
+    callComplete.await(1, TimeUnit.SECONDS);
+    Assert.assertTrue(
+        String.format("%s Sync completed", serverState),
+        complete);
+  }
+}
diff --git a/src/java/test/org/apache/zookeeper/test/QuorumBase.java b/src/java/test/org/apache/zookeeper/test/QuorumBase.java
index c846c45..e32844f 100644
--- a/src/java/test/org/apache/zookeeper/test/QuorumBase.java
+++ b/src/java/test/org/apache/zookeeper/test/QuorumBase.java
@@ -43,6 +43,8 @@ import org.junit.Test;
 public class QuorumBase extends ClientBase {
     private static final Logger LOG = LoggerFactory.getLogger(QuorumBase.class);
 
+    private static final String LOCALADDR = "127.0.0.1";
+
     File s1dir, s2dir, s3dir, s4dir, s5dir;
     QuorumPeer s1, s2, s3, s4, s5;
     protected int port1;
@@ -136,29 +138,29 @@ public class QuorumBase extends ClientBase {
         int syncLimit = 3;
         HashMap<Long,QuorumServer> peers = new HashMap<Long,QuorumServer>();
         peers.put(Long.valueOf(1), new QuorumServer(1, 
-                new InetSocketAddress("127.0.0.1", port1 + 1000),
-                new InetSocketAddress("127.0.0.1", portLE1 + 1000),
-                new InetSocketAddress("127.0.0.1", portClient1),
+                new InetSocketAddress(LOCALADDR, port1 + 1000),
+                new InetSocketAddress(LOCALADDR, portLE1 + 1000),
+                new InetSocketAddress(LOCALADDR, portClient1),
                 LearnerType.PARTICIPANT));
         peers.put(Long.valueOf(2), new QuorumServer(2, 
-                new InetSocketAddress("127.0.0.1", port2 + 1000),
-                new InetSocketAddress("127.0.0.1", portLE2 + 1000),
-                new InetSocketAddress("127.0.0.1", portClient2),
+                new InetSocketAddress(LOCALADDR, port2 + 1000),
+                new InetSocketAddress(LOCALADDR, portLE2 + 1000),
+                new InetSocketAddress(LOCALADDR, portClient2),
                 LearnerType.PARTICIPANT));
         peers.put(Long.valueOf(3), new QuorumServer(3, 
-                new InetSocketAddress("127.0.0.1", port3 + 1000),
-                new InetSocketAddress("127.0.0.1", portLE3 + 1000),
-                new InetSocketAddress("127.0.0.1", portClient3),
+                new InetSocketAddress(LOCALADDR, port3 + 1000),
+                new InetSocketAddress(LOCALADDR, portLE3 + 1000),
+                new InetSocketAddress(LOCALADDR, portClient3),
                 LearnerType.PARTICIPANT));
         peers.put(Long.valueOf(4), new QuorumServer(4, 
-                new InetSocketAddress("127.0.0.1", port4 + 1000),
-                new InetSocketAddress("127.0.0.1", portLE4 + 1000),
-                new InetSocketAddress("127.0.0.1", portClient4),
+                new InetSocketAddress(LOCALADDR, port4 + 1000),
+                new InetSocketAddress(LOCALADDR, portLE4 + 1000),
+                new InetSocketAddress(LOCALADDR, portClient4),
                 LearnerType.PARTICIPANT));
         peers.put(Long.valueOf(5), new QuorumServer(5, 
-                new InetSocketAddress("127.0.0.1", port5 + 1000),
-                new InetSocketAddress("127.0.0.1", portLE5 + 1000),
-                new InetSocketAddress("127.0.0.1", portClient5),
+                new InetSocketAddress(LOCALADDR, port5 + 1000),
+                new InetSocketAddress(LOCALADDR, portLE5 + 1000),
+                new InetSocketAddress(LOCALADDR, portClient5),
                 LearnerType.PARTICIPANT));
         
         if (withObservers) {
@@ -262,6 +264,17 @@ public class QuorumBase extends ClientBase {
       return -1;
     }
 
+    public String getPeersMatching(ServerState state) {
+      StringBuilder hosts = new StringBuilder();
+      for (QuorumPeer p : getPeerList()) {
+        if (p.getPeerState() == state) {
+          hosts.append(String.format("%s:%d,", LOCALADDR, p.getClientAddress().getPort()));
+        }
+      }
+      LOG.info("getPeersMatching ports are {}", hosts);
+      return hosts.toString();
+    }
+
     public ArrayList<QuorumPeer> getPeerList() {
         ArrayList<QuorumPeer> peers = new ArrayList<QuorumPeer>();
         peers.add(s1);
@@ -290,29 +303,29 @@ public class QuorumBase extends ClientBase {
             peers = new HashMap<Long,QuorumServer>();
 
             peers.put(Long.valueOf(1), new QuorumServer(1, 
-                new InetSocketAddress("127.0.0.1", port1 + 1000),
-                new InetSocketAddress("127.0.0.1", portLE1 + 1000),
-                new InetSocketAddress("127.0.0.1", portClient1),
+                new InetSocketAddress(LOCALADDR, port1 + 1000),
+                new InetSocketAddress(LOCALADDR, portLE1 + 1000),
+                new InetSocketAddress(LOCALADDR, portClient1),
                 LearnerType.PARTICIPANT));
             peers.put(Long.valueOf(2), new QuorumServer(2, 
-                new InetSocketAddress("127.0.0.1", port2 + 1000),
-                new InetSocketAddress("127.0.0.1", portLE2 + 1000),
-                new InetSocketAddress("127.0.0.1", portClient2),
+                new InetSocketAddress(LOCALADDR, port2 + 1000),
+                new InetSocketAddress(LOCALADDR, portLE2 + 1000),
+                new InetSocketAddress(LOCALADDR, portClient2),
                 LearnerType.PARTICIPANT));
             peers.put(Long.valueOf(3), new QuorumServer(3, 
-                new InetSocketAddress("127.0.0.1", port3 + 1000),
-                new InetSocketAddress("127.0.0.1", portLE3 + 1000),
-                new InetSocketAddress("127.0.0.1", portClient3),
+                new InetSocketAddress(LOCALADDR, port3 + 1000),
+                new InetSocketAddress(LOCALADDR, portLE3 + 1000),
+                new InetSocketAddress(LOCALADDR, portClient3),
                 LearnerType.PARTICIPANT));
             peers.put(Long.valueOf(4), new QuorumServer(4, 
-                new InetSocketAddress("127.0.0.1", port4 + 1000),
-                new InetSocketAddress("127.0.0.1", portLE4 + 1000),
-                new InetSocketAddress("127.0.0.1", portClient4),
+                new InetSocketAddress(LOCALADDR, port4 + 1000),
+                new InetSocketAddress(LOCALADDR, portLE4 + 1000),
+                new InetSocketAddress(LOCALADDR, portClient4),
                 LearnerType.PARTICIPANT));
             peers.put(Long.valueOf(5), new QuorumServer(5, 
-                new InetSocketAddress("127.0.0.1", port5 + 1000),
-                new InetSocketAddress("127.0.0.1", portLE5 + 1000),
-                new InetSocketAddress("127.0.0.1", portClient5),
+                new InetSocketAddress(LOCALADDR, port5 + 1000),
+                new InetSocketAddress(LOCALADDR, portLE5 + 1000),
+                new InetSocketAddress(LOCALADDR, portClient5),
                 LearnerType.PARTICIPANT));
         }
         
@@ -409,4 +422,9 @@ public class QuorumBase extends ClientBase {
         CountdownWatcher watcher = new CountdownWatcher();
         return createClient(watcher, hp);
     }
+
+    protected TestableZooKeeper createClient(CountdownWatcher watcher, ServerState state)
+        throws IOException, InterruptedException {
+      return createClient(watcher, getPeersMatching(state));
+    }
 }, -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12620284/ZOOKEEPER-1851.patch
  against trunk revision 1552946.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 5 new or modified tests.

    -1 patch.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1861//console

This message is automatically generated., Re-formatted. Apparently git diffs don't fly here., +1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12620524/ZOOKEEPER-1851.patch
  against trunk revision 1552946.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 5 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1864//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1864//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1864//console

This message is automatically generated., Thanks for the fix, this is my bad. I will take a look and commit it.  It is quite strange that none of the existing unit test catch this, [~thawan], [~phunt], [~michim]: ping?, -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12620524/ZOOKEEPER-1851.patch
  against trunk revision 1605509.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 5 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2148//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2148//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2148//console

This message is automatically generated., Hi Chris Chen,

Nice test cases.

Just few comments to improve  'QuorumRequestPipelineTest.java' test class.

# Please add Apache License Header to it.
# Indent should be four spaces per level, presently its with two spaces. Please refer [HowToContribute|https://cwiki.apache.org/confluence/display/ZOOKEEPER/HowToContribute]
# Please use bigger value (30secs ?) allComplete.await(1, TimeUnit.SECONDS); to make it more reliable. If the h/w is slow still give the test a chance to pass.
# Suggestion, please modify the HashSet usage by making it generic type HashSet<String>, Updated tests, fixed formatting., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12653240/ZOOKEEPER-1851.patch
  against trunk revision 1606841.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 5 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2166//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2166//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2166//console

This message is automatically generated., Chris Chen Thanks for the update, now it looks better.

For the Point-4, I was thinking to make HashSet generic. Following places we could use like,
{code} 
 protected final static HashSet<String> CHILDREN = new HashSet<String>(Arrays.asList("1", "2", "3"));

 new HashSet<String>(zkClient.getChildren(PARENT_PATH, false))

 new HashSet<String>(zkClient.getChildren(PARENT_PATH, false, null))
{code}, Change HashSet creation., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12653431/ZOOKEEPER-1851.patch
  against trunk revision 1606841.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 5 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2168//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2168//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2168//console

This message is automatically generated., [~rakeshr] anything else you need?, Thanks Chris Chen, +1 latest patch looks nice., Hi All, I'd like to get one more +1 to commit given the criticality of the bug. Anyone have a chance to see this. Thanks!, +1, patch lgtm plus we've had it in prod internally for quite some time. Thanks for the review, [~rakeshr]., Thanks [~rgs] for the feedback.

Attaching the patch again to get latest QA report. I'll commit if there is no findbug problems related to this patch., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12656415/ZOOKEEPER-1851.patch
  against trunk revision 1611516.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 5 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    -1 findbugs.  The patch appears to introduce 87 new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2197//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2197//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2197//console

This message is automatically generated., Thanks [~cchen] for the patch.

Committed to trunk : http://svn.apache.org/viewvc?view=revision&revision=1611732, SUCCESS: Integrated in ZooKeeper-trunk #2378 (See [https://builds.apache.org/job/ZooKeeper-trunk/2378/])
ZOOKEEPER-1851. Follower and Observer Request Processors Do Not Forward create2 Requests (Chris Chen via rakeshr) (rakeshr: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1611732)
* /zookeeper/trunk/CHANGES.txt
* /zookeeper/trunk/src/java/main/org/apache/zookeeper/server/TraceFormatter.java
* /zookeeper/trunk/src/java/main/org/apache/zookeeper/server/quorum/CommitProcessor.java
* /zookeeper/trunk/src/java/main/org/apache/zookeeper/server/quorum/FollowerRequestProcessor.java
* /zookeeper/trunk/src/java/main/org/apache/zookeeper/server/quorum/ObserverRequestProcessor.java
* /zookeeper/trunk/src/java/test/org/apache/zookeeper/server/quorum/QuorumRequestPipelineTest.java
* /zookeeper/trunk/src/java/test/org/apache/zookeeper/test/QuorumBase.java
]