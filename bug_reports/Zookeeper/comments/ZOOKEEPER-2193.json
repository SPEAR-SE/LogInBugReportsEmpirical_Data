[Thanks [~Yasuhito Fukuda]. Would be great if you could suggest a patch.
BTW, I'm not sure that uniqueness of servers in the config is being checked during initial server boot either, not only in reconfig., I've created a patch for this issue.
When hostname and port are duplicate in joined ensemble node, it will be raised an exception.
This patch add validation for reconfig -add parameters, but it may not be exhaustive in other config processes.

Your comments would be appreciated., Hi [~Yasuhito Fukuda],

IIUC, there is a possibility of duplicated addresses for different purposes e.g. clientAddr of new node == electionAddr of existing node.

For checking duplication, 9 comparison per node pair would be required, I think., Thanks for the patch! here are some comments:

One can use reconfig -add to change the ports of a server dynamically, basically adding a server that is already in the system, with different ports. In that case it is possible that all the ports will be the same but one. To do this "nextServers.remove(qs.id);" removes the old spec of a server and the following line adds the new spec. To avoid checking a server against its old self,  I think that nextServers.remove(qs.id); should go before your checks.

Also, why do you need joinedServers, isn't nextServers defined above your code sufficient ?

[~michim], can you take a look as well ? do you know if the same address:port can be shared by different servers ? (please see comment above by [~Yasuhito Fukuda]), Hi [~shralex], [~mitake], thanks for your comments.
I have recreated patch to reflect your comments.
please see patch v2. 
loopback address(localhost/127.0.0.1) and wildCard address(0.0.0.0) may be same address:port by different servers, i think. So, I added the code to exclude them in validation., Thanks! I'll take a closer look tomorrow, but as I mentioned, the line " nextServers.remove(qs.id);" should probably go before your changes, not after, otherwise we won't be able to change a server's port., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12735241/ZOOKEEPER-2193-v2.patch
  against trunk revision 1680994.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2711//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2711//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2711//console

This message is automatically generated., Hi [~shralex], Thank you for comment and submitting test run.
I've added "if statement" for validation skip, in the case of configuration changes on the same server(ex. change port number).
Please see patch v3., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12735261/ZOOKEEPER-2193-v3.patch
  against trunk revision 1680994.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2712//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2712//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2712//console

This message is automatically generated., [~Yasuhito Fukuda] thank you for the patch! Could you post the patch to the reviewboard? https://reviews.apache.org/r/, 3 more minor comments:

1) I'm not sure that my == null can ever happen both because of the checks in the calling function and because the exclude... function also excludes null. 

2) Perhaps rename "existing" to something else since its not only existing its also the joiners that were processed before. For example if someone is adding multiple servers with the same command. Similarly the message in the thrown exception shouldn't say that the conflict is with one of the existing servers because it may be with one of the new ones. 

3) Consider making the message in the exception more specific - such as "port x of server #y conflicts with port x of server #z". , Hi [~michim], [~shralex], thanks for your comments.
I have created new patch reflected comments from Alexander, and posted on reviewboard.
Please see the review https://reviews.apache.org/r/35204/, Thanks for the patch [~Yasuhito Fukuda], commented on a few issues/nits on the reviewboard. , [~rgs] thanks for your review.
I posted new diff on the reviewboard., thanks [~Yasuhito Fukuda] - added some more comments. do you mind uploading the patch here as well, besides updating the reviewboard after you've updated the patch? that way CI can run and we can see if all passes and we can merge the patch. thanks!, thanks for your comment and review.
I posted Rev3 on the reviewboard.
https://reviews.apache.org/r/35204/

In addition, I attached three patches in JIRA now.
v4 and v5 are old patches only was posted on the reviewboard.
v6 is newest a patch., thanks for your comment and review.
I posted Rev3 on the reviewboard.
https://reviews.apache.org/r/35204/

In addition, I attached three patches in JIRA now.
v4 and v5 are old patches only was posted on the reviewboard.
v6 is newest a patch., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12739014/ZOOKEEPER-2193-v6.patch
  against trunk revision 1683878.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    -1 findbugs.  The patch appears to introduce 1 new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2761//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2761//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2761//console

This message is automatically generated., Thanks [~Yasuhito Fukuda] - do you get this failure when running the tests locally:

{code}
2015-06-11 08:24:41,482 [myid:] - INFO  [main:ZKTestCase$1@70] - FAILED testBadPeerAddressInQuorum
java.lang.AssertionError: complains about host
{code}

?, The 3 failures actually look related to the patch (and not general flakiness in CI):

{code}
org.apache.zookeeper.server.quorum.QuorumPeerMainTest.testBadPeerAddressInQuorum
org.apache.zookeeper.test.CnxManagerTest.testCnxManagerTimeout
org.apache.zookeeper.test.ReconfigTest.testUnspecifiedClientAddress
{code}

Do these pass locally for you [~Yasuhito Fukuda]?, I am sorry. I did not check the unit-test result carefully.
cause of the 3 failures were returned null by getAddress() in excludedSpecialAddress() when a hostname wasn't lookup by dns or an address is wrong.
I've attached the new patch. and, I've posted new diff on the reviewboard.
https://reviews.apache.org/r/35204/diff/3-4/, -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12740593/ZOOKEEPER-2193-v7.patch
  against trunk revision 1686296.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2773//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2773//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2773//console

This message is automatically generated., Patch lgtm, +1. A few more nits though (but I wouldn't block merging on them):

In:

{code}
+                        throw new KeeperException.BadArgumentsException(String.format("%s of server.%d conflicts %s of server.%d", my, this.id, other, s.id));
{code}

the line is too long, maybe use an intermediate assignment to make it more readable:

{code}
       String error = String.format("%s of server.%d conflicts %s of server.%d", my, this.id, other, s.id);
       throw new BadArgumentsException(error);
{code}

(also, you can just use BadArgumentsException without KeeperException. since it's imported).

In:

{code}
+        private List<InetSocketAddress> excludedSpecialAddress(List<InetSocketAddress> addrs) {
{code}

how about we call the method excludeSpecialAddresses given it's an action?

[~michim], [~shralex]: could you take another look as well?

Thanks [~Yasuhito Fukuda]!
, One last nit, in:

{code}
+                if (inetaddr == null) {
+                    continue;
+                // wildCard address(0.0.0.0)
+                } else if (inetaddr.equals(wcAddr)) {
+                    continue;
+                // loopback address(localhost/127.0.0.1)
+                } else if (inetaddr.isLoopbackAddress()) {
+                    continue;
+                } else {
+                    included.add(addr);
+                }
{code}

you could simplify things a bit by having:

{code}
                if (inetaddr == null ||
                    inetaddr.equals(wcAddr) ||
                    inetaddr.isLoopbackAddress()) {
                      continue;
                }

                included.add(addr);
{code}

Thanks again!, Thank you for your review. I attached v8 patch based on your comments.
and, I posted a new diff on the reviewboard.
https://reviews.apache.org/r/35204/diff/4-5/, -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12741214/ZOOKEEPER-2193-v8.patch
  against trunk revision 1686767.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2775//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2775//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2775//console

This message is automatically generated., Patch lgtm, +1. Thanks [~Yasuhito Fukuda]! Will wait for a final ack from [~shralex] since he is more familiar with these bits., +1 
thanks for the patch [~Yasuhito Fukuda]! and thanks [~rgs] for reviewing., [~shralex], [~Yasuhito Fukuda]: Sorry, one last thing. I think there might be an issue in assuming unique IDs:

{code}
+                               // check duplication of addresses and ports
+                               for (QuorumServer nqs: nextServers.values()) {
+                                   if (qs.id == nqs.id) {
+                                       continue;
+                                   }
+                                   qs.checkAddressDuplicate(nqs);
+                               }
{code}

Is in it valid for Observers to have their id set to -1? In that case, the check wouldn't be performed. Could we add a test case for that?
, A few more more nits since a test case will probably be needed, in:

{code}
+import org.apache.zookeeper.KeeperException;
+import org.apache.zookeeper.KeeperException.BadArgumentsException;
{code}

there's no need to import KeeperException, only BadArgumentsException is needed. And in:

{code}
-        
+        public List<InetSocketAddress> myAddrs;
+
{code}

myAddrs doesn't need to be public, it should be private.

Finally, if you are updating the patch one more time you might as well rename excludedSpecialAddresses to removeSpecialAddresses for clarity. Thanks!, Hi [~rgs].
Sorry, I don't understand. Why do observers's ids have -1 ?
Please tell me the details., I don't think reconfiguration will work with non-unique ids. I'm actually not sure that such observers would be in the config files. If I remember correctly an observer connects with -1 and then assigned an id by the system, but I'm not sure about the details, can someone explain ? not sure someone is using this mode. [~fpj][~phunt], I remember that we wired QCM so that we could assign ids to observers automatically, but frankly I can't remember having finished the feature. I believe we still require observers to have unique ids in the config, but I can do some investigation to be sure., We have added code to QCM so that observers could connect without providing a unique id, but I don't think the way we process configuration supports this feature currently. For example, we check if a peer is observing by checking the server id. The intent was to support this feature, though, to be able connect observers without having to change configuration., I'm not sure it would work with reconfig either. In any case, this should be discussed in a separate Jira (in case this is important to support)
, Ok - thanks for checking [~shralex] and [~fpj]. I'll go ahead and merge then. , I think it's been clarified below by [~fpj] and [~shralex] - we can ignore observers using non-unique (i.e.: -1) ids for now. I'll go ahead and merge. Thanks [~Yasuhito Fukuda]!, Merged:

https://github.com/apache/zookeeper/commit/86d9061bbd28e8230350146f64366f7e81519387
https://github.com/apache/zookeeper/commit/cca2a67578159a127c571a4b0abb4926e76a4dea

Thanks [~Yasuhito Fukuda]!, SUCCESS: Integrated in ZooKeeper-trunk #2739 (See [https://builds.apache.org/job/ZooKeeper-trunk/2739/])
ZOOKEEPER-2193: reconfig command completes even if parameter is wrong obviously
(Yasuhito Fukuda via rgs) (rgs: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1687876)
* /zookeeper/trunk/CHANGES.txt
* /zookeeper/trunk/src/java/main/org/apache/zookeeper/server/PrepRequestProcessor.java
* /zookeeper/trunk/src/java/main/org/apache/zookeeper/server/quorum/QuorumPeer.java
, [~fpj], [~shralex], [~rgs], Thanks to you I was able to understand the feature and the current status of the feature.
Thanks for merge, [~rgs]!!]