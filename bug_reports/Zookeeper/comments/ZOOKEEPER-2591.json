[{{OpCode.deleteContainer}} is asynchronously deleted by {{ContainerManager.checkContainers()}} and it doesn't need to check the ACL because it performs a garbage collection if the znode is empty. Therefore, a client delete operation is issued as a {{OpsCode.delete}} and handled as usual, including the ACL checking. The first example posted on this issue was also wrong in that delete does check the ACL rights of the parent nor the child., IMO, OpCode.deleteContainer request can be initiated from client even though there is no explicit API in Zookeeper.java. 
In that case if ACL check is bypassed, node can be deleted by any user. So ACL check must be present if request is originated from client and ACL check can be skipped if request is system internal. , [~Bhupendra] If DeleteContainer had a client API then ACL would make sense. But, the automatic version has no client associated with the operation and therefore there is no ACL/Auth to apply.

Note: you _can_ delete containers from the client via normal delete() command and the ACL is respected., I agree that DeleteContainer client API is not provided but what If a malicious user creates the DeleteContainer request by his own and sends to server ? do server have any check to safeguard against this ? , Yeah, I guess that could happen. IMO it isn't a big deal. ZooKeeper applications are expecting these nodes to disappear after a while. The server only deletes the node if it has no children. , Right, But What if the malicious user deletes this node as soon as it gets created. In that case the applications which tries to create children inside this parent node, will fail. Its rare case but quite possible. 
, That's an extreme edge case but it is possible. We can prevent that by enforcing the container check of "node.stat.getCversion() > 0" - that would be a lot easier than adding an ACL check in PrepRequestProcessor's handling of OpCode.deleteContainer, [~randgalt], another edge case would be the following: a client create a container znode and populate it with children znodes. This client is the only in charge of deleting the children. Another clients should only be able to read the children znode contents, but a misbehaved client can delete children znodes in the container znode. With ACL properly set this other clients would not be able to delete the children of the master client. Does it make sense?, [~eribeiro] - I don't follow. The container node is created with an ACL. It uses the same create() method as normal node creation. A rogue client cannot delete child nodes without proper Auth., [~randgalt], oops, excuse me! I didn't look at this issue nor this part of the code since the issue was closed. My misunderstanding was because this line:

https://github.com/apache/zookeeper/blob/a0eba7abd002498631da8d8127261c297c911590/src/java/main/org/apache/zookeeper/server/PrepRequestProcessor.java#L402

was not present in this block:

https://github.com/apache/zookeeper/blob/a0eba7abd002498631da8d8127261c297c911590/src/java/main/org/apache/zookeeper/server/PrepRequestProcessor.java#L375-L392

*So, even though the creation follows the same path, the container deletion has a different one.*

But I totally agree with you that this issue can not be worth working on, or could use something different from adding a checkACL. :)

, container deletion, itself, is different yes. But, my point is that ZooKeeper clients expect containers to disappear so there's no real security risk. The only edge case I can see is a rogue client quickly deleting a container. We can fix that edge case by applying the logic as I describe above., Cool, got it. It is the only edge case previously described and your solution is nice. Excuse me for disturbing the talk with a spurious example., Adding  "node.stat.getCversion() > 0" check makes sense to me. anybody submitting patch? I will review it., About solution to have a check node.stat.getCversion() > 0 , I have one doubt . Lets consider a scenario as below 

1. create container node 
2. create child1
3. delete child1
   cVersion = 1 , child count = 0

4. create child2
5. delete child2
6. cVersion = 2, child count = 0
7. Timer triggers and deletes container node 

What if malicious user deletes the container node after step 3. I agree that after step 3 even if system timer runs it will delete the container node too ... But then why allow malicious user to delete at all ... 

In my opinion we can have a internal Boolean in Request object which marked as true by ContainerManager and false for all other cases. We can skip the ACL check only if Boolean if true. Does it make sense ?, Guys, Any thoughts on this ... , [~Bhupendra] - I don't understand how that would work. Any field that ContainerManager adds to the Request object could also be added by a rogue client. Can you give an example of how this would work?

Another possibility is to somehow disallow OpCode.deleteContainer coming from a connected client., As I understand, Request object  (org.apache.zookeeper.server.Request) is created in server side only.  Idea was to have boolean to indicate the type of request like system internal request or client request.  Since this boolean will be set only by server so client can not control this. We can also do this by some other way like extend Request to create DeleteContainerRequest and check the request oject instance type in prepRequestProcessor and then skip the ACL for system generated request.

{quote}
Another possibility is to somehow disallow OpCode.deleteContainer coming from a connected client.
{quote}

I agree your idea  to disallow deleteContainer request from client completely. That way there is no need to add ACL check . I think we can check this in processPacket() method before submitting the request to request Processor., I think preventing deleteContainer from clients is the best bet. We could even have a class of opcodes that are marked "internal only".]