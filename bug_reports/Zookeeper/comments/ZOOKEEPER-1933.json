[Hi there, Are you building from trunk? We have actually come across this bug, let me try to get a patch uploaded soon., Yes, this was built from trunk.
Thanks!, The attached patch fixes two issues with select() processing on Windows:

# File descriptors can go bad when sockets are closed and will cause select() to fail so these should be removed from the descriptor sets.
# If select() fails the interest argument to zookeeper_process() should be zero.

The error in the Jira description is similar to something we experienced internally and this patch worked for us. Please try [~norrisl].

, -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12649569/ZOOKEEPER-1933.patch
  against trunk revision 1601516.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2127//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2127//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2127//console

This message is automatically generated., Fix missing an argument to LOG_ERROR bringing changes forward., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12649671/ZOOKEEPER-1933-2.patch
  against trunk revision 1601516.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    -1 patch.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2128//console

This message is automatically generated., Patch doesn't apply cleanly, cancelling until we fix it., Fix path in patch v2., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12649770/ZOOKEEPER-1933-3.patch
  against trunk revision 1601516.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2136//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2136//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2136//console

This message is automatically generated., [~oho], this is roughly what I was thinking about for the test, does it work for you? One problem is checking if it actually fails on Windows given that I don't know how to run the C tests there., [~fpj] This compiles fine here on Windows. Need to get tests lit up on Windows, but haven't started trying to find a solution for this yet.

I might be tempted to tweak the patch slightly:

- move the loop_count (io_ticks?) as a counter into the _zhandle struct and have it increment in do_io() unconditionally.
- change the counter to be volatile.
- change the test to only read the count value and look at the number of io_ticks elapsed during the test.

, I was originally going to do what you're suggesting, but it didn't feel necessary to having it counting if we aren't testing. The downside of doing the way I did is introducing more changes. Also, I think you're trying to point out that this could be used for monitoring/debugging as well, which I agree.

Do you want me to make the changes or do you want to tweak it yourself? I'm happy either way.
, If you have cycles, could I defer this to you (or pick it up in a couple of days)? There's some pressure on other stuff here at the moment., Made agreed changes., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12652194/ZOOKEEPER-1933.patch
  against trunk revision 1601516.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 4 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2145//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2145//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2145//console

This message is automatically generated., Hi [~fpj],

A couple of things:

in src/c/src/mt_adaptor.c, is this a leftover of debugging?
{noformat}
 #include "zk_adaptor.h"
+#include "zk_test.h"
 #include "zookeeper_log.h"
{noformat}

can't see zk_test.h anywhere. But then, it's included in the test file you modified, but I can't see the include file there either. 

In:

{noformat}
+        else if (rc < 0)
+        {
+            LOG_ERROR(LOGCALLBACK(zh), ("select() failed %d [%d].", rc, WSAGetLastError()));
+
+            // Clear interest events for zookeeper_process if select() fails.
+            interest = 0;
+        }
{noformat}

is that the right way to deal with select() errors? Should we not call:

{noformat}
        if(is_unrecoverable(zh))
            break;
{noformat}

or just break directly?

and finally a small nit, feel free to not take it:

spacing between `?` and `:` operators for readability, please:
{noformat}
+            interest = (FD_ISSET(fd, &rfds))? ZOOKEEPER_READ:0;
+            interest|= (FD_ISSET(fd, &wfds))? ZOOKEEPER_WRITE:0;
{noformat}
, Hi Raul, I'm responsible for the change in select() and also a relative neophyte in the ZooKeeper code.

From scanning the patch alone, it may not be obvious but there is an isunrecoverable() check in the same loop do_io() loop. It's comes just after zookeeper_process().

Previously there was no error checking in the Win32 case for select(). The issue we've seen with select() is when the socket is remotely closed and then the descriptor is bad and so select() fails without waiting - there is no change in state at this point, just a bad descriptor. It used to be the descriptor was never removed from the fd_set's and so it'd burn CPU. The variable interest in the loop serves two purposes and because it wasn't zeroed out in the case of error, there'd be a socket error and then the code would attempt to process I/O on the socket and then fail there. With the change here, we see sessions being re-established as expected.

Thanks
Orion, Hi [~oho], thanks for the follow-up (and sorry for the slow reply). 

So:

bq.From scanning the patch alone, it may not be obvious but there is an isunrecoverable() check in the same loop do_io() loop. It's comes just after zookeeper_process().

Yeah, exactly my point.. does it need to be done before zookeeper_process()? Maybe not, according to your tests.

Besides this, mind updating the patch to have it reflect my other two comments please?, bq. does it need to be done before zookeeper_process()?

I'm not sure what you're trying to say here. In the case of an error, it clears interest. Are you saying this is not sufficient, broken or something else I'm missing?

bq.  Maybe not, according to your tests.

Which tests are you talking about? the test case? I have added that one, so it is possible I have misunderstood something.

The other ones as small changes, but we need to clear up all changes before we go and generate a new patch., bq. I'm not sure what you're trying to say here. In the case of an error, it clears interest. Are you saying this is not sufficient, broken or something else I'm missing?

I wasn't sure if zookeeper_process() dealt correctly with the error condition. 

bq. Which tests are you talking about? the test case? I have added that one, so it is possible I have misunderstood something.

I meant you exercised the code, but as you mentioned and now that I actually looked in more detail zookeeper_process() *does* the check:

{noformat}
int zookeeper_process(zhandle_t *zh, int events)
{
    buffer_list_t *bptr;
    int rc;

    if (zh==NULL)
        return ZBADARGUMENTS;
    if (is_unrecoverable(zh))
        return ZINVALIDSTATE;
{noformat}

So it generally lgtm, +1. An updated patch with the missing header file would be good for a last read though. Thanks [~oho] and [~fpj]., Got it, thanks for the clarification, [~rgs], I'll produce a new patch with the changes., [~fpj] any update on this? Thanks., This seems like it's pretty serious (per the subject) and we have a bit of time, any chance we can get this into 3.5.0? [~fpj] , [~michim], [~rgs], et. al.?, Attaching new patch., lgtm, +1. some nits though, take them or leave them:

{noformat}
+        rc = select(/* unused */0, &rfds, &wfds, NULL, &tv);
+        if (rc > 0) 
+        {
{noformat}

I think

{noformat}
if (rc > 0) {
{noformat}

is more consistent with the rest of the file (i.e.: the prev if block, etc.).

{noformat}
+            interest=(FD_ISSET(fd, &rfds))?ZOOKEEPER_READ:0;
+            interest|=(FD_ISSET(fd, &wfds))?ZOOKEEPER_WRITE:0;
+
{noformat}

spaces around =, |=, ? and : please.

{noformat}
+            if (FD_ISSET(adaptor_threads->self_pipe[0], &rfds)){
{noformat}

space between ) and { please.

{noformat}
+        else if (rc < 0)
+        {
{noformat}

should be

{noformat}
else if (rc < 0) {
{noformat}

for code style consistency.

And finally:

{noformat}
+
+    void testBadDescriptor() {
+        int zrc = 0;
+        watchctx_t *ctx;
+        zhandle_t *zh = zookeeper_init(hostPorts, NULL, 10000, 0, ctx, 0);
+        sleep(1);
+	zh->io_count = 0;
+	//close socket
+	close(zh->fd);
+	sleep(1);
+	//Check that doIo isn't spinning
+	CPPUNIT_ASSERT(zh->io_count < 2);
+        zookeeper_close(zh);
+    }
{noformat}

has weird indentation - mixing tabs and spaces perhaps?
, -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12657717/ZOOKEEPER-1933.patch
  against trunk revision 1613326.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 4 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2231//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2231//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2231//console

This message is automatically generated., Fixed the issues [~rgs] pointed out. The spaces after ? and : are used inconsistently across the code. A few lines up, for example, there are lines of code without spaces. I've added them for this patch because I agree with you about the readability, but I just wanted to warn that it isn't very consistent at the moment., I just got another tab, uploading a new patch., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12657805/ZOOKEEPER-1933.patch
  against trunk revision 1613328.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 4 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2234//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2234//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2234//console

This message is automatically generated., +1, lgtm. Thanks [~fpj]., Committed to trunk. Thanks Orion & Flavio, Raul, Norris, et. al. !, FAILURE: Integrated in ZooKeeper-trunk #2386 (See [https://builds.apache.org/job/ZooKeeper-trunk/2386/])
ZOOKEEPER-1933. Windows release build of zk client cannot connect to zk server (Orion Hodson via fpj, phunt) (phunt: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1613474)
* /zookeeper/trunk/CHANGES.txt
* /zookeeper/trunk/src/c/src/mt_adaptor.c
* /zookeeper/trunk/src/c/src/zk_adaptor.h
* /zookeeper/trunk/src/c/src/zookeeper.c
* /zookeeper/trunk/src/c/tests/TestClient.cc
]