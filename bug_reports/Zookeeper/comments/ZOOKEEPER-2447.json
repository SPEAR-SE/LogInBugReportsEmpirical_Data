[Attaching the logs for more debugging with change and without change. i have the patch ready and submit it whenever required., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12811807/ZOOKEEPER-2447.3.5.patch
  against trunk revision 1748630.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    -1 patch.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3192//console

This message is automatically generated., Can someone please look into the bug and provide their comment ?, Hi [~vishk], a couple of comments below.

{code}
if (taddr.isReachable(3000) {
   tmpList.add(new InetSocketAddress(taddr, address.getPort()));
} 
{code}

What could be a reasonable value? I mean, 3 or 4 seconds can be nice for a LAN but cannot be enough to a cloud environment, I guess. In other words, I think this value should be configurable.

Also, looking at InetAddress API docs, it looks like {{InetAddress#isReachable}} we see this:

{quote}
Best effort is made by the implementation to try to reach the host, but firewalls and server configuration may block requests resulting in a unreachable status while some specific ports may be accessible. A typical implementation will use ICMP ECHO REQUESTs if the privilege can be obtained, otherwise it will try to establish a TCP connection on port 7 (Echo) of the destination host.
{quote}

That is, {{isReachable}} implementation is platform dependent and can be very brittle even when all machines are on the same network. A quick Google search for "Inetaddress + isreachable + problems" shows that sometimes it can return false even when the machine is accessible via ping (see "firewalls and server configuration may block requests resulting in a unreachable status while some specific ports may be accessible" above).

wdyt?
, I think this is an optimization and my question is does this optimization worth the effort :-) does introduce another timeout at a higher level of the stack help reduce the delay? I am curious to see if there is any product scenario / data that could back up this change, because it seems to me that the time savings would depend on the values of current connection timeout and the value this patch fed into isReachable. Also, as Edward pointed out, the timeout value should be configurable instead of hardcoded (and documentation needs updated as well.)., From my point of view this isn't an optimization, it's a fix for a multi second stall for low latency use cases. Waiting for the combined connection timeouts and retries blows out low latency SLAs on our production HBase clusters, for example. This behavior should be configurable. 

Agreed with the comment that the hardcoded value in the patch isn't what we want. It should be configurable. And I'd want to set it smaller than the current value. 
, Hi [~andrew.purtell@gmail.com], my concern is not the feature itself -- it is cool --, but the use of {{InetAddress#isReachable()}} because it seems to have had caused some problems in the past, that is, always returning false or true in spite of the real reachability, as seen below:

http://stackoverflow.com/questions/4779367/problem-with-isreachable-in-inetaddress-class

Of course, the SO threads that relate similar problems are usually old (five to ten years old!), so this could not be a problem anymore, but we must acknowledge this possible limitation. An alternative would be to roll out our own equivalent of {{InetAddress#isReachable()}} as I scribbled below? Wdyt?

{code}
    private boolean isReachable(InetAddress address, int port, int timeout) {
        if (timeout < 0)
           IllegalArgumentException("Timeout cannot be less than zero");

        Socket socket = new Socket();
        try {
            socket.connect(new InetSocketAddress(address, port), timeout);
        }
        catch (IOException e) {
            return false;
        }
        finally {
            try {
                socket.close();
            } catch (IOException e) {
                // Ignore any errors
            }
        }
        return true;
    }
}
{code}
, bq. An alternative would be to roll out our own equivalent of {{InetAddress#isReachable()}} as I scribbled below? 
Makes sense. , Given that the goal is to open a socket, implementing an isReachable() method which is just opening a socket with a timeout seems wasteful. It will add unnecessary additional latency (the RTT latency for TCP handshake) and overhead to every connection, even successful ones where the ensemble isn't suffering due to a down host; it'll also put a little extra load on the servers, not just clients. Would it make sense to make ClientCnxnSocket.open() implementations apply the timeout directly?

As far as choosing the connection timeout to use, I would suggest just using the time-sliced session timeout (I thought this was already done, but perhaps it's only applied later in the connection handshake?) but applying some reasonable lower bound (say, default of 1 second and overridable by a Java system property). We actually have a fork of the ZK code which has that minimum bound for connection timeout logic in the Java client, and I'd be happy to prepare a patch for that part. It's pretty trivial code, but it's important if you start using a combination of large ZK clusters and very small session timeouts, which we have in some of our ensembles., {quote}
 It will add unnecessary additional latency (the RTT latency for TCP handshake) and overhead to every connection, even successful ones where the ensemble isn't suffering due to a down host; it'll also put a little extra load on the servers, not just clients.
{quote}

Hi [~dbenediktson], 

Yeah... I was aware of the extra pressure on the servers and, to some degree, the cost of opening a ephemeral TCP connection on each server of my proposed workaround. :( OTOH, {{InetAddress#isReachable()}} (quoting javadocs) will: {quote} (try to) use ICMP ECHO REQUESTs if the privilege can be obtained, otherwise it will try to establish a TCP connection on port 7 {quote}

If [~vishk] don't oppose, I am more than happy to see your patch for that part. :) In the meanwhile, I will dig {{ClientCnxnSocket}} further more following your guidelines.

Cheers,
Ed, I see, thanks for pointing out this use case. , [~eribeiro] : did you tey this solution when a host is valid but it is shutdown. because in method "ClientCnxnSocketNIO.registerAndConnect" makes a call to SocketChannel.connect and it always passes whether the host is reachable or not. If it would have worked then we did not have to wait for host timeout incase shutdown hsot scenario., [~eribeiro] : I will also be happy to look at the fix. It's always good to fix the problem in the right fashion. I also got the limitation of  "InetAddress#isReachable()" method wrt firewall but could not find a better solution for that. even with socket connect in my case did not work :(.

There would additional requirement of changing the design little as there is not provision to add the failed host back into the list yet. I opened JIRA here but did not get time to work on that :  ZOOKEEPER-2449 May be [~dbenediktson] fix will help to get rid of "ZOOKEEPER-2449" as well., I have a patch file for the minConnectTimeout enforcement ready, but I don't seem to be able to attach it to this issue - should I create a separate issue assigned to myself for that one part? Sorry for the novice questions, my first time attempting to contribute., [~dbenediktson], seems you are not in a 'contributor' role so you can't be assigned to this issue (I tried to assign this issue to you but your id was not in the list). One of the committers should have permission to assign role 'Contributor' to your ID and then you can assign this issue to yourself and after that you can submit patches.

Some context info on Apache JIRA permission workflow:
- For a given JIRA issue, only *reporter*, or *assignee*, or *committer* can attach file.
- A contributor can only attach files to issues that's assigned and/or reporting to the contributor.
- A workaround for a contributor to attach files to any issue is to first change assignee to the contributor, then attach files, then change the assignee back.
, Attaching patch for the MinConnectTimeout feature (kind of an auxiliary for the overall problem here), Attaching patch for "MinConnectTimeout" enforcement - kind of an auxiliary for this issue. , -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12817185/ZOOKEEPER-2447-MinConnectTimeoutOnly.patch
  against trunk revision 1750739.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3270//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3270//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3270//console

This message is automatically generated., The failures appear to be unrelated to the changes:

junit.framework.AssertionFailedError: Unexpected bean exists! expected:<0> but was:<1>
	at org.apache.zookeeper.test.ClientBase.verifyUnexpectedBeans(ClientBase.java:498)
	at org.apache.zookeeper.test.ClientBase.startServer(ClientBase.java:477)
	at org.apache.zookeeper.test.ClientBase.setUp(ClientBase.java:460)
	at org.apache.zookeeper.test.WatcherTest.setUp(WatcherTest.java:73)

And the same tests are passing locally for me., [~dbenediktson] [~vishk] [~hanm] [~eribeiro] thank you all for working on a patch and reviewing. I'm a bit confused about the state of this issue. The initial patch by Vishal proposed to check if the host is reachable in {{StaticHostProvider.resolveAndShuffle}}. That is supposed to avoid servers that are down at the time we execute {{resolveAndShuffle}}.

Unless I'm missing something, the latest patch does not seem to be addressing the issue described here. It doesn't reduce the delay to connect to some server. Instead, it sets a lower bound for the connection timeout.

I don't think the approach of testing that server is reachable is bad because we don't have to do it often, only in the beginning and as we hit unavailable servers. We also need to be careful to not exclude unavailable servers permanently from the list of servers, you might and will probably come back eventually., Canceling patch to address issues. , Correct, I don't think there is a patch in a completed state.

The patch I provided was just to avoid a specific problem during the most recent proposed solution: the problem where you try to connect using only a slice of the connection time, but the chosen slice is too small to reasonably expect a connection to succeed. I think [~eribeiro] offered to look at a comprehensive solution, so I'm assigning over to him for the time being., Yeah I also looked into patch. The problem i described in the JIRA and fix in patch are totally different. The way i would like to solve the problem is reducing the connectTimeout to a lower Value as compared to sessionTimeout/quorum size. That is place when I was debugging I found the delay. I agree with folks that "taddr.isReachable" might not work in every situation. We observe that in our environment as well. Where server in not pingable but zookeeper connection can work. I tried to fix by reducing the connecttiemout to a lower or fixed value.so bad host can be caught quickly and also it is not removed part of the list. In net iteration it will checked for conenction again. I would submit the patch tomorrow on this if people agree. Tried it already on our clusters., Thanks [~vishk].  As Vishal is actively working on a fix for the issue we reported, can we have this assigned back to him? Thanks, Done. Is that ok with you [~eribeiro]? , Hey [~fpj], no problem at all! :) Feel free to work on it [~vishk].

PS: I was absent last month (surgery & vacation), but getting back now. Still catching up with the latest ZK issues. :), Cool, looking forward to it. :) *thumbs up*, are we still planning on a fix for this issue? cc [~eribeiro] [~vishk], I have already provided the changes to our internal fork and validate the same. I shall updated the changes here too, Submitted the patch for fixed timeout for zookeeper connection, -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12832829/ZOOKEEPER-2447.branch-3.4.00.patch
  against trunk revision f78061aafb19b102c37cb6d744ec6258d5f5b66e.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    -1 patch.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3484//console

This message is automatically generated., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12832837/ZOOKEEPER-2447.branch-3.4.00.patch
  against trunk revision f78061aafb19b102c37cb6d744ec6258d5f5b66e.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    -1 patch.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3486//console

This message is automatically generated., This failed during merging to master. not sure how to restrict build to run only 3.4 branch. I did follow the naming convention as well., Fixing the indenatation. , -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12832853/ZOOKEEPER-2447.branch-3.4.01.patch
  against trunk revision f78061aafb19b102c37cb6d744ec6258d5f5b66e.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    -1 patch.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3487//console

This message is automatically generated., [~fpj] [~eribeiro]. Can you look at the patch.
Thanks., [~vishk] will do, thanks for the heads up.]