[cc: [~michim], The current tests for removeWatches already cover this since this is just an extra server side validations to ensure correctness with other implementations. , -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12639493/ZOOKEEPER-1909.patch
  against trunk revision 1585371.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2030//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2030//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2030//console

This message is automatically generated., +1 Thank you for the patch, Raul. I'll wait for Pat and Rakesh to look at the patch before checking in., Thanks [~rgs] for pointingout the usecase. Could you please clarify the following:

I hope this is a kind of notification is "in flight", say just before submitting the call to server, client recieves the watch notification. Now otherside server will not be able to see the watch anymore. isn't it ?

In client side, we have two phase validation (1)before submitting the call to server and (2)after recieving the response from server. Also we know in server side it will ensure orderly exec. (2)After recieving the success response from server, again client will be checking whether I can remove the requested watcher. If yes, it continues with 'WatchRemoval' notification otherwise it throws 'NoWatcherException' to the user. 

In our case, since the client would have recieved the watch notification before the success response and now the (2) validation would be able to throw NoWatcherException, what do you say?   Also, could you please tell me whether you have observed this case in tests ?, bq. I hope this is a kind of notification is "in flight", say just before submitting the call to server, client recieves the watch notification. Now otherside server will not be able to see the watch anymore. isn't it ?

That's one possibility, yes.

bq. In client side, we have two phase validation (1)before submitting the call to server and (2)after recieving the response from server. Also we know in server side it will ensure orderly exec. (2)After recieving the success response from server, again client will be checking whether I can remove the requested watcher. If yes, it continues with 'WatchRemoval' notification otherwise it throws 'NoWatcherException' to the user. 

Yeah that is fine as well, but even if a client-side impl doesn't do that - the server should do the check.

bq. Also, could you please tell me whether you have observed this case in tests ?

Oh, not in the Java tests - just when I was implementing this in Kazoo. , bq. Yeah that is fine as well, but even if a client-side impl doesn't do that - the server should do the check
OK, so this is like good to have validation in server side. Can we add test case in server side alone, like in DataTreeTest.java or in somother place ?, Added a test case. It is a bit more convoluted than what I would have wanted, *but* - we need to jump through two hoops to skip the client side validations before & after issuing the request. I think this is better than just writing a test against the DataTree though, since it's end-to-end.

Let me know what you guys think.

cc: [~rakeshr], [~michim], +1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12639643/ZOOKEEPER-1909.patch
  against trunk revision 1586200.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2036//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2036//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2036//console

This message is automatically generated., Thanks [~rgs], very nice test case:)

I've few more comments, sorry I failed to add few cases previously. Please see:

# Add path to the exception message, it would be helpful.
{code}
	throw new KeeperException.NoWatcherException();
{code}
# Consider a case where multiple clients added their watcher on same znode path. Now "list" will not be null, and I think, we need to see whether my "watcher" exists on the list. If not again throw exception no ? 
{code}
         HashSet<Watcher> list = watchTable.get(path);
         // ...
         list.remove(watcher);
{code}
# Also, in tests, can we catch specific exception KeeperException.NoWatcherException. 
{code}
+        try {
+            zk.removeWatches("/nowatchhere", null, WatcherType.Data, false);
+        } catch (KeeperException nwe) {
+            nw = true;
+        }
{code}
, Thanks for the review [~rakeshr], agreed on point 1 & 3. Though wrt #2:

bq. Consider a case where multiple clients added their watcher on same znode path. Now "list" will not be null, and I think, we need to see whether my "watcher" exists on the list. If not again throw exception no ?
{noformat}
         HashSet<Watcher> list = watchTable.get(path);
         // ...
         list.remove(watcher);
{noformat}

I agree, but not only that - we should do the same check for paths (the prev HashSet). Updating the patch. , Updated according to [~rakeshr]'s comments plus the extra check that I think is needed as well. , -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12639832/ZOOKEEPER-1909.patch
  against trunk revision 1586200.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    -1 findbugs.  The patch appears to introduce 1 new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2037//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2037//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2037//console

This message is automatically generated., Thanks [~rgs] for the updates. Apart from the following points +1 from me.
# Now, we have one findbug warning:
{code}
Format-string method String.format(String, Object[]) called with format string "{} (type: {})" wants 0 arguments but is given 2 in org.apache.zookeeper.server.FinalRequestProcessor.processRequest(Request)
{code}
I've suggestion to use as follows or just use String concatenation.
{code}
String msg = String.format(Locale.ENGLISH, "%s (WatcherType: %s)", new Object[] { removeWatches.getPath(), type });
{code}
# In tests its using "KeeperException.getCode()" which is deprecated one. I suggest to use "KeeperException.code()"
, Thanks for the review [~rakeshr] (and sorry for not running findbugs locally first). This one addresses your last comments. , -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12639960/ZOOKEEPER-1909.patch
  against trunk revision 1586200.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2038//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2038//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2038//console

This message is automatically generated., +1 latest patch looks nice. (test case failure is not related to this fix)
, +1, Thanks [~rgs] for the fix and [~michim] for the reviews.

trunk: http://svn.apache.org/viewvc?view=revision&revision=1588141, FAILURE: Integrated in ZooKeeper-trunk #2293 (See [https://builds.apache.org/job/ZooKeeper-trunk/2293/])
ZOOKEEPER-1909. removeWatches doesn't return NOWATCHER when there is
no watch set (Raul Gutierrez Segales via rakeshr) (rakeshr: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1588141)
* /zookeeper/trunk/CHANGES.txt
* /zookeeper/trunk/src/java/main/org/apache/zookeeper/ZooKeeper.java
* /zookeeper/trunk/src/java/main/org/apache/zookeeper/server/DataTree.java
* /zookeeper/trunk/src/java/main/org/apache/zookeeper/server/FinalRequestProcessor.java
* /zookeeper/trunk/src/java/main/org/apache/zookeeper/server/WatchManager.java
* /zookeeper/trunk/src/java/main/org/apache/zookeeper/server/ZKDatabase.java
* /zookeeper/trunk/src/java/test/org/apache/zookeeper/RemoveWatchesTest.java
]