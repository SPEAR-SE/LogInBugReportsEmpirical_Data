[> Client port is mandatory on reconfig.

I think we don't have to enforce this as part of this JIRA.

How about this:

-In QuorumPeer.writeDynamicConfig, pass a new parameter that indicates that you need to delete clientPort and clientPortAddress from the static file (last configuration didn't includes a client port for self.getId() but the new one has it, you can know that from where you call this function, in setQuorumVerifier).
 
- If a failure happens after updating the dynamic file but before you update the static file, indeed you could come up and have clientPort and/or clientPortAddress in both the static and dynamic files and they could be different. If they are different I think we should still raise an error like we're doing now and require admin intervention. If they are equal you could delete clientPort from the static file in QuorumPeerConfig when the server comes up.

My rational is that after the server comes up the two files should be consistent and the port is either in the static file or in the dynamic one but not in both. Silently prioritizing the dynamic port and removing the conflicting static port to solve the inconsistency may be a surprise to the user. But actually I don't feel strongly about it. [~phunt], [~michim] which way would you prefer ? , bq. If they are different I think we should still raise an error like we're doing now and require admin intervention.

that sounds reasonable to me, [~shralex]
Could you give more details about your method? I will try to make it work.

{quote}
Silently prioritizing the dynamic port and removing the conflicting static port to solve the inconsistency may be a surprise to the user.
{quote}

As we discussed before, what happened in reconfig client port is that if there is client port in static file, it is gonna remove that one from static file too. But my worry is that this requires much consideration on consistency in removing the line and updating the dynamic file.

So my plan is that:
1. Keep the client port on fresh boot for backward compatibility.
Then what happens if the server reconfig itself client port? Well, I plan for two tasks, where the second task is gonna replace the first one finally.
2.1 Since it will updates the client port in dynamic file, making a preference on dynamic file over static file is a hackish way to finish it. Not delete/remove here. This would be quick and make out a release. This is part of ZOOKEEPRE-1993
2.2 (This one is difficult and I need more time to get through the code.) Basically, on reconfiguring the client port on itself, it should safely remove the client port, update the dynamic file. This is part of ZOOKEEPRE-1995

Does that make sense? Please let me know what you think might be proper solution., Here's my proposal, can you clarify which part you feel uncomfortable with ?

- in QuorumPeer.writeDynamicConfig, pass a new parameter that indicates that you need to delete clientPort and clientPortAddress from the static file (last configuration didn't includes a client port for self.getId() but the new one has it, you can know that from where you call this function, in QuorumPeer.setQuorumVerifier).

- in QuorumPeerConfig, where this exception is thrown 
throw new ConfigException("client address for this server (id = " + serverId + ") in static config file is " + clientPortAddress + " is different from client address found in dynamic file: " + qs.clientAddr);
                   
and an "else" (meaning "everything is consistent) that in case clientPort and clientPortAddress appear in the dynamic file removes them from the static file. 
, [~shralex]
Regarding keeping the client port on fresh boot??
Just change this??
{code}
                           if (!key.startsWith("server.") && !key.startsWith("group") 
                                   && !key.startsWith("weight") && !key.equals("clientPort") && !key.equals("clientPortAddress")){
                               out.write(key.concat("=").concat(value).concat("\n"));
                           }
{code}, right - just remove the "!key.equals("clientPort") && !key.equals("clientPortAddress")" from the above., [~shralex]
Okay.
I will get the minimal change. As far as I know, I got several test errors If I forced a client port check after parsing.. But I will put off this and delve into the finer grain patches (also later).., Hi [~shralex]. I am not sure what this means.
{quote}
last configuration didn't includes a client port for self.getId() but the new one has it
{quote}
Can you be more specific?? Thanks., [~shralex]
Please take a look at the draft for the idea of workflow.
Let me know your feedback.
I will try to implement and test them.
Thanks!, [~shralex]
I finished the coding. Start testing it. Second draft., looks pretty good, thanks. a few comments
- eraseClient() should compare prevQV (the previous committed configuration) and qv  or quorumVerifier (the new committed configuration).

something like eraseClient(QuorumVerier prevQV, QuorumVerifier newQV) {
       QuorumServer myOldSpec = prevQV.getAllMembers().get(getId());
       QuorumServer myNewSpec = quorumVerifier.getAllMembers().get(getId());
       return (myNewSpec != null && myNewSpec.clientAddr != null 
               && (myOldSpec == null || myOldSpec.clientAddr == null);
}

maybe change "eraseClient" to something like "eraseStaticClientPortInfo" so that its more clear, [~shralex]
One more question:
I am confused by setLastSeenQuorumXXX and setQuorumXXX.
I think I just need erase client port in setQuorumXXX because that's where the client port is updated to actual dynamic file. Correct?, yes, that's correct. 
the logic here seems wrong - some of the && should be || etc... a key can't both start with server. and with group.

+                    if ((backwardCompatible
+                            && key.startsWith("server.") && key.startsWith("group")
+                            && key.startsWith("weight"))
+                            ||
+                            (eraseClient
+                                    && key.equals("clientPort") && key.equals("clientPortAddress"))) {
+                        continue;

if (!key.startsWith("server.") && !key.startsWith("group") && !key.startsWith("weight")
    && (!eraseClient || ( !key.equals("clientPort") && !key.equals("clientPortAddress"))){
                               out.write(key.concat("=").concat(value).concat("\n"));

, sorry - the "if" at the end of my message is a suggested change, [~shralex]
There you go~ I will open a review board start testing it, Hi [~shralex]
I uploaded the final patch that I tested manually:
1. Start from old style config, has client port remain
2. reconfig change port, port is removed from static file and added in dynamic file.

I have a few unit tests failing. I am trying to look at them and ask for more help.
I have a question about reconfig client port:
1. If a client reconfig the port it's connected to, what happened? Is it automatically changed to another port?, [~shralex]
I couldn't get those annoying whitespace changes out on reviewboard. So I am using Github for it

https://github.com/fengjingchao/zookeeper/commit/ab49b98ca07d2a675115b4a65a552e64c544127d?w=1
, Updated the patch.

Review place:
https://github.com/fengjingchao/zookeeper/commit/4528d636d0639b62fcabe2ec07a0ac276fe967cc?w=1

, The previous patch is generated using
"git diff -w"
which ignores whitespaces.
In case that doesn't work, here's an equivalent patch which contains all whitespace, CRLT->LF changes using
"git diff", This patch is generated using
"git diff -w --no-prefix"
The previous "-withspaces" one is
"git diff --no-prefix", -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12658790/ZOOKEEPER-1992-withspaces.patch
  against trunk revision 1613553.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2247//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2247//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2247//console

This message is automatically generated., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12658791/ZOOKEEPER-1992-without-spaces.patch
  against trunk revision 1613553.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    -1 patch.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2248//console

This message is automatically generated., I do a
"git add -p"
And this is the minimal changes I picked., [~shralex]
This is the latest patch from the "ZOOKEEPER-1992-gitaddp.patch":

https://github.com/fengjingchao/zookeeper/commit/217b7de2b242efbf6bb9dd85baad02b34dfd316e?w=1

When ignoring whitespace/line-ending changes they are all the same. It's the as minimal as I could. Hopefully we can get this in., Hi, Some test is failing - see last test results  (ReconfigTest.testRemoveAddOne), [~shralex]
I saw that this afternoon. It's weird..
I tested it locally and in my jenkins. They all passed.
Let it trigger another Pre-Build and see what happened., [~hdeng] can you attach an uptodate patch generated by svn diff including the new test(s) ?, [~shralex]
Sure.
Just sync up before I wrote the code.

Regarding the tests, I plan for the following:
1. test dynamic goes up with old style config will have client port and can do reconfig
2. test reconfig client port itself will remove the client port in static file and add it in dynamic file.

Let me know if I miss anything., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12658827/ZOOKEEPER-1992-gitaddp.patch
  against trunk revision 1613553.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2249//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2249//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2249//console

This message is automatically generated., when you do the reconfig in a test, for example adding one of the servers this time with a port specified, you could check that its static config was updated (like you suggest) and also check that the static configs of the other servers were not updated - still contain their client ports., some minor naming suggestions:
- needEraseClient() -> eraseClientInfoFromStaticConfig() 
- eraseLinesInStaticFile() - > editStaticConfig ()    (since it is also adding lines, not only removing)
, if you look at the log for the failed test, there is a null pointer exception. It happens because the test doesn't create a static config file - it creates a QuorumPeer object directly and has only a dynamic config file. To fix this change
QuorumPeer.needEraseClient last line to "return (configFilename!=null && ... "

> If a client reconfig the port it's connected to, what happened? Is it automatically changed to another port?

I think right now it just closes the socket and the clients disconnect. I'm not 100% sure. There may be a better way to do it, if you'd like, take a look at NIOServerCnxmFactory.java, reconfigure() and NettyServerCnxnFactory.java reconfigure()
, sorry, I take it back - with the current implementation existing clients won't disconnect, new ones trying to connect will have to use the new client port. , [~shralex]
editStaticConfig sounds better. I will change it.
{quote}
if you look at the log for the failed test, there is a null pointer exception. It happens because the test doesn't create a static config file - it creates a QuorumPeer object directly and has only a dynamic config file. To fix this change
QuorumPeer.needEraseClient last line to "return (configFilename!=null && ... "
{quote}
The flow is:
{code}
needEraseClient => writeDynamicConfig => editStaticConfig
{code}
editStaticConfig is the only thing using configFile. Is it better to prevent that in
{code}
    private static void editStaticConfig(final String configFileStr,
                                        ......
        // some tests may not have static config file
        if (configFileStr == null)
            return;

        File configFile = (new VerifyingFileFactory.Builder(LOG)
                .warnForRelativePath()
                .failForNonExistingPath()
                .build()).create(configFileStr);
{code}, [~shralex]

One more thing, Can I change DynamicConfigBackwardCompatibilityTest.java to ReconfigBackwardCompatibilityTest.java or ReconfigLegacyTest.java

1. name consistency: All reconfig tests start with "Reconfig", people jumping to the code can find relevant tests., sure, both things sound fine, [~shralex]

{quote}
with the current implementation existing clients won't disconnect
{quote}
On a client port change, if it won't disconnect, will it still use the old port or redirect to another?
The current cli tool still shows the old port.

{code}
[zk: 127.0.0.1:2181(CONNECTED)
{code}, on accept() a server socket returns a new socket which the newly connected client and the server use. So as I understand it, closing the server socket doesn't kill the existing connections - they are using different sockets., [~shralex]
I finished it and uploaded the new patch.

As usual, review place:
https://github.com/fengjingchao/zookeeper/commit/621f9f641945f4b9d7050c41bf9a2069baf1d582?w=1

I also added the check on editing static file.

{quote}
on accept() a server socket returns a new socket which the newly connected client and the server use. So as I understand it, closing the server socket doesn't kill the existing connections - they are using different sockets.
{quote}
So I think on reconfig a client will be "redirected" to a new server port. This is not shown in cli tool, I mean., Its not redirected upon reconfig. It just continues to use the socket that was created when it first connected, which is different from the server socket that is closed. Currently the client is not notified. It can find out as usual by subscribing to configuration change notifications. I'm not sure what's the right thing to present on the CLI tool, but not sure its that important., This adds a retry logic to test if clientPort has been removed.
Because after reconfig succeeded, there might be race that it setQuorumVerifier.

It's the same as "ZOOKEEPER-1992-addTest.patch" except the retry logic., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12658951/ZOOKEEPER-1992-addTest.patch
  against trunk revision 1613553.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 4 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2251//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2251//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2251//console

This message is automatically generated., I remove my new retry logic.

So the latest patch is ZOOKEEPER-1992-addTest.patch

Above it shows the test has passed.
[~shralex]
, [~shralex]
Okay. I finalized everything into "final.patch".

The previous "ZOOKEEPER-1992-addTest.patch" is flaky because there might be race after it finish reconfig before it finish editing static file the assertFalse on "clientPort" failed. I mitigate the pain by moving the check to the last.

An ideal solution is that there is a way to notify outside once editing static file is done., +1 The patch looks good, thanks for the hard work Hongchao!
I made a few minor edits, mainly variable names and some changes to the test. Lets see that final1.patch passes the tests on Jenkins and then commit it., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12658991/final.patch
  against trunk revision 1613553.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 4 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2252//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2252//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2252//console

This message is automatically generated., [~shralex]
Just minor changes.
1. Code formatting in editStaticConfig. Previously it wasn't aligned after name change (eraseLinesXXX -> editStaticXX).
2. test case:
{code}
final int changedServerId = SERVER_COUNT - 1;
{code}
To check it last to mitigate flaky case., Have it as final2.patch, -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12659081/final2.patch
  against trunk revision 1613553.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 4 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2253//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2253//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2253//console

This message is automatically generated., Committed final1.patch + reformatting as suggested by Hongchao + small change to test so that it waits for 1 sec before checking the files. I chose that over setting the changedServerId to 2 since we also want to check the configuration files of the other 2 servers., Committed to trunk. Thanks Hongchao!, FAILURE: Integrated in ZooKeeper-trunk #2393 (See [https://builds.apache.org/job/ZooKeeper-trunk/2393/])
ZOOKEEPER-1992. Backward compatibility of the static configuration file (Hongchao Deng via Alex Shraer) (shralex: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1615037)
* /zookeeper/trunk/CHANGES.txt
* /zookeeper/trunk/src/java/main/org/apache/zookeeper/server/quorum/QuorumPeer.java
* /zookeeper/trunk/src/java/main/org/apache/zookeeper/server/quorum/QuorumPeerConfig.java
* /zookeeper/trunk/src/java/test/org/apache/zookeeper/server/quorum/DynamicConfigBackwardCompatibilityTest.java
* /zookeeper/trunk/src/java/test/org/apache/zookeeper/server/quorum/ReconfigLegacyTest.java
, I just noticed that we have  a bug which I missed - when invoking editStaticConfig from QuorumPeerConfig it will remove the server. weight and other dynamic definitions even though the dynamic file doesn't exist yet. Assuming that ZOOKEEPER-1994 will get in 3.5.0, lets fix it there.]