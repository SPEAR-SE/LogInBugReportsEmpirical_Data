[Comment from Camille
So, the node was created by 0x13220b93e610550 at 12:17:56, then that session closed at 12:17:57, the node did not delete, and a bunch of other sessions later tried to create the node. These sessions got nodeexists failures I presume?


Forgive the block of text I'm going to write instead of code:

I'm going to bet that the problem lies in PrepRequestProcessor. If we get the ephemerals for the session while an ephemeral is still in outstandingChanges and has not been committed, then another thread commits that ephemeral and removes it from outstanding changes before synchronizing in the outstandingChagnes block, we could never put it in the ephemeral set that we are using to reflect ephemerals to delete. I think we need to move the synchronized block up before we get the ephemerals from the database. But this is a bit of speculation at the moment. 


HashSet<String> es = zks.getZKDatabase()
.getEphemerals(request.sessionId);

Is outside the synchronized block that deletes the ephemerals:

                synchronized (zks.outstandingChanges) {
    for (ChangeRecord c : zks.outstandingChanges) {
    if (c.stat == null) {                            // Doing a delete
                           es.remove(c.path);                        }
else if (c.stat.getEphemeralOwner() == request.sessionId) {
                es.add(c.path);                        }
     }                    for (String path2Delete : es) {
          addChangeRecord(new ChangeRecord(txnHeader.getZxid(),
                        path2Delete, null, 0, null));, Hi Camille,

outstandingChanges seems to be used mainly for bookeeping, no? Even if record was removed from outstandingChanges, the second for loop should add it back? Also, wouldn't the DataTree.killSession() remove the ephemeral when called through FinalRequestProcessor?

Kishore, you metioned "I saw that the ephemeral owner is 86167322861045079 which is session id 0x13220b93e610550." sessionID 86167322861045079 is 0x13220B93E610557. This is the ID of the last session that you displayed above. 

- Can you check if there has been any error in verifying the state of the cluster?
- Are all servers showing this znode? Were there any server failures?
- Can you attach ZK logs and describe what happened before the cluster went into this state?

Thanks., I only spent a few minutes looking at the problem, so it doesn't surprise me that my speculation might not hold up.

Kishore, you never answered the questions I asked in my email, namely, all the other sessions that tried to create that node got NODEEXISTS exceptions? If they didn't, it should be a big red flag. As Vishal said, that ephemeral owner is 0x13220b93e610557. Are you sure you even have a problem here?, Hi Vishal and Camille,

I will upload the logs soon. Yes we did see the NodeExists exception in the logs. Sorry about the sessionId used an online tool which did incorrect conversion:(

The node still exists and here is the stat

version:0
ctime:1316719091806
czxid:25798981995
length:109
EphemeralOwner:86167322861045079
mtime:1316719091806
mzxid:25798981995
numChildren:0
pzxid:25798981995
version:0

Yes there is a problem for sure that the node exists even after the session is closed. You can see from the log that session 0x13220b93e610557 is closed., Similar issue occurred in our case as well. The ephemeral exists *only in one of the follower* even after it's owner session is expired. I wanted to know whether this is same as ZOOKEEPER-1264. Any hints?
, I  believe I see the issue.

PrepRequestProcessor checks the session is valid on a create.

However it doesn't not know about an in-progress close session request

The session is not invalidated (session tracker) until
FinalRequestProcessor. At which point a create in PrepRP would fail.
However prior to that it will get into the pipeline. Resulting in the
issue you are seeing.


Q: what are you clients doing? It's weird that a create would come
from the client after the session has been closed. Do you have
multiple threads sharing a session?
, The client (checked java) seems to protect against this. Was the
session expired? IC. Based on the cxid of the close session being 0
I'm guessing it's an expiration., Hi Pat,

I think its possible that create might come after close when there zookeeper.close is invoked in a shutdown hook. Application starts create session and waits for connected state in another thread and create an ephemeral znode. But if the application is killed immediately Ctrl C then shutdown hook can call close. 

We saw a case where the commit order was createsession, closesession and create node. Neha, will upload the logs shortly which clearly shows this and might help in narrowing down the use case and hopefully we can reproduce it.

, I don't think that's the case Kishore - notice the cxid of the close session is "0", that's only possible if the server expired the session., This initial patch demonstrates the problem. Test only so far but I'm working on a fix., This patch contains a fix against branch 33. It's working for me, all the tests are passing with this applied. The new test I added verifies that this is fixed.

Give it a once over and I can create addl patches for 34/trunk.

Just make sure I didn't bork something: locking, leaking, left a hole, etc...

This will introduce more contention btw PRP and FRP, but I don't think that's avoidable., An updated solution with a more elegant implementation of the fix., Sorry for being out of action (blame hadoop world :)). Looks like you found it Pat. About the testcase, I am not sure about the session id being 0. How is it tracking that the same session is being closed and an create on the same session is being sent?, I like the fix, Pat., @mahadev session id 0 just means to create a new session (see ClientCnxn). I ignore the returned sid because the session is tied to the socket (i.e. not included in subsequent requests by the client)., You are right. I was worried abt the returned sid. Go ahead and upload patches for 3.4 and trunk. , Added patches for 3.4 and trunk. I verified that the test fails w/o this fix on each branch. Then verified that the test passed subsequent to the fix being applied., +1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12503419/ZOOKEEPER-1208_trunk.patch
  against trunk revision 1201045.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 5 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/786//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/786//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/786//console

This message is automatically generated., Patrick I'm going to check this in minus the printlns in the new test., Actually, I'm not sure... are these useful at all? I'd rather not see printlns in test output unless it's really useful, but in the case of this test I'm not sure I can tell..., Can some one please summarize the root cause of the issue and also explain why the create is seen in txn log after session is closed. Also what about the initial suspicion Camille had about 
HashSet<String> es = zks.getZKDatabase()
.getEphemerals(request.sessionId);

being outside the synchronized block.

, @camille I'm usually fine with leaving printlns in tests (I look at the eclipse console), but I'm also fine if you want to convert them to info level logs., @kishore I didn't copy this from the ML, here are the details:

bq. Yes, I realized after that the cxid is 0 in your logs - that indicates it was expired and not closed explicitly by the client.

bq. This holds up my theory that the PrepRequestProcessor is accepting a create from the client after the session has been expired.

What's happen is the following
1) client creates session
2) leader wants to expire session, so sends message to the quorum
3) client sends create znode to follower which fwds to leader, leader accepts (preqrequestprocessor) the request because the quorum has not yet accepted the expiration (close session) request in FinalRequestProcessor.

The fix is for the leader to note that the session is in the process of closing and not accept changes in PRP after it sees a close session request.
, Committed to 3.4 and trunk, will get 3.3.4 in a second. Mahadev, feel free to cut another 3.4 RC whenever., Thanks Camille. I am trying to checkin ZOOKEEPER-1269 for 3.4 as well. Will do an RC right after that!, Sorry I meant ZOOKEEPER-1239., Integrated in ZooKeeper-trunk #1365 (See [https://builds.apache.org/job/ZooKeeper-trunk/1365/])
    ZOOKEEPER-1208. Ephemeral node not removed after the client session is long gone. (phunt via camille)

camille : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1201832
Files : 
* /zookeeper/trunk/CHANGES.txt
* /zookeeper/trunk/src/java/main/org/apache/zookeeper/server/PrepRequestProcessor.java
* /zookeeper/trunk/src/java/main/org/apache/zookeeper/server/SessionTracker.java
* /zookeeper/trunk/src/java/main/org/apache/zookeeper/server/SessionTrackerImpl.java
* /zookeeper/trunk/src/java/main/org/apache/zookeeper/server/quorum/LearnerSessionTracker.java
* /zookeeper/trunk/src/java/test/org/apache/zookeeper/server/PrepRequestProcessorTest.java
* /zookeeper/trunk/src/java/test/org/apache/zookeeper/test/SessionInvalidationTest.java
]