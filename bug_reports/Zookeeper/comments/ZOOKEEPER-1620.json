[Have you tried running the tests in an unmodified branch? I think you are encountering this because of changes in your branch, because in the upstream branch we don't see the tests fail like this.

That being said, you are right we could do a better job of cleaning up the selector. I'd suggest adding a closeSelector() method to the AbstractSelectThread

protected void closeSelector() {
  try {
    selector.close();
  catch (IOException e) {
    // Ignore
  }
}

and then adding calls to closeSelector() right before the NIOServerCnxnFactory.this.stop() calls in the finally block of the run methods for the AcceptThread and SelectorThread., Thanks Jay. The tests that fail are related to reconfiguration, but the issue I think is not specific to reconfiguration, that's why I opened it as a separate bug. Let me make the change you suggest in my ZK-107 patch first to see if it solves the issue, and then we can submit it as a separate patch here., Fix fd leakage with unit test (for unix-based system), -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12565253/ZOOKEEPER-1620.patch
  against trunk revision 1433651.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    -1 release audit.  The applied patch generated 25 release audit warnings (more than the trunk's current 24 warnings).

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1339//testReport/
Release audit warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1339//artifact/trunk/patchprocess/patchReleaseAuditProblems.txt
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1339//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1339//console

This message is automatically generated., Add missing license header, +1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12565259/ZOOKEEPER-1620.patch
  against trunk revision 1433651.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1340//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1340//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1340//console

This message is automatically generated., looks good, thanks Thawan, on second thought, this still has a problem.
when running it on my Mac the test fails with "End fdcount is: 340", Thawan, I suggest that you change the last assertion to "(endFdCount - startFdCount) < 2)"
and in NIOServerCnxnFactory.stop() add thread.closeSelector() right before or right after thread.wakeupSelector()
, actually it would be good to reduce this to < 1, but I haven't found the remaining open selector., You shouldn't need to do that (explicitly call closeSelector inside factory.stop()), and it's preferable if you don't. The reason it's preferable not to do it is to allow the system to do a graceful shutdown. The reason you shouldn't need to do that is that the shutdown call joins on the accept and selector threads, so it's not going to return until those threads exit.

The unit tests create and destroy the factories/threads/selectors in a pretty tight loop. I'm not sure how long it takes the system to close fd's associated with the selector, but maybe this is something like how closed sockets can linger. I might try to put a lengthier sleep after the factory.shutdown() call.

There have been known issues with file descriptor leaks when calling selector.close(), so we might check JDK versions we're each running. I found the following bug affecting JDK5u28/6u30/7u5
http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=7118373
, Thanks Jay, I was about to mention that bug as well. For our environment, we already switched to jdk7u6. I believe we ran into this JDK bug in our production, after upgrading to a newer JDK, the problem is gone., Hi Jay,

and yet with this change my test in ZK-107 now passes. Here's the failure that I was getting yesterday, even after calling closeSelector where you previously suggested:

https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1342//testReport/org.apache.zookeeper.test/ReconfigTest/testQuorumSystemChange/

when I add the closeSelector inside factory.stop, this error goes away. 

I still got a failure because endFdCount - startFdCount is 1 on my Mac but 4 on Hudson. , sorry, its actually my mistake - I didn't notice the second closeSelector() in Thawan't patch, which has the same effect as what I was suggesting above. so no changes necessary to the patch., Committed to trunk. Thanks Thawan.]