[Hi [~liuyang@huawei], would you like to provide a patch for this?, I will submit the patch later on., hi,liuyang,  i want to know what is the status of this patch, now? , ZooKeeperSaslClient {{login}} object is static and the thread is created only once for the lifetime of that application(I mean per jvm). It looks like its done intentionally, isn't it?, [~rakeshr] Thanks for your reply.

{quote}
ZooKeeperSaslClient login object is static and the thread is created only once for the lifetime of that application(I mean per jvm). It looks like its done intentionally, isn't it?
{quote}

Ideally static login object will control one login thread  in one JVM. I came across one scenario is like Following: 
 
One application will create one zk client and this will loads class separately.Here we will run multiple applications continuously in single java class ( which means single JVM ) where we seen login object getting created for every application which is not getting closed even we call  zk.close .

 *Application which will called for every time in single Java Class* 

{code}
classLoader = new MyClassloader(new URL[] {});
		try {
			File file = new File(libPath);
			File[] jarsFiles = file.listFiles();
			for (File jarFile : jarsFiles) {
				LOGGER.info("load jar: {}", jarFile.getAbsolutePath());
				classLoader.addJar(jarFile.toURL());
			}
		} catch (MalformedURLException e) {
			e.printStackTrace();
		}
			
		servlet = (PretendedServlet)Class.forName("com.zk.PretendedZK", true, classLoader).newInstance();
		servlet.init(); 
{code}

  *Zkclient Threads which we are using same in init*  

{code}
public void init() {
		if (null == login) {
			LOGGER.info("init login.");
			login = new PretendedLogin();
			login.start();
		}
		startSendThread();
		startEventThread();
	}
{code}]