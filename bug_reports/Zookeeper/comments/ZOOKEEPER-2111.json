[This patch add synchronized blocks on not-isAlive state. The test is hard to reproduce so I am ignoring it., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12694824/ZOOKEEPER-2111.patch
  against trunk revision 1655082.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2493//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2493//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2493//console

This message is automatically generated., [~fpj]
There is a problem in ZOOKEEPER-2069 patch. I would like to get this in to fix it., Ok, I'll have a look., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12694866/ZOOKEEPER-2111.patch
  against trunk revision 1655082.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    -1 findbugs.  The patch appears to introduce 3 new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2494//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2494//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2494//console

This message is automatically generated., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12694878/ZOOKEEPER-2111.patch
  against trunk revision 1655082.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2495//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2495//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2495//console

This message is automatically generated., Thanks [~hdeng] for reporting this. I think there is no straight forward case of missing the packet notification to the user, right?. Because {{SendThread#run}} will be running till the {{state#isAlive}}. The {{cleanup()}} call would be called after seeing the {{!state#isAlive()}}

{code}
// When it comes to this point, it guarantees that later queued packet to outgoingQueue will be
// notified of death.
{code}

But after going through code several times, I could see a corner case like,

step-1) Thread-1 : invoke {{zk#close}} and is waiting for the response from the server
step-2) Thread-2 : Interrupt 'Thread-1' which is waiting for step-1 operation. Now it will {{disconnect();}} and mark {{state=CLOSED}}
step-3) Thread-3 : user is adding a new request to the {{outgoingqueue}}

Probably a possible race between Thread-2 and Thread-3. Are you thinking similar lines?, I wanna point out in the code:
{code}
           if (!state.isAlive() || closing) {
                conLossPacket(packet);
            } else {
                // If the client is asking to close the session then
                // mark as closing
                if (h.getType() == OpCode.closeSession) {
                    closing = true;
                }
                outgoingQueue.add(packet);
            }
{code}
There is an assumption: when it goes into the `else` block, it assumes `state` is alive and `closing` is false. The assumption here could introduce a race I found (and maybe others unfound). But anyway, I don't think my current patch fix this assumption because I can't synchronized on `closing` which is boolean. Making this assumption fixed and shown in code is my goal., Before ZOOKEEPER-2069, it uses synchronized (outgoingQueue) and no chance of race. But I also sees, now there is a narrow window between cleanup() and queuePacket()., Cool. Any idea of my patch? It currently synchronize over the window on cleanup() and queuePacket(). As I emphasized, I think the best way is to synchronize over two variables: isAlive states and closing. It would help better reasoning the code. What do you think?, I don't see a problem with the proposed patch, and it does look like it solves the problem reported here, +1.

[~rakeshr], are you happy with the patch?, +1 lgtm, Cool. Could anyone help get this in and solve the problem. Thanks!, Thank you [~hdeng] for the patch. I'll commit this today., Attaching committed patch - just modified line formatting., Committed to trunk : http://svn.apache.org/viewvc?view=revision&revision=1656167
Committed to br3.5 : http://svn.apache.org/viewvc?view=revision&revision=1656168, FAILURE: Integrated in ZooKeeper-trunk #2581 (See [https://builds.apache.org/job/ZooKeeper-trunk/2581/])
ZOOKEEPER-2111 Not isAlive states should be synchronized in ClientCnxn (Hongchao via rakeshr) (rakeshr: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1656167)
* /zookeeper/trunk/CHANGES.txt
* /zookeeper/trunk/src/java/main/org/apache/zookeeper/ClientCnxn.java
]