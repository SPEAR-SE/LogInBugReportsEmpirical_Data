[The root cause is that startReceiving is called from both startDelivery and the connect callback. This is correct
because there are scenarios where it may be needed in both. The checking of the receiving flag is the correct way to
resolve this. 

However, this double call of startReceiving really happens *every* time you use the c++ client to receive on a
subscription, so it wasn't clear why we've only seen the problem now. 

Turns out that it only triggers when a partial message is received, so we only saw it when the messages were very big.
For example, if the message is 100 bytes, the 100 bytes will arrive to the c++ client at the same time
sizeReadCallbackHandler will read the size out of the buffer and since the whole message is already in the buffer will
call messageReadCallbackHandler directly instead of calling into asio to read more from the buffer. After
messageReadCallbackHandler has finished, there will be 0 bytes in the buffer, or another whole message in the buffer,
so the second invocation of sizeReadCallbackHandler will behave correctly. 

However, if the message is bigger than the MTU, then the first sizeReadCallbackHandler will run, which reads the
message size from the buffer. It then sees that the remaining bytes in the buffer are fewer than the size of the
message, so makes a call to async_read to get more, and the function end. At this point the second
sizeReadCallbackHandler runs, sees junk and craps out. 
, +1 thanx for the fix ivan!, Committed revision 1031453.
, Integrated in ZooKeeper-trunk #991 (See [https://hudson.apache.org/hudson/job/ZooKeeper-trunk/991/])
    ZOOKEEPER-916. Problem receiving messages from subscribed channels in c++ client
]