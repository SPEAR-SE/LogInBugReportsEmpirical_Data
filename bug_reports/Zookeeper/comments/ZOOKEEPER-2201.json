[-1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12736704/ZOOKEEPER-2201.patch
  against trunk revision 1682823.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    -1 patch.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2739//console

This message is automatically generated., The approach looks reasonable to me and this is a serious issue. Perhaps [~rgs] or [~hdeng] might have some insight?

Can you use copyStatPersisted instead of copying yourself?

Also can you provide a patch for trunk as well as branch 3.4? We'll need to fix that in both places and as you can see the patch is not applying cleanly to trunk.

Thanks!, patch against trunk, patch against 3.4 branch, -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12737283/ZOOKEEPER-2201-branch-34.patch
  against trunk revision 1683163.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    -1 patch.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2746//console

This message is automatically generated., I had seen {{DataNode.copyStat}} which gives a {{Stat}} but didn't notice {{DataTree.copyStatPersisted}}.
I've updated the code to use {{copyStatPersisted}}, and included a patch against trunk and another against the 3.4 branch. My previous one was against 3.4.6 specifically.
(Hmm, I see now that JIRA adds comments about an attachment as a plain comment in the ticket. I was hoping for a description beside the file itself...), The failure above is for the patch against the branch, which of course can't be applied against trunk. I'll re-upload the trunk patch to get the build kicked off again., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12737286/ZOOKEEPER-2201.patch
  against trunk revision 1683163.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2747//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2747//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2747//console

This message is automatically generated., The failure above is due to a flaky test which fails occasionally depending on timing. I've filed a ticket (and patch) to fix that at ZOOKEEPER-2204. I'll upload the patch for trunk once more in the hopes I don't get unlucky and hit the same transient failure twice., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12737302/ZOOKEEPER-2201.patch
  against trunk revision 1683163.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2749//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2749//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2749//console

This message is automatically generated., testHighContentionWithTimeout has now been fixed: https://github.com/apache/zookeeper/commit/fac170aa2e82c63aeea60d756a450ce343c43e6d. Could you re-kick the build? Thanks!, Why is this true:

{code}
+            //we do not need to make a copy of node.data because the contents
+            //are never changed
+            nodeCopy = new DataNode(node.data, node.acl, statCopy);
{code}

? Can't node.data change after we leave the synchronized block if setData is called: https://github.com/apache/zookeeper/blob/trunk/src/java/main/org/apache/zookeeper/server/DataTree.java#L643 ? Ditto for the acl: https://github.com/apache/zookeeper/blob/trunk/src/java/main/org/apache/zookeeper/server/DataTree.java#L744 

Also, could we encapsulate the DataNode copying logic in DataNode#clone (I suspect it is or will be duplicated otherwise)? , {{node.data}} can change to be a new reference if we call {{setData}}, what I meant was that we never call {{node.data\[x\] = ...}} so that it was safe to give the {{nodeCopy}} the same reference to the underlying array. Compare that with {{node.children}} which is a mutable {{Set}} so the existing code needs to take a copy of that first.

With the acl (and stat info), yes those can both change, but what we ensure by synchronizing on {{node}} is that we get a consistent copy of the {{DataNode}} state as it once existed - it can change after we take our copy, just like it could change after we wrote it over the wire, but we've captured a consistent view of it in both cases.

For moving it to a {{DataNode.clone}} method, I'm not sure. I thought about that when I was initially writing this and decided against it at the time because I think this is a very specific kind of {{clone}}: we're getting the same reference to {{data}}, but for {{children}} we'd get a copy, however the copy would still point to the same children {{DataNode}} instances that the original did. I see it as a weird kind of shallow copy, so I'm not sure it makes sense to move it.

I've resubmitted the original patch for now, although I'm open to moving it to a {{copy}} method., +1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12737702/ZOOKEEPER-2201.patch
  against trunk revision 1683605.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2752//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2752//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2752//console

This message is automatically generated., bq. node.data can change to be a new reference if we call setData, what I meant was that we never call node.data[x] = ... so that it was safe to give the nodeCopy the same reference to the underlying array. Compare that with node.children which is a mutable Set so the existing code needs to take a copy of that first.

ah - thanks for clarifying.yeah, i guess if data was immutable (ByteBuffer maybe?) clone() would make more sense. or if  agree it's a shallow copy since we get the data by reference. or we made data private and added a setter. then clone would make sense. 

, +1, though if someone has an idea to elegantly implement clone and encapsulate that logic (and express that data is immutable), that would be nice :-), +1
The patch looks good!, Merged:

http://svn.apache.org/viewvc?view=revision&revision=1683878
http://svn.apache.org/viewvc?view=revision&revision=1683930
http://svn.apache.org/viewvc?view=revision&revision=1683931

(pasting SVN URLs since the github mirror seems to be lagging). 

Thanks [~dnadolny]! , SUCCESS: Integrated in ZooKeeper-trunk #2718 (See [https://builds.apache.org/job/ZooKeeper-trunk/2718/])
ZOOKEEPER-2201: Network issues can cause cluster to hang due to near-deadlock
(Donny Nadolny via rgs) (rgs: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1683878)
* /zookeeper/trunk/CHANGES.txt
* /zookeeper/trunk/src/java/main/org/apache/zookeeper/server/DataTree.java
* /zookeeper/trunk/src/java/test/org/apache/zookeeper/server/DataTreeTest.java
]