[Hi Patrick, 

I replaced "new InetHostProvider" with InetHostProver.createUnresolved" in the test but since it invokes StaticHostProvider constructor which attempts to do some resolution, there's still going to be an attempt to resolve the addresses. It does run a lot faster this way for me (25sec -> 7 sec on my laptop), let me know if it is reasonable now.

BTW, do you see the same problem with C tests ?

Thanks!
Alex, +1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12561202/ZOOKEEPER-1603.patch
  against trunk revision 1422473.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1303//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1303//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1303//console

This message is automatically generated., I don't see any benefit with this patch applied. This method in particular seems to be the issue:

bq. org.apache.zookeeper.client.StaticHostProvider.resolveAndShuffle(Collection<InetSocketAddress>)

Is this a problem regardless of whether it's a test or real code? i.e. will I see long pauses running the client on my host as a result of this?

What's the underlying problem? Any idea why I see this and it's not an issue on, for example, jenkins?


I ran the C tests and they pass in the typical amount of time, no issues there.

, > Is this a problem regardless of whether it's a test or real code?

Yes - but this was not introduced by ZK-1355, the address resolution was always there just wasn't tested. I'm guessing you'll see delays if you provide the real client with non-existent addresses like I do in the test.

I just noticed that I already have a separate constructor for StaticHostProvider that is invoked from the test, so I can make it avoid resolution of addresses when running the test. I wanted to avoid doing this earlier because its nice that both constructors use resolveAndShuffle so we're actually testing the deployed code.

> What's the underlying problem? Any idea why I see this and it's not an issue on, for example, jenkins?

I didn't see this problem on my Mac but I do see it on Linux. Perhaps it has something to do with this ?
http://stackoverflow.com/questions/1608503/domain-name-resolution-not-working-in-java-applications-on-ubuntu64-9-04-machine
 
, fwiw I tried adding the "-Djava.net.preferIPv4Stack=true" as suggested in the link - no help. Same issue. I also tried running with jdk7 (been using jdk6 up to this point) and that didn't help either., I'm not sure whats going on, but I tried running the same thing without ZooKeeper. It works for me on linux:


import java.net.*;
import java.util.*;

public class NetTest {

    public static void main(String []k){
        try {
            InetSocketAddress addr = InetSocketAddress.createUnresolved("10.10.10.5", 1234);
            InetAddress[] inetAddresses = InetAddress.getAllByName(addr.getHostName());

        int size = 4;
        ArrayList<InetSocketAddress> serverAddresses = new ArrayList<InetSocketAddress>();
        while (size > 0) {
            serverAddresses.add(InetSocketAddress.createUnresolved("10.10.10." + size, 1234 + size));
            --size;
        }
        ArrayList<InetSocketAddress>  tmpList = new ArrayList<InetSocketAddress>();
        for (InetSocketAddress address : serverAddresses) {
            InetAddress resolvedAddresses[] = InetAddress.getAllByName(address
                    .getHostName());
            for (InetAddress resolvedAddress : resolvedAddresses) {
                tmpList.add(new InetSocketAddress(resolvedAddress
                        .getHostAddress(), address.getPort()));
            }
        }
        for (InetSocketAddress addr1: tmpList) {
           System.out.println(addr1);
        }
        } catch (UnknownHostException e) {
            e.printStackTrace();
        }
    }
}
, Same here:

{noformat}
time java NetTest 
/10.10.10.4:1238
/10.10.10.3:1237
/10.10.10.2:1236
/10.10.10.1:1235

real	0m0.065s
user	0m0.032s
sys	0m0.032s
{noformat}
, With the patch applied StaticHostProviderTest seems to get hung up in org.apache.zookeeper.client.StaticHostProvider.updateServerList(Collection<InetSocketAddress>, InetSocketAddress)

in this code:

{noformat}
            if (addr.getHostName().equals(currentHost.getHostName())
                    && addr.getPort() == currentHost.getPort()) {
{noformat}
, Turning off ipv6 entirely doesn't help., thanks Patrick! I'm looking at it now too. The provlem seems to be getHostName(). 
, Here's a sneaky way to get around the issue. use 

            list.add(new InetSocketAddress("72.30.38." + (size + 140), 1234 + size));

to allocate the hosts addresses. ;-) (you likely have to change all 10.10.10.* to 72.30.38.(140+*))

On my system this makes things much faster without the createUnresolved changes. However it's still taking forever for testUpdateClientMigrateOrNot. Each 1000 iterations in the last loop in that method (up to numClients iterations) is taking around 60+ seconds.

Perhaps you can change that method to run for 30 seconds rather than for a certain number of iterations?
, There are 10000 iteration since I wanted to have a large number of clients to test the probabilistic algorithm. A smaller number of clients
will probably work too. But actually I feel that I'm pretty close to solving this. Take a look here: http://stackoverflow.com/questions/10420317/java-inetaddress-gethostname-taking-a-very-long-time-to-execute

It seems like its better just to do string parsing instead of getHostName :), I saw that. Dumb question - why are we comparing host name rather than host ip address?, You're right. This required some more changes (to create the addresses with IP that we can use and not with hostname).

Please notice the second change in StaticHostProvider.java (will affect all clients):

             InetAddress resolvedAddresses[] = InetAddress.getAllByName(address
-                    .getHostName());
+                    .getAddress().getHostAddress());


This achieved a significant speedup. Hopefully this is equivalent.
, -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12561666/ZOOKEEPER-1603-ver1.patch
  against trunk revision 1423778.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1312//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1312//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1312//console

This message is automatically generated., +1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12561728/ZOOKEEPER-1603-ver2.patch
  against trunk revision 1423778.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1313//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1313//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1313//console

This message is automatically generated., bq. Hopefully this is equivalent.

Hm... :-)

[~breed] [~mahadev] any idea why we used hostname in originally? Do you see any issues with this?, FYI: with this latest patch (ver2) applied the test quickly passes for me., Pat,
 Not sure why we had this. Seems like an over sight., Forgot to check for getAddress()==null in both places in StaticHostProvider. If it is, I test using getHostName() like before., +1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12561770/ZOOKEEPER-1603-ver3.patch
  against trunk revision 1423996.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1315//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1315//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1315//console

This message is automatically generated., Committed to trunk. Thanks Alex!, thanks Patrick for working with me on this!, Integrated in ZooKeeper-trunk #1778 (See [https://builds.apache.org/job/ZooKeeper-trunk/1778/])
    ZOOKEEPER-1603. StaticHostProviderTest testUpdateClientMigrateOrNot hangs (Alexander Shraer via phunt) (Revision 1424336)

     Result = SUCCESS
phunt : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1424336
Files : 
* /zookeeper/trunk/CHANGES.txt
* /zookeeper/trunk/src/java/main/org/apache/zookeeper/client/StaticHostProvider.java
* /zookeeper/trunk/src/java/test/org/apache/zookeeper/test/StaticHostProviderTest.java
, Under some networks, StaticHostProviderTest fails in the 3.4 branch. I have created a version of the 3.5.0 for the 3.4 branch and I'll be uploading it shortly. I would really appreciate if someone could review it shortly., Note that this patch is only for b3.4. , Can I get a +1 here please?, +1, assuming you re-executed the tests, Thanks, Alex. Committed revision 1526695., Closing issues after releasing 3.4.6.]