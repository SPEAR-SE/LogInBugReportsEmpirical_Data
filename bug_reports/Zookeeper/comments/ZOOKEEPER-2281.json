[Please assign to me. Thanks, Updated the patch. Please review., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12762375/ZOOKEEPER-2281-00.patch
  against trunk revision 1705225.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    -1 patch.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2885//console

This message is automatically generated., [~neha.bathra], create patch with --no-prefix option. for eaxmple {{git diff --no-prefix >> ZOOKEEPER-2281-01.patch}}, [~arshad.mohammad], thanks for your review. Updated the patch as per your review comment. Please check., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12764014/ZOOKEEPER-2281-01.patch
  against trunk revision 1705482.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2890//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2890//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2890//console

This message is automatically generated., Changes done are in batch file, hence tests are not included., Hello [~neha.bathra].  Thank you for the bug report and the patch.

The existing code works fine if the {{JAVA_HOME}} environment variable value wraps a path containing spaces in double quotes.  For example:

{code}
C:\zkdep\zookeeper-3.6.0-SNAPSHOT>set JAVA_HOME
JAVA_HOME="C:\Java\jdk1.7.0_75-x86 with spaces"
{code}

However, the existing code doesn't work if the environment variable value is not wrapped in double quotes.

{code}
C:\zkdep\zookeeper-3.6.0-SNAPSHOT>set JAVA_HOME
JAVA_HOME=C:\Java\jdk1.7.0_75-x86 with spaces
{code}

I'm guessing that your test environment was not using double quotes, which would explain why you were able to repro this bug.

I tested the current patch, and it makes startup work for the unquoted case, but it breaks startup for the quoted case, because the file existence check will use a path containing multiple nested quotes.  My experience is that it's more common to quote the environment variable value, because that also simplifies nested environment variable constructs, like {{set PATH=%JAVA_HOME%\bin;...}}.

I think we'll need to ensure backwards-compatibility if we want to proceed with this patch.  That likely would involve trying to check for whether or not the value is already quoted before wrapping our own quotes around it., [~neha.bathra], I've added you to the ZooKeeper Contributor role in JIRA, so issues can be assigned to you now.  I'm assigning this one to you.  Thanks again., [~cnauroth], Thanks for reviewing. Updated the patch as per your comments., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12764249/ZOOKEEPER-2281-02.patch
  against trunk revision 1705794.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2901//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2901//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2901//console

This message is automatically generated., +1 for patch v02.  I tested this on Windows with the two variants I discussed earlier: {{JAVA_HOME}} wrapped in quotes and not wrapped in quotes.  Both cases worked this time.  I plan to commit this to trunk and branch-3.5 later this week.  Thank you, Neha!, Hello, I am collecting some bug reports from Apache Jira for analysis, the one's I'm trying to collect are the fixed and closed ones. So I can see what was the bug, and what was the bug fix. Most of them have SVN revision number there.
I am a little confused about what patch available means here. Can you please help me a little bit? , Hello [~fhd1991519].

"Patch Available" means that a contributor has coded a patch and attached it to the JIRA issue to share with the whole community.  It does not mean that the patch has been committed to repositories, or even that the patch is in a final state.  It's very common for a patch to go through multiple iterations during code review and testing, even after the issue moves into "Patch Available" state.  If you look at the attachments on this particular issue, you'll see that it went through 3 different revisions before a committer +1'd it.

Now that I have +1'd it, I'm aiming to commit this patch to Subversion later today.  At that point, I'll change the JIRA issue status to "Resolved".  If you're interested in only seeing the JIRA issues for which patches have been finalized and committed, then you'll probably want to search for "Resolved" and "Closed" status instead of "Patch Available".

I hope this helps clarify the process., It helped a lot!!! Thank you so much for your help Chris!!!
, I have committed this to trunk and branch-3.5.  [~neha.bathra], thank you for contributing this bug fix., FAILURE: Integrated in ZooKeeper-trunk #2802 (See [https://builds.apache.org/job/ZooKeeper-trunk/2802/])
ZOOKEEPER-2281: ZK Server startup fails if there are spaces in the JAVA_HOME path (Neha Bathra via cnauroth) (cnauroth: [http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1706631])
* trunk/CHANGES.txt
* trunk/bin/zkEnv.cmd
, I'm reopening this for consideration of a backport to the 3.4 line., The same patch applies cleanly to branch-3.4.  I just retested with a build from branch-3.4, and the patch worked fine.  [~rgs], may I commit this to branch-3.4 for inclusion in the future 3.4.8 release?, [~cnauroth]: definitely. , Thank you, Raul!  I committed this to branch-3.4, and I'm resolving the issue again.]