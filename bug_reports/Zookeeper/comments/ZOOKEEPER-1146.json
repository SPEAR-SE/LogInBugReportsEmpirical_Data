[I reviewed all the changes that went into zkpython btw 3.3.3 and current trunk, I don't see anything that would account for this. Fairly certain this must be a c client change., I've narrowed this down to the following commit:

ZOOKEEPER-992. MT Native Version of Windows C Client (Dheeraj Agrawal via michim)

prior to this 10ms/op, subsequent to this patch 50ms/op., turns out this change is responsible:

{noformat}
-            setsockopt(zh->fd, IPPROTO_TCP, TCP_NODELAY, &on, sizeof(int));
+            setsockopt(zh->fd, IPPROTO_TCP, TCP_NODELAY, &on, sizeof(char));
{noformat}

setsockopt is returning -1 after this change (failed to set). Without this change the performance is as expected.

I'll craft a patch or this., This patch fixes the issue on Linux and also logs a WARNING if it fails.

I believe this will compile/test successfully on win32 but I'm not sure as I don't have a setup to test it (although I did look at the docs and afaict it should work). Would be good for someone on the win32 side to verify., +1 looks good. great job tracking it down pat!, I'll have Dheeraj take a look at this in win32 next week and make sure it all checks out., tested this on windows and dont see any issues. Thanks Patrick ..., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12489411/ZOOKEEPER-1146.patch
  against trunk revision 1152141.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/433//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/433//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/433//console

This message is automatically generated., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12489411/ZOOKEEPER-1146.patch
  against trunk revision 1152141.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/439//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/439//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/439//console

This message is automatically generated., I just pushed this. thanks pat!, Integrated in ZooKeeper-trunk #1266 (See [https://builds.apache.org/job/ZooKeeper-trunk/1266/])
    ZOOKEEPER-1146. significant regression in client (c/python) performance. (phunt via mahadev)

mahadev : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1157574
Files : 
* /zookeeper/trunk/src/c/src/zookeeper.c
* /zookeeper/trunk/CHANGES.txt
, This fix is incorrect, Windows uses an int not a char for this socket option, just like the rest of the world. 

Ref: http://msdn.microsoft.com/en-us/library/ms740476%28v=vs.85%29.aspx
level = IPPROTO_TCP
Value	Type	Description
TCP_NODELAY	BOOL	Disables the Nagle algorithm for send coalescing.

So what is a "BOOL"? 
http://msdn.microsoft.com/en-us/library/aa383751%28v=vs.85%29.aspx
BOOL	
A Boolean variable (should be TRUE or FALSE).
This type is declared in WinDef.h as follows:
typedef int BOOL;


The fix should be changed from an ifdef on WIN32 to just the int...

   int enable_tcp_nodelay = 1;
, Yes, we can use it as int. Although while testing on windows, it didn't return an error code, which i would have expected, if there were any issues.

If we change this to int for both unix/windows, we will need to change the setsockopt and have ifdef around it to avoid warnings. Optval is char* for windows, so we will need a cast to (char*) around the optval.

int setsockopt(int s, int level, int optname, const void *optval, socklen_t optlen); 
int setsockopt(
  __in  SOCKET s,
  __in  int level,
  __in  int optname,
  __in  const char *optval,
  __in  int optlen
);

setsockopt(zh->fd, IPPROTO_TCP, TCP_NODELAY, (char*) &on, sizeof(int));

Can you submit a patch for this?, Please create a new jira and attach the patch to that - thanks!]