[Please have a look at NETTY-412, which is discussing the same scenario and is still an open issue in the netty. Also, when fixing the zookeeper windows build, this case has been again discovered and please see comments obout [test case failure in ZOOKEEPER-1833 | https://issues.apache.org/jira/browse/ZOOKEEPER-1833?focusedCommentId=13855267&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13855267]

Please review the attached patch, where I skipped the duplicate closure in CnxnChannelHandler#exceptionCaught. Thanks, Please see link for https://issues.jboss.org/browse/NETTY-412 jira issue, -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12620105/ZOOKEEPER-1179.patch
  against trunk revision 1552946.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1859//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1859//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1859//console

This message is automatically generated., Good catch!
It seems to me that NettyServerCnxn.close() is already protected against duplicated calls, isn't it? It first removes the pointer from a list in the factory, and only if the pointer was in the list proceeds with the close. However, in this point:
{noformat}
@@ -215,6 +223,7 @@
     @Override
     public void sendBuffer(ByteBuffer sendBuffer) {
         if (sendBuffer == ServerCnxnFactory.closeConn) {
+            isClosing.set(true);
             channel.close();
             return;
         }
{noformat}
... you found a place where it is done in another way, and that brakes the principle. I think that the problem should be fixed just by replacing "channel.close()" above with a call to NettyServerCnxn.close(). Does that make sense?, Thanks for reviewing the patch. IMO, the problem exists in the following way:
While closing the channel, it hits an exception and enters into the exceptionCaught logic. Here this is again trying to close the channel and is causing the issue. The stacktrace given in the description is also showing the same, please see once. As this is an open issue from netty code [NETTY-412], workaround would be to skip the closure in exceptionCaught if it was occured from channel#close. Whats your opinion?

Also, I observed channel.close(); will generate ChannelDisconnected event, here the NettyServerCnxn#close is invoked and doing the cleanup. 
As an improvement let me check, NettyServerCnxn#close instead of channel.close() in the NettyServerCnxn.sendBuffer(),  but this won't fix the above mentioned case., Thanks a lot for the explanation [~rakeshr].
This is how I understand it:
If we hit an exception when closing the channel, then we are in the final part of method NettyServerCnxn#close. If we are there, then we have already removed "this" NettyServerCnxn object from the list in the corresponding NettyServerCnxnFactory. That means that if the exception handling makes another call to NettyServerCnxn#close, it will have no effect since it will not pass the check where there is the comment "// if this is not in cnxns then it's already closed" in that method.
Please tell me if this reasoning doesn't look good to you., Yeah German, I understood your thoughts. Now only the possibility of occuring the case is in NettyServerCnxn#sendBuffer, where it directly closing the channel reference. As you told earlier, this should be replaced with NettyServerCnxn.close()., Is any of you proposing a new patch based on the agreement I'm just reading here? I haven't had a chance to check it carefully, but so far sounds right., Proposing the patch is not a problem. Adding a test case is not that easy at all, at least for me., Let's try to think of a test case, and if we can't come up with anything that is reasonable, I'll +1 it without the test. Testing races is often difficult, so I'm not surprised that there is no obvious way. Perhaps someone else has an idea for how to do it, though., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12620251/ZOOKEEPER-1179.patch
  against trunk revision 1552946.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1860//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1860//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1860//console

This message is automatically generated., Thanks a lot Flavio/German for the help. I've tried simulating a case, where it tests the possibility of duplicate closure. Please have a look at the latest patch., +1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12620307/ZOOKEEPER-1179.patch
  against trunk revision 1552946.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1862//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1862//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1862//console

This message is automatically generated., +1 from my side. Excellent test case for this., +1, thanks guys! 

B3.4: Committed revision 1553672., Trunk: Committed revision 1553681., I have made a couple of small fixes to the javadoc of NettyCnxnServerTest, that's the reason of the two commits after resolving the issue, there is no change to the patch code.

trunk: Committed revision 1553693.
b3.4: Committed revision 1553694., SUCCESS: Integrated in ZooKeeper-trunk #2168 (See [https://builds.apache.org/job/ZooKeeper-trunk/2168/])
ZOOKEEPER-1179.  NettyServerCnxn does not properly close socket on 4 letter word requests (Rakesh R, Germán Blanco via fpj) (fpj: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1553693)
* /zookeeper/trunk/src/java/test/org/apache/zookeeper/server/NettyServerCnxnTest.java
ZOOKEEPER-1179. NettyServerCnxn does not properly close socket on 
  4 letter word requests (Rakesh R, Germán Blanco via fpj) (fpj: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1553681)
* /zookeeper/trunk/CHANGES.txt
* /zookeeper/trunk/src/java/main/org/apache/zookeeper/server/NettyServerCnxn.java
* /zookeeper/trunk/src/java/test/org/apache/zookeeper/server/NettyServerCnxnTest.java
, It looks like this patch didn't completely solve the problem. I was checking the output of the last ZooKeeper-3.4-WinVS2008_java build, and I found the following in the output of testFourLetterWords:

{noformat}
[junit] 2013-12-29 20:21:43,920 [myid:] - WARN  [New I/O worker #258:NettyServerCnxnFactory$CnxnChannelHandler@111] - Exception caught [id: 0x6e402644, /127.0.0.1:51003 => /127.0.0.1:11271] EXCEPTION: java.io.IOException: A non-blocking socket operation could not be completed immediately
    [junit] java.io.IOException: A non-blocking socket operation could not be completed immediately
    [junit] 	at sun.nio.ch.SocketDispatcher.close0(Native Method)
    [junit] 	at sun.nio.ch.SocketDispatcher.preClose(SocketDispatcher.java:62)
    [junit] 	at sun.nio.ch.SocketChannelImpl.implCloseSelectableChannel(SocketChannelImpl.java:819)
    [junit] 	at java.nio.channels.spi.AbstractSelectableChannel.implCloseChannel(AbstractSelectableChannel.java:228)
    [junit] 	at java.nio.channels.spi.AbstractInterruptibleChannel.close(AbstractInterruptibleChannel.java:115)
    [junit] 	at org.jboss.netty.channel.socket.nio.AbstractNioWorker.close(AbstractNioWorker.java:354)
    [junit] 	at org.jboss.netty.channel.socket.nio.NioServerSocketPipelineSink.handleAcceptedSocket(NioServerSocketPipelineSink.java:81)
    [junit] 	at org.jboss.netty.channel.socket.nio.NioServerSocketPipelineSink.eventSunk(NioServerSocketPipelineSink.java:36)
    [junit] 	at org.jboss.netty.channel.Channels.close(Channels.java:812)
    [junit] 	at org.jboss.netty.channel.AbstractChannel.close(AbstractChannel.java:197)
    [junit] 	at org.apache.zookeeper.server.NettyServerCnxn.close(NettyServerCnxn.java:114)
    [junit] 	at org.apache.zookeeper.server.NettyServerCnxn.cleanupWriterSocket(NettyServerCnxn.java:242)
    [junit] 	at org.apache.zookeeper.server.NettyServerCnxn.access$000(NettyServerCnxn.java:57)
    [junit] 	at org.apache.zookeeper.server.NettyServerCnxn$CommandThread.run(NettyServerCnxn.java:315)
    [junit] 	at org.apache.zookeeper.server.NettyServerCnxn$CommandThread.start(NettyServerCnxn.java:306)
    [junit] 	at org.apache.zookeeper.server.NettyServerCnxn.checkFourLetterWord(NettyServerCnxn.java:658)
    [junit] 	at org.apache.zookeeper.server.NettyServerCnxn.receiveMessage(NettyServerCnxn.java:791)
    [junit] 	at org.apache.zookeeper.server.NettyServerCnxnFactory$CnxnChannelHandler.processMessage(NettyServerCnxnFactory.java:211)
    [junit] 	at org.apache.zookeeper.server.NettyServerCnxnFactory$CnxnChannelHandler.messageReceived(NettyServerCnxnFactory.java:135)
    [junit] 	at org.jboss.netty.channel.Channels.fireMessageReceived(Channels.java:268)
    [junit] 	at org.jboss.netty.channel.Channels.fireMessageReceived(Channels.java:255)
    [junit] 	at org.jboss.netty.channel.socket.nio.NioWorker.read(NioWorker.java:88)
    [junit] 	at org.jboss.netty.channel.socket.nio.AbstractNioWorker.process(AbstractNioWorker.java:109)
    [junit] 	at org.jboss.netty.channel.socket.nio.AbstractNioSelector.run(AbstractNioSelector.java:312)
    [junit] 	at org.jboss.netty.channel.socket.nio.AbstractNioWorker.run(AbstractNioWorker.java:90)
    [junit] 	at org.jboss.netty.channel.socket.nio.NioWorker.run(NioWorker.java:178)
    [junit] 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
    [junit] 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
    [junit] 	at java.lang.Thread.run(Thread.java:722)
{noformat}, Hi Flavio,

After merging ZOOKEEPER-1238 in 3.4 branch, I've observed ZooKeeper-3.4-WinVS2008_java jenkins report from [build#407 | https://builds.apache.org/job/ZooKeeper-3.4-WinVS2008_java/407/] to the latest [build#417 | https://builds.apache.org/job/ZooKeeper-3.4-WinVS2008_java/417/] .

Now "java.io.IOException: A non-blocking socket operation could not be completed immediately" is not occuring any more. If agrees, can we close this one?, Closing issues after releasing 3.4.6.]