[-1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12575101/ZOOKEEPER-1653.patch
  against trunk revision 1458648.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 6 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    -1 findbugs.  The patch appears to introduce 3 new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1436//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1436//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1436//console

This message is automatically generated., Addressed findbugs warnings., Patch for 3.4 branch., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12575124/ZOOKEEPER-1653-3.4.patch
  against trunk revision 1458648.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 6 new or modified tests.

    -1 patch.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1438//console

This message is automatically generated., How do I tell the buildbot which branch a certain patch is for?

--Michi, +1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12575121/ZOOKEEPER-1653.patch
  against trunk revision 1458648.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 6 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1437//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1437//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1437//console

This message is automatically generated., I shouldn't have deleted the updatingEpoch file in the finally block. It might get executed even when the thread gets interrupted in the try block before creating the currentEpoch file.

--Michi, Hi Michi, This issue actually escaped my attention, I'm sorry. I think this one is actually superseded by ZOOKEEPER-1549. Do you agree?, Yes, I think ZOOKEEPER-1549-3.4.patch will fix this issue., Should this jira be a blocker for 3.4.6? [~michim]?, Yeah if ZOOKEEPER-1549 is not fixed in 3.4.6, we should fix this in 3.4.6. I'll rebase and resubmit the patch., This patch is for 3.4 branch., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12613962/ZOOKEEPER-1653.3.4.patch
  against trunk revision 1541810.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 6 new or modified tests.

    -1 patch.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1768//console

This message is automatically generated., If we can't do any of the operations related to the updating file, then we shouldn't keep going, right? Say we fail to create the fail and the server keeps executing. In this case we can fall into the same problem we are discussing here. I think we should either throw an exception or exit the server. , Ok that sounds reasonable. I'll change the patch so that it throws an IOException if any of the operations on the updating file fails., Throw an IOException if any of the operations on the updating file fails., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12614162/ZOOKEEPER-1653.3.4.patch
  against trunk revision 1542355.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 6 new or modified tests.

    -1 patch.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1773//console

This message is automatically generated., Nit in:

{noformat}
+    static void writeLongToFile(File file, long value) throws IOException {
+        AtomicFileOutputStream out = new AtomicFileOutputStream(file);
+        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(out));
+        boolean aborted = false;
+        try {
+            bw.write(Long.toString(value));
+            bw.flush();
+            out.flush();
+            out.close();
+        } catch (IOException e) {
+            LOG.error("Failed to write new file " + file, e);
+            out.abort();
+            throw e;
+        }
+    }
{noformat}

aborted is not used. 

Nit in:

{noformat}
+            LOG.info("Validating current epoch: " + servers.mt[i].dataDir);
{noformat}

use {} instead of concatenating. 

Nit:

{noformat}
+        // Shut down the cluster
{noformat}

should be "Shutdown the cluster".

In src/java/test/org/apache/zookeeper/server/quorum/QuorumPeerTestBase.java:

{noformat}
+        CountDownLatch mainFailed;
{noformat}

is assigned and modified but never asserted or checked?, I take back the last comment, I carelessly overlooked the inheriting class. , One more nit in src/java/test/org/apache/zookeeper/server/quorum/QuorumPeerMainTest.java:

{noformat}
+        currentEpochFile = new File(new File(follower.dataDir, "version-2"),
+                                    "currentEpoch");
....
+        File updatingEpochFile = new File(
+                new File(follower.dataDir, "version-2"),
+                QuorumPeer.UPDATING_EPOCH_FILENAME);
{noformat}

could be abbreviated with:

{noformat}
+        File followerDataDir = new File(follower.dataDir, "version-2");
+        currentEpochFile = new File(followerDataDir, "currentEpoch");
....
+        File updatingEpochFile = new File(followerDataDir, QuorumPeer.UPDATING_EPOCH_FILENAME);
{noformat}

Also - should there be a constant for currentEpoch too?, Apart from [~rgs] comments which are minor nits in Test,

+1 for changes in src. , Canceling patch so that comments can be addressed., Good work [~michim]. I've just one comment.

In the patch, updating.createNewFile() api will return false and throws IOException, when the QuorumPeer.UPDATING_EPOCH_FILENAME file already exists. One possible case could be, say previously the system crashed before deleting the file. 

I think we should improve the check as follows:
{code}
if (!updating.exists() && !updating.createNewFile()) {                 
{code}, Thanks rakesh for joining.
UpdatingEpoch file will be deleted when the snapshot loaded during startup, and at that time currentEpoch will also be updated before deletion. 

So by the time of next snapshot this file should not be there in any case.  , Hi vinay, 
In the patch I could see a conditional deletion of 'UpdatingEpoch' file. Here it will delete this file only when the following condition satifies. I was thinking about a case, where the condition is not satified, now the file will not be deleted and will affect the flow which I mentioned earlier. IMHO, it is safe to have 'updating.exists()' check.
{code}
+                if (epochOfZxid > currentEpoch && updating.exists()) {
                       //........
+                    if (!updating.delete()) {
+                        throw new IOException("Failed to delete " +
+                                              updating.toString());
+                    }
+                }
{code}, Oh!! Yes. You are correct I missed it. If server crashes just after {{self.setCurrentEpoch(newEpoch);}} then that is very much possible., Thank you guys for all the feedback. I addressed all the comments except for using variable substitution for logging in QuorumPeerMainTest. QuorumPeerMainTest uses log4j.WriterAppender, and it hasn't migrated to slf4j, so I'm leaving the logging to use string concatenation for now., +1, Latest patch looks good. Thanks Michi., +1, good job. [~michim]! Committed revision 1545883., Closing issues after releasing 3.4.6., It seems this issue is occurring in {{3.5}} branch also. I could see the chance of not updating the currentEpoch file after the successful {{zk.takeSnapshot()}} logic. Please see [Learner.java|https://github.com/apache/zookeeper/blob/branch-3.5/src/java/main/org/apache/zookeeper/server/quorum/Learner.java#L520].

In release note its mentioned ZOOKEEPER-1549 task will be used to address this case in branch 3.5. IIUC, that issue is focussing to solve the differences between the ZooKeeper servers, but this is a situation occurred within a server, am I missing anything?

IMHO, we can re-open the issue and merge the fix to {{3.5}} branch, [~rakeshr] I think, you are correct. can we reopen this issue ZK-3.5 branch..? we had faced same issue in {{3.5}} branch., Created new jira ZOOKEEPER-2354 for merging this important fix to master and 3.5 branch.]