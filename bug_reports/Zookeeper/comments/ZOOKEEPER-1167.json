[it wasn't an oversight. there is no reason for a synchronous version. because of the ordering guarantees, if you issue an asynchronous sync, the next call, whether synchronous or asynchronous will see the updated state., Ah, I see.  Am I correct in thinking that a client using the synchronous C API will still need to call async() in order to guarantee a consistent view?  i.e. zoo_get_children() will need to be preceeded by a a zoo_async() call in order to guarantee consistency?

If so, how would you feel about me stubbing out/macro'ing a zoo_sync() call to make the API consistent? (i.e. every zoo_a(foo) call has a zoo_(foo) counterpart).

, to guarantee consistency btw two clients, yes. but typically this is not necessary - only when clients are also communicating via some method other than just ZK.

re adding zoo_sync, well then it would be inconsistent with the java client. ;-) I think if you added such a thing it should not return until the callback was called - similar to all the other ZK sync methods., This patch is against 3.4.3 to provide zoo_sync function that blocks until zoo_sync completes just like all the other C synchronous functions., This patch also applies cleanly to trunk., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12525778/ZOOKEEPER-1167.patch
  against trunk revision 1334548.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1061//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1061//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/1061//console

This message is automatically generated., No tests provided because:

There are no existing tests for zoo_async() so it wasn't feasible for me to add all that infrastructure. Plus, zoo_sync() is a very simple synchronous wrapper around zoo_async() so it doesn't seem necessary., Thanks Marshall. We're trying to improve the testing incrementally. Would be great if you could add testing for both the async and sync operations. Even just exercising the code paths would be valuable. Thanks., I may not get to this for a week or two as I'm overwhelmed at work...but I'll be happy to add some tests around this., Marshall,
  Would you have sometime to add tests to the patch? Would be good to have this in the next 3.4 release if possible., Moving it out to since we dont have a test case., This is not exactly a bug fix, so I'm moving it to 3.5.0., Sorry for jumping in this late, but this API seems unnecessary based on Ben's comment. I'm closing this. Please reopen it if there is a good use case for this, and then we should add it to both java and c clients., [~michim] - I'm not sure I agree. Ben's comments specifically state that this is not strictly required for the consistency protocol ZK provides. But if you are communicating through some other mechanism and you want to guarantee those two clients are synchronized, then this would be useful. Granted the application layer can provide it's own wrapper around zoo_async to provide this functionality. So I think the use case is for easier integration into higher level clients. That and consistency since this is the only non-sync API in the C bindings.  I'm still happy to add tests around this and also add a java implementation I just lost sight of this case., Ok that sounds reasonable., [~michim] - thanks. Plus I've already patched our internal version of zookeeper so our application doesn't have to do this and would hate to have to maintain that forever :). I'll get an updated patch together so we can finish this one off., It would be good to document when one might choose the sync version over the async version. The nuance might not be very obvious., Agreed., I have read all the comments above, but I don't get the point. 
In what kind of scenarios will this BUG cause a problem? It seems like this bug is not going to be fixed in 3.4.X version, why?]