{"expand":"renderedFields,names,schema,operations,editmeta,changelog,versionedRepresentations","id":"13048967","self":"https://issues.apache.org/jira/rest/api/2/issue/13048967","key":"ZOOKEEPER-2711","fields":{"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype","name":"Bug","subtask":false,"avatarId":21133},"timespent":null,"project":{"self":"https://issues.apache.org/jira/rest/api/2/project/12310801","id":"12310801","key":"ZOOKEEPER","name":"ZooKeeper","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/projectavatar?pid=12310801&avatarId=10011","24x24":"https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12310801&avatarId=10011","16x16":"https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12310801&avatarId=10011","32x32":"https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12310801&avatarId=10011"},"projectCategory":{"self":"https://issues.apache.org/jira/rest/api/2/projectCategory/10484","id":"10484","description":"Apache ZooKeeper related","name":"ZooKeeper"}},"fixVersions":[],"aggregatetimespent":null,"resolution":null,"customfield_12312322":null,"customfield_12310220":"2017-03-07T21:10:09.613+0000","customfield_12312520":null,"customfield_12312323":null,"customfield_12312521":"Sun Mar 12 04:44:10 UTC 2017","customfield_12310420":"9223372036854775807","customfield_12312320":null,"customfield_12310222":null,"customfield_12312321":null,"resolutiondate":null,"workratio":-1,"customfield_12312328":null,"customfield_12312329":null,"customfield_12312923":null,"customfield_12312326":null,"customfield_12312920":null,"customfield_12310300":null,"customfield_12312327":null,"customfield_12312921":null,"customfield_12312324":null,"customfield_12312720":null,"customfield_12312325":null,"lastViewed":null,"watches":{"self":"https://issues.apache.org/jira/rest/api/2/issue/ZOOKEEPER-2711/watchers","watchCount":4,"isWatching":false},"created":"2017-03-07T18:19:04.197+0000","customfield_12310192":null,"customfield_12310191":null,"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/2","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/critical.svg","name":"Critical","id":"2"},"labels":[],"customfield_12312333":null,"customfield_12310230":null,"customfield_12312334":null,"customfield_12313422":"false","customfield_12310310":"0.0","customfield_12312331":null,"customfield_12312332":null,"timeestimate":null,"aggregatetimeoriginalestimate":null,"customfield_12311120":null,"customfield_12312330":null,"versions":[],"issuelinks":[],"customfield_12312339":null,"assignee":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=elserj","name":"elserj","key":"elserj","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=elserj&avatarId=17258","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=elserj&avatarId=17258","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=elserj&avatarId=17258","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=elserj&avatarId=17258"},"displayName":"Josh Elser","active":true,"timeZone":"America/New_York"},"customfield_12312337":null,"customfield_12312338":null,"updated":"2017-03-13T15:36:56.502+0000","customfield_12312335":null,"customfield_12312336":null,"status":{"self":"https://issues.apache.org/jira/rest/api/2/status/1","description":"The issue is open and ready for the assignee to start work on it.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/open.png","name":"Open","id":"1","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/2","id":2,"key":"new","colorName":"blue-gray","name":"To Do"}},"components":[],"timeoriginalestimate":null,"description":"Observed the following issue in some $dayjob testing environments. Line numbers are a little off compared to master/branch-3.5, but I did confirm the same issue exists there.\n\nWith the NettyServerCnxnFactory, before a request is dispatched, the code synchronizes on the {{NettyServerCnxn}} object. However, with some 4LW commands (like {{stat}}), each {{ServerCnxn}} object is also synchronized to (safely) iterate over the internal contents of the object to generate the necessary debug message. As such, multiple concurrent {{stat}} commands can both lock their own {{NettyServerCnxn}} objects, and then be blocked waiting to lock each others' {{ServerCnxn}} in the {{StatCommand}}, deadlocked.\n\n{noformat}\n\"New I/O worker #55\":\n\tat org.apache.zookeeper.server.ServerCnxn.dumpConnectionInfo(ServerCnxn.java:407)\n\t- waiting to lock <0x00000000fabc01b8> (a org.apache.zookeeper.server.NettyServerCnxn)\n\tat org.apache.zookeeper.server.NettyServerCnxn$StatCommand.commandRun(NettyServerCnxn.java:478)\n\tat org.apache.zookeeper.server.NettyServerCnxn$CommandThread.run(NettyServerCnxn.java:311)\n\tat org.apache.zookeeper.server.NettyServerCnxn$CommandThread.start(NettyServerCnxn.java:306)\n\tat org.apache.zookeeper.server.NettyServerCnxn.checkFourLetterWord(NettyServerCnxn.java:677)\n\tat org.apache.zookeeper.server.NettyServerCnxn.receiveMessage(NettyServerCnxn.java:790)\n\tat org.apache.zookeeper.server.NettyServerCnxnFactory$CnxnChannelHandler.processMessage(NettyServerCnxnFactory.java:211)\n\tat org.apache.zookeeper.server.NettyServerCnxnFactory$CnxnChannelHandler.messageReceived(NettyServerCnxnFactory.java:135)\n\t- locked <0x00000000fab68178> (a org.apache.zookeeper.server.NettyServerCnxn)\n\tat org.jboss.netty.channel.SimpleChannelHandler.handleUpstream(SimpleChannelHandler.java:88)\n\tat org.jboss.netty.channel.DefaultChannelPipeline.sendUpstream(DefaultChannelPipeline.java:564)\n\tat org.jboss.netty.channel.DefaultChannelPipeline.sendUpstream(DefaultChannelPipeline.java:559)\n\tat org.jboss.netty.channel.Channels.fireMessageReceived(Channels.java:268)\n\tat org.jboss.netty.channel.Channels.fireMessageReceived(Channels.java:255)\n\tat org.jboss.netty.channel.socket.nio.NioWorker.read(NioWorker.java:88)\n\tat org.jboss.netty.channel.socket.nio.AbstractNioWorker.process(AbstractNioWorker.java:109)\n\tat org.jboss.netty.channel.socket.nio.AbstractNioSelector.run(AbstractNioSelector.java:312)\n\tat org.jboss.netty.channel.socket.nio.AbstractNioWorker.run(AbstractNioWorker.java:90)\n\tat org.jboss.netty.channel.socket.nio.NioWorker.run(NioWorker.java:178)\n\tat org.jboss.netty.util.ThreadRenamingRunnable.run(ThreadRenamingRunnable.java:108)\n\tat org.jboss.netty.util.internal.DeadLockProofWorker$1.run(DeadLockProofWorker.java:42)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n\tat java.lang.Thread.run(Thread.java:745)\n\"New I/O worker #51\":\n\tat org.apache.zookeeper.server.ServerCnxn.dumpConnectionInfo(ServerCnxn.java:407)\n\t- waiting to lock <0x00000000fab68178> (a org.apache.zookeeper.server.NettyServerCnxn)\n\tat org.apache.zookeeper.server.NettyServerCnxn$StatCommand.commandRun(NettyServerCnxn.java:478)\n\tat org.apache.zookeeper.server.NettyServerCnxn$CommandThread.run(NettyServerCnxn.java:311)\n\tat org.apache.zookeeper.server.NettyServerCnxn$CommandThread.start(NettyServerCnxn.java:306)\n\tat org.apache.zookeeper.server.NettyServerCnxn.checkFourLetterWord(NettyServerCnxn.java:677)\n\tat org.apache.zookeeper.server.NettyServerCnxn.receiveMessage(NettyServerCnxn.java:790)\n\tat org.apache.zookeeper.server.NettyServerCnxnFactory$CnxnChannelHandler.processMessage(NettyServerCnxnFactory.java:211)\n\tat org.apache.zookeeper.server.NettyServerCnxnFactory$CnxnChannelHandler.messageReceived(NettyServerCnxnFactory.java:135)\n\t- locked <0x00000000fabc01b8> (a org.apache.zookeeper.server.NettyServerCnxn)\n\tat org.jboss.netty.channel.SimpleChannelHandler.handleUpstream(SimpleChannelHandler.java:88)\n\tat org.jboss.netty.channel.DefaultChannelPipeline.sendUpstream(DefaultChannelPipeline.java:564)\n\tat org.jboss.netty.channel.DefaultChannelPipeline.sendUpstream(DefaultChannelPipeline.java:559)\n\tat org.jboss.netty.channel.Channels.fireMessageReceived(Channels.java:268)\n\tat org.jboss.netty.channel.Channels.fireMessageReceived(Channels.java:255)\n\tat org.jboss.netty.channel.socket.nio.NioWorker.read(NioWorker.java:88)\n\tat org.jboss.netty.channel.socket.nio.AbstractNioWorker.process(AbstractNioWorker.java:109)\n\tat org.jboss.netty.channel.socket.nio.AbstractNioSelector.run(AbstractNioSelector.java:312)\n\tat org.jboss.netty.channel.socket.nio.AbstractNioWorker.run(AbstractNioWorker.java:90)\n\tat org.jboss.netty.channel.socket.nio.NioWorker.run(NioWorker.java:178)\n\tat org.jboss.netty.util.ThreadRenamingRunnable.run(ThreadRenamingRunnable.java:108)\n\tat org.jboss.netty.util.internal.DeadLockProofWorker$1.run(DeadLockProofWorker.java:42)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n\tat java.lang.Thread.run(Thread.java:745)\n{noformat}\n\nIt would appear that the synchronization on the {{NettyServerCnxn}} in {{NettyServerCnxnFactory}} is to blame (and I can see why it was done originally). I think we can just use a different Object (and monitor) to provide mutual exclusion at Netty layer (and avoid synchronization issues at the \"application\" layer).","customfield_10010":null,"timetracking":{},"customfield_12312026":null,"customfield_12312023":null,"customfield_12312024":null,"customfield_12312340":null,"attachment":[],"aggregatetimeestimate":null,"customfield_12312341":null,"customfield_12312220":null,"customfield_12312022":null,"customfield_12310921":null,"customfield_12310920":"9223372036854775807","customfield_12312823":null,"summary":"Deadlock between concurrent 4LW commands that iterate over connections with Netty server","creator":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=elserj","name":"elserj","key":"elserj","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=elserj&avatarId=17258","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=elserj&avatarId=17258","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=elserj&avatarId=17258","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=elserj&avatarId=17258"},"displayName":"Josh Elser","active":true,"timeZone":"America/New_York"},"subtasks":[],"customfield_12310291":null,"reporter":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=elserj","name":"elserj","key":"elserj","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=elserj&avatarId=17258","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=elserj&avatarId=17258","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=elserj&avatarId=17258","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=elserj&avatarId=17258"},"displayName":"Josh Elser","active":true,"timeZone":"America/New_York"},"customfield_12310290":null,"aggregateprogress":{"progress":0,"total":0},"customfield_12311024":null,"environment":null,"customfield_12313520":null,"customfield_12311020":null,"duedate":null,"customfield_12310250":null,"progress":{"progress":0,"total":0},"comment":{"comments":[{"self":"https://issues.apache.org/jira/rest/api/2/issue/13048967/comment/15899884","id":"15899884","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=elserj","name":"elserj","key":"elserj","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=elserj&avatarId=17258","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=elserj&avatarId=17258","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=elserj&avatarId=17258","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=elserj&avatarId=17258"},"displayName":"Josh Elser","active":true,"timeZone":"America/New_York"},"body":"Let me put together a patch for what I'm thinking (which is, admittedly, based on my assumptions for why the synchronization works as it does -- not based on truth :))","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=elserj","name":"elserj","key":"elserj","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=elserj&avatarId=17258","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=elserj&avatarId=17258","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=elserj&avatarId=17258","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=elserj&avatarId=17258"},"displayName":"Josh Elser","active":true,"timeZone":"America/New_York"},"created":"2017-03-07T18:20:03.799+0000","updated":"2017-03-07T18:20:03.799+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13048967/comment/15899888","id":"15899888","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=elserj","name":"elserj","key":"elserj","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=elserj&avatarId=17258","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=elserj&avatarId=17258","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=elserj&avatarId=17258","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=elserj&avatarId=17258"},"displayName":"Josh Elser","active":true,"timeZone":"America/New_York"},"body":"A few more clarifications:\n\n* I observed this from concurrent {{stat}} commands, but I believe the same could happen with an intermingling of {{stat}} and {{cons}} commands.\n* This appears to only affect the Netty server. I didn't see a similar execution path on the NIO side which would have the same bug.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=elserj","name":"elserj","key":"elserj","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=elserj&avatarId=17258","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=elserj&avatarId=17258","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=elserj&avatarId=17258","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=elserj&avatarId=17258"},"displayName":"Josh Elser","active":true,"timeZone":"America/New_York"},"created":"2017-03-07T18:21:48.463+0000","updated":"2017-03-07T18:21:48.463+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13048967/comment/15900072","id":"15900072","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=elserj","name":"elserj","key":"elserj","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=elserj&avatarId=17258","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=elserj&avatarId=17258","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=elserj&avatarId=17258","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=elserj&avatarId=17258"},"displayName":"Josh Elser","active":true,"timeZone":"America/New_York"},"body":"Was able to repro this locally with multiple instances of the following one-liner:\n\n{noformat}\nwhile true; do echo stat | nc localhost 2181 >/dev/null 2>&1; echo -n .; sleep 3; done\n{noformat}","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=elserj","name":"elserj","key":"elserj","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=elserj&avatarId=17258","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=elserj&avatarId=17258","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=elserj&avatarId=17258","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=elserj&avatarId=17258"},"displayName":"Josh Elser","active":true,"timeZone":"America/New_York"},"created":"2017-03-07T20:15:05.436+0000","updated":"2017-03-07T20:15:05.436+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13048967/comment/15900170","id":"15900170","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"GitHub user joshelser opened a pull request:\n\n    https://github.com/apache/zookeeper/pull/186\n\n    ZOOKEEPER-2711 Avoid synchronization on NettyServerCnxn in Factory\n\n    NettyServerCnxnFactory previously synchronized on the (Netty)ServerCnxn\n    object to provide mutual exclusion at the RPC layer. However, this was\n    at odds with the synchronized methods in ServerCnxn (which shared the\n    same monitor). As such, it was possible to deadlock between concurrent\n    4LW commands that were invoking one of these synchronized methods\n    on ServerCnxn.\n\nYou can merge this pull request into a Git repository by running:\n\n    $ git pull https://github.com/joshelser/zookeeper 2711-4lw\n\nAlternatively you can review and apply these changes as the patch at:\n\n    https://github.com/apache/zookeeper/pull/186.patch\n\nTo close this pull request, make a commit to your master/trunk branch\nwith (at least) the following in the commit message:\n\n    This closes #186\n    \n----\ncommit 9953e32963e6167f88b97519233b0872cce69a71\nAuthor: Josh Elser <elserj@apache.org>\nDate:   2017-03-07T21:03:57Z\n\n    ZOOKEEPER-2711 Avoid synchronization on NettyServerCnxn in Factory\n    \n    NettyServerCnxnFactory previously synchronized on the (Netty)ServerCnxn\n    object to provide mutual exclusion at the RPC layer. However, this was\n    at odds with the synchronized methods in ServerCnxn (which shared the\n    same monitor). As such, it was possible to deadlock between concurrent\n    4LW commands that were invoking one of these synchronized methods\n    on ServerCnxn.\n\n----\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-07T21:10:09.613+0000","updated":"2017-03-07T21:10:09.613+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13048967/comment/15900172","id":"15900172","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user joshelser commented on the issue:\n\n    https://github.com/apache/zookeeper/pull/186\n  \n    I need to see if I can come up with a unit test to catch this case, but I'm not sure how useful one would be (I think anything I come up with would be a bit contrived..)\n    \n    I was able to test this locally by running 7 iterations of:\n    \n    ```bash\n    while true; do echo stat | nc localhost 2181 >/dev/null 2>&1; echo -n .; sleep 1; done\n    ```\n    \n    while generating some extra load (heavy java tests from another ASF project, *winks*) on my local machine. This ran for ~10minutes without error.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-07T21:12:35.503+0000","updated":"2017-03-07T21:12:35.503+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13048967/comment/15900203","id":"15900203","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"body":"-1 overall.  GitHub Pull Request  Build\n      \n\n    +1 @author.  The patch does not contain any @author tags.\n\n    +0 tests included.  The patch appears to be a documentation patch that doesn't require tests.\n\n    +1 javadoc.  The javadoc tool did not generate any warning messages.\n\n    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.\n\n    +1 findbugs.  The patch does not introduce any new Findbugs (version 3.0.1) warnings.\n\n    +1 release audit.  The applied patch does not increase the total number of release audit warnings.\n\n    -1 core tests.  The patch failed core unit tests.\n\n    +1 contrib tests.  The patch passed contrib unit tests.\n\nTest results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/388//testReport/\nFindbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/388//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html\nConsole output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/388//console\n\nThis message is automatically generated.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-07T21:30:41.100+0000","updated":"2017-03-07T21:30:41.100+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13048967/comment/15900254","id":"15900254","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user keith-turner commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/186#discussion_r104790720\n  \n    --- Diff: src/java/main/org/apache/zookeeper/server/NettyServerCnxnFactory.java ---\n    @@ -162,7 +162,7 @@ public void messageReceived(ChannelHandlerContext ctx, MessageEvent e)\n                                 + \" from \" + ctx.getChannel());\n                     }\n                     NettyServerCnxn cnxn = (NettyServerCnxn)ctx.getAttachment();\n    -                synchronized(cnxn) {\n    +                synchronized(cnxn.getRpcLock()) {\n                         processMessage(e, cnxn);\n    --- End diff --\n    \n    Now one thread can be in processMessage while another thread is getting stats about the connection.  Is that ok?  \n    \n    Do you know if anything else besides ServerCnxn is synchronizing on its monitor?  Basically I am wondering if there is any other code out there that should now sync on what getRpcLock() returns.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-07T21:59:39.010+0000","updated":"2017-03-07T21:59:39.010+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13048967/comment/15900267","id":"15900267","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user joshelser commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/186#discussion_r104792592\n  \n    --- Diff: src/java/main/org/apache/zookeeper/server/NettyServerCnxnFactory.java ---\n    @@ -162,7 +162,7 @@ public void messageReceived(ChannelHandlerContext ctx, MessageEvent e)\n                                 + \" from \" + ctx.getChannel());\n                     }\n                     NettyServerCnxn cnxn = (NettyServerCnxn)ctx.getAttachment();\n    -                synchronized(cnxn) {\n    +                synchronized(cnxn.getRpcLock()) {\n                         processMessage(e, cnxn);\n    --- End diff --\n    \n    > Now one thread can be in processMessage while another thread is getting stats about the connection. Is that ok?\n    \n    I believe this is OK. We can receive two concurrent `stat` commands, but we only process one of them at a time. I'm also not a Netty wizard, so I could be wildly wrong :)\n    \n    > Basically I am wondering if there is any other code out there that should now sync on what getRpcLock() returns.\n    \n    That's a good point. I had looked to see that there were multiple other methods in `ServerCnxn` which were also synchronized (thus, changing `dumpConnectionInfo(..)` wouldn't have been sufficient). I didn't look to see if there's another code-path which is also synchronizing on the `NettyServerCnxn` (or `ServerCnxn`).\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-07T22:08:16.744+0000","updated":"2017-03-07T22:08:16.744+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13048967/comment/15904064","id":"15904064","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user afine commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/186#discussion_r105297517\n  \n    --- Diff: src/java/main/org/apache/zookeeper/server/NettyServerCnxnFactory.java ---\n    @@ -162,7 +162,7 @@ public void messageReceived(ChannelHandlerContext ctx, MessageEvent e)\n                                 + \" from \" + ctx.getChannel());\n                     }\n                     NettyServerCnxn cnxn = (NettyServerCnxn)ctx.getAttachment();\n    -                synchronized(cnxn) {\n    +                synchronized(cnxn.getRpcLock()) {\n                         processMessage(e, cnxn);\n    --- End diff --\n    \n    > Now one thread can be in processMessage while another thread is getting stats about the connection. Is that ok?\n    >> I believe this is OK. We can receive two concurrent stat commands, but we only process one of them at a time. I'm also not a Netty wizard, so I could be wildly wrong :)\n    I'm not sure I agree with this. Since the results output by the stat command are no longer guaranteed to represent one single instance in time. \n    \n    Would it be possible to put a shared lock on the command's execution (shared with any other 4LW that acquires a lock on a connection other than its own, I THINK `cons` is the only other one)?\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-09T23:33:40.578+0000","updated":"2017-03-09T23:33:40.578+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13048967/comment/15904084","id":"15904084","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user afine commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/186#discussion_r105300714\n  \n    --- Diff: src/java/main/org/apache/zookeeper/server/NettyServerCnxnFactory.java ---\n    @@ -162,7 +162,7 @@ public void messageReceived(ChannelHandlerContext ctx, MessageEvent e)\n                                 + \" from \" + ctx.getChannel());\n                     }\n                     NettyServerCnxn cnxn = (NettyServerCnxn)ctx.getAttachment();\n    -                synchronized(cnxn) {\n    +                synchronized(cnxn.getRpcLock()) {\n                         processMessage(e, cnxn);\n    --- End diff --\n    \n    >> Now one thread can be in processMessage while another thread is getting stats about the connection. Is that ok?\n    \n    > I believe this is OK. We can receive two concurrent stat commands, but we only process one of them at a time. I'm also not a Netty wizard, so I could be wildly wrong :)\n    \n    This should be OK since all fields printed by `synchronized void dumpConnectionInfo(PrintWriter pwriter, boolean brief)` are only updated in `synchronized` methods.\n    \n    Another option would be to put a shared lock on the command's execution (shared with any other 4LW that acquires a lock on a connection other than its own, I THINK `cons` is the only other one)? I think this may impact 4LW performance slightly but it would prevent the need to add another lock to `NettyServerCnxn`. \n    \n    I think I like your way better.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-09T23:53:11.159+0000","updated":"2017-03-09T23:53:11.159+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13048967/comment/15905432","id":"15905432","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user joshelser commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/186#discussion_r105444315\n  \n    --- Diff: src/java/main/org/apache/zookeeper/server/NettyServerCnxnFactory.java ---\n    @@ -162,7 +162,7 @@ public void messageReceived(ChannelHandlerContext ctx, MessageEvent e)\n                                 + \" from \" + ctx.getChannel());\n                     }\n                     NettyServerCnxn cnxn = (NettyServerCnxn)ctx.getAttachment();\n    -                synchronized(cnxn) {\n    +                synchronized(cnxn.getRpcLock()) {\n                         processMessage(e, cnxn);\n    --- End diff --\n    \n    > I think I like your way better. Although it may be a good idea to have a comment next to RPC_LOCK pointing to the JIRA\n    \n    Totally agree there :) \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-10T17:21:00.681+0000","updated":"2017-03-10T17:21:00.681+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13048967/comment/15905437","id":"15905437","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user joshelser commented on the issue:\n\n    https://github.com/apache/zookeeper/pull/186\n  \n    Also, I'll try to take a look at the test failures over the weekend and try to come up with a unit test as well.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-10T17:26:21.966+0000","updated":"2017-03-10T17:26:21.966+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13048967/comment/15906421","id":"15906421","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user joshelser commented on the issue:\n\n    https://github.com/apache/zookeeper/pull/186\n  \n    Rebased the changes on top of master. f127aab is the same, 854e48e adds a comment and a (hopefully not contrived) unit test.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-12T04:25:15.934+0000","updated":"2017-03-12T04:25:15.934+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13048967/comment/15906426","id":"15906426","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"body":"+1 overall.  GitHub Pull Request  Build\n      \n\n    +1 @author.  The patch does not contain any @author tags.\n\n    +1 tests included.  The patch appears to include 2 new or modified tests.\n\n    +1 javadoc.  The javadoc tool did not generate any warning messages.\n\n    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.\n\n    +1 findbugs.  The patch does not introduce any new Findbugs (version 3.0.1) warnings.\n\n    +1 release audit.  The applied patch does not increase the total number of release audit warnings.\n\n    +1 core tests.  The patch passed core unit tests.\n\n    +1 contrib tests.  The patch passed contrib unit tests.\n\nTest results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/405//testReport/\nFindbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/405//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html\nConsole output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/405//console\n\nThis message is automatically generated.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-12T04:44:10.973+0000","updated":"2017-03-12T04:44:10.973+0000"}],"maxResults":14,"total":14,"startAt":0},"votes":{"self":"https://issues.apache.org/jira/rest/api/2/issue/ZOOKEEPER-2711/votes","votes":0,"hasVoted":false},"worklog":{"startAt":0,"maxResults":20,"total":0,"worklogs":[]},"customfield_12311820":"0|i3b2gv:"}}