{"expand":"renderedFields,names,schema,operations,editmeta,changelog,versionedRepresentations","id":"13174006","self":"https://issues.apache.org/jira/rest/api/2/issue/13174006","key":"ZOOKEEPER-3102","fields":{"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype","name":"Bug","subtask":false,"avatarId":21133},"timespent":7200,"project":{"self":"https://issues.apache.org/jira/rest/api/2/project/12310801","id":"12310801","key":"ZOOKEEPER","name":"ZooKeeper","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/projectavatar?pid=12310801&avatarId=10011","24x24":"https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12310801&avatarId=10011","16x16":"https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12310801&avatarId=10011","32x32":"https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12310801&avatarId=10011"},"projectCategory":{"self":"https://issues.apache.org/jira/rest/api/2/projectCategory/10484","id":"10484","description":"Apache ZooKeeper related","name":"ZooKeeper"}},"fixVersions":[],"aggregatetimespent":7200,"resolution":null,"customfield_12312322":null,"customfield_12310220":"2018-07-25T11:09:41.199+0000","customfield_12312520":null,"customfield_12312323":null,"customfield_12312521":"Wed Jul 25 11:09:41 UTC 2018","customfield_12310420":"9223372036854775807","customfield_12312320":null,"customfield_12310222":null,"customfield_12312321":null,"resolutiondate":null,"workratio":-1,"customfield_12312328":null,"customfield_12312329":null,"customfield_12312923":null,"customfield_12312326":null,"customfield_12312920":null,"customfield_12310300":null,"customfield_12312327":null,"customfield_12312921":null,"customfield_12312324":null,"customfield_12312720":null,"customfield_12312325":null,"lastViewed":null,"watches":{"self":"https://issues.apache.org/jira/rest/api/2/issue/ZOOKEEPER-3102/watchers","watchCount":4,"isWatching":false},"created":"2018-07-24T06:08:12.136+0000","customfield_12310192":null,"customfield_12310191":null,"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/4","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/minor.svg","name":"Minor","id":"4"},"labels":["pull-request-available"],"customfield_12312333":null,"customfield_12310230":null,"customfield_12312334":null,"customfield_12313422":"false","customfield_12310310":"0.0","customfield_12312331":null,"customfield_12312332":null,"timeestimate":0,"aggregatetimeoriginalestimate":null,"customfield_12311120":null,"customfield_12312330":null,"versions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12326518","id":"12326518","name":"3.6.0","archived":false,"released":false}],"issuelinks":[],"customfield_12312339":null,"assignee":null,"customfield_12312337":null,"customfield_12312338":null,"updated":"2018-08-09T02:47:08.269+0000","customfield_12312335":null,"customfield_12312336":null,"status":{"self":"https://issues.apache.org/jira/rest/api/2/status/1","description":"The issue is open and ready for the assignee to start work on it.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/open.png","name":"Open","id":"1","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/2","id":2,"key":"new","colorName":"blue-gray","name":"To Do"}},"components":[{"self":"https://issues.apache.org/jira/rest/api/2/component/12312382","id":"12312382","name":"server","description":"General issues with the ZooKeeper server."}],"timeoriginalestimate":null,"description":"The method \r\n{code:java}\r\npublic void createNode(final String path, byte data[], List<ACL> acl, long ephemeralOwner, int parentCVersion, long zxid, long time, Stat outputStat)\r\n{code}\r\n \r\n\r\nin class DataTree may conceal a potential race condition regarding the session ephemeral nodes map \"Map<Long, HashSet<String>> ephemerals\".\r\n\r\nSpecifically, the codes start from line 455:\r\n\r\n \r\n{code:java}\r\n} else if (ephemeralOwner != 0) {\r\n    HashSet<String> list = ephemerals.get(ephemeralOwner);\r\n    if (list == null) {\r\n        list = new HashSet<String>();\r\n        ephemerals.put(ephemeralOwner, list);\r\n    }\r\n    synchronized (list) {\r\n        list.add(path);\r\n    }\r\n}{code}\r\n \r\n\r\nWhen an ephemeral owner tries to create nodes concurrently (under different parent nodes), an empty \"HashSet<String>\" might be created multiple times, and replace each other.\r\n\r\nThe following unit test reveals the race condition:\r\n\r\n \r\n{code:java}\r\n@Test(timeout = 60000)\r\npublic void testSessionEphemeralNodesConcurrentlyCreated()\r\n        throws InterruptedException, NodeExistsException, NoNodeException {\r\n    long session = 0x1234;\r\n    int concurrent = 10;\r\n    Thread[] threads = new Thread[concurrent];\r\n    CountDownLatch latch = new CountDownLatch(1);\r\n    for (int i = 0; i < concurrent; i++) {\r\n        String parent = \"/test\" + i;\r\n        dt.createNode(parent, new byte[0], null, 0, -1, 1, 1);\r\n\r\n        Thread thread = new Thread(() -> {\r\n            try {\r\n                latch.await();\r\n            } catch (InterruptedException e) {\r\n                throw new RuntimeException(e);\r\n            }\r\n\r\n            String path = parent + \"/0\";\r\n            try {\r\n                dt.createNode(path, new byte[0], null, session, -1, 1, 1);\r\n            } catch (Exception e) {\r\n                throw new IllegalStateException(e);\r\n            }\r\n        });\r\n        thread.start();\r\n        threads[i] = thread;\r\n    }\r\n    latch.countDown();\r\n    for (Thread thread : threads) {\r\n        thread.join();\r\n    }\r\n    int sessionEphemerals = dt.getEphemerals(session).size();\r\n    Assert.assertEquals(concurrent, sessionEphemerals);\r\n}\r\n{code}\r\nThe session \"0x1234\" has created 10 ephemeral nodes \"/test\\{0~9}/0\" concurrently (in 10 threads), so its ephemeral nodes size retrieved from DataTree should be 10 while doesn't (assertion fail).\r\n\r\n \r\n\r\nThe fix should be easy:\r\n\r\n \r\n{code:java}\r\nprivate final ConcurrentMap<Long, HashSet<String>> ephemerals = new ConcurrentHashMap<>();\r\n\r\n...\r\n\r\n} else if (ephemeralOwner != 0) {\r\n    HashSet<String> list = ephemerals.get(ephemeralOwner);\r\n    if (list == null) {\r\n        list = new HashSet<String>();\r\n        HashSet<String> _list;\r\n        if ((_list = ephemerals.putIfAbsent(ephemeralOwner, list)) != null) {\r\n            list = _list;\r\n        }\r\n    }\r\n    synchronized (list) {\r\n        list.add(path);\r\n    }\r\n}\r\n{code}\r\n \r\n\r\n \r\n\r\n ","customfield_10010":null,"timetracking":{"remainingEstimate":"0h","timeSpent":"2h","remainingEstimateSeconds":0,"timeSpentSeconds":7200},"customfield_12312026":null,"customfield_12312023":null,"customfield_12312024":null,"customfield_12312340":null,"attachment":[],"aggregatetimeestimate":0,"customfield_12312341":null,"customfield_12312220":null,"customfield_12312022":null,"customfield_12310921":null,"customfield_12310920":"9223372036854775807","customfield_12312823":null,"summary":"Potential race condition when create ephemeral nodes","creator":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=LuoFucong","name":"LuoFucong","key":"luofucong","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"LuoFucong","active":true,"timeZone":"Asia/Shanghai"},"subtasks":[],"customfield_12310291":null,"reporter":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=LuoFucong","name":"LuoFucong","key":"luofucong","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"LuoFucong","active":true,"timeZone":"Asia/Shanghai"},"customfield_12310290":null,"aggregateprogress":{"progress":7200,"total":7200,"percent":100},"customfield_12311024":null,"environment":"operating system: macOS High Sierra 10.13.6\r\n\r\njava version: 8u152\r\n\r\n ","customfield_12313520":null,"customfield_12311020":null,"duedate":null,"customfield_12310250":null,"progress":{"progress":7200,"total":7200,"percent":100},"comment":{"comments":[{"self":"https://issues.apache.org/jira/rest/api/2/issue/13174006/comment/16555524","id":"16555524","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=maoling","name":"maoling","key":"maoling","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=maoling&avatarId=32024","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=maoling&avatarId=32024","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=maoling&avatarId=32024","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=maoling&avatarId=32024"},"displayName":"maoling","active":true,"timeZone":"Etc/UTC"},"body":"[~LuoFucong] \r\n\r\nYep.Your analysis is right.The contributor guide is [here]([https://cwiki.apache.org/confluence/display/ZOOKEEPER/HowToContribute]]),then we can go further!","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=maoling","name":"maoling","key":"maoling","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=maoling&avatarId=32024","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=maoling&avatarId=32024","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=maoling&avatarId=32024","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=maoling&avatarId=32024"},"displayName":"maoling","active":true,"timeZone":"Etc/UTC"},"created":"2018-07-25T11:09:41.199+0000","updated":"2018-07-26T03:20:17.167+0000"}],"maxResults":1,"total":1,"startAt":0},"votes":{"self":"https://issues.apache.org/jira/rest/api/2/issue/ZOOKEEPER-3102/votes","votes":0,"hasVoted":false},"worklog":{"startAt":0,"maxResults":20,"total":12,"worklogs":[{"self":"https://issues.apache.org/jira/rest/api/2/issue/13174006/worklog/127642","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"GitHub user MichaelScofield opened a pull request:\n\n    https://github.com/apache/zookeeper/pull/584\n\n    ZOOKEEPER-3102: Potential race condition when create ephemeral nodes.\n\n    \n\nYou can merge this pull request into a Git repository by running:\n\n    $ git pull https://github.com/MichaelScofield/zookeeper ZOOKEEPER-3102\n\nAlternatively you can review and apply these changes as the patch at:\n\n    https://github.com/apache/zookeeper/pull/584.patch\n\nTo close this pull request, make a commit to your master/trunk branch\nwith (at least) the following in the commit message:\n\n    This closes #584\n    \n----\ncommit f7b494858e719b2c6dc08befea5bd2caf82c3976\nAuthor: luo.fucong <luo.fucong@...>\nDate:   2018-07-26T04:46:24Z\n\n    ZOOKEEPER-3102: Potential race condition when create ephemeral nodes.\n\n----\n","created":"2018-07-26T04:47:59.877+0000","updated":"2018-07-26T04:47:59.877+0000","started":"2018-07-26T04:47:59.877+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"127642","issueId":"13174006"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13174006/worklog/128030","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user breed commented on the issue:\n\n    https://github.com/apache/zookeeper/pull/584\n  \n    i'm not sure this is an issue. there is a single thread (FileRequestProcessor) that does all the mutations, so i don't think there is a race here. there might be a race in other places, but we need to validate that and write a test for it.\n","created":"2018-07-27T04:21:55.206+0000","updated":"2018-07-27T04:21:55.206+0000","started":"2018-07-27T04:21:55.206+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"128030","issueId":"13174006"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13174006/worklog/128062","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user lvfangmin commented on the issue:\n\n    https://github.com/apache/zookeeper/pull/584\n  \n    This is good enough to make the ephemerals thread safe in DataTree, if it's being called in multiple thread, the code you touched here may add ephemerals which is just removed in killSession.\r\n    \r\n    A lot of code inside DataTree assumes that there is a single thread will call it, and it's guaranteed from FinalRequestProcessor, which is called from the WorkerService in CommitProcessor, and CommitProcessor guarantees only a single write is allowed at a time. So I agree with Ben, I don't think we need this change.\n","created":"2018-07-27T05:40:03.942+0000","updated":"2018-07-27T05:40:03.942+0000","started":"2018-07-27T05:40:03.942+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"128062","issueId":"13174006"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13174006/worklog/128153","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user anmolnar commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/584#discussion_r205749086\n  \n    --- Diff: src/java/main/org/apache/zookeeper/server/DataTree.java ---\n    @@ -478,7 +478,10 @@ public void createNode(final String path, byte data[], List<ACL> acl,\n                     HashSet<String> list = ephemerals.get(ephemeralOwner);\n                     if (list == null) {\n                         list = new HashSet<String>();\n    -                    ephemerals.put(ephemeralOwner, list);\n    +                    HashSet<String> _list;\n    --- End diff --\n    \n    You can use `computeIfAbsent()` like this:\r\n    ```java\r\n    HashSet<String> list = ephemerals.computeIfAbsent(ephemeralOwner, k -> new HashSet<String>());\r\n    ```\n","created":"2018-07-27T11:58:38.248+0000","updated":"2018-07-27T11:58:38.248+0000","started":"2018-07-27T11:58:38.247+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"128153","issueId":"13174006"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13174006/worklog/128421","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user maoling commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/584#discussion_r205941687\n  \n    --- Diff: src/java/main/org/apache/zookeeper/server/DataTree.java ---\n    @@ -478,7 +478,10 @@ public void createNode(final String path, byte data[], List<ACL> acl,\n                     HashSet<String> list = ephemerals.get(ephemeralOwner);\n                     if (list == null) {\n                         list = new HashSet<String>();\n    -                    ephemerals.put(ephemeralOwner, list);\n    +                    HashSet<String> _list;\n    +                    if ((_list = ephemerals.putIfAbsent(ephemeralOwner, list)) != null) {\n    +                        list = _list;\n    +                    }\n                     }\n                     synchronized (list) {\n    --- End diff --\n    \n    Even if when `createNode` is called by multi-thread.this fix is also not thread-safe.\r\n    Step1:One thread has acquired the `list` lock and enters into L487,add a element into  `list`\r\n    Step2:But at the same time just after Step1, another thread enters into L483,the reference of `list` is pointed to the old `_list` object. It will cause thread-unsafe\r\n    BTW: **Breaking Bad** is the best U.S.TV series\n","created":"2018-07-28T12:03:59.873+0000","updated":"2018-07-28T12:03:59.873+0000","started":"2018-07-28T12:03:59.871+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"128421","issueId":"13174006"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13174006/worklog/128471","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user anmolnar commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/584#discussion_r205950078\n  \n    --- Diff: src/java/main/org/apache/zookeeper/server/DataTree.java ---\n    @@ -478,7 +478,10 @@ public void createNode(final String path, byte data[], List<ACL> acl,\n                     HashSet<String> list = ephemerals.get(ephemeralOwner);\n                     if (list == null) {\n                         list = new HashSet<String>();\n    -                    ephemerals.put(ephemeralOwner, list);\n    +                    HashSet<String> _list;\n    +                    if ((_list = ephemerals.putIfAbsent(ephemeralOwner, list)) != null) {\n    +                        list = _list;\n    +                    }\n                     }\n                     synchronized (list) {\n    --- End diff --\n    \n    I'm not sure about that.\r\n    \r\n    ephemerals.putIfAbsent() is thread safe: it guarantees that newly created instance will be added to the HashMap only if the key is associated with a null value. Otherwise you will get the instance already present in the HashMap.\r\n    Either case `list` will point to the one and only instance present in the hashmap.\r\n    \r\n    In your example when Step2 enters L483 it will get back the instance which was created and added to the HashMap by Step1 before it acquired the `list` lock. And that instance cannot be replaced in the HashMap with this code.\r\n    \r\n    After all `synchronized (list)` only guards access to the List, HashMap is guarded by putIfAbsent().\r\n    I still believe that `computeIfAbsent()` is more convenient and readable here.\n","created":"2018-07-28T18:14:08.622+0000","updated":"2018-07-28T18:14:08.622+0000","started":"2018-07-28T18:14:08.621+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"128471","issueId":"13174006"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13174006/worklog/128488","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user breed commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/584#discussion_r205959572\n  \n    --- Diff: src/java/main/org/apache/zookeeper/server/DataTree.java ---\n    @@ -478,7 +478,10 @@ public void createNode(final String path, byte data[], List<ACL> acl,\n                     HashSet<String> list = ephemerals.get(ephemeralOwner);\n                     if (list == null) {\n                         list = new HashSet<String>();\n    -                    ephemerals.put(ephemeralOwner, list);\n    +                    HashSet<String> _list;\n    --- End diff --\n    \n    we need synchronization to prevent znode changes while the znode is being snapshot to disk, but for request processing there is only a single thread that does mutations and mutations don't happen while read requests are being processed.\n","created":"2018-07-29T03:12:33.338+0000","updated":"2018-07-29T03:12:33.338+0000","started":"2018-07-29T03:12:33.337+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"128488","issueId":"13174006"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13174006/worklog/128498","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user maoling commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/584#discussion_r205961633\n  \n    --- Diff: src/java/main/org/apache/zookeeper/server/DataTree.java ---\n    @@ -478,7 +478,10 @@ public void createNode(final String path, byte data[], List<ACL> acl,\n                     HashSet<String> list = ephemerals.get(ephemeralOwner);\n                     if (list == null) {\n                         list = new HashSet<String>();\n    -                    ephemerals.put(ephemeralOwner, list);\n    +                    HashSet<String> _list;\n    +                    if ((_list = ephemerals.putIfAbsent(ephemeralOwner, list)) != null) {\n    +                        list = _list;\n    +                    }\n                     }\n                     synchronized (list) {\n    --- End diff --\n    \n    @anmolnar \r\n    I will test it with that unit test , using a 'threadpool' and create 1000000 nodes to reproduce what I guess。\r\n    I wish I was wrong,but if i'm right ,you need to watch Breaking Bad series (smirk).\r\n    \r\n\n","created":"2018-07-29T05:53:09.973+0000","updated":"2018-07-29T05:53:09.973+0000","started":"2018-07-29T05:53:09.973+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"128498","issueId":"13174006"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13174006/worklog/128636","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user MichaelScofield commented on the issue:\n\n    https://github.com/apache/zookeeper/pull/584\n  \n    @anmolnar Thanks for the `computeIfAbsent` suggestion. Modified codes accordingly.\r\n    @breed @lvfangmin I'm aware that `createNode` is single-threaded, and the race condition I revealed is most likely not gonna happened in real world. But the original codes already assumed a multi-threaded used ephemerals map, so I think it's more reasonable to make it behaved more concurrency safe.\n","created":"2018-07-30T04:02:52.192+0000","updated":"2018-07-30T04:02:52.192+0000","started":"2018-07-30T04:02:52.192+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"128636","issueId":"13174006"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13174006/worklog/132365","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user anmolnar commented on the issue:\n\n    https://github.com/apache/zookeeper/pull/584\n  \n    @MichaelScofield Would you please respond to @lvfangmin 's comment?\r\n    If this change doesn't make creating ephemerals thread-safe, there's no value in committing it.\n","created":"2018-08-08T13:00:39.833+0000","updated":"2018-08-08T13:00:39.833+0000","started":"2018-08-08T13:00:39.833+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"132365","issueId":"13174006"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13174006/worklog/132430","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user maoling commented on the issue:\n\n    https://github.com/apache/zookeeper/pull/584\n  \n    sorry ,too embarrassed.I was wrong about my previous opinion. look at my thread-pool [unit test](https://github.com/maoling/zookeeper/blob/ZOOKEEPER-3102/src/java/test/org/apache/zookeeper/server/DataTreeTest.java#L326)\n","created":"2018-08-08T16:36:09.622+0000","updated":"2018-08-08T16:36:09.622+0000","started":"2018-08-08T16:36:09.621+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"132430","issueId":"13174006"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13174006/worklog/132812","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user MichaelScofield commented on the issue:\n\n    https://github.com/apache/zookeeper/pull/584\n  \n    @anmolnar Sorry for the late response. I think what @lvfangmin wants to put here, is that `createNode()` is called in single thread, so the race condition does not exist. **IF** there were multi-threaded call, a lot of codes would have broken, including the `killSession()`.\r\n    \r\n    However, the original code might have synchronized on a wrong `list`:\r\n    ```\r\n    HashSet<String> list = ephemerals.get(ephemeralOwner);\r\n    if (list == null) {\r\n        list = new HashSet<String>();\r\n        ephemerals.put(ephemeralOwner, list);\r\n    }\r\n    \r\n    // the \"list\" here is assumed to be contented, if it's created or altered elsewhere\r\n    // (not bounded by the single-threaded guarantee), we might have synchronized\r\n    // on a wrong object (that we just created).\r\n    synchronized (list) {\r\n        list.add(path);\r\n    }\r\n    ```\r\n    \r\n    I'm just trying to make the codes look more robust. \n","created":"2018-08-09T02:47:08.264+0000","updated":"2018-08-09T02:47:08.264+0000","started":"2018-08-09T02:47:08.264+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"132812","issueId":"13174006"}]},"customfield_12311820":"0|i3w7i7:"}}