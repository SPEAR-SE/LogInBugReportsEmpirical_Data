{"expand":"renderedFields,names,schema,operations,editmeta,changelog,versionedRepresentations","id":"13087331","self":"https://issues.apache.org/jira/rest/api/2/issue/13087331","key":"ZOOKEEPER-2845","fields":{"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype","name":"Bug","subtask":false,"avatarId":21133},"timespent":null,"project":{"self":"https://issues.apache.org/jira/rest/api/2/project/12310801","id":"12310801","key":"ZOOKEEPER","name":"ZooKeeper","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/projectavatar?pid=12310801&avatarId=10011","24x24":"https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12310801&avatarId=10011","16x16":"https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12310801&avatarId=10011","32x32":"https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12310801&avatarId=10011"},"projectCategory":{"self":"https://issues.apache.org/jira/rest/api/2/projectCategory/10484","id":"10484","description":"Apache ZooKeeper related","name":"ZooKeeper"}},"fixVersions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12340141","id":"12340141","description":"Beta release against 3.5 branch","name":"3.5.4","archived":false,"released":true,"releaseDate":"2018-05-17"},{"self":"https://issues.apache.org/jira/rest/api/2/version/12326518","id":"12326518","name":"3.6.0","archived":false,"released":false},{"self":"https://issues.apache.org/jira/rest/api/2/version/12342040","id":"12342040","description":"Fix release against 3.4 branch","name":"3.4.12","archived":false,"released":true,"releaseDate":"2018-05-01"}],"aggregatetimespent":null,"resolution":{"self":"https://issues.apache.org/jira/rest/api/2/resolution/1","id":"1","description":"A fix for this issue is checked into the tree and tested.","name":"Fixed"},"customfield_12312322":null,"customfield_12310220":"2017-07-14T23:23:11.699+0000","customfield_12312520":null,"customfield_12312323":null,"customfield_12312521":"Tue Feb 27 14:48:16 UTC 2018","customfield_12310420":"9223372036854775807","customfield_12312320":null,"customfield_12310222":"1_*:*_1_*:*_19353599556_*|*_5_*:*_1_*:*_0","customfield_12312321":null,"resolutiondate":"2018-02-23T23:20:00.005+0000","workratio":-1,"customfield_12312328":null,"customfield_12312329":null,"customfield_12312923":null,"customfield_12312326":null,"customfield_12312920":null,"customfield_12310300":null,"customfield_12312327":null,"customfield_12312921":null,"customfield_12312324":null,"customfield_12312720":null,"customfield_12312325":null,"lastViewed":null,"watches":{"self":"https://issues.apache.org/jira/rest/api/2/issue/ZOOKEEPER-2845/watchers","watchCount":9,"isWatching":false},"created":"2017-07-14T23:20:00.510+0000","customfield_12310192":null,"customfield_12310191":null,"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/2","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/critical.svg","name":"Critical","id":"2"},"labels":[],"customfield_12312333":null,"customfield_12310230":null,"customfield_12312334":null,"customfield_12313422":"false","customfield_12310310":"0.0","customfield_12312331":null,"customfield_12312332":null,"timeestimate":null,"aggregatetimeoriginalestimate":null,"customfield_12311120":null,"customfield_12312330":null,"versions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12338036","id":"12338036","description":"Fix release against 3.4 branch","name":"3.4.10","archived":false,"released":true,"releaseDate":"2017-03-30"},{"self":"https://issues.apache.org/jira/rest/api/2/version/12335444","id":"12335444","description":"Beta release against 3.5 branch","name":"3.5.3","archived":false,"released":true,"releaseDate":"2017-04-17"},{"self":"https://issues.apache.org/jira/rest/api/2/version/12326518","id":"12326518","name":"3.6.0","archived":false,"released":false}],"issuelinks":[{"id":"12509284","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12509284","type":{"id":"12310050","name":"Regression","inward":"is broken by","outward":"breaks","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/12310050"},"inwardIssue":{"id":"13038156","key":"ZOOKEEPER-2678","self":"https://issues.apache.org/jira/rest/api/2/issue/13038156","fields":{"summary":"Large databases take a long time to regain a quorum","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Done"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.svg","name":"Major","id":"3"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype","name":"Bug","subtask":false,"avatarId":21133}}}}],"customfield_12312339":null,"assignee":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=revans2","name":"revans2","key":"revans2","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Robert Joseph Evans","active":true,"timeZone":"America/Chicago"},"customfield_12312337":null,"customfield_12312338":null,"updated":"2018-02-27T14:48:16.899+0000","customfield_12312335":null,"customfield_12312336":null,"status":{"self":"https://issues.apache.org/jira/rest/api/2/status/5","description":"A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/resolved.png","name":"Resolved","id":"5","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Done"}},"components":[{"self":"https://issues.apache.org/jira/rest/api/2/component/12312379","id":"12312379","name":"quorum","description":"Quorum determination for ZooKeeper"}],"timeoriginalestimate":null,"description":"In ZOOKEEPER-2678, the ZKDatabase is retained to reduce the unavailable time during leader election. In ZooKeeper ensemble, it's possible that the snapshot is ahead of txn file (due to slow disk on the server, etc), or the txn file is ahead of snapshot due to no commit message being received yet. \n\nIf snapshot is ahead of txn file, since the SyncRequestProcessor queue will be drained during shutdown, the snapshot and txn file will keep consistent before leader election happening, so this is not an issue.\n\nBut if txn is ahead of snapshot, it's possible that the ensemble will have data inconsistent issue, here is the simplified scenario to show the issue:\n\nLet's say we have a 3 servers in the ensemble, server A and B are followers, and C is leader, and all the snapshot and txn are up to T0:\n1. A new request reached to leader C to create Node N, and it's converted to txn T1 \n2. Txn T1 was synced to disk in C, but just before the proposal reaching out to the followers, A and B restarted, so the T1 didn't exist in A and B\n3. A and B formed a new quorum after restart, let's say B is the leader\n4. C changed to looking state due to no enough followers, it will sync with leader B with last Zxid T0, which will have an empty diff sync\n5. Before C take snapshot it restarted, it replayed the txns on disk which includes T1, now it will have Node N, but A and B doesn't have it.\n\nAlso I included the a test case to reproduce this issue consistently. \n\nWe have a totally different RetainDB version which will avoid this issue by doing consensus between snapshot and txn files before leader election, will submit for review.","customfield_10010":null,"timetracking":{},"customfield_12312026":null,"customfield_12312023":null,"customfield_12312024":null,"customfield_12312340":null,"attachment":[],"aggregatetimeestimate":null,"customfield_12312341":null,"customfield_12312220":null,"customfield_12312022":null,"customfield_12310921":null,"customfield_12310920":"9223372036854775807","customfield_12312823":null,"summary":"Data inconsistency issue due to retain database in leader election","creator":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=lvfangmin","name":"lvfangmin","key":"lvfangmin","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=lvfangmin&avatarId=24660","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=lvfangmin&avatarId=24660","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=lvfangmin&avatarId=24660","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=lvfangmin&avatarId=24660"},"displayName":"Fangmin Lv","active":true,"timeZone":"Etc/UTC"},"subtasks":[],"customfield_12310291":null,"reporter":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=lvfangmin","name":"lvfangmin","key":"lvfangmin","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=lvfangmin&avatarId=24660","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=lvfangmin&avatarId=24660","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=lvfangmin&avatarId=24660","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=lvfangmin&avatarId=24660"},"displayName":"Fangmin Lv","active":true,"timeZone":"Etc/UTC"},"customfield_12310290":null,"aggregateprogress":{"progress":0,"total":0},"customfield_12311024":null,"environment":null,"customfield_12313520":null,"customfield_12311020":null,"duedate":null,"customfield_12310250":null,"progress":{"progress":0,"total":0},"comment":{"comments":[{"self":"https://issues.apache.org/jira/rest/api/2/issue/13087331/comment/16088277","id":"16088277","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"GitHub user lvfangmin opened a pull request:\n\n    https://github.com/apache/zookeeper/pull/310\n\n    [ZOOKEEPER-2845][Test] Test used to reproduce the data inconsistency issue due to retain database in leader election\n\n    \n\nYou can merge this pull request into a Git repository by running:\n\n    $ git pull https://github.com/lvfangmin/zookeeper ZOOKEEPER-2845-TEST\n\nAlternatively you can review and apply these changes as the patch at:\n\n    https://github.com/apache/zookeeper/pull/310.patch\n\nTo close this pull request, make a commit to your master/trunk branch\nwith (at least) the following in the commit message:\n\n    This closes #310\n    \n----\ncommit ff0bc49de51635da1d5bff0e4f260a61acc87db0\nAuthor: Fangmin Lyu <allenlyu@fb.com>\nDate:   2017-07-14T23:02:20Z\n\n    reproduce the data inconsistency issue\n\n----\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-07-14T23:23:11.699+0000","updated":"2017-07-14T23:23:11.699+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13087331/comment/16088293","id":"16088293","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"body":"-1 overall.  GitHub Pull Request  Build\n      \n\n    +1 @author.  The patch does not contain any @author tags.\n\n    +1 tests included.  The patch appears to include 3 new or modified tests.\n\n    +1 javadoc.  The javadoc tool did not generate any warning messages.\n\n    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.\n\n    +1 findbugs.  The patch does not introduce any new Findbugs (version 3.0.1) warnings.\n\n    +1 release audit.  The applied patch does not increase the total number of release audit warnings.\n\n    -1 core tests.  The patch failed core unit tests.\n\n    +1 contrib tests.  The patch passed contrib unit tests.\n\nTest results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/883//testReport/\nFindbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/883//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html\nConsole output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/883//console\n\nThis message is automatically generated.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"created":"2017-07-14T23:37:54.355+0000","updated":"2017-07-14T23:37:54.355+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13087331/comment/16088296","id":"16088296","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user lvfangmin commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/310#discussion_r127567852\n  \n    --- Diff: src/java/test/org/apache/zookeeper/server/quorum/QuorumPeerMainTest.java ---\n    @@ -784,4 +784,126 @@ public void testWithOnlyMinSessionTimeout() throws Exception {\n                     maxSessionTimeOut, quorumPeer.getMaxSessionTimeout());\n         }\n     \n    +    @Test\n    +    public void testTxnAheadSnapInRetainDB() throws Exception {\n    +        // 1. start up server and wait for leader election to finish\n    +        ClientBase.setupTestEnv();\n    +        final int SERVER_COUNT = 3;\n    +        final int clientPorts[] = new int[SERVER_COUNT];\n    +        StringBuilder sb = new StringBuilder();\n    +        for(int i = 0; i < SERVER_COUNT; i++) {\n    +               clientPorts[i] = PortAssignment.unique();\n    +               sb.append(\"server.\"+i+\"=127.0.0.1:\"+PortAssignment.unique()+\":\"+PortAssignment.unique()+\";\"+clientPorts[i]+\"\\n\");\n    +        }\n    +        String quorumCfgSection = sb.toString();\n    +\n    +        MainThread mt[] = new MainThread[SERVER_COUNT];\n    +        ZooKeeper zk[] = new ZooKeeper[SERVER_COUNT];\n    +        for (int i = 0; i < SERVER_COUNT; i++) {\n    +            mt[i] = new MainThread(i, clientPorts[i], quorumCfgSection);\n    +            mt[i].start();\n    +            zk[i] = new ZooKeeper(\"127.0.0.1:\" + clientPorts[i], ClientBase.CONNECTION_TIMEOUT, this);\n    +        }\n    +\n    +        waitForAll(zk, States.CONNECTED);\n    +\n    +        // we need to shutdown and start back up to make sure that the create session isn't the first transaction since\n    +        // that is rather innocuous.\n    +        for (int i = 0; i < SERVER_COUNT; i++) {\n    +            mt[i].shutdown();\n    +        }\n    +\n    +        waitForAll(zk, States.CONNECTING);\n    +\n    +        for (int i = 0; i < SERVER_COUNT; i++) {\n    +            mt[i].start();\n    +            // Recreate a client session since the previous session was not persisted.\n    +            zk[i] = new ZooKeeper(\"127.0.0.1:\" + clientPorts[i], ClientBase.CONNECTION_TIMEOUT, this);\n    +         }\n    +\n    +        waitForAll(zk, States.CONNECTED);\n    +\n    +\n    +        // 2. kill all followers\n    +        int leader = -1;\n    +        Map<Long, Proposal> outstanding = null;\n    +        for (int i = 0; i < SERVER_COUNT; i++) {\n    +            if (mt[i].main.quorumPeer.leader != null) {\n    +                leader = i;\n    +                outstanding = mt[leader].main.quorumPeer.leader.outstandingProposals;\n    +                // increase the tick time to delay the leader going to looking\n    +                mt[leader].main.quorumPeer.tickTime = 10000;\n    +            }\n    +        }\n    +\n    +        for (int i = 0; i < SERVER_COUNT; i++) {\n    +            if (i != leader) {\n    +                mt[i].shutdown();\n    +            }\n    +        }\n    +\n    +        // 3. start up the followers to form a new quorum\n    +        for (int i = 0; i < SERVER_COUNT; i++) {\n    +            if (i != leader) {\n    +                mt[i].start();\n    +            }\n    +        }\n    +\n    +        // 4. wait one of the follower to be the leader\n    +        for (int i = 0; i < SERVER_COUNT; i++) {\n    +            if (i != leader) {\n    +                // Recreate a client session since the previous session was not persisted.\n    +                zk[i] = new ZooKeeper(\"127.0.0.1:\" + clientPorts[i], ClientBase.CONNECTION_TIMEOUT, this);\n    +                waitForOne(zk[i], States.CONNECTED);\n    +            }\n    +        }\n    +\n    +        // 5. send a create request to leader and make sure it's synced to disk,\n    +        //    which means it acked from itself\n    +        try {\n    +            zk[leader].create(\"/zk\" + leader, \"zk\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n    +                    CreateMode.PERSISTENT);\n    +            Assert.fail(\"create /zk\" + leader + \" should have failed\");\n    +        } catch (KeeperException e) {}\n    +\n    +        // just make sure that we actually did get it in process at the\n    +        // leader\n    +        Assert.assertTrue(outstanding.size() == 1);\n    +        Proposal p = (Proposal) outstanding.values().iterator().next();\n    +        Assert.assertTrue(p.request.getHdr().getType() == OpCode.create);\n    +\n    +        // make sure it has a chance to write it to disk\n    +        Thread.sleep(1000);\n    +        p.qvAcksetPairs.get(0).getAckset().contains(leader);\n    +\n    +        // 6. wait the leader to quit due to no enough followers\n    +        waitForOne(zk[leader], States.CONNECTING);\n    +\n    +        int newLeader = -1;\n    +        for (int i = 0; i < SERVER_COUNT; i++) {\n    +            if (mt[i].main.quorumPeer.leader != null) {\n    +                newLeader = i;\n    +            }\n    +        }\n    +        // make sure a different leader was elected\n    +        Assert.assertTrue(newLeader != leader);\n    +\n    +        // 7. restart the previous leader\n    +        mt[leader].shutdown();\n    +        waitForOne(zk[leader], States.CONNECTING);\n    +        mt[leader].start();\n    +        waitForOne(zk[leader], States.CONNECTED);\n    +\n    +        // 8. check the node exist in previous leader but not others\n    +        //    make sure everything is consistent\n    +        for (int i = 0; i < SERVER_COUNT; i++) {\n    +            Assert.assertTrue(\"server \" + i + \" should not have /zk\" + leader, zk[i].exists(\"/zk\" + leader, false) == null);\n    --- End diff --\n    \n    The test will fail here as the node exist in previous leader.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-07-14T23:39:04.530+0000","updated":"2017-07-14T23:39:04.530+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13087331/comment/16088299","id":"16088299","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hanm","name":"hanm","key":"hanm","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hanm&avatarId=26946","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hanm&avatarId=26946","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hanm&avatarId=26946","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hanm&avatarId=26946"},"displayName":"Michael Han","active":true,"timeZone":"America/Vancouver"},"body":"Thanks for reporting this issue [~lvfangmin].\n\nbq. C changed to looking state due to no enough followers, it will sync with leader B with last Zxid T0, which will have an empty diff sync\n\nAre you saying leader B is sending a DIFF to follower C in this case? Since B does not have T1, I think it should send a TRUNC and C should drop T1 in its txn log.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hanm","name":"hanm","key":"hanm","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hanm&avatarId=26946","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hanm&avatarId=26946","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hanm&avatarId=26946","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hanm&avatarId=26946"},"displayName":"Michael Han","active":true,"timeZone":"America/Vancouver"},"created":"2017-07-14T23:43:17.974+0000","updated":"2017-07-14T23:43:17.974+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13087331/comment/16088306","id":"16088306","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=lvfangmin","name":"lvfangmin","key":"lvfangmin","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=lvfangmin&avatarId=24660","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=lvfangmin&avatarId=24660","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=lvfangmin&avatarId=24660","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=lvfangmin&avatarId=24660"},"displayName":"Fangmin Lv","active":true,"timeZone":"Etc/UTC"},"body":"[~hanm] T1 only exists in txn file but hasn't been applied to the data tree yet, the lastProcessedZxid in follower C is T0, so no TRUNC message when sync with leader.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=lvfangmin","name":"lvfangmin","key":"lvfangmin","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=lvfangmin&avatarId=24660","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=lvfangmin&avatarId=24660","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=lvfangmin&avatarId=24660","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=lvfangmin&avatarId=24660"},"displayName":"Fangmin Lv","active":true,"timeZone":"Etc/UTC"},"created":"2017-07-14T23:53:07.531+0000","updated":"2017-07-14T23:53:07.531+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13087331/comment/16088464","id":"16088464","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hanm","name":"hanm","key":"hanm","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hanm&avatarId=26946","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hanm&avatarId=26946","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hanm&avatarId=26946","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hanm&avatarId=26946"},"displayName":"Michael Han","active":true,"timeZone":"America/Vancouver"},"body":"Make sense to me. I think previously we don't have this issue because the {{zkDb}} was cleared across leader election, and C will find out its {{lastProcessedZxid}} is T1, rather than T0, while reinitialize {{zkDb}} from snap/tnx log which will yield a TRUNC instead of DIFF from leader B. ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hanm","name":"hanm","key":"hanm","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hanm&avatarId=26946","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hanm&avatarId=26946","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hanm&avatarId=26946","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hanm&avatarId=26946"},"displayName":"Michael Han","active":true,"timeZone":"America/Vancouver"},"created":"2017-07-15T05:11:55.926+0000","updated":"2017-07-15T05:21:36.271+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13087331/comment/16124813","id":"16124813","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hanm","name":"hanm","key":"hanm","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hanm&avatarId=26946","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hanm&avatarId=26946","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hanm&avatarId=26946","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hanm&avatarId=26946"},"displayName":"Michael Han","active":true,"timeZone":"America/Vancouver"},"body":"[~lvfangmin] Any plan to submit your retain db implementation? This is an important bug to fix.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hanm","name":"hanm","key":"hanm","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hanm&avatarId=26946","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hanm&avatarId=26946","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hanm&avatarId=26946","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hanm&avatarId=26946"},"displayName":"Michael Han","active":true,"timeZone":"America/Vancouver"},"created":"2017-08-13T05:34:22.716+0000","updated":"2017-08-13T05:34:22.716+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13087331/comment/16125267","id":"16125267","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=lvfangmin","name":"lvfangmin","key":"lvfangmin","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=lvfangmin&avatarId=24660","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=lvfangmin&avatarId=24660","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=lvfangmin&avatarId=24660","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=lvfangmin&avatarId=24660"},"displayName":"Fangmin Lv","active":true,"timeZone":"Etc/UTC"},"body":"[~hanm] we've just finished and tried to test the RetainDB in our internal ensemble, might submit the code for review next week. ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=lvfangmin","name":"lvfangmin","key":"lvfangmin","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=lvfangmin&avatarId=24660","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=lvfangmin&avatarId=24660","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=lvfangmin&avatarId=24660","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=lvfangmin&avatarId=24660"},"displayName":"Fangmin Lv","active":true,"timeZone":"Etc/UTC"},"created":"2017-08-14T05:47:00.256+0000","updated":"2017-08-14T05:47:00.256+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13087331/comment/16135559","id":"16135559","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=lvfangmin","name":"lvfangmin","key":"lvfangmin","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=lvfangmin&avatarId=24660","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=lvfangmin&avatarId=24660","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=lvfangmin&avatarId=24660","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=lvfangmin&avatarId=24660"},"displayName":"Fangmin Lv","active":true,"timeZone":"Etc/UTC"},"body":"The internal patch has been stabilized, which have been tested for a long time, we've rolled it out to one of the production environment last week. Joseph from our team will attach the patch here for review this week.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=lvfangmin","name":"lvfangmin","key":"lvfangmin","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=lvfangmin&avatarId=24660","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=lvfangmin&avatarId=24660","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=lvfangmin&avatarId=24660","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=lvfangmin&avatarId=24660"},"displayName":"Fangmin Lv","active":true,"timeZone":"Etc/UTC"},"created":"2017-08-21T18:28:28.357+0000","updated":"2017-08-21T18:28:28.357+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13087331/comment/16136242","id":"16136242","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hanm","name":"hanm","key":"hanm","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hanm&avatarId=26946","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hanm&avatarId=26946","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hanm&avatarId=26946","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hanm&avatarId=26946"},"displayName":"Michael Han","active":true,"timeZone":"America/Vancouver"},"body":"Thanks for the update, [~lvfangmin]. Good to know the patch is tested in prod environment!","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hanm","name":"hanm","key":"hanm","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hanm&avatarId=26946","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hanm&avatarId=26946","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hanm&avatarId=26946","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hanm&avatarId=26946"},"displayName":"Michael Han","active":true,"timeZone":"America/Vancouver"},"created":"2017-08-22T04:07:47.418+0000","updated":"2017-08-22T04:07:47.418+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13087331/comment/16153628","id":"16153628","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user revans2 commented on the issue:\n\n    https://github.com/apache/zookeeper/pull/310\n  \n    @lvfangmin any update on getting a pull request for the actual fix?\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-09-05T13:17:32.781+0000","updated":"2017-09-05T13:17:32.781+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13087331/comment/16154246","id":"16154246","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user lvfangmin commented on the issue:\n\n    https://github.com/apache/zookeeper/pull/310\n  \n    @revans2 my teammate was working on the fix, and he was planning run it on prod for a while before sending out the diff. I'll sync with him today about the status. \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-09-05T20:28:37.096+0000","updated":"2017-09-05T20:28:37.096+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13087331/comment/16283999","id":"16283999","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=davelatham","name":"davelatham","key":"davelatham","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Dave Latham","active":true,"timeZone":"America/Los_Angeles"},"body":"Any updates here?  We were considering upgrading our zookeeper, but don't want to go to a release with a known data inconsistency problem.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=davelatham","name":"davelatham","key":"davelatham","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Dave Latham","active":true,"timeZone":"America/Los_Angeles"},"created":"2017-12-08T18:37:59.431+0000","updated":"2017-12-08T18:37:59.431+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13087331/comment/16284066","id":"16284066","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=lvfangmin","name":"lvfangmin","key":"lvfangmin","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=lvfangmin&avatarId=24660","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=lvfangmin&avatarId=24660","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=lvfangmin&avatarId=24660","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=lvfangmin&avatarId=24660"},"displayName":"Fangmin Lv","active":true,"timeZone":"Etc/UTC"},"body":"[~davelatham] our internal patch is based on 3.6 branch, and we found it amplified the issue reported in ZOOKEEPER-2926, on our production we need to disable the local session feature to mitigate the issue. Also, we haven't patched and tested the diff on 3.4 yet, so we're not confident to get it out yet. Instead, I would suggest to revert the existing broken retainDB commit to unblock the next release. \r\n\r\nI have made a patch for ZOOKEEPER-2926, will update it there. And assign this Jira to my teammate Joseph to follow up, he is the owner of our internal retainDB feature.\r\n\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=lvfangmin","name":"lvfangmin","key":"lvfangmin","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=lvfangmin&avatarId=24660","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=lvfangmin&avatarId=24660","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=lvfangmin&avatarId=24660","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=lvfangmin&avatarId=24660"},"displayName":"Fangmin Lv","active":true,"timeZone":"Etc/UTC"},"created":"2017-12-08T19:16:13.328+0000","updated":"2017-12-08T19:16:13.328+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13087331/comment/16284068","id":"16284068","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=lvfangmin","name":"lvfangmin","key":"lvfangmin","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=lvfangmin&avatarId=24660","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=lvfangmin&avatarId=24660","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=lvfangmin&avatarId=24660","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=lvfangmin&avatarId=24660"},"displayName":"Fangmin Lv","active":true,"timeZone":"Etc/UTC"},"body":"Can someone help add my teammate jtuple as the contributor? So I can assign the task to him.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=lvfangmin","name":"lvfangmin","key":"lvfangmin","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=lvfangmin&avatarId=24660","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=lvfangmin&avatarId=24660","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=lvfangmin&avatarId=24660","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=lvfangmin&avatarId=24660"},"displayName":"Fangmin Lv","active":true,"timeZone":"Etc/UTC"},"created":"2017-12-08T19:18:02.034+0000","updated":"2017-12-08T19:18:02.034+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13087331/comment/16284144","id":"16284144","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=davelatham","name":"davelatham","key":"davelatham","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Dave Latham","active":true,"timeZone":"America/Los_Angeles"},"body":"Thanks, [~lvfangmin].  The broken \"retainDB\" commit is ZOOKEEPER-2845 right?  You're suggesting that be reverted?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=davelatham","name":"davelatham","key":"davelatham","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Dave Latham","active":true,"timeZone":"America/Los_Angeles"},"created":"2017-12-08T20:06:45.624+0000","updated":"2017-12-08T20:06:45.624+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13087331/comment/16284444","id":"16284444","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=lvfangmin","name":"lvfangmin","key":"lvfangmin","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=lvfangmin&avatarId=24660","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=lvfangmin&avatarId=24660","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=lvfangmin&avatarId=24660","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=lvfangmin&avatarId=24660"},"displayName":"Fangmin Lv","active":true,"timeZone":"Etc/UTC"},"body":"[~davelatham] I meant the broken \"retainDB\" commit in ZOOKEEPER-2678, we should revert it before we have a sound solution.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=lvfangmin","name":"lvfangmin","key":"lvfangmin","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=lvfangmin&avatarId=24660","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=lvfangmin&avatarId=24660","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=lvfangmin&avatarId=24660","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=lvfangmin&avatarId=24660"},"displayName":"Fangmin Lv","active":true,"timeZone":"Etc/UTC"},"created":"2017-12-08T23:55:57.042+0000","updated":"2017-12-08T23:55:57.042+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13087331/comment/16343979","id":"16343979","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user revans2 commented on the issue:\n\n    https://github.com/apache/zookeeper/pull/310\n  \n    @lvfangmin \r\n    \r\n    I am trying to reproduce the issue you have seen here, and I have not been able to do so.  The test either fails for me with the same leader being elected each time, or on newer versions with the leader client connected instead of connecting waiting for it to quit with a timeout, that I am not sure if it ever happens.\r\n    \r\n    How frequently would this test pass for you?\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2018-01-29T20:39:45.478+0000","updated":"2018-01-29T20:39:45.478+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13087331/comment/16344024","id":"16344024","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user revans2 commented on the issue:\n\n    https://github.com/apache/zookeeper/pull/310\n  \n    Apparently for some reason I don't understand if I don't run all of the tests in QuorumPeerMainTest The old leader is elected again each time.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2018-01-29T21:03:24.288+0000","updated":"2018-01-29T21:03:24.288+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13087331/comment/16347026","id":"16347026","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=revans2","name":"revans2","key":"revans2","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Robert Joseph Evans","active":true,"timeZone":"America/Chicago"},"body":"I have a fix that I will be posting shortly.  I need to clean up the patch and make sure that I get pull requests ready for all of the branches that ZOOKEEPER-2926 went into.\r\n\r\n \r\n\r\nThe following table describes the situation that allows a node to get into an inconsistent state.\r\n\r\n \r\n|| ||N1||N2||N3||\r\n|Start with cluster in sync N1 is leader|0x0 0x5|0x0 0x5|0x0 0x5|\r\n|N2 and N3 go down|0x0 0x5| | |\r\n|Proposal to N1 (fails with no quorum)|0x0 0x6| | |\r\n|N2 and N3 return, but N1 is restarting.  N2 elected leader| |0x1 0x0|0x1 0x0|\r\n|A proposal is accepted| |0x1 0x1|0x1 0x1|\r\n|N1 returns and is trying to sync with the new leader N2|0x0 0x6|0x1 0x1|0x1 0x1|\r\n\r\n \r\n\r\nAt this point the code in {{LearnerHandler.syncFollower}} takes over to bring N1 into sync with N2 the new leader.\r\n\r\nThat code checks the following in order\r\n # Is there a {{forceSync}}? Not in this case\r\n # Are the two zxids in sync already?  No {{0x0 0x6 != 0x1 0x1}}\r\n # is the peer zxid > the local zxid (and peer didn't just rotate to a new epoch)? No {{0x0 0x6 < 0x1 0x1}}\r\n # is the peer zxid in between the max committed log and the min committed log?  In this case yes it is, but it shouldn't be.  The max committed log is {{0x1 0x1}}.  The min committed log is {{0x0 0x5}} or something likely below it because it is based off of distance in the edit log.  The issue is that once the epoch changes, {{0x0}} to {{0x1}}, the leader has no idea if the edits are in its edit log without explicitly checking for them.\r\n\r\n \r\n\r\nThe reason that ZOOKEEPER-2926 exposed this is because previously when a leader was elected the in memory DB was dropped and everything was reread from disk.  When this happens the {{0x0 0x6}} proposal was lost.  But it is not guaranteed to be lost in all cases.  In theory a snapshot could be taken triggered by that proposal, either on the leader, or on a follower that also received the proposal, but does not join the new quorum in time.   As such ZOOKEEPER-2926 really just extended the window of an already existing race.  But it extended it almost indefinitely so it is much more likely to happen.\r\n\r\n \r\n\r\nMy fix is to update {{LearnerHandler.syncFollower}} to only send a {{DIFF}} if the epochs are the same.  If they are not the same we don't know if something we inserted that we don't know about.\r\n\r\n ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=revans2","name":"revans2","key":"revans2","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Robert Joseph Evans","active":true,"timeZone":"America/Chicago"},"created":"2018-01-31T15:36:01.700+0000","updated":"2018-01-31T15:39:31.854+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13087331/comment/16347557","id":"16347557","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"GitHub user revans2 opened a pull request:\n\n    https://github.com/apache/zookeeper/pull/453\n\n    ZOOKEEPER-2845: Send a SNAP if transactions cannot be verified.\n\n    I will be creating a patch/pull request for 3.4 and 3.5 too, but I wanted to get a pull request up for others to look at ASAP.\r\n    \r\n    I have a version of this based off of #310 at https://github.com/revans2/zookeeper/tree/ZOOKEEPER-2845-orig-test-patch but the test itself is flaky.  Frequently leader election does not go as planned on the test and it ends up failing but not because it ended up in an inconsistent state.\r\n    \r\n    I am happy to answer any questions anyone has about the patch.  \n\nYou can merge this pull request into a Git repository by running:\n\n    $ git pull https://github.com/revans2/zookeeper ZOOKEEPER-2845-master\n\nAlternatively you can review and apply these changes as the patch at:\n\n    https://github.com/apache/zookeeper/pull/453.patch\n\nTo close this pull request, make a commit to your master/trunk branch\nwith (at least) the following in the commit message:\n\n    This closes #453\n    \n----\ncommit 0219b2c9e44527067cd5fed4b642729171721886\nAuthor: Robert Evans <evans@...>\nDate:   2018-01-29T20:27:10Z\n\n    ZOOKEEPER-2845: Send a SNAP if transactions cannot be verified.\n\n----\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2018-01-31T20:25:45.084+0000","updated":"2018-01-31T20:25:45.084+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13087331/comment/16347678","id":"16347678","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"GitHub user revans2 opened a pull request:\n\n    https://github.com/apache/zookeeper/pull/454\n\n    ZOOKEEPER-2845: Send a SNAP if transactions cannot be verified. (3.5)\n\n    This is the version of #453 for the 3.5 branch\n\nYou can merge this pull request into a Git repository by running:\n\n    $ git pull https://github.com/revans2/zookeeper ZOOKEEPER-2845-3.5\n\nAlternatively you can review and apply these changes as the patch at:\n\n    https://github.com/apache/zookeeper/pull/454.patch\n\nTo close this pull request, make a commit to your master/trunk branch\nwith (at least) the following in the commit message:\n\n    This closes #454\n    \n----\ncommit 70436249c830af0b129caf3d1bed2f55a2498b6b\nAuthor: Robert Evans <evans@...>\nDate:   2018-01-29T20:27:10Z\n\n    ZOOKEEPER-2845: Send a SNAP if transactions cannot be verified.\n\n----\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2018-01-31T21:57:37.497+0000","updated":"2018-01-31T21:57:37.497+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13087331/comment/16347901","id":"16347901","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"GitHub user revans2 opened a pull request:\n\n    https://github.com/apache/zookeeper/pull/455\n\n    ZOOKEEPER-2845: Send a SNAP if transactions cannot be verified.\n\n    This is the version of #453 for the 3.4 branch\n\nYou can merge this pull request into a Git repository by running:\n\n    $ git pull https://github.com/revans2/zookeeper ZOOKEEPER-2845-3.4\n\nAlternatively you can review and apply these changes as the patch at:\n\n    https://github.com/apache/zookeeper/pull/455.patch\n\nTo close this pull request, make a commit to your master/trunk branch\nwith (at least) the following in the commit message:\n\n    This closes #455\n    \n----\ncommit b035df19616424036afb1f31f345dedf26e3b2ae\nAuthor: Robert Evans <evans@...>\nDate:   2018-02-01T02:09:53Z\n\n    ZOOKEEPER-2845: Send a SNAP if transactions cannot be verified.\n\n----\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2018-02-01T02:12:11.938+0000","updated":"2018-02-01T02:12:11.938+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13087331/comment/16358060","id":"16358060","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=lvfangmin","name":"lvfangmin","key":"lvfangmin","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=lvfangmin&avatarId=24660","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=lvfangmin&avatarId=24660","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=lvfangmin&avatarId=24660","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=lvfangmin&avatarId=24660"},"displayName":"Fangmin Lv","active":true,"timeZone":"Etc/UTC"},"body":"[~revans2] Thanks for jumping in and working on this issue, the consistency issue mentioned here is not because of syncing protocol, but because there might be uncommitted txns in txn file but not in ZKDatabase during retain database. If I understand your proposal and diff correctly, you're trying to solve the issue by checking the epoch during syncing with the leader, but it doesn't solve the issue that there will be uncommitted txn in txn file, and during replay the txns it could load this txn and cause inconsistency.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=lvfangmin","name":"lvfangmin","key":"lvfangmin","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=lvfangmin&avatarId=24660","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=lvfangmin&avatarId=24660","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=lvfangmin&avatarId=24660","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=lvfangmin&avatarId=24660"},"displayName":"Fangmin Lv","active":true,"timeZone":"Etc/UTC"},"created":"2018-02-09T08:08:18.619+0000","updated":"2018-02-09T08:08:18.619+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13087331/comment/16358627","id":"16358627","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=revans2","name":"revans2","key":"revans2","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Robert Joseph Evans","active":true,"timeZone":"America/Chicago"},"body":"[~lvfangmin],\r\n\r\nPerhaps I don't understand the issue well enough which is totally possible because I am not a frequent contributor and the path for all of the request processors is kind of complex.\r\n\r\nMy understanding is that the SyncRequestProcessor handles writing out edits to the edit log and snapshots, there are a few other places where this happens at startup though. The SyncRequestProcessor writes out edits as they arrive and will flush them to disk periodically in batches. It also takes snapshots periodically.\r\n\r\nThe in memory portion appears to be updated by the FinalRequestProcessor prior to a quorum of acks being received.\r\n\r\nSo yes there is the possibility that something is written to the transaction log that is not applied to memory. This means that when ZKDatabase.clear() is called it should actually fast forward the in memory changes to match those in the edit log + snapshot.\r\n\r\nSo you are saying that \r\n 1) proposals come in, are written to the transaction log, but the in memory database is not updated yet.\r\n 2) the server does a soft restart for some reason and some transactions appear to be lost (because the in memory DB was not fast forwarded).\r\n 3) more transactions come in (possibly conflicting with the first set of transactions).\r\n 4) before a snapshot can happen the leader or follower restarts and has to reconstruct the in memory DB from edits + snapshot. This would then reapply the edits that originally appeared to be lost.\r\n\r\nThis does look like it might happen, so I will look into that as well.\r\n\r\nBut the test in [https://github.com/apache/zookeeper/pull/310] didn't appear to trigger this. I could be wrong because I concentrated most of my debugging on the original leader and what was happening with it, instead of the followers and what was happening with them. I also didn't understand how clearing the leader's in memory database caused an edit to be lost, if the edits are being written out to disk before the in memory DB is updated. What I saw was that\r\n\r\n1) a bunch of edits and leaders/followers being restarted that didn't really do much of anything.\r\n 2) the original leader lost a connection to the followers.\r\n 3a) A transaction was written to the leader in memory DB but it didn't get a quorum of acks\r\n 3b) The followers restarted and formed a new quorum\r\n 4) The original leader timed out and joined the new quorum\r\n 5) As part of the sync when the old leader joined the new quorum it got a diff (not a snap), but it had an edit that was not a part of the new leader so it was off from the others.\r\n\r\nI could see this second part happening even without my change so I don't really understand how that clearing the database would prevent it.  My thinking was that it was a race condition where the edits in the edit log were not flushed yet, and as such when we cleared the DB they were lost.  But I didn't confirm this.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=revans2","name":"revans2","key":"revans2","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Robert Joseph Evans","active":true,"timeZone":"America/Chicago"},"created":"2018-02-09T16:36:53.111+0000","updated":"2018-02-09T16:36:53.111+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13087331/comment/16358804","id":"16358804","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=lvfangmin","name":"lvfangmin","key":"lvfangmin","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=lvfangmin&avatarId=24660","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=lvfangmin&avatarId=24660","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=lvfangmin&avatarId=24660","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=lvfangmin&avatarId=24660"},"displayName":"Fangmin Lv","active":true,"timeZone":"Etc/UTC"},"body":"[~revans2] the txn will only be applied to DB when it's quorum committed, the problem here is not lost a txn but with an extra txn which is not quorum committed, and it's what shown in the Jira description.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=lvfangmin","name":"lvfangmin","key":"lvfangmin","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=lvfangmin&avatarId=24660","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=lvfangmin&avatarId=24660","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=lvfangmin&avatarId=24660","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=lvfangmin&avatarId=24660"},"displayName":"Fangmin Lv","active":true,"timeZone":"Etc/UTC"},"created":"2018-02-09T18:46:11.250+0000","updated":"2018-02-09T18:46:11.250+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13087331/comment/16358899","id":"16358899","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=revans2","name":"revans2","key":"revans2","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Robert Joseph Evans","active":true,"timeZone":"America/Chicago"},"body":"[~lvfangmin],\r\n\r\nSo how does clearing the DB prevent it from re-applying the transactions in the transaction log?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=revans2","name":"revans2","key":"revans2","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Robert Joseph Evans","active":true,"timeZone":"America/Chicago"},"created":"2018-02-09T20:17:12.572+0000","updated":"2018-02-09T20:17:12.572+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13087331/comment/16359421","id":"16359421","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=lvfangmin","name":"lvfangmin","key":"lvfangmin","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=lvfangmin&avatarId=24660","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=lvfangmin&avatarId=24660","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=lvfangmin&avatarId=24660","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=lvfangmin&avatarId=24660"},"displayName":"Fangmin Lv","active":true,"timeZone":"Etc/UTC"},"body":"[~revans2] clean and reload the DB will use the correct zxid to vote or sync with new leader, if it's being elected as new leader, the ensemble will all have this extra txn, otherwise, the new leader will send truncate or snap to this server, which means it will be discarded.\r\n\r\nWith RetainDB, it will ignore the truth that it actually has the txn flushed to disk, and there is race condition that if DB is reloaded from disk it may include this txn.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=lvfangmin","name":"lvfangmin","key":"lvfangmin","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=lvfangmin&avatarId=24660","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=lvfangmin&avatarId=24660","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=lvfangmin&avatarId=24660","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=lvfangmin&avatarId=24660"},"displayName":"Fangmin Lv","active":true,"timeZone":"Etc/UTC"},"created":"2018-02-10T12:57:50.957+0000","updated":"2018-02-10T12:57:50.957+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13087331/comment/16360557","id":"16360557","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user mfenes commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/453#discussion_r167513290\n  \n    --- Diff: src/java/main/org/apache/zookeeper/server/quorum/LearnerHandler.java ---\n    @@ -758,6 +760,11 @@ public boolean syncFollower(long peerLastZxid, ZKDatabase db, Leader leader) {\n                     currentZxid = maxCommittedLog;\n                     needOpPacket = false;\n                     needSnap = false;\n    +            } else if (peerLastEpoch != lastProcessedEpoch && !db.isInCommittedLog(peerLastZxid)) {\n    +                //Be sure we do a snap, because if the epochs are not the same we don't know what\n    +                // could have happened in between and it may take a TRUNC + UPDATES to get them in SYNC\n    +                LOG.debug(\"Will send SNAP to peer sid: {} epochs are too our of sync local 0x{} remote 0x{}\",\n    --- End diff --\n    \n    I think there is a typo here: \"our of sync\"\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2018-02-12T10:24:50.309+0000","updated":"2018-02-12T10:24:50.309+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13087331/comment/16360880","id":"16360880","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=revans2","name":"revans2","key":"revans2","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Robert Joseph Evans","active":true,"timeZone":"America/Chicago"},"body":"[~lvfangmin],\r\n\r\nI will spend some more time debugging it because I could have made a mistake, but that is not what I saw from the unit test you provided.  When I logged the zxid used for leader election both before and after clearing the DB it didn't change, but like I said I could have missed something and I am not a regular contributor so I will go back and try to do it again.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=revans2","name":"revans2","key":"revans2","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Robert Joseph Evans","active":true,"timeZone":"America/Chicago"},"created":"2018-02-12T15:28:03.189+0000","updated":"2018-02-12T15:28:03.189+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13087331/comment/16361234","id":"16361234","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=revans2","name":"revans2","key":"revans2","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Robert Joseph Evans","active":true,"timeZone":"America/Chicago"},"body":"[~lvfangmin],\r\n\r\nYou are right I did miss the ID changing on the reload as part of my tests.  I will spend some more time debugging.  My patch does fix the test case that was uploaded, but I want to be sure I understand the issue well enough to see what situations might not be fixed by it.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=revans2","name":"revans2","key":"revans2","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Robert Joseph Evans","active":true,"timeZone":"America/Chicago"},"created":"2018-02-12T18:32:31.841+0000","updated":"2018-02-12T18:32:31.841+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13087331/comment/16362164","id":"16362164","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user mfenes commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/453#discussion_r167835407\n  \n    --- Diff: src/java/main/org/apache/zookeeper/server/quorum/LearnerHandler.java ---\n    @@ -758,6 +760,11 @@ public boolean syncFollower(long peerLastZxid, ZKDatabase db, Leader leader) {\n                     currentZxid = maxCommittedLog;\n                     needOpPacket = false;\n                     needSnap = false;\n    +            } else if (peerLastEpoch != lastProcessedEpoch && !db.isInCommittedLog(peerLastZxid)) {\n    --- End diff --\n    \n    Could you please add a description to the comments above (to \"Here are the cases that we want to handle\") what this else if case is doing?\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2018-02-13T11:25:36.083+0000","updated":"2018-02-13T11:25:36.083+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13087331/comment/16362222","id":"16362222","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user anmolnar commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/453#discussion_r167838605\n  \n    --- Diff: src/java/test/org/apache/zookeeper/server/quorum/LearnerHandlerTest.java ---\n    @@ -498,31 +507,20 @@ public void testNewEpochZxidWithTxnlogOnly() throws Exception {\n     \n             // Peer has zxid of epoch 3\n             peerZxid = getZxid(3, 0);\n    -        assertFalse(learnerHandler.syncFollower(peerZxid, db, leader));\n    -        // We send DIFF to (6,0) and forward any packet starting at (4,1)\n    -        assertOpType(Leader.DIFF, getZxid(6, 0), getZxid(4, 1));\n    -        // DIFF + 1 proposals + 1 commit\n    -        assertEquals(3, learnerHandler.getQueuedPackets().size());\n    -        queuedPacketMatches(new long[] { getZxid(4, 1)});\n    +        //There is no 3, 0 proposal in the committed log so sync\n    +        assertTrue(learnerHandler.syncFollower(peerZxid, db, leader));\n    --- End diff --\n    \n    It seems to me that this test checking the same thing 3 times in a row.\r\n    Do you think it's necessary to do so?\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2018-02-13T12:34:22.899+0000","updated":"2018-02-13T12:34:22.899+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13087331/comment/16362223","id":"16362223","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user anmolnar commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/453#discussion_r167838309\n  \n    --- Diff: src/java/test/org/apache/zookeeper/server/quorum/LearnerHandlerTest.java ---\n    @@ -462,6 +469,8 @@ public void testNewEpochZxid() throws Exception {\n     \n             // Peer has zxid of epoch 1\n             peerZxid = getZxid(1, 0);\n    +        //We are on a different epoch so we don't know 1, 0 is in our log or not.\n    +        // So we need to do a full SNAP\n    --- End diff --\n    \n    I think this comment has been added by mistake. You added (1,0) to the log above, hence syncFollower() returns false which means we don't need to do full SNAP.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2018-02-13T12:34:22.998+0000","updated":"2018-02-13T12:34:22.998+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13087331/comment/16362233","id":"16362233","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user revans2 commented on the issue:\n\n    https://github.com/apache/zookeeper/pull/453\n  \n    Thank you to everyone who reviewed the patch, but with the help of Fangmin Lv I found one case that the original patch didn't cover.  I have reworked the patch to cover that case, but to do so I had to take a completely different approach.\r\n    \r\n    I think this is a better approach because it reuses a lot of the code that was originally run to load the database from disk.  So now instead of reloading the entire database from disk, we apply all of the uncommitted transactions in the log to the in memory database.  This should put it in exactly the same state as if we had cleared the data and reloaded it from disk, but with much less overhead.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2018-02-13T12:40:36.122+0000","updated":"2018-02-13T12:40:36.122+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13087331/comment/16362234","id":"16362234","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=revans2","name":"revans2","key":"revans2","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Robert Joseph Evans","active":true,"timeZone":"America/Chicago"},"body":"[~lvfangmin],\r\n\r\nThanks for pushing on this.  I had missed an error case in the follower.  I have updated the patch to hopefully fix all of the issues, but please have a look at it.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=revans2","name":"revans2","key":"revans2","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Robert Joseph Evans","active":true,"timeZone":"America/Chicago"},"created":"2018-02-13T12:42:04.938+0000","updated":"2018-02-13T12:42:04.938+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13087331/comment/16362412","id":"16362412","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user anmolnar commented on the issue:\n\n    https://github.com/apache/zookeeper/pull/453\n  \n    @revans2 Your latest change looks good to me and a bit safer than the previous one. Would you please consider adding some unit tests to validate the functionality?\r\n    What do you think of porting testTxnAheadSnapInRetainDB() test from your codebase?\r\n    Maybe I can help making it not flaky, if you think it correctly verifies the original issue.\r\n\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2018-02-13T14:39:38.612+0000","updated":"2018-02-13T14:39:38.612+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13087331/comment/16362423","id":"16362423","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user anmolnar commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/453#discussion_r167884587\n  \n    --- Diff: src/java/main/org/apache/zookeeper/server/ZKDatabase.java ---\n    @@ -233,14 +233,32 @@ public long getDataTreeLastProcessedZxid() {\n          * @throws IOException\n          */\n         public long loadDataBase() throws IOException {\n    -        PlayBackListener listener=new PlayBackListener(){\n    +        PlayBackListener listener = new PlayBackListener(){\n                 public void onTxnLoaded(TxnHeader hdr,Record txn){\n                     Request r = new Request(0, hdr.getCxid(),hdr.getType(), hdr, txn, hdr.getZxid());\n                     addCommittedProposal(r);\n                 }\n             };\n     \n    -        long zxid = snapLog.restore(dataTree,sessionsWithTimeouts,listener);\n    +        long zxid = snapLog.restore(dataTree, sessionsWithTimeouts, listener);\n    +        initialized = true;\n    +        return zxid;\n    +    }\n    +\n    +    /**\n    +     * Fast forward the database adding transactions from the committed log into memory.\n    +     * @return the last valid zxid.\n    +     * @throws IOException\n    +     */\n    +    public long fastForwardDataBase() throws IOException {\n    +        PlayBackListener listener = new PlayBackListener(){\n    --- End diff --\n    \n    I think it'd be nice to extract the common logic of these two methods into a operate one.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2018-02-13T14:44:50.124+0000","updated":"2018-02-13T14:44:50.124+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13087331/comment/16362425","id":"16362425","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user revans2 commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/453#discussion_r167885280\n  \n    --- Diff: src/java/main/org/apache/zookeeper/server/ZKDatabase.java ---\n    @@ -233,14 +233,32 @@ public long getDataTreeLastProcessedZxid() {\n          * @throws IOException\n          */\n         public long loadDataBase() throws IOException {\n    -        PlayBackListener listener=new PlayBackListener(){\n    +        PlayBackListener listener = new PlayBackListener(){\n                 public void onTxnLoaded(TxnHeader hdr,Record txn){\n                     Request r = new Request(0, hdr.getCxid(),hdr.getType(), hdr, txn, hdr.getZxid());\n                     addCommittedProposal(r);\n                 }\n             };\n     \n    -        long zxid = snapLog.restore(dataTree,sessionsWithTimeouts,listener);\n    +        long zxid = snapLog.restore(dataTree, sessionsWithTimeouts, listener);\n    +        initialized = true;\n    +        return zxid;\n    +    }\n    +\n    +    /**\n    +     * Fast forward the database adding transactions from the committed log into memory.\n    +     * @return the last valid zxid.\n    +     * @throws IOException\n    +     */\n    +    public long fastForwardDataBase() throws IOException {\n    +        PlayBackListener listener = new PlayBackListener(){\n    --- End diff --\n    \n    Will do\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2018-02-13T14:46:44.994+0000","updated":"2018-02-13T14:46:44.994+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13087331/comment/16362505","id":"16362505","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user revans2 commented on the issue:\n\n    https://github.com/apache/zookeeper/pull/453\n  \n    @anmolnar I will add some kind of a test.  I ran into a lot of issues with `testTxnAheadSnapInRetainDB`.  I could not get it to run correctly against master as it would always end up electing the original leader again and the test would fail, but not because it had reproduced the issue.  I finally just did development work based off of the [original patch](https://github.com/apache/zookeeper/compare/master...revans2:ZOOKEEPER-2845-updated-fix?expand=1) and verified that `testTxnAheadSnapInRetainDB` passed, or that if it failed it did so because of leader election.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2018-02-13T15:41:42.516+0000","updated":"2018-02-13T15:41:42.516+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13087331/comment/16362576","id":"16362576","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user anmolnar commented on the issue:\n\n    https://github.com/apache/zookeeper/pull/453\n  \n    @revans2 Take a look at `testElectionFraud()` in the same file. Maybe I'm wrong, but it seems to me trying to achieve something similar.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2018-02-13T16:20:11.803+0000","updated":"2018-02-13T16:20:11.803+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13087331/comment/16362939","id":"16362939","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user revans2 commented on the issue:\n\n    https://github.com/apache/zookeeper/pull/453\n  \n    @anmolnar I added in an updated version of the test in #310. The issue turned out to be a race condition where the original leader would time out clients and then would join the new quorum too quickly for the test to be able to detect it.  I changed it so there is a hard coded sleep instead and then just shut down the leader.  I would love to get rid of the hard coded sleep, but I wasn't really sure how to do it without making some major changes in the leader code to put in a synchronization point.  If you really want me to do it I can, but it felt rather intrusive.\r\n    \r\n    I verified that when I comment out my code that does the fast forward the test fails and when I put it back the test passes.  If this looks OK I'll try to port the test to the other release branches too.\r\n    \r\n    I also addressed your request to make some of the code common.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2018-02-13T19:46:32.518+0000","updated":"2018-02-13T19:46:32.518+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13087331/comment/16366481","id":"16366481","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user afine commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/453#discussion_r168653437\n  \n    --- Diff: src/java/test/org/apache/zookeeper/server/quorum/QuorumPeerMainTest.java ---\n    @@ -888,4 +888,127 @@ public void testWithOnlyMinSessionTimeout() throws Exception {\n                     maxSessionTimeOut, quorumPeer.getMaxSessionTimeout());\n         }\n     \n    +    @Test\n    +    public void testTxnAheadSnapInRetainDB() throws Exception {\n    +        // 1. start up server and wait for leader election to finish\n    +        ClientBase.setupTestEnv();\n    +        final int SERVER_COUNT = 3;\n    +        final int clientPorts[] = new int[SERVER_COUNT];\n    +        StringBuilder sb = new StringBuilder();\n    +        for (int i = 0; i < SERVER_COUNT; i++) {\n    +            clientPorts[i] = PortAssignment.unique();\n    +            sb.append(\"server.\" + i + \"=127.0.0.1:\" + PortAssignment.unique() + \":\" + PortAssignment.unique() + \";\" + clientPorts[i] + \"\\n\");\n    +        }\n    +        String quorumCfgSection = sb.toString();\n    +\n    +        MainThread mt[] = new MainThread[SERVER_COUNT];\n    +        ZooKeeper zk[] = new ZooKeeper[SERVER_COUNT];\n    +        for (int i = 0; i < SERVER_COUNT; i++) {\n    +            mt[i] = new MainThread(i, clientPorts[i], quorumCfgSection);\n    +            mt[i].start();\n    +            zk[i] = new ZooKeeper(\"127.0.0.1:\" + clientPorts[i], ClientBase.CONNECTION_TIMEOUT, this);\n    +        }\n    +\n    +        waitForAll(zk, States.CONNECTED);\n    +\n    +        // we need to shutdown and start back up to make sure that the create session isn't the first transaction since\n    +        // that is rather innocuous.\n    +        for (int i = 0; i < SERVER_COUNT; i++) {\n    +            mt[i].shutdown();\n    +        }\n    +\n    +        waitForAll(zk, States.CONNECTING);\n    +\n    +        for (int i = 0; i < SERVER_COUNT; i++) {\n    +            mt[i].start();\n    +            // Recreate a client session since the previous session was not persisted.\n    +            zk[i] = new ZooKeeper(\"127.0.0.1:\" + clientPorts[i], ClientBase.CONNECTION_TIMEOUT, this);\n    +        }\n    +\n    +        waitForAll(zk, States.CONNECTED);\n    +\n    +        // 2. kill all followers\n    +        int leader = -1;\n    +        Map<Long, Proposal> outstanding = null;\n    +        for (int i = 0; i < SERVER_COUNT; i++) {\n    +            if (mt[i].main.quorumPeer.leader != null) {\n    +                leader = i;\n    +                outstanding = mt[leader].main.quorumPeer.leader.outstandingProposals;\n    +                // increase the tick time to delay the leader going to looking\n    +                mt[leader].main.quorumPeer.tickTime = 10000;\n    +            }\n    +        }\n    +        LOG.warn(\"LEADER {}\", leader);\n    +\n    +        for (int i = 0; i < SERVER_COUNT; i++) {\n    +            if (i != leader) {\n    +                mt[i].shutdown();\n    +            }\n    +        }\n    +\n    +        // 3. start up the followers to form a new quorum\n    +        for (int i = 0; i < SERVER_COUNT; i++) {\n    +            if (i != leader) {\n    +                mt[i].start();\n    +            }\n    +        }\n    +\n    +        // 4. wait one of the follower to be the leader\n    +        for (int i = 0; i < SERVER_COUNT; i++) {\n    +            if (i != leader) {\n    +                // Recreate a client session since the previous session was not persisted.\n    +                zk[i] = new ZooKeeper(\"127.0.0.1:\" + clientPorts[i], ClientBase.CONNECTION_TIMEOUT, this);\n    +                waitForOne(zk[i], States.CONNECTED);\n    +            }\n    +        }\n    +\n    +        // 5. send a create request to leader and make sure it's synced to disk,\n    +        //    which means it acked from itself\n    +        try {\n    +            zk[leader].create(\"/zk\" + leader, \"zk\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n    +                CreateMode.PERSISTENT);\n    +            Assert.fail(\"create /zk\" + leader + \" should have failed\");\n    +        } catch (KeeperException e) {\n    +        }\n    +\n    +        // just make sure that we actually did get it in process at the\n    +        // leader\n    +        Assert.assertTrue(outstanding.size() == 1);\n    +        Proposal p = (Proposal) outstanding.values().iterator().next();\n    +        Assert.assertTrue(p.request.getHdr().getType() == OpCode.create);\n    +\n    +        // make sure it has a chance to write it to disk\n    +        Thread.sleep(1000);\n    --- End diff --\n    \n    There is a lot of `Thread.sleep()` going on and I would like to find a way to minimize that. Apache infra can occasionally be quite slow (it can starve threads) and tests with many `Thread.sleep()`s in them have historically been quite flaky.\r\n    \r\n    So, to the extent that it is possible. I would like to minimize occurrences of `Thread.sleep()`, or at least those outside the context of retry logic.\r\n    \r\n    So perhaps, we can throw `p.qvAcksetPairs.get(0).getAckset().contains(leader);` in a loop waiting one second between iterations.\r\n    \r\n    w.r.t. step 6, we can wait for the leader to enter the looking state.\r\n    \r\n    What do you think?\r\n    \r\n    \r\n    \r\n\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2018-02-16T00:59:02.555+0000","updated":"2018-02-16T00:59:02.555+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13087331/comment/16366482","id":"16366482","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user afine commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/453#discussion_r168649459\n  \n    --- Diff: src/java/test/org/apache/zookeeper/server/quorum/QuorumPeerMainTest.java ---\n    @@ -888,4 +888,127 @@ public void testWithOnlyMinSessionTimeout() throws Exception {\n                     maxSessionTimeOut, quorumPeer.getMaxSessionTimeout());\n         }\n     \n    +    @Test\n    +    public void testTxnAheadSnapInRetainDB() throws Exception {\n    --- End diff --\n    \n    nit: I don't think we use the terminology \"RetainDB\" anywhere else. Perhaps we can get rid of \"retain\"?\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2018-02-16T00:59:02.555+0000","updated":"2018-02-16T00:59:02.555+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13087331/comment/16366483","id":"16366483","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user afine commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/453#discussion_r168651275\n  \n    --- Diff: src/java/test/org/apache/zookeeper/server/quorum/QuorumPeerMainTest.java ---\n    @@ -888,4 +888,127 @@ public void testWithOnlyMinSessionTimeout() throws Exception {\n                     maxSessionTimeOut, quorumPeer.getMaxSessionTimeout());\n         }\n     \n    +    @Test\n    +    public void testTxnAheadSnapInRetainDB() throws Exception {\n    +        // 1. start up server and wait for leader election to finish\n    +        ClientBase.setupTestEnv();\n    +        final int SERVER_COUNT = 3;\n    +        final int clientPorts[] = new int[SERVER_COUNT];\n    +        StringBuilder sb = new StringBuilder();\n    +        for (int i = 0; i < SERVER_COUNT; i++) {\n    +            clientPorts[i] = PortAssignment.unique();\n    +            sb.append(\"server.\" + i + \"=127.0.0.1:\" + PortAssignment.unique() + \":\" + PortAssignment.unique() + \";\" + clientPorts[i] + \"\\n\");\n    +        }\n    +        String quorumCfgSection = sb.toString();\n    +\n    +        MainThread mt[] = new MainThread[SERVER_COUNT];\n    +        ZooKeeper zk[] = new ZooKeeper[SERVER_COUNT];\n    +        for (int i = 0; i < SERVER_COUNT; i++) {\n    +            mt[i] = new MainThread(i, clientPorts[i], quorumCfgSection);\n    +            mt[i].start();\n    +            zk[i] = new ZooKeeper(\"127.0.0.1:\" + clientPorts[i], ClientBase.CONNECTION_TIMEOUT, this);\n    +        }\n    +\n    +        waitForAll(zk, States.CONNECTED);\n    +\n    +        // we need to shutdown and start back up to make sure that the create session isn't the first transaction since\n    +        // that is rather innocuous.\n    +        for (int i = 0; i < SERVER_COUNT; i++) {\n    +            mt[i].shutdown();\n    +        }\n    +\n    +        waitForAll(zk, States.CONNECTING);\n    +\n    +        for (int i = 0; i < SERVER_COUNT; i++) {\n    +            mt[i].start();\n    +            // Recreate a client session since the previous session was not persisted.\n    +            zk[i] = new ZooKeeper(\"127.0.0.1:\" + clientPorts[i], ClientBase.CONNECTION_TIMEOUT, this);\n    +        }\n    +\n    +        waitForAll(zk, States.CONNECTED);\n    +\n    +        // 2. kill all followers\n    +        int leader = -1;\n    +        Map<Long, Proposal> outstanding = null;\n    +        for (int i = 0; i < SERVER_COUNT; i++) {\n    +            if (mt[i].main.quorumPeer.leader != null) {\n    +                leader = i;\n    +                outstanding = mt[leader].main.quorumPeer.leader.outstandingProposals;\n    +                // increase the tick time to delay the leader going to looking\n    +                mt[leader].main.quorumPeer.tickTime = 10000;\n    +            }\n    +        }\n    +        LOG.warn(\"LEADER {}\", leader);\n    +\n    +        for (int i = 0; i < SERVER_COUNT; i++) {\n    +            if (i != leader) {\n    +                mt[i].shutdown();\n    +            }\n    +        }\n    +\n    +        // 3. start up the followers to form a new quorum\n    +        for (int i = 0; i < SERVER_COUNT; i++) {\n    +            if (i != leader) {\n    +                mt[i].start();\n    +            }\n    +        }\n    +\n    +        // 4. wait one of the follower to be the leader\n    +        for (int i = 0; i < SERVER_COUNT; i++) {\n    +            if (i != leader) {\n    +                // Recreate a client session since the previous session was not persisted.\n    +                zk[i] = new ZooKeeper(\"127.0.0.1:\" + clientPorts[i], ClientBase.CONNECTION_TIMEOUT, this);\n    +                waitForOne(zk[i], States.CONNECTED);\n    +            }\n    +        }\n    +\n    +        // 5. send a create request to leader and make sure it's synced to disk,\n    +        //    which means it acked from itself\n    +        try {\n    +            zk[leader].create(\"/zk\" + leader, \"zk\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n    +                CreateMode.PERSISTENT);\n    +            Assert.fail(\"create /zk\" + leader + \" should have failed\");\n    +        } catch (KeeperException e) {\n    +        }\n    +\n    +        // just make sure that we actually did get it in process at the\n    +        // leader\n    +        Assert.assertTrue(outstanding.size() == 1);\n    +        Proposal p = (Proposal) outstanding.values().iterator().next();\n    --- End diff --\n    \n    Do we need this cast?\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2018-02-16T00:59:02.575+0000","updated":"2018-02-16T00:59:02.575+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13087331/comment/16366484","id":"16366484","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user afine commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/453#discussion_r168649080\n  \n    --- Diff: src/java/test/org/apache/zookeeper/server/quorum/QuorumPeerMainTest.java ---\n    @@ -435,7 +435,7 @@ private void waitForOne(ZooKeeper zk, States state) throws InterruptedException\n             int iterations = ClientBase.CONNECTION_TIMEOUT / 500;\n             while (zk.getState() != state) {\n                 if (iterations-- == 0) {\n    -                throw new RuntimeException(\"Waiting too long\");\n    +                throw new RuntimeException(\"Waiting too long \" + zk.getState() + \" != \" + state);\n    --- End diff --\n    \n    nit: let's minimize unrelated test changes and whitespace changes\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2018-02-16T00:59:02.597+0000","updated":"2018-02-16T00:59:02.597+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13087331/comment/16366485","id":"16366485","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user afine commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/453#discussion_r168649906\n  \n    --- Diff: src/java/test/org/apache/zookeeper/server/quorum/QuorumPeerMainTest.java ---\n    @@ -888,4 +888,127 @@ public void testWithOnlyMinSessionTimeout() throws Exception {\n                     maxSessionTimeOut, quorumPeer.getMaxSessionTimeout());\n         }\n     \n    +    @Test\n    +    public void testTxnAheadSnapInRetainDB() throws Exception {\n    +        // 1. start up server and wait for leader election to finish\n    +        ClientBase.setupTestEnv();\n    +        final int SERVER_COUNT = 3;\n    +        final int clientPorts[] = new int[SERVER_COUNT];\n    +        StringBuilder sb = new StringBuilder();\n    +        for (int i = 0; i < SERVER_COUNT; i++) {\n    +            clientPorts[i] = PortAssignment.unique();\n    +            sb.append(\"server.\" + i + \"=127.0.0.1:\" + PortAssignment.unique() + \":\" + PortAssignment.unique() + \";\" + clientPorts[i] + \"\\n\");\n    +        }\n    +        String quorumCfgSection = sb.toString();\n    +\n    +        MainThread mt[] = new MainThread[SERVER_COUNT];\n    +        ZooKeeper zk[] = new ZooKeeper[SERVER_COUNT];\n    +        for (int i = 0; i < SERVER_COUNT; i++) {\n    +            mt[i] = new MainThread(i, clientPorts[i], quorumCfgSection);\n    --- End diff --\n    \n    is there any reason we can't use the existing test infra to clean this up a little\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2018-02-16T00:59:02.604+0000","updated":"2018-02-16T00:59:02.604+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13087331/comment/16366486","id":"16366486","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user afine commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/453#discussion_r168649723\n  \n    --- Diff: src/java/test/org/apache/zookeeper/server/quorum/QuorumPeerMainTest.java ---\n    @@ -888,4 +888,127 @@ public void testWithOnlyMinSessionTimeout() throws Exception {\n                     maxSessionTimeOut, quorumPeer.getMaxSessionTimeout());\n         }\n     \n    +    @Test\n    +    public void testTxnAheadSnapInRetainDB() throws Exception {\n    +        // 1. start up server and wait for leader election to finish\n    +        ClientBase.setupTestEnv();\n    +        final int SERVER_COUNT = 3;\n    +        final int clientPorts[] = new int[SERVER_COUNT];\n    +        StringBuilder sb = new StringBuilder();\n    +        for (int i = 0; i < SERVER_COUNT; i++) {\n    +            clientPorts[i] = PortAssignment.unique();\n    +            sb.append(\"server.\" + i + \"=127.0.0.1:\" + PortAssignment.unique() + \":\" + PortAssignment.unique() + \";\" + clientPorts[i] + \"\\n\");\n    +        }\n    +        String quorumCfgSection = sb.toString();\n    +\n    +        MainThread mt[] = new MainThread[SERVER_COUNT];\n    +        ZooKeeper zk[] = new ZooKeeper[SERVER_COUNT];\n    +        for (int i = 0; i < SERVER_COUNT; i++) {\n    +            mt[i] = new MainThread(i, clientPorts[i], quorumCfgSection);\n    +            mt[i].start();\n    +            zk[i] = new ZooKeeper(\"127.0.0.1:\" + clientPorts[i], ClientBase.CONNECTION_TIMEOUT, this);\n    +        }\n    +\n    +        waitForAll(zk, States.CONNECTED);\n    +\n    +        // we need to shutdown and start back up to make sure that the create session isn't the first transaction since\n    +        // that is rather innocuous.\n    +        for (int i = 0; i < SERVER_COUNT; i++) {\n    +            mt[i].shutdown();\n    +        }\n    +\n    +        waitForAll(zk, States.CONNECTING);\n    +\n    +        for (int i = 0; i < SERVER_COUNT; i++) {\n    +            mt[i].start();\n    +            // Recreate a client session since the previous session was not persisted.\n    +            zk[i] = new ZooKeeper(\"127.0.0.1:\" + clientPorts[i], ClientBase.CONNECTION_TIMEOUT, this);\n    +        }\n    +\n    +        waitForAll(zk, States.CONNECTED);\n    +\n    +        // 2. kill all followers\n    +        int leader = -1;\n    +        Map<Long, Proposal> outstanding = null;\n    +        for (int i = 0; i < SERVER_COUNT; i++) {\n    +            if (mt[i].main.quorumPeer.leader != null) {\n    +                leader = i;\n    +                outstanding = mt[leader].main.quorumPeer.leader.outstandingProposals;\n    +                // increase the tick time to delay the leader going to looking\n    +                mt[leader].main.quorumPeer.tickTime = 10000;\n    +            }\n    +        }\n    +        LOG.warn(\"LEADER {}\", leader);\n    +\n    +        for (int i = 0; i < SERVER_COUNT; i++) {\n    +            if (i != leader) {\n    +                mt[i].shutdown();\n    +            }\n    +        }\n    +\n    +        // 3. start up the followers to form a new quorum\n    +        for (int i = 0; i < SERVER_COUNT; i++) {\n    +            if (i != leader) {\n    +                mt[i].start();\n    +            }\n    +        }\n    +\n    +        // 4. wait one of the follower to be the leader\n    +        for (int i = 0; i < SERVER_COUNT; i++) {\n    +            if (i != leader) {\n    +                // Recreate a client session since the previous session was not persisted.\n    +                zk[i] = new ZooKeeper(\"127.0.0.1:\" + clientPorts[i], ClientBase.CONNECTION_TIMEOUT, this);\n    +                waitForOne(zk[i], States.CONNECTED);\n    +            }\n    +        }\n    +\n    +        // 5. send a create request to leader and make sure it's synced to disk,\n    +        //    which means it acked from itself\n    +        try {\n    +            zk[leader].create(\"/zk\" + leader, \"zk\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n    +                CreateMode.PERSISTENT);\n    +            Assert.fail(\"create /zk\" + leader + \" should have failed\");\n    +        } catch (KeeperException e) {\n    +        }\n    +\n    +        // just make sure that we actually did get it in process at the\n    +        // leader\n    +        Assert.assertTrue(outstanding.size() == 1);\n    +        Proposal p = (Proposal) outstanding.values().iterator().next();\n    +        Assert.assertTrue(p.request.getHdr().getType() == OpCode.create);\n    +\n    +        // make sure it has a chance to write it to disk\n    +        Thread.sleep(1000);\n    +        p.qvAcksetPairs.get(0).getAckset().contains(leader);\n    +\n    +        // 6. wait the leader to quit due to no enough followers\n    +        Thread.sleep(4000);\n    +        //waitForOne(zk[leader], States.CONNECTING);\n    --- End diff --\n    \n    remove this\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2018-02-16T00:59:02.847+0000","updated":"2018-02-16T00:59:02.847+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13087331/comment/16367491","id":"16367491","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user anmolnar commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/453#discussion_r168793211\n  \n    --- Diff: src/java/test/org/apache/zookeeper/server/quorum/QuorumPeerMainTest.java ---\n    @@ -435,7 +435,7 @@ private void waitForOne(ZooKeeper zk, States state) throws InterruptedException\n             int iterations = ClientBase.CONNECTION_TIMEOUT / 500;\n             while (zk.getState() != state) {\n                 if (iterations-- == 0) {\n    -                throw new RuntimeException(\"Waiting too long\");\n    +                throw new RuntimeException(\"Waiting too long \" + zk.getState() + \" != \" + state);\n    --- End diff --\n    \n    Although I agree with you in general, I think this one here is a good addition to test output.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2018-02-16T15:49:24.545+0000","updated":"2018-02-16T15:49:24.545+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13087331/comment/16367492","id":"16367492","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user anmolnar commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/453#discussion_r168793569\n  \n    --- Diff: src/java/test/org/apache/zookeeper/server/quorum/QuorumPeerMainTest.java ---\n    @@ -888,4 +888,127 @@ public void testWithOnlyMinSessionTimeout() throws Exception {\n                     maxSessionTimeOut, quorumPeer.getMaxSessionTimeout());\n         }\n     \n    +    @Test\n    +    public void testTxnAheadSnapInRetainDB() throws Exception {\n    +        // 1. start up server and wait for leader election to finish\n    +        ClientBase.setupTestEnv();\n    +        final int SERVER_COUNT = 3;\n    +        final int clientPorts[] = new int[SERVER_COUNT];\n    +        StringBuilder sb = new StringBuilder();\n    +        for (int i = 0; i < SERVER_COUNT; i++) {\n    +            clientPorts[i] = PortAssignment.unique();\n    +            sb.append(\"server.\" + i + \"=127.0.0.1:\" + PortAssignment.unique() + \":\" + PortAssignment.unique() + \";\" + clientPorts[i] + \"\\n\");\n    +        }\n    +        String quorumCfgSection = sb.toString();\n    +\n    +        MainThread mt[] = new MainThread[SERVER_COUNT];\n    +        ZooKeeper zk[] = new ZooKeeper[SERVER_COUNT];\n    +        for (int i = 0; i < SERVER_COUNT; i++) {\n    +            mt[i] = new MainThread(i, clientPorts[i], quorumCfgSection);\n    --- End diff --\n    \n    +1\r\n    As mentioned testElectionFraud() is a good example for that.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2018-02-16T15:50:28.106+0000","updated":"2018-02-16T15:50:28.106+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13087331/comment/16367495","id":"16367495","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user revans2 commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/453#discussion_r168793764\n  \n    --- Diff: src/java/test/org/apache/zookeeper/server/quorum/QuorumPeerMainTest.java ---\n    @@ -888,4 +888,127 @@ public void testWithOnlyMinSessionTimeout() throws Exception {\n                     maxSessionTimeOut, quorumPeer.getMaxSessionTimeout());\n         }\n     \n    +    @Test\n    +    public void testTxnAheadSnapInRetainDB() throws Exception {\n    +        // 1. start up server and wait for leader election to finish\n    +        ClientBase.setupTestEnv();\n    +        final int SERVER_COUNT = 3;\n    +        final int clientPorts[] = new int[SERVER_COUNT];\n    +        StringBuilder sb = new StringBuilder();\n    +        for (int i = 0; i < SERVER_COUNT; i++) {\n    +            clientPorts[i] = PortAssignment.unique();\n    +            sb.append(\"server.\" + i + \"=127.0.0.1:\" + PortAssignment.unique() + \":\" + PortAssignment.unique() + \";\" + clientPorts[i] + \"\\n\");\n    +        }\n    +        String quorumCfgSection = sb.toString();\n    +\n    +        MainThread mt[] = new MainThread[SERVER_COUNT];\n    +        ZooKeeper zk[] = new ZooKeeper[SERVER_COUNT];\n    +        for (int i = 0; i < SERVER_COUNT; i++) {\n    +            mt[i] = new MainThread(i, clientPorts[i], quorumCfgSection);\n    --- End diff --\n    \n    I am not super familiar with the test infrastructure.  If you have a suggestion I would love it, otherwise I will look around and see what I can come up with.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2018-02-16T15:51:12.481+0000","updated":"2018-02-16T15:51:12.481+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13087331/comment/16367497","id":"16367497","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user revans2 commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/453#discussion_r168794042\n  \n    --- Diff: src/java/test/org/apache/zookeeper/server/quorum/QuorumPeerMainTest.java ---\n    @@ -888,4 +888,127 @@ public void testWithOnlyMinSessionTimeout() throws Exception {\n                     maxSessionTimeOut, quorumPeer.getMaxSessionTimeout());\n         }\n     \n    +    @Test\n    +    public void testTxnAheadSnapInRetainDB() throws Exception {\n    +        // 1. start up server and wait for leader election to finish\n    +        ClientBase.setupTestEnv();\n    +        final int SERVER_COUNT = 3;\n    +        final int clientPorts[] = new int[SERVER_COUNT];\n    +        StringBuilder sb = new StringBuilder();\n    +        for (int i = 0; i < SERVER_COUNT; i++) {\n    +            clientPorts[i] = PortAssignment.unique();\n    +            sb.append(\"server.\" + i + \"=127.0.0.1:\" + PortAssignment.unique() + \":\" + PortAssignment.unique() + \";\" + clientPorts[i] + \"\\n\");\n    +        }\n    +        String quorumCfgSection = sb.toString();\n    +\n    +        MainThread mt[] = new MainThread[SERVER_COUNT];\n    +        ZooKeeper zk[] = new ZooKeeper[SERVER_COUNT];\n    +        for (int i = 0; i < SERVER_COUNT; i++) {\n    +            mt[i] = new MainThread(i, clientPorts[i], quorumCfgSection);\n    +            mt[i].start();\n    +            zk[i] = new ZooKeeper(\"127.0.0.1:\" + clientPorts[i], ClientBase.CONNECTION_TIMEOUT, this);\n    +        }\n    +\n    +        waitForAll(zk, States.CONNECTED);\n    +\n    +        // we need to shutdown and start back up to make sure that the create session isn't the first transaction since\n    +        // that is rather innocuous.\n    +        for (int i = 0; i < SERVER_COUNT; i++) {\n    +            mt[i].shutdown();\n    +        }\n    +\n    +        waitForAll(zk, States.CONNECTING);\n    +\n    +        for (int i = 0; i < SERVER_COUNT; i++) {\n    +            mt[i].start();\n    +            // Recreate a client session since the previous session was not persisted.\n    +            zk[i] = new ZooKeeper(\"127.0.0.1:\" + clientPorts[i], ClientBase.CONNECTION_TIMEOUT, this);\n    +        }\n    +\n    +        waitForAll(zk, States.CONNECTED);\n    +\n    +        // 2. kill all followers\n    +        int leader = -1;\n    +        Map<Long, Proposal> outstanding = null;\n    +        for (int i = 0; i < SERVER_COUNT; i++) {\n    +            if (mt[i].main.quorumPeer.leader != null) {\n    +                leader = i;\n    +                outstanding = mt[leader].main.quorumPeer.leader.outstandingProposals;\n    +                // increase the tick time to delay the leader going to looking\n    +                mt[leader].main.quorumPeer.tickTime = 10000;\n    +            }\n    +        }\n    +        LOG.warn(\"LEADER {}\", leader);\n    +\n    +        for (int i = 0; i < SERVER_COUNT; i++) {\n    +            if (i != leader) {\n    +                mt[i].shutdown();\n    +            }\n    +        }\n    +\n    +        // 3. start up the followers to form a new quorum\n    +        for (int i = 0; i < SERVER_COUNT; i++) {\n    +            if (i != leader) {\n    +                mt[i].start();\n    +            }\n    +        }\n    +\n    +        // 4. wait one of the follower to be the leader\n    +        for (int i = 0; i < SERVER_COUNT; i++) {\n    +            if (i != leader) {\n    +                // Recreate a client session since the previous session was not persisted.\n    +                zk[i] = new ZooKeeper(\"127.0.0.1:\" + clientPorts[i], ClientBase.CONNECTION_TIMEOUT, this);\n    +                waitForOne(zk[i], States.CONNECTED);\n    +            }\n    +        }\n    +\n    +        // 5. send a create request to leader and make sure it's synced to disk,\n    +        //    which means it acked from itself\n    +        try {\n    +            zk[leader].create(\"/zk\" + leader, \"zk\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n    +                CreateMode.PERSISTENT);\n    +            Assert.fail(\"create /zk\" + leader + \" should have failed\");\n    +        } catch (KeeperException e) {\n    +        }\n    +\n    +        // just make sure that we actually did get it in process at the\n    +        // leader\n    +        Assert.assertTrue(outstanding.size() == 1);\n    +        Proposal p = (Proposal) outstanding.values().iterator().next();\n    +        Assert.assertTrue(p.request.getHdr().getType() == OpCode.create);\n    +\n    +        // make sure it has a chance to write it to disk\n    +        Thread.sleep(1000);\n    --- End diff --\n    \n    I will see if I can make it work.  I agree I would love to kill as many of the sleeps as possible.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2018-02-16T15:52:15.430+0000","updated":"2018-02-16T15:52:15.430+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13087331/comment/16367503","id":"16367503","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user anmolnar commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/453#discussion_r168795633\n  \n    --- Diff: src/java/test/org/apache/zookeeper/server/quorum/QuorumPeerMainTest.java ---\n    @@ -888,4 +888,127 @@ public void testWithOnlyMinSessionTimeout() throws Exception {\n                     maxSessionTimeOut, quorumPeer.getMaxSessionTimeout());\n         }\n     \n    +    @Test\n    +    public void testTxnAheadSnapInRetainDB() throws Exception {\n    +        // 1. start up server and wait for leader election to finish\n    +        ClientBase.setupTestEnv();\n    +        final int SERVER_COUNT = 3;\n    +        final int clientPorts[] = new int[SERVER_COUNT];\n    +        StringBuilder sb = new StringBuilder();\n    +        for (int i = 0; i < SERVER_COUNT; i++) {\n    +            clientPorts[i] = PortAssignment.unique();\n    +            sb.append(\"server.\" + i + \"=127.0.0.1:\" + PortAssignment.unique() + \":\" + PortAssignment.unique() + \";\" + clientPorts[i] + \"\\n\");\n    +        }\n    +        String quorumCfgSection = sb.toString();\n    +\n    +        MainThread mt[] = new MainThread[SERVER_COUNT];\n    +        ZooKeeper zk[] = new ZooKeeper[SERVER_COUNT];\n    +        for (int i = 0; i < SERVER_COUNT; i++) {\n    +            mt[i] = new MainThread(i, clientPorts[i], quorumCfgSection);\n    --- End diff --\n    \n    Use `LaunchServers(numServers, tickTime)` method in this class.\r\n    It gives you a collection of `MainThread` and `ZooKeeper` objects properly initialized.\r\n    Test `tearDown()` will care about destroying it. \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2018-02-16T15:57:43.714+0000","updated":"2018-02-16T15:57:43.714+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13087331/comment/16367504","id":"16367504","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user revans2 commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/453#discussion_r168795646\n  \n    --- Diff: src/java/test/org/apache/zookeeper/server/quorum/QuorumPeerMainTest.java ---\n    @@ -435,7 +435,7 @@ private void waitForOne(ZooKeeper zk, States state) throws InterruptedException\n             int iterations = ClientBase.CONNECTION_TIMEOUT / 500;\n             while (zk.getState() != state) {\n                 if (iterations-- == 0) {\n    -                throw new RuntimeException(\"Waiting too long\");\n    +                throw new RuntimeException(\"Waiting too long \" + zk.getState() + \" != \" + state);\n    --- End diff --\n    \n    @anmolnar  and @afine I put this in for my own debugging and I forgot to remove it.  If you want me to I am happy to either remove it or file a separate JIRA and put it up as a separate pull request, or just leave it.  Either way is fine with me.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2018-02-16T15:57:48.133+0000","updated":"2018-02-16T15:57:48.133+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13087331/comment/16367559","id":"16367559","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user revans2 commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/453#discussion_r168807853\n  \n    --- Diff: src/java/test/org/apache/zookeeper/server/quorum/QuorumPeerMainTest.java ---\n    @@ -888,4 +888,127 @@ public void testWithOnlyMinSessionTimeout() throws Exception {\n                     maxSessionTimeOut, quorumPeer.getMaxSessionTimeout());\n         }\n     \n    +    @Test\n    +    public void testTxnAheadSnapInRetainDB() throws Exception {\n    +        // 1. start up server and wait for leader election to finish\n    +        ClientBase.setupTestEnv();\n    +        final int SERVER_COUNT = 3;\n    +        final int clientPorts[] = new int[SERVER_COUNT];\n    +        StringBuilder sb = new StringBuilder();\n    +        for (int i = 0; i < SERVER_COUNT; i++) {\n    +            clientPorts[i] = PortAssignment.unique();\n    +            sb.append(\"server.\" + i + \"=127.0.0.1:\" + PortAssignment.unique() + \":\" + PortAssignment.unique() + \";\" + clientPorts[i] + \"\\n\");\n    +        }\n    +        String quorumCfgSection = sb.toString();\n    +\n    +        MainThread mt[] = new MainThread[SERVER_COUNT];\n    +        ZooKeeper zk[] = new ZooKeeper[SERVER_COUNT];\n    +        for (int i = 0; i < SERVER_COUNT; i++) {\n    +            mt[i] = new MainThread(i, clientPorts[i], quorumCfgSection);\n    +            mt[i].start();\n    +            zk[i] = new ZooKeeper(\"127.0.0.1:\" + clientPorts[i], ClientBase.CONNECTION_TIMEOUT, this);\n    +        }\n    +\n    +        waitForAll(zk, States.CONNECTED);\n    +\n    +        // we need to shutdown and start back up to make sure that the create session isn't the first transaction since\n    +        // that is rather innocuous.\n    +        for (int i = 0; i < SERVER_COUNT; i++) {\n    +            mt[i].shutdown();\n    +        }\n    +\n    +        waitForAll(zk, States.CONNECTING);\n    +\n    +        for (int i = 0; i < SERVER_COUNT; i++) {\n    +            mt[i].start();\n    +            // Recreate a client session since the previous session was not persisted.\n    +            zk[i] = new ZooKeeper(\"127.0.0.1:\" + clientPorts[i], ClientBase.CONNECTION_TIMEOUT, this);\n    +        }\n    +\n    +        waitForAll(zk, States.CONNECTED);\n    +\n    +        // 2. kill all followers\n    +        int leader = -1;\n    +        Map<Long, Proposal> outstanding = null;\n    +        for (int i = 0; i < SERVER_COUNT; i++) {\n    +            if (mt[i].main.quorumPeer.leader != null) {\n    +                leader = i;\n    +                outstanding = mt[leader].main.quorumPeer.leader.outstandingProposals;\n    +                // increase the tick time to delay the leader going to looking\n    +                mt[leader].main.quorumPeer.tickTime = 10000;\n    +            }\n    +        }\n    +        LOG.warn(\"LEADER {}\", leader);\n    +\n    +        for (int i = 0; i < SERVER_COUNT; i++) {\n    +            if (i != leader) {\n    +                mt[i].shutdown();\n    +            }\n    +        }\n    +\n    +        // 3. start up the followers to form a new quorum\n    +        for (int i = 0; i < SERVER_COUNT; i++) {\n    +            if (i != leader) {\n    +                mt[i].start();\n    +            }\n    +        }\n    +\n    +        // 4. wait one of the follower to be the leader\n    +        for (int i = 0; i < SERVER_COUNT; i++) {\n    +            if (i != leader) {\n    +                // Recreate a client session since the previous session was not persisted.\n    +                zk[i] = new ZooKeeper(\"127.0.0.1:\" + clientPorts[i], ClientBase.CONNECTION_TIMEOUT, this);\n    +                waitForOne(zk[i], States.CONNECTED);\n    +            }\n    +        }\n    +\n    +        // 5. send a create request to leader and make sure it's synced to disk,\n    +        //    which means it acked from itself\n    +        try {\n    +            zk[leader].create(\"/zk\" + leader, \"zk\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n    +                CreateMode.PERSISTENT);\n    +            Assert.fail(\"create /zk\" + leader + \" should have failed\");\n    +        } catch (KeeperException e) {\n    +        }\n    +\n    +        // just make sure that we actually did get it in process at the\n    +        // leader\n    +        Assert.assertTrue(outstanding.size() == 1);\n    +        Proposal p = (Proposal) outstanding.values().iterator().next();\n    +        Assert.assertTrue(p.request.getHdr().getType() == OpCode.create);\n    +\n    +        // make sure it has a chance to write it to disk\n    +        Thread.sleep(1000);\n    --- End diff --\n    \n    I was able to do what you said and drop the 1 second sleep, but the sleep at step 6 I am going to need something else because the leader is only in the looking state for 2 ms.  Leader election happens way too fast for us to be able to catch that by polling.  \r\n    \r\n    If I remove the 4 second sleep it does not trigger the error case, I don't completely know why.  I'll spend some time looking at it, but if you have any suggestions I would appreciate it.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2018-02-16T16:41:18.944+0000","updated":"2018-02-16T16:41:18.944+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13087331/comment/16367561","id":"16367561","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user revans2 commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/453#discussion_r168807914\n  \n    --- Diff: src/java/test/org/apache/zookeeper/server/quorum/QuorumPeerMainTest.java ---\n    @@ -888,4 +888,127 @@ public void testWithOnlyMinSessionTimeout() throws Exception {\n                     maxSessionTimeOut, quorumPeer.getMaxSessionTimeout());\n         }\n     \n    +    @Test\n    +    public void testTxnAheadSnapInRetainDB() throws Exception {\n    +        // 1. start up server and wait for leader election to finish\n    +        ClientBase.setupTestEnv();\n    +        final int SERVER_COUNT = 3;\n    +        final int clientPorts[] = new int[SERVER_COUNT];\n    +        StringBuilder sb = new StringBuilder();\n    +        for (int i = 0; i < SERVER_COUNT; i++) {\n    +            clientPorts[i] = PortAssignment.unique();\n    +            sb.append(\"server.\" + i + \"=127.0.0.1:\" + PortAssignment.unique() + \":\" + PortAssignment.unique() + \";\" + clientPorts[i] + \"\\n\");\n    +        }\n    +        String quorumCfgSection = sb.toString();\n    +\n    +        MainThread mt[] = new MainThread[SERVER_COUNT];\n    +        ZooKeeper zk[] = new ZooKeeper[SERVER_COUNT];\n    +        for (int i = 0; i < SERVER_COUNT; i++) {\n    +            mt[i] = new MainThread(i, clientPorts[i], quorumCfgSection);\n    +            mt[i].start();\n    +            zk[i] = new ZooKeeper(\"127.0.0.1:\" + clientPorts[i], ClientBase.CONNECTION_TIMEOUT, this);\n    +        }\n    +\n    +        waitForAll(zk, States.CONNECTED);\n    +\n    +        // we need to shutdown and start back up to make sure that the create session isn't the first transaction since\n    +        // that is rather innocuous.\n    +        for (int i = 0; i < SERVER_COUNT; i++) {\n    +            mt[i].shutdown();\n    +        }\n    +\n    +        waitForAll(zk, States.CONNECTING);\n    +\n    +        for (int i = 0; i < SERVER_COUNT; i++) {\n    +            mt[i].start();\n    +            // Recreate a client session since the previous session was not persisted.\n    +            zk[i] = new ZooKeeper(\"127.0.0.1:\" + clientPorts[i], ClientBase.CONNECTION_TIMEOUT, this);\n    +        }\n    +\n    +        waitForAll(zk, States.CONNECTED);\n    +\n    +        // 2. kill all followers\n    +        int leader = -1;\n    +        Map<Long, Proposal> outstanding = null;\n    +        for (int i = 0; i < SERVER_COUNT; i++) {\n    +            if (mt[i].main.quorumPeer.leader != null) {\n    +                leader = i;\n    +                outstanding = mt[leader].main.quorumPeer.leader.outstandingProposals;\n    +                // increase the tick time to delay the leader going to looking\n    +                mt[leader].main.quorumPeer.tickTime = 10000;\n    +            }\n    +        }\n    +        LOG.warn(\"LEADER {}\", leader);\n    +\n    +        for (int i = 0; i < SERVER_COUNT; i++) {\n    +            if (i != leader) {\n    +                mt[i].shutdown();\n    +            }\n    +        }\n    +\n    +        // 3. start up the followers to form a new quorum\n    +        for (int i = 0; i < SERVER_COUNT; i++) {\n    +            if (i != leader) {\n    +                mt[i].start();\n    +            }\n    +        }\n    +\n    +        // 4. wait one of the follower to be the leader\n    +        for (int i = 0; i < SERVER_COUNT; i++) {\n    +            if (i != leader) {\n    +                // Recreate a client session since the previous session was not persisted.\n    +                zk[i] = new ZooKeeper(\"127.0.0.1:\" + clientPorts[i], ClientBase.CONNECTION_TIMEOUT, this);\n    +                waitForOne(zk[i], States.CONNECTED);\n    +            }\n    +        }\n    +\n    +        // 5. send a create request to leader and make sure it's synced to disk,\n    +        //    which means it acked from itself\n    +        try {\n    +            zk[leader].create(\"/zk\" + leader, \"zk\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n    +                CreateMode.PERSISTENT);\n    +            Assert.fail(\"create /zk\" + leader + \" should have failed\");\n    +        } catch (KeeperException e) {\n    +        }\n    +\n    +        // just make sure that we actually did get it in process at the\n    +        // leader\n    +        Assert.assertTrue(outstanding.size() == 1);\n    +        Proposal p = (Proposal) outstanding.values().iterator().next();\n    --- End diff --\n    \n    removed the cast\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2018-02-16T16:41:30.912+0000","updated":"2018-02-16T16:41:30.912+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13087331/comment/16367562","id":"16367562","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user revans2 commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/453#discussion_r168807943\n  \n    --- Diff: src/java/test/org/apache/zookeeper/server/quorum/QuorumPeerMainTest.java ---\n    @@ -888,4 +888,127 @@ public void testWithOnlyMinSessionTimeout() throws Exception {\n                     maxSessionTimeOut, quorumPeer.getMaxSessionTimeout());\n         }\n     \n    +    @Test\n    +    public void testTxnAheadSnapInRetainDB() throws Exception {\n    +        // 1. start up server and wait for leader election to finish\n    +        ClientBase.setupTestEnv();\n    +        final int SERVER_COUNT = 3;\n    +        final int clientPorts[] = new int[SERVER_COUNT];\n    +        StringBuilder sb = new StringBuilder();\n    +        for (int i = 0; i < SERVER_COUNT; i++) {\n    +            clientPorts[i] = PortAssignment.unique();\n    +            sb.append(\"server.\" + i + \"=127.0.0.1:\" + PortAssignment.unique() + \":\" + PortAssignment.unique() + \";\" + clientPorts[i] + \"\\n\");\n    +        }\n    +        String quorumCfgSection = sb.toString();\n    +\n    +        MainThread mt[] = new MainThread[SERVER_COUNT];\n    +        ZooKeeper zk[] = new ZooKeeper[SERVER_COUNT];\n    +        for (int i = 0; i < SERVER_COUNT; i++) {\n    +            mt[i] = new MainThread(i, clientPorts[i], quorumCfgSection);\n    +            mt[i].start();\n    +            zk[i] = new ZooKeeper(\"127.0.0.1:\" + clientPorts[i], ClientBase.CONNECTION_TIMEOUT, this);\n    +        }\n    +\n    +        waitForAll(zk, States.CONNECTED);\n    +\n    +        // we need to shutdown and start back up to make sure that the create session isn't the first transaction since\n    +        // that is rather innocuous.\n    +        for (int i = 0; i < SERVER_COUNT; i++) {\n    +            mt[i].shutdown();\n    +        }\n    +\n    +        waitForAll(zk, States.CONNECTING);\n    +\n    +        for (int i = 0; i < SERVER_COUNT; i++) {\n    +            mt[i].start();\n    +            // Recreate a client session since the previous session was not persisted.\n    +            zk[i] = new ZooKeeper(\"127.0.0.1:\" + clientPorts[i], ClientBase.CONNECTION_TIMEOUT, this);\n    +        }\n    +\n    +        waitForAll(zk, States.CONNECTED);\n    +\n    +        // 2. kill all followers\n    +        int leader = -1;\n    +        Map<Long, Proposal> outstanding = null;\n    +        for (int i = 0; i < SERVER_COUNT; i++) {\n    +            if (mt[i].main.quorumPeer.leader != null) {\n    +                leader = i;\n    +                outstanding = mt[leader].main.quorumPeer.leader.outstandingProposals;\n    +                // increase the tick time to delay the leader going to looking\n    +                mt[leader].main.quorumPeer.tickTime = 10000;\n    +            }\n    +        }\n    +        LOG.warn(\"LEADER {}\", leader);\n    +\n    +        for (int i = 0; i < SERVER_COUNT; i++) {\n    +            if (i != leader) {\n    +                mt[i].shutdown();\n    +            }\n    +        }\n    +\n    +        // 3. start up the followers to form a new quorum\n    +        for (int i = 0; i < SERVER_COUNT; i++) {\n    +            if (i != leader) {\n    +                mt[i].start();\n    +            }\n    +        }\n    +\n    +        // 4. wait one of the follower to be the leader\n    +        for (int i = 0; i < SERVER_COUNT; i++) {\n    +            if (i != leader) {\n    +                // Recreate a client session since the previous session was not persisted.\n    +                zk[i] = new ZooKeeper(\"127.0.0.1:\" + clientPorts[i], ClientBase.CONNECTION_TIMEOUT, this);\n    +                waitForOne(zk[i], States.CONNECTED);\n    +            }\n    +        }\n    +\n    +        // 5. send a create request to leader and make sure it's synced to disk,\n    +        //    which means it acked from itself\n    +        try {\n    +            zk[leader].create(\"/zk\" + leader, \"zk\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n    +                CreateMode.PERSISTENT);\n    +            Assert.fail(\"create /zk\" + leader + \" should have failed\");\n    +        } catch (KeeperException e) {\n    +        }\n    +\n    +        // just make sure that we actually did get it in process at the\n    +        // leader\n    +        Assert.assertTrue(outstanding.size() == 1);\n    +        Proposal p = (Proposal) outstanding.values().iterator().next();\n    +        Assert.assertTrue(p.request.getHdr().getType() == OpCode.create);\n    +\n    +        // make sure it has a chance to write it to disk\n    +        Thread.sleep(1000);\n    +        p.qvAcksetPairs.get(0).getAckset().contains(leader);\n    +\n    +        // 6. wait the leader to quit due to no enough followers\n    +        Thread.sleep(4000);\n    +        //waitForOne(zk[leader], States.CONNECTING);\n    --- End diff --\n    \n    done\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2018-02-16T16:41:42.677+0000","updated":"2018-02-16T16:41:42.677+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13087331/comment/16367563","id":"16367563","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user revans2 commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/453#discussion_r168807976\n  \n    --- Diff: src/java/test/org/apache/zookeeper/server/quorum/QuorumPeerMainTest.java ---\n    @@ -888,4 +888,127 @@ public void testWithOnlyMinSessionTimeout() throws Exception {\n                     maxSessionTimeOut, quorumPeer.getMaxSessionTimeout());\n         }\n     \n    +    @Test\n    +    public void testTxnAheadSnapInRetainDB() throws Exception {\n    --- End diff --\n    \n    done\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2018-02-16T16:41:48.461+0000","updated":"2018-02-16T16:41:48.461+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13087331/comment/16367809","id":"16367809","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user afine commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/453#discussion_r168857052\n  \n    --- Diff: src/java/test/org/apache/zookeeper/server/quorum/QuorumPeerMainTest.java ---\n    @@ -435,7 +435,7 @@ private void waitForOne(ZooKeeper zk, States state) throws InterruptedException\n             int iterations = ClientBase.CONNECTION_TIMEOUT / 500;\n             while (zk.getState() != state) {\n                 if (iterations-- == 0) {\n    -                throw new RuntimeException(\"Waiting too long\");\n    +                throw new RuntimeException(\"Waiting too long \" + zk.getState() + \" != \" + state);\n    --- End diff --\n    \n    Since @anmolnar thinks it is valuable, I think it is fine for it to be left in. \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2018-02-16T20:02:03.101+0000","updated":"2018-02-16T20:02:03.101+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13087331/comment/16367814","id":"16367814","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user afine commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/453#discussion_r168857757\n  \n    --- Diff: src/java/test/org/apache/zookeeper/server/quorum/QuorumPeerMainTest.java ---\n    @@ -888,4 +888,127 @@ public void testWithOnlyMinSessionTimeout() throws Exception {\n                     maxSessionTimeOut, quorumPeer.getMaxSessionTimeout());\n         }\n     \n    +    @Test\n    +    public void testTxnAheadSnapInRetainDB() throws Exception {\n    +        // 1. start up server and wait for leader election to finish\n    +        ClientBase.setupTestEnv();\n    +        final int SERVER_COUNT = 3;\n    +        final int clientPorts[] = new int[SERVER_COUNT];\n    +        StringBuilder sb = new StringBuilder();\n    +        for (int i = 0; i < SERVER_COUNT; i++) {\n    +            clientPorts[i] = PortAssignment.unique();\n    +            sb.append(\"server.\" + i + \"=127.0.0.1:\" + PortAssignment.unique() + \":\" + PortAssignment.unique() + \";\" + clientPorts[i] + \"\\n\");\n    +        }\n    +        String quorumCfgSection = sb.toString();\n    +\n    +        MainThread mt[] = new MainThread[SERVER_COUNT];\n    +        ZooKeeper zk[] = new ZooKeeper[SERVER_COUNT];\n    +        for (int i = 0; i < SERVER_COUNT; i++) {\n    +            mt[i] = new MainThread(i, clientPorts[i], quorumCfgSection);\n    +            mt[i].start();\n    +            zk[i] = new ZooKeeper(\"127.0.0.1:\" + clientPorts[i], ClientBase.CONNECTION_TIMEOUT, this);\n    +        }\n    +\n    +        waitForAll(zk, States.CONNECTED);\n    +\n    +        // we need to shutdown and start back up to make sure that the create session isn't the first transaction since\n    +        // that is rather innocuous.\n    +        for (int i = 0; i < SERVER_COUNT; i++) {\n    +            mt[i].shutdown();\n    +        }\n    +\n    +        waitForAll(zk, States.CONNECTING);\n    +\n    +        for (int i = 0; i < SERVER_COUNT; i++) {\n    +            mt[i].start();\n    +            // Recreate a client session since the previous session was not persisted.\n    +            zk[i] = new ZooKeeper(\"127.0.0.1:\" + clientPorts[i], ClientBase.CONNECTION_TIMEOUT, this);\n    +        }\n    +\n    +        waitForAll(zk, States.CONNECTED);\n    +\n    +        // 2. kill all followers\n    +        int leader = -1;\n    +        Map<Long, Proposal> outstanding = null;\n    +        for (int i = 0; i < SERVER_COUNT; i++) {\n    +            if (mt[i].main.quorumPeer.leader != null) {\n    +                leader = i;\n    +                outstanding = mt[leader].main.quorumPeer.leader.outstandingProposals;\n    +                // increase the tick time to delay the leader going to looking\n    +                mt[leader].main.quorumPeer.tickTime = 10000;\n    +            }\n    +        }\n    +        LOG.warn(\"LEADER {}\", leader);\n    +\n    +        for (int i = 0; i < SERVER_COUNT; i++) {\n    +            if (i != leader) {\n    +                mt[i].shutdown();\n    +            }\n    +        }\n    +\n    +        // 3. start up the followers to form a new quorum\n    +        for (int i = 0; i < SERVER_COUNT; i++) {\n    +            if (i != leader) {\n    +                mt[i].start();\n    +            }\n    +        }\n    +\n    +        // 4. wait one of the follower to be the leader\n    +        for (int i = 0; i < SERVER_COUNT; i++) {\n    +            if (i != leader) {\n    +                // Recreate a client session since the previous session was not persisted.\n    +                zk[i] = new ZooKeeper(\"127.0.0.1:\" + clientPorts[i], ClientBase.CONNECTION_TIMEOUT, this);\n    +                waitForOne(zk[i], States.CONNECTED);\n    +            }\n    +        }\n    +\n    +        // 5. send a create request to leader and make sure it's synced to disk,\n    +        //    which means it acked from itself\n    +        try {\n    +            zk[leader].create(\"/zk\" + leader, \"zk\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n    +                CreateMode.PERSISTENT);\n    +            Assert.fail(\"create /zk\" + leader + \" should have failed\");\n    +        } catch (KeeperException e) {\n    +        }\n    +\n    +        // just make sure that we actually did get it in process at the\n    +        // leader\n    +        Assert.assertTrue(outstanding.size() == 1);\n    +        Proposal p = (Proposal) outstanding.values().iterator().next();\n    +        Assert.assertTrue(p.request.getHdr().getType() == OpCode.create);\n    +\n    +        // make sure it has a chance to write it to disk\n    +        Thread.sleep(1000);\n    --- End diff --\n    \n    @revans2 take a look at `testElectionFraud`, specifically: https://github.com/apache/zookeeper/blob/master/src/java/test/org/apache/zookeeper/server/quorum/QuorumPeerMainTest.java#L383 and https://github.com/apache/zookeeper/blob/master/src/java/test/org/apache/zookeeper/server/quorum/QuorumPeerMainTest.java#L397\r\n    \r\n    You can manually start and stop leader election, I think that may solve this problem. \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2018-02-16T20:05:12.514+0000","updated":"2018-02-16T20:05:12.514+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13087331/comment/16367823","id":"16367823","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user revans2 commented on the issue:\n\n    https://github.com/apache/zookeeper/pull/453\n  \n    @afine and @anmolnar I think I have addressed all of your review comments, except for the one about the change to `waitForOne` and I am happy to adjust however you want there.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2018-02-16T20:12:02.414+0000","updated":"2018-02-16T20:12:02.414+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13087331/comment/16367960","id":"16367960","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user afine commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/453#discussion_r168887935\n  \n    --- Diff: src/java/test/org/apache/zookeeper/server/quorum/QuorumPeerMainTest.java ---\n    @@ -888,4 +923,103 @@ public void testWithOnlyMinSessionTimeout() throws Exception {\n                     maxSessionTimeOut, quorumPeer.getMaxSessionTimeout());\n         }\n     \n    +    @Test\n    +    public void testFailedTxnAsPartOfQuorumLoss() throws Exception {\n    +        // 1. start up server and wait for leader election to finish\n    +        ClientBase.setupTestEnv();\n    +        final int SERVER_COUNT = 3;\n    +        servers = LaunchServers(SERVER_COUNT);\n    +\n    +        waitForAll(servers, States.CONNECTED);\n    +\n    +        // we need to shutdown and start back up to make sure that the create session isn't the first transaction since\n    +        // that is rather innocuous.\n    +        servers.shutDownAllServers();\n    +        waitForAll(servers, States.CONNECTING);\n    +        servers.restartAllServersAndClients(this);\n    +        waitForAll(servers, States.CONNECTED);\n    +\n    +        // 2. kill all followers\n    +        int leader = servers.findLeader();\n    +        Map<Long, Proposal> outstanding =  servers.mt[leader].main.quorumPeer.leader.outstandingProposals;\n    +        // increase the tick time to delay the leader going to looking\n    +        servers.mt[leader].main.quorumPeer.tickTime = 10000;\n    +        LOG.warn(\"LEADER {}\", leader);\n    +\n    +        for (int i = 0; i < SERVER_COUNT; i++) {\n    +            if (i != leader) {\n    +                servers.mt[i].shutdown();\n    +            }\n    +        }\n    +\n    +        // 3. start up the followers to form a new quorum\n    +        for (int i = 0; i < SERVER_COUNT; i++) {\n    +            if (i != leader) {\n    +                servers.mt[i].start();\n    +            }\n    +        }\n    +\n    +        // 4. wait one of the follower to be the new leader\n    +        for (int i = 0; i < SERVER_COUNT; i++) {\n    +            if (i != leader) {\n    +                // Recreate a client session since the previous session was not persisted.\n    +                servers.restartClient(i, this);\n    +                waitForOne(servers.zk[i], States.CONNECTED);\n    +            }\n    +        }\n    +\n    +        // 5. send a create request to old leader and make sure it's synced to disk,\n    +        //    which means it acked from itself\n    +        try {\n    +            servers.zk[leader].create(\"/zk\" + leader, \"zk\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n    +                CreateMode.PERSISTENT);\n    +            Assert.fail(\"create /zk\" + leader + \" should have failed\");\n    +        } catch (KeeperException e) {\n    +        }\n    +\n    +        // just make sure that we actually did get it in process at the\n    +        // leader\n    +        Assert.assertEquals(1, outstanding.size());\n    +        Proposal p = outstanding.values().iterator().next();\n    +        Assert.assertEquals(OpCode.create, p.request.getHdr().getType());\n    +\n    +        // make sure it has a chance to write it to disk\n    +        int sleepTime = 0;\n    +        Long longLeader = new Long(leader);\n    +        while (!p.qvAcksetPairs.get(0).getAckset().contains(longLeader)) {\n    +            if (sleepTime > 2000) {\n    +                Assert.fail(\"Transaction not synced to disk within 1 second \" + p.qvAcksetPairs.get(0).getAckset()\n    +                    + \" expected \" + leader);\n    +            }\n    +            Thread.sleep(100);\n    +            sleepTime += 100;\n    +        }\n    +\n    +        // 6. wait for the leader to quit due to not enough followers and come back up as a part of the new quorum\n    +        sleepTime = 0;\n    +        Follower f = servers.mt[leader].main.quorumPeer.follower;\n    +        while (f == null || !f.isRunning()) {\n    +            if (sleepTime > 10_000) {\n    +                Assert.fail(\"Took too long for old leader to time out \" + servers.mt[leader].main.quorumPeer.getPeerState());\n    +            }\n    +            Thread.sleep(100);\n    +            sleepTime += 100;\n    +            f = servers.mt[leader].main.quorumPeer.follower;\n    +        }\n    +        servers.mt[leader].shutdown();\n    --- End diff --\n    \n    why do we need this?\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2018-02-16T22:40:04.007+0000","updated":"2018-02-16T22:40:04.007+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13087331/comment/16367961","id":"16367961","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user afine commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/453#discussion_r168884819\n  \n    --- Diff: src/java/test/org/apache/zookeeper/server/quorum/QuorumPeerMainTest.java ---\n    @@ -465,6 +470,37 @@ private void waitForAll(ZooKeeper[] zks, States state) throws InterruptedExcepti\n         private static class Servers {\n             MainThread mt[];\n             ZooKeeper zk[];\n    +        int[] clientPorts;\n    +\n    +        public void shutDownAllServers() throws InterruptedException {\n    +            for (MainThread t: mt) {\n    +                t.shutdown();\n    +            }\n    +        }\n    +\n    +        public void restartAllServersAndClients(Watcher watcher) throws IOException {\n    +            for (MainThread t : mt) {\n    +                if (!t.isAlive()) {\n    +                    t.start();\n    +                }\n    +            }\n    +            for (int i = 0; i < zk.length; i++) {\n    +                restartClient(i, watcher);\n    +            }\n    +        }\n    +\n    +        public void restartClient(int i, Watcher watcher) throws IOException {\n    +            zk[i] = new ZooKeeper(\"127.0.0.1:\" + clientPorts[i], ClientBase.CONNECTION_TIMEOUT, watcher);\n    +        }\n    +\n    +        public int findLeader() {\n    --- End diff --\n    \n    there are other places in this test class that benefit from this refactoring. Would you mind cleaning that up?\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2018-02-16T22:40:04.011+0000","updated":"2018-02-16T22:40:04.011+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13087331/comment/16367962","id":"16367962","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user afine commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/453#discussion_r168886064\n  \n    --- Diff: src/java/test/org/apache/zookeeper/server/quorum/QuorumPeerMainTest.java ---\n    @@ -888,4 +923,103 @@ public void testWithOnlyMinSessionTimeout() throws Exception {\n                     maxSessionTimeOut, quorumPeer.getMaxSessionTimeout());\n         }\n     \n    +    @Test\n    +    public void testFailedTxnAsPartOfQuorumLoss() throws Exception {\n    +        // 1. start up server and wait for leader election to finish\n    +        ClientBase.setupTestEnv();\n    +        final int SERVER_COUNT = 3;\n    +        servers = LaunchServers(SERVER_COUNT);\n    +\n    +        waitForAll(servers, States.CONNECTED);\n    +\n    +        // we need to shutdown and start back up to make sure that the create session isn't the first transaction since\n    +        // that is rather innocuous.\n    +        servers.shutDownAllServers();\n    +        waitForAll(servers, States.CONNECTING);\n    +        servers.restartAllServersAndClients(this);\n    +        waitForAll(servers, States.CONNECTED);\n    +\n    +        // 2. kill all followers\n    +        int leader = servers.findLeader();\n    +        Map<Long, Proposal> outstanding =  servers.mt[leader].main.quorumPeer.leader.outstandingProposals;\n    +        // increase the tick time to delay the leader going to looking\n    +        servers.mt[leader].main.quorumPeer.tickTime = 10000;\n    +        LOG.warn(\"LEADER {}\", leader);\n    +\n    +        for (int i = 0; i < SERVER_COUNT; i++) {\n    +            if (i != leader) {\n    +                servers.mt[i].shutdown();\n    +            }\n    +        }\n    +\n    +        // 3. start up the followers to form a new quorum\n    +        for (int i = 0; i < SERVER_COUNT; i++) {\n    +            if (i != leader) {\n    +                servers.mt[i].start();\n    +            }\n    +        }\n    +\n    +        // 4. wait one of the follower to be the new leader\n    +        for (int i = 0; i < SERVER_COUNT; i++) {\n    +            if (i != leader) {\n    +                // Recreate a client session since the previous session was not persisted.\n    +                servers.restartClient(i, this);\n    +                waitForOne(servers.zk[i], States.CONNECTED);\n    +            }\n    +        }\n    +\n    +        // 5. send a create request to old leader and make sure it's synced to disk,\n    +        //    which means it acked from itself\n    +        try {\n    +            servers.zk[leader].create(\"/zk\" + leader, \"zk\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n    +                CreateMode.PERSISTENT);\n    +            Assert.fail(\"create /zk\" + leader + \" should have failed\");\n    +        } catch (KeeperException e) {\n    +        }\n    +\n    +        // just make sure that we actually did get it in process at the\n    +        // leader\n    +        Assert.assertEquals(1, outstanding.size());\n    +        Proposal p = outstanding.values().iterator().next();\n    +        Assert.assertEquals(OpCode.create, p.request.getHdr().getType());\n    +\n    +        // make sure it has a chance to write it to disk\n    +        int sleepTime = 0;\n    +        Long longLeader = new Long(leader);\n    +        while (!p.qvAcksetPairs.get(0).getAckset().contains(longLeader)) {\n    +            if (sleepTime > 2000) {\n    +                Assert.fail(\"Transaction not synced to disk within 1 second \" + p.qvAcksetPairs.get(0).getAckset()\n    +                    + \" expected \" + leader);\n    +            }\n    +            Thread.sleep(100);\n    +            sleepTime += 100;\n    +        }\n    +\n    +        // 6. wait for the leader to quit due to not enough followers and come back up as a part of the new quorum\n    +        sleepTime = 0;\n    +        Follower f = servers.mt[leader].main.quorumPeer.follower;\n    +        while (f == null || !f.isRunning()) {\n    +            if (sleepTime > 10_000) {\n    --- End diff --\n    \n    nitpick: can we reuse the ticktime here to make the relationship more obvious?\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2018-02-16T22:40:04.042+0000","updated":"2018-02-16T22:40:04.042+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13087331/comment/16367963","id":"16367963","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user afine commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/453#discussion_r168884569\n  \n    --- Diff: src/java/test/org/apache/zookeeper/server/quorum/QuorumPeerMainTest.java ---\n    @@ -465,6 +470,37 @@ private void waitForAll(ZooKeeper[] zks, States state) throws InterruptedExcepti\n         private static class Servers {\n             MainThread mt[];\n             ZooKeeper zk[];\n    +        int[] clientPorts;\n    +\n    +        public void shutDownAllServers() throws InterruptedException {\n    +            for (MainThread t: mt) {\n    +                t.shutdown();\n    +            }\n    +        }\n    +\n    +        public void restartAllServersAndClients(Watcher watcher) throws IOException {\n    +            for (MainThread t : mt) {\n    +                if (!t.isAlive()) {\n    +                    t.start();\n    +                }\n    +            }\n    +            for (int i = 0; i < zk.length; i++) {\n    +                restartClient(i, watcher);\n    +            }\n    +        }\n    +\n    +        public void restartClient(int i, Watcher watcher) throws IOException {\n    --- End diff --\n    \n    annoying nitpick: let's use a better argument name than `i`\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2018-02-16T22:40:04.317+0000","updated":"2018-02-16T22:40:04.317+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13087331/comment/16371509","id":"16371509","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user revans2 commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/453#discussion_r169662234\n  \n    --- Diff: src/java/test/org/apache/zookeeper/server/quorum/QuorumPeerMainTest.java ---\n    @@ -888,4 +923,103 @@ public void testWithOnlyMinSessionTimeout() throws Exception {\n                     maxSessionTimeOut, quorumPeer.getMaxSessionTimeout());\n         }\n     \n    +    @Test\n    +    public void testFailedTxnAsPartOfQuorumLoss() throws Exception {\n    +        // 1. start up server and wait for leader election to finish\n    +        ClientBase.setupTestEnv();\n    +        final int SERVER_COUNT = 3;\n    +        servers = LaunchServers(SERVER_COUNT);\n    +\n    +        waitForAll(servers, States.CONNECTED);\n    +\n    +        // we need to shutdown and start back up to make sure that the create session isn't the first transaction since\n    +        // that is rather innocuous.\n    +        servers.shutDownAllServers();\n    +        waitForAll(servers, States.CONNECTING);\n    +        servers.restartAllServersAndClients(this);\n    +        waitForAll(servers, States.CONNECTED);\n    +\n    +        // 2. kill all followers\n    +        int leader = servers.findLeader();\n    +        Map<Long, Proposal> outstanding =  servers.mt[leader].main.quorumPeer.leader.outstandingProposals;\n    +        // increase the tick time to delay the leader going to looking\n    +        servers.mt[leader].main.quorumPeer.tickTime = 10000;\n    +        LOG.warn(\"LEADER {}\", leader);\n    +\n    +        for (int i = 0; i < SERVER_COUNT; i++) {\n    +            if (i != leader) {\n    +                servers.mt[i].shutdown();\n    +            }\n    +        }\n    +\n    +        // 3. start up the followers to form a new quorum\n    +        for (int i = 0; i < SERVER_COUNT; i++) {\n    +            if (i != leader) {\n    +                servers.mt[i].start();\n    +            }\n    +        }\n    +\n    +        // 4. wait one of the follower to be the new leader\n    +        for (int i = 0; i < SERVER_COUNT; i++) {\n    +            if (i != leader) {\n    +                // Recreate a client session since the previous session was not persisted.\n    +                servers.restartClient(i, this);\n    +                waitForOne(servers.zk[i], States.CONNECTED);\n    +            }\n    +        }\n    +\n    +        // 5. send a create request to old leader and make sure it's synced to disk,\n    +        //    which means it acked from itself\n    +        try {\n    +            servers.zk[leader].create(\"/zk\" + leader, \"zk\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n    +                CreateMode.PERSISTENT);\n    +            Assert.fail(\"create /zk\" + leader + \" should have failed\");\n    +        } catch (KeeperException e) {\n    +        }\n    +\n    +        // just make sure that we actually did get it in process at the\n    +        // leader\n    +        Assert.assertEquals(1, outstanding.size());\n    +        Proposal p = outstanding.values().iterator().next();\n    +        Assert.assertEquals(OpCode.create, p.request.getHdr().getType());\n    +\n    +        // make sure it has a chance to write it to disk\n    +        int sleepTime = 0;\n    +        Long longLeader = new Long(leader);\n    +        while (!p.qvAcksetPairs.get(0).getAckset().contains(longLeader)) {\n    +            if (sleepTime > 2000) {\n    +                Assert.fail(\"Transaction not synced to disk within 1 second \" + p.qvAcksetPairs.get(0).getAckset()\n    +                    + \" expected \" + leader);\n    +            }\n    +            Thread.sleep(100);\n    +            sleepTime += 100;\n    +        }\n    +\n    +        // 6. wait for the leader to quit due to not enough followers and come back up as a part of the new quorum\n    +        sleepTime = 0;\n    +        Follower f = servers.mt[leader].main.quorumPeer.follower;\n    +        while (f == null || !f.isRunning()) {\n    +            if (sleepTime > 10_000) {\n    +                Assert.fail(\"Took too long for old leader to time out \" + servers.mt[leader].main.quorumPeer.getPeerState());\n    +            }\n    +            Thread.sleep(100);\n    +            sleepTime += 100;\n    +            f = servers.mt[leader].main.quorumPeer.follower;\n    +        }\n    +        servers.mt[leader].shutdown();\n    --- End diff --\n    \n    It is a lot of very specific steps that make the data inconsistency show up.  This is needed to force the transaction log to be replayed which has an edit in it that wasn't considered as a part of leader election.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2018-02-21T14:56:24.999+0000","updated":"2018-02-21T14:56:24.999+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13087331/comment/16371517","id":"16371517","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user revans2 commented on the issue:\n\n    https://github.com/apache/zookeeper/pull/453\n  \n    @afine \r\n    \r\n    I have addressed you most recent comments.  If you want me to squash commits please let me know.\r\n    \r\n    I have a pull request for the 3.5 branch #454 and for the 3.4 branch #455.  I will be spending some time porting the test to them, and let you know when it is ready.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2018-02-21T15:03:12.953+0000","updated":"2018-02-21T15:03:12.953+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13087331/comment/16371535","id":"16371535","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user revans2 commented on the issue:\n\n    https://github.com/apache/zookeeper/pull/454\n  \n    I just rebased this and pulled in all of the changes made to the main test.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2018-02-21T15:21:24.194+0000","updated":"2018-02-21T15:21:24.194+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13087331/comment/16371611","id":"16371611","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user revans2 commented on the issue:\n\n    https://github.com/apache/zookeeper/pull/455\n  \n    I just rebased this and pulled in all of the changes made to the main test.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2018-02-21T16:22:16.978+0000","updated":"2018-02-21T16:22:16.978+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13087331/comment/16371612","id":"16371612","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user revans2 commented on the issue:\n\n    https://github.com/apache/zookeeper/pull/453\n  \n    @afine all of the changes in this branch are now in the pull requests to the 3.5 and 3.5 branches,\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2018-02-21T16:22:47.846+0000","updated":"2018-02-21T16:22:47.846+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13087331/comment/16375064","id":"16375064","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user asfgit closed the pull request at:\n\n    https://github.com/apache/zookeeper/pull/453\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2018-02-23T22:51:15.158+0000","updated":"2018-02-23T22:51:15.158+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13087331/comment/16375106","id":"16375106","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=abrahamfine","name":"abrahamfine","key":"abrahamfine","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Abraham Fine","active":true,"timeZone":"America/Los_Angeles"},"body":"Issue resolved by pull request 455\n[https://github.com/apache/zookeeper/pull/455]","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=abrahamfine","name":"abrahamfine","key":"abrahamfine","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Abraham Fine","active":true,"timeZone":"America/Los_Angeles"},"created":"2018-02-23T23:20:00.041+0000","updated":"2018-02-23T23:20:00.041+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13087331/comment/16375107","id":"16375107","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user afine commented on the issue:\n\n    https://github.com/apache/zookeeper/pull/453\n  \n    Thanks @revans2. I merged this and the PR's for 3.4 and 3.5\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2018-02-23T23:20:31.754+0000","updated":"2018-02-23T23:20:31.754+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13087331/comment/16375208","id":"16375208","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hudson","name":"hudson","key":"hudson","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Hudson","active":true,"timeZone":"Etc/UTC"},"body":"SUCCESS: Integrated in Jenkins build ZooKeeper-trunk #3740 (See [https://builds.apache.org/job/ZooKeeper-trunk/3740/])\nZOOKEEPER-2845: Apply commit log when restarting server. (afine: rev 722ba9409a44a35d287aac803813f508cff2420a)\n* (edit) src/java/main/org/apache/zookeeper/server/ZKDatabase.java\n* (edit) src/java/test/org/apache/zookeeper/server/quorum/QuorumPeerMainTest.java\n* (edit) src/java/main/org/apache/zookeeper/server/ZooKeeperServer.java\n* (edit) src/java/main/org/apache/zookeeper/server/persistence/FileTxnSnapLog.java\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hudson","name":"hudson","key":"hudson","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Hudson","active":true,"timeZone":"Etc/UTC"},"created":"2018-02-24T01:36:51.425+0000","updated":"2018-02-24T01:36:51.425+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13087331/comment/16378691","id":"16378691","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user revans2 closed the pull request at:\n\n    https://github.com/apache/zookeeper/pull/454\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2018-02-27T14:47:55.647+0000","updated":"2018-02-27T14:47:55.647+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13087331/comment/16378692","id":"16378692","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user revans2 closed the pull request at:\n\n    https://github.com/apache/zookeeper/pull/455\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2018-02-27T14:48:01.946+0000","updated":"2018-02-27T14:48:01.946+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13087331/comment/16378693","id":"16378693","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user revans2 commented on the issue:\n\n    https://github.com/apache/zookeeper/pull/453\n  \n    Thanks @afine I closed them.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2018-02-27T14:48:16.899+0000","updated":"2018-02-27T14:48:16.899+0000"}],"maxResults":77,"total":77,"startAt":0},"votes":{"self":"https://issues.apache.org/jira/rest/api/2/issue/ZOOKEEPER-2845/votes","votes":0,"hasVoted":false},"worklog":{"startAt":0,"maxResults":20,"total":0,"worklogs":[]},"customfield_12311820":"0|i3hjzr:"}}