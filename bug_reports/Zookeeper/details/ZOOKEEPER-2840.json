{"expand":"renderedFields,names,schema,operations,editmeta,changelog,versionedRepresentations","id":"13084820","self":"https://issues.apache.org/jira/rest/api/2/issue/13084820","key":"ZOOKEEPER-2840","fields":{"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype","name":"Bug","subtask":false,"avatarId":21133},"timespent":null,"project":{"self":"https://issues.apache.org/jira/rest/api/2/project/12310801","id":"12310801","key":"ZOOKEEPER","name":"ZooKeeper","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/projectavatar?pid=12310801&avatarId=10011","24x24":"https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12310801&avatarId=10011","16x16":"https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12310801&avatarId=10011","32x32":"https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12310801&avatarId=10011"},"projectCategory":{"self":"https://issues.apache.org/jira/rest/api/2/projectCategory/10484","id":"10484","description":"Apache ZooKeeper related","name":"ZooKeeper"}},"fixVersions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12343268","id":"12343268","description":"Beta release against 3.5 branch","name":"3.5.5","archived":false,"released":false}],"aggregatetimespent":null,"resolution":null,"customfield_12312322":null,"customfield_12310220":"2017-07-05T12:23:35.251+0000","customfield_12312520":null,"customfield_12312323":null,"customfield_12312521":"Mon Apr 16 03:02:53 UTC 2018","customfield_12310420":"9223372036854775807","customfield_12312320":null,"customfield_12310222":null,"customfield_12312321":null,"resolutiondate":null,"workratio":0,"customfield_12312328":null,"customfield_12312329":null,"customfield_12312923":null,"customfield_12312326":null,"customfield_12312920":null,"customfield_12310300":null,"customfield_12312327":null,"customfield_12312921":null,"customfield_12312324":null,"customfield_12312720":null,"customfield_12312325":null,"lastViewed":null,"watches":{"self":"https://issues.apache.org/jira/rest/api/2/issue/ZOOKEEPER-2840/watchers","watchCount":3,"isWatching":false},"created":"2017-07-05T12:17:17.419+0000","customfield_12310192":null,"customfield_12310191":null,"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.svg","name":"Major","id":"3"},"labels":[],"customfield_12312333":null,"customfield_12310230":null,"customfield_12312334":null,"customfield_12313422":"false","customfield_12310310":"0.0","customfield_12312331":null,"customfield_12312332":null,"timeestimate":259200,"aggregatetimeoriginalestimate":259200,"customfield_12311120":null,"customfield_12312330":null,"versions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12335444","id":"12335444","description":"Beta release against 3.5 branch","name":"3.5.3","archived":false,"released":true,"releaseDate":"2017-04-17"}],"issuelinks":[],"customfield_12312339":null,"assignee":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=benedict+jin","name":"benedict jin","key":"benedict jin","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=benedict+jin&avatarId=25504","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=benedict+jin&avatarId=25504","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=benedict+jin&avatarId=25504","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=benedict+jin&avatarId=25504"},"displayName":"Benedict Jin","active":true,"timeZone":"Asia/Hong_Kong"},"customfield_12312337":null,"customfield_12312338":null,"updated":"2018-05-10T20:09:27.758+0000","customfield_12312335":null,"customfield_12312336":null,"status":{"self":"https://issues.apache.org/jira/rest/api/2/status/1","description":"The issue is open and ready for the assignee to start work on it.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/open.png","name":"Open","id":"1","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/2","id":2,"key":"new","colorName":"blue-gray","name":"To Do"}},"components":[{"self":"https://issues.apache.org/jira/rest/api/2/component/12312381","id":"12312381","name":"java client","description":"The java client interface for ZooKeeper"}],"timeoriginalestimate":259200,"description":"Should using `System.nanoTime() ^ this.hashCode()` for StaticHostProvider instead of `System.currentTimeMillis()`. Because if we have three Zookeeper server nodes and set the `zookeeper.leaderServes` as `no`, then those connections from client will always connect with the first Zookeeper server node. Due to...\n\n```java\n    @Test\n    public void testShuffle() throws Exception {\n        LinkedList<InetSocketAddress> inetSocketAddressesList = new LinkedList<>();\n        inetSocketAddressesList.add(new InetSocketAddress(0));\n        inetSocketAddressesList.add(new InetSocketAddress(1));\n        inetSocketAddressesList.add(new InetSocketAddress(2));\n        /*\n        1442045361\n        currentTime: 1499253530044, currentTime ^ hashCode: 1500143845389, Result: 1 2 0\n        currentTime: 1499253530044, currentTime ^ hashCode: 1500143845389, Result: 2 0 1\n        currentTime: 1499253530045, currentTime ^ hashCode: 1500143845388, Result: 0 1 2\n        currentTime: 1499253530045, currentTime ^ hashCode: 1500143845388, Result: 1 2 0\n        currentTime: 1499253530046, currentTime ^ hashCode: 1500143845391, Result: 1 2 0\n        currentTime: 1499253530046, currentTime ^ hashCode: 1500143845391, Result: 1 2 0\n        currentTime: 1499253530046, currentTime ^ hashCode: 1500143845391, Result: 1 2 0\n        currentTime: 1499253530046, currentTime ^ hashCode: 1500143845391, Result: 1 2 0\n        currentTime: 1499253530047, currentTime ^ hashCode: 1500143845390, Result: 1 2 0\n        currentTime: 1499253530047, currentTime ^ hashCode: 1500143845390, Result: 1 2 0\n         */\n        internalShuffleMillis(inetSocketAddressesList);\n        /*\n        146611050\n        currentTime: 22618159623770, currentTime ^ hashCode: 22618302559536, Result: 2 1 0\n        currentTime: 22618159800738, currentTime ^ hashCode: 22618302085832, Result: 0 1 2\n        currentTime: 22618159967442, currentTime ^ hashCode: 22618302248888, Result: 1 0 2\n        currentTime: 22618160135080, currentTime ^ hashCode: 22618302013634, Result: 2 1 0\n        currentTime: 22618160302095, currentTime ^ hashCode: 22618301535077, Result: 2 1 0\n        currentTime: 22618160490260, currentTime ^ hashCode: 22618301725822, Result: 1 0 2\n        currentTime: 22618161566373, currentTime ^ hashCode: 22618300303823, Result: 1 0 2\n        currentTime: 22618161745518, currentTime ^ hashCode: 22618300355844, Result: 2 1 0\n        currentTime: 22618161910357, currentTime ^ hashCode: 22618291603775, Result: 2 1 0\n        currentTime: 22618162079549, currentTime ^ hashCode: 22618291387479, Result: 0 1 2\n         */\n        internalShuffleNano(inetSocketAddressesList);\n\n        inetSocketAddressesList.clear();\n        inetSocketAddressesList.add(new InetSocketAddress(0));\n        inetSocketAddressesList.add(new InetSocketAddress(1));\n\n        /*\n        415138788\n        currentTime: 1499253530050, currentTime ^ hashCode: 1499124456998, Result: 0 1\n        currentTime: 1499253530050, currentTime ^ hashCode: 1499124456998, Result: 0 1\n        currentTime: 1499253530050, currentTime ^ hashCode: 1499124456998, Result: 0 1\n        currentTime: 1499253530050, currentTime ^ hashCode: 1499124456998, Result: 0 1\n        currentTime: 1499253530050, currentTime ^ hashCode: 1499124456998, Result: 0 1\n        currentTime: 1499253530050, currentTime ^ hashCode: 1499124456998, Result: 0 1\n        currentTime: 1499253530053, currentTime ^ hashCode: 1499124456993, Result: 0 1\n        currentTime: 1499253530055, currentTime ^ hashCode: 1499124456995, Result: 0 1\n        currentTime: 1499253530055, currentTime ^ hashCode: 1499124456995, Result: 0 1\n        currentTime: 1499253530055, currentTime ^ hashCode: 1499124456995, Result: 0 1\n         */\n        internalShuffleMillis(inetSocketAddressesList);\n        /*\n        13326370\n        currentTime: 22618168292396, currentTime ^ hashCode: 22618156149774, Result: 1 0\n        currentTime: 22618168416181, currentTime ^ hashCode: 22618156535703, Result: 1 0\n        currentTime: 22618168534056, currentTime ^ hashCode: 22618156432394, Result: 0 1\n        currentTime: 22618168666548, currentTime ^ hashCode: 22618155774358, Result: 0 1\n        currentTime: 22618168818946, currentTime ^ hashCode: 22618155623712, Result: 0 1\n        currentTime: 22618168936821, currentTime ^ hashCode: 22618156011863, Result: 1 0\n        currentTime: 22618169056251, currentTime ^ hashCode: 22618155893721, Result: 1 0\n        currentTime: 22618169611103, currentTime ^ hashCode: 22618157370237, Result: 1 0\n        currentTime: 22618169744528, currentTime ^ hashCode: 22618156713138, Result: 1 0\n        currentTime: 22618171273170, currentTime ^ hashCode: 22618184562672, Result: 1 0\n         */\n        internalShuffleNano(inetSocketAddressesList);\n    }\n\n    private void internalShuffleMillis(LinkedList<InetSocketAddress> inetSocketAddressesList) throws Exception {\n        int hashCode = new StaticHostProvider(inetSocketAddressesList).hashCode();\n        System.out.println(hashCode);\n        int count = 10;\n        Random r;\n        while (count > 0) {\n            long currentTime = System.currentTimeMillis();\n            r = new Random(currentTime ^ hashCode);\n            System.out.print(String.format(\"currentTime: %s, currentTime ^ hashCode: %s, Result: \",\n                    currentTime, currentTime ^ hashCode));\n            Collections.shuffle(inetSocketAddressesList, r);\n            for (InetSocketAddress inetSocketAddress : inetSocketAddressesList) {\n                System.out.print(String.format(\"%s \", inetSocketAddress.getPort()));\n            }\n            System.out.println();\n            count--;\n        }\n    }\n\n    private void internalShuffleNano(LinkedList<InetSocketAddress> inetSocketAddressesList) throws Exception {\n        int hashCode = new StaticHostProvider(inetSocketAddressesList).hashCode();\n        System.out.println(hashCode);\n        int count = 10;\n        Random r;\n        while (count > 0) {\n            long currentTime = System.nanoTime();\n            r = new Random(currentTime ^ hashCode);\n            System.out.print(String.format(\"currentTime: %s, currentTime ^ hashCode: %s, Result: \",\n                    currentTime, currentTime ^ hashCode));\n            Collections.shuffle(inetSocketAddressesList, r);\n            for (InetSocketAddress inetSocketAddress : inetSocketAddressesList) {\n                System.out.print(String.format(\"%s \", inetSocketAddress.getPort()));\n            }\n            System.out.println();\n            count--;\n        }\n    }\n```","customfield_10010":null,"timetracking":{"originalEstimate":"72h","remainingEstimate":"72h","originalEstimateSeconds":259200,"remainingEstimateSeconds":259200},"customfield_12312026":null,"customfield_12312023":null,"customfield_12312024":null,"customfield_12312340":null,"attachment":[],"aggregatetimeestimate":259200,"customfield_12312341":null,"customfield_12312220":null,"customfield_12312022":null,"customfield_12310921":null,"customfield_12310920":"9223372036854775807","customfield_12312823":null,"summary":"Should using `System.nanoTime() ^ this.hashCode()` for StaticHostProvider","creator":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=benedict+jin","name":"benedict jin","key":"benedict jin","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=benedict+jin&avatarId=25504","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=benedict+jin&avatarId=25504","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=benedict+jin&avatarId=25504","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=benedict+jin&avatarId=25504"},"displayName":"Benedict Jin","active":true,"timeZone":"Asia/Hong_Kong"},"subtasks":[],"customfield_12310291":null,"reporter":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=benedict+jin","name":"benedict jin","key":"benedict jin","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=benedict+jin&avatarId=25504","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=benedict+jin&avatarId=25504","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=benedict+jin&avatarId=25504","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=benedict+jin&avatarId=25504"},"displayName":"Benedict Jin","active":true,"timeZone":"Asia/Hong_Kong"},"customfield_12310290":null,"aggregateprogress":{"progress":0,"total":259200,"percent":0},"customfield_12311024":null,"environment":null,"customfield_12313520":null,"customfield_12311020":null,"duedate":null,"customfield_12310250":null,"progress":{"progress":0,"total":259200,"percent":0},"comment":{"comments":[{"self":"https://issues.apache.org/jira/rest/api/2/issue/13084820/comment/16074674","id":"16074674","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"GitHub user asdf2014 opened a pull request:\n\n    https://github.com/apache/zookeeper/pull/303\n\n    ZOOKEEPER-2840: Should using `System.nanoTime() ^ this.hashCode()` fo…\n\n    Should using `System.nanoTime() ^ this.hashCode()` for StaticHostProvider instead of `System.currentTimeMillis()`. Because if we have three Zookeeper server nodes and set the `zookeeper.leaderServes` as `no`, then those connections from client will always connect with the first Zookeeper server node. Due to...\n    \n    ```java\n        @Test\n        public void testShuffle() throws Exception {\n            LinkedList<InetSocketAddress> inetSocketAddressesList = new LinkedList<>();\n            inetSocketAddressesList.add(new InetSocketAddress(0));\n            inetSocketAddressesList.add(new InetSocketAddress(1));\n            inetSocketAddressesList.add(new InetSocketAddress(2));\n            /*\n            1442045361\n            currentTime: 1499253530044, currentTime ^ hashCode: 1500143845389, Result: 1 2 0\n            currentTime: 1499253530044, currentTime ^ hashCode: 1500143845389, Result: 2 0 1\n            currentTime: 1499253530045, currentTime ^ hashCode: 1500143845388, Result: 0 1 2\n            currentTime: 1499253530045, currentTime ^ hashCode: 1500143845388, Result: 1 2 0\n            currentTime: 1499253530046, currentTime ^ hashCode: 1500143845391, Result: 1 2 0\n            currentTime: 1499253530046, currentTime ^ hashCode: 1500143845391, Result: 1 2 0\n            currentTime: 1499253530046, currentTime ^ hashCode: 1500143845391, Result: 1 2 0\n            currentTime: 1499253530046, currentTime ^ hashCode: 1500143845391, Result: 1 2 0\n            currentTime: 1499253530047, currentTime ^ hashCode: 1500143845390, Result: 1 2 0\n            currentTime: 1499253530047, currentTime ^ hashCode: 1500143845390, Result: 1 2 0\n             */\n            internalShuffleMillis(inetSocketAddressesList);\n            /*\n            146611050\n            currentTime: 22618159623770, currentTime ^ hashCode: 22618302559536, Result: 2 1 0\n            currentTime: 22618159800738, currentTime ^ hashCode: 22618302085832, Result: 0 1 2\n            currentTime: 22618159967442, currentTime ^ hashCode: 22618302248888, Result: 1 0 2\n            currentTime: 22618160135080, currentTime ^ hashCode: 22618302013634, Result: 2 1 0\n            currentTime: 22618160302095, currentTime ^ hashCode: 22618301535077, Result: 2 1 0\n            currentTime: 22618160490260, currentTime ^ hashCode: 22618301725822, Result: 1 0 2\n            currentTime: 22618161566373, currentTime ^ hashCode: 22618300303823, Result: 1 0 2\n            currentTime: 22618161745518, currentTime ^ hashCode: 22618300355844, Result: 2 1 0\n            currentTime: 22618161910357, currentTime ^ hashCode: 22618291603775, Result: 2 1 0\n            currentTime: 22618162079549, currentTime ^ hashCode: 22618291387479, Result: 0 1 2\n             */\n            internalShuffleNano(inetSocketAddressesList);\n    \n            inetSocketAddressesList.clear();\n            inetSocketAddressesList.add(new InetSocketAddress(0));\n            inetSocketAddressesList.add(new InetSocketAddress(1));\n    \n            /*\n            415138788\n            currentTime: 1499253530050, currentTime ^ hashCode: 1499124456998, Result: 0 1\n            currentTime: 1499253530050, currentTime ^ hashCode: 1499124456998, Result: 0 1\n            currentTime: 1499253530050, currentTime ^ hashCode: 1499124456998, Result: 0 1\n            currentTime: 1499253530050, currentTime ^ hashCode: 1499124456998, Result: 0 1\n            currentTime: 1499253530050, currentTime ^ hashCode: 1499124456998, Result: 0 1\n            currentTime: 1499253530050, currentTime ^ hashCode: 1499124456998, Result: 0 1\n            currentTime: 1499253530053, currentTime ^ hashCode: 1499124456993, Result: 0 1\n            currentTime: 1499253530055, currentTime ^ hashCode: 1499124456995, Result: 0 1\n            currentTime: 1499253530055, currentTime ^ hashCode: 1499124456995, Result: 0 1\n            currentTime: 1499253530055, currentTime ^ hashCode: 1499124456995, Result: 0 1\n             */\n            internalShuffleMillis(inetSocketAddressesList);\n            /*\n            13326370\n            currentTime: 22618168292396, currentTime ^ hashCode: 22618156149774, Result: 1 0\n            currentTime: 22618168416181, currentTime ^ hashCode: 22618156535703, Result: 1 0\n            currentTime: 22618168534056, currentTime ^ hashCode: 22618156432394, Result: 0 1\n            currentTime: 22618168666548, currentTime ^ hashCode: 22618155774358, Result: 0 1\n            currentTime: 22618168818946, currentTime ^ hashCode: 22618155623712, Result: 0 1\n            currentTime: 22618168936821, currentTime ^ hashCode: 22618156011863, Result: 1 0\n            currentTime: 22618169056251, currentTime ^ hashCode: 22618155893721, Result: 1 0\n            currentTime: 22618169611103, currentTime ^ hashCode: 22618157370237, Result: 1 0\n            currentTime: 22618169744528, currentTime ^ hashCode: 22618156713138, Result: 1 0\n            currentTime: 22618171273170, currentTime ^ hashCode: 22618184562672, Result: 1 0\n             */\n            internalShuffleNano(inetSocketAddressesList);\n        }\n    \n        private void internalShuffleMillis(LinkedList<InetSocketAddress> inetSocketAddressesList) throws Exception {\n            int hashCode = new StaticHostProvider(inetSocketAddressesList).hashCode();\n            System.out.println(hashCode);\n            int count = 10;\n            Random r;\n            while (count > 0) {\n                long currentTime = System.currentTimeMillis();\n                r = new Random(currentTime ^ hashCode);\n                System.out.print(String.format(\"currentTime: %s, currentTime ^ hashCode: %s, Result: \",\n                        currentTime, currentTime ^ hashCode));\n                Collections.shuffle(inetSocketAddressesList, r);\n                for (InetSocketAddress inetSocketAddress : inetSocketAddressesList) {\n                    System.out.print(String.format(\"%s \", inetSocketAddress.getPort()));\n                }\n                System.out.println();\n                count--;\n            }\n        }\n    \n        private void internalShuffleNano(LinkedList<InetSocketAddress> inetSocketAddressesList) throws Exception {\n            int hashCode = new StaticHostProvider(inetSocketAddressesList).hashCode();\n            System.out.println(hashCode);\n            int count = 10;\n            Random r;\n            while (count > 0) {\n                long currentTime = System.nanoTime();\n                r = new Random(currentTime ^ hashCode);\n                System.out.print(String.format(\"currentTime: %s, currentTime ^ hashCode: %s, Result: \",\n                        currentTime, currentTime ^ hashCode));\n                Collections.shuffle(inetSocketAddressesList, r);\n                for (InetSocketAddress inetSocketAddress : inetSocketAddressesList) {\n                    System.out.print(String.format(\"%s \", inetSocketAddress.getPort()));\n                }\n                System.out.println();\n                count--;\n            }\n        }\n    ```\n\nYou can merge this pull request into a Git repository by running:\n\n    $ git pull https://github.com/asdf2014/zookeeper ZOOKEEPER-2840\n\nAlternatively you can review and apply these changes as the patch at:\n\n    https://github.com/apache/zookeeper/pull/303.patch\n\nTo close this pull request, make a commit to your master/trunk branch\nwith (at least) the following in the commit message:\n\n    This closes #303\n    \n----\ncommit dad9cdba24c825a56dfe94a277ea4232af429bdb\nAuthor: asdf2014 <1571805553@qq.com>\nDate:   2017-07-05T12:17:44Z\n\n    ZOOKEEPER-2840: Should using `System.nanoTime() ^ this.hashCode()` for StaticHostProvider\n\n----\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-07-05T12:23:35.251+0000","updated":"2017-07-05T12:23:35.251+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13084820/comment/16074692","id":"16074692","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"body":"+1 overall.  GitHub Pull Request  Build\n      \n\n    +1 @author.  The patch does not contain any @author tags.\n\n    +0 tests included.  The patch appears to be a documentation patch that doesn't require tests.\n\n    +1 javadoc.  The javadoc tool did not generate any warning messages.\n\n    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.\n\n    +1 findbugs.  The patch does not introduce any new Findbugs (version 3.0.1) warnings.\n\n    +1 release audit.  The applied patch does not increase the total number of release audit warnings.\n\n    +1 core tests.  The patch passed core unit tests.\n\n    +1 contrib tests.  The patch passed contrib unit tests.\n\nTest results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/860//testReport/\nFindbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/860//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html\nConsole output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/860//console\n\nThis message is automatically generated.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"created":"2017-07-05T12:42:35.797+0000","updated":"2017-07-05T12:42:35.797+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13084820/comment/16145292","id":"16145292","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user maoling commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/303#discussion_r135789082\n  \n    --- Diff: src/java/main/org/apache/zookeeper/client/StaticHostProvider.java ---\n    @@ -71,7 +71,7 @@\n          *             if serverAddresses is empty or resolves to an empty list\n          */\n         public StaticHostProvider(Collection<InetSocketAddress> serverAddresses) {\n    -       sourceOfRandomness = new Random(System.currentTimeMillis() ^ this.hashCode());\n    +       sourceOfRandomness = new Random(System.nanoTime() ^ this.hashCode());\n    --- End diff --\n    \n    @asdf2014 \n    - shift right a space(haha,original code is also not alignment)\n    - according to [ZOOKEEPER-1990](https://issues.apache.org/jira/browse/ZOOKEEPER-1990)\n       >    the goal here is to make sure that when multiple client threads start at the same time on the same machine \n             (such as in our systest) and execute this line each one is likely to have a different random seed.\n    - your demo is not convincing because different client have different values of `this.hashCode()`(different instances) although the elements in inetSocketAddressesList is same. Look at my [demo](https://github.com/maoling/fuck_zookeeper/blob/master/src/java/test/com/apache/zookeeper/self/ZOOKEEPER_2840.java)\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-08-29T13:30:35.925+0000","updated":"2017-08-29T13:30:35.925+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13084820/comment/16438944","id":"16438944","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user asdf2014 commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/303#discussion_r181613274\n  \n    --- Diff: src/java/main/org/apache/zookeeper/client/StaticHostProvider.java ---\n    @@ -71,7 +71,7 @@\n          *             if serverAddresses is empty or resolves to an empty list\n          */\n         public StaticHostProvider(Collection<InetSocketAddress> serverAddresses) {\n    -       sourceOfRandomness = new Random(System.currentTimeMillis() ^ this.hashCode());\n    +       sourceOfRandomness = new Random(System.nanoTime() ^ this.hashCode());\n    --- End diff --\n    \n    Hi, @maoling. Sorry for my belated comment. Indeed, i hadn't been considered this case that different clients will own different `hashcode`s. Because, in my sistuation, our Zookeeper clusters only give service to some apointed BigData components, e.g., [HBase](https://yuzhouwan.com/posts/45888/), [Druid.io](https://yuzhouwan.com/posts/5845/), [Hadoop](https://yuzhouwan.com/posts/60504/), [Kafka](https://yuzhouwan.com/posts/26002/) etc. Inside these components will have settled clients, so them can not offer too many different `hashcode`s.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2018-04-16T03:02:53.153+0000","updated":"2018-04-16T03:02:53.153+0000"}],"maxResults":4,"total":4,"startAt":0},"votes":{"self":"https://issues.apache.org/jira/rest/api/2/issue/ZOOKEEPER-2840/votes","votes":0,"hasVoted":false},"worklog":{"startAt":0,"maxResults":20,"total":0,"worklogs":[]},"customfield_12311820":"0|i3h4lj:"}}