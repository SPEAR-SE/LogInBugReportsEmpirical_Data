{"expand":"renderedFields,names,schema,operations,editmeta,changelog,versionedRepresentations","id":"12828194","self":"https://issues.apache.org/jira/rest/api/2/issue/12828194","key":"ZOOKEEPER-2184","fields":{"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype","name":"Bug","subtask":false,"avatarId":21133},"timespent":36600,"project":{"self":"https://issues.apache.org/jira/rest/api/2/project/12310801","id":"12310801","key":"ZOOKEEPER","name":"ZooKeeper","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/projectavatar?pid=12310801&avatarId=10011","24x24":"https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12310801&avatarId=10011","16x16":"https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12310801&avatarId=10011","32x32":"https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12310801&avatarId=10011"},"projectCategory":{"self":"https://issues.apache.org/jira/rest/api/2/projectCategory/10484","id":"10484","description":"Apache ZooKeeper related","name":"ZooKeeper"}},"fixVersions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12326518","id":"12326518","name":"3.6.0","archived":false,"released":false},{"self":"https://issues.apache.org/jira/rest/api/2/version/12342973","id":"12342973","description":"Fix release against 3.4 branch","name":"3.4.13","archived":false,"released":true,"releaseDate":"2018-07-17"},{"self":"https://issues.apache.org/jira/rest/api/2/version/12343268","id":"12343268","description":"Beta release against 3.5 branch","name":"3.5.5","archived":false,"released":false}],"aggregatetimespent":36600,"resolution":{"self":"https://issues.apache.org/jira/rest/api/2/resolution/1","id":"1","description":"A fix for this issue is checked into the tree and tested.","name":"Fixed"},"customfield_12312322":null,"customfield_12310220":"2015-06-25T13:30:12.374+0000","customfield_12312520":null,"customfield_12312323":null,"customfield_12312521":"Mon Jul 16 03:48:41 UTC 2018","customfield_12310420":"9223372036854775807","customfield_12312320":null,"customfield_12310222":"1_*:*_2_*:*_94710329988_*|*_3_*:*_1_*:*_3823033815_*|*_4_*:*_1_*:*_61345967_*|*_5_*:*_2_*:*_2317637_*|*_10002_*:*_1_*:*_66070629","customfield_12312321":null,"resolutiondate":"2018-06-22T22:11:10.012+0000","workratio":-1,"customfield_12312328":null,"customfield_12312329":null,"customfield_12312923":null,"customfield_12312326":null,"customfield_12312920":null,"customfield_12310300":null,"customfield_12312327":null,"customfield_12312921":null,"customfield_12312324":null,"customfield_12312720":null,"customfield_12312325":null,"lastViewed":null,"watches":{"self":"https://issues.apache.org/jira/rest/api/2/issue/ZOOKEEPER-2184/watchers","watchCount":38,"isWatching":false},"created":"2015-05-07T23:46:12.019+0000","customfield_12310192":null,"customfield_12310191":null,"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/1","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/blocker.svg","name":"Blocker","id":"1"},"labels":["easyfix","patch","pull-request-available"],"customfield_12312333":null,"customfield_12310230":null,"customfield_12312334":null,"customfield_12313422":"false","customfield_12310310":"1.0","customfield_12312331":null,"customfield_12312332":null,"timeestimate":0,"aggregatetimeoriginalestimate":null,"customfield_12311120":null,"customfield_12312330":null,"versions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12323310","id":"12323310","description":"Fix release against 3.4 branch","name":"3.4.6","archived":false,"released":true,"releaseDate":"2014-03-10"},{"self":"https://issues.apache.org/jira/rest/api/2/version/12325149","id":"12325149","description":"Fix release against 3.4 branch","name":"3.4.7","archived":false,"released":true,"releaseDate":"2015-12-03"},{"self":"https://issues.apache.org/jira/rest/api/2/version/12326517","id":"12326517","description":"Fix release against 3.4 branch","name":"3.4.8","archived":false,"released":true,"releaseDate":"2016-02-22"},{"self":"https://issues.apache.org/jira/rest/api/2/version/12334700","id":"12334700","description":"Fix release against 3.4 branch","name":"3.4.9","archived":false,"released":true,"releaseDate":"2016-09-03"},{"self":"https://issues.apache.org/jira/rest/api/2/version/12338036","id":"12338036","description":"Fix release against 3.4 branch","name":"3.4.10","archived":false,"released":true,"releaseDate":"2017-03-30"},{"self":"https://issues.apache.org/jira/rest/api/2/version/12316644","id":"12316644","description":"Dynamic Reconfig, Remove Watches, Local Session","name":"3.5.0","archived":false,"released":true,"releaseDate":"2014-08-04"},{"self":"https://issues.apache.org/jira/rest/api/2/version/12326786","id":"12326786","description":"Alpha release against 3.5 branch","name":"3.5.1","archived":false,"released":true,"releaseDate":"2015-09-02"},{"self":"https://issues.apache.org/jira/rest/api/2/version/12331981","id":"12331981","description":"Alpha release against 3.5 branch","name":"3.5.2","archived":false,"released":true,"releaseDate":"2016-07-21"},{"self":"https://issues.apache.org/jira/rest/api/2/version/12335444","id":"12335444","description":"Beta release against 3.5 branch","name":"3.5.3","archived":false,"released":true,"releaseDate":"2017-04-17"},{"self":"https://issues.apache.org/jira/rest/api/2/version/12339207","id":"12339207","description":"Fix release against 3.4 branch","name":"3.4.11","archived":false,"released":true,"releaseDate":"2017-11-09"}],"issuelinks":[{"id":"12491245","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12491245","type":{"id":"12310000","name":"Duplicate","inward":"is duplicated by","outward":"duplicates","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/12310000"},"outwardIssue":{"id":"12417097","key":"ZOOKEEPER-338","self":"https://issues.apache.org/jira/rest/api/2/issue/12417097","fields":{"summary":"zk hosts should be resolved periodically for loadbalancing amongst zk servers.","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/1","description":"The issue is open and ready for the assignee to start work on it.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/open.png","name":"Open","id":"1","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/2","id":2,"key":"new","colorName":"blue-gray","name":"To Do"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.svg","name":"Major","id":"3"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/2","id":"2","description":"A new feature of the product, which has yet to be developed.","iconUrl":"https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype","name":"New Feature","subtask":false,"avatarId":21141}}}},{"id":"12539518","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12539518","type":{"id":"10030","name":"Reference","inward":"is related to","outward":"relates to","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"},"outwardIssue":{"id":"13174640","key":"MESOS-9113","self":"https://issues.apache.org/jira/rest/api/2/issue/13174640","fields":{"summary":"Update vendored zookeeper to 3.4.13","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/1","description":"The issue is open and ready for the assignee to start work on it.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/open.png","name":"Open","id":"1","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/2","id":2,"key":"new","colorName":"blue-gray","name":"To Do"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.svg","name":"Major","id":"3"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/4","id":"4","description":"An improvement or enhancement to an existing feature or task.","iconUrl":"https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype","name":"Improvement","subtask":false,"avatarId":21140}}}},{"id":"12527472","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12527472","type":{"id":"10030","name":"Reference","inward":"is related to","outward":"relates to","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"},"outwardIssue":{"id":"12597797","key":"ZOOKEEPER-1506","self":"https://issues.apache.org/jira/rest/api/2/issue/12597797","fields":{"summary":"Re-try DNS hostname -> IP resolution if node connection fails","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/5","description":"A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/resolved.png","name":"Resolved","id":"5","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Done"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/1","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/blocker.svg","name":"Blocker","id":"1"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/4","id":"4","description":"An improvement or enhancement to an existing feature or task.","iconUrl":"https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype","name":"Improvement","subtask":false,"avatarId":21140}}}},{"id":"12492856","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12492856","type":{"id":"10030","name":"Reference","inward":"is related to","outward":"relates to","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"},"inwardIssue":{"id":"12636955","key":"ZOOKEEPER-1666","self":"https://issues.apache.org/jira/rest/api/2/issue/12636955","fields":{"summary":"Avoid Reverse DNS lookup if the hostname in connection string is literal IP address.","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Done"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.svg","name":"Major","id":"3"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/4","id":"4","description":"An improvement or enhancement to an existing feature or task.","iconUrl":"https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype","name":"Improvement","subtask":false,"avatarId":21140}}}}],"customfield_12312339":null,"assignee":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=andorm","name":"andorm","key":"andorm","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=andorm&avatarId=32935","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andorm&avatarId=32935","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andorm&avatarId=32935","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andorm&avatarId=32935"},"displayName":"Andor Molnar","active":true,"timeZone":"Europe/Budapest"},"customfield_12312337":null,"customfield_12312338":null,"updated":"2018-07-25T21:12:18.702+0000","customfield_12312335":null,"customfield_12312336":null,"status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Done"}},"components":[{"self":"https://issues.apache.org/jira/rest/api/2/component/12312381","id":"12312381","name":"java client","description":"The java client interface for ZooKeeper"}],"timeoriginalestimate":null,"description":"Testing in a Docker environment with a single Kafka instance using a single Zookeeper instance. Restarting the Zookeeper container will cause it to receive a new IP address. Kafka will never be able to reconnect to Zookeeper and will hang indefinitely. Updating DNS or /etc/hosts with the new IP address will not help the client to reconnect as the zookeeper/client/StaticHostProvider resolves the connection string hosts at creation time and never re-resolves.\r\n\r\nA solution would be for the client to notice that connection attempts fail and attempt to re-resolve the hostnames in the connectString.","customfield_10010":null,"timetracking":{"remainingEstimate":"0h","timeSpent":"10h 10m","remainingEstimateSeconds":0,"timeSpentSeconds":36600},"customfield_12312026":null,"customfield_12312023":null,"customfield_12312024":null,"customfield_12312340":null,"attachment":[{"self":"https://issues.apache.org/jira/rest/api/2/attachment/12768117","id":"12768117","filename":"ZOOKEEPER-2184.patch","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rthille","name":"rthille","key":"rthille","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=rthille&avatarId=22121","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=rthille&avatarId=22121","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=rthille&avatarId=22121","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=rthille&avatarId=22121"},"displayName":"Robert P. Thille","active":true,"timeZone":"America/Los_Angeles"},"created":"2015-10-22T19:26:01.890+0000","size":7797,"mimeType":"text/plain","content":"https://issues.apache.org/jira/secure/attachment/12768117/ZOOKEEPER-2184.patch"}],"aggregatetimeestimate":0,"customfield_12312341":null,"customfield_12312220":null,"customfield_12312022":null,"customfield_12310921":null,"customfield_12310920":"9223372036854775807","customfield_12312823":null,"summary":"Zookeeper Client should re-resolve hosts when connection attempts fail","creator":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rthille","name":"rthille","key":"rthille","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=rthille&avatarId=22121","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=rthille&avatarId=22121","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=rthille&avatarId=22121","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=rthille&avatarId=22121"},"displayName":"Robert P. Thille","active":true,"timeZone":"America/Los_Angeles"},"subtasks":[],"customfield_12310291":null,"reporter":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rthille","name":"rthille","key":"rthille","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=rthille&avatarId=22121","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=rthille&avatarId=22121","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=rthille&avatarId=22121","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=rthille&avatarId=22121"},"displayName":"Robert P. Thille","active":true,"timeZone":"America/Los_Angeles"},"customfield_12310290":null,"aggregateprogress":{"progress":36600,"total":36600,"percent":100},"customfield_12311024":null,"environment":"Ubuntu 14.04 host, Docker containers for Zookeeper & Kafka","customfield_12313520":null,"customfield_12311020":null,"duedate":null,"customfield_12310250":null,"progress":{"progress":36600,"total":36600,"percent":100},"comment":{"comments":[{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/14601157","id":"14601157","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=guy.moshkowich","name":"guy.moshkowich","key":"guy.moshkowich","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=guy.moshkowich&avatarId=24539","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=guy.moshkowich&avatarId=24539","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=guy.moshkowich&avatarId=24539","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=guy.moshkowich&avatarId=24539"},"displayName":"Guy Moshkowich","active":true,"timeZone":"Asia/Jerusalem"},"body":"[~bhavanki]:\nHi Bill,\nI want to try and fix this defect and would like to ask you for a review on my proposal.\n\n*What is the issue?*\nZK client resolve the host name to ip's when it starts i.e., not when it tries to reconnect to the ZK cluster.\nWhen restarting ZooKeeper Dockers containers - the ip address of the ZooKeeper server might change (at least this is my understanding), causing the client fail reconnecting to the cluster.\n\n*Proposed fix:*\nHave _StaticHostProvider.next(int)_ resolve the host addresses of  serverAddresses at the start of the method.\nThis method is called from _SendThread.startConnect()_ and _SendThread.pingRwServer()_ which are used for re-connections flow.\n\nAny thoughts?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=guy.moshkowich","name":"guy.moshkowich","key":"guy.moshkowich","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=guy.moshkowich&avatarId=24539","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=guy.moshkowich&avatarId=24539","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=guy.moshkowich&avatarId=24539","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=guy.moshkowich&avatarId=24539"},"displayName":"Guy Moshkowich","active":true,"timeZone":"Asia/Jerusalem"},"created":"2015-06-25T13:30:12.374+0000","updated":"2015-06-25T13:30:12.374+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/14969721","id":"14969721","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rthille","name":"rthille","key":"rthille","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=rthille&avatarId=22121","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=rthille&avatarId=22121","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=rthille&avatarId=22121","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=rthille&avatarId=22121"},"displayName":"Robert P. Thille","active":true,"timeZone":"America/Los_Angeles"},"body":"I've modified StaticHostProvider to track whether 'next()' has been called twice in a row without an intervening call to 'onconnected()' and attempt to re-resolve the IP address for the (apparent) connection failure.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rthille","name":"rthille","key":"rthille","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=rthille&avatarId=22121","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=rthille&avatarId=22121","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=rthille&avatarId=22121","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=rthille&avatarId=22121"},"displayName":"Robert P. Thille","active":true,"timeZone":"America/Los_Angeles"},"created":"2015-10-22T19:24:54.768+0000","updated":"2015-10-22T19:24:54.768+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/14969727","id":"14969727","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rthille","name":"rthille","key":"rthille","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=rthille&avatarId=22121","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=rthille&avatarId=22121","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=rthille&avatarId=22121","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=rthille&avatarId=22121"},"displayName":"Robert P. Thille","active":true,"timeZone":"America/Los_Angeles"},"body":"The submitted patch is against the branch-3.4 branch only.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rthille","name":"rthille","key":"rthille","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=rthille&avatarId=22121","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=rthille&avatarId=22121","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=rthille&avatarId=22121","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=rthille&avatarId=22121"},"displayName":"Robert P. Thille","active":true,"timeZone":"America/Los_Angeles"},"created":"2015-10-22T19:26:01.894+0000","updated":"2015-10-22T19:26:01.894+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/14969869","id":"14969869","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"body":"-1 overall.  Here are the results of testing the latest attachment \n  http://issues.apache.org/jira/secure/attachment/12768117/ZOOKEEPER-2184.patch\n  against trunk revision 1709293.\n\n    +1 @author.  The patch does not contain any @author tags.\n\n    +1 tests included.  The patch appears to include 7 new or modified tests.\n\n    -1 patch.  The patch command could not apply the patch.\n\nConsole output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2924//console\n\nThis message is automatically generated.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"created":"2015-10-22T20:49:48.791+0000","updated":"2015-10-22T20:49:48.791+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/14970999","id":"14970999","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=fpj","name":"fpj","key":"fpj","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=fpj&avatarId=16030","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=fpj&avatarId=16030","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=fpj&avatarId=16030","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=fpj&avatarId=16030"},"displayName":"Flavio Junqueira","active":true,"timeZone":"Europe/Berlin"},"body":"Hi [~rthille], Thanks for the patch. I have a few comments and concerns about this patch:\n\n# I think it would be better to not track connectedSinceNext and try to resolve addresses again after spinning over the list of servers, perhaps right after where we do a Thread.sleep(spinDelay), line 111 after applying your patch.\n# I'm not sure why you deleted that block of code in the constructor of StaticHostProvider.\n# The change in ZxidRolloverTest.java doesn't seem to be part of this patch.  ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=fpj","name":"fpj","key":"fpj","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=fpj&avatarId=16030","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=fpj&avatarId=16030","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=fpj&avatarId=16030","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=fpj&avatarId=16030"},"displayName":"Flavio Junqueira","active":true,"timeZone":"Europe/Berlin"},"created":"2015-10-23T13:45:30.455+0000","updated":"2015-10-23T13:45:30.455+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/14971000","id":"14971000","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=fpj","name":"fpj","key":"fpj","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=fpj&avatarId=16030","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=fpj&avatarId=16030","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=fpj&avatarId=16030","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=fpj&avatarId=16030"},"displayName":"Flavio Junqueira","active":true,"timeZone":"Europe/Berlin"},"body":"Cancelling due to comments.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=fpj","name":"fpj","key":"fpj","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=fpj&avatarId=16030","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=fpj&avatarId=16030","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=fpj&avatarId=16030","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=fpj&avatarId=16030"},"displayName":"Flavio Junqueira","active":true,"timeZone":"Europe/Berlin"},"created":"2015-10-23T13:46:05.412+0000","updated":"2015-10-23T13:46:05.412+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/14971379","id":"14971379","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rthille","name":"rthille","key":"rthille","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=rthille&avatarId=22121","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=rthille&avatarId=22121","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=rthille&avatarId=22121","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=rthille&avatarId=22121"},"displayName":"Robert P. Thille","active":true,"timeZone":"America/Los_Angeles"},"body":"For \"1\" is the change you suggest in order to reduce the latency of going to the 'next()' server?  That makes sense.  Ideally, I'd love to kick off a thread to do the resolution and immediately return the next server, but I'm a C/Python programmer, not a Java programmer, so I'm not going there :-)\n\nFor 2, I'll have to re-run through it when I get a chance (later today probably), but I believe that that code converts hostnames to IP addresses, so later on we don't have the original hostnames in order to re-resolve.\n\nFor 3, yeah, I think I changed that because I was seeing the ERROR() output for something that was obviously expected and not an error and that was distracting me from the real errors I was seeing during development.  I'll remove that from the next patch.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rthille","name":"rthille","key":"rthille","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=rthille&avatarId=22121","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=rthille&avatarId=22121","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=rthille&avatarId=22121","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=rthille&avatarId=22121"},"displayName":"Robert P. Thille","active":true,"timeZone":"America/Los_Angeles"},"created":"2015-10-23T17:10:49.608+0000","updated":"2015-10-23T17:10:49.608+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/14995806","id":"14995806","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rgs","name":"rgs","key":"rgs","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=rgs&avatarId=18469","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=rgs&avatarId=18469","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=rgs&avatarId=18469","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=rgs&avatarId=18469"},"displayName":"Raul Gutierrez Segales","active":true,"timeZone":"America/Los_Angeles"},"body":"[~fpj], [~rthille]: moving this to 3.4.8 (happy to help with the review when you've sorted the above comments) ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rgs","name":"rgs","key":"rgs","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=rgs&avatarId=18469","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=rgs&avatarId=18469","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=rgs&avatarId=18469","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=rgs&avatarId=18469"},"displayName":"Raul Gutierrez Segales","active":true,"timeZone":"America/Los_Angeles"},"created":"2015-11-08T21:04:13.034+0000","updated":"2015-11-08T21:04:13.034+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/15422598","id":"15422598","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rakeshr","name":"rakeshr","key":"rakeshr","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=rakeshr&avatarId=29267","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=rakeshr&avatarId=29267","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=rakeshr&avatarId=29267","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=rakeshr&avatarId=29267"},"displayName":"Rakesh R","active":true,"timeZone":"Asia/Kolkata"},"body":"I am moving this out to 3.4.10 for now.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rakeshr","name":"rakeshr","key":"rakeshr","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=rakeshr&avatarId=29267","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=rakeshr&avatarId=29267","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=rakeshr&avatarId=29267","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=rakeshr&avatarId=29267"},"displayName":"Rakesh R","active":true,"timeZone":"Asia/Kolkata"},"created":"2016-08-16T11:13:43.586+0000","updated":"2016-08-16T11:13:43.586+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/15517160","id":"15517160","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=fpj","name":"fpj","key":"fpj","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=fpj&avatarId=16030","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=fpj&avatarId=16030","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=fpj&avatarId=16030","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=fpj&avatarId=16030"},"displayName":"Flavio Junqueira","active":true,"timeZone":"Europe/Berlin"},"body":"I'm sorry for losing track of this issue, it is important and not hard to fix, we should do it soon.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=fpj","name":"fpj","key":"fpj","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=fpj&avatarId=16030","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=fpj&avatarId=16030","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=fpj&avatarId=16030","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=fpj&avatarId=16030"},"displayName":"Flavio Junqueira","active":true,"timeZone":"Europe/Berlin"},"created":"2016-09-23T18:15:30.691+0000","updated":"2016-09-23T18:15:30.691+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/15517173","id":"15517173","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=Ryan+P","name":"Ryan P","key":"ryan p","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=ryan+p&avatarId=22394","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=ryan+p&avatarId=22394","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=ryan+p&avatarId=22394","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=ryan+p&avatarId=22394"},"displayName":"Ryan P","active":true,"timeZone":"Etc/GMT+4"},"body":"[~rthille] Any chance you want to pick back up on this where you left off? If not do you mind if run with it? ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=Ryan+P","name":"Ryan P","key":"ryan p","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=ryan+p&avatarId=22394","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=ryan+p&avatarId=22394","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=ryan+p&avatarId=22394","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=ryan+p&avatarId=22394"},"displayName":"Ryan P","active":true,"timeZone":"Etc/GMT+4"},"created":"2016-09-23T18:22:04.268+0000","updated":"2016-09-23T18:22:04.268+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/15822864","id":"15822864","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"GitHub user fpj opened a pull request:\n\n    https://github.com/apache/zookeeper/pull/150\n\n    ZOOKEEPER-2184: Zookeeper Client should re-resolve hosts when connection attempts fail\n\n    This is a version of the patch for ZK-2184 for the 3.4 branch, compatible with Java 6.\n\nYou can merge this pull request into a Git repository by running:\n\n    $ git pull https://github.com/fpj/zookeeper ZK-2184\n\nAlternatively you can review and apply these changes as the patch at:\n\n    https://github.com/apache/zookeeper/pull/150.patch\n\nTo close this pull request, make a commit to your master/trunk branch\nwith (at least) the following in the commit message:\n\n    This closes #150\n    \n----\ncommit fbaa47e3a96f166cfae45070b0724780f13714e9\nAuthor: fpj <fpj@apache.org>\nDate:   2017-01-14T16:58:15Z\n\n    ZOOKEEPER-2184: Zookeeper Client should re-resolve hosts when connection attempts fail\n\n----\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-01-14T17:00:35.231+0000","updated":"2017-01-14T17:00:35.231+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/15822867","id":"15822867","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user fpj commented on the issue:\n\n    https://github.com/apache/zookeeper/pull/150\n  \n    The error is expected because we haven't setup QA to build out of the 3.4 branch.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-01-14T17:04:50.788+0000","updated":"2017-01-14T17:04:50.788+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/15822883","id":"15822883","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user eribeiro commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/150#discussion_r96120333\n  \n    --- Diff: src/java/main/org/apache/zookeeper/client/StaticHostProvider.java ---\n    @@ -87,12 +73,69 @@ public StaticHostProvider(Collection<InetSocketAddress> serverAddresses)\n             Collections.shuffle(this.serverAddresses);\n         }\n     \n    +    /**\n    +     * In Java 7, we have a method getHostString, but earlier versions do not support it.\n    +     * This method is to provide a replacement for InetSocketAddress.getHostString().\n    +     *\n    +     * It evaluates to a hostname if one is available and otherwise it returns the\n    +     * string representation of the IP address.\n    +     *\n    +     * @param addr\n    +     * @return\n    +     */\n    +    private String getHostString(InetSocketAddress addr) {\n    +        String hostString;\n    +        InetAddress ia = addr.getAddress();\n    +\n    +        if ( ia != null ) {\n    --- End diff --\n    \n    Silly nit: space around expression. \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-01-14T17:58:20.080+0000","updated":"2017-01-14T17:58:20.080+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/15822884","id":"15822884","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user eribeiro commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/150#discussion_r96120303\n  \n    --- Diff: src/java/main/org/apache/zookeeper/client/StaticHostProvider.java ---\n    @@ -87,12 +73,69 @@ public StaticHostProvider(Collection<InetSocketAddress> serverAddresses)\n             Collections.shuffle(this.serverAddresses);\n         }\n     \n    +    /**\n    +     * In Java 7, we have a method getHostString, but earlier versions do not support it.\n    +     * This method is to provide a replacement for InetSocketAddress.getHostString().\n    +     *\n    +     * It evaluates to a hostname if one is available and otherwise it returns the\n    --- End diff --\n    \n    This line could be part of the @return tag, no?\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-01-14T17:58:20.081+0000","updated":"2017-01-14T17:58:20.081+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/15822885","id":"15822885","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user eribeiro commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/150#discussion_r96120265\n  \n    --- Diff: src/java/main/org/apache/zookeeper/client/StaticHostProvider.java ---\n    @@ -45,6 +45,9 @@\n     \n         private int currentIndex = -1;\n     \n    +    // Don't re-resolve on first next() call\n    +    private boolean connectedSinceNext = true;\n    --- End diff --\n    \n    Sincere question: it is worth making this field *volatile*?\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-01-14T17:58:20.141+0000","updated":"2017-01-14T17:58:20.141+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/15822886","id":"15822886","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user eribeiro commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/150#discussion_r96120356\n  \n    --- Diff: src/java/main/org/apache/zookeeper/client/StaticHostProvider.java ---\n    @@ -87,12 +73,69 @@ public StaticHostProvider(Collection<InetSocketAddress> serverAddresses)\n             Collections.shuffle(this.serverAddresses);\n         }\n     \n    +    /**\n    +     * In Java 7, we have a method getHostString, but earlier versions do not support it.\n    +     * This method is to provide a replacement for InetSocketAddress.getHostString().\n    +     *\n    +     * It evaluates to a hostname if one is available and otherwise it returns the\n    +     * string representation of the IP address.\n    +     *\n    +     * @param addr\n    +     * @return\n    +     */\n    +    private String getHostString(InetSocketAddress addr) {\n    +        String hostString;\n    +        InetAddress ia = addr.getAddress();\n    +\n    +        if ( ia != null ) {\n    +            // If the string starts with '/', then it has no hostname\n    +            // and we want to avoid the reverse lookup, so we return\n    +            // the string representation of the address.\n    +            if (ia.toString().startsWith(\"/\")) {\n    +                hostString = ia.getHostAddress();\n    +            } else {\n    +                hostString = addr.getHostName();\n    +            }\n    +        } else {\n    +            // According to the Java 6 documentation, if the hostname is\n    +            // unresolved, then the string before the colon is the hostname.\n    +            String addrString = addr.toString();\n    +            hostString = addrString.substring(0, addrString.indexOf( ':' ));\n    +        }\n    +\n    --- End diff --\n    \n    Extra space?\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-01-14T17:58:20.179+0000","updated":"2017-01-14T17:58:20.179+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/15822889","id":"15822889","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user eribeiro commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/150#discussion_r96121135\n  \n    --- Diff: src/java/main/org/apache/zookeeper/client/StaticHostProvider.java ---\n    @@ -87,12 +73,69 @@ public StaticHostProvider(Collection<InetSocketAddress> serverAddresses)\n             Collections.shuffle(this.serverAddresses);\n         }\n     \n    +    /**\n    +     * In Java 7, we have a method getHostString, but earlier versions do not support it.\n    +     * This method is to provide a replacement for InetSocketAddress.getHostString().\n    +     *\n    +     * It evaluates to a hostname if one is available and otherwise it returns the\n    +     * string representation of the IP address.\n    +     *\n    +     * @param addr\n    +     * @return\n    +     */\n    +    private String getHostString(InetSocketAddress addr) {\n    +        String hostString;\n    +        InetAddress ia = addr.getAddress();\n    +\n    +        if ( ia != null ) {\n    +            // If the string starts with '/', then it has no hostname\n    +            // and we want to avoid the reverse lookup, so we return\n    +            // the string representation of the address.\n    +            if (ia.toString().startsWith(\"/\")) {\n    +                hostString = ia.getHostAddress();\n    +            } else {\n    +                hostString = addr.getHostName();\n    +            }\n    +        } else {\n    +            // According to the Java 6 documentation, if the hostname is\n    +            // unresolved, then the string before the colon is the hostname.\n    +            String addrString = addr.toString();\n    +            hostString = addrString.substring(0, addrString.indexOf( ':' ));\n    +        }\n    +\n    +        return hostString;\n    +    }\n    +\n         public int size() {\n             return serverAddresses.size();\n         }\n     \n         public InetSocketAddress next(long spinDelay) {\n    +        // Handle possible connection error by re-resolving hostname if possible\n    +        if (!connectedSinceNext) {\n    +            InetSocketAddress curAddr = serverAddresses.get(currentIndex);\n    +            if (!curAddr.getHostString().equals(curAddr.getAddress().getHostAddress())) {\n    +                try {\n    +                    int thePort = curAddr.getPort();\n    +                    InetAddress resolvedAddresses[] = InetAddress.getAllByName(getHostString(curAddr));\n    +                    if (resolvedAddresses.length == 1) {\n    +                        serverAddresses.set(currentIndex, new InetSocketAddress(resolvedAddresses[0], thePort));\n    +                    } else {\n    +                        serverAddresses.remove(currentIndex);\n    +                        for (InetAddress resolvedAddress : resolvedAddresses) {\n    +                            InetSocketAddress newAddr = new InetSocketAddress(resolvedAddress, thePort);\n    +                            if (!serverAddresses.contains(newAddr)) {\n    +                                serverAddresses.add(newAddr);\n    +                            }\n    +                        }\n    +                    }\n    +                } catch (UnknownHostException e) {\n    +                    LOG.warn(\"Cannot re-resolve server: \" + curAddr + \" UnknownHostException: \" + e);\n    +                }\n    +            }\n    +        }\n             ++currentIndex;\n    +        connectedSinceNext = false;\n             if (currentIndex == serverAddresses.size()) {\n    --- End diff --\n    \n    As `serverAddresses.size()` cannot be 0 (per constructor checking) this if condition and line 137 could be rewritten as:\n    ``\n       currentIndex = currentIndex % serverAddresses.size();\n    ``\n    \n    or even \n    ``\n    currentIndex = ++currentIndex % serverAddresses.size();\n    ``\n    Eliminating the need of line 137 too. \n    \n    On master, branch-3.4 and branch-3.5. **Just a silly optimization, tough.** \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-01-14T18:02:12.469+0000","updated":"2017-01-14T18:02:12.469+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/15822976","id":"15822976","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user fpj commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/150#discussion_r96125997\n  \n    --- Diff: src/java/main/org/apache/zookeeper/client/StaticHostProvider.java ---\n    @@ -45,6 +45,9 @@\n     \n         private int currentIndex = -1;\n     \n    +    // Don't re-resolve on first next() call\n    +    private boolean connectedSinceNext = true;\n    --- End diff --\n    \n    All calls to `next` and `onConnected` are from the `sendThread`. I don't see a reason for making volatile, unless we are doing it defensively. Let me know if I'm missing anything.\n    \n    Note that this pull request is for the 3.4 branch, we need a different patch for 3.5 and master.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-01-14T22:34:58.395+0000","updated":"2017-01-14T22:34:58.395+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/15823099","id":"15823099","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=fpj","name":"fpj","key":"fpj","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=fpj&avatarId=16030","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=fpj&avatarId=16030","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=fpj&avatarId=16030","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=fpj&avatarId=16030"},"displayName":"Flavio Junqueira","active":true,"timeZone":"Europe/Berlin"},"body":"I took a stab at a pull request for the 3.4 branch and I'd appreciate some feedback. It is easy to miss some important detail with this hostname/address manipulation, so if anyone has a chance to double check what I've done, I'd appreciate.\n\nFor the 3.4 branch, we promise compatibility with Java 6, so the patch does not immediately apply because it uses {{getHostString}}, which is available only from Java 7. Consequently, I have added some code to get around that.\n\nFor the 3.5 branch, we will need a different patch because of the reconfiguration changes to {{StaticHostProvider}}. I'll work on it once the 3.4 patch gets a +1.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=fpj","name":"fpj","key":"fpj","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=fpj&avatarId=16030","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=fpj&avatarId=16030","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=fpj&avatarId=16030","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=fpj&avatarId=16030"},"displayName":"Flavio Junqueira","active":true,"timeZone":"Europe/Berlin"},"created":"2017-01-15T10:34:34.349+0000","updated":"2017-01-15T10:34:34.349+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/15823445","id":"15823445","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user rakeshadr commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/150#discussion_r96163423\n  \n    --- Diff: src/java/main/org/apache/zookeeper/client/StaticHostProvider.java ---\n    @@ -87,15 +73,69 @@ public StaticHostProvider(Collection<InetSocketAddress> serverAddresses)\n             Collections.shuffle(this.serverAddresses);\n         }\n     \n    +    /**\n    +     * In Java 7, we have a method getHostString, but earlier versions do not support it.\n    +     * This method is to provide a replacement for InetSocketAddress.getHostString().\n    +     *\n    +     * It evaluates to a hostname if one is available and otherwise it returns the\n    +     * string representation of the IP address.\n    +     *\n    +     * @param addr\n    +     * @return Hostname string of address parameter\n    +     */\n    +    private String getHostString(InetSocketAddress addr) {\n    +        String hostString;\n    +        InetAddress ia = addr.getAddress();\n    +\n    +        if (ia != null) {\n    +            // If the string starts with '/', then it has no hostname\n    +            // and we want to avoid the reverse lookup, so we return\n    +            // the string representation of the address.\n    +            if (ia.toString().startsWith(\"/\")) {\n    +                hostString = ia.getHostAddress();\n    +            } else {\n    +                hostString = addr.getHostName();\n    +            }\n    +        } else {\n    +            // According to the Java 6 documentation, if the hostname is\n    +            // unresolved, then the string before the colon is the hostname.\n    +            String addrString = addr.toString();\n    +            hostString = addrString.substring(0, addrString.lastIndexOf(':'));\n    +        }\n    +\n    +        return hostString;\n    +    }\n    +\n         public int size() {\n             return serverAddresses.size();\n         }\n     \n         public InetSocketAddress next(long spinDelay) {\n    -        ++currentIndex;\n    -        if (currentIndex == serverAddresses.size()) {\n    -            currentIndex = 0;\n    +        // Handle possible connection error by re-resolving hostname if possible\n    +        if (!connectedSinceNext) {\n    +            InetSocketAddress curAddr = serverAddresses.get(currentIndex);\n    +            if (!curAddr.getHostString().equals(curAddr.getAddress().getHostAddress())) {\n    +                try {\n    +                    int thePort = curAddr.getPort();\n    +                    InetAddress resolvedAddresses[] = InetAddress.getAllByName(getHostString(curAddr));\n    +                    if (resolvedAddresses.length == 1) {\n    +                        serverAddresses.set(currentIndex, new InetSocketAddress(resolvedAddresses[0], thePort));\n    +                    } else {\n    +                        serverAddresses.remove(currentIndex);\n    +                        for (InetAddress resolvedAddress : resolvedAddresses) {\n    +                            InetSocketAddress newAddr = new InetSocketAddress(resolvedAddress, thePort);\n    +                            if (!serverAddresses.contains(newAddr)) {\n    +                                serverAddresses.add(newAddr);\n    +                            }\n    +                        }\n    +                    }\n    +                } catch (UnknownHostException e) {\n    +                    LOG.warn(\"Cannot re-resolve server: \" + curAddr + \" UnknownHostException: \" + e);\n    --- End diff --\n    \n    Please use {} instead of string concatenation. Also, for better debugging, can we pass 'e' object as argument to the logger instead of concat the exception message.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-01-16T04:28:28.327+0000","updated":"2017-01-16T04:28:28.327+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/15823446","id":"15823446","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user rakeshadr commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/150#discussion_r96163440\n  \n    --- Diff: src/java/main/org/apache/zookeeper/client/StaticHostProvider.java ---\n    @@ -87,15 +73,69 @@ public StaticHostProvider(Collection<InetSocketAddress> serverAddresses)\n             Collections.shuffle(this.serverAddresses);\n         }\n     \n    +    /**\n    +     * In Java 7, we have a method getHostString, but earlier versions do not support it.\n    +     * This method is to provide a replacement for InetSocketAddress.getHostString().\n    +     *\n    +     * It evaluates to a hostname if one is available and otherwise it returns the\n    +     * string representation of the IP address.\n    +     *\n    +     * @param addr\n    +     * @return Hostname string of address parameter\n    +     */\n    +    private String getHostString(InetSocketAddress addr) {\n    +        String hostString;\n    +        InetAddress ia = addr.getAddress();\n    +\n    +        if (ia != null) {\n    +            // If the string starts with '/', then it has no hostname\n    +            // and we want to avoid the reverse lookup, so we return\n    +            // the string representation of the address.\n    +            if (ia.toString().startsWith(\"/\")) {\n    +                hostString = ia.getHostAddress();\n    +            } else {\n    +                hostString = addr.getHostName();\n    +            }\n    +        } else {\n    +            // According to the Java 6 documentation, if the hostname is\n    +            // unresolved, then the string before the colon is the hostname.\n    +            String addrString = addr.toString();\n    +            hostString = addrString.substring(0, addrString.lastIndexOf(':'));\n    +        }\n    +\n    +        return hostString;\n    +    }\n    +\n         public int size() {\n             return serverAddresses.size();\n         }\n     \n         public InetSocketAddress next(long spinDelay) {\n    -        ++currentIndex;\n    -        if (currentIndex == serverAddresses.size()) {\n    -            currentIndex = 0;\n    +        // Handle possible connection error by re-resolving hostname if possible\n    +        if (!connectedSinceNext) {\n    +            InetSocketAddress curAddr = serverAddresses.get(currentIndex);\n    +            if (!curAddr.getHostString().equals(curAddr.getAddress().getHostAddress())) {\n    +                try {\n    +                    int thePort = curAddr.getPort();\n    --- End diff --\n    \n    I failed to find any test case which covers the newly added condition, could you please point me to that. Thanks!\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-01-16T04:28:49.386+0000","updated":"2017-01-16T04:28:49.386+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/15823523","id":"15823523","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user hanm commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/150#discussion_r96170041\n  \n    --- Diff: src/java/main/org/apache/zookeeper/client/StaticHostProvider.java ---\n    @@ -87,15 +73,69 @@ public StaticHostProvider(Collection<InetSocketAddress> serverAddresses)\n             Collections.shuffle(this.serverAddresses);\n         }\n     \n    +    /**\n    +     * In Java 7, we have a method getHostString, but earlier versions do not support it.\n    +     * This method is to provide a replacement for InetSocketAddress.getHostString().\n    +     *\n    +     * It evaluates to a hostname if one is available and otherwise it returns the\n    +     * string representation of the IP address.\n    +     *\n    +     * @param addr\n    +     * @return Hostname string of address parameter\n    +     */\n    +    private String getHostString(InetSocketAddress addr) {\n    +        String hostString;\n    +        InetAddress ia = addr.getAddress();\n    +\n    +        if (ia != null) {\n    +            // If the string starts with '/', then it has no hostname\n    +            // and we want to avoid the reverse lookup, so we return\n    +            // the string representation of the address.\n    +            if (ia.toString().startsWith(\"/\")) {\n    +                hostString = ia.getHostAddress();\n    +            } else {\n    +                hostString = addr.getHostName();\n    +            }\n    +        } else {\n    +            // According to the Java 6 documentation, if the hostname is\n    +            // unresolved, then the string before the colon is the hostname.\n    +            String addrString = addr.toString();\n    +            hostString = addrString.substring(0, addrString.lastIndexOf(':'));\n    +        }\n    +\n    +        return hostString;\n    +    }\n    +\n         public int size() {\n             return serverAddresses.size();\n         }\n     \n         public InetSocketAddress next(long spinDelay) {\n    -        ++currentIndex;\n    -        if (currentIndex == serverAddresses.size()) {\n    -            currentIndex = 0;\n    +        // Handle possible connection error by re-resolving hostname if possible\n    +        if (!connectedSinceNext) {\n    +            InetSocketAddress curAddr = serverAddresses.get(currentIndex);\n    +            if (!curAddr.getHostString().equals(curAddr.getAddress().getHostAddress())) {\n    +                try {\n    +                    int thePort = curAddr.getPort();\n    +                    InetAddress resolvedAddresses[] = InetAddress.getAllByName(getHostString(curAddr));\n    +                    if (resolvedAddresses.length == 1) {\n    +                        serverAddresses.set(currentIndex, new InetSocketAddress(resolvedAddresses[0], thePort));\n    +                    } else {\n    +                        serverAddresses.remove(currentIndex);\n    +                        for (InetAddress resolvedAddress : resolvedAddresses) {\n    +                            InetSocketAddress newAddr = new InetSocketAddress(resolvedAddress, thePort);\n    +                            if (!serverAddresses.contains(newAddr)) {\n    +                                serverAddresses.add(newAddr);\n    +                            }\n    +                        }\n    +                    }\n    +                } catch (UnknownHostException e) {\n    +                    LOG.warn(\"Cannot re-resolve server: \" + curAddr + \" UnknownHostException: \" + e);\n    --- End diff --\n    \n    Should we create an unresolved address like what we did on server side `recreateSocketAddresses` if we can't resolve the address? If the address is not resolvable but maybe it is still usable?\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-01-16T06:29:02.046+0000","updated":"2017-01-16T06:29:02.046+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/15823525","id":"15823525","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user hanm commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/150#discussion_r96170084\n  \n    --- Diff: src/java/main/org/apache/zookeeper/client/StaticHostProvider.java ---\n    @@ -87,15 +73,69 @@ public StaticHostProvider(Collection<InetSocketAddress> serverAddresses)\n             Collections.shuffle(this.serverAddresses);\n         }\n     \n    +    /**\n    +     * In Java 7, we have a method getHostString, but earlier versions do not support it.\n    +     * This method is to provide a replacement for InetSocketAddress.getHostString().\n    +     *\n    +     * It evaluates to a hostname if one is available and otherwise it returns the\n    +     * string representation of the IP address.\n    +     *\n    +     * @param addr\n    +     * @return Hostname string of address parameter\n    +     */\n    +    private String getHostString(InetSocketAddress addr) {\n    --- End diff --\n    \n    Java 6 has getHostString, but it's package private. Use reflection can access that. Maybe we should use the library version instead?\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-01-16T06:30:08.258+0000","updated":"2017-01-16T06:30:08.258+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/15823528","id":"15823528","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user hanm commented on the issue:\n\n    https://github.com/apache/zookeeper/pull/150\n  \n    Does C client has similar issue?\n    \n    Also, ZOOKEEPER-2184 looks like a dup of ZOOKEEPER-338.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-01-16T06:37:44.567+0000","updated":"2017-01-16T06:37:44.567+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/15823951","id":"15823951","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user eribeiro commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/150#discussion_r96226819\n  \n    --- Diff: src/java/main/org/apache/zookeeper/client/StaticHostProvider.java ---\n    @@ -45,6 +45,9 @@\n     \n         private int currentIndex = -1;\n     \n    +    // Don't re-resolve on first next() call\n    +    private boolean connectedSinceNext = true;\n    --- End diff --\n    \n    My reasoning was only defensively, but on a 2nd look, it would be overkill. So, no problem without being volatile, imo.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-01-16T13:17:16.770+0000","updated":"2017-01-16T13:17:16.770+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/15823954","id":"15823954","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user eribeiro commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/150#discussion_r96227005\n  \n    --- Diff: src/java/main/org/apache/zookeeper/client/StaticHostProvider.java ---\n    @@ -87,15 +73,69 @@ public StaticHostProvider(Collection<InetSocketAddress> serverAddresses)\n             Collections.shuffle(this.serverAddresses);\n         }\n     \n    +    /**\n    +     * In Java 7, we have a method getHostString, but earlier versions do not support it.\n    +     * This method is to provide a replacement for InetSocketAddress.getHostString().\n    +     *\n    +     * It evaluates to a hostname if one is available and otherwise it returns the\n    +     * string representation of the IP address.\n    +     *\n    +     * @param addr\n    +     * @return Hostname string of address parameter\n    +     */\n    +    private String getHostString(InetSocketAddress addr) {\n    +        String hostString;\n    +        InetAddress ia = addr.getAddress();\n    +\n    +        if (ia != null) {\n    +            // If the string starts with '/', then it has no hostname\n    +            // and we want to avoid the reverse lookup, so we return\n    +            // the string representation of the address.\n    +            if (ia.toString().startsWith(\"/\")) {\n    +                hostString = ia.getHostAddress();\n    +            } else {\n    +                hostString = addr.getHostName();\n    +            }\n    +        } else {\n    +            // According to the Java 6 documentation, if the hostname is\n    +            // unresolved, then the string before the colon is the hostname.\n    +            String addrString = addr.toString();\n    +            hostString = addrString.substring(0, addrString.lastIndexOf(':'));\n    +        }\n    +\n    +        return hostString;\n    +    }\n    +\n         public int size() {\n             return serverAddresses.size();\n         }\n     \n         public InetSocketAddress next(long spinDelay) {\n    -        ++currentIndex;\n    -        if (currentIndex == serverAddresses.size()) {\n    -            currentIndex = 0;\n    +        // Handle possible connection error by re-resolving hostname if possible\n    +        if (!connectedSinceNext) {\n    +            InetSocketAddress curAddr = serverAddresses.get(currentIndex);\n    +            if (!curAddr.getHostString().equals(curAddr.getAddress().getHostAddress())) {\n    +                try {\n    +                    int thePort = curAddr.getPort();\n    +                    InetAddress resolvedAddresses[] = InetAddress.getAllByName(getHostString(curAddr));\n    +                    if (resolvedAddresses.length == 1) {\n    +                        serverAddresses.set(currentIndex, new InetSocketAddress(resolvedAddresses[0], thePort));\n    +                    } else {\n    +                        serverAddresses.remove(currentIndex);\n    +                        for (InetAddress resolvedAddress : resolvedAddresses) {\n    +                            InetSocketAddress newAddr = new InetSocketAddress(resolvedAddress, thePort);\n    +                            if (!serverAddresses.contains(newAddr)) {\n    +                                serverAddresses.add(newAddr);\n    +                            }\n    +                        }\n    +                    }\n    +                } catch (UnknownHostException e) {\n    +                    LOG.warn(\"Cannot re-resolve server: \" + curAddr + \" UnknownHostException: \" + e);\n    --- End diff --\n    \n    +1\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-01-16T13:18:27.401+0000","updated":"2017-01-16T13:18:27.401+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/15826190","id":"15826190","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user fpj commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/150#discussion_r96431605\n  \n    --- Diff: src/java/main/org/apache/zookeeper/client/StaticHostProvider.java ---\n    @@ -87,12 +73,69 @@ public StaticHostProvider(Collection<InetSocketAddress> serverAddresses)\n             Collections.shuffle(this.serverAddresses);\n         }\n     \n    +    /**\n    +     * In Java 7, we have a method getHostString, but earlier versions do not support it.\n    +     * This method is to provide a replacement for InetSocketAddress.getHostString().\n    +     *\n    +     * It evaluates to a hostname if one is available and otherwise it returns the\n    --- End diff --\n    \n    I've added a phrase to the return tag.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-01-17T15:12:06.342+0000","updated":"2017-01-17T15:12:06.342+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/15826196","id":"15826196","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user fpj commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/150#discussion_r96433850\n  \n    --- Diff: src/java/main/org/apache/zookeeper/client/StaticHostProvider.java ---\n    @@ -87,15 +73,69 @@ public StaticHostProvider(Collection<InetSocketAddress> serverAddresses)\n             Collections.shuffle(this.serverAddresses);\n         }\n     \n    +    /**\n    +     * In Java 7, we have a method getHostString, but earlier versions do not support it.\n    +     * This method is to provide a replacement for InetSocketAddress.getHostString().\n    +     *\n    +     * It evaluates to a hostname if one is available and otherwise it returns the\n    +     * string representation of the IP address.\n    +     *\n    +     * @param addr\n    +     * @return Hostname string of address parameter\n    +     */\n    +    private String getHostString(InetSocketAddress addr) {\n    +        String hostString;\n    +        InetAddress ia = addr.getAddress();\n    +\n    +        if (ia != null) {\n    +            // If the string starts with '/', then it has no hostname\n    +            // and we want to avoid the reverse lookup, so we return\n    +            // the string representation of the address.\n    +            if (ia.toString().startsWith(\"/\")) {\n    +                hostString = ia.getHostAddress();\n    +            } else {\n    +                hostString = addr.getHostName();\n    +            }\n    +        } else {\n    +            // According to the Java 6 documentation, if the hostname is\n    +            // unresolved, then the string before the colon is the hostname.\n    +            String addrString = addr.toString();\n    +            hostString = addrString.substring(0, addrString.lastIndexOf(':'));\n    +        }\n    +\n    +        return hostString;\n    +    }\n    +\n         public int size() {\n             return serverAddresses.size();\n         }\n     \n         public InetSocketAddress next(long spinDelay) {\n    -        ++currentIndex;\n    -        if (currentIndex == serverAddresses.size()) {\n    -            currentIndex = 0;\n    +        // Handle possible connection error by re-resolving hostname if possible\n    +        if (!connectedSinceNext) {\n    +            InetSocketAddress curAddr = serverAddresses.get(currentIndex);\n    +            if (!curAddr.getHostString().equals(curAddr.getAddress().getHostAddress())) {\n    +                try {\n    +                    int thePort = curAddr.getPort();\n    +                    InetAddress resolvedAddresses[] = InetAddress.getAllByName(getHostString(curAddr));\n    +                    if (resolvedAddresses.length == 1) {\n    +                        serverAddresses.set(currentIndex, new InetSocketAddress(resolvedAddresses[0], thePort));\n    +                    } else {\n    +                        serverAddresses.remove(currentIndex);\n    +                        for (InetAddress resolvedAddress : resolvedAddresses) {\n    +                            InetSocketAddress newAddr = new InetSocketAddress(resolvedAddress, thePort);\n    +                            if (!serverAddresses.contains(newAddr)) {\n    +                                serverAddresses.add(newAddr);\n    +                            }\n    +                        }\n    +                    }\n    +                } catch (UnknownHostException e) {\n    +                    LOG.warn(\"Cannot re-resolve server: \" + curAddr + \" UnknownHostException: \" + e);\n    --- End diff --\n    \n    I don't think I can do both, see the API docs of slf4j:\n    \n    https://www.slf4j.org/api/org/slf4j/Logger.html\n    \n    In the case you are, tell me which one is your favorite. I'd say the curly braces.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-01-17T15:21:27.632+0000","updated":"2017-01-17T15:21:27.632+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/15826277","id":"15826277","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user fpj commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/150#discussion_r96439377\n  \n    --- Diff: src/java/main/org/apache/zookeeper/client/StaticHostProvider.java ---\n    @@ -87,15 +73,69 @@ public StaticHostProvider(Collection<InetSocketAddress> serverAddresses)\n             Collections.shuffle(this.serverAddresses);\n         }\n     \n    +    /**\n    +     * In Java 7, we have a method getHostString, but earlier versions do not support it.\n    +     * This method is to provide a replacement for InetSocketAddress.getHostString().\n    +     *\n    +     * It evaluates to a hostname if one is available and otherwise it returns the\n    +     * string representation of the IP address.\n    +     *\n    +     * @param addr\n    +     * @return Hostname string of address parameter\n    +     */\n    +    private String getHostString(InetSocketAddress addr) {\n    --- End diff --\n    \n    We can do it, but I'm not super convinced we should because we are essentially using a method with undocumented API. Perhaps it does the same as the one in Java 7, with the difference that it is public, but I'm worried that there could be some correctness issue involved. Do you know more about it?\n    \n    In any case, I'm going to push the changes so that we see how it looks like.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-01-17T15:45:28.063+0000","updated":"2017-01-17T15:45:28.063+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/15826295","id":"15826295","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user fpj commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/150#discussion_r96442215\n  \n    --- Diff: src/java/main/org/apache/zookeeper/client/StaticHostProvider.java ---\n    @@ -87,15 +73,69 @@ public StaticHostProvider(Collection<InetSocketAddress> serverAddresses)\n             Collections.shuffle(this.serverAddresses);\n         }\n     \n    +    /**\n    +     * In Java 7, we have a method getHostString, but earlier versions do not support it.\n    +     * This method is to provide a replacement for InetSocketAddress.getHostString().\n    +     *\n    +     * It evaluates to a hostname if one is available and otherwise it returns the\n    +     * string representation of the IP address.\n    +     *\n    +     * @param addr\n    +     * @return Hostname string of address parameter\n    +     */\n    +    private String getHostString(InetSocketAddress addr) {\n    +        String hostString;\n    +        InetAddress ia = addr.getAddress();\n    +\n    +        if (ia != null) {\n    +            // If the string starts with '/', then it has no hostname\n    +            // and we want to avoid the reverse lookup, so we return\n    +            // the string representation of the address.\n    +            if (ia.toString().startsWith(\"/\")) {\n    +                hostString = ia.getHostAddress();\n    +            } else {\n    +                hostString = addr.getHostName();\n    +            }\n    +        } else {\n    +            // According to the Java 6 documentation, if the hostname is\n    +            // unresolved, then the string before the colon is the hostname.\n    +            String addrString = addr.toString();\n    +            hostString = addrString.substring(0, addrString.lastIndexOf(':'));\n    +        }\n    +\n    +        return hostString;\n    +    }\n    +\n         public int size() {\n             return serverAddresses.size();\n         }\n     \n         public InetSocketAddress next(long spinDelay) {\n    -        ++currentIndex;\n    -        if (currentIndex == serverAddresses.size()) {\n    -            currentIndex = 0;\n    +        // Handle possible connection error by re-resolving hostname if possible\n    +        if (!connectedSinceNext) {\n    +            InetSocketAddress curAddr = serverAddresses.get(currentIndex);\n    +            if (!curAddr.getHostString().equals(curAddr.getAddress().getHostAddress())) {\n    +                try {\n    +                    int thePort = curAddr.getPort();\n    +                    InetAddress resolvedAddresses[] = InetAddress.getAllByName(getHostString(curAddr));\n    +                    if (resolvedAddresses.length == 1) {\n    +                        serverAddresses.set(currentIndex, new InetSocketAddress(resolvedAddresses[0], thePort));\n    +                    } else {\n    +                        serverAddresses.remove(currentIndex);\n    +                        for (InetAddress resolvedAddress : resolvedAddresses) {\n    +                            InetSocketAddress newAddr = new InetSocketAddress(resolvedAddress, thePort);\n    +                            if (!serverAddresses.contains(newAddr)) {\n    +                                serverAddresses.add(newAddr);\n    +                            }\n    +                        }\n    +                    }\n    +                } catch (UnknownHostException e) {\n    +                    LOG.warn(\"Cannot re-resolve server: \" + curAddr + \" UnknownHostException: \" + e);\n    --- End diff --\n    \n    If the `StaticHostProvider` constructor didn't throw an `UnknownHostException`, then I'd think that all names and addresses we have are good. I'm not sure what could cause an `UnknownHostException` in `next()` other than some transient error. If that's right, then I'm not sure we should be adding or removing anything.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-01-17T15:57:01.621+0000","updated":"2017-01-17T15:57:01.621+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/15826359","id":"15826359","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user rakeshadr commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/150#discussion_r96453176\n  \n    --- Diff: src/java/main/org/apache/zookeeper/client/StaticHostProvider.java ---\n    @@ -87,15 +73,69 @@ public StaticHostProvider(Collection<InetSocketAddress> serverAddresses)\n             Collections.shuffle(this.serverAddresses);\n         }\n     \n    +    /**\n    +     * In Java 7, we have a method getHostString, but earlier versions do not support it.\n    +     * This method is to provide a replacement for InetSocketAddress.getHostString().\n    +     *\n    +     * It evaluates to a hostname if one is available and otherwise it returns the\n    +     * string representation of the IP address.\n    +     *\n    +     * @param addr\n    +     * @return Hostname string of address parameter\n    +     */\n    +    private String getHostString(InetSocketAddress addr) {\n    +        String hostString;\n    +        InetAddress ia = addr.getAddress();\n    +\n    +        if (ia != null) {\n    +            // If the string starts with '/', then it has no hostname\n    +            // and we want to avoid the reverse lookup, so we return\n    +            // the string representation of the address.\n    +            if (ia.toString().startsWith(\"/\")) {\n    +                hostString = ia.getHostAddress();\n    +            } else {\n    +                hostString = addr.getHostName();\n    +            }\n    +        } else {\n    +            // According to the Java 6 documentation, if the hostname is\n    +            // unresolved, then the string before the colon is the hostname.\n    +            String addrString = addr.toString();\n    +            hostString = addrString.substring(0, addrString.lastIndexOf(':'));\n    +        }\n    +\n    +        return hostString;\n    +    }\n    +\n         public int size() {\n             return serverAddresses.size();\n         }\n     \n         public InetSocketAddress next(long spinDelay) {\n    -        ++currentIndex;\n    -        if (currentIndex == serverAddresses.size()) {\n    -            currentIndex = 0;\n    +        // Handle possible connection error by re-resolving hostname if possible\n    +        if (!connectedSinceNext) {\n    +            InetSocketAddress curAddr = serverAddresses.get(currentIndex);\n    +            if (!curAddr.getHostString().equals(curAddr.getAddress().getHostAddress())) {\n    +                try {\n    +                    int thePort = curAddr.getPort();\n    +                    InetAddress resolvedAddresses[] = InetAddress.getAllByName(getHostString(curAddr));\n    +                    if (resolvedAddresses.length == 1) {\n    +                        serverAddresses.set(currentIndex, new InetSocketAddress(resolvedAddresses[0], thePort));\n    +                    } else {\n    +                        serverAddresses.remove(currentIndex);\n    +                        for (InetAddress resolvedAddress : resolvedAddresses) {\n    +                            InetSocketAddress newAddr = new InetSocketAddress(resolvedAddress, thePort);\n    +                            if (!serverAddresses.contains(newAddr)) {\n    +                                serverAddresses.add(newAddr);\n    +                            }\n    +                        }\n    +                    }\n    +                } catch (UnknownHostException e) {\n    +                    LOG.warn(\"Cannot re-resolve server: \" + curAddr + \" UnknownHostException: \" + e);\n    --- End diff --\n    \n    https://www.slf4j.org/api/org/slf4j/Logger.html#warn(org.slf4j.Marker, java.lang.String, java.lang.Throwable)\n    \n    Can we do like,\n    LOG.warn(\"Cannot re-resolve server: {}, exception: \", curAddr, e);\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-01-17T16:39:37.622+0000","updated":"2017-01-17T16:39:37.622+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/15826844","id":"15826844","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user afine commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/150#discussion_r96509432\n  \n    --- Diff: src/java/main/org/apache/zookeeper/client/StaticHostProvider.java ---\n    @@ -87,15 +73,69 @@ public StaticHostProvider(Collection<InetSocketAddress> serverAddresses)\n             Collections.shuffle(this.serverAddresses);\n         }\n     \n    +    /**\n    +     * In Java 7, we have a method getHostString, but earlier versions do not support it.\n    +     * This method is to provide a replacement for InetSocketAddress.getHostString().\n    +     *\n    +     * It evaluates to a hostname if one is available and otherwise it returns the\n    +     * string representation of the IP address.\n    +     *\n    +     * @param addr\n    +     * @return Hostname string of address parameter\n    +     */\n    +    private String getHostString(InetSocketAddress addr) {\n    +        String hostString;\n    +        InetAddress ia = addr.getAddress();\n    +\n    +        if (ia != null) {\n    --- End diff --\n    \n    instead of `null` checking `ia` couldn't we use `addr.isUnresolved()`?\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-01-17T21:22:07.743+0000","updated":"2017-01-17T21:22:07.743+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/15826845","id":"15826845","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user afine commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/150#discussion_r96512625\n  \n    --- Diff: src/java/main/org/apache/zookeeper/client/StaticHostProvider.java ---\n    @@ -87,15 +73,69 @@ public StaticHostProvider(Collection<InetSocketAddress> serverAddresses)\n             Collections.shuffle(this.serverAddresses);\n         }\n     \n    +    /**\n    +     * In Java 7, we have a method getHostString, but earlier versions do not support it.\n    +     * This method is to provide a replacement for InetSocketAddress.getHostString().\n    +     *\n    +     * It evaluates to a hostname if one is available and otherwise it returns the\n    +     * string representation of the IP address.\n    +     *\n    +     * @param addr\n    +     * @return Hostname string of address parameter\n    +     */\n    +    private String getHostString(InetSocketAddress addr) {\n    +        String hostString;\n    +        InetAddress ia = addr.getAddress();\n    +\n    +        if (ia != null) {\n    +            // If the string starts with '/', then it has no hostname\n    +            // and we want to avoid the reverse lookup, so we return\n    +            // the string representation of the address.\n    +            if (ia.toString().startsWith(\"/\")) {\n    +                hostString = ia.getHostAddress();\n    +            } else {\n    +                hostString = addr.getHostName();\n    +            }\n    +        } else {\n    +            // According to the Java 6 documentation, if the hostname is\n    +            // unresolved, then the string before the colon is the hostname.\n    +            String addrString = addr.toString();\n    +            hostString = addrString.substring(0, addrString.lastIndexOf(':'));\n    +        }\n    +\n    +        return hostString;\n    +    }\n    +\n         public int size() {\n             return serverAddresses.size();\n         }\n     \n         public InetSocketAddress next(long spinDelay) {\n    -        ++currentIndex;\n    -        if (currentIndex == serverAddresses.size()) {\n    -            currentIndex = 0;\n    +        // Handle possible connection error by re-resolving hostname if possible\n    +        if (!connectedSinceNext) {\n    +            InetSocketAddress curAddr = serverAddresses.get(currentIndex);\n    +            if (!curAddr.getHostString().equals(curAddr.getAddress().getHostAddress())) {\n    +                try {\n    +                    int thePort = curAddr.getPort();\n    +                    InetAddress resolvedAddresses[] = InetAddress.getAllByName(getHostString(curAddr));\n    +                    if (resolvedAddresses.length == 1) {\n    +                        serverAddresses.set(currentIndex, new InetSocketAddress(resolvedAddresses[0], thePort));\n    +                    } else {\n    +                        serverAddresses.remove(currentIndex);\n    --- End diff --\n    \n    In the case where during the construction of the `StaticHostProvider` we add a host H1 which resolves to addresses A,B,C. Then at some point in the future A goes offline and the DNS system has changed H1 to resolve to hosts D,E,F. With the current code wouldn't `serverAddresses` now contain hosts B,C,D,E,F instead of only hosts D,E,F?\n    \n    Is this something even worth fixing?\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-01-17T21:22:07.745+0000","updated":"2017-01-17T21:22:07.745+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/15826846","id":"15826846","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user afine commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/150#discussion_r96509843\n  \n    --- Diff: src/java/main/org/apache/zookeeper/client/StaticHostProvider.java ---\n    @@ -87,12 +73,69 @@ public StaticHostProvider(Collection<InetSocketAddress> serverAddresses)\n             Collections.shuffle(this.serverAddresses);\n         }\n     \n    +    /**\n    +     * In Java 7, we have a method getHostString, but earlier versions do not support it.\n    +     * This method is to provide a replacement for InetSocketAddress.getHostString().\n    +     *\n    +     * It evaluates to a hostname if one is available and otherwise it returns the\n    --- End diff --\n    \n    nit: Can we swap the first two lines of this comment, as the reader does not know what class getHostString belongs to until he/she reaches line 2?\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-01-17T21:22:07.746+0000","updated":"2017-01-17T21:22:07.746+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/15827498","id":"15827498","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user hanm commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/150#discussion_r96574584\n  \n    --- Diff: src/java/main/org/apache/zookeeper/client/StaticHostProvider.java ---\n    @@ -87,15 +73,69 @@ public StaticHostProvider(Collection<InetSocketAddress> serverAddresses)\n             Collections.shuffle(this.serverAddresses);\n         }\n     \n    +    /**\n    +     * In Java 7, we have a method getHostString, but earlier versions do not support it.\n    +     * This method is to provide a replacement for InetSocketAddress.getHostString().\n    +     *\n    +     * It evaluates to a hostname if one is available and otherwise it returns the\n    +     * string representation of the IP address.\n    +     *\n    +     * @param addr\n    +     * @return Hostname string of address parameter\n    +     */\n    +    private String getHostString(InetSocketAddress addr) {\n    --- End diff --\n    \n    OK, it is a reasonable concern of using package private API via reflection and I honestly don't know the implementation difference between Java 6 / 7 regarding getHostString - let's stick to explicit implementation in this file.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-01-18T06:34:59.233+0000","updated":"2017-01-18T06:34:59.233+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/15827499","id":"15827499","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user hanm commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/150#discussion_r96574629\n  \n    --- Diff: src/java/main/org/apache/zookeeper/client/StaticHostProvider.java ---\n    @@ -87,15 +73,69 @@ public StaticHostProvider(Collection<InetSocketAddress> serverAddresses)\n             Collections.shuffle(this.serverAddresses);\n         }\n     \n    +    /**\n    +     * In Java 7, we have a method getHostString, but earlier versions do not support it.\n    +     * This method is to provide a replacement for InetSocketAddress.getHostString().\n    +     *\n    +     * It evaluates to a hostname if one is available and otherwise it returns the\n    +     * string representation of the IP address.\n    +     *\n    +     * @param addr\n    +     * @return Hostname string of address parameter\n    +     */\n    +    private String getHostString(InetSocketAddress addr) {\n    +        String hostString;\n    +        InetAddress ia = addr.getAddress();\n    +\n    +        if (ia != null) {\n    +            // If the string starts with '/', then it has no hostname\n    +            // and we want to avoid the reverse lookup, so we return\n    +            // the string representation of the address.\n    +            if (ia.toString().startsWith(\"/\")) {\n    +                hostString = ia.getHostAddress();\n    +            } else {\n    +                hostString = addr.getHostName();\n    +            }\n    +        } else {\n    +            // According to the Java 6 documentation, if the hostname is\n    +            // unresolved, then the string before the colon is the hostname.\n    +            String addrString = addr.toString();\n    +            hostString = addrString.substring(0, addrString.lastIndexOf(':'));\n    +        }\n    +\n    +        return hostString;\n    +    }\n    +\n         public int size() {\n             return serverAddresses.size();\n         }\n     \n         public InetSocketAddress next(long spinDelay) {\n    -        ++currentIndex;\n    -        if (currentIndex == serverAddresses.size()) {\n    -            currentIndex = 0;\n    +        // Handle possible connection error by re-resolving hostname if possible\n    +        if (!connectedSinceNext) {\n    +            InetSocketAddress curAddr = serverAddresses.get(currentIndex);\n    +            if (!curAddr.getHostString().equals(curAddr.getAddress().getHostAddress())) {\n    +                try {\n    +                    int thePort = curAddr.getPort();\n    +                    InetAddress resolvedAddresses[] = InetAddress.getAllByName(getHostString(curAddr));\n    +                    if (resolvedAddresses.length == 1) {\n    +                        serverAddresses.set(currentIndex, new InetSocketAddress(resolvedAddresses[0], thePort));\n    +                    } else {\n    +                        serverAddresses.remove(currentIndex);\n    +                        for (InetAddress resolvedAddress : resolvedAddresses) {\n    +                            InetSocketAddress newAddr = new InetSocketAddress(resolvedAddress, thePort);\n    +                            if (!serverAddresses.contains(newAddr)) {\n    +                                serverAddresses.add(newAddr);\n    +                            }\n    +                        }\n    +                    }\n    +                } catch (UnknownHostException e) {\n    +                    LOG.warn(\"Cannot re-resolve server: \" + curAddr + \" UnknownHostException: \" + e);\n    --- End diff --\n    \n    OK.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-01-18T06:35:36.635+0000","updated":"2017-01-18T06:35:36.635+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/15828145","id":"15828145","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user fpj commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/150#discussion_r96642443\n  \n    --- Diff: src/java/main/org/apache/zookeeper/client/StaticHostProvider.java ---\n    @@ -57,26 +62,20 @@\n         public StaticHostProvider(Collection<InetSocketAddress> serverAddresses)\n                 throws UnknownHostException {\n             for (InetSocketAddress address : serverAddresses) {\n    -            InetAddress ia = address.getAddress();\n    -            InetAddress resolvedAddresses[] = InetAddress.getAllByName((ia!=null) ? ia.getHostAddress():\n    -                address.getHostName());\n    +            InetAddress resolvedAddresses[];\n    +            try {\n    --- End diff --\n    \n    @hanm have a look at this, please.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-01-18T14:15:37.948+0000","updated":"2017-01-18T14:15:37.948+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/15828458","id":"15828458","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user eribeiro commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/150#discussion_r96694626\n  \n    --- Diff: src/java/main/org/apache/zookeeper/client/StaticHostProvider.java ---\n    @@ -87,15 +73,69 @@ public StaticHostProvider(Collection<InetSocketAddress> serverAddresses)\n             Collections.shuffle(this.serverAddresses);\n         }\n     \n    +    /**\n    +     * In Java 7, we have a method getHostString, but earlier versions do not support it.\n    +     * This method is to provide a replacement for InetSocketAddress.getHostString().\n    +     *\n    +     * It evaluates to a hostname if one is available and otherwise it returns the\n    +     * string representation of the IP address.\n    +     *\n    +     * @param addr\n    +     * @return Hostname string of address parameter\n    +     */\n    +    private String getHostString(InetSocketAddress addr) {\n    +        String hostString;\n    +        InetAddress ia = addr.getAddress();\n    +\n    +        if (ia != null) {\n    --- End diff --\n    \n    Yup, we could: http://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/6-b27/java/net/InetSocketAddress.java#258\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-01-18T17:53:48.892+0000","updated":"2017-01-18T17:53:48.892+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/15828471","id":"15828471","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user eribeiro commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/150#discussion_r96696184\n  \n    --- Diff: src/java/main/org/apache/zookeeper/client/StaticHostProvider.java ---\n    @@ -87,15 +86,69 @@ public StaticHostProvider(Collection<InetSocketAddress> serverAddresses)\n             Collections.shuffle(this.serverAddresses);\n         }\n     \n    +    /**\n    +     * In Java 7, we have a method getHostString, but earlier versions do not support it.\n    +     * This method is to provide a replacement for InetSocketAddress.getHostString().\n    +     *\n    +     * It evaluates to a hostname if one is available and otherwise it returns the\n    +     * string representation of the IP address.\n    +     *\n    +     * @param addr\n    +     * @return Hostname string of address parameter\n    +     */\n    +    private String getHostString(InetSocketAddress addr) {\n    +        String hostString;\n    +        InetAddress ia = addr.getAddress();\n    +\n    +        if (ia != null) {\n    +            // If the string starts with '/', then it has no hostname\n    +            // and we want to avoid the reverse lookup, so we return\n    +            // the string representation of the address.\n    +            if (ia.toString().startsWith(\"/\")) {\n    +                hostString = ia.getHostAddress();\n    +            } else {\n    +                hostString = addr.getHostName();\n    +            }\n    +        } else {\n    +            // According to the Java 6 documentation, if the hostname is\n    +            // unresolved, then the string before the colon is the hostname.\n    +            String addrString = addr.toString();\n    +            hostString = addrString.substring(0, addrString.lastIndexOf(':'));\n    +        }\n    +\n    +        return hostString;\n    +    }\n    +\n         public int size() {\n             return serverAddresses.size();\n         }\n     \n         public InetSocketAddress next(long spinDelay) {\n    -        ++currentIndex;\n    -        if (currentIndex == serverAddresses.size()) {\n    -            currentIndex = 0;\n    +        // Handle possible connection error by re-resolving hostname if possible\n    +        if (!connectedSinceNext) {\n    +            InetSocketAddress curAddr = serverAddresses.get(currentIndex);\n    +            if (!curAddr.getHostString().equals(curAddr.getAddress().getHostAddress())) {\n    +                try {\n    +                    int thePort = curAddr.getPort();\n    +                    InetAddress resolvedAddresses[] = InetAddress.getAllByName(getHostString(curAddr));\n    +                    if (resolvedAddresses.length == 1) {\n    +                        serverAddresses.set(currentIndex, new InetSocketAddress(resolvedAddresses[0], thePort));\n    +                    } else {\n    +                        serverAddresses.remove(currentIndex);\n    +                        for (InetAddress resolvedAddress : resolvedAddresses) {\n    +                            InetSocketAddress newAddr = new InetSocketAddress(resolvedAddress, thePort);\n    +                            if (!serverAddresses.contains(newAddr)) {\n    +                                serverAddresses.add(newAddr);\n    +                            }\n    +                        }\n    --- End diff --\n    \n    As we are adding new addresses into `serverAddresses`, would it make sense to re-shuffle the list?\n    \n    ```\n    Collections.shuffle(this.serverAddresses);\n    ```\n    As we did in constructor???\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-01-18T18:01:23.267+0000","updated":"2017-01-18T18:01:23.267+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/15828497","id":"15828497","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user hanm commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/150#discussion_r96699234\n  \n    --- Diff: src/java/main/org/apache/zookeeper/client/StaticHostProvider.java ---\n    @@ -57,26 +62,20 @@\n         public StaticHostProvider(Collection<InetSocketAddress> serverAddresses)\n                 throws UnknownHostException {\n             for (InetSocketAddress address : serverAddresses) {\n    -            InetAddress ia = address.getAddress();\n    -            InetAddress resolvedAddresses[] = InetAddress.getAllByName((ia!=null) ? ia.getHostAddress():\n    -                address.getHostName());\n    +            InetAddress resolvedAddresses[];\n    +            try {\n    --- End diff --\n    \n    It might be better to wrap the reflection in an abstraction in a static block in this file so inspection of the class will be done only once, save some runtime inspection cycles.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-01-18T18:16:42.801+0000","updated":"2017-01-18T18:16:42.801+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/15828501","id":"15828501","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user hanm commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/150#discussion_r96699514\n  \n    --- Diff: src/java/main/org/apache/zookeeper/client/StaticHostProvider.java ---\n    @@ -57,26 +62,20 @@\n         public StaticHostProvider(Collection<InetSocketAddress> serverAddresses)\n                 throws UnknownHostException {\n             for (InetSocketAddress address : serverAddresses) {\n    -            InetAddress ia = address.getAddress();\n    -            InetAddress resolvedAddresses[] = InetAddress.getAllByName((ia!=null) ? ia.getHostAddress():\n    -                address.getHostName());\n    +            InetAddress resolvedAddresses[];\n    +            try {\n    +                Method m = InetSocketAddress.class.getDeclaredMethod(\"getHostString\");\n    +                m.setAccessible(true);\n    +                resolvedAddresses = InetAddress.getAllByName((String) m.invoke(address));\n    +            } catch (IllegalAccessException e) {\n    --- End diff --\n    \n    Maybe we can catch multiple exceptions in a single shot - such as `catch(IllegalAccessException | NoSuchMethodException | InvocationTargetException e)` to save some typings, given the exception handling logic is exact the same.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-01-18T18:18:00.800+0000","updated":"2017-01-18T18:18:00.800+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/15828504","id":"15828504","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user hanm commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/150#discussion_r96699622\n  \n    --- Diff: src/java/main/org/apache/zookeeper/client/StaticHostProvider.java ---\n    @@ -57,26 +62,20 @@\n         public StaticHostProvider(Collection<InetSocketAddress> serverAddresses)\n                 throws UnknownHostException {\n             for (InetSocketAddress address : serverAddresses) {\n    -            InetAddress ia = address.getAddress();\n    -            InetAddress resolvedAddresses[] = InetAddress.getAllByName((ia!=null) ? ia.getHostAddress():\n    -                address.getHostName());\n    +            InetAddress resolvedAddresses[];\n    +            try {\n    +                Method m = InetSocketAddress.class.getDeclaredMethod(\"getHostString\");\n    +                m.setAccessible(true);\n    +                resolvedAddresses = InetAddress.getAllByName((String) m.invoke(address));\n    +            } catch (IllegalAccessException e) {\n    +                resolvedAddresses = InetAddress.getAllByName(getHostString(address));\n    +            } catch (NoSuchMethodException e) {\n    +                resolvedAddresses = InetAddress.getAllByName(getHostString(address));\n    +            } catch (InvocationTargetException e) {\n    +                resolvedAddresses = InetAddress.getAllByName(getHostString(address));\n    +            }\n    --- End diff --\n    \n    The signature of getDeclaredMethod said it also could throw SecurityException, not sure if we should catch it or not here.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-01-18T18:18:34.115+0000","updated":"2017-01-18T18:18:34.115+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/15828516","id":"15828516","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user eribeiro commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/150#discussion_r96701932\n  \n    --- Diff: src/java/main/org/apache/zookeeper/client/StaticHostProvider.java ---\n    @@ -57,26 +62,20 @@\n         public StaticHostProvider(Collection<InetSocketAddress> serverAddresses)\n                 throws UnknownHostException {\n             for (InetSocketAddress address : serverAddresses) {\n    -            InetAddress ia = address.getAddress();\n    -            InetAddress resolvedAddresses[] = InetAddress.getAllByName((ia!=null) ? ia.getHostAddress():\n    -                address.getHostName());\n    +            InetAddress resolvedAddresses[];\n    +            try {\n    +                Method m = InetSocketAddress.class.getDeclaredMethod(\"getHostString\");\n    +                m.setAccessible(true);\n    +                resolvedAddresses = InetAddress.getAllByName((String) m.invoke(address));\n    +            } catch (IllegalAccessException e) {\n    --- End diff --\n    \n    Nope 'cause JDK6 here, no?\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-01-18T18:28:18.126+0000","updated":"2017-01-18T18:28:18.126+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/15828521","id":"15828521","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user hanm commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/150#discussion_r96702291\n  \n    --- Diff: src/java/main/org/apache/zookeeper/client/StaticHostProvider.java ---\n    @@ -57,26 +62,20 @@\n         public StaticHostProvider(Collection<InetSocketAddress> serverAddresses)\n                 throws UnknownHostException {\n             for (InetSocketAddress address : serverAddresses) {\n    -            InetAddress ia = address.getAddress();\n    -            InetAddress resolvedAddresses[] = InetAddress.getAllByName((ia!=null) ? ia.getHostAddress():\n    -                address.getHostName());\n    +            InetAddress resolvedAddresses[];\n    +            try {\n    +                Method m = InetSocketAddress.class.getDeclaredMethod(\"getHostString\");\n    +                m.setAccessible(true);\n    +                resolvedAddresses = InetAddress.getAllByName((String) m.invoke(address));\n    +            } catch (IllegalAccessException e) {\n    --- End diff --\n    \n    Right, I forgot the context, thanks for pointing this out @eribeiro \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-01-18T18:30:02.739+0000","updated":"2017-01-18T18:30:02.739+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/15835321","id":"15835321","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user fpj commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/150#discussion_r97435427\n  \n    --- Diff: src/java/main/org/apache/zookeeper/client/StaticHostProvider.java ---\n    @@ -57,26 +62,20 @@\n         public StaticHostProvider(Collection<InetSocketAddress> serverAddresses)\n                 throws UnknownHostException {\n             for (InetSocketAddress address : serverAddresses) {\n    -            InetAddress ia = address.getAddress();\n    -            InetAddress resolvedAddresses[] = InetAddress.getAllByName((ia!=null) ? ia.getHostAddress():\n    -                address.getHostName());\n    +            InetAddress resolvedAddresses[];\n    +            try {\n    --- End diff --\n    \n    I'm still not sure we should do this. I'm concerned about making that method visible while the original intention was not to expose it. Are you aware of any other project that has done this for `getHostString`?\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-01-23T22:47:42.255+0000","updated":"2017-01-23T22:47:42.255+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/15835325","id":"15835325","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user fpj commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/150#discussion_r97436195\n  \n    --- Diff: src/java/main/org/apache/zookeeper/client/StaticHostProvider.java ---\n    @@ -57,26 +62,20 @@\n         public StaticHostProvider(Collection<InetSocketAddress> serverAddresses)\n                 throws UnknownHostException {\n             for (InetSocketAddress address : serverAddresses) {\n    -            InetAddress ia = address.getAddress();\n    -            InetAddress resolvedAddresses[] = InetAddress.getAllByName((ia!=null) ? ia.getHostAddress():\n    -                address.getHostName());\n    +            InetAddress resolvedAddresses[];\n    +            try {\n    +                Method m = InetSocketAddress.class.getDeclaredMethod(\"getHostString\");\n    +                m.setAccessible(true);\n    +                resolvedAddresses = InetAddress.getAllByName((String) m.invoke(address));\n    +            } catch (IllegalAccessException e) {\n    +                resolvedAddresses = InetAddress.getAllByName(getHostString(address));\n    +            } catch (NoSuchMethodException e) {\n    +                resolvedAddresses = InetAddress.getAllByName(getHostString(address));\n    +            } catch (InvocationTargetException e) {\n    +                resolvedAddresses = InetAddress.getAllByName(getHostString(address));\n    +            }\n    --- End diff --\n    \n    That's possibly another issue with this way of exposing `getHostString, the presence of a security manager could prevent us from doing it as expected.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-01-23T22:51:47.034+0000","updated":"2017-01-23T22:51:47.034+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/15835327","id":"15835327","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user fpj commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/150#discussion_r97436370\n  \n    --- Diff: src/java/main/org/apache/zookeeper/client/StaticHostProvider.java ---\n    @@ -87,15 +73,69 @@ public StaticHostProvider(Collection<InetSocketAddress> serverAddresses)\n             Collections.shuffle(this.serverAddresses);\n         }\n     \n    +    /**\n    +     * In Java 7, we have a method getHostString, but earlier versions do not support it.\n    +     * This method is to provide a replacement for InetSocketAddress.getHostString().\n    +     *\n    +     * It evaluates to a hostname if one is available and otherwise it returns the\n    +     * string representation of the IP address.\n    +     *\n    +     * @param addr\n    +     * @return Hostname string of address parameter\n    +     */\n    +    private String getHostString(InetSocketAddress addr) {\n    --- End diff --\n    \n    OK.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-01-23T22:52:44.675+0000","updated":"2017-01-23T22:52:44.675+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/15835335","id":"15835335","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user fpj commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/150#discussion_r97437693\n  \n    --- Diff: src/java/main/org/apache/zookeeper/client/StaticHostProvider.java ---\n    @@ -87,15 +86,69 @@ public StaticHostProvider(Collection<InetSocketAddress> serverAddresses)\n             Collections.shuffle(this.serverAddresses);\n         }\n     \n    +    /**\n    +     * In Java 7, we have a method getHostString, but earlier versions do not support it.\n    +     * This method is to provide a replacement for InetSocketAddress.getHostString().\n    +     *\n    +     * It evaluates to a hostname if one is available and otherwise it returns the\n    +     * string representation of the IP address.\n    +     *\n    +     * @param addr\n    +     * @return Hostname string of address parameter\n    +     */\n    +    private String getHostString(InetSocketAddress addr) {\n    +        String hostString;\n    +        InetAddress ia = addr.getAddress();\n    +\n    +        if (ia != null) {\n    +            // If the string starts with '/', then it has no hostname\n    +            // and we want to avoid the reverse lookup, so we return\n    +            // the string representation of the address.\n    +            if (ia.toString().startsWith(\"/\")) {\n    +                hostString = ia.getHostAddress();\n    +            } else {\n    +                hostString = addr.getHostName();\n    +            }\n    +        } else {\n    +            // According to the Java 6 documentation, if the hostname is\n    +            // unresolved, then the string before the colon is the hostname.\n    +            String addrString = addr.toString();\n    +            hostString = addrString.substring(0, addrString.lastIndexOf(':'));\n    +        }\n    +\n    +        return hostString;\n    +    }\n    +\n         public int size() {\n             return serverAddresses.size();\n         }\n     \n         public InetSocketAddress next(long spinDelay) {\n    -        ++currentIndex;\n    -        if (currentIndex == serverAddresses.size()) {\n    -            currentIndex = 0;\n    +        // Handle possible connection error by re-resolving hostname if possible\n    +        if (!connectedSinceNext) {\n    +            InetSocketAddress curAddr = serverAddresses.get(currentIndex);\n    +            if (!curAddr.getHostString().equals(curAddr.getAddress().getHostAddress())) {\n    +                try {\n    +                    int thePort = curAddr.getPort();\n    +                    InetAddress resolvedAddresses[] = InetAddress.getAllByName(getHostString(curAddr));\n    +                    if (resolvedAddresses.length == 1) {\n    +                        serverAddresses.set(currentIndex, new InetSocketAddress(resolvedAddresses[0], thePort));\n    +                    } else {\n    +                        serverAddresses.remove(currentIndex);\n    +                        for (InetAddress resolvedAddress : resolvedAddresses) {\n    +                            InetSocketAddress newAddr = new InetSocketAddress(resolvedAddress, thePort);\n    +                            if (!serverAddresses.contains(newAddr)) {\n    +                                serverAddresses.add(newAddr);\n    +                            }\n    +                        }\n    --- End diff --\n    \n    We shuffle initially to avoid having all clients connecting to the same server in the case they are all given the same connect string. If the array of addresses has already been shuffled (in the constructor), then the order followed in this method will be the shuffled one. I don't see a strong reason for re-shuffling, as we are not bringing it back to the original order by resolving again.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-01-23T23:00:21.611+0000","updated":"2017-01-23T23:00:21.611+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/15835402","id":"15835402","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user fpj commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/150#discussion_r97446760\n  \n    --- Diff: src/java/main/org/apache/zookeeper/client/StaticHostProvider.java ---\n    @@ -87,15 +73,69 @@ public StaticHostProvider(Collection<InetSocketAddress> serverAddresses)\n             Collections.shuffle(this.serverAddresses);\n         }\n     \n    +    /**\n    +     * In Java 7, we have a method getHostString, but earlier versions do not support it.\n    +     * This method is to provide a replacement for InetSocketAddress.getHostString().\n    +     *\n    +     * It evaluates to a hostname if one is available and otherwise it returns the\n    +     * string representation of the IP address.\n    +     *\n    +     * @param addr\n    +     * @return Hostname string of address parameter\n    +     */\n    +    private String getHostString(InetSocketAddress addr) {\n    +        String hostString;\n    +        InetAddress ia = addr.getAddress();\n    +\n    +        if (ia != null) {\n    +            // If the string starts with '/', then it has no hostname\n    +            // and we want to avoid the reverse lookup, so we return\n    +            // the string representation of the address.\n    +            if (ia.toString().startsWith(\"/\")) {\n    +                hostString = ia.getHostAddress();\n    +            } else {\n    +                hostString = addr.getHostName();\n    +            }\n    +        } else {\n    +            // According to the Java 6 documentation, if the hostname is\n    +            // unresolved, then the string before the colon is the hostname.\n    +            String addrString = addr.toString();\n    +            hostString = addrString.substring(0, addrString.lastIndexOf(':'));\n    +        }\n    +\n    +        return hostString;\n    +    }\n    +\n         public int size() {\n             return serverAddresses.size();\n         }\n     \n         public InetSocketAddress next(long spinDelay) {\n    -        ++currentIndex;\n    -        if (currentIndex == serverAddresses.size()) {\n    -            currentIndex = 0;\n    +        // Handle possible connection error by re-resolving hostname if possible\n    +        if (!connectedSinceNext) {\n    +            InetSocketAddress curAddr = serverAddresses.get(currentIndex);\n    +            if (!curAddr.getHostString().equals(curAddr.getAddress().getHostAddress())) {\n    +                try {\n    +                    int thePort = curAddr.getPort();\n    +                    InetAddress resolvedAddresses[] = InetAddress.getAllByName(getHostString(curAddr));\n    +                    if (resolvedAddresses.length == 1) {\n    +                        serverAddresses.set(currentIndex, new InetSocketAddress(resolvedAddresses[0], thePort));\n    +                    } else {\n    +                        serverAddresses.remove(currentIndex);\n    --- End diff --\n    \n    @afine check the new changes to see if they address this and make sense.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-01-24T00:03:51.196+0000","updated":"2017-01-24T00:03:51.196+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/15839042","id":"15839042","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user hanm commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/150#discussion_r97921838\n  \n    --- Diff: src/java/main/org/apache/zookeeper/client/StaticHostProvider.java ---\n    @@ -57,26 +62,20 @@\n         public StaticHostProvider(Collection<InetSocketAddress> serverAddresses)\n                 throws UnknownHostException {\n             for (InetSocketAddress address : serverAddresses) {\n    -            InetAddress ia = address.getAddress();\n    -            InetAddress resolvedAddresses[] = InetAddress.getAllByName((ia!=null) ? ia.getHostAddress():\n    -                address.getHostName());\n    +            InetAddress resolvedAddresses[];\n    +            try {\n    --- End diff --\n    \n    @fpj Let's not do this (expose package private JDK methods) given the concerns you raised earlier (as I also commented previously). \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-01-26T02:11:57.854+0000","updated":"2017-01-26T02:11:57.854+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/15843303","id":"15843303","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user edwardoliveira commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/150#discussion_r98263409\n  \n    --- Diff: src/java/main/org/apache/zookeeper/client/StaticHostProvider.java ---\n    @@ -87,15 +75,104 @@ public StaticHostProvider(Collection<InetSocketAddress> serverAddresses)\n             Collections.shuffle(this.serverAddresses);\n         }\n     \n    +    /**\n    +     * Evaluate to a hostname if one is available and otherwise it returns the\n    +     * string representation of the IP address.\n    +     *\n    +     * In Java 7, we have a method getHostString, but earlier versions do not support it.\n    +     * This method is to provide a replacement for InetSocketAddress.getHostString().\n    +     *\n    +     * @param addr\n    +     * @return Hostname string of address parameter\n    +     */\n    +    private String getHostString(InetSocketAddress addr) {\n    +        String hostString = \"\";\n    +\n    +        if(addr == null) {\n    +            return hostString;\n    +        }\n    +        if (!addr.isUnresolved()) {\n    +            InetAddress ia = addr.getAddress();\n    +\n    +            // If the string starts with '/', then it has no hostname\n    +            // and we want to avoid the reverse lookup, so we return\n    +            // the string representation of the address.\n    +            if (ia.toString().startsWith(\"/\")) {\n    +                hostString = ia.getHostAddress();\n    +            } else {\n    +                hostString = addr.getHostName();\n    +            }\n    +        } else {\n    +            // According to the Java 6 documentation, if the hostname is\n    +            // unresolved, then the string before the colon is the hostname.\n    +            String addrString = addr.toString();\n    +            hostString = addrString.substring(0, addrString.lastIndexOf(':'));\n    +        }\n    +\n    +        return hostString;\n    +    }\n    +\n         public int size() {\n             return serverAddresses.size();\n         }\n     \n    +    // Counts the number of addresses added and removed during\n    +    // the last call to next. Used mainly for test purposes.\n    +    // See StasticHostProviderTest.\n    +    private int nextAdded = 0;\n    +    private int nextRemoved = 0;\n    +\n    +    public int getNextAdded() {\n    +        return nextAdded;\n    +    }\n    +\n    +    public int getNextRemoved() {\n    +        return nextRemoved;\n    +    }\n    +\n         public InetSocketAddress next(long spinDelay) {\n    -        ++currentIndex;\n    -        if (currentIndex == serverAddresses.size()) {\n    -            currentIndex = 0;\n    +        // Handle possible connection error by re-resolving hostname if possible\n    +        if (!connectedSinceNext) {\n    +            InetSocketAddress curAddr = serverAddresses.get(currentIndex);\n    +            if (!getHostString(curAddr).equals(curAddr.getAddress().getHostAddress())) {\n    +                LOG.info(\"Resolving again hostname: {}\", getHostString(curAddr));\n    +                try {\n    +                    int thePort = curAddr.getPort();\n    +                    InetAddress resolvedAddresses[] = InetAddress.getAllByName(getHostString(curAddr));\n    +                    nextAdded = 0;\n    +                    nextRemoved = 0;\n    +                    if (resolvedAddresses.length == 1) {\n    +                        serverAddresses.set(currentIndex, new InetSocketAddress(resolvedAddresses[0], thePort));\n    +                        nextAdded = nextRemoved = 1;\n    +                        LOG.debug(\"Newly resolved address: {}\", resolvedAddresses[0]);\n    +                    } else {\n    +                        int i = 0;\n    +                        while(i < serverAddresses.size()) {\n    +                            if(getHostString(serverAddresses.get(i)) == getHostString(curAddr)) {\n    --- End diff --\n    \n    Ops, are we comparing strings with `==` ?! ;)\n    \n    Nit: space between `if` and `(`.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-01-27T18:40:11.212+0000","updated":"2017-01-27T18:40:11.212+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/15843305","id":"15843305","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user eribeiro commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/150#discussion_r98263678\n  \n    --- Diff: src/java/main/org/apache/zookeeper/client/StaticHostProvider.java ---\n    @@ -87,15 +75,104 @@ public StaticHostProvider(Collection<InetSocketAddress> serverAddresses)\n             Collections.shuffle(this.serverAddresses);\n         }\n     \n    +    /**\n    +     * Evaluate to a hostname if one is available and otherwise it returns the\n    +     * string representation of the IP address.\n    +     *\n    +     * In Java 7, we have a method getHostString, but earlier versions do not support it.\n    +     * This method is to provide a replacement for InetSocketAddress.getHostString().\n    +     *\n    +     * @param addr\n    +     * @return Hostname string of address parameter\n    +     */\n    +    private String getHostString(InetSocketAddress addr) {\n    +        String hostString = \"\";\n    +\n    +        if(addr == null) {\n    +            return hostString;\n    +        }\n    +        if (!addr.isUnresolved()) {\n    +            InetAddress ia = addr.getAddress();\n    +\n    +            // If the string starts with '/', then it has no hostname\n    +            // and we want to avoid the reverse lookup, so we return\n    +            // the string representation of the address.\n    +            if (ia.toString().startsWith(\"/\")) {\n    +                hostString = ia.getHostAddress();\n    +            } else {\n    +                hostString = addr.getHostName();\n    +            }\n    +        } else {\n    +            // According to the Java 6 documentation, if the hostname is\n    +            // unresolved, then the string before the colon is the hostname.\n    +            String addrString = addr.toString();\n    +            hostString = addrString.substring(0, addrString.lastIndexOf(':'));\n    +        }\n    +\n    +        return hostString;\n    +    }\n    +\n         public int size() {\n             return serverAddresses.size();\n         }\n     \n    +    // Counts the number of addresses added and removed during\n    +    // the last call to next. Used mainly for test purposes.\n    +    // See StasticHostProviderTest.\n    +    private int nextAdded = 0;\n    +    private int nextRemoved = 0;\n    +\n    +    public int getNextAdded() {\n    +        return nextAdded;\n    +    }\n    +\n    +    public int getNextRemoved() {\n    +        return nextRemoved;\n    +    }\n    +\n         public InetSocketAddress next(long spinDelay) {\n    -        ++currentIndex;\n    -        if (currentIndex == serverAddresses.size()) {\n    -            currentIndex = 0;\n    +        // Handle possible connection error by re-resolving hostname if possible\n    +        if (!connectedSinceNext) {\n    +            InetSocketAddress curAddr = serverAddresses.get(currentIndex);\n    +            if (!getHostString(curAddr).equals(curAddr.getAddress().getHostAddress())) {\n    +                LOG.info(\"Resolving again hostname: {}\", getHostString(curAddr));\n    +                try {\n    +                    int thePort = curAddr.getPort();\n    +                    InetAddress resolvedAddresses[] = InetAddress.getAllByName(getHostString(curAddr));\n    +                    nextAdded = 0;\n    +                    nextRemoved = 0;\n    +                    if (resolvedAddresses.length == 1) {\n    +                        serverAddresses.set(currentIndex, new InetSocketAddress(resolvedAddresses[0], thePort));\n    +                        nextAdded = nextRemoved = 1;\n    +                        LOG.debug(\"Newly resolved address: {}\", resolvedAddresses[0]);\n    +                    } else {\n    +                        int i = 0;\n    +                        while(i < serverAddresses.size()) {\n    +                            if(getHostString(serverAddresses.get(i)) == getHostString(curAddr)) {\n    --- End diff --\n    \n    Ops, are we comparing strings with `==` ?! ;)\n    \n    Nit: space between `if` and (`.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-01-27T18:41:19.192+0000","updated":"2017-01-27T18:41:19.192+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/15843306","id":"15843306","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user eribeiro commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/150#discussion_r98263780\n  \n    --- Diff: src/java/main/org/apache/zookeeper/client/StaticHostProvider.java ---\n    @@ -87,15 +75,104 @@ public StaticHostProvider(Collection<InetSocketAddress> serverAddresses)\n             Collections.shuffle(this.serverAddresses);\n         }\n     \n    +    /**\n    +     * Evaluate to a hostname if one is available and otherwise it returns the\n    +     * string representation of the IP address.\n    +     *\n    +     * In Java 7, we have a method getHostString, but earlier versions do not support it.\n    +     * This method is to provide a replacement for InetSocketAddress.getHostString().\n    +     *\n    +     * @param addr\n    +     * @return Hostname string of address parameter\n    +     */\n    +    private String getHostString(InetSocketAddress addr) {\n    +        String hostString = \"\";\n    +\n    +        if(addr == null) {\n    --- End diff --\n    \n    nit: space between `if` and `(`. \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-01-27T18:41:46.743+0000","updated":"2017-01-27T18:41:46.743+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/15843315","id":"15843315","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user eribeiro commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/150#discussion_r98265031\n  \n    --- Diff: src/java/main/org/apache/zookeeper/client/StaticHostProvider.java ---\n    @@ -87,15 +75,104 @@ public StaticHostProvider(Collection<InetSocketAddress> serverAddresses)\n             Collections.shuffle(this.serverAddresses);\n         }\n     \n    +    /**\n    +     * Evaluate to a hostname if one is available and otherwise it returns the\n    +     * string representation of the IP address.\n    +     *\n    +     * In Java 7, we have a method getHostString, but earlier versions do not support it.\n    +     * This method is to provide a replacement for InetSocketAddress.getHostString().\n    +     *\n    +     * @param addr\n    +     * @return Hostname string of address parameter\n    +     */\n    +    private String getHostString(InetSocketAddress addr) {\n    +        String hostString = \"\";\n    +\n    +        if(addr == null) {\n    +            return hostString;\n    +        }\n    +        if (!addr.isUnresolved()) {\n    +            InetAddress ia = addr.getAddress();\n    +\n    +            // If the string starts with '/', then it has no hostname\n    +            // and we want to avoid the reverse lookup, so we return\n    +            // the string representation of the address.\n    +            if (ia.toString().startsWith(\"/\")) {\n    +                hostString = ia.getHostAddress();\n    +            } else {\n    +                hostString = addr.getHostName();\n    +            }\n    +        } else {\n    +            // According to the Java 6 documentation, if the hostname is\n    +            // unresolved, then the string before the colon is the hostname.\n    +            String addrString = addr.toString();\n    +            hostString = addrString.substring(0, addrString.lastIndexOf(':'));\n    +        }\n    +\n    +        return hostString;\n    +    }\n    +\n         public int size() {\n             return serverAddresses.size();\n         }\n     \n    +    // Counts the number of addresses added and removed during\n    +    // the last call to next. Used mainly for test purposes.\n    +    // See StasticHostProviderTest.\n    +    private int nextAdded = 0;\n    +    private int nextRemoved = 0;\n    +\n    +    public int getNextAdded() {\n    --- End diff --\n    \n    okay, just me being pedant here, but it's a sincere question: would it be *worth* to move this class to `src/java/test/org/apache/zookeeper/client/StaticHostProvider.java` and then remove the `public` modifier so that `getNextAdded()` and `getNextRemoved()` can be package protected as they are used for tests?\n    \n    At first, I think it  doesn't see worth this kind of change, but I am uncomfortable with leaving those methods as public if they are used for tests by now. :thinking: \n    \n    Wdyt?\n\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-01-27T18:48:00.042+0000","updated":"2017-01-27T18:48:00.042+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/15843410","id":"15843410","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user eribeiro commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/150#discussion_r98280911\n  \n    --- Diff: src/java/main/org/apache/zookeeper/client/StaticHostProvider.java ---\n    @@ -87,15 +75,104 @@ public StaticHostProvider(Collection<InetSocketAddress> serverAddresses)\n             Collections.shuffle(this.serverAddresses);\n         }\n     \n    +    /**\n    +     * Evaluate to a hostname if one is available and otherwise it returns the\n    +     * string representation of the IP address.\n    +     *\n    +     * In Java 7, we have a method getHostString, but earlier versions do not support it.\n    +     * This method is to provide a replacement for InetSocketAddress.getHostString().\n    +     *\n    +     * @param addr\n    +     * @return Hostname string of address parameter\n    +     */\n    +    private String getHostString(InetSocketAddress addr) {\n    +        String hostString = \"\";\n    +\n    +        if(addr == null) {\n    +            return hostString;\n    +        }\n    +        if (!addr.isUnresolved()) {\n    +            InetAddress ia = addr.getAddress();\n    +\n    +            // If the string starts with '/', then it has no hostname\n    +            // and we want to avoid the reverse lookup, so we return\n    +            // the string representation of the address.\n    +            if (ia.toString().startsWith(\"/\")) {\n    +                hostString = ia.getHostAddress();\n    +            } else {\n    +                hostString = addr.getHostName();\n    +            }\n    +        } else {\n    +            // According to the Java 6 documentation, if the hostname is\n    +            // unresolved, then the string before the colon is the hostname.\n    +            String addrString = addr.toString();\n    +            hostString = addrString.substring(0, addrString.lastIndexOf(':'));\n    +        }\n    +\n    +        return hostString;\n    +    }\n    +\n         public int size() {\n             return serverAddresses.size();\n         }\n     \n    +    // Counts the number of addresses added and removed during\n    +    // the last call to next. Used mainly for test purposes.\n    +    // See StasticHostProviderTest.\n    +    private int nextAdded = 0;\n    +    private int nextRemoved = 0;\n    +\n    +    public int getNextAdded() {\n    +        return nextAdded;\n    +    }\n    +\n    +    public int getNextRemoved() {\n    +        return nextRemoved;\n    +    }\n    +\n         public InetSocketAddress next(long spinDelay) {\n    -        ++currentIndex;\n    -        if (currentIndex == serverAddresses.size()) {\n    -            currentIndex = 0;\n    +        // Handle possible connection error by re-resolving hostname if possible\n    +        if (!connectedSinceNext) {\n    +            InetSocketAddress curAddr = serverAddresses.get(currentIndex);\n    +            if (!getHostString(curAddr).equals(curAddr.getAddress().getHostAddress())) {\n    +                LOG.info(\"Resolving again hostname: {}\", getHostString(curAddr));\n    +                try {\n    +                    int thePort = curAddr.getPort();\n    +                    InetAddress resolvedAddresses[] = InetAddress.getAllByName(getHostString(curAddr));\n    +                    nextAdded = 0;\n    +                    nextRemoved = 0;\n    +                    if (resolvedAddresses.length == 1) {\n    +                        serverAddresses.set(currentIndex, new InetSocketAddress(resolvedAddresses[0], thePort));\n    +                        nextAdded = nextRemoved = 1;\n    +                        LOG.debug(\"Newly resolved address: {}\", resolvedAddresses[0]);\n    +                    } else {\n    +                        int i = 0;\n    +                        while(i < serverAddresses.size()) {\n    +                            if(getHostString(serverAddresses.get(i)) == getHostString(curAddr)) {\n    --- End diff --\n    \n    Why call `getHostString(curAddr)`  (here in a loop, at line 137, 138, 141) if the `currAddr` doesn't change? Better call once between line 136 and 137 and assign to a variable, no? \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-01-27T20:09:38.458+0000","updated":"2017-01-27T20:09:38.458+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/15843418","id":"15843418","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user eribeiro commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/150#discussion_r98281621\n  \n    --- Diff: src/java/main/org/apache/zookeeper/client/StaticHostProvider.java ---\n    @@ -87,15 +75,104 @@ public StaticHostProvider(Collection<InetSocketAddress> serverAddresses)\n             Collections.shuffle(this.serverAddresses);\n         }\n     \n    +    /**\n    +     * Evaluate to a hostname if one is available and otherwise it returns the\n    +     * string representation of the IP address.\n    +     *\n    +     * In Java 7, we have a method getHostString, but earlier versions do not support it.\n    +     * This method is to provide a replacement for InetSocketAddress.getHostString().\n    +     *\n    +     * @param addr\n    +     * @return Hostname string of address parameter\n    +     */\n    +    private String getHostString(InetSocketAddress addr) {\n    +        String hostString = \"\";\n    +\n    +        if(addr == null) {\n    +            return hostString;\n    +        }\n    +        if (!addr.isUnresolved()) {\n    +            InetAddress ia = addr.getAddress();\n    +\n    +            // If the string starts with '/', then it has no hostname\n    +            // and we want to avoid the reverse lookup, so we return\n    +            // the string representation of the address.\n    +            if (ia.toString().startsWith(\"/\")) {\n    +                hostString = ia.getHostAddress();\n    +            } else {\n    +                hostString = addr.getHostName();\n    +            }\n    +        } else {\n    +            // According to the Java 6 documentation, if the hostname is\n    +            // unresolved, then the string before the colon is the hostname.\n    +            String addrString = addr.toString();\n    +            hostString = addrString.substring(0, addrString.lastIndexOf(':'));\n    +        }\n    +\n    +        return hostString;\n    +    }\n    +\n         public int size() {\n             return serverAddresses.size();\n         }\n     \n    +    // Counts the number of addresses added and removed during\n    +    // the last call to next. Used mainly for test purposes.\n    +    // See StasticHostProviderTest.\n    +    private int nextAdded = 0;\n    +    private int nextRemoved = 0;\n    +\n    +    public int getNextAdded() {\n    +        return nextAdded;\n    +    }\n    +\n    +    public int getNextRemoved() {\n    +        return nextRemoved;\n    +    }\n    +\n         public InetSocketAddress next(long spinDelay) {\n    -        ++currentIndex;\n    -        if (currentIndex == serverAddresses.size()) {\n    -            currentIndex = 0;\n    +        // Handle possible connection error by re-resolving hostname if possible\n    +        if (!connectedSinceNext) {\n    +            InetSocketAddress curAddr = serverAddresses.get(currentIndex);\n    +            if (!getHostString(curAddr).equals(curAddr.getAddress().getHostAddress())) {\n    +                LOG.info(\"Resolving again hostname: {}\", getHostString(curAddr));\n    +                try {\n    +                    int thePort = curAddr.getPort();\n    +                    InetAddress resolvedAddresses[] = InetAddress.getAllByName(getHostString(curAddr));\n    +                    nextAdded = 0;\n    +                    nextRemoved = 0;\n    +                    if (resolvedAddresses.length == 1) {\n    +                        serverAddresses.set(currentIndex, new InetSocketAddress(resolvedAddresses[0], thePort));\n    +                        nextAdded = nextRemoved = 1;\n    +                        LOG.debug(\"Newly resolved address: {}\", resolvedAddresses[0]);\n    +                    } else {\n    +                        int i = 0;\n    --- End diff --\n    \n    silly refactoring:\n    \n    ```\n    List<String> toRemove = new ArrayList<>(serverAddresses.size());\n    for (String addr : serverAddresses) {\n        if (getHostString(addr).equals(hostString) {\n            toRemove.add(addr);\n        }\n    }\n    LOG.debug(\"Removing addresses: {}\", toRemove);\n    nextRemoved += toRemove.size();\n    serverAddresses.removeAll(toRemove);\n    ```\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-01-27T20:13:52.211+0000","updated":"2017-01-27T20:13:52.211+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/15843435","id":"15843435","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user eribeiro commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/150#discussion_r98282550\n  \n    --- Diff: src/java/main/org/apache/zookeeper/client/StaticHostProvider.java ---\n    @@ -87,15 +75,104 @@ public StaticHostProvider(Collection<InetSocketAddress> serverAddresses)\n             Collections.shuffle(this.serverAddresses);\n         }\n     \n    +    /**\n    +     * Evaluate to a hostname if one is available and otherwise it returns the\n    +     * string representation of the IP address.\n    +     *\n    +     * In Java 7, we have a method getHostString, but earlier versions do not support it.\n    +     * This method is to provide a replacement for InetSocketAddress.getHostString().\n    +     *\n    +     * @param addr\n    +     * @return Hostname string of address parameter\n    +     */\n    +    private String getHostString(InetSocketAddress addr) {\n    +        String hostString = \"\";\n    +\n    +        if(addr == null) {\n    +            return hostString;\n    +        }\n    +        if (!addr.isUnresolved()) {\n    +            InetAddress ia = addr.getAddress();\n    +\n    +            // If the string starts with '/', then it has no hostname\n    +            // and we want to avoid the reverse lookup, so we return\n    +            // the string representation of the address.\n    +            if (ia.toString().startsWith(\"/\")) {\n    +                hostString = ia.getHostAddress();\n    +            } else {\n    +                hostString = addr.getHostName();\n    +            }\n    +        } else {\n    +            // According to the Java 6 documentation, if the hostname is\n    +            // unresolved, then the string before the colon is the hostname.\n    +            String addrString = addr.toString();\n    +            hostString = addrString.substring(0, addrString.lastIndexOf(':'));\n    +        }\n    +\n    +        return hostString;\n    +    }\n    +\n         public int size() {\n             return serverAddresses.size();\n         }\n     \n    +    // Counts the number of addresses added and removed during\n    +    // the last call to next. Used mainly for test purposes.\n    +    // See StasticHostProviderTest.\n    +    private int nextAdded = 0;\n    +    private int nextRemoved = 0;\n    +\n    +    public int getNextAdded() {\n    +        return nextAdded;\n    +    }\n    +\n    +    public int getNextRemoved() {\n    +        return nextRemoved;\n    +    }\n    +\n         public InetSocketAddress next(long spinDelay) {\n    -        ++currentIndex;\n    -        if (currentIndex == serverAddresses.size()) {\n    -            currentIndex = 0;\n    +        // Handle possible connection error by re-resolving hostname if possible\n    +        if (!connectedSinceNext) {\n    +            InetSocketAddress curAddr = serverAddresses.get(currentIndex);\n    +            if (!getHostString(curAddr).equals(curAddr.getAddress().getHostAddress())) {\n    +                LOG.info(\"Resolving again hostname: {}\", getHostString(curAddr));\n    +                try {\n    +                    int thePort = curAddr.getPort();\n    +                    InetAddress resolvedAddresses[] = InetAddress.getAllByName(getHostString(curAddr));\n    +                    nextAdded = 0;\n    +                    nextRemoved = 0;\n    +                    if (resolvedAddresses.length == 1) {\n    +                        serverAddresses.set(currentIndex, new InetSocketAddress(resolvedAddresses[0], thePort));\n    +                        nextAdded = nextRemoved = 1;\n    +                        LOG.debug(\"Newly resolved address: {}\", resolvedAddresses[0]);\n    +                    } else {\n    +                        int i = 0;\n    --- End diff --\n    \n    ```\n    Line 136: String hostString = getHostString(currAddr);\n    ```\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-01-27T20:19:14.008+0000","updated":"2017-01-27T20:19:14.008+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/15844859","id":"15844859","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user fpj commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/150#discussion_r98385538\n  \n    --- Diff: src/java/main/org/apache/zookeeper/client/StaticHostProvider.java ---\n    @@ -87,15 +75,104 @@ public StaticHostProvider(Collection<InetSocketAddress> serverAddresses)\n             Collections.shuffle(this.serverAddresses);\n         }\n     \n    +    /**\n    +     * Evaluate to a hostname if one is available and otherwise it returns the\n    +     * string representation of the IP address.\n    +     *\n    +     * In Java 7, we have a method getHostString, but earlier versions do not support it.\n    +     * This method is to provide a replacement for InetSocketAddress.getHostString().\n    +     *\n    +     * @param addr\n    +     * @return Hostname string of address parameter\n    +     */\n    +    private String getHostString(InetSocketAddress addr) {\n    +        String hostString = \"\";\n    +\n    +        if(addr == null) {\n    +            return hostString;\n    +        }\n    +        if (!addr.isUnresolved()) {\n    +            InetAddress ia = addr.getAddress();\n    +\n    +            // If the string starts with '/', then it has no hostname\n    +            // and we want to avoid the reverse lookup, so we return\n    +            // the string representation of the address.\n    +            if (ia.toString().startsWith(\"/\")) {\n    +                hostString = ia.getHostAddress();\n    +            } else {\n    +                hostString = addr.getHostName();\n    +            }\n    +        } else {\n    +            // According to the Java 6 documentation, if the hostname is\n    +            // unresolved, then the string before the colon is the hostname.\n    +            String addrString = addr.toString();\n    +            hostString = addrString.substring(0, addrString.lastIndexOf(':'));\n    +        }\n    +\n    +        return hostString;\n    +    }\n    +\n         public int size() {\n             return serverAddresses.size();\n         }\n     \n    +    // Counts the number of addresses added and removed during\n    +    // the last call to next. Used mainly for test purposes.\n    +    // See StasticHostProviderTest.\n    +    private int nextAdded = 0;\n    +    private int nextRemoved = 0;\n    +\n    +    public int getNextAdded() {\n    +        return nextAdded;\n    +    }\n    +\n    +    public int getNextRemoved() {\n    +        return nextRemoved;\n    +    }\n    +\n         public InetSocketAddress next(long spinDelay) {\n    -        ++currentIndex;\n    -        if (currentIndex == serverAddresses.size()) {\n    -            currentIndex = 0;\n    +        // Handle possible connection error by re-resolving hostname if possible\n    +        if (!connectedSinceNext) {\n    +            InetSocketAddress curAddr = serverAddresses.get(currentIndex);\n    +            if (!getHostString(curAddr).equals(curAddr.getAddress().getHostAddress())) {\n    +                LOG.info(\"Resolving again hostname: {}\", getHostString(curAddr));\n    +                try {\n    +                    int thePort = curAddr.getPort();\n    +                    InetAddress resolvedAddresses[] = InetAddress.getAllByName(getHostString(curAddr));\n    +                    nextAdded = 0;\n    +                    nextRemoved = 0;\n    +                    if (resolvedAddresses.length == 1) {\n    +                        serverAddresses.set(currentIndex, new InetSocketAddress(resolvedAddresses[0], thePort));\n    +                        nextAdded = nextRemoved = 1;\n    +                        LOG.debug(\"Newly resolved address: {}\", resolvedAddresses[0]);\n    +                    } else {\n    +                        int i = 0;\n    --- End diff --\n    \n    Although this is more Java-like, it requires the creation of an additional ArrayList, which is less efficient than creating a int counter. Unless there is something wrong with the current code, I'd rather leave as is.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-01-30T06:42:01.887+0000","updated":"2017-01-30T06:42:01.887+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/15844918","id":"15844918","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user eribeiro commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/150#discussion_r98392957\n  \n    --- Diff: src/java/main/org/apache/zookeeper/client/StaticHostProvider.java ---\n    @@ -87,15 +75,104 @@ public StaticHostProvider(Collection<InetSocketAddress> serverAddresses)\n             Collections.shuffle(this.serverAddresses);\n         }\n     \n    +    /**\n    +     * Evaluate to a hostname if one is available and otherwise it returns the\n    +     * string representation of the IP address.\n    +     *\n    +     * In Java 7, we have a method getHostString, but earlier versions do not support it.\n    +     * This method is to provide a replacement for InetSocketAddress.getHostString().\n    +     *\n    +     * @param addr\n    +     * @return Hostname string of address parameter\n    +     */\n    +    private String getHostString(InetSocketAddress addr) {\n    +        String hostString = \"\";\n    +\n    +        if(addr == null) {\n    +            return hostString;\n    +        }\n    +        if (!addr.isUnresolved()) {\n    +            InetAddress ia = addr.getAddress();\n    +\n    +            // If the string starts with '/', then it has no hostname\n    +            // and we want to avoid the reverse lookup, so we return\n    +            // the string representation of the address.\n    +            if (ia.toString().startsWith(\"/\")) {\n    +                hostString = ia.getHostAddress();\n    +            } else {\n    +                hostString = addr.getHostName();\n    +            }\n    +        } else {\n    +            // According to the Java 6 documentation, if the hostname is\n    +            // unresolved, then the string before the colon is the hostname.\n    +            String addrString = addr.toString();\n    +            hostString = addrString.substring(0, addrString.lastIndexOf(':'));\n    +        }\n    +\n    +        return hostString;\n    +    }\n    +\n         public int size() {\n             return serverAddresses.size();\n         }\n     \n    +    // Counts the number of addresses added and removed during\n    +    // the last call to next. Used mainly for test purposes.\n    +    // See StasticHostProviderTest.\n    +    private int nextAdded = 0;\n    +    private int nextRemoved = 0;\n    +\n    +    public int getNextAdded() {\n    +        return nextAdded;\n    +    }\n    +\n    +    public int getNextRemoved() {\n    +        return nextRemoved;\n    +    }\n    +\n         public InetSocketAddress next(long spinDelay) {\n    -        ++currentIndex;\n    -        if (currentIndex == serverAddresses.size()) {\n    -            currentIndex = 0;\n    +        // Handle possible connection error by re-resolving hostname if possible\n    +        if (!connectedSinceNext) {\n    +            InetSocketAddress curAddr = serverAddresses.get(currentIndex);\n    +            if (!getHostString(curAddr).equals(curAddr.getAddress().getHostAddress())) {\n    +                LOG.info(\"Resolving again hostname: {}\", getHostString(curAddr));\n    +                try {\n    +                    int thePort = curAddr.getPort();\n    +                    InetAddress resolvedAddresses[] = InetAddress.getAllByName(getHostString(curAddr));\n    +                    nextAdded = 0;\n    +                    nextRemoved = 0;\n    +                    if (resolvedAddresses.length == 1) {\n    +                        serverAddresses.set(currentIndex, new InetSocketAddress(resolvedAddresses[0], thePort));\n    +                        nextAdded = nextRemoved = 1;\n    +                        LOG.debug(\"Newly resolved address: {}\", resolvedAddresses[0]);\n    +                    } else {\n    +                        int i = 0;\n    --- End diff --\n    \n    You right. \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-01-30T08:15:05.721+0000","updated":"2017-01-30T08:15:05.721+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/15845099","id":"15845099","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user fpj commented on the issue:\n\n    https://github.com/apache/zookeeper/pull/150\n  \n    @hanm I believe we do have the same issue with the C client, I don't see it re-resolving addresses there, I need to have a closer look, though.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-01-30T12:11:10.270+0000","updated":"2017-01-30T12:11:10.270+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/15845434","id":"15845434","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user edwardoliveira commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/150#discussion_r98483994\n  \n    --- Diff: src/java/main/org/apache/zookeeper/client/StaticHostProvider.java ---\n    @@ -122,18 +122,19 @@ public int size() {\n         private int nextAdded = 0;\n         private int nextRemoved = 0;\n     \n    -    public int getNextAdded() {\n    +    int getNextAdded() {\n             return nextAdded;\n         }\n     \n    -    public int getNextRemoved() {\n    +    int getNextRemoved() {\n             return nextRemoved;\n         }\n     \n         public InetSocketAddress next(long spinDelay) {\n             // Handle possible connection error by re-resolving hostname if possible\n             if (!connectedSinceNext) {\n                 InetSocketAddress curAddr = serverAddresses.get(currentIndex);\n    +            String curHostString = getHostString(curAddr);\n                 if (!getHostString(curAddr).equals(curAddr.getAddress().getHostAddress())) {\n    --- End diff --\n    \n    @fpj Sorry for yet another comment, mate (my last one, I promise). I cited this previously but certainly got lost in my verbosite. \n    \n    * Replace `if (!getHostString(currAddr).equals(...)) {` by 'if (!curHostString.equals()` at Line 138;\n    \n    * Replace `getHostString(curAddr)` with `curHostString` at line 139;\n    \n    * Replace `getHostString(curAddr)` with `curHostString` at line 142;\n    \n    **+1. LGTM. Really great job!.**\n    \n    Best regards,\n\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-01-30T16:45:56.202+0000","updated":"2017-01-30T16:45:56.202+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/15845440","id":"15845440","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user eribeiro commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/150#discussion_r98484702\n  \n    --- Diff: src/java/main/org/apache/zookeeper/client/StaticHostProvider.java ---\n    @@ -122,18 +122,19 @@ public int size() {\n         private int nextAdded = 0;\n         private int nextRemoved = 0;\n     \n    -    public int getNextAdded() {\n    +    int getNextAdded() {\n             return nextAdded;\n         }\n     \n    -    public int getNextRemoved() {\n    +    int getNextRemoved() {\n             return nextRemoved;\n         }\n     \n         public InetSocketAddress next(long spinDelay) {\n             // Handle possible connection error by re-resolving hostname if possible\n             if (!connectedSinceNext) {\n                 InetSocketAddress curAddr = serverAddresses.get(currentIndex);\n    +            String curHostString = getHostString(curAddr);\n    --- End diff --\n    \n    \n    edwardoliveira just now\n    @fpj Sorry for yet another comment, mate (my last one, I promise). I cited this previously but certainly got lost in my verbosite.\n    \n    Replace if (!getHostString(currAddr).equals(...)) { by 'if (!curHostString.equals()` at Line 138;\n    \n    Replace getHostString(curAddr) with curHostString at line 139;\n    \n    Replace getHostString(curAddr) with curHostString at line 142;\n    \n    **IMHO, +1. Really great job!** :+1:\n    \n    Best regards,\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-01-30T16:48:48.996+0000","updated":"2017-01-30T16:48:48.996+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/15845952","id":"15845952","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user afine commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/150#discussion_r98543324\n  \n    --- Diff: src/java/main/org/apache/zookeeper/client/StaticHostProvider.java ---\n    @@ -87,15 +75,106 @@ public StaticHostProvider(Collection<InetSocketAddress> serverAddresses)\n             Collections.shuffle(this.serverAddresses);\n         }\n     \n    +    /**\n    +     * Evaluate to a hostname if one is available and otherwise it returns the\n    +     * string representation of the IP address.\n    +     *\n    +     * In Java 7, we have a method getHostString, but earlier versions do not support it.\n    +     * This method is to provide a replacement for InetSocketAddress.getHostString().\n    +     *\n    +     * @param addr\n    +     * @return Hostname string of address parameter\n    +     */\n    +    private String getHostString(InetSocketAddress addr) {\n    +        String hostString = \"\";\n    +\n    +        if(addr == null) {\n    +            return hostString;\n    +        }\n    +        if (!addr.isUnresolved()) {\n    +            InetAddress ia = addr.getAddress();\n    +\n    +            // If the string starts with '/', then it has no hostname\n    +            // and we want to avoid the reverse lookup, so we return\n    +            // the string representation of the address.\n    +            if (ia.toString().startsWith(\"/\")) {\n    +                hostString = ia.getHostAddress();\n    +            } else {\n    +                hostString = addr.getHostName();\n    +            }\n    +        } else {\n    +            // According to the Java 6 documentation, if the hostname is\n    +            // unresolved, then the string before the colon is the hostname.\n    +            String addrString = addr.toString();\n    +            hostString = addrString.substring(0, addrString.lastIndexOf(':'));\n    +        }\n    +\n    +        return hostString;\n    +    }\n    +\n         public int size() {\n             return serverAddresses.size();\n         }\n     \n    +    // Counts the number of addresses added and removed during\n    +    // the last call to next. Used mainly for test purposes.\n    +    // See StasticHostProviderTest.\n    +    private int nextAdded = 0;\n    +    private int nextRemoved = 0;\n    +\n    +    int getNextAdded() {\n    +        return nextAdded;\n    +    }\n    +\n    +    int getNextRemoved() {\n    +        return nextRemoved;\n    +    }\n    +\n         public InetSocketAddress next(long spinDelay) {\n    -        ++currentIndex;\n    -        if (currentIndex == serverAddresses.size()) {\n    -            currentIndex = 0;\n    +        // Handle possible connection error by re-resolving hostname if possible\n    +        if (!connectedSinceNext) {\n    +            InetSocketAddress curAddr = serverAddresses.get(currentIndex);\n    +            String curHostString = getHostString(curAddr);\n    +            if (!getHostString(curAddr).equals(curAddr.getAddress().getHostAddress())) {\n    +                LOG.info(\"Resolving again hostname: {}\", getHostString(curAddr));\n    +                try {\n    +                    int thePort = curAddr.getPort();\n    +                    InetAddress resolvedAddresses[] = InetAddress.getAllByName(getHostString(curAddr));\n    +                    nextAdded = 0;\n    +                    nextRemoved = 0;\n    +                    if (resolvedAddresses.length == 1) {\n    +                        serverAddresses.set(currentIndex, new InetSocketAddress(resolvedAddresses[0], thePort));\n    +                        nextAdded = nextRemoved = 1;\n    +                        LOG.debug(\"Newly resolved address: {}\", resolvedAddresses[0]);\n    +                    } else {\n    +                        int i = 0;\n    +                        while (i < serverAddresses.size()) {\n    +                            if (getHostString(serverAddresses.get(i)).equals(curHostString) &&\n    --- End diff --\n    \n    I think that this fixes the issue I described.\n    \n    nit: Just wondering if it would be easier to use a map from (hoststring,port) -> serverAddress to make things clearer/remove a loop?\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-01-30T21:20:35.560+0000","updated":"2017-01-30T21:20:35.560+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/15845953","id":"15845953","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user afine commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/150#discussion_r98535935\n  \n    --- Diff: src/java/main/org/apache/zookeeper/client/StaticHostProvider.java ---\n    @@ -87,15 +75,106 @@ public StaticHostProvider(Collection<InetSocketAddress> serverAddresses)\n             Collections.shuffle(this.serverAddresses);\n         }\n     \n    +    /**\n    +     * Evaluate to a hostname if one is available and otherwise it returns the\n    +     * string representation of the IP address.\n    +     *\n    +     * In Java 7, we have a method getHostString, but earlier versions do not support it.\n    +     * This method is to provide a replacement for InetSocketAddress.getHostString().\n    +     *\n    +     * @param addr\n    +     * @return Hostname string of address parameter\n    +     */\n    +    private String getHostString(InetSocketAddress addr) {\n    +        String hostString = \"\";\n    +\n    +        if(addr == null) {\n    +            return hostString;\n    +        }\n    +        if (!addr.isUnresolved()) {\n    +            InetAddress ia = addr.getAddress();\n    +\n    +            // If the string starts with '/', then it has no hostname\n    +            // and we want to avoid the reverse lookup, so we return\n    +            // the string representation of the address.\n    +            if (ia.toString().startsWith(\"/\")) {\n    +                hostString = ia.getHostAddress();\n    +            } else {\n    +                hostString = addr.getHostName();\n    +            }\n    +        } else {\n    +            // According to the Java 6 documentation, if the hostname is\n    +            // unresolved, then the string before the colon is the hostname.\n    +            String addrString = addr.toString();\n    +            hostString = addrString.substring(0, addrString.lastIndexOf(':'));\n    +        }\n    +\n    +        return hostString;\n    +    }\n    +\n         public int size() {\n             return serverAddresses.size();\n         }\n     \n    +    // Counts the number of addresses added and removed during\n    +    // the last call to next. Used mainly for test purposes.\n    +    // See StasticHostProviderTest.\n    +    private int nextAdded = 0;\n    +    private int nextRemoved = 0;\n    +\n    +    int getNextAdded() {\n    +        return nextAdded;\n    +    }\n    +\n    +    int getNextRemoved() {\n    +        return nextRemoved;\n    +    }\n    +\n         public InetSocketAddress next(long spinDelay) {\n    -        ++currentIndex;\n    -        if (currentIndex == serverAddresses.size()) {\n    -            currentIndex = 0;\n    +        // Handle possible connection error by re-resolving hostname if possible\n    +        if (!connectedSinceNext) {\n    +            InetSocketAddress curAddr = serverAddresses.get(currentIndex);\n    +            String curHostString = getHostString(curAddr);\n    +            if (!getHostString(curAddr).equals(curAddr.getAddress().getHostAddress())) {\n    --- End diff --\n    \n    nit: why not use curHostString instead of calling getHostString two more times?\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-01-30T21:20:35.566+0000","updated":"2017-01-30T21:20:35.566+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/15846006","id":"15846006","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user eribeiro commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/150#discussion_r98549400\n  \n    --- Diff: src/java/main/org/apache/zookeeper/client/StaticHostProvider.java ---\n    @@ -87,15 +75,106 @@ public StaticHostProvider(Collection<InetSocketAddress> serverAddresses)\n             Collections.shuffle(this.serverAddresses);\n         }\n     \n    +    /**\n    +     * Evaluate to a hostname if one is available and otherwise it returns the\n    +     * string representation of the IP address.\n    +     *\n    +     * In Java 7, we have a method getHostString, but earlier versions do not support it.\n    +     * This method is to provide a replacement for InetSocketAddress.getHostString().\n    +     *\n    +     * @param addr\n    +     * @return Hostname string of address parameter\n    +     */\n    +    private String getHostString(InetSocketAddress addr) {\n    +        String hostString = \"\";\n    +\n    +        if(addr == null) {\n    +            return hostString;\n    +        }\n    +        if (!addr.isUnresolved()) {\n    +            InetAddress ia = addr.getAddress();\n    +\n    +            // If the string starts with '/', then it has no hostname\n    +            // and we want to avoid the reverse lookup, so we return\n    +            // the string representation of the address.\n    +            if (ia.toString().startsWith(\"/\")) {\n    +                hostString = ia.getHostAddress();\n    +            } else {\n    +                hostString = addr.getHostName();\n    +            }\n    +        } else {\n    +            // According to the Java 6 documentation, if the hostname is\n    +            // unresolved, then the string before the colon is the hostname.\n    +            String addrString = addr.toString();\n    +            hostString = addrString.substring(0, addrString.lastIndexOf(':'));\n    +        }\n    +\n    +        return hostString;\n    +    }\n    +\n         public int size() {\n             return serverAddresses.size();\n         }\n     \n    +    // Counts the number of addresses added and removed during\n    +    // the last call to next. Used mainly for test purposes.\n    +    // See StasticHostProviderTest.\n    +    private int nextAdded = 0;\n    +    private int nextRemoved = 0;\n    +\n    +    int getNextAdded() {\n    +        return nextAdded;\n    +    }\n    +\n    +    int getNextRemoved() {\n    +        return nextRemoved;\n    +    }\n    +\n         public InetSocketAddress next(long spinDelay) {\n    -        ++currentIndex;\n    -        if (currentIndex == serverAddresses.size()) {\n    -            currentIndex = 0;\n    +        // Handle possible connection error by re-resolving hostname if possible\n    +        if (!connectedSinceNext) {\n    +            InetSocketAddress curAddr = serverAddresses.get(currentIndex);\n    +            String curHostString = getHostString(curAddr);\n    +            if (!getHostString(curAddr).equals(curAddr.getAddress().getHostAddress())) {\n    --- End diff --\n    \n    @afine https://github.com/apache/zookeeper/pull/150#discussion_r98484702 :sunglasses: \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-01-30T21:49:51.581+0000","updated":"2017-01-30T21:49:51.581+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/15846105","id":"15846105","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user afine commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/150#discussion_r98564047\n  \n    --- Diff: src/java/main/org/apache/zookeeper/client/StaticHostProvider.java ---\n    @@ -87,15 +75,106 @@ public StaticHostProvider(Collection<InetSocketAddress> serverAddresses)\n             Collections.shuffle(this.serverAddresses);\n         }\n     \n    +    /**\n    +     * Evaluate to a hostname if one is available and otherwise it returns the\n    +     * string representation of the IP address.\n    +     *\n    +     * In Java 7, we have a method getHostString, but earlier versions do not support it.\n    +     * This method is to provide a replacement for InetSocketAddress.getHostString().\n    +     *\n    +     * @param addr\n    +     * @return Hostname string of address parameter\n    +     */\n    +    private String getHostString(InetSocketAddress addr) {\n    +        String hostString = \"\";\n    +\n    +        if(addr == null) {\n    +            return hostString;\n    +        }\n    +        if (!addr.isUnresolved()) {\n    +            InetAddress ia = addr.getAddress();\n    +\n    +            // If the string starts with '/', then it has no hostname\n    +            // and we want to avoid the reverse lookup, so we return\n    +            // the string representation of the address.\n    +            if (ia.toString().startsWith(\"/\")) {\n    +                hostString = ia.getHostAddress();\n    +            } else {\n    +                hostString = addr.getHostName();\n    +            }\n    +        } else {\n    +            // According to the Java 6 documentation, if the hostname is\n    +            // unresolved, then the string before the colon is the hostname.\n    +            String addrString = addr.toString();\n    +            hostString = addrString.substring(0, addrString.lastIndexOf(':'));\n    +        }\n    +\n    +        return hostString;\n    +    }\n    +\n         public int size() {\n             return serverAddresses.size();\n         }\n     \n    +    // Counts the number of addresses added and removed during\n    +    // the last call to next. Used mainly for test purposes.\n    +    // See StasticHostProviderTest.\n    +    private int nextAdded = 0;\n    +    private int nextRemoved = 0;\n    +\n    +    int getNextAdded() {\n    +        return nextAdded;\n    +    }\n    +\n    +    int getNextRemoved() {\n    +        return nextRemoved;\n    +    }\n    +\n         public InetSocketAddress next(long spinDelay) {\n    -        ++currentIndex;\n    -        if (currentIndex == serverAddresses.size()) {\n    -            currentIndex = 0;\n    +        // Handle possible connection error by re-resolving hostname if possible\n    +        if (!connectedSinceNext) {\n    +            InetSocketAddress curAddr = serverAddresses.get(currentIndex);\n    +            String curHostString = getHostString(curAddr);\n    +            if (!getHostString(curAddr).equals(curAddr.getAddress().getHostAddress())) {\n    --- End diff --\n    \n    whoops, apologies for the duplicate. \uD83D\uDE27\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-01-30T23:07:00.758+0000","updated":"2017-01-30T23:07:00.758+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/15846122","id":"15846122","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user eribeiro commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/150#discussion_r98565216\n  \n    --- Diff: src/java/main/org/apache/zookeeper/client/StaticHostProvider.java ---\n    @@ -87,15 +75,106 @@ public StaticHostProvider(Collection<InetSocketAddress> serverAddresses)\n             Collections.shuffle(this.serverAddresses);\n         }\n     \n    +    /**\n    +     * Evaluate to a hostname if one is available and otherwise it returns the\n    +     * string representation of the IP address.\n    +     *\n    +     * In Java 7, we have a method getHostString, but earlier versions do not support it.\n    +     * This method is to provide a replacement for InetSocketAddress.getHostString().\n    +     *\n    +     * @param addr\n    +     * @return Hostname string of address parameter\n    +     */\n    +    private String getHostString(InetSocketAddress addr) {\n    +        String hostString = \"\";\n    +\n    +        if(addr == null) {\n    +            return hostString;\n    +        }\n    +        if (!addr.isUnresolved()) {\n    +            InetAddress ia = addr.getAddress();\n    +\n    +            // If the string starts with '/', then it has no hostname\n    +            // and we want to avoid the reverse lookup, so we return\n    +            // the string representation of the address.\n    +            if (ia.toString().startsWith(\"/\")) {\n    +                hostString = ia.getHostAddress();\n    +            } else {\n    +                hostString = addr.getHostName();\n    +            }\n    +        } else {\n    +            // According to the Java 6 documentation, if the hostname is\n    +            // unresolved, then the string before the colon is the hostname.\n    +            String addrString = addr.toString();\n    +            hostString = addrString.substring(0, addrString.lastIndexOf(':'));\n    +        }\n    +\n    +        return hostString;\n    +    }\n    +\n         public int size() {\n             return serverAddresses.size();\n         }\n     \n    +    // Counts the number of addresses added and removed during\n    +    // the last call to next. Used mainly for test purposes.\n    +    // See StasticHostProviderTest.\n    +    private int nextAdded = 0;\n    +    private int nextRemoved = 0;\n    +\n    +    int getNextAdded() {\n    +        return nextAdded;\n    +    }\n    +\n    +    int getNextRemoved() {\n    +        return nextRemoved;\n    +    }\n    +\n         public InetSocketAddress next(long spinDelay) {\n    -        ++currentIndex;\n    -        if (currentIndex == serverAddresses.size()) {\n    -            currentIndex = 0;\n    +        // Handle possible connection error by re-resolving hostname if possible\n    +        if (!connectedSinceNext) {\n    +            InetSocketAddress curAddr = serverAddresses.get(currentIndex);\n    +            String curHostString = getHostString(curAddr);\n    +            if (!getHostString(curAddr).equals(curAddr.getAddress().getHostAddress())) {\n    --- End diff --\n    \n    No problem at all. \uD83D\uDE03 \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-01-30T23:14:32.793+0000","updated":"2017-01-30T23:14:32.793+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/15849835","id":"15849835","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user ijuma commented on the issue:\n\n    https://github.com/apache/zookeeper/pull/150\n  \n    Thanks for pushing this useful improvement over the line @fpj.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-02-02T11:59:48.310+0000","updated":"2017-02-02T11:59:48.310+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/15853504","id":"15853504","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user rakeshadr commented on the issue:\n\n    https://github.com/apache/zookeeper/pull/150\n  \n    Thanks everyone for the great effort & time in pushing this issue. I could see long discussions in the PR and I hope this work is nearing completion. Could you please update the progress and would like to know the chances of pushing this asap, thanks!.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-02-06T05:00:18.557+0000","updated":"2017-02-06T05:00:18.557+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/15873730","id":"15873730","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=fpj","name":"fpj","key":"fpj","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=fpj&avatarId=16030","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=fpj&avatarId=16030","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=fpj&avatarId=16030","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=fpj&avatarId=16030"},"displayName":"Flavio Junqueira","active":true,"timeZone":"Europe/Berlin"},"body":"I haven't had much time to work on this issue, but here is my current assessment.\n\nThis issue seemed easy to fix at first, but it is fairly fundamental with respect to how we resolve host names. Currently, we resolve host names when we start a client and never resolve it again. This is the cause of the problem reported in the issue because in the scenario described, the zookeeper container is re-started and changes addresses, which prevents the client from connecting to the zookeeper server. \n\nThe proposed patch here tries to re-resolve the hostname every time the client fails to connect to the resolved address. It kind of works, but it makes {{StaticHostProvider}} a bit messy because the expectation with the current wiring is that we won't have to resolve again.\n\nThe ideal situation for the problematic scenario is that we resolve the host name every time we try to connect to a server, but that would be a fairly fundamental change to how we resolve addresses in ZooKeeper. \n\nI was also looking at the C client and it might get a bit messy too there because I don't think we currently keep the association between the host name and the resolved address, so we don't really know what to resolve again. It might be possible to do it via the canonical name in {{getaddrinfo}}, but I'm not sure how that works with windows.\n\nOne specific proposal to avoid having clients never finding a server ever again without deep changes to the current wiring is to resolve again everything in the case the client tries all and none succeeds. That would be a fairly straightforward change to both Java and C client, but it would not resolve addresses again in the case the a strict subset has changed addresses and at least one server is reachable.\n\n\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=fpj","name":"fpj","key":"fpj","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=fpj&avatarId=16030","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=fpj&avatarId=16030","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=fpj&avatarId=16030","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=fpj&avatarId=16030"},"displayName":"Flavio Junqueira","active":true,"timeZone":"Europe/Berlin"},"created":"2017-02-19T15:57:12.825+0000","updated":"2017-02-19T15:57:12.825+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/15873747","id":"15873747","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=breed","name":"breed","key":"breed","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Benjamin Reed","active":true,"timeZone":"America/Los_Angeles"},"body":"another option would be to have a  background worker that periodically wakes up and re-resolves hosts every few minutes. if we ever get a connection failure we could use that to kick the background worker to run right away.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=breed","name":"breed","key":"breed","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Benjamin Reed","active":true,"timeZone":"America/Los_Angeles"},"created":"2017-02-19T16:38:35.243+0000","updated":"2017-02-19T16:38:35.243+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/15927537","id":"15927537","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=geek101","name":"geek101","key":"geek101","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10432","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10432","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10432","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10432"},"displayName":"Powell Molleti","active":true,"timeZone":"America/Los_Angeles"},"body":"Hi All,\n\nI have worked on some other issue where I had to change StaticHostProvider to contain ServerCfg class which include the host string provided at config time, the resolved Inetaddress and SSL cert fingerprint. And also fixing all the plumbing everywhere to carry or operate upon ServerCfg. Will this be sufficient to address this issue?.\nhttps://github.com/apache/zookeeper/pull/185/files#diff-1b64f5144158570491cfdec2b93b5c79\n\nI have modified this PR to fit needs of having a chance at getting SSL support committed hence I removed these changes and published a different PR:  https://github.com/apache/zookeeper/pull/188 (has the StaticHostProvider host changes removed and all the plumbing restored) for your reference to changes with and without StaticHostProvider modified.\n\nLet me know if this a direction worth while pursuing I can carve out just the StaticHostProvider changes (without the SSL cert fingerprint in ServerCfg) and publish them as a PR.\n\nthanks\nPowell.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=geek101","name":"geek101","key":"geek101","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10432","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10432","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10432","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10432"},"displayName":"Powell Molleti","active":true,"timeZone":"America/Los_Angeles"},"created":"2017-03-16T05:49:57.243+0000","updated":"2017-03-16T05:49:57.243+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/15929563","id":"15929563","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"GitHub user geek101 opened a pull request:\n\n    https://github.com/apache/zookeeper/pull/199\n\n    ZOOKEEPER-2184: Resolve address only on demand.\n\n    Wrap hostname and port into a new ServerCfg class and fix\n    all the places to use it instead of InetSocketAddress.\n    \n    This class can be used in the future to encapsulate other\n    nice config information for example certificate\n    fingerprint associated with the host etc.\n\nYou can merge this pull request into a Git repository by running:\n\n    $ git pull https://github.com/geek101/zookeeper branch-3.5-hostname-resolve-always\n\nAlternatively you can review and apply these changes as the patch at:\n\n    https://github.com/apache/zookeeper/pull/199.patch\n\nTo close this pull request, make a commit to your master/trunk branch\nwith (at least) the following in the commit message:\n\n    This closes #199\n    \n----\ncommit ec219a4f40fe46a9743ad13ff910f9be9f383f3c\nAuthor: Powell Molleti <powellm79@yahoo.com>\nDate:   2017-03-17T07:59:23Z\n\n    Resolve address only on demand.\n    \n    Wrap hostname and port into a new ServerCfg class and fix\n    all the places to use it instead of InetSocketAddress.\n    \n    This class can be used in the future to encapsulate other\n    nice config information for example certificate\n    fingerprint associated with the host etc.\n\n----\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-17T08:05:48.984+0000","updated":"2017-03-17T08:05:48.984+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/15929571","id":"15929571","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"body":"-1 overall.  GitHub Pull Request  Build\n      \n\n    +1 @author.  The patch does not contain any @author tags.\n\n    +1 tests included.  The patch appears to include 75 new or modified tests.\n\n    +1 javadoc.  The javadoc tool did not generate any warning messages.\n\n    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.\n\n    +1 findbugs.  The patch does not introduce any new Findbugs (version 3.0.1) warnings.\n\n    -1 release audit.  The applied patch generated 2 release audit warnings (more than the trunk's current 0 warnings).\n\n    -1 core tests.  The patch failed core unit tests.\n\n    +1 contrib tests.  The patch passed contrib unit tests.\n\nTest results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/440//testReport/\nRelease audit warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/440//artifact/trunk/patchprocess/patchReleaseAuditProblems.txt\nFindbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/440//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html\nConsole output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/440//console\n\nThis message is automatically generated.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-17T08:21:07.370+0000","updated":"2017-03-17T08:21:07.370+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/15929599","id":"15929599","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"body":"-1 overall.  GitHub Pull Request  Build\n      \n\n    +1 @author.  The patch does not contain any @author tags.\n\n    +1 tests included.  The patch appears to include 75 new or modified tests.\n\n    +1 javadoc.  The javadoc tool did not generate any warning messages.\n\n    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.\n\n    +1 findbugs.  The patch does not introduce any new Findbugs (version 3.0.1) warnings.\n\n    +1 release audit.  The applied patch does not increase the total number of release audit warnings.\n\n    -1 core tests.  The patch failed core unit tests.\n\n    +1 contrib tests.  The patch passed contrib unit tests.\n\nTest results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/441//testReport/\nFindbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/441//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html\nConsole output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/441//console\n\nThis message is automatically generated.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-17T08:55:58.377+0000","updated":"2017-03-17T08:55:58.377+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/15931071","id":"15931071","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=geek101","name":"geek101","key":"geek101","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10432","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10432","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10432","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10432"},"displayName":"Powell Molleti","active":true,"timeZone":"America/Los_Angeles"},"body":"not sure what the failure above is but the cpp unit tests work for me locally for that PR I submitted.\n{noformat}\n     [exec]      [exec] *** Error in `./zktest-mt': corrupted double-linked list: 0x00000000012a5810 ***\n     [exec]      [exec] Zookeeper_readOnly::testReadOnly : elapsed 4101 : OK\n     [exec]      [exec] OK (74)\n     [exec]      [exec] FAIL: zktest-mt\n     [exec]      [exec] ==========================================\n     [exec]      [exec] 1 of 2 tests failed\n     [exec]      [exec] Please report to user@zookeeper.apache.org\n     [exec]      [exec] ==========================================\n     [exec]      [exec] make[1]: Leaving directory `/home/jenkins/jenkins-slave/workspace/PreCommit-ZOOKEEPER-github-pr-build/build/test/test-cppunit'\n     [exec]      [exec] /bin/bash: line 5:  8114 Aborted                 (core dumped) ZKROOT=/home/jenkins/jenkins-slave/workspace/PreCommit-ZOOKEEPER-github-pr-build/src/c/../.. CLASSPATH=$CLASSPATH:$CLOVER_HOME/lib/clover.jar ${dir}$tst\n     [exec]      [exec] make[1]: *** [check-TESTS] Error 1\n     [exec]      [exec] make: *** [check-am] Error 2\n{noformat}\n\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=geek101","name":"geek101","key":"geek101","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10432","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10432","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10432","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10432"},"displayName":"Powell Molleti","active":true,"timeZone":"America/Los_Angeles"},"created":"2017-03-18T05:32:31.689+0000","updated":"2017-03-18T05:32:31.689+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/16051480","id":"16051480","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user adyach commented on the issue:\n\n    https://github.com/apache/zookeeper/pull/199\n  \n    @geek101 will it help to update the list of the ip address in case I use load balancer in connection string? I am asking since I have not found when zookeeper updates list of got ip address. In case we have a situation, when all ip address are not valid anymore.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-06-16T06:53:38.480+0000","updated":"2017-06-16T06:53:38.480+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/16051483","id":"16051483","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user adyach commented on the issue:\n\n    https://github.com/apache/zookeeper/pull/199\n  \n    Seems like this is https://github.com/apache/zookeeper/pull/150\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-06-16T06:56:28.407+0000","updated":"2017-06-16T06:56:28.407+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/16052089","id":"16052089","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user geek101 commented on the issue:\n\n    https://github.com/apache/zookeeper/pull/199\n  \n    @adyach can you give me an example of a connection string that you are implying this will help me understand the problem better. Since the client code needs ip addresses of the ZK ensemble, does the DNS resolution of this load balancer hostname supposed to return that set of ip addresses?\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-06-16T16:20:54.667+0000","updated":"2017-06-16T16:20:54.667+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/16052295","id":"16052295","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user adyach commented on the issue:\n\n    https://github.com/apache/zookeeper/pull/199\n  \n    `your.zookeeper.loadbalancer`\n    The problem is that it is resolved only once when connected, but instances behind load balancer can be replaced.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-06-16T19:17:01.788+0000","updated":"2017-06-16T19:17:01.788+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/16052696","id":"16052696","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user geek101 commented on the issue:\n\n    https://github.com/apache/zookeeper/pull/199\n  \n    @adyach this patch's goal is to make sure when ever a new connection is being established DNS lookup will be performed. If you have given a hostname in connection string then if the underlying IP is gone the TCP connection will break and new TCP connection will be attempted by Zookeeper code and at this time DNS lookup will again be performed.\n    \n    I hope this helps if you can post your example of connection string it will be more helpful. Zookeeper connection string is supposed to contain the ZK ensemble set/subset hostnames/ips.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-06-17T05:24:12.859+0000","updated":"2017-06-17T05:24:12.859+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/16059402","id":"16059402","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user rcillo commented on the issue:\n\n    https://github.com/apache/zookeeper/pull/150\n  \n    This feature is highly valuable for the community. It could solve the problem of every team deploying Kafka on the cloud. Kafka has a static configuration with the IP addresses of Zookeeper nodes. If you need to replace these nodes and consequently change their IP addresses, you need to change Kafka configuratino file and then restart all Kafka nodes so that they will reload the updated configuration.\n    \n    If this feature is merged, everyone deploying Kafka on the cloud could configure it using a load balancer address, that would be re-resolved from time to time, so that new Zookeeper instances would be automatically reachable from Kafka without the need of restarts. This would greatly improve the availability of Kafka.\n    \n    Looking forward to have this merged.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-06-22T13:36:15.533+0000","updated":"2017-06-22T13:36:15.533+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/16063628","id":"16063628","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user djenriquez commented on the issue:\n\n    https://github.com/apache/zookeeper/pull/150\n  \n    Any reasons why this hasn't been merged yet or the attention given? I agree whole-heartedly with @rcillo, this is a gigantic feature for anyone depending on Zookeeper in the cloud running on immutable/disposal infrastructure.\n    \n    Would love to get this merged, but it being 6 months old makes me wonder if it has been de-prioritized by project owners/collaborators? If so, can someone explain why has this been de-prioritized?\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-06-26T19:10:33.287+0000","updated":"2017-06-26T19:10:33.287+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/16063713","id":"16063713","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user hanm commented on the issue:\n\n    https://github.com/apache/zookeeper/pull/150\n  \n    This PR has to be rebased first before it can be merged. Hi Flavio - will you follow up with this or you prefer someone else take this over? @fpj @rakeshadr \n    \n    I've updated the JIRA to mark it as a blocker for next release (3.4.11, 3.5.4), to prevent this issue lagging again. Good to get this in given its impact and relatively little effort given the PR is already in a good shape.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-06-26T20:29:02.105+0000","updated":"2017-06-26T20:29:02.105+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/16071340","id":"16071340","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"body":"-1 overall.  GitHub Pull Request  Build\n      \n\n    +1 @author.  The patch does not contain any @author tags.\n\n    +1 tests included.  The patch appears to include 75 new or modified tests.\n\n    +1 javadoc.  The javadoc tool did not generate any warning messages.\n\n    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.\n\n    +1 findbugs.  The patch does not introduce any new Findbugs (version 3.0.1) warnings.\n\n    +1 release audit.  The applied patch does not increase the total number of release audit warnings.\n\n    -1 core tests.  The patch failed core unit tests.\n\n    +1 contrib tests.  The patch passed contrib unit tests.\n\nTest results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/848//testReport/\nFindbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/848//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html\nConsole output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/848//console\n\nThis message is automatically generated.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"created":"2017-07-01T17:41:05.617+0000","updated":"2017-07-01T17:41:05.617+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/16107958","id":"16107958","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user djenriquez commented on the issue:\n\n    https://github.com/apache/zookeeper/pull/150\n  \n    Hi guys, any update for this PR? Many thanks!!\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-07-31T21:07:09.567+0000","updated":"2017-07-31T21:07:09.567+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/16121951","id":"16121951","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user hanm commented on the issue:\n\n    https://github.com/apache/zookeeper/pull/150\n  \n    We need get this moving, but let's first wait for feedback from @fpj before letting someone else taking over this JIRA. \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-08-10T17:28:38.972+0000","updated":"2017-08-10T17:28:38.972+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/16173124","id":"16173124","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user nicorevin commented on the issue:\n\n    https://github.com/apache/zookeeper/pull/150\n  \n    @fpj any updates on it? It seems like a blocker for clustering kafka (and everyone using zkclient) in docker/kubernetes.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-09-20T12:57:32.352+0000","updated":"2017-09-20T12:57:32.352+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/16193491","id":"16193491","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user edvorkin commented on the issue:\n\n    https://github.com/apache/zookeeper/pull/150\n  \n    +1 one here. This feature is necessary for running Zookeeper in the cloud under AWS ASG. Every time node fails, ASG reassigns new IP for new zookeeper and there is no way kafka will know about it. We need to treat zookeeper servers as cattle, not pets, and kill and spin new one at will without affecting kafka. \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-10-05T19:21:17.795+0000","updated":"2017-10-05T19:21:17.795+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/16200382","id":"16200382","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=phunt","name":"phunt","key":"phunt","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Patrick Hunt","active":true,"timeZone":"America/Los_Angeles"},"body":"This is the remaining blocker for 3.4.11 - any insights [~fpj] ? (see recent comments) Would be nice to get this one in.\r\n\r\nI don't believe this is a regression - if we don't see movement soon I will likely downgrade the priority and move out to the next release.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=phunt","name":"phunt","key":"phunt","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Patrick Hunt","active":true,"timeZone":"America/Los_Angeles"},"created":"2017-10-11T14:39:35.579+0000","updated":"2017-10-11T14:39:35.579+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/16209978","id":"16209978","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=phunt","name":"phunt","key":"phunt","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Patrick Hunt","active":true,"timeZone":"America/Los_Angeles"},"body":"It doesn't look like anyone feels we need to block 3.4 for this - pushing to 3.4.12.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=phunt","name":"phunt","key":"phunt","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Patrick Hunt","active":true,"timeZone":"America/Los_Angeles"},"created":"2017-10-18T20:32:50.764+0000","updated":"2017-10-18T20:32:50.764+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/16211123","id":"16211123","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user the-xs commented on the issue:\n\n    https://github.com/apache/zookeeper/pull/150\n  \n    Should we still wait or get this moving to fix the merge conflicts?\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-10-19T14:26:56.358+0000","updated":"2017-10-19T14:26:56.358+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/16235063","id":"16235063","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=junrao","name":"junrao","key":"junrao","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jun Rao","active":true,"timeZone":"America/Los_Angeles"},"body":"Hi, does anyone know when this issue can be fixed? This is related to https://issues.apache.org/jira/browse/KAFKA-5473. We are wondering if we should have a short term fix in Kafka or just wait for the fix in ZK.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=junrao","name":"junrao","key":"junrao","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jun Rao","active":true,"timeZone":"America/Los_Angeles"},"created":"2017-11-02T01:44:08.884+0000","updated":"2017-11-02T01:44:08.884+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/16276584","id":"16276584","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user jorgheymans commented on the issue:\n\n    https://github.com/apache/zookeeper/pull/150\n  \n    just got stung by this as well, assumed zk clients would be clever enough to reresolve :-/ \r\n    \r\n    Since there is a lot of interest in this why not just rebase-merge and let ppl test out the snapshot builds ? \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-12-04T10:13:55.260+0000","updated":"2017-12-04T10:13:55.260+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/16276675","id":"16276675","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user riccardofreixo commented on the issue:\n\n    https://github.com/apache/zookeeper/pull/150\n  \n    We're running Kafka in Kubernetes, so this bug was biting us regularly.\r\n    We applied the patch in the kafka clusters of our client and are running in prod. Solves our problem and created no additional problems for us.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-12-04T11:59:22.317+0000","updated":"2017-12-04T11:59:22.317+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/16276711","id":"16276711","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user sslavic commented on the issue:\n\n    https://github.com/apache/zookeeper/pull/150\n  \n    @riccardofreixo have you tried using ClusterIP Service for ZooKeeper StatefulSet and providing that ClusterIP (or service hostname) to Kafka / ZooKeeper clients as sole ZooKeeper hostname?\r\n    \r\n    StatefulSet can have multiple replicas, but to ZooKeeper clients all of the members no matter how many of them there are (1, 3, 5, ..) would be accessible under single ClusterIP.\r\n    \r\n    Even when Pods of StatefulSet die and get re-scheduled for whatever reason, they will likely get new IP, but IP of ClusterIP Service remains stable so ZooKeeper clients should be able to reconnect, without need to reresolve IP address of the host.\r\n    \r\n    If there's a quorum, Pod that died does not necessarily have to become available quickly, clients should still be able to connect even without losing session.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-12-04T12:31:42.531+0000","updated":"2017-12-04T12:31:42.531+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/16276730","id":"16276730","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user riccardofreixo commented on the issue:\n\n    https://github.com/apache/zookeeper/pull/150\n  \n    @sslavic thanks for the suggestion.\r\n    \r\n    We haven't tried that approach, and as far as I can tell it sounds like it would work. You'd still have the re-resolution problem if you deleted/recreated the service, but that should be quite rare. Had we thought of that before, we probably wouldn't have patched the client. Now we have though, we'll keep it patched.\r\n    \r\n    I still think this should be fixed on the zk-client, as there are other circumstances other than Kube where the IP addresses may change and you wouldn't have an easy solution such as ClusterIP.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-12-04T12:40:58.431+0000","updated":"2017-12-04T12:40:58.431+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/16281082","id":"16281082","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user phunt commented on the issue:\n\n    https://github.com/apache/zookeeper/pull/150\n  \n    Given the insights from the Kafka and K8s folks this looks like a good one to focus on.\r\n    \r\n    @fpj any chance you can update this PR to address the conflicts?\r\n\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-12-06T23:05:05.248+0000","updated":"2017-12-06T23:05:05.248+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/16327585","id":"16327585","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user jeffwidman commented on the issue:\n\n    https://github.com/apache/zookeeper/pull/150\n  \n    Any movement on this?\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2018-01-16T18:55:36.806+0000","updated":"2018-01-16T18:55:36.806+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/16329166","id":"16329166","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user bwmills commented on the issue:\n\n    https://github.com/apache/zookeeper/pull/150\n  \n    As noted by @rcillo back in June - this feature is highly valuable for the community. It's certainly of critical importance to our production services in K8s. Any updates are much appreciated.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2018-01-17T18:32:29.599+0000","updated":"2018-01-17T18:32:29.599+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/16331472","id":"16331472","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user phunt commented on the issue:\n\n    https://github.com/apache/zookeeper/pull/150\n  \n    I suspect folks were out on vacation. I was. :-)\r\n    \r\n    It doesn't seem like @fpj has time to look at this - can someone else pick it up and address the recent comments?\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2018-01-19T00:10:21.749+0000","updated":"2018-01-19T00:10:21.749+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/16336298","id":"16336298","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user anmolnar commented on the issue:\n\n    https://github.com/apache/zookeeper/pull/150\n  \n    @phunt @afine @fpj I'm happy to pick this up tomorrow.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2018-01-23T19:42:40.868+0000","updated":"2018-01-23T19:42:40.868+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/16337639","id":"16337639","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"GitHub user anmolnar opened a pull request:\n\n    https://github.com/apache/zookeeper/pull/451\n\n    ZOOKEEPER-2184: Zookeeper Client should re-resolve hosts when connection attempts fail\n\n    This one is the pick-up of @fpj 's original PR: #150 \r\n    Targeting and rebased on the 3.4 branch.\n\nYou can merge this pull request into a Git repository by running:\n\n    $ git pull https://github.com/anmolnar/zookeeper ZOOKEEPER-2184\n\nAlternatively you can review and apply these changes as the patch at:\n\n    https://github.com/apache/zookeeper/pull/451.patch\n\nTo close this pull request, make a commit to your master/trunk branch\nwith (at least) the following in the commit message:\n\n    This closes #451\n    \n----\ncommit 229760d7757f47e271a8e059c1aeac10f0847a2a\nAuthor: fpj <fpj@...>\nDate:   2017-01-14T16:58:15Z\n\n    ZOOKEEPER-2184: Zookeeper Client should re-resolve hosts when connection attempts fail\n\n----\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2018-01-24T14:16:49.229+0000","updated":"2018-01-24T14:16:49.229+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/16337696","id":"16337696","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user anmolnar commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/451#discussion_r163570637\n  \n    --- Diff: src/java/test/org/apache/zookeeper/client/StaticHostProviderTest.java ---\n    @@ -117,8 +117,32 @@ public void testTwoInvalidHostAddresses() {\n             list.add(new InetSocketAddress(\"a\", 2181));\n             list.add(new InetSocketAddress(\"b\", 2181));\n             new StaticHostProvider(list);\n    +\t}\n    +\n    +    @Test\n    +    public void testReResolving() {\n    +        byte size = 1;\n    +        ArrayList<InetSocketAddress> list = new ArrayList<InetSocketAddress>(size);\n    +\n    +        // Test a hostname that resolves to multiple addresses\n    --- End diff --\n    \n    Common domain names like facebook.com, google.com or apache.org don't use round-robin DNS anymore for some reason, so they don't resolve to multiple addresses. As a consequence this test doesn't validate the branch related to multiple addresses anymore unfortunately.\r\n    \r\n    Not sure how to address that, PowerMock would be the best to mock static `getAllByName()` method, but that would involve introducing a new test dependency.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2018-01-24T14:58:07.596+0000","updated":"2018-01-24T14:58:07.596+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/16340910","id":"16340910","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user mfenes commented on the issue:\n\n    https://github.com/apache/zookeeper/pull/451\n  \n    Re-resolving at StaticHostProvider level may not be sufficient as InetAddress.getAllByName(String host) itself uses a Java-level cache inside InetAddress and turns to name service (e.g. DNS) only if the host could not be found in the Java-level cache.\r\n    Unfortunately, when Java resolves a new host using the name service, it puts the host and its addresses in the cache with TTL cache FOREVER. \r\n    This means, once a host gets resolved by Java, it will never again turn to the name service to re-resolve it. If a host's addresses get updated in DNS, the address cache in Java will still contain the old entry forever.\r\n    So re-resolving at StaticHostProvider won't help in this case, as InetAddress.getAllByName(String host) will still return the old address(es) I think.\r\n    Check the getCachedAddresses method inside InetAddress, the get() method of static final class Cache inside InetAddress and sun.net.InetAddressCachePolicy.get() which returns cachePolicy with default value -1 (FOREVER) if it is not overridden by Security properties \"networkaddress.cache.ttl\" and \"networkaddress.cache.negative.ttl\".\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2018-01-26T11:02:34.512+0000","updated":"2018-01-26T11:02:34.512+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/16341016","id":"16341016","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user anmolnar commented on the issue:\n\n    https://github.com/apache/zookeeper/pull/451\n  \n    @mfenes The only solution I can think of is to set DNS cache TTL `networkaddress.cache.ttl` to a configurable, non-infinite value.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2018-01-26T13:00:12.512+0000","updated":"2018-01-26T13:00:12.512+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/16341046","id":"16341046","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user anmolnar commented on the issue:\n\n    https://github.com/apache/zookeeper/pull/451\n  \n    Just confirmed on 3.4 branch: ZK uses 30 secs cache TTL on my mac.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2018-01-26T13:23:56.507+0000","updated":"2018-01-26T13:23:56.507+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/16341073","id":"16341073","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user mfenes commented on the issue:\n\n    https://github.com/apache/zookeeper/pull/451\n  \n    Looking at the static initialization block in InetAddressCachePolicy more deeply, the default TTL is 30 seconds if there is no SecurityManager installed.\r\n    So caching a positive lookup forever in the Java-level cache is the default only if there is a SecurityManager installed and the TTL is not overridden by \"networkaddress.cache.ttl\" to a different value.\r\n    Default caching policy for a negative lookup is 0 (never cache).\r\n    Now the only question is whether 30 seconds default caching is ok or too much for ZK.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2018-01-26T13:46:28.989+0000","updated":"2018-01-26T13:46:28.989+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/16348358","id":"16348358","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user anmolnar commented on the issue:\n\n    https://github.com/apache/zookeeper/pull/451\n  \n    @phunt @afine Did you have a chance to take a look?\r\n    I think we've addressed all issues that were mentioned in the original PR.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2018-02-01T10:34:54.253+0000","updated":"2018-02-01T10:34:54.253+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/16349381","id":"16349381","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user jeffwidman commented on the issue:\n\n    https://github.com/apache/zookeeper/pull/451\n  \n    Should this PR be targeting `branch-3.4` or target `trunk` and then backport to the 3.4 series?\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2018-02-01T22:20:45.132+0000","updated":"2018-02-01T22:20:45.132+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/16349592","id":"16349592","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user afine commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/451#discussion_r165525113\n  \n    --- Diff: src/java/test/org/apache/zookeeper/client/StaticHostProviderTest.java ---\n    @@ -16,7 +16,7 @@\n      * limitations under the License.\n      */\n     \n    -package org.apache.zookeeper.test;\n    +package org.apache.zookeeper.client;\n    --- End diff --\n    \n    this doesn't look right\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2018-02-02T00:38:17.074+0000","updated":"2018-02-02T00:38:17.074+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/16349593","id":"16349593","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user afine commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/451#discussion_r165525652\n  \n    --- Diff: src/java/test/org/apache/zookeeper/test/ReadOnlyModeTest.java ---\n    @@ -239,13 +243,13 @@ public void testSessionEstablishment() throws Exception {\n         public void testSeekForRwServer() throws Exception {\n     \n             // setup the logger to capture all logs\n    -        Layout layout = Logger.getRootLogger().getAppender(\"CONSOLE\")\n    +        Layout layout = org.apache.log4j.Logger.getRootLogger().getAppender(\"CONSOLE\")\n    --- End diff --\n    \n    why is this necessary?\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2018-02-02T00:38:17.102+0000","updated":"2018-02-02T00:38:17.102+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/16349594","id":"16349594","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user afine commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/451#discussion_r165527366\n  \n    --- Diff: src/java/main/org/apache/zookeeper/client/StaticHostProvider.java ---\n    @@ -57,29 +62,12 @@\n          */\n         public StaticHostProvider(Collection<InetSocketAddress> serverAddresses) {\n             for (InetSocketAddress address : serverAddresses) {\n    -            try {\n    -                InetAddress ia = address.getAddress();\n    -                InetAddress resolvedAddresses[] = InetAddress.getAllByName((ia != null) ? ia.getHostAddress() :\n    -                        address.getHostName());\n    -                for (InetAddress resolvedAddress : resolvedAddresses) {\n    -                    // If hostName is null but the address is not, we can tell that\n    -                    // the hostName is an literal IP address. Then we can set the host string as the hostname\n    -                    // safely to avoid reverse DNS lookup.\n    -                    // As far as i know, the only way to check if the hostName is null is use toString().\n    -                    // Both the two implementations of InetAddress are final class, so we can trust the return value of\n    -                    // the toString() method.\n    -                    if (resolvedAddress.toString().startsWith(\"/\")\n    -                            && resolvedAddress.getAddress() != null) {\n    -                        this.serverAddresses.add(\n    -                                new InetSocketAddress(InetAddress.getByAddress(\n    -                                        address.getHostName(),\n    -                                        resolvedAddress.getAddress()),\n    -                                        address.getPort()));\n    -                    } else {\n    -                        this.serverAddresses.add(new InetSocketAddress(resolvedAddress.getHostAddress(), address.getPort()));\n    -                    }\n    -                }\n    -            } catch (UnknownHostException e) {\n    +\t\t\ttry {\n    --- End diff --\n    \n    something is wrong with the indentation here\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2018-02-02T00:38:17.103+0000","updated":"2018-02-02T00:38:17.103+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/16349595","id":"16349595","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user afine commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/451#discussion_r165529085\n  \n    --- Diff: src/java/main/org/apache/zookeeper/client/StaticHostProvider.java ---\n    @@ -91,15 +79,106 @@ public StaticHostProvider(Collection<InetSocketAddress> serverAddresses) {\n             Collections.shuffle(this.serverAddresses);\n         }\n     \n    +    /**\n    +     * Evaluate to a hostname if one is available and otherwise it returns the\n    +     * string representation of the IP address.\n    +     *\n    +     * In Java 7, we have a method getHostString, but earlier versions do not support it.\n    +     * This method is to provide a replacement for InetSocketAddress.getHostString().\n    +     *\n    +     * @param addr\n    +     * @return Hostname string of address parameter\n    +     */\n    +    private String getHostString(InetSocketAddress addr) {\n    +        String hostString = \"\";\n    +\n    +        if (addr == null) {\n    +            return hostString;\n    +        }\n    +        if (!addr.isUnresolved()) {\n    +            InetAddress ia = addr.getAddress();\n    +\n    +            // If the string starts with '/', then it has no hostname\n    +            // and we want to avoid the reverse lookup, so we return\n    +            // the string representation of the address.\n    +            if (ia.toString().startsWith(\"/\")) {\n    +                hostString = ia.getHostAddress();\n    +            } else {\n    +                hostString = addr.getHostName();\n    +            }\n    +        } else {\n    +            // According to the Java 6 documentation, if the hostname is\n    +            // unresolved, then the string before the colon is the hostname.\n    +            String addrString = addr.toString();\n    +            hostString = addrString.substring(0, addrString.lastIndexOf(':'));\n    +        }\n    +\n    +        return hostString;\n    +    }\n    +\n         public int size() {\n             return serverAddresses.size();\n         }\n     \n    +    // Counts the number of addresses added and removed during\n    +    // the last call to next. Used mainly for test purposes.\n    +    // See StasticHostProviderTest.\n    +    private int nextAdded = 0;\n    +    private int nextRemoved = 0;\n    +\n    +    int getNextAdded() {\n    +        return nextAdded;\n    +    }\n    +\n    +    int getNextRemoved() {\n    +        return nextRemoved;\n    +    }\n    +\n         public InetSocketAddress next(long spinDelay) {\n    -        ++currentIndex;\n    -        if (currentIndex == serverAddresses.size()) {\n    -            currentIndex = 0;\n    +        // Handle possible connection error by re-resolving hostname if possible\n    +        if (!connectedSinceNext) {\n    --- End diff --\n    \n    would you mind explaining exactly under which conditions we reresolve the hostname and under which conditions we try the next one in the host list? My reading is that this reresolves everything if the client fails to connect to two hosts in a row. Is this the desired behavior?\r\n    \r\n    And do we always reresolve all serverAddresses?\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2018-02-02T00:38:17.105+0000","updated":"2018-02-02T00:38:17.105+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/16349596","id":"16349596","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user afine commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/451#discussion_r165524377\n  \n    --- Diff: src/java/main/org/apache/zookeeper/client/StaticHostProvider.java ---\n    @@ -25,6 +25,8 @@\n     import java.util.Collection;\n     import java.util.Collections;\n     import java.util.List;\n    +import java.lang.reflect.InvocationTargetException;\n    --- End diff --\n    \n    i think these imports are unused, and there are some others elsewhere in the code\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2018-02-02T00:38:17.121+0000","updated":"2018-02-02T00:38:17.121+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/16350397","id":"16350397","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user anmolnar commented on the issue:\n\n    https://github.com/apache/zookeeper/pull/451\n  \n    @jeffwidman \r\n    \r\n    > Should this PR be targeting branch-3.4 or target trunk and then backport to the 3.4 series?\r\n    \r\n    The original PR targets 3.4 which is explained in a comment from @fpj on the jira:\r\n    https://issues.apache.org/jira/browse/ZOOKEEPER-2184?focusedCommentId=15823099&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-15823099\r\n    \r\n    > For the 3.5 branch, we will need a different patch because of the reconfiguration changes to StaticHostProvider. I'll work on it once the 3.4 patch gets a +1.\r\n\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2018-02-02T14:28:56.327+0000","updated":"2018-02-02T14:28:56.327+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/16350398","id":"16350398","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user anmolnar commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/451#discussion_r165658743\n  \n    --- Diff: src/java/main/org/apache/zookeeper/client/StaticHostProvider.java ---\n    @@ -25,6 +25,8 @@\n     import java.util.Collection;\n     import java.util.Collections;\n     import java.util.List;\n    +import java.lang.reflect.InvocationTargetException;\n    --- End diff --\n    \n    Good catch, thanks.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2018-02-02T14:30:30.325+0000","updated":"2018-02-02T14:30:30.325+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/16350400","id":"16350400","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user anmolnar commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/451#discussion_r165658965\n  \n    --- Diff: src/java/main/org/apache/zookeeper/client/StaticHostProvider.java ---\n    @@ -57,29 +62,12 @@\n          */\n         public StaticHostProvider(Collection<InetSocketAddress> serverAddresses) {\n             for (InetSocketAddress address : serverAddresses) {\n    -            try {\n    -                InetAddress ia = address.getAddress();\n    -                InetAddress resolvedAddresses[] = InetAddress.getAllByName((ia != null) ? ia.getHostAddress() :\n    -                        address.getHostName());\n    -                for (InetAddress resolvedAddress : resolvedAddresses) {\n    -                    // If hostName is null but the address is not, we can tell that\n    -                    // the hostName is an literal IP address. Then we can set the host string as the hostname\n    -                    // safely to avoid reverse DNS lookup.\n    -                    // As far as i know, the only way to check if the hostName is null is use toString().\n    -                    // Both the two implementations of InetAddress are final class, so we can trust the return value of\n    -                    // the toString() method.\n    -                    if (resolvedAddress.toString().startsWith(\"/\")\n    -                            && resolvedAddress.getAddress() != null) {\n    -                        this.serverAddresses.add(\n    -                                new InetSocketAddress(InetAddress.getByAddress(\n    -                                        address.getHostName(),\n    -                                        resolvedAddress.getAddress()),\n    -                                        address.getPort()));\n    -                    } else {\n    -                        this.serverAddresses.add(new InetSocketAddress(resolvedAddress.getHostAddress(), address.getPort()));\n    -                    }\n    -                }\n    -            } catch (UnknownHostException e) {\n    +\t\t\ttry {\n    --- End diff --\n    \n    Fixing.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2018-02-02T14:31:09.234+0000","updated":"2018-02-02T14:31:09.234+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/16350447","id":"16350447","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user anmolnar commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/451#discussion_r165665505\n  \n    --- Diff: src/java/main/org/apache/zookeeper/client/StaticHostProvider.java ---\n    @@ -91,15 +79,106 @@ public StaticHostProvider(Collection<InetSocketAddress> serverAddresses) {\n             Collections.shuffle(this.serverAddresses);\n         }\n     \n    +    /**\n    +     * Evaluate to a hostname if one is available and otherwise it returns the\n    +     * string representation of the IP address.\n    +     *\n    +     * In Java 7, we have a method getHostString, but earlier versions do not support it.\n    +     * This method is to provide a replacement for InetSocketAddress.getHostString().\n    +     *\n    +     * @param addr\n    +     * @return Hostname string of address parameter\n    +     */\n    +    private String getHostString(InetSocketAddress addr) {\n    +        String hostString = \"\";\n    +\n    +        if (addr == null) {\n    +            return hostString;\n    +        }\n    +        if (!addr.isUnresolved()) {\n    +            InetAddress ia = addr.getAddress();\n    +\n    +            // If the string starts with '/', then it has no hostname\n    +            // and we want to avoid the reverse lookup, so we return\n    +            // the string representation of the address.\n    +            if (ia.toString().startsWith(\"/\")) {\n    +                hostString = ia.getHostAddress();\n    +            } else {\n    +                hostString = addr.getHostName();\n    +            }\n    +        } else {\n    +            // According to the Java 6 documentation, if the hostname is\n    +            // unresolved, then the string before the colon is the hostname.\n    +            String addrString = addr.toString();\n    +            hostString = addrString.substring(0, addrString.lastIndexOf(':'));\n    +        }\n    +\n    +        return hostString;\n    +    }\n    +\n         public int size() {\n             return serverAddresses.size();\n         }\n     \n    +    // Counts the number of addresses added and removed during\n    +    // the last call to next. Used mainly for test purposes.\n    +    // See StasticHostProviderTest.\n    +    private int nextAdded = 0;\n    +    private int nextRemoved = 0;\n    +\n    +    int getNextAdded() {\n    +        return nextAdded;\n    +    }\n    +\n    +    int getNextRemoved() {\n    +        return nextRemoved;\n    +    }\n    +\n         public InetSocketAddress next(long spinDelay) {\n    -        ++currentIndex;\n    -        if (currentIndex == serverAddresses.size()) {\n    -            currentIndex = 0;\n    +        // Handle possible connection error by re-resolving hostname if possible\n    +        if (!connectedSinceNext) {\n    --- End diff --\n    \n    It should try to re-resolve whenever the client is unable to connect to a server (connectedSinceNext == false). \r\n    \r\n    @fpj gives a good explanation in the original Jira:\r\n    https://issues.apache.org/jira/browse/ZOOKEEPER-2184?focusedCommentId=15873730&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-15873730\r\n    \r\n    > I haven't had much time to work on this issue, but here is my current assessment.\r\n    \r\n    > This issue seemed easy to fix at first, but it is fairly fundamental with respect to how we resolve host names. Currently, we resolve host names when we start a client and never resolve it again. This is the cause of the problem reported in the issue because in the scenario described, the zookeeper container is re-started and changes addresses, which prevents the client from connecting to the zookeeper server.\r\n    \r\n    > The proposed patch here tries to re-resolve the hostname every time the client fails to connect to the resolved address. It kind of works, but it makes StaticHostProvider a bit messy because the expectation with the current wiring is that we won't have to resolve again.\r\n    \r\n    > The ideal situation for the problematic scenario is that we resolve the host name every time we try to connect to a server, but that would be a fairly fundamental change to how we resolve addresses in ZooKeeper.\r\n    \r\n    > I was also looking at the C client and it might get a bit messy too there because I don't think we currently keep the association between the host name and the resolved address, so we don't really know what to resolve again. It might be possible to do it via the canonical name in getaddrinfo, but I'm not sure how that works with windows.\r\n    \r\n    > One specific proposal to avoid having clients never finding a server ever again without deep changes to the current wiring is to resolve again everything in the case the client tries all and none succeeds. That would be a fairly straightforward change to both Java and C client, but it would not resolve addresses again in the case the a strict subset has changed addresses and at least one server is reachable.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2018-02-02T14:55:25.759+0000","updated":"2018-02-02T14:55:25.759+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/16350461","id":"16350461","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user anmolnar commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/451#discussion_r165666521\n  \n    --- Diff: src/java/test/org/apache/zookeeper/client/StaticHostProviderTest.java ---\n    @@ -16,7 +16,7 @@\n      * limitations under the License.\n      */\n     \n    -package org.apache.zookeeper.test;\n    +package org.apache.zookeeper.client;\n    --- End diff --\n    \n    It was move to client package, because it uses package-private methods of StaticHostProvider. I moved back to 'test' package and change the affected methods to public.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2018-02-02T14:59:08.852+0000","updated":"2018-02-02T14:59:08.852+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/16352907","id":"16352907","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user afine commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/451#discussion_r166102194\n  \n    --- Diff: src/java/main/org/apache/zookeeper/client/StaticHostProvider.java ---\n    @@ -58,48 +61,122 @@\n         public StaticHostProvider(Collection<InetSocketAddress> serverAddresses) {\n             for (InetSocketAddress address : serverAddresses) {\n                 try {\n    -                InetAddress ia = address.getAddress();\n    -                InetAddress resolvedAddresses[] = InetAddress.getAllByName((ia != null) ? ia.getHostAddress() :\n    -                        address.getHostName());\n    +                InetAddress resolvedAddresses[] = InetAddress.getAllByName(getHostString(address));\n                     for (InetAddress resolvedAddress : resolvedAddresses) {\n    -                    // If hostName is null but the address is not, we can tell that\n    -                    // the hostName is an literal IP address. Then we can set the host string as the hostname\n    -                    // safely to avoid reverse DNS lookup.\n    -                    // As far as i know, the only way to check if the hostName is null is use toString().\n    -                    // Both the two implementations of InetAddress are final class, so we can trust the return value of\n    -                    // the toString() method.\n    -                    if (resolvedAddress.toString().startsWith(\"/\")\n    -                            && resolvedAddress.getAddress() != null) {\n    -                        this.serverAddresses.add(\n    -                                new InetSocketAddress(InetAddress.getByAddress(\n    -                                        address.getHostName(),\n    -                                        resolvedAddress.getAddress()),\n    -                                        address.getPort()));\n    -                    } else {\n    -                        this.serverAddresses.add(new InetSocketAddress(resolvedAddress.getHostAddress(), address.getPort()));\n    -                    }\n    +                    this.serverAddresses.add(new InetSocketAddress(resolvedAddress, address.getPort()));\n                     }\n                 } catch (UnknownHostException e) {\n                     LOG.error(\"Unable to connect to server: {}\", address, e);\n                 }\n             }\n    -        \n    +\n             if (this.serverAddresses.isEmpty()) {\n                 throw new IllegalArgumentException(\n                         \"A HostProvider may not be empty!\");\n             }\n             Collections.shuffle(this.serverAddresses);\n         }\n     \n    +    /**\n    +     * Evaluate to a hostname if one is available and otherwise it returns the\n    +     * string representation of the IP address.\n    +     *\n    +     * In Java 7, we have a method getHostString, but earlier versions do not support it.\n    +     * This method is to provide a replacement for InetSocketAddress.getHostString().\n    +     *\n    +     * @param addr\n    +     * @return Hostname string of address parameter\n    +     */\n    +    private String getHostString(InetSocketAddress addr) {\n    +        String hostString = \"\";\n    +\n    +        if (addr == null) {\n    +            return hostString;\n    +        }\n    +        if (!addr.isUnresolved()) {\n    +            InetAddress ia = addr.getAddress();\n    +\n    +            // If the string starts with '/', then it has no hostname\n    +            // and we want to avoid the reverse lookup, so we return\n    +            // the string representation of the address.\n    +            if (ia.toString().startsWith(\"/\")) {\n    +                hostString = ia.getHostAddress();\n    +            } else {\n    +                hostString = addr.getHostName();\n    +            }\n    +        } else {\n    +            // According to the Java 6 documentation, if the hostname is\n    +            // unresolved, then the string before the colon is the hostname.\n    +            String addrString = addr.toString();\n    +            hostString = addrString.substring(0, addrString.lastIndexOf(':'));\n    +        }\n    +\n    +        return hostString;\n    +    }\n    +\n         public int size() {\n             return serverAddresses.size();\n         }\n     \n    +    // Counts the number of addresses added and removed during\n    +    // the last call to next. Used mainly for test purposes.\n    +    // See StasticHostProviderTest.\n    +    private int nextAdded = 0;\n    +    private int nextRemoved = 0;\n    +\n    +    public int getNextAdded() {\n    +        return nextAdded;\n    +    }\n    +\n    +    public int getNextRemoved() {\n    +        return nextRemoved;\n    +    }\n    +\n         public InetSocketAddress next(long spinDelay) {\n    -        ++currentIndex;\n    -        if (currentIndex == serverAddresses.size()) {\n    -            currentIndex = 0;\n    +        // Handle possible connection error by re-resolving hostname if possible\n    +        if (!connectedSinceNext) {\n    +            InetSocketAddress curAddr = serverAddresses.get(currentIndex);\n    +            String curHostString = getHostString(curAddr);\n    +            if (!curHostString.equals(curAddr.getAddress().getHostAddress())) {\n    +                LOG.info(\"Resolving again hostname: {}\", getHostString(curAddr));\n    +                try {\n    +                    int thePort = curAddr.getPort();\n    +                    InetAddress resolvedAddresses[] = InetAddress.getAllByName(curHostString);\n    +                    nextAdded = 0;\n    +                    nextRemoved = 0;\n    +                    if (resolvedAddresses.length == 1) {\n    --- End diff --\n    \n    what happens when a host that resolves to multiple addresses changes to resolving to just one?\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2018-02-05T20:42:49.113+0000","updated":"2018-02-05T20:42:49.113+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/16352908","id":"16352908","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user afine commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/451#discussion_r166103404\n  \n    --- Diff: src/java/main/org/apache/zookeeper/client/StaticHostProvider.java ---\n    @@ -58,48 +61,122 @@\n         public StaticHostProvider(Collection<InetSocketAddress> serverAddresses) {\n             for (InetSocketAddress address : serverAddresses) {\n                 try {\n    -                InetAddress ia = address.getAddress();\n    -                InetAddress resolvedAddresses[] = InetAddress.getAllByName((ia != null) ? ia.getHostAddress() :\n    -                        address.getHostName());\n    +                InetAddress resolvedAddresses[] = InetAddress.getAllByName(getHostString(address));\n                     for (InetAddress resolvedAddress : resolvedAddresses) {\n    -                    // If hostName is null but the address is not, we can tell that\n    -                    // the hostName is an literal IP address. Then we can set the host string as the hostname\n    -                    // safely to avoid reverse DNS lookup.\n    -                    // As far as i know, the only way to check if the hostName is null is use toString().\n    -                    // Both the two implementations of InetAddress are final class, so we can trust the return value of\n    -                    // the toString() method.\n    -                    if (resolvedAddress.toString().startsWith(\"/\")\n    -                            && resolvedAddress.getAddress() != null) {\n    -                        this.serverAddresses.add(\n    -                                new InetSocketAddress(InetAddress.getByAddress(\n    -                                        address.getHostName(),\n    -                                        resolvedAddress.getAddress()),\n    -                                        address.getPort()));\n    -                    } else {\n    -                        this.serverAddresses.add(new InetSocketAddress(resolvedAddress.getHostAddress(), address.getPort()));\n    -                    }\n    +                    this.serverAddresses.add(new InetSocketAddress(resolvedAddress, address.getPort()));\n                     }\n                 } catch (UnknownHostException e) {\n                     LOG.error(\"Unable to connect to server: {}\", address, e);\n                 }\n             }\n    -        \n    +\n             if (this.serverAddresses.isEmpty()) {\n                 throw new IllegalArgumentException(\n                         \"A HostProvider may not be empty!\");\n             }\n             Collections.shuffle(this.serverAddresses);\n         }\n     \n    +    /**\n    +     * Evaluate to a hostname if one is available and otherwise it returns the\n    +     * string representation of the IP address.\n    +     *\n    +     * In Java 7, we have a method getHostString, but earlier versions do not support it.\n    +     * This method is to provide a replacement for InetSocketAddress.getHostString().\n    +     *\n    +     * @param addr\n    +     * @return Hostname string of address parameter\n    +     */\n    +    private String getHostString(InetSocketAddress addr) {\n    +        String hostString = \"\";\n    +\n    +        if (addr == null) {\n    +            return hostString;\n    +        }\n    +        if (!addr.isUnresolved()) {\n    +            InetAddress ia = addr.getAddress();\n    +\n    +            // If the string starts with '/', then it has no hostname\n    +            // and we want to avoid the reverse lookup, so we return\n    +            // the string representation of the address.\n    +            if (ia.toString().startsWith(\"/\")) {\n    +                hostString = ia.getHostAddress();\n    +            } else {\n    +                hostString = addr.getHostName();\n    +            }\n    +        } else {\n    +            // According to the Java 6 documentation, if the hostname is\n    +            // unresolved, then the string before the colon is the hostname.\n    +            String addrString = addr.toString();\n    +            hostString = addrString.substring(0, addrString.lastIndexOf(':'));\n    +        }\n    +\n    +        return hostString;\n    +    }\n    +\n         public int size() {\n             return serverAddresses.size();\n         }\n     \n    +    // Counts the number of addresses added and removed during\n    +    // the last call to next. Used mainly for test purposes.\n    +    // See StasticHostProviderTest.\n    +    private int nextAdded = 0;\n    +    private int nextRemoved = 0;\n    +\n    +    public int getNextAdded() {\n    +        return nextAdded;\n    +    }\n    +\n    +    public int getNextRemoved() {\n    +        return nextRemoved;\n    +    }\n    +\n         public InetSocketAddress next(long spinDelay) {\n    -        ++currentIndex;\n    -        if (currentIndex == serverAddresses.size()) {\n    -            currentIndex = 0;\n    +        // Handle possible connection error by re-resolving hostname if possible\n    +        if (!connectedSinceNext) {\n    +            InetSocketAddress curAddr = serverAddresses.get(currentIndex);\n    +            String curHostString = getHostString(curAddr);\n    +            if (!curHostString.equals(curAddr.getAddress().getHostAddress())) {\n    +                LOG.info(\"Resolving again hostname: {}\", getHostString(curAddr));\n    +                try {\n    +                    int thePort = curAddr.getPort();\n    +                    InetAddress resolvedAddresses[] = InetAddress.getAllByName(curHostString);\n    +                    nextAdded = 0;\n    +                    nextRemoved = 0;\n    +                    if (resolvedAddresses.length == 1) {\n    +                        serverAddresses.set(currentIndex, new InetSocketAddress(resolvedAddresses[0], thePort));\n    +                        nextAdded = nextRemoved = 1;\n    +                        LOG.debug(\"Newly resolved address: {}\", resolvedAddresses[0]);\n    +                    } else {\n    +                        int i = 0;\n    +                        while (i < serverAddresses.size()) {\n    +                            if (getHostString(serverAddresses.get(i)).equals(curHostString) &&\n    --- End diff --\n    \n    as i mentioned in https://github.com/apache/zookeeper/pull/150/files#r98543324 this all gets a little complicated? What do you think about using a map to trap all these associations?\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2018-02-05T20:42:49.149+0000","updated":"2018-02-05T20:42:49.149+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/16352909","id":"16352909","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user afine commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/451#discussion_r166097161\n  \n    --- Diff: src/java/main/org/apache/zookeeper/client/StaticHostProvider.java ---\n    @@ -6,9 +6,9 @@\n      * to you under the Apache License, Version 2.0 (the\n      * \"License\"); you may not use this file except in compliance\n      * with the License.  You may obtain a copy of the License at\n    - *\n    - *     http://www.apache.org/licenses/LICENSE-2.0\n    - *\n    + * <p>\n    --- End diff --\n    \n    was this accidental?\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2018-02-05T20:42:49.173+0000","updated":"2018-02-05T20:42:49.173+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/16352910","id":"16352910","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user afine commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/451#discussion_r166105622\n  \n    --- Diff: src/java/test/org/apache/zookeeper/test/StaticHostProviderTest.java ---\n    @@ -117,8 +116,32 @@ public void testTwoInvalidHostAddresses() {\n             list.add(new InetSocketAddress(\"a\", 2181));\n             list.add(new InetSocketAddress(\"b\", 2181));\n             new StaticHostProvider(list);\n    +\t}\n    +\n    +    @Test\n    +    public void testReResolving() {\n    +        byte size = 1;\n    +        ArrayList<InetSocketAddress> list = new ArrayList<InetSocketAddress>(size);\n    +\n    +        // Test a hostname that resolves to multiple addresses\n    +        list.add(InetSocketAddress.createUnresolved(\"www.apache.org\", 1234));\n    --- End diff --\n    \n    I'm wondering if it's possible to mock this out? It would be great if our unit tests were not dependent on some other infrastructure.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2018-02-05T20:42:49.175+0000","updated":"2018-02-05T20:42:49.175+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/16353843","id":"16353843","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user anmolnar commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/451#discussion_r166286530\n  \n    --- Diff: src/java/test/org/apache/zookeeper/test/ReadOnlyModeTest.java ---\n    @@ -239,13 +243,13 @@ public void testSessionEstablishment() throws Exception {\n         public void testSeekForRwServer() throws Exception {\n     \n             // setup the logger to capture all logs\n    -        Layout layout = Logger.getRootLogger().getAppender(\"CONSOLE\")\n    +        Layout layout = org.apache.log4j.Logger.getRootLogger().getAppender(\"CONSOLE\")\n    --- End diff --\n    \n    I few lines above there're org.apache.log4j references which conflicts with the 'Logger' class, hence it needs to be explicitly referenced.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2018-02-06T12:57:13.593+0000","updated":"2018-02-06T12:57:13.593+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/16353845","id":"16353845","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user anmolnar commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/451#discussion_r166286605\n  \n    --- Diff: src/java/main/org/apache/zookeeper/client/StaticHostProvider.java ---\n    @@ -6,9 +6,9 @@\n      * to you under the Apache License, Version 2.0 (the\n      * \"License\"); you may not use this file except in compliance\n      * with the License.  You may obtain a copy of the License at\n    - *\n    - *     http://www.apache.org/licenses/LICENSE-2.0\n    - *\n    + * <p>\n    --- End diff --\n    \n    Yes it was.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2018-02-06T12:57:31.485+0000","updated":"2018-02-06T12:57:31.485+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/16353965","id":"16353965","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user anmolnar commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/451#discussion_r166328583\n  \n    --- Diff: src/java/main/org/apache/zookeeper/client/StaticHostProvider.java ---\n    @@ -58,48 +61,122 @@\n         public StaticHostProvider(Collection<InetSocketAddress> serverAddresses) {\n             for (InetSocketAddress address : serverAddresses) {\n                 try {\n    -                InetAddress ia = address.getAddress();\n    -                InetAddress resolvedAddresses[] = InetAddress.getAllByName((ia != null) ? ia.getHostAddress() :\n    -                        address.getHostName());\n    +                InetAddress resolvedAddresses[] = InetAddress.getAllByName(getHostString(address));\n                     for (InetAddress resolvedAddress : resolvedAddresses) {\n    -                    // If hostName is null but the address is not, we can tell that\n    -                    // the hostName is an literal IP address. Then we can set the host string as the hostname\n    -                    // safely to avoid reverse DNS lookup.\n    -                    // As far as i know, the only way to check if the hostName is null is use toString().\n    -                    // Both the two implementations of InetAddress are final class, so we can trust the return value of\n    -                    // the toString() method.\n    -                    if (resolvedAddress.toString().startsWith(\"/\")\n    -                            && resolvedAddress.getAddress() != null) {\n    -                        this.serverAddresses.add(\n    -                                new InetSocketAddress(InetAddress.getByAddress(\n    -                                        address.getHostName(),\n    -                                        resolvedAddress.getAddress()),\n    -                                        address.getPort()));\n    -                    } else {\n    -                        this.serverAddresses.add(new InetSocketAddress(resolvedAddress.getHostAddress(), address.getPort()));\n    -                    }\n    +                    this.serverAddresses.add(new InetSocketAddress(resolvedAddress, address.getPort()));\n                     }\n                 } catch (UnknownHostException e) {\n                     LOG.error(\"Unable to connect to server: {}\", address, e);\n                 }\n             }\n    -        \n    +\n             if (this.serverAddresses.isEmpty()) {\n                 throw new IllegalArgumentException(\n                         \"A HostProvider may not be empty!\");\n             }\n             Collections.shuffle(this.serverAddresses);\n         }\n     \n    +    /**\n    +     * Evaluate to a hostname if one is available and otherwise it returns the\n    +     * string representation of the IP address.\n    +     *\n    +     * In Java 7, we have a method getHostString, but earlier versions do not support it.\n    +     * This method is to provide a replacement for InetSocketAddress.getHostString().\n    +     *\n    +     * @param addr\n    +     * @return Hostname string of address parameter\n    +     */\n    +    private String getHostString(InetSocketAddress addr) {\n    +        String hostString = \"\";\n    +\n    +        if (addr == null) {\n    +            return hostString;\n    +        }\n    +        if (!addr.isUnresolved()) {\n    +            InetAddress ia = addr.getAddress();\n    +\n    +            // If the string starts with '/', then it has no hostname\n    +            // and we want to avoid the reverse lookup, so we return\n    +            // the string representation of the address.\n    +            if (ia.toString().startsWith(\"/\")) {\n    +                hostString = ia.getHostAddress();\n    +            } else {\n    +                hostString = addr.getHostName();\n    +            }\n    +        } else {\n    +            // According to the Java 6 documentation, if the hostname is\n    +            // unresolved, then the string before the colon is the hostname.\n    +            String addrString = addr.toString();\n    +            hostString = addrString.substring(0, addrString.lastIndexOf(':'));\n    +        }\n    +\n    +        return hostString;\n    +    }\n    +\n         public int size() {\n             return serverAddresses.size();\n         }\n     \n    +    // Counts the number of addresses added and removed during\n    +    // the last call to next. Used mainly for test purposes.\n    +    // See StasticHostProviderTest.\n    +    private int nextAdded = 0;\n    +    private int nextRemoved = 0;\n    +\n    +    public int getNextAdded() {\n    +        return nextAdded;\n    +    }\n    +\n    +    public int getNextRemoved() {\n    +        return nextRemoved;\n    +    }\n    +\n         public InetSocketAddress next(long spinDelay) {\n    -        ++currentIndex;\n    -        if (currentIndex == serverAddresses.size()) {\n    -            currentIndex = 0;\n    +        // Handle possible connection error by re-resolving hostname if possible\n    +        if (!connectedSinceNext) {\n    +            InetSocketAddress curAddr = serverAddresses.get(currentIndex);\n    +            String curHostString = getHostString(curAddr);\n    +            if (!curHostString.equals(curAddr.getAddress().getHostAddress())) {\n    +                LOG.info(\"Resolving again hostname: {}\", getHostString(curAddr));\n    +                try {\n    +                    int thePort = curAddr.getPort();\n    +                    InetAddress resolvedAddresses[] = InetAddress.getAllByName(curHostString);\n    +                    nextAdded = 0;\n    +                    nextRemoved = 0;\n    +                    if (resolvedAddresses.length == 1) {\n    --- End diff --\n    \n    That's actually a very good point. I'm looking into that you suggested below (using a Map instead of Array) which will probably solve this issue too.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2018-02-06T14:57:46.839+0000","updated":"2018-02-06T14:57:46.839+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/16353975","id":"16353975","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user anmolnar commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/451#discussion_r166329760\n  \n    --- Diff: src/java/test/org/apache/zookeeper/test/StaticHostProviderTest.java ---\n    @@ -117,8 +116,32 @@ public void testTwoInvalidHostAddresses() {\n             list.add(new InetSocketAddress(\"a\", 2181));\n             list.add(new InetSocketAddress(\"b\", 2181));\n             new StaticHostProvider(list);\n    +\t}\n    +\n    +    @Test\n    +    public void testReResolving() {\n    +        byte size = 1;\n    +        ArrayList<InetSocketAddress> list = new ArrayList<InetSocketAddress>(size);\n    +\n    +        // Test a hostname that resolves to multiple addresses\n    +        list.add(InetSocketAddress.createUnresolved(\"www.apache.org\", 1234));\n    --- End diff --\n    \n    Good point I spent hours finding a way for it. Unfortunately static members can't be mocked with Mockito. We should use PowerMock for it (as described here https://blog.codecentric.de/en/2016/03/junit-testing-using-mockito-powermock/), but that'd be a new dependency not sure if it's acceptable here.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2018-02-06T15:01:11.961+0000","updated":"2018-02-06T15:01:11.961+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/16354016","id":"16354016","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user anmolnar commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/451#discussion_r166341540\n  \n    --- Diff: src/java/main/org/apache/zookeeper/client/StaticHostProvider.java ---\n    @@ -58,48 +61,122 @@\n         public StaticHostProvider(Collection<InetSocketAddress> serverAddresses) {\n             for (InetSocketAddress address : serverAddresses) {\n                 try {\n    -                InetAddress ia = address.getAddress();\n    -                InetAddress resolvedAddresses[] = InetAddress.getAllByName((ia != null) ? ia.getHostAddress() :\n    -                        address.getHostName());\n    +                InetAddress resolvedAddresses[] = InetAddress.getAllByName(getHostString(address));\n                     for (InetAddress resolvedAddress : resolvedAddresses) {\n    -                    // If hostName is null but the address is not, we can tell that\n    -                    // the hostName is an literal IP address. Then we can set the host string as the hostname\n    -                    // safely to avoid reverse DNS lookup.\n    -                    // As far as i know, the only way to check if the hostName is null is use toString().\n    -                    // Both the two implementations of InetAddress are final class, so we can trust the return value of\n    -                    // the toString() method.\n    -                    if (resolvedAddress.toString().startsWith(\"/\")\n    -                            && resolvedAddress.getAddress() != null) {\n    -                        this.serverAddresses.add(\n    -                                new InetSocketAddress(InetAddress.getByAddress(\n    -                                        address.getHostName(),\n    -                                        resolvedAddress.getAddress()),\n    -                                        address.getPort()));\n    -                    } else {\n    -                        this.serverAddresses.add(new InetSocketAddress(resolvedAddress.getHostAddress(), address.getPort()));\n    -                    }\n    +                    this.serverAddresses.add(new InetSocketAddress(resolvedAddress, address.getPort()));\n                     }\n                 } catch (UnknownHostException e) {\n                     LOG.error(\"Unable to connect to server: {}\", address, e);\n                 }\n             }\n    -        \n    +\n             if (this.serverAddresses.isEmpty()) {\n                 throw new IllegalArgumentException(\n                         \"A HostProvider may not be empty!\");\n             }\n             Collections.shuffle(this.serverAddresses);\n         }\n     \n    +    /**\n    +     * Evaluate to a hostname if one is available and otherwise it returns the\n    +     * string representation of the IP address.\n    +     *\n    +     * In Java 7, we have a method getHostString, but earlier versions do not support it.\n    +     * This method is to provide a replacement for InetSocketAddress.getHostString().\n    +     *\n    +     * @param addr\n    +     * @return Hostname string of address parameter\n    +     */\n    +    private String getHostString(InetSocketAddress addr) {\n    +        String hostString = \"\";\n    +\n    +        if (addr == null) {\n    +            return hostString;\n    +        }\n    +        if (!addr.isUnresolved()) {\n    +            InetAddress ia = addr.getAddress();\n    +\n    +            // If the string starts with '/', then it has no hostname\n    +            // and we want to avoid the reverse lookup, so we return\n    +            // the string representation of the address.\n    +            if (ia.toString().startsWith(\"/\")) {\n    +                hostString = ia.getHostAddress();\n    +            } else {\n    +                hostString = addr.getHostName();\n    +            }\n    +        } else {\n    +            // According to the Java 6 documentation, if the hostname is\n    +            // unresolved, then the string before the colon is the hostname.\n    +            String addrString = addr.toString();\n    +            hostString = addrString.substring(0, addrString.lastIndexOf(':'));\n    +        }\n    +\n    +        return hostString;\n    +    }\n    +\n         public int size() {\n             return serverAddresses.size();\n         }\n     \n    +    // Counts the number of addresses added and removed during\n    +    // the last call to next. Used mainly for test purposes.\n    +    // See StasticHostProviderTest.\n    +    private int nextAdded = 0;\n    +    private int nextRemoved = 0;\n    +\n    +    public int getNextAdded() {\n    +        return nextAdded;\n    +    }\n    +\n    +    public int getNextRemoved() {\n    +        return nextRemoved;\n    +    }\n    +\n         public InetSocketAddress next(long spinDelay) {\n    -        ++currentIndex;\n    -        if (currentIndex == serverAddresses.size()) {\n    -            currentIndex = 0;\n    +        // Handle possible connection error by re-resolving hostname if possible\n    +        if (!connectedSinceNext) {\n    +            InetSocketAddress curAddr = serverAddresses.get(currentIndex);\n    +            String curHostString = getHostString(curAddr);\n    +            if (!curHostString.equals(curAddr.getAddress().getHostAddress())) {\n    +                LOG.info(\"Resolving again hostname: {}\", getHostString(curAddr));\n    +                try {\n    +                    int thePort = curAddr.getPort();\n    +                    InetAddress resolvedAddresses[] = InetAddress.getAllByName(curHostString);\n    +                    nextAdded = 0;\n    +                    nextRemoved = 0;\n    +                    if (resolvedAddresses.length == 1) {\n    +                        serverAddresses.set(currentIndex, new InetSocketAddress(resolvedAddresses[0], thePort));\n    +                        nextAdded = nextRemoved = 1;\n    +                        LOG.debug(\"Newly resolved address: {}\", resolvedAddresses[0]);\n    +                    } else {\n    +                        int i = 0;\n    +                        while (i < serverAddresses.size()) {\n    +                            if (getHostString(serverAddresses.get(i)).equals(curHostString) &&\n    --- End diff --\n    \n    It seems that this change makes things a little a bit even more complicated, because `next()` method needs to have a list of IP addresses to iterate on. Maintenance is easier with a Map, but I need to find a way to use it as a list.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2018-02-06T15:36:30.737+0000","updated":"2018-02-06T15:36:30.737+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/16354716","id":"16354716","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user afine commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/451#discussion_r166476047\n  \n    --- Diff: src/java/test/org/apache/zookeeper/test/ReadOnlyModeTest.java ---\n    @@ -239,13 +243,13 @@ public void testSessionEstablishment() throws Exception {\n         public void testSeekForRwServer() throws Exception {\n     \n             // setup the logger to capture all logs\n    -        Layout layout = Logger.getRootLogger().getAppender(\"CONSOLE\")\n    +        Layout layout = org.apache.log4j.Logger.getRootLogger().getAppender(\"CONSOLE\")\n    --- End diff --\n    \n    not going to push too hard on this, but I think you can just use log4j everywhere like in `QuorumPeerMainTest`\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2018-02-06T23:27:20.989+0000","updated":"2018-02-06T23:27:20.989+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/16354726","id":"16354726","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user afine commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/451#discussion_r166476703\n  \n    --- Diff: src/java/main/org/apache/zookeeper/client/StaticHostProvider.java ---\n    @@ -58,48 +61,122 @@\n         public StaticHostProvider(Collection<InetSocketAddress> serverAddresses) {\n             for (InetSocketAddress address : serverAddresses) {\n                 try {\n    -                InetAddress ia = address.getAddress();\n    -                InetAddress resolvedAddresses[] = InetAddress.getAllByName((ia != null) ? ia.getHostAddress() :\n    -                        address.getHostName());\n    +                InetAddress resolvedAddresses[] = InetAddress.getAllByName(getHostString(address));\n                     for (InetAddress resolvedAddress : resolvedAddresses) {\n    -                    // If hostName is null but the address is not, we can tell that\n    -                    // the hostName is an literal IP address. Then we can set the host string as the hostname\n    -                    // safely to avoid reverse DNS lookup.\n    -                    // As far as i know, the only way to check if the hostName is null is use toString().\n    -                    // Both the two implementations of InetAddress are final class, so we can trust the return value of\n    -                    // the toString() method.\n    -                    if (resolvedAddress.toString().startsWith(\"/\")\n    -                            && resolvedAddress.getAddress() != null) {\n    -                        this.serverAddresses.add(\n    -                                new InetSocketAddress(InetAddress.getByAddress(\n    -                                        address.getHostName(),\n    -                                        resolvedAddress.getAddress()),\n    -                                        address.getPort()));\n    -                    } else {\n    -                        this.serverAddresses.add(new InetSocketAddress(resolvedAddress.getHostAddress(), address.getPort()));\n    -                    }\n    +                    this.serverAddresses.add(new InetSocketAddress(resolvedAddress, address.getPort()));\n                     }\n                 } catch (UnknownHostException e) {\n                     LOG.error(\"Unable to connect to server: {}\", address, e);\n                 }\n             }\n    -        \n    +\n             if (this.serverAddresses.isEmpty()) {\n                 throw new IllegalArgumentException(\n                         \"A HostProvider may not be empty!\");\n             }\n             Collections.shuffle(this.serverAddresses);\n         }\n     \n    +    /**\n    +     * Evaluate to a hostname if one is available and otherwise it returns the\n    +     * string representation of the IP address.\n    +     *\n    +     * In Java 7, we have a method getHostString, but earlier versions do not support it.\n    +     * This method is to provide a replacement for InetSocketAddress.getHostString().\n    +     *\n    +     * @param addr\n    +     * @return Hostname string of address parameter\n    +     */\n    +    private String getHostString(InetSocketAddress addr) {\n    +        String hostString = \"\";\n    +\n    +        if (addr == null) {\n    +            return hostString;\n    +        }\n    +        if (!addr.isUnresolved()) {\n    +            InetAddress ia = addr.getAddress();\n    +\n    +            // If the string starts with '/', then it has no hostname\n    +            // and we want to avoid the reverse lookup, so we return\n    +            // the string representation of the address.\n    +            if (ia.toString().startsWith(\"/\")) {\n    +                hostString = ia.getHostAddress();\n    +            } else {\n    +                hostString = addr.getHostName();\n    +            }\n    +        } else {\n    +            // According to the Java 6 documentation, if the hostname is\n    +            // unresolved, then the string before the colon is the hostname.\n    +            String addrString = addr.toString();\n    +            hostString = addrString.substring(0, addrString.lastIndexOf(':'));\n    +        }\n    +\n    +        return hostString;\n    +    }\n    +\n         public int size() {\n             return serverAddresses.size();\n         }\n     \n    +    // Counts the number of addresses added and removed during\n    +    // the last call to next. Used mainly for test purposes.\n    +    // See StasticHostProviderTest.\n    +    private int nextAdded = 0;\n    +    private int nextRemoved = 0;\n    +\n    +    public int getNextAdded() {\n    +        return nextAdded;\n    +    }\n    +\n    +    public int getNextRemoved() {\n    +        return nextRemoved;\n    +    }\n    +\n         public InetSocketAddress next(long spinDelay) {\n    -        ++currentIndex;\n    -        if (currentIndex == serverAddresses.size()) {\n    -            currentIndex = 0;\n    +        // Handle possible connection error by re-resolving hostname if possible\n    +        if (!connectedSinceNext) {\n    +            InetSocketAddress curAddr = serverAddresses.get(currentIndex);\n    +            String curHostString = getHostString(curAddr);\n    +            if (!curHostString.equals(curAddr.getAddress().getHostAddress())) {\n    +                LOG.info(\"Resolving again hostname: {}\", getHostString(curAddr));\n    +                try {\n    +                    int thePort = curAddr.getPort();\n    +                    InetAddress resolvedAddresses[] = InetAddress.getAllByName(curHostString);\n    +                    nextAdded = 0;\n    +                    nextRemoved = 0;\n    +                    if (resolvedAddresses.length == 1) {\n    +                        serverAddresses.set(currentIndex, new InetSocketAddress(resolvedAddresses[0], thePort));\n    +                        nextAdded = nextRemoved = 1;\n    +                        LOG.debug(\"Newly resolved address: {}\", resolvedAddresses[0]);\n    +                    } else {\n    +                        int i = 0;\n    +                        while (i < serverAddresses.size()) {\n    +                            if (getHostString(serverAddresses.get(i)).equals(curHostString) &&\n    --- End diff --\n    \n    Not sure I understand this point. I believe there are implementations of HashMap that provide predictable ordering of the keys, so you should still be able to use next. Let me know if I am misunderstanding you here. \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2018-02-06T23:30:15.430+0000","updated":"2018-02-06T23:30:15.430+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/16354738","id":"16354738","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user afine commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/451#discussion_r166479687\n  \n    --- Diff: src/java/test/org/apache/zookeeper/test/StaticHostProviderTest.java ---\n    @@ -117,8 +116,32 @@ public void testTwoInvalidHostAddresses() {\n             list.add(new InetSocketAddress(\"a\", 2181));\n             list.add(new InetSocketAddress(\"b\", 2181));\n             new StaticHostProvider(list);\n    +\t}\n    +\n    +    @Test\n    +    public void testReResolving() {\n    +        byte size = 1;\n    +        ArrayList<InetSocketAddress> list = new ArrayList<InetSocketAddress>(size);\n    +\n    +        // Test a hostname that resolves to multiple addresses\n    +        list.add(InetSocketAddress.createUnresolved(\"www.apache.org\", 1234));\n    --- End diff --\n    \n    Yeah, this is annoying. Although, another possibility would be to put the dns calls in a method and then subclass `StaticHostProvider` for the tests and overriding this method to return what you want. \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2018-02-06T23:47:36.502+0000","updated":"2018-02-06T23:47:36.502+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/16355652","id":"16355652","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user anmolnar commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/451#discussion_r166669488\n  \n    --- Diff: src/java/test/org/apache/zookeeper/test/ReadOnlyModeTest.java ---\n    @@ -239,13 +243,13 @@ public void testSessionEstablishment() throws Exception {\n         public void testSeekForRwServer() throws Exception {\n     \n             // setup the logger to capture all logs\n    -        Layout layout = Logger.getRootLogger().getAppender(\"CONSOLE\")\n    +        Layout layout = org.apache.log4j.Logger.getRootLogger().getAppender(\"CONSOLE\")\n    --- End diff --\n    \n    slf4j's string formatter feature is being used in these tests. I wouldn't refactor them to be honest.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2018-02-07T16:17:08.583+0000","updated":"2018-02-07T16:17:08.583+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/16355654","id":"16355654","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user anmolnar commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/451#discussion_r166670125\n  \n    --- Diff: src/java/main/org/apache/zookeeper/client/StaticHostProvider.java ---\n    @@ -58,48 +61,122 @@\n         public StaticHostProvider(Collection<InetSocketAddress> serverAddresses) {\n             for (InetSocketAddress address : serverAddresses) {\n                 try {\n    -                InetAddress ia = address.getAddress();\n    -                InetAddress resolvedAddresses[] = InetAddress.getAllByName((ia != null) ? ia.getHostAddress() :\n    -                        address.getHostName());\n    +                InetAddress resolvedAddresses[] = InetAddress.getAllByName(getHostString(address));\n                     for (InetAddress resolvedAddress : resolvedAddresses) {\n    -                    // If hostName is null but the address is not, we can tell that\n    -                    // the hostName is an literal IP address. Then we can set the host string as the hostname\n    -                    // safely to avoid reverse DNS lookup.\n    -                    // As far as i know, the only way to check if the hostName is null is use toString().\n    -                    // Both the two implementations of InetAddress are final class, so we can trust the return value of\n    -                    // the toString() method.\n    -                    if (resolvedAddress.toString().startsWith(\"/\")\n    -                            && resolvedAddress.getAddress() != null) {\n    -                        this.serverAddresses.add(\n    -                                new InetSocketAddress(InetAddress.getByAddress(\n    -                                        address.getHostName(),\n    -                                        resolvedAddress.getAddress()),\n    -                                        address.getPort()));\n    -                    } else {\n    -                        this.serverAddresses.add(new InetSocketAddress(resolvedAddress.getHostAddress(), address.getPort()));\n    -                    }\n    +                    this.serverAddresses.add(new InetSocketAddress(resolvedAddress, address.getPort()));\n                     }\n                 } catch (UnknownHostException e) {\n                     LOG.error(\"Unable to connect to server: {}\", address, e);\n                 }\n             }\n    -        \n    +\n             if (this.serverAddresses.isEmpty()) {\n                 throw new IllegalArgumentException(\n                         \"A HostProvider may not be empty!\");\n             }\n             Collections.shuffle(this.serverAddresses);\n         }\n     \n    +    /**\n    +     * Evaluate to a hostname if one is available and otherwise it returns the\n    +     * string representation of the IP address.\n    +     *\n    +     * In Java 7, we have a method getHostString, but earlier versions do not support it.\n    +     * This method is to provide a replacement for InetSocketAddress.getHostString().\n    +     *\n    +     * @param addr\n    +     * @return Hostname string of address parameter\n    +     */\n    +    private String getHostString(InetSocketAddress addr) {\n    +        String hostString = \"\";\n    +\n    +        if (addr == null) {\n    +            return hostString;\n    +        }\n    +        if (!addr.isUnresolved()) {\n    +            InetAddress ia = addr.getAddress();\n    +\n    +            // If the string starts with '/', then it has no hostname\n    +            // and we want to avoid the reverse lookup, so we return\n    +            // the string representation of the address.\n    +            if (ia.toString().startsWith(\"/\")) {\n    +                hostString = ia.getHostAddress();\n    +            } else {\n    +                hostString = addr.getHostName();\n    +            }\n    +        } else {\n    +            // According to the Java 6 documentation, if the hostname is\n    +            // unresolved, then the string before the colon is the hostname.\n    +            String addrString = addr.toString();\n    +            hostString = addrString.substring(0, addrString.lastIndexOf(':'));\n    +        }\n    +\n    +        return hostString;\n    +    }\n    +\n         public int size() {\n             return serverAddresses.size();\n         }\n     \n    +    // Counts the number of addresses added and removed during\n    +    // the last call to next. Used mainly for test purposes.\n    +    // See StasticHostProviderTest.\n    +    private int nextAdded = 0;\n    +    private int nextRemoved = 0;\n    +\n    +    public int getNextAdded() {\n    +        return nextAdded;\n    +    }\n    +\n    +    public int getNextRemoved() {\n    +        return nextRemoved;\n    +    }\n    +\n         public InetSocketAddress next(long spinDelay) {\n    -        ++currentIndex;\n    -        if (currentIndex == serverAddresses.size()) {\n    -            currentIndex = 0;\n    +        // Handle possible connection error by re-resolving hostname if possible\n    +        if (!connectedSinceNext) {\n    +            InetSocketAddress curAddr = serverAddresses.get(currentIndex);\n    +            String curHostString = getHostString(curAddr);\n    +            if (!curHostString.equals(curAddr.getAddress().getHostAddress())) {\n    +                LOG.info(\"Resolving again hostname: {}\", getHostString(curAddr));\n    +                try {\n    +                    int thePort = curAddr.getPort();\n    +                    InetAddress resolvedAddresses[] = InetAddress.getAllByName(curHostString);\n    +                    nextAdded = 0;\n    +                    nextRemoved = 0;\n    +                    if (resolvedAddresses.length == 1) {\n    +                        serverAddresses.set(currentIndex, new InetSocketAddress(resolvedAddresses[0], thePort));\n    +                        nextAdded = nextRemoved = 1;\n    +                        LOG.debug(\"Newly resolved address: {}\", resolvedAddresses[0]);\n    +                    } else {\n    +                        int i = 0;\n    +                        while (i < serverAddresses.size()) {\n    +                            if (getHostString(serverAddresses.get(i)).equals(curHostString) &&\n    --- End diff --\n    \n    How to shuffle the elements?\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2018-02-07T16:18:56.858+0000","updated":"2018-02-07T16:18:56.858+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/16355661","id":"16355661","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user anmolnar commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/451#discussion_r166671671\n  \n    --- Diff: src/java/main/org/apache/zookeeper/client/StaticHostProvider.java ---\n    @@ -58,48 +61,122 @@\n         public StaticHostProvider(Collection<InetSocketAddress> serverAddresses) {\n             for (InetSocketAddress address : serverAddresses) {\n                 try {\n    -                InetAddress ia = address.getAddress();\n    -                InetAddress resolvedAddresses[] = InetAddress.getAllByName((ia != null) ? ia.getHostAddress() :\n    -                        address.getHostName());\n    +                InetAddress resolvedAddresses[] = InetAddress.getAllByName(getHostString(address));\n                     for (InetAddress resolvedAddress : resolvedAddresses) {\n    -                    // If hostName is null but the address is not, we can tell that\n    -                    // the hostName is an literal IP address. Then we can set the host string as the hostname\n    -                    // safely to avoid reverse DNS lookup.\n    -                    // As far as i know, the only way to check if the hostName is null is use toString().\n    -                    // Both the two implementations of InetAddress are final class, so we can trust the return value of\n    -                    // the toString() method.\n    -                    if (resolvedAddress.toString().startsWith(\"/\")\n    -                            && resolvedAddress.getAddress() != null) {\n    -                        this.serverAddresses.add(\n    -                                new InetSocketAddress(InetAddress.getByAddress(\n    -                                        address.getHostName(),\n    -                                        resolvedAddress.getAddress()),\n    -                                        address.getPort()));\n    -                    } else {\n    -                        this.serverAddresses.add(new InetSocketAddress(resolvedAddress.getHostAddress(), address.getPort()));\n    -                    }\n    +                    this.serverAddresses.add(new InetSocketAddress(resolvedAddress, address.getPort()));\n                     }\n                 } catch (UnknownHostException e) {\n                     LOG.error(\"Unable to connect to server: {}\", address, e);\n                 }\n             }\n    -        \n    +\n             if (this.serverAddresses.isEmpty()) {\n                 throw new IllegalArgumentException(\n                         \"A HostProvider may not be empty!\");\n             }\n             Collections.shuffle(this.serverAddresses);\n         }\n     \n    +    /**\n    +     * Evaluate to a hostname if one is available and otherwise it returns the\n    +     * string representation of the IP address.\n    +     *\n    +     * In Java 7, we have a method getHostString, but earlier versions do not support it.\n    +     * This method is to provide a replacement for InetSocketAddress.getHostString().\n    +     *\n    +     * @param addr\n    +     * @return Hostname string of address parameter\n    +     */\n    +    private String getHostString(InetSocketAddress addr) {\n    +        String hostString = \"\";\n    +\n    +        if (addr == null) {\n    +            return hostString;\n    +        }\n    +        if (!addr.isUnresolved()) {\n    +            InetAddress ia = addr.getAddress();\n    +\n    +            // If the string starts with '/', then it has no hostname\n    +            // and we want to avoid the reverse lookup, so we return\n    +            // the string representation of the address.\n    +            if (ia.toString().startsWith(\"/\")) {\n    +                hostString = ia.getHostAddress();\n    +            } else {\n    +                hostString = addr.getHostName();\n    +            }\n    +        } else {\n    +            // According to the Java 6 documentation, if the hostname is\n    +            // unresolved, then the string before the colon is the hostname.\n    +            String addrString = addr.toString();\n    +            hostString = addrString.substring(0, addrString.lastIndexOf(':'));\n    +        }\n    +\n    +        return hostString;\n    +    }\n    +\n         public int size() {\n             return serverAddresses.size();\n         }\n     \n    +    // Counts the number of addresses added and removed during\n    +    // the last call to next. Used mainly for test purposes.\n    +    // See StasticHostProviderTest.\n    +    private int nextAdded = 0;\n    +    private int nextRemoved = 0;\n    +\n    +    public int getNextAdded() {\n    +        return nextAdded;\n    +    }\n    +\n    +    public int getNextRemoved() {\n    +        return nextRemoved;\n    +    }\n    +\n         public InetSocketAddress next(long spinDelay) {\n    -        ++currentIndex;\n    -        if (currentIndex == serverAddresses.size()) {\n    -            currentIndex = 0;\n    +        // Handle possible connection error by re-resolving hostname if possible\n    +        if (!connectedSinceNext) {\n    +            InetSocketAddress curAddr = serverAddresses.get(currentIndex);\n    +            String curHostString = getHostString(curAddr);\n    +            if (!curHostString.equals(curAddr.getAddress().getHostAddress())) {\n    +                LOG.info(\"Resolving again hostname: {}\", getHostString(curAddr));\n    +                try {\n    +                    int thePort = curAddr.getPort();\n    +                    InetAddress resolvedAddresses[] = InetAddress.getAllByName(curHostString);\n    +                    nextAdded = 0;\n    +                    nextRemoved = 0;\n    +                    if (resolvedAddresses.length == 1) {\n    --- End diff --\n    \n    It might be easier to just remove the special case of `resolvedAddresses.length == 1` and let the other part iterate over the list and remove the affected elements.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2018-02-07T16:23:08.031+0000","updated":"2018-02-07T16:23:08.031+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/16357289","id":"16357289","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user afine commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/451#discussion_r167013851\n  \n    --- Diff: src/java/main/org/apache/zookeeper/client/StaticHostProvider.java ---\n    @@ -58,48 +61,122 @@\n         public StaticHostProvider(Collection<InetSocketAddress> serverAddresses) {\n             for (InetSocketAddress address : serverAddresses) {\n                 try {\n    -                InetAddress ia = address.getAddress();\n    -                InetAddress resolvedAddresses[] = InetAddress.getAllByName((ia != null) ? ia.getHostAddress() :\n    -                        address.getHostName());\n    +                InetAddress resolvedAddresses[] = InetAddress.getAllByName(getHostString(address));\n                     for (InetAddress resolvedAddress : resolvedAddresses) {\n    -                    // If hostName is null but the address is not, we can tell that\n    -                    // the hostName is an literal IP address. Then we can set the host string as the hostname\n    -                    // safely to avoid reverse DNS lookup.\n    -                    // As far as i know, the only way to check if the hostName is null is use toString().\n    -                    // Both the two implementations of InetAddress are final class, so we can trust the return value of\n    -                    // the toString() method.\n    -                    if (resolvedAddress.toString().startsWith(\"/\")\n    -                            && resolvedAddress.getAddress() != null) {\n    -                        this.serverAddresses.add(\n    -                                new InetSocketAddress(InetAddress.getByAddress(\n    -                                        address.getHostName(),\n    -                                        resolvedAddress.getAddress()),\n    -                                        address.getPort()));\n    -                    } else {\n    -                        this.serverAddresses.add(new InetSocketAddress(resolvedAddress.getHostAddress(), address.getPort()));\n    -                    }\n    +                    this.serverAddresses.add(new InetSocketAddress(resolvedAddress, address.getPort()));\n                     }\n                 } catch (UnknownHostException e) {\n                     LOG.error(\"Unable to connect to server: {}\", address, e);\n                 }\n             }\n    -        \n    +\n             if (this.serverAddresses.isEmpty()) {\n                 throw new IllegalArgumentException(\n                         \"A HostProvider may not be empty!\");\n             }\n             Collections.shuffle(this.serverAddresses);\n         }\n     \n    +    /**\n    +     * Evaluate to a hostname if one is available and otherwise it returns the\n    +     * string representation of the IP address.\n    +     *\n    +     * In Java 7, we have a method getHostString, but earlier versions do not support it.\n    +     * This method is to provide a replacement for InetSocketAddress.getHostString().\n    +     *\n    +     * @param addr\n    +     * @return Hostname string of address parameter\n    +     */\n    +    private String getHostString(InetSocketAddress addr) {\n    +        String hostString = \"\";\n    +\n    +        if (addr == null) {\n    +            return hostString;\n    +        }\n    +        if (!addr.isUnresolved()) {\n    +            InetAddress ia = addr.getAddress();\n    +\n    +            // If the string starts with '/', then it has no hostname\n    +            // and we want to avoid the reverse lookup, so we return\n    +            // the string representation of the address.\n    +            if (ia.toString().startsWith(\"/\")) {\n    +                hostString = ia.getHostAddress();\n    +            } else {\n    +                hostString = addr.getHostName();\n    +            }\n    +        } else {\n    +            // According to the Java 6 documentation, if the hostname is\n    +            // unresolved, then the string before the colon is the hostname.\n    +            String addrString = addr.toString();\n    +            hostString = addrString.substring(0, addrString.lastIndexOf(':'));\n    +        }\n    +\n    +        return hostString;\n    +    }\n    +\n         public int size() {\n             return serverAddresses.size();\n         }\n     \n    +    // Counts the number of addresses added and removed during\n    +    // the last call to next. Used mainly for test purposes.\n    +    // See StasticHostProviderTest.\n    +    private int nextAdded = 0;\n    +    private int nextRemoved = 0;\n    +\n    +    public int getNextAdded() {\n    +        return nextAdded;\n    +    }\n    +\n    +    public int getNextRemoved() {\n    +        return nextRemoved;\n    +    }\n    +\n         public InetSocketAddress next(long spinDelay) {\n    -        ++currentIndex;\n    -        if (currentIndex == serverAddresses.size()) {\n    -            currentIndex = 0;\n    +        // Handle possible connection error by re-resolving hostname if possible\n    +        if (!connectedSinceNext) {\n    +            InetSocketAddress curAddr = serverAddresses.get(currentIndex);\n    +            String curHostString = getHostString(curAddr);\n    +            if (!curHostString.equals(curAddr.getAddress().getHostAddress())) {\n    +                LOG.info(\"Resolving again hostname: {}\", getHostString(curAddr));\n    +                try {\n    +                    int thePort = curAddr.getPort();\n    +                    InetAddress resolvedAddresses[] = InetAddress.getAllByName(curHostString);\n    +                    nextAdded = 0;\n    +                    nextRemoved = 0;\n    +                    if (resolvedAddresses.length == 1) {\n    +                        serverAddresses.set(currentIndex, new InetSocketAddress(resolvedAddresses[0], thePort));\n    +                        nextAdded = nextRemoved = 1;\n    +                        LOG.debug(\"Newly resolved address: {}\", resolvedAddresses[0]);\n    +                    } else {\n    +                        int i = 0;\n    +                        while (i < serverAddresses.size()) {\n    +                            if (getHostString(serverAddresses.get(i)).equals(curHostString) &&\n    --- End diff --\n    \n    You could put the `keySet` in a list and shuffle?\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2018-02-08T17:43:42.806+0000","updated":"2018-02-08T17:43:42.806+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/16357356","id":"16357356","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user anmolnar commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/451#discussion_r167024767\n  \n    --- Diff: src/java/main/org/apache/zookeeper/client/StaticHostProvider.java ---\n    @@ -58,48 +61,122 @@\n         public StaticHostProvider(Collection<InetSocketAddress> serverAddresses) {\n             for (InetSocketAddress address : serverAddresses) {\n                 try {\n    -                InetAddress ia = address.getAddress();\n    -                InetAddress resolvedAddresses[] = InetAddress.getAllByName((ia != null) ? ia.getHostAddress() :\n    -                        address.getHostName());\n    +                InetAddress resolvedAddresses[] = InetAddress.getAllByName(getHostString(address));\n                     for (InetAddress resolvedAddress : resolvedAddresses) {\n    -                    // If hostName is null but the address is not, we can tell that\n    -                    // the hostName is an literal IP address. Then we can set the host string as the hostname\n    -                    // safely to avoid reverse DNS lookup.\n    -                    // As far as i know, the only way to check if the hostName is null is use toString().\n    -                    // Both the two implementations of InetAddress are final class, so we can trust the return value of\n    -                    // the toString() method.\n    -                    if (resolvedAddress.toString().startsWith(\"/\")\n    -                            && resolvedAddress.getAddress() != null) {\n    -                        this.serverAddresses.add(\n    -                                new InetSocketAddress(InetAddress.getByAddress(\n    -                                        address.getHostName(),\n    -                                        resolvedAddress.getAddress()),\n    -                                        address.getPort()));\n    -                    } else {\n    -                        this.serverAddresses.add(new InetSocketAddress(resolvedAddress.getHostAddress(), address.getPort()));\n    -                    }\n    +                    this.serverAddresses.add(new InetSocketAddress(resolvedAddress, address.getPort()));\n                     }\n                 } catch (UnknownHostException e) {\n                     LOG.error(\"Unable to connect to server: {}\", address, e);\n                 }\n             }\n    -        \n    +\n             if (this.serverAddresses.isEmpty()) {\n                 throw new IllegalArgumentException(\n                         \"A HostProvider may not be empty!\");\n             }\n             Collections.shuffle(this.serverAddresses);\n         }\n     \n    +    /**\n    +     * Evaluate to a hostname if one is available and otherwise it returns the\n    +     * string representation of the IP address.\n    +     *\n    +     * In Java 7, we have a method getHostString, but earlier versions do not support it.\n    +     * This method is to provide a replacement for InetSocketAddress.getHostString().\n    +     *\n    +     * @param addr\n    +     * @return Hostname string of address parameter\n    +     */\n    +    private String getHostString(InetSocketAddress addr) {\n    +        String hostString = \"\";\n    +\n    +        if (addr == null) {\n    +            return hostString;\n    +        }\n    +        if (!addr.isUnresolved()) {\n    +            InetAddress ia = addr.getAddress();\n    +\n    +            // If the string starts with '/', then it has no hostname\n    +            // and we want to avoid the reverse lookup, so we return\n    +            // the string representation of the address.\n    +            if (ia.toString().startsWith(\"/\")) {\n    +                hostString = ia.getHostAddress();\n    +            } else {\n    +                hostString = addr.getHostName();\n    +            }\n    +        } else {\n    +            // According to the Java 6 documentation, if the hostname is\n    +            // unresolved, then the string before the colon is the hostname.\n    +            String addrString = addr.toString();\n    +            hostString = addrString.substring(0, addrString.lastIndexOf(':'));\n    +        }\n    +\n    +        return hostString;\n    +    }\n    +\n         public int size() {\n             return serverAddresses.size();\n         }\n     \n    +    // Counts the number of addresses added and removed during\n    +    // the last call to next. Used mainly for test purposes.\n    +    // See StasticHostProviderTest.\n    +    private int nextAdded = 0;\n    +    private int nextRemoved = 0;\n    +\n    +    public int getNextAdded() {\n    +        return nextAdded;\n    +    }\n    +\n    +    public int getNextRemoved() {\n    +        return nextRemoved;\n    +    }\n    +\n         public InetSocketAddress next(long spinDelay) {\n    -        ++currentIndex;\n    -        if (currentIndex == serverAddresses.size()) {\n    -            currentIndex = 0;\n    +        // Handle possible connection error by re-resolving hostname if possible\n    +        if (!connectedSinceNext) {\n    +            InetSocketAddress curAddr = serverAddresses.get(currentIndex);\n    +            String curHostString = getHostString(curAddr);\n    +            if (!curHostString.equals(curAddr.getAddress().getHostAddress())) {\n    +                LOG.info(\"Resolving again hostname: {}\", getHostString(curAddr));\n    +                try {\n    +                    int thePort = curAddr.getPort();\n    +                    InetAddress resolvedAddresses[] = InetAddress.getAllByName(curHostString);\n    +                    nextAdded = 0;\n    +                    nextRemoved = 0;\n    +                    if (resolvedAddresses.length == 1) {\n    +                        serverAddresses.set(currentIndex, new InetSocketAddress(resolvedAddresses[0], thePort));\n    +                        nextAdded = nextRemoved = 1;\n    +                        LOG.debug(\"Newly resolved address: {}\", resolvedAddresses[0]);\n    +                    } else {\n    +                        int i = 0;\n    +                        while (i < serverAddresses.size()) {\n    +                            if (getHostString(serverAddresses.get(i)).equals(curHostString) &&\n    --- End diff --\n    \n    The key is the hoststring which is like `issues.apache.org` and could have multiple InetAddresses which are the values of the key in the map. If I shuffle only the keys, I can iterate on only the keys and not sure how to choose from the addresses.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2018-02-08T18:23:58.439+0000","updated":"2018-02-08T18:23:58.439+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/16357361","id":"16357361","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user anmolnar commented on the issue:\n\n    https://github.com/apache/zookeeper/pull/451\n  \n    Going one step back I wonder why we try to deal with multiple addresses at all.\r\n    \r\n    HostProvider should just make a transformation from unresolved InetSocketAddresses to resolved InetSocketAddresses. The easiest way as I can see it is to create a new instance of InetSocketAddress if the input is unresolved every time `next()` is called. Otherwise just pass it through.\r\n    \r\n    JVM will deal with the rest: resolution, caching and re-resolution once the cache is expires (30 secs).\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2018-02-08T18:27:36.161+0000","updated":"2018-02-08T18:27:36.161+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/16357370","id":"16357370","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user anmolnar commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/451#discussion_r167027624\n  \n    --- Diff: src/java/test/org/apache/zookeeper/test/StaticHostProviderTest.java ---\n    @@ -117,8 +116,32 @@ public void testTwoInvalidHostAddresses() {\n             list.add(new InetSocketAddress(\"a\", 2181));\n             list.add(new InetSocketAddress(\"b\", 2181));\n             new StaticHostProvider(list);\n    +\t}\n    +\n    +    @Test\n    +    public void testReResolving() {\n    +        byte size = 1;\n    +        ArrayList<InetSocketAddress> list = new ArrayList<InetSocketAddress>(size);\n    +\n    +        // Test a hostname that resolves to multiple addresses\n    +        list.add(InetSocketAddress.createUnresolved(\"www.apache.org\", 1234));\n    --- End diff --\n    \n    Makes sense, I'm working on it.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2018-02-08T18:34:39.253+0000","updated":"2018-02-08T18:34:39.253+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/16365806","id":"16365806","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user anmolnar commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/451#discussion_r168524336\n  \n    --- Diff: src/java/test/org/apache/zookeeper/test/StaticHostProviderTest.java ---\n    @@ -117,8 +116,32 @@ public void testTwoInvalidHostAddresses() {\n             list.add(new InetSocketAddress(\"a\", 2181));\n             list.add(new InetSocketAddress(\"b\", 2181));\n             new StaticHostProvider(list);\n    +\t}\n    +\n    +    @Test\n    +    public void testReResolving() {\n    +        byte size = 1;\n    +        ArrayList<InetSocketAddress> list = new ArrayList<InetSocketAddress>(size);\n    +\n    +        // Test a hostname that resolves to multiple addresses\n    +        list.add(InetSocketAddress.createUnresolved(\"www.apache.org\", 1234));\n    --- End diff --\n    \n    This is done.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2018-02-15T16:12:16.580+0000","updated":"2018-02-15T16:12:16.580+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/16366059","id":"16366059","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user afine commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/451#discussion_r168564981\n  \n    --- Diff: src/java/main/org/apache/zookeeper/client/StaticHostProvider.java ---\n    @@ -18,6 +18,10 @@\n     \n     package org.apache.zookeeper.client;\n     \n    +import org.apache.yetus.audience.InterfaceAudience;\n    --- End diff --\n    \n    nit: move this back\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2018-02-15T18:24:40.087+0000","updated":"2018-02-15T18:24:40.087+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/16366131","id":"16366131","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user afine commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/451#discussion_r168565039\n  \n    --- Diff: src/java/main/org/apache/zookeeper/client/StaticHostProvider.java ---\n    @@ -18,6 +18,10 @@\n     \n     package org.apache.zookeeper.client;\n     \n    +import org.apache.yetus.audience.InterfaceAudience;\n    --- End diff --\n    \n    nit: move this back\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2018-02-15T19:13:49.335+0000","updated":"2018-02-15T19:13:49.335+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/16366132","id":"16366132","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user afine commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/451#discussion_r168578617\n  \n    --- Diff: src/java/main/org/apache/zookeeper/client/StaticHostProvider.java ---\n    @@ -58,48 +61,122 @@\n         public StaticHostProvider(Collection<InetSocketAddress> serverAddresses) {\n             for (InetSocketAddress address : serverAddresses) {\n                 try {\n    -                InetAddress ia = address.getAddress();\n    -                InetAddress resolvedAddresses[] = InetAddress.getAllByName((ia != null) ? ia.getHostAddress() :\n    -                        address.getHostName());\n    +                InetAddress resolvedAddresses[] = InetAddress.getAllByName(getHostString(address));\n                     for (InetAddress resolvedAddress : resolvedAddresses) {\n    -                    // If hostName is null but the address is not, we can tell that\n    -                    // the hostName is an literal IP address. Then we can set the host string as the hostname\n    -                    // safely to avoid reverse DNS lookup.\n    -                    // As far as i know, the only way to check if the hostName is null is use toString().\n    -                    // Both the two implementations of InetAddress are final class, so we can trust the return value of\n    -                    // the toString() method.\n    -                    if (resolvedAddress.toString().startsWith(\"/\")\n    -                            && resolvedAddress.getAddress() != null) {\n    -                        this.serverAddresses.add(\n    -                                new InetSocketAddress(InetAddress.getByAddress(\n    -                                        address.getHostName(),\n    -                                        resolvedAddress.getAddress()),\n    -                                        address.getPort()));\n    -                    } else {\n    -                        this.serverAddresses.add(new InetSocketAddress(resolvedAddress.getHostAddress(), address.getPort()));\n    -                    }\n    +                    this.serverAddresses.add(new InetSocketAddress(resolvedAddress, address.getPort()));\n                     }\n                 } catch (UnknownHostException e) {\n                     LOG.error(\"Unable to connect to server: {}\", address, e);\n                 }\n             }\n    -        \n    +\n             if (this.serverAddresses.isEmpty()) {\n                 throw new IllegalArgumentException(\n                         \"A HostProvider may not be empty!\");\n             }\n             Collections.shuffle(this.serverAddresses);\n         }\n     \n    +    /**\n    +     * Evaluate to a hostname if one is available and otherwise it returns the\n    +     * string representation of the IP address.\n    +     *\n    +     * In Java 7, we have a method getHostString, but earlier versions do not support it.\n    +     * This method is to provide a replacement for InetSocketAddress.getHostString().\n    +     *\n    +     * @param addr\n    +     * @return Hostname string of address parameter\n    +     */\n    +    private String getHostString(InetSocketAddress addr) {\n    +        String hostString = \"\";\n    +\n    +        if (addr == null) {\n    +            return hostString;\n    +        }\n    +        if (!addr.isUnresolved()) {\n    +            InetAddress ia = addr.getAddress();\n    +\n    +            // If the string starts with '/', then it has no hostname\n    +            // and we want to avoid the reverse lookup, so we return\n    +            // the string representation of the address.\n    +            if (ia.toString().startsWith(\"/\")) {\n    +                hostString = ia.getHostAddress();\n    +            } else {\n    +                hostString = addr.getHostName();\n    +            }\n    +        } else {\n    +            // According to the Java 6 documentation, if the hostname is\n    +            // unresolved, then the string before the colon is the hostname.\n    +            String addrString = addr.toString();\n    +            hostString = addrString.substring(0, addrString.lastIndexOf(':'));\n    +        }\n    +\n    +        return hostString;\n    +    }\n    +\n         public int size() {\n             return serverAddresses.size();\n         }\n     \n    +    // Counts the number of addresses added and removed during\n    +    // the last call to next. Used mainly for test purposes.\n    +    // See StasticHostProviderTest.\n    +    private int nextAdded = 0;\n    +    private int nextRemoved = 0;\n    +\n    +    public int getNextAdded() {\n    +        return nextAdded;\n    +    }\n    +\n    +    public int getNextRemoved() {\n    +        return nextRemoved;\n    +    }\n    +\n         public InetSocketAddress next(long spinDelay) {\n    -        ++currentIndex;\n    -        if (currentIndex == serverAddresses.size()) {\n    -            currentIndex = 0;\n    +        // Handle possible connection error by re-resolving hostname if possible\n    +        if (!connectedSinceNext) {\n    +            InetSocketAddress curAddr = serverAddresses.get(currentIndex);\n    +            String curHostString = getHostString(curAddr);\n    +            if (!curHostString.equals(curAddr.getAddress().getHostAddress())) {\n    +                LOG.info(\"Resolving again hostname: {}\", getHostString(curAddr));\n    +                try {\n    +                    int thePort = curAddr.getPort();\n    +                    InetAddress resolvedAddresses[] = InetAddress.getAllByName(curHostString);\n    +                    nextAdded = 0;\n    +                    nextRemoved = 0;\n    +                    if (resolvedAddresses.length == 1) {\n    +                        serverAddresses.set(currentIndex, new InetSocketAddress(resolvedAddresses[0], thePort));\n    +                        nextAdded = nextRemoved = 1;\n    +                        LOG.debug(\"Newly resolved address: {}\", resolvedAddresses[0]);\n    +                    } else {\n    +                        int i = 0;\n    +                        while (i < serverAddresses.size()) {\n    +                            if (getHostString(serverAddresses.get(i)).equals(curHostString) &&\n    --- End diff --\n    \n    Why don't we simplify things and just do this always? In other words, always remove all serverAddresses that correspond to the curHostString. That way if curHostString goes from resolving to many addresses to just 1, we remove all of them?\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2018-02-15T19:13:49.386+0000","updated":"2018-02-15T19:13:49.386+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/16366133","id":"16366133","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user afine commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/451#discussion_r168568596\n  \n    --- Diff: src/java/main/org/apache/zookeeper/client/StaticHostProvider.java ---\n    @@ -47,59 +51,169 @@\n     \n         private int currentIndex = -1;\n     \n    +    // Don't re-resolve on first next() call\n    +    private boolean connectedSinceNext = true;\n    +\n    +    private Resolver resolver;\n    +\n         /**\n          * Constructs a SimpleHostSet.\n    -     * \n    +     *\n          * @param serverAddresses\n          *            possibly unresolved ZooKeeper server addresses\n          * @throws IllegalArgumentException\n          *             if serverAddresses is empty or resolves to an empty list\n          */\n         public StaticHostProvider(Collection<InetSocketAddress> serverAddresses) {\n    +        this.resolver = new Resolver() {\n    +            @Override\n    +            public InetAddress[] getAllByName(String name) throws UnknownHostException {\n    +                return InetAddress.getAllByName(name);\n    +            }\n    +        };\n    +        init(serverAddresses);\n    +    }\n    +\n    +    /**\n    +     * Introduced for testing purposes. getAllByName() is a static method of InetAddress, therefore cannot be easily mocked.\n    +     * By abstraction of Resolver interface we can easily inject a mocked implementation in tests.\n    +     *\n    +     * @param serverAddresses\n    +     *            possibly unresolved ZooKeeper server addresses\n    +     * @param resolver\n    +     *            custom resolver implementation\n    +     * @throws IllegalArgumentException\n    +     *             if serverAddresses is empty or resolves to an empty list\n    +     */\n    +    public StaticHostProvider(Collection<InetSocketAddress> serverAddresses, Resolver resolver) {\n    +        this.resolver = resolver;\n    +        init(serverAddresses);\n    +    }\n    +\n    +    /**\n    +     * Common init method for all constructors.\n    +     * Resolve all unresolved server addresses, put them in a list and shuffle.\n    +     */\n    +    private void init(Collection<InetSocketAddress> serverAddresses) {\n             for (InetSocketAddress address : serverAddresses) {\n                 try {\n    -                InetAddress ia = address.getAddress();\n    -                InetAddress resolvedAddresses[] = InetAddress.getAllByName((ia != null) ? ia.getHostAddress() :\n    -                        address.getHostName());\n    +                InetAddress resolvedAddresses[] = this.resolver.getAllByName(getHostString(address));\n                     for (InetAddress resolvedAddress : resolvedAddresses) {\n    -                    // If hostName is null but the address is not, we can tell that\n    -                    // the hostName is an literal IP address. Then we can set the host string as the hostname\n    -                    // safely to avoid reverse DNS lookup.\n    -                    // As far as i know, the only way to check if the hostName is null is use toString().\n    -                    // Both the two implementations of InetAddress are final class, so we can trust the return value of\n    -                    // the toString() method.\n    -                    if (resolvedAddress.toString().startsWith(\"/\")\n    -                            && resolvedAddress.getAddress() != null) {\n    -                        this.serverAddresses.add(\n    -                                new InetSocketAddress(InetAddress.getByAddress(\n    -                                        address.getHostName(),\n    -                                        resolvedAddress.getAddress()),\n    -                                        address.getPort()));\n    -                    } else {\n    -                        this.serverAddresses.add(new InetSocketAddress(resolvedAddress.getHostAddress(), address.getPort()));\n    -                    }\n    +                    this.serverAddresses.add(new InetSocketAddress(resolvedAddress, address.getPort()));\n                     }\n                 } catch (UnknownHostException e) {\n                     LOG.error(\"Unable to connect to server: {}\", address, e);\n                 }\n             }\n    -        \n    +\n             if (this.serverAddresses.isEmpty()) {\n                 throw new IllegalArgumentException(\n                         \"A HostProvider may not be empty!\");\n             }\n    +\n             Collections.shuffle(this.serverAddresses);\n         }\n     \n    +    /**\n    +     * Evaluate to a hostname if one is available and otherwise it returns the\n    +     * string representation of the IP address.\n    +     *\n    +     * In Java 7, we have a method getHostString, but earlier versions do not support it.\n    +     * This method is to provide a replacement for InetSocketAddress.getHostString().\n    +     *\n    +     * @param addr\n    +     * @return Hostname string of address parameter\n    +     */\n    +    private String getHostString(InetSocketAddress addr) {\n    +        String hostString = \"\";\n    +\n    +        if (addr == null) {\n    +            return hostString;\n    +        }\n    +        if (!addr.isUnresolved()) {\n    +            InetAddress ia = addr.getAddress();\n    +\n    +            // If the string starts with '/', then it has no hostname\n    +            // and we want to avoid the reverse lookup, so we return\n    +            // the string representation of the address.\n    +            if (ia.toString().startsWith(\"/\")) {\n    +                hostString = ia.getHostAddress();\n    +            } else {\n    +                hostString = addr.getHostName();\n    +            }\n    +        } else {\n    +            // According to the Java 6 documentation, if the hostname is\n    +            // unresolved, then the string before the colon is the hostname.\n    +            String addrString = addr.toString();\n    +            hostString = addrString.substring(0, addrString.lastIndexOf(':'));\n    +        }\n    +\n    +        return hostString;\n    +    }\n    +\n         public int size() {\n             return serverAddresses.size();\n         }\n     \n    +    // Counts the number of addresses added and removed during\n    +    // the last call to next. Used mainly for test purposes.\n    +    // See StasticHostProviderTest.\n    +    private int nextAdded = 0;\n    +    private int nextRemoved = 0;\n    +\n    +    public int getNextAdded() {\n    +        return nextAdded;\n    +    }\n    +\n    +    public int getNextRemoved() {\n    +        return nextRemoved;\n    +    }\n    +\n         public InetSocketAddress next(long spinDelay) {\n    -        ++currentIndex;\n    -        if (currentIndex == serverAddresses.size()) {\n    -            currentIndex = 0;\n    +        // Handle possible connection error by re-resolving hostname if possible\n    +        if (!connectedSinceNext) {\n    +            InetSocketAddress curAddr = serverAddresses.get(currentIndex);\n    +            String curHostString = getHostString(curAddr);\n    +            if (!curHostString.equals(curAddr.getAddress().getHostAddress())) {\n    +                LOG.info(\"Resolving again hostname: {}\", getHostString(curAddr));\n    --- End diff --\n    \n    can we save a call to `getHostString` by using `curHostString`?\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2018-02-15T19:13:49.422+0000","updated":"2018-02-15T19:13:49.422+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/16366134","id":"16366134","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user afine commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/451#discussion_r168572502\n  \n    --- Diff: src/java/test/org/apache/zookeeper/test/ClientPortBindTest.java ---\n    @@ -104,7 +104,7 @@ public void testBindByAddress() throws Exception {\n             try {\n                 startSignal.await(CONNECTION_TIMEOUT,\n                         TimeUnit.MILLISECONDS);\n    -            Assert.assertTrue(\"count == 0\", startSignal.getCount() == 0);\n    +            Assert.assertTrue(\"count == \" + startSignal.getCount(), startSignal.getCount() == 0);\n    --- End diff --\n    \n    I'm not a huge fan of calling `getCount` more than once, since I think the value could change between invocations. Why not just use the return value from `await` in the line above? \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2018-02-15T19:13:49.440+0000","updated":"2018-02-15T19:13:49.440+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/16366135","id":"16366135","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user afine commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/451#discussion_r168576884\n  \n    --- Diff: src/java/test/org/apache/zookeeper/test/StaticHostProviderTest.java ---\n    @@ -119,6 +120,68 @@ public void testTwoInvalidHostAddresses() {\n             new StaticHostProvider(list);\n         }\n     \n    +    @Test\n    +    public void testReResolvingSingle() {\n    +        byte size = 1;\n    +        ArrayList<InetSocketAddress> list = new ArrayList<InetSocketAddress>(size);\n    +\n    +        // Test a hostname that resolves to a single address\n    +        list.clear();\n    --- End diff --\n    \n    do we need this?\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2018-02-15T19:13:49.441+0000","updated":"2018-02-15T19:13:49.441+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/16366136","id":"16366136","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user afine commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/451#discussion_r168575513\n  \n    --- Diff: src/java/test/org/apache/zookeeper/test/ReadOnlyModeTest.java ---\n    @@ -239,13 +243,13 @@ public void testSessionEstablishment() throws Exception {\n         public void testSeekForRwServer() throws Exception {\n     \n             // setup the logger to capture all logs\n    -        Layout layout = Logger.getRootLogger().getAppender(\"CONSOLE\")\n    +        Layout layout = org.apache.log4j.Logger.getRootLogger().getAppender(\"CONSOLE\")\n    --- End diff --\n    \n    I guess my real question is, do we need any of the changes in this file?\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2018-02-15T19:13:49.465+0000","updated":"2018-02-15T19:13:49.465+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/16366137","id":"16366137","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user afine commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/451#discussion_r168576090\n  \n    --- Diff: src/java/main/org/apache/zookeeper/client/StaticHostProvider.java ---\n    @@ -47,59 +51,169 @@\n     \n         private int currentIndex = -1;\n     \n    +    // Don't re-resolve on first next() call\n    +    private boolean connectedSinceNext = true;\n    +\n    +    private Resolver resolver;\n    +\n         /**\n          * Constructs a SimpleHostSet.\n    -     * \n    +     *\n          * @param serverAddresses\n          *            possibly unresolved ZooKeeper server addresses\n          * @throws IllegalArgumentException\n          *             if serverAddresses is empty or resolves to an empty list\n          */\n         public StaticHostProvider(Collection<InetSocketAddress> serverAddresses) {\n    +        this.resolver = new Resolver() {\n    +            @Override\n    +            public InetAddress[] getAllByName(String name) throws UnknownHostException {\n    +                return InetAddress.getAllByName(name);\n    +            }\n    +        };\n    +        init(serverAddresses);\n    +    }\n    +\n    +    /**\n    +     * Introduced for testing purposes. getAllByName() is a static method of InetAddress, therefore cannot be easily mocked.\n    +     * By abstraction of Resolver interface we can easily inject a mocked implementation in tests.\n    +     *\n    +     * @param serverAddresses\n    +     *            possibly unresolved ZooKeeper server addresses\n    +     * @param resolver\n    +     *            custom resolver implementation\n    +     * @throws IllegalArgumentException\n    +     *             if serverAddresses is empty or resolves to an empty list\n    +     */\n    +    public StaticHostProvider(Collection<InetSocketAddress> serverAddresses, Resolver resolver) {\n    +        this.resolver = resolver;\n    +        init(serverAddresses);\n    +    }\n    +\n    +    /**\n    +     * Common init method for all constructors.\n    +     * Resolve all unresolved server addresses, put them in a list and shuffle.\n    +     */\n    +    private void init(Collection<InetSocketAddress> serverAddresses) {\n             for (InetSocketAddress address : serverAddresses) {\n                 try {\n    -                InetAddress ia = address.getAddress();\n    -                InetAddress resolvedAddresses[] = InetAddress.getAllByName((ia != null) ? ia.getHostAddress() :\n    -                        address.getHostName());\n    +                InetAddress resolvedAddresses[] = this.resolver.getAllByName(getHostString(address));\n                     for (InetAddress resolvedAddress : resolvedAddresses) {\n    -                    // If hostName is null but the address is not, we can tell that\n    -                    // the hostName is an literal IP address. Then we can set the host string as the hostname\n    -                    // safely to avoid reverse DNS lookup.\n    -                    // As far as i know, the only way to check if the hostName is null is use toString().\n    -                    // Both the two implementations of InetAddress are final class, so we can trust the return value of\n    -                    // the toString() method.\n    -                    if (resolvedAddress.toString().startsWith(\"/\")\n    -                            && resolvedAddress.getAddress() != null) {\n    -                        this.serverAddresses.add(\n    -                                new InetSocketAddress(InetAddress.getByAddress(\n    -                                        address.getHostName(),\n    -                                        resolvedAddress.getAddress()),\n    -                                        address.getPort()));\n    -                    } else {\n    -                        this.serverAddresses.add(new InetSocketAddress(resolvedAddress.getHostAddress(), address.getPort()));\n    -                    }\n    +                    this.serverAddresses.add(new InetSocketAddress(resolvedAddress, address.getPort()));\n                     }\n                 } catch (UnknownHostException e) {\n                     LOG.error(\"Unable to connect to server: {}\", address, e);\n                 }\n             }\n    -        \n    +\n             if (this.serverAddresses.isEmpty()) {\n                 throw new IllegalArgumentException(\n                         \"A HostProvider may not be empty!\");\n             }\n    +\n             Collections.shuffle(this.serverAddresses);\n         }\n     \n    +    /**\n    +     * Evaluate to a hostname if one is available and otherwise it returns the\n    +     * string representation of the IP address.\n    +     *\n    +     * In Java 7, we have a method getHostString, but earlier versions do not support it.\n    +     * This method is to provide a replacement for InetSocketAddress.getHostString().\n    +     *\n    +     * @param addr\n    +     * @return Hostname string of address parameter\n    +     */\n    +    private String getHostString(InetSocketAddress addr) {\n    +        String hostString = \"\";\n    +\n    +        if (addr == null) {\n    +            return hostString;\n    +        }\n    +        if (!addr.isUnresolved()) {\n    +            InetAddress ia = addr.getAddress();\n    +\n    +            // If the string starts with '/', then it has no hostname\n    +            // and we want to avoid the reverse lookup, so we return\n    +            // the string representation of the address.\n    +            if (ia.toString().startsWith(\"/\")) {\n    +                hostString = ia.getHostAddress();\n    +            } else {\n    +                hostString = addr.getHostName();\n    +            }\n    +        } else {\n    +            // According to the Java 6 documentation, if the hostname is\n    +            // unresolved, then the string before the colon is the hostname.\n    +            String addrString = addr.toString();\n    +            hostString = addrString.substring(0, addrString.lastIndexOf(':'));\n    +        }\n    +\n    +        return hostString;\n    +    }\n    +\n         public int size() {\n             return serverAddresses.size();\n         }\n     \n    +    // Counts the number of addresses added and removed during\n    +    // the last call to next. Used mainly for test purposes.\n    +    // See StasticHostProviderTest.\n    +    private int nextAdded = 0;\n    --- End diff --\n    \n    instead of exposing all these metrics, which involve making changes to application logic. Why don't we just expose the `serverAddresses` to the test?\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2018-02-15T19:13:49.603+0000","updated":"2018-02-15T19:13:49.603+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/16366143","id":"16366143","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user anmolnar commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/451#discussion_r168580127\n  \n    --- Diff: src/java/main/org/apache/zookeeper/client/StaticHostProvider.java ---\n    @@ -58,48 +61,122 @@\n         public StaticHostProvider(Collection<InetSocketAddress> serverAddresses) {\n             for (InetSocketAddress address : serverAddresses) {\n                 try {\n    -                InetAddress ia = address.getAddress();\n    -                InetAddress resolvedAddresses[] = InetAddress.getAllByName((ia != null) ? ia.getHostAddress() :\n    -                        address.getHostName());\n    +                InetAddress resolvedAddresses[] = InetAddress.getAllByName(getHostString(address));\n                     for (InetAddress resolvedAddress : resolvedAddresses) {\n    -                    // If hostName is null but the address is not, we can tell that\n    -                    // the hostName is an literal IP address. Then we can set the host string as the hostname\n    -                    // safely to avoid reverse DNS lookup.\n    -                    // As far as i know, the only way to check if the hostName is null is use toString().\n    -                    // Both the two implementations of InetAddress are final class, so we can trust the return value of\n    -                    // the toString() method.\n    -                    if (resolvedAddress.toString().startsWith(\"/\")\n    -                            && resolvedAddress.getAddress() != null) {\n    -                        this.serverAddresses.add(\n    -                                new InetSocketAddress(InetAddress.getByAddress(\n    -                                        address.getHostName(),\n    -                                        resolvedAddress.getAddress()),\n    -                                        address.getPort()));\n    -                    } else {\n    -                        this.serverAddresses.add(new InetSocketAddress(resolvedAddress.getHostAddress(), address.getPort()));\n    -                    }\n    +                    this.serverAddresses.add(new InetSocketAddress(resolvedAddress, address.getPort()));\n                     }\n                 } catch (UnknownHostException e) {\n                     LOG.error(\"Unable to connect to server: {}\", address, e);\n                 }\n             }\n    -        \n    +\n             if (this.serverAddresses.isEmpty()) {\n                 throw new IllegalArgumentException(\n                         \"A HostProvider may not be empty!\");\n             }\n             Collections.shuffle(this.serverAddresses);\n         }\n     \n    +    /**\n    +     * Evaluate to a hostname if one is available and otherwise it returns the\n    +     * string representation of the IP address.\n    +     *\n    +     * In Java 7, we have a method getHostString, but earlier versions do not support it.\n    +     * This method is to provide a replacement for InetSocketAddress.getHostString().\n    +     *\n    +     * @param addr\n    +     * @return Hostname string of address parameter\n    +     */\n    +    private String getHostString(InetSocketAddress addr) {\n    +        String hostString = \"\";\n    +\n    +        if (addr == null) {\n    +            return hostString;\n    +        }\n    +        if (!addr.isUnresolved()) {\n    +            InetAddress ia = addr.getAddress();\n    +\n    +            // If the string starts with '/', then it has no hostname\n    +            // and we want to avoid the reverse lookup, so we return\n    +            // the string representation of the address.\n    +            if (ia.toString().startsWith(\"/\")) {\n    +                hostString = ia.getHostAddress();\n    +            } else {\n    +                hostString = addr.getHostName();\n    +            }\n    +        } else {\n    +            // According to the Java 6 documentation, if the hostname is\n    +            // unresolved, then the string before the colon is the hostname.\n    +            String addrString = addr.toString();\n    +            hostString = addrString.substring(0, addrString.lastIndexOf(':'));\n    +        }\n    +\n    +        return hostString;\n    +    }\n    +\n         public int size() {\n             return serverAddresses.size();\n         }\n     \n    +    // Counts the number of addresses added and removed during\n    +    // the last call to next. Used mainly for test purposes.\n    +    // See StasticHostProviderTest.\n    +    private int nextAdded = 0;\n    +    private int nextRemoved = 0;\n    +\n    +    public int getNextAdded() {\n    +        return nextAdded;\n    +    }\n    +\n    +    public int getNextRemoved() {\n    +        return nextRemoved;\n    +    }\n    +\n         public InetSocketAddress next(long spinDelay) {\n    -        ++currentIndex;\n    -        if (currentIndex == serverAddresses.size()) {\n    -            currentIndex = 0;\n    +        // Handle possible connection error by re-resolving hostname if possible\n    +        if (!connectedSinceNext) {\n    +            InetSocketAddress curAddr = serverAddresses.get(currentIndex);\n    +            String curHostString = getHostString(curAddr);\n    +            if (!curHostString.equals(curAddr.getAddress().getHostAddress())) {\n    +                LOG.info(\"Resolving again hostname: {}\", getHostString(curAddr));\n    +                try {\n    +                    int thePort = curAddr.getPort();\n    +                    InetAddress resolvedAddresses[] = InetAddress.getAllByName(curHostString);\n    +                    nextAdded = 0;\n    +                    nextRemoved = 0;\n    +                    if (resolvedAddresses.length == 1) {\n    +                        serverAddresses.set(currentIndex, new InetSocketAddress(resolvedAddresses[0], thePort));\n    +                        nextAdded = nextRemoved = 1;\n    +                        LOG.debug(\"Newly resolved address: {}\", resolvedAddresses[0]);\n    +                    } else {\n    +                        int i = 0;\n    +                        while (i < serverAddresses.size()) {\n    +                            if (getHostString(serverAddresses.get(i)).equals(curHostString) &&\n    --- End diff --\n    \n    That's exactly the point. \r\n    (think I've already suggested the same thing in an outdated post)\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2018-02-15T19:19:17.814+0000","updated":"2018-02-15T19:19:17.814+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/16367329","id":"16367329","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user anmolnar commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/451#discussion_r168763559\n  \n    --- Diff: src/java/test/org/apache/zookeeper/test/ReadOnlyModeTest.java ---\n    @@ -239,13 +243,13 @@ public void testSessionEstablishment() throws Exception {\n         public void testSeekForRwServer() throws Exception {\n     \n             // setup the logger to capture all logs\n    -        Layout layout = Logger.getRootLogger().getAppender(\"CONSOLE\")\n    +        Layout layout = org.apache.log4j.Logger.getRootLogger().getAppender(\"CONSOLE\")\n    --- End diff --\n    \n    Makes sense. I revert the changes.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2018-02-16T14:03:58.336+0000","updated":"2018-02-16T14:03:58.336+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/16367332","id":"16367332","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user anmolnar commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/451#discussion_r168764368\n  \n    --- Diff: src/java/test/org/apache/zookeeper/test/StaticHostProviderTest.java ---\n    @@ -119,6 +120,68 @@ public void testTwoInvalidHostAddresses() {\n             new StaticHostProvider(list);\n         }\n     \n    +    @Test\n    +    public void testReResolvingSingle() {\n    +        byte size = 1;\n    +        ArrayList<InetSocketAddress> list = new ArrayList<InetSocketAddress>(size);\n    +\n    +        // Test a hostname that resolves to a single address\n    +        list.clear();\n    --- End diff --\n    \n    Removed.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2018-02-16T14:07:31.875+0000","updated":"2018-02-16T14:07:31.875+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/16369422","id":"16369422","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=eronwright","name":"eronwright","key":"eronwright","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10450","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10450","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10450","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10450"},"displayName":"Eron Wright ","active":true,"timeZone":"America/Los_Angeles"},"body":"Linking to an earlier related issue.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=eronwright","name":"eronwright","key":"eronwright","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10450","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10450","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10450","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10450"},"displayName":"Eron Wright ","active":true,"timeZone":"America/Los_Angeles"},"created":"2018-02-19T19:03:44.285+0000","updated":"2018-02-19T19:03:44.285+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/16392126","id":"16392126","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user ijuma commented on the issue:\n\n    https://github.com/apache/zookeeper/pull/451\n  \n    Thanks for picking this up @anmolnar, looking forward to this being fixed. :)\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2018-03-08T23:49:22.615+0000","updated":"2018-03-08T23:49:22.615+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/16393545","id":"16393545","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user anmolnar commented on the issue:\n\n    https://github.com/apache/zookeeper/pull/451\n  \n    @ijuma Sure, no problem.\r\n    I'm waiting for some feedback from the community here and on the mailing list and I hope I can commit soon.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2018-03-09T21:02:08.559+0000","updated":"2018-03-09T21:02:08.559+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/16406541","id":"16406541","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user ijuma commented on the issue:\n\n    https://github.com/apache/zookeeper/pull/451\n  \n    @anmolnar, it's been more than 1 month since the last comment on this PR. Is there anything that still needs to be addressed? The original PR was submitted in January 2017 and it got stalled after a while, I'm hoping the same doesn't happen here. :)\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2018-03-20T15:52:19.601+0000","updated":"2018-03-20T15:52:19.601+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/16406585","id":"16406585","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user anmolnar commented on the issue:\n\n    https://github.com/apache/zookeeper/pull/451\n  \n    @ijuma I feel your pain. :)\r\n    No worries, I'm on it. Doing my best to push committers and others to review changes.\r\n    \r\n    Additionally I'd like to make a small refactoring to the proposed logic before committing, because I'm not entirely convinced about this manual caching/shuffling logic that was implemented originally.\r\n    \r\n    You can see the details in one of my comments above and on the `dev` mailing list.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2018-03-20T16:17:02.160+0000","updated":"2018-03-20T16:17:02.160+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/16411243","id":"16411243","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user anmolnar commented on the issue:\n\n    https://github.com/apache/zookeeper/pull/451\n  \n    @afine @ijuma I've finished refactoring of StaticHostProvider.\r\n    \r\n    The implementation follows that I explained in my email as **Option-3**:\r\n    \r\n    > - Do not cache IPs, \r\n    > - Shuffle the names and resolve with getAllByName() every time when next() is called,\r\n    > - Use getAllByName(), but shuffle the list and return the first IP to properly handle hostnames associated with multiple IPs,\r\n    > - JDK's built-in caching will prevent name servers from being flooded and will do the re-resolution automatically when cache expires,\r\n    \r\n    The `Resolver` interface which is also introduced in this patch is the solution for the problem that @afine raised: to properly mock out the `getAllByName()` call in unit tests.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2018-03-23T11:18:10.760+0000","updated":"2018-03-23T11:18:10.760+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/16490566","id":"16490566","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"body":"-1 overall.  GitHub Pull Request  Build\n      \n\n    +1 @author.  The patch does not contain any @author tags.\n\n    +1 tests included.  The patch appears to include 9 new or modified tests.\n\n    +1 javadoc.  The javadoc tool did not generate any warning messages.\n\n    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.\n\n    +1 findbugs.  The patch does not introduce any new Findbugs (version 3.0.1) warnings.\n\n    +1 release audit.  The applied patch does not increase the total number of release audit warnings.\n\n    -1 core tests.  The patch failed core unit tests.\n\n    +1 contrib tests.  The patch passed contrib unit tests.\n\nTest results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/1756//testReport/\nFindbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/1756//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html\nConsole output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/1756//console\n\nThis message is automatically generated.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"created":"2018-05-25T11:05:51.485+0000","updated":"2018-05-25T11:05:51.485+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/16490741","id":"16490741","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"body":"+1 overall.  GitHub Pull Request  Build\n      \n\n    +1 @author.  The patch does not contain any @author tags.\n\n    +1 tests included.  The patch appears to include 9 new or modified tests.\n\n    +1 javadoc.  The javadoc tool did not generate any warning messages.\n\n    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.\n\n    +1 findbugs.  The patch does not introduce any new Findbugs (version 3.0.1) warnings.\n\n    +1 release audit.  The applied patch does not increase the total number of release audit warnings.\n\n    +1 core tests.  The patch passed core unit tests.\n\n    +1 contrib tests.  The patch passed contrib unit tests.\n\nTest results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/1757//testReport/\nFindbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/1757//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html\nConsole output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/1757//console\n\nThis message is automatically generated.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"created":"2018-05-25T13:39:26.161+0000","updated":"2018-05-25T13:39:26.161+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/16492555","id":"16492555","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"body":"+1 overall.  GitHub Pull Request  Build\n      \n\n    +1 @author.  The patch does not contain any @author tags.\n\n    +1 tests included.  The patch appears to include 9 new or modified tests.\n\n    +1 javadoc.  The javadoc tool did not generate any warning messages.\n\n    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.\n\n    +1 findbugs.  The patch does not introduce any new Findbugs (version 3.0.1) warnings.\n\n    +1 release audit.  The applied patch does not increase the total number of release audit warnings.\n\n    +1 core tests.  The patch passed core unit tests.\n\n    +1 contrib tests.  The patch passed contrib unit tests.\n\nTest results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/1759//testReport/\nFindbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/1759//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html\nConsole output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/1759//console\n\nThis message is automatically generated.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"created":"2018-05-28T11:14:33.869+0000","updated":"2018-05-28T11:14:33.869+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/16492825","id":"16492825","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hanm","name":"hanm","key":"hanm","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hanm&avatarId=26946","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hanm&avatarId=26946","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hanm&avatarId=26946","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hanm&avatarId=26946"},"displayName":"Michael Han","active":true,"timeZone":"America/Vancouver"},"body":"Patch committed to branch-3.4 as [https://github.com/apache/zookeeper/commit/2e26c8836edc800c60b204a1d3da0285edb415d6]\r\n\r\nThis Jira will be resolved after the patch is ported to branch-3.5 and master.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hanm","name":"hanm","key":"hanm","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hanm&avatarId=26946","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hanm&avatarId=26946","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hanm&avatarId=26946","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hanm&avatarId=26946"},"displayName":"Michael Han","active":true,"timeZone":"America/Vancouver"},"created":"2018-05-28T16:51:32.596+0000","updated":"2018-05-28T16:51:32.596+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/16493723","id":"16493723","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"body":"-1 overall.  GitHub Pull Request  Build\n      \n\n    +1 @author.  The patch does not contain any @author tags.\n\n    +1 tests included.  The patch appears to include 3 new or modified tests.\n\n    +1 javadoc.  The javadoc tool did not generate any warning messages.\n\n    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.\n\n    +1 findbugs.  The patch does not introduce any new Findbugs (version 3.0.1) warnings.\n\n    +1 release audit.  The applied patch does not increase the total number of release audit warnings.\n\n    -1 core tests.  The patch failed core unit tests.\n\n    +1 contrib tests.  The patch passed contrib unit tests.\n\nTest results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/1765//testReport/\nFindbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/1765//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html\nConsole output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/1765//console\n\nThis message is automatically generated.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"created":"2018-05-29T15:40:43.103+0000","updated":"2018-05-29T15:40:43.103+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/16493732","id":"16493732","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"body":"+1 overall.  GitHub Pull Request  Build\n      \n\n    +1 @author.  The patch does not contain any @author tags.\n\n    +1 tests included.  The patch appears to include 3 new or modified tests.\n\n    +1 javadoc.  The javadoc tool did not generate any warning messages.\n\n    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.\n\n    +1 findbugs.  The patch does not introduce any new Findbugs (version 3.0.1) warnings.\n\n    +1 release audit.  The applied patch does not increase the total number of release audit warnings.\n\n    +1 core tests.  The patch passed core unit tests.\n\n    +1 contrib tests.  The patch passed contrib unit tests.\n\nTest results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/1766//testReport/\nFindbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/1766//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html\nConsole output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/1766//console\n\nThis message is automatically generated.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"created":"2018-05-29T15:44:47.948+0000","updated":"2018-05-29T15:44:47.948+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/16500027","id":"16500027","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"body":"+1 overall.  GitHub Pull Request  Build\n      \n\n    +1 @author.  The patch does not contain any @author tags.\n\n    +1 tests included.  The patch appears to include 3 new or modified tests.\n\n    +1 javadoc.  The javadoc tool did not generate any warning messages.\n\n    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.\n\n    +1 findbugs.  The patch does not introduce any new Findbugs (version 3.0.1) warnings.\n\n    +1 release audit.  The applied patch does not increase the total number of release audit warnings.\n\n    +1 core tests.  The patch passed core unit tests.\n\n    +1 contrib tests.  The patch passed contrib unit tests.\n\nTest results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/1787//testReport/\nFindbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/1787//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html\nConsole output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/1787//console\n\nThis message is automatically generated.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"created":"2018-06-04T10:38:44.448+0000","updated":"2018-06-04T10:38:44.448+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/16500057","id":"16500057","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"body":"-1 overall.  GitHub Pull Request  Build\n      \n\n    +1 @author.  The patch does not contain any @author tags.\n\n    +1 tests included.  The patch appears to include 3 new or modified tests.\n\n    +1 javadoc.  The javadoc tool did not generate any warning messages.\n\n    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.\n\n    +1 findbugs.  The patch does not introduce any new Findbugs (version 3.0.1) warnings.\n\n    +1 release audit.  The applied patch does not increase the total number of release audit warnings.\n\n    -1 core tests.  The patch failed core unit tests.\n\n    +1 contrib tests.  The patch passed contrib unit tests.\n\nTest results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/1788//testReport/\nFindbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/1788//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html\nConsole output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/1788//console\n\nThis message is automatically generated.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"created":"2018-06-04T10:53:37.445+0000","updated":"2018-06-04T10:53:37.445+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/16500128","id":"16500128","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"body":"+1 overall.  GitHub Pull Request  Build\n      \n\n    +1 @author.  The patch does not contain any @author tags.\n\n    +1 tests included.  The patch appears to include 3 new or modified tests.\n\n    +1 javadoc.  The javadoc tool did not generate any warning messages.\n\n    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.\n\n    +1 findbugs.  The patch does not introduce any new Findbugs (version 3.0.1) warnings.\n\n    +1 release audit.  The applied patch does not increase the total number of release audit warnings.\n\n    +1 core tests.  The patch passed core unit tests.\n\n    +1 contrib tests.  The patch passed contrib unit tests.\n\nTest results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/1789//testReport/\nFindbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/1789//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html\nConsole output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/1789//console\n\nThis message is automatically generated.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"created":"2018-06-04T12:05:56.739+0000","updated":"2018-06-04T12:05:56.739+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/16515635","id":"16515635","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"body":"+1 overall.  GitHub Pull Request  Build\n      \n\n    +1 @author.  The patch does not contain any @author tags.\n\n    +1 tests included.  The patch appears to include 3 new or modified tests.\n\n    +1 javadoc.  The javadoc tool did not generate any warning messages.\n\n    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.\n\n    +1 findbugs.  The patch does not introduce any new Findbugs (version 3.0.1) warnings.\n\n    +1 release audit.  The applied patch does not increase the total number of release audit warnings.\n\n    +1 core tests.  The patch passed core unit tests.\n\n    +1 contrib tests.  The patch passed contrib unit tests.\n\nTest results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/1842//testReport/\nFindbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/1842//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html\nConsole output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/1842//console\n\nThis message is automatically generated.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"created":"2018-06-18T12:17:06.521+0000","updated":"2018-06-18T12:17:06.521+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/16520003","id":"16520003","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hanm","name":"hanm","key":"hanm","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hanm&avatarId=26946","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hanm&avatarId=26946","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hanm&avatarId=26946","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hanm&avatarId=26946"},"displayName":"Michael Han","active":true,"timeZone":"America/Vancouver"},"body":"Temporary resolve issue for 3.4.13 so we can generate release note. Will reopen issue for 3.5 and 3.6.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hanm","name":"hanm","key":"hanm","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hanm&avatarId=26946","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hanm&avatarId=26946","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hanm&avatarId=26946","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hanm&avatarId=26946"},"displayName":"Michael Han","active":true,"timeZone":"America/Vancouver"},"created":"2018-06-22T04:30:06.433+0000","updated":"2018-06-22T04:30:06.433+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/16520818","id":"16520818","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hanm","name":"hanm","key":"hanm","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hanm&avatarId=26946","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hanm&avatarId=26946","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hanm&avatarId=26946","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hanm&avatarId=26946"},"displayName":"Michael Han","active":true,"timeZone":"America/Vancouver"},"body":"again need to temporarily resolve the issue to get the right release notes for 3.4.13.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hanm","name":"hanm","key":"hanm","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hanm&avatarId=26946","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hanm&avatarId=26946","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hanm&avatarId=26946","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hanm&avatarId=26946"},"displayName":"Michael Han","active":true,"timeZone":"America/Vancouver"},"created":"2018-06-22T22:11:10.036+0000","updated":"2018-06-22T22:11:10.036+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/16540221","id":"16540221","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"body":"-1 overall.  GitHub Pull Request  Build\n      \n\n    +1 @author.  The patch does not contain any @author tags.\n\n    +1 tests included.  The patch appears to include 3 new or modified tests.\n\n    +1 javadoc.  The javadoc tool did not generate any warning messages.\n\n    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.\n\n    -1 findbugs.  The patch appears to introduce 1 new Findbugs (version 3.0.1) warnings.\n\n    +1 release audit.  The applied patch does not increase the total number of release audit warnings.\n\n    -1 core tests.  The patch failed core unit tests.\n\n    -1 contrib tests.  The patch failed contrib unit tests.\n\nTest results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/1924//testReport/\nFindbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/1924//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html\nConsole output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/1924//console\n\nThis message is automatically generated.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"created":"2018-07-11T15:07:20.563+0000","updated":"2018-07-11T15:07:20.563+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/16540621","id":"16540621","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"body":"-1 overall.  GitHub Pull Request  Build\n      \n\n    +1 @author.  The patch does not contain any @author tags.\n\n    +1 tests included.  The patch appears to include 3 new or modified tests.\n\n    +1 javadoc.  The javadoc tool did not generate any warning messages.\n\n    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.\n\n    -1 findbugs.  The patch appears to introduce 1 new Findbugs (version 3.0.1) warnings.\n\n    +1 release audit.  The applied patch does not increase the total number of release audit warnings.\n\n    -1 core tests.  The patch failed core unit tests.\n\n    +1 contrib tests.  The patch passed contrib unit tests.\n\nTest results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/1927//testReport/\nFindbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/1927//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html\nConsole output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/1927//console\n\nThis message is automatically generated.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"created":"2018-07-11T20:40:26.457+0000","updated":"2018-07-11T20:40:26.457+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/16541853","id":"16541853","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"body":"-1 overall.  GitHub Pull Request  Build\n      \n\n    +1 @author.  The patch does not contain any @author tags.\n\n    +1 tests included.  The patch appears to include 3 new or modified tests.\n\n    +1 javadoc.  The javadoc tool did not generate any warning messages.\n\n    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.\n\n    -1 findbugs.  The patch appears to introduce 1 new Findbugs (version 3.0.1) warnings.\n\n    +1 release audit.  The applied patch does not increase the total number of release audit warnings.\n\n    +1 core tests.  The patch passed core unit tests.\n\n    +1 contrib tests.  The patch passed contrib unit tests.\n\nTest results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/1930//testReport/\nFindbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/1930//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html\nConsole output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/1930//console\n\nThis message is automatically generated.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"created":"2018-07-12T15:55:37.340+0000","updated":"2018-07-12T15:55:37.340+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/16542903","id":"16542903","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"body":"+1 overall.  GitHub Pull Request  Build\n      \n\n    +1 @author.  The patch does not contain any @author tags.\n\n    +1 tests included.  The patch appears to include 3 new or modified tests.\n\n    +1 javadoc.  The javadoc tool did not generate any warning messages.\n\n    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.\n\n    +1 findbugs.  The patch does not introduce any new Findbugs (version 3.0.1) warnings.\n\n    +1 release audit.  The applied patch does not increase the total number of release audit warnings.\n\n    +1 core tests.  The patch passed core unit tests.\n\n    +1 contrib tests.  The patch passed contrib unit tests.\n\nTest results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/1934//testReport/\nFindbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/1934//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html\nConsole output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/1934//console\n\nThis message is automatically generated.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"created":"2018-07-13T11:19:05.050+0000","updated":"2018-07-13T11:19:05.050+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/comment/16544766","id":"16544766","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hanm","name":"hanm","key":"hanm","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hanm&avatarId=26946","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hanm&avatarId=26946","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hanm&avatarId=26946","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hanm&avatarId=26946"},"displayName":"Michael Han","active":true,"timeZone":"America/Vancouver"},"body":"committed to master: https://github.com/apache/zookeeper/commit/0a311873deb1847703c9b62716c626ce43d4ba48\r\nbranch-3.5: \r\nhttps://github.com/apache/zookeeper/commit/1e65b9f4873fc995308972433ea8a664e98fe41f\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hanm","name":"hanm","key":"hanm","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hanm&avatarId=26946","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hanm&avatarId=26946","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hanm&avatarId=26946","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hanm&avatarId=26946"},"displayName":"Michael Han","active":true,"timeZone":"America/Vancouver"},"created":"2018-07-16T03:48:41.160+0000","updated":"2018-07-16T03:48:41.160+0000"}],"maxResults":175,"total":175,"startAt":0},"votes":{"self":"https://issues.apache.org/jira/rest/api/2/issue/ZOOKEEPER-2184/votes","votes":16,"hasVoted":false},"worklog":{"startAt":0,"maxResults":20,"total":62,"worklogs":[{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/worklog/101041","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user tophei commented on the issue:\n\n    https://github.com/apache/zookeeper/pull/150\n  \n    We were recently run into this issue in cloud env. \r\n    Specifically, we have a kafka cluster setup in cloud, and it turns out to be a failure when the zookeeper node is replaced, namely the ip changed while the hostname remains same. We have patched this changes but it seems still not works. While the new zk node ip can be re-resolved and kafka can establish connection to zk node, but zk client seems not able to read content from the connection. Anyone encounters similar issue? \r\n    \r\n    Pasted the log from kafka server.\r\n    \r\n    [2018-05-11 03:47:46,806] WARN SASL configuration failed: javax.security.auth.login.LoginException: No JAAS configuration section named 'Client' was found in specified JAAS configuration file: '/usr/share/kafka/config/kafka_server_jaas.\r\n    conf'. Will continue connection to Zookeeper server without SASL authentication, if Zookeeper server allows it. (org.apache.zookeeper.ClientCnxn)\r\n    [2018-05-11 03:47:46,806] ERROR [ZooKeeperClient] Auth failed. (kafka.zookeeper.ZooKeeperClient)\r\n    [2018-05-11 03:47:46,806] ERROR [ZooKeeperClient] Auth failed. (kafka.zookeeper.ZooKeeperClient)\r\n    [2018-05-11 03:47:46,806] INFO Opening socket connection to server host.name/10.147.164.83:2181 (org.apache.zookeeper.ClientCnxn)\r\n    [2018-05-11 03:47:49,815] WARN Session 0x1634d42d88a001e for server null, unexpected error, closing socket connection and attempting reconnect (org.apache.zookeeper.ClientCnxn)\r\n    java.net.NoRouteToHostException: No route to host\r\n            at sun.nio.ch.SocketChannelImpl.checkConnect(Native Method)\r\n            at sun.nio.ch.SocketChannelImpl.finishConnect(SocketChannelImpl.java:717)\r\n            at org.apache.zookeeper.ClientCnxnSocketNIO.doTransport(ClientCnxnSocketNIO.java:361)\r\n            at org.apache.zookeeper.ClientCnxn$SendThread.run(ClientCnxn.java:1141)\r\n    [2018-05-11 03:47:50,667] INFO Resolving again hostname: host.name (org.apache.zookeeper.client.StaticHostProvider)\r\n    [2018-05-11 03:47:50,667] WARN Cannot re-resolve server: host.name/10.147.164.83:2181 (org.apache.zookeeper.client.StaticHostProvider)\r\n    java.net.UnknownHostException: host.name\r\n            at java.net.InetAddress.getAllByName0(InetAddress.java:1280)\r\n            at java.net.InetAddress.getAllByName(InetAddress.java:1192)\r\n            at java.net.InetAddress.getAllByName(InetAddress.java:1126)\r\n            at org.apache.zookeeper.client.StaticHostProvider.next(StaticHostProvider.java:142)\r\n            at org.apache.zookeeper.ClientCnxn$SendThread.startConnect(ClientCnxn.java:997)\r\n            at org.apache.zookeeper.ClientCnxn$SendThread.run(ClientCnxn.java:1060)\r\n    [2018-05-11 03:47:51,668] WARN SASL configuration failed: javax.security.auth.login.LoginException: No JAAS configuration section named 'Client' was found in specified JAAS configuration file: '/usr/share/kafka/config/kafka_server_jaas.\r\n    conf'. Will continue connection to Zookeeper server without SASL authentication, if Zookeeper server allows it. (org.apache.zookeeper.ClientCnxn)\r\n    [2018-05-11 03:47:51,668] ERROR [ZooKeeperClient] Auth failed. (kafka.zookeeper.ZooKeeperClient)\r\n    [2018-05-11 03:47:51,668] ERROR [ZooKeeperClient] Auth failed. (kafka.zookeeper.ZooKeeperClient)\r\n    [2018-05-11 03:47:51,668] INFO Opening socket connection to server host.name/10.147.164.83:2181 (org.apache.zookeeper.ClientCnxn)\r\n    [2018-05-11 03:47:52,822] WARN Session 0x1634d42d88a001e for server null, unexpected error, closing socket connection and attempting reconnect (org.apache.zookeeper.ClientCnxn)\r\n    java.net.NoRouteToHostException: No route to host\r\n            at sun.nio.ch.SocketChannelImpl.checkConnect(Native Method)\r\n            at sun.nio.ch.SocketChannelImpl.finishConnect(SocketChannelImpl.java:717)\r\n            at org.apache.zookeeper.ClientCnxnSocketNIO.doTransport(ClientCnxnSocketNIO.java:361)\r\n            at org.apache.zookeeper.ClientCnxn$SendThread.run(ClientCnxn.java:1141)\r\n    [2018-05-11 03:47:53,427] INFO Resolving again hostname: host.name (org.apache.zookeeper.client.StaticHostProvider)\r\n    [2018-05-11 03:47:54,429] WARN SASL configuration failed: javax.security.auth.login.LoginException: No JAAS configuration section named 'Client' was found in specified JAAS configuration file: '/usr/share/kafka/config/kafka_server_jaas.\r\n    conf'. Will continue connection to Zookeeper server without SASL authentication, if Zookeeper server allows it. (org.apache.zookeeper.ClientCnxn)\r\n    [2018-05-11 03:47:54,429] ERROR [ZooKeeperClient] Auth failed. (kafka.zookeeper.ZooKeeperClient)\r\n    [2018-05-11 03:47:54,429] ERROR [ZooKeeperClient] Auth failed. (kafka.zookeeper.ZooKeeperClient)\r\n    [2018-05-11 03:47:54,429] INFO Opening socket connection to server host.name/10.147.161.203:2181 (org.apache.zookeeper.ClientCnxn)\r\n    [2018-05-11 03:47:55,383] INFO Socket connection established to host.name/10.147.161.203:2181, initiating session (org.apache.zookeeper.ClientCnxn)\r\n    [2018-05-11 03:47:55,386] INFO Unable to read additional data from server sessionid 0x1634d42d88a001e, likely server has closed socket, closing socket connection and attempting reconnect (org.apache.zookeeper.ClientCnxn)\r\n\n","created":"2018-05-11T09:10:30.860+0000","updated":"2018-05-11T09:10:30.860+0000","started":"2018-05-11T09:10:30.859+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"101041","issueId":"12828194"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/worklog/101136","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user glasser commented on the issue:\n\n    https://github.com/apache/zookeeper/pull/150\n  \n    @tophei yes, it's pretty bad. We eventually (in k8s) set up a service per zk pod (giving them effectively static IPs) to deal with this.\n","created":"2018-05-11T14:25:58.366+0000","updated":"2018-05-11T14:25:58.366+0000","started":"2018-05-11T14:25:58.365+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"101136","issueId":"12828194"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/worklog/101140","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user anmolnar commented on the issue:\n\n    https://github.com/apache/zookeeper/pull/150\n  \n    @tophei Thanks for reporting this.\r\n    \r\n    There's a patch actively being review to address the problem here: https://github.com/apache/zookeeper/pull/451\r\n    It would be great if you could try that one out and make sure it's actually a working fix.\r\n    Could you please do it by any chance?\r\n\n","created":"2018-05-11T14:33:13.460+0000","updated":"2018-05-11T14:33:13.460+0000","started":"2018-05-11T14:33:13.459+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"101140","issueId":"12828194"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/worklog/101352","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user glasser commented on the issue:\n\n    https://github.com/apache/zookeeper/pull/150\n  \n    If you can provide a build of kafka with the fix in equivalent format to release distributions of Kafka I'd be happy to give it a shot.\n","created":"2018-05-12T00:00:04.521+0000","updated":"2018-05-12T00:00:04.521+0000","started":"2018-05-12T00:00:04.520+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"101352","issueId":"12828194"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/worklog/101403","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user tophei commented on the issue:\n\n    https://github.com/apache/zookeeper/pull/150\n  \n    @anmolnar Thanks for the comment. Actually I was trying to patch 451 into release tag 3.4.10 too , but seems it has much conflicts. By the way, may patch 451 have additional changes that may have related fix to above connection reading issue compared with patch 150?\n","created":"2018-05-12T06:37:48.263+0000","updated":"2018-05-12T06:37:48.263+0000","started":"2018-05-12T06:37:48.262+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"101403","issueId":"12828194"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/worklog/101405","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user tophei commented on the issue:\n\n    https://github.com/apache/zookeeper/pull/150\n  \n    @glasser Thanks for the sharing. Yeah, a static ip indeed would help work around the issue. However, assign static ip to service in k8s seems to be a bit heavy and less flexible when you need to setup massive of clusters.\n","created":"2018-05-12T06:55:56.982+0000","updated":"2018-05-12T06:55:56.982+0000","started":"2018-05-12T06:55:56.981+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"101405","issueId":"12828194"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/worklog/101462","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user anmolnar commented on the issue:\n\n    https://github.com/apache/zookeeper/pull/150\n  \n    @tophei @glasser This issue has become top priority quite recently, because more and more users reporting similar issues that you're facing with, so I'd like to get #451 in as soon as possible.\r\n    \r\n    But we also have to be careful. #451 fixes it in a completely different way and I'd like to be confident about that the fix is right. I'll see if I can put together a Kafka build for you for testing.\r\n    \r\n    @tophei Yes, #451 has a different approach. It should not have conflicts with 3.4.12 or you can just grab the latest from my branch and build it. Please drop me an email if you need help.\n","created":"2018-05-12T14:08:33.434+0000","updated":"2018-05-12T14:08:33.434+0000","started":"2018-05-12T14:08:33.433+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"101462","issueId":"12828194"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/worklog/101980","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user tophei commented on the issue:\n\n    https://github.com/apache/zookeeper/pull/150\n  \n    @anmolnar We have patched 451 into 3.4.12, and it worked in our setup so far. Thanks for the advise.\n","created":"2018-05-15T02:31:55.466+0000","updated":"2018-05-15T02:31:55.466+0000","started":"2018-05-15T02:31:55.466+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"101980","issueId":"12828194"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/worklog/101981","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user anmolnar commented on the issue:\n\n    https://github.com/apache/zookeeper/pull/150\n  \n    @tophei Sounds great, thanks for testing.\n","created":"2018-05-15T02:35:20.480+0000","updated":"2018-05-15T02:35:20.480+0000","started":"2018-05-15T02:35:20.480+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"101981","issueId":"12828194"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/worklog/101982","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user anmolnar commented on the issue:\n\n    https://github.com/apache/zookeeper/pull/451\n  \n    @fpj I think this patch is ready for merging as it is. Are you still having concerns?\n","created":"2018-05-15T02:36:20.363+0000","updated":"2018-05-15T02:36:20.363+0000","started":"2018-05-15T02:36:20.363+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"101982","issueId":"12828194"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/worklog/104749","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user ijuma commented on the issue:\n\n    https://github.com/apache/zookeeper/pull/451\n  \n    If there are no other concerns, it would be great for this to be merged.\n","created":"2018-05-22T18:50:55.724+0000","updated":"2018-05-22T18:50:55.724+0000","started":"2018-05-22T18:50:55.723+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"104749","issueId":"12828194"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/worklog/104767","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user anmolnar commented on the issue:\n\n    https://github.com/apache/zookeeper/pull/451\n  \n    I agree with @ijuma \r\n    @afine You were involved in this patch too. Are you willing to merge it in @fpj 's absence?\n","created":"2018-05-22T19:44:02.428+0000","updated":"2018-05-22T19:44:02.428+0000","started":"2018-05-22T19:44:02.427+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"104767","issueId":"12828194"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/worklog/104971","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user hanm commented on the issue:\n\n    https://github.com/apache/zookeeper/pull/451\n  \n    I am reviewing this and will merge before Memorial Day if no other issues.\n","created":"2018-05-23T03:50:16.561+0000","updated":"2018-05-23T03:50:16.561+0000","started":"2018-05-23T03:50:16.560+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"104971","issueId":"12828194"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/worklog/105818","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user hanm commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/451#discussion_r190789369\n  \n    --- Diff: src/java/main/org/apache/zookeeper/client/HostProvider.java ---\n    @@ -53,7 +54,7 @@\n          * @param spinDelay\n          *            Milliseconds to wait if all hosts have been tried once.\n          */\n    -    public InetSocketAddress next(long spinDelay);\n    +    public InetSocketAddress next(long spinDelay) throws UnknownHostException;\n    --- End diff --\n    \n    Some questions here @anmolnar:\r\n    \r\n    >> See my comment below. Now I think the API change is necessary, but I need to double check how it was detected previously.\r\n    \r\n    Which comment? I had a hard time find it, could you please explicitly paste it here?\r\n    \r\n    >> I started a thread on the mailing list a while ago for exactly the same reason. Let me update it.\r\n    \r\n    Similarly I lost that email thread. Could you please describe the gist of the email?\r\n    \r\n    I just wan to make sure we all agree that first an API change here is needed and second, if the API changes we need throw the right type of exception. \r\n    \r\n    (Also note the current comment of HostProvider interface should be updated if the API changes, because previous semantic of next always assume returns a \"valid\" address.).\n","created":"2018-05-25T04:44:09.695+0000","updated":"2018-05-25T04:44:09.695+0000","started":"2018-05-25T04:44:09.694+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"105818","issueId":"12828194"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/worklog/105868","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user anmolnar commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/451#discussion_r190846274\n  \n    --- Diff: src/java/main/org/apache/zookeeper/client/HostProvider.java ---\n    @@ -53,7 +54,7 @@\n          * @param spinDelay\n          *            Milliseconds to wait if all hosts have been tried once.\n          */\n    -    public InetSocketAddress next(long spinDelay);\n    +    public InetSocketAddress next(long spinDelay) throws UnknownHostException;\n    --- End diff --\n    \n    @hanm Answering @fpj comment below:\r\n    \r\n    > > We need a way to break the loop in the case the client closes, though.\r\n    \r\n    > That's actually a good reason for _not_ dealing with the error here. Because the caller - ClientCnxn - is be able to detect client closes, but StatisHostProvider is not.\r\n    \r\n    In a nutshell the problem of unresolvable DNS name must be handled somewhere and here're the considerations:\r\n    1. Client should endlessly try to resolve DNS names instead of giving up at some point. The re-try logic is already implemented in the caller methods properly.\r\n    2. In order to avoid API change we have to replicate the retry logic in the next() method which would add more complexity to the method and more extensive testing\r\n    \r\n    With these considerations I strongly believe that the API change is reasonable.\r\n    That's basically what we discussed in the e-mail thread too.\r\n    \r\n    I'll update the comment as requested. Thanks.\n","created":"2018-05-25T09:55:04.163+0000","updated":"2018-05-25T09:55:04.163+0000","started":"2018-05-25T09:55:04.162+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"105868","issueId":"12828194"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/worklog/105919","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user anmolnar commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/451#discussion_r190899356\n  \n    --- Diff: src/java/main/org/apache/zookeeper/client/HostProvider.java ---\n    @@ -53,7 +54,7 @@\n          * @param spinDelay\n          *            Milliseconds to wait if all hosts have been tried once.\n          */\n    -    public InetSocketAddress next(long spinDelay);\n    +    public InetSocketAddress next(long spinDelay) throws UnknownHostException;\n    --- End diff --\n    \n    @hanm This is done.\n","created":"2018-05-25T13:48:14.856+0000","updated":"2018-05-25T13:48:14.856+0000","started":"2018-05-25T13:48:14.856+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"105919","issueId":"12828194"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/worklog/106083","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user hanm commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/451#discussion_r191034452\n  \n    --- Diff: src/java/main/org/apache/zookeeper/client/StaticHostProvider.java ---\n    @@ -30,76 +31,118 @@\n     import org.slf4j.Logger;\n     import org.slf4j.LoggerFactory;\n     \n    -\n     /**\n      * Most simple HostProvider, resolves only on instantiation.\n    --- End diff --\n    \n    Now we don't only resolve on instantiation, so this comment needs update.\n","created":"2018-05-26T00:56:05.100+0000","updated":"2018-05-26T00:56:05.100+0000","started":"2018-05-26T00:56:05.099+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"106083","issueId":"12828194"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/worklog/106084","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user hanm commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/451#discussion_r191034929\n  \n    --- Diff: src/java/main/org/apache/zookeeper/client/HostProvider.java ---\n    @@ -53,7 +54,7 @@\n          * @param spinDelay\n          *            Milliseconds to wait if all hosts have been tried once.\n          */\n    -    public InetSocketAddress next(long spinDelay);\n    +    public InetSocketAddress next(long spinDelay) throws UnknownHostException;\n    --- End diff --\n    \n    >> In a nutshell the problem of unresolvable DNS name must be handled somewhere and here're the considerations\r\n    \r\n    I agree with this, however this can be done without throwing the UnknownHostException here. We can just return the curAddr in case of resolving failure, and since curAddr is not resolved, trying to connect to it on caller side will not succeed and caller can continue retry etc with existing logic. The primary concern here is change of a public API which might require clients (e.g. HBase) to recompile with ZK, so I prefer the approach that can achieve same goal (let caller handle retry logic) w/o changing the signature of a public API (alternatively we can throw an unchecked exception but semantically that sounds no better than UnknownHostException).\r\n    \r\n    So I am thinking the semantic of next() is:\r\n    \r\n    * If we can resolve an address, resolve it and return.\r\n    * If we can't resolve an address, return an unresolved address which contain enough information (host, port etc) for caller to decide what to do.\n","created":"2018-05-26T00:56:05.111+0000","updated":"2018-05-26T00:56:05.111+0000","started":"2018-05-26T00:56:05.111+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"106084","issueId":"12828194"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/worklog/106091","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user hanm commented on the issue:\n\n    https://github.com/apache/zookeeper/pull/451\n  \n    There are also some initial comments about JVM DNS caching\r\n    \r\n    >> Re-resolving at StaticHostProvider level may not be sufficient as InetAddress.getAllByName(String host) itself uses a Java-level cache inside InetAddress and turns to name service (e.g. DNS) only if the host could not be found in the Java-level cache.\r\n    \r\n    I think it's a good point that we brought this up - and I think we can't do much here as there are multiple level of DNS caching not just in JVM but also in OS, switches, etc, so the best we could do here is to make sure we re-resolve address when necessary, as this pull request is doing, and meanwhile let user know this might not work in the end due to multiple level of DNS caching. In that case, I think some links to the Oracle documents about JVM DNS caching would be helpful so users don't blame ZooKeeper if things don't work, but I think we can do that documentation update separately after this pull request is merged.\n","created":"2018-05-26T01:00:27.352+0000","updated":"2018-05-26T01:00:27.352+0000","started":"2018-05-26T01:00:27.352+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"106091","issueId":"12828194"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12828194/worklog/106092","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"Github user hanm commented on the issue:\n\n    https://github.com/apache/zookeeper/pull/451\n  \n    The patch looks good, I think we just need to get the public API change issue settled before we can merge this in.\n","created":"2018-05-26T01:01:13.290+0000","updated":"2018-05-26T01:01:13.290+0000","started":"2018-05-26T01:01:13.289+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"106092","issueId":"12828194"}]},"customfield_12311820":"0|i2eg9z:"}}