{"expand":"renderedFields,names,schema,operations,editmeta,changelog,versionedRepresentations","id":"13002528","self":"https://issues.apache.org/jira/rest/api/2/issue/13002528","key":"ZOOKEEPER-2549","fields":{"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype","name":"Bug","subtask":false,"avatarId":21133},"timespent":null,"project":{"self":"https://issues.apache.org/jira/rest/api/2/project/12310801","id":"12310801","key":"ZOOKEEPER","name":"ZooKeeper","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/projectavatar?pid=12310801&avatarId=10011","24x24":"https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12310801&avatarId=10011","16x16":"https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12310801&avatarId=10011","32x32":"https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12310801&avatarId=10011"},"projectCategory":{"self":"https://issues.apache.org/jira/rest/api/2/projectCategory/10484","id":"10484","description":"Apache ZooKeeper related","name":"ZooKeeper"}},"fixVersions":[],"aggregatetimespent":null,"resolution":null,"customfield_12312322":null,"customfield_12310220":"2016-09-03T07:28:02.648+0000","customfield_12312520":null,"customfield_12312323":null,"customfield_12312521":"Fri Dec 23 08:18:18 UTC 2016","customfield_12310420":"9223372036854775807","customfield_12312320":null,"customfield_12310222":null,"customfield_12312321":null,"resolutiondate":null,"workratio":-1,"customfield_12312328":null,"customfield_12312329":null,"customfield_12312923":null,"customfield_12312326":null,"customfield_12312920":null,"customfield_12310300":null,"customfield_12312327":null,"customfield_12312921":null,"customfield_12312324":null,"customfield_12312720":null,"customfield_12312325":null,"lastViewed":null,"watches":{"self":"https://issues.apache.org/jira/rest/api/2/issue/ZOOKEEPER-2549/watchers","watchCount":4,"isWatching":false},"created":"2016-09-03T06:39:23.582+0000","customfield_12310192":null,"customfield_12310191":null,"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.svg","name":"Major","id":"3"},"labels":[],"customfield_12312333":null,"customfield_12310230":null,"customfield_12312334":null,"customfield_12313422":"false","customfield_12310310":"8.0","customfield_12312331":null,"customfield_12312332":null,"timeestimate":null,"aggregatetimeoriginalestimate":null,"customfield_12311120":null,"customfield_12312330":null,"versions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12326786","id":"12326786","description":"Alpha release against 3.5 branch","name":"3.5.1","archived":false,"released":true,"releaseDate":"2015-09-02"}],"issuelinks":[],"customfield_12312339":null,"assignee":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yufeldman","name":"yufeldman","key":"yufeldman","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yuliya Feldman","active":true,"timeZone":"America/Los_Angeles"},"customfield_12312337":null,"customfield_12312338":null,"updated":"2016-12-23T08:18:18.282+0000","customfield_12312335":null,"customfield_12312336":null,"status":{"self":"https://issues.apache.org/jira/rest/api/2/status/10002","description":"A patch for this issue has been uploaded to JIRA by a contributor.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/document.png","name":"Patch Available","id":"10002","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/4","id":4,"key":"indeterminate","colorName":"yellow","name":"In Progress"}},"components":[{"self":"https://issues.apache.org/jira/rest/api/2/component/12312382","id":"12312382","name":"server","description":"General issues with the ZooKeeper server."}],"timeoriginalestimate":null,"description":"As NettyServerCnxn.sendResponse() allows all the exception to bubble up it can stop main ZK requests processing thread and make Zookeeper server look like it is hanging, while it just can not process any request anymore.\n\nIdea is to catch all the exceptions in NettyServerCnxn.sendResponse() , convert them to IOException and allow it propagating up","customfield_10010":null,"timetracking":{},"customfield_12312026":null,"customfield_12312023":null,"customfield_12312024":null,"customfield_12312340":null,"attachment":[{"self":"https://issues.apache.org/jira/rest/api/2/attachment/12827265","id":"12827265","filename":"ZOOKEEPER-2549.patch","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yufeldman","name":"yufeldman","key":"yufeldman","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yuliya Feldman","active":true,"timeZone":"America/Los_Angeles"},"created":"2016-09-06T22:45:10.296+0000","size":14246,"mimeType":"text/plain","content":"https://issues.apache.org/jira/secure/attachment/12827265/ZOOKEEPER-2549.patch"},{"self":"https://issues.apache.org/jira/rest/api/2/attachment/12826962","id":"12826962","filename":"ZOOKEEPER-2549.patch","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yufeldman","name":"yufeldman","key":"yufeldman","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yuliya Feldman","active":true,"timeZone":"America/Los_Angeles"},"created":"2016-09-03T06:50:45.646+0000","size":14246,"mimeType":"text/plain","content":"https://issues.apache.org/jira/secure/attachment/12826962/ZOOKEEPER-2549.patch"},{"self":"https://issues.apache.org/jira/rest/api/2/attachment/12827678","id":"12827678","filename":"zookeeper-2549-1.patch","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yufeldman","name":"yufeldman","key":"yufeldman","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yuliya Feldman","active":true,"timeZone":"America/Los_Angeles"},"created":"2016-09-09T00:04:10.413+0000","size":23281,"mimeType":"text/plain","content":"https://issues.apache.org/jira/secure/attachment/12827678/zookeeper-2549-1.patch"},{"self":"https://issues.apache.org/jira/rest/api/2/attachment/12828393","id":"12828393","filename":"ZOOKEEPER-2549-2.patch","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yufeldman","name":"yufeldman","key":"yufeldman","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yuliya Feldman","active":true,"timeZone":"America/Los_Angeles"},"created":"2016-09-14T05:54:24.336+0000","size":24445,"mimeType":"text/plain","content":"https://issues.apache.org/jira/secure/attachment/12828393/ZOOKEEPER-2549-2.patch"},{"self":"https://issues.apache.org/jira/rest/api/2/attachment/12837399","id":"12837399","filename":"ZOOKEEPER-2549-3.patch","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yufeldman","name":"yufeldman","key":"yufeldman","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yuliya Feldman","active":true,"timeZone":"America/Los_Angeles"},"created":"2016-11-05T06:47:19.004+0000","size":24660,"mimeType":"text/plain","content":"https://issues.apache.org/jira/secure/attachment/12837399/ZOOKEEPER-2549-3.patch"},{"self":"https://issues.apache.org/jira/rest/api/2/attachment/12837316","id":"12837316","filename":"ZOOKEEPER-2549-3.patch","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yufeldman","name":"yufeldman","key":"yufeldman","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yuliya Feldman","active":true,"timeZone":"America/Los_Angeles"},"created":"2016-11-04T23:00:32.197+0000","size":25723,"mimeType":"text/plain","content":"https://issues.apache.org/jira/secure/attachment/12837316/ZOOKEEPER-2549-3.patch"},{"self":"https://issues.apache.org/jira/rest/api/2/attachment/12837869","id":"12837869","filename":"ZOOKEEPER-2549-4.patch","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yufeldman","name":"yufeldman","key":"yufeldman","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yuliya Feldman","active":true,"timeZone":"America/Los_Angeles"},"created":"2016-11-08T00:18:08.766+0000","size":22800,"mimeType":"text/plain","content":"https://issues.apache.org/jira/secure/attachment/12837869/ZOOKEEPER-2549-4.patch"},{"self":"https://issues.apache.org/jira/rest/api/2/attachment/12841678","id":"12841678","filename":"ZOOKEEPER-2549-5.patch","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yufeldman","name":"yufeldman","key":"yufeldman","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yuliya Feldman","active":true,"timeZone":"America/Los_Angeles"},"created":"2016-12-04T19:57:35.265+0000","size":23190,"mimeType":"text/plain","content":"https://issues.apache.org/jira/secure/attachment/12841678/ZOOKEEPER-2549-5.patch"}],"aggregatetimeestimate":null,"customfield_12312341":null,"customfield_12312220":null,"customfield_12312022":null,"customfield_12310921":null,"customfield_12310920":"9223372036854775807","customfield_12312823":null,"summary":"As NettyServerCnxn.sendResponse() allows all the exception to bubble up it can stop main ZK requests processing thread","creator":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yufeldman","name":"yufeldman","key":"yufeldman","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yuliya Feldman","active":true,"timeZone":"America/Los_Angeles"},"subtasks":[],"customfield_12310291":null,"reporter":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yufeldman","name":"yufeldman","key":"yufeldman","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yuliya Feldman","active":true,"timeZone":"America/Los_Angeles"},"customfield_12310290":null,"aggregateprogress":{"progress":0,"total":0},"customfield_12311024":null,"environment":null,"customfield_12313520":null,"customfield_12311020":null,"duedate":null,"customfield_12310250":null,"progress":{"progress":0,"total":0},"comment":{"comments":[{"self":"https://issues.apache.org/jira/rest/api/2/issue/13002528/comment/15460543","id":"15460543","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yufeldman","name":"yufeldman","key":"yufeldman","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yuliya Feldman","active":true,"timeZone":"America/Los_Angeles"},"body":"Submitting a patch","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yufeldman","name":"yufeldman","key":"yufeldman","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yuliya Feldman","active":true,"timeZone":"America/Los_Angeles"},"created":"2016-09-03T06:50:15.498+0000","updated":"2016-09-03T06:50:15.498+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13002528/comment/15460595","id":"15460595","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"body":"-1 overall.  Here are the results of testing the latest attachment \n  http://issues.apache.org/jira/secure/attachment/12826962/ZOOKEEPER-2549.patch\n  against trunk revision 1757584.\n\n    +1 @author.  The patch does not contain any @author tags.\n\n    +1 tests included.  The patch appears to include 4 new or modified tests.\n\n    +1 javadoc.  The javadoc tool did not generate any warning messages.\n\n    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.\n\n    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.\n\n    +1 release audit.  The applied patch does not increase the total number of release audit warnings.\n\n    -1 core tests.  The patch failed core unit tests.\n\n    +1 contrib tests.  The patch passed contrib unit tests.\n\nTest results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3389//testReport/\nFindbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3389//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html\nConsole output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3389//console\n\nThis message is automatically generated.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"created":"2016-09-03T07:28:02.648+0000","updated":"2016-09-03T07:28:02.648+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13002528/comment/15461233","id":"15461233","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yufeldman","name":"yufeldman","key":"yufeldman","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yuliya Feldman","active":true,"timeZone":"America/Los_Angeles"},"body":"Really very strange test failures - completely unrelated. Could it be some issues with the cluster during the run?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yufeldman","name":"yufeldman","key":"yufeldman","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yuliya Feldman","active":true,"timeZone":"America/Los_Angeles"},"created":"2016-09-03T15:14:42.578+0000","updated":"2016-09-03T15:14:42.578+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13002528/comment/15461337","id":"15461337","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hanm","name":"hanm","key":"hanm","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hanm&avatarId=26946","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hanm&avatarId=26946","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hanm&avatarId=26946","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hanm&avatarId=26946"},"displayName":"Michael Han","active":true,"timeZone":"America/Vancouver"},"body":"These are known flaky tests - we have a couple of them under fix (ZOOKEEPER-2135).\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hanm","name":"hanm","key":"hanm","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hanm&avatarId=26946","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hanm&avatarId=26946","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hanm&avatarId=26946","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hanm&avatarId=26946"},"displayName":"Michael Han","active":true,"timeZone":"America/Vancouver"},"created":"2016-09-03T16:30:19.360+0000","updated":"2016-09-03T16:30:19.360+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13002528/comment/15468855","id":"15468855","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yufeldman","name":"yufeldman","key":"yufeldman","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yuliya Feldman","active":true,"timeZone":"America/Los_Angeles"},"body":"Reattaching just to trigger the build","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yufeldman","name":"yufeldman","key":"yufeldman","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yuliya Feldman","active":true,"timeZone":"America/Los_Angeles"},"created":"2016-09-06T22:45:10.300+0000","updated":"2016-09-06T22:45:10.300+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13002528/comment/15468900","id":"15468900","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"body":"-1 overall.  Here are the results of testing the latest attachment \n  http://issues.apache.org/jira/secure/attachment/12827265/ZOOKEEPER-2549.patch\n  against trunk revision 1757584.\n\n    +1 @author.  The patch does not contain any @author tags.\n\n    +1 tests included.  The patch appears to include 4 new or modified tests.\n\n    +1 javadoc.  The javadoc tool did not generate any warning messages.\n\n    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.\n\n    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.\n\n    +1 release audit.  The applied patch does not increase the total number of release audit warnings.\n\n    -1 core tests.  The patch failed core unit tests.\n\n    +1 contrib tests.  The patch passed contrib unit tests.\n\nTest results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3393//testReport/\nFindbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3393//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html\nConsole output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3393//console\n\nThis message is automatically generated.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"created":"2016-09-06T23:09:04.815+0000","updated":"2016-09-06T23:09:04.815+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13002528/comment/15468997","id":"15468997","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hanm","name":"hanm","key":"hanm","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hanm&avatarId=26946","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hanm&avatarId=26946","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hanm&avatarId=26946","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hanm&avatarId=26946"},"displayName":"Michael Han","active":true,"timeZone":"America/Vancouver"},"body":"Should we also do similar updates to NIOServerCnx which swallows every exception instead of converting them to IOException, for the purpose of consistency?\n\nAlso, for tests, might be good to reset system properties in teardown via System.clearProperty.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hanm","name":"hanm","key":"hanm","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hanm&avatarId=26946","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hanm&avatarId=26946","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hanm&avatarId=26946","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hanm&avatarId=26946"},"displayName":"Michael Han","active":true,"timeZone":"America/Vancouver"},"created":"2016-09-06T23:52:17.823+0000","updated":"2016-09-06T23:52:17.823+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13002528/comment/15469002","id":"15469002","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yufeldman","name":"yufeldman","key":"yufeldman","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yuliya Feldman","active":true,"timeZone":"America/Los_Angeles"},"body":">>> Should we also do similar updates to NIOServerCnx which swallows every exception instead of converting them to IOException, for the purpose of consistency?\n\nSure\n\n>>> Also, for tests, might be good to reset system properties in teardown via System.clearProperty.\n\nYep - will do","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yufeldman","name":"yufeldman","key":"yufeldman","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yuliya Feldman","active":true,"timeZone":"America/Los_Angeles"},"created":"2016-09-06T23:54:56.804+0000","updated":"2016-09-06T23:54:56.804+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13002528/comment/15475404","id":"15475404","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yufeldman","name":"yufeldman","key":"yufeldman","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yuliya Feldman","active":true,"timeZone":"America/Los_Angeles"},"body":"Addressed comments:\n\n1. Added missing Exception Handling to NIOServerCnxn\n2. Enhanced Unit tests to test both NIO and Netty\n3. Unsetting properties after tests are done","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yufeldman","name":"yufeldman","key":"yufeldman","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yuliya Feldman","active":true,"timeZone":"America/Los_Angeles"},"created":"2016-09-09T00:04:10.417+0000","updated":"2016-09-09T00:04:10.417+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13002528/comment/15475439","id":"15475439","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"body":"-1 overall.  Here are the results of testing the latest attachment \n  http://issues.apache.org/jira/secure/attachment/12827678/zookeeper-2549-1.patch\n  against trunk revision 1759917.\n\n    +1 @author.  The patch does not contain any @author tags.\n\n    +1 tests included.  The patch appears to include 7 new or modified tests.\n\n    +1 javadoc.  The javadoc tool did not generate any warning messages.\n\n    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.\n\n    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.\n\n    +1 release audit.  The applied patch does not increase the total number of release audit warnings.\n\n    -1 core tests.  The patch failed core unit tests.\n\n    +1 contrib tests.  The patch passed contrib unit tests.\n\nTest results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3406//testReport/\nFindbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3406//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html\nConsole output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3406//console\n\nThis message is automatically generated.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"created":"2016-09-09T00:21:25.501+0000","updated":"2016-09-09T00:21:25.501+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13002528/comment/15488851","id":"15488851","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hanm","name":"hanm","key":"hanm","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hanm&avatarId=26946","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hanm&avatarId=26946","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hanm&avatarId=26946","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hanm&avatarId=26946"},"displayName":"Michael Han","active":true,"timeZone":"America/Vancouver"},"body":"LGTM. \nTwo nits:\n* Here might just use LOG.debug (for consistency with rest of places in the patch). \n{code}\nif (LOG.isDebugEnabled()) {\n    LOG.debug(\"Problem sending to \" + getRemoteSocketAddress(), ex);\n}\n{code}\n* IIUC, the reflection and wildcard type parameter was introduced to improve testability (for the Mock* classes to work), if so, might worth to comment that a little bit in code, for example commenting on 'serverCnxnClassCtr', which is not obvious to readers about what it's designed for by looking at source code alone.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hanm","name":"hanm","key":"hanm","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hanm&avatarId=26946","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hanm&avatarId=26946","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hanm&avatarId=26946","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hanm&avatarId=26946"},"displayName":"Michael Han","active":true,"timeZone":"America/Vancouver"},"created":"2016-09-13T23:49:51.755+0000","updated":"2016-09-13T23:49:51.755+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13002528/comment/15488893","id":"15488893","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yufeldman","name":"yufeldman","key":"yufeldman","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yuliya Feldman","active":true,"timeZone":"America/Los_Angeles"},"body":"1. Sorry, which class are you referring to for debug ?\n\n2. Yes, I will add comments regarding use of reflection to support Mock classes - true it was added for testability.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yufeldman","name":"yufeldman","key":"yufeldman","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yuliya Feldman","active":true,"timeZone":"America/Los_Angeles"},"created":"2016-09-14T00:07:46.385+0000","updated":"2016-09-14T00:07:46.385+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13002528/comment/15489075","id":"15489075","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hanm","name":"hanm","key":"hanm","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hanm&avatarId=26946","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hanm&avatarId=26946","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hanm&avatarId=26946","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hanm&avatarId=26946"},"displayName":"Michael Han","active":true,"timeZone":"America/Vancouver"},"body":"bq. Sorry, which class are you referring to for debug ?\nNIOServerCnxn.java (L720-727). But since you mentioned, I checked again and it looks like the change is copied from NettyServerCnxn which uses the pattern {{if (LOG.isDebugEnabled())}}. So I think we either change both by using {{LOG.debug}} directly and removing {{if (LOG.isDebugEnabled())}} , or leave both with current form. ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hanm","name":"hanm","key":"hanm","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hanm&avatarId=26946","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hanm&avatarId=26946","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hanm&avatarId=26946","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hanm&avatarId=26946"},"displayName":"Michael Han","active":true,"timeZone":"America/Vancouver"},"created":"2016-09-14T01:50:24.600+0000","updated":"2016-09-14T01:50:24.600+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13002528/comment/15489519","id":"15489519","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yufeldman","name":"yufeldman","key":"yufeldman","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yuliya Feldman","active":true,"timeZone":"America/Los_Angeles"},"body":"Addressing review comments:\n\nRemoved {code} if (LOG.isDebugEnabled()) {code}\nAdded comments","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yufeldman","name":"yufeldman","key":"yufeldman","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yuliya Feldman","active":true,"timeZone":"America/Los_Angeles"},"created":"2016-09-14T05:54:24.340+0000","updated":"2016-09-14T05:57:22.206+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13002528/comment/15489557","id":"15489557","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"body":"+1 overall.  Here are the results of testing the latest attachment \n  http://issues.apache.org/jira/secure/attachment/12828393/ZOOKEEPER-2549-2.patch\n  against trunk revision b2a484cfe743116d2531fe5d1e1d78b3960c511e.\n\n    +1 @author.  The patch does not contain any @author tags.\n\n    +1 tests included.  The patch appears to include 7 new or modified tests.\n\n    +1 javadoc.  The javadoc tool did not generate any warning messages.\n\n    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.\n\n    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.\n\n    +1 release audit.  The applied patch does not increase the total number of release audit warnings.\n\n    +1 core tests.  The patch passed core unit tests.\n\n    +1 contrib tests.  The patch passed contrib unit tests.\n\nTest results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3428//testReport/\nFindbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3428//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html\nConsole output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3428//console\n\nThis message is automatically generated.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"created":"2016-09-14T06:16:41.161+0000","updated":"2016-09-14T06:16:41.161+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13002528/comment/15513854","id":"15513854","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yufeldman","name":"yufeldman","key":"yufeldman","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yuliya Feldman","active":true,"timeZone":"America/Los_Angeles"},"body":"[~hanm] - just wonder if anything else we can do here, or it is good to go?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yufeldman","name":"yufeldman","key":"yufeldman","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yuliya Feldman","active":true,"timeZone":"America/Los_Angeles"},"created":"2016-09-22T17:16:08.923+0000","updated":"2016-09-22T17:16:08.923+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13002528/comment/15514044","id":"15514044","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hanm","name":"hanm","key":"hanm","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hanm&avatarId=26946","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hanm&avatarId=26946","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hanm&avatarId=26946","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hanm&avatarId=26946"},"displayName":"Michael Han","active":true,"timeZone":"America/Vancouver"},"body":"Hi [~yufeldman], latest patch LGTM. We need +1 from at least one committer for this to be committed.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hanm","name":"hanm","key":"hanm","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hanm&avatarId=26946","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hanm&avatarId=26946","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hanm&avatarId=26946","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hanm&avatarId=26946"},"displayName":"Michael Han","active":true,"timeZone":"America/Vancouver"},"created":"2016-09-22T18:13:23.084+0000","updated":"2016-09-22T18:13:23.084+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13002528/comment/15514063","id":"15514063","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yufeldman","name":"yufeldman","key":"yufeldman","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yuliya Feldman","active":true,"timeZone":"America/Los_Angeles"},"body":"Thank you very much [~hanm] for the review. I thought you are the one :). ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yufeldman","name":"yufeldman","key":"yufeldman","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yuliya Feldman","active":true,"timeZone":"America/Los_Angeles"},"created":"2016-09-22T18:19:37.111+0000","updated":"2016-09-22T18:19:37.111+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13002528/comment/15514323","id":"15514323","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hanm","name":"hanm","key":"hanm","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hanm&avatarId=26946","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hanm&avatarId=26946","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hanm&avatarId=26946","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hanm&avatarId=26946"},"displayName":"Michael Han","active":true,"timeZone":"America/Vancouver"},"body":"You are welcome - I like doing code reviews :)","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hanm","name":"hanm","key":"hanm","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hanm&avatarId=26946","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hanm&avatarId=26946","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hanm&avatarId=26946","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hanm&avatarId=26946"},"displayName":"Michael Han","active":true,"timeZone":"America/Vancouver"},"created":"2016-09-22T19:55:43.250+0000","updated":"2016-09-22T19:55:43.250+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13002528/comment/15514862","id":"15514862","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yufeldman","name":"yufeldman","key":"yufeldman","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yuliya Feldman","active":true,"timeZone":"America/Los_Angeles"},"body":"[~phunt], [~rgs] - Could you please review the patch, as it seems you are the most familiar with the code in question.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yufeldman","name":"yufeldman","key":"yufeldman","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yuliya Feldman","active":true,"timeZone":"America/Los_Angeles"},"created":"2016-09-22T23:58:27.197+0000","updated":"2016-09-22T23:58:27.197+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13002528/comment/15634879","id":"15634879","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yufeldman","name":"yufeldman","key":"yufeldman","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yuliya Feldman","active":true,"timeZone":"America/Los_Angeles"},"body":"Ping again. It has been about 6 weeks.\n\nIt is really an issue at least with Netty implementation.\n\n[~phunt], [~rgs] - Could you please review the patch, as it seems you are the most familiar with the code in question.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yufeldman","name":"yufeldman","key":"yufeldman","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yuliya Feldman","active":true,"timeZone":"America/Los_Angeles"},"created":"2016-11-04T01:28:43.383+0000","updated":"2016-11-04T01:28:43.383+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13002528/comment/15636749","id":"15636749","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rgs","name":"rgs","key":"rgs","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=rgs&avatarId=18469","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=rgs&avatarId=18469","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=rgs&avatarId=18469","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=rgs&avatarId=18469"},"displayName":"Raul Gutierrez Segales","active":true,"timeZone":"America/Los_Angeles"},"body":"[~yufeldman]: oops, sorry for dropping the ball. reviewing it now. ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rgs","name":"rgs","key":"rgs","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=rgs&avatarId=18469","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=rgs&avatarId=18469","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=rgs&avatarId=18469","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=rgs&avatarId=18469"},"displayName":"Raul Gutierrez Segales","active":true,"timeZone":"America/Los_Angeles"},"created":"2016-11-04T15:47:41.880+0000","updated":"2016-11-04T15:47:41.880+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13002528/comment/15636811","id":"15636811","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rgs","name":"rgs","key":"rgs","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=rgs&avatarId=18469","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=rgs&avatarId=18469","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=rgs&avatarId=18469","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=rgs&avatarId=18469"},"displayName":"Raul Gutierrez Segales","active":true,"timeZone":"America/Los_Angeles"},"body":"[~yufeldman]: a few things:\n\nIn:\n\n{code}\n          } catch(Exception e) {\n             LOG.warn(\"Unexpected exception. Destruction averted.\", e);\n+            throw new IOException(e);\n          }\n     }\n{code}\n\ncan you remove the LOG.warn()? I don't think it's relevant anymore, given it will be handled by the caller. \n\n\nNit in:\n\n{code}\n+        if ( serverCnxnClassName != null ) {\n{code}\n\nextra spaces around the condition.\n\nDitto for:\n\n{code}\n+        if ( serverCnxnClassCtr != null ) {\n{code}\n\n\nLooks like you are doing extra work (allocations) here:\n\n{code}\n+        NIOServerCnxn cnxn = new NIOServerCnxn(zkServer, sock, sk, this, selectorThread);\n+\n+        if ( serverCnxnClassCtr != null ) {\n+            try {\n+                cnxn = serverCnxnClassCtr.newInstance(zkServer, sock, sk, this, selectorThread);\n+            } catch (InstantiationException e1) {\n+                LOG.debug(\"Can not instantiate class for \" + serverCnxnClassCtr.getName() + \". Using NIOServerCnxn\");\n+            } catch (IllegalAccessException e1) {\n+                LOG.debug(\"IllegalAccessException for \" + serverCnxnClassCtr.getName() + \". Using NIOServerCnxn\");\n+            } catch (InvocationTargetException e1) {\n+                LOG.debug(\"InvocationTargetException for \" + serverCnxnClassCtr.getName() + \". Using NIOServerCnxn\");\n+            } catch (Throwable t) {\n+                LOG.debug(\"Unknown Exception while dealing with: {} . Using NIOServerCnxn\", serverCnxnClassCtr.getName());\n+            }\n+        }\n{code}\n\nSounds like we should try this first (if possible):\n\n{code}\n    cnxn = serverCnxnClassCtr.newInstance(zkServer, sock, sk, this, selectorThread);\n{code}\n\nAnd only fallback to this:\n\n{code}\n   cnxn = new NIOServerCnxn(zkServer, sock, sk, this, selectorThread);\n{code}\n\nif that failed.\n\n\nIn:\n\n{code}\n+        } catch (Exception e) {\n+            LOG.warn(\"Unexpected exception. Converting to IOException.\", e);\n+            throw new IOException(e);\n         }\n{code}\n\nI'd drop the warning, it's common enough...\n\nExtra whitespaces:\n\n{code}\n+      if ( stats != null ) {\n+        int length = stats.getDataLength();\n+      }\n{code}\n\nOther than that, I think it's looking good. Thanks [~yufeldman]!","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rgs","name":"rgs","key":"rgs","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=rgs&avatarId=18469","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=rgs&avatarId=18469","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=rgs&avatarId=18469","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=rgs&avatarId=18469"},"displayName":"Raul Gutierrez Segales","active":true,"timeZone":"America/Los_Angeles"},"created":"2016-11-04T15:59:20.100+0000","updated":"2016-11-04T15:59:20.100+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13002528/comment/15636923","id":"15636923","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yufeldman","name":"yufeldman","key":"yufeldman","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yuliya Feldman","active":true,"timeZone":"America/Los_Angeles"},"body":"Thank you very much [~rgs] for review","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yufeldman","name":"yufeldman","key":"yufeldman","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yuliya Feldman","active":true,"timeZone":"America/Los_Angeles"},"created":"2016-11-04T16:34:11.568+0000","updated":"2016-11-04T16:34:11.568+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13002528/comment/15637777","id":"15637777","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yufeldman","name":"yufeldman","key":"yufeldman","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yuliya Feldman","active":true,"timeZone":"America/Los_Angeles"},"body":"[~rgs]  - One comment regarding your comment on double instantiation. It will happen only in case of unit tests. I will certainly make a change to avoid double instantiation even in that case, but code-wise it will look a bit \"uglier\". Will post new patch soon ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yufeldman","name":"yufeldman","key":"yufeldman","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yuliya Feldman","active":true,"timeZone":"America/Los_Angeles"},"created":"2016-11-04T21:40:34.424+0000","updated":"2016-11-04T21:40:34.424+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13002528/comment/15637893","id":"15637893","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"GitHub user yufeldman opened a pull request:\n\n    https://github.com/apache/zookeeper/pull/99\n\n    ZOOKEEPER-2549 Add exception handling to sendResponse\n\n    Fix for:\n    As NettyServerCnxn.sendResponse() allows all the exception to bubble up it can stop main ZK requests processing thread\n    Same changes done for NIOServerCnxn\n\nYou can merge this pull request into a Git repository by running:\n\n    $ git pull https://github.com/yufeldman/zookeeper master2549\n\nAlternatively you can review and apply these changes as the patch at:\n\n    https://github.com/apache/zookeeper/pull/99.patch\n\nTo close this pull request, make a commit to your master/trunk branch\nwith (at least) the following in the commit message:\n\n    This closes #99\n    \n----\ncommit 18270e28f3e60a03422641dd0ee2ccaad6a3b096\nAuthor: Yuliya Feldman <yfeldman@maprtech.com>\nDate:   2016-09-03T05:18:30Z\n\n    ZOOKEEPER-2549 Add exception handling to sendResponse\n\n----\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2016-11-04T22:22:44.101+0000","updated":"2016-11-04T22:22:44.101+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13002528/comment/15637895","id":"15637895","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yufeldman","name":"yufeldman","key":"yufeldman","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yuliya Feldman","active":true,"timeZone":"America/Los_Angeles"},"body":"Submitted PR that addresses review comments","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yufeldman","name":"yufeldman","key":"yufeldman","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yuliya Feldman","active":true,"timeZone":"America/Los_Angeles"},"created":"2016-11-04T22:23:47.820+0000","updated":"2016-11-04T22:23:47.820+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13002528/comment/15637982","id":"15637982","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yufeldman","name":"yufeldman","key":"yufeldman","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yuliya Feldman","active":true,"timeZone":"America/Los_Angeles"},"body":"Uploading patch manually, looks like pre commit builds based on PRs do not work properly","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yufeldman","name":"yufeldman","key":"yufeldman","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yuliya Feldman","active":true,"timeZone":"America/Los_Angeles"},"created":"2016-11-04T23:00:32.227+0000","updated":"2016-11-04T23:00:32.227+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13002528/comment/15638036","id":"15638036","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"body":"-1 overall.  Here are the results of testing the latest attachment \n  http://issues.apache.org/jira/secure/attachment/12837316/ZOOKEEPER-2549-3.patch\n  against trunk revision bcb07a09b06c91243ed244f04a71b8daf629e286.\n\n    +1 @author.  The patch does not contain any @author tags.\n\n    +1 tests included.  The patch appears to include 9 new or modified tests.\n\n    -1 patch.  The patch command could not apply the patch.\n\nConsole output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3521//console\n\nThis message is automatically generated.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"created":"2016-11-04T23:28:51.520+0000","updated":"2016-11-04T23:28:51.520+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13002528/comment/15638805","id":"15638805","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yufeldman","name":"yufeldman","key":"yufeldman","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yuliya Feldman","active":true,"timeZone":"America/Los_Angeles"},"body":"Forgot --no-prefix, so previous patch did not apply :(","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yufeldman","name":"yufeldman","key":"yufeldman","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yuliya Feldman","active":true,"timeZone":"America/Los_Angeles"},"created":"2016-11-05T06:47:19.030+0000","updated":"2016-11-05T06:47:19.030+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13002528/comment/15638838","id":"15638838","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"body":"-1 overall.  Here are the results of testing the latest attachment \n  http://issues.apache.org/jira/secure/attachment/12837399/ZOOKEEPER-2549-3.patch\n  against trunk revision bcb07a09b06c91243ed244f04a71b8daf629e286.\n\n    +1 @author.  The patch does not contain any @author tags.\n\n    +1 tests included.  The patch appears to include 7 new or modified tests.\n\n    +1 javadoc.  The javadoc tool did not generate any warning messages.\n\n    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.\n\n    -1 findbugs.  The patch appears to introduce 19 new Findbugs (version 3.0.1) warnings.\n\n    +1 release audit.  The applied patch does not increase the total number of release audit warnings.\n\n    +1 core tests.  The patch passed core unit tests.\n\n    +1 contrib tests.  The patch passed contrib unit tests.\n\nTest results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3522//testReport/\nFindbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3522//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html\nConsole output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3522//console\n\nThis message is automatically generated.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"created":"2016-11-05T07:07:07.941+0000","updated":"2016-11-05T07:07:07.941+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13002528/comment/15640362","id":"15640362","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rgs","name":"rgs","key":"rgs","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=rgs&avatarId=18469","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=rgs&avatarId=18469","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=rgs&avatarId=18469","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=rgs&avatarId=18469"},"displayName":"Raul Gutierrez Segales","active":true,"timeZone":"America/Los_Angeles"},"body":"we can ignore the findbugs warnings (see ZOOKEEPER-2628). ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rgs","name":"rgs","key":"rgs","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=rgs&avatarId=18469","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=rgs&avatarId=18469","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=rgs&avatarId=18469","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=rgs&avatarId=18469"},"displayName":"Raul Gutierrez Segales","active":true,"timeZone":"America/Los_Angeles"},"created":"2016-11-05T19:00:18.381+0000","updated":"2016-11-05T19:00:18.381+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13002528/comment/15640551","id":"15640551","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user rgs1 commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/99#discussion_r86672326\n  \n    --- Diff: src/java/main/org/apache/zookeeper/server/NIOServerCnxn.java ---\n    @@ -716,7 +716,12 @@ public void process(WatchedEvent event) {\n             // Convert WatchedEvent to a type that can be sent over the wire\n             WatcherEvent e = event.getWrapper();\n     \n    -        sendResponse(h, e, \"notification\");\n    +        try {\n    +            sendResponse(h, e, \"notification\");\n    +        } catch (IOException ex) {\n    +            LOG.debug(\"Problem sending to \" + getRemoteSocketAddress(), ex);\n    +            close();\n    --- End diff --\n    \n    this is an interesting change -- how/when were we closing the connection before?\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2016-11-05T20:46:19.030+0000","updated":"2016-11-05T20:46:19.030+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13002528/comment/15640552","id":"15640552","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user rgs1 commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/99#discussion_r86672385\n  \n    --- Diff: src/java/main/org/apache/zookeeper/server/NIOServerCnxnFactory.java ---\n    @@ -842,7 +868,26 @@ private void addCnxn(NIOServerCnxn cnxn) {\n     \n         protected NIOServerCnxn createConnection(SocketChannel sock,\n                 SelectionKey sk, SelectorThread selectorThread) throws IOException {\n    -        return new NIOServerCnxn(zkServer, sock, sk, this, selectorThread);\n    +\n    +        NIOServerCnxn cnxn = null;\n    +\n    +        if (serverCnxnClassCtr != null) {\n    --- End diff --\n    \n    why not set serverCnxnClassCtr to NIOServerCnxn by default to avoid looking up the right constructor every time we want to create a new connection (a bit of a hot path)?\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2016-11-05T20:46:19.068+0000","updated":"2016-11-05T20:46:19.068+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13002528/comment/15640553","id":"15640553","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user rgs1 commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/99#discussion_r86672419\n  \n    --- Diff: src/java/main/org/apache/zookeeper/server/NettyServerCnxnFactory.java ---\n    @@ -105,8 +115,26 @@ public void channelConnected(ChannelHandlerContext ctx,\n                     LOG.trace(\"Channel connected \" + e);\n                 }\n     \n    -            NettyServerCnxn cnxn = new NettyServerCnxn(ctx.getChannel(),\n    -                    zkServer, NettyServerCnxnFactory.this);\n    +            NettyServerCnxn cnxn = null;\n    +            if (serverCnxnClassCtr != null) {\n    --- End diff --\n    \n    same as for NIO, lets set serverCnxnClassCtr to NettyServerCnxn by default\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2016-11-05T20:46:19.068+0000","updated":"2016-11-05T20:46:19.068+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13002528/comment/15640554","id":"15640554","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user rgs1 commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/99#discussion_r86672349\n  \n    --- Diff: src/java/main/org/apache/zookeeper/server/NIOServerCnxnFactory.java ---\n    @@ -630,6 +640,22 @@ public static ByteBuffer getDirectBuffer() {\n          * limits of the operating system). startup(zks) must be called subsequently.\n          */\n         public NIOServerCnxnFactory() {\n    +        String serverCnxnClassName = System.getProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN);\n    +        if ( serverCnxnClassName != null ) {\n    --- End diff --\n    \n    nit: extra spaces\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2016-11-05T20:46:19.069+0000","updated":"2016-11-05T20:46:19.069+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13002528/comment/15640555","id":"15640555","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user rgs1 commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/99#discussion_r86672337\n  \n    --- Diff: src/java/main/org/apache/zookeeper/server/NIOServerCnxn.java ---\n    @@ -716,7 +716,12 @@ public void process(WatchedEvent event) {\n             // Convert WatchedEvent to a type that can be sent over the wire\n             WatcherEvent e = event.getWrapper();\n     \n    -        sendResponse(h, e, \"notification\");\n    +        try {\n    +            sendResponse(h, e, \"notification\");\n    +        } catch (IOException ex) {\n    +            LOG.debug(\"Problem sending to \" + getRemoteSocketAddress(), ex);\n    --- End diff --\n    \n    i have mixed feelings with concatenating strings in a hot path (IOException happening here is a hot path when, for instance, a network blip happens). \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2016-11-05T20:46:19.085+0000","updated":"2016-11-05T20:46:19.085+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13002528/comment/15640557","id":"15640557","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rgs","name":"rgs","key":"rgs","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=rgs&avatarId=18469","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=rgs&avatarId=18469","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=rgs&avatarId=18469","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=rgs&avatarId=18469"},"displayName":"Raul Gutierrez Segales","active":true,"timeZone":"America/Los_Angeles"},"body":"[~yufeldman]: thanks for addressing the comments. Added a few more comments on GH. Thanks!","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rgs","name":"rgs","key":"rgs","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=rgs&avatarId=18469","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=rgs&avatarId=18469","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=rgs&avatarId=18469","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=rgs&avatarId=18469"},"displayName":"Raul Gutierrez Segales","active":true,"timeZone":"America/Los_Angeles"},"created":"2016-11-05T20:47:18.121+0000","updated":"2016-11-05T20:47:18.121+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13002528/comment/15640683","id":"15640683","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user yufeldman commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/99#discussion_r86674332\n  \n    --- Diff: src/java/main/org/apache/zookeeper/server/NIOServerCnxnFactory.java ---\n    @@ -842,7 +868,26 @@ private void addCnxn(NIOServerCnxn cnxn) {\n     \n         protected NIOServerCnxn createConnection(SocketChannel sock,\n                 SelectionKey sk, SelectorThread selectorThread) throws IOException {\n    -        return new NIOServerCnxn(zkServer, sock, sk, this, selectorThread);\n    +\n    +        NIOServerCnxn cnxn = null;\n    +\n    +        if (serverCnxnClassCtr != null) {\n    --- End diff --\n    \n    Actually I tend to come back to double instantiation - as it will be used only in UnitTests (serverCnxnClassCtr != null), while manipulation with constructor (invocation of newInstance) instead of directly creating instance of NIOServerCnxn will be really a hot path \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2016-11-05T22:19:09.974+0000","updated":"2016-11-05T22:19:09.974+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13002528/comment/15640684","id":"15640684","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user yufeldman commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/99#discussion_r86674430\n  \n    --- Diff: src/java/main/org/apache/zookeeper/server/NIOServerCnxn.java ---\n    @@ -716,7 +716,12 @@ public void process(WatchedEvent event) {\n             // Convert WatchedEvent to a type that can be sent over the wire\n             WatcherEvent e = event.getWrapper();\n     \n    -        sendResponse(h, e, \"notification\");\n    +        try {\n    +            sendResponse(h, e, \"notification\");\n    +        } catch (IOException ex) {\n    +            LOG.debug(\"Problem sending to \" + getRemoteSocketAddress(), ex);\n    --- End diff --\n    \n    Any suggestion here? Not to getRemoteSocketAddress() at all?\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2016-11-05T22:19:09.989+0000","updated":"2016-11-05T22:19:09.989+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13002528/comment/15640685","id":"15640685","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user yufeldman commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/99#discussion_r86673997\n  \n    --- Diff: src/java/main/org/apache/zookeeper/server/NIOServerCnxn.java ---\n    @@ -716,7 +716,12 @@ public void process(WatchedEvent event) {\n             // Convert WatchedEvent to a type that can be sent over the wire\n             WatcherEvent e = event.getWrapper();\n     \n    -        sendResponse(h, e, \"notification\");\n    +        try {\n    +            sendResponse(h, e, \"notification\");\n    +        } catch (IOException ex) {\n    +            LOG.debug(\"Problem sending to \" + getRemoteSocketAddress(), ex);\n    +            close();\n    --- End diff --\n    \n    It was not closing (I think) before as exception was swallowed since sendResponse in NIOServerCnxn was not throwing IOException\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2016-11-05T22:19:09.992+0000","updated":"2016-11-05T22:19:09.992+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13002528/comment/15641168","id":"15641168","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user rgs1 commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/99#discussion_r86679164\n  \n    --- Diff: src/java/main/org/apache/zookeeper/server/NIOServerCnxn.java ---\n    @@ -716,7 +716,12 @@ public void process(WatchedEvent event) {\n             // Convert WatchedEvent to a type that can be sent over the wire\n             WatcherEvent e = event.getWrapper();\n     \n    -        sendResponse(h, e, \"notification\");\n    +        try {\n    +            sendResponse(h, e, \"notification\");\n    +        } catch (IOException ex) {\n    +            LOG.debug(\"Problem sending to \" + getRemoteSocketAddress(), ex);\n    +            close();\n    --- End diff --\n    \n    hmm, that would be a pretty bad leak given all what goes on in close():\n    \n    ```\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2016-11-06T05:12:34.009+0000","updated":"2016-11-06T05:12:34.009+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13002528/comment/15641172","id":"15641172","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user rgs1 commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/99#discussion_r86679205\n  \n    --- Diff: src/java/main/org/apache/zookeeper/server/NIOServerCnxnFactory.java ---\n    @@ -842,7 +868,26 @@ private void addCnxn(NIOServerCnxn cnxn) {\n     \n         protected NIOServerCnxn createConnection(SocketChannel sock,\n                 SelectionKey sk, SelectorThread selectorThread) throws IOException {\n    -        return new NIOServerCnxn(zkServer, sock, sk, this, selectorThread);\n    +\n    +        NIOServerCnxn cnxn = null;\n    +\n    +        if (serverCnxnClassCtr != null) {\n    --- End diff --\n    \n    what's wrong with setting serverCnxnClassCtr to NettyServerCnxn by default (by doing all the reflection magic)?\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2016-11-06T05:15:21.399+0000","updated":"2016-11-06T05:15:21.399+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13002528/comment/15642094","id":"15642094","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user yufeldman commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/99#discussion_r86691054\n  \n    --- Diff: src/java/main/org/apache/zookeeper/server/NIOServerCnxnFactory.java ---\n    @@ -842,7 +868,26 @@ private void addCnxn(NIOServerCnxn cnxn) {\n     \n         protected NIOServerCnxn createConnection(SocketChannel sock,\n                 SelectionKey sk, SelectorThread selectorThread) throws IOException {\n    -        return new NIOServerCnxn(zkServer, sock, sk, this, selectorThread);\n    +\n    +        NIOServerCnxn cnxn = null;\n    +\n    +        if (serverCnxnClassCtr != null) {\n    --- End diff --\n    \n    nothing is wrong with it per say - just overhead, as we will call \"newInstance\" on the constructor for every code path - test or not.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2016-11-06T17:12:05.270+0000","updated":"2016-11-06T17:12:05.270+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13002528/comment/15642098","id":"15642098","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user yufeldman commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/99#discussion_r86691087\n  \n    --- Diff: src/java/main/org/apache/zookeeper/server/NIOServerCnxn.java ---\n    @@ -716,7 +716,12 @@ public void process(WatchedEvent event) {\n             // Convert WatchedEvent to a type that can be sent over the wire\n             WatcherEvent e = event.getWrapper();\n     \n    -        sendResponse(h, e, \"notification\");\n    +        try {\n    +            sendResponse(h, e, \"notification\");\n    +        } catch (IOException ex) {\n    +            LOG.debug(\"Problem sending to \" + getRemoteSocketAddress(), ex);\n    +            close();\n    --- End diff --\n    \n    I agree that it must be closing somewhere - just need to trace where\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2016-11-06T17:13:43.188+0000","updated":"2016-11-06T17:13:43.188+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13002528/comment/15645913","id":"15645913","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user yufeldman commented on the issue:\n\n    https://github.com/apache/zookeeper/pull/99\n  \n    Addressed review comments\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2016-11-08T00:17:06.776+0000","updated":"2016-11-08T00:17:06.776+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13002528/comment/15645915","id":"15645915","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yufeldman","name":"yufeldman","key":"yufeldman","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yuliya Feldman","active":true,"timeZone":"America/Los_Angeles"},"body":"Latest patch with addressed review comments","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yufeldman","name":"yufeldman","key":"yufeldman","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yuliya Feldman","active":true,"timeZone":"America/Los_Angeles"},"created":"2016-11-08T00:18:08.770+0000","updated":"2016-11-08T00:18:08.770+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13002528/comment/15646001","id":"15646001","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"body":"-1 overall.  Here are the results of testing the latest attachment \n  http://issues.apache.org/jira/secure/attachment/12837869/ZOOKEEPER-2549-4.patch\n  against trunk revision 440e0923dd9e3be533a196fdd6ada960860ca7f6.\n\n    +1 @author.  The patch does not contain any @author tags.\n\n    +1 tests included.  The patch appears to include 7 new or modified tests.\n\n    +1 javadoc.  The javadoc tool did not generate any warning messages.\n\n    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.\n\n    -1 findbugs.  The patch appears to introduce 19 new Findbugs (version 3.0.1) warnings.\n\n    +1 release audit.  The applied patch does not increase the total number of release audit warnings.\n\n    -1 core tests.  The patch failed core unit tests.\n\n    +1 contrib tests.  The patch passed contrib unit tests.\n\nTest results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3528//testReport/\nFindbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3528//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html\nConsole output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3528//console\n\nThis message is automatically generated.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"created":"2016-11-08T00:48:33.092+0000","updated":"2016-11-08T00:48:33.092+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13002528/comment/15648561","id":"15648561","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yufeldman","name":"yufeldman","key":"yufeldman","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yuliya Feldman","active":true,"timeZone":"America/Los_Angeles"},"body":"the test failure is irrelevant","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yufeldman","name":"yufeldman","key":"yufeldman","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yuliya Feldman","active":true,"timeZone":"America/Los_Angeles"},"created":"2016-11-08T19:33:39.849+0000","updated":"2016-11-08T19:33:39.849+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13002528/comment/15713266","id":"15713266","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user lvfangmin commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/99#discussion_r90550930\n  \n    --- Diff: src/java/main/org/apache/zookeeper/server/NettyServerCnxn.java ---\n    @@ -165,31 +163,35 @@ public void process(WatchedEvent event) {\n         @Override\n         public void sendResponse(ReplyHeader h, Record r, String tag)\n                 throws IOException {\n    -        if (!channel.isOpen()) {\n    -            return;\n    -        }\n    -        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    -        // Make space for length\n    -        BinaryOutputArchive bos = BinaryOutputArchive.getArchive(baos);\n             try {\n    -            baos.write(fourBytes);\n    -            bos.writeRecord(h, \"header\");\n    -            if (r != null) {\n    -                bos.writeRecord(r, tag);\n    +            if (!channel.isOpen()) {\n    +                return;\n                 }\n    -            baos.close();\n    -        } catch (IOException e) {\n    -            LOG.error(\"Error serializing response\");\n    -        }\n    -        byte b[] = baos.toByteArray();\n    -        ByteBuffer bb = ByteBuffer.wrap(b);\n    -        bb.putInt(b.length - 4).rewind();\n    -        sendBuffer(bb);\n    -        if (h.getXid() > 0) {\n    -            // zks cannot be null otherwise we would not have gotten here!\n    -            if (!zkServer.shouldThrottle(outstandingCount.decrementAndGet())) {\n    -                enableRecv();\n    +            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    +            // Make space for length\n    +            BinaryOutputArchive bos = BinaryOutputArchive.getArchive(baos);\n    +            try {\n    +                baos.write(fourBytes);\n    +                bos.writeRecord(h, \"header\");\n    +                if (r != null) {\n    +                    bos.writeRecord(r, tag);\n    +                }\n    +                baos.close();\n    +            } catch (IOException e) {\n    --- End diff --\n    \n    This IOException is swallowed either, should we re-throw it?\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2016-12-01T22:26:09.460+0000","updated":"2016-12-01T22:26:09.460+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13002528/comment/15713267","id":"15713267","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user lvfangmin commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/99#discussion_r90549964\n  \n    --- Diff: src/java/main/org/apache/zookeeper/server/NIOServerCnxn.java ---\n    @@ -716,7 +716,12 @@ public void process(WatchedEvent event) {\n             // Convert WatchedEvent to a type that can be sent over the wire\n             WatcherEvent e = event.getWrapper();\n     \n    -        sendResponse(h, e, \"notification\");\n    +        try {\n    +            sendResponse(h, e, \"notification\");\n    +        } catch (IOException ex) {\n    +            LOG.debug(\"Problem sending to \" + getRemoteSocketAddress(), ex);\n    --- End diff --\n    \n    We're using LOG.debug, so it shouldn't be an issue on prod.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2016-12-01T22:26:09.461+0000","updated":"2016-12-01T22:26:09.461+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13002528/comment/15713302","id":"15713302","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user yufeldman commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/99#discussion_r90553827\n  \n    --- Diff: src/java/main/org/apache/zookeeper/server/NettyServerCnxn.java ---\n    @@ -165,31 +163,35 @@ public void process(WatchedEvent event) {\n         @Override\n         public void sendResponse(ReplyHeader h, Record r, String tag)\n                 throws IOException {\n    -        if (!channel.isOpen()) {\n    -            return;\n    -        }\n    -        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    -        // Make space for length\n    -        BinaryOutputArchive bos = BinaryOutputArchive.getArchive(baos);\n             try {\n    -            baos.write(fourBytes);\n    -            bos.writeRecord(h, \"header\");\n    -            if (r != null) {\n    -                bos.writeRecord(r, tag);\n    +            if (!channel.isOpen()) {\n    +                return;\n                 }\n    -            baos.close();\n    -        } catch (IOException e) {\n    -            LOG.error(\"Error serializing response\");\n    -        }\n    -        byte b[] = baos.toByteArray();\n    -        ByteBuffer bb = ByteBuffer.wrap(b);\n    -        bb.putInt(b.length - 4).rewind();\n    -        sendBuffer(bb);\n    -        if (h.getXid() > 0) {\n    -            // zks cannot be null otherwise we would not have gotten here!\n    -            if (!zkServer.shouldThrottle(outstandingCount.decrementAndGet())) {\n    -                enableRecv();\n    +            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    +            // Make space for length\n    +            BinaryOutputArchive bos = BinaryOutputArchive.getArchive(baos);\n    +            try {\n    +                baos.write(fourBytes);\n    +                bos.writeRecord(h, \"header\");\n    +                if (r != null) {\n    +                    bos.writeRecord(r, tag);\n    +                }\n    +                baos.close();\n    +            } catch (IOException e) {\n    --- End diff --\n    \n    I did not modify this code - it was like that before, but potentially - yes it makes sense to rethrow\n    I would say there are multiple places I came across where exceptions are swallowed \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2016-12-01T22:42:47.367+0000","updated":"2016-12-01T22:42:47.367+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13002528/comment/15718432","id":"15718432","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user rgs1 commented on the issue:\n\n    https://github.com/apache/zookeeper/pull/99\n  \n    @fpj, @hanm could you take a look? I am +1, but another look would be nice.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2016-12-03T17:27:27.921+0000","updated":"2016-12-03T17:27:27.921+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13002528/comment/15718611","id":"15718611","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user hanm commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/99#discussion_r90762620\n  \n    --- Diff: src/java/main/org/apache/zookeeper/server/NettyServerCnxn.java ---\n    @@ -71,7 +71,7 @@\n         NettyServerCnxnFactory factory;\n         boolean initialized;\n         \n    -    NettyServerCnxn(Channel channel, ZooKeeperServer zks, NettyServerCnxnFactory factory) {\n    +    public NettyServerCnxn(Channel channel, ZooKeeperServer zks, NettyServerCnxnFactory factory) {\n    --- End diff --\n    \n    It is not obvious to me why the access specifier of `NettyServerCnxn` should be changed public here.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2016-12-03T19:32:41.830+0000","updated":"2016-12-03T19:32:41.830+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13002528/comment/15718612","id":"15718612","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user hanm commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/99#discussion_r90763391\n  \n    --- Diff: src/java/main/org/apache/zookeeper/server/NIOServerCnxn.java ---\n    @@ -716,7 +716,12 @@ public void process(WatchedEvent event) {\n             // Convert WatchedEvent to a type that can be sent over the wire\n             WatcherEvent e = event.getWrapper();\n     \n    -        sendResponse(h, e, \"notification\");\n    +        try {\n    +            sendResponse(h, e, \"notification\");\n    +        } catch (IOException ex) {\n    +            LOG.debug(\"Problem sending to \" + getRemoteSocketAddress(), ex);\n    +            close();\n    --- End diff --\n    \n    >> It was not closing (I think) before as exception was swallowed since sendResponse in NIOServerCnxn was not throwing IOException\n    \n    Yes, I think the connection was not closing before in cases of exception thrown from `NIOServerCnxn.sendResponse` which swallows everything. The change in this PR changes the behavior by closing the connection in case of exceptions occur in sendResponse. I am leaning towards the old behavior of NOT closing the connection, because the connection looks pretty innocent - in fact `NIOServerCnxn.sendResponse` does not involve any socket IO I believe, it just queuing stuff to be send over sockets. So if something goes wrong, we just do our best effort by logging what's wrong - rather than trying mess up with sockets which seems out of responsibilities of `NIOServerCnxn.sendResponse`. Similarly since `NIOServerCnxn.sendResponse` does not directly involve sockets, there should not be any leaks in case sendResponse screw up.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2016-12-03T19:32:41.830+0000","updated":"2016-12-03T19:32:41.830+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13002528/comment/15718613","id":"15718613","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user hanm commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/99#discussion_r90762715\n  \n    --- Diff: src/java/main/org/apache/zookeeper/server/NettyServerCnxn.java ---\n    @@ -165,31 +163,35 @@ public void process(WatchedEvent event) {\n         @Override\n         public void sendResponse(ReplyHeader h, Record r, String tag)\n                 throws IOException {\n    -        if (!channel.isOpen()) {\n    -            return;\n    -        }\n    -        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    -        // Make space for length\n    -        BinaryOutputArchive bos = BinaryOutputArchive.getArchive(baos);\n             try {\n    -            baos.write(fourBytes);\n    -            bos.writeRecord(h, \"header\");\n    -            if (r != null) {\n    -                bos.writeRecord(r, tag);\n    +            if (!channel.isOpen()) {\n    +                return;\n                 }\n    -            baos.close();\n    -        } catch (IOException e) {\n    -            LOG.error(\"Error serializing response\");\n    -        }\n    -        byte b[] = baos.toByteArray();\n    -        ByteBuffer bb = ByteBuffer.wrap(b);\n    -        bb.putInt(b.length - 4).rewind();\n    -        sendBuffer(bb);\n    -        if (h.getXid() > 0) {\n    -            // zks cannot be null otherwise we would not have gotten here!\n    -            if (!zkServer.shouldThrottle(outstandingCount.decrementAndGet())) {\n    -                enableRecv();\n    +            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    +            // Make space for length\n    +            BinaryOutputArchive bos = BinaryOutputArchive.getArchive(baos);\n    +            try {\n    +                baos.write(fourBytes);\n    +                bos.writeRecord(h, \"header\");\n    +                if (r != null) {\n    +                    bos.writeRecord(r, tag);\n    +                }\n    +                baos.close();\n    +            } catch (IOException e) {\n    --- End diff --\n    \n    Agree on re-throw the exception here. We could just remove the try - catch block here given there is a new try - catch block added in this PR that wraps the entire `sendResponse.` \n    We can start triaging other places where the exceptions are swallowed but should re-throw after this PR merging in.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2016-12-03T19:32:41.830+0000","updated":"2016-12-03T19:32:41.830+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13002528/comment/15720345","id":"15720345","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user yufeldman commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/99#discussion_r90782565\n  \n    --- Diff: src/java/main/org/apache/zookeeper/server/NettyServerCnxn.java ---\n    @@ -71,7 +71,7 @@\n         NettyServerCnxnFactory factory;\n         boolean initialized;\n         \n    -    NettyServerCnxn(Channel channel, ZooKeeperServer zks, NettyServerCnxnFactory factory) {\n    +    public NettyServerCnxn(Channel channel, ZooKeeperServer zks, NettyServerCnxnFactory factory) {\n    --- End diff --\n    \n    I think I did this to match NIOServerCnxn constructor. It can be kept package level, as my test class is in the same package namespace. I can change it back, but it will be inconsistent with NIO\n\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2016-12-04T18:11:26.354+0000","updated":"2016-12-04T18:11:26.354+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13002528/comment/15720356","id":"15720356","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user yufeldman commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/99#discussion_r90782724\n  \n    --- Diff: src/java/main/org/apache/zookeeper/server/NIOServerCnxn.java ---\n    @@ -716,7 +716,12 @@ public void process(WatchedEvent event) {\n             // Convert WatchedEvent to a type that can be sent over the wire\n             WatcherEvent e = event.getWrapper();\n     \n    -        sendResponse(h, e, \"notification\");\n    +        try {\n    +            sendResponse(h, e, \"notification\");\n    +        } catch (IOException ex) {\n    +            LOG.debug(\"Problem sending to \" + getRemoteSocketAddress(), ex);\n    +            close();\n    --- End diff --\n    \n    Will remove close() from catch block\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2016-12-04T18:18:51.488+0000","updated":"2016-12-04T18:18:51.488+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13002528/comment/15720381","id":"15720381","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user yufeldman commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/99#discussion_r90783210\n  \n    --- Diff: src/java/main/org/apache/zookeeper/server/NettyServerCnxn.java ---\n    @@ -71,7 +71,7 @@\n         NettyServerCnxnFactory factory;\n         boolean initialized;\n         \n    -    NettyServerCnxn(Channel channel, ZooKeeperServer zks, NettyServerCnxnFactory factory) {\n    +    public NettyServerCnxn(Channel channel, ZooKeeperServer zks, NettyServerCnxnFactory factory) {\n    --- End diff --\n    \n    Take my words back. I need it to be public as I use reflection to create it in NettyServerCnxnFactory and if it is not I would have to do couple of more steps during init to set access to public which is unnecessary\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2016-12-04T18:37:00.404+0000","updated":"2016-12-04T18:37:00.404+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13002528/comment/15720487","id":"15720487","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yufeldman","name":"yufeldman","key":"yufeldman","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yuliya Feldman","active":true,"timeZone":"America/Los_Angeles"},"body":"I have updated PR with changes to latest review comments","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yufeldman","name":"yufeldman","key":"yufeldman","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yuliya Feldman","active":true,"timeZone":"America/Los_Angeles"},"created":"2016-12-04T19:51:43.785+0000","updated":"2016-12-04T19:51:43.785+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13002528/comment/15720494","id":"15720494","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yufeldman","name":"yufeldman","key":"yufeldman","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yuliya Feldman","active":true,"timeZone":"America/Los_Angeles"},"body":"Latest patch that includes all the changes","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yufeldman","name":"yufeldman","key":"yufeldman","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yuliya Feldman","active":true,"timeZone":"America/Los_Angeles"},"created":"2016-12-04T19:57:35.269+0000","updated":"2016-12-04T19:57:35.269+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13002528/comment/15720507","id":"15720507","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"body":"-1 overall.  GitHub Pull Request  Build\n      \n\n    +1 @author.  The patch does not contain any @author tags.\n\n    +1 tests included.  The patch appears to include 7 new or modified tests.\n\n    +1 javadoc.  The javadoc tool did not generate any warning messages.\n\n    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.\n\n    +1 findbugs.  The patch does not introduce any new Findbugs (version 3.0.1) warnings.\n\n    +1 release audit.  The applied patch does not increase the total number of release audit warnings.\n\n    -1 core tests.  The patch failed core unit tests.\n\n    +1 contrib tests.  The patch passed contrib unit tests.\n\nTest results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/98//testReport/\nFindbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/98//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html\nConsole output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/98//console\n\nThis message is automatically generated.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"created":"2016-12-04T20:06:16.626+0000","updated":"2016-12-04T20:06:16.626+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13002528/comment/15720532","id":"15720532","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"body":"-1 overall.  Here are the results of testing the latest attachment \n  http://issues.apache.org/jira/secure/attachment/12841678/ZOOKEEPER-2549-5.patch\n  against trunk revision 73d6bf5353586e49740f77291d1fd98b07f916cc.\n\n    +1 @author.  The patch does not contain any @author tags.\n\n    +1 tests included.  The patch appears to include 7 new or modified tests.\n\n    +1 javadoc.  The javadoc tool did not generate any warning messages.\n\n    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.\n\n    +1 findbugs.  The patch does not introduce any new Findbugs (version 3.0.1) warnings.\n\n    +1 release audit.  The applied patch does not increase the total number of release audit warnings.\n\n    -1 core tests.  The patch failed core unit tests.\n\n    +1 contrib tests.  The patch passed contrib unit tests.\n\nTest results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3538//testReport/\nFindbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3538//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html\nConsole output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3538//console\n\nThis message is automatically generated.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"created":"2016-12-04T20:21:34.466+0000","updated":"2016-12-04T20:21:34.466+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13002528/comment/15722944","id":"15722944","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user hanm commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/99#discussion_r90924628\n  \n    --- Diff: src/java/main/org/apache/zookeeper/server/NettyServerCnxn.java ---\n    @@ -71,7 +71,7 @@\n         NettyServerCnxnFactory factory;\n         boolean initialized;\n         \n    -    NettyServerCnxn(Channel channel, ZooKeeperServer zks, NettyServerCnxnFactory factory) {\n    +    public NettyServerCnxn(Channel channel, ZooKeeperServer zks, NettyServerCnxnFactory factory) {\n    --- End diff --\n    \n    @yufeldman Thanks for explaining, makes sense to me. It is required to run the tests, however I do find another problem with tests: it looks like the Netty tests (testNetty*) never run with current configuration. Proof: remove the public access specifier appertain to `NettyServerCnxn` and all tests of `ServerCxnExceptionsTest` still pass. We expect Netty related tests fail here without public access specifier, right? Now put back the public for `NettyServerCnxn` but remove the public access specifier appertains to `NIOServercCnxn`, now all tests failed while we expect only NIO tests fail but Netty tests pass. \n    \n    It's likely caused by the intervening of the java system properties that controls the Netty vs NIO server selection. One solution is to split the `ServerCxnExceptionsTest` into Netty and NIO specific tests. \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2016-12-05T18:23:40.486+0000","updated":"2016-12-05T18:23:40.486+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13002528/comment/15723084","id":"15723084","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user yufeldman commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/99#discussion_r90935413\n  \n    --- Diff: src/java/main/org/apache/zookeeper/server/NettyServerCnxn.java ---\n    @@ -71,7 +71,7 @@\n         NettyServerCnxnFactory factory;\n         boolean initialized;\n         \n    -    NettyServerCnxn(Channel channel, ZooKeeperServer zks, NettyServerCnxnFactory factory) {\n    +    public NettyServerCnxn(Channel channel, ZooKeeperServer zks, NettyServerCnxnFactory factory) {\n    --- End diff --\n    \n    @hanm - there is nothing wrong with the tests, they do run fine. They do not use ctor from NettyServerCnxn, but from MockNettyServerCnxn - that has public ctor.\n    You can make MockNettyServerCnxn not public and you will have the same issue. And BTW \n    org.apache.zookeeper.server.NettyServerCnxnTest fails with not public ctor in NettyServerCnxn \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2016-12-05T19:18:59.807+0000","updated":"2016-12-05T19:18:59.807+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13002528/comment/15723194","id":"15723194","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user hanm commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/99#discussion_r90942133\n  \n    --- Diff: src/java/main/org/apache/zookeeper/server/NettyServerCnxn.java ---\n    @@ -71,7 +71,7 @@\n         NettyServerCnxnFactory factory;\n         boolean initialized;\n         \n    -    NettyServerCnxn(Channel channel, ZooKeeperServer zks, NettyServerCnxnFactory factory) {\n    +    public NettyServerCnxn(Channel channel, ZooKeeperServer zks, NettyServerCnxnFactory factory) {\n    --- End diff --\n    \n    @yufeldman Yeah the tests are fine. What I mentioned that leads to `NettyServerCnxnx` not get instantiated only happens in erroneous cases when `ZOOKEEPER_SERVER_CNXN_FACTORY` is not initialized properly - this happens when the public specifier was removed so all tests fall back to create `NIOServerCnxnx` instead. That's not a real alarm.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2016-12-05T19:52:21.331+0000","updated":"2016-12-05T19:52:21.331+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13002528/comment/15723196","id":"15723196","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user hanm commented on the issue:\n\n    https://github.com/apache/zookeeper/pull/99\n  \n    +1 with latest update.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2016-12-05T19:52:52.212+0000","updated":"2016-12-05T19:52:52.212+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13002528/comment/15723437","id":"15723437","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user hanm commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/99#discussion_r90960756\n  \n    --- Diff: src/java/main/org/apache/zookeeper/server/NettyServerCnxn.java ---\n    @@ -71,7 +71,7 @@\n         NettyServerCnxnFactory factory;\n         boolean initialized;\n         \n    -    NettyServerCnxn(Channel channel, ZooKeeperServer zks, NettyServerCnxnFactory factory) {\n    +    public NettyServerCnxn(Channel channel, ZooKeeperServer zks, NettyServerCnxnFactory factory) {\n    --- End diff --\n    \n    >> It is not the case, they don't fall back to NIO - they fail.\n    The fallback I was referring to is https://github.com/apache/zookeeper/blob/master/src/java/main/org/apache/zookeeper/server/ServerCnxnFactory.java#L130. It gets hit when public was removed from NIOServerCnxn for Netty* tests. An example call stack (note that a Netty test complaining about NIOServerCnxnFactory):\n    ` INFO  [main:ZKTestCase$1@70] - FAILED testNettyRunTimeException\n    java.io.IOException: Couldn't instantiate org.apache.zookeeper.server.NIOServerCnxnFactory\n    >-------at org.apache.zookeeper.server.ServerCnxnFactory.createFactory(ServerCnxnFactory.java:142)\n    >-------at org.apache.zookeeper.server.ServerCnxnFactory.createFactory(ServerCnxnFactory.java:158)\n    >-------at org.apache.zookeeper.server.ServerCnxnFactory.createFactory(ServerCnxnFactory.java:152)`\n    \n    Thanks for persisting on this, but I don't think this erroneous case need to be investigated further as it would not happen when real test cases were running.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2016-12-05T21:36:27.755+0000","updated":"2016-12-05T21:36:27.755+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13002528/comment/15723470","id":"15723470","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user yufeldman commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/99#discussion_r90963562\n  \n    --- Diff: src/java/main/org/apache/zookeeper/server/NettyServerCnxn.java ---\n    @@ -71,7 +71,7 @@\n         NettyServerCnxnFactory factory;\n         boolean initialized;\n         \n    -    NettyServerCnxn(Channel channel, ZooKeeperServer zks, NettyServerCnxnFactory factory) {\n    +    public NettyServerCnxn(Channel channel, ZooKeeperServer zks, NettyServerCnxnFactory factory) {\n    --- End diff --\n    \n    Interesting. For me it actually is:\n    \n    2016-12-05 11:11:02,523 [myid:] - INFO  [Time-limited test:JUnit4ZKTestRunner$LoggedInvokeMethod@98] - TEST METHOD FAILED testNettyRunTimeException\n    **java.io.IOException: Couldn't instantiate org.apache.zookeeper.server.NettyServerCnxnFactory\n            at org.apache.zookeeper.server.ServerCnxnFactory.createFactory(ServerCnxnFactory.java:141)\n            at org.apache.zookeeper.server.ServerCnxnFactory.createFactory(ServerCnxnFactory.java:157)\n            at org.apache.zookeeper.server.ServerCnxnFactory.createFactory(ServerCnxnFactory.java:151)**\n\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2016-12-05T21:51:16.297+0000","updated":"2016-12-05T21:51:16.297+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13002528/comment/15723475","id":"15723475","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user yufeldman commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/99#discussion_r90963807\n  \n    --- Diff: src/java/main/org/apache/zookeeper/server/NettyServerCnxn.java ---\n    @@ -71,7 +71,7 @@\n         NettyServerCnxnFactory factory;\n         boolean initialized;\n         \n    -    NettyServerCnxn(Channel channel, ZooKeeperServer zks, NettyServerCnxnFactory factory) {\n    +    public NettyServerCnxn(Channel channel, ZooKeeperServer zks, NettyServerCnxnFactory factory) {\n    --- End diff --\n    \n    @hanm - thank you for all the reviews and feedback. Really appreciate it.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2016-12-05T21:52:36.571+0000","updated":"2016-12-05T21:52:36.571+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13002528/comment/15746729","id":"15746729","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user eribeiro commented on the issue:\n\n    https://github.com/apache/zookeeper/pull/99\n  \n    I like this patch, but I think the whole reflection/mock thing is kind of reinventing a fault injection inside the test classes. If so, why not use a production ready framework as Byteman? I wrote a PR that strips the boilerplate stuff while leaving the feature of this PR: https://github.com/apache/zookeeper/pull/123 \n    \n    Still a PoC, so any suggestions are welcome. :)\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2016-12-14T00:25:51.179+0000","updated":"2016-12-14T00:25:51.179+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13002528/comment/15746731","id":"15746731","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user eribeiro commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/99#discussion_r92271380\n  \n    --- Diff: src/java/test/org/apache/zookeeper/server/ServerCxnExceptionsTest.java ---\n    @@ -0,0 +1,170 @@\n    +/**\n    + * Licensed to the Apache Software Foundation (ASF) under one\n    + * or more contributor license agreements.  See the NOTICE file\n    + * distributed with this work for additional information\n    + * regarding copyright ownership.  The ASF licenses this file\n    + * to you under the Apache License, Version 2.0 (the\n    + * \"License\"); you may not use this file except in compliance\n    + * with the License.  You may obtain a copy of the License at\n    + *\n    + *     http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +package org.apache.zookeeper.server;\n    +\n    +import org.apache.zookeeper.CreateMode;\n    +import org.apache.zookeeper.KeeperException;\n    +import org.apache.zookeeper.ZooDefs;\n    +import org.apache.zookeeper.ZooKeeper;\n    +import org.apache.zookeeper.data.Stat;\n    +import org.apache.zookeeper.test.ClientBase;\n    +import org.junit.AfterClass;\n    +import org.junit.Test;\n    +import org.slf4j.Logger;\n    +import org.slf4j.LoggerFactory;\n    +\n    +import static org.junit.Assert.fail;\n    +\n    +/**\n    + * Unit tests to test different exceptions scenarious in sendResponse\n    + */\n    +public class ServerCxnExceptionsTest extends ClientBase {\n    +\n    +  private static final Logger LOG = LoggerFactory.getLogger(ServerCxnExceptionsTest.class);\n    +\n    +  private String exceptionType;\n    +\n    +  private void NettySetup() throws Exception {\n    +    System.setProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN_FACTORY,\n    +      \"org.apache.zookeeper.server.NettyServerCnxnFactory\");\n    +    System.setProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN, \"org.apache.zookeeper.server.MockNettyServerCnxn\");\n    +    System.setProperty(\"exception.type\", \"NoException\");\n    +  }\n    +\n    +  private void NIOSetup() throws Exception {\n    +    System.setProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN_FACTORY,\n    +      \"org.apache.zookeeper.server.NIOServerCnxnFactory\");\n    +    System.setProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN, \"org.apache.zookeeper.server.MockNIOServerCnxn\");\n    +    System.setProperty(\"exception.type\", \"NoException\");\n    +  }\n    +\n    +  @AfterClass\n    +  public static void tearDownAfterClass() throws Exception {\n    +    System.clearProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN_FACTORY);\n    +    System.clearProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN);\n    +    System.clearProperty(\"exception.type\");\n    +  }\n    +\n    +  @Test (timeout = 60000)\n    +  public void testNettyIOException() throws Exception {\n    +    tearDown();\n    +    NettySetup();\n    +    testIOExceptionHelper();\n    +  }\n    +\n    +  @Test (timeout = 60000)\n    +  public void testNIOIOException() throws Exception {\n    +    tearDown();\n    +    NIOSetup();\n    +    testIOExceptionHelper();\n    +  }\n    +\n    +  private void testIOExceptionHelper() throws Exception {\n    +    System.setProperty(\"exception.type\", \"IOException\");\n    +    super.setUp();\n    +    final ZooKeeper zk = createClient();\n    +    final String path = \"/a\";\n    +    try {\n    +      // make sure zkclient works\n    +      zk.create(path, \"test\".getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE,\n    +        CreateMode.EPHEMERAL);\n    +      fail(\"Should not come here\");\n    +      Stat stats = zk.exists(path, false);\n    +      if (stats != null) {\n    +        int length = stats.getDataLength();\n    +      }\n    +    } catch (KeeperException.ConnectionLossException cle) {\n    +      LOG.info(\"ConnectionLossException: {}\", cle);\n    --- End diff --\n    \n    1. Why we need to log the message here?\n    \n    2. Why we need to serialize ``cle``? Would it be ``cle.getMessage()``?\n    \n    3. Wouldn't be better to let it throw the ``KeeperException.ConnectionLossException`` and make the test catch it with ``expected`` as below?\n    \n    ```\n    @Test(timeout = 60000, expected = KeeperException.ConnectionLossException)\n    ```\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2016-12-14T00:26:19.229+0000","updated":"2016-12-14T00:26:19.229+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13002528/comment/15746732","id":"15746732","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user eribeiro commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/99#discussion_r92268597\n  \n    --- Diff: src/java/test/org/apache/zookeeper/server/ServerCxnExceptionsTest.java ---\n    @@ -0,0 +1,170 @@\n    +/**\n    + * Licensed to the Apache Software Foundation (ASF) under one\n    + * or more contributor license agreements.  See the NOTICE file\n    + * distributed with this work for additional information\n    + * regarding copyright ownership.  The ASF licenses this file\n    + * to you under the Apache License, Version 2.0 (the\n    + * \"License\"); you may not use this file except in compliance\n    + * with the License.  You may obtain a copy of the License at\n    + *\n    + *     http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +package org.apache.zookeeper.server;\n    +\n    +import org.apache.zookeeper.CreateMode;\n    +import org.apache.zookeeper.KeeperException;\n    +import org.apache.zookeeper.ZooDefs;\n    +import org.apache.zookeeper.ZooKeeper;\n    +import org.apache.zookeeper.data.Stat;\n    +import org.apache.zookeeper.test.ClientBase;\n    +import org.junit.AfterClass;\n    +import org.junit.Test;\n    +import org.slf4j.Logger;\n    +import org.slf4j.LoggerFactory;\n    +\n    +import static org.junit.Assert.fail;\n    +\n    +/**\n    + * Unit tests to test different exceptions scenarious in sendResponse\n    + */\n    +public class ServerCxnExceptionsTest extends ClientBase {\n    +\n    +  private static final Logger LOG = LoggerFactory.getLogger(ServerCxnExceptionsTest.class);\n    +\n    +  private String exceptionType;\n    +\n    +  private void NettySetup() throws Exception {\n    +    System.setProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN_FACTORY,\n    +      \"org.apache.zookeeper.server.NettyServerCnxnFactory\");\n    +    System.setProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN, \"org.apache.zookeeper.server.MockNettyServerCnxn\");\n    +    System.setProperty(\"exception.type\", \"NoException\");\n    +  }\n    +\n    +  private void NIOSetup() throws Exception {\n    +    System.setProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN_FACTORY,\n    +      \"org.apache.zookeeper.server.NIOServerCnxnFactory\");\n    +    System.setProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN, \"org.apache.zookeeper.server.MockNIOServerCnxn\");\n    +    System.setProperty(\"exception.type\", \"NoException\");\n    +  }\n    +\n    +  @AfterClass\n    +  public static void tearDownAfterClass() throws Exception {\n    +    System.clearProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN_FACTORY);\n    +    System.clearProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN);\n    +    System.clearProperty(\"exception.type\");\n    +  }\n    +\n    +  @Test (timeout = 60000)\n    +  public void testNettyIOException() throws Exception {\n    +    tearDown();\n    +    NettySetup();\n    +    testIOExceptionHelper();\n    +  }\n    +\n    +  @Test (timeout = 60000)\n    +  public void testNIOIOException() throws Exception {\n    +    tearDown();\n    +    NIOSetup();\n    +    testIOExceptionHelper();\n    +  }\n    +\n    +  private void testIOExceptionHelper() throws Exception {\n    +    System.setProperty(\"exception.type\", \"IOException\");\n    +    super.setUp();\n    +    final ZooKeeper zk = createClient();\n    +    final String path = \"/a\";\n    +    try {\n    +      // make sure zkclient works\n    +      zk.create(path, \"test\".getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE,\n    +        CreateMode.EPHEMERAL);\n    +      fail(\"Should not come here\");\n    +      Stat stats = zk.exists(path, false);\n    --- End diff --\n    \n    I didn't get why we need the lines 87-90, because ``fail()`` throws an ``AssertionError`` that will interrupt the processing flow, so those lines are effectively unreachable, right? There's should be nothing more after the `fail()`, I **guess**.\n    \n    Also, I would suggest to put a more meaningful message, something along the lines of ``sendResponse should have thrown IOException and failed this test.``\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2016-12-14T00:26:19.260+0000","updated":"2016-12-14T00:26:19.260+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13002528/comment/15746733","id":"15746733","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user eribeiro commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/99#discussion_r92264074\n  \n    --- Diff: src/java/main/org/apache/zookeeper/server/NIOServerCnxn.java ---\n    @@ -716,7 +716,12 @@ public void process(WatchedEvent event) {\n             // Convert WatchedEvent to a type that can be sent over the wire\n             WatcherEvent e = event.getWrapper();\n     \n    -        sendResponse(h, e, \"notification\");\n    +        try {\n    +            sendResponse(h, e, \"notification\");\n    +        } catch (IOException ex) {\n    +            LOG.debug(\"Problem sending to \" + getRemoteSocketAddress(), ex);\n    --- End diff --\n    \n    nit: I would use a modern debug format:\n    \n    ``\n    LOG.debug(\"Problem sending to {}\", getRemoteSocketAddress(), ex);\n    ``\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2016-12-14T00:26:19.391+0000","updated":"2016-12-14T00:26:19.391+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13002528/comment/15746734","id":"15746734","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user eribeiro commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/99#discussion_r92296029\n  \n    --- Diff: src/java/test/org/apache/zookeeper/server/ServerCxnExceptionsTest.java ---\n    @@ -0,0 +1,170 @@\n    +/**\n    + * Licensed to the Apache Software Foundation (ASF) under one\n    + * or more contributor license agreements.  See the NOTICE file\n    + * distributed with this work for additional information\n    + * regarding copyright ownership.  The ASF licenses this file\n    + * to you under the Apache License, Version 2.0 (the\n    + * \"License\"); you may not use this file except in compliance\n    + * with the License.  You may obtain a copy of the License at\n    + *\n    + *     http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +package org.apache.zookeeper.server;\n    +\n    +import org.apache.zookeeper.CreateMode;\n    +import org.apache.zookeeper.KeeperException;\n    +import org.apache.zookeeper.ZooDefs;\n    +import org.apache.zookeeper.ZooKeeper;\n    +import org.apache.zookeeper.data.Stat;\n    +import org.apache.zookeeper.test.ClientBase;\n    +import org.junit.AfterClass;\n    +import org.junit.Test;\n    +import org.slf4j.Logger;\n    +import org.slf4j.LoggerFactory;\n    +\n    +import static org.junit.Assert.fail;\n    +\n    +/**\n    + * Unit tests to test different exceptions scenarious in sendResponse\n    + */\n    +public class ServerCxnExceptionsTest extends ClientBase {\n    --- End diff --\n    \n    In this file, tab is indented with 2 spaces while the rest of the ZooKeeper files use 4 spaces (I only discovered this 'cause my IDE complained about it).\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2016-12-14T00:26:19.393+0000","updated":"2016-12-14T00:26:19.393+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13002528/comment/15746735","id":"15746735","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user eribeiro commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/99#discussion_r92269683\n  \n    --- Diff: src/java/test/org/apache/zookeeper/server/ServerCxnExceptionsTest.java ---\n    @@ -0,0 +1,170 @@\n    +/**\n    + * Licensed to the Apache Software Foundation (ASF) under one\n    + * or more contributor license agreements.  See the NOTICE file\n    + * distributed with this work for additional information\n    + * regarding copyright ownership.  The ASF licenses this file\n    + * to you under the Apache License, Version 2.0 (the\n    + * \"License\"); you may not use this file except in compliance\n    + * with the License.  You may obtain a copy of the License at\n    + *\n    + *     http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +package org.apache.zookeeper.server;\n    +\n    +import org.apache.zookeeper.CreateMode;\n    +import org.apache.zookeeper.KeeperException;\n    +import org.apache.zookeeper.ZooDefs;\n    +import org.apache.zookeeper.ZooKeeper;\n    +import org.apache.zookeeper.data.Stat;\n    +import org.apache.zookeeper.test.ClientBase;\n    +import org.junit.AfterClass;\n    +import org.junit.Test;\n    +import org.slf4j.Logger;\n    +import org.slf4j.LoggerFactory;\n    +\n    +import static org.junit.Assert.fail;\n    +\n    +/**\n    + * Unit tests to test different exceptions scenarious in sendResponse\n    + */\n    +public class ServerCxnExceptionsTest extends ClientBase {\n    +\n    +  private static final Logger LOG = LoggerFactory.getLogger(ServerCxnExceptionsTest.class);\n    +\n    +  private String exceptionType;\n    +\n    +  private void NettySetup() throws Exception {\n    +    System.setProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN_FACTORY,\n    +      \"org.apache.zookeeper.server.NettyServerCnxnFactory\");\n    +    System.setProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN, \"org.apache.zookeeper.server.MockNettyServerCnxn\");\n    +    System.setProperty(\"exception.type\", \"NoException\");\n    +  }\n    +\n    +  private void NIOSetup() throws Exception {\n    --- End diff --\n    \n    Method name doesn't follow camel case convention (``nioSetup`` instead of ``NIOSetup``).\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2016-12-14T00:26:19.394+0000","updated":"2016-12-14T00:26:19.394+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13002528/comment/15746736","id":"15746736","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user eribeiro commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/99#discussion_r92274850\n  \n    --- Diff: src/java/test/org/apache/zookeeper/server/ServerCxnExceptionsTest.java ---\n    @@ -0,0 +1,170 @@\n    +/**\n    + * Licensed to the Apache Software Foundation (ASF) under one\n    + * or more contributor license agreements.  See the NOTICE file\n    + * distributed with this work for additional information\n    + * regarding copyright ownership.  The ASF licenses this file\n    + * to you under the Apache License, Version 2.0 (the\n    + * \"License\"); you may not use this file except in compliance\n    + * with the License.  You may obtain a copy of the License at\n    + *\n    + *     http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +package org.apache.zookeeper.server;\n    +\n    +import org.apache.zookeeper.CreateMode;\n    +import org.apache.zookeeper.KeeperException;\n    +import org.apache.zookeeper.ZooDefs;\n    +import org.apache.zookeeper.ZooKeeper;\n    +import org.apache.zookeeper.data.Stat;\n    +import org.apache.zookeeper.test.ClientBase;\n    +import org.junit.AfterClass;\n    +import org.junit.Test;\n    +import org.slf4j.Logger;\n    +import org.slf4j.LoggerFactory;\n    +\n    +import static org.junit.Assert.fail;\n    +\n    +/**\n    + * Unit tests to test different exceptions scenarious in sendResponse\n    + */\n    +public class ServerCxnExceptionsTest extends ClientBase {\n    +\n    +  private static final Logger LOG = LoggerFactory.getLogger(ServerCxnExceptionsTest.class);\n    +\n    +  private String exceptionType;\n    +\n    +  private void NettySetup() throws Exception {\n    +    System.setProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN_FACTORY,\n    +      \"org.apache.zookeeper.server.NettyServerCnxnFactory\");\n    +    System.setProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN, \"org.apache.zookeeper.server.MockNettyServerCnxn\");\n    +    System.setProperty(\"exception.type\", \"NoException\");\n    +  }\n    +\n    +  private void NIOSetup() throws Exception {\n    +    System.setProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN_FACTORY,\n    +      \"org.apache.zookeeper.server.NIOServerCnxnFactory\");\n    +    System.setProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN, \"org.apache.zookeeper.server.MockNIOServerCnxn\");\n    +    System.setProperty(\"exception.type\", \"NoException\");\n    +  }\n    +\n    +  @AfterClass\n    +  public static void tearDownAfterClass() throws Exception {\n    +    System.clearProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN_FACTORY);\n    +    System.clearProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN);\n    +    System.clearProperty(\"exception.type\");\n    +  }\n    +\n    +  @Test (timeout = 60000)\n    +  public void testNettyIOException() throws Exception {\n    +    tearDown();\n    +    NettySetup();\n    +    testIOExceptionHelper();\n    +  }\n    +\n    +  @Test (timeout = 60000)\n    +  public void testNIOIOException() throws Exception {\n    +    tearDown();\n    +    NIOSetup();\n    +    testIOExceptionHelper();\n    +  }\n    +\n    +  private void testIOExceptionHelper() throws Exception {\n    +    System.setProperty(\"exception.type\", \"IOException\");\n    +    super.setUp();\n    +    final ZooKeeper zk = createClient();\n    +    final String path = \"/a\";\n    +    try {\n    +      // make sure zkclient works\n    +      zk.create(path, \"test\".getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE,\n    +        CreateMode.EPHEMERAL);\n    +      fail(\"Should not come here\");\n    +      Stat stats = zk.exists(path, false);\n    +      if (stats != null) {\n    +        int length = stats.getDataLength();\n    +      }\n    +    } catch (KeeperException.ConnectionLossException cle) {\n    +      LOG.info(\"ConnectionLossException: {}\", cle);\n    +    } finally {\n    +      zk.close();\n    +    }\n    +  }\n    +\n    +  @Test (timeout = 10000)\n    +  public void testNettyNoException() throws Exception {\n    +    tearDown();\n    +    NettySetup();\n    +    testZKNoExceptionHelper();\n    +  }\n    +\n    +  @Test (timeout = 10000)\n    --- End diff --\n    \n    Same as above: why decrease the timeout?\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2016-12-14T00:26:19.394+0000","updated":"2016-12-14T00:26:19.394+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13002528/comment/15746737","id":"15746737","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user eribeiro commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/99#discussion_r92283709\n  \n    --- Diff: src/java/test/org/apache/zookeeper/server/ServerCxnExceptionsTest.java ---\n    @@ -0,0 +1,170 @@\n    +/**\n    + * Licensed to the Apache Software Foundation (ASF) under one\n    + * or more contributor license agreements.  See the NOTICE file\n    + * distributed with this work for additional information\n    + * regarding copyright ownership.  The ASF licenses this file\n    + * to you under the Apache License, Version 2.0 (the\n    + * \"License\"); you may not use this file except in compliance\n    + * with the License.  You may obtain a copy of the License at\n    + *\n    + *     http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +package org.apache.zookeeper.server;\n    +\n    +import org.apache.zookeeper.CreateMode;\n    +import org.apache.zookeeper.KeeperException;\n    +import org.apache.zookeeper.ZooDefs;\n    +import org.apache.zookeeper.ZooKeeper;\n    +import org.apache.zookeeper.data.Stat;\n    +import org.apache.zookeeper.test.ClientBase;\n    +import org.junit.AfterClass;\n    +import org.junit.Test;\n    +import org.slf4j.Logger;\n    +import org.slf4j.LoggerFactory;\n    +\n    +import static org.junit.Assert.fail;\n    +\n    +/**\n    + * Unit tests to test different exceptions scenarious in sendResponse\n    + */\n    +public class ServerCxnExceptionsTest extends ClientBase {\n    +\n    +  private static final Logger LOG = LoggerFactory.getLogger(ServerCxnExceptionsTest.class);\n    +\n    +  private String exceptionType;\n    +\n    +  private void NettySetup() throws Exception {\n    +    System.setProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN_FACTORY,\n    +      \"org.apache.zookeeper.server.NettyServerCnxnFactory\");\n    +    System.setProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN, \"org.apache.zookeeper.server.MockNettyServerCnxn\");\n    +    System.setProperty(\"exception.type\", \"NoException\");\n    +  }\n    +\n    +  private void NIOSetup() throws Exception {\n    +    System.setProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN_FACTORY,\n    +      \"org.apache.zookeeper.server.NIOServerCnxnFactory\");\n    +    System.setProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN, \"org.apache.zookeeper.server.MockNIOServerCnxn\");\n    +    System.setProperty(\"exception.type\", \"NoException\");\n    +  }\n    +\n    +  @AfterClass\n    +  public static void tearDownAfterClass() throws Exception {\n    +    System.clearProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN_FACTORY);\n    +    System.clearProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN);\n    +    System.clearProperty(\"exception.type\");\n    +  }\n    +\n    +  @Test (timeout = 60000)\n    +  public void testNettyIOException() throws Exception {\n    +    tearDown();\n    +    NettySetup();\n    +    testIOExceptionHelper();\n    +  }\n    +\n    +  @Test (timeout = 60000)\n    +  public void testNIOIOException() throws Exception {\n    +    tearDown();\n    +    NIOSetup();\n    +    testIOExceptionHelper();\n    +  }\n    +\n    +  private void testIOExceptionHelper() throws Exception {\n    +    System.setProperty(\"exception.type\", \"IOException\");\n    +    super.setUp();\n    +    final ZooKeeper zk = createClient();\n    +    final String path = \"/a\";\n    +    try {\n    +      // make sure zkclient works\n    +      zk.create(path, \"test\".getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE,\n    +        CreateMode.EPHEMERAL);\n    +      fail(\"Should not come here\");\n    +      Stat stats = zk.exists(path, false);\n    +      if (stats != null) {\n    +        int length = stats.getDataLength();\n    +      }\n    +    } catch (KeeperException.ConnectionLossException cle) {\n    +      LOG.info(\"ConnectionLossException: {}\", cle);\n    +    } finally {\n    +      zk.close();\n    +    }\n    +  }\n    +\n    +  @Test (timeout = 10000)\n    +  public void testNettyNoException() throws Exception {\n    +    tearDown();\n    +    NettySetup();\n    +    testZKNoExceptionHelper();\n    +  }\n    +\n    +  @Test (timeout = 10000)\n    +  public void testNIONoException() throws Exception {\n    +    tearDown();\n    +    NIOSetup();\n    +    testZKNoExceptionHelper();\n    +  }\n    +\n    +  private void testZKNoExceptionHelper() throws Exception {\n    +    System.setProperty(\"exception.type\", \"NoException\");\n    +    super.setUp();\n    +    final ZooKeeper zk = createClient();\n    +    final String path = \"/a\";\n    +    try {\n    +      // make sure zkclient works\n    +      zk.create(path, \"test\".getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE,\n    +        CreateMode.EPHEMERAL);\n    +      Stat stats = zk.exists(path, false);\n    +      if ( stats != null ) {\n    +        int length = stats.getDataLength();\n    +      }\n    +    } catch (KeeperException.ConnectionLossException cle) {\n    +      LOG.error(\"ConnectionLossException: {}\", cle);\n    +      fail(\"No exception should be thrown\");\n    +    } catch (Throwable t) {\n    +      // error\n    +      LOG.error(\"Throwable {}\", t);\n    +      fail(\"No exception should be thrown\");\n    +    } finally {\n    +      zk.close();\n    +    }\n    +  }\n    +  @Test (timeout = 10000)\n    +  public void testNettyRunTimeException() throws Exception {\n    +    tearDown();\n    +    NettySetup();\n    +    testZKRunTimeExceptionHelper();\n    +  }\n    +\n    +  @Test (timeout = 10000)\n    +  public void testNIORunTimeException() throws Exception {\n    +    tearDown();\n    +    NIOSetup();\n    +    testZKRunTimeExceptionHelper();\n    +  }\n    +\n    +  private void testZKRunTimeExceptionHelper() throws Exception {\n    --- End diff --\n    \n    My gut feeling is that most -- if not all -- of those helpers can be collapsed into a single method. Or at least two, because there's a lot of code duplication in those helpers. For example, the exception type could be passed via parameter as well as a boolean (``shouldFail``) that states if the method could or not throw an exception. Just an idea, but this could save some repetition, I **guess**. :)\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2016-12-14T00:26:19.395+0000","updated":"2016-12-14T00:26:19.395+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13002528/comment/15746738","id":"15746738","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user eribeiro commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/99#discussion_r92274772\n  \n    --- Diff: src/java/test/org/apache/zookeeper/server/ServerCxnExceptionsTest.java ---\n    @@ -0,0 +1,170 @@\n    +/**\n    + * Licensed to the Apache Software Foundation (ASF) under one\n    + * or more contributor license agreements.  See the NOTICE file\n    + * distributed with this work for additional information\n    + * regarding copyright ownership.  The ASF licenses this file\n    + * to you under the Apache License, Version 2.0 (the\n    + * \"License\"); you may not use this file except in compliance\n    + * with the License.  You may obtain a copy of the License at\n    + *\n    + *     http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +package org.apache.zookeeper.server;\n    +\n    +import org.apache.zookeeper.CreateMode;\n    +import org.apache.zookeeper.KeeperException;\n    +import org.apache.zookeeper.ZooDefs;\n    +import org.apache.zookeeper.ZooKeeper;\n    +import org.apache.zookeeper.data.Stat;\n    +import org.apache.zookeeper.test.ClientBase;\n    +import org.junit.AfterClass;\n    +import org.junit.Test;\n    +import org.slf4j.Logger;\n    +import org.slf4j.LoggerFactory;\n    +\n    +import static org.junit.Assert.fail;\n    +\n    +/**\n    + * Unit tests to test different exceptions scenarious in sendResponse\n    + */\n    +public class ServerCxnExceptionsTest extends ClientBase {\n    +\n    +  private static final Logger LOG = LoggerFactory.getLogger(ServerCxnExceptionsTest.class);\n    +\n    +  private String exceptionType;\n    +\n    +  private void NettySetup() throws Exception {\n    +    System.setProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN_FACTORY,\n    +      \"org.apache.zookeeper.server.NettyServerCnxnFactory\");\n    +    System.setProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN, \"org.apache.zookeeper.server.MockNettyServerCnxn\");\n    +    System.setProperty(\"exception.type\", \"NoException\");\n    +  }\n    +\n    +  private void NIOSetup() throws Exception {\n    +    System.setProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN_FACTORY,\n    +      \"org.apache.zookeeper.server.NIOServerCnxnFactory\");\n    +    System.setProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN, \"org.apache.zookeeper.server.MockNIOServerCnxn\");\n    +    System.setProperty(\"exception.type\", \"NoException\");\n    +  }\n    +\n    +  @AfterClass\n    +  public static void tearDownAfterClass() throws Exception {\n    +    System.clearProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN_FACTORY);\n    +    System.clearProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN);\n    +    System.clearProperty(\"exception.type\");\n    +  }\n    +\n    +  @Test (timeout = 60000)\n    +  public void testNettyIOException() throws Exception {\n    +    tearDown();\n    +    NettySetup();\n    +    testIOExceptionHelper();\n    +  }\n    +\n    +  @Test (timeout = 60000)\n    +  public void testNIOIOException() throws Exception {\n    +    tearDown();\n    +    NIOSetup();\n    +    testIOExceptionHelper();\n    +  }\n    +\n    +  private void testIOExceptionHelper() throws Exception {\n    +    System.setProperty(\"exception.type\", \"IOException\");\n    +    super.setUp();\n    +    final ZooKeeper zk = createClient();\n    +    final String path = \"/a\";\n    +    try {\n    +      // make sure zkclient works\n    +      zk.create(path, \"test\".getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE,\n    +        CreateMode.EPHEMERAL);\n    +      fail(\"Should not come here\");\n    +      Stat stats = zk.exists(path, false);\n    +      if (stats != null) {\n    +        int length = stats.getDataLength();\n    +      }\n    +    } catch (KeeperException.ConnectionLossException cle) {\n    +      LOG.info(\"ConnectionLossException: {}\", cle);\n    +    } finally {\n    +      zk.close();\n    +    }\n    +  }\n    +\n    +  @Test (timeout = 10000)\n    --- End diff --\n    \n    We usually put 1 minute (60000 ms) timeout, why decrease here? If **I** understood correctly, test timeouts define a maximum execution threshold, but they won't execute faster if we decrease, right?\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2016-12-14T00:26:19.395+0000","updated":"2016-12-14T00:26:19.395+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13002528/comment/15746739","id":"15746739","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user eribeiro commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/99#discussion_r92282690\n  \n    --- Diff: src/java/test/org/apache/zookeeper/server/ServerCxnExceptionsTest.java ---\n    @@ -0,0 +1,170 @@\n    +/**\n    + * Licensed to the Apache Software Foundation (ASF) under one\n    + * or more contributor license agreements.  See the NOTICE file\n    + * distributed with this work for additional information\n    + * regarding copyright ownership.  The ASF licenses this file\n    + * to you under the Apache License, Version 2.0 (the\n    + * \"License\"); you may not use this file except in compliance\n    + * with the License.  You may obtain a copy of the License at\n    + *\n    + *     http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +package org.apache.zookeeper.server;\n    +\n    +import org.apache.zookeeper.CreateMode;\n    +import org.apache.zookeeper.KeeperException;\n    +import org.apache.zookeeper.ZooDefs;\n    +import org.apache.zookeeper.ZooKeeper;\n    +import org.apache.zookeeper.data.Stat;\n    +import org.apache.zookeeper.test.ClientBase;\n    +import org.junit.AfterClass;\n    +import org.junit.Test;\n    +import org.slf4j.Logger;\n    +import org.slf4j.LoggerFactory;\n    +\n    +import static org.junit.Assert.fail;\n    +\n    +/**\n    + * Unit tests to test different exceptions scenarious in sendResponse\n    + */\n    +public class ServerCxnExceptionsTest extends ClientBase {\n    +\n    +  private static final Logger LOG = LoggerFactory.getLogger(ServerCxnExceptionsTest.class);\n    +\n    +  private String exceptionType;\n    +\n    +  private void NettySetup() throws Exception {\n    +    System.setProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN_FACTORY,\n    +      \"org.apache.zookeeper.server.NettyServerCnxnFactory\");\n    +    System.setProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN, \"org.apache.zookeeper.server.MockNettyServerCnxn\");\n    +    System.setProperty(\"exception.type\", \"NoException\");\n    +  }\n    +\n    +  private void NIOSetup() throws Exception {\n    +    System.setProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN_FACTORY,\n    +      \"org.apache.zookeeper.server.NIOServerCnxnFactory\");\n    +    System.setProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN, \"org.apache.zookeeper.server.MockNIOServerCnxn\");\n    +    System.setProperty(\"exception.type\", \"NoException\");\n    +  }\n    +\n    +  @AfterClass\n    +  public static void tearDownAfterClass() throws Exception {\n    +    System.clearProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN_FACTORY);\n    --- End diff --\n    \n    It is a good practice (even tough I dunno we use consistently on ZK codebase) that we use an idiom like the one below:\n    \n    ```\n      private String previousProperty = null;\n    \n      @Before\n      public void setUp() {\n             previous = System.getProperty(MY_PROPERTY_NAME);\n             System.setProperty(MY_PROPERTY_NAME, \"new_value\");\n      }\n    \n     @After\n     public void tearDown() {\n          System.setProperty(MY_PROPERTY_NAME, previousValue);\n     }\n    ```\n    \n    This preserves the previous value of the ``System.property()``, **afaik**.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2016-12-14T00:26:19.395+0000","updated":"2016-12-14T00:26:19.395+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13002528/comment/15746740","id":"15746740","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user eribeiro commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/99#discussion_r92266304\n  \n    --- Diff: src/java/test/org/apache/zookeeper/server/ServerCxnExceptionsTest.java ---\n    @@ -0,0 +1,170 @@\n    +/**\n    + * Licensed to the Apache Software Foundation (ASF) under one\n    + * or more contributor license agreements.  See the NOTICE file\n    + * distributed with this work for additional information\n    + * regarding copyright ownership.  The ASF licenses this file\n    + * to you under the Apache License, Version 2.0 (the\n    + * \"License\"); you may not use this file except in compliance\n    + * with the License.  You may obtain a copy of the License at\n    + *\n    + *     http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +package org.apache.zookeeper.server;\n    +\n    +import org.apache.zookeeper.CreateMode;\n    +import org.apache.zookeeper.KeeperException;\n    +import org.apache.zookeeper.ZooDefs;\n    +import org.apache.zookeeper.ZooKeeper;\n    +import org.apache.zookeeper.data.Stat;\n    +import org.apache.zookeeper.test.ClientBase;\n    +import org.junit.AfterClass;\n    +import org.junit.Test;\n    +import org.slf4j.Logger;\n    +import org.slf4j.LoggerFactory;\n    +\n    +import static org.junit.Assert.fail;\n    +\n    +/**\n    + * Unit tests to test different exceptions scenarious in sendResponse\n    --- End diff --\n    \n    typo: ``scenarios``\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2016-12-14T00:26:19.397+0000","updated":"2016-12-14T00:26:19.397+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13002528/comment/15746741","id":"15746741","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user eribeiro commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/99#discussion_r92297258\n  \n    --- Diff: src/java/test/org/apache/zookeeper/server/ServerCxnExceptionsTest.java ---\n    @@ -0,0 +1,170 @@\n    +/**\n    + * Licensed to the Apache Software Foundation (ASF) under one\n    + * or more contributor license agreements.  See the NOTICE file\n    + * distributed with this work for additional information\n    + * regarding copyright ownership.  The ASF licenses this file\n    + * to you under the Apache License, Version 2.0 (the\n    + * \"License\"); you may not use this file except in compliance\n    + * with the License.  You may obtain a copy of the License at\n    + *\n    + *     http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +package org.apache.zookeeper.server;\n    +\n    +import org.apache.zookeeper.CreateMode;\n    +import org.apache.zookeeper.KeeperException;\n    +import org.apache.zookeeper.ZooDefs;\n    +import org.apache.zookeeper.ZooKeeper;\n    +import org.apache.zookeeper.data.Stat;\n    +import org.apache.zookeeper.test.ClientBase;\n    +import org.junit.AfterClass;\n    +import org.junit.Test;\n    +import org.slf4j.Logger;\n    +import org.slf4j.LoggerFactory;\n    +\n    +import static org.junit.Assert.fail;\n    +\n    +/**\n    + * Unit tests to test different exceptions scenarious in sendResponse\n    + */\n    +public class ServerCxnExceptionsTest extends ClientBase {\n    +\n    +  private static final Logger LOG = LoggerFactory.getLogger(ServerCxnExceptionsTest.class);\n    +\n    +  private String exceptionType;\n    +\n    +  private void NettySetup() throws Exception {\n    +    System.setProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN_FACTORY,\n    +      \"org.apache.zookeeper.server.NettyServerCnxnFactory\");\n    +    System.setProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN, \"org.apache.zookeeper.server.MockNettyServerCnxn\");\n    +    System.setProperty(\"exception.type\", \"NoException\");\n    +  }\n    +\n    +  private void NIOSetup() throws Exception {\n    +    System.setProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN_FACTORY,\n    +      \"org.apache.zookeeper.server.NIOServerCnxnFactory\");\n    +    System.setProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN, \"org.apache.zookeeper.server.MockNIOServerCnxn\");\n    +    System.setProperty(\"exception.type\", \"NoException\");\n    +  }\n    +\n    +  @AfterClass\n    +  public static void tearDownAfterClass() throws Exception {\n    +    System.clearProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN_FACTORY);\n    +    System.clearProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN);\n    +    System.clearProperty(\"exception.type\");\n    +  }\n    +\n    +  @Test (timeout = 60000)\n    +  public void testNettyIOException() throws Exception {\n    +    tearDown();\n    +    NettySetup();\n    +    testIOExceptionHelper();\n    +  }\n    +\n    +  @Test (timeout = 60000)\n    +  public void testNIOIOException() throws Exception {\n    +    tearDown();\n    +    NIOSetup();\n    +    testIOExceptionHelper();\n    +  }\n    +\n    +  private void testIOExceptionHelper() throws Exception {\n    +    System.setProperty(\"exception.type\", \"IOException\");\n    +    super.setUp();\n    +    final ZooKeeper zk = createClient();\n    +    final String path = \"/a\";\n    +    try {\n    +      // make sure zkclient works\n    +      zk.create(path, \"test\".getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE,\n    +        CreateMode.EPHEMERAL);\n    +      fail(\"Should not come here\");\n    +      Stat stats = zk.exists(path, false);\n    +      if (stats != null) {\n    +        int length = stats.getDataLength();\n    +      }\n    +    } catch (KeeperException.ConnectionLossException cle) {\n    +      LOG.info(\"ConnectionLossException: {}\", cle);\n    +    } finally {\n    +      zk.close();\n    +    }\n    +  }\n    +\n    +  @Test (timeout = 10000)\n    +  public void testNettyNoException() throws Exception {\n    +    tearDown();\n    +    NettySetup();\n    +    testZKNoExceptionHelper();\n    +  }\n    +\n    +  @Test (timeout = 10000)\n    +  public void testNIONoException() throws Exception {\n    +    tearDown();\n    +    NIOSetup();\n    +    testZKNoExceptionHelper();\n    +  }\n    +\n    +  private void testZKNoExceptionHelper() throws Exception {\n    +    System.setProperty(\"exception.type\", \"NoException\");\n    +    super.setUp();\n    +    final ZooKeeper zk = createClient();\n    +    final String path = \"/a\";\n    +    try {\n    +      // make sure zkclient works\n    +      zk.create(path, \"test\".getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE,\n    +        CreateMode.EPHEMERAL);\n    +      Stat stats = zk.exists(path, false);\n    +      if ( stats != null ) {\n    +        int length = stats.getDataLength();\n    +      }\n    +    } catch (KeeperException.ConnectionLossException cle) {\n    +      LOG.error(\"ConnectionLossException: {}\", cle);\n    +      fail(\"No exception should be thrown\");\n    +    } catch (Throwable t) {\n    +      // error\n    +      LOG.error(\"Throwable {}\", t);\n    +      fail(\"No exception should be thrown\");\n    +    } finally {\n    +      zk.close();\n    +    }\n    +  }\n    +  @Test (timeout = 10000)\n    +  public void testNettyRunTimeException() throws Exception {\n    +    tearDown();\n    +    NettySetup();\n    +    testZKRunTimeExceptionHelper();\n    +  }\n    +\n    +  @Test (timeout = 10000)\n    +  public void testNIORunTimeException() throws Exception {\n    +    tearDown();\n    +    NIOSetup();\n    +    testZKRunTimeExceptionHelper();\n    +  }\n    +\n    +  private void testZKRunTimeExceptionHelper() throws Exception {\n    +    System.setProperty(\"exception.type\", \"RunTimeException\");\n    +    super.setUp();\n    +    final ZooKeeper zk = createClient();\n    +    final String path = \"/a\";\n    +    try {\n    +      // make sure zkclient works\n    +      String returnPath = zk.create(path, \"test\".getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE,\n    +        CreateMode.EPHEMERAL);\n    +      Stat stats = zk.exists(returnPath, false);\n    +      if ( stats != null ) {\n    --- End diff --\n    \n    nit: extra spaces after the parenthesis.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2016-12-14T00:26:19.398+0000","updated":"2016-12-14T00:26:19.398+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13002528/comment/15746742","id":"15746742","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user eribeiro commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/99#discussion_r92269582\n  \n    --- Diff: src/java/test/org/apache/zookeeper/server/ServerCxnExceptionsTest.java ---\n    @@ -0,0 +1,170 @@\n    +/**\n    + * Licensed to the Apache Software Foundation (ASF) under one\n    + * or more contributor license agreements.  See the NOTICE file\n    + * distributed with this work for additional information\n    + * regarding copyright ownership.  The ASF licenses this file\n    + * to you under the Apache License, Version 2.0 (the\n    + * \"License\"); you may not use this file except in compliance\n    + * with the License.  You may obtain a copy of the License at\n    + *\n    + *     http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +package org.apache.zookeeper.server;\n    +\n    +import org.apache.zookeeper.CreateMode;\n    +import org.apache.zookeeper.KeeperException;\n    +import org.apache.zookeeper.ZooDefs;\n    +import org.apache.zookeeper.ZooKeeper;\n    +import org.apache.zookeeper.data.Stat;\n    +import org.apache.zookeeper.test.ClientBase;\n    +import org.junit.AfterClass;\n    +import org.junit.Test;\n    +import org.slf4j.Logger;\n    +import org.slf4j.LoggerFactory;\n    +\n    +import static org.junit.Assert.fail;\n    +\n    +/**\n    + * Unit tests to test different exceptions scenarious in sendResponse\n    + */\n    +public class ServerCxnExceptionsTest extends ClientBase {\n    +\n    +  private static final Logger LOG = LoggerFactory.getLogger(ServerCxnExceptionsTest.class);\n    +\n    +  private String exceptionType;\n    +\n    +  private void NettySetup() throws Exception {\n    --- End diff --\n    \n    Method name doesn't follow camel case convention (``nettySetup`` instead of ``NettySetup``).\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2016-12-14T00:26:19.398+0000","updated":"2016-12-14T00:26:19.398+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13002528/comment/15746743","id":"15746743","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user eribeiro commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/99#discussion_r92266393\n  \n    --- Diff: src/java/test/org/apache/zookeeper/server/ServerCxnExceptionsTest.java ---\n    @@ -0,0 +1,170 @@\n    +/**\n    + * Licensed to the Apache Software Foundation (ASF) under one\n    + * or more contributor license agreements.  See the NOTICE file\n    + * distributed with this work for additional information\n    + * regarding copyright ownership.  The ASF licenses this file\n    + * to you under the Apache License, Version 2.0 (the\n    + * \"License\"); you may not use this file except in compliance\n    + * with the License.  You may obtain a copy of the License at\n    + *\n    + *     http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +package org.apache.zookeeper.server;\n    +\n    +import org.apache.zookeeper.CreateMode;\n    +import org.apache.zookeeper.KeeperException;\n    +import org.apache.zookeeper.ZooDefs;\n    +import org.apache.zookeeper.ZooKeeper;\n    +import org.apache.zookeeper.data.Stat;\n    +import org.apache.zookeeper.test.ClientBase;\n    +import org.junit.AfterClass;\n    +import org.junit.Test;\n    +import org.slf4j.Logger;\n    +import org.slf4j.LoggerFactory;\n    +\n    +import static org.junit.Assert.fail;\n    +\n    +/**\n    + * Unit tests to test different exceptions scenarious in sendResponse\n    + */\n    +public class ServerCxnExceptionsTest extends ClientBase {\n    +\n    +  private static final Logger LOG = LoggerFactory.getLogger(ServerCxnExceptionsTest.class);\n    +\n    +  private String exceptionType;\n    --- End diff --\n    \n    ``exceptionType`` is never used!\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2016-12-14T00:26:19.398+0000","updated":"2016-12-14T00:26:19.398+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13002528/comment/15746744","id":"15746744","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user eribeiro commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/99#discussion_r92297692\n  \n    --- Diff: src/java/test/org/apache/zookeeper/server/ServerCxnExceptionsTest.java ---\n    @@ -0,0 +1,170 @@\n    +/**\n    + * Licensed to the Apache Software Foundation (ASF) under one\n    + * or more contributor license agreements.  See the NOTICE file\n    + * distributed with this work for additional information\n    + * regarding copyright ownership.  The ASF licenses this file\n    + * to you under the Apache License, Version 2.0 (the\n    + * \"License\"); you may not use this file except in compliance\n    + * with the License.  You may obtain a copy of the License at\n    + *\n    + *     http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +package org.apache.zookeeper.server;\n    +\n    +import org.apache.zookeeper.CreateMode;\n    +import org.apache.zookeeper.KeeperException;\n    +import org.apache.zookeeper.ZooDefs;\n    +import org.apache.zookeeper.ZooKeeper;\n    +import org.apache.zookeeper.data.Stat;\n    +import org.apache.zookeeper.test.ClientBase;\n    +import org.junit.AfterClass;\n    +import org.junit.Test;\n    +import org.slf4j.Logger;\n    +import org.slf4j.LoggerFactory;\n    +\n    +import static org.junit.Assert.fail;\n    +\n    +/**\n    + * Unit tests to test different exceptions scenarious in sendResponse\n    + */\n    +public class ServerCxnExceptionsTest extends ClientBase {\n    +\n    +  private static final Logger LOG = LoggerFactory.getLogger(ServerCxnExceptionsTest.class);\n    +\n    +  private String exceptionType;\n    +\n    +  private void NettySetup() throws Exception {\n    +    System.setProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN_FACTORY,\n    +      \"org.apache.zookeeper.server.NettyServerCnxnFactory\");\n    +    System.setProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN, \"org.apache.zookeeper.server.MockNettyServerCnxn\");\n    +    System.setProperty(\"exception.type\", \"NoException\");\n    +  }\n    +\n    +  private void NIOSetup() throws Exception {\n    +    System.setProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN_FACTORY,\n    +      \"org.apache.zookeeper.server.NIOServerCnxnFactory\");\n    +    System.setProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN, \"org.apache.zookeeper.server.MockNIOServerCnxn\");\n    +    System.setProperty(\"exception.type\", \"NoException\");\n    +  }\n    +\n    +  @AfterClass\n    +  public static void tearDownAfterClass() throws Exception {\n    +    System.clearProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN_FACTORY);\n    +    System.clearProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN);\n    +    System.clearProperty(\"exception.type\");\n    +  }\n    +\n    +  @Test (timeout = 60000)\n    +  public void testNettyIOException() throws Exception {\n    +    tearDown();\n    +    NettySetup();\n    +    testIOExceptionHelper();\n    +  }\n    +\n    +  @Test (timeout = 60000)\n    +  public void testNIOIOException() throws Exception {\n    +    tearDown();\n    +    NIOSetup();\n    +    testIOExceptionHelper();\n    +  }\n    +\n    +  private void testIOExceptionHelper() throws Exception {\n    +    System.setProperty(\"exception.type\", \"IOException\");\n    +    super.setUp();\n    +    final ZooKeeper zk = createClient();\n    +    final String path = \"/a\";\n    +    try {\n    +      // make sure zkclient works\n    +      zk.create(path, \"test\".getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE,\n    +        CreateMode.EPHEMERAL);\n    +      fail(\"Should not come here\");\n    +      Stat stats = zk.exists(path, false);\n    +      if (stats != null) {\n    +        int length = stats.getDataLength();\n    +      }\n    +    } catch (KeeperException.ConnectionLossException cle) {\n    +      LOG.info(\"ConnectionLossException: {}\", cle);\n    +    } finally {\n    +      zk.close();\n    +    }\n    +  }\n    +\n    +  @Test (timeout = 10000)\n    +  public void testNettyNoException() throws Exception {\n    +    tearDown();\n    +    NettySetup();\n    +    testZKNoExceptionHelper();\n    +  }\n    +\n    +  @Test (timeout = 10000)\n    +  public void testNIONoException() throws Exception {\n    +    tearDown();\n    +    NIOSetup();\n    +    testZKNoExceptionHelper();\n    +  }\n    +\n    +  private void testZKNoExceptionHelper() throws Exception {\n    +    System.setProperty(\"exception.type\", \"NoException\");\n    +    super.setUp();\n    +    final ZooKeeper zk = createClient();\n    +    final String path = \"/a\";\n    +    try {\n    +      // make sure zkclient works\n    +      zk.create(path, \"test\".getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE,\n    +        CreateMode.EPHEMERAL);\n    +      Stat stats = zk.exists(path, false);\n    +      if ( stats != null ) {\n    --- End diff --\n    \n    I don't get what we are even bothering of adding lines 122-124. Why?\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2016-12-14T00:26:20.136+0000","updated":"2016-12-14T00:26:20.136+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13002528/comment/15746745","id":"15746745","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user eribeiro commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/99#discussion_r92296453\n  \n    --- Diff: src/java/test/org/apache/zookeeper/server/ServerCxnExceptionsTest.java ---\n    @@ -0,0 +1,170 @@\n    +/**\n    + * Licensed to the Apache Software Foundation (ASF) under one\n    + * or more contributor license agreements.  See the NOTICE file\n    + * distributed with this work for additional information\n    + * regarding copyright ownership.  The ASF licenses this file\n    + * to you under the Apache License, Version 2.0 (the\n    + * \"License\"); you may not use this file except in compliance\n    + * with the License.  You may obtain a copy of the License at\n    + *\n    + *     http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +package org.apache.zookeeper.server;\n    +\n    +import org.apache.zookeeper.CreateMode;\n    +import org.apache.zookeeper.KeeperException;\n    +import org.apache.zookeeper.ZooDefs;\n    +import org.apache.zookeeper.ZooKeeper;\n    +import org.apache.zookeeper.data.Stat;\n    +import org.apache.zookeeper.test.ClientBase;\n    +import org.junit.AfterClass;\n    +import org.junit.Test;\n    +import org.slf4j.Logger;\n    +import org.slf4j.LoggerFactory;\n    +\n    +import static org.junit.Assert.fail;\n    +\n    +/**\n    + * Unit tests to test different exceptions scenarious in sendResponse\n    + */\n    +public class ServerCxnExceptionsTest extends ClientBase {\n    +\n    +  private static final Logger LOG = LoggerFactory.getLogger(ServerCxnExceptionsTest.class);\n    +\n    +  private String exceptionType;\n    +\n    +  private void NettySetup() throws Exception {\n    +    System.setProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN_FACTORY,\n    +      \"org.apache.zookeeper.server.NettyServerCnxnFactory\");\n    +    System.setProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN, \"org.apache.zookeeper.server.MockNettyServerCnxn\");\n    +    System.setProperty(\"exception.type\", \"NoException\");\n    +  }\n    +\n    +  private void NIOSetup() throws Exception {\n    +    System.setProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN_FACTORY,\n    +      \"org.apache.zookeeper.server.NIOServerCnxnFactory\");\n    +    System.setProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN, \"org.apache.zookeeper.server.MockNIOServerCnxn\");\n    +    System.setProperty(\"exception.type\", \"NoException\");\n    +  }\n    +\n    +  @AfterClass\n    +  public static void tearDownAfterClass() throws Exception {\n    +    System.clearProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN_FACTORY);\n    +    System.clearProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN);\n    +    System.clearProperty(\"exception.type\");\n    +  }\n    +\n    +  @Test (timeout = 60000)\n    +  public void testNettyIOException() throws Exception {\n    +    tearDown();\n    +    NettySetup();\n    +    testIOExceptionHelper();\n    +  }\n    +\n    +  @Test (timeout = 60000)\n    +  public void testNIOIOException() throws Exception {\n    +    tearDown();\n    +    NIOSetup();\n    +    testIOExceptionHelper();\n    +  }\n    +\n    +  private void testIOExceptionHelper() throws Exception {\n    +    System.setProperty(\"exception.type\", \"IOException\");\n    +    super.setUp();\n    +    final ZooKeeper zk = createClient();\n    +    final String path = \"/a\";\n    +    try {\n    +      // make sure zkclient works\n    +      zk.create(path, \"test\".getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE,\n    +        CreateMode.EPHEMERAL);\n    +      fail(\"Should not come here\");\n    +      Stat stats = zk.exists(path, false);\n    +      if (stats != null) {\n    +        int length = stats.getDataLength();\n    +      }\n    +    } catch (KeeperException.ConnectionLossException cle) {\n    +      LOG.info(\"ConnectionLossException: {}\", cle);\n    +    } finally {\n    +      zk.close();\n    --- End diff --\n    \n    Aren't we missing a ``try-catch`` around ``zk.close()`` with an explicit comment to ignore any error message?\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2016-12-14T00:26:21.598+0000","updated":"2016-12-14T00:26:21.598+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13002528/comment/15746746","id":"15746746","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user eribeiro commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/99#discussion_r92297567\n  \n    --- Diff: src/java/test/org/apache/zookeeper/server/ServerCxnExceptionsTest.java ---\n    @@ -0,0 +1,170 @@\n    +/**\n    + * Licensed to the Apache Software Foundation (ASF) under one\n    + * or more contributor license agreements.  See the NOTICE file\n    + * distributed with this work for additional information\n    + * regarding copyright ownership.  The ASF licenses this file\n    + * to you under the Apache License, Version 2.0 (the\n    + * \"License\"); you may not use this file except in compliance\n    + * with the License.  You may obtain a copy of the License at\n    + *\n    + *     http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +package org.apache.zookeeper.server;\n    +\n    +import org.apache.zookeeper.CreateMode;\n    +import org.apache.zookeeper.KeeperException;\n    +import org.apache.zookeeper.ZooDefs;\n    +import org.apache.zookeeper.ZooKeeper;\n    +import org.apache.zookeeper.data.Stat;\n    +import org.apache.zookeeper.test.ClientBase;\n    +import org.junit.AfterClass;\n    +import org.junit.Test;\n    +import org.slf4j.Logger;\n    +import org.slf4j.LoggerFactory;\n    +\n    +import static org.junit.Assert.fail;\n    +\n    +/**\n    + * Unit tests to test different exceptions scenarious in sendResponse\n    + */\n    +public class ServerCxnExceptionsTest extends ClientBase {\n    +\n    +  private static final Logger LOG = LoggerFactory.getLogger(ServerCxnExceptionsTest.class);\n    +\n    +  private String exceptionType;\n    +\n    +  private void NettySetup() throws Exception {\n    +    System.setProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN_FACTORY,\n    +      \"org.apache.zookeeper.server.NettyServerCnxnFactory\");\n    +    System.setProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN, \"org.apache.zookeeper.server.MockNettyServerCnxn\");\n    +    System.setProperty(\"exception.type\", \"NoException\");\n    +  }\n    +\n    +  private void NIOSetup() throws Exception {\n    +    System.setProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN_FACTORY,\n    +      \"org.apache.zookeeper.server.NIOServerCnxnFactory\");\n    +    System.setProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN, \"org.apache.zookeeper.server.MockNIOServerCnxn\");\n    +    System.setProperty(\"exception.type\", \"NoException\");\n    +  }\n    +\n    +  @AfterClass\n    +  public static void tearDownAfterClass() throws Exception {\n    +    System.clearProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN_FACTORY);\n    +    System.clearProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN);\n    +    System.clearProperty(\"exception.type\");\n    +  }\n    +\n    +  @Test (timeout = 60000)\n    +  public void testNettyIOException() throws Exception {\n    +    tearDown();\n    +    NettySetup();\n    +    testIOExceptionHelper();\n    +  }\n    +\n    +  @Test (timeout = 60000)\n    +  public void testNIOIOException() throws Exception {\n    +    tearDown();\n    +    NIOSetup();\n    +    testIOExceptionHelper();\n    +  }\n    +\n    +  private void testIOExceptionHelper() throws Exception {\n    +    System.setProperty(\"exception.type\", \"IOException\");\n    +    super.setUp();\n    +    final ZooKeeper zk = createClient();\n    +    final String path = \"/a\";\n    +    try {\n    +      // make sure zkclient works\n    +      zk.create(path, \"test\".getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE,\n    +        CreateMode.EPHEMERAL);\n    +      fail(\"Should not come here\");\n    +      Stat stats = zk.exists(path, false);\n    +      if (stats != null) {\n    +        int length = stats.getDataLength();\n    +      }\n    +    } catch (KeeperException.ConnectionLossException cle) {\n    +      LOG.info(\"ConnectionLossException: {}\", cle);\n    +    } finally {\n    +      zk.close();\n    +    }\n    +  }\n    +\n    +  @Test (timeout = 10000)\n    +  public void testNettyNoException() throws Exception {\n    +    tearDown();\n    +    NettySetup();\n    +    testZKNoExceptionHelper();\n    +  }\n    +\n    +  @Test (timeout = 10000)\n    +  public void testNIONoException() throws Exception {\n    +    tearDown();\n    +    NIOSetup();\n    +    testZKNoExceptionHelper();\n    +  }\n    +\n    +  private void testZKNoExceptionHelper() throws Exception {\n    +    System.setProperty(\"exception.type\", \"NoException\");\n    +    super.setUp();\n    +    final ZooKeeper zk = createClient();\n    +    final String path = \"/a\";\n    +    try {\n    +      // make sure zkclient works\n    +      zk.create(path, \"test\".getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE,\n    +        CreateMode.EPHEMERAL);\n    +      Stat stats = zk.exists(path, false);\n    +      if ( stats != null ) {\n    +        int length = stats.getDataLength();\n    +      }\n    +    } catch (KeeperException.ConnectionLossException cle) {\n    +      LOG.error(\"ConnectionLossException: {}\", cle);\n    +      fail(\"No exception should be thrown\");\n    +    } catch (Throwable t) {\n    +      // error\n    +      LOG.error(\"Throwable {}\", t);\n    +      fail(\"No exception should be thrown\");\n    +    } finally {\n    +      zk.close();\n    +    }\n    +  }\n    +  @Test (timeout = 10000)\n    +  public void testNettyRunTimeException() throws Exception {\n    +    tearDown();\n    +    NettySetup();\n    +    testZKRunTimeExceptionHelper();\n    +  }\n    +\n    +  @Test (timeout = 10000)\n    --- End diff --\n    \n    Why 10000 and not 60000?\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2016-12-14T00:26:21.605+0000","updated":"2016-12-14T00:26:21.605+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13002528/comment/15746747","id":"15746747","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user eribeiro commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/99#discussion_r92296352\n  \n    --- Diff: src/java/test/org/apache/zookeeper/server/ServerCxnExceptionsTest.java ---\n    @@ -0,0 +1,170 @@\n    +/**\n    + * Licensed to the Apache Software Foundation (ASF) under one\n    + * or more contributor license agreements.  See the NOTICE file\n    + * distributed with this work for additional information\n    + * regarding copyright ownership.  The ASF licenses this file\n    + * to you under the Apache License, Version 2.0 (the\n    + * \"License\"); you may not use this file except in compliance\n    + * with the License.  You may obtain a copy of the License at\n    + *\n    + *     http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +package org.apache.zookeeper.server;\n    +\n    +import org.apache.zookeeper.CreateMode;\n    +import org.apache.zookeeper.KeeperException;\n    +import org.apache.zookeeper.ZooDefs;\n    +import org.apache.zookeeper.ZooKeeper;\n    +import org.apache.zookeeper.data.Stat;\n    +import org.apache.zookeeper.test.ClientBase;\n    +import org.junit.AfterClass;\n    +import org.junit.Test;\n    +import org.slf4j.Logger;\n    +import org.slf4j.LoggerFactory;\n    +\n    +import static org.junit.Assert.fail;\n    +\n    +/**\n    + * Unit tests to test different exceptions scenarious in sendResponse\n    + */\n    +public class ServerCxnExceptionsTest extends ClientBase {\n    +\n    +  private static final Logger LOG = LoggerFactory.getLogger(ServerCxnExceptionsTest.class);\n    +\n    +  private String exceptionType;\n    +\n    +  private void NettySetup() throws Exception {\n    +    System.setProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN_FACTORY,\n    +      \"org.apache.zookeeper.server.NettyServerCnxnFactory\");\n    +    System.setProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN, \"org.apache.zookeeper.server.MockNettyServerCnxn\");\n    +    System.setProperty(\"exception.type\", \"NoException\");\n    +  }\n    +\n    +  private void NIOSetup() throws Exception {\n    +    System.setProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN_FACTORY,\n    +      \"org.apache.zookeeper.server.NIOServerCnxnFactory\");\n    +    System.setProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN, \"org.apache.zookeeper.server.MockNIOServerCnxn\");\n    +    System.setProperty(\"exception.type\", \"NoException\");\n    +  }\n    +\n    +  @AfterClass\n    +  public static void tearDownAfterClass() throws Exception {\n    +    System.clearProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN_FACTORY);\n    +    System.clearProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN);\n    +    System.clearProperty(\"exception.type\");\n    +  }\n    +\n    +  @Test (timeout = 60000)\n    +  public void testNettyIOException() throws Exception {\n    +    tearDown();\n    +    NettySetup();\n    +    testIOExceptionHelper();\n    +  }\n    +\n    +  @Test (timeout = 60000)\n    +  public void testNIOIOException() throws Exception {\n    +    tearDown();\n    +    NIOSetup();\n    +    testIOExceptionHelper();\n    +  }\n    +\n    +  private void testIOExceptionHelper() throws Exception {\n    --- End diff --\n    \n    nit: it's nice to have an ordering on the definition of methods: public, protected, private. That is, it would be nice to move the private methods to the end of the file.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2016-12-14T00:26:21.607+0000","updated":"2016-12-14T00:26:21.607+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13002528/comment/15746748","id":"15746748","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user eribeiro commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/99#discussion_r92297538\n  \n    --- Diff: src/java/test/org/apache/zookeeper/server/ServerCxnExceptionsTest.java ---\n    @@ -0,0 +1,170 @@\n    +/**\n    + * Licensed to the Apache Software Foundation (ASF) under one\n    + * or more contributor license agreements.  See the NOTICE file\n    + * distributed with this work for additional information\n    + * regarding copyright ownership.  The ASF licenses this file\n    + * to you under the Apache License, Version 2.0 (the\n    + * \"License\"); you may not use this file except in compliance\n    + * with the License.  You may obtain a copy of the License at\n    + *\n    + *     http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +package org.apache.zookeeper.server;\n    +\n    +import org.apache.zookeeper.CreateMode;\n    +import org.apache.zookeeper.KeeperException;\n    +import org.apache.zookeeper.ZooDefs;\n    +import org.apache.zookeeper.ZooKeeper;\n    +import org.apache.zookeeper.data.Stat;\n    +import org.apache.zookeeper.test.ClientBase;\n    +import org.junit.AfterClass;\n    +import org.junit.Test;\n    +import org.slf4j.Logger;\n    +import org.slf4j.LoggerFactory;\n    +\n    +import static org.junit.Assert.fail;\n    +\n    +/**\n    + * Unit tests to test different exceptions scenarious in sendResponse\n    + */\n    +public class ServerCxnExceptionsTest extends ClientBase {\n    +\n    +  private static final Logger LOG = LoggerFactory.getLogger(ServerCxnExceptionsTest.class);\n    +\n    +  private String exceptionType;\n    +\n    +  private void NettySetup() throws Exception {\n    +    System.setProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN_FACTORY,\n    +      \"org.apache.zookeeper.server.NettyServerCnxnFactory\");\n    +    System.setProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN, \"org.apache.zookeeper.server.MockNettyServerCnxn\");\n    +    System.setProperty(\"exception.type\", \"NoException\");\n    +  }\n    +\n    +  private void NIOSetup() throws Exception {\n    +    System.setProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN_FACTORY,\n    +      \"org.apache.zookeeper.server.NIOServerCnxnFactory\");\n    +    System.setProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN, \"org.apache.zookeeper.server.MockNIOServerCnxn\");\n    +    System.setProperty(\"exception.type\", \"NoException\");\n    +  }\n    +\n    +  @AfterClass\n    +  public static void tearDownAfterClass() throws Exception {\n    +    System.clearProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN_FACTORY);\n    +    System.clearProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN);\n    +    System.clearProperty(\"exception.type\");\n    +  }\n    +\n    +  @Test (timeout = 60000)\n    +  public void testNettyIOException() throws Exception {\n    +    tearDown();\n    +    NettySetup();\n    +    testIOExceptionHelper();\n    +  }\n    +\n    +  @Test (timeout = 60000)\n    +  public void testNIOIOException() throws Exception {\n    +    tearDown();\n    +    NIOSetup();\n    +    testIOExceptionHelper();\n    +  }\n    +\n    +  private void testIOExceptionHelper() throws Exception {\n    +    System.setProperty(\"exception.type\", \"IOException\");\n    +    super.setUp();\n    +    final ZooKeeper zk = createClient();\n    +    final String path = \"/a\";\n    +    try {\n    +      // make sure zkclient works\n    +      zk.create(path, \"test\".getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE,\n    +        CreateMode.EPHEMERAL);\n    +      fail(\"Should not come here\");\n    +      Stat stats = zk.exists(path, false);\n    +      if (stats != null) {\n    +        int length = stats.getDataLength();\n    +      }\n    +    } catch (KeeperException.ConnectionLossException cle) {\n    +      LOG.info(\"ConnectionLossException: {}\", cle);\n    +    } finally {\n    +      zk.close();\n    +    }\n    +  }\n    +\n    +  @Test (timeout = 10000)\n    +  public void testNettyNoException() throws Exception {\n    +    tearDown();\n    +    NettySetup();\n    +    testZKNoExceptionHelper();\n    +  }\n    +\n    +  @Test (timeout = 10000)\n    +  public void testNIONoException() throws Exception {\n    +    tearDown();\n    +    NIOSetup();\n    +    testZKNoExceptionHelper();\n    +  }\n    +\n    +  private void testZKNoExceptionHelper() throws Exception {\n    +    System.setProperty(\"exception.type\", \"NoException\");\n    +    super.setUp();\n    +    final ZooKeeper zk = createClient();\n    +    final String path = \"/a\";\n    +    try {\n    +      // make sure zkclient works\n    +      zk.create(path, \"test\".getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE,\n    +        CreateMode.EPHEMERAL);\n    +      Stat stats = zk.exists(path, false);\n    +      if ( stats != null ) {\n    +        int length = stats.getDataLength();\n    +      }\n    +    } catch (KeeperException.ConnectionLossException cle) {\n    +      LOG.error(\"ConnectionLossException: {}\", cle);\n    +      fail(\"No exception should be thrown\");\n    +    } catch (Throwable t) {\n    +      // error\n    +      LOG.error(\"Throwable {}\", t);\n    +      fail(\"No exception should be thrown\");\n    +    } finally {\n    +      zk.close();\n    +    }\n    +  }\n    +  @Test (timeout = 10000)\n    --- End diff --\n    \n    Why 10000 and not 60000?\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2016-12-14T00:26:21.621+0000","updated":"2016-12-14T00:26:21.621+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13002528/comment/15746749","id":"15746749","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user eribeiro commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/99#discussion_r92298117\n  \n    --- Diff: src/java/main/org/apache/zookeeper/server/NIOServerCnxn.java ---\n    @@ -694,7 +690,7 @@ public void sendResponse(ReplyHeader h, Record r, String tag) {\n                     }\n                 }\n              } catch(Exception e) {\n    -            LOG.warn(\"Unexpected exception. Destruction averted.\", e);\n    +            throw new IOException(e);\n    --- End diff --\n    \n    Just a suggestion: wdyt about bubbling up a more custom message with the IOException instead of just encapsulate the Exception? I mean, something like:\n    \n    ``\n    throw new IOException(\"sendMessage exception: blah blah\", e);\n    ``\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2016-12-14T00:26:21.638+0000","updated":"2016-12-14T00:26:21.638+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13002528/comment/15746750","id":"15746750","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user eribeiro commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/99#discussion_r92296064\n  \n    --- Diff: src/java/test/org/apache/zookeeper/server/MockNettyServerCnxn.java ---\n    @@ -0,0 +1,65 @@\n    +/**\n    + * Licensed to the Apache Software Foundation (ASF) under one\n    + * or more contributor license agreements.  See the NOTICE file\n    + * distributed with this work for additional information\n    + * regarding copyright ownership.  The ASF licenses this file\n    + * to you under the Apache License, Version 2.0 (the\n    + * \"License\"); you may not use this file except in compliance\n    + * with the License.  You may obtain a copy of the License at\n    + *\n    + *     http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +package org.apache.zookeeper.server;\n    +\n    +import org.apache.jute.Record;\n    +import org.apache.zookeeper.proto.ReplyHeader;\n    +import org.jboss.netty.channel.Channel;\n    +\n    +import java.io.IOException;\n    +import java.lang.reflect.Field;\n    +import java.lang.reflect.Modifier;\n    +\n    +/**\n    + * Helper class to test different scenarios in NettyServerCnxn\n    + */\n    +public class MockNettyServerCnxn extends NettyServerCnxn {\n    --- End diff --\n    \n    In this file, tab is indented with 2 spaces while the rest of the ZooKeeper files use 4 spaces (I only discovered this 'cause my IDE complained about it).\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2016-12-14T00:26:21.645+0000","updated":"2016-12-14T00:26:21.645+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13002528/comment/15746751","id":"15746751","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user eribeiro commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/99#discussion_r92297351\n  \n    --- Diff: src/java/test/org/apache/zookeeper/server/ServerCxnExceptionsTest.java ---\n    @@ -0,0 +1,170 @@\n    +/**\n    + * Licensed to the Apache Software Foundation (ASF) under one\n    + * or more contributor license agreements.  See the NOTICE file\n    + * distributed with this work for additional information\n    + * regarding copyright ownership.  The ASF licenses this file\n    + * to you under the Apache License, Version 2.0 (the\n    + * \"License\"); you may not use this file except in compliance\n    + * with the License.  You may obtain a copy of the License at\n    + *\n    + *     http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +package org.apache.zookeeper.server;\n    +\n    +import org.apache.zookeeper.CreateMode;\n    +import org.apache.zookeeper.KeeperException;\n    +import org.apache.zookeeper.ZooDefs;\n    +import org.apache.zookeeper.ZooKeeper;\n    +import org.apache.zookeeper.data.Stat;\n    +import org.apache.zookeeper.test.ClientBase;\n    +import org.junit.AfterClass;\n    +import org.junit.Test;\n    +import org.slf4j.Logger;\n    +import org.slf4j.LoggerFactory;\n    +\n    +import static org.junit.Assert.fail;\n    +\n    +/**\n    + * Unit tests to test different exceptions scenarious in sendResponse\n    + */\n    +public class ServerCxnExceptionsTest extends ClientBase {\n    +\n    +  private static final Logger LOG = LoggerFactory.getLogger(ServerCxnExceptionsTest.class);\n    +\n    +  private String exceptionType;\n    +\n    +  private void NettySetup() throws Exception {\n    +    System.setProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN_FACTORY,\n    +      \"org.apache.zookeeper.server.NettyServerCnxnFactory\");\n    +    System.setProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN, \"org.apache.zookeeper.server.MockNettyServerCnxn\");\n    +    System.setProperty(\"exception.type\", \"NoException\");\n    +  }\n    +\n    +  private void NIOSetup() throws Exception {\n    +    System.setProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN_FACTORY,\n    +      \"org.apache.zookeeper.server.NIOServerCnxnFactory\");\n    +    System.setProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN, \"org.apache.zookeeper.server.MockNIOServerCnxn\");\n    +    System.setProperty(\"exception.type\", \"NoException\");\n    +  }\n    +\n    +  @AfterClass\n    +  public static void tearDownAfterClass() throws Exception {\n    +    System.clearProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN_FACTORY);\n    +    System.clearProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN);\n    +    System.clearProperty(\"exception.type\");\n    +  }\n    +\n    +  @Test (timeout = 60000)\n    +  public void testNettyIOException() throws Exception {\n    +    tearDown();\n    +    NettySetup();\n    +    testIOExceptionHelper();\n    +  }\n    +\n    +  @Test (timeout = 60000)\n    +  public void testNIOIOException() throws Exception {\n    +    tearDown();\n    +    NIOSetup();\n    +    testIOExceptionHelper();\n    +  }\n    +\n    +  private void testIOExceptionHelper() throws Exception {\n    +    System.setProperty(\"exception.type\", \"IOException\");\n    +    super.setUp();\n    +    final ZooKeeper zk = createClient();\n    +    final String path = \"/a\";\n    +    try {\n    +      // make sure zkclient works\n    +      zk.create(path, \"test\".getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE,\n    +        CreateMode.EPHEMERAL);\n    +      fail(\"Should not come here\");\n    +      Stat stats = zk.exists(path, false);\n    +      if (stats != null) {\n    +        int length = stats.getDataLength();\n    +      }\n    +    } catch (KeeperException.ConnectionLossException cle) {\n    +      LOG.info(\"ConnectionLossException: {}\", cle);\n    +    } finally {\n    +      zk.close();\n    +    }\n    +  }\n    +\n    +  @Test (timeout = 10000)\n    +  public void testNettyNoException() throws Exception {\n    +    tearDown();\n    +    NettySetup();\n    +    testZKNoExceptionHelper();\n    +  }\n    +\n    +  @Test (timeout = 10000)\n    +  public void testNIONoException() throws Exception {\n    +    tearDown();\n    +    NIOSetup();\n    +    testZKNoExceptionHelper();\n    +  }\n    +\n    +  private void testZKNoExceptionHelper() throws Exception {\n    +    System.setProperty(\"exception.type\", \"NoException\");\n    +    super.setUp();\n    +    final ZooKeeper zk = createClient();\n    +    final String path = \"/a\";\n    +    try {\n    +      // make sure zkclient works\n    +      zk.create(path, \"test\".getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE,\n    +        CreateMode.EPHEMERAL);\n    +      Stat stats = zk.exists(path, false);\n    +      if ( stats != null ) {\n    --- End diff --\n    \n    nit: extra spaces after the parenthesis.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2016-12-14T00:26:21.646+0000","updated":"2016-12-14T00:26:21.646+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13002528/comment/15747363","id":"15747363","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user yufeldman commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/99#discussion_r92326026\n  \n    --- Diff: src/java/test/org/apache/zookeeper/server/ServerCxnExceptionsTest.java ---\n    @@ -0,0 +1,170 @@\n    +/**\n    + * Licensed to the Apache Software Foundation (ASF) under one\n    + * or more contributor license agreements.  See the NOTICE file\n    + * distributed with this work for additional information\n    + * regarding copyright ownership.  The ASF licenses this file\n    + * to you under the Apache License, Version 2.0 (the\n    + * \"License\"); you may not use this file except in compliance\n    + * with the License.  You may obtain a copy of the License at\n    + *\n    + *     http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +package org.apache.zookeeper.server;\n    +\n    +import org.apache.zookeeper.CreateMode;\n    +import org.apache.zookeeper.KeeperException;\n    +import org.apache.zookeeper.ZooDefs;\n    +import org.apache.zookeeper.ZooKeeper;\n    +import org.apache.zookeeper.data.Stat;\n    +import org.apache.zookeeper.test.ClientBase;\n    +import org.junit.AfterClass;\n    +import org.junit.Test;\n    +import org.slf4j.Logger;\n    +import org.slf4j.LoggerFactory;\n    +\n    +import static org.junit.Assert.fail;\n    +\n    +/**\n    + * Unit tests to test different exceptions scenarious in sendResponse\n    + */\n    +public class ServerCxnExceptionsTest extends ClientBase {\n    +\n    +  private static final Logger LOG = LoggerFactory.getLogger(ServerCxnExceptionsTest.class);\n    +\n    +  private String exceptionType;\n    +\n    +  private void NettySetup() throws Exception {\n    +    System.setProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN_FACTORY,\n    +      \"org.apache.zookeeper.server.NettyServerCnxnFactory\");\n    +    System.setProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN, \"org.apache.zookeeper.server.MockNettyServerCnxn\");\n    +    System.setProperty(\"exception.type\", \"NoException\");\n    +  }\n    +\n    +  private void NIOSetup() throws Exception {\n    +    System.setProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN_FACTORY,\n    +      \"org.apache.zookeeper.server.NIOServerCnxnFactory\");\n    +    System.setProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN, \"org.apache.zookeeper.server.MockNIOServerCnxn\");\n    +    System.setProperty(\"exception.type\", \"NoException\");\n    +  }\n    +\n    +  @AfterClass\n    +  public static void tearDownAfterClass() throws Exception {\n    +    System.clearProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN_FACTORY);\n    +    System.clearProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN);\n    +    System.clearProperty(\"exception.type\");\n    +  }\n    +\n    +  @Test (timeout = 60000)\n    +  public void testNettyIOException() throws Exception {\n    +    tearDown();\n    +    NettySetup();\n    +    testIOExceptionHelper();\n    +  }\n    +\n    +  @Test (timeout = 60000)\n    +  public void testNIOIOException() throws Exception {\n    +    tearDown();\n    +    NIOSetup();\n    +    testIOExceptionHelper();\n    +  }\n    +\n    +  private void testIOExceptionHelper() throws Exception {\n    +    System.setProperty(\"exception.type\", \"IOException\");\n    +    super.setUp();\n    +    final ZooKeeper zk = createClient();\n    +    final String path = \"/a\";\n    +    try {\n    +      // make sure zkclient works\n    +      zk.create(path, \"test\".getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE,\n    +        CreateMode.EPHEMERAL);\n    +      fail(\"Should not come here\");\n    +      Stat stats = zk.exists(path, false);\n    +      if (stats != null) {\n    +        int length = stats.getDataLength();\n    +      }\n    +    } catch (KeeperException.ConnectionLossException cle) {\n    +      LOG.info(\"ConnectionLossException: {}\", cle);\n    +    } finally {\n    +      zk.close();\n    +    }\n    +  }\n    +\n    +  @Test (timeout = 10000)\n    +  public void testNettyNoException() throws Exception {\n    +    tearDown();\n    +    NettySetup();\n    +    testZKNoExceptionHelper();\n    +  }\n    +\n    +  @Test (timeout = 10000)\n    --- End diff --\n    \n    why to keep it more than needed? 30 sec. is standard for ZK timeout, so 1 min would be overkill.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2016-12-14T05:48:28.983+0000","updated":"2016-12-14T05:48:28.983+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13002528/comment/15747369","id":"15747369","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user yufeldman commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/99#discussion_r92326078\n  \n    --- Diff: src/java/test/org/apache/zookeeper/server/ServerCxnExceptionsTest.java ---\n    @@ -0,0 +1,170 @@\n    +/**\n    + * Licensed to the Apache Software Foundation (ASF) under one\n    + * or more contributor license agreements.  See the NOTICE file\n    + * distributed with this work for additional information\n    + * regarding copyright ownership.  The ASF licenses this file\n    + * to you under the Apache License, Version 2.0 (the\n    + * \"License\"); you may not use this file except in compliance\n    + * with the License.  You may obtain a copy of the License at\n    + *\n    + *     http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +package org.apache.zookeeper.server;\n    +\n    +import org.apache.zookeeper.CreateMode;\n    +import org.apache.zookeeper.KeeperException;\n    +import org.apache.zookeeper.ZooDefs;\n    +import org.apache.zookeeper.ZooKeeper;\n    +import org.apache.zookeeper.data.Stat;\n    +import org.apache.zookeeper.test.ClientBase;\n    +import org.junit.AfterClass;\n    +import org.junit.Test;\n    +import org.slf4j.Logger;\n    +import org.slf4j.LoggerFactory;\n    +\n    +import static org.junit.Assert.fail;\n    +\n    +/**\n    + * Unit tests to test different exceptions scenarious in sendResponse\n    + */\n    +public class ServerCxnExceptionsTest extends ClientBase {\n    +\n    +  private static final Logger LOG = LoggerFactory.getLogger(ServerCxnExceptionsTest.class);\n    +\n    +  private String exceptionType;\n    +\n    +  private void NettySetup() throws Exception {\n    +    System.setProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN_FACTORY,\n    +      \"org.apache.zookeeper.server.NettyServerCnxnFactory\");\n    +    System.setProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN, \"org.apache.zookeeper.server.MockNettyServerCnxn\");\n    +    System.setProperty(\"exception.type\", \"NoException\");\n    +  }\n    +\n    +  private void NIOSetup() throws Exception {\n    +    System.setProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN_FACTORY,\n    +      \"org.apache.zookeeper.server.NIOServerCnxnFactory\");\n    +    System.setProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN, \"org.apache.zookeeper.server.MockNIOServerCnxn\");\n    +    System.setProperty(\"exception.type\", \"NoException\");\n    +  }\n    +\n    +  @AfterClass\n    +  public static void tearDownAfterClass() throws Exception {\n    +    System.clearProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN_FACTORY);\n    +    System.clearProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN);\n    +    System.clearProperty(\"exception.type\");\n    +  }\n    +\n    +  @Test (timeout = 60000)\n    +  public void testNettyIOException() throws Exception {\n    +    tearDown();\n    +    NettySetup();\n    +    testIOExceptionHelper();\n    +  }\n    +\n    +  @Test (timeout = 60000)\n    +  public void testNIOIOException() throws Exception {\n    +    tearDown();\n    +    NIOSetup();\n    +    testIOExceptionHelper();\n    +  }\n    +\n    +  private void testIOExceptionHelper() throws Exception {\n    +    System.setProperty(\"exception.type\", \"IOException\");\n    +    super.setUp();\n    +    final ZooKeeper zk = createClient();\n    +    final String path = \"/a\";\n    +    try {\n    +      // make sure zkclient works\n    +      zk.create(path, \"test\".getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE,\n    +        CreateMode.EPHEMERAL);\n    +      fail(\"Should not come here\");\n    +      Stat stats = zk.exists(path, false);\n    +      if (stats != null) {\n    +        int length = stats.getDataLength();\n    +      }\n    +    } catch (KeeperException.ConnectionLossException cle) {\n    +      LOG.info(\"ConnectionLossException: {}\", cle);\n    +    } finally {\n    +      zk.close();\n    +    }\n    +  }\n    +\n    +  @Test (timeout = 10000)\n    +  public void testNettyNoException() throws Exception {\n    +    tearDown();\n    +    NettySetup();\n    +    testZKNoExceptionHelper();\n    +  }\n    +\n    +  @Test (timeout = 10000)\n    +  public void testNIONoException() throws Exception {\n    +    tearDown();\n    +    NIOSetup();\n    +    testZKNoExceptionHelper();\n    +  }\n    +\n    +  private void testZKNoExceptionHelper() throws Exception {\n    +    System.setProperty(\"exception.type\", \"NoException\");\n    +    super.setUp();\n    +    final ZooKeeper zk = createClient();\n    +    final String path = \"/a\";\n    +    try {\n    +      // make sure zkclient works\n    +      zk.create(path, \"test\".getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE,\n    +        CreateMode.EPHEMERAL);\n    +      Stat stats = zk.exists(path, false);\n    +      if ( stats != null ) {\n    +        int length = stats.getDataLength();\n    +      }\n    +    } catch (KeeperException.ConnectionLossException cle) {\n    +      LOG.error(\"ConnectionLossException: {}\", cle);\n    +      fail(\"No exception should be thrown\");\n    +    } catch (Throwable t) {\n    +      // error\n    +      LOG.error(\"Throwable {}\", t);\n    +      fail(\"No exception should be thrown\");\n    +    } finally {\n    +      zk.close();\n    +    }\n    +  }\n    +  @Test (timeout = 10000)\n    --- End diff --\n    \n    see above\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2016-12-14T05:49:16.874+0000","updated":"2016-12-14T05:49:16.874+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13002528/comment/15747370","id":"15747370","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user yufeldman commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/99#discussion_r92326091\n  \n    --- Diff: src/java/test/org/apache/zookeeper/server/ServerCxnExceptionsTest.java ---\n    @@ -0,0 +1,170 @@\n    +/**\n    + * Licensed to the Apache Software Foundation (ASF) under one\n    + * or more contributor license agreements.  See the NOTICE file\n    + * distributed with this work for additional information\n    + * regarding copyright ownership.  The ASF licenses this file\n    + * to you under the Apache License, Version 2.0 (the\n    + * \"License\"); you may not use this file except in compliance\n    + * with the License.  You may obtain a copy of the License at\n    + *\n    + *     http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +package org.apache.zookeeper.server;\n    +\n    +import org.apache.zookeeper.CreateMode;\n    +import org.apache.zookeeper.KeeperException;\n    +import org.apache.zookeeper.ZooDefs;\n    +import org.apache.zookeeper.ZooKeeper;\n    +import org.apache.zookeeper.data.Stat;\n    +import org.apache.zookeeper.test.ClientBase;\n    +import org.junit.AfterClass;\n    +import org.junit.Test;\n    +import org.slf4j.Logger;\n    +import org.slf4j.LoggerFactory;\n    +\n    +import static org.junit.Assert.fail;\n    +\n    +/**\n    + * Unit tests to test different exceptions scenarious in sendResponse\n    + */\n    +public class ServerCxnExceptionsTest extends ClientBase {\n    +\n    +  private static final Logger LOG = LoggerFactory.getLogger(ServerCxnExceptionsTest.class);\n    +\n    +  private String exceptionType;\n    +\n    +  private void NettySetup() throws Exception {\n    +    System.setProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN_FACTORY,\n    +      \"org.apache.zookeeper.server.NettyServerCnxnFactory\");\n    +    System.setProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN, \"org.apache.zookeeper.server.MockNettyServerCnxn\");\n    +    System.setProperty(\"exception.type\", \"NoException\");\n    +  }\n    +\n    +  private void NIOSetup() throws Exception {\n    +    System.setProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN_FACTORY,\n    +      \"org.apache.zookeeper.server.NIOServerCnxnFactory\");\n    +    System.setProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN, \"org.apache.zookeeper.server.MockNIOServerCnxn\");\n    +    System.setProperty(\"exception.type\", \"NoException\");\n    +  }\n    +\n    +  @AfterClass\n    +  public static void tearDownAfterClass() throws Exception {\n    +    System.clearProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN_FACTORY);\n    +    System.clearProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN);\n    +    System.clearProperty(\"exception.type\");\n    +  }\n    +\n    +  @Test (timeout = 60000)\n    +  public void testNettyIOException() throws Exception {\n    +    tearDown();\n    +    NettySetup();\n    +    testIOExceptionHelper();\n    +  }\n    +\n    +  @Test (timeout = 60000)\n    +  public void testNIOIOException() throws Exception {\n    +    tearDown();\n    +    NIOSetup();\n    +    testIOExceptionHelper();\n    +  }\n    +\n    +  private void testIOExceptionHelper() throws Exception {\n    +    System.setProperty(\"exception.type\", \"IOException\");\n    +    super.setUp();\n    +    final ZooKeeper zk = createClient();\n    +    final String path = \"/a\";\n    +    try {\n    +      // make sure zkclient works\n    +      zk.create(path, \"test\".getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE,\n    +        CreateMode.EPHEMERAL);\n    +      fail(\"Should not come here\");\n    +      Stat stats = zk.exists(path, false);\n    +      if (stats != null) {\n    +        int length = stats.getDataLength();\n    +      }\n    +    } catch (KeeperException.ConnectionLossException cle) {\n    +      LOG.info(\"ConnectionLossException: {}\", cle);\n    +    } finally {\n    +      zk.close();\n    +    }\n    +  }\n    +\n    +  @Test (timeout = 10000)\n    +  public void testNettyNoException() throws Exception {\n    +    tearDown();\n    +    NettySetup();\n    +    testZKNoExceptionHelper();\n    +  }\n    +\n    +  @Test (timeout = 10000)\n    +  public void testNIONoException() throws Exception {\n    +    tearDown();\n    +    NIOSetup();\n    +    testZKNoExceptionHelper();\n    +  }\n    +\n    +  private void testZKNoExceptionHelper() throws Exception {\n    +    System.setProperty(\"exception.type\", \"NoException\");\n    +    super.setUp();\n    +    final ZooKeeper zk = createClient();\n    +    final String path = \"/a\";\n    +    try {\n    +      // make sure zkclient works\n    +      zk.create(path, \"test\".getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE,\n    +        CreateMode.EPHEMERAL);\n    +      Stat stats = zk.exists(path, false);\n    +      if ( stats != null ) {\n    +        int length = stats.getDataLength();\n    +      }\n    +    } catch (KeeperException.ConnectionLossException cle) {\n    +      LOG.error(\"ConnectionLossException: {}\", cle);\n    +      fail(\"No exception should be thrown\");\n    +    } catch (Throwable t) {\n    +      // error\n    +      LOG.error(\"Throwable {}\", t);\n    +      fail(\"No exception should be thrown\");\n    +    } finally {\n    +      zk.close();\n    +    }\n    +  }\n    +  @Test (timeout = 10000)\n    +  public void testNettyRunTimeException() throws Exception {\n    +    tearDown();\n    +    NettySetup();\n    +    testZKRunTimeExceptionHelper();\n    +  }\n    +\n    +  @Test (timeout = 10000)\n    --- End diff --\n    \n    see above\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2016-12-14T05:49:27.838+0000","updated":"2016-12-14T05:49:27.838+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13002528/comment/15772059","id":"15772059","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user hanm commented on the issue:\n\n    https://github.com/apache/zookeeper/pull/99\n  \n    @yufeldman could you please fix some coding style issues pointed out by @eribeiro (4 spaces indentation, extra white space, etc)? I'll merge your patch once those comments are addressed. Thanks.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2016-12-23T06:11:08.248+0000","updated":"2016-12-23T06:11:08.248+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13002528/comment/15772287","id":"15772287","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user yufeldman commented on the issue:\n\n    https://github.com/apache/zookeeper/pull/99\n  \n    will do tomorrow. Thanks\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2016-12-23T08:18:18.282+0000","updated":"2016-12-23T08:18:18.282+0000"}],"maxResults":97,"total":97,"startAt":0},"votes":{"self":"https://issues.apache.org/jira/rest/api/2/issue/ZOOKEEPER-2549/votes","votes":0,"hasVoted":false},"worklog":{"startAt":0,"maxResults":20,"total":0,"worklogs":[]},"customfield_12311820":"0|i337rj:"}}