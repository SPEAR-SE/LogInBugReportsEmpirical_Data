{"expand":"renderedFields,names,schema,operations,editmeta,changelog,versionedRepresentations","id":"13082163","self":"https://issues.apache.org/jira/rest/api/2/issue/13082163","key":"ZOOKEEPER-2819","fields":{"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype","name":"Bug","subtask":false,"avatarId":21133},"timespent":null,"project":{"self":"https://issues.apache.org/jira/rest/api/2/project/12310801","id":"12310801","key":"ZOOKEEPER","name":"ZooKeeper","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/projectavatar?pid=12310801&avatarId=10011","24x24":"https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12310801&avatarId=10011","16x16":"https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12310801&avatarId=10011","32x32":"https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12310801&avatarId=10011"},"projectCategory":{"self":"https://issues.apache.org/jira/rest/api/2/projectCategory/10484","id":"10484","description":"Apache ZooKeeper related","name":"ZooKeeper"}},"fixVersions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12340141","id":"12340141","description":"Beta release against 3.5 branch","name":"3.5.4","archived":false,"released":true,"releaseDate":"2018-05-17"},{"self":"https://issues.apache.org/jira/rest/api/2/version/12326518","id":"12326518","name":"3.6.0","archived":false,"released":false}],"aggregatetimespent":null,"resolution":{"self":"https://issues.apache.org/jira/rest/api/2/resolution/1","id":"1","description":"A fix for this issue is checked into the tree and tested.","name":"Fixed"},"customfield_12312322":null,"customfield_12310220":"2017-06-23T17:50:57.997+0000","customfield_12312520":null,"customfield_12312323":null,"customfield_12312521":"Thu Jul 06 17:38:25 UTC 2017","customfield_12310420":"9223372036854775807","customfield_12312320":null,"customfield_12310222":"1_*:*_1_*:*_1125794229_*|*_5_*:*_1_*:*_0","customfield_12312321":null,"resolutiondate":"2017-07-06T16:49:16.112+0000","workratio":-1,"customfield_12312328":null,"customfield_12312329":null,"customfield_12312923":null,"customfield_12312326":null,"customfield_12312920":null,"customfield_12310300":null,"customfield_12312327":null,"customfield_12312921":null,"customfield_12312324":null,"customfield_12312720":null,"customfield_12312325":null,"lastViewed":null,"watches":{"self":"https://issues.apache.org/jira/rest/api/2/issue/ZOOKEEPER-2819/watchers","watchCount":4,"isWatching":false},"created":"2017-06-23T16:06:01.935+0000","customfield_12310192":null,"customfield_12310191":null,"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/2","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/critical.svg","name":"Critical","id":"2"},"labels":[],"customfield_12312333":null,"customfield_12310230":null,"customfield_12312334":null,"customfield_12313422":"false","customfield_12310310":"0.0","customfield_12312331":null,"customfield_12312332":null,"timeestimate":null,"aggregatetimeoriginalestimate":null,"customfield_12311120":null,"customfield_12312330":null,"versions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12316644","id":"12316644","description":"Dynamic Reconfig, Remove Watches, Local Session","name":"3.5.0","archived":false,"released":true,"releaseDate":"2014-08-04"},{"self":"https://issues.apache.org/jira/rest/api/2/version/12326786","id":"12326786","description":"Alpha release against 3.5 branch","name":"3.5.1","archived":false,"released":true,"releaseDate":"2015-09-02"},{"self":"https://issues.apache.org/jira/rest/api/2/version/12331981","id":"12331981","description":"Alpha release against 3.5 branch","name":"3.5.2","archived":false,"released":true,"releaseDate":"2016-07-21"},{"self":"https://issues.apache.org/jira/rest/api/2/version/12335444","id":"12335444","description":"Beta release against 3.5 branch","name":"3.5.3","archived":false,"released":true,"releaseDate":"2017-04-17"}],"issuelinks":[],"customfield_12312339":null,"assignee":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hanm","name":"hanm","key":"hanm","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hanm&avatarId=26946","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hanm&avatarId=26946","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hanm&avatarId=26946","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hanm&avatarId=26946"},"displayName":"Michael Han","active":true,"timeZone":"America/Vancouver"},"customfield_12312337":null,"customfield_12312338":null,"updated":"2017-07-06T17:38:25.586+0000","customfield_12312335":null,"customfield_12312336":null,"status":{"self":"https://issues.apache.org/jira/rest/api/2/status/5","description":"A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/resolved.png","name":"Resolved","id":"5","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Done"}},"components":[{"self":"https://issues.apache.org/jira/rest/api/2/component/12312379","id":"12312379","name":"quorum","description":"Quorum determination for ZooKeeper"},{"self":"https://issues.apache.org/jira/rest/api/2/component/12312382","id":"12312382","name":"server","description":"General issues with the ZooKeeper server."}],"timeoriginalestimate":null,"description":"In 3.5.x there is no easy way of changing the membership config using rolling restarts because of the introduction of dynamic reconfig feature in ZOOKEEPER-107, which automatically manages membership configuration parameters.\n\nZOOKEEPER-2014 introduced a reconfigEnabled flag to turn on / off the reconfig feature. We can use same flag and when it sets to false, it should disable both in memory and on disk updates of membership configuration information, besides disabling the reconfig commands on CLI which ZOOKEEPER-2014 already did, so users can continue using rolling restarts if needed. \n\nWe should also document explicitly the support of membership changes via rolling restarts will be deprecated at what release time frame and promote reconfig as the replacement.\n\nThe problem was raised at user mailing list by Guillermo Vega-Toro, reference thread:\nhttp://zookeeper-user.578899.n2.nabble.com/How-to-add-nodes-to-a-Zookeeper-3-5-3-beta-ensemble-with-reconfigEnabled-false-td7583138.html","customfield_10010":null,"timetracking":{},"customfield_12312026":null,"customfield_12312023":null,"customfield_12312024":null,"customfield_12312340":null,"attachment":[],"aggregatetimeestimate":null,"customfield_12312341":null,"customfield_12312220":null,"customfield_12312022":null,"customfield_12310921":null,"customfield_12310920":"9223372036854775807","customfield_12312823":null,"summary":"Changing membership configuration via rolling restart does not work on 3.5.x.","creator":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hanm","name":"hanm","key":"hanm","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hanm&avatarId=26946","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hanm&avatarId=26946","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hanm&avatarId=26946","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hanm&avatarId=26946"},"displayName":"Michael Han","active":true,"timeZone":"America/Vancouver"},"subtasks":[{"id":"13082663","key":"ZOOKEEPER-2820","self":"https://issues.apache.org/jira/rest/api/2/issue/13082663","fields":{"summary":"Update documentation on how to do rolling restart","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/1","description":"The issue is open and ready for the assignee to start work on it.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/open.png","name":"Open","id":"1","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/2","id":2,"key":"new","colorName":"blue-gray","name":"To Do"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.svg","name":"Major","id":"3"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/7","id":"7","description":"The sub-task of the issue","iconUrl":"https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype","name":"Sub-task","subtask":true,"avatarId":21146}}},{"id":"13083849","key":"ZOOKEEPER-2828","self":"https://issues.apache.org/jira/rest/api/2/issue/13083849","fields":{"summary":"Test case improvement","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/1","description":"The issue is open and ready for the assignee to start work on it.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/open.png","name":"Open","id":"1","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/2","id":2,"key":"new","colorName":"blue-gray","name":"To Do"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.svg","name":"Major","id":"3"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/7","id":"7","description":"The sub-task of the issue","iconUrl":"https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype","name":"Sub-task","subtask":true,"avatarId":21146}}},{"id":"13083970","key":"ZOOKEEPER-2831","self":"https://issues.apache.org/jira/rest/api/2/issue/13083970","fields":{"summary":"Update documents on getConfig when reconfig is disabled.","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/1","description":"The issue is open and ready for the assignee to start work on it.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/open.png","name":"Open","id":"1","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/2","id":2,"key":"new","colorName":"blue-gray","name":"To Do"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.svg","name":"Major","id":"3"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/7","id":"7","description":"The sub-task of the issue","iconUrl":"https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype","name":"Sub-task","subtask":true,"avatarId":21146}}}],"customfield_12310291":null,"reporter":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hanm","name":"hanm","key":"hanm","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hanm&avatarId=26946","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hanm&avatarId=26946","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hanm&avatarId=26946","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hanm&avatarId=26946"},"displayName":"Michael Han","active":true,"timeZone":"America/Vancouver"},"customfield_12310290":null,"aggregateprogress":{"progress":0,"total":0},"customfield_12311024":null,"environment":null,"customfield_12313520":null,"customfield_12311020":null,"duedate":null,"customfield_12310250":null,"progress":{"progress":0,"total":0},"comment":{"comments":[{"self":"https://issues.apache.org/jira/rest/api/2/issue/13082163/comment/16061296","id":"16061296","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=shralex","name":"shralex","key":"shralex","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Alexander Shraer","active":true,"timeZone":"America/Los_Angeles"},"body":"A second issue was raised by Guillermo where one may be using reconfig, but the cluster is partitioned and an admin may want to force a minority of servers to form a cluster (even though this is clearly not safe, since the other majority servers may also have a quorum and continue to operate). \n\nOne idea of how this can be achieved is by setting reconfigEnable parameter to false whenever such manual intervention is made, as a means of manual configuration override that will prevent the server from automatically accepting a configration from other servers.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=shralex","name":"shralex","key":"shralex","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Alexander Shraer","active":true,"timeZone":"America/Los_Angeles"},"created":"2017-06-23T17:50:57.997+0000","updated":"2017-06-23T17:50:57.997+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13082163/comment/16063959","id":"16063959","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"GitHub user hanm opened a pull request:\n\n    https://github.com/apache/zookeeper/pull/292\n\n    ZOOKEEPER-2819:Changing membership configuration via rolling restart …\n\n    …does not work on 3.5.x.\n    \n    This patch disables the creation of dynamic config files (zoo.cfg.dynamic) and static config back up files (zoo.cfg.bak) when the dynamic reconfig feature flag (reconfigEnabled) is disabled. With this patch the membership information (such as server list) will be stored in static zoo.cfg file and such information would not go through quorum and leader / follower sync phase, which makes it possible for users to continue using the old rolling restart approach.\n    \n    @shralex PTAL.\n\nYou can merge this pull request into a Git repository by running:\n\n    $ git pull https://github.com/hanm/zookeeper ZOOKEEPER-2819\n\nAlternatively you can review and apply these changes as the patch at:\n\n    https://github.com/apache/zookeeper/pull/292.patch\n\nTo close this pull request, make a commit to your master/trunk branch\nwith (at least) the following in the commit message:\n\n    This closes #292\n    \n----\ncommit 896ee06502d602ea5147d489a5e6f777fbaaa83e\nAuthor: Michael Han <hanm@apache.org>\nDate:   2017-06-26T22:41:26Z\n\n    ZOOKEEPER-2819:Changing membership configuration via rolling restart does not work on 3.5.x.\n    This patch disables the creation of dynamic config files (zoo.cfg.dynamic) and static config back up files (zoo.cfg.bak) when the dynamic reconfig feature flag (reconfigEnabled) is disabled. With this patch the membership information (such as server list) will be stored in static zoo.cfg file and such information would not go through quorum and leader / follower sync phase, which makes it possible for users to continue using the old rolling restart approach.\n\n----\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-06-26T23:18:47.433+0000","updated":"2017-06-26T23:18:47.433+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13082163/comment/16063970","id":"16063970","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hanm","name":"hanm","key":"hanm","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hanm&avatarId=26946","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hanm&avatarId=26946","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hanm&avatarId=26946","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hanm&avatarId=26946"},"displayName":"Michael Han","active":true,"timeZone":"America/Vancouver"},"body":"bq. the cluster is partitioned and an admin may want to force a minority of servers to form a cluster\n\nYeah, I think being able to deal with the partitioned / none quorum forming case is important from an operational point of view. Actually I think this is the main reason we should continue supporting rolling restart while advocating dynamic reconfig as the main approach to do reconfig.\n\nbq. One idea of how this can be achieved is by setting reconfigEnable parameter to false\n\nCreated ZOOKEEPER-2820 to document this. \n\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hanm","name":"hanm","key":"hanm","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hanm&avatarId=26946","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hanm&avatarId=26946","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hanm&avatarId=26946","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hanm&avatarId=26946"},"displayName":"Michael Han","active":true,"timeZone":"America/Vancouver"},"created":"2017-06-26T23:27:39.575+0000","updated":"2017-06-26T23:27:39.575+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13082163/comment/16063990","id":"16063990","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"body":"+1 overall.  GitHub Pull Request  Build\n      \n\n    +1 @author.  The patch does not contain any @author tags.\n\n    +1 tests included.  The patch appears to include 5 new or modified tests.\n\n    +1 javadoc.  The javadoc tool did not generate any warning messages.\n\n    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.\n\n    +1 findbugs.  The patch does not introduce any new Findbugs (version 3.0.1) warnings.\n\n    +1 release audit.  The applied patch does not increase the total number of release audit warnings.\n\n    +1 core tests.  The patch passed core unit tests.\n\n    +1 contrib tests.  The patch passed contrib unit tests.\n\nTest results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/824//testReport/\nFindbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/824//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html\nConsole output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/824//console\n\nThis message is automatically generated.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"created":"2017-06-26T23:37:35.613+0000","updated":"2017-06-26T23:37:35.613+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13082163/comment/16064318","id":"16064318","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user shralex commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/292#discussion_r124183585\n  \n    --- Diff: src/java/main/org/apache/zookeeper/server/quorum/QuorumPeer.java ---\n    @@ -1744,9 +1744,14 @@ public void setAcceptedEpoch(long e) throws IOException {\n         public boolean processReconfig(QuorumVerifier qv, Long suggestedLeaderId, Long zxid, boolean restartLE) {\n            InetSocketAddress oldClientAddr = getClientAddress();\n     \n    +       boolean isReconfigEnabled = QuorumPeerConfig.isReconfigEnabled();\n            // update last committed quorum verifier, write the new config to disk\n    -       // and restart leader election if config changed\n    -       QuorumVerifier prevQV = setQuorumVerifier(qv, true);\n    +       // and restart leader election if config changed. If reconfig feature is\n    +       // not enabled, just set last committed quorum verifier and bail out.\n    +       QuorumVerifier prevQV = setQuorumVerifier(qv, isReconfigEnabled);\n    --- End diff --\n    \n    The server acts according to the config it has in its quorum verifier, so setting quorum verifier overwrites the config file settings with the leader's settings\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-06-27T05:56:02.991+0000","updated":"2017-06-27T05:56:02.991+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13082163/comment/16064338","id":"16064338","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user asdf2014 commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/292#discussion_r124185161\n  \n    --- Diff: src/java/test/org/apache/zookeeper/server/quorum/ReconfigRollingRestartCompatibilityTest.java ---\n    @@ -0,0 +1,94 @@\n    +/**\n    + * Licensed to the Apache Software Foundation (ASF) under one\n    + * or more contributor license agreements.  See the NOTICE file\n    + * distributed with this work for additional information\n    + * regarding copyright ownership.  The ASF licenses this file\n    + * to you under the Apache License, Version 2.0 (the\n    + * \"License\"); you may not use this file except in compliance\n    + * with the License.  You may obtain a copy of the License at\n    + *\n    + *     http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +\n    +package org.apache.zookeeper.server.quorum;\n    +\n    +import java.io.IOException;\n    +import java.nio.charset.StandardCharsets;\n    +import java.nio.file.Files;\n    +\n    +import org.apache.zookeeper.PortAssignment;\n    +import org.apache.zookeeper.test.ClientBase;\n    +import org.junit.Assert;\n    +import org.junit.Before;\n    +import org.junit.Test;\n    +\n    +import static org.apache.zookeeper.test.ClientBase.CONNECTION_TIMEOUT;\n    +\n    +/**\n    + * ReconfigRollingRestartCompatibilityTest - we want to make sure that users\n    + * can continue using the rolling restart approach when reconfig feature is disabled.\n    + * It is important to stay compatible with rolling restart because dynamic reconfig\n    + * has its limitation: it requires a quorum of server to work. When no quorum can be formed,\n    + * rolling restart is the only approach to reconfigure the ensemble (e.g. removing bad nodes\n    + * such that a new quorum with smaller number of nodes can be formed.).\n    + *\n    + * See ZOOKEEPER-2819 for more details.\n    + */\n    +public class ReconfigRollingRestartCompatibilityTest extends QuorumPeerTestBase {\n    +    private static final String backupFileName = \"zoo.cfg.bak\";\n    +\n    +    final int SERVER_COUNT = 3;\n    +    final int clientPorts[] = new int[SERVER_COUNT];\n    +    final String serverList[] = new String[SERVER_COUNT];\n    +    StringBuilder sb = new StringBuilder();\n    +\n    +    @Before\n    +    public void setup() throws InterruptedException {\n    +        String server;\n    +        for (int i = 0; i < SERVER_COUNT; i++) {\n    +            clientPorts[i] = PortAssignment.unique();\n    +            server = \"server.\" + i + \"=localhost:\" + PortAssignment.unique()\n    +                    + \":\" + PortAssignment.unique() + \":participant;localhost:\"\n    +                    + clientPorts[i];\n    +            serverList[i] = server;\n    +            sb.append(server + \"\\n\");\n    +        }\n    +    }\n    +\n    +    @Test(timeout = 60000)\n    +    public void testNoLocalDynamicConfigAndBackupFiles()\n    +            throws InterruptedException, IOException {\n    +        String currentQuorumCfgSection = sb.toString();\n    +        QuorumPeerTestBase.MainThread mt[] = new QuorumPeerTestBase.MainThread[SERVER_COUNT];\n    +        String[] staticFileContent = new String[SERVER_COUNT];\n    +\n    +        for (int i = 0; i < SERVER_COUNT; i++) {\n    +            mt[i] = new QuorumPeerTestBase.MainThread(i, clientPorts[i],\n    +                    currentQuorumCfgSection, false);\n    +            mt[i].start();\n    +        }\n    +\n    +        for (int i = 0; i < SERVER_COUNT; i++) {\n    +            Assert.assertTrue(\"waiting for server \" + i + \" being up\",\n    +                    ClientBase.waitForServerUp(\"127.0.0.1:\" + clientPorts[i],\n    +                            CONNECTION_TIMEOUT));\n    +            Assert.assertNull(\"static file backup (zoo.cfg.bak) shouldn't exist!\",\n    +                    mt[i].getFileByName(backupFileName));\n    +            Assert.assertNull(\"dynamic configuration file (zoo.cfg.dynamic.*) shouldn't exist!\",\n    +                    mt[i].getFileByName(mt[i].getQuorumPeer().getNextDynamicConfigFilename()));\n    +            staticFileContent[i] = Files.readAllLines(mt[i].confFile.toPath(), StandardCharsets.UTF_8).toString();\n    +            Assert.assertTrue(\"static config file should contain server entry \" + serverList[i],\n    +                    staticFileContent[i].contains(serverList[i]));\n    +        }\n    +\n    +        for (int i = 0; i < SERVER_COUNT; i++) {\n    +            mt[i].shutdown();\n    +        }\n    +    }\n    +}\n    --- End diff --\n    \n    Should add a new line for the end of file.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-06-27T06:12:58.884+0000","updated":"2017-06-27T06:12:58.884+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13082163/comment/16065469","id":"16065469","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user hanm commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/292#discussion_r124396899\n  \n    --- Diff: src/java/main/org/apache/zookeeper/server/quorum/QuorumPeer.java ---\n    @@ -1744,9 +1744,14 @@ public void setAcceptedEpoch(long e) throws IOException {\n         public boolean processReconfig(QuorumVerifier qv, Long suggestedLeaderId, Long zxid, boolean restartLE) {\n            InetSocketAddress oldClientAddr = getClientAddress();\n     \n    +       boolean isReconfigEnabled = QuorumPeerConfig.isReconfigEnabled();\n            // update last committed quorum verifier, write the new config to disk\n    -       // and restart leader election if config changed\n    -       QuorumVerifier prevQV = setQuorumVerifier(qv, true);\n    +       // and restart leader election if config changed. If reconfig feature is\n    +       // not enabled, just set last committed quorum verifier and bail out.\n    +       QuorumVerifier prevQV = setQuorumVerifier(qv, isReconfigEnabled);\n    --- End diff --\n    \n    Updated. Now I am returning immediately at the start of processReconfig if the feature flag is not set. \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-06-27T21:11:26.192+0000","updated":"2017-06-27T21:11:26.192+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13082163/comment/16065472","id":"16065472","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user hanm commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/292#discussion_r124397041\n  \n    --- Diff: src/java/test/org/apache/zookeeper/server/quorum/ReconfigRollingRestartCompatibilityTest.java ---\n    @@ -0,0 +1,94 @@\n    +/**\n    + * Licensed to the Apache Software Foundation (ASF) under one\n    + * or more contributor license agreements.  See the NOTICE file\n    + * distributed with this work for additional information\n    + * regarding copyright ownership.  The ASF licenses this file\n    + * to you under the Apache License, Version 2.0 (the\n    + * \"License\"); you may not use this file except in compliance\n    + * with the License.  You may obtain a copy of the License at\n    + *\n    + *     http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +\n    +package org.apache.zookeeper.server.quorum;\n    +\n    +import java.io.IOException;\n    +import java.nio.charset.StandardCharsets;\n    +import java.nio.file.Files;\n    +\n    +import org.apache.zookeeper.PortAssignment;\n    +import org.apache.zookeeper.test.ClientBase;\n    +import org.junit.Assert;\n    +import org.junit.Before;\n    +import org.junit.Test;\n    +\n    +import static org.apache.zookeeper.test.ClientBase.CONNECTION_TIMEOUT;\n    +\n    +/**\n    + * ReconfigRollingRestartCompatibilityTest - we want to make sure that users\n    + * can continue using the rolling restart approach when reconfig feature is disabled.\n    + * It is important to stay compatible with rolling restart because dynamic reconfig\n    + * has its limitation: it requires a quorum of server to work. When no quorum can be formed,\n    + * rolling restart is the only approach to reconfigure the ensemble (e.g. removing bad nodes\n    + * such that a new quorum with smaller number of nodes can be formed.).\n    + *\n    + * See ZOOKEEPER-2819 for more details.\n    + */\n    +public class ReconfigRollingRestartCompatibilityTest extends QuorumPeerTestBase {\n    +    private static final String backupFileName = \"zoo.cfg.bak\";\n    +\n    +    final int SERVER_COUNT = 3;\n    +    final int clientPorts[] = new int[SERVER_COUNT];\n    +    final String serverList[] = new String[SERVER_COUNT];\n    +    StringBuilder sb = new StringBuilder();\n    +\n    +    @Before\n    +    public void setup() throws InterruptedException {\n    +        String server;\n    +        for (int i = 0; i < SERVER_COUNT; i++) {\n    +            clientPorts[i] = PortAssignment.unique();\n    +            server = \"server.\" + i + \"=localhost:\" + PortAssignment.unique()\n    +                    + \":\" + PortAssignment.unique() + \":participant;localhost:\"\n    +                    + clientPorts[i];\n    +            serverList[i] = server;\n    +            sb.append(server + \"\\n\");\n    +        }\n    +    }\n    +\n    +    @Test(timeout = 60000)\n    +    public void testNoLocalDynamicConfigAndBackupFiles()\n    +            throws InterruptedException, IOException {\n    +        String currentQuorumCfgSection = sb.toString();\n    +        QuorumPeerTestBase.MainThread mt[] = new QuorumPeerTestBase.MainThread[SERVER_COUNT];\n    +        String[] staticFileContent = new String[SERVER_COUNT];\n    +\n    +        for (int i = 0; i < SERVER_COUNT; i++) {\n    +            mt[i] = new QuorumPeerTestBase.MainThread(i, clientPorts[i],\n    +                    currentQuorumCfgSection, false);\n    +            mt[i].start();\n    +        }\n    +\n    +        for (int i = 0; i < SERVER_COUNT; i++) {\n    +            Assert.assertTrue(\"waiting for server \" + i + \" being up\",\n    +                    ClientBase.waitForServerUp(\"127.0.0.1:\" + clientPorts[i],\n    +                            CONNECTION_TIMEOUT));\n    +            Assert.assertNull(\"static file backup (zoo.cfg.bak) shouldn't exist!\",\n    +                    mt[i].getFileByName(backupFileName));\n    +            Assert.assertNull(\"dynamic configuration file (zoo.cfg.dynamic.*) shouldn't exist!\",\n    +                    mt[i].getFileByName(mt[i].getQuorumPeer().getNextDynamicConfigFilename()));\n    +            staticFileContent[i] = Files.readAllLines(mt[i].confFile.toPath(), StandardCharsets.UTF_8).toString();\n    +            Assert.assertTrue(\"static config file should contain server entry \" + serverList[i],\n    +                    staticFileContent[i].contains(serverList[i]));\n    +        }\n    +\n    +        for (int i = 0; i < SERVER_COUNT; i++) {\n    +            mt[i].shutdown();\n    +        }\n    +    }\n    +}\n    --- End diff --\n    \n    Should be fixed now.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-06-27T21:12:10.311+0000","updated":"2017-06-27T21:12:10.311+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13082163/comment/16065484","id":"16065484","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user hanm commented on the issue:\n\n    https://github.com/apache/zookeeper/pull/292\n  \n    Thanks for review, @shralex @asdf2014 . Code updated. \n    \n    I also refactored a couple of reconfig tests to consolidate the setting of the feature flag, which makes the test both easier to read and also fix potential race conditions I found out while working on this patch: because the flag was set in a different thread while the peers are running, it is possible the peer thread still cache old value. Such case would not happen for real use case (aside from artificial tests we created here) because the feature flag will not change after ensemble is started. \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-06-27T21:17:27.633+0000","updated":"2017-06-27T21:17:27.633+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13082163/comment/16065490","id":"16065490","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"body":"-1 overall.  GitHub Pull Request  Build\n      \n\n    +1 @author.  The patch does not contain any @author tags.\n\n    +1 tests included.  The patch appears to include 11 new or modified tests.\n\n    +1 javadoc.  The javadoc tool did not generate any warning messages.\n\n    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.\n\n    +1 findbugs.  The patch does not introduce any new Findbugs (version 3.0.1) warnings.\n\n    +1 release audit.  The applied patch does not increase the total number of release audit warnings.\n\n    -1 core tests.  The patch failed core unit tests.\n\n    +1 contrib tests.  The patch passed contrib unit tests.\n\nTest results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/828//testReport/\nFindbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/828//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html\nConsole output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/828//console\n\nThis message is automatically generated.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"created":"2017-06-27T21:21:04.460+0000","updated":"2017-06-27T21:21:04.460+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13082163/comment/16065493","id":"16065493","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user shralex commented on the issue:\n\n    https://github.com/apache/zookeeper/pull/292\n  \n    Michael, thanks for the changes. Do we need some tests that can catch the issue I pointed out - one server is getting rebooted with a new config file, but other servers push old config to that server, need to make sure that it actually acts upon or has the config its supposed to have. Two scenarios - config pushed durning leader sync, and config pushed during leader election (in FastLeaderElection.java). Perhaps you're already doing this, I haven't looked.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-06-27T21:21:51.073+0000","updated":"2017-06-27T21:21:51.073+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13082163/comment/16067720","id":"16067720","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"body":"-1 overall.  GitHub Pull Request  Build\n      \n\n    +1 @author.  The patch does not contain any @author tags.\n\n    +1 tests included.  The patch appears to include 11 new or modified tests.\n\n    +1 javadoc.  The javadoc tool did not generate any warning messages.\n\n    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.\n\n    +1 findbugs.  The patch does not introduce any new Findbugs (version 3.0.1) warnings.\n\n    +1 release audit.  The applied patch does not increase the total number of release audit warnings.\n\n    -1 core tests.  The patch failed core unit tests.\n\n    +1 contrib tests.  The patch passed contrib unit tests.\n\nTest results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/838//testReport/\nFindbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/838//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html\nConsole output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/838//console\n\nThis message is automatically generated.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"created":"2017-06-29T04:29:25.298+0000","updated":"2017-06-29T04:29:25.298+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13082163/comment/16067735","id":"16067735","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"body":"-1 overall.  GitHub Pull Request  Build\n      \n\n    +1 @author.  The patch does not contain any @author tags.\n\n    +1 tests included.  The patch appears to include 11 new or modified tests.\n\n    +1 javadoc.  The javadoc tool did not generate any warning messages.\n\n    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.\n\n    +1 findbugs.  The patch does not introduce any new Findbugs (version 3.0.1) warnings.\n\n    +1 release audit.  The applied patch does not increase the total number of release audit warnings.\n\n    -1 core tests.  The patch failed core unit tests.\n\n    +1 contrib tests.  The patch passed contrib unit tests.\n\nTest results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/839//testReport/\nFindbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/839//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html\nConsole output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/839//console\n\nThis message is automatically generated.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"created":"2017-06-29T04:47:29.453+0000","updated":"2017-06-29T04:47:29.453+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13082163/comment/16067737","id":"16067737","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user hanm commented on the issue:\n\n    https://github.com/apache/zookeeper/pull/292\n  \n    Added test cases to cover rolling restart. The pre-commit Jenkins failure is a known flaky test.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-06-29T04:57:31.829+0000","updated":"2017-06-29T04:57:31.829+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13082163/comment/16070703","id":"16070703","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user shralex commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/292#discussion_r125121157\n  \n    --- Diff: src/java/test/org/apache/zookeeper/test/ReconfigExceptionTest.java ---\n    @@ -89,6 +89,7 @@ public void tearDown() throws Exception {\n     \n         @Test(timeout = 10000)\n         public void testReconfigDisabledByDefault() throws InterruptedException {\n    +        QuorumPeerConfig.setReconfigEnabled(false);\n    --- End diff --\n    \n    Given that the test is called \"disabled-by-default\" Its strange to disable this manually here. I suggest to rename the test to reflect what its doing - checking that when the flag is false reconfig ops aren't allowed.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-06-30T20:51:35.137+0000","updated":"2017-06-30T20:51:35.137+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13082163/comment/16070704","id":"16070704","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user shralex commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/292#discussion_r125127752\n  \n    --- Diff: src/java/test/org/apache/zookeeper/server/quorum/ReconfigRollingRestartCompatibilityTest.java ---\n    @@ -0,0 +1,275 @@\n    +/**\n    + * Licensed to the Apache Software Foundation (ASF) under one\n    + * or more contributor license agreements.  See the NOTICE file\n    + * distributed with this work for additional information\n    + * regarding copyright ownership.  The ASF licenses this file\n    + * to you under the Apache License, Version 2.0 (the\n    + * \"License\"); you may not use this file except in compliance\n    + * with the License.  You may obtain a copy of the License at\n    + *\n    + *     http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +\n    +package org.apache.zookeeper.server.quorum;\n    +\n    +import java.io.IOException;\n    +import java.nio.charset.StandardCharsets;\n    +import java.nio.file.Files;\n    +import java.util.Arrays;\n    +import java.util.Map;\n    +import java.util.Set;\n    +import java.util.List;\n    +import java.util.HashMap;\n    +import java.util.HashSet;\n    +import java.util.ArrayList;\n    +\n    +import org.apache.zookeeper.WatchedEvent;\n    +import org.apache.zookeeper.ZooKeeper;\n    +import org.apache.zookeeper.CreateMode;\n    +import org.apache.zookeeper.ZooDefs;\n    +import org.apache.zookeeper.PortAssignment;\n    +import org.apache.zookeeper.KeeperException;\n    +import org.apache.zookeeper.Watcher;\n    +import org.apache.zookeeper.test.ClientBase;\n    +import org.junit.Assert;\n    +import org.junit.Test;\n    +\n    +import static org.apache.zookeeper.test.ClientBase.CONNECTION_TIMEOUT;\n    +\n    +/**\n    + * ReconfigRollingRestartCompatibilityTest - we want to make sure that users\n    + * can continue using the rolling restart approach when reconfig feature is disabled.\n    + * It is important to stay compatible with rolling restart because dynamic reconfig\n    + * has its limitation: it requires a quorum of server to work. When no quorum can be formed,\n    + * rolling restart is the only approach to reconfigure the ensemble (e.g. removing bad nodes\n    + * such that a new quorum with smaller number of nodes can be formed.).\n    + *\n    + * See ZOOKEEPER-2819 for more details.\n    + */\n    +public class ReconfigRollingRestartCompatibilityTest extends QuorumPeerTestBase {\n    +    private static final String backupFileName = \"zoo.cfg.bak\";\n    +\n    +    Map<Integer, Integer> clientPorts = new HashMap<>(5);\n    +    Map<Integer, String> serverAddress = new HashMap<>(5);\n    +\n    +    private String generateNewQuorumConfig(int serverCount) {\n    +        StringBuilder sb = new StringBuilder();\n    +        String server;\n    +        for (int i = 0; i < serverCount; i++) {\n    +            clientPorts.put(i, PortAssignment.unique());\n    +            server = \"server.\" + i + \"=localhost:\" + PortAssignment.unique()\n    +                    + \":\" + PortAssignment.unique() + \":participant;localhost:\"\n    +                    + clientPorts.get(i);\n    +            serverAddress.put(i, server);\n    +            sb.append(server + \"\\n\");\n    +        }\n    +        return sb.toString();\n    +    }\n    +\n    +    private String updateExistingQuorumConfig(List<Integer> sidsToAdd, List<Integer> sidsToRemove) {\n    +        StringBuilder sb = new StringBuilder();\n    +        for (Integer sid : sidsToAdd) {\n    +            clientPorts.put(sid, PortAssignment.unique());\n    +            serverAddress.put(sid, \"server.\" + sid + \"=localhost:\" + PortAssignment.unique()\n    +                    + \":\" + PortAssignment.unique() + \":participant;localhost:\"\n    +                    + clientPorts.get(sid));\n    +        }\n    +\n    +        for (Integer sid : sidsToRemove) {\n    +            clientPorts.remove(sid);\n    +            serverAddress.remove(sid);\n    +        }\n    +\n    +        for (String server : serverAddress.values()) {\n    +            sb.append(server + \"\\n\");\n    +        }\n    +\n    +        return sb.toString();\n    +    }\n    +\n    +    @Test(timeout = 60000)\n    +    // Verify no zoo.cfg.dynamic and zoo.cfg.bak files existing locally\n    +    // when reconfig feature flag is off by default.\n    +    public void testNoLocalDynamicConfigAndBackupFiles()\n    +            throws InterruptedException, IOException {\n    +        int serverCount = 3;\n    +        String config = generateNewQuorumConfig(serverCount);\n    +        QuorumPeerTestBase.MainThread mt[] = new QuorumPeerTestBase.MainThread[serverCount];\n    +        String[] staticFileContent = new String[serverCount];\n    +\n    +        for (int i = 0; i < serverCount; i++) {\n    +            mt[i] = new QuorumPeerTestBase.MainThread(i, clientPorts.get(i),\n    +                    config, false);\n    +            mt[i].start();\n    +        }\n    +\n    +        for (int i = 0; i < serverCount; i++) {\n    +            Assert.assertTrue(\"waiting for server \" + i + \" being up\",\n    +                    ClientBase.waitForServerUp(\"127.0.0.1:\" + clientPorts.get(i),\n    +                            CONNECTION_TIMEOUT));\n    +            Assert.assertNull(\"static file backup (zoo.cfg.bak) shouldn't exist!\",\n    +                    mt[i].getFileByName(backupFileName));\n    +            Assert.assertNull(\"dynamic configuration file (zoo.cfg.dynamic.*) shouldn't exist!\",\n    +                    mt[i].getFileByName(mt[i].getQuorumPeer().getNextDynamicConfigFilename()));\n    +            staticFileContent[i] = Files.readAllLines(mt[i].confFile.toPath(), StandardCharsets.UTF_8).toString();\n    +            Assert.assertTrue(\"static config file should contain server entry \" + serverAddress.get(i),\n    +                    staticFileContent[i].contains(serverAddress.get(i)));\n    +        }\n    +\n    +        for (int i = 0; i < serverCount; i++) {\n    +            mt[i].shutdown();\n    +        }\n    +    }\n    +\n    +    @Test(timeout = 60000)\n    +    // This test simulate the usual rolling restart with no membership change:\n    +    // 1. A node is shutdown first (e.g. to upgrade software, or hardware, or cleanup local data.).\n    +    // 2. After upgrade, start the node.\n    +    // 3. Do this for every node, one at a time.\n    +    public void testRollingRestartWithoutMembershipChange()\n    +            throws IOException, InterruptedException, KeeperException {\n    +        int serverCount = 3;\n    +        String config = generateNewQuorumConfig(serverCount);\n    +        QuorumPeerTestBase.MainThread mt[] = new QuorumPeerTestBase.MainThread[serverCount];\n    +        for (int i = 0; i < serverCount; ++i) {\n    +            mt[i] = new QuorumPeerTestBase.MainThread(i, clientPorts.get(i),\n    +                    config, false);\n    +            mt[i].start();\n    +        }\n    +\n    +        for (int i = 0; i < serverCount; ++i) {\n    +            Assert.assertTrue(\"waiting for server \" + i + \" being up\",\n    +                    ClientBase.waitForServerUp(\"127.0.0.1:\" + clientPorts.get(i),\n    +                            CONNECTION_TIMEOUT));\n    +        }\n    +\n    +        for (int i = 0; i < serverCount; ++i) {\n    +            mt[i].shutdown();\n    +            mt[i].start();\n    +            verifyQuorum(i);\n    +            verifyConfig(mt[i]);\n    +        }\n    +\n    +        for (int i = 0; i < serverCount; i++) {\n    +            mt[i].shutdown();\n    +        }\n    +    }\n    +\n    +    @Test(timeout = 90000)\n    +    // This test simulate the use case of change of membership through rolling\n    +    // restart. For a 3 node ensemble we expand it to a 5 node ensemble, verify\n    +    // during the process each node has the expected configuration setting pushed\n    +    // via updating local zoo.cfg file.\n    +    public void testRollingRestartWithMembershipChange()\n    +            throws IOException, InterruptedException, KeeperException {\n    +        int serverCount = 3;\n    +        String config = generateNewQuorumConfig(serverCount);\n    +        QuorumPeerTestBase.MainThread mt[] = new QuorumPeerTestBase.MainThread[serverCount];\n    +        for (int i = 0; i < serverCount; ++i) {\n    +            mt[i] = new QuorumPeerTestBase.MainThread(i, clientPorts.get(i),\n    +                    config, false);\n    +            mt[i].start();\n    +        }\n    +\n    +        for (int i = 0; i < serverCount; ++i) {\n    +            Assert.assertTrue(\"waiting for server \" + i + \" being up\",\n    +                    ClientBase.waitForServerUp(\"127.0.0.1:\" + clientPorts.get(i),\n    +                            CONNECTION_TIMEOUT));\n    +        }\n    +\n    +        for (int i = 0; i < serverCount; ++i) {\n    +            verifyQuorum(i);\n    +            verifyConfig(mt[i]);\n    +        }\n    +\n    +        Map<Integer, String> oldServerAddress = new HashMap<>(serverAddress);\n    +        config = updateExistingQuorumConfig(Arrays.asList(3, 4), new ArrayList<Integer>());\n    +        serverCount = serverAddress.size();\n    +        Assert.assertEquals(\"Server count should be 5 after config update.\", serverCount, 5);\n    +\n    +        mt = Arrays.copyOf(mt, mt.length + 2);\n    --- End diff --\n    \n    Please add a comment here to say that the new servers should have a config with all five servers, and the old servers a config with 3 servers.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-06-30T20:51:35.189+0000","updated":"2017-06-30T20:51:35.189+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13082163/comment/16070705","id":"16070705","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user shralex commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/292#discussion_r125120823\n  \n    --- Diff: src/java/test/org/apache/zookeeper/server/quorum/ReconfigRecoveryTest.java ---\n    @@ -28,9 +28,15 @@\n     import org.apache.zookeeper.test.ClientBase;\n     import org.apache.zookeeper.test.ReconfigTest;\n     import org.junit.Assert;\n    +import org.junit.Before;\n     import org.junit.Test;\n     \n     public class ReconfigRecoveryTest extends QuorumPeerTestBase {\n    +    @Before\n    +    public void setup() {\n    +        QuorumPeerConfig.setReconfigEnabled(true);\n    --- End diff --\n    \n    is the same needed also in all other reconfig test files ?\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-06-30T20:51:35.314+0000","updated":"2017-06-30T20:51:35.314+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13082163/comment/16070706","id":"16070706","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user shralex commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/292#discussion_r125124612\n  \n    --- Diff: src/java/test/org/apache/zookeeper/server/quorum/ReconfigRollingRestartCompatibilityTest.java ---\n    @@ -0,0 +1,275 @@\n    +/**\n    + * Licensed to the Apache Software Foundation (ASF) under one\n    + * or more contributor license agreements.  See the NOTICE file\n    + * distributed with this work for additional information\n    + * regarding copyright ownership.  The ASF licenses this file\n    + * to you under the Apache License, Version 2.0 (the\n    + * \"License\"); you may not use this file except in compliance\n    + * with the License.  You may obtain a copy of the License at\n    + *\n    + *     http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +\n    +package org.apache.zookeeper.server.quorum;\n    +\n    +import java.io.IOException;\n    +import java.nio.charset.StandardCharsets;\n    +import java.nio.file.Files;\n    +import java.util.Arrays;\n    +import java.util.Map;\n    +import java.util.Set;\n    +import java.util.List;\n    +import java.util.HashMap;\n    +import java.util.HashSet;\n    +import java.util.ArrayList;\n    +\n    +import org.apache.zookeeper.WatchedEvent;\n    +import org.apache.zookeeper.ZooKeeper;\n    +import org.apache.zookeeper.CreateMode;\n    +import org.apache.zookeeper.ZooDefs;\n    +import org.apache.zookeeper.PortAssignment;\n    +import org.apache.zookeeper.KeeperException;\n    +import org.apache.zookeeper.Watcher;\n    +import org.apache.zookeeper.test.ClientBase;\n    +import org.junit.Assert;\n    +import org.junit.Test;\n    +\n    +import static org.apache.zookeeper.test.ClientBase.CONNECTION_TIMEOUT;\n    +\n    +/**\n    + * ReconfigRollingRestartCompatibilityTest - we want to make sure that users\n    + * can continue using the rolling restart approach when reconfig feature is disabled.\n    + * It is important to stay compatible with rolling restart because dynamic reconfig\n    + * has its limitation: it requires a quorum of server to work. When no quorum can be formed,\n    + * rolling restart is the only approach to reconfigure the ensemble (e.g. removing bad nodes\n    + * such that a new quorum with smaller number of nodes can be formed.).\n    + *\n    + * See ZOOKEEPER-2819 for more details.\n    + */\n    +public class ReconfigRollingRestartCompatibilityTest extends QuorumPeerTestBase {\n    +    private static final String backupFileName = \"zoo.cfg.bak\";\n    +\n    +    Map<Integer, Integer> clientPorts = new HashMap<>(5);\n    +    Map<Integer, String> serverAddress = new HashMap<>(5);\n    +\n    +    private String generateNewQuorumConfig(int serverCount) {\n    +        StringBuilder sb = new StringBuilder();\n    +        String server;\n    +        for (int i = 0; i < serverCount; i++) {\n    +            clientPorts.put(i, PortAssignment.unique());\n    +            server = \"server.\" + i + \"=localhost:\" + PortAssignment.unique()\n    +                    + \":\" + PortAssignment.unique() + \":participant;localhost:\"\n    +                    + clientPorts.get(i);\n    +            serverAddress.put(i, server);\n    +            sb.append(server + \"\\n\");\n    +        }\n    +        return sb.toString();\n    +    }\n    +\n    +    private String updateExistingQuorumConfig(List<Integer> sidsToAdd, List<Integer> sidsToRemove) {\n    +        StringBuilder sb = new StringBuilder();\n    +        for (Integer sid : sidsToAdd) {\n    +            clientPorts.put(sid, PortAssignment.unique());\n    +            serverAddress.put(sid, \"server.\" + sid + \"=localhost:\" + PortAssignment.unique()\n    +                    + \":\" + PortAssignment.unique() + \":participant;localhost:\"\n    +                    + clientPorts.get(sid));\n    +        }\n    +\n    +        for (Integer sid : sidsToRemove) {\n    +            clientPorts.remove(sid);\n    +            serverAddress.remove(sid);\n    +        }\n    +\n    +        for (String server : serverAddress.values()) {\n    +            sb.append(server + \"\\n\");\n    +        }\n    +\n    +        return sb.toString();\n    +    }\n    +\n    +    @Test(timeout = 60000)\n    +    // Verify no zoo.cfg.dynamic and zoo.cfg.bak files existing locally\n    +    // when reconfig feature flag is off by default.\n    +    public void testNoLocalDynamicConfigAndBackupFiles()\n    +            throws InterruptedException, IOException {\n    +        int serverCount = 3;\n    +        String config = generateNewQuorumConfig(serverCount);\n    +        QuorumPeerTestBase.MainThread mt[] = new QuorumPeerTestBase.MainThread[serverCount];\n    +        String[] staticFileContent = new String[serverCount];\n    +\n    +        for (int i = 0; i < serverCount; i++) {\n    +            mt[i] = new QuorumPeerTestBase.MainThread(i, clientPorts.get(i),\n    +                    config, false);\n    +            mt[i].start();\n    +        }\n    +\n    +        for (int i = 0; i < serverCount; i++) {\n    +            Assert.assertTrue(\"waiting for server \" + i + \" being up\",\n    +                    ClientBase.waitForServerUp(\"127.0.0.1:\" + clientPorts.get(i),\n    +                            CONNECTION_TIMEOUT));\n    +            Assert.assertNull(\"static file backup (zoo.cfg.bak) shouldn't exist!\",\n    +                    mt[i].getFileByName(backupFileName));\n    +            Assert.assertNull(\"dynamic configuration file (zoo.cfg.dynamic.*) shouldn't exist!\",\n    +                    mt[i].getFileByName(mt[i].getQuorumPeer().getNextDynamicConfigFilename()));\n    +            staticFileContent[i] = Files.readAllLines(mt[i].confFile.toPath(), StandardCharsets.UTF_8).toString();\n    +            Assert.assertTrue(\"static config file should contain server entry \" + serverAddress.get(i),\n    +                    staticFileContent[i].contains(serverAddress.get(i)));\n    +        }\n    +\n    +        for (int i = 0; i < serverCount; i++) {\n    +            mt[i].shutdown();\n    +        }\n    +    }\n    +\n    +    @Test(timeout = 60000)\n    +    // This test simulate the usual rolling restart with no membership change:\n    +    // 1. A node is shutdown first (e.g. to upgrade software, or hardware, or cleanup local data.).\n    +    // 2. After upgrade, start the node.\n    +    // 3. Do this for every node, one at a time.\n    +    public void testRollingRestartWithoutMembershipChange()\n    +            throws IOException, InterruptedException, KeeperException {\n    +        int serverCount = 3;\n    +        String config = generateNewQuorumConfig(serverCount);\n    +        QuorumPeerTestBase.MainThread mt[] = new QuorumPeerTestBase.MainThread[serverCount];\n    +        for (int i = 0; i < serverCount; ++i) {\n    +            mt[i] = new QuorumPeerTestBase.MainThread(i, clientPorts.get(i),\n    +                    config, false);\n    +            mt[i].start();\n    +        }\n    +\n    +        for (int i = 0; i < serverCount; ++i) {\n    +            Assert.assertTrue(\"waiting for server \" + i + \" being up\",\n    +                    ClientBase.waitForServerUp(\"127.0.0.1:\" + clientPorts.get(i),\n    +                            CONNECTION_TIMEOUT));\n    +        }\n    +\n    +        for (int i = 0; i < serverCount; ++i) {\n    +            mt[i].shutdown();\n    +            mt[i].start();\n    +            verifyQuorum(i);\n    +            verifyConfig(mt[i]);\n    +        }\n    +\n    +        for (int i = 0; i < serverCount; i++) {\n    +            mt[i].shutdown();\n    +        }\n    +    }\n    +\n    +    @Test(timeout = 90000)\n    +    // This test simulate the use case of change of membership through rolling\n    +    // restart. For a 3 node ensemble we expand it to a 5 node ensemble, verify\n    +    // during the process each node has the expected configuration setting pushed\n    +    // via updating local zoo.cfg file.\n    +    public void testRollingRestartWithMembershipChange()\n    +            throws IOException, InterruptedException, KeeperException {\n    +        int serverCount = 3;\n    +        String config = generateNewQuorumConfig(serverCount);\n    +        QuorumPeerTestBase.MainThread mt[] = new QuorumPeerTestBase.MainThread[serverCount];\n    +        for (int i = 0; i < serverCount; ++i) {\n    +            mt[i] = new QuorumPeerTestBase.MainThread(i, clientPorts.get(i),\n    +                    config, false);\n    +            mt[i].start();\n    +        }\n    +\n    +        for (int i = 0; i < serverCount; ++i) {\n    +            Assert.assertTrue(\"waiting for server \" + i + \" being up\",\n    +                    ClientBase.waitForServerUp(\"127.0.0.1:\" + clientPorts.get(i),\n    +                            CONNECTION_TIMEOUT));\n    +        }\n    +\n    +        for (int i = 0; i < serverCount; ++i) {\n    +            verifyQuorum(i);\n    +            verifyConfig(mt[i]);\n    +        }\n    +\n    +        Map<Integer, String> oldServerAddress = new HashMap<>(serverAddress);\n    +        config = updateExistingQuorumConfig(Arrays.asList(3, 4), new ArrayList<Integer>());\n    +        serverCount = serverAddress.size();\n    +        Assert.assertEquals(\"Server count should be 5 after config update.\", serverCount, 5);\n    +\n    +        mt = Arrays.copyOf(mt, mt.length + 2);\n    +        for (int i = 3; i < 5; ++i) {\n    +            mt[i] = new QuorumPeerTestBase.MainThread(i, clientPorts.get(i),\n    +                    config, false);\n    +            mt[i].start();\n    +            Assert.assertTrue(\"waiting for server \" + i + \" being up\",\n    +                    ClientBase.waitForServerUp(\"127.0.0.1:\" + clientPorts.get(i),\n    +                            CONNECTION_TIMEOUT));\n    +            verifyConfig(mt[i]);\n    +            verifyQuorum(i);\n    +        }\n    +\n    +        Set<String> expectedConfigs = new HashSet<>();\n    +        for (String conf : oldServerAddress.values()) {\n    +            // Remove \"server.x=\" prefix.\n    +            expectedConfigs.add(conf.substring(9));\n    +        }\n    +\n    +        for (int i = 0; i < 3; ++i) {\n    +            verifyConfig(mt[i], expectedConfigs);\n    +        }\n    +\n    +        for (int i = 0; i < serverCount; ++i) {\n    +            mt[i].shutdown();\n    +        }\n    +    }\n    +\n    +    // A successful write operation indicates a quorum is up.\n    +    private void verifyQuorum(int sid)\n    --- End diff --\n    \n    Can you reuse some helper methods from ReconfigTest.java ?\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-06-30T20:51:35.318+0000","updated":"2017-06-30T20:51:35.318+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13082163/comment/16070707","id":"16070707","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user shralex commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/292#discussion_r125126374\n  \n    --- Diff: src/java/test/org/apache/zookeeper/server/quorum/ReconfigRollingRestartCompatibilityTest.java ---\n    @@ -0,0 +1,275 @@\n    +/**\n    + * Licensed to the Apache Software Foundation (ASF) under one\n    + * or more contributor license agreements.  See the NOTICE file\n    + * distributed with this work for additional information\n    + * regarding copyright ownership.  The ASF licenses this file\n    + * to you under the Apache License, Version 2.0 (the\n    + * \"License\"); you may not use this file except in compliance\n    + * with the License.  You may obtain a copy of the License at\n    + *\n    + *     http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +\n    +package org.apache.zookeeper.server.quorum;\n    +\n    +import java.io.IOException;\n    +import java.nio.charset.StandardCharsets;\n    +import java.nio.file.Files;\n    +import java.util.Arrays;\n    +import java.util.Map;\n    +import java.util.Set;\n    +import java.util.List;\n    +import java.util.HashMap;\n    +import java.util.HashSet;\n    +import java.util.ArrayList;\n    +\n    +import org.apache.zookeeper.WatchedEvent;\n    +import org.apache.zookeeper.ZooKeeper;\n    +import org.apache.zookeeper.CreateMode;\n    +import org.apache.zookeeper.ZooDefs;\n    +import org.apache.zookeeper.PortAssignment;\n    +import org.apache.zookeeper.KeeperException;\n    +import org.apache.zookeeper.Watcher;\n    +import org.apache.zookeeper.test.ClientBase;\n    +import org.junit.Assert;\n    +import org.junit.Test;\n    +\n    +import static org.apache.zookeeper.test.ClientBase.CONNECTION_TIMEOUT;\n    +\n    +/**\n    + * ReconfigRollingRestartCompatibilityTest - we want to make sure that users\n    + * can continue using the rolling restart approach when reconfig feature is disabled.\n    + * It is important to stay compatible with rolling restart because dynamic reconfig\n    + * has its limitation: it requires a quorum of server to work. When no quorum can be formed,\n    + * rolling restart is the only approach to reconfigure the ensemble (e.g. removing bad nodes\n    + * such that a new quorum with smaller number of nodes can be formed.).\n    + *\n    + * See ZOOKEEPER-2819 for more details.\n    + */\n    +public class ReconfigRollingRestartCompatibilityTest extends QuorumPeerTestBase {\n    +    private static final String backupFileName = \"zoo.cfg.bak\";\n    +\n    +    Map<Integer, Integer> clientPorts = new HashMap<>(5);\n    +    Map<Integer, String> serverAddress = new HashMap<>(5);\n    +\n    +    private String generateNewQuorumConfig(int serverCount) {\n    +        StringBuilder sb = new StringBuilder();\n    +        String server;\n    +        for (int i = 0; i < serverCount; i++) {\n    +            clientPorts.put(i, PortAssignment.unique());\n    +            server = \"server.\" + i + \"=localhost:\" + PortAssignment.unique()\n    +                    + \":\" + PortAssignment.unique() + \":participant;localhost:\"\n    +                    + clientPorts.get(i);\n    +            serverAddress.put(i, server);\n    +            sb.append(server + \"\\n\");\n    +        }\n    +        return sb.toString();\n    +    }\n    +\n    +    private String updateExistingQuorumConfig(List<Integer> sidsToAdd, List<Integer> sidsToRemove) {\n    +        StringBuilder sb = new StringBuilder();\n    +        for (Integer sid : sidsToAdd) {\n    +            clientPorts.put(sid, PortAssignment.unique());\n    +            serverAddress.put(sid, \"server.\" + sid + \"=localhost:\" + PortAssignment.unique()\n    +                    + \":\" + PortAssignment.unique() + \":participant;localhost:\"\n    +                    + clientPorts.get(sid));\n    +        }\n    +\n    +        for (Integer sid : sidsToRemove) {\n    +            clientPorts.remove(sid);\n    +            serverAddress.remove(sid);\n    +        }\n    +\n    +        for (String server : serverAddress.values()) {\n    +            sb.append(server + \"\\n\");\n    +        }\n    +\n    +        return sb.toString();\n    +    }\n    +\n    +    @Test(timeout = 60000)\n    +    // Verify no zoo.cfg.dynamic and zoo.cfg.bak files existing locally\n    +    // when reconfig feature flag is off by default.\n    +    public void testNoLocalDynamicConfigAndBackupFiles()\n    +            throws InterruptedException, IOException {\n    +        int serverCount = 3;\n    +        String config = generateNewQuorumConfig(serverCount);\n    +        QuorumPeerTestBase.MainThread mt[] = new QuorumPeerTestBase.MainThread[serverCount];\n    +        String[] staticFileContent = new String[serverCount];\n    +\n    +        for (int i = 0; i < serverCount; i++) {\n    +            mt[i] = new QuorumPeerTestBase.MainThread(i, clientPorts.get(i),\n    +                    config, false);\n    +            mt[i].start();\n    +        }\n    +\n    +        for (int i = 0; i < serverCount; i++) {\n    +            Assert.assertTrue(\"waiting for server \" + i + \" being up\",\n    +                    ClientBase.waitForServerUp(\"127.0.0.1:\" + clientPorts.get(i),\n    +                            CONNECTION_TIMEOUT));\n    +            Assert.assertNull(\"static file backup (zoo.cfg.bak) shouldn't exist!\",\n    +                    mt[i].getFileByName(backupFileName));\n    +            Assert.assertNull(\"dynamic configuration file (zoo.cfg.dynamic.*) shouldn't exist!\",\n    +                    mt[i].getFileByName(mt[i].getQuorumPeer().getNextDynamicConfigFilename()));\n    +            staticFileContent[i] = Files.readAllLines(mt[i].confFile.toPath(), StandardCharsets.UTF_8).toString();\n    +            Assert.assertTrue(\"static config file should contain server entry \" + serverAddress.get(i),\n    +                    staticFileContent[i].contains(serverAddress.get(i)));\n    +        }\n    +\n    +        for (int i = 0; i < serverCount; i++) {\n    +            mt[i].shutdown();\n    +        }\n    +    }\n    +\n    +    @Test(timeout = 60000)\n    +    // This test simulate the usual rolling restart with no membership change:\n    +    // 1. A node is shutdown first (e.g. to upgrade software, or hardware, or cleanup local data.).\n    +    // 2. After upgrade, start the node.\n    +    // 3. Do this for every node, one at a time.\n    +    public void testRollingRestartWithoutMembershipChange()\n    +            throws IOException, InterruptedException, KeeperException {\n    +        int serverCount = 3;\n    +        String config = generateNewQuorumConfig(serverCount);\n    +        QuorumPeerTestBase.MainThread mt[] = new QuorumPeerTestBase.MainThread[serverCount];\n    +        for (int i = 0; i < serverCount; ++i) {\n    +            mt[i] = new QuorumPeerTestBase.MainThread(i, clientPorts.get(i),\n    +                    config, false);\n    +            mt[i].start();\n    +        }\n    +\n    +        for (int i = 0; i < serverCount; ++i) {\n    +            Assert.assertTrue(\"waiting for server \" + i + \" being up\",\n    +                    ClientBase.waitForServerUp(\"127.0.0.1:\" + clientPorts.get(i),\n    +                            CONNECTION_TIMEOUT));\n    +        }\n    +\n    +        for (int i = 0; i < serverCount; ++i) {\n    +            mt[i].shutdown();\n    +            mt[i].start();\n    +            verifyQuorum(i);\n    +            verifyConfig(mt[i]);\n    +        }\n    +\n    +        for (int i = 0; i < serverCount; i++) {\n    +            mt[i].shutdown();\n    +        }\n    +    }\n    +\n    +    @Test(timeout = 90000)\n    +    // This test simulate the use case of change of membership through rolling\n    +    // restart. For a 3 node ensemble we expand it to a 5 node ensemble, verify\n    +    // during the process each node has the expected configuration setting pushed\n    +    // via updating local zoo.cfg file.\n    +    public void testRollingRestartWithMembershipChange()\n    +            throws IOException, InterruptedException, KeeperException {\n    +        int serverCount = 3;\n    +        String config = generateNewQuorumConfig(serverCount);\n    +        QuorumPeerTestBase.MainThread mt[] = new QuorumPeerTestBase.MainThread[serverCount];\n    +        for (int i = 0; i < serverCount; ++i) {\n    +            mt[i] = new QuorumPeerTestBase.MainThread(i, clientPorts.get(i),\n    +                    config, false);\n    +            mt[i].start();\n    +        }\n    +\n    +        for (int i = 0; i < serverCount; ++i) {\n    +            Assert.assertTrue(\"waiting for server \" + i + \" being up\",\n    +                    ClientBase.waitForServerUp(\"127.0.0.1:\" + clientPorts.get(i),\n    +                            CONNECTION_TIMEOUT));\n    +        }\n    +\n    +        for (int i = 0; i < serverCount; ++i) {\n    +            verifyQuorum(i);\n    +            verifyConfig(mt[i]);\n    +        }\n    +\n    +        Map<Integer, String> oldServerAddress = new HashMap<>(serverAddress);\n    +        config = updateExistingQuorumConfig(Arrays.asList(3, 4), new ArrayList<Integer>());\n    +        serverCount = serverAddress.size();\n    +        Assert.assertEquals(\"Server count should be 5 after config update.\", serverCount, 5);\n    +\n    +        mt = Arrays.copyOf(mt, mt.length + 2);\n    +        for (int i = 3; i < 5; ++i) {\n    +            mt[i] = new QuorumPeerTestBase.MainThread(i, clientPorts.get(i),\n    +                    config, false);\n    +            mt[i].start();\n    +            Assert.assertTrue(\"waiting for server \" + i + \" being up\",\n    +                    ClientBase.waitForServerUp(\"127.0.0.1:\" + clientPorts.get(i),\n    +                            CONNECTION_TIMEOUT));\n    +            verifyConfig(mt[i]);\n    +            verifyQuorum(i);\n    +        }\n    +\n    +        Set<String> expectedConfigs = new HashSet<>();\n    +        for (String conf : oldServerAddress.values()) {\n    +            // Remove \"server.x=\" prefix.\n    +            expectedConfigs.add(conf.substring(9));\n    +        }\n    +\n    +        for (int i = 0; i < 3; ++i) {\n    +            verifyConfig(mt[i], expectedConfigs);\n    +        }\n    +\n    +        for (int i = 0; i < serverCount; ++i) {\n    +            mt[i].shutdown();\n    +        }\n    +    }\n    +\n    +    // A successful write operation indicates a quorum is up.\n    +    private void verifyQuorum(int sid)\n    +            throws IOException, InterruptedException, KeeperException {\n    +        ZooKeeper zk = new ZooKeeper(\"127.0.0.1:\" + clientPorts.get(sid),\n    +                ClientBase.CONNECTION_TIMEOUT, new Watcher() {\n    +            public void process(WatchedEvent event) {\n    +            }});\n    +\n    +        for (int j = 0; j < 30; j++) {\n    +            try {\n    +                zk.create(\"/\" + Integer.toString(sid) + \".\" + Math.random(),\n    +                        \"foobar\".getBytes(),\n    +                        ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n    +                break;\n    +            } catch (KeeperException.ConnectionLossException e) {\n    +                if (j < 29) {\n    +                    Thread.sleep(1000);\n    +                } else {\n    +                    Assert.fail(\"client could not connect to reestablished quorum: \" +\n    +                            \"giving up after 30+ seconds.\");\n    +                }\n    +            }\n    +        }\n    +    }\n    +\n    +    private void verifyConfig(QuorumPeerTestBase.MainThread mt) {\n    +        Set<String> expectedConfigs = new HashSet<>();\n    +        for (String config : serverAddress.values()) {\n    +            // Remove \"server.x=\" prefix.\n    +            expectedConfigs.add(config.substring(9));\n    --- End diff --\n    \n    this seems fragile (works only for single digit ids, perhaps use the index of \"=\"\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-06-30T20:51:35.389+0000","updated":"2017-06-30T20:51:35.389+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13082163/comment/16070708","id":"16070708","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user shralex commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/292#discussion_r125126799\n  \n    --- Diff: src/java/test/org/apache/zookeeper/server/quorum/ReconfigRollingRestartCompatibilityTest.java ---\n    @@ -0,0 +1,275 @@\n    +/**\n    + * Licensed to the Apache Software Foundation (ASF) under one\n    + * or more contributor license agreements.  See the NOTICE file\n    + * distributed with this work for additional information\n    + * regarding copyright ownership.  The ASF licenses this file\n    + * to you under the Apache License, Version 2.0 (the\n    + * \"License\"); you may not use this file except in compliance\n    + * with the License.  You may obtain a copy of the License at\n    + *\n    + *     http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +\n    +package org.apache.zookeeper.server.quorum;\n    +\n    +import java.io.IOException;\n    +import java.nio.charset.StandardCharsets;\n    +import java.nio.file.Files;\n    +import java.util.Arrays;\n    +import java.util.Map;\n    +import java.util.Set;\n    +import java.util.List;\n    +import java.util.HashMap;\n    +import java.util.HashSet;\n    +import java.util.ArrayList;\n    +\n    +import org.apache.zookeeper.WatchedEvent;\n    +import org.apache.zookeeper.ZooKeeper;\n    +import org.apache.zookeeper.CreateMode;\n    +import org.apache.zookeeper.ZooDefs;\n    +import org.apache.zookeeper.PortAssignment;\n    +import org.apache.zookeeper.KeeperException;\n    +import org.apache.zookeeper.Watcher;\n    +import org.apache.zookeeper.test.ClientBase;\n    +import org.junit.Assert;\n    +import org.junit.Test;\n    +\n    +import static org.apache.zookeeper.test.ClientBase.CONNECTION_TIMEOUT;\n    +\n    +/**\n    + * ReconfigRollingRestartCompatibilityTest - we want to make sure that users\n    + * can continue using the rolling restart approach when reconfig feature is disabled.\n    + * It is important to stay compatible with rolling restart because dynamic reconfig\n    + * has its limitation: it requires a quorum of server to work. When no quorum can be formed,\n    + * rolling restart is the only approach to reconfigure the ensemble (e.g. removing bad nodes\n    + * such that a new quorum with smaller number of nodes can be formed.).\n    + *\n    + * See ZOOKEEPER-2819 for more details.\n    + */\n    +public class ReconfigRollingRestartCompatibilityTest extends QuorumPeerTestBase {\n    +    private static final String backupFileName = \"zoo.cfg.bak\";\n    +\n    +    Map<Integer, Integer> clientPorts = new HashMap<>(5);\n    +    Map<Integer, String> serverAddress = new HashMap<>(5);\n    +\n    +    private String generateNewQuorumConfig(int serverCount) {\n    +        StringBuilder sb = new StringBuilder();\n    +        String server;\n    +        for (int i = 0; i < serverCount; i++) {\n    +            clientPorts.put(i, PortAssignment.unique());\n    +            server = \"server.\" + i + \"=localhost:\" + PortAssignment.unique()\n    +                    + \":\" + PortAssignment.unique() + \":participant;localhost:\"\n    +                    + clientPorts.get(i);\n    +            serverAddress.put(i, server);\n    +            sb.append(server + \"\\n\");\n    +        }\n    +        return sb.toString();\n    +    }\n    +\n    +    private String updateExistingQuorumConfig(List<Integer> sidsToAdd, List<Integer> sidsToRemove) {\n    +        StringBuilder sb = new StringBuilder();\n    +        for (Integer sid : sidsToAdd) {\n    +            clientPorts.put(sid, PortAssignment.unique());\n    +            serverAddress.put(sid, \"server.\" + sid + \"=localhost:\" + PortAssignment.unique()\n    +                    + \":\" + PortAssignment.unique() + \":participant;localhost:\"\n    +                    + clientPorts.get(sid));\n    +        }\n    +\n    +        for (Integer sid : sidsToRemove) {\n    +            clientPorts.remove(sid);\n    +            serverAddress.remove(sid);\n    +        }\n    +\n    +        for (String server : serverAddress.values()) {\n    +            sb.append(server + \"\\n\");\n    +        }\n    +\n    +        return sb.toString();\n    +    }\n    +\n    +    @Test(timeout = 60000)\n    +    // Verify no zoo.cfg.dynamic and zoo.cfg.bak files existing locally\n    +    // when reconfig feature flag is off by default.\n    +    public void testNoLocalDynamicConfigAndBackupFiles()\n    +            throws InterruptedException, IOException {\n    +        int serverCount = 3;\n    +        String config = generateNewQuorumConfig(serverCount);\n    +        QuorumPeerTestBase.MainThread mt[] = new QuorumPeerTestBase.MainThread[serverCount];\n    +        String[] staticFileContent = new String[serverCount];\n    +\n    +        for (int i = 0; i < serverCount; i++) {\n    +            mt[i] = new QuorumPeerTestBase.MainThread(i, clientPorts.get(i),\n    +                    config, false);\n    +            mt[i].start();\n    +        }\n    +\n    +        for (int i = 0; i < serverCount; i++) {\n    +            Assert.assertTrue(\"waiting for server \" + i + \" being up\",\n    +                    ClientBase.waitForServerUp(\"127.0.0.1:\" + clientPorts.get(i),\n    +                            CONNECTION_TIMEOUT));\n    +            Assert.assertNull(\"static file backup (zoo.cfg.bak) shouldn't exist!\",\n    +                    mt[i].getFileByName(backupFileName));\n    +            Assert.assertNull(\"dynamic configuration file (zoo.cfg.dynamic.*) shouldn't exist!\",\n    +                    mt[i].getFileByName(mt[i].getQuorumPeer().getNextDynamicConfigFilename()));\n    +            staticFileContent[i] = Files.readAllLines(mt[i].confFile.toPath(), StandardCharsets.UTF_8).toString();\n    +            Assert.assertTrue(\"static config file should contain server entry \" + serverAddress.get(i),\n    +                    staticFileContent[i].contains(serverAddress.get(i)));\n    +        }\n    +\n    +        for (int i = 0; i < serverCount; i++) {\n    +            mt[i].shutdown();\n    +        }\n    +    }\n    +\n    +    @Test(timeout = 60000)\n    +    // This test simulate the usual rolling restart with no membership change:\n    +    // 1. A node is shutdown first (e.g. to upgrade software, or hardware, or cleanup local data.).\n    +    // 2. After upgrade, start the node.\n    +    // 3. Do this for every node, one at a time.\n    +    public void testRollingRestartWithoutMembershipChange()\n    +            throws IOException, InterruptedException, KeeperException {\n    +        int serverCount = 3;\n    +        String config = generateNewQuorumConfig(serverCount);\n    +        QuorumPeerTestBase.MainThread mt[] = new QuorumPeerTestBase.MainThread[serverCount];\n    +        for (int i = 0; i < serverCount; ++i) {\n    +            mt[i] = new QuorumPeerTestBase.MainThread(i, clientPorts.get(i),\n    +                    config, false);\n    +            mt[i].start();\n    +        }\n    +\n    +        for (int i = 0; i < serverCount; ++i) {\n    +            Assert.assertTrue(\"waiting for server \" + i + \" being up\",\n    +                    ClientBase.waitForServerUp(\"127.0.0.1:\" + clientPorts.get(i),\n    +                            CONNECTION_TIMEOUT));\n    +        }\n    +\n    +        for (int i = 0; i < serverCount; ++i) {\n    +            mt[i].shutdown();\n    +            mt[i].start();\n    +            verifyQuorum(i);\n    +            verifyConfig(mt[i]);\n    +        }\n    +\n    +        for (int i = 0; i < serverCount; i++) {\n    +            mt[i].shutdown();\n    +        }\n    +    }\n    +\n    +    @Test(timeout = 90000)\n    +    // This test simulate the use case of change of membership through rolling\n    +    // restart. For a 3 node ensemble we expand it to a 5 node ensemble, verify\n    +    // during the process each node has the expected configuration setting pushed\n    +    // via updating local zoo.cfg file.\n    +    public void testRollingRestartWithMembershipChange()\n    +            throws IOException, InterruptedException, KeeperException {\n    +        int serverCount = 3;\n    +        String config = generateNewQuorumConfig(serverCount);\n    +        QuorumPeerTestBase.MainThread mt[] = new QuorumPeerTestBase.MainThread[serverCount];\n    +        for (int i = 0; i < serverCount; ++i) {\n    +            mt[i] = new QuorumPeerTestBase.MainThread(i, clientPorts.get(i),\n    +                    config, false);\n    +            mt[i].start();\n    +        }\n    +\n    +        for (int i = 0; i < serverCount; ++i) {\n    +            Assert.assertTrue(\"waiting for server \" + i + \" being up\",\n    +                    ClientBase.waitForServerUp(\"127.0.0.1:\" + clientPorts.get(i),\n    +                            CONNECTION_TIMEOUT));\n    +        }\n    +\n    +        for (int i = 0; i < serverCount; ++i) {\n    +            verifyQuorum(i);\n    +            verifyConfig(mt[i]);\n    +        }\n    +\n    +        Map<Integer, String> oldServerAddress = new HashMap<>(serverAddress);\n    +        config = updateExistingQuorumConfig(Arrays.asList(3, 4), new ArrayList<Integer>());\n    +        serverCount = serverAddress.size();\n    +        Assert.assertEquals(\"Server count should be 5 after config update.\", serverCount, 5);\n    +\n    +        mt = Arrays.copyOf(mt, mt.length + 2);\n    +        for (int i = 3; i < 5; ++i) {\n    +            mt[i] = new QuorumPeerTestBase.MainThread(i, clientPorts.get(i),\n    +                    config, false);\n    +            mt[i].start();\n    +            Assert.assertTrue(\"waiting for server \" + i + \" being up\",\n    +                    ClientBase.waitForServerUp(\"127.0.0.1:\" + clientPorts.get(i),\n    +                            CONNECTION_TIMEOUT));\n    +            verifyConfig(mt[i]);\n    +            verifyQuorum(i);\n    +        }\n    +\n    +        Set<String> expectedConfigs = new HashSet<>();\n    +        for (String conf : oldServerAddress.values()) {\n    +            // Remove \"server.x=\" prefix.\n    +            expectedConfigs.add(conf.substring(9));\n    --- End diff --\n    \n    same comment - using 9 seems fragile. Also perhaps create a method for this since this code appears twice\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-06-30T20:51:35.623+0000","updated":"2017-06-30T20:51:35.623+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13082163/comment/16070709","id":"16070709","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user shralex commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/292#discussion_r125125684\n  \n    --- Diff: src/java/test/org/apache/zookeeper/server/quorum/ReconfigRollingRestartCompatibilityTest.java ---\n    @@ -0,0 +1,275 @@\n    +/**\n    + * Licensed to the Apache Software Foundation (ASF) under one\n    + * or more contributor license agreements.  See the NOTICE file\n    + * distributed with this work for additional information\n    + * regarding copyright ownership.  The ASF licenses this file\n    + * to you under the Apache License, Version 2.0 (the\n    + * \"License\"); you may not use this file except in compliance\n    + * with the License.  You may obtain a copy of the License at\n    + *\n    + *     http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +\n    +package org.apache.zookeeper.server.quorum;\n    +\n    +import java.io.IOException;\n    +import java.nio.charset.StandardCharsets;\n    +import java.nio.file.Files;\n    +import java.util.Arrays;\n    +import java.util.Map;\n    +import java.util.Set;\n    +import java.util.List;\n    +import java.util.HashMap;\n    +import java.util.HashSet;\n    +import java.util.ArrayList;\n    +\n    +import org.apache.zookeeper.WatchedEvent;\n    +import org.apache.zookeeper.ZooKeeper;\n    +import org.apache.zookeeper.CreateMode;\n    +import org.apache.zookeeper.ZooDefs;\n    +import org.apache.zookeeper.PortAssignment;\n    +import org.apache.zookeeper.KeeperException;\n    +import org.apache.zookeeper.Watcher;\n    +import org.apache.zookeeper.test.ClientBase;\n    +import org.junit.Assert;\n    +import org.junit.Test;\n    +\n    +import static org.apache.zookeeper.test.ClientBase.CONNECTION_TIMEOUT;\n    +\n    +/**\n    + * ReconfigRollingRestartCompatibilityTest - we want to make sure that users\n    + * can continue using the rolling restart approach when reconfig feature is disabled.\n    + * It is important to stay compatible with rolling restart because dynamic reconfig\n    + * has its limitation: it requires a quorum of server to work. When no quorum can be formed,\n    + * rolling restart is the only approach to reconfigure the ensemble (e.g. removing bad nodes\n    + * such that a new quorum with smaller number of nodes can be formed.).\n    + *\n    + * See ZOOKEEPER-2819 for more details.\n    + */\n    +public class ReconfigRollingRestartCompatibilityTest extends QuorumPeerTestBase {\n    +    private static final String backupFileName = \"zoo.cfg.bak\";\n    +\n    +    Map<Integer, Integer> clientPorts = new HashMap<>(5);\n    +    Map<Integer, String> serverAddress = new HashMap<>(5);\n    +\n    +    private String generateNewQuorumConfig(int serverCount) {\n    +        StringBuilder sb = new StringBuilder();\n    +        String server;\n    +        for (int i = 0; i < serverCount; i++) {\n    +            clientPorts.put(i, PortAssignment.unique());\n    +            server = \"server.\" + i + \"=localhost:\" + PortAssignment.unique()\n    +                    + \":\" + PortAssignment.unique() + \":participant;localhost:\"\n    +                    + clientPorts.get(i);\n    +            serverAddress.put(i, server);\n    +            sb.append(server + \"\\n\");\n    +        }\n    +        return sb.toString();\n    +    }\n    +\n    +    private String updateExistingQuorumConfig(List<Integer> sidsToAdd, List<Integer> sidsToRemove) {\n    +        StringBuilder sb = new StringBuilder();\n    +        for (Integer sid : sidsToAdd) {\n    +            clientPorts.put(sid, PortAssignment.unique());\n    +            serverAddress.put(sid, \"server.\" + sid + \"=localhost:\" + PortAssignment.unique()\n    +                    + \":\" + PortAssignment.unique() + \":participant;localhost:\"\n    +                    + clientPorts.get(sid));\n    +        }\n    +\n    +        for (Integer sid : sidsToRemove) {\n    +            clientPorts.remove(sid);\n    +            serverAddress.remove(sid);\n    +        }\n    +\n    +        for (String server : serverAddress.values()) {\n    +            sb.append(server + \"\\n\");\n    +        }\n    +\n    +        return sb.toString();\n    +    }\n    +\n    +    @Test(timeout = 60000)\n    +    // Verify no zoo.cfg.dynamic and zoo.cfg.bak files existing locally\n    +    // when reconfig feature flag is off by default.\n    +    public void testNoLocalDynamicConfigAndBackupFiles()\n    +            throws InterruptedException, IOException {\n    +        int serverCount = 3;\n    +        String config = generateNewQuorumConfig(serverCount);\n    +        QuorumPeerTestBase.MainThread mt[] = new QuorumPeerTestBase.MainThread[serverCount];\n    +        String[] staticFileContent = new String[serverCount];\n    +\n    +        for (int i = 0; i < serverCount; i++) {\n    +            mt[i] = new QuorumPeerTestBase.MainThread(i, clientPorts.get(i),\n    +                    config, false);\n    +            mt[i].start();\n    +        }\n    +\n    +        for (int i = 0; i < serverCount; i++) {\n    +            Assert.assertTrue(\"waiting for server \" + i + \" being up\",\n    +                    ClientBase.waitForServerUp(\"127.0.0.1:\" + clientPorts.get(i),\n    +                            CONNECTION_TIMEOUT));\n    +            Assert.assertNull(\"static file backup (zoo.cfg.bak) shouldn't exist!\",\n    +                    mt[i].getFileByName(backupFileName));\n    +            Assert.assertNull(\"dynamic configuration file (zoo.cfg.dynamic.*) shouldn't exist!\",\n    +                    mt[i].getFileByName(mt[i].getQuorumPeer().getNextDynamicConfigFilename()));\n    +            staticFileContent[i] = Files.readAllLines(mt[i].confFile.toPath(), StandardCharsets.UTF_8).toString();\n    +            Assert.assertTrue(\"static config file should contain server entry \" + serverAddress.get(i),\n    +                    staticFileContent[i].contains(serverAddress.get(i)));\n    +        }\n    +\n    +        for (int i = 0; i < serverCount; i++) {\n    +            mt[i].shutdown();\n    +        }\n    +    }\n    +\n    +    @Test(timeout = 60000)\n    +    // This test simulate the usual rolling restart with no membership change:\n    +    // 1. A node is shutdown first (e.g. to upgrade software, or hardware, or cleanup local data.).\n    +    // 2. After upgrade, start the node.\n    +    // 3. Do this for every node, one at a time.\n    +    public void testRollingRestartWithoutMembershipChange()\n    +            throws IOException, InterruptedException, KeeperException {\n    +        int serverCount = 3;\n    +        String config = generateNewQuorumConfig(serverCount);\n    +        QuorumPeerTestBase.MainThread mt[] = new QuorumPeerTestBase.MainThread[serverCount];\n    +        for (int i = 0; i < serverCount; ++i) {\n    +            mt[i] = new QuorumPeerTestBase.MainThread(i, clientPorts.get(i),\n    +                    config, false);\n    +            mt[i].start();\n    +        }\n    +\n    +        for (int i = 0; i < serverCount; ++i) {\n    +            Assert.assertTrue(\"waiting for server \" + i + \" being up\",\n    +                    ClientBase.waitForServerUp(\"127.0.0.1:\" + clientPorts.get(i),\n    +                            CONNECTION_TIMEOUT));\n    +        }\n    +\n    +        for (int i = 0; i < serverCount; ++i) {\n    +            mt[i].shutdown();\n    +            mt[i].start();\n    +            verifyQuorum(i);\n    --- End diff --\n    \n    two comments:\n    1. is calling start immediately after shutdown effective ? I don't remember what shutdown is doing, but if its setting a flag and a thread periodically checks it, it may take time to take effect.\n    2. nothing is changing about the config as far as I can see. Why would this ever fail ? \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-06-30T20:51:35.638+0000","updated":"2017-06-30T20:51:35.638+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13082163/comment/16070728","id":"16070728","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user hanm commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/292#discussion_r125130820\n  \n    --- Diff: src/java/test/org/apache/zookeeper/server/quorum/ReconfigRecoveryTest.java ---\n    @@ -28,9 +28,15 @@\n     import org.apache.zookeeper.test.ClientBase;\n     import org.apache.zookeeper.test.ReconfigTest;\n     import org.junit.Assert;\n    +import org.junit.Before;\n     import org.junit.Test;\n     \n     public class ReconfigRecoveryTest extends QuorumPeerTestBase {\n    +    @Before\n    +    public void setup() {\n    +        QuorumPeerConfig.setReconfigEnabled(true);\n    --- End diff --\n    \n    Yes if those tests require reconfig feature being enabled. I think I've patched all reconfig test in ZOOKEEPER-2014, and the modifications of related tests here are all about refactoring and consolidating setting of the flag in a single place.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-06-30T21:09:20.857+0000","updated":"2017-06-30T21:09:20.857+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13082163/comment/16070736","id":"16070736","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user hanm commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/292#discussion_r125131915\n  \n    --- Diff: src/java/test/org/apache/zookeeper/server/quorum/ReconfigRollingRestartCompatibilityTest.java ---\n    @@ -0,0 +1,275 @@\n    +/**\n    + * Licensed to the Apache Software Foundation (ASF) under one\n    + * or more contributor license agreements.  See the NOTICE file\n    + * distributed with this work for additional information\n    + * regarding copyright ownership.  The ASF licenses this file\n    + * to you under the Apache License, Version 2.0 (the\n    + * \"License\"); you may not use this file except in compliance\n    + * with the License.  You may obtain a copy of the License at\n    + *\n    + *     http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +\n    +package org.apache.zookeeper.server.quorum;\n    +\n    +import java.io.IOException;\n    +import java.nio.charset.StandardCharsets;\n    +import java.nio.file.Files;\n    +import java.util.Arrays;\n    +import java.util.Map;\n    +import java.util.Set;\n    +import java.util.List;\n    +import java.util.HashMap;\n    +import java.util.HashSet;\n    +import java.util.ArrayList;\n    +\n    +import org.apache.zookeeper.WatchedEvent;\n    +import org.apache.zookeeper.ZooKeeper;\n    +import org.apache.zookeeper.CreateMode;\n    +import org.apache.zookeeper.ZooDefs;\n    +import org.apache.zookeeper.PortAssignment;\n    +import org.apache.zookeeper.KeeperException;\n    +import org.apache.zookeeper.Watcher;\n    +import org.apache.zookeeper.test.ClientBase;\n    +import org.junit.Assert;\n    +import org.junit.Test;\n    +\n    +import static org.apache.zookeeper.test.ClientBase.CONNECTION_TIMEOUT;\n    +\n    +/**\n    + * ReconfigRollingRestartCompatibilityTest - we want to make sure that users\n    + * can continue using the rolling restart approach when reconfig feature is disabled.\n    + * It is important to stay compatible with rolling restart because dynamic reconfig\n    + * has its limitation: it requires a quorum of server to work. When no quorum can be formed,\n    + * rolling restart is the only approach to reconfigure the ensemble (e.g. removing bad nodes\n    + * such that a new quorum with smaller number of nodes can be formed.).\n    + *\n    + * See ZOOKEEPER-2819 for more details.\n    + */\n    +public class ReconfigRollingRestartCompatibilityTest extends QuorumPeerTestBase {\n    +    private static final String backupFileName = \"zoo.cfg.bak\";\n    +\n    +    Map<Integer, Integer> clientPorts = new HashMap<>(5);\n    +    Map<Integer, String> serverAddress = new HashMap<>(5);\n    +\n    +    private String generateNewQuorumConfig(int serverCount) {\n    +        StringBuilder sb = new StringBuilder();\n    +        String server;\n    +        for (int i = 0; i < serverCount; i++) {\n    +            clientPorts.put(i, PortAssignment.unique());\n    +            server = \"server.\" + i + \"=localhost:\" + PortAssignment.unique()\n    +                    + \":\" + PortAssignment.unique() + \":participant;localhost:\"\n    +                    + clientPorts.get(i);\n    +            serverAddress.put(i, server);\n    +            sb.append(server + \"\\n\");\n    +        }\n    +        return sb.toString();\n    +    }\n    +\n    +    private String updateExistingQuorumConfig(List<Integer> sidsToAdd, List<Integer> sidsToRemove) {\n    +        StringBuilder sb = new StringBuilder();\n    +        for (Integer sid : sidsToAdd) {\n    +            clientPorts.put(sid, PortAssignment.unique());\n    +            serverAddress.put(sid, \"server.\" + sid + \"=localhost:\" + PortAssignment.unique()\n    +                    + \":\" + PortAssignment.unique() + \":participant;localhost:\"\n    +                    + clientPorts.get(sid));\n    +        }\n    +\n    +        for (Integer sid : sidsToRemove) {\n    +            clientPorts.remove(sid);\n    +            serverAddress.remove(sid);\n    +        }\n    +\n    +        for (String server : serverAddress.values()) {\n    +            sb.append(server + \"\\n\");\n    +        }\n    +\n    +        return sb.toString();\n    +    }\n    +\n    +    @Test(timeout = 60000)\n    +    // Verify no zoo.cfg.dynamic and zoo.cfg.bak files existing locally\n    +    // when reconfig feature flag is off by default.\n    +    public void testNoLocalDynamicConfigAndBackupFiles()\n    +            throws InterruptedException, IOException {\n    +        int serverCount = 3;\n    +        String config = generateNewQuorumConfig(serverCount);\n    +        QuorumPeerTestBase.MainThread mt[] = new QuorumPeerTestBase.MainThread[serverCount];\n    +        String[] staticFileContent = new String[serverCount];\n    +\n    +        for (int i = 0; i < serverCount; i++) {\n    +            mt[i] = new QuorumPeerTestBase.MainThread(i, clientPorts.get(i),\n    +                    config, false);\n    +            mt[i].start();\n    +        }\n    +\n    +        for (int i = 0; i < serverCount; i++) {\n    +            Assert.assertTrue(\"waiting for server \" + i + \" being up\",\n    +                    ClientBase.waitForServerUp(\"127.0.0.1:\" + clientPorts.get(i),\n    +                            CONNECTION_TIMEOUT));\n    +            Assert.assertNull(\"static file backup (zoo.cfg.bak) shouldn't exist!\",\n    +                    mt[i].getFileByName(backupFileName));\n    +            Assert.assertNull(\"dynamic configuration file (zoo.cfg.dynamic.*) shouldn't exist!\",\n    +                    mt[i].getFileByName(mt[i].getQuorumPeer().getNextDynamicConfigFilename()));\n    +            staticFileContent[i] = Files.readAllLines(mt[i].confFile.toPath(), StandardCharsets.UTF_8).toString();\n    +            Assert.assertTrue(\"static config file should contain server entry \" + serverAddress.get(i),\n    +                    staticFileContent[i].contains(serverAddress.get(i)));\n    +        }\n    +\n    +        for (int i = 0; i < serverCount; i++) {\n    +            mt[i].shutdown();\n    +        }\n    +    }\n    +\n    +    @Test(timeout = 60000)\n    +    // This test simulate the usual rolling restart with no membership change:\n    +    // 1. A node is shutdown first (e.g. to upgrade software, or hardware, or cleanup local data.).\n    +    // 2. After upgrade, start the node.\n    +    // 3. Do this for every node, one at a time.\n    +    public void testRollingRestartWithoutMembershipChange()\n    +            throws IOException, InterruptedException, KeeperException {\n    +        int serverCount = 3;\n    +        String config = generateNewQuorumConfig(serverCount);\n    +        QuorumPeerTestBase.MainThread mt[] = new QuorumPeerTestBase.MainThread[serverCount];\n    +        for (int i = 0; i < serverCount; ++i) {\n    +            mt[i] = new QuorumPeerTestBase.MainThread(i, clientPorts.get(i),\n    +                    config, false);\n    +            mt[i].start();\n    +        }\n    +\n    +        for (int i = 0; i < serverCount; ++i) {\n    +            Assert.assertTrue(\"waiting for server \" + i + \" being up\",\n    +                    ClientBase.waitForServerUp(\"127.0.0.1:\" + clientPorts.get(i),\n    +                            CONNECTION_TIMEOUT));\n    +        }\n    +\n    +        for (int i = 0; i < serverCount; ++i) {\n    +            mt[i].shutdown();\n    +            mt[i].start();\n    +            verifyQuorum(i);\n    --- End diff --\n    \n    for 1 - for this specific case this is fine, because this test case does not change setting of the reconfig flag (from false to true or vice versa) so there is no concern on that end. shutdown is synchronous so once shutdown finishes, it's safe to call start. \n    \n    I think your concern was around the visibility of a shared variable among multiple threads (in this case, reconfigEnabled). Adding volatile should address the concern (also a new test case specifically to test the visibility of the variable is required.). I will do this as part of sub-task ZOOKEEPER-2828.\n    \n    For 2, yes as the test name implies, no config changes here. I guess I can remove the config verify part here though leave it there for insurance seems ok too.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-06-30T21:16:35.441+0000","updated":"2017-06-30T21:16:35.441+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13082163/comment/16070738","id":"16070738","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=shralex","name":"shralex","key":"shralex","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Alexander Shraer","active":true,"timeZone":"America/Los_Angeles"},"body":"The reason I'm asking about getConfig, is that I suspect it won't work properly with manual reconfiguration. \nIt may return information that is wrong, e.g., reflect the 3 nodes even when you added 2 more nodes in your tests (when queried on the added nodes)\nor different information at different nodes\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=shralex","name":"shralex","key":"shralex","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Alexander Shraer","active":true,"timeZone":"America/Los_Angeles"},"created":"2017-06-30T21:17:47.871+0000","updated":"2017-06-30T21:17:47.871+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13082163/comment/16070739","id":"16070739","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user hanm commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/292#discussion_r125132133\n  \n    --- Diff: src/java/test/org/apache/zookeeper/server/quorum/ReconfigRollingRestartCompatibilityTest.java ---\n    @@ -0,0 +1,275 @@\n    +/**\n    + * Licensed to the Apache Software Foundation (ASF) under one\n    + * or more contributor license agreements.  See the NOTICE file\n    + * distributed with this work for additional information\n    + * regarding copyright ownership.  The ASF licenses this file\n    + * to you under the Apache License, Version 2.0 (the\n    + * \"License\"); you may not use this file except in compliance\n    + * with the License.  You may obtain a copy of the License at\n    + *\n    + *     http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +\n    +package org.apache.zookeeper.server.quorum;\n    +\n    +import java.io.IOException;\n    +import java.nio.charset.StandardCharsets;\n    +import java.nio.file.Files;\n    +import java.util.Arrays;\n    +import java.util.Map;\n    +import java.util.Set;\n    +import java.util.List;\n    +import java.util.HashMap;\n    +import java.util.HashSet;\n    +import java.util.ArrayList;\n    +\n    +import org.apache.zookeeper.WatchedEvent;\n    +import org.apache.zookeeper.ZooKeeper;\n    +import org.apache.zookeeper.CreateMode;\n    +import org.apache.zookeeper.ZooDefs;\n    +import org.apache.zookeeper.PortAssignment;\n    +import org.apache.zookeeper.KeeperException;\n    +import org.apache.zookeeper.Watcher;\n    +import org.apache.zookeeper.test.ClientBase;\n    +import org.junit.Assert;\n    +import org.junit.Test;\n    +\n    +import static org.apache.zookeeper.test.ClientBase.CONNECTION_TIMEOUT;\n    +\n    +/**\n    + * ReconfigRollingRestartCompatibilityTest - we want to make sure that users\n    + * can continue using the rolling restart approach when reconfig feature is disabled.\n    + * It is important to stay compatible with rolling restart because dynamic reconfig\n    + * has its limitation: it requires a quorum of server to work. When no quorum can be formed,\n    + * rolling restart is the only approach to reconfigure the ensemble (e.g. removing bad nodes\n    + * such that a new quorum with smaller number of nodes can be formed.).\n    + *\n    + * See ZOOKEEPER-2819 for more details.\n    + */\n    +public class ReconfigRollingRestartCompatibilityTest extends QuorumPeerTestBase {\n    +    private static final String backupFileName = \"zoo.cfg.bak\";\n    +\n    +    Map<Integer, Integer> clientPorts = new HashMap<>(5);\n    +    Map<Integer, String> serverAddress = new HashMap<>(5);\n    +\n    +    private String generateNewQuorumConfig(int serverCount) {\n    +        StringBuilder sb = new StringBuilder();\n    +        String server;\n    +        for (int i = 0; i < serverCount; i++) {\n    +            clientPorts.put(i, PortAssignment.unique());\n    +            server = \"server.\" + i + \"=localhost:\" + PortAssignment.unique()\n    +                    + \":\" + PortAssignment.unique() + \":participant;localhost:\"\n    +                    + clientPorts.get(i);\n    +            serverAddress.put(i, server);\n    +            sb.append(server + \"\\n\");\n    +        }\n    +        return sb.toString();\n    +    }\n    +\n    +    private String updateExistingQuorumConfig(List<Integer> sidsToAdd, List<Integer> sidsToRemove) {\n    +        StringBuilder sb = new StringBuilder();\n    +        for (Integer sid : sidsToAdd) {\n    +            clientPorts.put(sid, PortAssignment.unique());\n    +            serverAddress.put(sid, \"server.\" + sid + \"=localhost:\" + PortAssignment.unique()\n    +                    + \":\" + PortAssignment.unique() + \":participant;localhost:\"\n    +                    + clientPorts.get(sid));\n    +        }\n    +\n    +        for (Integer sid : sidsToRemove) {\n    +            clientPorts.remove(sid);\n    +            serverAddress.remove(sid);\n    +        }\n    +\n    +        for (String server : serverAddress.values()) {\n    +            sb.append(server + \"\\n\");\n    +        }\n    +\n    +        return sb.toString();\n    +    }\n    +\n    +    @Test(timeout = 60000)\n    +    // Verify no zoo.cfg.dynamic and zoo.cfg.bak files existing locally\n    +    // when reconfig feature flag is off by default.\n    +    public void testNoLocalDynamicConfigAndBackupFiles()\n    +            throws InterruptedException, IOException {\n    +        int serverCount = 3;\n    +        String config = generateNewQuorumConfig(serverCount);\n    +        QuorumPeerTestBase.MainThread mt[] = new QuorumPeerTestBase.MainThread[serverCount];\n    +        String[] staticFileContent = new String[serverCount];\n    +\n    +        for (int i = 0; i < serverCount; i++) {\n    +            mt[i] = new QuorumPeerTestBase.MainThread(i, clientPorts.get(i),\n    +                    config, false);\n    +            mt[i].start();\n    +        }\n    +\n    +        for (int i = 0; i < serverCount; i++) {\n    +            Assert.assertTrue(\"waiting for server \" + i + \" being up\",\n    +                    ClientBase.waitForServerUp(\"127.0.0.1:\" + clientPorts.get(i),\n    +                            CONNECTION_TIMEOUT));\n    +            Assert.assertNull(\"static file backup (zoo.cfg.bak) shouldn't exist!\",\n    +                    mt[i].getFileByName(backupFileName));\n    +            Assert.assertNull(\"dynamic configuration file (zoo.cfg.dynamic.*) shouldn't exist!\",\n    +                    mt[i].getFileByName(mt[i].getQuorumPeer().getNextDynamicConfigFilename()));\n    +            staticFileContent[i] = Files.readAllLines(mt[i].confFile.toPath(), StandardCharsets.UTF_8).toString();\n    +            Assert.assertTrue(\"static config file should contain server entry \" + serverAddress.get(i),\n    +                    staticFileContent[i].contains(serverAddress.get(i)));\n    +        }\n    +\n    +        for (int i = 0; i < serverCount; i++) {\n    +            mt[i].shutdown();\n    +        }\n    +    }\n    +\n    +    @Test(timeout = 60000)\n    +    // This test simulate the usual rolling restart with no membership change:\n    +    // 1. A node is shutdown first (e.g. to upgrade software, or hardware, or cleanup local data.).\n    +    // 2. After upgrade, start the node.\n    +    // 3. Do this for every node, one at a time.\n    +    public void testRollingRestartWithoutMembershipChange()\n    +            throws IOException, InterruptedException, KeeperException {\n    +        int serverCount = 3;\n    +        String config = generateNewQuorumConfig(serverCount);\n    +        QuorumPeerTestBase.MainThread mt[] = new QuorumPeerTestBase.MainThread[serverCount];\n    +        for (int i = 0; i < serverCount; ++i) {\n    +            mt[i] = new QuorumPeerTestBase.MainThread(i, clientPorts.get(i),\n    +                    config, false);\n    +            mt[i].start();\n    +        }\n    +\n    +        for (int i = 0; i < serverCount; ++i) {\n    +            Assert.assertTrue(\"waiting for server \" + i + \" being up\",\n    +                    ClientBase.waitForServerUp(\"127.0.0.1:\" + clientPorts.get(i),\n    +                            CONNECTION_TIMEOUT));\n    +        }\n    +\n    +        for (int i = 0; i < serverCount; ++i) {\n    +            mt[i].shutdown();\n    +            mt[i].start();\n    +            verifyQuorum(i);\n    +            verifyConfig(mt[i]);\n    +        }\n    +\n    +        for (int i = 0; i < serverCount; i++) {\n    +            mt[i].shutdown();\n    +        }\n    +    }\n    +\n    +    @Test(timeout = 90000)\n    +    // This test simulate the use case of change of membership through rolling\n    +    // restart. For a 3 node ensemble we expand it to a 5 node ensemble, verify\n    +    // during the process each node has the expected configuration setting pushed\n    +    // via updating local zoo.cfg file.\n    +    public void testRollingRestartWithMembershipChange()\n    +            throws IOException, InterruptedException, KeeperException {\n    +        int serverCount = 3;\n    +        String config = generateNewQuorumConfig(serverCount);\n    +        QuorumPeerTestBase.MainThread mt[] = new QuorumPeerTestBase.MainThread[serverCount];\n    +        for (int i = 0; i < serverCount; ++i) {\n    +            mt[i] = new QuorumPeerTestBase.MainThread(i, clientPorts.get(i),\n    +                    config, false);\n    +            mt[i].start();\n    +        }\n    +\n    +        for (int i = 0; i < serverCount; ++i) {\n    +            Assert.assertTrue(\"waiting for server \" + i + \" being up\",\n    +                    ClientBase.waitForServerUp(\"127.0.0.1:\" + clientPorts.get(i),\n    +                            CONNECTION_TIMEOUT));\n    +        }\n    +\n    +        for (int i = 0; i < serverCount; ++i) {\n    +            verifyQuorum(i);\n    +            verifyConfig(mt[i]);\n    +        }\n    +\n    +        Map<Integer, String> oldServerAddress = new HashMap<>(serverAddress);\n    +        config = updateExistingQuorumConfig(Arrays.asList(3, 4), new ArrayList<Integer>());\n    +        serverCount = serverAddress.size();\n    +        Assert.assertEquals(\"Server count should be 5 after config update.\", serverCount, 5);\n    +\n    +        mt = Arrays.copyOf(mt, mt.length + 2);\n    +        for (int i = 3; i < 5; ++i) {\n    +            mt[i] = new QuorumPeerTestBase.MainThread(i, clientPorts.get(i),\n    +                    config, false);\n    +            mt[i].start();\n    +            Assert.assertTrue(\"waiting for server \" + i + \" being up\",\n    +                    ClientBase.waitForServerUp(\"127.0.0.1:\" + clientPorts.get(i),\n    +                            CONNECTION_TIMEOUT));\n    +            verifyConfig(mt[i]);\n    +            verifyQuorum(i);\n    +        }\n    +\n    +        Set<String> expectedConfigs = new HashSet<>();\n    +        for (String conf : oldServerAddress.values()) {\n    +            // Remove \"server.x=\" prefix.\n    +            expectedConfigs.add(conf.substring(9));\n    +        }\n    +\n    +        for (int i = 0; i < 3; ++i) {\n    +            verifyConfig(mt[i], expectedConfigs);\n    +        }\n    +\n    +        for (int i = 0; i < serverCount; ++i) {\n    +            mt[i].shutdown();\n    +        }\n    +    }\n    +\n    +    // A successful write operation indicates a quorum is up.\n    +    private void verifyQuorum(int sid)\n    --- End diff --\n    \n    I missed testServerHasConfig - I think that should do it. \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-06-30T21:18:13.423+0000","updated":"2017-06-30T21:18:13.423+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13082163/comment/16070740","id":"16070740","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user hanm commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/292#discussion_r125132175\n  \n    --- Diff: src/java/test/org/apache/zookeeper/server/quorum/ReconfigRollingRestartCompatibilityTest.java ---\n    @@ -0,0 +1,275 @@\n    +/**\n    + * Licensed to the Apache Software Foundation (ASF) under one\n    + * or more contributor license agreements.  See the NOTICE file\n    + * distributed with this work for additional information\n    + * regarding copyright ownership.  The ASF licenses this file\n    + * to you under the Apache License, Version 2.0 (the\n    + * \"License\"); you may not use this file except in compliance\n    + * with the License.  You may obtain a copy of the License at\n    + *\n    + *     http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +\n    +package org.apache.zookeeper.server.quorum;\n    +\n    +import java.io.IOException;\n    +import java.nio.charset.StandardCharsets;\n    +import java.nio.file.Files;\n    +import java.util.Arrays;\n    +import java.util.Map;\n    +import java.util.Set;\n    +import java.util.List;\n    +import java.util.HashMap;\n    +import java.util.HashSet;\n    +import java.util.ArrayList;\n    +\n    +import org.apache.zookeeper.WatchedEvent;\n    +import org.apache.zookeeper.ZooKeeper;\n    +import org.apache.zookeeper.CreateMode;\n    +import org.apache.zookeeper.ZooDefs;\n    +import org.apache.zookeeper.PortAssignment;\n    +import org.apache.zookeeper.KeeperException;\n    +import org.apache.zookeeper.Watcher;\n    +import org.apache.zookeeper.test.ClientBase;\n    +import org.junit.Assert;\n    +import org.junit.Test;\n    +\n    +import static org.apache.zookeeper.test.ClientBase.CONNECTION_TIMEOUT;\n    +\n    +/**\n    + * ReconfigRollingRestartCompatibilityTest - we want to make sure that users\n    + * can continue using the rolling restart approach when reconfig feature is disabled.\n    + * It is important to stay compatible with rolling restart because dynamic reconfig\n    + * has its limitation: it requires a quorum of server to work. When no quorum can be formed,\n    + * rolling restart is the only approach to reconfigure the ensemble (e.g. removing bad nodes\n    + * such that a new quorum with smaller number of nodes can be formed.).\n    + *\n    + * See ZOOKEEPER-2819 for more details.\n    + */\n    +public class ReconfigRollingRestartCompatibilityTest extends QuorumPeerTestBase {\n    +    private static final String backupFileName = \"zoo.cfg.bak\";\n    +\n    +    Map<Integer, Integer> clientPorts = new HashMap<>(5);\n    +    Map<Integer, String> serverAddress = new HashMap<>(5);\n    +\n    +    private String generateNewQuorumConfig(int serverCount) {\n    +        StringBuilder sb = new StringBuilder();\n    +        String server;\n    +        for (int i = 0; i < serverCount; i++) {\n    +            clientPorts.put(i, PortAssignment.unique());\n    +            server = \"server.\" + i + \"=localhost:\" + PortAssignment.unique()\n    +                    + \":\" + PortAssignment.unique() + \":participant;localhost:\"\n    +                    + clientPorts.get(i);\n    +            serverAddress.put(i, server);\n    +            sb.append(server + \"\\n\");\n    +        }\n    +        return sb.toString();\n    +    }\n    +\n    +    private String updateExistingQuorumConfig(List<Integer> sidsToAdd, List<Integer> sidsToRemove) {\n    +        StringBuilder sb = new StringBuilder();\n    +        for (Integer sid : sidsToAdd) {\n    +            clientPorts.put(sid, PortAssignment.unique());\n    +            serverAddress.put(sid, \"server.\" + sid + \"=localhost:\" + PortAssignment.unique()\n    +                    + \":\" + PortAssignment.unique() + \":participant;localhost:\"\n    +                    + clientPorts.get(sid));\n    +        }\n    +\n    +        for (Integer sid : sidsToRemove) {\n    +            clientPorts.remove(sid);\n    +            serverAddress.remove(sid);\n    +        }\n    +\n    +        for (String server : serverAddress.values()) {\n    +            sb.append(server + \"\\n\");\n    +        }\n    +\n    +        return sb.toString();\n    +    }\n    +\n    +    @Test(timeout = 60000)\n    +    // Verify no zoo.cfg.dynamic and zoo.cfg.bak files existing locally\n    +    // when reconfig feature flag is off by default.\n    +    public void testNoLocalDynamicConfigAndBackupFiles()\n    +            throws InterruptedException, IOException {\n    +        int serverCount = 3;\n    +        String config = generateNewQuorumConfig(serverCount);\n    +        QuorumPeerTestBase.MainThread mt[] = new QuorumPeerTestBase.MainThread[serverCount];\n    +        String[] staticFileContent = new String[serverCount];\n    +\n    +        for (int i = 0; i < serverCount; i++) {\n    +            mt[i] = new QuorumPeerTestBase.MainThread(i, clientPorts.get(i),\n    +                    config, false);\n    +            mt[i].start();\n    +        }\n    +\n    +        for (int i = 0; i < serverCount; i++) {\n    +            Assert.assertTrue(\"waiting for server \" + i + \" being up\",\n    +                    ClientBase.waitForServerUp(\"127.0.0.1:\" + clientPorts.get(i),\n    +                            CONNECTION_TIMEOUT));\n    +            Assert.assertNull(\"static file backup (zoo.cfg.bak) shouldn't exist!\",\n    +                    mt[i].getFileByName(backupFileName));\n    +            Assert.assertNull(\"dynamic configuration file (zoo.cfg.dynamic.*) shouldn't exist!\",\n    +                    mt[i].getFileByName(mt[i].getQuorumPeer().getNextDynamicConfigFilename()));\n    +            staticFileContent[i] = Files.readAllLines(mt[i].confFile.toPath(), StandardCharsets.UTF_8).toString();\n    +            Assert.assertTrue(\"static config file should contain server entry \" + serverAddress.get(i),\n    +                    staticFileContent[i].contains(serverAddress.get(i)));\n    +        }\n    +\n    +        for (int i = 0; i < serverCount; i++) {\n    +            mt[i].shutdown();\n    +        }\n    +    }\n    +\n    +    @Test(timeout = 60000)\n    +    // This test simulate the usual rolling restart with no membership change:\n    +    // 1. A node is shutdown first (e.g. to upgrade software, or hardware, or cleanup local data.).\n    +    // 2. After upgrade, start the node.\n    +    // 3. Do this for every node, one at a time.\n    +    public void testRollingRestartWithoutMembershipChange()\n    +            throws IOException, InterruptedException, KeeperException {\n    +        int serverCount = 3;\n    +        String config = generateNewQuorumConfig(serverCount);\n    +        QuorumPeerTestBase.MainThread mt[] = new QuorumPeerTestBase.MainThread[serverCount];\n    +        for (int i = 0; i < serverCount; ++i) {\n    +            mt[i] = new QuorumPeerTestBase.MainThread(i, clientPorts.get(i),\n    +                    config, false);\n    +            mt[i].start();\n    +        }\n    +\n    +        for (int i = 0; i < serverCount; ++i) {\n    +            Assert.assertTrue(\"waiting for server \" + i + \" being up\",\n    +                    ClientBase.waitForServerUp(\"127.0.0.1:\" + clientPorts.get(i),\n    +                            CONNECTION_TIMEOUT));\n    +        }\n    +\n    +        for (int i = 0; i < serverCount; ++i) {\n    +            mt[i].shutdown();\n    +            mt[i].start();\n    +            verifyQuorum(i);\n    +            verifyConfig(mt[i]);\n    +        }\n    +\n    +        for (int i = 0; i < serverCount; i++) {\n    +            mt[i].shutdown();\n    +        }\n    +    }\n    +\n    +    @Test(timeout = 90000)\n    +    // This test simulate the use case of change of membership through rolling\n    +    // restart. For a 3 node ensemble we expand it to a 5 node ensemble, verify\n    +    // during the process each node has the expected configuration setting pushed\n    +    // via updating local zoo.cfg file.\n    +    public void testRollingRestartWithMembershipChange()\n    +            throws IOException, InterruptedException, KeeperException {\n    +        int serverCount = 3;\n    +        String config = generateNewQuorumConfig(serverCount);\n    +        QuorumPeerTestBase.MainThread mt[] = new QuorumPeerTestBase.MainThread[serverCount];\n    +        for (int i = 0; i < serverCount; ++i) {\n    +            mt[i] = new QuorumPeerTestBase.MainThread(i, clientPorts.get(i),\n    +                    config, false);\n    +            mt[i].start();\n    +        }\n    +\n    +        for (int i = 0; i < serverCount; ++i) {\n    +            Assert.assertTrue(\"waiting for server \" + i + \" being up\",\n    +                    ClientBase.waitForServerUp(\"127.0.0.1:\" + clientPorts.get(i),\n    +                            CONNECTION_TIMEOUT));\n    +        }\n    +\n    +        for (int i = 0; i < serverCount; ++i) {\n    +            verifyQuorum(i);\n    +            verifyConfig(mt[i]);\n    +        }\n    +\n    +        Map<Integer, String> oldServerAddress = new HashMap<>(serverAddress);\n    +        config = updateExistingQuorumConfig(Arrays.asList(3, 4), new ArrayList<Integer>());\n    +        serverCount = serverAddress.size();\n    +        Assert.assertEquals(\"Server count should be 5 after config update.\", serverCount, 5);\n    +\n    +        mt = Arrays.copyOf(mt, mt.length + 2);\n    +        for (int i = 3; i < 5; ++i) {\n    +            mt[i] = new QuorumPeerTestBase.MainThread(i, clientPorts.get(i),\n    +                    config, false);\n    +            mt[i].start();\n    +            Assert.assertTrue(\"waiting for server \" + i + \" being up\",\n    +                    ClientBase.waitForServerUp(\"127.0.0.1:\" + clientPorts.get(i),\n    +                            CONNECTION_TIMEOUT));\n    +            verifyConfig(mt[i]);\n    +            verifyQuorum(i);\n    +        }\n    +\n    +        Set<String> expectedConfigs = new HashSet<>();\n    +        for (String conf : oldServerAddress.values()) {\n    +            // Remove \"server.x=\" prefix.\n    +            expectedConfigs.add(conf.substring(9));\n    +        }\n    +\n    +        for (int i = 0; i < 3; ++i) {\n    +            verifyConfig(mt[i], expectedConfigs);\n    +        }\n    +\n    +        for (int i = 0; i < serverCount; ++i) {\n    +            mt[i].shutdown();\n    +        }\n    +    }\n    +\n    +    // A successful write operation indicates a quorum is up.\n    +    private void verifyQuorum(int sid)\n    +            throws IOException, InterruptedException, KeeperException {\n    +        ZooKeeper zk = new ZooKeeper(\"127.0.0.1:\" + clientPorts.get(sid),\n    +                ClientBase.CONNECTION_TIMEOUT, new Watcher() {\n    +            public void process(WatchedEvent event) {\n    +            }});\n    +\n    +        for (int j = 0; j < 30; j++) {\n    +            try {\n    +                zk.create(\"/\" + Integer.toString(sid) + \".\" + Math.random(),\n    +                        \"foobar\".getBytes(),\n    +                        ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n    +                break;\n    +            } catch (KeeperException.ConnectionLossException e) {\n    +                if (j < 29) {\n    +                    Thread.sleep(1000);\n    +                } else {\n    +                    Assert.fail(\"client could not connect to reestablished quorum: \" +\n    +                            \"giving up after 30+ seconds.\");\n    +                }\n    +            }\n    +        }\n    +    }\n    +\n    +    private void verifyConfig(QuorumPeerTestBase.MainThread mt) {\n    +        Set<String> expectedConfigs = new HashSet<>();\n    +        for (String config : serverAddress.values()) {\n    +            // Remove \"server.x=\" prefix.\n    +            expectedConfigs.add(config.substring(9));\n    --- End diff --\n    \n    With the ReconfigTest helpers I can remove these code, hopefully.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-06-30T21:18:32.142+0000","updated":"2017-06-30T21:18:32.142+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13082163/comment/16070741","id":"16070741","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user hanm commented on the issue:\n\n    https://github.com/apache/zookeeper/pull/292\n  \n    >> One question - what happens with getConfig when reconfig is disabled ? Does it still work ?\n    \n    Yes getConfigwill continue working until the heat death of the universe regardless of reconfigEnabled flag settings :). \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-06-30T21:20:38.970+0000","updated":"2017-06-30T21:20:38.970+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13082163/comment/16071016","id":"16071016","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"body":"+1 overall.  GitHub Pull Request  Build\n      \n\n    +1 @author.  The patch does not contain any @author tags.\n\n    +1 tests included.  The patch appears to include 11 new or modified tests.\n\n    +1 javadoc.  The javadoc tool did not generate any warning messages.\n\n    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.\n\n    +1 findbugs.  The patch does not introduce any new Findbugs (version 3.0.1) warnings.\n\n    +1 release audit.  The applied patch does not increase the total number of release audit warnings.\n\n    +1 core tests.  The patch passed core unit tests.\n\n    +1 contrib tests.  The patch passed contrib unit tests.\n\nTest results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/847//testReport/\nFindbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/847//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html\nConsole output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/847//console\n\nThis message is automatically generated.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"created":"2017-07-01T05:49:40.241+0000","updated":"2017-07-01T05:49:40.241+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13082163/comment/16071457","id":"16071457","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"body":"+1 overall.  GitHub Pull Request  Build\n      \n\n    +1 @author.  The patch does not contain any @author tags.\n\n    +1 tests included.  The patch appears to include 11 new or modified tests.\n\n    +1 javadoc.  The javadoc tool did not generate any warning messages.\n\n    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.\n\n    +1 findbugs.  The patch does not introduce any new Findbugs (version 3.0.1) warnings.\n\n    +1 release audit.  The applied patch does not increase the total number of release audit warnings.\n\n    +1 core tests.  The patch passed core unit tests.\n\n    +1 contrib tests.  The patch passed contrib unit tests.\n\nTest results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/851//testReport/\nFindbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/851//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html\nConsole output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/851//console\n\nThis message is automatically generated.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"created":"2017-07-02T00:36:13.543+0000","updated":"2017-07-02T00:36:13.543+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13082163/comment/16071480","id":"16071480","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user hanm commented on the issue:\n\n    https://github.com/apache/zookeeper/pull/292\n  \n    Addressed code review comments from @shralex:\n    \n    * Use ReconfigTest.testServerHasConfig for additional test coverage.\n    * Improve fragile substring extraction.\n    * Add comments around test logic.\n    * Also made a fix to ensure during rolling restart, config information returned from getConfig is consistent with local config.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-07-02T03:44:59.431+0000","updated":"2017-07-02T03:44:59.431+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13082163/comment/16071482","id":"16071482","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user hanm commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/292#discussion_r125173093\n  \n    --- Diff: src/java/main/org/apache/zookeeper/server/quorum/Learner.java ---\n    @@ -374,6 +374,13 @@ else if (qp.getType() == Leader.SNAP) {\n                     // The leader is going to dump the database\n                     // db is clear as part of deserializeSnapshot()\n                     zk.getZKDatabase().deserializeSnapshot(leaderIs);\n    +                // ZOOKEEPER-2819: overwrite config node content extracted\n    +                // from leader snapshot with local config, to avoid potential\n    +                // inconsistency of config node content during rolling restart.\n    +                if (!QuorumPeerConfig.isReconfigEnabled()) {\n    --- End diff --\n    \n    @shralex instead of avoiding deserializing the config zNode we could overwrite the deserialized zNode content with local quorum config. Test will be covered in the test improvement JIRA ZOOKEEPER-2828.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-07-02T03:49:27.832+0000","updated":"2017-07-02T03:49:27.832+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13082163/comment/16071490","id":"16071490","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"body":"-1 overall.  GitHub Pull Request  Build\n      \n\n    +1 @author.  The patch does not contain any @author tags.\n\n    +1 tests included.  The patch appears to include 11 new or modified tests.\n\n    +1 javadoc.  The javadoc tool did not generate any warning messages.\n\n    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.\n\n    +1 findbugs.  The patch does not introduce any new Findbugs (version 3.0.1) warnings.\n\n    +1 release audit.  The applied patch does not increase the total number of release audit warnings.\n\n    -1 core tests.  The patch failed core unit tests.\n\n    -1 contrib tests.  The patch failed contrib unit tests.\n\nTest results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/852//testReport/\nFindbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/852//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html\nConsole output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/852//console\n\nThis message is automatically generated.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"created":"2017-07-02T04:19:34.881+0000","updated":"2017-07-02T04:19:34.881+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13082163/comment/16071491","id":"16071491","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"body":"-1 overall.  GitHub Pull Request  Build\n      \n\n    +1 @author.  The patch does not contain any @author tags.\n\n    +1 tests included.  The patch appears to include 11 new or modified tests.\n\n    +1 javadoc.  The javadoc tool did not generate any warning messages.\n\n    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.\n\n    +1 findbugs.  The patch does not introduce any new Findbugs (version 3.0.1) warnings.\n\n    +1 release audit.  The applied patch does not increase the total number of release audit warnings.\n\n    -1 core tests.  The patch failed core unit tests.\n\n    +1 contrib tests.  The patch passed contrib unit tests.\n\nTest results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/853//testReport/\nFindbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/853//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html\nConsole output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/853//console\n\nThis message is automatically generated.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"created":"2017-07-02T04:19:35.428+0000","updated":"2017-07-02T04:19:35.428+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13082163/comment/16071509","id":"16071509","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"body":"-1 overall.  GitHub Pull Request  Build\n      \n\n    +1 @author.  The patch does not contain any @author tags.\n\n    +1 tests included.  The patch appears to include 11 new or modified tests.\n\n    +1 javadoc.  The javadoc tool did not generate any warning messages.\n\n    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.\n\n    +1 findbugs.  The patch does not introduce any new Findbugs (version 3.0.1) warnings.\n\n    +1 release audit.  The applied patch does not increase the total number of release audit warnings.\n\n    -1 core tests.  The patch failed core unit tests.\n\n    +1 contrib tests.  The patch passed contrib unit tests.\n\nTest results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/854//testReport/\nFindbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/854//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html\nConsole output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/854//console\n\nThis message is automatically generated.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"created":"2017-07-02T04:50:05.281+0000","updated":"2017-07-02T04:50:05.281+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13082163/comment/16075879","id":"16075879","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user shralex commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/292#discussion_r125805265\n  \n    --- Diff: src/java/test/org/apache/zookeeper/server/quorum/ReconfigRollingRestartCompatibilityTest.java ---\n    @@ -0,0 +1,263 @@\n    +/**\n    + * Licensed to the Apache Software Foundation (ASF) under one\n    + * or more contributor license agreements.  See the NOTICE file\n    + * distributed with this work for additional information\n    + * regarding copyright ownership.  The ASF licenses this file\n    + * to you under the Apache License, Version 2.0 (the\n    + * \"License\"); you may not use this file except in compliance\n    + * with the License.  You may obtain a copy of the License at\n    + *\n    + *     http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +\n    +package org.apache.zookeeper.server.quorum;\n    +\n    +import java.io.IOException;\n    +import java.nio.charset.StandardCharsets;\n    +import java.nio.file.Files;\n    +import java.util.Arrays;\n    +import java.util.Map;\n    +import java.util.Set;\n    +import java.util.List;\n    +import java.util.HashMap;\n    +import java.util.HashSet;\n    +import java.util.ArrayList;\n    +\n    +import org.apache.zookeeper.ZooKeeper;\n    +import org.apache.zookeeper.PortAssignment;\n    +import org.apache.zookeeper.test.ClientBase;\n    +import org.apache.zookeeper.test.ReconfigTest;\n    +import org.junit.Assert;\n    +import org.junit.Test;\n    +\n    +import static org.apache.zookeeper.test.ClientBase.CONNECTION_TIMEOUT;\n    +\n    +/**\n    + * ReconfigRollingRestartCompatibilityTest - we want to make sure that users\n    + * can continue using the rolling restart approach when reconfig feature is disabled.\n    + * It is important to stay compatible with rolling restart because dynamic reconfig\n    + * has its limitation: it requires a quorum of server to work. When no quorum can be formed,\n    + * rolling restart is the only approach to reconfigure the ensemble (e.g. removing bad nodes\n    + * such that a new quorum with smaller number of nodes can be formed.).\n    + *\n    + * See ZOOKEEPER-2819 for more details.\n    + */\n    +public class ReconfigRollingRestartCompatibilityTest extends QuorumPeerTestBase {\n    +    private static final String ZOO_CFG_BAK_FILE = \"zoo.cfg.bak\";\n    +\n    +    Map<Integer, Integer> clientPorts = new HashMap<>(5);\n    +    Map<Integer, String> serverAddress = new HashMap<>(5);\n    +\n    +    private String generateNewQuorumConfig(int serverCount) {\n    +        StringBuilder sb = new StringBuilder();\n    +        String server;\n    +        for (int i = 0; i < serverCount; i++) {\n    +            clientPorts.put(i, PortAssignment.unique());\n    +            server = \"server.\" + i + \"=localhost:\" + PortAssignment.unique()\n    +                    + \":\" + PortAssignment.unique() + \":participant;localhost:\"\n    +                    + clientPorts.get(i);\n    +            serverAddress.put(i, server);\n    +            sb.append(server + \"\\n\");\n    +        }\n    +        return sb.toString();\n    +    }\n    +\n    +    private String updateExistingQuorumConfig(List<Integer> sidsToAdd, List<Integer> sidsToRemove) {\n    +        StringBuilder sb = new StringBuilder();\n    +        for (Integer sid : sidsToAdd) {\n    +            clientPorts.put(sid, PortAssignment.unique());\n    +            serverAddress.put(sid, \"server.\" + sid + \"=localhost:\" + PortAssignment.unique()\n    +                    + \":\" + PortAssignment.unique() + \":participant;localhost:\"\n    +                    + clientPorts.get(sid));\n    +        }\n    +\n    +        for (Integer sid : sidsToRemove) {\n    +            clientPorts.remove(sid);\n    +            serverAddress.remove(sid);\n    +        }\n    +\n    +        for (String server : serverAddress.values()) {\n    +            sb.append(server + \"\\n\");\n    +        }\n    +\n    +        return sb.toString();\n    +    }\n    +\n    +    @Test(timeout = 60000)\n    +    // Verify no zoo.cfg.dynamic and zoo.cfg.bak files existing locally\n    +    // when reconfig feature flag is off by default.\n    +    public void testNoLocalDynamicConfigAndBackupFiles()\n    +            throws InterruptedException, IOException {\n    +        int serverCount = 3;\n    +        String config = generateNewQuorumConfig(serverCount);\n    +        QuorumPeerTestBase.MainThread mt[] = new QuorumPeerTestBase.MainThread[serverCount];\n    +        String[] staticFileContent = new String[serverCount];\n    +\n    +        for (int i = 0; i < serverCount; i++) {\n    +            mt[i] = new QuorumPeerTestBase.MainThread(i, clientPorts.get(i),\n    +                    config, false);\n    +            mt[i].start();\n    +        }\n    +\n    +        for (int i = 0; i < serverCount; i++) {\n    +            Assert.assertTrue(\"waiting for server \" + i + \" being up\",\n    +                    ClientBase.waitForServerUp(\"127.0.0.1:\" + clientPorts.get(i),\n    +                            CONNECTION_TIMEOUT));\n    +            Assert.assertNull(\"static file backup (zoo.cfg.bak) shouldn't exist!\",\n    +                    mt[i].getFileByName(ZOO_CFG_BAK_FILE));\n    +            Assert.assertNull(\"dynamic configuration file (zoo.cfg.dynamic.*) shouldn't exist!\",\n    +                    mt[i].getFileByName(mt[i].getQuorumPeer().getNextDynamicConfigFilename()));\n    +            staticFileContent[i] = Files.readAllLines(mt[i].confFile.toPath(), StandardCharsets.UTF_8).toString();\n    +            Assert.assertTrue(\"static config file should contain server entry \" + serverAddress.get(i),\n    +                    staticFileContent[i].contains(serverAddress.get(i)));\n    +        }\n    +\n    +        for (int i = 0; i < serverCount; i++) {\n    +            mt[i].shutdown();\n    +        }\n    +    }\n    +\n    +    @Test(timeout = 60000)\n    +    // This test simulate the usual rolling restart with no membership change:\n    +    // 1. A node is shutdown first (e.g. to upgrade software, or hardware, or cleanup local data.).\n    +    // 2. After upgrade, start the node.\n    +    // 3. Do this for every node, one at a time.\n    +    public void testRollingRestartWithoutMembershipChange() throws Exception {\n    +        int serverCount = 3;\n    +        String config = generateNewQuorumConfig(serverCount);\n    +        List<String> joiningServers = new ArrayList<>();\n    +        List<String> leavingServers = new ArrayList<>();\n    +        QuorumPeerTestBase.MainThread mt[] = new QuorumPeerTestBase.MainThread[serverCount];\n    +        for (int i = 0; i < serverCount; ++i) {\n    +            mt[i] = new QuorumPeerTestBase.MainThread(i, clientPorts.get(i),\n    +                    config, false);\n    +            mt[i].start();\n    +            joiningServers.add(serverAddress.get(i));\n    +        }\n    +\n    +        for (int i = 0; i < serverCount; ++i) {\n    +            Assert.assertTrue(\"waiting for server \" + i + \" being up\",\n    +                    ClientBase.waitForServerUp(\"127.0.0.1:\" + clientPorts.get(i),\n    +                            CONNECTION_TIMEOUT));\n    +        }\n    +\n    +        for (int i = 0; i < serverCount; ++i) {\n    +            mt[i].shutdown();\n    +            mt[i].start();\n    +            verifyQuorumConfig(i, joiningServers, leavingServers);\n    --- End diff --\n    \n    you can remove the leavingServers variable and pass null here. Same in the other test\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-07-06T03:49:23.093+0000","updated":"2017-07-06T03:49:23.093+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13082163/comment/16075880","id":"16075880","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user shralex commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/292#discussion_r125806125\n  \n    --- Diff: src/java/test/org/apache/zookeeper/server/quorum/ReconfigRollingRestartCompatibilityTest.java ---\n    @@ -0,0 +1,263 @@\n    +/**\n    + * Licensed to the Apache Software Foundation (ASF) under one\n    + * or more contributor license agreements.  See the NOTICE file\n    + * distributed with this work for additional information\n    + * regarding copyright ownership.  The ASF licenses this file\n    + * to you under the Apache License, Version 2.0 (the\n    + * \"License\"); you may not use this file except in compliance\n    + * with the License.  You may obtain a copy of the License at\n    + *\n    + *     http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +\n    +package org.apache.zookeeper.server.quorum;\n    +\n    +import java.io.IOException;\n    +import java.nio.charset.StandardCharsets;\n    +import java.nio.file.Files;\n    +import java.util.Arrays;\n    +import java.util.Map;\n    +import java.util.Set;\n    +import java.util.List;\n    +import java.util.HashMap;\n    +import java.util.HashSet;\n    +import java.util.ArrayList;\n    +\n    +import org.apache.zookeeper.ZooKeeper;\n    --- End diff --\n    \n    you don't really need leavingServers - you can pass null instead of it in all the tests since no one is leaving\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-07-06T03:49:23.123+0000","updated":"2017-07-06T03:49:23.123+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13082163/comment/16075881","id":"16075881","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user shralex commented on a diff in the pull request:\n\n    https://github.com/apache/zookeeper/pull/292#discussion_r125806082\n  \n    --- Diff: src/java/test/org/apache/zookeeper/server/quorum/ReconfigRollingRestartCompatibilityTest.java ---\n    @@ -0,0 +1,263 @@\n    +/**\n    + * Licensed to the Apache Software Foundation (ASF) under one\n    + * or more contributor license agreements.  See the NOTICE file\n    + * distributed with this work for additional information\n    + * regarding copyright ownership.  The ASF licenses this file\n    + * to you under the Apache License, Version 2.0 (the\n    + * \"License\"); you may not use this file except in compliance\n    + * with the License.  You may obtain a copy of the License at\n    + *\n    + *     http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +\n    +package org.apache.zookeeper.server.quorum;\n    +\n    +import java.io.IOException;\n    +import java.nio.charset.StandardCharsets;\n    +import java.nio.file.Files;\n    +import java.util.Arrays;\n    +import java.util.Map;\n    +import java.util.Set;\n    +import java.util.List;\n    +import java.util.HashMap;\n    +import java.util.HashSet;\n    +import java.util.ArrayList;\n    +\n    +import org.apache.zookeeper.ZooKeeper;\n    +import org.apache.zookeeper.PortAssignment;\n    +import org.apache.zookeeper.test.ClientBase;\n    +import org.apache.zookeeper.test.ReconfigTest;\n    +import org.junit.Assert;\n    +import org.junit.Test;\n    +\n    +import static org.apache.zookeeper.test.ClientBase.CONNECTION_TIMEOUT;\n    +\n    +/**\n    + * ReconfigRollingRestartCompatibilityTest - we want to make sure that users\n    + * can continue using the rolling restart approach when reconfig feature is disabled.\n    + * It is important to stay compatible with rolling restart because dynamic reconfig\n    + * has its limitation: it requires a quorum of server to work. When no quorum can be formed,\n    + * rolling restart is the only approach to reconfigure the ensemble (e.g. removing bad nodes\n    + * such that a new quorum with smaller number of nodes can be formed.).\n    + *\n    + * See ZOOKEEPER-2819 for more details.\n    + */\n    +public class ReconfigRollingRestartCompatibilityTest extends QuorumPeerTestBase {\n    +    private static final String ZOO_CFG_BAK_FILE = \"zoo.cfg.bak\";\n    +\n    +    Map<Integer, Integer> clientPorts = new HashMap<>(5);\n    +    Map<Integer, String> serverAddress = new HashMap<>(5);\n    +\n    +    private String generateNewQuorumConfig(int serverCount) {\n    +        StringBuilder sb = new StringBuilder();\n    +        String server;\n    +        for (int i = 0; i < serverCount; i++) {\n    +            clientPorts.put(i, PortAssignment.unique());\n    +            server = \"server.\" + i + \"=localhost:\" + PortAssignment.unique()\n    +                    + \":\" + PortAssignment.unique() + \":participant;localhost:\"\n    +                    + clientPorts.get(i);\n    +            serverAddress.put(i, server);\n    +            sb.append(server + \"\\n\");\n    +        }\n    +        return sb.toString();\n    +    }\n    +\n    +    private String updateExistingQuorumConfig(List<Integer> sidsToAdd, List<Integer> sidsToRemove) {\n    +        StringBuilder sb = new StringBuilder();\n    +        for (Integer sid : sidsToAdd) {\n    +            clientPorts.put(sid, PortAssignment.unique());\n    +            serverAddress.put(sid, \"server.\" + sid + \"=localhost:\" + PortAssignment.unique()\n    +                    + \":\" + PortAssignment.unique() + \":participant;localhost:\"\n    +                    + clientPorts.get(sid));\n    +        }\n    +\n    +        for (Integer sid : sidsToRemove) {\n    +            clientPorts.remove(sid);\n    +            serverAddress.remove(sid);\n    +        }\n    +\n    +        for (String server : serverAddress.values()) {\n    +            sb.append(server + \"\\n\");\n    +        }\n    +\n    +        return sb.toString();\n    +    }\n    +\n    +    @Test(timeout = 60000)\n    +    // Verify no zoo.cfg.dynamic and zoo.cfg.bak files existing locally\n    +    // when reconfig feature flag is off by default.\n    +    public void testNoLocalDynamicConfigAndBackupFiles()\n    +            throws InterruptedException, IOException {\n    +        int serverCount = 3;\n    +        String config = generateNewQuorumConfig(serverCount);\n    +        QuorumPeerTestBase.MainThread mt[] = new QuorumPeerTestBase.MainThread[serverCount];\n    +        String[] staticFileContent = new String[serverCount];\n    +\n    +        for (int i = 0; i < serverCount; i++) {\n    +            mt[i] = new QuorumPeerTestBase.MainThread(i, clientPorts.get(i),\n    +                    config, false);\n    +            mt[i].start();\n    +        }\n    +\n    +        for (int i = 0; i < serverCount; i++) {\n    +            Assert.assertTrue(\"waiting for server \" + i + \" being up\",\n    +                    ClientBase.waitForServerUp(\"127.0.0.1:\" + clientPorts.get(i),\n    +                            CONNECTION_TIMEOUT));\n    +            Assert.assertNull(\"static file backup (zoo.cfg.bak) shouldn't exist!\",\n    +                    mt[i].getFileByName(ZOO_CFG_BAK_FILE));\n    +            Assert.assertNull(\"dynamic configuration file (zoo.cfg.dynamic.*) shouldn't exist!\",\n    +                    mt[i].getFileByName(mt[i].getQuorumPeer().getNextDynamicConfigFilename()));\n    +            staticFileContent[i] = Files.readAllLines(mt[i].confFile.toPath(), StandardCharsets.UTF_8).toString();\n    +            Assert.assertTrue(\"static config file should contain server entry \" + serverAddress.get(i),\n    +                    staticFileContent[i].contains(serverAddress.get(i)));\n    +        }\n    +\n    +        for (int i = 0; i < serverCount; i++) {\n    +            mt[i].shutdown();\n    +        }\n    +    }\n    +\n    +    @Test(timeout = 60000)\n    +    // This test simulate the usual rolling restart with no membership change:\n    +    // 1. A node is shutdown first (e.g. to upgrade software, or hardware, or cleanup local data.).\n    +    // 2. After upgrade, start the node.\n    +    // 3. Do this for every node, one at a time.\n    +    public void testRollingRestartWithoutMembershipChange() throws Exception {\n    +        int serverCount = 3;\n    +        String config = generateNewQuorumConfig(serverCount);\n    +        List<String> joiningServers = new ArrayList<>();\n    +        List<String> leavingServers = new ArrayList<>();\n    +        QuorumPeerTestBase.MainThread mt[] = new QuorumPeerTestBase.MainThread[serverCount];\n    +        for (int i = 0; i < serverCount; ++i) {\n    +            mt[i] = new QuorumPeerTestBase.MainThread(i, clientPorts.get(i),\n    +                    config, false);\n    +            mt[i].start();\n    +            joiningServers.add(serverAddress.get(i));\n    +        }\n    +\n    +        for (int i = 0; i < serverCount; ++i) {\n    +            Assert.assertTrue(\"waiting for server \" + i + \" being up\",\n    +                    ClientBase.waitForServerUp(\"127.0.0.1:\" + clientPorts.get(i),\n    +                            CONNECTION_TIMEOUT));\n    +        }\n    +\n    +        for (int i = 0; i < serverCount; ++i) {\n    +            mt[i].shutdown();\n    +            mt[i].start();\n    +            verifyQuorumConfig(i, joiningServers, leavingServers);\n    +            verifyQuorumMembers(mt[i]);\n    +        }\n    +\n    +        for (int i = 0; i < serverCount; i++) {\n    +            mt[i].shutdown();\n    +        }\n    +    }\n    +\n    +    @Test(timeout = 90000)\n    +    // This test simulate the use case of change of membership through rolling\n    +    // restart. For a 3 node ensemble we expand it to a 5 node ensemble, verify\n    +    // during the process each node has the expected configuration setting pushed\n    +    // via updating local zoo.cfg file.\n    +    public void testRollingRestartWithMembershipChange() throws Exception {\n    +        int serverCount = 3;\n    +        String config = generateNewQuorumConfig(serverCount);\n    +        QuorumPeerTestBase.MainThread mt[] = new QuorumPeerTestBase.MainThread[serverCount];\n    +        List<String> joiningServers = new ArrayList<>();\n    +        List<String> leavingServers = new ArrayList<>();\n    +        for (int i = 0; i < serverCount; ++i) {\n    +            mt[i] = new QuorumPeerTestBase.MainThread(i, clientPorts.get(i),\n    +                    config, false);\n    +            mt[i].start();\n    +            joiningServers.add(serverAddress.get(i));\n    +        }\n    +\n    +        for (int i = 0; i < serverCount; ++i) {\n    +            Assert.assertTrue(\"waiting for server \" + i + \" being up\",\n    +                    ClientBase.waitForServerUp(\"127.0.0.1:\" + clientPorts.get(i),\n    +                            CONNECTION_TIMEOUT));\n    +        }\n    +\n    +        for (int i = 0; i < serverCount; ++i) {\n    +            verifyQuorumConfig(i, joiningServers, leavingServers);\n    +            verifyQuorumMembers(mt[i]);\n    +        }\n    +\n    +        Map<Integer, String> oldServerAddress = new HashMap<>(serverAddress);\n    +        List<String> newServers = new ArrayList<>(joiningServers);\n    +        newServers.add(\"3\"); newServers.add(\"4\");\n    --- End diff --\n    \n    move this one line down until after you have the actual addresses, then put the actual config lines of 3 and 4 into newServers\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-07-06T03:49:23.162+0000","updated":"2017-07-06T03:49:23.162+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13082163/comment/16075896","id":"16075896","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user hanm commented on the issue:\n\n    https://github.com/apache/zookeeper/pull/292\n  \n    @shralex The snapshot and sync tests will be covered in ZOOKEEPER-2828. I will update the PR shortly to address other comments.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-07-06T04:05:50.917+0000","updated":"2017-07-06T04:05:50.917+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13082163/comment/16075964","id":"16075964","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"body":"-1 overall.  GitHub Pull Request  Build\n      \n\n    +1 @author.  The patch does not contain any @author tags.\n\n    +1 tests included.  The patch appears to include 11 new or modified tests.\n\n    +1 javadoc.  The javadoc tool did not generate any warning messages.\n\n    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.\n\n    +1 findbugs.  The patch does not introduce any new Findbugs (version 3.0.1) warnings.\n\n    +1 release audit.  The applied patch does not increase the total number of release audit warnings.\n\n    -1 core tests.  The patch failed core unit tests.\n\n    +1 contrib tests.  The patch passed contrib unit tests.\n\nTest results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/863//testReport/\nFindbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/863//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html\nConsole output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/863//console\n\nThis message is automatically generated.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"created":"2017-07-06T05:35:58.026+0000","updated":"2017-07-06T05:35:58.026+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13082163/comment/16075969","id":"16075969","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user hanm commented on the issue:\n\n    https://github.com/apache/zookeeper/pull/292\n  \n    Thanks @shralex for review. Good catch on the \"3\", \"4\" server issue. PR updated that addresses latest comments. The failed test is a known flaky one. \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-07-06T05:38:40.271+0000","updated":"2017-07-06T05:38:40.271+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13082163/comment/16075972","id":"16075972","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user shralex commented on the issue:\n\n    https://github.com/apache/zookeeper/pull/292\n  \n    LGTM\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-07-06T05:43:21.073+0000","updated":"2017-07-06T05:43:21.073+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13082163/comment/16076881","id":"16076881","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user asfgit closed the pull request at:\n\n    https://github.com/apache/zookeeper/pull/292\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-07-06T16:49:15.520+0000","updated":"2017-07-06T16:49:15.520+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13082163/comment/16076882","id":"16076882","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hanm","name":"hanm","key":"hanm","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hanm&avatarId=26946","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hanm&avatarId=26946","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hanm&avatarId=26946","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hanm&avatarId=26946"},"displayName":"Michael Han","active":true,"timeZone":"America/Vancouver"},"body":"Issue resolved by pull request 292\n[https://github.com/apache/zookeeper/pull/292]","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hanm","name":"hanm","key":"hanm","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hanm&avatarId=26946","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hanm&avatarId=26946","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hanm&avatarId=26946","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hanm&avatarId=26946"},"displayName":"Michael Han","active":true,"timeZone":"America/Vancouver"},"created":"2017-07-06T16:49:16.146+0000","updated":"2017-07-06T16:49:16.146+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13082163/comment/16076883","id":"16076883","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hanm","name":"hanm","key":"hanm","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hanm&avatarId=26946","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hanm&avatarId=26946","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hanm&avatarId=26946","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hanm&avatarId=26946"},"displayName":"Michael Han","active":true,"timeZone":"America/Vancouver"},"body":"Committed to master: https://github.com/apache/zookeeper/commit/ddf0364903bf7ac7cd25b2e1927f0d9d3c7203c4\nbranch-3.5: https://github.com/apache/zookeeper/commit/6ab74115e2576a81f649f12708ebc4d4efdb15ac","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hanm","name":"hanm","key":"hanm","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hanm&avatarId=26946","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hanm&avatarId=26946","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hanm&avatarId=26946","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hanm&avatarId=26946"},"displayName":"Michael Han","active":true,"timeZone":"America/Vancouver"},"created":"2017-07-06T16:51:19.676+0000","updated":"2017-07-06T16:51:19.676+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13082163/comment/16076946","id":"16076946","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hudson","name":"hudson","key":"hudson","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Hudson","active":true,"timeZone":"Etc/UTC"},"body":"SUCCESS: Integrated in Jenkins build ZooKeeper-trunk #3457 (See [https://builds.apache.org/job/ZooKeeper-trunk/3457/])\nZOOKEEPER-2819: Changing membership configuration via rolling restart … (hanm: rev ddf0364903bf7ac7cd25b2e1927f0d9d3c7203c4)\n* (edit) src/java/main/org/apache/zookeeper/server/quorum/QuorumPeerConfig.java\n* (edit) src/java/main/org/apache/zookeeper/server/quorum/Learner.java\n* (edit) src/java/main/org/apache/zookeeper/server/quorum/QuorumPeer.java\n* (edit) src/java/test/org/apache/zookeeper/test/ReconfigMisconfigTest.java\n* (edit) src/java/test/org/apache/zookeeper/server/quorum/ReconfigRecoveryTest.java\n* (edit) src/java/test/org/apache/zookeeper/test/ReconfigExceptionTest.java\n* (add) src/java/test/org/apache/zookeeper/server/quorum/ReconfigRollingRestartCompatibilityTest.java\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hudson","name":"hudson","key":"hudson","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Hudson","active":true,"timeZone":"Etc/UTC"},"created":"2017-07-06T17:38:25.586+0000","updated":"2017-07-06T17:38:25.586+0000"}],"maxResults":45,"total":45,"startAt":0},"votes":{"self":"https://issues.apache.org/jira/rest/api/2/issue/ZOOKEEPER-2819/votes","votes":0,"hasVoted":false},"worklog":{"startAt":0,"maxResults":20,"total":0,"worklogs":[]},"customfield_12311820":"0|i3go8n:"}}