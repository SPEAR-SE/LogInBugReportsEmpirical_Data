{"expand":"renderedFields,names,schema,operations,editmeta,changelog,versionedRepresentations","id":"13119577","self":"https://issues.apache.org/jira/rest/api/2/issue/13119577","key":"ZOOKEEPER-2945","fields":{"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype","name":"Bug","subtask":false,"avatarId":21133},"timespent":null,"project":{"self":"https://issues.apache.org/jira/rest/api/2/project/12310801","id":"12310801","key":"ZOOKEEPER","name":"ZooKeeper","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/projectavatar?pid=12310801&avatarId=10011","24x24":"https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12310801&avatarId=10011","16x16":"https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12310801&avatarId=10011","32x32":"https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12310801&avatarId=10011"},"projectCategory":{"self":"https://issues.apache.org/jira/rest/api/2/projectCategory/10484","id":"10484","description":"Apache ZooKeeper related","name":"ZooKeeper"}},"fixVersions":[],"aggregatetimespent":null,"resolution":null,"customfield_12312322":null,"customfield_12310220":null,"customfield_12312520":null,"customfield_12312323":null,"customfield_12312521":"Mon Nov 27 19:22:25 UTC 2017","customfield_12310420":"9223372036854775807","customfield_12312320":null,"customfield_12310222":null,"customfield_12312321":null,"resolutiondate":null,"workratio":-1,"customfield_12312328":null,"customfield_12312329":null,"customfield_12312923":null,"customfield_12312326":null,"customfield_12312920":null,"customfield_12310300":null,"customfield_12312327":null,"customfield_12312921":null,"customfield_12312324":null,"customfield_12312720":null,"customfield_12312325":null,"lastViewed":null,"watches":{"self":"https://issues.apache.org/jira/rest/api/2/issue/ZOOKEEPER-2945/watchers","watchCount":4,"isWatching":false},"created":"2017-11-20T08:23:49.423+0000","customfield_12310192":null,"customfield_12310191":null,"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.svg","name":"Major","id":"3"},"labels":[],"customfield_12312333":null,"customfield_12310230":null,"customfield_12312334":null,"customfield_12313422":"false","customfield_12310310":"1.0","customfield_12312331":null,"customfield_12312332":null,"timeestimate":null,"aggregatetimeoriginalestimate":null,"customfield_12311120":null,"customfield_12312330":null,"versions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12339207","id":"12339207","description":"Fix release against 3.4 branch","name":"3.4.11","archived":false,"released":true,"releaseDate":"2017-11-09"},{"self":"https://issues.apache.org/jira/rest/api/2/version/12342040","id":"12342040","description":"Fix release against 3.4 branch","name":"3.4.12","archived":false,"released":true,"releaseDate":"2018-05-01"}],"issuelinks":[],"customfield_12312339":null,"assignee":null,"customfield_12312337":null,"customfield_12312338":null,"updated":"2017-11-27T19:23:45.961+0000","customfield_12312335":null,"customfield_12312336":null,"status":{"self":"https://issues.apache.org/jira/rest/api/2/status/10002","description":"A patch for this issue has been uploaded to JIRA by a contributor.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/document.png","name":"Patch Available","id":"10002","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/4","id":4,"key":"indeterminate","colorName":"yellow","name":"In Progress"}},"components":[],"timeoriginalestimate":null,"description":"Synchronization code in the syncWithLeader function of Learner.java doesn't seems to truncate uncommitted writes properly when the follower receives SNAP msg from the leader. This results in data inconsistency in the in-memory data tree across nodes. Here is one procedure to reproduce the inconsistency. (Actually, this seems similar to my previous report on ZOOKEEPER-2832, but it was for 3.4.10 and this one is for 3.4.11 and later)\r\n\r\nInitially:\r\n# Start the ensemble with three nodes: node 0, 1 and 2 (the node 2 is the leader)\r\n# Create 5 znodes with initial values as follow (key = value)\r\n{noformat}\r\n/testDivergenceResync0 = 0\r\n/testDivergenceResync1 = 1\r\n/testDivergenceResync2 = 2\r\n/testDivergenceResync3 = 3\r\n/testDivergenceResync4 = 4\r\n{noformat}\r\n\r\nTo Reproduce:\r\n# Diverge the node 2\r\na. Shutdown the node 0 and 1\r\nb. Async setData to the node 2 writing 1000 to the key ‘/testDivergenceResync0’\r\nc. Shutdown the node 2\r\n# Restart the node 0 and 1 (let them finish with resync)\r\n# Diverge the node 1\r\na. Shutdown the node 0\r\nb. Async setData to the node 1 writing 1001 to the key ‘/testDivergenceResync1’\r\nc. Shutdown the node 1\r\n# Restart the node 0 and 1 (let them finish with resync)\r\n# Diverge the node 1\r\na. Shutdown the node 0\r\nb. Async setData to the node 1 writing 1002 to the key ‘/testDivergenceResync2’\r\nc. Shutdown the node 1\r\n# Restart the node 0 and 2 (let them finish with resync)\r\n# Diverge the node 0\r\na. Shutdown the node 2\r\nb. Async setData to the node 0 writing 1003 to the key ‘/testDivergenceResync3’\r\nc. Shutdown the node 0\r\n# Restart the node 1 and 2 (let them finish with resync)\r\n# Diverge the node 2\r\na. Shutdown the node 1\r\nb. Async setData to the node 2 writing 1004 to the key ‘/testDivergenceResync4’\r\nc. Shutdown the node 2\r\n# Restart the node 1 and 2 (let them finish with resync)\r\n# Restart the node 0 (let it finish with resync)\r\n\r\nReading each key from each node directly will give us the output:\r\n{noformat}\r\n/testDivergenceResync0 on the node 0 = 0\r\n/testDivergenceResync0 on the node 1 = 0\r\n/testDivergenceResync0 on the node 2 = 0\r\n/testDivergenceResync1 on the node 0 = 1001\r\n/testDivergenceResync1 on the node 1 = 1001\r\n/testDivergenceResync1 on the node 2 = 1001\r\n/testDivergenceResync2 on the node 0 = 2\r\n/testDivergenceResync2 on the node 1 = 1002\r\n/testDivergenceResync2 on the node 2 = 2\r\n/testDivergenceResync3 on the node 0 = 3\r\n/testDivergenceResync3 on the node 1 = 3\r\n/testDivergenceResync3 on the node 2 = 3\r\n/testDivergenceResync4 on the node 0 = 1004\r\n/testDivergenceResync4 on the node 1 = 1004\r\n/testDivergenceResync4 on the node 2 = 1004\r\n{noformat}\r\nThe value of key /testDivergenceResync2 is inconsistent across nodes -- node 1 has a new value that will never be replicated to the other nodes.\r\n\r\nWhat seems to happen:\r\n# At the step 5, setData (at zxid 0x300000001) writing the value 1002 is committed on the node 1.\r\n{panel:title=Log from the node 1:}\r\n...\r\n2017-11-16 03:02:19,964 [myid:1] - DEBUG [ProcessThread(sid:1 cport:-1)::CommitProcessor@174] - Processing request:: sessionid:0x100011108080000 type:setData cxid:0x4 zxid:0x300000001 txntype:5 reqpath:n/a\r\n2017-11-16 03:02:19,964 [myid:1] - DEBUG [ProcessThread(sid:1 cport:-1)::Leader@787] - Proposing:: sessionid:0x100011108080000 type:setData cxid:0x4 zxid:0x300000001 txntype:5 reqpath:n/a\r\n2017-11-16 03:02:19,965 [myid:1] - INFO  [SyncThread:1:FileTxnLog@209] - Creating new log file: log.300000001\r\n2017-11-16 03:02:20,016 [myid:1] - DEBUG [SyncThread:1:Leader@600] - Count for zxid: 0x300000001 is 1\r\n2017-11-16 03:02:21,173 [myid:1] - INFO  [QuorumPeer[myid=1]/0:0:0:0:0:0:0:0:11224:Leader@512] - Shutting down\r\n2017-11-16 03:02:21,173 [myid:1] - INFO  [QuorumPeer[myid=1]/0:0:0:0:0:0:0:0:11224:Leader@518] - Shutdown called\r\njava.lang.Exception: shutdown Leader! reason: Not sufficient followers synced, only synced with sids: [ 1 ]\r\n...\r\n{panel}\r\n# At the step 8, the node 1 is restarted and supposed to be properly resync’ed with the node 2 which is the leader.\r\n    a. The node 2 sends SNAP msg so that the node 1 can restore its in-memory data tree from the snapshot of the in-memory data tree on the node 2. \r\n    b. On the other hand, the node 1 will clear its in-memory data tree and restore it with the snapshot from the node 2. Then, it takes its own snapshot at zxid 0x200000001. \r\n    c. However, this does not remove the setData at zxid 0x300000001 from the transaction log on the node 1.\r\n{panel:title=Log from the node 2:}\r\n...\r\n2017-11-16 03:02:37,470 [myid:2] - INFO  [QuorumPeer[myid=2]/0:0:0:0:0:0:0:0:11227:Leader@372] - LEADING - LEADER ELECTION TOOK - 232\r\n2017-11-16 03:02:37,479 [myid:2] - INFO  [LearnerHandler-/127.0.0.1:46899:LearnerHandler@346] - Follower sid: 1 : info : org.apache.zookeeper.server.quorum.QuorumPeer$QuorumServer@46cc2846\r\n2017-11-16 03:02:37,626 [myid:2] - INFO  [LearnerHandler-/127.0.0.1:46899:LearnerHandler@401] - Synchronizing with Follower sid: 1 maxCommittedLog=0x0 minCommittedLog=0x0 peerLastZxid=0x300000001\r\n2017-11-16 03:02:37,626 [myid:2] - DEBUG [LearnerHandler-/127.0.0.1:46899:LearnerHandler@472] - proposals is empty\r\n2017-11-16 03:02:37,626 [myid:2] - INFO  [LearnerHandler-/127.0.0.1:46899:LearnerHandler@475] - Sending SNAP\r\n2017-11-16 03:02:37,626 [myid:2] - INFO  [LearnerHandler-/127.0.0.1:46899:LearnerHandler@499] - Sending snapshot last zxid of peer is 0x300000001  zxid of leader is 0x500000000sent zxid of db as 0x200000001\r\n2017-11-16 03:02:37,701 [myid:2] - INFO  [LearnerHandler-/127.0.0.1:46899:LearnerHandler@535] - Received NEWLEADER-ACK message from 1\r\n2017-11-16 03:02:37,702 [myid:2] - INFO  [QuorumPeer[myid=2]/0:0:0:0:0:0:0:0:11227:Leader@962] - Have quorum of supporters, sids: [ 1,2 ]; starting up and setting last processed zxid: 0x500000000\r\n...\r\n{panel}\r\n{panel:title=Log from the node 1:}\r\n...\r\n2017-11-16 03:02:37,473 [myid:1] - INFO  [QuorumPeer[myid=1]/0:0:0:0:0:0:0:0:11224:Follower@65] - FOLLOWING - LEADER ELECTION TOOK - 218\r\n2017-11-16 03:02:37,475 [myid:1] - INFO  [QuorumPeer[myid=1]/0:0:0:0:0:0:0:0:11224:QuorumPeer$QuorumServer@184] - Resolved hostname: \r\n127.0.0.1 to address: /127.0.0.1\r\n2017-11-16 03:02:37,593 [myid:1] - INFO  [NIOServerCxn.Factory:0.0.0.0/0.0.0.0:11224:NIOServerCnxnFactory@215] - Accepted socket connection from /127.0.0.1:57338\r\n2017-11-16 03:02:37,626 [myid:1] - INFO  [QuorumPeer[myid=1]/0:0:0:0:0:0:0:0:11224:Learner@336] - Getting a snapshot from leader 0x200000001\r\n2017-11-16 03:02:37,627 [myid:1] - WARN  [NIOServerCxn.Factory:0.0.0.0/0.0.0.0:11224:NIOServerCnxn@383] - Exception causing close of \r\nsession 0x0: ZooKeeperServer not running\r\n2017-11-16 03:02:37,627 [myid:1] - DEBUG [NIOServerCxn.Factory:0.0.0.0/0.0.0.0:11224:NIOServerCnxn@386] - IOException stack trace\r\njava.io.IOException: ZooKeeperServer not running\r\n        at org.apache.zookeeper.server.NIOServerCnxn.readLength(NIOServerCnxn.java:977)\r\n        at org.apache.zookeeper.server.NIOServerCnxn.doIO(NIOServerCnxn.java:257)\r\n        at org.apache.zookeeper.server.NIOServerCnxnFactory.run(NIOServerCnxnFactory.java:226)\r\n        at java.lang.Thread.run(Thread.java:745)\r\n2017-11-16 03:02:37,627 [myid:1] - INFO  [NIOServerCxn.Factory:0.0.0.0/0.0.0.0:11224:NIOServerCnxn@1040] - Closed socket connection f\r\nor client /127.0.0.1:57338 (no session established for client)\r\n2017-11-16 03:02:37,629 [myid:1] - INFO  [QuorumPeer[myid=1]/0:0:0:0:0:0:0:0:11224:FileTxnSnapLog@248] - Snapshotting: 0x200000001 to /home/ben/project/strata/test-5-3-ZooKeeper-3.4.11-strata-0.1/data/1/version-2/snapshot.200000001\r\n...\r\n{panel}\r\n# At the step 10, the node 1 is restarted again and supposed to be properly resync’ed with the node 2 which is the leader again.\r\na. When the node 1 is restarted, it restores its in-memory data tree from the snapshot at zxid 0x200000001 and replay setData at zxid 0x300000001 (which actually needed to be truncated)\r\nb. However, the node 2 just sends DIFF containing setData written at 9th path, and no truncation will be occurred.\r\nc. As a result, the node 1 still has the value 1002 while other nodes will have the value 2 for the same key\r\n{panel}\r\n{panel:title=Log from the node 2:}\r\n…\r\n2017-11-16 03:03:21,033 [myid:2] - INFO  [QuorumPeer[myid=2]/0:0:0:0:0:0:0:0:11227:Leader@372] - LEADING - LEADER ELECTION TOOK - 217\r\n2017-11-16 03:03:21,038 [myid:2] - INFO  [LearnerHandler-/127.0.0.1:46967:LearnerHandler@346] - Follower sid: 1 : info : org.apache.zookeeper.server.quorum.QuorumPeer$QuorumServer@1e1cf18c\r\n2017-11-16 03:03:21,103 [myid:2] - INFO  [LearnerHandler-/127.0.0.1:46967:LearnerHandler@401] - Synchronizing with Follower sid: 1 maxCommittedLog=0x500000004 minCommittedLog=0x500000001 peerLastZxid=0x500000003\r\n2017-11-16 03:03:21,103 [myid:2] - DEBUG [LearnerHandler-/127.0.0.1:46967:LearnerHandler@415] - proposal size is 4\r\n2017-11-16 03:03:21,103 [myid:2] - DEBUG [LearnerHandler-/127.0.0.1:46967:LearnerHandler@418] - Sending proposals to follower\r\n2017-11-16 03:03:21,103 [myid:2] - INFO  [LearnerHandler-/127.0.0.1:46967:LearnerHandler@475] - Sending DIFF\r\n2017-11-16 03:03:21,156 [myid:2] - INFO  [NIOServerCxn.Factory:0.0.0.0/0.0.0.0:11227:NIOServerCnxnFactory@215] - Accepted socket connection from /127.0.0.1:49611\r\n2017-11-16 03:03:21,178 [myid:2] - INFO  [LearnerHandler-/127.0.0.1:46967:LearnerHandler@535] - Received NEWLEADER-ACK message from 1\r\n2017-11-16 03:03:21,178 [myid:2] - INFO  [QuorumPeer[myid=2]/0:0:0:0:0:0:0:0:11227:Leader@962] - Have quorum of supporters, sids: [ 1,2 ]; starting up and setting last processed zxid: 0x600000000\r\n2017-11-16 03:03:21,196 [myid:2] - WARN  [NIOServerCxn.Factory:0.0.0.0/0.0.0.0:11227:NIOServerCnxn@383] - Exception causing close of session 0x0: ZooKeeperServer not running\r\n2017-11-16 03:03:21,196 [myid:2] - DEBUG [NIOServerCxn.Factory:0.0.0.0/0.0.0.0:11227:NIOServerCnxn@386] - IOException stack trace\r\njava.io.IOException: ZooKeeperServer not running\r\n        at org.apache.zookeeper.server.NIOServerCnxn.readLength(NIOServerCnxn.java:977)\r\n        at org.apache.zookeeper.server.NIOServerCnxn.doIO(NIOServerCnxn.java:257)\r\n        at org.apache.zookeeper.server.NIOServerCnxnFactory.run(NIOServerCnxnFactory.java:226)\r\n        at java.lang.Thread.run(Thread.java:745)\r\n2017-11-16 03:03:21,196 [myid:2] - INFO  [NIOServerCxn.Factory:0.0.0.0/0.0.0.0:11227:NIOServerCnxn@1040] - Closed socket connection for client /127.0.0.1:49611 (no session established for client)\r\n2017-11-16 03:03:21,237 [myid:2] - DEBUG [LearnerHandler-/127.0.0.1:46967:Leader@579] - outstanding is 0\r\n...\r\n{panel}\r\n{panel}\r\n{panel:title=Log from the node 1:}\r\n…\r\n2017-11-16 03:03:21,034 [myid:1] - INFO  [QuorumPeer[myid=1]/0:0:0:0:0:0:0:0:11224:Follower@65] - FOLLOWING - LEADER ELECTION TOOK - 222\r\n2017-11-16 03:03:21,035 [myid:1] - INFO  [QuorumPeer[myid=1]/0:0:0:0:0:0:0:0:11224:QuorumPeer$QuorumServer@184] - Resolved hostname: 127.0.0.1 to address: /127.0.0.1\r\n2017-11-16 03:03:21,104 [myid:1] - INFO  [QuorumPeer[myid=1]/0:0:0:0:0:0:0:0:11224:Learner@332] - Getting a diff from the leader 0x500000004\r\n2017-11-16 03:03:21,105 [myid:1] - WARN  [QuorumPeer[myid=1]/0:0:0:0:0:0:0:0:11224:Learner@387] - Got zxid 0x500000004 expected 0x1\r\n2017-11-16 03:03:21,189 [myid:1] - INFO  [SyncThread:1:FileTxnLog@209] - Creating new log file: log.500000004\r\n2017-11-16 03:03:21,189 [myid:1] - DEBUG [QuorumPeer[myid=1]/0:0:0:0:0:0:0:0:11224:CommitProcessor@164] - Committing request:: sessionid:0x2000111082b0000 type:setData cxid:0x4 zxid:0x500000004 txntype:5 reqpath:n/a\r\n2017-11-16 03:03:21,189 [myid:1] - DEBUG [CommitProcessor:1:FinalRequestProcessor@89] - Processing request:: sessionid:0x2000111082b0000 type:setData cxid:0x4 zxid:0x500000004 txntype:5 reqpath:n/a\r\n...\r\n{panel}","customfield_10010":null,"timetracking":{},"customfield_12312026":null,"customfield_12312023":null,"customfield_12312024":null,"customfield_12312340":null,"attachment":[{"self":"https://issues.apache.org/jira/rest/api/2/attachment/12899473","id":"12899473","filename":"zookeeper-2945.patch","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=benkim","name":"benkim","key":"benkim","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Beom Heyn Kim","active":true,"timeZone":"America/Toronto"},"created":"2017-11-27T19:21:11.982+0000","size":898,"mimeType":"text/x-patch","content":"https://issues.apache.org/jira/secure/attachment/12899473/zookeeper-2945.patch"}],"aggregatetimeestimate":null,"customfield_12312341":null,"customfield_12312220":null,"customfield_12312022":null,"customfield_12310921":null,"customfield_12310920":"9223372036854775807","customfield_12312823":null,"summary":"Synchronization code on the follower does not properly truncate uncommitted write resulting in data inconsistency","creator":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=benkim","name":"benkim","key":"benkim","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Beom Heyn Kim","active":true,"timeZone":"America/Toronto"},"subtasks":[],"customfield_12310291":null,"reporter":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=benkim","name":"benkim","key":"benkim","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Beom Heyn Kim","active":true,"timeZone":"America/Toronto"},"customfield_12310290":null,"aggregateprogress":{"progress":0,"total":0},"customfield_12311024":null,"environment":null,"customfield_12313520":null,"customfield_12311020":null,"duedate":null,"customfield_12310250":null,"progress":{"progress":0,"total":0},"comment":{"comments":[{"self":"https://issues.apache.org/jira/rest/api/2/issue/13119577/comment/16267300","id":"16267300","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=benkim","name":"benkim","key":"benkim","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Beom Heyn Kim","active":true,"timeZone":"America/Toronto"},"body":"When the follower receives SNAP from the leader, it should also try to truncate transactions later than the zxid of the Snapshot from the leader.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=benkim","name":"benkim","key":"benkim","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Beom Heyn Kim","active":true,"timeZone":"America/Toronto"},"created":"2017-11-27T19:22:25.663+0000","updated":"2017-11-27T19:22:25.663+0000"}],"maxResults":1,"total":1,"startAt":0},"votes":{"self":"https://issues.apache.org/jira/rest/api/2/issue/ZOOKEEPER-2945/votes","votes":1,"hasVoted":false},"worklog":{"startAt":0,"maxResults":20,"total":0,"worklogs":[]},"customfield_12311820":"0|i3mzkf:"}}