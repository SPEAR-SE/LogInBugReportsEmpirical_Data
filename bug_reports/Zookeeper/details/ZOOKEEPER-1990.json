{"expand":"renderedFields,names,schema,operations,editmeta,changelog,versionedRepresentations","id":"12729985","self":"https://issues.apache.org/jira/rest/api/2/issue/12729985","key":"ZOOKEEPER-1990","fields":{"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype","name":"Bug","subtask":false,"avatarId":21133},"timespent":600,"project":{"self":"https://issues.apache.org/jira/rest/api/2/project/12310801","id":"12310801","key":"ZOOKEEPER","name":"ZooKeeper","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/projectavatar?pid=12310801&avatarId=10011","24x24":"https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12310801&avatarId=10011","16x16":"https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12310801&avatarId=10011","32x32":"https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12310801&avatarId=10011"},"projectCategory":{"self":"https://issues.apache.org/jira/rest/api/2/projectCategory/10484","id":"10484","description":"Apache ZooKeeper related","name":"ZooKeeper"}},"fixVersions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12326518","id":"12326518","name":"3.6.0","archived":false,"released":false},{"self":"https://issues.apache.org/jira/rest/api/2/version/12343268","id":"12343268","description":"Beta release against 3.5 branch","name":"3.5.5","archived":false,"released":false}],"aggregatetimespent":600,"resolution":null,"customfield_12312322":null,"customfield_12310220":"2014-07-26T02:31:05.711+0000","customfield_12312520":null,"customfield_12312323":null,"customfield_12312521":"Mon Sep 03 14:11:01 UTC 2018","customfield_12310420":"408058","customfield_12312320":null,"customfield_12310222":null,"customfield_12312321":null,"resolutiondate":null,"workratio":-1,"customfield_12312328":null,"customfield_12312329":null,"customfield_12312923":null,"customfield_12312326":null,"customfield_12312920":null,"customfield_12310300":null,"customfield_12312327":null,"customfield_12312921":null,"customfield_12312324":null,"customfield_12312720":null,"customfield_12312325":null,"lastViewed":null,"watches":{"self":"https://issues.apache.org/jira/rest/api/2/issue/ZOOKEEPER-1990/watchers","watchCount":6,"isWatching":false},"created":"2014-07-25T23:33:44.746+0000","customfield_12310192":null,"customfield_12310191":null,"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/2","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/critical.svg","name":"Critical","id":"2"},"labels":["pull-request-available"],"customfield_12312333":null,"customfield_12310230":null,"customfield_12312334":null,"customfield_12313422":"false","customfield_12310310":"0.0","customfield_12312331":null,"customfield_12312332":null,"timeestimate":0,"aggregatetimeoriginalestimate":null,"customfield_12311120":null,"customfield_12312330":null,"versions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12316644","id":"12316644","description":"Dynamic Reconfig, Remove Watches, Local Session","name":"3.5.0","archived":false,"released":true,"releaseDate":"2014-08-04"}],"issuelinks":[],"customfield_12312339":null,"assignee":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=nkalmar","name":"nkalmar","key":"nkalmar","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=nkalmar&avatarId=35265","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=nkalmar&avatarId=35265","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=nkalmar&avatarId=35265","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=nkalmar&avatarId=35265"},"displayName":"Norbert Kalmar","active":true,"timeZone":"Etc/UTC"},"customfield_12312337":null,"customfield_12312338":null,"updated":"2018-09-03T14:11:01.398+0000","customfield_12312335":null,"customfield_12312336":null,"status":{"self":"https://issues.apache.org/jira/rest/api/2/status/3","description":"This issue is being actively worked on at the moment by the assignee.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/inprogress.png","name":"In Progress","id":"3","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/4","id":4,"key":"indeterminate","colorName":"yellow","name":"In Progress"}},"components":[],"timeoriginalestimate":null,"description":"It's not clear to me why we are doing this, but it looks very suspicious. Why aren't we just calling \"new Random()\" in these cases? (even for the tests I don't really see it - typically that would just be for repeatability)\n\n{noformat}\nag \"new Random[ \\t]*\\(\" .\nsrc/java/main/org/apache/zookeeper/ClientCnxn.java\n817:        private Random r = new Random(System.nanoTime());        \n\nsrc/java/main/org/apache/zookeeper/client/StaticHostProvider.java\n75:       sourceOfRandomness = new Random(System.currentTimeMillis() ^ this.hashCode());\n98:        sourceOfRandomness = new Random(randomnessSeed);\n\nsrc/java/main/org/apache/zookeeper/server/quorum/AuthFastLeaderElection.java\n420:                rand = new Random(java.lang.Thread.currentThread().getId()\n\nsrc/java/main/org/apache/zookeeper/server/SyncRequestProcessor.java\n64:    private final Random r = new Random(System.nanoTime());\n\nsrc/java/main/org/apache/zookeeper/server/ZooKeeperServer.java\n537:        Random r = new Random(id ^ superSecret);\n554:        Random r = new Random(sessionId ^ superSecret);\n\nsrc/java/test/org/apache/zookeeper/server/quorum/WatchLeakTest.java\n271:        Random r = new Random(SESSION_ID ^ superSecret);\n\nsrc/java/test/org/apache/zookeeper/server/quorum/CommitProcessorTest.java\n151:            Random rand = new Random(Thread.currentThread().getId());\n258:            Random rand = new Random(Thread.currentThread().getId());\n288:        Random rand = new Random(Thread.currentThread().getId());\n\nsrc/java/test/org/apache/zookeeper/test/StaticHostProviderTest.java\n40:    private Random r = new Random(1);\n\n{noformat}\n","customfield_10010":null,"timetracking":{"remainingEstimate":"0h","timeSpent":"10m","remainingEstimateSeconds":0,"timeSpentSeconds":600},"customfield_12312026":null,"customfield_12312023":null,"customfield_12312024":null,"customfield_12312340":null,"attachment":[],"aggregatetimeestimate":0,"customfield_12312341":null,"customfield_12312220":null,"customfield_12312022":null,"customfield_12310921":null,"customfield_12310920":"408066","customfield_12312823":null,"summary":"suspicious instantiation of java Random instances","creator":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=phunt","name":"phunt","key":"phunt","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Patrick Hunt","active":true,"timeZone":"America/Los_Angeles"},"subtasks":[],"customfield_12310291":null,"reporter":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=phunt","name":"phunt","key":"phunt","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Patrick Hunt","active":true,"timeZone":"America/Los_Angeles"},"customfield_12310290":null,"aggregateprogress":{"progress":600,"total":600,"percent":100},"customfield_12311024":null,"environment":null,"customfield_12313520":null,"customfield_12311020":null,"duedate":null,"customfield_12310250":null,"progress":{"progress":600,"total":600,"percent":100},"comment":{"comments":[{"self":"https://issues.apache.org/jira/rest/api/2/issue/12729985/comment/14075231","id":"14075231","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=shralex","name":"shralex","key":"shralex","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Alexander Shraer","active":true,"timeZone":"America/Los_Angeles"},"body":"Regarding StaticHostProvider.java - Randomness stuff was introduced in ZK-1355 to make sure that each client has a different permutation of the servers, and that client-side rebalancing after reconfig ends up with equal load.\n\n75:       sourceOfRandomness = new Random(System.currentTimeMillis() ^ this.hashCode());\n\nIf I remember correctly the goal here is to make sure that when multiple client threads start at the same time on the same machine (such as in our systest) and execute this line each one is likely to have a different random seed. \n\nsrc/java/test/org/apache/zookeeper/test/StaticHostProviderTest.java\n40:    private Random r = new Random(1);\nsrc/java/main/org/apache/zookeeper/client/StaticHostProvider.java\n98:        sourceOfRandomness = new Random(randomnessSeed);\n\nThese two are only used in tests. I want repeatable results, hence the seed of 1. But I still want each client to have a StaticHostProvider that creates a unique permutation, so I pass the StaticHostProvider a randomness seed like this:\n\n    private StaticHostProvider getHostProvider(byte size) {\n        return new StaticHostProvider(getServerAddresses(size), r.nextLong());\n    }\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=shralex","name":"shralex","key":"shralex","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Alexander Shraer","active":true,"timeZone":"America/Los_Angeles"},"created":"2014-07-26T02:31:05.711+0000","updated":"2014-07-26T02:31:05.711+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12729985/comment/14075435","id":"14075435","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=phunt","name":"phunt","key":"phunt","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Patrick Hunt","active":true,"timeZone":"America/Los_Angeles"},"body":"Thanks [~shralex], that makes sense. We should incorporate those comments into this patch for future reference.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=phunt","name":"phunt","key":"phunt","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Patrick Hunt","active":true,"timeZone":"America/Los_Angeles"},"created":"2014-07-26T17:16:14.427+0000","updated":"2014-07-26T17:16:14.427+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12729985/comment/16365987","id":"16365987","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=shralex","name":"shralex","key":"shralex","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Alexander Shraer","active":true,"timeZone":"America/Los_Angeles"},"body":"Please don't change the StaticHostProvider and StaticHostProviderTest instantiations of random.\r\n\r\nThis is done to test the client rebalancing algorithm. The test creates thousands of clients roughly at the same time, but each client has to have a different random number for the algorithm to work. \r\n\r\nAlso, just curious, why is this marked as a Critical Bug ?\r\n\r\n ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=shralex","name":"shralex","key":"shralex","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Alexander Shraer","active":true,"timeZone":"America/Los_Angeles"},"created":"2018-02-15T17:34:26.528+0000","updated":"2018-02-15T17:34:26.528+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12729985/comment/16365999","id":"16365999","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=shralex","name":"shralex","key":"shralex","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Alexander Shraer","active":true,"timeZone":"America/Los_Angeles"},"body":"Oh, I see that I already wrote the same above 4 years ago. Time flies :)","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=shralex","name":"shralex","key":"shralex","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Alexander Shraer","active":true,"timeZone":"America/Los_Angeles"},"created":"2018-02-15T17:41:27.852+0000","updated":"2018-02-15T17:41:27.852+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12729985/comment/16406301","id":"16406301","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mfenes","name":"mfenes","key":"mfenes","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mark Fenes","active":true,"timeZone":"Europe/Budapest"},"body":"[~shralex] According to Random's source, the parameterless instantiation of Random (new Random()) does the following:\r\n{code:java}\r\npublic Random() {\r\n    this(seedUniquifier() ^ System.nanoTime());\r\n}{code}\r\n\r\nThe above looks to me at least as random as\r\n\r\n{code:java}\r\nsourceOfRandomness = new Random(System.currentTimeMillis() ^ this.hashCode());\r\n{code}\r\n\r\nor probably new Random() is even more random, as seedUniquifier() seems to be different each time, but this.hashCode() returns the same value if the same StaticHostProvider instance is used.\r\n\r\nI understand those cases, when in tests, we would like to have the same repeatable results (e.g. when new Random(1) is used), but what is the purpose of setting a less random seed (e.g. sessionId ^ superSecret) instead of using new Random(), which appears to be more random?\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mfenes","name":"mfenes","key":"mfenes","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mark Fenes","active":true,"timeZone":"Europe/Budapest"},"created":"2018-03-20T13:14:57.798+0000","updated":"2018-03-20T13:14:57.798+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12729985/comment/16411491","id":"16411491","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=andorm","name":"andorm","key":"andorm","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=andorm&avatarId=32935","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andorm&avatarId=32935","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andorm&avatarId=32935","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andorm&avatarId=32935"},"displayName":"Andor Molnar","active":true,"timeZone":"Europe/Budapest"},"body":"[~shralex]\r\n\r\nI understand the Random(1) call in tests and why it's necessary to make this injectable in StaticHostProvider.\r\n\r\nThe question is if tests are not involved why do you instantiate Random like this:\r\n{code:java}\r\nnew Random(System.currentTimeMillis() ^ this.hashCode());\r\n{code}\r\nInstead of using the default constructor which gives better randomness.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=andorm","name":"andorm","key":"andorm","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=andorm&avatarId=32935","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andorm&avatarId=32935","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andorm&avatarId=32935","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andorm&avatarId=32935"},"displayName":"Andor Molnar","active":true,"timeZone":"Europe/Budapest"},"created":"2018-03-23T14:40:20.969+0000","updated":"2018-03-23T14:40:20.969+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12729985/comment/16411671","id":"16411671","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=shralex","name":"shralex","key":"shralex","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Alexander Shraer","active":true,"timeZone":"America/Los_Angeles"},"body":"Hi Andor,\r\n\r\nAt some point, I was doing experiments to evaluate the client load-balancing across servers.\r\n\r\nIn these experiments I was running thousands of clients on the same host. I don't really remember,\r\n\r\nbut this must have been needed to improve load balance. You can do an experiment - spawn thousands\r\n\r\nof threads in a test function at the same time and see if there are some seeds that are more frequent then others.\r\n\r\nIf this shows that Random() is sufficient, lets use it.\r\n\r\nSame reason for tests (besides being deterministic, which is also a reason) - the test is doing exactly that - spawns\r\n\r\ntons of clients at the same time, so if I remember correctly it didn't work using Random(). But - you're welcome to test\r\n\r\nit and see.\r\n\r\n \r\n\r\nAlex \r\n\r\n ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=shralex","name":"shralex","key":"shralex","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Alexander Shraer","active":true,"timeZone":"America/Los_Angeles"},"created":"2018-03-23T16:35:28.950+0000","updated":"2018-03-23T16:35:28.950+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12729985/comment/16411700","id":"16411700","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=andorm","name":"andorm","key":"andorm","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=andorm&avatarId=32935","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andorm&avatarId=32935","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andorm&avatarId=32935","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andorm&avatarId=32935"},"displayName":"Andor Molnar","active":true,"timeZone":"Europe/Budapest"},"body":"Got that, thanks for the detail explanation.\r\n\r\nI'll give it a try.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=andorm","name":"andorm","key":"andorm","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=andorm&avatarId=32935","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andorm&avatarId=32935","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andorm&avatarId=32935","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andorm&avatarId=32935"},"displayName":"Andor Molnar","active":true,"timeZone":"Europe/Budapest"},"created":"2018-03-23T16:52:57.160+0000","updated":"2018-03-23T16:52:57.160+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12729985/comment/16412656","id":"16412656","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=eribeiro","name":"eribeiro","key":"eribeiro","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=eribeiro&avatarId=16169","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=eribeiro&avatarId=16169","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=eribeiro&avatarId=16169","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=eribeiro&avatarId=16169"},"displayName":"Edward Ribeiro","active":true,"timeZone":"America/Sao_Paulo"},"body":"As you are tackling this issue, it would be nice to evaluate the use of ThreadLocalRandom ( [https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ThreadLocalRandom.html] ) instead of Random, if possible. It's been available since JDK7 and offers less contention and overhead.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=eribeiro","name":"eribeiro","key":"eribeiro","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=eribeiro&avatarId=16169","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=eribeiro&avatarId=16169","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=eribeiro&avatarId=16169","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=eribeiro&avatarId=16169"},"displayName":"Edward Ribeiro","active":true,"timeZone":"America/Sao_Paulo"},"created":"2018-03-24T15:17:00.190+0000","updated":"2018-03-24T15:17:00.190+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12729985/comment/16515800","id":"16515800","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=nkalmar","name":"nkalmar","key":"nkalmar","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=nkalmar&avatarId=35265","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=nkalmar&avatarId=35265","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=nkalmar&avatarId=35265","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=nkalmar&avatarId=35265"},"displayName":"Norbert Kalmar","active":true,"timeZone":"Etc/UTC"},"body":"Are you still working on this [~mfenes]? \r\nI can take this over and have a look.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=nkalmar","name":"nkalmar","key":"nkalmar","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=nkalmar&avatarId=35265","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=nkalmar&avatarId=35265","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=nkalmar&avatarId=35265","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=nkalmar&avatarId=35265"},"displayName":"Norbert Kalmar","active":true,"timeZone":"Etc/UTC"},"created":"2018-06-18T14:43:20.388+0000","updated":"2018-06-18T14:43:20.388+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12729985/comment/16578285","id":"16578285","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=nkalmar","name":"nkalmar","key":"nkalmar","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=nkalmar&avatarId=35265","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=nkalmar&avatarId=35265","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=nkalmar&avatarId=35265","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=nkalmar&avatarId=35265"},"displayName":"Norbert Kalmar","active":true,"timeZone":"Etc/UTC"},"body":"The options mentioned in this ticket (and basically these are the only options in the JDK):\r\n- call Random() -> yes, since java 7, it uses this(seedUniquifier() ^ System.nanoTime()); - This should give randomly distributed  uncorrelated seeds even after subsequent initializations and across different threads.\r\n- The currently used \"new Random(System.currentTimeMillis() ^ this.hashCode());\" - basically yields the same results as the Random() call\r\n- ThreadLocalRandom - it has a Random instance per thread - so basically safeguards against multiple threads using the same Random instance, which we already making sure to use different instances. (Otherwise System.currentTimeMillis() ^ this.hashCode() would be useless as well). One downside is you cannot control the initial seed. But I don't think that's a problem.\r\n\r\nThinking about it, using new Random() with System.currentTimeMillis() does look like it is much more correlated then just calling Random(). \r\n\r\nWe could also change it to ThreadLocalRandom if needed, but I just don't see the advantages this would bring (other then it would be more \"fail-safe\" in terms of future refactor / modification - which might be a valid reason to still go with the changes).\r\n\r\nI will do some tests with changing the mentioned calls to Random() and I will post my results.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=nkalmar","name":"nkalmar","key":"nkalmar","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=nkalmar&avatarId=35265","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=nkalmar&avatarId=35265","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=nkalmar&avatarId=35265","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=nkalmar&avatarId=35265"},"displayName":"Norbert Kalmar","active":true,"timeZone":"Etc/UTC"},"created":"2018-08-13T13:34:41.071+0000","updated":"2018-08-13T13:38:43.562+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12729985/comment/16579863","id":"16579863","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=nkalmar","name":"nkalmar","key":"nkalmar","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=nkalmar&avatarId=35265","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=nkalmar&avatarId=35265","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=nkalmar&avatarId=35265","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=nkalmar&avatarId=35265"},"displayName":"Norbert Kalmar","active":true,"timeZone":"Etc/UTC"},"body":"[~phunt] what do you think? - using just new Random() everywhere except  in StaticHostProvider where we can keep new Random(System.currentTimeMillis() ^ this.hashCode());","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=nkalmar","name":"nkalmar","key":"nkalmar","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=nkalmar&avatarId=35265","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=nkalmar&avatarId=35265","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=nkalmar&avatarId=35265","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=nkalmar&avatarId=35265"},"displayName":"Norbert Kalmar","active":true,"timeZone":"Etc/UTC"},"created":"2018-08-14T14:17:19.538+0000","updated":"2018-08-14T14:17:19.538+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12729985/comment/16581380","id":"16581380","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=eribeiro","name":"eribeiro","key":"eribeiro","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=eribeiro&avatarId=16169","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=eribeiro&avatarId=16169","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=eribeiro&avatarId=16169","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=eribeiro&avatarId=16169"},"displayName":"Edward Ribeiro","active":true,"timeZone":"America/Sao_Paulo"},"body":"Hi [~nkalmar], I raised the possibility of using _ThreadLocalRandom_, so my two cents: we can call _Random()_ (option 1), imo. _ThreadLocalRandom_ advantage is avoiding thread contention and overhead of sharing a global math.Random among many threads, but I don't think this is a issue with current ZK codebase.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=eribeiro","name":"eribeiro","key":"eribeiro","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=eribeiro&avatarId=16169","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=eribeiro&avatarId=16169","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=eribeiro&avatarId=16169","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=eribeiro&avatarId=16169"},"displayName":"Edward Ribeiro","active":true,"timeZone":"America/Sao_Paulo"},"created":"2018-08-15T17:21:07.934+0000","updated":"2018-08-15T17:21:07.934+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12729985/comment/16588546","id":"16588546","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=nkalmar","name":"nkalmar","key":"nkalmar","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=nkalmar&avatarId=35265","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=nkalmar&avatarId=35265","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=nkalmar&avatarId=35265","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=nkalmar&avatarId=35265"},"displayName":"Norbert Kalmar","active":true,"timeZone":"Etc/UTC"},"body":"Hi [~eribeiro], thanks for the update.\r\nYes, it looks like we create a new Random instance every time anyway.\r\nThe only thing that bothers mi a bit personally is why we use \" new Random(System.nanoTime())\" why not empty constructor instead, it is more random as it gets a different seed even if called at the same time.\r\nSo this is the only thing I would change. Perheps also the session generation of new Random(sessionId ^ superSecret), in the comments, superSecret is supposed to be used only for password generation.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=nkalmar","name":"nkalmar","key":"nkalmar","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=nkalmar&avatarId=35265","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=nkalmar&avatarId=35265","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=nkalmar&avatarId=35265","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=nkalmar&avatarId=35265"},"displayName":"Norbert Kalmar","active":true,"timeZone":"Etc/UTC"},"created":"2018-08-22T08:28:13.291+0000","updated":"2018-08-22T08:28:13.291+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12729985/comment/16602208","id":"16602208","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"body":"+1 overall.  GitHub Pull Request  Build\n      \n\n    +1 @author.  The patch does not contain any @author tags.\n\n    +0 tests included.  The patch appears to be a documentation patch that doesn't require tests.\n\n    +1 javadoc.  The javadoc tool did not generate any warning messages.\n\n    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.\n\n    +1 findbugs.  The patch does not introduce any new Findbugs (version 3.0.1) warnings.\n\n    +1 release audit.  The applied patch does not increase the total number of release audit warnings.\n\n    +1 core tests.  The patch passed core unit tests.\n\n    +1 contrib tests.  The patch passed contrib unit tests.\n\nTest results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/2114//testReport/\nFindbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/2114//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html\nConsole output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/2114//console\n\nThis message is automatically generated.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"created":"2018-09-03T14:11:01.398+0000","updated":"2018-09-03T14:11:01.398+0000"}],"maxResults":15,"total":15,"startAt":0},"votes":{"self":"https://issues.apache.org/jira/rest/api/2/issue/ZOOKEEPER-1990/votes","votes":0,"hasVoted":false},"worklog":{"startAt":0,"maxResults":20,"total":1,"worklogs":[{"self":"https://issues.apache.org/jira/rest/api/2/issue/12729985/worklog/140567","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"comment":"GitHub user nkalmar opened a pull request:\n\n    https://github.com/apache/zookeeper/pull/617\n\n    ZOOKEEPER-1990 - fix Random instances\n\n    See the jira for more info.\r\n    \r\n    Basically we have multiple ways of creating Random instances in ZooKeeper. Since java 1.7, the default constructor is good enough even in multi-threaded environment, we get a good seed.\r\n    But in some places, we just create a random instance, where System.nanotime is the seed, which is not a good practice in multi-threaded environments. \r\n    \r\n    I only replaced those, and I also left the tests as is, because in some cases it is intentional in them.\r\n    \r\n    I created the PR to bring more attention to the ticket, please feel free to share your ideas on the topic!\n\nYou can merge this pull request into a Git repository by running:\n\n    $ git pull https://github.com/nkalmar/zookeeper ZOOKEEPER-1990\n\nAlternatively you can review and apply these changes as the patch at:\n\n    https://github.com/apache/zookeeper/pull/617.patch\n\nTo close this pull request, make a commit to your master/trunk branch\nwith (at least) the following in the commit message:\n\n    This closes #617\n    \n----\ncommit 4bbb8470ecd1445761c1091c49b9188e15e8c06c\nAuthor: Norbert Kalmar <nkalmar@...>\nDate:   2018-09-03T13:49:26Z\n\n    ZOOKEEPER-1990 - fix Random instances\n\n----\n","created":"2018-09-03T13:52:32.081+0000","updated":"2018-09-03T13:52:32.081+0000","started":"2018-09-03T13:52:32.080+0000","timeSpent":"10m","timeSpentSeconds":600,"id":"140567","issueId":"12729985"}]},"customfield_12311820":"0|i1y7rr:"}}