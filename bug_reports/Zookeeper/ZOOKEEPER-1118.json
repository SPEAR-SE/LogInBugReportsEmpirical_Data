{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "fields": {
        "aggregateprogress": {
            "progress": 0,
            "total": 0
        },
        "aggregatetimeestimate": null,
        "aggregatetimeoriginalestimate": null,
        "aggregatetimespent": null,
        "assignee": null,
        "components": [{
            "description": "Quorum determination for ZooKeeper",
            "id": "12312379",
            "name": "quorum",
            "self": "https://issues.apache.org/jira/rest/api/2/component/12312379"
        }],
        "created": "2011-07-06T02:56:31.000+0000",
        "creator": {
            "active": true,
            "avatarUrls": {
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452",
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452"
            },
            "displayName": "Kurt Young",
            "key": "ykt836",
            "name": "ykt836",
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=ykt836",
            "timeZone": "Asia/Shanghai"
        },
        "customfield_10010": null,
        "customfield_12310191": null,
        "customfield_12310192": null,
        "customfield_12310220": "2011-07-06T13:32:33.903+0000",
        "customfield_12310222": "1_*:*_1_*:*_38184004_*|*_5_*:*_1_*:*_0",
        "customfield_12310230": null,
        "customfield_12310250": null,
        "customfield_12310290": null,
        "customfield_12310291": null,
        "customfield_12310300": null,
        "customfield_12310310": "0.0",
        "customfield_12310420": "3992",
        "customfield_12310920": "32711",
        "customfield_12310921": null,
        "customfield_12311020": null,
        "customfield_12311024": null,
        "customfield_12311120": null,
        "customfield_12311820": "0|i05yn3:",
        "customfield_12312022": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "customfield_12312026": null,
        "customfield_12312220": null,
        "customfield_12312320": null,
        "customfield_12312321": null,
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312324": null,
        "customfield_12312325": null,
        "customfield_12312326": null,
        "customfield_12312327": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312330": null,
        "customfield_12312331": null,
        "customfield_12312332": null,
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12312335": null,
        "customfield_12312336": null,
        "customfield_12312337": null,
        "customfield_12312338": null,
        "customfield_12312339": null,
        "customfield_12312340": null,
        "customfield_12312341": null,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Jul 07 01:11:17 UTC 2011",
        "customfield_12312720": null,
        "customfield_12312823": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "customfield_12312923": null,
        "customfield_12313422": "false",
        "customfield_12313520": null,
        "description": "I think there is a bug when Follower try to sync data with Leader.\nAssume there are some operations committed during one server had been crashed. When the server restart, it will receive a NEWLEADER packet which include the last zxid of leader and the server will set its own lastProcessZxid to the leader's. \n{code:title=Follower.java|borderStyle=solid}\nvoid followLeader() throws InterruptedException {\n    fzk.registerJMX(new FollowerBean(this, zk), self.jmxLocalPeerBean);\n    try {\n        InetSocketAddress addr = findLeader();\n        try {\n            connectToLeader(addr);\n            long newLeaderZxid = registerWithLeader(Leader.FOLLOWERINFO);  // get the last zxid from leader\n            //check to see if the leader zxid is lower than ours                                                                                          \n            //this should never happen but is just a safety check                                                                                         \n            long lastLoggedZxid = self.getLastLoggedZxid();\n            if ((newLeaderZxid >> 32L) < (lastLoggedZxid >> 32L)) {\n                LOG.fatal(\"Leader epoch \" + Long.toHexString(newLeaderZxid >> 32L)\n                        + \" is less than our epoch \" + Long.toHexString(lastLoggedZxid >> 32L));\n                throw new IOException(\"Error: Epoch of leader is lower\");\n            }\n            syncWithLeader(newLeaderZxid);   // set its own lastProcessZxid to leader's last zxid\n{code}\n\nThen, some COMMIT packets will be received by the server in order to sync the data with leader. And then, the leader will send an UPTODATE packet to server to take a snapshot. \n{code:title=Follower.java|borderStyle=solid}\nprotected void processPacket(QuorumPacket qp) throws IOException{\n    switch (qp.getType()) {\n    case Leader.PING:\n        ping(qp);\n        break;\n    case Leader.PROPOSAL:\n        TxnHeader hdr = new TxnHeader();\n        BinaryInputArchive ia = BinaryInputArchive\n        .getArchive(new ByteArrayInputStream(qp.getData()));\n        Record txn = SerializeUtils.deserializeTxn(ia, hdr);\n        if (hdr.getZxid() != lastQueued + 1) {\n            LOG.warn(\"Got zxid 0x\"\n                    + Long.toHexString(hdr.getZxid())\n                    + \" expected 0x\"\n                    + Long.toHexString(lastQueued + 1));\n        }\n        lastQueued = hdr.getZxid();\n        fzk.logRequest(hdr, txn);\n        break;\n    case Leader.COMMIT:\n        fzk.commit(qp.getZxid());\n        break;\n    case Leader.UPTODATE:\n        fzk.takeSnapshot();\n        self.cnxnFactory.setZooKeeperServer(fzk);\n        break;\n    case Leader.REVALIDATE:\n        revalidate(qp);\n        break;\n    case Leader.SYNC:\n        fzk.sync();\n        break;\n    }\n}\n{code}\nNotice the different way the Follower treat the COMMIT and the UPTODATE packets. When receives a COMMIT packet, the follower will give this to a processor to deal with. But if receives a UPTODATE packet, the follower will take a snapshot immediately. So it is possible that the server will take snapshot before it commits all the operations it missed. Then if the server crashed again and recoveredï¼Œ it will recover its data from the snapshot, so the date inconsistent with the leader now, but its last zxid is the same. ",
        "duedate": null,
        "environment": "Redhat RHEL5",
        "fixVersions": [],
        "issuelinks": [],
        "issuetype": {
            "avatarId": 21133,
            "description": "A problem which impairs or prevents the functions of the product.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
            "id": "1",
            "name": "Bug",
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
            "subtask": false
        },
        "labels": [],
        "lastViewed": null,
        "priority": {
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/critical.svg",
            "id": "2",
            "name": "Critical",
            "self": "https://issues.apache.org/jira/rest/api/2/priority/2"
        },
        "progress": {
            "progress": 0,
            "total": 0
        },
        "project": {
            "avatarUrls": {
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12310801&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12310801&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12310801&avatarId=10011",
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12310801&avatarId=10011"
            },
            "id": "12310801",
            "key": "ZOOKEEPER",
            "name": "ZooKeeper",
            "projectCategory": {
                "description": "Apache ZooKeeper related",
                "id": "10484",
                "name": "ZooKeeper",
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/10484"
            },
            "self": "https://issues.apache.org/jira/rest/api/2/project/12310801"
        },
        "reporter": {
            "active": true,
            "avatarUrls": {
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452",
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452"
            },
            "displayName": "Kurt Young",
            "key": "ykt836",
            "name": "ykt836",
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=ykt836",
            "timeZone": "Asia/Shanghai"
        },
        "resolution": {
            "description": "The problem is a duplicate of an existing issue.",
            "id": "3",
            "name": "Duplicate",
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/3"
        },
        "resolutiondate": "2011-07-06T13:32:55.000+0000",
        "status": {
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "id": "5",
            "name": "Resolved",
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "statusCategory": {
                "colorName": "green",
                "id": 3,
                "key": "done",
                "name": "Done",
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3"
            }
        },
        "subtasks": [],
        "summary": "Inconsistent data after server crashes several times",
        "timeestimate": null,
        "timeoriginalestimate": null,
        "timespent": null,
        "updated": "2011-07-07T01:11:17.000+0000",
        "versions": [{
            "archived": false,
            "description": "Fix release against 3.3 branch",
            "id": "12315108",
            "name": "3.3.2",
            "releaseDate": "2010-11-11",
            "released": true,
            "self": "https://issues.apache.org/jira/rest/api/2/version/12315108"
        }],
        "votes": {
            "hasVoted": false,
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ZOOKEEPER-1118/votes",
            "votes": 0
        },
        "watches": {
            "isWatching": false,
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ZOOKEEPER-1118/watchers",
            "watchCount": 0
        },
        "workratio": -1
    },
    "id": "12512918",
    "key": "ZOOKEEPER-1118",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/12512918"
}