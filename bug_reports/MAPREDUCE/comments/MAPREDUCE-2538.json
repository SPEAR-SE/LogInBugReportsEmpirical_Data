[Provided patch to write unique keys from all partitions., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12485400/MAPREDUCE-2538.patch
  against trunk revision 1143252.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed these core unit tests:
                  org.apache.hadoop.cli.TestMRCLI
                  org.apache.hadoop.fs.TestFileSystem
                  org.apache.hadoop.mapred.TestDebugScript

    -1 contrib tests.  The patch failed contrib unit tests.

    +1 system test framework.  The patch passed system test framework compile.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/436//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/436//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/436//console

This message is automatically generated., These test case failures are not related to this patch., not sure about this patch -- it seems it now can result in a partition filer that's "valid", but has fewer partitions than the user has specified, right?, bq.not sure about this patch – it seems it now can result in a partition filer that's "valid", but has fewer partitions than the user has specified, right?
If continuous two or more partitions contain same elements, then it will write fewer elements than the user specified.
    If the two continuous partitions have all elements are same, then it will take one element from first partition other one will skip because it cannot write the duplicate element.

Here taking the last before element in the partition which is not equal to the previously written element. Because if we take the last element in the partition, there may be chance of having all the elements in the next partition equal to that element and we may not get any element in that partition.

Example 1:
If sample output is ‘1, 2, 3, 4’,  ‘5, 6, 7, 7’,   ‘8, 9, 10, 11’,  ‘11, 11, 11, 11’,   ‘12, 13, 14, 15’ and no. of partitions is 5, then it gives the result as ‘3, 6, 10, 11, 14’ after applying the patch.



Example 2:
If sample output is ‘1, 2, 3, 4’,  ‘5, 6, 7, 7’,   ‘8, 9, 10, 11’, ‘ 11, 11, 11, 11’,  ‘ 11, 11, 11, 11’,  ‘12, 13, 14, 15’ and no. of partitions is 6 then
It gives the result as ‘3, 6, 10, 11, 14’ after applying the patch. No of elements are less than no. of partitions but we cannot take the duplicate element from the 5th partition.
, Cancelling patch it no longer applies.]