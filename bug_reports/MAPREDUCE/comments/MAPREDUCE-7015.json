[Uploaded a POC for this - I think making the call to {{moveToDone()}} solves the problem, although I can't tell whether it can affect the performance negatively. By default, files from {{done_intermediate}} are moved to {{done}} in every 3 minutes, so it should not be a big deal., [~jlowe], [~haibochen] what do you think about the solution? There's an even simpler one: just remove {{moveToDoneExecutor}} completely, is that acceptable?, [~pbacsko] I think you meant to say step #6 is slow enough for the most times, right? Otherwise, the cli client would almost always try to find the config file in the intermediate directory when the file is already quickly moved into the done directory, and fail., Yes, my bad. I corrected the description., IIRC one reason the moveToDoneExecutor was added was to avoid spending a long time processing every move necessary during the scan.  By adding the sync parameter or removing the executor completely, that makes the scan move everything it finds inline. This can take quite a long time since it not only has to wait for RPC calls but also can spend a long time waiting to acquire the lock because another thread could be calling loadJob() at the time and waiting on a very slow datanode.  That makes the scan single-threaded since it can't make progress on other intermediate files until it finishes moving each one in order.  So I don't think making this sync is the ideal solution.

It may make more sense to have the RPC call wait for out-of-band intermediate scan results it will return to be moved rather than forcing the entire scan to be single-threaded or always waiting for all intermediates to be moved.  For example, HistoryFileManager#getFileInfo could explicitly wait on the move to complete for the one job it is interested in if that job was found in the intermediate scan.  Then we don't have to wait for _every_ intermediate job to be moved, just the one we care about.  getAllFileInfo would need to wait for all of them, but they would be processed in parallel while we're waiting for each in turn., Thanks for the idea [~jlowe]. I agree that waiting for only the job related files is a better approach. I came up with another POC. Still needs some tweak (eg. timeout when calling {{await()}}) and tests., ping [~jlowe], Thanks for the patch!

CountDownLatch seems like a little bit of overkill in this context.  I think it would be sufficient to add this method to HistoryFileInfo:
{code}
  public synchronized void waitUntilMoved() {
    while (isMovePending() && !hfi.didMoveFail()) {
        wait();
    }
  }
{code}

and then simply add a notifyAll() when the HistoryFileInfo state is written (i.e.: in deleted and moveToDone).

I also think it is unnecessary to add a waitForAllMoveToDone.  CachedHistoryStorage#getAllPartialJobs can simply wait on each file info in the loop as it collects them.
, [~jlowe] modified the patch as you suggested plus added a unit test., | (/) *{color:green}+1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue}  0m  9s{color} | {color:blue} Docker mode activated. {color} |
|| || || || {color:brown} Prechecks {color} ||
| {color:green}+1{color} | {color:green} @author {color} | {color:green}  0m  0s{color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:green}+1{color} | {color:green} test4tests {color} | {color:green}  0m  0s{color} | {color:green} The patch appears to include 1 new or modified test files. {color} |
|| || || || {color:brown} trunk Compile Tests {color} ||
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 15m 22s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green}  0m 25s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  0m 17s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  0m 28s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} shadedclient {color} | {color:green} 10m  8s{color} | {color:green} branch has no errors when building and testing our client artifacts. {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  0m 32s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 18s{color} | {color:green} trunk passed {color} |
|| || || || {color:brown} Patch Compile Tests {color} ||
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green}  0m 24s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green}  0m 20s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green}  0m 20s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  0m 13s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  0m 22s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green}  0m  0s{color} | {color:green} The patch has no whitespace issues. {color} |
| {color:green}+1{color} | {color:green} shadedclient {color} | {color:green} 10m 28s{color} | {color:green} patch has no errors when building and testing our client artifacts. {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  0m 38s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 17s{color} | {color:green} the patch passed {color} |
|| || || || {color:brown} Other Tests {color} ||
| {color:green}+1{color} | {color:green} unit {color} | {color:green}  3m 24s{color} | {color:green} hadoop-mapreduce-client-hs in the patch passed. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green}  0m 20s{color} | {color:green} The patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black} 44m 19s{color} | {color:black} {color} |
\\
\\
|| Subsystem || Report/Notes ||
| Docker | Client=17.05.0-ce Server=17.05.0-ce Image:yetus/hadoop:5b98639 |
| JIRA Issue | MAPREDUCE-7015 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12906392/MAPREDUCE-7015-001.patch |
| Optional Tests |  asflicense  compile  javac  javadoc  mvninstall  mvnsite  unit  shadedclient  findbugs  checkstyle  |
| uname | Linux 977fe21f2594 4.4.0-43-generic #63-Ubuntu SMP Wed Oct 12 13:48:03 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | /testptch/patchprocess/precommit/personality/provided.sh |
| git revision | trunk / 09efdfe |
| maven | version: Apache Maven 3.3.9 |
| Default Java | 1.8.0_151 |
| findbugs | v3.1.0-RC1 |
|  Test Results | https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/7302/testReport/ |
| Max. process+thread count | 440 (vs. ulimit of 5000) |
| modules | C: hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs U: hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs |
| Console output | https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/7302/console |
| Powered by | Apache Yetus 0.7.0-SNAPSHOT   http://yetus.apache.org |


This message was automatically generated.

, ping [~jlowe] - could you also check MAPREDUCE-7020 please?, Apologies for the delay.  +1, the latest patch lgtm.

Committing this., FAILURE: Integrated in Jenkins build Hadoop-trunk-Commit #13549 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/13549/])
MAPREDUCE-7015. Possible race condition in JHS if the job is not loaded. (jlowe: rev cff9edd4b514bdcfe22cd49964e3707fb78ab876)
* (edit) hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryFileManager.java
* (edit) hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/CachedHistoryStorage.java
* (edit) hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/test/java/org/apache/hadoop/mapreduce/v2/hs/TestJobHistory.java
, Thanks, [~pbacsko]!  I committed this to trunk, branch-3.0, and branch-2.]