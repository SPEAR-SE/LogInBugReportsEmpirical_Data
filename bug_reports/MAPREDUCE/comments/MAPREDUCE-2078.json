[There is a {{FileSystem.globStatus(Path)}} API in FileSystem to enumerate all the paths represented by a globbed path. 

The current {{TraceBuilder}} code does the following
{code}
  for (int i = 2 + switchTop; i < args.length; ++i) {
    Path thisPath = new Path(args[i]);
    FileSystem fs = thisPath.getFileSystem(conf);
    if (fs.getFileStatus(thisPath).isDirectory()) {
      FileStatus[] statuses = fs.listStatus(thisPath);
      for (FileStatus s : statuses) {
        // process the file 
        ..
      }
    }
{code}

This needs to changed to first flatten the globbed paths passed as input. So the suggested fix is 
{code}
  for (int i = 2 + switchTop; i < args.length; ++i) { // iterate over the input
    Path thisPath = new Path(args[i]);
    // get the filesystem specific to the input passed
    FileSystem fs = thisPath.getFileSystem(conf);

    // flatten the globbed file path
    FileStatus[] realStatuses = fs.globStatus(thisPath);

    // iterate over all the files under the globbed input path
    for (FileStatus status : realStatuses) {
      // extract the actual (flat) path from the file status
      Path realPath = status.getPath();

      // now do what is done in the trunk 
      if (fs.getFileStatus(realPath).isDirectory()) {
      FileStatus[] statuses = fs.listStatus(realPath);
      for (FileStatus s : statuses) {
        // process the file 
        ..
      }
    }
  }
}
{code}

I ran {{TraceBuilder}} with this fix and now it works with globbed input paths., The attached patch fixes the issue by first enumerating all the paths under the globbed input path and then processing them individually. test-patch and ant-tests passed, Some minor comments:
* In ??If the input is a file then its directly?? in the comment to {{processInput()}}, change "its" to "it's" or "it is".
* Just use plain old JavaDoc style comments for {{processInput()}}.
* In {{processInput()}}, you can now directly use the {{FileStatus}} object {{inStatus}} instead of calling {{fs.getFileStatus()}} again., Some comments on the patch:
(1) I think FileSystem.createNewFile(inputPath1) is better/simpler than FsShell.run(new String[] {"-touchz", inputPath1.toString()}) in the testcase.
(2) The method name processInput() can be changed to something like processInputArgument() or buildInputHistoryPaths() for more clarity.
(3) In FileInputFormat.listStatus(), the return value of fs.globStatus() is checked for null. Please check if we need the check here also., Attaching a new patch incorporating Ranjit's and Ravi's comments. test-patch passed., Patch looks fine to me.
+1, I just committed this. Thanks Amar !, Integrated in Hadoop-Mapreduce-trunk-Commit #523 (See [https://hudson.apache.org/hudson/job/Hadoop-Mapreduce-trunk-Commit/523/])
    ]