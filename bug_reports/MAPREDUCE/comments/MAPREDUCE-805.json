[I just found the reason for the deadlock in the log file:
{code}
2009-07-24 14:45:49,851 INFO org.apache.hadoop.mapred.EagerTaskInitializationListener: Initializing job_200907241445_0001
2009-07-24 14:45:49,856 ERROR org.apache.hadoop.mapred.EagerTaskInitializationListener: Job initialization failed:
java.util.regex.PatternSyntaxException: Illegal/unsupported escape sequence near index 69
jobtracker-dev.broadmail.staging_[0-9]+_job_200907241445_0001_optivo\michael.tamm_\QExtractRecipientIds: 75000000 - 85000000[1/1]\E+
                                                                     ^
	at java.util.regex.Pattern.error(Pattern.java:1713)
	at java.util.regex.Pattern.escape(Pattern.java:2177)
	at java.util.regex.Pattern.atom(Pattern.java:1952)
	at java.util.regex.Pattern.sequence(Pattern.java:1885)
	at java.util.regex.Pattern.expr(Pattern.java:1752)
	at java.util.regex.Pattern.compile(Pattern.java:1460)
	at java.util.regex.Pattern.<init>(Pattern.java:1133)
	at java.util.regex.Pattern.compile(Pattern.java:823)
	at org.apache.hadoop.mapred.JobHistory$JobInfo.getJobHistoryFileName(JobHistory.java:645)
	at org.apache.hadoop.mapred.JobHistory$JobInfo.logSubmitted(JobHistory.java:853)
	at org.apache.hadoop.mapred.JobInProgress.initTasks(JobInProgress.java:394)
	at org.apache.hadoop.mapred.EagerTaskInitializationListener$InitJob.run(EagerTaskInitializationListener.java:81)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:619)
{code}, Attaching a patch that should fix this. Result of test-patch 
[exec] +1 overall.  
     [exec] 
     [exec]     +1 @author.  The patch does not contain any @author tags.
     [exec] 
     [exec]     +1 tests included.  The patch appears to include 12 new or modified tests.
     [exec] 
     [exec]     +1 javadoc.  The javadoc tool did not generate any warning messages.
     [exec] 
     [exec]     +1 javac.  The applied patch does not increase the total number of javac compiler warnings.
     [exec] 
     [exec]     +1 findbugs.  The patch does not introduce any new Findbugs warnings.
     [exec] 
     [exec]     +1 release audit.  The applied patch does not increase the total number of release audit warnings.

Running ant-tests., Had a cursory look at the patch. It will be good to add javadoc for JobInProgress.initTasks() and JobInProgress.fail() mentioning that these methods ARE NOT supposed to be called directly by the schedulers and suggesting that the JobTracker methods be preferred to over JobInProgress methods for general use.

Given this issue, it will also be helpful to document the locking order (JobTracker, JobInProgress) so that, for e.g, schedulers don't lock JobInProgress asynchronously before calling these methods.

Though not directly related to the patch, it will be good to document that JobTracker is locked while calling JobInProgressListener update methods., Ditto w.r.t the javadoc for the kill methods., Attaching a patch with updated javadoc and some minor fixes. Result of test-patch
 [exec] +1 overall.  
     [exec] 
     [exec]     +1 @author.  The patch does not contain any @author tags.
     [exec] 
     [exec]     +1 tests included.  The patch appears to include 12 new or modified tests.
     [exec] 
     [exec]     +1 javadoc.  The javadoc tool did not generate any warning messages.
     [exec] 
     [exec]     +1 javac.  The applied patch does not increase the total number of javac compiler warnings.
     [exec] 
     [exec]     +1 findbugs.  The patch does not introduce any new Findbugs warnings.
     [exec] 
     [exec]     +1 release audit.  The applied patch does not increase the total number of release audit warnings.

Running ant-test now, ant tests passed on my box., Somehow the dynamic scheduler didint show up in my list. Fixed that too., All contrib tests except TestStreamingExitStatus passed., Attaching a patch that address Devaraj's offline review comments to do with other deadlock possibilities. Result of test-patch
 [exec] +1 overall.  
     [exec] 
     [exec]     +1 @author.  The patch does not contain any @author tags.
     [exec] 
     [exec]     +1 tests included.  The patch appears to include 21 new or modified tests.
     [exec] 
     [exec]     +1 javadoc.  The javadoc tool did not generate any warning messages.
     [exec] 
     [exec]     +1 javac.  The applied patch does not increase the total number of javac compiler warnings.
     [exec] 
     [exec]     +1 findbugs.  The patch does not introduce any new Findbugs warnings.
     [exec] 
     [exec]     +1 release audit.  The applied patch does not increase the total number of release audit warnings.

Running ant tests now. Testing in progress., Test failed with 2 errors TestReduceFetch FAILED (timeout) and TestTaskTrackerMemoryManager FAILED. Doesnt seem related but will debug.
, TestReduceFetch and TestTaskTrackerMemoryManager failures are known issues. contrib tests passed on box., Attaching a patch incorporating Devaraj's offline comments. Result of test-patch 
 [exec] +1 overall.  
     [exec] 
     [exec]     +1 @author.  The patch does not contain any @author tags.
     [exec] 
     [exec]     +1 tests included.  The patch appears to include 21 new or modified tests.
     [exec] 
     [exec]     +1 javadoc.  The javadoc tool did not generate any warning messages.
     [exec] 
     [exec]     +1 javac.  The applied patch does not increase the total number of javac compiler warnings.
     [exec] 
     [exec]     +1 findbugs.  The patch does not introduce any new Findbugs warnings.
     [exec] 
     [exec]     +1 release audit.  The applied patch does not increase the total number of release audit warnings.
, You can seperate completeEmptyJob() code from setupComplete and make JT call only completeEmptyJob() under the lock. setupComplete can be part of initTasks() itself., Attaching a new patch with some bug fixes. Result of test-patch
 [exec] +1 overall.  
     [exec] 
     [exec]     +1 @author.  The patch does not contain any @author tags.
     [exec] 
     [exec]     +1 tests included.  The patch appears to include 18 new or modified tests.
     [exec] 
     [exec]     +1 javadoc.  The javadoc tool did not generate any warning messages.
     [exec] 
     [exec]     +1 javac.  The applied patch does not increase the total number of javac compiler warnings.
     [exec] 
     [exec]     +1 findbugs.  The patch does not introduce any new Findbugs warnings.
     [exec] 
     [exec]     +1 release audit.  The applied patch does not increase the total number of release audit warnings.

All tests except TestReduceFetch and TestJobTrackerRestartWithLostTracker passed on my box. Rerun of TestJobTrackerRestartWithLostTracker passed. TestReduceFetch is a known issue., patch for branch 0.20, ant tests on branch-0.20 failed on 
 hdfs.TestDistributedFileSystem, namenode.TestStartup and TestReduceFetch. Contrib tests failed on TestStreamingExitStatus.
, Changes look fine to me, We cannot test the deadlock code but tested the code that has changed i.e job-init, job-kill, empty-job, job-with-no-setup-cleanup and job with 0-maps/reduces. 
||job-empty?||setup-cleanup-required?||killed in init?||result||
|yes|yes|yes|pass (job killed)|
|yes|yes|no|pass (setup-cleanup launched and job succeeded)|
|yes|no|yes|pass (job killed)|
|yes|no|no|pass (job marked succeeded in JobTracker.initJob())|
|no|yes|yes|pass (job killed after init)|
|no|yes|no|pass (job runs to completion)| 
|no|no|yes|pass (job killed after init)|
|no|no|no|pass (job runs to completion)|

Did I miss anything?, Note that I purposefully added sleeps in JobTracker.initJob() and JobInProgress.initTasks to take care of race conditions. I didnt see any side effect. With this patch init will always keep the job in PREP state but based on whether 
- setup is required or not 
- tasks are needed to run 
- job-kill was issued during init 
- job-init failed

the job can move to RUNNING or SUCCCEEDED or KILLED or FAILED state or remain in PREP state. Here is how the state transition happens (note that after job.initTasks() the job will be in PREP state)
||setup needed?||maps=0 and reduces=0?||job killed during init?||init failed?||new state||comment||
|*|*|*|yes|FAILED|irrespective of what the config is, if the job fails in init, its marked as FAILED|
|*|*|yes|no|KILLED|irrespective of what the config is, if the job is killed during init and init passed normally then the job is marked as KILLED|
|yes|*|no|no|PREP|if job is configured to run setup then the job will remain in PREP state|
|no|yes|no|no|SUCCEEDED|if the job has no setup configured and if there are no maps and reduces then the job is marked SUCCEEDED|
|no|no|no|no|RUNNING|if the job has no setup configured and if there are maps and reduces then the job is marked RUNNING|
, bq. Note that I purposefully added sleeps in JobTracker.initJob() and JobInProgress.initTasks to take care of race conditions.
I meant during testing, my bad., This issue clashes with the changes in MAPREDUCE-802. The two issues should be coordinated., Attaching a patch with extra log info during job-kill. I tested the patch for 20 and it works as expected. Killed the job during init and the job was killed. Job init failure is handled as expected. Tested with capacity scheduler to see if JobTracker.failJob() raises events as expected., I just committed this. Thanks, Amar!, Integrated in Hadoop-Mapreduce-trunk #46 (See [http://hudson.zones.apache.org/hudson/job/Hadoop-Mapreduce-trunk/46/])
    ]