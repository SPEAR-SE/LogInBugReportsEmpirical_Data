[@Eric

It looks like there may be some overlap between this and MAPREDUCE-2738.  2738 needs to get aggregate information out of the scheduler about the cluster as a whole.  This needs to get that information out about individual applications.  Would it make since for me to file a separate JIRA to add some APIs to expose this information? , Hi Bobby,

Yes, please. Create the separate Jira and then we can both reference it., Adding in the dependency I just filed, {noformat}
a b
c d
{noformat}, Sorry about the last comment.

I would like to propose that we reformat the output of {{bin/mapred job -list}}. In 0.20, the output has a lot of text surrounding the SchedulingInfo metrics. In 0.23, we will be adding mroe more metrics, and I think that the output should have a more tabular format rather than string based.

Here's what I'm talking about:

0.20 Formatted output of {{bin/mapred job -list}}:
{noformat}
JobId                   State   StartTime       UserName    Priority    SchedulingInfo
job_201106250538_52673  2       1316470290916   gmon        NORMAL      0 running map tasks using 0 map slots.
                                                                        0 additional slots reserved.
                                                                        0 running reduce tasks using 0 reduce slots.
                                                                        0 additional slots reserved.
{noformat}

Current 0.23 Formatted output of {{bin/mapred job -list}}:
{noformat}
JobId                   State        StartTime       UserName    Queue   Priority    SchedulingInfo
job_1316617280602_0001  SUCCEEDED    1316623818863   ericp       default NORMAL      10.74.90.193:19888/yarn/job/job_1316617280602_1_1
{noformat}

\\
\\
Jira MAPREDUCE-2790 (which is related to this jira) is proposing to
# Add a column header named {{AMInfo}}
# move the value currently contained in {{SchedulerInfo}} to the new {{AMInfo}} column
# Put a string into the {{SchedulerInfo}} field similar to that which existed in 0.20.

I think that the {{SchedulerInfo}} field is already kind of messy with so much verbage surrounding the metrics. And, as we add new fields to this output, it makes it even more confusing.

So, here is my proposal for a modified format:
{noformat}
                                   User                   Map   Reduce           Reserved             Reserved
JobId           State   StartTime  Name  Queue   Priority Tasks Tasks Containers Containers Resources Resources AMInfo
job_131646_0001 RUNNING 1316467125 ericp default NORMAL   3      1    4          1          4M        1M        10.74.90.193:19888/yarn/job/job_131646_1_1
job_135790_0002 RUNNING 1316813579 admin priqueu NORMAL   7      2    9          3          7M        3M        10.74.90.193:19888/yarn/job/job_135790_1_1
{noformat}

Please let me know what you think., Eric, 
The output looks good and has all the necessary details. Just one more thing, the number of containers does not give the break up of how many are used by each of the map and reduce task i.e. information such as 3 map tasks running using 3 containers and 1 reduce task running using 1 container. 

This information is very useful for High RAM jobs. E.g. for a High RAM job which has 3 map tasks, each requiring 2 containers and 1 reduce task requiring 1 container, displaying the number of containers as 7(6+1) would not convey the number of containers actually used by each task. Perhaps something like "Map Containers" and "Reduce containers" would be useful. Thoughts? , @Ramya

High RAM jobs do not behave that way any more.  1 Container != 1 slot nor A fixed amount of RAM.  We could add in something saying how much RAM each container has requested to indicate its usage.  Also there will always be 1 container for the Application Master which also uses a user configurable amount of RAM., Lets add a line for each priority:
P0:<resource (ram)>:<#container active>:<#container reserved>
P1:<resource (ram)>:<#container active>:<#container reserved>
P2:<resource (ram)>:<#container active>:<#container reserved>

etc.

Thoughts?, I think that would be good for a 
{code}
yarn app -list
{code}

but this is mapred and I personally would prefer to see mapreduce specific information here, instead of something more general.

* Job ID
* State
* Start Time
* User Name
* Queue
* Priority
* Map Tasks Running
* Map Task Memory Request
* Reduce Tasks Running
* Reduce Task Memory Request
* App Master Memory Request
* Reserved Containers
* Total Memory Used
* Total Memory Reserved
* AM Info
 , Bobby, the information you propose isn't' available at the RM... we could talk to the AM, but it would be an overkill for testing purposes., If this is just for testing then I'll defer to Ramya who filed it for what is needed., This is also related to MAPREDUCE-2791. Let's make sure we don't duplicate effort..., h2.Question for Arun and Ramya:
Regarding the suggestion that {{'job list'}} should have multiple lines per job, one for every priority: This could be done, but I personally think it is a little messy and I'm not sure of the use case.

Ramya, can you please comment?

h2.For now, the following is how I have implemented the output:
{noformat}
Total jobs:4
JobId    State     StartTime UserName Queue Priority Maps Reduces UsedContainers RsvdContainers UsedMem RsvdMem NeededMem AM info
job_0004 RUNNING   131730657 me       styx  NORMAL   1    30      2              0              6144M   0M      10240M    XX.XX.XX.XXX:46693
job_0003 SUCCEEDED 131730650 me       styx  NORMAL   1    5       0              0              0M      0M      0M        XX.XX.XX.XXX:19888/yarn/job/job_3_3
{noformat}

h3.There are a couple of things to note about the above:
# All of the container and resource fields go to 0 after the job has succeeded because the containers disappear once the job completes. Historical information about {{UsedContainers}} and {{UsedMem}} could be saved if that is useful, but that would require changes to the RMAppAttemptImpl class to add up these values and store in the completed object.
# In my one-node cluster, I have not yet been able to place enough load on the system to require reservations. In fact, even if I start many jobs all at once, it keeps all of them in the PREP state except the running one, and even the running one only uses 2 or 3 containers at a time.

, Sorry Robert/Eric for the late response, was on vacation. 

I agree with Eric on retaining the same format. That way, we would be backward compatible with the old mapreduce format except for the fields which are applicable only to yarn.
The intention behind this JIRA was to know the current usage and reservations if any per job. The information provided in the above snapshot would not just be helpful for testing but also for system admins/debugging., +1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12497648/MAPREDUCE-2789.v1.txt
  against trunk revision .

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 6 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed unit tests in .

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/939//testReport/
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/939//console

This message is automatically generated., Eric, sorry it took me this long to review this.

Some comments:

# Rename JobReport to ApplicationResourceUsageReport or some such - we have tried to avoid 'job' in YARN
# Move the JobReport generation to RMAppAttemptImpl and call that from RMAppImpl
# I don't get why you have readFields/writeFields in org.apache.hadoop.yarn.api.records.JobResourceInfo interface - we should avoid this. None of the other interface in org.apache.hadoop.yarn.api.records have this., Also,

# Please don't change JobStatus to include YARN stuff - just return values from old MR framework, Thanks Arun. I'll look into the changes., @Arun,

I have addressed the previous comments. Please see new patch., Thanks Eric.

Some minor nits:
# Need a null check for 'currentAttempt' in RMAppImpl.
# In RMAppAttemptImpl.getApplicationResourceUsageReport:
## You need to acquire the readLock.
## Reserved containers loop needs a +=, not =
# In ApplicationResourceUsageReport, please use Resource rather than int for all parameters/return-values. We don't want to tie it to just memory.
# JobStatus
## Minor nit - please use 'Reserved' rather than 'Rsvd' for apis, we try to avoid these in api names (maybe use expansion for variable names too?)
## I don't get why we need (get,set)ApplicationMasterInfo - we already have (get,set)TrackingUrl?

, Hi Arun. Thanks for catching these issues.

> 1. Need a null check for 'currentAttempt' in RMAppImpl.
Done.

> 2. In RMAppAttemptImpl.getApplicationResourceUsageReport: 
>   1. You need to acquire the readLock.
I don't think the read lock would be effective or necessary here. Please tell me if my logic is faulty :D  :
* Within {{RMAppAttemptImpl.java}}, {{getApplicationResourceUsageReport()}} calls {{scheduler.getSchedulerAppInfo(...)}} to get an instance of the SchedulerAppReport object. This instance variable is local to {{getApplicationResourceUsageReport()}} and contains copies of the {{live}} node and {{reserved}} node lists, not pointers to the actual lists themselves.
** Even if this instance of SchedulerAppReport contained pointers to the {{live}} and {{reserved}} node lists, the private readlock within the RMAppAttemptImpl class would not be honored by anything changing those lists, so this readlock would not be effective.
** Since this instance of SchedulerAppReport and its container {{live}} and {{reserved}} variables are local to {{getApplicationResourceUsageReport()}}, I don't think one thread can access the local variables of another thread, even if they are running in the same code. So, I don't think the readlock is needed, even for the sake of re-entrance.

>   2. Reserved containers loop needs a +=, not =
Done. Good catch.


> 3. In ApplicationResourceUsageReport, please use Resource rather than int for all parameters/return-values. We don't want to tie it to just memory.
I did this for the ones that are tracking resources. The others are simply countin containers.

> 4. JobStatus 
>   1. Minor nit - please use 'Reserved' rather than 'Rsvd' for apis, we try to avoid these in api names (maybe use expansion for variable names too?)
Done.

>   2. I don't get why we need (get,set)ApplicationMasterInfo - we already have (get,set)TrackingUrl?
I removed the JobStatus.(set,get)ApplicationMasterInfo() APIs and just used the (set,get)SchedulingInfo APIs.

, -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12498688/MAPREDUCE-2789.v3.txt
  against trunk revision .

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 6 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed these unit tests:
                  org.apache.hadoop.mapreduce.TestTypeConverter

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/993//testReport/
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/993//console

This message is automatically generated., Hmm. When I ran test patch, I didn't see the test failure.

I know what the problem is, though. I'll fix it and post a new patch., +1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12498769/MAPREDUCE-2789.v4.txt
  against trunk revision .

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 6 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed unit tests in .

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/995//testReport/
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/995//console

This message is automatically generated., Eric, we shouldn't use the *PBImpl directly - we need to go through the RecordFactory.

Also, the readLock is imp. - we may not need it right now, but it's important to be future proof, someone might access fields in RMAppAttemptImpl there eventually...

There are also some 80+ char lines., Patch incorporating my own minor nits., +1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12498838/MAPREDUCE-2789.patch
  against trunk revision .

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 6 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed unit tests in .

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/999//testReport/
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/999//console

This message is automatically generated., I just committed this. Thanks Eric!, Integrated in Hadoop-Common-trunk-Commit #1065 (See [https://builds.apache.org/job/Hadoop-Common-trunk-Commit/1065/])
    MAPREDUCE-2789. Complete schedulingInfo on CLI. Contributed by Eric Payne.

acmurthy : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1182616
Files : 
* /hadoop/common/trunk/hadoop-mapreduce-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapreduce/TypeConverter.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/test/java/org/apache/hadoop/mapreduce/TestTypeConverter.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/JobStatus.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/tools/CLI.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/main/java/org/apache/hadoop/mapred/NotRunningJob.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/api/records/ApplicationReport.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/api/records/ApplicationResourceUsageReport.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/api/records/impl/pb/ApplicationReportPBImpl.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/api/records/impl/pb/ApplicationResourceUsageReportPBImpl.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/util/ProtoUtils.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-api/src/main/proto/yarn_protos.proto
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/BuilderUtils.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-common/src/test/java/org/apache/hadoop/yarn/MockApps.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/RMAppImpl.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/attempt/RMAppAttempt.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/attempt/RMAppAttemptImpl.java
, Integrated in Hadoop-Hdfs-trunk-Commit #1143 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk-Commit/1143/])
    MAPREDUCE-2789. Complete schedulingInfo on CLI. Contributed by Eric Payne.

acmurthy : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1182616
Files : 
* /hadoop/common/trunk/hadoop-mapreduce-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapreduce/TypeConverter.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/test/java/org/apache/hadoop/mapreduce/TestTypeConverter.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/JobStatus.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/tools/CLI.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/main/java/org/apache/hadoop/mapred/NotRunningJob.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/api/records/ApplicationReport.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/api/records/ApplicationResourceUsageReport.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/api/records/impl/pb/ApplicationReportPBImpl.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/api/records/impl/pb/ApplicationResourceUsageReportPBImpl.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/util/ProtoUtils.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-api/src/main/proto/yarn_protos.proto
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/BuilderUtils.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-common/src/test/java/org/apache/hadoop/yarn/MockApps.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/RMAppImpl.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/attempt/RMAppAttempt.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/attempt/RMAppAttemptImpl.java
, Thanks Arun!, Thanks Arun!, Integrated in Hadoop-Hdfs-0.23-Build #38 (See [https://builds.apache.org/job/Hadoop-Hdfs-0.23-Build/38/])
    Merge -c 1182616 from trunk to branch-0.23 to fix MAPREDUCE-2789.

acmurthy : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1182617
Files : 
* /hadoop/common/branches/branch-0.23/hadoop-mapreduce-project/CHANGES.txt
* /hadoop/common/branches/branch-0.23/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapreduce/TypeConverter.java
* /hadoop/common/branches/branch-0.23/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/test/java/org/apache/hadoop/mapreduce/TestTypeConverter.java
* /hadoop/common/branches/branch-0.23/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/JobStatus.java
* /hadoop/common/branches/branch-0.23/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/tools/CLI.java
* /hadoop/common/branches/branch-0.23/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/main/java/org/apache/hadoop/mapred/NotRunningJob.java
* /hadoop/common/branches/branch-0.23/hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/api/records/ApplicationReport.java
* /hadoop/common/branches/branch-0.23/hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/api/records/ApplicationResourceUsageReport.java
* /hadoop/common/branches/branch-0.23/hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/api/records/impl/pb/ApplicationReportPBImpl.java
* /hadoop/common/branches/branch-0.23/hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/api/records/impl/pb/ApplicationResourceUsageReportPBImpl.java
* /hadoop/common/branches/branch-0.23/hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/util/ProtoUtils.java
* /hadoop/common/branches/branch-0.23/hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-api/src/main/proto/yarn_protos.proto
* /hadoop/common/branches/branch-0.23/hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/BuilderUtils.java
* /hadoop/common/branches/branch-0.23/hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-common/src/test/java/org/apache/hadoop/yarn/MockApps.java
* /hadoop/common/branches/branch-0.23/hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/RMAppImpl.java
* /hadoop/common/branches/branch-0.23/hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/attempt/RMAppAttempt.java
* /hadoop/common/branches/branch-0.23/hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/attempt/RMAppAttemptImpl.java
, Integrated in Hadoop-Mapreduce-0.23-Build #47 (See [https://builds.apache.org/job/Hadoop-Mapreduce-0.23-Build/47/])
    Merge -c 1182616 from trunk to branch-0.23 to fix MAPREDUCE-2789.

acmurthy : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1182617
Files : 
* /hadoop/common/branches/branch-0.23/hadoop-mapreduce-project/CHANGES.txt
* /hadoop/common/branches/branch-0.23/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapreduce/TypeConverter.java
* /hadoop/common/branches/branch-0.23/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/test/java/org/apache/hadoop/mapreduce/TestTypeConverter.java
* /hadoop/common/branches/branch-0.23/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/JobStatus.java
* /hadoop/common/branches/branch-0.23/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/tools/CLI.java
* /hadoop/common/branches/branch-0.23/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/main/java/org/apache/hadoop/mapred/NotRunningJob.java
* /hadoop/common/branches/branch-0.23/hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/api/records/ApplicationReport.java
* /hadoop/common/branches/branch-0.23/hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/api/records/ApplicationResourceUsageReport.java
* /hadoop/common/branches/branch-0.23/hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/api/records/impl/pb/ApplicationReportPBImpl.java
* /hadoop/common/branches/branch-0.23/hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/api/records/impl/pb/ApplicationResourceUsageReportPBImpl.java
* /hadoop/common/branches/branch-0.23/hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/util/ProtoUtils.java
* /hadoop/common/branches/branch-0.23/hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-api/src/main/proto/yarn_protos.proto
* /hadoop/common/branches/branch-0.23/hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/BuilderUtils.java
* /hadoop/common/branches/branch-0.23/hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-common/src/test/java/org/apache/hadoop/yarn/MockApps.java
* /hadoop/common/branches/branch-0.23/hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/RMAppImpl.java
* /hadoop/common/branches/branch-0.23/hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/attempt/RMAppAttempt.java
* /hadoop/common/branches/branch-0.23/hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/attempt/RMAppAttemptImpl.java
, Integrated in Hadoop-Mapreduce-trunk #859 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/859/])
    MAPREDUCE-2789. Complete schedulingInfo on CLI. Contributed by Eric Payne.

acmurthy : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1182616
Files : 
* /hadoop/common/trunk/hadoop-mapreduce-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapreduce/TypeConverter.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/test/java/org/apache/hadoop/mapreduce/TestTypeConverter.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/JobStatus.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/tools/CLI.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/main/java/org/apache/hadoop/mapred/NotRunningJob.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/api/records/ApplicationReport.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/api/records/ApplicationResourceUsageReport.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/api/records/impl/pb/ApplicationReportPBImpl.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/api/records/impl/pb/ApplicationResourceUsageReportPBImpl.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/util/ProtoUtils.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-api/src/main/proto/yarn_protos.proto
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/BuilderUtils.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-common/src/test/java/org/apache/hadoop/yarn/MockApps.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/RMAppImpl.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/attempt/RMAppAttempt.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/attempt/RMAppAttemptImpl.java
, Integrated in Hadoop-Hdfs-trunk #829 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/829/])
    MAPREDUCE-2789. Complete schedulingInfo on CLI. Contributed by Eric Payne.

acmurthy : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1182616
Files : 
* /hadoop/common/trunk/hadoop-mapreduce-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapreduce/TypeConverter.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/test/java/org/apache/hadoop/mapreduce/TestTypeConverter.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/JobStatus.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/tools/CLI.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/main/java/org/apache/hadoop/mapred/NotRunningJob.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/api/records/ApplicationReport.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/api/records/ApplicationResourceUsageReport.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/api/records/impl/pb/ApplicationReportPBImpl.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/api/records/impl/pb/ApplicationResourceUsageReportPBImpl.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/util/ProtoUtils.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-api/src/main/proto/yarn_protos.proto
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/BuilderUtils.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-common/src/test/java/org/apache/hadoop/yarn/MockApps.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/RMAppImpl.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/attempt/RMAppAttempt.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/attempt/RMAppAttemptImpl.java
]