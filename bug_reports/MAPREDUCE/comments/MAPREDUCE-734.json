[Stack trace -:

2009-07-08 13:34:18,260 INFO org.apache.hadoop.ipc.Server: IPC Server handler 49 on 50300, call heartbeat(org.apache.hadoop.mapred.TaskTrackerStatus@61415858, false, false, true, 7367) from <host:port>: error: java.io.IOException: java.util.ConcurrentModificationException
java.io.IOException: java.util.ConcurrentModificationException
        at java.util.HashMap$HashIterator.nextEntry(HashMap.java:793)
        at java.util.HashMap$KeyIterator.next(HashMap.java:828)
        at org.apache.hadoop.mapred.JobInProgress.cancelReservedSlots(JobInProgress.java:2361)
        at org.apache.hadoop.mapred.JobInProgress.jobComplete(JobInProgress.java:2267)
        at org.apache.hadoop.mapred.JobInProgress.completedTask(JobInProgress.java:2213)
        at org.apache.hadoop.mapred.JobInProgress.updateTaskStatus(JobInProgress.java:952)
        at org.apache.hadoop.mapred.JobTracker.updateTaskStatuses(JobTracker.java:3899)
        at org.apache.hadoop.mapred.JobTracker.processHeartbeat(JobTracker.java:3090)
        at org.apache.hadoop.mapred.JobTracker.heartbeat(JobTracker.java:2828)
        at sun.reflect.GeneratedMethodAccessor7.invoke(Unknown Source)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
        at java.lang.reflect.Method.invoke(Method.java:597)
        at org.apache.hadoop.ipc.RPC$Server.call(RPC.java:508)
        at org.apache.hadoop.ipc.Server$Handler$1.run(Server.java:959)
        at org.apache.hadoop.ipc.Server$Handler$1.run(Server.java:955)
        at java.security.AccessController.doPrivileged(Native Method)
        at javax.security.auth.Subject.doAs(Subject.java:396)
        at org.apache.hadoop.ipc.Server$Handler.run(Server.java:953)
, Karam, do you know if you submitted _any_ jobs (in particular high-ram jobs) with zero maps and zero reduces before you saw this? , I had to fix this embarrassing bug my making a copy of the set of TaskTracker objects in JobInProgress.cancelReserveSlots before calling TaskTracker.unreserveSlots which calls JobInProgress.unreserveTaskTracker to remove the TaskTracker object from the map. Oops! *hides*, Patch for yahoo hadoop-20 branch., This is looking fine.
- I would recommend we move the call to cancelReservedSlots into garbageCollect rather than in jobComplete and terminate where they are currently defined. The reason being there is another API terminateJob() which can be called to end a job as well. In that case too, we'll need to cancel the reservations. Rather than adding at a new place, I think we can instead move all the calls to garbageCollect which is guaranteed to be called in all cases. (I confirmed this by checking with the M/R team).
- It would be good to add a test case to it. The simplest way is to use the mock object facilities being added now. For instance, I think we can use FakeObjectUtilities.FakeJobInProgress, create a bunch of TaskTracker objects and reserve slots in them for the FakeJobInProgress we create. Then we can finish the job which should trigger calls to unreserve the trackers.

Arun, in order to save on time (since we need to run all the tests etc) I've requested Sreekanth to look at the test case.
, Attachin file incorporating Hemanths comments:

1. Moved out {{cancelReservations()}} to {{garbageCollect()}}
2. Added new test case., +1. Can you please start tests and test-patch ?, My bad, didnt include apache header in the generated patch.

output from ant test-patch with latest patch

{noformat}
     [exec] -1 overall.
     [exec]
     [exec]     +1 @author.  The patch does not contain any @author tags.
     [exec]
     [exec]     +1 tests included.  The patch appears to include 3 new or modified tests.
     [exec]
     [exec]     +1 javadoc.  The javadoc tool did not generate any warning messages.
     [exec]
     [exec]     +1 javac.  The applied patch does not increase the total number of javac compiler warnings.
     [exec]
     [exec]     +1 findbugs.  The patch does not introduce any new Findbugs warnings.
     [exec]
     [exec]     +1 release audit.  The applied patch generated 316 release audit warnings (more than the trunk's current 315 warnings).
     [exec]
{noformat}, Y! distribution patch, All tests passed locally. Output from ant test-patch

{noformat}
     [exec]
     [exec] +1 overall.
     [exec]
     [exec]     +1 @author.  The patch does not contain any @author tags.
     [exec]
     [exec]     +1 tests included.  The patch appears to include 3 new or modified tests.
     [exec]
     [exec]     +1 javadoc.  The javadoc tool did not generate any warning messages.
     [exec]
     [exec]     +1 javac.  The applied patch does not increase the total number of javac compiler warnings.
     [exec]
     [exec]     +1 findbugs.  The patch does not introduce any new Findbugs warnings.
     [exec]
     [exec]     +1 release audit.  The applied patch does not increase the total number of release audit warnings.
     [exec]
     [exec]
     [exec]
{noformat}, I just committed this. Thanks, Arun and Sreekanth !, Patch (MAPREDUCE-734-20.patch) for Yahoo! Hadoop distribution. The previous one had a minor error preventing compilation. Verified that this compiles fine. Also ran capacity scheduler tests for sanity., Integrated in Hadoop-Mapreduce-trunk #20 (See [http://hudson.zones.apache.org/hudson/job/Hadoop-Mapreduce-trunk/20/])
    ]