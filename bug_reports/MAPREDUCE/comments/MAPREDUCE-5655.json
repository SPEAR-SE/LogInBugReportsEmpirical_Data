[I wanted to upload 2 patch files, however the jira tool's Submit Patch dialog was instead a "Submit bug" dialog, without any patch upload input field whatever, so i skipped it.
If someone helps me to find the correct way to upload them i will do it, though this is a workaround, and should not mean a long term solution., Duplicate of MAPREDUCE-4052., MAPREDUCE-4052 affects 0.23.1, and the relevant codes are also different, 
this bug is for version 2.2.0

also, in this case the java process call was referring to the java_home as %JAVA_HOME%, which wasn't mentioned in that bug, and here part of the problem

, Hi, [~padisah].  Thanks for the bug report.

I do think this is a duplicate of MAPREDUCE-4052.  The 0.23.x code line is similar to the 2.2.x code line.  It's often the case that a bug in 2.2.x is also a bug in 0.23.x.  I've just updated MAPREDUCE-4052 to make the title clearer and indicate that it also affects version 2.2.0.

I recommend that your participate on MAPREDUCE-4052.  There is a patch attached to that issue, but it's a few months old, so it's likely to be out-of-date at this point.  Seeing your latest patch would be valuable.  You can upload your patch by clicking the More button at the top and then going through the Attach Files dialog.  The Submit Patch button is used to submit your patch to Jenkins for a test run against current trunk.

Thanks again!
, These 2 patches intend to fix different jobLaunch/jobExecution OS problems with MapReduce. It also reqires to add the following property to 
mapred-site.xml (or mapred-default.xml):

<property>
  <name>mapred.remote.os</name>
  <value>Linux</value>
  <description>Remote MapReduce framework's OS, can be either Linux or Windows</description>
</property

This is used when job launched from windows, executed in Linux., I checked the patches of MAPREDUCE-4052, the patch for ContainerLaunch.java finds the part to modify in the 136th line. The same code in the 2.2.0 version begins at 173th line. So, i think the patch for 0.23.x is not compatible with 2.2.0, and vice versa. The 2 bugs originate from the same problem, but they are also different, the first problem i faced was that the launch_container.sh tried to start java with %JAVA_HOME% and i got  a "task returned with -1" or similar error, because the shell script could not be executed. 

My patch fixes this issue too.

There is a config entry in mapred-default.xml:

<property>
  <description>...</description>
   <name>mapreduce.application.classpath</name>
   <value>$HADOOP_MAPRED_HOME/share/hadoop/mapreduce/*,
  $HADOOP_MAPRED_HOME/share/hadoop/mapreduce/lib/*.</value>
</property>

This probably needs to be altered also, due to the $ - %--% difference between windows- linux as well.
If you set up your environment to run the job in local/windows, you need to set it it to %, but when the job will run on a linux cluster, it must be set back to the $ which is the default i think.

The patch may cause the failure of a unit test, if the mapred.remote.os is set, and the test runs a job in local mode. This is not tested by me, because i had several other issues with running the unit tests, so i skipped this.

I have to repeat, that this is merely a workaround, probably more deep changes would be needed, that the launch_container.sh would be created by a java component running on the cluster side instead of the client side, but i don't feel myself capable of doing that. , the vice versa case: linux client, windows cluster is not handled by this patch, Regarding the {{mapreduce.application.classpath}} configuration property, this part was already fixed in MAPREDUCE-5442., In addition to applying attached patches and recompiling appropriate client jars, you should also do such things:

1) Add such config property to your mapred-site.xml (client side only):

	<property>
		<name>mapreduce.application.classpath</name>
		<value>
			$HADOOP_CONF_DIR,
			$HADOOP_COMMON_HOME/share/hadoop/common/*,
			$HADOOP_COMMON_HOME/share/hadoop/common/lib/*,
			$HADOOP_HDFS_HOME/share/hadoop/hdfs/*,
			$HADOOP_HDFS_HOME/share/hadoop/hdfs/lib/*,
			$HADOOP_MAPRED_HOME/share/hadoop/mapreduce/*,
			$HADOOP_MAPRED_HOME/share/hadoop/mapreduce/lib/*,
			$HADOOP_YARN_HOME/share/hadoop/yarn/*,
			$HADOOP_YARN_HOME/share/hadoop/yarn/lib/*
		</value>
	</property>
	
2) Add such config property to your yarn-site.xml (client side only):

	<property>
		<name>mapreduce.application.classpath</name>
		<value>
			$HADOOP_CONF_DIR,
			$HADOOP_COMMON_HOME/share/hadoop/common/*,
			$HADOOP_COMMON_HOME/share/hadoop/common/lib/*,
			$HADOOP_HDFS_HOME/share/hadoop/hdfs/*,
			$HADOOP_HDFS_HOME/share/hadoop/hdfs/lib/*,
			$HADOOP_MAPRED_HOME/share/hadoop/mapreduce/*,
			$HADOOP_MAPRED_HOME/share/hadoop/mapreduce/lib/*,
			$HADOOP_YARN_HOME/share/hadoop/yarn/*,
			$HADOOP_YARN_HOME/share/hadoop/yarn/lib/*
		</value>
	</property>

Without such configuration on the client side you will have issues like this:

https://issues.apache.org/jira/browse/YARN-1532
https://issues.apache.org/jira/browse/MAPREDUCE-4052
, Hi [~padisah], are you still working on this?  I'd like to take it over.
We should give a more generic solution and instead of forcing client to make the configuration, we can give a platform-agnostic syntax to the NM and have the NM itself to replace that with the appropriate syntax according to the OS its running with, just like the way we are doing with nm-log-dir., Hi Jian,
 no i am not working on it, i only wanted to drop in a quick workaround patch for people who stumble upon this problem. I am happy that someone takes it over and gives a more generic solution!, This bug also affects 2.3.0. 

I've tested this patch on 2.3.0 and it fixes the problem. However, in addition to applying attached patches and recompiling appropriate client jars, and the additions mentioned by Igor Rudyak, I also had to create a jar for the client side map reduce job and set "mapreduce.job.jar" to that jar on the client side. 

This can be done programatically on a Configuration object as follows: 
conf.set("mapreduce.job.jar","C:\application.jar");, I've tested this patch on 2.2.0,it words fine. It should be pointed out that there are two aspects of the problem
1.It's vargs.add("Linux".equals(remoteOs) ?   "$JAVA_HOME/bin/java" : Environment.JAVA_HOME.$() + "/bin/java"); 
but vargs.add("Linux".equals(remoteOs) ?   "$JAVA_HOME/bin/java" : Environment.JAVA_HOME.$()); in YARNRunner.patch
2.you should add "mapreduce.application.classpath" to Configuration on the windows box, Please refer to MAPREDUCE-4052 for the fix,  the patch uploaded here is dead.]