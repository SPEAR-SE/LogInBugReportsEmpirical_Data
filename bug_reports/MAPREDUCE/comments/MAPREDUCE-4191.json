[I'm still following this through to fully understand, but there is a comment in the code in LeafQueue that tries to explain this:

   // Note: We aren't considering the current request since there is a fixed
   // overhead of the AM, but it's a > check, not a >= check, so... 

Which I don't totally follow, I guess if you have one job in the queue that is taking the entire capacity, it allows the job to be more like it was in mrv1 and tries not to penalize you for the AM overhead. The AM however is doing the setup and clean tasks where as in mrv1 it would need to allocate a slot for those.  The AM may have fixed overhead but that overhead is configurable. I could create an AM with 24G of memory or use the default of 1.5G. Or on the flip side, I have an AM that uses 1.5G, but have a map task that now gets scheduled and uses 24G which puts it way over its capacity.  That could affect the queue current usage greatly and seems to break the capacity guarantee. 

In the case where you say have 2 jobs in the queue, you have 2 app masters, one of which is "counted' against your queue and then the other one is not.

I do see it beneficial to queues with very small capacities though, as without this they could be stuck without enough resources to run a task.

Arun or anyone else familiar with capacity scheduler, if you could provide explanation that would be great., Moving bugs out of previously closed releases into the next minor release 2.8.0.]