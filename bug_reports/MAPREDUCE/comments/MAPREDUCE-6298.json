[{color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12723656/MAPREDUCE-6298.1.patch
  against trunk revision 0b5d7d2.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/5377//testReport/
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/5377//console

This message is automatically generated., Anyone up for a quick review? [~steve_l] maybe..., The fix itself looks good to me. 

[~jira.shegalov] I'd like to to listen to your opinion - do you think should we mark this change as incompatible change? It change the semantics of Job#toString, but current users don't call toString in not running state., [~ozawa] Thanks for taking a look!, Thanks for the pointer, [~ozawa]! Thanks for the filing the JIRA and the patch, [~lars_francke]!

Having toString rely on RUNNING does not make sense, indeed. I believe the intent is to avoid doing RPC's for jobs that are finished, or the {{cluster}} is reset. Note the conditions under which ensureState throws exceptions. I suggest we do this in a more graceful manner. if the job is known not to be running, simply skip the block with {{updateStatus}} for the conditions above. However, if {{Job#status}} is already set we should just proceed. Otherwise, return something to the tune of the patch. 

, Thanks for the update [~jira.shegalov]. I'll look into the changes you mentioned but it'll take me a bit before I can get to this. I'll ping you guys when I'm ready, I agree with Gera's comment. I think we can merge it to branch-2 with the graceful manner.

[~lars_francke] looking forward to your patch!, moving out of patch available pending update., This changes things around a bit...I think in the end result is pretty similar. Let me know if this is what you were thinking of.

* It does the check that {{ensureState}} would do to protect the {{updateStatus}} call
* It replaces StringBuffer usage with simple String concatenation, \\
\\
| (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | pre-patch |  14m 40s | Pre-patch trunk compilation is healthy. |
| {color:green}+1{color} | @author |   0m  0s | The patch does not contain any @author tags. |
| {color:green}+1{color} | tests included |   0m  0s | The patch appears to include 1 new or modified test files. |
| {color:green}+1{color} | javac |   7m 31s | There were no new javac warning messages. |
| {color:green}+1{color} | javadoc |   9m 39s | There were no new javadoc warning messages. |
| {color:green}+1{color} | release audit |   0m 23s | The applied patch does not increase the total number of release audit warnings. |
| {color:red}-1{color} | checkstyle |   0m 49s | The applied patch generated  1 new checkstyle issues (total was 58, now 58). |
| {color:green}+1{color} | whitespace |   0m  0s | The patch has no lines that end in whitespace. |
| {color:green}+1{color} | install |   1m 33s | mvn install still works. |
| {color:green}+1{color} | eclipse:eclipse |   0m 33s | The patch built with eclipse:eclipse. |
| {color:green}+1{color} | findbugs |   1m 17s | The patch does not introduce any new Findbugs (version 2.0.3) warnings. |
| {color:green}+1{color} | mapreduce tests |   1m 37s | Tests passed in hadoop-mapreduce-client-core. |
| | |  38m  8s | |
\\
\\
|| Subsystem || Report/Notes ||
| Patch URL | http://issues.apache.org/jira/secure/attachment/12733176/MAPREDUCE-6298.2.patch |
| Optional Tests | javadoc javac unit findbugs checkstyle |
| git revision | trunk / 03a293a |
| checkstyle |  https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/5737/artifact/patchprocess/diffcheckstylehadoop-mapreduce-client-core.txt |
| hadoop-mapreduce-client-core test log | https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/5737/artifact/patchprocess/testrun_hadoop-mapreduce-client-core.txt |
| Test Results | https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/5737/testReport/ |
| Java | 1.7.0_55 |
| uname | Linux asf905.gq1.ygridcore.net 3.13.0-36-lowlatency #63-Ubuntu SMP PREEMPT Wed Sep 3 21:56:12 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux |
| Console output | https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/5737/console |


This message was automatically generated., \\
\\
| (/) *{color:green}+1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | pre-patch |  14m 38s | Pre-patch trunk compilation is healthy. |
| {color:green}+1{color} | @author |   0m  0s | The patch does not contain any @author tags. |
| {color:green}+1{color} | tests included |   0m  0s | The patch appears to include 1 new or modified test files. |
| {color:green}+1{color} | javac |   7m 34s | There were no new javac warning messages. |
| {color:green}+1{color} | javadoc |   9m 36s | There were no new javadoc warning messages. |
| {color:green}+1{color} | release audit |   0m 23s | The applied patch does not increase the total number of release audit warnings. |
| {color:green}+1{color} | checkstyle |   0m 45s | There were no new checkstyle issues. |
| {color:green}+1{color} | whitespace |   0m  0s | The patch has no lines that end in whitespace. |
| {color:green}+1{color} | install |   1m 34s | mvn install still works. |
| {color:green}+1{color} | eclipse:eclipse |   0m 32s | The patch built with eclipse:eclipse. |
| {color:green}+1{color} | findbugs |   1m 14s | The patch does not introduce any new Findbugs (version 2.0.3) warnings. |
| {color:green}+1{color} | mapreduce tests |   1m 37s | Tests passed in hadoop-mapreduce-client-core. |
| | |  37m 56s | |
\\
\\
|| Subsystem || Report/Notes ||
| Patch URL | http://issues.apache.org/jira/secure/attachment/12733185/MAPREDUCE-6298.3.patch |
| Optional Tests | javadoc javac unit findbugs checkstyle |
| git revision | trunk / 03a293a |
| hadoop-mapreduce-client-core test log | https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/5738/artifact/patchprocess/testrun_hadoop-mapreduce-client-core.txt |
| Test Results | https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/5738/testReport/ |
| Java | 1.7.0_55 |
| uname | Linux asf905.gq1.ygridcore.net 3.13.0-36-lowlatency #63-Ubuntu SMP PREEMPT Wed Sep 3 21:56:12 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux |
| Console output | https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/5738/console |


This message was automatically generated., Hey [~jira.shegalov] or [~ozawa], would you mind taking a second look and committing if you're okay with this?, [~lars_francke], thank you for your contribution. The design of the fix looks good. Could you address following comments?

1. Why do we need to change following parts? It's fine to use sb.append here. Also, we can use lineSep instead of append("\n"), but I think we should do this on another JIRA.
{code}
-    StringBuffer sb = new StringBuffer();
-    sb.append("Job: ").append(status.getJobID()).append("\n");
-    sb.append("Job File: ").append(status.getJobFile()).append("\n");
-    sb.append("Job Tracking URL : ").append(status.getTrackingUrl());
-    sb.append("\n");
-    sb.append("Uber job : ").append(status.isUber()).append("\n");
-    sb.append("Number of maps: ").append(numMaps).append("\n");
-    sb.append("Number of reduces: ").append(numReduces).append("\n");
-    sb.append("map() completion: ");
-    sb.append(status.getMapProgress()).append("\n");
-    sb.append("reduce() completion: ");
-    sb.append(status.getReduceProgress()).append("\n");
-    sb.append("Job state: ");
-    sb.append(status.getState()).append("\n");
-    sb.append("retired: ").append(status.isRetired()).append("\n");
-    sb.append("reason for failure: ").append(reasonforFailure);
-    return sb.toString();
{code}

2. About TestJob#testJobToString, could you add a test to preserve the result of Job#toString() when the state of job is RUNNING?, Thanks for taking a look.

1. Usage of StringBuffer is discouraged as it's slower than StringBuilder. But as this is static String concatenation Java will do the correct thing under the hood anyway. I changed this when I thought I needed to change the generated String and left my changes in. Happy to submit it as a new JIRA or change the title of this one to something along the lines of "Clean up Job#toString & fix exception".

2. I don't understand. Could you elaborate? The existing test already tests the {{FAILED}} status. Do you want me to add another one similar to the existing one for {{RUNNING}}? If I got that right I'll provide a new patch., {quote}
1. Usage of StringBuffer is discouraged as it's slower than StringBuilder.
{quote}

I thought it's better use StringBuilder rather than using + concatenation for this case. What do you think? http://blog.eyallupu.com/2010/09/under-hood-of-java-strings.html

{quote}
Do you want me to add another one similar to the existing one for RUNNING?
{quote}

Yes, you're right. I think we need to add the test for the backward compatibility.
, 1. The post supports what I was saying: "+" is safe and can be used for non-dynamic stuff. I actually checked (using javap) the bytecode and the compiler automatically converts it to StringBuilder under the hood.

2. Will do and attach a new patch, Patch with an additional test for RUNNING, \\
\\
| (/) *{color:green}+1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | pre-patch |  15m 29s | Pre-patch trunk compilation is healthy. |
| {color:green}+1{color} | @author |   0m  0s | The patch does not contain any @author tags. |
| {color:green}+1{color} | tests included |   0m  0s | The patch appears to include 1 new or modified test files. |
| {color:green}+1{color} | javac |   7m 56s | There were no new javac warning messages. |
| {color:green}+1{color} | javadoc |  10m  0s | There were no new javadoc warning messages. |
| {color:green}+1{color} | release audit |   0m 22s | The applied patch does not increase the total number of release audit warnings. |
| {color:green}+1{color} | checkstyle |   0m 49s | There were no new checkstyle issues. |
| {color:green}+1{color} | whitespace |   0m  0s | The patch has no lines that end in whitespace. |
| {color:green}+1{color} | install |   1m 39s | mvn install still works. |
| {color:green}+1{color} | eclipse:eclipse |   0m 34s | The patch built with eclipse:eclipse. |
| {color:green}+1{color} | findbugs |   1m 19s | The patch does not introduce any new Findbugs (version 3.0.0) warnings. |
| {color:green}+1{color} | mapreduce tests |   1m 46s | Tests passed in hadoop-mapreduce-client-core. |
| | |  39m 57s | |
\\
\\
|| Subsystem || Report/Notes ||
| Patch URL | http://issues.apache.org/jira/secure/attachment/12733879/MAPREDUCE-6298.4.patch |
| Optional Tests | javadoc javac unit findbugs checkstyle |
| git revision | trunk / c97f32e |
| hadoop-mapreduce-client-core test log | https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/5745/artifact/patchprocess/testrun_hadoop-mapreduce-client-core.txt |
| Test Results | https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/5745/testReport/ |
| Java | 1.7.0_55 |
| uname | Linux asf903.gq1.ygridcore.net 3.13.0-36-lowlatency #63-Ubuntu SMP PREEMPT Wed Sep 3 21:56:12 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux |
| Console output | https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/5745/console |


This message was automatically generated., Thanks for v4, [~lars_francke]!

In terms of the logic I was suggesting, one detail is not there yet. We may have a valid status object before the job failed. Thus, it should be:
{code}
    } else if (status == null) {
      return "Job state: " + state;
    }

   // otherwise fall through
{code}

I would like to make sure that we reduce the changes to the absolute minimum required to fix the JIRA. 
- Please undo the change {{catch (IOException | InterruptedException e)}}
- We can keep the code starting with {{StringBuffer sb = new StringBuffer();}}. Using {{StringBuilder}} is the right option here. Since + is just a syntactic sugar, the only change we need here is: {{StringBuilder sb = new StringBuilder();}}.
- I wouldn't bother about line separator in this JIRA. 

Regardless what return statement we take from toString, we should now indicate whether we are connected to the cluster.
Maybe something like:
{code}
String connectedStr = "connected to cluster: " + (cluster != null);
...
    } else {
      return "Job state: " + state + "\n" + connectedStr;
    }
...

   sb.append("reason for failure: ").append(reasonforFailure).append("\n");
   sb.append(connectedStr);
....
{code}]