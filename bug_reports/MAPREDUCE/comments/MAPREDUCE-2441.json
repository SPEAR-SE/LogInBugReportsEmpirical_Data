[This is our capacity scheduler configuration.  On a test grid with 762 map slots, the first user in running in the default queue only got 266 map slots.  This doesn't appear to be either the user limit or the max limit.  , or the queue limit.

So where does the 266 come from?  The job was a terasort job with 1000 map tasks., Actually, it looks like queue spillage/task stealing doesn't work at all, whether it is -1 or not.  The problem code appears to be in assignSlotsToJob which appears to have replaced the two-phase system in previous versions with a single phase.  This single phase does this check to determine the limit:

{code}
int limit =
      Math.min(
          Math.max(divideAndCeil(currentCapacity, activeUsers),
                   divideAndCeil(ulMin*currentCapacity, 100)),
          (int)(queueCapacity * ulMinFactor)
          );

{code}

In a two queue system where one is -1 and the other is a number, the maximum queue capacity ends up being set to the remainder.  Without a second pass, any additional slots from other queues are essentially ignored., Changing this from a blocker, since no one but me apparently cares that capacity scheduler doesn't actually work as advertised., Actually, let me correct myself.  Task stealing does work--but in a sort of weird and unpredictable way.  Basically, an individual user is limited to the "natural" size of the queue they submitted. So if two users are in the same queue that queue can steal up to 2xqueue size, etc., Allen, I'm sorry I missed this ticket.

As we briefly spoke over IM previously, the CS in 0.20.203 is designed to not allow a single user to go over the natural limit of the queue. As in the docs, you'll need to set the user-limit-factor for the queue to allow a user to go over... I'm pretty sure I told you on in person ;), Nope, not about user-limit-factor.  But doesn't this mean that the first jobs in an expanding queue can starve out jobs in another queue?  In other words, if I have:

job1 = max-lim -1 queue
job2 = max-lim -1 queue
job3 = max-lim % queue

job1 and job2 could take all slots before job3 gets executed, especially if they are submitted by the same user and that is the only user in the job submission queue.]