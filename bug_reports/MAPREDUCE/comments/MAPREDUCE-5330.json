[If Signal.TERM is sent to a process, then we wait for a delay. But in Windows the signal kind is ignored - we just kill it (look at Shell#getSignalKillProcessGroupCommand())
{code}
  public static String[] getSignalKillProcessGroupCommand(int code,
                                                          String groupId) {
    if (WINDOWS) {
      return new String[] { Shell.WINUTILS, "task", "kill", groupId };
    } else {
      return new String[] { "kill", "-" + code , "-" + groupId };
    }
  }
{code}

Here is a fix. If the OS is Windows and the signal is TERM, then return immediately and let a delayed process killer actually kill this process group. This can give this process group a graceful time to clean up itself., Thanks Xi for the patch, looks good to me, +1, +1 from me too.  I'll commit this., I committed this to branch-1-win.  Xi, thank you for contributing this patch., Thanks Ivan and Chris!, The TERM signal typically notifies the process that it should clean up since it will be killed shortly. Not sending it any signal doesnt quite match up that use case. Are we sure that all cases of TERM are followed up by KILL?, I came across similar issues while working on the YARN nodemanager changes for Windows.  Bikas, I agree that this logic doesn't exactly match the meaning of SIGTERM.  To match SIGTERM, we really need a way for one process to signal another process with some "graceful shutdown" message, and a way for the other process to trigger custom code when it receives that message.  Unfortunately, I'm not aware of anything in the Windows API that provides an exact match.  Therefore, the logic in this patch seems to be the closest approximation that's feasible right now.

To elaborate on this, {{TerminateProcess}} immediately kills the target process, and there is no way for that process to trap the call and run custom clean-up code.

http://msdn.microsoft.com/en-us/library/windows/desktop/ms686714(v=vs.85).aspx

This is much different from Unix signals, which allow the target process to install signal handlers to respond gracefully to things like SIGTERM.

There also seems to be some support for programmatically sending CTL-C to a process and installing a custom handler to respond to it.  This would be {{SetConsoleCtrlHandler}} and {{GenerateConsoleCtrlEvent}}.  I've heard anecdotally that this can be used to create a rough approximation of Unix signals, but I haven't tried it myself.

http://msdn.microsoft.com/en-us/library/windows/desktop/ms686016(v=vs.85).aspx

http://msdn.microsoft.com/en-us/library/windows/desktop/ms683155(v=vs.85).aspx

Aside from that, the only other option seems to be for Windows applications to roll their own custom IPC protocol (i.e. one process sends another a custom graceful shutdown message over a named pipe).

It might be worth pursuing one of these solutions in the long term for absolute correctness, but these approaches will require a lot more coding and testing.

Xi, please let me know if I've missed anything regarding signaling capabilities in the Windows API.
, Chris, Bikas, Xi, I filed a new Jira MAPREDUCE-5387 to investigate possible ways to implement Signal.TERM on Windows. I have already spent time investigating this some time ago, will try to come up with a proposal in the near term. Chris' summary from above gives a good overview of some possible options (I copied it into the new Jira). ]