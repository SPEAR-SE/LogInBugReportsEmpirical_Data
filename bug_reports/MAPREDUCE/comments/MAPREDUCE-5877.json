[This issue is reported on MAPREDUCE-2217, and we have also seen this in some CDH users. After investigating this issue in the context of MAPREDUCE-5110 and otherwise, I strongly believe that MAPREDUCE-2217 was the wrong way of handling things. IMO, it is more a hack than a good solution. 

A better approach would be for the TT to monitor the progress of tasks including those that haven't been launched yet (per-job config: mapred.task.launch.timeout) and kill those that are past the timeout. The JT realizes this and launches another attempt. In case the TT itself expires, the task yet to be launched also gets expired along with other running tasks. We have tested this fix on production clusters and it works significantly better than the one on MAPREDUCE-2217., repro-mr-5877 helps reproduce the issue. Apply the patch, start the JT, restart the JT and run a sample MR job., Here is a fairly straight-forward patch that undoes MR-2217 and fixes it on the TT side. , This approach makes sense to me - +1., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12643432/mr-5877-1.patch
  against trunk revision .

    {color:red}-1 patch{color}.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4583//console

This message is automatically generated., Committed to branch-1]