[Hey Kihwal. What's the distinction between this JIRA and MAPREDUCE-3184? Just making it configurable rather than doing a System.exit?, I was under the impression that the jetty health check in MAPREDUCE-2529 and the spinning jetty detection don't have the exact coverge. If MAPREDUCE-3184 alone can cover 100%, There is no reason to have this jira. In that case I will ask it to be included in 1.0.1., @Todd If anyone can provide evidence or even a stat showing that the jetty exception behavior converges to spinning selector thread behavior in a short amount of time, I see no reason to have this jira.  

I've seen cases where some trackers having quite a few of the exceptions reported in MAPREDUCE-2529 while many new requests were served successfully. The fault-detection coverage of 100% is very critical to this problem. If it's not 100%, jobs with a large number of mappers will still suffer. Other than the potential overlap of coverage, do you see any risk in this?  We want the threshold to be configurable and the default can be either to 0 (disable) or very high., We are looking at doing this to better handle http://jira.codehaus.org/browse/JETTY-1342.  This is supposedly fixed in Jetty 6.1.27 - if it ever gets released, which I'm guessing is also in the patched 6.1.26 that Todd created.

I believe MAPREDUCE-3184 is for http://jira.codehaus.org/browse/JETTY-937.

We are seeing both and would like to more aggressive handle Jetty-1342 by exiting immediately so any running tasks trying to fetch data from this TT will get relaunched somewhere else rather then trying a bunch of times.

Todd, as Kihwal mentioned if you think MAPREDUCE-3184 also covers Jetty-1342 please let us know., Gotcha - you're correct that 3184 doesn't handle the broken acceptor issue. Have you seen this a lot in production? We run into JETTY-937 a lot, but haven't seen the broken acceptors in 6.1.26., Yes we've seen both instances in production. I don't have any metrics on which one we are seeing more.  I should have a patch for this up later today, finishing up some testing., Looks like the exception count is across the lifetime of the TT. It should instead be something like a trailing time window, or better, a trailing ratio of successes vs exceptions. Otherwise there's no reasonable way to set a value for the limit. right?, All the instances I've seen where it hits JETTY-1342 it is hosed pretty much immediately and it doesn't recover after seeing just a couple of the exceptions. That is why I had it just a straight count over the lifetime. 

I guess it would make it more extensible for possible future Jetty bugs to have it be a ratio though.  So how about we do the ratio of say the last 100 requests? If that ratio goes above a certain threshold, then we abort.  we could make that number (100) configurable if someone really wants.  

, Ratio over the last N requests sound good. I was worried about false triggering - eg if you get one random exception once every 100000 calls, but your TT is up for months, it will eventually crash with the other approach., patch now has the limit set as a % of the last X number requests.  Pulled things out into their own class., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12515044/MAPREDUCE-3851.patch
  against trunk revision .

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    -1 patch.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/1892//console

This message is automatically generated., Without this change there are 10 findbugs warnings. This one introduces:
org.apache.hadoop.mapred.ShuffleExceptionTracker.doAbort() invokes System.exit(...), which shuts down the entire virtual machine

This is expected, I will update patch to exclude this.


    [exec] -1 overall.
     [exec]
     [exec]     +1 @author.  The patch does not contain any @author tags.
     [exec]
     [exec]     +1 tests included.  The patch appears to include 3 new or modified tests.
     [exec]
     [exec]     +1 javadoc.  The javadoc tool did not generate any warning messages.
     [exec]
     [exec]     +1 javac.  The applied patch does not increase the total number of javac compiler warnings.     [exec]     [exec]     -1 findbugs.  The patch appears to introduce 11 new Findbugs (version 1.3.9) warnings.     [exec], exclude findbugs warning. test-patch output now matches branch-1.0 without this patch.


     [exec] -1 overall.
     [exec]
     [exec]     +1 @author.  The patch does not contain any @author tags.
     [exec]
     [exec]     +1 tests included.  The patch appears to include 6 new or modified tests.
     [exec]
     [exec]     +1 javadoc.  The javadoc tool did not generate any warning messages.
     [exec]
     [exec]     +1 javac.  The applied patch does not increase the total number of javac compiler warnings.
     [exec]
     [exec]     -1 findbugs.  The patch appears to introduce 10 new Findbugs (version 1.3.9) warnings.
, -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12515092/MAPREDUCE-3851.patch
  against trunk revision .

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 6 new or modified tests.

    -1 patch.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/1897//console

This message is automatically generated., +1 The patch looks good to me. There is no explicit check and error message against {{size <= 0}}, but I guess it's okay since TT won't go any further and the stack trace should give a clue., Thanks for the review Kihwal.  I went ahead and updated it to make the check for size < 0 explicit., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12515608/MAPREDUCE-3851.patch
  against trunk revision .

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 6 new or modified tests.

    -1 patch.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/1910//console

This message is automatically generated., testpatch output - again the 10 findbugs aren't from this patch.

    [exec] -1 overall.  
     [exec] 
     [exec]     +1 @author.  The patch does not contain any @author tags.
     [exec] 
     [exec]     +1 tests included.  The patch appears to include 6 new or modified tests.
     [exec] 
     [exec]     +1 javadoc.  The javadoc tool did not generate any warning messages.
     [exec] 
     [exec]     +1 javac.  The applied patch does not increase the total number of javac compiler warnings.
     [exec] 
     [exec]     -1 findbugs.  The patch appears to introduce 10 new Findbugs (version 1.3.9) warnings., The patch looks good to me.  The only thing that I can think of might be documentation.  Do we want to have this documented?  It will be removed in 0.23 when we no longer use Jetty so that makes me lean towards no, but the default config value is to have this disabled "mapreduce.reduce.shuffle.catch.exception.percent.limit.fatal" is 0.0 by default. which if it is something that is off by default users who have this problem will need to know how they can turn this on. , in the original jetty detection jira -  MAPREDUCE-2529 - Chris had asked to keep it undocumented see https://issues.apache.org/jira/browse/MAPREDUCE-2529?focusedCommentId=13044180&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13044180

It appears that none of the configuration similar to this are documented so kept with that theme., Sounds good to me +1, Thanks Tom.  I just put this into branch-1 and branch-1.0, Corrected Target and Fixed versions., [~tgraves], I finally figured out the bug that causes the acceptors to occasionally not start. It's JETTY-1316. I pushed a patched jetty here: https://github.com/toddlipcon/jetty-hadoop-fix/

and we'll try to deploy it to our maven repository as 6.1.26.cloudera.2 soon.

Hope this helps!, Thanks Todd, great to hear!]