[Link this issue with MAPREDUCE-4150, I think the real way, going fwd, to fix this is to ensure the MR client and the application are on the same version - MAPREDUCE-4421 should solve that; and be the default deployment model., This came up in the context of 2.4.1 Here's what I posted on the mailing lists
{quote}
Unfortunately even though we documented wire compatiblity, cross-version client/server support doesn't yet really work for YARN and MapReduce. We can only do that once we have wire-compatibility and eventually rolling upgrades. No fix is in sight for MAPREDUCE-5831 - for now both clients and AMs have to upgrade together in the MapReduce land..
{quote}, We solve this on our clusters by leveraging MAPREDUCE-4421 (i.e.: deploy MR via HDFS) and have our client configs ask for the same version of the MR framework that they are.  That way MR clients always use the same jars for AMs and tasks that match their version, so we won't have an old jobclient trying to talk to a new AM or vice-versa., bq. This came up in the context of 2.4.1
bq. We solve this on our clusters by leveraging MAPREDUCE-442

and on mailing list:

bq.  Actually, that is a reasonable expectation - particularly because we should all be migrating towards MAPREDUCE-4421 and should stop installing MR on every node.

Move it out of 2.4.1. Upon the discussion, do you think we even don't want to fix the issue given we are supposed to deploy MR via distributed cache?, +1 for migrating towards MAPREDUCE-4421 for solution of client/server capability issue in a short time. For the longer time, as mentioned by Vinod, wire capability and rolling upgrade should be the ultimate solution. So IMHO, we don't need fix this issue for now., Taking it over and mark this as blocker as we will support rolling upgrade since 2.6., Upload a patch to fix this issue., {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12670990/MAPREDUCE-5831.patch
  against trunk revision 7af4c38.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4910//testReport/
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4910//console

This message is automatically generated., [~djp], thanks for the patch. Here are my comments.

1. For setting value, it seems that we just need to fix TypeConverter, which is the only one used at the interface between client and AM. And the incompatibility happens when client and AM are of different version. Within the scope of either client or AM only, findCounter should have no problem.
{code}
-        c.setValue(yCntr.getValue());
+        // if c can be found, or it will be skipped.
+        if (c != null) {
+          c.setValue(yCntr.getValue());
+        }
{code}

2. The exact problem happens:
{code}
  @Override
  public C findCounter(String counterName) {
    return findCounter(valueOf(counterName));
  }
{code}
valueOf is going to throw exception because the Enum object doesn't exist at the client side, instead of returning a null here.
Therefore, in the test:
{code}
+        counterGroup.findCounter(JobCounter.NUM_FAILED_MAPS.toString());
{code}
It will not be helpful, because we use the existing Enum object's name to find this object., Thanks [~zjshen] for review and comments.
bq. For setting value, it seems that we just need to fix TypeConverter, which is the only one used at the interface between client and AM. And the incompatibility happens when client and AM are of different version. Within the scope of either client or AM only, findCounter should have no problem.
findCounter will throw exception. Just as you said, we can choose to handle this exception in TypeConverter (the caller) or in findCounter. I prefer to handle it in findCounter because as a find* api, it shouldn't crash with exception if cannot find something. Also, this way is easier to test.

bq. It will not be helpful, because we use the existing Enum object's name to find this object.
The helpful thing is next "Unknown", it shows it can get a null count instead of throwing exception the NUM_FAILED_MAPS here is just a compare (not null).
{code}
+    org.apache.hadoop.mapreduce.Counter count1 = 
+        counterGroup.findCounter(JobCounter.NUM_FAILED_MAPS.toString());
+    Assert.assertNotNull(count1);
+    
+    // Verify no exception get thrown when finding an unknown counter
+    org.apache.hadoop.mapreduce.Counter count2 = 
+        counterGroup.findCounter("Unknown");
+    Assert.assertNull(count2);
{code}, bq.  I prefer to handle it in findCounter because as a find* api, it shouldn't crash with exception if cannot find something. Also, this way is easier to test.

It's fine too. If so, we need to fix FileSystemCounterGroup.findCounter, which will have the similar issue., bq. It's fine too. If so, we need to fix FileSystemCounterGroup.findCounter, which will have the similar issue.
Good point. Address this in v2 version., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12671342/MAPREDUCE-5831-v2.patch
  against trunk revision 8269bfa.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:red}-1 eclipse:eclipse{color}.  The patch failed to build with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in .

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4916//testReport/
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4916//console

This message is automatically generated., Good to me in general, but for FileSystemCounterGroup, it seems that we need to:
1. fix addCounter as well as we did for FrameworkCounterGroup, and
2. add an analog test case for FileSystemCounterGroup.

{code}
/home/jenkins/tools/maven/latest/bin/mvn eclipse:eclipse -DHadoopPatchProcess > /home/jenkins/jenkins-slave/workspace/PreCommit-MAPREDUCE-Build/../patchprocess/patchEclipseOutput.txt 2>&1
/home/jenkins/jenkins-slave/workspace/PreCommit-MAPREDUCE-Build/dev-support/test-patch.sh: line 693: /home/jenkins/jenkins-slave/workspace/PreCommit-MAPREDUCE-Build/../patchprocess/patchEclipseOutput.txt: No such file or directory
{code}
it seems that the build corrupted for some reason., Thanks [~zjshen] for review and comments. v3 patch just addressed your comments., {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12671374/MAPREDUCE-5831-v3.patch
  against trunk revision e96ce6f.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4917//testReport/
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4917//console

This message is automatically generated., +1, will commit it, Committed to trunk and branch-2. Thanks, Junping!, FAILURE: Integrated in Hadoop-trunk-Commit #6118 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/6118/])
MAPREDUCE-5831. Make MR client ignore unknown counters received from AM. Contributed by Junping Du. (zjshen: rev 662fc11ae7ccea9d05dfe54b2a794bb08cfd70a4)
* hadoop-mapreduce-project/CHANGES.txt
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/test/java/org/apache/hadoop/mapred/TestCounters.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/counters/FileSystemCounterGroup.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapreduce/TypeConverter.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/counters/FrameworkCounterGroup.java
, FAILURE: Integrated in Hadoop-Yarn-trunk #692 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk/692/])
MAPREDUCE-5831. Make MR client ignore unknown counters received from AM. Contributed by Junping Du. (zjshen: rev 662fc11ae7ccea9d05dfe54b2a794bb08cfd70a4)
* hadoop-mapreduce-project/CHANGES.txt
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/counters/FileSystemCounterGroup.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapreduce/TypeConverter.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/test/java/org/apache/hadoop/mapred/TestCounters.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/counters/FrameworkCounterGroup.java
, SUCCESS: Integrated in Hadoop-Hdfs-trunk #1883 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/1883/])
MAPREDUCE-5831. Make MR client ignore unknown counters received from AM. Contributed by Junping Du. (zjshen: rev 662fc11ae7ccea9d05dfe54b2a794bb08cfd70a4)
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/counters/FileSystemCounterGroup.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/counters/FrameworkCounterGroup.java
* hadoop-mapreduce-project/CHANGES.txt
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapreduce/TypeConverter.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/test/java/org/apache/hadoop/mapred/TestCounters.java
, FAILURE: Integrated in Hadoop-Mapreduce-trunk #1908 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/1908/])
MAPREDUCE-5831. Make MR client ignore unknown counters received from AM. Contributed by Junping Du. (zjshen: rev 662fc11ae7ccea9d05dfe54b2a794bb08cfd70a4)
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/counters/FileSystemCounterGroup.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapreduce/TypeConverter.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/test/java/org/apache/hadoop/mapred/TestCounters.java
* hadoop-mapreduce-project/CHANGES.txt
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/counters/FrameworkCounterGroup.java
, The problem is not completely resolved. File another jira for it: MAPREDUCE-6168., Hi [~zjshen], I think problem get fixed since 2.6. For 2.2, because it doesn't have any fix, the problem could be still there. Please see my comments in MAPREDUCE-6168.]