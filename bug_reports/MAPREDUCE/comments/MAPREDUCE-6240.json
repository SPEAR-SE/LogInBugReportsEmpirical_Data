[Hi [~kamrul], I actually ran into this problem with my recent project, and have a fix that I could submit later today., I also prepared a patch as well.

I will upload mine too. Then we can combine., [~jira.shegalov] this is my patch. Please put yours. We can definitely combine both.
, Hi [~kamrul], my patch is similar. It chains exceptions like this:
{code}
java.io.IOException: Cannot initialize Cluster. Please check your configuration for mapreduce.framework.name and the correspond server addresses.
	at org.apache.hadoop.mapreduce.Cluster.initialize(Cluster.java:127)
	at org.apache.hadoop.mapreduce.Cluster.<init>(Cluster.java:82)
	at org.apache.hadoop.mapreduce.Cluster.<init>(Cluster.java:75)
	at org.apache.hadoop.mapreduce.TestClientProtocolProviderImpls.testClusterException(TestClientProtocolProviderImpls.java:105)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at junit.framework.TestCase.runTest(TestCase.java:176)
	at junit.framework.TestCase.runBare(TestCase.java:141)
	at junit.framework.TestResult$1.protect(TestResult.java:122)
	at junit.framework.TestResult.runProtected(TestResult.java:142)
	at junit.framework.TestResult.run(TestResult.java:125)
	at junit.framework.TestCase.run(TestCase.java:129)
	at junit.framework.TestSuite.runTest(TestSuite.java:255)
	at junit.framework.TestSuite.run(TestSuite.java:250)
	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:84)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:254)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:149)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
Caused by: java.io.IOException: Failed to use org.apache.hadoop.mapred.YarnClientProtocolProvider
	at org.apache.hadoop.mapreduce.Cluster.initialize(Cluster.java:120)
	... 22 more
Caused by: java.lang.RuntimeException: Error in instantiating YarnClient
	at org.apache.hadoop.mapred.YARNRunner.<init>(YARNRunner.java:140)
	at org.apache.hadoop.mapred.YARNRunner.<init>(YARNRunner.java:122)
	at org.apache.hadoop.mapred.YARNRunner.<init>(YARNRunner.java:112)
	at org.apache.hadoop.mapred.YarnClientProtocolProvider.create(YarnClientProtocolProvider.java:34)
	at org.apache.hadoop.mapreduce.Cluster.initialize(Cluster.java:95)
	... 22 more
Caused by: org.apache.hadoop.fs.UnsupportedFileSystemException: fs.AbstractFileSystem.nosuchfs.impl=null: No AbstractFileSystem configured for scheme: nosuchfs
	at org.apache.hadoop.fs.AbstractFileSystem.createFileSystem(AbstractFileSystem.java:161)
	at org.apache.hadoop.fs.AbstractFileSystem.get(AbstractFileSystem.java:250)
	at org.apache.hadoop.fs.FileContext$2.run(FileContext.java:324)
	at org.apache.hadoop.fs.FileContext$2.run(FileContext.java:321)
	at java.security.AccessController.doPrivileged(Native Method)
	at javax.security.auth.Subject.doAs(Subject.java:415)
	at org.apache.hadoop.security.UserGroupInformation.doAs(UserGroupInformation.java:1669)
	at org.apache.hadoop.fs.FileContext.getAbstractFileSystem(FileContext.java:321)
	at org.apache.hadoop.fs.FileContext.getFileContext(FileContext.java:438)
	at org.apache.hadoop.fs.FileContext.getFileContext(FileContext.java:464)
	at org.apache.hadoop.mapred.YARNRunner.<init>(YARNRunner.java:138)
	... 26 more
{code}, {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12696338/MAPREDUCE-6240.1.patch
  against trunk revision b73e776.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:red}-1 findbugs{color}.  The patch appears to introduce 13 new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/5150//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/5150//artifact/patchprocess/newPatchFindbugsWarningshadoop-mapreduce-client-core.html
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/5150//console

This message is automatically generated., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12696345/MAPREDUCE-6240-gera.001.patch
  against trunk revision b73e776.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:red}-1 findbugs{color}.  The patch appears to introduce 13 new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:red}-1 core tests{color}.  The patch failed these unit tests in hadoop-common-project/hadoop-common hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient:

                  org.apache.hadoop.conf.TestJobConf
                  org.apache.hadoop.mapred.TestClusterMapReduceTestCase
                  org.apache.hadoop.mapreduce.TestLargeSort
                  org.apache.hadoop.mapreduce.v2.TestMRAppWithCombiner

                                      The following test timeouts occurred in hadoop-common-project/hadoop-common hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient:

org.apache.hadoop.mapred.TestMRIntermediateDataEncryption
org.apache.hadoop.mapred.TestMerge
org.apache.hadoop.mapreduce.v2.TestUberAM

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/5151//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/5151//artifact/patchprocess/newPatchFindbugsWarningshadoop-mapreduce-client-core.html
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/5151//console

This message is automatically generated., I don't think any of these failures related. Resubmitting the same patch to get another Jenkins run., I also ran the tests locally, only TestJobConf MAPREDUCE-6223 failed., [~jira.shegalov] Thanks for your comments.
I also thought the similar way: not to loose the individual stack traces. But I'm not sure chaining is the best approach.
The reason: the exceptions created in the loop are not related by "Caused by". They are all independent. 

Based on this understanding, I want to stringify all stacktraces and then append then as one error message with "either .. or ..or " pattern. It is not fully clean though.

Do you have any suggestion?

, The intuition behind chaining is the following. We would not try provider 2 if provider 1 worked, in other words: our provider 2 failures are indirectly caused by provider 1 failures., if provider1 and provider2 both failed, the user will get only the provider 1 error. He will not get any error for provider 2 that may be resolved easily by the user.
My understanding is : if any one provider is fine then  cluster is initialized properly. This good case is handled correctly. But when all failed, we would not have full stack traces for both. In some instances,  resolving the provider 2 may be easier than provider 1. 
right?

, bq. if provider1 and provider2 both failed, the user will get only the provider 1 error. He will not get any error for provider 2 that may be resolved easily by the user.

Good catch, [~kamrul]! I was talking about my intention to chain all exceptions but had a typo.  I was supposed to be:
{code}
reason = new IOException("Failed to use " +
              provider.getClass().getName(), rootCause);
{code}
Uploading 002., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12696556/MAPREDUCE-6240-gera.001.patch
  against trunk revision e04e8fa.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:red}-1 findbugs{color}.  The patch appears to introduce 13 new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:red}-1 core tests{color}.  The patch failed these unit tests in hadoop-common-project/hadoop-common hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient:

                  org.apache.hadoop.mapreduce.TestLargeSort
                  org.apache.hadoop.conf.TestJobConf

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/5154//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/5154//artifact/patchprocess/newPatchFindbugsWarningshadoop-mapreduce-client-core.html
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/5154//console

This message is automatically generated., bq. The intuition behind chaining is the following. We would not try provider 2 if provider 1 worked, in other words: our provider 2 failures are indirectly caused by provider 1 failures.

Wait, this is synthetically stitching exceptions together from a retry loop? That would be very confusing to debug. Have you looked at an approach like [MultipleIOException|https://git1-us-west.apache.org/repos/asf?p=hadoop.git;a=blob;f=hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/MultipleIOException.java;h=5e584c9cd0705471a826932d782eec409b5bae37;hb=HEAD]?

There's also a spurious change to {{AbstractFileSystem}} in the latest patch., [~chris.douglas], thanks for the pointer, we should use MultipleIOException for consistency.  AFS change is visibility for the unit test., I see. Would it be possible to construct a test that's both more direct for the fix and doesn't require a change to common? Possibly initialize two providers that throw different exceptions, then verify that both messages are in the output. Just looking at the patch so I don't know the context, but wouldn't the old code pass, also?, {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12696588/MAPREDUCE-6240-gera.002.patch
  against trunk revision 5f4ef2d.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:red}-1 findbugs{color}.  The patch appears to introduce 13 new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:red}-1 core tests{color}.  The patch failed these unit tests in hadoop-common-project/hadoop-common hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient:

                  org.apache.hadoop.ipc.TestIPC
                  org.apache.hadoop.security.token.delegation.web.TestWebDelegationToken
                  org.apache.hadoop.conf.TestJobConf
                  org.apache.hadoop.mapreduce.TestLargeSort

                                      The following test timeouts occurred in hadoop-common-project/hadoop-common hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient:

org.apache.hadoop.mapred.TestLazyOutput

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/5155//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/5155//artifact/patchprocess/newPatchFindbugsWarningshadoop-mapreduce-client-core.html
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/5155//console

This message is automatically generated., [~jira.shegalov] if this message  "Please check your configuration for mapreduce.framework.name and the correspond server addresses." is shown, please include what is the current values of those properties. It will help users to find out if their configurations is effective. , [~kamrul], this JIRA is still assigned to you. Do you have time to work on it?, [~jira.shegalov] sorry for the long pause.
I will not be available to work on this soon.
Please feel free to take it.

, 003 patch for review. Sorry for the delay!, \\
\\
| (/) *{color:green}+1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | pre-patch |  17m  3s | Pre-patch trunk compilation is healthy. |
| {color:green}+1{color} | @author |   0m  0s | The patch does not contain any @author tags. |
| {color:green}+1{color} | tests included |   0m  0s | The patch appears to include 1 new or modified test files. |
| {color:green}+1{color} | javac |   7m 43s | There were no new javac warning messages. |
| {color:green}+1{color} | javadoc |   9m 57s | There were no new javadoc warning messages. |
| {color:green}+1{color} | release audit |   0m 24s | The applied patch does not increase the total number of release audit warnings. |
| {color:green}+1{color} | checkstyle |   1m 19s | There were no new checkstyle issues. |
| {color:green}+1{color} | whitespace |   0m  0s | The patch has no lines that end in whitespace. |
| {color:green}+1{color} | install |   1m 40s | mvn install still works. |
| {color:green}+1{color} | eclipse:eclipse |   0m 35s | The patch built with eclipse:eclipse. |
| {color:green}+1{color} | findbugs |   2m 16s | The patch does not introduce any new Findbugs (version 3.0.0) warnings. |
| {color:green}+1{color} | mapreduce tests |   1m 47s | Tests passed in hadoop-mapreduce-client-core. |
| {color:green}+1{color} | mapreduce tests | 100m 18s | Tests passed in hadoop-mapreduce-client-jobclient. |
| | | 143m  6s | |
\\
\\
|| Subsystem || Report/Notes ||
| Patch URL | http://issues.apache.org/jira/secure/attachment/12742446/MAPREDUCE-6240.003.patch |
| Optional Tests | javadoc javac unit findbugs checkstyle |
| git revision | trunk / a95d39f |
| hadoop-mapreduce-client-core test log | https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/5848/artifact/patchprocess/testrun_hadoop-mapreduce-client-core.txt |
| hadoop-mapreduce-client-jobclient test log | https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/5848/artifact/patchprocess/testrun_hadoop-mapreduce-client-jobclient.txt |
| Test Results | https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/5848/testReport/ |
| Java | 1.7.0_55 |
| uname | Linux asf903.gq1.ygridcore.net 3.13.0-36-lowlatency #63-Ubuntu SMP PREEMPT Wed Sep 3 21:56:12 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux |
| Console output | https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/5848/console |


This message was automatically generated., I would appreciate a review for 003 patch. /cc: [~chris.douglas], [~jlowe], Hi [~jira.shegalov]

{code}
private void initialize(InetSocketAddress jobTrackAddr, Configuration conf)
throws IOException {

final List<IOException> ioExceptions = new ArrayList<IOException>();
synchronized (frameworkLoader) {
for (ClientProtocolProvider provider : frameworkLoader) {
.........

{code}

As {{ioExceptions}} as this is outside syncronized block, in multi thread env, wouldn it get reset if Thread 1 is inside synchronized block and Thread 2 enters method.?, Got it. Please ignore my previous comment. :), Thanks for taking a look [~ajithshetty]. Yes, it's ok since each method invocation has its own local copy., Minor (not blocking for commit):
- This could just add the {{IOException}} to the list instead of throw/catch
- The message doesn't need to append {{t}}:
{noformat}
+            ioExceptions.add(new IOException("Failed to initialize protocol: "
+                + t, t));
{noformat}
- Should this continue to catch only {{Exception}}, instead of {{Throwable}}? 
- If the cause of the exception is an {{IOException}}, this discards the caught exception? Is this a special/common case?

It's a little odd to wrap all of this as an {{IOException}}, but I don't think it's worth adding another composite type., Thanks [~chris.douglas], ran out of time this week. Will take care of it next week., Hi [~jira.shegalov]

Any reason why we dint just throw a IOException with all these exception added as suppressed exceptions.?
{code}
............
catch (IOException e) {
          if(generalException == null)
          {
            generalException = new IOException("General exception");
          }
          generalException.addSuppressed(e);
        }
{code}

just like how java does it in a try-with-resource block, bq. Any reason why we dint just throw a IOException with all these exception added as suppressed exceptions.?

Neat! I didn't know this was added to 1.7. I like this approach, Hi [~chris.douglas]

+1 of avoiding composites. So, how about refactoring it and removing this class org.apache.hadoop.io.MultipleIOException :) u think its a good idea.?
, bq.  how about refactoring it and removing this class org.apache.hadoop.io.MultipleIOException

We'd have to audit where it's used. If there could be systems that expect and handle it, we'd have to deprecate it first, but I think it makes sense to remove it in trunk. Separate issue, of course., +1 for 1.7 addSuppressed for trunk, but we also need a patch backportable to 2.6.1., Where are we on this one? We have the issue now when compiling bigtop's sqoop2 and we don't even know where to start debugging., | (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue} 0m 0s {color} | {color:blue} Docker mode activated. {color} |
| {color:red}-1{color} | {color:red} patch {color} | {color:red} 0m 4s {color} | {color:red} MAPREDUCE-6240 does not apply to trunk. Rebase required? Wrong Branch? See https://wiki.apache.org/hadoop/HowToContribute for help. {color} |
\\
\\
|| Subsystem || Report/Notes ||
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12742446/MAPREDUCE-6240.003.patch |
| JIRA Issue | MAPREDUCE-6240 |
| Console output | https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/6441/console |
| Powered by | Apache Yetus 0.2.0   http://yetus.apache.org |


This message was automatically generated.

, MAPREDUCE-6240.004.patch based on [~ajithshetty]'s suggestions., | (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue} 0m 15s {color} | {color:blue} Docker mode activated. {color} |
| {color:green}+1{color} | {color:green} @author {color} | {color:green} 0m 0s {color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:green}+1{color} | {color:green} test4tests {color} | {color:green} 0m 0s {color} | {color:green} The patch appears to include 1 new or modified test files. {color} |
| {color:blue}0{color} | {color:blue} mvndep {color} | {color:blue} 0m 27s {color} | {color:blue} Maven dependency ordering for branch {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 6m 5s {color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 1m 29s {color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green} 0m 25s {color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green} 0m 51s {color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green} 0m 23s {color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green} 1m 6s {color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 0m 32s {color} | {color:green} trunk passed {color} |
| {color:blue}0{color} | {color:blue} mvndep {color} | {color:blue} 0m 8s {color} | {color:blue} Maven dependency ordering for patch {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 0m 40s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 1m 27s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green} 1m 27s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green} 0m 22s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green} 0m 47s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green} 0m 19s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green} 0m 0s {color} | {color:green} The patch has no whitespace issues. {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green} 1m 15s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 0m 29s {color} | {color:green} the patch passed {color} |
| {color:red}-1{color} | {color:red} unit {color} | {color:red} 1m 56s {color} | {color:red} hadoop-mapreduce-client-core in the patch failed. {color} |
| {color:red}-1{color} | {color:red} unit {color} | {color:red} 143m 42s {color} | {color:red} hadoop-mapreduce-client-jobclient in the patch failed. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green} 0m 24s {color} | {color:green} The patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black} 163m 50s {color} | {color:black} {color} |
\\
\\
|| Reason || Tests ||
| Failed junit tests | hadoop.mapreduce.tools.TestCLI |
|   | hadoop.mapred.TestReduceFetch |
|   | hadoop.mapred.TestMerge |
|   | hadoop.mapreduce.TestMapReduceLazyOutput |
|   | hadoop.mapred.TestMRIntermediateDataEncryption |
|   | hadoop.mapred.TestLazyOutput |
|   | hadoop.mapreduce.TestLargeSort |
|   | hadoop.mapred.TestReduceFetchFromPartialMem |
|   | hadoop.mapreduce.v2.TestMRJobsWithProfiler |
|   | hadoop.mapreduce.lib.output.TestJobOutputCommitter |
|   | hadoop.mapreduce.security.ssl.TestEncryptedShuffle |
|   | hadoop.mapreduce.v2.TestMROldApiJobs |
|   | hadoop.mapred.TestJobCleanup |
|   | hadoop.mapreduce.v2.TestSpeculativeExecution |
|   | hadoop.mapred.TestClusterMRNotification |
|   | hadoop.mapreduce.security.TestUmbilicalProtocolWithJobToken |
|   | hadoop.mapreduce.v2.TestMRAMWithNonNormalizedCapabilities |
|   | hadoop.mapreduce.v2.TestMRJobs |
|   | hadoop.mapred.TestJobName |
|   | hadoop.mapreduce.TestMRJobClient |
|   | hadoop.mapred.TestClusterMapReduceTestCase |
|   | hadoop.mapred.TestAuditLogger |
|   | hadoop.mapreduce.security.TestMRCredentials |
|   | hadoop.mapred.TestMRTimelineEventHandling |
|   | hadoop.mapreduce.v2.TestMiniMRProxyUser |
|   | hadoop.mapreduce.v2.TestMRJobsWithHistoryService |
|   | hadoop.mapred.TestMiniMRClientCluster |
|   | hadoop.mapred.TestMiniMRChildTask |
|   | hadoop.mapreduce.TestChild |
|   | hadoop.mapreduce.security.TestBinaryTokenFile |
|   | hadoop.mapred.TestJobCounters |
| Timed out junit tests | org.apache.hadoop.mapred.TestMiniMRClasspath |
|   | org.apache.hadoop.mapred.TestJobSysDirWithDFS |
|   | org.apache.hadoop.mapred.TestMiniMRWithDFSWithDistinctUsers |
|   | org.apache.hadoop.mapred.TestMROpportunisticMaps |
\\
\\
|| Subsystem || Report/Notes ||
| Docker |  Image:yetus/hadoop:2c91fd8 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12806867/MAPREDUCE-6240.004.patch |
| JIRA Issue | MAPREDUCE-6240 |
| Optional Tests |  asflicense  compile  javac  javadoc  mvninstall  mvnsite  unit  findbugs  checkstyle  |
| uname | Linux 2eccc0c4d2a8 3.13.0-36-lowlatency #63-Ubuntu SMP PREEMPT Wed Sep 3 21:56:12 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | /testptch/hadoop/patchprocess/precommit/personality/provided.sh |
| git revision | trunk / f5ff05c |
| Default Java | 1.8.0_91 |
| findbugs | v3.0.0 |
| unit | https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/6529/artifact/patchprocess/patch-unit-hadoop-mapreduce-project_hadoop-mapreduce-client_hadoop-mapreduce-client-core.txt |
| unit | https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/6529/artifact/patchprocess/patch-unit-hadoop-mapreduce-project_hadoop-mapreduce-client_hadoop-mapreduce-client-jobclient.txt |
| unit test logs |  https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/6529/artifact/patchprocess/patch-unit-hadoop-mapreduce-project_hadoop-mapreduce-client_hadoop-mapreduce-client-core.txt https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/6529/artifact/patchprocess/patch-unit-hadoop-mapreduce-project_hadoop-mapreduce-client_hadoop-mapreduce-client-jobclient.txt |
|  Test Results | https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/6529/testReport/ |
| modules | C: hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient U: hadoop-mapreduce-project/hadoop-mapreduce-client |
| Console output | https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/6529/console |
| Powered by | Apache Yetus 0.3.0   http://yetus.apache.org |


This message was automatically generated.

, trying a jenkins rerun, | (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue} 8m 46s {color} | {color:blue} Docker mode activated. {color} |
| {color:green}+1{color} | {color:green} @author {color} | {color:green} 0m 0s {color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:green}+1{color} | {color:green} test4tests {color} | {color:green} 0m 0s {color} | {color:green} The patch appears to include 1 new or modified test files. {color} |
| {color:blue}0{color} | {color:blue} mvndep {color} | {color:blue} 0m 28s {color} | {color:blue} Maven dependency ordering for branch {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 6m 10s {color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 1m 29s {color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green} 0m 25s {color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green} 0m 51s {color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green} 0m 23s {color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green} 1m 6s {color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 0m 32s {color} | {color:green} trunk passed {color} |
| {color:blue}0{color} | {color:blue} mvndep {color} | {color:blue} 0m 7s {color} | {color:blue} Maven dependency ordering for patch {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 0m 40s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 1m 26s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green} 1m 26s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green} 0m 23s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green} 0m 45s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green} 0m 19s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green} 0m 0s {color} | {color:green} The patch has no whitespace issues. {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green} 1m 15s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 0m 28s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} unit {color} | {color:green} 1m 55s {color} | {color:green} hadoop-mapreduce-client-core in the patch passed. {color} |
| {color:red}-1{color} | {color:red} unit {color} | {color:red} 116m 7s {color} | {color:red} hadoop-mapreduce-client-jobclient in the patch failed. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green} 0m 27s {color} | {color:green} The patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black} 144m 53s {color} | {color:black} {color} |
\\
\\
|| Reason || Tests ||
| Failed junit tests | hadoop.mapred.TestMiniMRChildTask |
\\
\\
|| Subsystem || Report/Notes ||
| Docker |  Image:yetus/hadoop:2c91fd8 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12807042/MAPREDUCE-6240.004.patch |
| JIRA Issue | MAPREDUCE-6240 |
| Optional Tests |  asflicense  compile  javac  javadoc  mvninstall  mvnsite  unit  findbugs  checkstyle  |
| uname | Linux 3b042c8b8239 3.13.0-36-lowlatency #63-Ubuntu SMP PREEMPT Wed Sep 3 21:56:12 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | /testptch/hadoop/patchprocess/precommit/personality/provided.sh |
| git revision | trunk / 93d8a7f |
| Default Java | 1.8.0_91 |
| findbugs | v3.0.0 |
| unit | https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/6530/artifact/patchprocess/patch-unit-hadoop-mapreduce-project_hadoop-mapreduce-client_hadoop-mapreduce-client-jobclient.txt |
| unit test logs |  https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/6530/artifact/patchprocess/patch-unit-hadoop-mapreduce-project_hadoop-mapreduce-client_hadoop-mapreduce-client-jobclient.txt |
|  Test Results | https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/6530/testReport/ |
| modules | C: hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient U: hadoop-mapreduce-project/hadoop-mapreduce-client |
| Console output | https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/6530/console |
| Powered by | Apache Yetus 0.3.0   http://yetus.apache.org |


This message was automatically generated.

, TestMiniMRChildTask failures are tracked in MAPREDUCE-6702. [~chris.douglas], [~ajithshetty], and/or anyone watching please review., Hi

Thanks for the patch. Just a small concern, would creating IOException inside catch block will be better.? as stacktrace will indicate the line Exception object is created.? , +1 lgtm

bq. would creating IOException inside catch block will be better?
The suppressed exceptions are the interesting part. The code is easier to read as-is (IMO), but either way is fine., Thanks [~ajithshetty] and [~chris.douglas] for the comments.
imo including additional exceptions only distracts from the suppressed root cause by making exception chains longer. Committing as is. , Actually sorry I misunderstood the comment by Ajith. 

It reminds me that I left extra wrapping for suppressed exceptions as an artifact of using MultiIOExceptions in prior patches. I would normally get rid of them, but I find adding the provider class name to the message actually quite useful., SUCCESS: Integrated in Hadoop-trunk-Commit #9932 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/9932/])
MAPREDUCE-6240. Hadoop client displays confusing error message. (gera) (gera: rev 0af96a1c08594c809ecb254cee4f60dd22399772)
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/Cluster.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/test/java/org/apache/hadoop/mapreduce/TestClientProtocolProviderImpls.java
, Committed to trunk and branch-2. Thanks to [~kamrul] for the initial patch and [~chris.douglas] and [~ajithshetty] for reviews.]