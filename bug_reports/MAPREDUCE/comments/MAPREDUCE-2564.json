[As per the code, we cannot use the WritableComparator directly because the constructors are made as protected. If there is no comparator for the output key class, it uses this way to create instance of it and it initializes the buffer and keys.

{code:xml}
  public static synchronized WritableComparator get(Class<? extends WritableComparable> c) {
    WritableComparator comparator = comparators.get(c);
    if (comparator == null)
      comparator = new WritableComparator(c, true);
    return comparator;
  }
{code}

When we are writing custom comparator and if we donâ€™t want to use the existing compare() method we can use the below constructor from the subclass
{code:xml}
protected WritableComparator(Class<? extends WritableComparable> keyClass) {
    this(keyClass, false);
  }
{code}
Otherwise we can use this constructor
{code:xml}
protected WritableComparator(Class<? extends WritableComparable> keyClass,
      boolean createInstances)
{code}
Can you elaborate the usage scenario?
, Hmm.  This was fixed between 0.20.2 and 0.20.203.  It seems I reported this against 203.  Is it possible I used 0.20.2 and looked at the source of 0.20.2 while thinking it was 203?  It is hard to remember what I was doing on that day two months ago.]