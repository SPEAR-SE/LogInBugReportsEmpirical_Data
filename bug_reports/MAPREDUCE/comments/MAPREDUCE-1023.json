[In fact, why don't we just suppress everything that newly appeared after HADOOP-5661 went in?

Via HADOOP-5661, Jothi went through pains to make sure findBugs warnings become zero. All that effort would be a waste if patches keep ignoring these warnings. How about modifying the Hudson test-patch.sh script to scream when the warnings go above zero level and making sure trunk is always at zero findBugs warnings? As noted by others, this would also speed up the test-patch.sh process as we will just to need to find the number of warnings introduced by the patch.

I am not very sure whether this should be fixed as bug/blocker for 0.21. Thoughts?, bq. How about modifying the Hudson test-patch.sh script to scream when the warnings go above zero

Well,  after findbugs hit 0 with trunk, test-patch.sh would have screamed even when these new findbugs got introduced as the difference between patch and trunk would have been greater than zero. But then, people seem to have ignored the sreams!!, I couldn't locate the project history because of the project split. Well, at any rate, I guess that the problem at that time is people didn't realize what to do when an un-ignorable warning is spelt out.

I think now, we should bring the number back to zero, advertise the fact that src/test/findbugsExcludeFile.xml serves this purpose, perhaps via the Hudson's reports, and be careful and persistent in making patches follow this. Opinions?, There are 11 findbugs warnings (I think introduced by 3 patches, MAPREDUCE-711, MAPREDUCE-885 and HADOOP-5661) in the trunk and about 20+ javac warnings (warnings other than deprecated ones) in the trunk. 
Managing javac warnings is even more difficult as there are thousands of deprecated warnings and any newly added non-deprecated warnings just does not get reported in testpatch as we set maxwarns=1000., Shall we rise the level of the warnings (m.b. for MR only, because it has so many) up to 10,000? Otherwise, the new issues will be effectively swept under a rag time and again..., IF we are making a MR specific change, then we might as well ignore all deprecated warnings using Xlint:-deprecation. This will print all warnings that are not deprecation related and we could do the normal compare, no?, I don't think that ignoring warnings is a way I'd go. Let's keep them because at some point they have to be fixed (HDFS does such clean-ups and it works great!).

If the bar is raised than test-patch will start reporting freshly introduced warnings if so happens. When the deprecated warnings are fixed in MR and the total number of warning is brought down to an acceptable level (i.e. below 100?) we'd be able to lower the bar back to the current level.

I believe 1000 warnings level has been set as something clearly impossible to reach. Well, life proves it wrong :-(, Duplicate of MAPREDUCE-769, Created MAPREDUCE-1108 so we don't need to create another issue like this one.]