[Attaching patch fixing the issue. Ignoring the InterruptedException(instead of displaying the exception) if it comes from the methods shutdown() or abort()., +1 for the fix. Can you upload {{test-patch}} and {{ant-test}} results?, Unit tests passed on my local machine.

ant test-patch gave:

     [exec] -1 overall.
     [exec]
     [exec]     +1 @author.  The patch does not contain any @author tags.
     [exec]
     [exec]     -1 tests included.  The patch doesn't appear to include any new or modified tests.
     [exec]                         Please justify why no new tests are needed for this patch.
     [exec]                         Also please list what manual steps were performed to verify this patch.
     [exec]
     [exec]     +1 javadoc.  The javadoc tool did not generate any warning messages.
     [exec]
     [exec]     +1 javac.  The applied patch does not increase the total number of javac compiler warnings.
     [exec]
     [exec]     +1 findbugs.  The patch does not introduce any new Findbugs warnings.
     [exec]
     [exec]     +1 release audit.  The applied patch does not increase the total number of release audit warnings.



As I don't see an easy way to add a unit test for this, I did basic manual testing of the patch on a single node cluster and things seem to be fine., Notice the "null" in the message "Statistics interrupt while waiting for polling null". This is
because InterruptedException.getCause() is returning NULL in this case instead of a
Throwable object. I think we should just be passing the exception as-is to the error()
method., Here's a slightly-modified version of Ravi's patch that omits the call to getCause() as I noted earlier., Attaching new patch with slightly modified log message., +1 from me., I just committed this. Thanks Ravi !, Integrated in Hadoop-Mapreduce-trunk-Commit #523 (See [https://hudson.apache.org/hudson/job/Hadoop-Mapreduce-trunk-Commit/523/])
    ]