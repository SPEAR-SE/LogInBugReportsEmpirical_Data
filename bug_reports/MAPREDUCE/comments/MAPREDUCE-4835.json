[Some potential ways to address the issue:

* Don't allow the state to leave "terminal" states like SUCCEEDED/FAILED/KILLED.
* Add metrics for "errored" jobs to distinguish between failed and error.  This still means that the sum of metrics could exceed the total number of job since a job can both succeed and error.
* Have JobImpl.finished ignore incrementing any metrics if the job is already in a terminal state (SUCCEEDED/FAILED/KILLED) to avoid double-counting a job.
, The method "Have JobImpl.finished ignore incrementing any metrics if the job is already in a terminal state (SUCCEEDED/FAILED/KILLED) to avoid double-counting a job." may not work. But before we call the finished, the current states is already changed. So, it is very difficult to check previous status is terminal states or not.
For example, somehow we did InternalErrorTransition, it will change to state from succeeded to error. From the code at InternalErrorTransition, 
    public void transition(JobImpl job, JobEvent event) {
      //TODO Is this JH event required.
      job.setFinishTime();
      JobUnsuccessfulCompletionEvent failedEvent =
          new JobUnsuccessfulCompletionEvent(job.oldJobId,
              job.finishTime, 0, 0,
              JobStateInternal.ERROR.toString());
      job.eventHandler.handle(new JobHistoryEvent(job.jobId, failedEvent)); <-- this line is actually change the states
      job.finished(JobStateInternal.ERROR); <-- this line will increase the failure count that is duplicate
    }
So, what we can do is add JobStateInternal previousState = getInternalState() before job.eventHandler.handle(new JobHistoryEvent(job.jobId, failedEvent)), and check the previousState to decide whether we need to increase the count or not.
For example, if we do not want to increase the count when we change the terminal states to error state. We can do:
In InternalErrorTransition, 
    public void transition(JobImpl job, JobEvent event) {
      //TODO Is this JH event required.
      job.setFinishTime();
      JobUnsuccessfulCompletionEvent failedEvent =
          new JobUnsuccessfulCompletionEvent(job.oldJobId,
              job.finishTime, 0, 0,
              JobStateInternal.ERROR.toString());
      JobStateInternal previousState = job.getInternalState();
      job.eventHandler.handle(new JobHistoryEvent(job.jobId, failedEvent));
      //check the previous state is not terminal states, is not error states, when we meet error states, we should have already increase the count, we do not want to do it again
      if(previousState != JobStateInternal.SUCCEEDED || previousState != JobStateInternal.KILLED || previousState != JobStateInternal.FAILED || previousState != JobStateInternal.ERROR)
      {
    	  job.finished(JobStateInternal.ERROR);
      }
    }]