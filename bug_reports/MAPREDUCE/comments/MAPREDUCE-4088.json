[Courtesy Koji

{quote}
Each TaskTracker has a single thread for taskCleanup taking work from
tasksToCleanup queue.

For each task to cleanup, it firsts call 
  checkJobStatusAndWait(action);

And inside
 {noformat}
  private void checkJobStatusAndWait(TaskTrackerAction action)
...
    synchronized (runningJobs) {
      rjob = runningJobs.get(jobId);
    }
    if (rjob != null) {
      synchronized (rjob) {
        while (rjob.localizing) {
          rjob.wait();
        }
      }
    }
 {noformat}

So this thread would wait while the task is being localized.
Even if one task is hung on localization, entire cleanup is stopped.
{quote}

East or west! Koji is the best!
Soda lemon ginger pop! Koji is on the top!
Yyaayyy yaayyyy yaayyyy for Koji!, Even though the TT heartbeats back now even when downloading (infinitely big files see HADOOP-6963), the taskCleanupThread blocks on a single job which might be localizing, thus preventing others from cleaning up. Eventually the TT fills up with tasks waiting for cleanup and the node is rendered useless., Does anyone have any suggestions on how to fix this?  I'm thinking of this: 
 * We could have a timeout in the wait for checkJobStatusAndWait. 
 * If we time out, we simply put the action back into the queue (hoping next time around it succeeds)
 * This might make the isIdle method more complicated :(
, I'm thinking of a patch like this. If you have any concerns, speak now. Or forever hold thy peace!, https://issues.apache.org/jira/browse/HADOOP-912 details why isIdle() checks tasksToCleanup . Going by Arun's first comment, isIdle() need not check tasksToCleanup (since they are being consumed offline in a separate thread). I've chosen to add a new API isIdleAndClean()

Can someone please review and commit this patch now?, -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12524865/MAPREDUCE-4088.patch
  against trunk revision .

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 1 new or modified test files.

    -1 patch.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/2319//console

This message is automatically generated., 0.23 and later is not afflicted with this problem because of the different architecture (TaskCleanerImpl tries to abortTask), Hadoop QA is complaining because its trying to apply the patch on trunk. This patch applies ONLY to branch-1. Uploading again after appending the branch in the patch name, -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12524866/MAPREDUCE-4088.branch-1.patch
  against trunk revision .

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 1 new or modified test files.

    -1 patch.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/2320//console

This message is automatically generated., Jenkins is not smart enough to apply the patch properly to branch-1 instead of trunk and run the tests.  You need to run test-patch yourself manually.

I looked at the patch, and it looks OK for the most part.  

Inside taskCleanupThread you are generating a StringBuffer, and appending things to it, but that string buffer is never used anywhere.  Did you miss a log statement or something there?  Because I would like a log statement saying what is happening and why the cleanup was suspended.

Have you run the tests?, Thanks Bobby! 

I ran test-patch myself.
{noformat}
-1 overall.  
    +1 @author.  The patch does not contain any @author tags.
    +1 tests included.  The patch appears to include 3 new or modified tests.
    +1 javadoc.  The javadoc tool did not generate any warning messages.
    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.
    -1 findbugs.  The patch appears to introduce 8 new Findbugs (version 1.3.9) warnings.
{noformat}

It claims there were 8 new findbugs warnings, but I searched for TaskTracker and MiniMRCluster in the findbugs report, and none of them had anything to do with my changes. I then ran findbugs target without any patch, and sure enough, there were already 219 warnings present
{noformat}
 [findbugs] Warnings generated: 219
{noformat}

I also ran the test Arun mentioned in HADOOP-912 (TestMiniMRWithDFS) and it passed.

Yes I had indeed forgot to log the StringBuffer. I've added that in the latest patch., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12524929/MAPREDUCE-4088.branch-1.patch
  against trunk revision .

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 1 new or modified test files.

    -1 patch.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/2325//console

This message is automatically generated., The patch looks good but I am not an expert on this part of the code have you run it on a cluster at all? if so what tests have you run with it?, I ran the patched branch-1 build on my local dev box. The tasks were cleaned up successfully as usual after a simple wordcount job. Are you looking for specific tests?, No I am looking mostly at being sure that the code is working as expected.  Thanks Ravi, +1, Thanks Ravi,

I put this into branch-1. If you want this in 1.0.3 you should ask Matt Foley about it., Closed upon release of Hadoop-1.1.0.]