[The patch sets the username on the conf before calling getLocalPathToWrite() to make sure the correct username is used., Even though the race is hard to reproduce, I ll try to confirm the patch works or not., The following stacktrace uses conf to set the localdirs in LocalDirAllocator - hence the need to set the user in the conf properly

{noformat}
INFO org.apache.hadoop.fs.LocalDirAllocator$AllocatorPerContext: 
New local dirs are: /tmp/hdfs/mrlocal/taskTracker/kasha 
Saved local dirs are: java.lang.Thread.getStackTrace(Thread.java:1479) org.apache.hadoop.fs.LocalDirAllocator$AllocatorPerContext.confChanged(LocalDirAllocator.java:254) org.apache.hadoop.fs.LocalDirAllocator$AllocatorPerContext.getLocalPathForWrite(LocalDirAllocator.java:335) org.apache.hadoop.fs.LocalDirAllocator.getLocalPathForWrite(LocalDirAllocator.java:146) org.apache.hadoop.fs.LocalDirAllocator.getLocalPathForWrite(LocalDirAllocator.java:127) org.apache.hadoop.fs.LocalDirAllocator.getLocalPathForWrite(LocalDirAllocator.java:111) org.apache.hadoop.mapred.JobLocalizer.createWorkDir(JobLocalizer.java:464) org.apache.hadoop.mapred.DefaultTaskController.initializeJob(DefaultTaskController.java:196) org.apache.hadoop.mapred.TaskTracker$4.run(TaskTracker.java:1336)
{noformat}, {noformat}
INFO org.apache.hadoop.fs.LocalDirAllocator$AllocatorPerContext: 
New local dirs are: /tmp/hdfs/mrlocal/taskTracker/kasha 
Saved local dirs are: java.lang.Thread.getStackTrace(Thread.java:1479)
org.apache.hadoop.fs.LocalDirAllocator$AllocatorPerContext.confChanged(LocalDirAllocator.java:254)
org.apache.hadoop.fs.LocalDirAllocator$AllocatorPerContext.getLocalPathForWrite(LocalDirAllocator.java:335)
org.apache.hadoop.fs.LocalDirAllocator.getLocalPathForWrite(LocalDirAllocator.java:146)
org.apache.hadoop.fs.LocalDirAllocator.getLocalPathForWrite(LocalDirAllocator.java:127)
org.apache.hadoop.fs.LocalDirAllocator.getLocalPathForWrite(LocalDirAllocator.java:111)
org.apache.hadoop.mapred.JobLocalizer.createWorkDir(JobLocalizer.java:464)
org.apache.hadoop.mapred.DefaultTaskController.initializeJob(DefaultTaskController.java:196)
org.apache.hadoop.mapred.TaskTracker$4.run(TaskTracker.java:1336)
{noformat}, Since this is still in progress, please target 1.2 (branch-1).  Thanks., On closer look, realized the previous patch might mitigate but would not solve the problem.

JobLocalizer constructor makes a shallow copy of the ttConf object. The new patch makes a deep copy of the conf object just before setting the user-specific local dirs., Updated the patch with a test that reproduces the issue without the fix, and verifies that the fix fixes it., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12566723/MR-4964.patch
  against trunk revision .

    {color:red}-1 patch{color}.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/3283//console

This message is automatically generated., Patch looks good to me. Karthik have you run all testcases to check for possible regressions?, Reviewing the patch..., [~tucu00]: Thanks for the review. I ran the tests locally and some of them failed. I ran one of them on branch-1 (without this patch), and noticed it fails there too. So, I am going to re-run all tests on branch-1 and compare the two results and report it here., The following non-HDFS tests fail on branch-1 with and without the patch:

{noformat}
./build/test/TEST-org.apache.hadoop.filecache.TestTrackerDistributedCacheManager.txt:2:Tests run: 11, Failures: 1, Errors: 0, Time elapsed: 18.272 sec
./build/test/TEST-org.apache.hadoop.mapred.TestJobRetire.txt:2:Tests run: 3, Failures: 1, Errors: 0, Time elapsed: 84.8 sec
./build/test/TEST-org.apache.hadoop.mapred.TestRawHistoryFile.txt:2:Tests run: 3, Failures: 0, Errors: 1, Time elapsed: 27.018 sec
{noformat}

As far as the tests are concerned, I believe the patch is good to go., By the way, if someone can run these tests and confirm they fail locally, we can create JIRAs for them., [~kkambatl] I checked - TestTrackerDistributedCacheManager works for me. Can you please make sure there is no regression? Thanks., Sorry for the false alarm; the tests above pass on my laptop (I was running on a cluster node earlier) with the patch applied., Karthik, so, all tests pass without/with the patch?, Yes. All tests passed with/without the patch. 

The few tests that I mentioned earlier failed on one of our cluster nodes., +1. Thanks for verifying/confirming tests pass. I'll commit this mid afternoon today unless I hear otherwise., I need more time, please. Thanks., To add more context: We were seeing a bunch of DiskErrorExceptions (before this patch) on a large cluster under heavy load, because the jobconf file was missing as it was written to the wrong user's dir.

After deploying this patch, we haven't seen any of those errors so far. More importantly, we haven't noticed any regressions., Arun, since we applied this patch to the cluster we were seing the issue (2 days ago), this error never occurred again and we don't see any side effects. Before applying the patch we were seeing this errors on regular basis, errors typically don't fail because the tasks get retried and eventually the job completes (we assume this was the reason this was not caught before). We'd like to get this in ASAP, what are your concerns with the patch?, Sorry, I got held up.

I finally jogged my memory enough to see there is already a fix for this: MAPREDUCE-4843 which has been around for a bit.

How does these differ? I see [~kkambatl] has already seen that patch too... can someone please help me understand? Thanks., Thanks Arun - the other patch completely skipped my mind. I agree that the patch on MAPREDUCE-4843 would fix the immediate issue at hand - jobconf being written to a different user's directory. However, this patch fixes a fundamental issue in {{JobLocalizer}} that the test in the patch clearly exposes.

Let me explain through the code (with comments added after each line, irrelevant lines removed). The code before the patch:

{code}
  public JobLocalizer(JobConf ttConf, String user, String jobid,
      String... localDirs) throws IOException {
    this.ttConf = ttConf;                        // shallow copy without any indication that ttConf can't be changed later, no obvious locks held either
    lfs = FileSystem.getLocal(ttConf).getRaw();  // ttConf could have changed already, and we could potentially read wrong filesystem - agree highly unlikely
    ttConf.setStrings(JOB_LOCAL_CTXT, localDirs);// setting the dirs on the external ttConf, not the instance specific one
  }
{code}

I don't think JobLocalizer should be making these assumptions (irrespective of how it is accessed), and if there is a strong enough reason to make these, we should communicate it to the users of JobLocalizer., Arun, 

I agree this JIRA is a (unintentional) duplicate of MAPREDUCE-4843. I believe the fix posted here is a cleaner/simpler solution to (1) fix the DiskChecker errors we have been seeing, and (2) JobLocalizer thread-safety in the context of all accesses including DefaultTaskController.

Thanks for your insights., Karthik - makes sense. Please upload this patch to MAPREDUCE-4843 and we can commit via the same jira. Thanks., Thanks Arun. Closing this JIRA as a duplicate of MR-4843, I uploaded the latest patch here to MAPREDUCE-4843.]