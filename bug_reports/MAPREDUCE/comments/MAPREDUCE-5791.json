[Patch contains implementation of a new function to do a data transfer. Existing implementation relies on nio transferTo method which is slow on Windows. New function does simple transfer by using an intermediate buffer in memory to transfer data from a disk and send to a socket. Size of the intermediate buffer determines the size of the IO requests. This way it is possible to manage size of the IO request in the shuffle phase. Managing the size of the IO requests turns to be important from the performance point of view on the Windows machines.

I observed that the new code improves AVG Shuffle Time on windows for 1.8x. End to end improvement in 100 GB Terasort is 1.3x when the new code is used (tested on a cluster with 4 datanodes)., Hi, [~nikola.vujic].  This is an interesting find.  Conventional wisdom is that {{FileChannel#transferTo}} outperforms intermediate buffer copying like this.

bq. The reason is that transferTo method for the java.nio is issuing 32K IO requests all the time.

Did you find more details behind this part?  Is this because our code is calling {{transferTo}} with the count parameter set to 32K, or is Windows chopping a larger {{transferTo}} into multiple I/O requests for 32K each internally?

Basically, I'm wondering if there is an alternative approach to force {{transferTo}} to use the desired size on each I/O instead of reverting to intermediate buffer copying., {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12634472/MAPREDUCE-5791.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-shuffle.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4419//testReport/
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4419//console

This message is automatically generated., Hi @Chris Nauroth,

No, original code is not calling it with count parameters set to 32K. It seems that java.nio.transferTo is chopping a larger transfer into multiple I/O requests for 32K each. I didn't find a way to configure that transfer size for java.nio. I think that java.nio has native implementation for transferTo in Linux (direct transfer with DMA), but in Windows that implementation is missing. Then probably, JDK is taking a slow path in Windows.

Btw, java.nio.transferTo does not always use 32K transfers but It seems that this is not under user control. At least, I didn't find a way how to control this.

, I think I found the root cause of the problem.  The JDK does not really implement a zero-copy transfer on Windows.  I checked the source code for OpenJDK 6, 7 and 8, and they all look like this in FileChannelImpl.c:

{code}
JNIEXPORT jlong JNICALL
Java_sun_nio_ch_FileChannelImpl_transferTo0(JNIEnv *env, jobject this,
                                            jint srcFD,
                                            jlong position, jlong count,
                                            jint dstFD)
{
    return IOS_UNSUPPORTED;
}
{code}

On Linux, these functions delegate to the {{sendfile}} syscall.  It's a shame that this isn't available in the Windows JDK, because it's theoretically possible to do a zero-copy transfer on Windows using {{TransmitFile}}:

http://msdn.microsoft.com/en-us/library/windows/desktop/ms740565(v=vs.85).aspx

I think it's fine to proceed with this buffer-copying patch, but I also wonder if we'd see even better performance if we could figure out a JNI call to {{TransmitFile}}.

I'll review the patch in more detail later.  From a quick glance, it looked like there were a few cases of indentation using 4 spaces instead of 2 spaces (the project standard)., I agree about the root cause. I saw that code too. Since I use Oracle JDK, I wanted to verify that the native implementation does not exists in Oracle JDK, but I couldn't find source code for nio.dll in Oracle JDK. Thus I run the test with OpenJDK in order to compare performance and I observed the same behavior. So, both JDKs are behaving the same in the shuffle, which means that Oracle JDK is also missing native implementation for the zero-copy transfer on Windows (assuming that the zero-copy transfer would work at least as fast as buffer copy).

It is good idea to try JNI call to TransmitFile. Actually, it may happen to get a perf boost from TransmitFile due to a shuffle phase being CPU bound now (CPU is at 100% during shuffle with buffer copy). I will have to try it.

, A few comments:

# {{ShuffleHandler}}
## {{SHUFFLE_BUFFER_SIZE}} is potentially confusing, because it's reusing {{io.file.buffer.size}}, which is already used elsewhere, and with a different default value.  I recommend making this an MR-specific property, like {{mapreduce.shuffle.transfer.buffer.size}}, and documenting it in mapred-default.xml.
# {{TestFadvisedFileRegion}}
## Minor nit: we put the opening { inline, not on a separate line.
## {{out}}, {{inputFile}}, {{targetFile}}, {{target}} and {{in}} all should be closed inside a finally block to guarantee cleanup.  The {{IOUtils#cleanup}} method is helpful for this.  For {{fileRegion}}, it looks like we ought to call {{releaseExternalResources}}: http://grepcode.com/file/repository.jboss.org/nexus/content/repositories/releases/org.jboss.netty/netty/3.2.0.CR1/org/jboss/netty/channel/DefaultFileRegion.java.
## {{testCustomShuffleTransferCornerCases}}: This can be removed if you don't intend to add test code in here., I have submitted a new patch, fixed according to your comments., {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12634688/MAPREDUCE-5791.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-shuffle.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4426//testReport/
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4426//console

This message is automatically generated., Thanks for the update, [~nikola.vujic].  A few more thoughts on this patch:

# {{mapred-default.xml}}
## I think by setting {{mapreduce.shuffle.transferTo.allowed}} to {{true}} in mapred-default.xml, you'll end up getting transferTo turned on in Windows by default.  The value defined in the XML takes precedence over the default in the code.  Instead, if you set the value to nothing/empty string in the XML, then your logic in {{ShuffleHandler}} will select the right value at runtime based on OS.  For an existing example of this, see {{mapreduce.application.classpath}}.
# {{FadvisedFileRegion}}
## It appears that {{customShuffleTransfer}} is public only to make it accessible for tests.  Is that correct?  If so, would you please change this to package-private (drop public) and add the {{com.google.common.annotations.VisibleForTesting}} annotation on the method?
## At the start of {{customShuffleTransfer}}, there is some indentation by 4 spaces in front of the {{throw}} and the {{return 0L;}}.  Would you please change those to 2 spaces?
## I was a bit confused by this logic:
{code}
      //adjust counters and buffer limit
      if(readSize < trans) {
        trans -= readSize;
        position += readSize;
        byteBuffer.flip();
      } else {
        byteBuffer.limit((int)trans);
        byteBuffer.position(0);
        position += trans; 
        trans = 0;
      }
{code}
I don't understand why we need the conditional.  Looking specifically at the else block, setting limit to current position and setting current position to 0 is the same effect as calling {{Buffer#flip}}.  Updating {{position}} looks unnecessary, because setting {{trans}} to 0 forces this to be the final iteration of the loop.  Overall, it appears that this code could be simplified by dropping the if/else and always running the logic currently in the if block.  What do you think?  Is there some edge case that I'm missing?
# {{TestFadvisedFileRegion}}
## There is still a risk of a resource leak in the test, because the {{RandomAccessFile}} constructor can throw an exception.  You could successfully open {{inputFile}}, and then {{targetFile}} fails with an exception, but then {{inputFile}} would never be closed.  I recommend declaring {{inputFile}}, {{targetFile}} and {{target}} outside the try block, initialized to null, and then initialize them first thing inside the try block., Hi [~cnauroth],

I have applied all fixes except for the if-else in {{FadvisedFileRegion}}. Edge case is reading the last chunk of data from a file. {{customShuffleTransfer}} must read {{actualCount}} bytes from a file, starting from the {{this.position}}. This is done in the while loop and {{trans}} variable is used to calculate the number of remaining bytes. {{fileChannel.read}} returns the number of bytes read. For the last chunk of data this number can be higher than the remaining number of bytes to read. In that case we cannot use {{Buffer#flip}}. 

For example, let's suppose that we have 128 byte buffer and the we want to read 200 bytes starting at position 1000 in a file (file size bigger than 1256 bytes). At least two iterations of the while loop will be done: 
1. Iteration 1: {{fileChannel.read(byteBuffer, 1000+0)}} => 128 bytes are read => all 128 bytes are needed => target.write
2. Iteration 2: {{fileChannel.read(byteBuffer, 1000+128)}} => 128 bytes are read => 128 bytes are read because file is big enough but only first 72 bytes are needed => {{byteBuffer.limit(72)}} => target.write

In the else block we don't set limit to the current position but to a number lower than the current position. Updating local {{position}} variable is needed in order to read data starting from a proper position in the next iterations of the loop. Does it make sense?

Regarding the resource leak in the test, I applied a change you suggested and I did the same with the {{fileRegion}} in order to eliminated one try block.

I changed {{customShuffleTransferCornerCases}} to private. It was public., {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12636387/MAPREDUCE-5791.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-shuffle.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4459//testReport/
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4459//console

This message is automatically generated., +1 for the patch.

Thank you for explaining the edge case around reading the last chunk, and thank you for adding a comment for it.  I'll commit this., SUCCESS: Integrated in Hadoop-trunk-Commit #5389 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/5389/])
MAPREDUCE-5791. Shuffle phase is slow in Windows - FadviseFileRegion::transferTo does not read disks efficiently. Contributed by Nikola Vujic. (cnauroth: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1580994)
* /hadoop/common/trunk/hadoop-mapreduce-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/resources/mapred-default.xml
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-shuffle/src/main/java/org/apache/hadoop/mapred/FadvisedFileRegion.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-shuffle/src/main/java/org/apache/hadoop/mapred/ShuffleHandler.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-shuffle/src/test/java/org/apache/hadoop/mapred/TestFadvisedFileRegion.java
, I committed this to trunk, branch-2 and branch-2.4.  Nikola, thank you for reporting the issue and contributing a patch., FAILURE: Integrated in Hadoop-Yarn-trunk #520 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk/520/])
MAPREDUCE-5791. Shuffle phase is slow in Windows - FadviseFileRegion::transferTo does not read disks efficiently. Contributed by Nikola Vujic. (cnauroth: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1580994)
* /hadoop/common/trunk/hadoop-mapreduce-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/resources/mapred-default.xml
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-shuffle/src/main/java/org/apache/hadoop/mapred/FadvisedFileRegion.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-shuffle/src/main/java/org/apache/hadoop/mapred/ShuffleHandler.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-shuffle/src/test/java/org/apache/hadoop/mapred/TestFadvisedFileRegion.java
, FAILURE: Integrated in Hadoop-Mapreduce-trunk #1737 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/1737/])
MAPREDUCE-5791. Shuffle phase is slow in Windows - FadviseFileRegion::transferTo does not read disks efficiently. Contributed by Nikola Vujic. (cnauroth: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1580994)
* /hadoop/common/trunk/hadoop-mapreduce-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/resources/mapred-default.xml
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-shuffle/src/main/java/org/apache/hadoop/mapred/FadvisedFileRegion.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-shuffle/src/main/java/org/apache/hadoop/mapred/ShuffleHandler.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-shuffle/src/test/java/org/apache/hadoop/mapred/TestFadvisedFileRegion.java
, FAILURE: Integrated in Hadoop-Hdfs-trunk #1712 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/1712/])
MAPREDUCE-5791. Shuffle phase is slow in Windows - FadviseFileRegion::transferTo does not read disks efficiently. Contributed by Nikola Vujic. (cnauroth: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1580994)
* /hadoop/common/trunk/hadoop-mapreduce-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/resources/mapred-default.xml
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-shuffle/src/main/java/org/apache/hadoop/mapred/FadvisedFileRegion.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-shuffle/src/main/java/org/apache/hadoop/mapred/ShuffleHandler.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-shuffle/src/test/java/org/apache/hadoop/mapred/TestFadvisedFileRegion.java
, In order to check the performance impact of this patch, I have tested the patch on a 80 node hadoop cluster on Windows. Here are the results:

Terasort 5 TB
1540 map tasks
770 reduce tasks

                                 Elapsed      Avg Map Time     Avg Reduce time      Avg Shuffle Time     Avg Merge Time
default                      3194.67  	  402.33	              248.67	              1471.33	              12.33
optimized shuffle	2411.00	  392.00	              689.67	              674.67	              17.17
 	 	 	 	 	 
default/optmized      1.33            1.03                     0.36                           2.18                          0.72

* optimized shuffle is configured to use 512K buffer size for the buffer copy shuffle.
** presented numbers are avg of at least 3 runs.
 
Optimized shuffle version is 1.33x faster than the default version. Gain in the shuffle phase alone is 2.18x.
, I missed to format the table. Here it is:
|| ||Elapsed||Avg Map Time||Avg Reduce time||Avg Shuffle Time||Avg Merge Time||
|default|3194.67|402.33|248.67|1471.33|12.33|
|optimized shuffle|2411.00|392.00|689.67|674.67|17.17|
|default/optmized|1.33|1.03|0.36|2.18|0.72|
]