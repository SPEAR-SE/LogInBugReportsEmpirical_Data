[Straightforward patch., I'm guessing this will help with speculative execution... am I right?
, @devaraj, +1.
@arun, yes., Chris is asking for this to hold up on HADOOP-4010 to go in first., Patch synced with the trunk. Talked with Chris offline and he is okay with this patch getting in now., Resubmitting to hudson, -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12414093/773.patch
  against trunk revision 797362.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    -1 findbugs.  The patch appears to cause Findbugs to fail.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    -1 contrib tests.  The patch failed contrib unit tests.

Test results: http://hudson.zones.apache.org/hudson/job/Mapreduce-Patch-vesta.apache.org/417/testReport/
Checkstyle results: http://hudson.zones.apache.org/hudson/job/Mapreduce-Patch-vesta.apache.org/417/artifact/trunk/build/test/checkstyle-errors.html
Console output: http://hudson.zones.apache.org/hudson/job/Mapreduce-Patch-vesta.apache.org/417/console

This message is automatically generated., The attached patch has some fixes. I ran 'ant test' and test-patch locally and they both passed., Hong, offline, suggested some changes to the patch, and the same is incorporated here. Also, Hong fixed a problem to do with the leaking of native direct buffer. This patch has both the fixes.
ant test/test-patch passed. Some unrelated tests failed but there are jiras for them (MAPREDUCE-839, MAPREDUCE-882, MAPREDUCE-879)., Have manually tested this patch. Can't think of any good specific testcase for testing this., Patch looks good. +1., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12416766/773.3.patch
  against trunk revision 805081.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    -1 contrib tests.  The patch failed contrib unit tests.

Test results: http://hudson.zones.apache.org/hudson/job/Mapreduce-Patch-vesta.apache.org/486/testReport/
Findbugs warnings: http://hudson.zones.apache.org/hudson/job/Mapreduce-Patch-vesta.apache.org/486/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Checkstyle results: http://hudson.zones.apache.org/hudson/job/Mapreduce-Patch-vesta.apache.org/486/artifact/trunk/build/test/checkstyle-errors.html
Console output: http://hudson.zones.apache.org/hudson/job/Mapreduce-Patch-vesta.apache.org/486/console

This message is automatically generated., I just committed this., This change does not preserve the existing behavior:
{noformat}
-                            Math.max((int)Math.min(Integer.MAX_VALUE, end-pos),
-                                     maxLineLength));
+                            Math.max(maxBytesToConsume(), maxLineLength));
{noformat}

{noformat}
+  private int maxBytesToConsume() {
+    return (isCompressedInput()) ? Integer.MAX_VALUE
+                           : (int) Math.min(Integer.MAX_VALUE, (end - start));
+  }
{noformat}

Instead of {{end - pos}}, this uses {{end - start}} if less than maxint. This is a regression in HADOOP-3144, My bad. I overlooked the difference between these two similar places., Filed MAPREDUCE-946]