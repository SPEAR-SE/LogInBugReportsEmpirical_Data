[I am trying to reproduce this failure and I am not able to do it. Can someone plz attach failure logs (nohup logs etc) or comment as to how to reproduce it. , I finally got one run where this testcase timed out. Looks like the testcase starts 2 trackers and then waits for 50% of the mappers to finish. When tasks are scheduled out of order then the whole testcase gets stuck as the task that is scheduled out of order waits forever blocking the cluster. Will attach a patch asap., Attaching a patch that starts only one tracker so that the ordering is maintained. Testing in progress., Test patch result
[exec] +1 overall.  
     [exec] 
     [exec]     +1 @author.  The patch does not contain any @author tags.
     [exec] 
     [exec]     +1 tests included.  The patch appears to include 3 new or modified tests.
     [exec] 
     [exec]     +1 javadoc.  The javadoc tool did not generate any warning messages.
     [exec] 
     [exec]     +1 javac.  The applied patch does not increase the total number of javac compiler warnings.
     [exec] 
     [exec]     +1 findbugs.  The patch does not introduce any new Findbugs warnings.
     [exec] 
     [exec]     +1 release audit.  The applied patch does not increase the total number of release audit warnings.

Testing/Running TestNodeRefresh now., I ran TestNodeRefresh 100 times and without the patch it failed(timed out) 9 times while with the patch it never timed out., In the modified test, I think we should ensure that the new tasktracker launched is always of different name. Otherwise the new tracker would be excluded and cluster would have no tracker, leaving job.waitForCompletion() waiting till timeout., Changing the testcase to start a new tracker with a new hostname instead of using new hostname generated by MiniMRCluster. Running test-patch now., Result of test-patch
[exec] +1 overall.  
     [exec] 
     [exec]     +1 @author.  The patch does not contain any @author tags.
     [exec] 
     [exec]     +1 tests included.  The patch appears to include 3 new or modified tests.
     [exec] 
     [exec]     +1 javadoc.  The javadoc tool did not generate any warning messages.
     [exec] 
     [exec]     +1 javac.  The applied patch does not increase the total number of javac compiler warnings.
     [exec] 
     [exec]     +1 findbugs.  The patch does not introduce any new Findbugs warnings.
     [exec] 
     [exec]     +1 release audit.  The applied patch does not increase the total number of release audit warnings.
, I committed this. Thanks Amar!, Attaching an example patch for 0.20 branch not to be committed., Integrated in Hadoop-Mapreduce-trunk #20 (See [http://hudson.zones.apache.org/hudson/job/Hadoop-Mapreduce-trunk/20/])
    , I am still seeing a time out with this test, Test Log with a time out, This looks like a timing issue to me. I think we should start the new tracker after all the asserts are done. , MAPREDUCE-760 should fix this., The patch for branch 0.20 uploaded on 10th July needs to be committed to Y! 20 distribution.]