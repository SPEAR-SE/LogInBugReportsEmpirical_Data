[Did you get a heap dump? If it happens again, see if you can get one. Of course when heap runs out, it isn't necessarily related to the task that asked for the straw that broke the camel's back. , Our cluster met the similar problem after upgrade to jetty6.
related log:
2011-05-11 16:24:26,914 ERROR org.mortbay.log: Error for /mapOutput

java.lang.OutOfMemoryError: Java heap space

        at java.io.BufferedInputStream.<init>(BufferedInputStream.java:178)

        at org.apache.hadoop.fs.BufferedFSInputStream.<init>(BufferedFSInputStream.java:44) 

        at org.apache.hadoop.fs.RawLocalFileSystem.open(RawLocalFileSystem.java:176)

        at org.apache.hadoop.fs.FileSystem.open(FileSystem.java:359)

        at org.apache.hadoop.mapred.TaskTracker$MapOutputServlet.doGet(TaskTracker.java:3040)

        at javax.servlet.http.HttpServlet.service(HttpServlet.java:707) 

        at javax.servlet.http.HttpServlet.service(HttpServlet.java:820)

        at org.mortbay.jetty.servlet.ServletHolder.handle(ServletHolder.java:502)

        at org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:363)

        at org.mortbay.jetty.security.SecurityHandler.handle(SecurityHandler.java:216)

        at org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:181)

        at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:766)

        at org.mortbay.jetty.webapp.WebAppContext.handle(WebAppContext.java:417)

        at org.mortbay.jetty.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:230) 

        at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152)

        at org.mortbay.jetty.Server.handle(Server.java:324)

        at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:534)

        at org.mortbay.jetty.HttpConnection$RequestHandler.headerComplete(HttpConnection.java:864)

        at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:533)

        at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:207)

        at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:403)

        at org.mortbay.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:409)

        at org.mortbay.thread.QueuedThreadPool$PoolThread.run(QueuedThreadPool.java:522)
2011-05-11 17:31:39,376 ERROR org.mortbay.log: Error for /mapOutput

2011-05-11 17:31:45,523 ERROR org.mortbay.log: Error for /mapOutput

java.lang.OutOfMemoryError: Java heap space

jmap -heap result:
Heap Configuration:

   MinHeapFreeRatio = 40

   MaxHeapFreeRatio = 70

   MaxHeapSize      = 1610612736 (1536.0MB)

   NewSize          = 1310720 (1.25MB)

   MaxNewSize       = 17592186044415 MB

   OldSize          = 5439488 (5.1875MB)

   NewRatio         = 2

   SurvivorRatio    = 8

   PermSize         = 21757952 (20.75MB)

   MaxPermSize      = 85983232 (82.0MB)



Heap Usage:

PS Young Generation

Eden Space:

   capacity = 61865984 (59.0MB)

   used     = 61865984 (59.0MB)

   free     = 0 (0.0MB)

   100.0% used

From Space:

   capacity = 178913280 (170.625MB)

   used     = 11205368 (10.686271667480469MB)

   free     = 167707912 (159.93872833251953MB)

   6.263016361893315% used

To Space:

   capacity = 178913280 (170.625MB)

   used     = 0 (0.0MB)

   free     = 178913280 (170.625MB)

   0.0% used

PS Old Generation

   capacity = 1073741824 (1024.0MB)

   used     = 1073710024 (1023.9696731567383MB)

   free     = 31800 (0.03032684326171875MB)

   99.99703839421272% used

PS Perm Generation

   capacity = 21757952 (20.75MB)

   used     = 17614112 (16.798126220703125MB)

   free     = 4143840 (3.951873779296875MB)

   80.95482516001506% used


We dump the heap of TaskTracker and analyze it with MAT. We found one instance of "org.mortbay.thread.QueuedThreadPool" occupies 853,258,184 (72.51%) bytes. This object contain a "java.lang.Runnable[]" which has 7200 elements., The QueuedThreadPool of jetty6 own an array of jobs. If an idle thread is available a job is directly dispatched, otherwise the job is queued to the array. At first the size of the array is _maxThreads(40). When its full, the size grow to array.length() + _maxThreads. Because the grow has no limit, this array can occupy too many memory when there are lots of fetch request from reduce task. So is this jetty6's bug?, I think we ran into the same issue, any work around or config tweak to avoid running into this? Thanks. , bq. I think we ran into the same issue, any work around or config tweak to avoid running into this? Thanks. 
I have created MAPREDUCE-2510 for this problem. As Chris's comment, Jetty 6.1.26 does not have this behavior. However, Jetty 6.1.26 has its own bugs MAPREDUCE-2529 and MAPREDUCE-2530 which are more serious than OOM. , Closing as stale.]