[Hi,

I am also seeing this same problem when running 2 pig scripts concurrently in local mode. Did you ever receive a resolution?

Thanks
Andrew, This occurs because the jobs are trying to use the same file to locally store their map outputs.  They're both using the same directory taskTracker/user/jobcache/job_local_0001/attempt_local_0001_m_000000_0/output.  This could be avoided by adding a timestamp component to local job ids?  So the jobid would be something like job_local_123456789_0001 instead of job_local_0001., Hi - I should have updated this earlier when I found this solution. 

You can use the following PIG_OPTS parameters to define the directories that you want the map/reduce jobs to use, prior to calling pig.

-Dmapred.local.dir
-Dmapred.output.dir
-Dmapred.system.dir
-Dmapred.temp.dir

For example, I define them in my program to point to different directories based upon the pig script being called, as below:


PIG_OPTS="-Dmapred.output.dir=${MAPRED}/$pig_script/output"
PIG_OPTS="$PIG_OPTS -Dmapred.local.dir=${MAPRED}/$pig_script/local"
PIG_OPTS="$PIG_OPTS -Dmapred.system.dir=${MAPRED}/$pig_script/system"
PIG_OPTS="$PIG_OPTS -Dmapred.temp.dir=${MAPRED}/$pig_script/temp"
export PIG_OPTS
, bq. This could be avoided by adding a timestamp component to local job ids?

It looks like getStagingAreaDir() is using a random number to generate a unique staging directory, so you could reuse that unique identifier for the job ID. Also, the local job directory (localRunner) needs to be made unique too, otherwise the job configuration file could clash. , If I understand correctly, the job configuration file is named after the job id, which the unique identifier would be a part of, so they would not clash., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12546910/MAPREDUCE-4278-branch1.patch
  against trunk revision .

    {color:red}-1 patch{color}.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/2887//console

This message is automatically generated., This looks like the right approach. Can you write a unit test that shows that this fixes the problem? You could use a waiting job from UtilsForTests that ensures two jobs are running concurrently., If the jobs are in the same process they're already prevented from colliding by the (not sure what to call it) 0001 part of the job id.  Do you have any advice on how to test it in light of this?

Also, I realized that with my approach the randids could get mixed if two jobs were submitted concurrently using the same LocalJobRunner.  Is this a concern?, You're right - it's not easy to create a unit test where the job IDs collide with the current code. Can you run a manual test without the patch that runs two jobs and produces a collision, and then test that with the patch there is no collision as a sanity check?

> Also, I realized that with my approach the randids could get mixed if two jobs were submitted concurrently using the same LocalJobRunner. Is this a concern?

LocalJobRunner doesn't support running multiple jobs concurrently, so I don't think your change makes things worse. We could add some class javadoc to clarify what it supports (i.e. use an instance of LJR per job to run multiple jobs in a single JVM). , I was able to reproduce the problem easily by kicking off the pig end to
end tests in parallel. For example, if you kick off the nightly.conf in
parallel from the same gateway, there are always conflicts. The specific
conflict varies from run to run depending on the timing, but there are
always conflicts.



, I was able to reproduce the issue using Pig and verify that the patch fixed it., findbugs 2 advised that calling Math.abs(rand.nextInt()) was a bad idea so I switched it to rand.nextInt(Integer.MAX_VALUE) and uploaded a new patch.  also uploading a patch for trunk., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12548802/MAPREDUCE-4278-2-branch1.patch
  against trunk revision .

    {color:red}-1 patch{color}.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/2927//console

This message is automatically generated., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12562599/MAPREDUCE-4278-trunk.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/3181//testReport/
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/3181//console

This message is automatically generated., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12562733/MAPREDUCE-4278-3-branch1.patch
  against trunk revision .

    {color:red}-1 patch{color}.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/3183//console

This message is automatically generated., Integrated in Hadoop-trunk-Commit #3191 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/3191/])
    MAPREDUCE-4278. Cannot run two local jobs in parallel from the same gateway. Contributed by Sandy Ryza. (Revision 1430363)

     Result = SUCCESS
tomwhite : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1430363
Files : 
* /hadoop/common/trunk/hadoop-mapreduce-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapred/LocalJobRunner.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/JobID.java
, +1 I just committed this. Thanks, Sandy!, Integrated in Hadoop-Yarn-trunk #91 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk/91/])
    MAPREDUCE-4278. Cannot run two local jobs in parallel from the same gateway. Contributed by Sandy Ryza. (Revision 1430363)

     Result = SUCCESS
tomwhite : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1430363
Files : 
* /hadoop/common/trunk/hadoop-mapreduce-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapred/LocalJobRunner.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/JobID.java
, Integrated in Hadoop-Hdfs-trunk #1280 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/1280/])
    MAPREDUCE-4278. Cannot run two local jobs in parallel from the same gateway. Contributed by Sandy Ryza. (Revision 1430363)

     Result = FAILURE
tomwhite : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1430363
Files : 
* /hadoop/common/trunk/hadoop-mapreduce-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapred/LocalJobRunner.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/JobID.java
, Integrated in Hadoop-Mapreduce-trunk #1308 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/1308/])
    MAPREDUCE-4278. Cannot run two local jobs in parallel from the same gateway. Contributed by Sandy Ryza. (Revision 1430363)

     Result = FAILURE
tomwhite : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1430363
Files : 
* /hadoop/common/trunk/hadoop-mapreduce-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapred/LocalJobRunner.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/JobID.java
, merged to branch-0.23, Integrated in Hadoop-Hdfs-0.23-Build #498 (See [https://builds.apache.org/job/Hadoop-Hdfs-0.23-Build/498/])
    MAPREDUCE-4278. cannot run two local jobs in parallel from the same gateway. (Sandy Ryza via tgraves) (Revision 1434878)

     Result = FAILURE
tgraves : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1434878
Files : 
* /hadoop/common/branches/branch-0.23/hadoop-mapreduce-project/CHANGES.txt
* /hadoop/common/branches/branch-0.23/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapred/LocalJobRunner.java
* /hadoop/common/branches/branch-0.23/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/JobID.java
]