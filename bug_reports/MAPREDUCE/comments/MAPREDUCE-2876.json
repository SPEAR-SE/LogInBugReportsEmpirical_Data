[This issue should wait until MAPREDUCE-2864 is finished, because it will rename and move the configs that are going to be modified., I think we might be using too many variables here. If you take a look at AbstractLivenessMonitor, you'll see that the monitor interval is derived from expiry interval which is probably what we should keep. We dont have to use different conf knobs for monitor interval and expiry interval. , That is fine, and I am happy to change things however you want.  But I don't see AbstractLivenessMonitor deriving one value from another.  Currently on Trunk it has two methods.

{code}
  protected void setExpireInterval(int expireInterval) {
    this.expireInterval = expireInterval;
  }

  protected void setMonitorInterval(int monitorInterval) {
    this.monitorInterval = monitorInterval;
  }
{code}

I don't see anywhere that they are derived from one another.

AMLivelinessMonitor, ContainerAllocationExpirer, and NMLivelinessMonitor, all of them extend AbstractLivnessMonitor. AM liveness has two configs AM_EXPIRY_INTERVAL and AMLIVELINESS_MONITORING_INTERVAL.  NM liveness does too NM_EXPIRY_INTERVAL and NMLIVELINESS_MONITORING_INTERVAL.  But container has only one.  CONTAINER_LIVELINESS_MONITORING_INTERVAL.  Its value looks like a copy and paste error and has the same value as AMLIVELINESS_MONITORING_INTERVAL.  It also uses AMLIVELINESS_MONITORING_INTERVAL as the expiry interval.

If you want monitor interval derived from expiry that is fine.  Should I set it to something like 0.5 * expiry?  If so I will then rename this issue., Sorry Bobby,
  I should have mentioned this. In the code:

{code}

  private int expireInterval = DEFAULT_EXPIRE;
  private int monitorInterval = expireInterval/3;
{code}

It tries to do it in default values, unless set, maybe we should use 1/3rd to set monitor interval. Do you see any scenario where this wont work? , The issue is with granularity and how far off from the expire interval the expire will actually be.  In the worst case something will expire just under 1 monitor interval after it should have.  The only issue would be if someone really needed that expiry to be much closer to the actual expire interval then 1/3 of it.  I don't really see that as much of an issue for anything we have right now.  

I would propose that we modify LivnessMonitor to store expiry in a priority queue instead of a map.  Then it can sleep just the amount of time needed before the next one expires.  It is fairly simple and I have done this type of thing in the past.  Then there is very little error from the expire interval, and we don't have to worry about a monitor interval at all., bobby,
  I think we can leave the setMonitor API. I was saying something along the lines of:

When creating NMLivenessMonitor:

{code}

monitor.setExpiry(x);
monitor.setMonitorInternval(x/3);

{code}

So in case someone wants to use Livenessmonitor with almost the same interval as expiry can use it that way. Seems reasonable?
, Sure., Sorry missed it earlier and saw it now.

bq. I would propose that we modify LivnessMonitor to store expiry in a priority queue instead of a map. Then it can sleep just the amount of time needed before the next one expires. It is fairly simple and I have done this type of thing in the past. Then there is very little error from the expire interval, and we don't have to worry about a monitor interval at all.

priority queue - This was exactly the same thing I was thinking the first time when I wrote. The reason I chose Map is as follows - We receive pings from AM/NM/Tasks etc very frequently in the order of 1-3 seconds. The no of insertions in the priority queue would be huge. The *cumulative* cost of multiple insertions in priority queue would be more than iterating over the whole list every few seconds. make sense ?, I am fine with the polling like I said before.  The question I was trying to answer was what is the ramifications of not having a polling interval, but just having an expiry interval, and setting the polling interval off of the expiry interval.  It means the real expiry interval is any time between expiryInterval and expiryInterval + pollingInterval.  If that is never a problem then polling is fine. 

I can see your reasoning behind the change.  When there are N objects being tracked then polling would be

{code}
 O((pollingFrequency * N) + (modificationFrequency * N))
{code}

But Priority Queue would be

{code}
O(modificationFrequency * N * log(N) + expiryFrequency)
{code}

So if the modificationFrequency is very large then polling definitely wins in complexity, but I am curious did you run any benchmarks to see what kind of an extra load would be placed on the system with a priority queue (Just curious what it might be)?, @Robert As you have mentioned, the modificationFrequency and N is quite high in most of our usecases. So based on computational complexities and also the code complexity, went for the simple polling model., Kindly review patch., Putting into patch available to kick Jenkins to get the test results.  The patch mostly looks good. Are there any tests for AbstractLivenessMonitor?  If not could you add in a simple one., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12498198/MAPREDUCE-2876-branch-0_23.patch
  against trunk revision .

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed unit tests in .

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/969//testReport/
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/969//console

This message is automatically generated., There is a test TestNmLivelinessMonitor that seems to do a fairly thorough job of testing expiry. NMLivenessMonitor is a subclass from AbstractLivenessMonitor and AMLivenessMonitor and ContainerAllocatorExpirer do almost the same thing. Please let me know if you would like me to add tests for AMLivenessMonitor and ContainerAllocatorExpirer or enhance coverage of this existing test in some way., All I really care about is a unit test to verify that the change is working correctly.  If TestNmLivelenessMonitor covers it then that is OK by me. , Thanks for the explanation +1 for the patch., thanks anupam and bobby,
Ill go ahead and commit this. , sorry just noticed,

I think we should leave the api still there:

{code}
-  protected void setMonitorInterval(int monitorInterval) {
-    this.monitorInterval = monitorInterval;
-  }
-
{code}
Someone might want to use it with a different monitor interval, other than default (expiry/3).

, Cancelling patch while Mahadev's comments are addressed., Thanks Mahadev! 

I removed also

{code}
this.monitorInterval = expireIntervel/3;
{code}

from 

{code}AbstractLivelinessMonitor#setExpireInterval{code}

and moved it out to the subclasses to avoid the undesirable effect of silently setting a config param that they might have set apriori in the subclass by doing something like 

{code}
...
setMonitorInterval(expireIntvl/5);
setExpireInterval(expireIntvl);
...
{code}
, +1 looks good to me. Will wait for hudson before checkin it in., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12498251/MAPREDUCE-2876-branch-0_23.patch
  against trunk revision .

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed unit tests in .

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/972//testReport/
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/972//console

This message is automatically generated., I just committed this. Thanks Anupam!, Integrated in Hadoop-Hdfs-trunk-Commit #1126 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk-Commit/1126/])
    MAPREDUCE-2876. Use a different config for ContainerAllocationExpirer. Contributed by Anupam Seth.

acmurthy : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1180767
Files : 
* /hadoop/common/trunk/hadoop-mapreduce-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/conf/YarnConfiguration.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/NMLivelinessMonitor.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/attempt/AMLivelinessMonitor.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmcontainer/ContainerAllocationExpirer.java
, Integrated in Hadoop-Common-trunk-Commit #1048 (See [https://builds.apache.org/job/Hadoop-Common-trunk-Commit/1048/])
    MAPREDUCE-2876. Use a different config for ContainerAllocationExpirer. Contributed by Anupam Seth.

acmurthy : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1180767
Files : 
* /hadoop/common/trunk/hadoop-mapreduce-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/conf/YarnConfiguration.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/NMLivelinessMonitor.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/attempt/AMLivelinessMonitor.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmcontainer/ContainerAllocationExpirer.java
, Integrated in Hadoop-Mapreduce-trunk-Commit #1068 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk-Commit/1068/])
    MAPREDUCE-2876. Use a different config for ContainerAllocationExpirer. Contributed by Anupam Seth.

acmurthy : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1180767
Files : 
* /hadoop/common/trunk/hadoop-mapreduce-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/conf/YarnConfiguration.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/NMLivelinessMonitor.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/attempt/AMLivelinessMonitor.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmcontainer/ContainerAllocationExpirer.java
, Integrated in Hadoop-Hdfs-trunk #826 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/826/])
    MAPREDUCE-2876. Use a different config for ContainerAllocationExpirer. Contributed by Anupam Seth.

acmurthy : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1180767
Files : 
* /hadoop/common/trunk/hadoop-mapreduce-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/conf/YarnConfiguration.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/NMLivelinessMonitor.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/attempt/AMLivelinessMonitor.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmcontainer/ContainerAllocationExpirer.java
, Integrated in Hadoop-Hdfs-0.23-Build #35 (See [https://builds.apache.org/job/Hadoop-Hdfs-0.23-Build/35/])
    Merge -c 1180767 from trunk to branch-0.23 to fix MAPREDUCE-2876.

acmurthy : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1180768
Files : 
* /hadoop/common/branches/branch-0.23/hadoop-mapreduce-project/CHANGES.txt
* /hadoop/common/branches/branch-0.23/hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/conf/YarnConfiguration.java
* /hadoop/common/branches/branch-0.23/hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/NMLivelinessMonitor.java
* /hadoop/common/branches/branch-0.23/hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/attempt/AMLivelinessMonitor.java
* /hadoop/common/branches/branch-0.23/hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmcontainer/ContainerAllocationExpirer.java
, Integrated in Hadoop-Mapreduce-0.23-Build #42 (See [https://builds.apache.org/job/Hadoop-Mapreduce-0.23-Build/42/])
    Merge -c 1180767 from trunk to branch-0.23 to fix MAPREDUCE-2876.

acmurthy : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1180768
Files : 
* /hadoop/common/branches/branch-0.23/hadoop-mapreduce-project/CHANGES.txt
* /hadoop/common/branches/branch-0.23/hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/conf/YarnConfiguration.java
* /hadoop/common/branches/branch-0.23/hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/NMLivelinessMonitor.java
* /hadoop/common/branches/branch-0.23/hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/attempt/AMLivelinessMonitor.java
* /hadoop/common/branches/branch-0.23/hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmcontainer/ContainerAllocationExpirer.java
, Integrated in Hadoop-Mapreduce-trunk #856 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/856/])
    MAPREDUCE-2876. Use a different config for ContainerAllocationExpirer. Contributed by Anupam Seth.

acmurthy : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1180767
Files : 
* /hadoop/common/trunk/hadoop-mapreduce-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/conf/YarnConfiguration.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/NMLivelinessMonitor.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/attempt/AMLivelinessMonitor.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmcontainer/ContainerAllocationExpirer.java
, Thanks Bobby, Mahadev and Arun!]