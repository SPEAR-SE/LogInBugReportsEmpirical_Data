[This is legal in C99, not C89.  Depends on which one you call ANSI C (I think it usually refers to C89) ;)

I believe it's better programming practice to allocate on the heap with malloc/free; I'm not sure if you gain any speed advantages either way., heh. I went with:

uint8_t *barr=(uint8_t * ) alloca(sizeof(uint8_t)*(len));

as my local fix, which SunStudio seems to accept as valid at least. , Changes barr to use alloca, +1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12423604/MAPREREDUCE-1166.patch
  against trunk revision 831037.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: http://hudson.zones.apache.org/hudson/job/Mapreduce-Patch-h3.grid.sp2.yahoo.net/108/testReport/
Findbugs warnings: http://hudson.zones.apache.org/hudson/job/Mapreduce-Patch-h3.grid.sp2.yahoo.net/108/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Checkstyle results: http://hudson.zones.apache.org/hudson/job/Mapreduce-Patch-h3.grid.sp2.yahoo.net/108/artifact/trunk/build/test/checkstyle-errors.html
Console output: http://hudson.zones.apache.org/hudson/job/Mapreduce-Patch-h3.grid.sp2.yahoo.net/108/console

This message is automatically generated., Hey Allen, 

Does this code not compile on solaris? Perhaps the build is just not passing -xc99.

From quickly looking at the code it looks like len will never be greater than 8 in which case an appropriate assert/check could be added and the allocation could read:
{code}
uint8_t barr[sizeof(int64_t)];
{code}

The disadvantages of alloca (http://www.gnu.org/s/libc/manual/html_node/Disadvantages-of-Alloca.html) don't apply here but it doesn't seem necessary either.

Thanks,
Eli, I don't remember if I forced -xc99 or not.  I suspect I didn't or I didn't use -xc99=all.  If I get a chance I'll try it again.  Although it'd be great to avoid C99 to give us greater compatibility.  Given other issues (__func__), it is probably unavoidable though., So I spent some time looking at this today and trying to get this to work with VLAs in SunStudio.  Doing research, I ran across this:

http://forums.sun.com/thread.jspa?threadID=5348093

"C99 VLAs were discussed in the C++ Committee for possible inclusion in the next standard. The unanimous view was that they did not have nice properties (the word "suck" was bandied about), and that std::vector or other containers were a superior solution in C++ programming."

Thus, while __func__ works with CC -features=extensions, it doesn't appear that Sun Studio supports all of the C99 features in their C++ compiler.  This makes me wonder if using __func__ was the right thing to do now.

They also have an interesting discussion about alloca vs. malloc.

, This patch isn't quite complete., Hadoop's focus is not on portability.  Closing as won't fix.]