[{noformat}
Running org.apache.hadoop.mapreduce.v2.util.TestMRApps
Tests run: 18, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 1.419 sec <<< FAILURE!
testSetClasspathWithArchives(org.apache.hadoop.mapreduce.v2.util.TestMRApps)  Time elapsed: 101 sec  <<< FAILURE!
java.lang.AssertionError
	at org.junit.Assert.fail(Assert.java:92)
	at org.junit.Assert.assertTrue(Assert.java:43)
	at org.junit.Assert.assertTrue(Assert.java:54)
	at org.apache.hadoop.mapreduce.v2.util.TestMRApps.testSetClasspathWithArchives(TestMRApps.java:225)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:62)
{noformat}
, git bisect implicates HADOOP-9652., Shouldn't it be checking for "test.tgz" in the CLASSPATH, not "testTGZ"?  Here is a patch which does that, after which the test passes., No, it should be checking for testTGZ as that's the name under which the file was localized (see the fragment portion of the URI which tells the distributed cache what name to use when linking the resource into the container's current working directory)., More specifically, testTGZ was appearing in the classpath for this test before HADOOP-9652, so somehow that JIRA changed the semantics of the local filesystem in a way that affected how the classpaths for distributed cache archives are being computed., {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12594795/HDFS-5027.001.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/3911//testReport/
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/3911//console

This message is automatically generated., I think what's going on here is that {{DistributedCache}} is expecting {{LocalFileSystem}} to preserve "fragments" (i.e., the things that come after the hash mark in URIs) that are found in paths.

Example:
{code}
    conf.set(MRJobConfig.CACHE_ARCHIVES, testTGZQualifiedPath + "#testTGZ");
{code}

I'll remove my earlier patch., I have managed to isolate the problem.  The old code stripped the fragment in {{FileSystem#resolvePath}}; the new code does not.

Here's a unit test which only passes on the previous code:
{code}
  @Test (timeout = 120000)
  public void testResolvePath() throws Exception {
    FileSystem fs = FileSystem.get(URI.create("file:///tmp/"), new Configuration());
    URI preUri = new URI("file:///tmp#fragment");
    Path pre = new Path(preUri);
    Path post = fs.resolvePath(pre);
    Assert.assertEquals("resolvePath did not strip the fragment",
        "file:/tmp", post.toString());
  }
{code}

I guess we can continue this discussion on HADOOP-9652, now that we've decided to roll this fix into that one., Andrew is rolling this into his new HADOOP-9652 patch]