[The issue appears to be related to different versions of Jackson in the classpath. The API that is being called in for the 1.6 release of jackson, but the API changed in 1.7, both of these appear as dependencies. in both mvn and ivy.  , OK so here are the dependencies that include Jackson
{noformat}
hadoop-common
+- jersey-json:1.8
|  +- jackson-core-asl:1.7.1
|  +- jackson-jaxrs:1.7.1
|  \- jackson-xc:1.7.1
+- jackson-mapper-asl:1.6.9

hadoop-hdfs
+- jersey-json:1.8
|  +- jackson-core-asl:1.7.1
|  +- jackson-jaxrs:1.7.1
|  \- jackson-xc:1.7.1
+- jackson-mapper-asl:1.6.9

hadoop-yarn-api
+- avro:1.5.3
|  +- jackson-mapper-asl:1.7.3
|     \- jackson-core-asl:1.7.3
+- jersey-json:1.8
   +- jackson-jaxrs:1.7.1
   \- jackson-xc:1.7.1

hadoop-(yarn|mapreduce)*
+- avro:1.5.3
|  +- jackson-mapper-asl:1.7.3
|     \- jackson-core-asl:1.7.3
+- jersey-json:1.8
   +- jackson-jaxrs:1.7.1
   \- jackson-xc:1.7.1
{noformat}
, This patch upgrades the version of jackson to be 1.7.9 consistently across all hadoop code (except the contrib projects)  I have manually verified that the UI can come up now, and the unit tests still pass, so I don't think there are any issues with this newer version of jackson., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12492793/MR-2926-v1.patch
  against trunk revision .

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    -1 patch.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/590//console

This message is automatically generated., Bobby,
 Looks like you added more jackson dependencies. Are all of those needed?
, why is the jackson dependencies added twice?
one with config "compile->master" and one with "compile->default"  

, I did not add in any new dependencies to the mvn builds.  The dependencyManagement section in the pom just says if this package is needed then here is the version to use.  I did have to add it into each of those locations because each of them is the root pom for a tree.  Ideally at some point hadoop-mapreduce-project, hadoop-mapreduce-client and hadoop-yarn will all be children of hadoop-project.  Then it would handle all of the version resolution.

For ivy I did add then in as dependencies.  I am not an ivy expert, so I don't know the proper way to override the version of jackson in ivy.xml, so if I did it wrong I am happy to correct it.  I could not get the override tag https://ant.apache.org/ivy/history/2.2.0/ivyfile/override.html to work for me. 

All of the jars I added as dependencies are transitive dependencies that were already being included in the build already, just not as directly., @Giri

I added in the jackson dependencies twice because avro was in there twice, with a different conf each time, compile->master and compile->default.  If that is not the correct way to do it I am very happy to change it., 
compile->master will just pull the master artifacts; compile->default will pull master artifact and its transient dependencies. I think we should just pull the master and not the transient deps. If yarn/mr requires those dependencies then we should add them separately. 

IMO we should just stick to compile->master;  , Thanks,

That should be a quick fix., This patch removed the jackson dependencies in compile->default, -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12492810/MR-2926-v2.patch
  against trunk revision .

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    -1 patch.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/591//console

This message is automatically generated., Giri - if you are fine with this patch, can you pls commit it? Tx, Adding dependencies in the dependency management section of the pom is not going to resolve dependencies for the projects. Its just going to fix the version of the dependency for the submodules and modules that depends.

we should just add jackson dependency in the hadoop-project/pom.xml dependency management section and not in the mapreduce pom's - as mr code doesnt depends on the jackson jars ; this is a transient dependency getting pulled through common. 
, I just committed HADOOP-7606. Is this now fixed?, The jackson error went away, now I am seeing:

{code}

Problem accessing /. Reason:

    Could not initialize class org.apache.hadoop.yarn.server.resourcemanager.webapp.RmController

Caused by:

java.lang.NoClassDefFoundError: Could not initialize class org.apache.hadoop.yarn.server.resourcemanager.webapp.RmController
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:39)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:27)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:513)
	at com.google.inject.DefaultConstructionProxyFactory$2.newInstance(DefaultConstructionProxyFactory.java:81)
	at com.google.inject.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:111)
	at com.google.inject.InjectorImpl$4$1.call(InjectorImpl.java:758)
	at com.google.inject.InjectorImpl.callInContext(InjectorImpl.java:804)
	at com.google.inject.InjectorImpl$4.get(InjectorImpl.java:754)
	at com.google.inject.InjectorImpl.getInstance(InjectorImpl.java:793)
	at org.apache.hadoop.yarn.webapp.Dispatcher.service(Dispatcher.java:136)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:820)
	at com.google.inject.servlet.ServletDefinition.doService(ServletDefinition.java:216)
	at com.google.inject.servlet.ServletDefinition.service(ServletDefinition.java:141)
	at com.google.inject.servlet.ManagedServletPipeline.service(ManagedServletPipeline.java:93)
	at com.google.inject.servlet.FilterChainInvocation.doFilter(FilterChainInvocation.java:63)
	at com.google.inject.servlet.ManagedFilterPipeline.dispatch(ManagedFilterPipeline.java:122)
	at com.google.inject.servlet.GuiceFilter.doFilter(GuiceFilter.java:110)
	at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1212)
	at org.apache.hadoop.http.HttpServer$QuotingInputFilter.doFilter(HttpServer.java:892)
	at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1212)
	at org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:399)
	at org.mortbay.jetty.security.SecurityHandler.handle(SecurityHandler.java:216)
	at org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:182)
	at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:766)
	at org.mortbay.jetty.webapp.WebAppContext.handle(WebAppContext.java:450)
	at org.mortbay.jetty.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:230)
	at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152)
	at org.mortbay.jetty.Server.handle(Server.java:326)
	at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:542)
	at org.mortbay.jetty.HttpConnection$RequestHandler.headerComplete(HttpConnection.java:928)
	at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:549)
	at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:212)
	at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:404)
	at org.mortbay.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:410)
	at org.mortbay.thread.QueuedThreadPool$PoolThread.run(QueuedThreadPool.java:582)

{code}

Debugging still. Will update., Canceling patch because it is a duplicate of HADOOP-7606.  It looks like the 500 error is still there in the latest code, so this JIRA can be used for that., I just tested with trunk 

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1165657 13f79535-47bb-0310-9956-ffa450edef68


And The RM UI comes up just fine for me, no problems.  Mahadev, I am not sure what is causing your problems, but I thought you should be aware of it.  I will try on 0.23 too., I just tested with branch-0.23 too

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/branch-0.23@1165692 13f79535-47bb-0310-9956-ffa450edef68

And the RM UI comes up just fine again., Bobby, 
 Ill verify it today and close the jira if it works out for me., I just verified. I dont see the issue anymore. Marking it as Duplicate of  HADOOP-7606.]