[Its quite trivial to reproduce this:
hadoop jar $HADOOP_PREFIX/share/hadoop/mapreduce/hadoop-mapreduce-examples-*.jar randomtextwriter -Dmapreduce.randomwriter.totalbytes=1000 -Dmapreduce.randomwriter.bytespermap=1000 /someDirectory/run1

$ hdfs dfs -ls -R /someDirectory
drwxr-xr-x   - someUser supergroup          0 2013-06-10 16:46 /someDirectory
drwxr-xr-x   - someUser supergroup          0 2013-06-10 16:47 /someDirectory/run1
drwxr-xr-x   - someUser supergroup          0 2013-06-10 16:47 /someDirectory/run1/_temporary
drwxr-xr-x   - someUser supergroup          0 2013-06-10 16:47 /someDirectory/run1/_temporary/1
drwxr-xr-x   - someUser supergroup          0 2013-06-10 16:47 /someDirectory/run1/_temporary/1/_temporary


In the namenode logs I see:
2013-06-10 16:47:17,392 [IPC Server handler 2 on 9000] DEBUG org.apache.hadoop.hdfs.StateChange: *DIR* Namenode.delete: src=/someDirectory/run1/_temporary, recursive=true
2013-06-10 16:47:17,392 [IPC Server handler 2 on 9000] DEBUG org.apache.hadoop.hdfs.StateChange: DIR* NameSystem.delete: /someDirectory/run1/_temporary
2013-06-10 16:47:17,393 [IPC Server handler 2 on 9000] DEBUG org.apache.hadoop.hdfs.StateChange: DIR* FSDirectory.delete: /someDirectory/run1/_temporary
2013-06-10 16:47:17,393 [IPC Server handler 2 on 9000] DEBUG org.apache.hadoop.hdfs.StateChange: DIR* FSDirectory.unprotectedDelete: /someDirectory/run1/_temporary is removed
2013-06-10 16:47:17,393 [IPC Server handler 2 on 9000] DEBUG org.apache.hadoop.hdfs.StateChange: DIR* Namesystem.delete: /someDirectory/run1/_temporary is removed
....
.....
2013-06-10 16:47:20,709 [IPC Server handler 5 on 9000] DEBUG org.apache.hadoop.hdfs.StateChange: *DIR* NameNode.create: file /someDirectory/run1/_temporary/1/_temporary/attempt_1370900756164_0001_m_000005_2/part-m-00005 for DFSClient_attempt_1370900756164_0001_m_000005_2_-2017431827_1 at <SOMEIP>
2013-06-10 16:47:20,709 [IPC Server handler 5 on 9000] DEBUG org.apache.hadoop.hdfs.StateChange: DIR* NameSystem.startFile: src=/someDirectory/run1/_temporary/1/_temporary/attempt_1370900756164_0001_m_000005_2/part-m-00005, holder=DFSClient_attempt_1370900756164_0001_m_000005_2_-2017431827_1, clientMachine=<SOMEIP>, createParent=true, replication=1, createFlag=[CREATE, OVERWRITE]
2013-06-10 16:47:20,710 [IPC Server handler 5 on 9000] DEBUG org.apache.hadoop.hdfs.StateChange: DIR* FSDirectory.mkdirs: created directory /someDirectory/run1/_temporary
2013-06-10 16:47:20,710 [IPC Server handler 5 on 9000] DEBUG org.apache.hadoop.hdfs.StateChange: DIR* FSDirectory.mkdirs: created directory /someDirectory/run1/_temporary/1
2013-06-10 16:47:20,710 [IPC Server handler 5 on 9000] DEBUG org.apache.hadoop.hdfs.StateChange: DIR* FSDirectory.mkdirs: created directory /someDirectory/run1/_temporary/1/_temporary
, Uploading initial patch for comment. Could we please review this approach?, {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12588460/MAPREDUCE-5317.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:red}-1 findbugs{color}.  The patch appears to introduce 1 new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/3780//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/3780//artifact/trunk/patchprocess/newPatchFindbugsWarningshadoop-mapreduce-client-app.html
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/3780//console

This message is automatically generated., Thanks for the patch, Ravi.  For context of other reviewers, the root cause is tasks in-flight can inadvertently recreate the job output directory when creating their temporary output directory because it's a subdirectory of the output directory and parent directories are created by default.

Note that I'm not a fan of the let's-wait-for-all-tasks approach, as we had all sorts of problems with hung AMs stuck in the KILL_WAIT state awaiting task completions that would never come.  I'd much rather just have the AM die quickly with the correct final status and have the tasks tear themselves down as a result.  Therefore I'd rather have the tasks properly *not* create the output directory when creating their temporary output directory and simply fail (as they should) when the output directory is missing.

As I understand it, there's an issue with the HDFS interface since there's apparently no way to create a directory without also implicitly creating the parent directories via FileSystem.  createNonRecursive would work, but it's deprecated.  We could switch to FileContext, but that could be just as risky of a change due to the scope and potential for extra namenode connections or RPC load.  So we might end up having to do the wait-for-all-tasks-when-failing method proposed here.  If that happens, a few comments on the patch:

* the FAIL_ABORT state was originally intended to await the response of the committer thread after it processes the abortJob call, and it's now being reused for a FAIL_WAIT state.  This is probably possible, but we need to make sure we don't leave the FAIL_ABORT state until the committer thread has signaled the completion of the abortJob processing.  Failure to do so means the RM could kill the AM task while it's mid-abort which is undesirable.  Therefore a JOB_TASK_COMPLETED should never lead us to the FAILED state, or we could do just that.  The only way to get from FAIL_ABORT to FAILED should be if the committer thread sent JOB_ABORT_COMPLETED.
* We should not be sending JOB_ABORT_COMPLETED via a timer, or we could skip calling the committer completely to clean up.  That would leave us with the same symptom trying to be fixed, a leftover output directory after a failed job.  We can debate whether a timer is useful or not (it masks bookkeeping problems, for better or worse), but if used it should send a separate event to indicate the code should just stop waiting for more tasks to complete and signal the committer to cleanup.
, Updated patch addressing Jason's comments, Thanks a lot for your detailed review Jason. Thanks also for summarizing all the problems.

Daryn and Kihwal also pointed out to me that another problem with using non-recursive create is that the existing behavior of some OutputCommitters may be to depend on the recursive create in setupTask. I agree with you, that we should use non-recursive create but can we please pursue that in another JIRA since it changes pre-existing behavior?

This patch simply provides a best-effort guarantee that abortJob will be called after all the tasks are finished/killed. I think that is a reasonable expectation on the part of our users who choose to write their own OutputCommitters. In the case that the timeout expires, we may still be left with stale files if some tasks are still alive and create the directory, but I feel that is a bullet we have to bite.

I've incorporated all your comments. I took the liberty of renaming FAIL_ABORT to FAIL_WAIT because it made a lot more sense to me. Thanks a lot again! :)
, {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12588568/MAPREDUCE-5317.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:red}-1 findbugs{color}.  The patch appears to introduce 1 new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/3785//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/3785//artifact/trunk/patchprocess/newPatchFindbugsWarningshadoop-mapreduce-client-app.html
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/3785//console

This message is automatically generated., FAIL_ABORT was intended to mirror KILL_ABORT and cover the state where we are awaiting the completion of the abortJob call from the committer thread.  In that sense it may make more sense and be easier to understand what's happening in each state if FAIL_WAIT was a separate state from FAIL_ABORT.  It would mirror the KILL_ABORT / KILL_WAIT states that exist in the job kill path.

Speaking of the KILL_WAIT state, if we're using a timeout for FAIL_WAIT it should be applied to KILL_WAIT as well.  Could just rename the event to something like JOB_WAIT_TIMEOUT.

The JOB_FAIL_WAIT_TIMEDOUT event needs to be handled in more than just the FAIL_WAIT state.  The event could be backed up in the event queue and delivered *after* we leave the state, so it needs to be at least ignored in any downstream states from FAIL_WAIT.

The findbugs warning also seems legit., Updated patch for trunk, Hi Jason! Thanks for your review again! I've updated the patch with your suggestions. There are now 2 states: FAIL_WAIT and FAIL_ABORT. I've also added a unit test. Could you please review and commit this new patch?



, The patch for trunk applies to branch-2 as well. This is the patch for branch-0.23., Uploading exactly the same trunk patch again, so that I can kick off Submit Patch and test-patch, {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12589054/MAPREDUCE-5317.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/3792//testReport/
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/3792//console

This message is automatically generated., Thanks for the update, Ravi.  Are we pushing the JOB_WAIT_TIMEOUT to another JIRA?  I didn't see that addressed.  A few more comments:

* Why does FAIL_WAIT ignore the JOB_COMMIT_COMPLETED/JOB_COMMIT_FAILED events?  I don't see how those events could arrive in this state, as it would require the committer to have been invoked sometime before entering this state.  Maybe I'm missing a scenario where that does occur?  KILL_WAIT doesn't do this, for example, so it seems we should either not need this in FAIL_WAIT or KILL_WAIT also needs it.
* In the testcase, it's using AsyncDispatcher yet checking immediately after handling an event that the committer has not been invoked.  This is inherently racy due to the nature of AsyncDispatcher.  Couple of options to fix it:
** Use InlineDispatcher or DrainDispatcher and call drain() (the latter is still technically a bit racy but the window is much smaller)
** Rather than checking the committer directly, spy/mock the event handler and verify after the event was handled that we didn't try to dispatch a committer event
* Nit: rather than explicitly waiting a hardcoded duration in the test case, we might be able to use verify with a timeout so we don't have to wait the full duration under normal test conditions., Hi Jason!
Thanks for your review. I've filed MAPREDUCE-5390 for making the two code paths the same.
I've also incorporated all your other comments. Could you please review this new patch?, {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12592366/MAPREDUCE-5317.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/3851//testReport/
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/3851//console

This message is automatically generated., The same changes in the patch for branch-0.23, {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12592389/MAPREDUCE-5317.branch-0.23.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:red}-1 javac{color:red}.  The patch appears to cause the build to fail.

Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/3852//console

This message is automatically generated., +1, will commit shortly., SUCCESS: Integrated in Hadoop-trunk-Commit #4085 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/4085/])
MAPREDUCE-5317. Stale files left behind for failed jobs. Contributed by Ravi Prakash (jlowe: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1503499)
* /hadoop/common/trunk/hadoop-mapreduce-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/job/JobStateInternal.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/job/event/JobEventType.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/job/impl/JobImpl.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/v2/app/job/impl/TestJobImpl.java
, Thanks, Ravi!  I committed this to trunk, branch-2, and branch-0.23., FAILURE: Integrated in Hadoop-Yarn-trunk #272 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk/272/])
MAPREDUCE-5317. Stale files left behind for failed jobs. Contributed by Ravi Prakash (jlowe: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1503499)
* /hadoop/common/trunk/hadoop-mapreduce-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/job/JobStateInternal.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/job/event/JobEventType.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/job/impl/JobImpl.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/v2/app/job/impl/TestJobImpl.java
, UNSTABLE: Integrated in Hadoop-Hdfs-0.23-Build #670 (See [https://builds.apache.org/job/Hadoop-Hdfs-0.23-Build/670/])
MAPREDUCE-5317. Stale files left behind for failed jobs. Contributed by Ravi Prakash (jlowe: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1503506)
* /hadoop/common/branches/branch-0.23/hadoop-mapreduce-project/CHANGES.txt
* /hadoop/common/branches/branch-0.23/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/job/JobStateInternal.java
* /hadoop/common/branches/branch-0.23/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/job/event/JobEventType.java
* /hadoop/common/branches/branch-0.23/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/job/impl/JobImpl.java
* /hadoop/common/branches/branch-0.23/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/v2/app/job/impl/TestJobImpl.java
, FAILURE: Integrated in Hadoop-Hdfs-trunk #1462 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/1462/])
MAPREDUCE-5317. Stale files left behind for failed jobs. Contributed by Ravi Prakash (jlowe: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1503499)
* /hadoop/common/trunk/hadoop-mapreduce-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/job/JobStateInternal.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/job/event/JobEventType.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/job/impl/JobImpl.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/v2/app/job/impl/TestJobImpl.java
, FAILURE: Integrated in Hadoop-Mapreduce-trunk #1489 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/1489/])
MAPREDUCE-5317. Stale files left behind for failed jobs. Contributed by Ravi Prakash (jlowe: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1503499)
* /hadoop/common/trunk/hadoop-mapreduce-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/job/JobStateInternal.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/job/event/JobEventType.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/job/impl/JobImpl.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/v2/app/job/impl/TestJobImpl.java
, This is causing some unit tests to hang/fail in hadoop-mapreduce-client-jobclient.  TestJobCleanup on 0.23, for example.  I missed the fact that when JobImpl short-circuits the FAIL_WAIT state and goes straight from RUNNING to FAIL_ABORT it is failing to send the committer event that will eventually trigger it to leave the FAIL_ABORT state.  That causes the AM to just hang in the FAIL_ABORT state.

Ravi, could you add that fix along with a test case for that scenario?  In the meantime I'll back out this change to fix the builds., SUCCESS: Integrated in Hadoop-trunk-Commit #4090 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/4090/])
Back out revision 1503499 for MAPREDUCE-5317. Stale files left behind for failed jobs (jlowe: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1503744)
* /hadoop/common/trunk/hadoop-mapreduce-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/job/JobStateInternal.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/job/event/JobEventType.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/job/impl/JobImpl.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/v2/app/job/impl/TestJobImpl.java
, SUCCESS: Integrated in Hadoop-Yarn-trunk #273 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk/273/])
Back out revision 1503499 for MAPREDUCE-5317. Stale files left behind for failed jobs (jlowe: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1503744)
* /hadoop/common/trunk/hadoop-mapreduce-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/job/JobStateInternal.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/job/event/JobEventType.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/job/impl/JobImpl.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/v2/app/job/impl/TestJobImpl.java
, SUCCESS: Integrated in Hadoop-Hdfs-0.23-Build #671 (See [https://builds.apache.org/job/Hadoop-Hdfs-0.23-Build/671/])
Revert change 1503506 for MAPREDUCE-5317. Stale files left behind for failed jobs (jlowe: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1503751)
* /hadoop/common/branches/branch-0.23/hadoop-mapreduce-project/CHANGES.txt
* /hadoop/common/branches/branch-0.23/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/job/JobStateInternal.java
* /hadoop/common/branches/branch-0.23/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/job/event/JobEventType.java
* /hadoop/common/branches/branch-0.23/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/job/impl/JobImpl.java
* /hadoop/common/branches/branch-0.23/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/v2/app/job/impl/TestJobImpl.java
, FAILURE: Integrated in Hadoop-Hdfs-trunk #1463 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/1463/])
Back out revision 1503499 for MAPREDUCE-5317. Stale files left behind for failed jobs (jlowe: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1503744)
* /hadoop/common/trunk/hadoop-mapreduce-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/job/JobStateInternal.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/job/event/JobEventType.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/job/impl/JobImpl.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/v2/app/job/impl/TestJobImpl.java
, SUCCESS: Integrated in Hadoop-Mapreduce-trunk #1490 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/1490/])
Back out revision 1503499 for MAPREDUCE-5317. Stale files left behind for failed jobs (jlowe: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1503744)
* /hadoop/common/trunk/hadoop-mapreduce-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/job/JobStateInternal.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/job/event/JobEventType.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/job/impl/JobImpl.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/v2/app/job/impl/TestJobImpl.java
, Sorry about that Jason! Here is an updated patch for branch-0.23, And trunk, {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12593326/MAPREDUCE-5317.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/3874//testReport/
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/3874//console

This message is automatically generated., +1, Thanks, Ravi.  I committed this to trunk, branch-2, and branch-0.23., I pulled this into branch-2.1-beta as well.]