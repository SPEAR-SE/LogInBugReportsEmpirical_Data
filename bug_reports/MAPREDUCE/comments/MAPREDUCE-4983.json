[The impacted tests are: {{TestMRApps}}, {{TestMapProgress}}, {{TestMRJobs}}, and {{TestUberAM}}., The attached patch changes the test code so that it's not platform-specific.  I tested the patch on Mac and Windows.  This patch is intended for branch-trunk-win (not trunk).

Here is a summary of the kinds of changes that are in this patch:

{code}
   private static void delete(File dir) throws IOException {
-    Path p = new Path("file://"+dir.getAbsolutePath());
     Configuration conf = new Configuration();
-    FileSystem fs = p.getFileSystem(conf);
+    FileSystem fs = FileSystem.getLocal(conf);
+    Path p = fs.makeQualified(new Path(dir.getAbsolutePath()));
     fs.delete(p, true);
   }
{code}

The prior code for path construction fails on Windows due to the drive spec and backslashes.  Using {{FileSystem#makeQualified}} against the local file system works cross-platform.

{code}
-    assertTrue(environment.get("CLASSPATH").startsWith("$PWD:"));
+    assertTrue(environment.get("CLASSPATH").startsWith(
+      ApplicationConstants.Environment.PWD.$() + File.pathSeparator));
{code}

On Windows, an environment variable shows up in the classpath as %VAR% instead of $VAR.  On branch-trunk-win, we have already changed {{ApplicationConstants#Environment#$}} to return the correct thing depending on platform, so I'm reusing that here.

{code}
-      yarnAppClasspath = yarnAppClasspath.replaceAll(",\\s*", ":").trim();
+      yarnAppClasspath = yarnAppClasspath.replaceAll(",\\s*", File.pathSeparator)
+        .trim();
{code}

On Windows, classpath entries are separated by ';' instead of ':'.  Using {{File#pathSeparator}} handles this correctly cross-platform.

{code}
-    assertSame("MAPREDUCE_JOB_USER_CLASSPATH_FIRST set, but not taking effect!",
-      env_str.indexOf("$PWD:job.jar/job.jar:job.jar/classes/:job.jar/lib/*:$PWD/*"), 0);
+    String expectedClasspath = StringUtils.join(File.pathSeparator,
+      Arrays.asList(ApplicationConstants.Environment.PWD.$(), "job.jar/job.jar",
+        "job.jar/classes/", "job.jar/lib/*",
+        ApplicationConstants.Environment.PWD.$() + "/*"));
+    assertTrue("MAPREDUCE_JOB_USER_CLASSPATH_FIRST set, but not taking effect!",
+      env_str.startsWith(expectedClasspath));
{code}

This is a combination of the prior issues: handling environment variables and classpath entry separator in a way that works cross-platform.

{code}
-  private static String TEST_ROOT_DIR = new File(System.getProperty(
-           "test.build.data", "/tmp")).getAbsolutePath() + "/mapPahseprogress";
+  private static String TEST_ROOT_DIR;
+  static {
+    String root = new File(System.getProperty("test.build.data", "/tmp"))
+      .getAbsolutePath();
+    TEST_ROOT_DIR = new Path(root, "mapPahseprogress").toString();
+  }
{code}

The old code would generate a path with a mix of backslashes and forward slashes.  Passing through {{Path#toString}} handles this correctly.

{code}
-        new Path(mrCluster.getTestWorkDir().getAbsolutePath(), "random-output");
+        new Path("/tmp/" + getClass().getSimpleName(), "random-output");
{code}

The old code would attempt to use a path on HDFS with a drive spec.  HDFS would reject this, because it considers ':' invalid in a path.  See prior discussion in HDFS-4470, HADOOP-8487, and HDFS-4260 for discussion and justification for switching to a path of the form /tmp/<test name>.  Note that this does not change any paths used on the local file system.  This only changes paths used for creating files in HDFS.

{code}
       // Check lengths of the files
-      Assert.assertEquals(1, localFs.getFileStatus(files[1]).getLen());
-      Assert.assertTrue(localFs.getFileStatus(files[2]).getLen() > 1);
+      Map<String, Path> filesMap = pathsToMap(files);
+      Assert.assertTrue(filesMap.containsKey("distributed.first.symlink"));
+      Assert.assertEquals(1, localFs.getFileStatus(
+        filesMap.get("distributed.first.symlink")).getLen());
+      Assert.assertTrue(filesMap.containsKey("distributed.second.jar"));
+      Assert.assertTrue(localFs.getFileStatus(
+        filesMap.get("distributed.second.jar")).getLen() > 1);
{code}

The old code assumed that the directory listing would come back in a specific order.  The order can be different on Windows.  Additionally, Windows has an additional jar used to bundle a potentially long classpath into a jar manifest.  The new code creates a mapping based on name and then interrogates the map, so there is no assumption of order.

With this patch, we still have a failure in {{TestMRJobs#testDistributedCache}}, but it's a separate issue due to mishandling of symlinks in the distributed cache.  I'll file a separate jira for that.
, Mostly looks good. One comment:
 - Can you change TestMRJobs to use TEST_ROOT_DIR instead of hardcoding /tmp, but address the mixed slash issue with Path#toString()?, bq. With this patch, we still have a failure in TestMRJobs#testDistributedCache, but it's a separate issue due to mishandling of symlinks in the distributed cache. I'll file a separate jira for that.
Please do., Clean fixes overall. Please do fix the existing typo "mapPahseprogress" :P, Thanks, Vinod and Bikas.  I'm attaching version 2 of the patch to address your feedback.

{quote}
Can you change TestMRJobs to use TEST_ROOT_DIR instead of hardcoding /tmp, but address the mixed slash issue with Path#toString()?
{quote}

Unfortunately, no, we can't use TEST_ROOT_DIR for this.  In addition to the slash issue, TEST_ROOT_DIR will have a drive spec, and HDFS will reject any path with a ':' as invalid.  TEST_ROOT_DIR needs to stay fully qualified, with drive spec, for some of the local file system setup operations in the test.  I have introduced a new constant, OUTPUT_ROOT_DIR, so at least we don't repeat "/tmp" in multiple places.

{quote}
Please do fix the existing typo "mapPahseprogress"{quote}

I kept looking right past it.  :-)  Fixed.
, Thought this was a local FS path so was advising against /tmp, but realized otherwise now.

Better solution could have been Path itself taking care of mixed slashes?

Never mind for this patch though.. Checking it in., Just committed this to branch-trunk-win. Thanks Chris!, Thanks for the commit!  I filed MAPREDUCE-4987 for the remaining failure.]