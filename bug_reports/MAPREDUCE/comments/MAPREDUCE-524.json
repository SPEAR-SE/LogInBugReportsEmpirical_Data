[Attaching patch. This is to be applied over the final patch on HADOOP-4830 and assumes HADOOP-4830 is in.

 - This includes two tests that exactly imitate the functionality of the tests TestCapacityScheduler.testJobInitialization and TestCapacityScheduler.testHighPriorityJobInitialization but on a ClusterWithCapacityScheduler.
 - This also includes addition of functionality in ControlledMapReduce to control the setup tasks along with the usually controlled map and reduce tasks., Sreekanth, can you please review this patch once HADOOP-4831 is in? It should be relatively easier for you than others as the patch mostly follows the tests that you have written in TestCapacityScheduler.

Thanks,
+Vinod, bq. Sreekanth, can you please review this patch once HADOOP-4831 is in?
Sorry, I meant HADOOP-4830, HADOOP-4830 is committed, I am updating the patch for this JIRA with minor changes needed for merging with HADOOP-4830.

Sreekanth, this patch is ready for review now, can you please do so? Thanks., ControlledMapReduceJob:

Remove unncessary import statement:
import org.apache.hadoop.mapred.lib.NullOutputFormat

Can you remove the import statement:
import org.apache.hadoop.mapred.ControlledMapReduceJob.ControlledMapReduceJobRunner.ControlledOutputCommitter

Instead we can rewrite line 503 to :
conf.setOutputCommitter(ControlledMapReduceJobRunner.ControlledOutputCommitter.class);

Minor nit typo in javadoc comment for haveAllTasksFinished(JobInProgress jip, boolean isMap)


TestJobInitialization:

Please document the class TestJobInitialization by marking that job initialization testing is done by controlling setup task of a job, for test cases within TestCapacityScheduler test job initalization by controlling schedulers assign task and monitoring run queue of scheduler. 


Please document the methods : waitTillOnlyNJobsAreInitialized, getNonRunningInitalizedJobs 

Method waitTillOnlyNJobsAreInitalized does two things i.e. it waits till n jobs are initialized then sleeps for one poller cycle and checks if the actual number of initialized jobs are maintained in steady state. Can you please document this? 

Are you planning to add test case to check if Job initialization works properly in case of job failures? Also case where Job initialization across two queues happen independent fashion?, After offline discussion with Vinod, clarifying the statement about job initialization with respect to job failures. The test case should do the following:

* Submit 3 jobs as a single user.
* Two of the jobs would be initialized for the user.
* Fail one of the job, while setup task of the job is running. So the job should be removed from the scheduler job list by next polling interval.
* Check if the 3rd job is initialized., Attaching a new patch addressing the review comments.
 - Added the tests testJobInitInMultipleQs and jobKillWhileSetupIsRunning to respectively test job initialization in the presence of multiple queues and job kill.
 - Have done some refactoring of methods. Moved waitTillSetupTaskStartsRunning, waitTillSetupTaskFinishes and waitTillCleanupTaskFinishes to ClusterWithCapacityScheduler as it is the right place for these methods.
 - Also, added some code so as to handle exceptions in individual tests and to proceed to the following tests without failing. Also, added tear-down code for each test in a 'finally' block - to kill all jobs from previous test. This is needed as the testcase tries to reuse the the cluster for various tests.

The total run time for TestJobInitialization hovers around 7 minutes. To test this, comment out the line "this.reclaimCapacityThread.start()" (CapacityTaskScheduler.java +1239), otherwise it is very highly likely that HADOOP-4977 is hit., Looking good few minor issues:

* In  TestJobInitalization method testJobInitInSingleQ() why don't we just exit if one of the test cases fail i.e. normalPriorityJobInitializationTest, highPriorityJobInitializationTest and jobKillWhileSetupIsRunning are the test any one of the tailure should stop the subsequent test cases from running right?

* In testJobsInitInMultipleQs(), the property _mapred.capacity-scheduler.init-worker-threads_ is a global property does not need to be set in the loop.

* Rename testJobInitInSingleQ() - testJobInitInSingleQueue()
* Rename testJobsInitInMultipleQs()  - testJobsInitInMultipleQueues()

Minor nits: diff's contains an unnecessary blank line in ClusterWithCapacityScheduler file.

, New patch incorporating all the above review comments except one.

bq. In TestJobInitalization method testJobInitInSingleQ() why don't we just exit if one of the test cases fail i.e. normalPriorityJobInitializationTest, highPriorityJobInitializationTest and jobKillWhileSetupIsRunning are the test any one of the tailure should stop the subsequent test cases from running right?
All the tests in testJobInitInSingleQueue are supposed to be individual tests, but are combined together so as to reuse the cluster and save some test time. The testcase needs to continue running other tests in the hope of finding all the possible bugs/errors in a single run.

Also added the previously missing ASF license for TestJobInitialization.java., +1 to the patch. 

Can you submit the patch thro' hudson?, 
Hudson's broken. I was already running 'ant test-patch' in the pipeline. Results:
{code}
     [exec] +1 overall.
     [exec]
     [exec]     +1 @author.  The patch does not contain any @author tags.
     [exec]
     [exec]     +1 tests included.  The patch appears to include 8 new or modified tests.
     [exec]
     [exec]     +1 javadoc.  The javadoc tool did not generate any warning messages.
     [exec]
     [exec]     +1 javac.  The applied patch does not increase the total number of javac compiler warnings.
     [exec]
     [exec]     +1 findbugs.  The patch does not introduce any new Findbugs warnings.
     [exec]
     [exec]     +1 Eclipse classpath. The patch retains Eclipse classpath integrity.
{code}, Cancelling this patch, since it hasn't moved in a long time. Please mark PA again if it should go in., How about we just close it now as stale?]