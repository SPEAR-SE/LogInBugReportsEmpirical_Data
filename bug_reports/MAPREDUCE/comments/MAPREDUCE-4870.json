[I noticed this problem on Windows, where the test currently fails.  The attached patch changes the test to poll for any of the terminal states: {{RMAppState.FINISHED}}, {{RMAppState.FAILED}}, or {{RMAppState.KILLED}}.  Those are all of the terminal states, right?  After the loop, I added an assertion that it was {{RMAppState.FINISHED}}.  For extra safety, I also aborted the polling loop after a maximum of 60 seconds.

The test still fails on Windows on the new assertion.  We'll need to fix that later, but for right now, I just want to fix the infinite loop, which tends to ruin entire project test runs.

This patch can commit to trunk and then merge to branch-trunk-win.
, {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12560413/MAPREDUCE-4870.1.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/3117//testReport/
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/3117//console

This message is automatically generated., The code looks good for me. It definitely can get out of the infinite loop. I checked the RMAppImpl, it does not contain the transition from status failure to status finish. So, this line Assert.assertEquals(RMAppState.FINISHED, mrCluster.getResourceManager().getRMContext().getRMApps().get(appID).getState()) will always get wrong in this case. 
Looks like that the failure is because we can not launch the container :
2012-12-11 12:02:14,938 INFO  [ContainersLauncher #0] nodemanager.DefaultContainerExecutor (DefaultContainerExecutor.java:launchContainer(175)) - launchContainer: [bash, /Users/xgong/hadoop-trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/target/org.apache.hadoop.mapreduce.v2.TestMRJobsWithHistoryService/org.apache.hadoop.mapreduce.v2.TestMRJobsWithHistoryService-localDir-nm-0_0/usercache/root/appcache/application_1355256124849_0001/container_1355256124849_0001_01_000001/default_container_executor.sh]
It will returen non-zero exit code 127. 
Then it will cause the following AM and application failure , I just committed this. Thanks Chris!]