[See https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/5121//artifact/patchprocess/newPatchFindbugsWarningshadoop-mapreduce-client-core.html as one example of the warnings., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12694850/MAPREDUCE-6225.001.patch
  against trunk revision 2848db8.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/5124//testReport/
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/5124//console

This message is automatically generated., Thanks [~varun_saxena] for delivering a patch! 
Mostly looks fine, but only a trivial thing here:
In JobSubmitter.java, we have similar logic in copyAndConfigureFiles() and addLog4jToDistributedCache() with setting job's working directory in case not set before. I think we should at least omit one because it get duplicated in its call flow.
{code}
+    job.getWorkingDirectory();
{code}
Other looks good to me., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12695075/MAPREDUCE-6225.002.patch
  against trunk revision 9850e15.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/5128//testReport/
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/5128//console

This message is automatically generated., [~djp], kindly review, Hi [~varun_saxena], sorry for missing this. 
For following code, I think  job.getWorkingDirectory() in addLog4jToDistributedCache() get called first. Would you double check it? Thanks!
{code}
@@ -390,10 +390,8 @@ private void copyAndConfigureFiles(Job job, Path jobSubmitDir)
     short replication = (short)conf.getInt(Job.SUBMIT_REPLICATION, 10);
     copyAndConfigureFiles(job, jobSubmitDir, replication);
 
-    // Set the working directory
-    if (job.getWorkingDirectory() == null) {
-      job.setWorkingDirectory(jtFs.getWorkingDirectory());
-    }
+    // Get the working directory. If not set, sets it to filesystem working dir
+    job.getWorkingDirectory();
 
   }
   /**
@@ -773,11 +771,6 @@ private void addLog4jToDistributedCache(Job job,
     if (!log4jPropertyFile.isEmpty()) {
       short replication = (short)conf.getInt(Job.SUBMIT_REPLICATION, 10);
       copyLog4jPropertyFile(job, jobSubmitDir, replication);
-
-      // Set the working directory
-      if (job.getWorkingDirectory() == null) {
-        job.setWorkingDirectory(jtFs.getWorkingDirectory());
-      }
     }
   }
 }
{code}, [~djp], I did not call getWorkingDirectory in addLog4jToDistributedCache because it was inside a condition.
I had tested this as well. I did not see any need to call getWorkingDirectory. 
{{JobContext.WORKING_DIR}} is not being set anywhere in these 2 places(in the call flow) for there to be a need to reset again.
So I am not sure why this code even exists in the first place.
I hope I didn't miss anything.

, I meant {{JobContext.WORKING_DIR}} is not being reset anywhere in these 2 places(in the call flow) for there to be a need to set it again.
{{job.getWorkingDirectory()}} essentially sets {{JobContext.WORKING_DIR}} if its not set., bq. I did not see any need to call getWorkingDirectory. {{JobContext.WORKING_DIR}} is not being set anywhere in these 2 places(in the call flow) for there to be a need to reset again. So I am not sure why this code even exists in the first place.
Make sense to me. In addition, {{JobContext.WORKING_DIR}} is not being referenced anywhere between these 2 places. +1 for removing {{job.getWorkingDirectory()}} in {{addLog4jToDistributedCache()}}. What do you think, [~djp]?, [~varun_saxena] [~ajisakaa] [~djp] thank you for taking this JIRA.

{code}
+    // Get the working directory. If not set, sets it to filesystem working dir
+    job.getWorkingDirectory();
{code}

I prefer to use job.setWorkingDirectory(jtFs.getWorkingDirectory()) for readability - it's a bit tricky and confusing for readers.
Also I'd like to +1 for moving job.setWorkingDirectory(jtFs.getWorkingDirectory()) to before copyAndConfigureFiles(job, jobSubmitDir, replication) at first to call one time as Junping mentioned., [~ozawa],

bq. Also I'd like to +1 for moving job.setWorkingDirectory(jtFs.getWorkingDirectory()) to before copyAndConfigureFiles(job, jobSubmitDir, replication) at first to call one time as Junping mentioned.
I was saying that I do not see any need to set working directory at all. Going by the code. Not sure why it is there. Maybe somebody else can comment on it if they know why it is there  , [~varun_saxena] 

{quote}
I was saying that I do not see any need to set working directory at all.
{quote}

JobConf is exposed to be public class: end user can call job.getWorkingDirectory. If the behavior changes, we cannot preserve backward compatibility before and after the patch. Please correct me if I'm wrong., s/JobConf is exposed to be public class/JobConf is exposed as a public class/, [~ozawa], I did not mean that we remove the function {{JobConf#getWorkingDirectory}}. I meant it may not be required in the flow mentioned i.e. in {{copyAndConfigureFiles}} and {{addLog4jToDistributedCache}}., Yeah, +1 for moving job.setWorkingDirectory(jtFs.getWorkingDirectory()) to the line before copyAndConfigureFiles(job, jobSubmitDir, replication) at first to call one time as Junping mentioned. Are we on the same page?, {code}
-    // Set the working directory
-    if (job.getWorkingDirectory() == null) {
-      job.setWorkingDirectory(jtFs.getWorkingDirectory());
-    }
+    // Get the working directory. If not set, sets it to filesystem working dir
+    job.getWorkingDirectory();
{code}

Simply put, I think we should update the lines as follows:

{code}
+    job.setWorkingDirectory(jtFs.getWorkingDirectory());
{code}, Thanks all for good discussion here! 
I think mostly likely we don't need this in either of two places because JobContext.WORKING_DIR being accessed (by internal of hadoop) all via job.getWorkingDirectory(). So if we don't replace null with something default here, it could be replaced later when we use it. However, [~ozawa] mentioned a good reason (for behavior compatibility on JobConf which is public to other projects, like: Oozie, etc.) to keep at least 1 of them in the whole code flow, so I think the question now is which one should be kept here. Now, I agree that copyAndConfigureFiles() is better because we don't care which one get called first, but we need to make sure it get called - the other one (addLog4jToDistributedCache) is under a condition so not proper.
[~ozawa] and [~ajisakaa], any other thoughts here?, [~djp],

bq.  Now, I agree that copyAndConfigureFiles() is better because we don't care which one get called first, but we need to make sure it get called - the other one (addLog4jToDistributedCache) is under a condition so not proper.
I agree. That is why I had kept it the way it is in 2nd patch i.e. in copyAndConfigureFiles.
You see any other change required in the patch ? I think the change [~ozawa] suggested can be made i.e use {{job.setWorkingDirectory(jtFs.getWorkingDirectory());}} instead of {{job.getWorkingDirectory()}} because latter may make the code confusing., Agree, I would suggest not to do this at this JIRA because this would change the logic of distributed cache which beyond this JIRA's scope (fix warnings) - make it harder to identify potential bugs later. I am good for latest patch, but I would recommend you (optionally) to add a comment on this line of code on why we keep job.getWorkingDirectory() here and refer to our JIRA discussions here. Make sense?, +1, we should be conservative for the backward compatibility problem., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12699111/MAPREDUCE-6225.003.patch
  against trunk revision 447bd7b.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/5198//testReport/
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/5198//console

This message is automatically generated., +1. Latest patch LGTM. I will go ahead to commit this shortly. 
Thanks [~varun_saxena] for contributing the patch, and review effort from [~ozawa] and [~ajisakaa]!, +1, thanks [~varun_saxena] for the contribution, and thanks [~djp] and [~ozawa] for the discussions., FAILURE: Integrated in Hadoop-trunk-Commit #7121 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/7121/])
MAPREDUCE-6225. Fix new findbug warnings in hadoop-mapreduce-client-core. Contributed by Varun Saxena (junping_du: rev 814afa46efef201cb782072432fc744e1cb9c463)
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/security/SecureShuffleUtils.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/fieldsel/FieldSelectionHelper.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/JobSubmitter.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/InMemoryReader.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/input/CombineFileRecordReader.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/TaskLogAppender.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/util/ResourceBundles.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/lib/CombineFileRecordReader.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/IndexCache.java
* hadoop-mapreduce-project/CHANGES.txt
, Thanks [~ajisakaa], [~djp] and [~ozawa] for the review and commit, SUCCESS: Integrated in Hadoop-Hdfs-trunk-Java8 #97 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk-Java8/97/])
MAPREDUCE-6225. Fix new findbug warnings in hadoop-mapreduce-client-core. Contributed by Varun Saxena (junping_du: rev 814afa46efef201cb782072432fc744e1cb9c463)
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/input/CombineFileRecordReader.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/TaskLogAppender.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/util/ResourceBundles.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/JobSubmitter.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/security/SecureShuffleUtils.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/InMemoryReader.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/IndexCache.java
* hadoop-mapreduce-project/CHANGES.txt
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/fieldsel/FieldSelectionHelper.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/lib/CombineFileRecordReader.java
, FAILURE: Integrated in Hadoop-Yarn-trunk #841 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk/841/])
MAPREDUCE-6225. Fix new findbug warnings in hadoop-mapreduce-client-core. Contributed by Varun Saxena (junping_du: rev 814afa46efef201cb782072432fc744e1cb9c463)
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/util/ResourceBundles.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/input/CombineFileRecordReader.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/JobSubmitter.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/lib/CombineFileRecordReader.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/InMemoryReader.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/TaskLogAppender.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/IndexCache.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/security/SecureShuffleUtils.java
* hadoop-mapreduce-project/CHANGES.txt
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/fieldsel/FieldSelectionHelper.java
, SUCCESS: Integrated in Hadoop-Yarn-trunk-Java8 #107 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk-Java8/107/])
MAPREDUCE-6225. Fix new findbug warnings in hadoop-mapreduce-client-core. Contributed by Varun Saxena (junping_du: rev 814afa46efef201cb782072432fc744e1cb9c463)
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/JobSubmitter.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/TaskLogAppender.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/IndexCache.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/util/ResourceBundles.java
* hadoop-mapreduce-project/CHANGES.txt
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/InMemoryReader.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/security/SecureShuffleUtils.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/input/CombineFileRecordReader.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/fieldsel/FieldSelectionHelper.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/lib/CombineFileRecordReader.java
, SUCCESS: Integrated in Hadoop-Hdfs-trunk #2039 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/2039/])
MAPREDUCE-6225. Fix new findbug warnings in hadoop-mapreduce-client-core. Contributed by Varun Saxena (junping_du: rev 814afa46efef201cb782072432fc744e1cb9c463)
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/util/ResourceBundles.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/security/SecureShuffleUtils.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/lib/CombineFileRecordReader.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/fieldsel/FieldSelectionHelper.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/InMemoryReader.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/IndexCache.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/TaskLogAppender.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/JobSubmitter.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/input/CombineFileRecordReader.java
* hadoop-mapreduce-project/CHANGES.txt
, FAILURE: Integrated in Hadoop-Mapreduce-trunk #2058 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/2058/])
MAPREDUCE-6225. Fix new findbug warnings in hadoop-mapreduce-client-core. Contributed by Varun Saxena (junping_du: rev 814afa46efef201cb782072432fc744e1cb9c463)
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/security/SecureShuffleUtils.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/TaskLogAppender.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/InMemoryReader.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/JobSubmitter.java
* hadoop-mapreduce-project/CHANGES.txt
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/fieldsel/FieldSelectionHelper.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/lib/CombineFileRecordReader.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/IndexCache.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/util/ResourceBundles.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/input/CombineFileRecordReader.java
, FAILURE: Integrated in Hadoop-Mapreduce-trunk-Java8 #108 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk-Java8/108/])
MAPREDUCE-6225. Fix new findbug warnings in hadoop-mapreduce-client-core. Contributed by Varun Saxena (junping_du: rev 814afa46efef201cb782072432fc744e1cb9c463)
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/input/CombineFileRecordReader.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/util/ResourceBundles.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/lib/CombineFileRecordReader.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/IndexCache.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/TaskLogAppender.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/security/SecureShuffleUtils.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/fieldsel/FieldSelectionHelper.java
* hadoop-mapreduce-project/CHANGES.txt
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/InMemoryReader.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/JobSubmitter.java
]