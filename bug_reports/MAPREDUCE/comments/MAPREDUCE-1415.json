[Note that this still isn't a major security concern as all the parent directories are secure already. This fix is needed so we are consistent with permissions overall., Patch fixing the bug. Added a testcase which fails without the patch and passes with the patch., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12434373/patch-1415.txt
  against trunk revision 905008.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 9 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: http://hudson.zones.apache.org/hudson/job/Mapreduce-Patch-h6.grid.sp2.yahoo.net/421/testReport/
Findbugs warnings: http://hudson.zones.apache.org/hudson/job/Mapreduce-Patch-h6.grid.sp2.yahoo.net/421/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Checkstyle results: http://hudson.zones.apache.org/hudson/job/Mapreduce-Patch-h6.grid.sp2.yahoo.net/421/artifact/trunk/build/test/checkstyle-errors.html
Console output: http://hudson.zones.apache.org/hudson/job/Mapreduce-Patch-h6.grid.sp2.yahoo.net/421/console

This message is automatically generated., bq.-1 core tests. 
TestJobName failed because of NoClassDefFoundError (MAPREDUCE-1275). Same test passed on my machine, Recursive call of checkPermissionsOnDir() need to send file instead of dir as first param. As MAPREDUCE-1435 is also adding the same method and few similar methods for checking permissions of private ditributed cache files and public distributed cache files, let us regenerate this patch after that(after commit of MAPREDUCE-1435)., Patch updated to trunk., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12437990/patch-1415-1.txt
  against trunk revision 919335.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: http://hudson.zones.apache.org/hudson/job/Mapreduce-Patch-h6.grid.sp2.yahoo.net/503/testReport/
Findbugs warnings: http://hudson.zones.apache.org/hudson/job/Mapreduce-Patch-h6.grid.sp2.yahoo.net/503/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Checkstyle results: http://hudson.zones.apache.org/hudson/job/Mapreduce-Patch-h6.grid.sp2.yahoo.net/503/artifact/trunk/build/test/checkstyle-errors.html
Console output: http://hudson.zones.apache.org/hudson/job/Mapreduce-Patch-h6.grid.sp2.yahoo.net/503/console

This message is automatically generated., Test failure TestBadRecords is not related to the patch.
The test failed with NoClassDefFoundError (MAPREDUCE-1275).
Stack trace for the failure :
{noformat}
java.lang.NoClassDefFoundError: org/apache/hadoop/io/SequenceFile$Reader
	at org.apache.hadoop.mapred.TestBadRecords.validateOutput(TestBadRecords.java:147)
	at org.apache.hadoop.mapred.TestBadRecords.runMapReduce(TestBadRecords.java:96)
	at org.apache.hadoop.mapred.TestBadRecords.testBadMapRed(TestBadRecords.java:213)
Caused by: java.lang.ClassNotFoundException: org.apache.hadoop.io.SequenceFile$Reader
	at java.net.URLClassLoader$1.run(URLClassLoader.java:197)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:188)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:307)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:301)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:252)
	at java.lang.ClassLoader.loadClassInternal(ClassLoader.java:320)
Caused by: java.util.zip.ZipException: error reading zip file
	at java.util.zip.ZipFile.read(Native Method)
	at java.util.zip.ZipFile.access$1200(ZipFile.java:29)
	at java.util.zip.ZipFile$ZipFileInputStream.read(ZipFile.java:447)
	at java.util.zip.ZipFile$1.fill(ZipFile.java:230)
	at java.util.zip.InflaterInputStream.read(InflaterInputStream.java:141)
	at sun.misc.Resource.getBytes(Resource.java:97)
	at java.net.URLClassLoader.defineClass(URLClassLoader.java:256)
	at java.net.URLClassLoader.access$000(URLClassLoader.java:56)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:195)
{noformat}, Looks good overall. Very minor suggestions:

- In PipeMapRed.configure, can we use File.setExecutable(true) instead of FileUtil.chmod ? With FileUtil.chmod, I suppose an exception will be thrown if there's an invalid path passed. To maintain that semantics, we probably need to check the return value of File.setExecutable and throw a wrapped IOException when that happens.
- In testStreaming, we can use TEST_DIR.toAbsolutePath() as the value of stream.tmpdir.
- Very minor - in testStreamingWithDistCache, I suggest we use a variable to store the file name of the input script, test.sh., Patch with comments incorporated., TestStreamingAsDifferentUser passes with both tt_user and some-other user., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12438279/patch-1415-2.txt
  against trunk revision 920793.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    -1 contrib tests.  The patch failed contrib unit tests.

Test results: http://hudson.zones.apache.org/hudson/job/Mapreduce-Patch-h6.grid.sp2.yahoo.net/511/testReport/
Findbugs warnings: http://hudson.zones.apache.org/hudson/job/Mapreduce-Patch-h6.grid.sp2.yahoo.net/511/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Checkstyle results: http://hudson.zones.apache.org/hudson/job/Mapreduce-Patch-h6.grid.sp2.yahoo.net/511/artifact/trunk/build/test/checkstyle-errors.html
Console output: http://hudson.zones.apache.org/hudson/job/Mapreduce-Patch-h6.grid.sp2.yahoo.net/511/console

This message is automatically generated., Looking at one of the failed tests, it appears that we have test cases that use default commands like 'xargs' as the mapper, but don't specify the full path. Hence the code tries to set permissions for it in the current working directory and fails (because the file does not exist). I thought FileUtil.fullyDelete actually throws an exception if there's a command failure, but I see in code that we actually ignore exceptions explicitly. I assume the failure should have been seen before as well - at some debug log level. 

So, one option could be to not check the return code of setPermissions. Another option is to change the tests to work with full paths. However, this is inherently system dependent (as xargs could potentially be under multiple directories depending on the system)., Patch adds exists check for the File before doing setExecutable. 
Extended the testcase to pass a file in job.jar and validate its permissions because distributed cache files are set permissions during localization itself, testcase with distributed cache does not go through the code path of setExecutable.

All contrib tests passed. TestStreamingAsDifferentUser passed with both tt_user and some other user., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12438381/patch-1415-3.txt
  against trunk revision 921230.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 6 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    -1 contrib tests.  The patch failed contrib unit tests.

Test results: http://hudson.zones.apache.org/hudson/job/Mapreduce-Patch-h3.grid.sp2.yahoo.net/344/testReport/
Findbugs warnings: http://hudson.zones.apache.org/hudson/job/Mapreduce-Patch-h3.grid.sp2.yahoo.net/344/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Checkstyle results: http://hudson.zones.apache.org/hudson/job/Mapreduce-Patch-h3.grid.sp2.yahoo.net/344/artifact/trunk/build/test/checkstyle-errors.html
Console output: http://hudson.zones.apache.org/hudson/job/Mapreduce-Patch-h3.grid.sp2.yahoo.net/344/console

This message is automatically generated., bq. -1 contrib tests.
Many sqoop tests fail with NoClassDefFoundError. All the tests passed on my machine., Patch needs to be updated to trunk.]