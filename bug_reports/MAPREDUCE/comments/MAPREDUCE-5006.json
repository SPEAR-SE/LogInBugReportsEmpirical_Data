[I've been debugging some streaming tests recently for HADOOP-9300, so I can take this on., Looks like the tests required a single mapper., {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12569475/MAPREDUCE-5006.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 2 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-tools/hadoop-streaming.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/3334//testReport/
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/3334//console

This message is automatically generated., Sandy, what changed to cause the tests to fail?, MAPREDUCE-4994 made it so that LocalClientProtocolProvider doesn't always set the number of map tasks to 1.  As 2 is the number in mapred-default, this means that the local job runner now defaults to 2 mappers.  Ideally, it would be set to default to 1 and still be overridable via command line, but I am told this isn't possible with the current way that configurations work.  We could possibly add in a mapred.local.job.maps?, I think is fine just fixing the testcases as the current patch proposes as the testcases were coded assuming there is 1 map when using localrunner., bq. MAPREDUCE-4994 made it so that LocalClientProtocolProvider doesn't always set the number of map tasks to 1. 

Changing the number of map tasks for the local job runner doesn't sound right to me. It makes the behaviour different to Hadoop 1, which is bad because users' streaming jobs may behave differently. Also, setting the number of maps is just a hint. Even with mapreduce.job.maps set to 1, then there will still be one map per block (see FileInputFormat#getSplits), which is why applications don't normally set mapreduce.job.maps. So I think we should revert the change that MAPREDUCE-4994 made here., It's ok that mapreduce.job.maps will always be ignored for local jobs?  What if someone wants to locally test the parallel speedup of a compute-intensive job with little input data?, It's the current behaviour - in branch-1 as well - so if we want to change it, we should do it in a compatible way, e.g. with mapred.local.job.maps as you suggested. That should be a different JIRA though, and this one should fix the tests by reverting the relevant part of MAPREDUCE-4994., Ok, uploaded a patch that reverts the relevant part of MAPREDUCE-4994., {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12570900/MAPREDUCE-5006-1.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 2 new or modified test files.

    {color:green}+1 tests included appear to have a timeout.{color}

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common hadoop-tools/hadoop-streaming.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/3359//testReport/
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/3359//console

This message is automatically generated., The streaming tests shouldn't need changing now, should they? Otherwise looks good to me., My thinking was that it would still be good to make it explicit that these tests require 1 mapper.

But I don't feel strongly.  Attached a patch without the changes to the tests, and you can choose which you prefer., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12571234/MAPREDUCE-5006-2.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/3370//testReport/
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/3370//console

This message is automatically generated., +1 for this patch.  I was wondering if we could get this one committed soon.  It looks pretty simple.  I've been testing this patch pretty regularly while working on the MAPREDUCE-4885 patch to fix a few issues with the streaming tests on Windows.  Thanks very much!, Sorry I forgot to commit this one. I've just committed this to branch-2. Thanks Sandy!, Integrated in Hadoop-trunk-Commit #3533 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/3533/])
    MAPREDUCE-5006. Fix failing streaming tests due to MAPREDUCE-4994. Contributed by Sandy Ryza. (Revision 1461541)

     Result = SUCCESS
tomwhite : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1461541
Files : 
* /hadoop/common/trunk/hadoop-mapreduce-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapred/LocalClientProtocolProvider.java
* /hadoop/common/trunk/hadoop-tools/hadoop-streaming/src/test/java/org/apache/hadoop/streaming/TestStreamReduceNone.java
* /hadoop/common/trunk/hadoop-tools/hadoop-streaming/src/test/java/org/apache/hadoop/streaming/TestStreamXmlRecordReader.java
, Integrated in Hadoop-Mapreduce-trunk #1385 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/1385/])
    MAPREDUCE-5006. Fix failing streaming tests due to MAPREDUCE-4994. Contributed by Sandy Ryza. (Revision 1461541)

     Result = SUCCESS
tomwhite : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1461541
Files : 
* /hadoop/common/trunk/hadoop-mapreduce-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapred/LocalClientProtocolProvider.java
* /hadoop/common/trunk/hadoop-tools/hadoop-streaming/src/test/java/org/apache/hadoop/streaming/TestStreamReduceNone.java
* /hadoop/common/trunk/hadoop-tools/hadoop-streaming/src/test/java/org/apache/hadoop/streaming/TestStreamXmlRecordReader.java
, Thank you, Sandy and Tom!, Integrated in Hadoop-Yarn-trunk #169 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk/169/])
    MAPREDUCE-5006. Fix failing streaming tests due to MAPREDUCE-4994. Contributed by Sandy Ryza. (Revision 1461541)

     Result = FAILURE
tomwhite : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1461541
Files : 
* /hadoop/common/trunk/hadoop-mapreduce-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapred/LocalClientProtocolProvider.java
* /hadoop/common/trunk/hadoop-tools/hadoop-streaming/src/test/java/org/apache/hadoop/streaming/TestStreamReduceNone.java
* /hadoop/common/trunk/hadoop-tools/hadoop-streaming/src/test/java/org/apache/hadoop/streaming/TestStreamXmlRecordReader.java
, Integrated in Hadoop-Hdfs-trunk #1358 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/1358/])
    MAPREDUCE-5006. Fix failing streaming tests due to MAPREDUCE-4994. Contributed by Sandy Ryza. (Revision 1461541)

     Result = FAILURE
tomwhite : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1461541
Files : 
* /hadoop/common/trunk/hadoop-mapreduce-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapred/LocalClientProtocolProvider.java
* /hadoop/common/trunk/hadoop-tools/hadoop-streaming/src/test/java/org/apache/hadoop/streaming/TestStreamReduceNone.java
* /hadoop/common/trunk/hadoop-tools/hadoop-streaming/src/test/java/org/apache/hadoop/streaming/TestStreamXmlRecordReader.java
, I just merged this into branch-2.0.4-alpha for the release.]