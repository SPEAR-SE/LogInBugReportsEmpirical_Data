[+1 on adding an API similar to obtainNewMapTask that does not launch a task. This would simplify locality-aware scheduling too, because it would be easier to check whether a job has a local task to launch on the same node.

In the meantime, one thing you might try is making JobInProgress.shouldRunOnTaskTracker public and calling it. It's not perfect though, because other runnability checks could be added to JobInProgress in the future. In fact, there is already one other check in the current codebase that will prevent tasks from being launched when there is no free disk space on a node. The right solution is to structure JobInProgress in a more modular fashion so that these kinds of checks can be performed by schedulers., I'd rather have JobInProgress.shouldRunOnTaskTracker public for now.

Long term the right direction is for schedulers to maintain all scheduling information themselves and not rely on JobInProgress at all., i am not sure how helpful it will be to solve this jira (or whether this can be solved at all). one problem is that there is a *lot* of lag between asking something to be preempted and getting to schedule something new on the same slot:

- the kill action is only dispatched only the next heartbeat
- when the slot of freed - typically the TASK_CLEANUP is scheduled !!! (we are trying to make task cleanup an option and skip it from hive)
- on the third heartbeat from the node - the slot is now free to be assigned to a real task.

however - a lot of time has typically elapsed by now. the bigger the cluster - the worse this problem is (both because of heartbeat periodicity if u are not using OOB heartbeat as well as the fact that the JT quickly gets bottlenecked processing heartbeats and they queue up). the chances are that by this time - some other job will become higher priority for scheduling.

of course - we don't preempt for the highest priority (I mean in terms of ordering by fair-scheduler) job to begin with (MAPREDUCE-2205). So preempted slots anyway go to other jobs (if they are ahead in scheduling priority). So looking at the requirements of the job requesting preemption is not necessary. (the slot needs to be usable by any of the jobs that are >= in priority than the job that requested preemption - which is a less stringent requirement)]