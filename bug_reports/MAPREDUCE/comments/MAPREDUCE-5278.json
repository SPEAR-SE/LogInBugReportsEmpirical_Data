[Basically, if a remote file system is reachable from task trackers, we don't have to copy the files on this file system to the job tracker's staging (see JobClient#copyRemoteFiles() ). 

For example, in HDInsight, user storage would be ASV which is different than HDFS. So by default these files would be copied to JT. However, since ASV is supposed to be reachable from tasktracker, these copy operations would be unnecessary, which will also disable the dist cache.  A proposal is to add a configuration property (e.g. "mapred.tasktracker.scheme.accessible"). If we specify a scheme in this property, we won't do the copy operation even if this scheme is not equal to the scheme of job tracker's staging dir. For example, in this context, mapred.tasktracker.scheme.accessible=ASV., A patch is attached. 

In this patch, we added a property called "mapreduce.client.accessible.remote.schemes." It specifies the schemes of the file systems that are accessible from all the nodes in the cluster. This is used by the job client to avoid copying distributed cache entries to the job staging dir if path is accessible (See JobClient#copyRemoteFiles() ).

For example, on Windows Azure, a path that has ASV as its scheme is accessible from all the nodes in the cluster. "mapreduce.client.accessible.remote.schemes" can be set to "ASV". 

The change in this patch is passive, meaning that it won’t take effect unless this property is enabled thru configuration. , {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12586356/MAPREDUCE-5278.patch
  against trunk revision .

    {color:red}-1 patch{color}.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/3736//console

This message is automatically generated., Thanks Xi for posting the patch!

+1 on the proposal, I have largely reviewed this already and tested it out E2E.

A couple of additional comments below:
1.	You’ll also have to provide a trunk compatible patch for the new functionality
2.	TestMRWithDistributedCache#DistributedCacheCheckerJTStagingOnNondefaultFS: I would add the validation that localized dist cache entries are properly added to the classpath (below check).
{code}
      // Check the class loaders
      LOG.info("Java Classpath: " + System.getProperty("java.class.path"));
      ClassLoader cl = Thread.currentThread().getContextClassLoader();
      // Both the file and the archive were added to classpath, so both
      // should be reachable via the class loader.
      TestCase.assertNotNull(cl.getResource("distributed.jar.inside2"));
      TestCase.assertNotNull(cl.getResource("distributed.jar.inside3"));
      TestCase.assertNull(cl.getResource("distributed.jar.inside4"));
{code}

It would be really good to get feedback on the approach from some more senior MR folks. 
, Thanks Ivan. I have added a classpath check and am preparing a trunk version. , {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12587174/MAPREDUCE-5278.2.patch
  against trunk revision .

    {color:red}-1 patch{color}.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/3760//console

This message is automatically generated., We should add a config name and default value instead of directly referencing the string.
{code}
+    String [] accessibleSchemes = job.getStrings(
+        "mapreduce.client.accessible.remote.schemes");
{code}

Is the following code (marked below) continuing to copy stuff to the default fs (fs) when the newPath points to a different filesystem?
{code}
         Path newPath = copyRemoteFiles(fs, libjarsDir, tmp, job, replication);
         DistributedCache.addArchiveToClassPath
-          (new Path(newPath.toUri().getPath()), job, fs);
+          (new Path(newPath.toUri().getPath()), job, newPath.getFileSystem(job));
{code}, Thanks Bikas for your comments. For your question : "Is the following code (marked below) continuing to copy stuff to the default fs (fs) when the newPath points to a different filesystem?:

No. Basically, the original code does this: If JT staging dir is not on the default FS (for example, in our context it is ASV), copyRemoteFiles() will copy files in ASV to JT. Note that these files are specified using generic options.
After our change, when ASV is marked as "accessible" by specifying "mapreduce.client.accessible.remote.schemes",  copyRemoteFiles() won't copy the files in ASV  to the jobtracker. It just directly returns the path of that file, denoted by "newPath".  In addition, no copy operation would happen in addArchiveToClassPath().  , Great. My bad. Now that I have re-read the patch without interruptions I see the logic. Please do add a config name for the new config parameter instead of using a literal string., Thanks Bikas. A config name was added in JobClient.java
{code}
private static final String CLIENT_ACCESSIBLE_REMOTE_SCHEMES_KEY =
   "mapreduce.client.accessible.remote.schemes";
{code}
And in copyRemoteFiles(), I changed to
{code}
String [] accessibleSchemes = job.getStrings(
        CLIENT_ACCESSIBLE_REMOTE_SCHEMES_KEY, null);
{code}, {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12588265/MAPREDUCE-5278.3.patch
  against trunk revision .

    {color:red}-1 patch{color}.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/3779//console

This message is automatically generated., The config string is still being used in the test. Other than that it looks good. We can increase the visibility of the named var and set @Private on it. Then the test could use it., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12590727/MAPREDUCE-5278.4.patch
  against trunk revision .

    {color:red}-1 patch{color}.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/3828//console

This message is automatically generated., Thanks Bikas. A new patch was attached. , {code}
  public void testJTStagingOnNondefaultFS() throws Exception {
    MiniDFSCluster dfs = null;
    MiniMRCluster mr  = null;
    try {
      dfs = new MiniDFSCluster(conf, 1, true, null);
      FileSystem fileSys = dfs.getFileSystem();
      mr = new MiniMRCluster(1, fileSys.getUri().toString(), 1);
      runWithConfJTStagingOnNondefaultFS(mr.createJobConf());
    } finally { 
      mr.shutdown();
      dfs.shutdown();
    } 
  }
{code}

In the finally block, could you please check that mr and dfs are not null before calling shutdown on each one?  The constructors can throw exceptions, so it's possible that they weren't initialized.

Aside from that, it appears that all of the feedback from Bikas has been addressed.  I think we'll be ready to commit once this last part has been fixed.  Thanks, Xi!, Thanks, Chris. A new patch has been attached. , {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12591486/MAPREDUCE-5278.5.patch
  against trunk revision .

    {color:red}-1 patch{color}.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/3842//console

This message is automatically generated., +1 for the patch.  I verified the latest patch on Mac and Windows.  Xi, thank you for addressing everyone's feedback.  I committed this to branch-1-win., Thanks, Chris]