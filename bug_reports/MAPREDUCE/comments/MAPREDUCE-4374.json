[In this patch, I provide a more complete implementation for child environment variable expansion, as well as adding support for Windows. For this feature, we will have different syntaxes on Windows and Linux. I added some descriptions to the Java doc as well. For example, users can specify env via the following config on Linux.
{code}
<property>
  <name>mapred.child.env</name>
  <value>PATH=$HOME:/opt/bin</value>
</property>
{code}
While on Windows, the equivalent will look like:
{code}
<property>
  <name>mapred.child.env</name>
  <value>PATH=%HOME%;C:\opt\bin</value>
</property>
{code}
For the implementation, I followed the following IEEE POSIX standards except the letter case based on some discussion with my colleagues, i.e. both uppercase and lowercase letters are allowed. From the discussion, it seems it is both common for applications on Linux and Windows to use lower case letters for environment variable, and Hadoop does not need to follow IEEE guideline.  If there are other common use cases in Hadoop community, we can expand the support as well.
“Environment variable names used by the utilities in the Shell and Utilities volume of IEEE Std 1003.1-2001 consist solely of uppercase letters, digits, and the '_' (underscore) from the characters defined in Portable Character Set and do not begin with a digit.”
All matching patterns in the string are considered an environment variable, and are expanded to actual values accordingly.

*Why not use existing syntax, i.e. $ and ':' (e.g. '$x=a:b'),  to set environment variables on Windows?*
The most common usage for the environment variables is to provide path holders for the programs, e.g. LD_LIBRARY_PATH, PATH, HOME, etc. Unlike Linux, ':' is common in Windows paths as in 'C:\Windows'. If we use ':' as a separate for different values for the env variable, it will cause confusing during parsing.
We need to either choose another separator, e.g. ';' (semicolon); or escape ':' (colon). Escaping ':' is very ugly in my opinion, and also not a cross platform solution. If we follow the route to use another separator, we are already changing the existing syntax. I think using '%' instead of '$' and ';' will be more natural for Windows users. Since the paths are the most common usages of env variables, and will most likely be different on Windows and Linux, so it should be fine to ask users to adopt different settings on different platforms, since they likely need to change the path settings for different OSes anyway.


I also refactored two related tests to make them run on Windows. For *TestMiniMRChildTask*, the change is essential choosing different syntax to set the child task config for different OSes. For *TestTaskEnvironment*, we removed unnecessary parts that seems to be borrowed from TestJvmManager., +1, change looks good to me. Agree on your points for using '%' and ';' on Windows.
, Just checked that the CLASSPATH separator on Windows is indeed ';', so yeah, it is natural to use it. Same for '%'.

Good to see that we are not breaking any compatibility for existing users and only defining new behaviour for users on Windows.

bq. Why not use existing syntax, i.e. $ and ':' (e.g. '$x=a:b'), to set environment variables on Windows?
Didn't understand this part, the existing syntax is "mapred.child.env=MY_PATH=/tmp", is that how you set vars on Windows?, {quote}
Didn't understand this part, the existing syntax is "mapred.child.env=MY_PATH=/tmp", is that how you set vars on Windows?
{quote}
Oh, sorry for the confusing. By 'existing', I mean the existing setting for Hadoop on Linux. Because one possible solution is to use the Linux variable setting syntax for Hadoop on Windows. Hope this clarifies your question., TaskRunner.java 
Should be easy to move to Shell.getUserHome()?
{code}
  static final String DEFAULT_HOME_DIR =
      System.getenv(Shell.WINDOWS ? "USERPROFILE" : "HOME");
{code}

Firstly, why do we need this when non-Windows gets away without it? It just seems to be pure Java code. Secondly, if we know what abstract operation FOO we are doing here, then can we push it into Shell.FOO()?
{code}
      // line 505
      if (Shell.WINDOWS) {
        // trim leading and trailing quotes on Windows
        String acmeDir = workDir.toString();
        acmeDir = acmeDir.replaceAll("^\"|\"$", "");
        tmpDir = new Path(acmeDir, tmp);
      } else
        tmpDir = new Path(workDir.toString(), tmp);

     ......
  // line 790
  private static void symlink(File workDir, String target, String link)
      throws IOException {
    if (link != null) {
      if (Shell.WINDOWS){
        String path = workDir.toString();
        // strip leading and trailing quotes
        path = path.replaceAll("^\"|\"$", "");
        link = path + "\\" + link;
      }
{code}

{code}
    } else if (createDir) {
      FileSystem localFs = FileSystem.getLocal(conf);
      if (!localFs.exists(tmpDir) && !localFs.mkdirs(tmpDir) && 
          !localFs.getFileStatus(tmpDir).isDir()) {
            throw new IOException("Mkdirs failed to create " +
                tmpDir.toString());
      }
    }
{code}
Why this code addition? Is this a general bug you have found?

Should be easy to get the regex pattern for env vars from Shell?
{code}
          if (Shell.WINDOWS)
            p = Pattern.compile("%([A-Za-z_][A-Za-z0-9_]*?)%");
          else
            p = Pattern.compile("\\$([A-Za-z_][A-Za-z0-9_]*)");
{code}

TestMiniMRChildTask.java
Should easily move inside Shell.getTempPath()?
{code}
  private final static String TMP_PATH = Shell.WINDOWS ? "C:\\tmp" : "/tmp";
{code}

Same question as above
{code}
  private static void checkEnv(String envName, String expValue, String mode) {
    String envValue = System.getenv(envName).trim();
    // trim leading and trailing quotes on Windows 
    if (Shell.WINDOWS)
      envValue = envValue.replaceAll("^\"|\"$", "");
{code}

I couldn't think of a simple way to move the Shell.Windows inside Shell. Mainly because of the %being also used in String.Format.
{code}
    String envKey = String.format(Shell.WINDOWS ? "MY_PATH=%1$s,HOME=%1$s,"
        + "LD_LIBRARY_PATH=%%LD_LIBRARY_PATH%%;%1$s,"
        + "PATH=%%PATH%%;%1$s,NEW_PATH=%%NEW_PATH%%;%1$s"
        : "MY_PATH=%1$s,HOME=%1$s,LD_LIBRARY_PATH=$LD_LIBRARY_PATH:%1$s,"
            + "PATH=$PATH:%1$s,NEW_PATH=$NEW_PATH:%1$s", TMP_PATH);
{code}

TestTaskEnvironment.java
This could easily use Shell.getUserHome()?
{code}
    ttConf.set("mapred.child.env", (Shell.WINDOWS ? "ROOT=%USERPROFILE%"
        : "ROOT=$HOME"));
    ...
    assertTrue(root, root.contentEquals(System
        .getenv((Shell.WINDOWS ? "USERPROFILE" : "HOME"))));
{code}

Testing
Are there any tests that validate the changes or we should add new ones (Windows and Linux)?
, {quote}
{code}
static final String DEFAULT_HOME_DIR =
      System.getenv(Shell.WINDOWS ? "USERPROFILE" : "HOME");
{code}
{quote}
I think this is an old private constant variable that is only used in the TaskRunner class; also, it aligns with other private constant variables in the class, e.g. DEFAULT_MAPRED_ADMIN_JAVA_OPTS, DEFAULT_SHELL. So I am in favor to keep it here than put in Shell.

{quote}
Firstly, why do we need this when non-Windows gets away without it? It just seems to be pure Java code. Secondly, if we know what abstract operation FOO we are doing here, then can we push it into Shell.FOO()?
{quote}
About triming leading and trailing quotes on Windows, this is due to a subtle difference of ‘set’ on cmd shell and ‘export’ on bash shell. According to the [set document|http://technet.microsoft.com/en-us/library/bb490998] which I quoted below:
??The characters <, >, |, &, ^ are special command shell characters and must be either preceded by the escape character (^) or enclosed in quotation marks when used in string (that is, "StringContaining&Symbol". If you use quotation marks to enclose a string containing one of the special characters, *the quotation marks are set as part of the environment variable value*.??
On Linux, quotation marks are not set as part of the environment variable by ‘export’.
To launch child tasks with correct environment, we setup the environment by writing a series of ‘set’ or ‘export’ command (cf. TaskRunner.run() method) to TaskController.COMMAND_FILE, and execute the file to launch the Java job (cf. DefaultTaskController.launchTask() method). So when we receive the environment variables on Windows, we need to trim the leading and ending quotes around them in the program.
These are not perfect solutions. However notice this is the existing behavior from the previous change which may work for majority of cases. I only changed the code to make it more concise. Let’s not push this to Shell as I think the code is simply enough to be understood and we can work towards a better abstraction for this (handling ‘set’ vs ‘export’) in the future.

{quote}
Why this code addition? Is this a general bug you have found?
{quote}
Notice this is tmp directory. On Linux /tmp exists by default which is not the case on Windows.

{quote}
Should be easy to get the regex pattern for env vars from Shell?
{quote}
Moved to Shell in the new Patch.

{quote}
Should easily move inside Shell.getTempPath()?
{quote}
The folders here are really only just text string. The test is really just testing if the environment variable is set correctly. We make them folder names to make them more like real world scenario because that is a major use of environment variable in practice.

{quote}
This could easily use Shell.getUserHome()?
{quote}
Again, the purpose here is not to get user home, but to test an environment variable. I don’t think there is a need to create Shell function for this. The environment variables are very platform dependent. So I think we should accept the platform dependence here.
, bq.Notice this is tmp directory. On Linux /tmp exists by default which is not the case on Windows.
I think this is not limited to /tmp. It could be any directory set in the config.
btw, in the if condition is tmpDir exists then the check for it being a dir is skipped I think.

bq. Let’s not push this to Shell as I think the code is simply enough to be understood and we can work towards a better abstraction for this (handling ‘set’ vs ‘export’) in the future.
I see what the issue is. At the same time, this code is duplicated in 4 different places. So IMO, it makes sense to put these in a helper method call. When we make a better abstraction, we will know the single place to look for the old code instead of multiple places. Thoughts?, On a second look, I can see why these changes make sense in being test specific. +1., I just committed this. Thanks Chuan for the patch, and Bikas for the review.
, We also need this change in trunk and branch-2. TestMiniMRChildTask fail in trunk and branch-2 due to this., Attach a patch for trunk., Chuan, the trunk patch didn't compile for me.  Is {{Shell#getEnvironmentVariableRegex}} a new method that you need to add with this patch?, Sorry. I missed Shell.java changes in my patch. Uploading a new one., Thanks, Chuan.  +1 for the new patch.  I verified on Mac and Windows.  I'll commit this after we get a successful Jenkins run., {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12591511/MAPREDUCE-4374-trunk.2.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-common-project/hadoop-common hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/3843//testReport/
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/3843//console

This message is automatically generated., Chuan, actually I'd like to suggest one more change.

{code}
    if (envString != null && envString.length() > 0) {
      String childEnvs[] = envString.split(",");
      for (String cEnv : childEnvs) {
        String[] parts = cEnv.split("="); // split on '='
        Pattern p = Pattern.compile(Shell.getEnvironmentVariableRegex());
{code}

I think we can move the {{Pattern#compile}} call just before the outer for loop.  The regex can't change between each {{cEnv}}, so we don't need to recompile it each iteration.
, Thanks for the suggestion, Chris! Attaching a new patch moving {{Pattern#compile}} out of for loop., +1 for the new patch.  Thanks for making the change.  I'll commit this later today after Jenkins runs the new patch., {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12591724/MAPREDUCE-4374-trunk.3.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-common-project/hadoop-common hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/3844//testReport/
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/3844//console

This message is automatically generated., Integrated in Hadoop-trunk-Commit #4063 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/4063/])
    MAPREDUCE-4374. Fix child task environment variable config and add support for Windows. Contributed by Chuan Liu. (Revision 1502046)

     Result = SUCCESS
cnauroth : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1502046
Files : 
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/Shell.java
* /hadoop/common/trunk/hadoop-mapreduce-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/JobConf.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/resources/mapred-default.xml
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/test/java/org/apache/hadoop/mapred/TestMiniMRChildTask.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/Apps.java
, I committed this to trunk, branch-2, branch-2.1-beta, and branch-2.1.0-beta.  Chuan, thank you for porting this fix to trunk., Integrated in Hadoop-Yarn-trunk #267 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk/267/])
    MAPREDUCE-4374. Fix child task environment variable config and add support for Windows. Contributed by Chuan Liu. (Revision 1502046)

     Result = SUCCESS
cnauroth : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1502046
Files : 
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/Shell.java
* /hadoop/common/trunk/hadoop-mapreduce-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/JobConf.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/resources/mapred-default.xml
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/test/java/org/apache/hadoop/mapred/TestMiniMRChildTask.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/Apps.java
, Integrated in Hadoop-Hdfs-trunk #1457 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/1457/])
    MAPREDUCE-4374. Fix child task environment variable config and add support for Windows. Contributed by Chuan Liu. (Revision 1502046)

     Result = FAILURE
cnauroth : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1502046
Files : 
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/Shell.java
* /hadoop/common/trunk/hadoop-mapreduce-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/JobConf.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/resources/mapred-default.xml
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/test/java/org/apache/hadoop/mapred/TestMiniMRChildTask.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/Apps.java
, Integrated in Hadoop-Mapreduce-trunk #1484 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/1484/])
    MAPREDUCE-4374. Fix child task environment variable config and add support for Windows. Contributed by Chuan Liu. (Revision 1502046)

     Result = SUCCESS
cnauroth : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1502046
Files : 
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/Shell.java
* /hadoop/common/trunk/hadoop-mapreduce-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/JobConf.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/resources/mapred-default.xml
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/test/java/org/apache/hadoop/mapred/TestMiniMRChildTask.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/Apps.java
, I ran across a case where something broke moving from 0.23 to 2.x due to this change.  Due to the regexp pattern matching/replacing of variable expansions added by this change, environment variables are now expanded in the context of the code setting up the launch context rather than in the container itself.  For example, occurrences of $PATH, $JAVA_HOME, $LD_LIBRARY_PATH, etc. are resolved using the job client's environment when setting up the application submission context to launch the AM, and likewise variables are expanded using the AM's environment when setting up the container launch contexts for tasks.  Previously these variables were passed through un-expanded and later evaluated using the environment of the container rather than the code setting up the container launch context.

What this means is that any occurrences of variable references in environment settings now needs to use the new \{\{ var \}\} syntax to note that these variables should only be expanded at container launch time.  Any "normal" variable references will be expanded with the environment of the code setting up the launch context which may not be intuitive to users, especially given prior behavior in this area (although that code itself wasn't very consistent when it came to variable expansion semantics).

Anyway I wanted to bring it up in case others run into a similar snag and wondering if there's something to fix here. If we decide to keep the semantics as-is for 2.x then we should at least document the new behavior and new syntax outside of the java code, e.g.: in mapred-default.xml for the various env properties similar to what was done for mapreduce.application.classpath.]