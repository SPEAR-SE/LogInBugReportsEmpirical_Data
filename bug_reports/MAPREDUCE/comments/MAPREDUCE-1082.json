[Uploading patch. This issue requires patch for MAPREDUCE-1007, which is included in this patch for review., I've looked at the attached patch. It has some problems. The most important one is that for converting {{QueueInfo}} obects to {{JobQueueInfo}} objects, this patch creates a new {{JobQueueInfo}} objects everytime. This causes other tests like {{TestQueueMangerRefresh}} to fail. This has also proved to be problematic in the past too while working with MAPREDUCE-893.

Going back and summarizing the main cause for this bug, the NPE occurs while trying to serialize a hierarchy of {{JobQueueInfo}} objects. {{JobQueueInfo}} extends {{QueueInfo}} and so serialization code is accordingly inherited. So, the problem is as follows:

Hierarchy before serialization:
{code}
JobQueueInfo-one
   |-- JobQueueInfo-child-one
   `-- JobQueueInfo-child-two
{code}

Deserialized hierarchy:
{code}
JobQueueInfo-one
   |-- QueueInfo-child-one
   `-- QueueInfo-child-two
{code}

This poses problem while traversing the deserializing hierarchy.

Two solutions possible:
 - From the deserialized hierarchy, construct a proper hierarchy of {{JobQueueInfo}}s and use this from then on.
 - Or solve the central probem which is about fixing the inconsistent handling of relation {{JobQueueInfo}} with {{QueueInfo}} objects.

Given that the central problem has already resulted in some issues before too, I propose that once and for all we fix the problems with {{JobQueueInfo}} <-> {{QueueInfo}} inter-conversion as part of this JIRA issue. Thoughts?, Thinking more about it, I am fine with just fixing the NPE and the problem with {{JobQueueInfo.readFields()}} to solve this issue. We can delay the cleanup for later via MAPREDUCE-1110., uploading patch with the QueueInfo.readFields() overriden in JobQueueInfo.
The patch for  MAPREDUCE-1007 to be applied before this patch is applied., This patch is changing the serialization format of the deprecated {{JobQueueInfo}}. Not sure if it is/isn't OK.

In any case, back-compatibility of {{JobQueueInfo}} itself is broken after the incompatible changes done by MAPREDUCE-777; for e.g. some of the public methods are no longer available and have protected scope now., Or should I say MAPREDUCE-861 broke the back-compatibility of the serialization., I am thinking of addressing the backward-compatibility story at MAPREDUCE-1110.
Given that, I am +1 for this patch.

Submitting it to Hudson.., +1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12424575/MAPREDUCE-1082-2.patch
  against trunk revision 882470.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 2 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: http://hudson.zones.apache.org/hudson/job/Mapreduce-Patch-h3.grid.sp2.yahoo.net/147/testReport/
Findbugs warnings: http://hudson.zones.apache.org/hudson/job/Mapreduce-Patch-h3.grid.sp2.yahoo.net/147/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Checkstyle results: http://hudson.zones.apache.org/hudson/job/Mapreduce-Patch-h3.grid.sp2.yahoo.net/147/artifact/trunk/build/test/checkstyle-errors.html
Console output: http://hudson.zones.apache.org/hudson/job/Mapreduce-Patch-h3.grid.sp2.yahoo.net/147/console

This message is automatically generated., Have a few comments on this patch:

- I don't know why readFields in JobQueueInfo needs to be overridden. In all the API, it is QueueInfo objects that are transferred over IPC, and I think it should remain that way.
- I think the test case needs to be an end-to-end test by definition, as the fix is both in JobQueueInfo as well as in the JobTracker, where when we translate JobQueueInfos to QueueInfos, we fix the translation by walking the entire hierarchy. I would suggest a test that brings up a MiniMRCluster with hierarchical queues, submits a job to one of the queues and calls Cluster.getRootQueues and verifies the returned QueueInfo information. We might need a package private JobTracker.setQueueManager to enable setting up hierarchical queues with a miniMRCluster., Uploading patch with the above ideas implemented., Looking close. Some final comments:
- We are assuming the job statuses cannot be null in QueueInfo. I think we should check this in setJobStatuses. If it is null, we can set an empty array.
- The test case should call APIs like setRootQueues. getQueue is not passing through the code path change you made in JobTracker.getQueueInfoArray, While modifying the test case to implement the above comments, it was found that QueueInfo.readFields() recursively creates child objects as QueueInfo instances. This would lead to error while casting to JobQueueInfo in JobQueueInfo.getChildren().

Uploading patch with this handled., Had an offline discussion with Hemanth and Vinod. 
The issues that are being found here can all be solved with the fix to  MAPREDUCE-1110. So, resolving this issue as duplicate of it.]