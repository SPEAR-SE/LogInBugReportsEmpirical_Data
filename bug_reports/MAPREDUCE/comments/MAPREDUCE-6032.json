[Patch uploaded, {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12660984/MAPREDUCE-6032.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4798//testReport/
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4798//console

This message is automatically generated., {{Filesystem#makeQualified(Path)}} is intended to fail if the fs is already qualified for another fs.

{{Path#makeQualified(FileSystem)}}, which is oddly deprecated, is intended to qualify against the given fs only if the path isn't already qualified.  What you found with it mangling a localfs authority is a nasty bug!

All said, why even bother explicitly qualifying?  This should work:
{code}
stagingDirPath = new Path(stagingDirStr);
statingDirFS = stagingDirPath.getFileSystem(conf);
{code}, No this is not working because conf is the job configuration which may (and does in our use cases) contain fs.defaultFS different from one specified in core-site.xml. As result in history server stagingDirPath.getFileSystem(conf) will return one file system but within a job it will return another one. Only stagingDirPath.getFileSystem(new Configuration()) works perfectly. This fix ensures that only default file system is used.

This issue was detected in our pre-production system when we tried to migrate to Hadoop-2 (2.4.1). The fix was tested there., Resolved it by mistake, I still need somebody to finish review and commit it., Same patch, this issue just had a wrong status,  so I bring it back to radar., [~benjzh], I'll review the patch, thanks for your contribution!, [~benjzh], agree with the solution in general. Here're some comments with the patch.

1. Doesn't need "JobHistoryUtils: ", the logger will take care of the source where the log record is generated.
{code}
+      LOG.info("JobHistoryUtils: default file system is set solely " +
+              "by core-default.xml therefore -  ignoring");
{code}

2. Maybe you want to make the logic here clearer. And path.toUri().getAuthority() \!= null || path.toUri().getScheme()!= null -> &&?
{code}
+    if (fc == null ||
+            fc.getDefaultFileSystem().getUri().toString().equals(
+            conf.get(CommonConfigurationKeysPublic.FS_DEFAULT_NAME_KEY, "")) ||
+            path.toUri().getAuthority() != null ||
+            path.toUri().getScheme()!= null) {
{code}
Change it to:
{code}
boolean solyInCoreDefault = fc == null;
boolean sameFS = fc.getDefaultFileSystem().getUri().toString().equals(conf.get(CommonConfigurationKeysPublic.FS_DEFAULT_NAME_KEY, ""));
boolean qualified = path.toUri().getAuthority() != null &&  path.toUri().getScheme()!= null;
if (solyInCoreDefault && sameFS && qualified) {
...
{code}

3. Is it possible to add a test case in TestJobHistoryEventHandler to verify the JobHistoryHandler will write to the default FS as well?

4. You may wan to fix the indents (for those sentences in multiple lines).

5. Unlike makeQualified, the following method will work when stagingDirPath is on a different FS than the configure one, right?
{code}
stagingDirFS = FileSystem.get(stagingDirPath.toUri(), conf);
{code}, {quote}1. Doesn't need "JobHistoryUtils: ", the logger will take care of the source where the log record is generated.{quote} - Fixed
{quote}2. Maybe you want to make the logic here clearer.{quote} - While your version is more readable it will fail on sameFS line with NullPointerException. This is because in the 'if' all conditions are ORed and if first condition is false then the next won't be calculated. That's why it is better to put everything in the 'if' in this case.
{quote}2. ...And path.toUri().getAuthority() != null || path.toUri().getScheme()!= null -> &&?{quote} OR is more proper here because if path is partially qualified (e.g. there is a schema without autority) then we don't want to mess with it and just return it as-is. Consider following example:
{code}new Path("s3:///dir/subdir").makeQualified(new URI("hdfs://server:8020"), new Path("/dir"){code}
will return the following nonsense
{code}s3://server:8020/dir/subdir{code}
{quote}3. Is it possible to add a test case in TestJobHistoryEventHandler to verify the JobHistoryHandler will write to the default FS as well?{quote} - Done
{quote}4. You may wan to fix the indents (for those sentences in multiple lines).{quote} - You was not specific, therefore please check that I fixed everything you meant.
{quote}5. Unlike makeQualified, the following method will work when stagingDirPath is on a different FS than the configure one, right?{quote} - Right

I will upload the updated patch soon., Updated with review comments, {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12661701/MAPREDUCE-6032.1.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 2 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4805//testReport/
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4805//console

This message is automatically generated., I'm a bit confused.  The snippet I posted above should allow you to specify a scheme qualified path in the config so you can specifically refer a NN independent of the defaultFS.  Are you saying that doesn't work?, [Daryn Sharp|https://issues.apache.org/jira/secure/ViewProfile.jspa?name=daryn], first time I misunderstood your question. AFAIU now you suppose that *given* all my fixes in JobHistoryUtils we shouldn't bother to qualify the path in JobHistoryEventHandler, right?
You are right! However while it looks like we don't really have to qualify the paths right now, doing so is much safer for any future changes. If paths are qualified they will never be misused. Since there is only one-time overhead in this operation we won't suffer from mentionable performance penalties if we leave it as-is. , +1 for the latest patch. I'll commit it tomorrow if [~daryn] doesn't have further concern about the qualifying calls in JobHistoryEventHandler., Committed to trunk and branch-2. Thanks, [~benjzh] for the patch, and [~daryn] for the review!, FAILURE: Integrated in Hadoop-trunk-Commit #6079 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/6079/])
MAPREDUCE-6032. Fix the non-unicode character in the change log in CHANGES.txt. (zjshen: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1618270)
* /hadoop/common/trunk/hadoop-mapreduce-project/CHANGES.txt
MAPREDUCE-6032. Made MR jobs write job history files on the default FS when the current contextâ€™s FS is different. Contributed by Benjamin Zhitomirsky. (zjshen: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1618269)
* /hadoop/common/trunk/hadoop-mapreduce-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/pom.xml
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/jobhistory/JobHistoryEventHandler.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/jobhistory/TestJobHistoryEventHandler.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapreduce/v2/jobhistory/JobHistoryUtils.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/test/java/org/apache/hadoop/mapreduce/v2/hs/TestHistoryFileManager.java
, SUCCESS: Integrated in Hadoop-Yarn-trunk #648 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk/648/])
MAPREDUCE-6032. Fix the non-unicode character in the change log in CHANGES.txt. (zjshen: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1618270)
* /hadoop/common/trunk/hadoop-mapreduce-project/CHANGES.txt
MAPREDUCE-6032. Made MR jobs write job history files on the default FS when the current contextâ€™s FS is different. Contributed by Benjamin Zhitomirsky. (zjshen: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1618269)
* /hadoop/common/trunk/hadoop-mapreduce-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/pom.xml
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/jobhistory/JobHistoryEventHandler.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/jobhistory/TestJobHistoryEventHandler.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapreduce/v2/jobhistory/JobHistoryUtils.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/test/java/org/apache/hadoop/mapreduce/v2/hs/TestHistoryFileManager.java
, SUCCESS: Integrated in Hadoop-Mapreduce-trunk #1865 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/1865/])
MAPREDUCE-6032. Fix the non-unicode character in the change log in CHANGES.txt. (zjshen: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1618270)
* /hadoop/common/trunk/hadoop-mapreduce-project/CHANGES.txt
MAPREDUCE-6032. Made MR jobs write job history files on the default FS when the current contextâ€™s FS is different. Contributed by Benjamin Zhitomirsky. (zjshen: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1618269)
* /hadoop/common/trunk/hadoop-mapreduce-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/pom.xml
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/jobhistory/JobHistoryEventHandler.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/jobhistory/TestJobHistoryEventHandler.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapreduce/v2/jobhistory/JobHistoryUtils.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/test/java/org/apache/hadoop/mapreduce/v2/hs/TestHistoryFileManager.java
, FAILURE: Integrated in Hadoop-Hdfs-trunk #1839 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/1839/])
MAPREDUCE-6032. Fix the non-unicode character in the change log in CHANGES.txt. (zjshen: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1618270)
* /hadoop/common/trunk/hadoop-mapreduce-project/CHANGES.txt
MAPREDUCE-6032. Made MR jobs write job history files on the default FS when the current contextâ€™s FS is different. Contributed by Benjamin Zhitomirsky. (zjshen: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1618269)
* /hadoop/common/trunk/hadoop-mapreduce-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/pom.xml
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/jobhistory/JobHistoryEventHandler.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/jobhistory/TestJobHistoryEventHandler.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapreduce/v2/jobhistory/JobHistoryUtils.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/test/java/org/apache/hadoop/mapreduce/v2/hs/TestHistoryFileManager.java
]