[Sample client log:

{noformat}
$ mapred job -kill job_1379617216746_0084
13/09/26 14:38:46 INFO client.RMProxy: Connecting to ResourceManager at xx/xx:xx
13/09/26 14:38:48 INFO mapred.ClientServiceDelegate: Application state is completed. FinalApplicationStatus=KILLED. Redirecting to job history server
Exception in thread "main" java.lang.NullPointerException
 at org.apache.hadoop.mapred.YARNRunner.killJob(YARNRunner.java:563)
 at org.apache.hadoop.mapreduce.Job.killJob(Job.java:624)
 at org.apache.hadoop.mapreduce.tools.CLI.run(CLI.java:299)
 at org.apache.hadoop.util.ToolRunner.run(ToolRunner.java:70)
 at org.apache.hadoop.util.ToolRunner.run(ToolRunner.java:84)
 at org.apache.hadoop.mapred.JobClient.main(JobClient.java:1231)
{noformat}

I believe the AM is active and the RM reports the app is running when the client first tries to obtain status to verify the job exists.  However before YARNRunner.killJob is called by the client the AM unregisters and exits but fails to generate history data for the history server.  Subsequent attempts to obtain job status will then be redirected to the history server and it will return null since it does not know about the job.

YARNRunner.killJob needs to check for a null result each time it tries to obtain the job's current status., There are 2 solution we can solve.
1. Just have null check and return with log warning "No Jobs to kill".
    JobStatus status = clientCache.getClient(arg0).getJobStatus(arg0);
    if (status == null) {
      LOG.warn("Attempting to Kill Job which is Not Running.");
      return;
    }

2. Maintain consistency acros other API's such as org.apache.hadoop.mapreduce.Job.updateStatus().
    JobStatus status = clientCache.getClient(arg0).getJobStatus(arg0);
    if (status == null) {
      throw new IOException("Job status not available ");
    } 

I prefer to have 2nd, let client handle this exception., Attaching a patch for 2nd. Please review.. , {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12630903/MAPREDUCE-5542.1.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:red}-1 core tests{color}.  The patch failed these unit tests in hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient:

                  org.apache.hadoop.mapreduce.v2.TestMRJobs

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4371//testReport/
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4371//console

This message is automatically generated., Attaching same patch with different id for kickoff HadoopQA., {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12635070/MAPREDUCE-5542.2.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4436//testReport/
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4436//console

This message is automatically generated., The patch misses another place where we are checking the job status and that's in the subsequent while loop waiting for the AM to quit.  We also need to handle null status results there.

I'm torn on what to do about a null status wrt. killing the job.  On one hand I can see being consistent with updateStatus() and throwing when we get a null.  On the other hand we know a null status means the job is either not know to the RM (therefore probably not running) or we were redirected to the history server because the RM thinks the job's not running and the history server doesn't know about the job (probably because it crashed badly or was killed by YARN and didn't copy the job history).  In either case the job isn't running, and therefore it seems silly to complain that we can't get status because it's not running as we're trying to get it to stop running., May be we should keep shuttling between AM/RM and JHS to find out *some* status of the job before we try to kill it.

Cancelling patch given a missed check and because of unresolved discussion., We've hit this as well. Would be good to see some progress here., Apoligies [~jlowe] [~vinodkv] [~jira.shegalov] for not looking back into jira after long time.

I agree, before kill job need to get some state from AM/RM/HistoryServer. I did some more investigations on this issue
* Job Status can be null on below cases.
** MRAppMaster is fail to write history and JobClient is redirected to historyserver to get job status.
** JobClient has different done/done-intermediate directory location from historyserver. Jobcilent is redirected to historyserver to get job status.

And job status is null means it is getting null status from HistoryServer only. If null is set from MRAppMaster then JobClient is accessing unauthorised MRAppMaster. Better getting status from RM when it hit null that ensures job is finished with succeeded/killed/failed state.
, I  updated the patch. Please review..

Approach I followed is whenever job status is null check the job status only in RM for finished or not.If finished/killed/failed, and return silently. I consider the scenario where if application state is not finished/killed/failed , then stil potentially throw NPE from patch. CMIAW, but here I do not think the scenario where JobStatus is null and application is still running!!??

, {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12674470/MAPREDUCE-5542.3.patch
  against trunk revision e8a31f2.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

        {color:red}-1 release audit{color}.  The applied patch generated 1 release audit warnings.

    {color:red}-1 core tests{color}.  The patch failed these unit tests in hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient:

                  org.apache.hadoop.mapred.pipes.TestPipeApplication

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4956//testReport/
Release audit warnings: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4956//artifact/patchprocess/patchReleaseAuditProblems.txt
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4956//console

This message is automatically generated., Thanks for updating the patch, Rohith!  Comments:

Is there a scenario where we can still get an NPE?  I don't think it's supposed to happen, but I'm wondering if the app is still running and we send it a bad jobID or for some reason it can't lookup the job ID then YARN will think it's running and we still will NPE on the null status.  Wondering if we should just simplify this to if the status is null and YARN thinks the application is running then we should kill the app via YARN rather than via the AM.  In other words, if status==null then we either doing nothing (YARN says app is finished) or we kill it via the RM (YARN says app is not finished).

Nit: The isApplicationFinished method name is confusing since it can return true for applications that are finished and happen to have a non-null job status.

Nit: The applicationStatus local in isApplicationFinished makes the code harder to read, as it is never assigned except during initialization, and we return the NOT of it in some places.  Would be much easier to read if we just used literal true/false instead of a proxy variable that's never updated to anything but false., Thanks Jasown Lowe for your review and comments..

bq. Is there a scenario where we can still get an NPE? I don't think it's supposed to happen
 I had doubt only on this case "for some reason it can't lookup the job ID then YARN will think it's running and we still will NPE on the null status". This I will update in patch.

bq. but I'm wondering if the app is still running and we send it a bad jobID. 
IIUC, here JobStatus wont be null because before sending killJob, Job State should be running.

bq. The isApplicationFinished method name is confusing since it can return true for applications that are finished and happen to have a non-null job status
Agree

bq. The applicationStatus local in isApplicationFinished makes the code harder to read
Agree

I will update patch soon., I updated the patch. Please review., {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12674706/MAPREDUCE-5542.4.patch
  against trunk revision 5faaba0.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4962//testReport/
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4962//console

This message is automatically generated., Thanks for updating the patch.  Looks better, but I noticed something I should have before.  After sending the kill directive via the MR client the code then loops as long as the job state isn't KILLED.  However if the job is finishing just as we send the kill then the job may finish in a non-killed state.  I think the client would then loop until the full timeout before returning.  Instead of checking for not KILLED we should be checking for a non-terminal state instead (e.g. != KILLED, SUCCEEDED, or FAILED).  We can make an EnumSet of the terminal job states and check if the status is not in that set., bq. the client would then loop until the full timeout before returning.
I see. Agree. This can be improved., Thanks for updating the patch.  The logic in the new isJobFinished does not look correct.  isJobFinished will always return true as currently written.  Also the name doesn't seem to match how it's being used.  The while condition now reads that it should keep looping while the job is finished, but we want to loop while the job is still active.
, {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12675287/MAPREDUCE-5542.5.patch
  against trunk revision 2894433.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:red}-1 core tests{color}.  The patch failed these unit tests in hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient:

                  org.apache.hadoop.mapred.TestClusterMRNotification

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4968//testReport/
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4968//console

This message is automatically generated., bq. Also the name doesn't seem to match how it's being used
Agree.. 

bq. The logic in the new isJobFinished does not look correct. isJobFinished will always return true as currently written
I think because of method name,it was being confused. But IIUC , It will return true if Job is not in terminal states(KILLED/FAILED/SUCCEDED). Once Job reaches terminal states(killed/failed/succeded), it return false.

bq. but we want to loop while the job is still active.
is below code OK?
{code}
  private boolean isJobInTerminalState(JobStatus status) {
    return status.getState() == JobStatus.State.KILLED
        || status.getState() == JobStatus.State.FAILED
        || status.getState() == JobStatus.State.SUCCEEDED;
  }

public void killJob(JobID arg0) throws IOException, InterruptedException {
//
   while ((currentTimeMillis < timeKillIssued + 10000L)
          && (!isJobInTerminalState(status))) {
// inside while loop
  }

if (status != null && !isJobInTerminalState(status)) {
      killApplication(appId);
    }
}
{code}, bq. I think because of method name,it was being confused. But IIUC , It will return true if Job is not in terminal states(KILLED/FAILED/SUCCEDED). Once Job reaches terminal states(killed/failed/succeded), it return false.

The original isJobFinished method in the patch will always return true because it is checking if a value is not equal to three different values and OR-ing the results.  Any single value will always be unequal to at least two of the three values, so it will always return true.  The original method should have used && instead of || to return false if the job was finished and true if it wasn't (despite the name).

bq. is below code OK?

Yes, that code should do what we want.  A small nit that the parentheses around !isJobInTerminalState just adds noise to the line., I updated patch addressing above comments, please review.., {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12675500/MAPREDUCE-5542.6.patch
  against trunk revision abae63c.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4969//testReport/
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4969//console

This message is automatically generated., +1 for the latest patch.  Committing this.
, Thanks, Rohith!  I committed this to trunk, branch-2, and branch-2.6., FAILURE: Integrated in Hadoop-trunk-Commit #6283 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/6283/])
MAPREDUCE-5542. Killing a job just as it finishes can generate an NPE in client. Contributed by Rohith (jlowe: rev 209b1699fcd150676d4cc47e8e817796086c1986)
* hadoop-mapreduce-project/CHANGES.txt
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/main/java/org/apache/hadoop/mapred/YARNRunner.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/test/java/org/apache/hadoop/mapred/TestYARNRunner.java
, Thanks Jason Lowe for review and committing patch:-), SUCCESS: Integrated in Hadoop-Yarn-trunk #716 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk/716/])
MAPREDUCE-5542. Killing a job just as it finishes can generate an NPE in client. Contributed by Rohith (jlowe: rev 209b1699fcd150676d4cc47e8e817796086c1986)
* hadoop-mapreduce-project/CHANGES.txt
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/test/java/org/apache/hadoop/mapred/TestYARNRunner.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/main/java/org/apache/hadoop/mapred/YARNRunner.java
, FAILURE: Integrated in Hadoop-Hdfs-trunk #1905 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/1905/])
MAPREDUCE-5542. Killing a job just as it finishes can generate an NPE in client. Contributed by Rohith (jlowe: rev 209b1699fcd150676d4cc47e8e817796086c1986)
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/test/java/org/apache/hadoop/mapred/TestYARNRunner.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/main/java/org/apache/hadoop/mapred/YARNRunner.java
* hadoop-mapreduce-project/CHANGES.txt
, FAILURE: Integrated in Hadoop-Mapreduce-trunk #1930 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/1930/])
MAPREDUCE-5542. Killing a job just as it finishes can generate an NPE in client. Contributed by Rohith (jlowe: rev 209b1699fcd150676d4cc47e8e817796086c1986)
* hadoop-mapreduce-project/CHANGES.txt
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/test/java/org/apache/hadoop/mapred/TestYARNRunner.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/main/java/org/apache/hadoop/mapred/YARNRunner.java
]