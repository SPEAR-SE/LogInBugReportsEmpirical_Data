[I think it's worth including a magic number at the head of the response, too, for good luck and an extra verification., @Todd, which class should I look at here?

the content-length header is what should really be set, as that allows the recipient to recognise another failure mode.

# the output servlet successfully writes all the data
# it calls flush() to flush the buffer to the socket stream.
# the connection goes down through the miracle that is TCP/IP
# the recipient sees the end of the HTTP response, and assumes that the entire dataset has arrived safely.
# The error propagates.

There are also risks of corruption in the payload that neither the Ether or TCP protocols pick up on; every layer has a flaw.

See
 * Loughran 2011, _did you really want that data_ [Presentation|http://www.slideshare.net/steve_l/did-you-reallywantthatdata]
 * Stone & Partridge 2000, _When The CRC and TCP Checksum Disagree_ [Paper|http://www-static.cc.gatech.edu/classes/AY2002/cs8803d_spring/papers/checksum.pdf]

Packet corruption is more likely long-haul than in-datacentre, so I'm not going to advocate the Content-MD5 overhead, but content-length can only be a good thing, provide the response length is known in advance (which it never is with JSP pages, but that's a separate issue), Hi Steve. We already do compute a checksum of the data, but the checksum comes at the end of the file. It would be better if the checksums were interleaved periodically, but that's a much larger change.

The issue is that, since the checksum comes at the end, in the case of shuffleToMemory, we are trying to decompress data that hasn't been validated -- and hence the compressor can end up throwing weird RTEs. See MAPREDUCE-3993 for the other half of this solution., Todd 
 
There's actually some good arguments for putting the checksum at the end anyway; Stone at al. 1998 cover this in _[Performance of checksums and CRC's over real data|ftp://cs.bell-labs.com/who/mbgreen/papers/ton98.pdf]_ -it looks at the problem of packet splicing of TCP packets -and shows that if two packets get spliced together, the TCP header may not detect this.

That's specific to TCP & IP headers, both of which are weak, and a packet-layer network where splicing can occur; I can't see it happening at the HTTP level without a very confused proxy getting in the way.

Header checksums wouldn't catch the corruption midway through a packet, nor would length headers.

If the crcs where known in advance -i.e. could be picked up from the filesystem .crc. files, a custom header could include them all as a list, which could then be used as a substitute for interleaving. That requires them to be known before streaming the data, and the CRC algorithm to be the same at both ends, which may not work with the x86-specific CRC work in trunk., Simple patch against trunk. I haven't tried this on an MR2 cluster, but I tested the equivalent 0.20-based patch. Unfortunately it's difficult to engineer a unit test case for this.

I'll upload a patch for branch-1 as well if this is accepted., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12518085/mr-3992.txt
  against trunk revision .

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 eclipse:eclipse.  The patch built with eclipse:eclipse.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed unit tests in .

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/2039//testReport/
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/2039//console

This message is automatically generated., +1
* I understand why there aren't tests here, it's very hard to set up a test for this.
* I've reviewed the code and it looks fairly straightforward -bails out early on a reponse != 200.
* If there's no error code checking in one part of the system, there always the risk the same thing has happened elsewhere, which is something that we need to keep an eye out for.
, Committed to trunk and 23. Leaving open while I work on the branch-1 patch., Integrated in Hadoop-Common-trunk-Commit #1906 (See [https://builds.apache.org/job/Hadoop-Common-trunk-Commit/1906/])
    MAPREDUCE-3992. Reduce fetcher doesn't verify HTTP status code of response. Contributed by Todd Lipcon. (Revision 1302754)

     Result = SUCCESS
todd : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1302754
Files : 
* /hadoop/common/trunk/hadoop-mapreduce-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/Fetcher.java
, Integrated in Hadoop-Common-0.23-Commit #707 (See [https://builds.apache.org/job/Hadoop-Common-0.23-Commit/707/])
    MAPREDUCE-3992. Reduce fetcher doesn't verify HTTP status code of response. Contributed by Todd Lipcon. (Revision 1302755)

     Result = SUCCESS
todd : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1302755
Files : 
* /hadoop/common/branches/branch-0.23/hadoop-mapreduce-project/CHANGES.txt
* /hadoop/common/branches/branch-0.23/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/Fetcher.java
, Integrated in Hadoop-Hdfs-trunk-Commit #1980 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk-Commit/1980/])
    MAPREDUCE-3992. Reduce fetcher doesn't verify HTTP status code of response. Contributed by Todd Lipcon. (Revision 1302754)

     Result = SUCCESS
todd : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1302754
Files : 
* /hadoop/common/trunk/hadoop-mapreduce-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/Fetcher.java
, Integrated in Hadoop-Hdfs-0.23-Commit #698 (See [https://builds.apache.org/job/Hadoop-Hdfs-0.23-Commit/698/])
    MAPREDUCE-3992. Reduce fetcher doesn't verify HTTP status code of response. Contributed by Todd Lipcon. (Revision 1302755)

     Result = SUCCESS
todd : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1302755
Files : 
* /hadoop/common/branches/branch-0.23/hadoop-mapreduce-project/CHANGES.txt
* /hadoop/common/branches/branch-0.23/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/Fetcher.java
, Here's a branch-1 patch. Running tests locally., Integrated in Hadoop-Mapreduce-0.23-Commit #714 (See [https://builds.apache.org/job/Hadoop-Mapreduce-0.23-Commit/714/])
    MAPREDUCE-3992. Reduce fetcher doesn't verify HTTP status code of response. Contributed by Todd Lipcon. (Revision 1302755)

     Result = ABORTED
todd : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1302755
Files : 
* /hadoop/common/branches/branch-0.23/hadoop-mapreduce-project/CHANGES.txt
* /hadoop/common/branches/branch-0.23/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/Fetcher.java
, Integrated in Hadoop-Mapreduce-trunk-Commit #1914 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk-Commit/1914/])
    MAPREDUCE-3992. Reduce fetcher doesn't verify HTTP status code of response. Contributed by Todd Lipcon. (Revision 1302754)

     Result = ABORTED
todd : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1302754
Files : 
* /hadoop/common/trunk/hadoop-mapreduce-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/Fetcher.java
, branch-1 MR tests passed OK with this change., Integrated in Hadoop-Mapreduce-0.23-Build #231 (See [https://builds.apache.org/job/Hadoop-Mapreduce-0.23-Build/231/])
    MAPREDUCE-3992. Reduce fetcher doesn't verify HTTP status code of response. Contributed by Todd Lipcon. (Revision 1302755)

     Result = FAILURE
todd : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1302755
Files : 
* /hadoop/common/branches/branch-0.23/hadoop-mapreduce-project/CHANGES.txt
* /hadoop/common/branches/branch-0.23/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/Fetcher.java
, Integrated in Hadoop-Mapreduce-trunk #1025 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/1025/])
    MAPREDUCE-3992. Reduce fetcher doesn't verify HTTP status code of response. Contributed by Todd Lipcon. (Revision 1302754)

     Result = SUCCESS
todd : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1302754
Files : 
* /hadoop/common/trunk/hadoop-mapreduce-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/Fetcher.java
, +1 for the patch for branch-1 too., Committed to branch-1, I just pulled this into branch-0.23 too.  Thanks for the fix Todd., Integrated in Hadoop-Hdfs-0.23-Build #310 (See [https://builds.apache.org/job/Hadoop-Hdfs-0.23-Build/310/])
    svn merge -c 1302754 FIXES: MAPREDUCE-3992. Reduce fetcher doesn't verify HTTP status code of response. Contributed by Todd Lipcon. (Revision 1359708)

     Result = UNSTABLE
bobby : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1359708
Files : 
* /hadoop/common/branches/branch-0.23/hadoop-mapreduce-project/CHANGES.txt
* /hadoop/common/branches/branch-0.23/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/Fetcher.java
]