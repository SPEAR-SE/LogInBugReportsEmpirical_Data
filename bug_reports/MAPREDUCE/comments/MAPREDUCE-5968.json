[{color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12655286/MAPREDUCE-5968.branch1.patch
  against trunk revision .

    {color:red}-1 patch{color}.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4729//console

This message is automatically generated., Add a unit test to verify the workDir is removed using a Test File System to create a fake IOException to trigger this error condition in this issue. Without the fix in downloadCacheObject, the unit test will fail., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12658808/MAPREDUCE-5968.branch1.patch
  against trunk revision .

    {color:red}-1 patch{color}.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4779//console

This message is automatically generated., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12658867/MAPREDUCE-5968.branch1.patch
  against trunk revision .

    {color:red}-1 patch{color}.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4780//console

This message is automatically generated., Patch looks mostly good. A couple of minor comments: 
# Do we need to set delWorkDir to false at both places? The latter is always executed and the former can be skipped.
{code}
+      // promote the output to the final location
+      if (!localFs.rename(workDir, finalDir)) {
+        localFs.delete(workDir, true);
+        delWorkDir = false;
+        if (!localFs.exists(finalDir)) {
+          throw new IOException("Failed to promote distributed cache object " +
+                                workDir + " to " + finalDir);
+        }
+        // someone else promoted first
+        return 0;
+      }
+      delWorkDir = false;
{code}
# I understand the "-work-" comes from how work directory name is generated. Can we create the work directory name in a method that can be accessed from both the production and test code so the test continues to be useful in the future. 
{code}
+    String workDir = destination.getParent().toString() + "-work-";
{code}, thanks for the comments. these are good findings.
1. Based on your suggestion, I can optimize the code: remove delWorkDir, check whether it exist before delete the work dir in final block.
2. define "-work-"  as a constant in the class, so it can be reused by both  production and test code.

, Hi Karthik,
I attached new patch to address these issues. please review it.

thanks
zhihai

, I just upload a new patch MAPREDUCE-5968.branch1_new1.patch  to remove the duplicate localFs.delete(workDir, true);. 
thanks Karthik for your review. , {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12659787/MAPREDUCE-5968.branch1_new1.patch
  against trunk revision .

    {color:red}-1 patch{color}.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4787//console

This message is automatically generated., Latest patch looks good to me. +1. Committing this., Thanks for the contribution, [~zxu]. Just committed this to branch-1. ]