[Actually, I think this is a bug but not quite how I described it. If the flush fails, it means we were trying to write data into a streaming executable that didn't consume all of its input.

I don't know what the expected behavior is here. Right now, the behavior is that we stop consuming its output, but the task still succeeds so long as the exit code is 0. I think this is incorrect. We should either entirely fail the task regardless of exit code, or we should consume the rest of its output., quickly built a testcase for this, though no patch yet - the code is somewhat spaghetti., This is patch to resolve the issue with IOException. I've moved block "clientOut_.flush() clientOut_.close()" to separate block with "try catch". , "PipeMapRed.java.patch" - Tested, seems everything works ok, but anybody please review my patch. ]