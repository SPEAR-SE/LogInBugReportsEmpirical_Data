[CombineFileRecordReader.initNextRecordReader should report progress as it moves to the next file to indicate that the task is making progress even though no records are being read.  Some input formats already report progress when their record reader is created, but adding a progress indicator here will catch the cases where the underlying record reader does not report progress upon construction., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12622442/MR-5670.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 2 new or modified test files.

      {color:red}-1 javac{color}.  The applied patch generated 1547 javac compiler warnings (more than the trunk's current 1545 warnings).

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4313//testReport/
Javac warnings: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4313//artifact/trunk/patchprocess/diffJavacWarnings.txt
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4313//console

This message is automatically generated., {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12622452/MR-5670.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 2 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4314//testReport/
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4314//console

This message is automatically generated., Thanks for picking this up, Chen!  Comments on the patch:

* org.apache.hadoop.mapred.lib.db.TestCombineFileRecordReader is in the wrong package, should be org.apache.hadoop.mapred.lib.TestCombineFileRecordReader
* There's an unused Mockito import in one of the tests, and it seems like Mockito could save quite a bit of test code.  A mocked reporter with verify(mockReporter).progress() to verify the progress method was called would accomplish the same with much less code.  Did that not work for some reason?  The unused import implies that approach was probably attempted, so curious if that's the case why it didn't work out.
* The original bug involves a bunch of empty files, so the test doesn't need to write any data to the test files and all the lengths should be zero.  Bonus points if the test calls next() on the record reader, verifies it returns false and verifies progress was called the correct number of times.
* There's an unnecessary try...finally block in testInitNextRecordReader, Hi [~jlowe]
  I followed your suggestion and make corresponding changes in the v2 patch:
     
   {quote} org.apache.hadoop.mapred.lib.db.TestCombineFileRecordReader is in the wrong package, should be org.apache.hadoop.mapred.lib.TestCombineFileRecordReader {quote}
    TestCombineFileRecordReader has been moved under org.apache.hadoop.mapred.lib;
    {quote}There's an unused Mockito import in one of the tests, and it seems like Mockito could save quite a bit of test code. A mocked reporter with verify(mockReporter).progress() to verify the progress method was called would accomplish the same with much less code. Did that not work for some reason? The unused import implies that approach was probably attempted, so curious if that's the case why it didn't work out. {quote}
    Mockito is used and previous Reporter4Test class has been removed.
    {quote} The original bug involves a bunch of empty files, so the test doesn't need to write any data to the test files and all the lengths should be zero. Bonus points if the test calls next() on the record reader, verifies it returns false and verifies progress was called the correct number of times.
{quote}
     The v2 patch will verify whether reporter.progress() is called right after the instantiation of CombineFileRecordReader. I also created 3 empty files in test directory to verify whether reporter.progress() is called exactly 3 times after processing these 3 empty files. These 3 files will be recycled after test is done.   
   {quote} There's an unnecessary try...finally block in testInitNextRecordReader {quote}
     "try...finally" block is used for recycling files created during the test process.
, {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12624440/MR-5670v2.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 2 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4335//testReport/
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4335//console

This message is automatically generated., Thanks for updating the patch, looking better.  Couple of things on the latest patch:

* We should not loop for the record reader next() to return false.  Since we explicitly set up a bunch of empty files it should return false with only one invocation (we should assert for this), and progress should still be called a total of 3 times.  If it somehow doesn't return false in the first invocation then something is wrong, and continuing to loop is inviting a hung test if for some reason it never does return false. ;-)
* outDir should be unique between the two tests or we risk having them collide if the tests are run in parallel.  I suggest something like TestCombineFileRecordReader.class.getName() which will be different between the two tests.
* Rather than loop to explicitly delete the individual files, we should just call FileUtil.fullyDelete on outDir., Hi [~jlowe]
 
Patch has been updated following your suggestion., {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12625094/MR-5670v3.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 2 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4338//testReport/
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4338//console

This message is automatically generated., +1 lgtm.  Committing this., Thanks, Chen!  I committed this to trunk and branch-2., SUCCESS: Integrated in Hadoop-trunk-Commit #5166 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/5166/])
MAPREDUCE-5670. CombineFileRecordReader should report progress when moving to the next file. Contributed by Chen He (jlowe: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1568118)
* /hadoop/common/trunk/hadoop-mapreduce-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/lib/CombineFileRecordReader.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/input/CombineFileRecordReader.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/test/java/org/apache/hadoop/mapred/lib/TestCombineFileRecordReader.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/test/java/org/apache/hadoop/mapreduce/lib/input/TestCombineFileRecordReader.java
, SUCCESS: Integrated in Hadoop-Yarn-trunk #481 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk/481/])
MAPREDUCE-5670. CombineFileRecordReader should report progress when moving to the next file. Contributed by Chen He (jlowe: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1568118)
* /hadoop/common/trunk/hadoop-mapreduce-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/lib/CombineFileRecordReader.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/input/CombineFileRecordReader.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/test/java/org/apache/hadoop/mapred/lib/TestCombineFileRecordReader.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/test/java/org/apache/hadoop/mapreduce/lib/input/TestCombineFileRecordReader.java
, FAILURE: Integrated in Hadoop-Hdfs-trunk #1673 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/1673/])
MAPREDUCE-5670. CombineFileRecordReader should report progress when moving to the next file. Contributed by Chen He (jlowe: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1568118)
* /hadoop/common/trunk/hadoop-mapreduce-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/lib/CombineFileRecordReader.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/input/CombineFileRecordReader.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/test/java/org/apache/hadoop/mapred/lib/TestCombineFileRecordReader.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/test/java/org/apache/hadoop/mapreduce/lib/input/TestCombineFileRecordReader.java
, SUCCESS: Integrated in Hadoop-Mapreduce-trunk #1698 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/1698/])
MAPREDUCE-5670. CombineFileRecordReader should report progress when moving to the next file. Contributed by Chen He (jlowe: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1568118)
* /hadoop/common/trunk/hadoop-mapreduce-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/lib/CombineFileRecordReader.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/input/CombineFileRecordReader.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/test/java/org/apache/hadoop/mapred/lib/TestCombineFileRecordReader.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/test/java/org/apache/hadoop/mapreduce/lib/input/TestCombineFileRecordReader.java
]