[This is only a problem on Windows.  It doesn't happen on Linux.  Here is a description of how this happens.

In {{MRJobConfig}}, the default value of {{mapreduce.admin.user.env}} is defined to set the PATH environment variable on Windows so that tasks will be able to find and load hadoop.dll.

{code}
  public final String DEFAULT_MAPRED_ADMIN_USER_ENV = 
      Shell.WINDOWS ? 
          "PATH=%PATH%;%HADOOP_COMMON_HOME%\\bin":
          "LD_LIBRARY_PATH=$HADOOP_COMMON_HOME/lib/native";
{code}

{{TaskAttemptImpl#createCommonContainerLaunchContext}} sets up the base environment.  As part of that, it includes picking up {{mapreduce.admin.user.env}}.  This is the point where the behavior diverges from Linux.  On Linux, the common context won't have a PATH.  On Windows, the common context will have a PATH.

{code}
    // Add the env variables passed by the admin
    MRApps.setEnvFromInputString(
        environment, 
        conf.get(
            MRJobConfig.MAPRED_ADMIN_USER_ENV, 
            MRJobConfig.DEFAULT_MAPRED_ADMIN_USER_ENV), conf
        );
{code}

Then, at task launch time, we end up setting PATH again via a call to {{TaskAttemptImpl#createContainerLaunchContext}} -> {{MapReduceChildJVM#setVMEnv}} -> {{MRApps#setEnvFromInputString}} -> {{Apps#setEnvFromInputString}}.  This uses {{Apps#addToEnvironment}} to set the new value in the environment, and the logic of this method appends to existing values:

{code}
  @Public
  @Unstable
  public static void addToEnvironment(
      Map<String, String> environment,
      String variable, String value, String classPathSeparator) {
    String val = environment.get(variable);
    if (val == null) {
      val = value;
    } else {
      val = val + classPathSeparator + value;
    }
    environment.put(StringInterner.weakIntern(variable), 
        StringInterner.weakIntern(val));
  }
{code}

I haven't been able to come up with a clean fix for this.  We can't change the default value of {{mapreduce.admin.user.env}}, because tasks are dependent on it to find the native code (an absolute must on Windows).  We can't drop the appending behavior, because there are valid use cases dependent on it.  Adding a special case for Windows + PATH seems hacky.  Does anyone else have ideas?

Since this is ultimately harmless, we might consider simply relaxing the assertion in {{TestMiniMRChildTask}}.  I'm attaching a patch that does that.  This passes on Mac and Windows., I'm going to resolve this as duplicate against MAPREDUCE-5642 and move discussion there., {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12640886/MAPREDUCE-5850.1.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4536//testReport/
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4536//console

This message is automatically generated.]