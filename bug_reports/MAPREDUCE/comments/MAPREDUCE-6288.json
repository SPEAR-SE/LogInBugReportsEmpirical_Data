[Looks like it's this part of the patch from MAPREDUCE-5875:
{code:java}
--- a/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/Cluster.java
+++ b/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/Cluster.java
@@ -182,15 +182,15 @@ public FileSystem run() throws IOException, InterruptedException {
   public Job getJob(JobID jobId) throws IOException, InterruptedException {
     JobStatus status = client.getJobStatus(jobId);
     if (status != null) {
-      JobConf conf;
+      final JobConf conf = new JobConf();
+      final Path jobPath = new Path(client.getFilesystemName(),
+          status.getJobFile());
+      final FileSystem fs = FileSystem.get(jobPath.toUri(), getConf());
       try {
-        conf = new JobConf(status.getJobFile());
-      } catch (RuntimeException ex) {
-        // If job file doesn't exist it means we can't find the job
-        if (ex.getCause() instanceof FileNotFoundException) {
-          return null;
-        } else {
-          throw ex;
+        conf.addResource(fs.open(jobPath), jobPath.toString());
+      } catch (FileNotFoundException fnf) {
+        if (LOG.isWarnEnabled()) {
+          LOG.warn("Job conf missing on cluster", fnf);
         }
       }
       return Job.getInstance(this, status, conf);
{code}
the old code {{new JobConf(status.getJobFile());}}, seems like it wasn't working "correctly" in that it didn't actually load the jobconf file from HDFS, which would have triggered this same Exception. The new code does this correctly, and gets the Exception because the parent directories of {{/user/history/done/2015/03/22/000000/job_1427080398288_0001_conf.xml}} need to be executable by the user. Changing the permissions of the parents to have world +x confirms this., The patch simply changes the permissions for the directories to have world executable (771 instead of 770).  I think writing a unit test for this issue might be tricky, but I did verify in a cluster that it works correctly., [~jira.shegalov], can you take a look?, {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12706783/MAPREDUCE-6288.patch
  against trunk revision 2c238ae.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in .

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/5329//testReport/
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/5329//console

This message is automatically generated., [~kasha], I am attaching rebased MAPREDUCE-5875.v8 as MAPREDUCE-6288-gera-001.patch  that I believe we actually wanted to commit. It worked around the directory list permission issue by using the rest API.

[~rkanter], It would be good if someone with more background knowledge could chime in as to why the permissions are restrictive. I presume that the idea was to avoid users to list jobs by other users, because the job name can be considered sensitive., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12707174/MAPREDUCE-6288-gera-001.patch
  against trunk revision b6dea97.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:red}-1 core tests{color}.  The patch failed these unit tests in hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient:

                  org.apache.hadoop.mapred.TestMiniMRWithDFSWithDistinctUsers
                  org.apache.hadoop.mapred.TestMerge
                  org.apache.hadoop.mapred.TestFixedLengthInputFormat
                  org.apache.hadoop.ipc.TestMRCJCSocketFactory

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/5335//testReport/
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/5335//console

This message is automatically generated., [~jlowe], [~revans2], is there a reason for not making history directories world-executable? 

If it is okay to make them executable, I would prefer the smaller patch that just makes them executable. If not, [~jira.shegalov] - will you able to upload a diff based on trunk? 

, I have not been involved with MR for quite a while so please correct me if I get anything wrong, I probably will.

first of all.  In the patch loadFromHistory tries to grab the job conf from the job history server using a restful API.  Unless things have changed you have no way to know if you have the proper credentials to access an HTTP endpoint, because authentication for HTTP in hadoop, except for web HDFS, is pluggable.  Second on several failures it just logs an INFO or possibly a WARN.  That is not what I would expect if I tried to load a config from the history server and could not. Also the documentation does not indicate any of this.  If you need to get the config from the history server make a new RPC call to do it, because REST is not the correct way.

getConfPathFromHisotyDir is misspelled. but even the premise of it feels very wrong, except possibly in the case of an admin.  The client should have no knowledge of the internal workings of the history server.  There are defined interfaces, the dropbox directory for finished job history files and the rpc and REST APIs.  If the client assumes that it knows how things are structured we will never be able to maintain backwards compatibility and switch the backend to the timeline server.  What is more the permissions are maintained for the history server, by the history server.  It is the only one that has access to the files, because if anyone could read them that would negate the point of security and ACLs, hence no execute permissions, and if you got past that the files are not world readable for the same reasons.

I have not read the patch in depth, nor the existing code, because it has been too long, but for me personally I would much rather revert  MAPREDUCE-5875 until we have a clean solution that works with security enabled.  A blocker has prescience over a major bug in my opinion, especially when the patch and the current code both ignore some cases where they are unable to load the conf, and just go on.  To me that says loading the conf is not important enough to make sure it always happens. 
, bq. is there a reason for not making history directories world-executable?
History files are completely owned by MRJobHistoryServer and are only accessible through RPC and web-service interfaces together with auth + authz checks. The file-names do contain a lot of information some of which is at times considered sensitive. So we cannot change permissions like this.

bq. I have not read the patch in depth, nor the existing code, because it has been too long, but for me personally I would much rather revert MAPREDUCE-5875 until we have a clean solution that works with security enabled.
I am also catching up on MAPREDUCE-5875, but I second this proposal.
, Here's some historical context, and I'd need your help to understand what transpired so far in 2.7
 - The original reason we added Counter limits (in Hadoop 1.x) was to avoid users from overwhelming system components like JobTracker, JobHistoryServer heaps and TT -> JT communication
 - With MapReduce on YARN, it is largely applicable only to (1) Task JVMs, Task -> AM communication, AM heap, client calls from AM and (2) JHS heap and client calls to JHS.

I am not wild on being very consistent on (1) as the worst that can happen is an impact on the individual job. But it's okay to do a best effort here, which seems to be the goal of MAPREDUCE-5875.

For (2)
 - We simply cannot blow up JHS heap just because a single user overrode his/her limits to be astronomical. We need a global limit on JHS that reigns over everything else.
 - W.r.t client calls to JHS, it's okay to either (a) not consistently apply the user's limit or (b) apply it but only while streaming data from JHS to the client. In (a) or (b), I don't see why we need to load user's conf file., bq. History files are completely owned by MRJobHistoryServer and are only accessible through RPC and web-service interfaces together with auth + authz checks. The file-names do contain a lot of information some of which is at times considered sensitive. So we cannot change permissions like this.

I understand the file names and files themselves could contain sensitive information. IIRR, making the parent directories world-*executable* doesn't let anyone read the contents. 

In addition to Limits themselves, MAPREDUCE-5875 fixes another issue with configuration. [~jarcec]'s email with details: 
{code}
Configuration configuration = new Configuration();
configuration.set(“jarcec”, “feels awesome”);
job.submit();

RunningJob runningJob = jobClient.getJob(job.getJobID().toString())
runningJob.getConfiguration().get(“jarcec”);
{code}
The problem is that the configuration object returned by RunningJob does not contain the property “jarcec” that I’ve originally stored in the job, even though that he properly is available in the job itself (e.g. I can see it mapper/reducer/input format/output format)., I can confirm that MAPREDUCE-5875 fixed the issue that I was seeing with RunningJob returning wrong configuration object that was missing properties that I've configured. We will need functionality to retrieve the configuration back in SQOOP project., I can confirm that MAPREDUCE-5875 fixed the issue that I was seeing with RunningJob returning wrong configuration object that was missing properties that I've configured. We will need functionality to retrieve the configuration back in SQOOP project., [~kasha] is correct; executable permissions alone don't let you list the contents of a directory., Thanks for the confirmation on why you needed to load the configuration file - [~kasha] / [~jarcec].

With that out of the way, as Bobby says, if we want to read the config, an API is the right way. The client shouldn't be assume the directory structure of the files owned by the server. Gera's REST patch is better than messing with permissions to me, but Bobby's reservation about that seamlessly working in secure clusters remains.

I quickly checked, and there seems be another not-so-minor problem of this patch not working for existing clusters without needing admins to explicitly go and change the permissions on the directory. History server doesn't seem to correct the permissions if the directory already exists., [~kasha],

No one doubts that MAPREDUCE-5875 fixed an issue that has existed in MRv2 since the beginning.  It is mostly a question of priorities.  This JIRA with mapred job -status failing horribly is considered by the filer to be a BLOCKER.  MAPREDUCE-5875 that introduced this bug was only considered to be MAJOR.  I am biased because I run hadoop with security and would not be able to deploy the current codebase because of this issue. For me I would rather get the code base back into a stable place quickly, and then we can think about the correct way to re-implement MAPREDUCE-5875 without this issue.  If you have a good solution/patch to the problem now then I would be fine with just merging that in, but the current proposed solution does not actually fix the problem on a properly secured cluster.  You will still get an exception, except this time it will be coming from the restful web service not HDFS. 

Changing the execute bit will not expose anything proprietary, but it also will not fix the problem.  HDFS does not tell you all of the ways that you are violating permissions, it tells you the first one it runs into. The file you are trying to read is owned by a headless user and should not have world read permissions.  If on a secure cluster it does have global read permissions I would file another BLOCKER to fix it., bq. The file you are trying to read is owned by a headless user and should not have world read permissions. If on a secure cluster it does have global read permissions I would file another BLOCKER to fix it.
[~revans2], at least in the scenarios we were dealing with it's the owner of the job who is trying to get to her conf file. So the file itself does not have to be world-readable as long as the hosting filesystem permits traversing the path., Exactly.  That's what my original patch does.  It doesn't change the permissions of the jobconf file itself.  It only adds executable permissions to the parent directories.  Users will still be prevented from listing the directories or other operations they shouldn't be doing.  It simply allows users who own files in that hierarchy the ability to access those files, which they previously couldn't (which in hindsight, seems incorrect regardless).

{quote}I quickly checked, and there seems be another not-so-minor problem of this patch not working for existing clusters without needing admins to explicitly go and change the permissions on the directory. History server doesn't seem to correct the permissions if the directory already exists.{quote}
It should be pretty easy to make the JHS correct the permissions on startup., Okay. I am good doing this. Can you please add the permissions correction to the patch? Thanks.

[~revans2], as clarified immediately above by [~rkanter], his patch doesn't open up read permissions of the files, nor does it let users list all files. We are going ahead with this unless there are more objections., On a cluster that had this issue, Robert added executable bit to the appropriate directories to verify that alone is enough to fix the issue. , I'll post an updated patch later today that makes the JHS update the permissions on startup., Thanks Robert. Assuming it is close, I'd like to commit it later today or over the weekend so that I can roll an RC for 2.7.0., [~rkanter], this is breaking all TestJavaActionExecutor unit tests on Oozie with hadoop-2.7, [~rkanter] / [~jira.shegalov],

Sigh, I see another big issue with the patch at MAPREDUCE-5875. Now with every Cluster.Job getJob(JobID jobId) call, we create a new JobConf and open the HDFS file in order to load it later. That can become a huge perf hit for the job as well as the Namenode. Even the previous code was adding the remote conf file, but it never gets read till somebody does an explicit conf.get() - which doesn't happen in the usual wait-for-completion code path., What if we do this fix for now and add a followup JIRA to add a cache?  This shouldn't be a that huge of a performance hit., I double checked the code in Job.java, JobClient.java, JobSubmitter.java and Cluster.java. Cluster#getJob is not used by Job.java, JobSubmitter.java and Cluster.java. The only place where Cluster#getJob is used is from JobClient#getJobUsingCluster. JobClient#getJobUsingCluster is used by JobClient#getJob, JobClient#displayTask,  JobClient#getMapTaskReports, JobClient#getReduceTaskReports, JobClient#getCleanupTaskReports and JobClient#getSetupTaskReports.
All these functions(JobClient#getJob, JobClient#displayTask,  JobClient#getMapTaskReports, JobClient#getReduceTaskReports, JobClient#getCleanupTaskReports and JobClient#getSetupTaskReports) are public APIs, which are currently only used by applications for example CLI.
So It looks like Cluster#getJob will be only used by applications, the performance hit won't be that much if the applications don't call these functions too many times. If we can add cache to improve the performance, that will be better., The MAPREDUCE-6288.002.patch builds on the previous MAPREDUCE-6288.patch I originally made.  Besides using 771 instead of 770, it also makes the JHS check and correct the permissions on startup.  I added a unit test and also verified in a cluster., {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12707951/MAPREDUCE-6288.002.patch
  against trunk revision 3836ad6.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/5346//testReport/
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/5346//console

This message is automatically generated., The initialization code in HistoryManager and the entire JHS code-base itself has become a little hairy, sigh, but I wouldn't touch it now.

The patch looks good to me. +1. Checking this in., Committed this to trunk, branch-2 and branch-2.7. Thanks Robert. Tx for the discussion, everyone else., Thanks everyone., FAILURE: Integrated in Hadoop-trunk-Commit #7462 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/7462/])
MAPREDUCE-6288. Changed permissions on JobHistory server's done directory so that user's client can load the conf files directly. Contributed by Robert Kanter. (vinodkv: rev 5358b83167777a7108b32c9900fb0d01ca0fe961)
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapreduce/v2/jobhistory/JobHistoryUtils.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryFileManager.java
* hadoop-mapreduce-project/CHANGES.txt
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/test/java/org/apache/hadoop/mapreduce/v2/hs/TestHistoryFileManager.java
, -1

Please stop trying to open up the permissions for the files and directories the history server manages.  We should not be exposing an implementation detail like how files are laid out on HDFS in the history server to end users.  If we do expose it we will not be able to change it in the future, like when/if we go to the timeline server.  Also it does not solve the issue for anyone except the original user that launched the MR job.  It will still blow up if another user has permissions, because of Job ACLs, to check the status of the job, but did not launch the job.  There is also technically a race condition here too.  The history server moves the files asynchronously from done_intermediate to done.  You may try to read the file before the history server has finished moving it. There is synchronization within the history server to prevent this from happening if you go through the proper APIs.

If you want the job conf create a new RPC call for it in the history server and in the MR AM, then have the client download it through those RPC APIs.  This will not expose any internal detail and will support the ACLs correctly across the board., I still don't consider this fixed.  I'm willing to let MR shoot itself in the foot and expose the HDFS layout of the history server.  [~jlowe] my disagree with me because he still has to support this code, but please test this fix with a user that has ACL permissions to read the job status, but did not launch the job.

If the job is still up and running or not, It will fail with a permission denied error, because the original job owner is the only one in HDFS that has permissions to read the config file., [~revans2], Oh, That is a good catch for the race condition at JHS! I reviewed the patch at MAPREDUCE-5875, It looks like the patch at MAPREDUCE-5875 not just fixed the issue "Make Counter limits consistent across JobClient, MRAppMaster, and YarnChild".
To fix the issue "Make Counter limits consistent across JobClient, MRAppMaster, and YarnChild",
We don't really need this change at Cluster#getJob:
This change at Cluster#getJob is to help multiple Job clients to get the same configuration, which looks like a different issue it fixed.
{code}
      final JobConf conf = new JobConf();
      final Path jobPath = new Path(client.getFilesystemName(),
          status.getJobFile());
      final FileSystem fs = FileSystem.get(jobPath.toUri(), getConf());
      try {
        conf.addResource(fs.open(jobPath), jobPath.toString());
      } catch (FileNotFoundException fnf) {
        if (LOG.isWarnEnabled()) {
          LOG.warn("Job conf missing on cluster", fnf);
        }
      }
{code}
The above code causes the current issue(MAPREDUCE-6288) and it also causes MAPREDUCE-6271.

IMHO, Can we just revert the code change at Cluster#getJob? then we can create a following up JIRA to support multiple Job clients to get the same configuration from the Job configuration file.
The proposed patch [MR-6271.patch|https://issues.apache.org/jira/secure/attachment/12703587/MR-6271.patch] at MAPREDUCE-6271 exactly did the same thing which revert the change at Cluster#getJob and fix the test failure.

I also find two other very old JIRAs MAPREDUCE-4443 and MAPREDUCE-5149 (more than two years old)  which also try to fix the same issue as MAPREDUCE-5875 "Make Counter limits consistent across JobClient, MRAppMaster, and YarnChild".
The patch at MAPREDUCE-5875 without the code change at Cluster#getJob can fix both issues MAPREDUCE-4443 and MAPREDUCE-5149. So we really don't need the above code change at Cluster#getJob to fix both MAPREDUCE-4443 and MAPREDUCE-5149., Reverted the patch while the discussion continues.

I am inclined towards reverting MAPREDUCE-5875 from 2.7.0. Will see how much of an effort that is., FAILURE: Integrated in Hadoop-trunk-Commit #7470 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/7470/])
Revert "MAPREDUCE-6288. Changed permissions on JobHistory server's done directory so that user's client can load the conf files directly. Contributed by Robert Kanter." (vinodkv: rev cc0a01c50308fe599b4bdd5a80068d6244062e4f)
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapreduce/v2/jobhistory/JobHistoryUtils.java
* hadoop-mapreduce-project/CHANGES.txt
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryFileManager.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/test/java/org/apache/hadoop/mapreduce/v2/hs/TestHistoryFileManager.java
, bq. IMHO, Can we just revert the code change at Cluster#getJob? then we can create a following up JIRA to support multiple Job clients to get the same configuration from the Job configuration file.
bq. I am inclined towards reverting MAPREDUCE-5875 from 2.7.0. Will see how much of an effort that is.
I found out what is needed: reverting MAPREDUCE-6286 -> MAPREDUCE-6282 -> MAPREDUCE-6199 -> MAPREDUCE-5875 in that order works.

Depending on how other 2.7.0 blockers go, I'll revert these from branch-2.7 first later in the evening., bq. We should not be exposing an implementation detail like how files are laid out on HDFS in the history server to end users.
These files are intended to be accessed only through the MapReduce API - REST, Java or Client. Do we honor compatibility around the file permissions and locations internal YARN/MR logic? If we are undecided, I would like for us to explicitly state that we will not be honoring them. , Let me know if I am missing anything. , FAILURE: Integrated in Hadoop-Yarn-trunk-Java8 #149 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk-Java8/149/])
MAPREDUCE-6288. Changed permissions on JobHistory server's done directory so that user's client can load the conf files directly. Contributed by Robert Kanter. (vinodkv: rev 5358b83167777a7108b32c9900fb0d01ca0fe961)
* hadoop-mapreduce-project/CHANGES.txt
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryFileManager.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapreduce/v2/jobhistory/JobHistoryUtils.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/test/java/org/apache/hadoop/mapreduce/v2/hs/TestHistoryFileManager.java
Revert "MAPREDUCE-6288. Changed permissions on JobHistory server's done directory so that user's client can load the conf files directly. Contributed by Robert Kanter." (vinodkv: rev cc0a01c50308fe599b4bdd5a80068d6244062e4f)
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/test/java/org/apache/hadoop/mapreduce/v2/hs/TestHistoryFileManager.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryFileManager.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapreduce/v2/jobhistory/JobHistoryUtils.java
* hadoop-mapreduce-project/CHANGES.txt
, SUCCESS: Integrated in Hadoop-Yarn-trunk #883 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk/883/])
MAPREDUCE-6288. Changed permissions on JobHistory server's done directory so that user's client can load the conf files directly. Contributed by Robert Kanter. (vinodkv: rev 5358b83167777a7108b32c9900fb0d01ca0fe961)
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryFileManager.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/test/java/org/apache/hadoop/mapreduce/v2/hs/TestHistoryFileManager.java
* hadoop-mapreduce-project/CHANGES.txt
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapreduce/v2/jobhistory/JobHistoryUtils.java
Revert "MAPREDUCE-6288. Changed permissions on JobHistory server's done directory so that user's client can load the conf files directly. Contributed by Robert Kanter." (vinodkv: rev cc0a01c50308fe599b4bdd5a80068d6244062e4f)
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/test/java/org/apache/hadoop/mapreduce/v2/hs/TestHistoryFileManager.java
* hadoop-mapreduce-project/CHANGES.txt
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapreduce/v2/jobhistory/JobHistoryUtils.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryFileManager.java
, I am fine with reverting the changes to make 2.7 stable again.  Thanks for the quick response., FAILURE: Integrated in Hadoop-Hdfs-trunk #2081 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/2081/])
MAPREDUCE-6288. Changed permissions on JobHistory server's done directory so that user's client can load the conf files directly. Contributed by Robert Kanter. (vinodkv: rev 5358b83167777a7108b32c9900fb0d01ca0fe961)
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/test/java/org/apache/hadoop/mapreduce/v2/hs/TestHistoryFileManager.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryFileManager.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapreduce/v2/jobhistory/JobHistoryUtils.java
* hadoop-mapreduce-project/CHANGES.txt
Revert "MAPREDUCE-6288. Changed permissions on JobHistory server's done directory so that user's client can load the conf files directly. Contributed by Robert Kanter." (vinodkv: rev cc0a01c50308fe599b4bdd5a80068d6244062e4f)
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapreduce/v2/jobhistory/JobHistoryUtils.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/test/java/org/apache/hadoop/mapreduce/v2/hs/TestHistoryFileManager.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryFileManager.java
* hadoop-mapreduce-project/CHANGES.txt
, FAILURE: Integrated in Hadoop-Hdfs-trunk-Java8 #140 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk-Java8/140/])
MAPREDUCE-6288. Changed permissions on JobHistory server's done directory so that user's client can load the conf files directly. Contributed by Robert Kanter. (vinodkv: rev 5358b83167777a7108b32c9900fb0d01ca0fe961)
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/test/java/org/apache/hadoop/mapreduce/v2/hs/TestHistoryFileManager.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapreduce/v2/jobhistory/JobHistoryUtils.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryFileManager.java
* hadoop-mapreduce-project/CHANGES.txt
Revert "MAPREDUCE-6288. Changed permissions on JobHistory server's done directory so that user's client can load the conf files directly. Contributed by Robert Kanter." (vinodkv: rev cc0a01c50308fe599b4bdd5a80068d6244062e4f)
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryFileManager.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapreduce/v2/jobhistory/JobHistoryUtils.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/test/java/org/apache/hadoop/mapreduce/v2/hs/TestHistoryFileManager.java
* hadoop-mapreduce-project/CHANGES.txt
, FAILURE: Integrated in Hadoop-Mapreduce-trunk-Java8 #149 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk-Java8/149/])
MAPREDUCE-6288. Changed permissions on JobHistory server's done directory so that user's client can load the conf files directly. Contributed by Robert Kanter. (vinodkv: rev 5358b83167777a7108b32c9900fb0d01ca0fe961)
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryFileManager.java
* hadoop-mapreduce-project/CHANGES.txt
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/test/java/org/apache/hadoop/mapreduce/v2/hs/TestHistoryFileManager.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapreduce/v2/jobhistory/JobHistoryUtils.java
Revert "MAPREDUCE-6288. Changed permissions on JobHistory server's done directory so that user's client can load the conf files directly. Contributed by Robert Kanter." (vinodkv: rev cc0a01c50308fe599b4bdd5a80068d6244062e4f)
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapreduce/v2/jobhistory/JobHistoryUtils.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/test/java/org/apache/hadoop/mapreduce/v2/hs/TestHistoryFileManager.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryFileManager.java
* hadoop-mapreduce-project/CHANGES.txt
, FAILURE: Integrated in Hadoop-Mapreduce-trunk #2099 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/2099/])
MAPREDUCE-6288. Changed permissions on JobHistory server's done directory so that user's client can load the conf files directly. Contributed by Robert Kanter. (vinodkv: rev 5358b83167777a7108b32c9900fb0d01ca0fe961)
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryFileManager.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapreduce/v2/jobhistory/JobHistoryUtils.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/test/java/org/apache/hadoop/mapreduce/v2/hs/TestHistoryFileManager.java
* hadoop-mapreduce-project/CHANGES.txt
Revert "MAPREDUCE-6288. Changed permissions on JobHistory server's done directory so that user's client can load the conf files directly. Contributed by Robert Kanter." (vinodkv: rev cc0a01c50308fe599b4bdd5a80068d6244062e4f)
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapreduce/v2/jobhistory/JobHistoryUtils.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryFileManager.java
* hadoop-mapreduce-project/CHANGES.txt
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/test/java/org/apache/hadoop/mapreduce/v2/hs/TestHistoryFileManager.java
, I just reverted MAPREDUCE-6286, MAPREDUCE-6199, and MAPREDUCE-5875 from branch-2.7., Moving this to 2.8.0. I'll do a post-mortem a little later to see what went wrong and how we should fix this correctly., [~rkanter] / [~kasha] / [~revans2] / [~zxu], we need a resolution on this.

Do we agree that we implement some sort of a getConfiguration() API?, I liked [~rkanter]'s addendum to  MAPREDUCE-5875 with the permission fix: simple and effective., I too like the permission fix, but would like to understand [~revans2]'s reservations better. Changing permissions is a bad idea if we have contracts about what they are going to be. If not, it seems benign. , I agree with Gera and Karthik.  The permissions change should be benign (plus, as it stands, it seems funny for the user to own the file if they can't actually even read it).  , Hi folks, anything more to be said about this JIRA? It's marked as a blocker, and there's been no action for over a year., I believe that this is still an issue - the API to {{getConfiguration}} on submitted (or finished) job simply doesn't return proper configuration object., It's worth adding though that we had to workaround this issue in Sqoop by persisting the whole configuration object in our metadata store, so it's not blocking for us at this point., We need to get this resolved since it's blocking the 2.8 release.

I agree with [~revans2] that the permission change is undesirable.  I haven't seen how his original concerns have been addressed, specifically:
* It exposes implementation details that were never exposed before.  If the backend changes to the timeline server then the client will try to find them in the filesystem and break.
* Users that have view ACLs for the job but who are _not_ the job's user will not be able to access the file even with the directory permission change.
* There's a race condition because the client could be trying to access a file that the history server can be moving at the same time.

I also agree with his analysis on a proper way to fix it:
{quote}
If you want the job conf create a new RPC call for it in the history server and in the MR AM, then have the client download it through those RPC APIs. This will not expose any internal detail and will support the ACLs correctly across the board.
{quote}

It preserves the separation of concerns for the history backend implementation, properly implements ACLs, and avoids the race condition., Thanks [~jlowe] for pushing this for 2.8 release. It sounds like we still have different opinions on what's right fix for issues involved by MAPREDUCE-5875. Are we confident to make progress on this jira in next couple days? 
If not, I am considering to follow our previous practice in 2.7 that is to revert related patches in branch-2.8., I'm going to retarget this for 3.0.0-beta1 rather than 3.0.0-alpha2, since it won't be a regression from alpha1.

Is someone actively working on this JIRA? If not, I'd like to revert this code out of trunk and branch-2 too rather than kicking the can down the road every release., The code was already reverted long ago back in March.  The JIRA is still open to address the original issue in another way.  I'm unassigning myself because I don't have time to work on this for now., Revert MAPREDUCE-5875 from branch-2.8, so retarget it to 2.9 release., Pinging this JIRA as it's still marked as a blocker for 3.x and unassigned. Is anyone planning on picking it up?, I took a deeper look into this, and I think part of the problem stems from [this comment|https://issues.apache.org/jira/browse/MAPREDUCE-5875?focusedCommentId=14377308&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-14377308] in MAPREDUCE-5875.  It looks like it wasn't supposed to try to access the file directly but rather go through the JHS REST API to get the conf.  Unfortunately that change was inadvertently dropped, but mysteriously that error was never corrected even after it was discovered.

Having the CLI fall back on the REST API is a lot closer to addressing the concerns Bobby and I had about exposing JHS internals, race conditions, etc.  However I don't think that change alone is sufficient.  Unless I'm missing something, the JHS REST API is not going to allow a JHS delegation token to authenticate.  That's going to break Oozie, since an Oozie launcher only has the delegation token.  I'm OK with the CLI hitting the REST API to get the conf, but only if the REST API supports the same authentication mechanisms that the RPC does today.  I don't believe that's the case.

Unfortunately I don't have time in the short term to address the REST API shortcomings.  If nobody steps up to address this then the simplest path forward is to revert MAPREDUCE-5875 from branch-2 and trunk until someone can properly fix it., [~rkanter], your last comment mentioned it is already reverted.
But I still see it in branch-2 and trunk.
There's one revert commit in branch-2 and trunk, but the content of that only changed  the CHANGEST.txt. I think we should go ahead and revert the patch from trunk and branch-2 ?
{code}
commit 4cf44bef5ca5fee69f712c448f6969e2e046d495
Author: Vinod Kumar Vavilapalli <vinodkv@apache.org>
Date:   Tue Mar 31 13:29:20 2015 -0700

    Reverted MAPREDUCE-6286, MAPREDUCE-6199, and MAPREDUCE-5875 from branch-2.7. Editing CHANGES.txt to reflect this.

    (cherry picked from commit e428fea73029ea0c3494c71a50c5f6c994888fd2)
{code}, My comment was talking about this JIRA, MAPREDUCE-6288, being reverted.  That's the patch that tried to fix this issue by changing the permissions.  If you look at around March 30 comments, you can see that it was committed and then reverted., Looking into the 3 commits mentioned (MAPREDUCE-6286, MAPREDUCE-6199, and MAPREDUCE-5875), it looks like these were properly reverted from branch-2.8 as well.  Somehow it seems like only the CHANGES.txt change made it to branch-2.  [~vinodkv] do you remember this?, bq. If nobody steps up to address this then the simplest path forward is to revert MAPREDUCE-5875 from branch-2 and trunk until someone can properly fix it.
+1. We should revert the patch from trunk/branch-2 just like what we did in 2.7 and 2.8 until someone have properly fix., This has pending for a while. Sounds like no one object the revert of MAPREDUCE-5875 from trunk and branch-2.
I will go ahead to revert it (as well as MAPREDUCE-6286 and MAPREDCUE-6199) after 24 hours. If people here have any concern, please call it out before I revert them tomorrow., If we revert MAPREDUCE-5875, then we need to come up with a better solution to the problem it was trying to solve: if you increase the counter limits in your job, and then try to use a different client to look at them, it will fail because the counter limits aren't increased.  , [~rkanter], I think all people here agree that MAPREDUCE-5875 indeed fix a critical problem. But the problem it involves is actually a blocker issue and no one commit the effort for a decent solution so far. [~andrew.wang] already defer this out several times for 3.0-alpha but I don't think we should do the same practice again when we are doing for beta/GA - this will definitely become a real blocker there., Thus, I would suggest we reopen MAPREDUCE-5875 for a better solution when we revert the original patches from trunk/branch-2., Oh, I just looked at MAPREDUCE-5875 and see now that we hadn't actually shipped it yet; I thought we had and reverting it would be a regression, even though it also causes this issue.  Anyway, we haven't shipped it, so I'm okay with reverting it and reopening the JIRA., Yep. We keep reverting it from 2.7.x release and 2.8 so this patch haven't be released yet.
I will revert them tomorrow if no further concerns from others., I have revert MAPREDUCE-6286, MAPREDUCE-6199 and MAPREDUCE-5875 from trunk and branch-2. Resolve this jira as Done as we will reopen MAPREDUCE-5875 for a better solution., Thanks for handling the reverts Junping. I filed and linked MAPREDUCE-6924 so the reverts show up in the beta1 changelog, since I believe they were included in the alpha releases., MAPREDUCE-6925 has been created to figure out a better solution (MAPREDUCE-5875 was Closed so it couldn't be Reopened).]