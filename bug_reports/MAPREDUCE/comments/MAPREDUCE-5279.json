[{color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12585385/MAPREDUCE-5279.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/3695//testReport/
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/3695//console

This message is automatically generated., removed unrelated changed file, {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12585399/MAPREDUCE-5279-v2.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/3696//testReport/
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/3696//console

This message is automatically generated., Any suggestions for this patch?
I've done some tests on our cluster, and found the job that always got dead lock works well now., [~pengzhang], thank you for contributing! Can you rebase on current trunk please?, This seems like an important fix, as even large clusters often have small queues which will emulate the same scenario as a small cluster setup.

[~peng.zhang] could you please rebase the patch on trunk?  Some other comments on the patch:

The previous code expected and handled getAvailableResources() returning null, but I don't see a similar handling of null in the patch.  If headroom and newHeadroom end up both null then I'm worried about this part of the patch:
{code}
+    if (newContainers.size() + finishedContainers.size() > 0 || headRoom != newHeadRoom || !headRoom.equals(newHeadRoom)) {
{code}

Also I think it would be better to not have an implicit vcore method to create a Resource (appears to be unused in the patch anyway), so I'd advocate for removing this new method:
{code}
+  public static Resource createResource(int memory) {
+    return createResource(memory, (memory > 0) ? 1 : 0);
+  }
{code}, {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12585399/MAPREDUCE-5279-v2.patch
  against trunk revision 8f1a668.

    {color:red}-1 patch{color}.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4848//console

This message is automatically generated., [~peng.zhang] - are you still working on this? Is it ok if I take over?, Recently we have applied it to hadoop 2.4
I'll merge this patch to trunk this week, Great! The patch looks mostly good to me, but I would recommend one change.

YARN-2448 exposes the resource types being considered when scheduling(is the RM considering cpu when scheduling). Can you please integrate that with your patch? For example, in your current patch, you have -
{noformat}
+  public static int computeAvailableContainers(Resource available, Resource required) {
+    return Math.min(
+      available.getMemory() / required.getMemory(), 
+      available.getVirtualCores() / required.getVirtualCores());
+  }
+
{noformat}

When using the CapacityScheduler with the DefaultResourceCalculator, CPU is not considered when scheduling so the current version of the patch can lead to lower throughput. All the mathematical functions in the Resources class should only do vcore calculations if the scheduler is using CPU as a resource.
, Uploaded a new patch which is essentially [~peng.zhang]'s patch with trivial changes to check the resource types that the RM is using., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12668819/apache-mapreduce-5279.3.patch
  against trunk revision 43b0303.

    {color:red}-1 patch{color}.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4878//console

This message is automatically generated., Rebased to latest trunk, {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12668823/apache-mapreduce-5279.4.patch
  against trunk revision 43b0303.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4879//testReport/
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4879//console

This message is automatically generated., Tanks [~vvasudev] for taking this. 
And after initial patch, we found one bug and fixed it in our branch. Code context is below:

{code}
   private List<Container> getResources() throws Exception {
-    int headRoom = getAvailableResources() != null
-        ? getAvailableResources().getMemory() : 0;//first time it would be null
+    Resource headRoom =
+        getAvailableResources() == null ? Resources.none()
+            : getAvailableResources(); // will be null the first time
     AllocateResponse response;
{code}

{code}
-    int newHeadRoom = getAvailableResources() != null ? getAvailableResources().getMemory() : 0;
+    Resource newHeadRoom =
+        getAvailableResources() == null ? Resources.none()
+            : getAvailableResources();
     List<Container> newContainers = response.getAllocatedContainers();
     // Setting NMTokens
{code}

{code}
-    if (newContainers.size() + finishedContainers.size() > 0 || headRoom != newHeadRoom) {
+    if (newContainers.size() + finishedContainers.size() > 0
+        || !headRoom.equals(newHeadRoom)) {
       //something changed
       recalculateReduceSchedule = true;
{code}

headRoom and  newHeadRoom reference to the same object, so equals check always return true except first time.
I fixed this by adding Resources.clone(getAvailableResources()) before calling makeRemoteRequest ();
, Thanks for pointing out the bug [~peng.zhang]! I've uploaded a new patch  fixing it. Can you please confirm that the fix is ok?, {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12669073/apache-mapreduce-5279.5.patch
  against trunk revision 0c26412.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4884//testReport/
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4884//console

This message is automatically generated., LGTM, [~vvasudev], I will take a look at the patch., [~vvasudev], thanks for the patch. The patch is following the existing logic, and expand the dimension from memory only to (memory, cpu). It looks fine to me overall, and here're some of my comments.

1. Can we reuse org.apache.hadoop.yarn.util.resource.Resources, and mark it \@LimitedPrivate to both yarn and mapreduce?

2. It's not related to this patch, but I think we need to fix the problem: SchedulerResourceTypes is the generated by protobuf, we shouldn't refer to it directly, which will potentially break the binary compatibility if we upgrade protobuf to new version. The other enums in proto adopt the following way: defining a SchedulerResourceTypes java enum, and a SchedulerResourceTypesProto protobuf enum. In ProtoUtils, defining convertTo/FromProtoFormat methods to convert one object to the other. Please file ticket to for this issue.

3. We should reflect the vcore usage in history as well, but it may not be the trivial changes. Let's file a separate ticket for it.
{code}
+          eventHandler.handle(new JobHistoryEvent(jobId,
+            new NormalizedResourceEvent(
+              org.apache.hadoop.mapreduce.TaskType.MAP, mapResourceRequest
+                .getMemory())));
{code}

4. Can we combine testReduceSchedulingWithNotEnoughCpu/Memory and only differ on the limit set?, Uploaded a new patch to address [~zjshen]'s comments.

{quote}
1. Can we reuse org.apache.hadoop.yarn.util.resource.Resources, and mark it @LimitedPrivate to both yarn and mapreduce?
{quote}

Fixed.

{quote}
2. It's not related to this patch, but I think we need to fix the problem: SchedulerResourceTypes is the generated by protobuf, we shouldn't refer to it directly, which will potentially break the binary compatibility if we upgrade protobuf to new version. The other enums in proto adopt the following way: defining a SchedulerResourceTypes java enum, and a SchedulerResourceTypesProto protobuf enum. In ProtoUtils, defining convertTo/FromProtoFormat methods to convert one object to the other. Please file ticket to for this issue.
{quote}

Filed YARN-2570.

{quote}
3. We should reflect the vcore usage in history as well, but it may not be the trivial changes. Let's file a separate ticket for it.
{noformat}
+          eventHandler.handle(new JobHistoryEvent(jobId,
+            new NormalizedResourceEvent(
+              org.apache.hadoop.mapreduce.TaskType.MAP, mapResourceRequest
+                .getMemory())));
{noformat}
{quote}

Filed MAPREDUCE-6097

{quote}
4. Can we combine testReduceSchedulingWithNotEnoughCpu/Memory and only differ on the limit set?
{quote}

Fixed., {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12669975/apache-mapreduce-5279.6.patch
  against trunk revision 6fe5c6b.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4898//testReport/
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4898//console

This message is automatically generated., Looks good to me overall. After the change, the new MR should run compatibly with the old YARN cluster, but SchedulerResourceTypes from the registration response should be empty, which should be fine. Some nits.

1. Do you miss SchedulerResourceTypes.CPU here?
{code}
+    doReturn(EnumSet.of(SchedulerResourceTypes.MEMORY)).when(allocator)
+        .getSchedulerResourceTypes();
+
+    // Test ramp-down when enough cpu but not enough memory resource
+    doReturn(BuilderUtils.newResource(10 * 1024, 100 * 1)).when(allocator)
{code}

2. Unnecessary import
{code}
 import org.apache.hadoop.classification.InterfaceAudience.Private;
{code}, {quote}
1. Do you miss SchedulerResourceTypes.CPU here?
{noformat}
+    doReturn(EnumSet.of(SchedulerResourceTypes.MEMORY)).when(allocator)
+        .getSchedulerResourceTypes();
+
+    // Test ramp-down when enough cpu but not enough memory resource
+    doReturn(BuilderUtils.newResource(10 * 1024, 100 * 1)).when(allocator)
{noformat}
{quote}

Yep, fixed.

{quote}
2. Unnecessary import
{noformat}
 import org.apache.hadoop.classification.InterfaceAudience.Private;
{noformat}
{quote}

Fixed
, {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12670091/apache-mapreduce-5279.7.patch
  against trunk revision 951847b.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:red}-1 core tests{color}.  The test build failed in hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app 

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4900//testReport/
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4900//console

This message is automatically generated., {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12670091/apache-mapreduce-5279.7.patch
  against trunk revision 9e35571.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4903//testReport/
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4903//console

This message is automatically generated., +1. Will commit it on Monday to leave [~peng.zhang] some time to look at the new patch., LGTM, Conflict happens on branch-2. Create patch for branch-2., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12670438/MAPREDUCE-5279-branch-2.patch
  against trunk revision 376233c.

    {color:red}-1 patch{color}.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4906//console

This message is automatically generated., Commit the patch to trunk and branch-2. Thanks, [~peng.zhang] and [~vvasudev]!, FAILURE: Integrated in Hadoop-Yarn-trunk #689 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk/689/])
MAPREDUCE-5279. Made MR headroom calculation honor cpu dimension when YARN scheduler resource type is memory plus cpu. Contributed by Peng Zhang and Varun Vasudev. (zjshen: rev 376233cdd4a4ddbde5a92a0627f78338cb4c38b7)
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/resource/Resources.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/v2/app/rm/TestRMContainerAllocator.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/ResourceCalculatorUtils.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerAllocator.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMCommunicator.java
* hadoop-mapreduce-project/CHANGES.txt
, FAILURE: Integrated in Hadoop-Mapreduce-trunk #1905 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/1905/])
MAPREDUCE-5279. Made MR headroom calculation honor cpu dimension when YARN scheduler resource type is memory plus cpu. Contributed by Peng Zhang and Varun Vasudev. (zjshen: rev 376233cdd4a4ddbde5a92a0627f78338cb4c38b7)
* hadoop-mapreduce-project/CHANGES.txt
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/ResourceCalculatorUtils.java
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/resource/Resources.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/v2/app/rm/TestRMContainerAllocator.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMCommunicator.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerAllocator.java
, SUCCESS: Integrated in Hadoop-Hdfs-trunk #1880 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/1880/])
MAPREDUCE-5279. Made MR headroom calculation honor cpu dimension when YARN scheduler resource type is memory plus cpu. Contributed by Peng Zhang and Varun Vasudev. (zjshen: rev 376233cdd4a4ddbde5a92a0627f78338cb4c38b7)
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/ResourceCalculatorUtils.java
* hadoop-mapreduce-project/CHANGES.txt
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/resource/Resources.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/v2/app/rm/TestRMContainerAllocator.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerAllocator.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMCommunicator.java
]