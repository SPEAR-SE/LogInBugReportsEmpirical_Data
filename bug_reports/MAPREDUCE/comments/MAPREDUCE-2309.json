[Which sub-command of {{mapred}} is this exactly? :), In  version 0.20.2, using the command "hadoop job -list-attempt-ids"

{code:xml} 

linux124:/home/devaraj/hadoop/bin # ./hadoop job -list-attempt-ids job_201102101059_0008 type state
linux124:/home/devaraj/hadoop/bin # 

{code} 


If we give the state other than "pending", "running", "completed", "failed", "killed" or task type other than "map", "reduce", "setup", "cleanup" it is simply returning to the shell. 

In  version 0.23 snapshot, using the command "mapred job -list-attempt-ids"


{code:xml} 

inux124:/home/devaraj/hadoop_latest/hadoop-mapred-0.23.0-SNAPSHOT/bin # ./mapred job -list-attempt-ids job_201102101036_0002 type state
11/02/10 17:07:21 WARN conf.Configuration: mapred.used.genericoptionsparser is deprecated. Instead, use mapreduce.client.genericoptionsparser.used
Exception in thread "main" java.lang.IllegalArgumentException: No enum const class org.apache.hadoop.mapreduce.TaskType.type
	at java.lang.Enum.valueOf(Enum.java:196)
	at org.apache.hadoop.mapreduce.TaskType.valueOf(TaskType.java:27)
	at org.apache.hadoop.mapreduce.tools.CLI.displayTasks(CLI.java:513)
	at org.apache.hadoop.mapreduce.tools.CLI.run(CLI.java:290)
	at org.apache.hadoop.util.ToolRunner.run(ToolRunner.java:69)
	at org.apache.hadoop.util.ToolRunner.run(ToolRunner.java:83)
	at org.apache.hadoop.mapred.JobClient.main(JobClient.java:1084)

{code} 

It is throwing the above exception if we give invalid task type.

Instead we can display some message like "Unsupported task state." or "Unsupported task type."
, If the passed state/type is invalid giving the message saying Invalid state/type and also giving the valid states/types., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12472962/MAPREDUCE-2309-trunk.patch
  against trunk revision 1079072.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    -1 contrib tests.  The patch failed contrib unit tests.

    +1 system test framework.  The patch passed system test framework compile.

Test results: https://hudson.apache.org/hudson/job/PreCommit-MAPREDUCE-Build/133//testReport/
Findbugs warnings: https://hudson.apache.org/hudson/job/PreCommit-MAPREDUCE-Build/133//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://hudson.apache.org/hudson/job/PreCommit-MAPREDUCE-Build/133//console

This message is automatically generated., Contrib unit tests failures are not because of the patch, those have been failing for the past 28 builds (Since #105). 

Tests are not required for this patch because changes related to the System.out.println() messages.
, Looks good to me. +1]