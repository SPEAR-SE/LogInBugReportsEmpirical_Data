[So, I assume the fix is to ensure that the cleanup task uses only 1 slot?, I think that should be it. That would also lead to non-wastage of slots., On second thoughts we need to be a little careful here... if we are re-using the existing JVM we should not bother with manipulating the #slots occupied by the JVM, OTOH if we need a new JVM we should be using just 1. Right?, bq. On second thoughts [...]

To clarify, my comment was pointing out scenarios where we jvm-reuse is on and we use the JVM of a successful task to run the cleanup task of an unrelated failed task., Hmm.. It should be okay to have a JVM occupying higher number of slots run a task that requires fewer slots. However, we need to fix the TaskTracker.TaskInProgress.releaseSlot. I am thinking that it might make sense to keep track of the slot count per JVM (long term, we anyway should be monitoring the resources being used by the JVM per se). Today, in releaseSlot, we release #slots equal to the number of slots that the task took to run. Instead it could just decrement the slot count by the number of slots the JVM took to run the task. Also, when the task is assigned to the TT, the JobInProgress.{obtainTaskCleanupTask,obtainJobCleanupTask,obtainJobSetupTask} methods should specifically sets the #slots required to 1 (today that's the only way to let the TT know that the task would require 1 slot).

The other option is to have the JobTracker be aware of slot counts for the special tasks. Since the special tasks are scheduled directly by the JobTracker, that would be required to be done. , After some thought, it seems like decrementing the slot count on a per task-used-slot count basis is harmless.. So, for now, let's just ensure that all special tasks (job-setup, task-cleanup and job-cleanup) take exactly one slot. I couldn't come up with a counter-example where this would lead to inconsistencies in the slot counts on the TT, or, would lead to fewer/more tasks to be launched than should be as per the slot count and the #slots required by tasks scheduled on that TT., Attaching patch with the fix. Writing testcase is in progress., The changes in the patch look fine. This should work with JVM reuse set to ON too., Attaching patch with the testcase.
Please review and provide your comments., Looks good. Some minor nits.

# Change the name of isMap arugment in TestSetupTaskScheduling.addNewTaskStatus
# Add the error strings to asserts
# Minor typo in one of the comments (should read reduce instead of map) in testNumSlotsUsedForTaskCleanup
, Attaching new patch with  the suggested changes., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12420542/MR-1028.v1.patch
  against trunk revision 818674.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 6 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: http://hudson.zones.apache.org/hudson/job/Mapreduce-Patch-h1.grid.sp2.yahoo.net/2/testReport/
Findbugs warnings: http://hudson.zones.apache.org/hudson/job/Mapreduce-Patch-h1.grid.sp2.yahoo.net/2/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Checkstyle results: http://hudson.zones.apache.org/hudson/job/Mapreduce-Patch-h1.grid.sp2.yahoo.net/2/artifact/trunk/build/test/checkstyle-errors.html
Console output: http://hudson.zones.apache.org/hudson/job/Mapreduce-Patch-h1.grid.sp2.yahoo.net/2/console

This message is automatically generated., Unit tests passed on my local machine with the latest patch., For some reason, Hudson did not pick this up. Retrying., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12420550/MR-1028.v1.1.patch
  against trunk revision 818830.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 6 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: http://hudson.zones.apache.org/hudson/job/Mapreduce-Patch-h6.grid.sp2.yahoo.net/133/testReport/
Findbugs warnings: http://hudson.zones.apache.org/hudson/job/Mapreduce-Patch-h6.grid.sp2.yahoo.net/133/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Checkstyle results: http://hudson.zones.apache.org/hudson/job/Mapreduce-Patch-h6.grid.sp2.yahoo.net/133/artifact/trunk/build/test/checkstyle-errors.html
Console output: http://hudson.zones.apache.org/hudson/job/Mapreduce-Patch-h6.grid.sp2.yahoo.net/133/console

This message is automatically generated., +1.  Patch looks fine to me.
Also, the failed test, TestCopyFiles is a known issue., Why is taskStatuses now protected?  You've now made it part of the public API.
{quote}
+  protected TreeMap<TaskAttemptID,TaskStatus> taskStatuses = 
{quote}
It should be package-private, no?  That should still enable the unit test to inspect it., Ok, this class is package-private so I guess this is moot.  Still, package-private is always better than protected if at all possible., Patch for the Y-Hadoop distribution, Integrated in Hadoop-Mapreduce-trunk-Commit #66 (See [http://hudson.zones.apache.org/hudson/job/Hadoop-Mapreduce-trunk-Commit/66/])
    . Fixed number of slots occupied by cleanup tasks to one irrespective of slot size for the job. Contributed by Ravi Gummadi.
, bq. Ok, this class is package-private so I guess this is moot. Still, package-private is always better than protected if at all possible.

Filed MAPREDUCE-1041 to fix this., I just committed this to trunk and the Hadoop 0.21 branch. Thanks, Ravi !, -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12420550/MR-1028.v1.1.patch
  against trunk revision 818830.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 6 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: http://hudson.zones.apache.org/hudson/job/Mapreduce-Patch-h6.grid.sp2.yahoo.net/134/testReport/
Findbugs warnings: http://hudson.zones.apache.org/hudson/job/Mapreduce-Patch-h6.grid.sp2.yahoo.net/134/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Checkstyle results: http://hudson.zones.apache.org/hudson/job/Mapreduce-Patch-h6.grid.sp2.yahoo.net/134/artifact/trunk/build/test/checkstyle-errors.html
Console output: http://hudson.zones.apache.org/hudson/job/Mapreduce-Patch-h6.grid.sp2.yahoo.net/134/console

This message is automatically generated., The yahoo-20 patch is missing test-cases...]