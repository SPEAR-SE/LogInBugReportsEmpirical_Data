[{color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12678124/MAPREDUCE-6144.000.patch
  against trunk revision 0126cf1.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:red}-1 core tests{color}.  The patch failed these unit tests in hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app:

                  org.apache.hadoop.mapreduce.v2.app.TestRuntimeEstimators

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4984//testReport/
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4984//console

This message is automatically generated., add new patch MAPREDUCE-6144.001.patch to fix the test failure in TestRuntimeEstimators., {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12678133/MAPREDUCE-6144.001.patch
  against trunk revision 0126cf1.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4985//testReport/
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4985//console

This message is automatically generated., [~zxu], thanks for posting this patch.
+1 (non-binding), Hi [~xgong],

Could you help review and commit this patch? I saw you did some work on DefaultSpeculator before.

thanks
zhihai, Thanks for working this. [~zxu] . I will take a look shortly., Thanks for working on this. [~zxu]
One question here: do we really need this ? I do not think we need to do this. Please correct me if I am wrong.
We have SpeculatorEventDispatcher in MRAppMaster which checks the configurations: MRJobConfig.MAP_SPECULATIVE and MRJobConfig.REDUCE_SPECULATIVE, If any of the configurations are false, the Map or reduce task will not be handled by speculator. 
And every time when we launched a container, we will send SpeculatorEvent, too. If the related configuration is set as false, this even will not be handled. In that case, it will not handle any SpeculatorEvents. We need to handle SpeculatorEvents to keep the status update. If we do not handle any such events, when we tries to call computeSpeculations, it will not schedule any speculations.


, Hi [~xgong], Yes, you are right. mapContainerNeeds will be empty if MAP_SPECULATIVE is disabled, If mapContainerNeeds is empty, maybeScheduleAMapSpeculation will return 0. Same for reduceContainerNeeds and maybeScheduleAReduceSpeculation,
because SpeculatorEventDispatcher  in MRAppMaster handles TASK_CONTAINER_NEED_UPDATE SpeculatorEvent based on task type, MAP_SPECULATIVE configuration and REDUCE_SPECULATIVE configuration.
thanks for the review.
zhihai]