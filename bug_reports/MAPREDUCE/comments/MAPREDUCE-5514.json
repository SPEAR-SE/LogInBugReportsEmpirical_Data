[Attach the test output., job.xml seems to be missing.

{code}
2013-09-18 10:30:19,891 FATAL [AsyncDispatcher event handler] event.AsyncDispatcher (AsyncDispatcher.java:dispatch(141)) - Error in dispatcher thread
org.apache.hadoop.yarn.exceptions.YarnRuntimeException: java.io.FileNotFoundException: File /Users/zshen/Documents/Workspace/eclipse/hadoop-2/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/target/org.apache.hadoop.mapreduce.v2.app.TestRMContainerAllocator/appattempt_1379525411704_0001_000001/.staging/job_1379525411704_0001/job.xml does not exist
	at org.apache.hadoop.mapreduce.v2.app.job.impl.TaskAttemptImpl.createCommonContainerLaunchContext(TaskAttemptImpl.java:737)
	at org.apache.hadoop.mapreduce.v2.app.job.impl.TaskAttemptImpl.createContainerLaunchContext(TaskAttemptImpl.java:782)
	at org.apache.hadoop.mapreduce.v2.app.job.impl.TaskAttemptImpl$ContainerAssignedTransition.transition(TaskAttemptImpl.java:1505)
	at org.apache.hadoop.mapreduce.v2.app.job.impl.TaskAttemptImpl$ContainerAssignedTransition.transition(TaskAttemptImpl.java:1482)
	at org.apache.hadoop.yarn.state.StateMachineFactory$SingleInternalArc.doTransition(StateMachineFactory.java:362)
	at org.apache.hadoop.yarn.state.StateMachineFactory.doTransition(StateMachineFactory.java:302)
	at org.apache.hadoop.yarn.state.StateMachineFactory.access$300(StateMachineFactory.java:46)
	at org.apache.hadoop.yarn.state.StateMachineFactory$InternalStateMachine.doTransition(StateMachineFactory.java:448)
	at org.apache.hadoop.mapreduce.v2.app.job.impl.TaskAttemptImpl.handle(TaskAttemptImpl.java:1039)
	at org.apache.hadoop.mapreduce.v2.app.job.impl.TaskAttemptImpl.handle(TaskAttemptImpl.java:145)
	at org.apache.hadoop.mapreduce.v2.app.MRAppMaster$TaskAttemptEventDispatcher.handle(MRAppMaster.java:1217)
	at org.apache.hadoop.mapreduce.v2.app.MRAppMaster$TaskAttemptEventDispatcher.handle(MRAppMaster.java:1209)
	at org.apache.hadoop.yarn.event.AsyncDispatcher.dispatch(AsyncDispatcher.java:134)
	at org.apache.hadoop.yarn.event.DrainDispatcher$1.run(DrainDispatcher.java:65)
	at java.lang.Thread.run(Thread.java:680)
{code}, I got following error message
{code}
2013-09-19 12:51:42,379 FATAL [AsyncDispatcher event handler] event.AsyncDispatcher (AsyncDispatcher.java:dispatch(141)) - Error in dispatcher thread
java.lang.IllegalArgumentException: java.net.UnknownHostException: amNM
	at org.apache.hadoop.security.SecurityUtil.buildTokenService(SecurityUtil.java:418)
	at org.apache.hadoop.yarn.server.utils.BuilderUtils.newContainerToken(BuilderUtils.java:247)
	at org.apache.hadoop.yarn.server.resourcemanager.security.RMContainerTokenSecretManager.createContainerToken(RMContainerTokenSecretManager.java:195)
	at org.apache.hadoop.yarn.server.resourcemanager.scheduler.fifo.FifoScheduler.assignContainer(FifoScheduler.java:590)
	at org.apache.hadoop.yarn.server.resourcemanager.scheduler.fifo.FifoScheduler.assignOffSwitchContainers(FifoScheduler.java:554)
	at org.apache.hadoop.yarn.server.resourcemanager.scheduler.fifo.FifoScheduler.assignContainersOnNode(FifoScheduler.java:482)
	at org.apache.hadoop.yarn.server.resourcemanager.scheduler.fifo.FifoScheduler.assignContainers(FifoScheduler.java:411)
	at org.apache.hadoop.yarn.server.resourcemanager.scheduler.fifo.FifoScheduler.nodeUpdate(FifoScheduler.java:650)
	at org.apache.hadoop.yarn.server.resourcemanager.scheduler.fifo.FifoScheduler.handle(FifoScheduler.java:679)
	at org.apache.hadoop.yarn.server.resourcemanager.scheduler.fifo.FifoScheduler.handle(FifoScheduler.java:95)
	at org.apache.hadoop.mapreduce.v2.app.TestRMContainerAllocator$MyResourceManager$1.handle(TestRMContainerAllocator.java:451)
	at org.apache.hadoop.mapreduce.v2.app.TestRMContainerAllocator$MyResourceManager$1.handle(TestRMContainerAllocator.java:1)
	at org.apache.hadoop.yarn.event.AsyncDispatcher.dispatch(AsyncDispatcher.java:134)
	at org.apache.hadoop.yarn.event.DrainDispatcher$1.run(DrainDispatcher.java:65)
	at java.lang.Thread.run(Thread.java:680)
Caused by: java.net.UnknownHostException: amNM
	at org.apache.hadoop.security.SecurityUtil.buildTokenService(SecurityUtil.java:419)
	... 14 more
{code}, Can you check this ? is it trying to resolve ip?
inside SecurityUtil.java
{code}
    boolean useIp = conf.getBoolean(
      CommonConfigurationKeys.HADOOP_SECURITY_TOKEN_SERVICE_USE_IP,
      CommonConfigurationKeys.HADOOP_SECURITY_TOKEN_SERVICE_USE_IP_DEFAULT);
{code}, I checked the test code. TestRMContainerAllocator fails at testReportedAppProgress and testReportedAppProgressWithOnlyMaps, because job.xml cannot be found when constructing containerLaunchContext.

Looked into the detail. job.xml was actually created, but path is wrong. It was created at:

{code}
/Users/zshen/Documents/Workspace/eclipse/hadoop-2/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/target/org.apache.hadoop.mapreduce.v2.app.TestRMContainerAllocator/appattempt_1379525404615_0001_000001/.staging/job_1379525411704_0001/job.xml
{code}

but was expected to read from:

{code} /Users/zshen/Documents/Workspace/eclipse/hadoop-2/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/target/org.apache.hadoop.mapreduce.v2.app.TestRMContainerAllocator/appattempt_1379525411704_0001_000001/.staging/job_1379525411704_0001/job.xml 
{code}

Note that there's a section of attempt id in both paths. This section is the user name from UserGroupInformation.getCurrentUser().getShortUserName() (refer to how the path is created in TaskAttemptImpl). The user name was set to  the attempt id, and it differs for each TaskAttempt. Therefore, the path to job.xml is wrong for the other tasks.

See the following code:
{code}
    @Override
    protected void register() {
      ApplicationAttemptId attemptId = getContext().getApplicationAttemptId();
      UserGroupInformation ugi =
          UserGroupInformation.createRemoteUser(attemptId.toString());
      Token<AMRMTokenIdentifier> token =
          rm.getRMContext().getRMApps().get(attemptId.getApplicationId())
            .getRMAppAttempt(attemptId).getAMRMToken();
      try {
        ugi.addTokenIdentifier(token.decodeIdentifier());
      } catch (IOException e) {
        throw new YarnRuntimeException(e);
      }
      UserGroupInformation.setLoginUser(ugi);
      super.register();
    }
{code}

We just need to use an identical user name instead of attemptId for UGI. , {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12604278/MAPREDUCE-5514.1.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4021//testReport/
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4021//console

This message is automatically generated., Tx for the analysis. But it doesn't sound right to change the user-name like that - RM communication should have app-attempt-id as user-name for RM communication.

May be the following will work:
{code}
ugi.doAs() {
  super.register();
}
{code}
instead of setLoginUser(). Thoughts?, bq. May be the following will work:

I've done some more investigation and found:

1. We'd like to set the user name with the submitter's user name, which is consistent with what the production code does.

2. We'd like to add the AMRMToken for the ugi, and set it as the login user, because in addition to the register operation, the following operations may require the ugi and its AMRMToken as well, such as makeRequest.

Therefore, IMHO, the current patch is doing the correct thing.

, I've done more investigation on the test failure, and found the test is broken due to YARN-1027.

In the patch of YARN-1027, ResourceManager#clusterTimeStamp is reset every time RM starts. Previously, its a static variable which is initiated when ResourceManager is referred. Moreover, clusterTimeStamp is used to create the application ID, and consequently the application attempt ID.

Therefore, before YARN-1027, all the tests in TestRMContainerAllocator get the same application attempt ID (because clusterTimeStamp is initiated once when ResourceManager is referred), while after YARN-1027, each test gets a different application attempt ID (because clusterTimeStamp reset in each test).

Then, MyContainerAllocator uses the application attempt ID as the login user name. Each test will set login user in UserGroupInformation. One issue here is the loginUser setting in the previous test is visible to the current test, because UserGroupInformation#loginUser is the static variable.

Therefore, in testReportedAppProgress and testReportedAppProgressWithOnlyMaps, when job.xml is written, the user name, which is the application attempt id set in the last test, while TaskAttemptImpl tries to read job.xml with another user name, which is the application attempt id set in the current test.

To sum up, the straightforward way to fix the test is to ensure ResourceManager#clusterTimeStamp consistent throughout the tests in TestRMContainerAllocator, branch-2 is broken as well, but branch-2.1-beta isn't, because YARN-1027 is committed to branch-2, but not to branch-2.1-beta, {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12605121/MAPREDUCE-5514.2.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:red}-1 findbugs{color}.  The patch appears to introduce 1 new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4047//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4047//artifact/trunk/patchprocess/newPatchFindbugsWarningshadoop-yarn-server-resourcemanager.html
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4047//console

This message is automatically generated., Fix the findbugs warning, {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12605139/MAPREDUCE-5514.3.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4048//testReport/
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4048//console

This message is automatically generated., bq. branch-2 is broken as well, but branch-2.1-beta isn't, because YARN-1027 is committed to branch-2, but not to branch-2.1-beta
Tx. Setting the target-version to be 2.3.
, I just committed this. Thanks [~zjshen]!, SUCCESS: Integrated in Hadoop-trunk-Commit #4481 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/4481/])
MAPREDUCE-5514. Fix TestRMContainerAllocator. Contributed by Zhijie Shen. (acmurthy: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1526735)
* /hadoop/common/trunk/hadoop-mapreduce-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/v2/app/TestRMContainerAllocator.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java
, FAILURE: Integrated in Hadoop-Yarn-trunk #345 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk/345/])
MAPREDUCE-5514. Fix TestRMContainerAllocator. Contributed by Zhijie Shen. (acmurthy: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1526735)
* /hadoop/common/trunk/hadoop-mapreduce-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/v2/app/TestRMContainerAllocator.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java
, SUCCESS: Integrated in Hadoop-Hdfs-trunk #1535 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/1535/])
MAPREDUCE-5514. Fix TestRMContainerAllocator. Contributed by Zhijie Shen. (acmurthy: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1526735)
* /hadoop/common/trunk/hadoop-mapreduce-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/v2/app/TestRMContainerAllocator.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java
, FAILURE: Integrated in Hadoop-Mapreduce-trunk #1561 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/1561/])
MAPREDUCE-5514. Fix TestRMContainerAllocator. Contributed by Zhijie Shen. (acmurthy: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1526735)
* /hadoop/common/trunk/hadoop-mapreduce-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/v2/app/TestRMContainerAllocator.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java
]