[In this case, you just killed the NMs and the AM is still running? In that case, RM realizes that the node running AM went down, assumes that AM should also go down and marks it as an invalid App.

It does ask the AM to shut-down as part of the ping-response but it looks like your AM isn't handling that correctly.
{code}
    AllocateResponse allocateResponse = recordFactory
        .newRecordInstance(AllocateResponse.class);
    AMResponse lastResponse = responseMap.get(appAttemptId);
    if (lastResponse == null) {
      LOG.error("AppAttemptId doesnt exist in cache " + appAttemptId);
      allocateResponse.setAMResponse(reboot);
      return allocateResponse;
    }
{code}

See {{AMResponse.getReboot()}}, Hey Vinod,

In this case, I've killed ALL NMs, but the RMs are still running., Okie, then can you check if you are getting a reboot as part of AMResponse in the allocate calls? You should act on that if you are writing your custom AM. MR AM already does something like that., Hey Vinod,

There is no AM running. All NMs are down., Chris, yes I understand that your NM process is down. But when NM goes down, it doesn't kill its containers as of now. So I am sure your AM container process is still running (from the call trace ApplicationMasterService.java:allocate(247) ).

You have to kill this AM process either manually or by handling the value of AMResponse.getReboot() in code.

If this isn't your current job, it should be some stale AM from before., Ahhh, I see. So I should use the mapred AM as an example of how to gracefully shut down in the case where the AM is running with no NM? The AMResponse will denote that I should shut down:


getReboot() 
          Should the ApplicationMaster reboot for being horribly out-of-sync with the ResourceManager as deigned by getResponseId()?

Thanks, I'll use this., bq. But when NM goes down, it doesn't kill its containers as of now.
YARN-72 fixed this, you shouldn't see the issue anymore. Closing as dup, please reopen if you continue to run into issues.]