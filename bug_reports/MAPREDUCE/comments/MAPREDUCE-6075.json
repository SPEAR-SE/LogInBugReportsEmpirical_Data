[Patch to call close() before IOUtils.cleanup so we don't silently swallow close exceptions unless we're already processing another exception., [~jlowe], thanks for your contribution. IIUC, we shouldn't retry close after exception. Please check the following page for more detail: 
http://linux.die.net/man/2/close 

How about calling flush() instead of close() in try blocks?, {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12666918/MAPREDUCE-6075.patch
  against trunk revision 21c0cde.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4857//testReport/
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4857//console

This message is automatically generated., I'm +1 on the change.  The close/null/cleanup is a rather common pattern is hadoop.  Using flush isn't a substitute for a close for all filesystems.  Close must always be allowed to throw an exception and only swallowed when another exception occurred.

In java, close() is supposed to be idempotent so double close is fine.  Double closing a fd is bad because the fd may have already been recycled by another thread., [~daryn], thanks for your point, you're right. +1(non-binding) for Jason's change.

http://docs.oracle.com/javase/7/docs/api/java/io/Closeable.html, Thanks for the reviews, Tsuyoshi and Daryn!  Committing this., I committed this to trunk and branch-2., SUCCESS: Integrated in Hadoop-Yarn-trunk #677 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk/677/])
MAPREDUCE-6075. HistoryServerFileSystemStateStore can create zero-length files. Contributed by Jason Lowe (jlowe: rev 7f80e142096ab21b4852635a127589e34a747bc4)
* hadoop-mapreduce-project/CHANGES.txt
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryServerFileSystemStateStoreService.java
, FAILURE: Integrated in Hadoop-Mapreduce-trunk #1893 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/1893/])
MAPREDUCE-6075. HistoryServerFileSystemStateStore can create zero-length files. Contributed by Jason Lowe (jlowe: rev 7f80e142096ab21b4852635a127589e34a747bc4)
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryServerFileSystemStateStoreService.java
* hadoop-mapreduce-project/CHANGES.txt
, SUCCESS: Integrated in Hadoop-Hdfs-trunk #1868 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/1868/])
MAPREDUCE-6075. HistoryServerFileSystemStateStore can create zero-length files. Contributed by Jason Lowe (jlowe: rev 7f80e142096ab21b4852635a127589e34a747bc4)
* hadoop-mapreduce-project/CHANGES.txt
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryServerFileSystemStateStoreService.java
]