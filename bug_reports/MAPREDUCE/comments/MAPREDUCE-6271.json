[Hi Peng Zhang,
I would like to take up this issue . Please feel free to assign to yourself if you have already started to work on this. , simple patch, [~andreina] I've a patch for reverting getJob(), and tested on cluster hadoop 2.6 with MAPREDUCE-5875 patched. 
If you have other ideas, please let me know.
, {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12703587/MR-6271.patch
  against trunk revision c3003eb.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-client.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/5257//testReport/
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/5257//console

This message is automatically generated., [~jira.shegalov] please help to check this. , Cluster#getJob is a public API and used in different places such as 'mapred job'. It redirects to JHS after the job is finished. If the job configured with counter limits differently from the site/default settings it was not possible to receive status of this job before  MAPREDUCE-5875.

Part of the code that this JIRA restores
{code}
conf = new JobConf(status.getJobFile());
{code}
was also incorrect because it was a silent nop. This constructor loads job conf from a staging directory as if it's a local file. However, that is only true in the local mode. Normally it's on a global DFS. 

I think having modifying the current code to avoid loading the defaults would be a right fix JobConf(false) because job.xml already has them.
FileNotFoundException occurs due to a tolerable race condition when the files are already moved to the history location but you still have not received an updated status. In this case, we have no choice but fall back to the default new JobConf(). , Thanks [~jira.shegalov] for your review.

As your advice, I think not load defaults and ignore or lower FileNotFoundException log level will resolve this issue.

And I have concern that whether job status can be received for client if fall back to the default JobConf() and job configured with counter limits larger than cluster configuration?
Cause I tested with MAPREDUCE-5875 and default jobConf, job with larger counter limits works.

I know 
{code}conf = new JobConf(status.getJobFile());{code}
not works for DFS job file. 
Actually I doubt whether client JobConf need load from job.xml in staging directory, because this job.xml is uploaded from client and most things they are the same.  
, bq. Actually I doubt whether client JobConf need load from job.xml in staging directory, because this job.xml is uploaded from client and most things they are the same.

It's the few things that are different that matter in the end, as in MAPREDUCE-5875 , The change(JobConf load job.xml in staging directory) in MAPREDUCE-5875 is useful.
It can permit multiple clients to read the same job with the same configuration as the client which submit the job.
We have application which use two Clients to read the same job. Without this change in MAPREDUCE-5875, the two clients get different configuration.
{code}
RunningJob runningJob = jobClient.getJob(job.getJobID().toString());
{code}, Thanks [~jira.shegalov] & [~zxu] for your explanation.
As Gera's suggestion, I updated patch to JobConf(false) to remove "attempt to override final parameter" warn log., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12706538/MAPREDUCE-6271.v2.patch
  against trunk revision 82eda77.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/5328//testReport/
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/5328//console

This message is automatically generated., Awaiting the outcome of the MAPREDUCE-6288 discussion before deciding how to proceed here.]