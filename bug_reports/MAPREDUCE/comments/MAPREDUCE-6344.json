[I understand this is a change of behavior from MRv1, but I'm not convinced that this is a bug. As you noted, java makes no promise with regards to the order of enumeration. Furthermore, if your code depends on the ordering of jars, I would definitely consider that a bug. It implies there are multiple copies of the same class sitting in your classpath, and relying on the ordering to get it right is futile., I'm absolutely fine demoting this to an improvement - I'll defer to the experts what they think the severity and type of issue this is.  

However, I do think that determinism is important in this instance and should warrant at least a minor change.  In general, I agree that we should not be packaging the same class multiple times, but I disagree that the effort of ordering is futile.  In fact, hadoop does this quite often - and it even allows users to inject new ordering when they desire (think:  MRJobConfig.MAPREDUCE_JOB_USER_CLASSPATH_FIRST).

Correct me if I'm wrong, but it appears that ordering is already preserved with "non jar" files.  This would just be asking that ordering is also preserved for *all* files in DistributedCache and not just "non jars"., I have attached a proposed fix for this issue.   The basic approach was to: 

* Modify the addToClassPathIfNotJar method to simply be: addToClassPath.  This should retain the order of both archives and non-archives when pulling from distributed cache.

* Moved the "glob" to be the last thing appended to the appended to the classpath.  (This is only needed to ensure a non-breaking change.  This will catch anything that was put in the container but not explicitly enumerated)., Just an FYI, the patch was created off the release-2.5.0 branch., To get attention for your patch, you have to click the "Patch Submitted" button.  I'll go do that for you now., [~pk020157], in the comment explaining what you're doing, let's leave the JIRA line out of it.  Folks can get that from git if they want to know.  Other than that, it looks good to me.  I haven't done any testing, however.]