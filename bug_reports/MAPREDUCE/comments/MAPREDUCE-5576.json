[IIUC, failing the unregistration fails the application. I am not sure if that is a good thing to do. It means we require the JHS be running to be able to run jobs - even implies that JHS HA is required in addition to RM HA for interruption-less submission of MR jobs.

A better approach might to be explicitly log or show that the JHS is down/inaccessible/mis-configured and setting the tracking URL has failed.

If we decide to still go through with this change, we should probably fail the application early - before running the job and not after., bq. IIUC, failing the unregistration fails the application.

Yes, the current design is to fail the application when unregistration is failed. What I mean is that error of getting the history url should not fail unregistration, because ApplicationMasterProtocol#finishApplicationMaster doesn't require to url to finis an application on RM side. The error of getting the history url may be caused by unavailability of JHS, but also be caused by mis configuration (actually we ran into this issue). JHS HA will reduce the chance of error, but it will still happen.

bq. If we decide to still go through with this change, we should probably fail the application early - before running the job and not after.

Agree. In fact, when the url is not available, RM already has the logic to log something. Maybe we want to enhance the log.

bq. A better approach might to be explicitly log or show that the JHS is down/inaccessible/mis-configured and setting the tracking URL has failed.

I don't want to fail the application. As is mentioned above, I don't think it make sense that error of getting the history url should fail unregistration, and ultimately fail the application., Thanks [~zjshen] for the clarification. Read the description again, and I understand the intent now. May be, changing the summary might help make it easier to understand., Ah... I forgot *not* in the title, which completely changes my intention. [~kkambatl], thanks for pointing out the problem. Changed the title.]