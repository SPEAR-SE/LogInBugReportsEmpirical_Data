[MultithreadedMapRunner launches multiple threads to run map() method in parallel, but seems all the threads share a singal object of OutputCollector to write output of map() method into buffer. It should be the reason that the ArrayIndexOutOfBoundsException occurs at org.apache.hadoop.mapred.MapTask$MapOutputBuffer$Buffer.write(MapTask.java:1331).

Therefore, I modified my WordCount MR application to move Mapper/Reducer output.collect(...) statements into a 'synchronized (output)' block. And then, no ArrayIndexOutOfBoundsException occurs any more, and the job could execute successfully. Taking my updated code in map() method as example:
			synchronized (output) {
				while (tokenizer.hasMoreTokens()) {
					word.set(tokenizer.nextToken());
					output.collect(word, one);
				}
			}
And its original code is as below:
				while (tokenizer.hasMoreTokens()) {
					word.set(tokenizer.nextToken());
					output.collect(word, one);
				}

If that's the case, I would like to make a summay: When using MultithreadedMapRunner, the ways to invoke OutputCollector object in Map/Reduce methods should be thread safe. And a general way is to move Mapper/Reducer output.collect(...) statements into a 'synchronized (output)' block. 

Any comments will be welcomed!, collect is already synchronized. The exception is probably due to
sharing the 'word' field across threads. If you use a ThreadLocal for
that field, do you still see the exception? -C

, Resolving as WONTFIX since mr1 has been removed.]