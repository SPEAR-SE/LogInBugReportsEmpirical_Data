[This is an improvement in terms of more robust error handling. I think it need not make the Hadoop 0.19 release., Attaching a patch that does the following 
- Allows {{JobInProgressListener.jobAdded()}} to throw an exception
- If {{jobAdded}} fails for any listener then the job is failed and all the listeners are informed about it. The reason the job is _failed_ is because job files should be cleaned up and also the user can check the job's status offline.

Added a testcase to test if job submission works as expected., Why can't we just let the JobTracker reject jobs that are submitted to invalid queues? That is what is done when the situation happens with ACLs enabled. Queues reside with the core framework, so I think JT can reject them right away even before the schedulers are informed. No?, Vinod, I have tried implementing a general way to reject jobs. There can be many reasons for not accepting a job like _invalid-queue, missing files, blacklisted users, blocked queue_ etc. In any case if a  listener throws an exception the framework will simply reject the job. I thought that way the contract is clear and also the solution is generic., Looks like we already have this immediate-failure (regardless of ACLs). Issue's probably gone stale and this was fixed elsewhere.

{code}
org.apache.hadoop.ipc.RemoteException(java.io.IOException): Queue "invalid" does not exist
	at org.apache.hadoop.mapred.JobTracker.submitJob(JobTracker.java:3521)
	at org.apache.hadoop.mapred.JobTracker.submitJob(JobTracker.java:3475)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
{code}]