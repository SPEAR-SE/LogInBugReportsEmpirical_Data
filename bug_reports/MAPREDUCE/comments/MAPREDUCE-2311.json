[Sorry. This was my bad., Sorry. This was my bad., Hi Scott, thanks for the patch.  Can you explain the code change in FairScheduler updateRunnability method? , Looks like the above change reverts back part of fix for https://issues.apache.org/jira/browse/MAPREDUCE-1825 . Does that mean 1825 needs to be reopened or tested again?, Yes, I reverted part of the change in updateRunnability.
The change is wrong because jobs are initialized in this method.

Priyo: It would be nice if you can do the same test that you have done on 1825., ant clean test result
{code}

    [junit] Running org.apache.hadoop.mapred.TestSimulatorDeterministicReplay
    [junit] Tests run: 1, Failures: 0, Errors: 1, Time elapsed: 0 sec 
--
    [junit] Running org.apache.hadoop.mapred.TestSimulatorEndToEnd
    [junit] Tests run: 1, Failures: 0, Errors: 1, Time elapsed: 0 sec 
--
    [junit] Running org.apache.hadoop.mapred.TestSimulatorSerialJobSubmission
    [junit] Tests run: 1, Failures: 0, Errors: 1, Time elapsed: 0 sec 
--
    [junit] Running org.apache.hadoop.mapred.TestSimulatorStressJobSubmission
    [junit] Tests run: 1, Failures: 0, Errors: 1, Time elapsed: 0 sec 
--
    [junit] Running org.apache.hadoop.raid.TestBlockFixer
    [junit] Tests run: 14, Failures: 0, Errors: 1, Time elapsed: 675.704 sec 
{code}, test patch result:
{code}

     [exec] 
     [exec] +1 overall.  
     [exec] 
     [exec]     +1 @author.  The patch does not contain any @author tags.
     [exec] 
     [exec]     +1 tests included.  The patch appears to include 3 new or modified tests.
     [exec] 
     [exec]     +1 javadoc.  The javadoc tool did not generate any warning messages.
     [exec] 
     [exec]     +1 javac.  The applied patch does not increase the total number of javac compiler warnings.
     [exec] 
     [exec]     +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.
     [exec] 
     [exec]     +1 release audit.  The applied patch does not increase the total number of release audit warnings.
     [exec] 
     [exec]     +1 system test framework.  The patch passed system test framework compile.
     [exec] 
     [exec] 
     [exec] 
     [exec] 
     [exec] ======================================================================
     [exec] ======================================================================
     [exec]     Finished build.
     [exec] ======================================================================
     [exec] ======================================================================
{code}, The failed tests TestSimulator* are because of timeout.
TestBlockFixer failed because of tasktracker crashed. All failed tests are not related to this patch.
{code}

11/02/08 23:06:54 ERROR mapred.MiniMRCluster: task tracker 3 crashed
java.io.IOException: Cannot run program "chmod": java.io.IOException: error=24, Too many open files 
  at java.lang.ProcessBuilder.start(ProcessBuilder.java:459)
  at org.apache.hadoop.util.Shell.runCommand(Shell.java:206)
  at org.apache.hadoop.util.Shell.run(Shell.java:188)
  at org.apache.hadoop.util.Shell$ShellCommandExecutor.execute(Shell.java:381)
  at org.apache.hadoop.util.Shell.execCommand(Shell.java:467)
  at org.apache.hadoop.util.Shell.execCommand(Shell.java:450)
  at org.apache.hadoop.fs.RawLocalFileSystem.execCommand(RawLocalFileSystem.java:571)
  at org.apache.hadoop.fs.RawLocalFileSystem.setPermission(RawLocalFileSystem.java:562)
  at org.apache.hadoop.fs.FilterFileSystem.setPermission(FilterFileSystem.java:352)
  at org.apache.hadoop.mapred.TaskController.setup(TaskController.java:90)
  at org.apache.hadoop.mapred.TaskTracker.initialize(TaskTracker.java:698)
  at org.apache.hadoop.mapred.TaskTracker.<init>(TaskTracker.java:1391)
  at org.apache.hadoop.mapred.MiniMRCluster$TaskTrackerRunner.createTaskTracker(MiniMRCluster.java:219)
  at org.apache.hadoop.mapred.MiniMRCluster$TaskTrackerRunner$1.run(MiniMRCluster.java:203)
  at org.apache.hadoop.mapred.MiniMRCluster$TaskTrackerRunner$1.run(MiniMRCluster.java:201)
  at java.security.AccessController.doPrivileged(Native Method)
  at javax.security.auth.Subject.doAs(Subject.java:396)
  at org.apache.hadoop.security.UserGroupInformation.doAs(UserGroupInformation.java:1142)
  at org.apache.hadoop.mapred.MiniMRCluster$TaskTrackerRunner.<init>(MiniMRCluster.java:201)
  at org.apache.hadoop.mapred.MiniMRCluster.startTaskTracker(MiniMRCluster.java:716)
  at org.apache.hadoop.mapred.MiniMRCluster.<init>(MiniMRCluster.java:541)
  at org.apache.hadoop.mapred.MiniMRCluster.<init>(MiniMRCluster.java:482)
  at org.apache.hadoop.mapred.MiniMRCluster.<init>(MiniMRCluster.java:474)
  at org.apache.hadoop.mapred.MiniMRCluster.<init>(MiniMRCluster.java:466)
  at org.apache.hadoop.mapred.MiniMRCluster.<init>(MiniMRCluster.java:458)
  at org.apache.hadoop.mapred.MiniMRCluster.<init>(MiniMRCluster.java:448)
  at org.apache.hadoop.mapred.MiniMRCluster.<init>(MiniMRCluster.java:438)
  at org.apache.hadoop.mapred.MiniMRCluster.<init>(MiniMRCluster.java:429)
  at org.apache.hadoop.raid.TestBlockFixer.mySetup(TestBlockFixer.java:821)
  at org.apache.hadoop.raid.TestBlockFixer.testMaxPendingFiles(TestBlockFixer.java:685)
  at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
  at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
  at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
  at java.lang.reflect.Method.invoke(Method.java:597)
  at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)
  at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
  at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)
  at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
  at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:76)
  at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
  at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)
  at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)
  at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)
  at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)
  at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)
  at org.junit.runners.ParentRunner.run(ParentRunner.java:236)
  at junit.framework.JUnit4TestAdapter.run(JUnit4TestAdapter.java:39)
  at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:422)
  at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.launch(JUnitTestRunner.java:931)
  at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.main(JUnitTestRunner.java:785)
Caused by: java.io.IOException: java.io.IOException: error=24, Too many open files
  at java.lang.UNIXProcess.<init>(UNIXProcess.java:148)
  at java.lang.ProcessImpl.start(ProcessImpl.java:65)
  at java.lang.ProcessBuilder.start(ProcessBuilder.java:452)
  ... 49 more
{code}, +1, looks good Scott, thanks for fixing so quickly., I just committed this. Thanks Todd and Priyo.

Priyo: The change should not affect 1825. In updateRunnability() none of the JobInProgress methods called are synchronized. So this should be OK., Integrated in Hadoop-Mapreduce-trunk-Commit #608 (See [https://hudson.apache.org/hudson/job/Hadoop-Mapreduce-trunk-Commit/608/])
    MAPREDUCE-2311. Fix TestFairScheduler failure (schen)
, Integrated in Hadoop-Mapreduce-22-branch #33 (See [https://hudson.apache.org/hudson/job/Hadoop-Mapreduce-22-branch/33/])
    , Integrated in Hadoop-Mapreduce-trunk #643 (See [https://hudson.apache.org/hudson/job/Hadoop-Mapreduce-trunk/643/])
    ]