[patch uploaded., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12623004/MAPREDUCE-5723.1.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:red}-1 core tests{color}.  The patch failed these unit tests in hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app:

                  org.apache.hadoop.mapreduce.v2.app.TestRMContainerAllocator

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4318//testReport/
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4318//console

This message is automatically generated., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12623211/MAPREDUCE-5723.2.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:red}-1 core tests{color}.  The patch failed these unit tests in hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app:

                  org.apache.hadoop.mapreduce.v2.app.TestRMContainerAllocator

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4319//testReport/
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4319//console

This message is automatically generated., I think the clean way, though slightly more involved, would be to have MRAppMaster implement serviceStop() and call LogManager.shutdown() there. 

While at it, I also think the {{MRAppMasterShutdownHook}} should only call appMaster.stop() and rest of the items should move to serviceStop().
{code}
    public void run() {
      LOG.info("MRAppMaster received a signal. Signaling RMCommunicator and "
        + "JobHistoryEventHandler.");

      // Notify the JHEH and RMCommunicator that a SIGTERM has been received so
      // that they don't take too long in shutting down
      if(appMaster.containerAllocator instanceof ContainerAllocatorRouter) {
        ((ContainerAllocatorRouter) appMaster.containerAllocator)
          .setSignalled(true);
      }
      appMaster.notifyIsLastAMRetry(appMaster.isLastAMRetry);
      appMaster.stop();
    }
{code}

Further, instead of calling System.exit(1), we should call ExitUtil.terminate(1, t):
{code}
    } catch (Throwable t) {
      LOG.fatal("Error starting MRAppMaster", t);
      System.exit(1);
{code}, Thanks [~kkambatl] for your proposal. I will put a patch based on that.

In the mean time, do you have any idea why the test case is failing? If I run it myself w/o any code changes the test case still fails.


, patch with review comments addressed, Thanks [~kamrul]. The patch definitely looks better now. Should have mentioned this earlier, but it would be nice to add a unit test. How about something that just verifies LogManager.shutdown is called - may be using spy? 

I ll have to verify why TestRMContainerAllocator is failing, but we can ignore the failure if it is also failing on trunk without the patch. , {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12623305/MAPREDUCE-5723.3.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:red}-1 core tests{color}.  The patch failed these unit tests in hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app:

                  org.apache.hadoop.mapreduce.v2.app.TestRMContainerAllocator

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4323//testReport/
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4323//console

This message is automatically generated., * No new functionality is added. Therefore,no new test case is required. But I tested it in a cluster setup.

Failed test case: It is unrelated to this change. There is a separate JIRA to address this issue:
 https://issues.apache.org/jira/browse/MAPREDUCE-5719

, Agree with Karthik that a test case would be nice because unit tests are useful for regression tests and not just for new functionality.  However this will be a bit tricky to test via spy since LogManager.shutdown is a static function, and MRAppMaster is not invoking it via an object that can be modified for testing.  For this patch I'm OK if it doesn't have a test since it's relatively small and straightforward, but in general we want unit tests even if it's just a bugfix.

As for the patch itself, we need to call LogManager.shutdown() after super.stop(), otherwise we end up shutting down the logging system before shutting down all the services registered within the MRAppMaster service.  We want to see the logs of those sub-services shutting down., Elevating priority and updating the summary since this is subsuming MAPREDUCE-5730, and AM logs are essentially broken since MAPREDUCE-5694.

Also the Fix Version/s field in JIRA should only be filled out when the patch is committed to indicate where it has been fixed.  The Target Version/s field indicates where the JIRA is targeted to be fixed., New patch addressed Jason's comment.

I'm not sure if adding a spy test for this is required. , +1. Looks good to me. Will commit this later today, if there are no objections. , +1, lgtm as well., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12624431/MAPREDUCE-5723.4.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:red}-1 core tests{color}.  The patch failed these unit tests in hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app:

                  org.apache.hadoop.mapreduce.v2.app.TestRMContainerAllocator

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4334//testReport/
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4334//console

This message is automatically generated., Is it possible to push patch into branch 2.2.x?, Thanks Mohammad for the contribution. Just committed this to trunk and branch-2., bq. Is it possible to push patch into branch 2.2.x?
This should go in after MAPREDUCE-5694. I am okay with including these in 2.3, but the branch is not ready yet. [~acmurthy] - do you think we can include both in 2.3? , SUCCESS: Integrated in Hadoop-trunk-Commit #5036 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/5036/])
MAPREDUCE-5723. MR AM container log can be truncated or empty. (Mohammad Kamrul Islam via kasha) (kasha: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1560592)
* /hadoop/common/trunk/hadoop-mapreduce-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/MRAppMaster.java
, FAILURE: Integrated in Hadoop-Yarn-trunk #461 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk/461/])
MAPREDUCE-5723. MR AM container log can be truncated or empty. (Mohammad Kamrul Islam via kasha) (kasha: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1560592)
* /hadoop/common/trunk/hadoop-mapreduce-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/MRAppMaster.java
, FAILURE: Integrated in Hadoop-Mapreduce-trunk #1678 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/1678/])
MAPREDUCE-5723. MR AM container log can be truncated or empty. (Mohammad Kamrul Islam via kasha) (kasha: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1560592)
* /hadoop/common/trunk/hadoop-mapreduce-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/MRAppMaster.java
, SUCCESS: Integrated in Hadoop-Hdfs-trunk #1653 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/1653/])
MAPREDUCE-5723. MR AM container log can be truncated or empty. (Mohammad Kamrul Islam via kasha) (kasha: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1560592)
* /hadoop/common/trunk/hadoop-mapreduce-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/MRAppMaster.java
]