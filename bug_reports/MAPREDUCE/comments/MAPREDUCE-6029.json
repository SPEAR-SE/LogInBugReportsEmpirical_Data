[I'm aware of this issue. I'll post a patch this afternoon., The test allows 100msec for a response, and if the node is too slow the test fails.  100msec is quite a bit of time, but I made it a 5 second wait.  The test will only wait that long if it really takes that long for the event to be posted.  If the event shows up sooner the timeout is short-circuited so there shouldn't be a lot of downside to making this much larger., {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12660707/MAPREDUCE-6029.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4795//testReport/
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4795//console

This message is automatically generated., Thanks for the patch, Mit.  I agree with the premise that 100msec is probably too little, but I'm wondering about spurious wakeups.  If they occur then the test can still fail even with the larger timeout.  We should wait in a loop for either the event to be non-null or a duration of time to have elapsed., Thanks for taking a look [~jlowe]. Attached the patch addressing your comments., {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12673182/MAPREDUCE-6029.patch
  against trunk revision 3affad9.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4934//testReport/
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4934//console

This message is automatically generated., Thanks for the update Mit, but the latest change doesn't address the issue.  The problem still can occur if we are spuriously woken up quickly for each of the 10 wait calls.  Granted this is not likely, but it is theoretically possible.  I was thinking something more along these lines:
{code}
if (event == null) {
  final waitTimeout = 5000;
  long waitStartTime = Time.monotonicNow();
  do {
    wait(waitTimeout);
  } while (event == null && Time.monotonicNow() - waitStartTime < waitTimeout);
}
{code}, Thanks Jason! I was relying on the fact that false wakeups should be rare and looping 10 times might work but can not be guaranteed. I will update the patch., Attaching the modified patch., {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12673225/MAPREDUCE-6029.patch
  against trunk revision 8dc6abf.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4937//testReport/
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4937//console

This message is automatically generated., +1 lgtm.  Committing this., Thanks Jason!!!, Thanks, Mit!  I committed this to trunk, branch-2, and branch-2.6., FAILURE: Integrated in Hadoop-trunk-Commit #6204 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/6204/])
MAPREDUCE-6029. TestCommitterEventHandler fails in trunk. Contributed by Mit Desai (jlowe: rev 2e789eb2261fa607489d8ae630fb77e8147d0266)
* hadoop-mapreduce-project/CHANGES.txt
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/v2/app/commit/TestCommitterEventHandler.java
, FAILURE: Integrated in Hadoop-Yarn-trunk #705 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk/705/])
MAPREDUCE-6029. TestCommitterEventHandler fails in trunk. Contributed by Mit Desai (jlowe: rev 2e789eb2261fa607489d8ae630fb77e8147d0266)
* hadoop-mapreduce-project/CHANGES.txt
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/v2/app/commit/TestCommitterEventHandler.java
, FAILURE: Integrated in Hadoop-Hdfs-trunk #1895 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/1895/])
MAPREDUCE-6029. TestCommitterEventHandler fails in trunk. Contributed by Mit Desai (jlowe: rev 2e789eb2261fa607489d8ae630fb77e8147d0266)
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/v2/app/commit/TestCommitterEventHandler.java
* hadoop-mapreduce-project/CHANGES.txt
, FAILURE: Integrated in Hadoop-Mapreduce-trunk #1920 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/1920/])
MAPREDUCE-6029. TestCommitterEventHandler fails in trunk. Contributed by Mit Desai (jlowe: rev 2e789eb2261fa607489d8ae630fb77e8147d0266)
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/v2/app/commit/TestCommitterEventHandler.java
* hadoop-mapreduce-project/CHANGES.txt
]