[Having a look at what I'd done w.r.t service lifecycle [http://svn.eu.apache.org/viewvc/hadoop/common/branches/HADOOP-3628-2/src/core/org/apache/hadoop/util/Service.java?view=markup] I avoided this by having the base class do all the checks in final methods and have overridable {{innerStart()}}, {{innerStop()}} etc. methods that subclasses would use to perform their custom operations, along with a static class to actually walk a service into its started state.

There is no reason why the {{AbstractService}} class cannot use the same technique, without changing the {{Service}} interface. It would declare it's init/start/stop methods final, do the state change, then delegate to the {{protected}} methods {{innerInit()}} {{innerStart()}}, {{innerStop()}}. These would not be externally visible, and not get invoked until the validity of the operation had been tested. 

Effort: 
 # time to rework the older service lifecycle methods into the new framework, 1 h
 # time to go through all the subclasses and rename their init/start/stop methods to be the inner ones. 

We could use a better prefix than "inner" if anyone can think of it.]