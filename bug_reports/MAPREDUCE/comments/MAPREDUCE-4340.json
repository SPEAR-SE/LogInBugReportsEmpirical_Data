[I have investigated some things for this issue, it seems to be due to FileSystem Cache.

The Node Manager gets the FileSystem object for copying the files from DFS during localization. 
 

{code:title=FSDownload.java|borderStyle=solid}
  private Path copy(Path sCopy, Path dstdir) throws IOException {
    FileSystem sourceFs = sCopy.getFileSystem(conf);
    Path dCopy = new Path(dstdir, sCopy.getName() + ".tmp");
    FileStatus sStat = sourceFs.getFileStatus(sCopy);
    if (sStat.getModificationTime() != resource.getTimestamp()) {
      throw new IOException("Resource " + sCopy +
          " changed on src filesystem (expected " + resource.getTimestamp() +
          ", was " + sStat.getModificationTime());
    }

    sourceFs.copyToLocalFile(sCopy, dCopy);
    return dCopy;
  }
{code} 

It is using the FileSystem.get(URI uri, Configuration conf) API to get file system instance, and it internally uses cache for file system instances. For next job, FileSystem.Cache.Key is not matching with previous instance key, creating new file system instance again and it is keep on increasing for every job. For every file system instance there is associated DFSClient instance which is holding the datanode socket in socketCache and it is not closing by any one., Hi Deva,
Following is the reason for the new filesystem instance creation for every job.
FileSystem.Cache.Key uses scheme, authority and ugi to compare.

NodeManager creates ugi for every job submitted as follows.
{code:java}UserGroupInformation ugi = UserGroupInformation
        .createRemoteUser("user");{code}

UserGroupInformation.createRemoteUser(..) will always returns a different ugi instance with different hashcode even with same username.

so filesystem instance created with this ugi instance will result in new instance of FileSystem. 

If after reading data from fs, filesystem is not closed, then all sockets present inside the DFSClient#socketCache will be present resulting in socket leak.

In NodeManager FileSystem instance for each ugi needs to be closed once all operations done with that fs.


Below is the sample code to get the different instance of the filesystems with different UGIs.
{code:java}public static void main(String[] args) throws IOException,
      InterruptedException {
    final HdfsConfiguration conf = new HdfsConfiguration();
    final Path path1 = new Path("file:///home");
    final Path path2 = new Path("file:///home2");

    UserGroupInformation ugi = UserGroupInformation.createRemoteUser("user");
    FileSystem fs = ugi.doAs(new PrivilegedExceptionAction<FileSystem>() {
      @Override
      public FileSystem run() throws Exception {
        return path1.getFileSystem(conf);
      }
    });

    UserGroupInformation ugi2 = UserGroupInformation.createRemoteUser("user");
    FileSystem fs2 = ugi2.doAs(new PrivilegedExceptionAction<FileSystem>() {
      @Override
      public FileSystem run() throws Exception {
        return path2.getFileSystem(conf);
      }
    });
    System.out.println(ugi + "  : " + fs);
    System.out.println(ugi2 + " : " + fs2);
  }{code}, This appears to be a duplicate of MAPREDUCE-4323.  I'm testing a fix using {{closeAllForUGI}} that will prevent both the socket leak AND the DFS/DFSClient leaks., Duplicate of MAPREDUCE-4323]