[HTTP ERROR: 500
INTERNAL_SERVER_ERROR
RequestURI=/jobtracker.jsp
Caused by:
java.util.ConcurrentModificationException
        at java.util.TreeMap$PrivateEntryIterator.nextEntry(TreeMap.java:1100)
        at java.util.TreeMap$ValueIterator.next(TreeMap.java:1145)
        at org.apache.hadoop.mapred.JobTracker.runningJobs(JobTracker.java:2536)
        at org.apache.hadoop.mapred.jobtracker_jsp._jspService(jobtracker_jsp.java:100)
        at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:97)
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:820)
        at org.mortbay.jetty.servlet.ServletHolder.handle(ServletHolder.java:502)
        at org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:363)
        at org.mortbay.jetty.security.SecurityHandler.handle(SecurityHandler.java:216)
        at org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:181)
        at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:766)
        at org.mortbay.jetty.webapp.WebAppContext.handle(WebAppContext.java:417)
        at org.mortbay.jetty.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:230)
        at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152)
        at org.mortbay.jetty.Server.handle(Server.java:324)
        at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:534)
        at org.mortbay.jetty.HttpConnection$RequestHandler.headerComplete(HttpConnection.java:864)
        at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:533)
        at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:207)
        at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:403)
        at org.mortbay.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:409)
        at org.mortbay.thread.QueuedThreadPool$PoolThread.run(QueuedThreadPool.java:522)
 , This was fixed in MAPREDUCE-679 by adding synchronized versions of the unsynchronized methods. I'm not sure of the virtue of unsynchronized versions., duplicate of MAPREDUCE-679, This still exists in 0.20, right? Sorry, I only mentioned MAPREDUCE-679 because this was fixed as a detour in that issue and the fix should either be backported or changed to match whatever approach is agreed on here., The assertion is in a jetty thread, so this is not a blocker for 0.20, isn't it? That means it might never get into 0.20 release!, This is no longer an issue in the current stable releases. The locking is properly taken care of, and the accessor methods to jobs map all hold lock before trying to work with it.

We've not seen this report come up in the past year as well., Actually, lemme correct myself. The JSP service, which was completely ignored in my debugging here, seems to use the should-not-be-public runningJobs API that is not synchronized. Attaching patch to fix it to call getRunningJobs(â€¦) which is indeed synchronized., A very small subset of the patch at MAPREDUCE-679, which only changes the JSP's job list calls to their synchronized counterparts.

Issue is already fixed in 0.22., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12517895/MAPREDUCE-1109.patch
  against trunk revision .

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    -1 patch.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/2034//console

This message is automatically generated., +1

Can you run test-patch manually please?, Thanks for the review Tom.

{code}
test-patch:
    [exec] -1 overall.
    [exec]
    [exec]     +1 @author.  The patch does not contain any @author tags.
    [exec]
    [exec]     -1 tests included. The patch doesn't appear to include any new or modified tests.
    [exec]           Please justify why no new tests are needed for this patch.
    [exec]           Also please list what manual steps were performed to verify this patch.
    [exec]
    [exec]     +1 javadoc.  The javadoc tool did not generate any warning messages.
    [exec]
    [exec]     +1 javac.  The applied patch does not increase the total number of javac compiler warnings.
    [exec]
    [exec]     +1 findbugs.  The patch does not introduce any new Findbugs warnings.
    [exec]
    [exec]     +1 release audit.  The applied patch does not increase the total number of release audit warnings.
{code}, The concurrency tests for the switched methods are already available as separate tests from other fixes before this.

Committed to branch-1., This seems to have broken compilation of branch-1. I reverted the change., Shit, my bad. The posted patch is from a completely wrong branch of my git repo - I had not realized I ran the test-patch against a branch not branch-1.

Sorry for the pain folks! Here is a new patch attached. I will post my *proper* test-patch results shortly., The javac warnings further, were cause of a bad link to SequenceFile.Sorter (inner class)

{code}[WARNING] /Users/harshchouraria/Work/code/apache/hadoop/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/CommonConfigurationKeysPublic.java:142: warning - Tag @link: reference not found: SequenceFile.Sorter{code}

In this new patch I've fixed the javac warns and javadoc warns both., Nevermind the previous comment. Was meant for HADOOP-6801., I've not seen this CME occur on the JT UI in 1.x nor heard any further reports of it either. I'm resolving as Not a Problem for now.]