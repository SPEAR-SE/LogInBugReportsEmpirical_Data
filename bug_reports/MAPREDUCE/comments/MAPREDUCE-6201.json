[MAPREDUCE-6508 is still open for tracking failures of TestNetworkedJob. I think it is still get failed intermittently. Isn't it?, I believe TestNetworkedJob still get consistently failed on trunk, so we shouldn't close this JIRA as "Cannot Reproduce". We should resolve this as duplicate of MAPREDUCE-6508 which already have a patch to go soon., [~djp] thanks for looking into this. MAPREDUCE-6508 is broken by YARN-4126,and this jira failure is different (stack trace is fully different for both jira's ) which was very old..Since the root cause is different for both jira's(even testcase is same) and currently mentioned failure is not able to reproduce hence I closed..
 , Oh. My bad... I will roll back as Cannot Reproduce. Thanks for pointing that out, [~brahmareddy]!, I'm reopening this because I was able to reproduce the test failure., We have to increase "yarn.nodemanager.disk-health-checker.max-disk-utilization-per-disk-percentage". The disk checker turns the Mini cluster node status to {{UNHEALTHY}}. When we call {{client.getClusterStatus(true)}}, {{getActiveTrackerNames.size()}} will be 0 because nodes are not in {{RUNNING}} status - see {{ResourceMgrDelegate.getActiveTrackers()}}., | (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue} 0m 16s {color} | {color:blue} Docker mode activated. {color} |
| {color:green}+1{color} | {color:green} @author {color} | {color:green} 0m 0s {color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:green}+1{color} | {color:green} test4tests {color} | {color:green} 0m 0s {color} | {color:green} The patch appears to include 1 new or modified test files. {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 13m 43s {color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 0m 23s {color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green} 0m 17s {color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green} 0m 25s {color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green} 0m 15s {color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green} 0m 24s {color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 0m 12s {color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 0m 21s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 0m 20s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green} 0m 20s {color} | {color:green} the patch passed {color} |
| {color:red}-1{color} | {color:red} checkstyle {color} | {color:red} 0m 14s {color} | {color:red} hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient: The patch generated 1 new + 13 unchanged - 0 fixed = 14 total (was 13) {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green} 0m 22s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green} 0m 12s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green} 0m 0s {color} | {color:green} The patch has no whitespace issues. {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green} 0m 29s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 0m 9s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} unit {color} | {color:green} 107m 50s {color} | {color:green} hadoop-mapreduce-client-jobclient in the patch passed. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green} 0m 36s {color} | {color:green} The patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black} 127m 6s {color} | {color:black} {color} |
\\
\\
|| Subsystem || Report/Notes ||
| Docker |  Image:yetus/hadoop:a9ad5d6 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12851391/MAPREDUCE-6201-002.patch |
| JIRA Issue | MAPREDUCE-6201 |
| Optional Tests |  asflicense  compile  javac  javadoc  mvninstall  mvnsite  unit  findbugs  checkstyle  |
| uname | Linux 801bd9f34208 3.13.0-106-generic #153-Ubuntu SMP Tue Dec 6 15:44:32 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | /testptch/hadoop/patchprocess/precommit/personality/provided.sh |
| git revision | trunk / 9dbfab1 |
| Default Java | 1.8.0_121 |
| findbugs | v3.0.0 |
| checkstyle | https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/6894/artifact/patchprocess/diff-checkstyle-hadoop-mapreduce-project_hadoop-mapreduce-client_hadoop-mapreduce-client-jobclient.txt |
|  Test Results | https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/6894/testReport/ |
| modules | C: hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient U: hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient |
| Console output | https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/6894/console |
| Powered by | Apache Yetus 0.3.0   http://yetus.apache.org |


This message was automatically generated.

, | (/) *{color:green}+1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue} 0m 21s {color} | {color:blue} Docker mode activated. {color} |
| {color:green}+1{color} | {color:green} @author {color} | {color:green} 0m 0s {color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:green}+1{color} | {color:green} test4tests {color} | {color:green} 0m 0s {color} | {color:green} The patch appears to include 1 new or modified test files. {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 18m 22s {color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 0m 38s {color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green} 0m 28s {color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green} 0m 35s {color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green} 0m 19s {color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green} 0m 32s {color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 0m 15s {color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 0m 22s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 0m 22s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green} 0m 22s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green} 0m 13s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green} 0m 25s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green} 0m 12s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green} 0m 0s {color} | {color:green} The patch has no whitespace issues. {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green} 0m 32s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 0m 10s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} unit {color} | {color:green} 107m 54s {color} | {color:green} hadoop-mapreduce-client-jobclient in the patch passed. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green} 0m 29s {color} | {color:green} The patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black} 132m 54s {color} | {color:black} {color} |
\\
\\
|| Subsystem || Report/Notes ||
| Docker |  Image:yetus/hadoop:a9ad5d6 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12851613/MAPREDUCE-6201-003.patch |
| JIRA Issue | MAPREDUCE-6201 |
| Optional Tests |  asflicense  compile  javac  javadoc  mvninstall  mvnsite  unit  findbugs  checkstyle  |
| uname | Linux 1ed46dc60e90 3.13.0-106-generic #153-Ubuntu SMP Tue Dec 6 15:44:32 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | /testptch/hadoop/patchprocess/precommit/personality/provided.sh |
| git revision | trunk / eec52e1 |
| Default Java | 1.8.0_121 |
| findbugs | v3.0.0 |
|  Test Results | https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/6897/testReport/ |
| modules | C: hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient U: hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient |
| Console output | https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/6897/console |
| Powered by | Apache Yetus 0.3.0   http://yetus.apache.org |


This message was automatically generated.

, Thanks [~pbacsko] for your patch! While increasing NM_MAX_PER_DISK_UTILIZATION_PERCENTAGE would definitely make the test less likely to fail because of NM disks going nearly full, it does not eliminate the issue completely. I suppose it is a general issue for any test that uses MiniYarnCluster. I wonder if we can add some message in the assert statements to make it more explicit to diagnose., I took the value "99" from Oozie, where the disk health check can also cause hard to debug problems.

What if we set it to 100? Could that help? If the disk is totally full, then it doesn't really matter anyway.
, I think part of the problem, and this is what we saw in Oozie too, is that disks are much bigger than they used to be, so a percentage check on disk space doesn't work as well.  For instance, on a 500GB drive, 99% full would mean that there's 5GB free.  While you should probably do some cleanup with only 5GB free, it should be more than enough space for anything a unit test is going to do.  

Anyway, I think 100 would be best here.  If the disk if full, you'll hit all kinds of other problems first anyway., Thanks for the clarification, [~rkanter]. While I agree with you on that if the disk full we'll hit all other problems first, I am not sure if that is necessarily the best thing in this particular test. In testNetworkedJob, before we check cluster status, we submit a job to the cluster. If the job fails mysteriously because of the disk space issue, that will only make debugging the test failure even harder.  Thus, I think if we cannot make the failure surface both clearly and early, we should add assert messages to give some hints on the cause., With 100% disk usage, the other problems I was referring to would be OS-level problems.  If you've ever tried to use Windows or a Mac with only a few megabytes of disk space level, you'll run into all kinds of funky problems.  However, I was thinking about this more, and whoever/whatever running the test might have a quota on the disk, which would trigger the same issue, without the OS being affected, so I think you're right that we shouldn't do 100.

A more clear message failing the test would be best.  Maybe assert that the configured amount of disk space is free at the beginning of the test?  I do think that setting this to a higher value like 95 or 99 or something is also reasonable to do given that the job the test runs shouldn't generate much data., I was thinking of the following approach:

1) Increase disk utilization percentage.
2) Before we verify the number of active trackers, check if the node status is {{UNHEALTHY}} or not. If it is, then we explicitly show this in an error message with a hint that the issue might be related to the lack of disk space.

Certainly we can verify the amount of free space but I think it would make the test just more complicated. To me this solution looks safe., [~pbacsko] +1 on your approach., +1, Thanks [~pbacsko] and [~haibochen] for review.  Committed to trunk!, SUCCESS: Integrated in Jenkins build Hadoop-trunk-Commit #11545 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/11545/])
MAPREDUCE-6201. TestNetworkedJob fails on trunk (pbacsko via rkanter) (rkanter: rev e7167e4a1323cff3edfa45750b927b198c5fbc0a)
* (edit) hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/test/java/org/apache/hadoop/mapred/TestNetworkedJob.java
, SUCCESS: Integrated in Jenkins build Hadoop-trunk-Commit #11591 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/11591/])
MAPREDUCE-6201. TestNetworkedJob fails on trunk (pbacsko via rkanter) (rkanter: rev e7167e4a1323cff3edfa45750b927b198c5fbc0a)
* (edit) hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/test/java/org/apache/hadoop/mapred/TestNetworkedJob.java
]