[debug result: 

 private void waitTillRetire(JobID id, JobTracker jobtracker) {
    //wait for job to get retired
    JobInProgress job = jobtracker.getJob(id);
    for (int i = 0; i < 10 && job != null; i++) {
      UtilsForTests.waitFor(1000);  
      job = jobtracker.getJob(id);
    }
    assertNull("Job did not retire", job); <<===== assertion job != null

Conclusion: this is a timing issue, build and run with IBM JAVA 7, this particular jobs does not terminate in the given maximum time of 10sec, Works with >15 sec on a TP520.
Having a hardcoded max time is not recommanded..
We are testing a patch.. will be up loaded shortly ..

  , like submit these changes to waitTillRetire() in TestJobRetire.java  patch, any suggestions?
 private void waitTillRetire(JobID id, JobTracker jobtracker) {
    //wait for job to get retired
	int noSec = Integer.parseInt(System.getProperty("test.job.retire.timeout", "10")); <<==== added
	JobInProgress job = jobtracker.getJob(id);
    for (int i = 0; i < noSec && job != null; i++) {                                       <==== changed
      UtilsForTests.waitFor(1000);
      job = jobtracker.getJob(id);
    }
    assertNull("Timeout - Job did not retire. Increase value of test.job.retire.timeout property, current value="+noSec, job); <=== changed 
  }, this is blocking our %100 success running all  unittests, should I submit the patch?
, was able to reprouduce on IBM JAVA 6.. updatting abstract ]