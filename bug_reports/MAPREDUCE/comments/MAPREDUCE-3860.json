[Attaching a patch and a tarball with gzip'ped test data. The robot wouldn't be able to run tests., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12608100/MAPREDUCE-3860.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 28 new or modified test files.

      {color:red}-1 javac{color}.  The applied patch generated 1525 javac compiler warnings (more than the trunk's current 1524 warnings).

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

        {color:red}-1 release audit{color}.  The applied patch generated 16 release audit warnings.

    {color:red}-1 core tests{color}.  The patch failed these unit tests in hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient hadoop-tools/hadoop-rumen hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-tests:

                  org.apache.hadoop.mapred.TestClusterMapReduceTestCase

                                      The following test timeouts occurred in hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient hadoop-tools/hadoop-rumen hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-tests:

org.apache.hadoop.mapreduce.v2.TestUberAM
org.apache.hadoop.conf.TestNoDefaultsJobConf

                                      The test build failed in hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-tests hadoop-tools/hadoop-rumen 

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4112//testReport/
Release audit warnings: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4112//artifact/trunk/patchprocess/patchReleaseAuditProblems.txt
Javac warnings: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4112//artifact/trunk/patchprocess/diffJavacWarnings.txt
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4112//console

This message is automatically generated., I compared the patch with branch-1. Here's my synopsis of the changes that I noticed

h6. added files in src/test/resources
- Most of the files are the same. I haven't checked the rumen-test-data.tar.gz . I presume the files in there are just the gzipped versions of the files in the patch file. Andrey? In either case I am guessing the committer will like to gzip the files her/himself.
- sample-conf.file.new.xml is a new file. It differs from sample-conf.file.xml only in the older and newer mapred vs mapreduce config properties. This is fine
- job-tracker-logs-topology-output is different from the branch-1 file. I wasn't entirely sure why. Andrey? Perhaps you can point me to the right branch to look at?

h6. hadoop-mapreduce-client-hs/src/main changes seem fine
- Some methods have been made VisibleForTesting.
- createJobHistory() has been introduced so that tests may be able to override it. 

h6. hadoop-mapreduce-client-jobclient/src/test changes seem fine
- Changes to get JobFileInfo

h6. src/main/java/org/apache/hadoop/tools/rumen/anonymization/WordList.java 
- Any reason for this change? I couldn't find anywhere setSize() being used.

h6. hadoop-tools/hadoop-rumen/src/test/java/org/apache/hadoop/tools/rumen changes
- TestConcurrentRead.java,TestZombieJob changes seem fine
- TestParsedLine is same as in branch-1
- I couldn't find TestRumenAnonymization,TestRumenFolder in branch-1. Any pointers on where I may be able to find these files?
- TestRumenJobTraces had a lot of changes. I am wondering if a different branch-1 has a closer match. Andrey? Otherwise I'll review the changes in another comment. 
, A minor nit was the in TestZombieJob, the deprecation was suppressed. Rather than modify the method signature, like you did in one of the other tests. I'd prefer that, but lets do it only if you have to rework the patch. Otherwise, its fine, Ravi, thanks a lot for this summary. I should have written this myself when submitting the patch. Now answering your questions.

The old tests were deleted by the following commit:
{code}
commit 00ac37838c4a55a2b855983e9730cbd26e6f3477
Author: Mahadev Konar <mahadev@apache.org>
Date:   Sat Jan 21 01:15:24 2012 +0000

    MAPREDUCE-3705. ant build fails on 0.23 branch. (Thomas Graves via mahadev)

    git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1234227 13f79535-47bb-0310-9956-ffa450edef68
{code}

So I got the tests from the preceding commit, namely:

{code}
commit 6b8a6a701a972f9528b9a2672401db51a31f52fb
Author: Mahadev Konar <mahadev@apache.org>
Date:   Sat Jan 21 00:53:02 2012 +0000

    MAPREDUCE-3549. write api documentation for web service apis for RM, NM, mapreduce app master, and job history server (Thoma

    git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1234222 13f79535-47bb-0310-9956-ffa450edef68
{code}

The tests are under {{hadoop-mapreduce-project/src/test/mapred/org/apache/hadoop/tools/rumen}}. The data is under {{hadoop-mapreduce-project/src/test/tools/data/rumen}}.

The {{rumen-test-data.tar.gz}} file contains those data files which are in binary form, so I couldn't put those into a patch file. The non-binary (non-gzipped) files are in the patch file itself. So to put the changes properly it's need to apply the patch and also to un-tar {{rumen-test-data.tar.gz}}. 

I did not create {{sample-conf.file.new.xml}} file, it existed in the old tests. Also, see {{TestRumenAnonymization}}, {{TestRumenFolder}} there.

I did change {{job-tracker-logs-topology-output}} to make tests succeed. As I understand this is caused by newer versions of Rumen  doing "time adjustment", so the expected data in {{job-tracker-logs-topology-output}} is not what's being produced by Rumen currently. See {{Folder.adjustJobTimes}} method. 

The change in {{WordList}} is actually a bug fix. I figured it doesn't make much sense to file a separate Jira for that. Sometimes when WordList instance is being deserialized from the disk, the "size" attribute is read after the words themselves are read, and so when deserializing "size" the words list is cleared (a bug in deserialization).

I did make many changes in {{TestRumenJobTraces}} and {{TestRumenAnonymization}}, that was required due to changes in Hadoop itself., Aleksey!

Tests are failing and erring.
{noformat}
Running org.apache.hadoop.tools.rumen.TestRumenJobTraces
Tests run: 12, Failures: 2, Errors: 0, Skipped: 0, Time elapsed: 63.803 sec <<< FAILURE! - in org.apache.hadoop.tools.rumen.TestRumenJobTraces
Running org.apache.hadoop.tools.rumen.TestRumenAnonymization
Tests run: 29, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 10.742 sec <<< FAILURE! - in org.apache.hadoop.tools.rumen.TestRumenAnonymization
{noformat}, Ravi,
Can you please provide more info? I can't reproduce it in my environment. Surefire logs would be fine.
BTW my name is Andrey :-), Oops! Sorry Andrey!
Here are the messages:
{code}
testCurrentJHParser(org.apache.hadoop.tools.rumen.TestRumenJobTraces)  Time elapsed: 35.14 sec  <<< FAILURE!
java.lang.AssertionError: Job failed
	at org.junit.Assert.fail(Assert.java:93)
	at org.junit.Assert.assertTrue(Assert.java:43)
	at org.apache.hadoop.tools.rumen.TestRumenJobTraces.testCurrentJHParser(TestRumenJobTraces.java:430)

testProcessInputArgument(org.apache.hadoop.tools.rumen.TestRumenJobTraces)  Time elapsed: 0.081 sec  <<< FAILURE!
java.lang.AssertionError: Some of the history log files do not match the expected.
	at org.junit.Assert.fail(Assert.java:93)
	at org.junit.Assert.assertTrue(Assert.java:43)
	at org.apache.hadoop.tools.rumen.TestRumenJobTraces.validateHistoryLogPaths(TestRumenJobTraces.java:315)
	at org.apache.hadoop.tools.rumen.TestRumenJobTraces.testProcessInputArgument(TestRumenJobTraces.java:278)

testRumenAnonymization(org.apache.hadoop.tools.rumen.TestRumenAnonymization)  Time elapsed: 6.799 sec  <<< ERROR!
org.apache.hadoop.yarn.exceptions.YarnRuntimeException: java.lang.OutOfMemoryError: unable to create new native thread
	at java.lang.Thread.start0(Native Method)
	at java.lang.Thread.start(Thread.java:693)
	at org.apache.hadoop.mapreduce.v2.MiniMRYarnCluster$JobHistoryServerWrapper.serviceStart(MiniMRYarnCluster.java:214)
	at org.apache.hadoop.service.AbstractService.start(AbstractService.java:193)
	at org.apache.hadoop.service.CompositeService.serviceStart(CompositeService.java:121)
	at org.apache.hadoop.service.AbstractService.start(AbstractService.java:193)
	at org.apache.hadoop.mapred.MiniMRClientClusterFactory.create(MiniMRClientClusterFactory.java:80)
	at org.apache.hadoop.mapred.MiniMRClientClusterFactory.create(MiniMRClientClusterFactory.java:41)
	at org.apache.hadoop.tools.rumen.TestRumenAnonymization.testRumenAnonymization(TestRumenAnonymization.java:786)
{code}

I'm running Linux 3.9 with Sun JDK1.7, Ravi,
I reproduced the bug in {{testProcessInputArgument}} on a Linux machine, will attach a fixed patch shortly. Also I tried to reproduce the job failure in {{testCurrentJHParser}} and made a few runs of the test on 2 machines with 2.x and 3.x Linux kernels and different flavors of JDK7, but all runs succeeded. Worked on OSX too. Didn't see any issues caused by OOM. If it happens again, try giving more memory to Maven., Thanks for the update Andrey! I was able to get clean runs. I had inadvertently left my local dev single node cluster up and running while running the test. *facepalm*

So far most of the changes seem fine. However I am having doubts about whether these unit tests are the right way to go about unit testing. Most of them depend on these resource files which will be checked in. I am wondering how many of these files will become stale when the state transitions are changed. And then even if these unit tests pass, rumen functionality would be broken because it would not be able to parse the JH files. Maybe the correct way of testing would be to generate these resource files using fake jobs? What do you think? I can't help but think that these tests were removed in the first place because of their poor design.

Anyway, here are some other things I had concerns about:
h6. TestRumenAnonymization
• Line 822 catch (Exception e) I shouldn't have to wait 100 seconds if there was an exception. Same in TestRumenJobTraces:testCurrentJHParser()
• You've made Conf common for all tests. Changes to conf in 1 test will affect the others. I'm not sure that is a good change. Should we mark rootInputDir final?
• Line 868: Is null a valid anonymization of the job's username? 
• Why did you remove the "lfs.delete(tempDir, true);" lines?

TestRumenJobTraces:
• Line 923:    int[][] splits = new int[4][12];

I've stopped reviewing in the middle hoping to get your thoughts about what we should do. I am a lot more interested in the long term solution rather than the short term solution.
, Ravi,
Well, to begin with, majority of Hadoop "unit" tests are not true unit tests. I mean all these mini cluster based tests and similar ones. Still I think that with a mature and slowly evolving codebase, and priorities shifted to maturity rather than quick changes, it makes sense to have such kinds of tests, especially when the alternative is not to have any. Currently Rumen code coverage by tests is almost zero, and this has been the case for a long time. Knowing that it is probably one of the slowest changing parts of the codebase, I think having that old tests which are indeed based on static files generated manually are better than having none. As I understand some of the tests like {{TestRumenJobTraces.testHadoop20JHParser}} use static pre-generated files to test compatibility with older versions of Hadoop, and in case of {{TestRumenJobTraces}} there is {{testCurrentJHParser}} which does use a real job to generate logs and then parse them, e.g. this is the test which works with the current version of the codebase. Having said that, I agree that improving these tests to use mini clusters as much as possible, instead of using pre-generated files, is a proper way of improving the tests further. The meaning of this task is to bring back old tests, which as I understand were broken when switching to Yarn, and were removed just to fix the builds quickly.

On questions for {{TestRumentAnonymization}}. 
1. It's waiting for 100 *milli*seconds, not 100 seconds. Which is tolerable. 
2. No, having an instance of {{Configuration}} as the field in the class may not affect tests in these way. JUnit creates a dedicated instance of the class for each test execution.
3. Not sure if this is a valid anonymization to have a null in the username. Is it?
4. Why should those temp dirs be deleted after test runs? It makes troubleshooting more difficult. Those dirs do not interfere with each other or other tests., Hi Andrey!

Thanks for your answers. 
1. It will wait for 10s (100ms * 100), but you're right, that is tolerable too. 
2. Aah! I did not know that. Thanks.
3. I agree that username should not be null after anonymization. So maybe we should remove the line "anonymizedJob.getUser() != null &&"
4. I can see it either way and I'm not a stickler about either way. I'm fine with how it is.

I would probaly classify all my comments as nits above. So I'm fine with this patch. I'll let a committer make the final judgement call. Thanks Andrey!, These tests don't pass using jdk7 or on mac. Andrey, do you have a way of testing builds in that env?, Jonathan, I'm using exactly OSX and jdk7. Can you please give more info on failures?, This fails on two distinct environments and passes on one environment I have access to.

FAILS
1. Linux x86_64 javac 1.7.0_40
2. Mac x86_64 javac 1.6.0_65

SUCCESS
Linux x86_64 javac 1.6.0_45

Command used to test.
mvn clean test -Dtest=TestConcurrentRead,TestParsedLine,TestRumenAnonymization,TestRumenFolder,TestRumenJobTraces,TestZombieJob, Still I can't reproduce failures, tried Linux x86_64 with java 1.7.0_13 and OSX with java 1.7.0_17. Please attach Surefire logs., Attached failures for the tests on mac with javac 1.6.0_65, {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12610437/mac-surfire-reports.tar
  against trunk revision .

    {color:red}-1 patch{color}.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4145//console

This message is automatically generated., Attached failures for the tests on linux with javac 1.7.0_40, {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12610439/linux-surefire-reports.tar
  against trunk revision .

    {color:red}-1 patch{color}.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4146//console

This message is automatically generated., As I see in the logs failures on Linux environment were caused by tests timeouts being too low. Attaching a patch which fixes that.

As for failures on Mac env, I see that all M/R jobs failed there. I saw similar issues when running tests without having JAVA_HOME set. Can't find more out of the logs. , Mac errors are due to java_home not being set. However, linux with jdk 1.7.0_40 still fails consistently even with the new patch. Will try to attach more logs with details., Part of the issue is that the individual tests can't run independently. For example, the following three tests always fail when run by themselves. This type of failure is problematic for jdk 7 since test order is random. This is not an exhaustive list and there are more than this.

mvn clean test -Dtest=TestRumenJobTraces#testHadoop20JHParser
mvn clean test -Dtest=TestRumenJobTraces#testResourceUsageMetricsWithHadoopLogsAnalyzer
mvn clean test -Dtest=TestRumenJobTraces#testTopologyBuilder, Even when running the above three tests with jdk6, I am able to make the tests fail. The seem to be assuming some setup not present in the test., Jonathan, thanks for testing this. Can you please attach surefire logs? I'm still missing a possible reason for the failures you see. I just tried to run the 3 commands you mentioned, and all three passed on my osx with jdk7. I'm not trying to use "works for me" argument, but I can't reproduce this, so logs would be really helpful. , Attached output for 2 failed tests that are still found. Sometimes they pass. If they do it is around a minute. If they fail they timeout.

TestRumenJobTraces#testCurrentJHParser
TestRumenAnonymization#testRumenAnonymization, Jonathan,
The logs don't provide much info on why tests fail. Per your description it seems that the tests hang indefinitely, so probably printing thread dumps on test timeouts would help. I'm attaching a patch which modifyis Rumen's pom.xml by adding a JUnit listener that prints thread dumps. I could not reproduce any failures in Rumen tests, tried to use 4 different machines (osx, centos, fedora on h/w nodes, and rhel on a VM). Please reproduce the failures in your environment one more time and attach Console output of Maven and all Surefire logs (not just *-output.txt). Thanks for working on this. , Also, it could be that the timeouts I set in the tests are still too low for you, if your machine is that slow. Can you increase them by up to an order of magnitude to check that? ]