[bq. When the cleanup completes at the tasktracker and the job is killed by the user, the cleanup runs to completion but the job fails.
No, it is marked as KILLED and not FAILED.

If the kill is issued by the user, then the state of the job *should* be killed, no? Kill by user means the user doesn't care as to whatever happens to the job's tasks., bq. No, it is marked as KILLED and not FAILED.
Ahh .. I meant killed. Thanks Vinod for pointing it out ;)

bq. If the kill is issued by the user, then the state of the job should be killed, no? Kill by user means the user doesn't care as to whatever happens to the job's tasks.
Note that the completed jobs cannot be killed by the user. So in the above mentioned case the job is actually complete but the state change hasn't happened. I think we should treat this case similar to "kill on completed jobs". Note that this is tricky as the cleanup can be in the following states
# UNASSIGNED
# running (in midway i.e some part of the cleanup has executed)
# cleanup has completed but the process has not exited
# cleanup task has died but the tasktracker is waiting to send the heartbeat or job-kill and cleanup-success both are in the ipc queue back to back.

Ideally we expect the job to be killed in cases 1 and 2 but succeeded in 3,4 and 5., One simple approach would be not to honour 'kill-job' when the cleanup is launched in which case the job can either move to FAILED or SUCCESSFUL state. The job can fail (after cleanup is launched) if all the cleanup attempts fail. The only corner case we need to take care if the case where the FileOutputCommitter.commitJob() creates _SUCCESS and fails. In such a case the job will fail with a _SUCCESS file. , Rather than blocking kill-job, I think we are better off guaranteeing that if the job fails, we will always call abortJob. Even if commitJob has started (or finished). We should also make the FileOutputFormat abortJob delete _SUCCESS to handle this case. This would also handle the case where the job commit task fails part way through.

I agree that all output committers may not be able to unroll their commit. However, I think that we need to give them the ability to do the right thing., Naturally, the fact that it may be invoked after the commitJob method has been called should be called out in the JavaDoc for the abortJob method. , I think the same applies for failed jobs too. Consider a case where the job is marked to fail and the cleanup attempt (for failed job) is launched. Now the user issued kill should be respected i.e the cleanup-attempt for failed job should be killed and another cleanup-attempt (for killed job) should be launched. Note that two (or more) cleanup attempts should not run in parallel else there would be a race condition. Thoughts?, bq. Even if commitJob has started (or finished). We should also make the FileOutputFormat abortJob delete _SUCCESS to handle this case. This would also handle the case where the job commit task fails part way through. 
Wouldn't the _SUCCESS file be available/visible for a small duration of time. External observers might consider the job as successful. , The behavior of having the commitJob create a file is actually application logic (the FileOutputCommitter in this case). So yes, there is a small window of time when the job is considered successful, but maybe we can make that explicit in the FileOutputCommitter contract.

On a side note, longer term, we should probably make the tasks write to a temp JOB directory, and rename the temp job directory to the final output directory AFTER the job is successful. That way we can avoid the special files in the output directory of the job., bq. On a side note, longer term, we should probably make the tasks write to a temp JOB directory, and rename the temp job directory to the final output directory AFTER the job is successful. That way we can avoid the special files in the output directory of the job.
[comment|https://issues.apache.org/jira/browse/MAPREDUCE-947?focusedCommentId=12762146&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#action_12762146].]