[This patch adds the {{jobclient.completion.poll.interval}} mapreduce parameter, which defaults to the existing value of 5000 ms. No new tests because this is a very small change; it's not clear what new (or any) functionality needs additional verification., Now that we are doing this, shouldn't we also do something for the hard-coded sleep interval in monitorAndPrintJob() (JobClient.java +1294)? That might help in some test-cases too..

Regarding tests, you can change any of the current test cases to use a lower value for the introduced configuration and verify manually that the test time has decreased. I could see TestTaskFail using three instances of waitForCompletion() in a single test, may be you can change that test-case and see how it goes., Agreed about the other timeout. I'll include that as well.

I can change the suggested test, but as you say, it'll have to be a manual verification and that'll itself be subjective. Thread.sleep(n) guarantees that a thread will sleep for at least 'n' milliseconds, or receive an InterruptedException. But the OS is always free to reschedule your thread later, and there are a lot of other variable-time components in these tests. So writing JUnit tests that compare relative runtimes might nondeterministically fail.

I'll report back results., Attaching a new patch that also includes a new "jobclient.progress.monitor.poll.interval" setting; default is 1000 ms. Modified TestTaskFail to set the completion poll interval to 50 ms.

With default (5000) ms timeout, test runtime was 3 minutes 15 seconds. Setting the timeout to 50 ms reduced test runtime to 3 minutes 8 seconds. If we expect an average of 2500 milliseconds wasted per job in the default case, then this is 2500*3 = 7500 ms expected to be wasted, so the observed speedup seems correct. To be sure, I also set the timeout to 20000 ms; test runtime went up to 3 minutes 52 seconds. So there's definitely a correlation., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12415772/MAPREDUCE-825.2.patch
  against trunk revision 801959.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    -1 contrib tests.  The patch failed contrib unit tests.

Test results: http://hudson.zones.apache.org/hudson/job/Mapreduce-Patch-vesta.apache.org/454/testReport/
Findbugs warnings: http://hudson.zones.apache.org/hudson/job/Mapreduce-Patch-vesta.apache.org/454/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Checkstyle results: http://hudson.zones.apache.org/hudson/job/Mapreduce-Patch-vesta.apache.org/454/artifact/trunk/build/test/checkstyle-errors.html
Console output: http://hudson.zones.apache.org/hudson/job/Mapreduce-Patch-vesta.apache.org/454/console

This message is automatically generated., Failures are in streaming only., Patch looks good to me. +1, I've just committed this. Thanks Aaron!]