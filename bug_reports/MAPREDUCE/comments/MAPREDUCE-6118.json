[The example does not have to be a problem because mapreduce.*.memory.mb describes the vmem requirement for the task, not the Java heap size. Task might want only Xmx1024m out of 3gb memory for Java heap. It is reasonable to add Xmx checks to the set of uberization constraints if Xmx is specified for both AM and tasks.
, not every detail is covered in examples. it is there just to communicate the idea., One another way we can go is to have fraction approach like Tez: if the fraction is 0.8, Xmx will be 0.8 * yarn.app.mapreduce.am.resource.mb and configure yarn.app.mapreduce.am.command-opts as Xmx(0.8*yarn.app.mapreduce.am.resource.mb) in addition to user-defined yarn.app.mapreduce.am.command-opts., [~ozawa], we actually implemented auto-Xmx earlier than Tez in MAPREDUCE-5785. It's related but I think this JIRA is somewhat orthogonal to this: what to do when Xmx is explicitly set by the user there is an incompatibility.]