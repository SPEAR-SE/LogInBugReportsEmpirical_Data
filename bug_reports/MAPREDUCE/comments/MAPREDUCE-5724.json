[YARN-24 fixed a similar issue for the NM, we should try doing something similar here., trying to do something like YARN-24 for JHS is a bit more complicated.

Instead, I've taken a different approach:

On startup the JHS will try creating the history directories, if it cannot because the the FS is not available or in safemode will retry for up to 2mins, if it times out, it will then shutdown.

So, instead failing immediately, the JHS will wait for the FS to become avail for a while.

I've hardcoded the 2mins timeout as I don't think we need to introduce a config value for this. If others feel otherwise, I can update the patch with a config prop for it., Would it make sense to add a config, a value of -1 would mean to wait forever like we do with other such timeout configs? The default itself could be few mins or -1., The approach sounds reasonable to me.

{code}
+  //DistributedFileSystem returns a RemoteException with a message stating
+  // SafeModeException in it. So this is only way to check it is because of
+  // being in safe mode.
{code}
Should use block comments like the other (even non-public) methods in the class.  Applies other places as well.

{code}
+      throw new YarnRuntimeException(
+          "Timed out waiting for FileSystem to become available");
{code}
Should report how long it waited.

{code}
+    return  ex.toString().contains("SafeModeException");
{code}
Two spaces between return and ex.  Also, can we get the SafeModeException from ex.getCause()?

{code}
+    boolean done = false;
{code}
Nit: "succeeded" would be clearer to me than "done".  Not a big deal either way.

{code}
+  void createHistoryDirs(Clock clock, long intervalCheck, long timeOut)
+      throws Exception {
...
+      Thread.sleep(intervalCheck);
{code}
Should handle interrupted exception - we don't want to fail if we hit it?  Then we can remove "throws Exception" because the only other exception in the method isn't checked?

{code}
+          Assert.assertTrue(dfsCluster.getFileSystem().isInSafeMode());
+        } catch (Exception ex) {
+          Assert.fail(ex.toString());
+        }
{code}
Can asserts in other threads ever cause the test to fail?, {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12623258/MAPREDUCE-5724.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4320//testReport/
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4320//console

This message is automatically generated., thanks for the reviews.

New patch addressing Karthik's and Sandy's comments.

Regarding removing the {{throw Exception}} from the {{createHistoryDirs()}}, not possible because the {{tryCreateHistoryDirs}} does throw a checked exception if the reason is other than the FS not being avail., {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12623276/MAPREDUCE-5724.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4321//testReport/
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4321//console

This message is automatically generated., bq. Regarding removing the throw Exception from the createHistoryDirs(), not possible because the tryCreateHistoryDirs does throw a checked exception if the reason is other than the FS not being avail.

In that case, createHistoryDirs should just throw an IOException, no?

{code}
return  ex.toString().contains("SafeModeException");
{code}
Can we get the SafeModeException from ex.getCause()?

Otherwise, LGTM., Thanks Sandy, new patch changing the exception being thrown to IOException. Regarding detecting the SafeModeException by cause, I've tried that at first, the problem is that the cause is NULL. I've checked with ATM and he indicated that the initCause() method should be called, but according to the javadocs, the initCause() should be called where the exception is being created, so this seems to be an HDFS issue, thus the only way I figured out how to determine if the original exception was due to the filesystem being in safemode was by searching the toString() value for 'SafeModeException'. I'll open a JIRA against HDFS to call initCause() where the exception is being thrown., created HDFS-5787, {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12623303/MAPREDUCE-5724.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4322//testReport/
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4322//console

This message is automatically generated., bq. Regarding detecting the SafeModeException by cause, I've tried that at first, the problem is that the cause is NULL
Makes sense

+1, committed to trunk and branch-2., SUCCESS: Integrated in Hadoop-trunk-Commit #5009 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/5009/])
MAPREDUCE-5724. JobHistoryServer does not start if HDFS is not running. (tucu) (tucu: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1558852)
* /hadoop/common/trunk/hadoop-mapreduce-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapreduce/v2/jobhistory/JHAdminConfig.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/pom.xml
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryFileManager.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/test/java/org/apache/hadoop/mapreduce/v2/hs/TestHistoryFileManager.java
, SUCCESS: Integrated in Hadoop-Yarn-trunk #455 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk/455/])
MAPREDUCE-5724. JobHistoryServer does not start if HDFS is not running. (tucu) (tucu: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1558852)
* /hadoop/common/trunk/hadoop-mapreduce-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapreduce/v2/jobhistory/JHAdminConfig.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/pom.xml
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryFileManager.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/test/java/org/apache/hadoop/mapreduce/v2/hs/TestHistoryFileManager.java
, FAILURE: Integrated in Hadoop-Hdfs-trunk #1647 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/1647/])
MAPREDUCE-5724. JobHistoryServer does not start if HDFS is not running. (tucu) (tucu: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1558852)
* /hadoop/common/trunk/hadoop-mapreduce-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapreduce/v2/jobhistory/JHAdminConfig.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/pom.xml
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryFileManager.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/test/java/org/apache/hadoop/mapreduce/v2/hs/TestHistoryFileManager.java
, FAILURE: Integrated in Hadoop-Mapreduce-trunk #1672 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/1672/])
MAPREDUCE-5724. JobHistoryServer does not start if HDFS is not running. (tucu) (tucu: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1558852)
* /hadoop/common/trunk/hadoop-mapreduce-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapreduce/v2/jobhistory/JHAdminConfig.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/pom.xml
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryFileManager.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/test/java/org/apache/hadoop/mapreduce/v2/hs/TestHistoryFileManager.java
]