[Attached the patch for handling NPE for invalid job id's. Please review., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12681589/MAPREDUCE-6160.patch
  against trunk revision 1a1dcce.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 3 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:red}-1 core tests{color}.  The patch failed these unit tests in hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient:

                  org.apache.hadoop.mapreduce.security.TestJHSSecurity
                  org.apache.hadoop.mapreduce.v2.TestNonExistentJob

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/5021//testReport/
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/5021//console

This message is automatically generated., NPE trace in  {{MRClientProtocol#getTaskAttemptCompletionEvents()}}
{code}
14/11/07 15:09:38 INFO mapreduce.Job:  map 92% reduce 25%
14/11/07 15:09:40 INFO mapreduce.Job:  map 96% reduce 25%
14/11/07 15:09:42 INFO mapreduce.Job:  map 100% reduce 25%
14/11/07 15:09:43 INFO mapreduce.Job:  map 100% reduce 100%
14/11/07 15:09:43 INFO mapred.ClientServiceDelegate: Application state is completed. FinalApplicationStatus=SUCCEEDED. Redirecting to job history server
14/11/07 15:09:43 INFO mapred.ClientServiceDelegate: Application state is completed. FinalApplicationStatus=SUCCEEDED. Redirecting to job history server
14/11/07 15:09:43 INFO mapred.ClientServiceDelegate: Application state is completed. FinalApplicationStatus=SUCCEEDED. Redirecting to job history server
java.io.IOException: org.apache.hadoop.ipc.RemoteException(java.lang.NullPointerException): java.lang.NullPointerException
        at org.apache.hadoop.mapreduce.v2.hs.HistoryClientService$HSClientProtocolHandler.getTaskAttemptCompletionEvents(HistoryClientService.java:277)
        at org.apache.hadoop.mapreduce.v2.api.impl.pb.service.MRClientProtocolPBServiceImpl.getTaskAttemptCompletionEvents(MRClientProtocolPBServiceImpl.java:173)
        at org.apache.hadoop.yarn.proto.MRClientProtocol$MRClientProtocolService$2.callBlockingMethod(MRClientProtocol.java:283)
        at org.apache.hadoop.ipc.ProtobufRpcEngine$Server$ProtoBufRpcInvoker.call(ProtobufRpcEngine.java:585)
        at org.apache.hadoop.ipc.RPC$Server.call(RPC.java:928)
        at org.apache.hadoop.ipc.Server$Handler$1.run(Server.java:2013)
        at org.apache.hadoop.ipc.Server$Handler$1.run(Server.java:2009)
        at java.security.AccessController.doPrivileged(Native Method)
        at javax.security.auth.Subject.doAs(Subject.java:415)
        at org.apache.hadoop.security.UserGroupInformation.doAs(UserGroupInformation.java:1612)
        at org.apache.hadoop.ipc.Server$Handler.run(Server.java:2007)
{code}, Update the patch for correcting tests. Please review the patch, {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12682429/MAPREDUCE-6160.patch
  against trunk revision 5bd048e.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 5 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/5032//testReport/
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/5032//console

This message is automatically generated., [~jlowe] Could you please look at this jira whenever you have free time?, [~rohithsharma], Is there any reason why the job is not available in History? I see in your above comment the Job got succeeded, Do you see any exception in in MR AM/JHS log for the same job?, bq. Is there any reason why the job is not available in History? I see in your above comment the Job got succeeded, Do you see any exception in in MR AM/JHS log for the same job?
MRAppMaster was failed to write to HDFS because of safemode and safemode was recovered later., This patch changes the semantics of getJobReport which breaks backwards compatibility.  Previously getJobReport would return null for an unknown job and now it throws.  This then cascades and changes other behaviors, e.g.: ClientServiceDelegate expects the job report could be null and in turn returns null for a job status when that occurs.  Now it, too, will throw which may not be OK.

Returning NPEs to the client is bad, but I'm not sure changing a null return to the client into a thrown IOException is the proper fix.  Clients should already be checking for null today, since that's what it was doing previously., The only API that expect null in the MRClientProtocol getJobReport. null has been checked in the trailing call hierarchy of getJobReport.I agree this breaks compatibility.

But other API's implementation is vulnerable to throw NPE if queried with invalid job id. This would be better if either it should be RuntimeException or API defined IOException with proper message to client.Any thoughts?, If an existing API is returning null then it must continue to do so rather than throw in the new version to preserve backwards compatibility.

If an existing API is throwing NPE then I think it's OK to change that to throw IOException instead.  However it may be better to return null instead if that would make the interface more self-consistent., bq. However it may be better to return null instead if that would make the interface more self-consistent.
I understand this way, let ClientServiceDelegate check for response null and handle it by throwing IOException.Is it so?, Not sure I follow.  ClientServiceDelegate is already checking for a null result from getJobReport, but it doesn't translate this into a thrown IOException when this occurs.  For similar reasons I don't think it would be appropriate to have ClientServiceDelegate start throwing IOExceptions when it was returning nulls previously., I mean leaving  getJobReport for others APIs., Yes, getJobReport needs to continue to return null as it does today.  We should only be addressing APIs that are currently throwing NPEs for unknown jobs., Attached patch with following fix
1. If invalid JobId is detected at AM/HistoryServer, the API's return with null i.e consistent with getJobReport(). There is no change made to getJobReport().
2. ClientServiceDelegate identifies response having null for corresponding api's and throw IOException with message "Unknown job " + jobId.
, Please review the patch., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12683224/MAPREDUCE-6160.1.patch
  against trunk revision a4df9ee.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 3 new or modified test files.

      {color:red}-1 javac{color}.  The applied patch generated 1219 javac compiler warnings (more than the trunk's current 1218 warnings).

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:red}-1 core tests{color}.  The patch failed these unit tests in hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient:

                  org.apache.hadoop.mapred.TestReduceFetch
                  org.apache.hadoop.mapred.TestMerge
                  org.apache.hadoop.mapreduce.TestMapReduceLazyOutput
                  org.apache.hadoop.mapred.TestMRIntermediateDataEncryption
                  org.apache.hadoop.mapred.TestLazyOutput
                  org.apache.hadoop.mapreduce.TestLargeSort
                  org.apache.hadoop.mapred.TestReduceFetchFromPartialMem
                  org.apache.hadoop.mapreduce.v2.TestMRJobsWithProfiler
                  org.apache.hadoop.mapreduce.lib.output.TestJobOutputCommitter
                  org.apache.hadoop.mapreduce.security.ssl.TestEncryptedShuffle
                  org.apache.hadoop.mapreduce.v2.TestMROldApiJobs
                  org.apache.hadoop.mapred.TestJobCleanup
                  org.apache.hadoop.mapreduce.v2.TestSpeculativeExecution
                  org.apache.hadoop.mapred.TestClusterMRNotification
                  org.apache.hadoop.mapreduce.v2.TestMRAMWithNonNormalizedCapabilities
                  org.apache.hadoop.mapreduce.v2.TestMRJobs
                  org.apache.hadoop.mapred.TestJobName
                  org.apache.hadoop.mapreduce.TestMRJobClient
                  org.apache.hadoop.mapred.TestClusterMapReduceTestCase
                  org.apache.hadoop.mapreduce.security.TestMRCredentials
                  org.apache.hadoop.mapred.TestMRTimelineEventHandling
                  org.apache.hadoop.mapreduce.v2.TestMiniMRProxyUser
                  org.apache.hadoop.mapreduce.v2.TestMRJobsWithHistoryService
                  org.apache.hadoop.mapred.TestMiniMRClientCluster
                  org.apache.hadoop.mapred.TestMiniMRChildTask
                  org.apache.hadoop.mapreduce.security.TestBinaryTokenFile

                                      The following test timeouts occurred in hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient:

org.apache.hadoop.mapred.TestMiniMRWithDFSWithDistinctUsers
org.apache.hadoop.mapred.TestMiniMRClasspath
org.apache.hadoop.mapred.TestJobSysDirWithDFS

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/5045//testReport/
Javac warnings: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/5045//artifact/patchprocess/diffJavacWarnings.txt
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/5045//console

This message is automatically generated., Oops can't imagine these many test cases are failing!!:-( Deeply need to look into individual tests failures are really caused by patch or something else problem., Looking closer, the client service API is already inconsistent.  It currently throws if the task or task attempt ID is unknown, see verifyAndGetTask/Attempt.  However it is really important to not break compatibility for existing APIs that didn't throw for unknown job IDs, see MAPREDUCE-4007 as one example.

What if we have verifyAndGetJob throw IOException as in the original patch but have another form of the utility method (either via arg or a separate method like verifyAndGetJobNoThrow) that won't throw for unknown jobs.  getJobReport and killJob would call the no-throw form, since those currently don't crash for unknown jobs.  All other instances would call the verify form that throws, since those would currently NPE if the job ID isn't known.  Not an ideal setup, but it would preserve the existing behavior for APIs that currently don't throw on unknown job IDs., Thanks [~jlowe] for your inputs. Given client APIs already throwing IOExceptions, leaving getJobReport() others API's can throw IOExceptions with valid message., I updated the patch as per discussion.Please review, {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12683384/MAPREDUCE-6160.2.patch
  against trunk revision f636f9d.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 2 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/5046//testReport/
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/5046//console

This message is automatically generated., Thanks for updating the patch.  Patch looks good overall, just one nit.  Should we just say "Unknown Job " + jobId for the error message?  That would be consistent with the other error messages for tasks and attempts.  ClientServiceDelegate already logs when it is redirecting to the historyserver, so I'm not sure we need to say it's the AM here.  Either that or the task and attempt exception messages should be updated for consistency., bq. just one nit. Should we just say "Unknown Job " + jobId for the error message?
I changed log as above.

I updated the patch with changing comment message for consistency. Please review., {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12683587/MAPREDUCE-6160.3.patch
  against trunk revision 61a2510.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 2 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/5048//testReport/
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/5048//console

This message is automatically generated., +1 lgtm.  Committing this., Thanks, Rohith!  I committed this to trunk and branch-2.
, SUCCESS: Integrated in Hadoop-trunk-Commit #6620 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/6620/])
MAPREDUCE-6160. Potential NullPointerException in MRClientProtocol interface implementation. Contributed by Rohith (jlowe: rev 0c588904f8b68cad219d2bd8e33081d5cae656e5)
* hadoop-mapreduce-project/CHANGES.txt
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/test/java/org/apache/hadoop/mapreduce/v2/hs/TestJobHistoryServer.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/client/MRClientService.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryClientService.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/v2/app/TestMRClientService.java
, FAILURE: Integrated in Hadoop-Yarn-trunk-Java8 #23 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk-Java8/23/])
MAPREDUCE-6160. Potential NullPointerException in MRClientProtocol interface implementation. Contributed by Rohith (jlowe: rev 0c588904f8b68cad219d2bd8e33081d5cae656e5)
* hadoop-mapreduce-project/CHANGES.txt
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/test/java/org/apache/hadoop/mapreduce/v2/hs/TestJobHistoryServer.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryClientService.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/client/MRClientService.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/v2/app/TestMRClientService.java
, ABORTED: Integrated in Hadoop-Hdfs-trunk #1951 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/1951/])
MAPREDUCE-6160. Potential NullPointerException in MRClientProtocol interface implementation. Contributed by Rohith (jlowe: rev 0c588904f8b68cad219d2bd8e33081d5cae656e5)
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/v2/app/TestMRClientService.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryClientService.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/test/java/org/apache/hadoop/mapreduce/v2/hs/TestJobHistoryServer.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/client/MRClientService.java
* hadoop-mapreduce-project/CHANGES.txt
, SUCCESS: Integrated in Hadoop-Yarn-trunk #761 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk/761/])
MAPREDUCE-6160. Potential NullPointerException in MRClientProtocol interface implementation. Contributed by Rohith (jlowe: rev 0c588904f8b68cad219d2bd8e33081d5cae656e5)
* hadoop-mapreduce-project/CHANGES.txt
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/v2/app/TestMRClientService.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/test/java/org/apache/hadoop/mapreduce/v2/hs/TestJobHistoryServer.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryClientService.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/client/MRClientService.java
, FAILURE: Integrated in Hadoop-Hdfs-trunk-Java8 #23 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk-Java8/23/])
MAPREDUCE-6160. Potential NullPointerException in MRClientProtocol interface implementation. Contributed by Rohith (jlowe: rev 0c588904f8b68cad219d2bd8e33081d5cae656e5)
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/test/java/org/apache/hadoop/mapreduce/v2/hs/TestJobHistoryServer.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryClientService.java
* hadoop-mapreduce-project/CHANGES.txt
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/v2/app/TestMRClientService.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/client/MRClientService.java
, FAILURE: Integrated in Hadoop-Mapreduce-trunk #1975 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/1975/])
MAPREDUCE-6160. Potential NullPointerException in MRClientProtocol interface implementation. Contributed by Rohith (jlowe: rev 0c588904f8b68cad219d2bd8e33081d5cae656e5)
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryClientService.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/test/java/org/apache/hadoop/mapreduce/v2/hs/TestJobHistoryServer.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/client/MRClientService.java
* hadoop-mapreduce-project/CHANGES.txt
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/v2/app/TestMRClientService.java
, SUCCESS: Integrated in Hadoop-Mapreduce-trunk-Java8 #23 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk-Java8/23/])
MAPREDUCE-6160. Potential NullPointerException in MRClientProtocol interface implementation. Contributed by Rohith (jlowe: rev 0c588904f8b68cad219d2bd8e33081d5cae656e5)
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/test/java/org/apache/hadoop/mapreduce/v2/hs/TestJobHistoryServer.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/client/MRClientService.java
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryClientService.java
* hadoop-mapreduce-project/CHANGES.txt
* hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/v2/app/TestMRClientService.java
]