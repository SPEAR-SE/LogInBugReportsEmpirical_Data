[Ruyue - this is poorly documented, but mostly right. If I remember right, this was done so that the MapTask object in JobTracker doesn't have a reference to the input-split. This will not cause a problem because a single MapTask object on the JobTracker is never re-used i.e. a new one is created, serialized to the TaskTracker during scheduling and it's splitMetaInfo is never needed again.
, 1.  The NullPointerException is throwed in our cluster. It causes the hang of tasktracker's heartbeat.

2. If the HeartbeatResponse is not sent successfully,  it will resend in the next heartbeat. The MapTask is not recreated. It uses the old MapTask object.  The code is: 

{code:title=JobTracker.java|borderStyle=solid}
  public synchronized HeartbeatResponse heartbeat(TaskTrackerStatus status, 
                                                  boolean restarted,
                                                  boolean initialContact,
                                                  boolean acceptNewTasks, 
                                                  short responseId) 
    throws IOException {
    if (LOG.isDebugEnabled()) {
      LOG.debug("Got heartbeat from: " + status.getTrackerName() + 
                " (restarted: " + restarted + 
                " initialContact: " + initialContact + 
                " acceptNewTasks: " + acceptNewTasks + ")" +
                " with responseId: " + responseId);
    }

    // Make sure heartbeat is from a tasktracker allowed by the jobtracker.
    if (!acceptTaskTracker(status)) {
      throw new DisallowedTaskTrackerException(status);
    }

    // First check if the last heartbeat response got through
    String trackerName = status.getTrackerName();
    long now = clock.getTime();
    boolean isBlacklisted = false;
    if (restarted) {
      faultyTrackers.markTrackerHealthy(status.getHost());
    } else {
      isBlacklisted = 
        faultyTrackers.shouldAssignTasksToTracker(status.getHost(), now);
    }
    
    HeartbeatResponse prevHeartbeatResponse =
      trackerToHeartbeatResponseMap.get(trackerName);

    if (initialContact != true) {
      // If this isn't the 'initial contact' from the tasktracker,
      // there is something seriously wrong if the JobTracker has
      // no record of the 'previous heartbeat'; if so, ask the 
      // tasktracker to re-initialize itself.
      if (prevHeartbeatResponse == null) {
        // This is the first heartbeat from the old tracker to the newly 
        // started JobTracker
        
        // Jobtracker might have restarted but no recovery is needed
        // otherwise this code should not be reached
        LOG.warn("Serious problem, cannot find record of 'previous' " +
                 "heartbeat for '" + trackerName + 
                 "'; reinitializing the tasktracker");
        return new HeartbeatResponse(responseId, 
            new TaskTrackerAction[] {new ReinitTrackerAction()});
      
      } else {
                
        // It is completely safe to not process a 'duplicate' heartbeat from a 
        // {@link TaskTracker} since it resends the heartbeat when rpcs are 
        // lost see {@link TaskTracker.transmitHeartbeat()};
        // acknowledge it by re-sending the previous response to let the 
        // {@link TaskTracker} go forward. 
        if (prevHeartbeatResponse.getResponseId() != responseId) {
          LOG.info("Ignoring 'duplicate' heartbeat from '" + 
              trackerName + "'; resending the previous 'lost' response");
          return prevHeartbeatResponse;                   // HERE !!!!!!!!!!!!!!!!!
        }
      }
    }

{code} , @ Arun C Murthy: so that MapTask object in JobTracker doesn't have a reference to the input-split.

Why? , After resolving this bug, our cluster is stable. The hang of tasktracker's heartbeat hasn't been found., To: Arun C Murthy 

Who will give me an explanation?  This bug will often cause tasktracker hang. If I comment "splitMetaInfo = null; ", anything will be ok., bq. so that MapTask object in JobTracker doesn't have a reference to the input-split. Why? 

This is to save memory on JobTracker. We have seen scenarios where the input split size so huge which causes OOM on JT.  See HADOOP-3670

If we have to remove the nullification in serialization to avoid NPE, we should nullify the splitMetaInfo either after the task completion or after the first update from the map task.
Thoughts?, To: Amareshwari Sriramadasu 

Our solution is the same with yours.

We nullify the splitMetaInfo until we ensure that the HeartbeatResponse is not re-sent., bq. We nullify the splitMetaInfo until we ensure that the HeartbeatResponse is not re-sent.
Great! Can you please upload the patch here so that it can be part apache source?
]