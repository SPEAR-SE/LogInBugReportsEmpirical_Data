[Is it possible to add a hasSpeculativeTask method in JobInProgress rather than copying it out into the capacity scheduler again?, In fact, it might be even better if there were methods called JobInProgress.numSpeculativeMaps and JobInProgress.numSpeculativeReduces that say how many speculative tasks the job wants to launch. Knowing this number is useful when you need to make high-memory slots for the speculative tasks, or when you need to preempt tasks from other jobs., I'm not sure we can make JobInProgress.numSpeculative{Maps|Reduces} stick... the number of speculative tasks is very dynamic(depends on progress of other tasks, overall job progress etc.).

Having said that, the fix for this issue *is* to move hasSpeculativeTask to JobInProgress., In the fair scheduler, my plan was to look at speculative task counts every 10-15 seconds, because while the count is dynamic, speculation decisions are made on the order of minutes anyway. Therefore, I'd be okay with a numSpeculative{Maps|Reduces} that is time-consuming to compute and may change fairly rapidly. However, if you don't think this should be part of the API, then just hasSpeculative{Map|Reduce} is fine. I'll try making just one speculative slot at a time and see if that causes problems., bq. the number of speculative tasks is very dynamic(depends on progress of other tasks, overall job progress etc.). 
Not just that, as we've found out while working on MAPREDUCE-722, speculative tasks is also dependant on the TaskTracker in question - for e.g. a task can have a speculative attempt w.r.t one TT and none w.r.t another if it has already run on the later TT., Looked at the JobInProgress's findSpeculativeTask , it doesn't change any state of TaskInProgress. We can refactor this method in order to find out if jip has any speculative tasks.

We are using hasSpeculative to block a slot on the task tracker. As hasSpeculative is very dynamic in nature , there are chances that by the time tasktracker comes back for the task , we dont have any speculativeTasks to assign, this would mean we would waste some heartbeat and also would lead to under utilization. 
This problem is already there with the capacity-scheduler though.

One way of reducing this is to have MIN_SPEC_CAP(in JobInProgress) kind of variable in capacity scheduler.

Any thoughts?, Looked at the JobInProgress's findSpeculativeTask , it doesn't change any state of TaskInProgress. We can refactor this method in order to find out if jip has any speculative tasks.

We are using hasSpeculative to block a slot on the task tracker. As hasSpeculative is very dynamic in nature , there are chances that by the time tasktracker comes back for the task , we dont have any speculativeTasks to assign, this would mean we would waste some heartbeat and also would lead to under utilization. 
This problem is already there with the capacity-scheduler though.

One way of reducing this is to have MIN_SPEC_CAP(in JobInProgress) kind of variable in capacity scheduler.

Any thoughts?, This is all very different now so closing this as stale.]