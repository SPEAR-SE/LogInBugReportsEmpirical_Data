[Hi [~zjshen], Thanks for reporting this.
From the track stack below:
{noformat}
org.apache.hadoop.mapreduce.counters.FrameworkCounterGroup.findCounter(FrameworkCounterGroup.java:182)
        at org.apache.hadoop.mapreduce.counters.AbstractCounters.findCounter(AbstractCounters.java:154)
{noformat}
It show that the client is still in 2.2 (https://github.com/apache/hadoop/blob/branch-2.2/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/counters/FrameworkCounterGroup.java), and we fix the problem in 2.6 which means the client after 2.6 can be compatible with new counters in future (forward compatibility) but not means existing broken compatibility can be recovered (except we want to fix the code in branch-2.2). 
[~zjshen], I would like to fix this JIRA as "won't fix". Do you agree?, I would call the issue fixed in 2.x only if 2.2 client is able to talk to 2.x server and viceversa. This doesn't seem to be the case for 2.6. Let me know if I am missing something here. , Thanks for comments [~kasha]!
bq. I would call the issue fixed in 2.x only if 2.2 client is able to talk to 2.x server and viceversa. This doesn't seem to be the case for 2.6. Let me know if I am missing something here. 
If 2.2 client cannot talk with 2.4 and 2.5 in the sever side, does the meaning too much for 2.2 client to talk with 2.6 server? The problem exists in client side that exception get thrown when getting new counters from server in new version. If we want to fix it in server side, we should have some mechanism to filter the new counter in server side with detecting the version of client. So far from what I know, we don't have versioning differentiation for MR client that make the fix in server side harder. If we are adding some new version detection mechanism here after 2.6.x, then we cannot differentiate previous release versions so Counter filter in server side still cannot work. Thoughts?, Now I can recall the context before: MR Client 2.2 and 2.3 is not able to talk to MR 2.4+ Runtime (including the rencently released 2.6), because more counters are introduced into MR 2.4. In MAPREDUCE-5831, we finally choose to fix the client, such that in even later version, if we introduce more counters, MR Client 2.6+ is able to be compatible to them. However, for MR 2.2 and 2.3, the problem is not fixed unless we back port the fix to these two versions, or we fix the runtime not to emit the new counters to the old client. As to the latter option, it's going to be hard because we don't have the client version information in the communication protocol. I'm Okay if we resolve this issue as "won't fix"., Thanks for the details, Junping and Zhijie. It is unfortunate we missed it in 2.2. I guess we can't do much at this point beyond calling it compatible for 2.6 onwards. I am fine with resolving it as "Won't Fix" too. , Thanks [~zjshen] and [~kasha] for comments! Looks like we already made agreement here, so resolve this ticket as won't fix.]