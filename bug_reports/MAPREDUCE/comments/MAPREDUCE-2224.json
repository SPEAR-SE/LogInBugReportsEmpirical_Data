[Attaching backport I did for CDH 20 branch which should also apply on YDH. Includes unit test. Will port unit test forward also, Updated patch for trunk to include unit test. Also I had missed one synchronization case which the test found., Good catch!
I have a question. Is the following part necessary? The method kill() is already synchronized.
{code}
@@ -493,7 +501,9 @@ class JvmManager {
           // Check inital context before issuing a kill to prevent situations
           // where kill is issued before task is launched.
           if (initalContext != null && initalContext.env != null) {
-            initalContext.pid = jvmIdToPid.get(jvmId);
+            synchronized (JvmManagerForType.this) {
+              initalContext.pid = jvmIdToPid.get(jvmId);
+            }
{code}, Hi Scott. Yea, it's necessary, since kill() is synchronized on the inner class. It needs to synchronize on its outer "this" - note that it's {{JvmManagerForType.this}} and not {{this}}, Hey Todd, Thanks. Got it. I missed that there is this inner class of a inner class of a class.

I have another question.
It seems that now following two code paths will have two different locking sequences for JvmRunner and JvmManagerForType.
Is it possible that this may deadlock?
{code}
JvmManagerForType.killJvmRunner() -> JvmRunner.kill()
JvmRunner.runChild() -> JvmRunner.kill()
{code}, Good call, let me look into that., Hi Scott. That was a good catch - jcarder confirmed the potential deadlock you saw. Here's a patch which is a bit bigger but should be deadlock free and cleans up some encapsulation issues as well in the process., review here: https://reviews.apache.org/r/190/diff/#index_header, Hi Todd, I like the patch. Just have some minor comments in the review board., new revision from review board, +1 Looks good.
Todd: Can you run ant test and post it here? I think Hudson doesn't work.,      [exec] +1 overall.  
     [exec] 
     [exec]     +1 @author.  The patch does not contain any @author tags.
     [exec] 
     [exec]     +1 tests included.  The patch appears to include 3 new or modified tests.
     [exec] 
     [exec]     +1 javadoc.  The javadoc tool did not generate any warning messages.
     [exec] 
     [exec]     +1 javac.  The applied patch does not increase the total number of javac compiler warnings.
     [exec] 
     [exec]     +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.
     [exec] 
     [exec]     +1 release audit.  The applied patch does not increase the total number of release audit warnings.
     [exec] 
     [exec]     +1 system test framework.  The patch passed system test framework compile.


Failed tests:
    [junit] Test org.apache.hadoop.mapred.TestControlledMapReduceJob FAILED (timeout)
    [junit] Test org.apache.hadoop.mapreduce.lib.db.TestDBJob FAILED (timeout)
    [junit] Test org.apache.hadoop.mapreduce.lib.db.TestDataDrivenDBInputFormat FAILED (timeout)

which I believe are all failing on trunk
, Committed to trunk and branch-22. Thanks for reviewing, Scott., Integrated in Hadoop-Mapreduce-trunk-Commit #564 (See [https://hudson.apache.org/hudson/job/Hadoop-Mapreduce-trunk-Commit/564/])
    MAPREDUCE-2224. Fix synchronization bugs in JvmManager. Contributed by Todd Lipcon
, Integrated in Hadoop-Mapreduce-22-branch #33 (See [https://hudson.apache.org/hudson/job/Hadoop-Mapreduce-22-branch/33/])
    , Integrated in Hadoop-Mapreduce-trunk #643 (See [https://hudson.apache.org/hudson/job/Hadoop-Mapreduce-trunk/643/])
    , Patch for 0.22, Updated the patch to reflect the changes to JvmManager due to MR-2178, This is already committed to 0.22 and should go into a separate jira.
Created MAPREDUCE-4314 to commit the patch.]