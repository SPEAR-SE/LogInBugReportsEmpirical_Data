[Example stack trace:

{noformat}
	org.apache.hadoop.yarn.util.ApplicationClassLoader.loadClass(java.lang.String, boolean) line: 145	
	org.apache.hadoop.yarn.util.ApplicationClassLoader.loadClass(java.lang.String) line: 126	
	javax.xml.parsers.FactoryFinder.getProviderClass(java.lang.String, java.lang.ClassLoader, boolean, boolean) line: 112	
	javax.xml.parsers.FactoryFinder.newInstance(java.lang.String, java.lang.ClassLoader, boolean, boolean) line: 170	
	javax.xml.parsers.FactoryFinder.newInstance(java.lang.String, java.lang.ClassLoader, boolean) line: 147	
	javax.xml.parsers.FactoryFinder.find(java.lang.String, java.lang.String) line: 257	
	javax.xml.parsers.DocumentBuilderFactory.newInstance() line: 121	
	org.apache.hadoop.mapred.JobConf(org.apache.hadoop.conf.Configuration).loadResource(java.util.Properties, org.apache.hadoop.conf.Configuration$Resource, boolean) line: 1884	
	org.apache.hadoop.mapred.JobConf(org.apache.hadoop.conf.Configuration).loadResources(java.util.Properties, java.util.ArrayList<org.apache.hadoop.conf.Configuration.Resource>, boolean) line: 1861	
	org.apache.hadoop.mapred.JobConf(org.apache.hadoop.conf.Configuration).getProps() line: 1778	
	org.apache.hadoop.mapred.JobConf(org.apache.hadoop.conf.Configuration).get(java.lang.String) line: 713	
	org.apache.hadoop.mapred.JobConf(org.apache.hadoop.conf.Configuration).getTrimmed(java.lang.String) line: 732	
	org.apache.hadoop.mapred.JobConf(org.apache.hadoop.conf.Configuration).getClass(java.lang.String, java.lang.Class<?>) line: 1574	
	org.apache.hadoop.fs.FileSystem.getFileSystemClass(java.lang.String, org.apache.hadoop.conf.Configuration) line: 2259	
	org.apache.hadoop.fs.FileSystem.createFileSystem(java.net.URI, org.apache.hadoop.conf.Configuration) line: 2272	
	org.apache.hadoop.fs.FileSystem.access$200(java.net.URI, org.apache.hadoop.conf.Configuration) line: 86	
	org.apache.hadoop.fs.FileSystem$Cache.getInternal(java.net.URI, org.apache.hadoop.conf.Configuration, org.apache.hadoop.fs.FileSystem$Cache$Key) line: 2311	
	org.apache.hadoop.fs.FileSystem$Cache.get(java.net.URI, org.apache.hadoop.conf.Configuration) line: 2293	
	org.apache.hadoop.fs.FileSystem.get(java.net.URI, org.apache.hadoop.conf.Configuration) line: 317	
	org.apache.hadoop.fs.FileSystem.getLocal(org.apache.hadoop.conf.Configuration) line: 288	
	org.apache.hadoop.fs.LocalDirAllocator$AllocatorPerContext.confChanged(org.apache.hadoop.conf.Configuration) line: 270	
	org.apache.hadoop.fs.LocalDirAllocator$AllocatorPerContext.getLocalPathToRead(java.lang.String, org.apache.hadoop.conf.Configuration) line: 428	
	org.apache.hadoop.fs.LocalDirAllocator.getLocalPathToRead(java.lang.String, org.apache.hadoop.conf.Configuration) line: 164	
	org.apache.hadoop.mapred.YarnChild.configureLocalDirs(org.apache.hadoop.mapred.Task, org.apache.hadoop.mapred.JobConf) line: 225	
	org.apache.hadoop.mapred.YarnChild.configureTask(org.apache.hadoop.mapred.Task, org.apache.hadoop.security.Credentials, org.apache.hadoop.security.token.Token<org.apache.hadoop.mapreduce.security.token.JobTokenIdentifier>) line: 277	
	org.apache.hadoop.mapred.YarnChild.main(java.lang.String[]) line: 142	
{noformat}, I agree it would be an improvement to set the application classloader later on (just before user code runs). As a workaround you could set mapreduce.job.classloader.system.classes to include the relevant XML packages., Thanks Tom. I lowered the severity to minor which is more appropriate., Suggested patch based on 2.0.3-alpha., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12578332/MAPREDUCE-5146.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/3521//testReport/
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/3521//console

This message is automatically generated., It's not entirely clear to me how to add unit tests for this, as it deals with YarnChild.main()... I didn't find existing unit tests for YarnChild either.

I tested the change with a set of unit tests that exercise mapreduce (with mapreduce.job.classloader enabled), and can confirm that it no longer tries to load those com.sun.org.apache.xerces.* classes outside the job execution., +1 for the patch.

I've attached a test that I used when writing MAPREDUCE-1700. I couldn't find a simple way of integrating it in the Hadoop build, which is why it wasn't checked in there. I just ran it now with the patch for this issue and it passed., I just committed this. Thanks Sangjin!, Integrated in Hadoop-trunk-Commit #3646 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/3646/])
    MAPREDUCE-5146. application classloader may be used too early to load classes. Contributed by Sangjin Lee. (Revision 1470694)

     Result = SUCCESS
tomwhite : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1470694
Files : 
* /hadoop/common/trunk/hadoop-mapreduce-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapred/YarnChild.java
, Thanks Tom!, Integrated in Hadoop-Yarn-trunk #192 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk/192/])
    MAPREDUCE-5146. application classloader may be used too early to load classes. Contributed by Sangjin Lee. (Revision 1470694)

     Result = SUCCESS
tomwhite : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1470694
Files : 
* /hadoop/common/trunk/hadoop-mapreduce-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapred/YarnChild.java
, Integrated in Hadoop-Hdfs-trunk #1381 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/1381/])
    MAPREDUCE-5146. application classloader may be used too early to load classes. Contributed by Sangjin Lee. (Revision 1470694)

     Result = FAILURE
tomwhite : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1470694
Files : 
* /hadoop/common/trunk/hadoop-mapreduce-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapred/YarnChild.java
, Integrated in Hadoop-Mapreduce-trunk #1408 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/1408/])
    MAPREDUCE-5146. application classloader may be used too early to load classes. Contributed by Sangjin Lee. (Revision 1470694)

     Result = SUCCESS
tomwhite : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1470694
Files : 
* /hadoop/common/trunk/hadoop-mapreduce-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapred/YarnChild.java
]