[If a non-speculative and speculative tasks are launched for a map, runningMapTasks will increase twice. 
{code:}
  synchronized void addRunningTaskToTIP(TaskInProgress tip, TaskAttemptID id, 
                                        TaskTrackerStatus tts, 
                                        boolean isScheduled) {
...
    } else if (tip.isMapTask()) {
      ++runningMapTasks;
...
}
{code}
When the non-speculative task complete, runningMapTasks will decrease one.
{code:}
  public synchronized boolean completedTask(TaskInProgress tip, 
                                            TaskStatus status)
{
...
    } else if (tip.isMapTask()) {
      runningMapTasks -= 1;
...
}
{code}
Then the speculative task is killed and marked as KILLED_UNCLEAN and the task-cleanup task is launched.
When the task-cleanup task is complete, runningMapTasks will decrease one again.
{code:}
  private void failedTask(TaskInProgress tip, TaskAttemptID taskid, 
                          TaskStatus status, 
                          TaskTracker taskTracker, boolean wasRunning,
                          boolean wasComplete, boolean wasAttemptRunning) {
...
        if (tip.isMapTask() && !metricsDone) {
          runningMapTasks -= 1;
...
}
{code}

However, if the tasktracker on which the task-cleanup task is running fails, runningMapTasks will not decrease. This is because:
{code:}
  void lostTaskTracker(TaskTracker taskTracker) {
...
        if (!tip.isComplete() || 
            (tip.isMapTask() && !tip.isJobSetupTask() && 
             job.desiredReduces() != 0)) {
...
}
{code}
In this case, *tip.isComplete()* returns true and *job.desireReduces()* equals zero(map-only job). This means that for this map task , we only decreased runningMapTasks once , whereas we increased it twice. As a result, runningMapTasks counter is incorrect.
]