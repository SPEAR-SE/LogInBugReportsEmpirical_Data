[how is this related to rm restart?, [~bikassaha], RM restarting is not the root cause. In contrast, the root cause is that MR AM wants to blacklist one node, but RM doesn't know it., Can you please update the title to make it clear., Title updated., I've created the patch to make AM send blacklist nodes to RM. Basically the logical is described as follows:

1. Add blacklistAdditions and blacklistRemovals to remember the blacklisted nodes added or removed between two allocate calls. The two collections will be sent to RM in upcoming allocate call.

2. Whenever a container fails on a host, the host will be blacklisted, and will add to blacklistAdditions if blacklist is not ignored.

3. When changing from not ignoring blacklist to ignoring, we added all the blacklist nodes  to blacklistRemovals.

4. When changing from ignoring blacklist to not ignoring, we added all the blacklist nodes  to blacklistAdditions.

5.  Switching between ignoring and not ignoring blacklist nodes will not effect until the upcoming allocate call, but anyway, it will effect eventually.

Test cases have been modified test whether RM is aware of the blacklisted nodes., {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12606496/MAPREDUCE-5489.1.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4080//testReport/
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4080//console

This message is automatically generated., By the time we clear, could new entries have been added to the sets (and which will be lost upon clear()) ?
{code}
     release.clear();
+
+    if (blacklistAdditions.size() > 0 || blacklistRemovals.size() > 0) {
+      LOG.info("Update the blacklist for " + applicationId +
+          ": blacklistAdditions=" + blacklistAdditions.size() +
+          " blacklistRemovals=" +  blacklistRemovals.size());
+    }
+    blacklistAdditions.clear();
+    blacklistRemovals.clear();
{code}

I think the logic should be to not blacklist additional nodes if the threshold is crossed. Instead the logic in the patch (and probably before it too) seems to be to completely ignore all blacklisted nodes if the threshold is crossed. That seems incorrect.
If we choose to not blacklist additional new nodes then we should stop sending blacklist additions to the RM once threshold is reached. ie when the ignore flag becomes true.
{code}
+          // notify RM to ignore all the blacklisted nodes
+          blacklistAdditions.clear();
+          blacklistRemovals.addAll(blacklistedNodes);
         }
       } else {
         if (ignoreBlacklisting.compareAndSet(true, false)) {
           LOG.info("Ignore blacklisting set to false. Known: " + clusterNmCount
               + ", Blacklisted: " + blacklistedNodeCount + ", " + val + "%");
+          // notify RM of all the blacklisted nodes
+          blacklistAdditions.add
{code}

Will the change be simpler if whenever the blacklisted nodes change then the entire list is sent to the RM. Additionally RM is not updated if the ignore flag is set., bq. By the time we clear, could new entries have been added to the sets (and which will be lost upon clear()) ?

Seems to be impossible, because blacklistAdditions an blacklistedRemovals are only referred in two synchronized methods: heartbeat() and handleEvent()

bq. I think the logic should be to not blacklist additional nodes if the threshold is crossed.

Yes, if the threshold is reached, the blacklist will be be checked for the following assigned containers. That's why we need to notify the RM to remove the blacklist. Otherwise, the RM will continue to avoid assigning the containers on the blacklisted nodes to the AM; therefore, the nodes will actually still blacklisted.

bq. Will the change be simpler if whenever the blacklisted nodes change then the entire list is sent to the RM.

We need to wait until next heatbeat to notify RM, such that we need to remember all the changes that's why blacklistAdditions is there to track the increased blacklisted nodes., Typos
+ assertBlackListAddtionsAndRemovals
+    // Because makeRemoteRequest will not be ware of it until next call

In general the policy of ignoring all blacklisted nodes after the threshold is reached seems incorrect. Lets create a follow up jira to fix that., Fixed the typos in the newest patch., bq. In general the policy of ignoring all blacklisted nodes after the threshold is reached seems incorrect. Lets create a follow up jira to fix that.

Filed MAPREDUCE-5559 to track the issue, {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12606634/MAPREDUCE-5489.2.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4081//testReport/
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4081//console

This message is automatically generated., Looks good +1., SUCCESS: Integrated in Hadoop-trunk-Commit #4527 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/4527/])
MAPREDUCE-5489. MR jobs hangs as it does not use the node-blacklisting feature in RM requests (Zhijie Shen via bikas) (bikas: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1529005)
* /hadoop/common/trunk/hadoop-mapreduce-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerRequestor.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/v2/app/TestRMContainerAllocator.java
, FAILURE: Integrated in Hadoop-Yarn-trunk #352 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk/352/])
MAPREDUCE-5489. MR jobs hangs as it does not use the node-blacklisting feature in RM requests (Zhijie Shen via bikas) (bikas: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1529005)
* /hadoop/common/trunk/hadoop-mapreduce-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerRequestor.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/v2/app/TestRMContainerAllocator.java
, SUCCESS: Integrated in Hadoop-Hdfs-trunk #1542 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/1542/])
MAPREDUCE-5489. MR jobs hangs as it does not use the node-blacklisting feature in RM requests (Zhijie Shen via bikas) (bikas: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1529005)
* /hadoop/common/trunk/hadoop-mapreduce-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerRequestor.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/v2/app/TestRMContainerAllocator.java
, FAILURE: Integrated in Hadoop-Mapreduce-trunk #1568 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/1568/])
MAPREDUCE-5489. MR jobs hangs as it does not use the node-blacklisting feature in RM requests (Zhijie Shen via bikas) (bikas: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1529005)
* /hadoop/common/trunk/hadoop-mapreduce-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerRequestor.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/v2/app/TestRMContainerAllocator.java
, Closing old tickets that are already shipped in a release.]