[Thanks [~dhirajnilange] for reporting this issue. I'm thinking the condition can be true.
{code}
    float stepSize = samples.length / (float) numPartitions;
    int last = -1;
    for(int i = 1; i < numPartitions; ++i) {
      int k = Math.round(stepSize * i);
      while (last >= k && comparator.compare(samples[last], samples[k]) == 0) {
        ++k;
      }
      writer.append(samples[k], nullValue);
      last = k;
    }
{code}
{{k = Math.round(stepSize * i)}} can be equal to {{last = Math.round(stepSize * (i-1))}} if {{stepSize}} is less than 1., This issue is not valid. In the second iteration of the loop the value of last will be set to k: {code:java}last = k;{code}

So, as the condition is last >= k, the code will be used.

{code:java}
float stepSize = samples.length / (float) numPartitions;
int last = -1;
for(int i = 1; i < numPartitions; ++i) {
  int k = Math.round(stepSize * i);
  while (last >= k && comparator.compare(samples[last], samples[k]) == 0) {
    ++k;
  }
  writer.append(samples[k], nullValue);
  last = k;
}
{code}]