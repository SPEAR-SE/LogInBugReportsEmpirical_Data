[Attached the patch including the fixes and tests., Updated to remove needless argument against ReduceTask#getCombinerClass., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12582274/MAPREDUCE-5221.2.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:red}-1 javac{color:red}.  The patch appears to cause the build to fail.

Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/3590//console

This message is automatically generated., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12582273/MAPREDUCE-5221.1.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

      {color:red}-1 javac{color}.  The applied patch generated 1367 javac compiler warnings (more than the trunk's current 1366 warnings).

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/3589//testReport/
Javac warnings: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/3589//artifact/trunk/patchprocess/diffJavacWarnings.txt
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/3589//console

This message is automatically generated., Fixed to pass compile against v2., {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12582275/MAPREDUCE-5221.3.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/3591//testReport/
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/3591//console

This message is automatically generated., Thanks for taking this up, Tsuyoshi!

Comments on your patch:
 - In ReduceTask.getCombinerClass(), there is a lot of implicit type-casting. I am not sure if this will even work. getCombinerClass(), the variable clazz pointing to shuffle-plugin and ShuffleConsumerPlugin.Context all take in a Class<? extends Reducer> which won't be true for the new combiner. Did you test this at all? Can you please run a job with a new combiner with the patch? I doubt that it works.
 - Please fix the typos "Cominer" in the tests.
 - May be also add another simple test to verify if both new and old combiners are set.
 - Move this test code to the existing mapred.TestReduceTask.
, Thanks for your reviewing, Vinod!
I apologize for my delay on this. I'll update patch based on your comment., As you pointed out, org.apache.hadoop.mapreduce.TestReduceTask.testCominerIsUnSet failed by applying my patch. I'll fix it in the next patch., Ah, sorry, this test failure described above was caused by just timeout.
I'm checking whether the test of ShuffleConsumerPlugin works well or not with my patch., I've confirmed all tests are pass correctly. It's absolutely odd, because of the difference of o.a.h.mapred.Reducer and o.a.h.mapreduce.Reduce as you pointed out. Therefore, I've analysed the source code, and I've found some problems:

1. There are no codes to test with MiniMRYarnCluster with launching reduce-side combiner. TestMRAppWithCombiner seems to be enough, but reduce-side combiners are actually not launched because data size is too small to launch combiners.
2. ShuffleConsumerPlugin.Contexts only accepts Class<? extends o.a.h.mapred.Reducer> when constructing. It's needed to add new ShuffleConsumerPlugin.Contexts which accepts  Class<? extends o.a.h.mapreduce.Reducer>. # Or, change huffleConsumerPlugin.Contexts to accepts Class<?> and check the type with Java reflection API when constructing.
3. Shuffle#MergeManager only accepts Class<? extends o.a.h.mapred.Reducer>. It's needed to add new MergeManager which accepts  Class<? extends o.a.h.mapreduce.Reducer>.

I'll create a subtasks to deal with these problems step by step., I've pinged [~masokan] to verify this was no a regression because of the plugglable shuffle and pluggable sort changes (MAPREDUCE-4049 & MAPREDUCE-4808). It is not. After digging a bit it seems Hadoop2 ReduceTask is not wired to handle mapreduce combiner on the reducer side. This may have been overlooked when inverting mapred/mapreduce implementations in Hadoop 2. 
, [~apattin]: Thanks for sharing the current status. OK, I'll just support combiner on the reducer side to Hadoop 2 newly because it's not regression by the other changes., Hi Tsuyoshi,
  See my comments in MAPREDUCE-5294 and MAPREDUCE-5295.  We may not need the {{combinerClass}} argument to the constructor of {{ShuffleConsumerPlugin.Context}}.  This means the check on whether to use new or old API will be in one place namely {{CombinerRunner}}. You can probably remove the code that comes up with the value for {{combinerClass}}.

Thanks.

-- Asokan, Sorry, in the last sentence I meant the code can be removed from {{ReduceTask.java}}.

-- Asokan, bq. 1. There are no codes to test with MiniMRYarnCluster with launching reduce-side combiner. TestMRAppWithCombiner seems to be enough, but reduce-side combiners are actually not launched because data size is too small to launch combiners.

I've checked code again, and I've found that this is not true for reducer-side combiner. Reducer-side combiner is launched every time InMemoryMerger#merge is called - e.g. when ShuffleScheduler#copySucceeded is called. Therefore, TestMRAppWithCombiner with new MapReduce API is enough to test in this case. 

And, MAPREDUCE-5294 and MAPREDUCE-5295 are now blockers of this ticket., [~masokan]: I thought combinerClass can be removed from ReduceTask.java too. However,  combinerClass in ReduceTask.java is used to decide whether the instance of CombineOutputCollector is created now. If it need to avoid being instantiated, the combinerClass must remain. The instance seems to be not so much expensive for me, so I think it can be removed.  Do you have any opinion about this?, Hi Tsuyoshi,
  Sorry, I missed that.  We can either unconditionally create a {{CombineOutputCollector}} object and pass it to {{ShuffleConsumerPlugin.Context}} or we can eliminate that argument as well.  It can be instantiated in {{MergeManagerImpl}} when {{combinerRunner}} is not {{null.}}  What do you think?

Thanks.

-- Asokan, Hi Mariappan,
I've created a patch which just unconditionally creates a CombineOutputCollector, because I confirmed that instantiation of CombineOutputCollector is not expensive and implementation cost is also low.

I'll make this ticket's status Patch subimitted after finishing subtasks. Thank you for review., Just saw the patch and went through the surrounding code. 

Quick question/thought: I see that the ReduceTask fetches the combiner class via conf.getCombinerClass(). Just like we decide between old and new reducers as in the snippet below, will it be simpler to get the combiner class (and create the combine collector) based on {{useNewApi}} also? 

{code}
    if (useNewApi) {
      runNewReducer(job, umbilical, reporter, rIter, comparator, 
                    keyClass, valueClass);
    } else {
      runOldReducer(job, umbilical, reporter, rIter, comparator, 
                    keyClass, valueClass);
    }
{code}, [~kkambatl]: You're right. However, conf.getCombinerClass() is removed in the latest patch because CombinerRunner wraps the switch of new or old API. It's done in MAPREDUCE-5294., [~ozawa], I thought all of MAPREDUCE-5221, MAPREDUCE-5294 and MAPREDUCE-5295 are related and motivated by the same bug (from the description) that reduce-side combiner is not called using the new API. Or, did I miss any other motivation for the other two JIRAs?

IIUC, we could just use an if condition similar to the one in my previous comment, and that should solve the issue and we don't need the other two JIRAs. No? Am I missing something?

, [~kkambatl], I understood what you mean correctly. I explain why I choose the current design.

bq. I thought all of MAPREDUCE-5221, MAPREDUCE-5294 and MAPREDUCE-5295 are related and motivated by the same bug (from the description) that reduce-side combiner is not called using the new API. 

That's right.

bq. IIUC, we could just use an if condition similar to the one in my previous comment, and that should solve the issue and we don't need the other two JIRAs. No? Am I missing something?

No, there are a missing point.
The sequence of running combiner is different between old API and new API.  Task#CombinerRunner class abstracts it, so I choosed to reuse it in MAPREDUCE-5294. Do you think we don't use it?

The patch for MAPREDUCE-5221 and MAPREDUCE-5295 just removes needless arguments or adds tests. Should we merge these patches into one patch?, bq. Should we merge these patches into one patch?

Merging them into one patch/JIRA will make it a lot easier to comprehend. Thanks., [~kkambatl], OK, I'll do it., Merged changes in MAPREDUCE-5294 and MAPREDUCE-5295 into 1 patch file., {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12590885/MAPREDUCE-5221.5.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 4 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/3830//testReport/
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/3830//console

This message is automatically generated., The patch is easier to understand now. The patch can be summarized as follows (correct me if I am wrong): Use ReduceTask.CombinerRunner to run the combiner. That takes care of retrieving the combiner-class for the API being used and run the combiner accordingly. So, the current combine code (combineAndSpill) can be done away with.

Comment:
# From the looks of it, the {{Reporter}} passed to {{MergeManagerImpl}} constructor can only be a TaskReporter. For this patch, it should be okay to typecast it unconditionally. With the current if condition, it is easy to wonder how the combine works for Reporters which are not TaskReporter.
# Consequently, may be in a different JIRA, we should use Reporter/TaskReporter uniform everywhere - ShufflePlugin, MergeManagerImpl, and CombinerRunner.

Other than that, the patch looks good to me. Should we close this other JIRAs as duplicates?, 
bq. 1. From the looks of it, the Reporter passed to MergeManagerImpl constructor can only be a TaskReporter. For this patch, it should be okay to typecast it unconditionally. With the current if condition, it is easy to wonder how the combine works for Reporters which are not TaskReporter.

This is for some test cases which pass Reporter.NULL to MergeManagerImpl(e.g. TestMerger#testInMemoryMerger). Do you think  should we fix this test case?

bq. 2. Consequently, may be in a different JIRA, we should use Reporter/TaskReporter uniform everywhere - ShufflePlugin, MergeManagerImpl, and CombinerRunner.

I agree with uniforming Reporter/TaskReporter. I think we should do this in differenct JIRA.

bq. Other than that, the patch looks good to me. Should we close this other JIRAs as duplicates?

OK, I did it., Rebased the patch on the current trunk. , bq. With the current if condition, it is easy to wonder how the combine works for Reporters which are not TaskReporter.

I added comments to avoid the misunderstanding as follows:

<code>
+      // FIXME:  This is a workaround to avoid typecast error
+      // by being given Reporter.NULL as reporter in a test case
+      // (e.g. TestMerger#testInMemoryMerger).
+      // Basically, reporter is an instance of Task.TaskReporter.
</code>


Additionally, I noticed that 1. and 2. in the [~kkambatl]'s  comments  are related, and I think we should deal with these problems in another JIRA.
Thoughts?, {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12596772/MAPREDUCE-5221.6.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 4 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/3937//testReport/
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/3937//console

This message is automatically generated., [~kkambatl], do you have any feedbacks about this patch? Please let me know if we should have the point to fix., I haven't seen any update on this ticket in some time. Can a comment on the current status be provided we can get this improvement in?, I think almost work is done. I'll rebase the latest patch soon and wait for review., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12609792/MAPREDUCE-5221.7.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 4 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:red}-1 core tests{color}.  The test build failed in hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core 

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4132//testReport/
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4132//console

This message is automatically generated., The test results seem to fail because of Jenkins related problem(all tests fails by OutOfMemory Exception), so I attach the latest patch again., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12610461/MAPREDUCE-5221.7-2.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 4 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:red}-1 core tests{color}.  The patch failed these unit tests in hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient:

                  org.apache.hadoop.mapreduce.v2.TestMiniMRProxyUser
                  org.apache.hadoop.mapred.TestLazyOutput
                  org.apache.hadoop.mapred.TestMerge
                  org.apache.hadoop.mapreduce.security.TestJHSSecurity
                  org.apache.hadoop.mapred.TestJobSysDirWithDFS
                  org.apache.hadoop.mapred.TestClientRedirect
                  org.apache.hadoop.mapred.TestJobCleanup

                                      The following test timeouts occurred in hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient:

org.apache.hadoop.mapreduce.TestMapReduceLazyOutput
org.apache.hadoop.mapreduce.v2.TestMRJobs
org.apache.hadoop.mapreduce.v2.TestSpeculativeExecution
org.apache.hadoop.mapreduce.v2.TestUberAM
org.apache.hadoop.mapred.TestClusterMapReduceTestCase

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4147//testReport/
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4147//console

This message is automatically generated., I've been struggling with test failures. I've confirmed that the latest patch pass tests locally without TestJobCleanup. TestJobCleanup fails because it tries to handling events after stopping service. It's filed as YARN-1409 and MAPREDUCE-5623. I'll retry this JIRA after fixing these test failures., typo: s/without TestJobCleanup/except TestJobCleanup/, I apologize for my delay. Updated on current trunk based on [~kkambatl]'s comment.

1. TaskReporter and Reporter problem: Changed to use TaskReporter on {Map,Reduce}Task side, and use Reporter on Shuffle Plugin side. 
2. To cast unconditionally on MergeManagerImpl, put a condition to check whether Reporeter.NULL is passed., {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12634903/MAPREDUCE-5221.8.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 3 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4431//testReport/
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4431//console

This message is automatically generated., [~kkambatl], [~jianhe], [~jeagles], could you review a latest patch, please?, Completely forgot the context here, and I am a little caught up this week to take a closer look. If no one else gets to it, I ll likely take a look early next week. , Updated a patch on trunk., {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12639977/MAPREDUCE-5221.9.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 4 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4508//testReport/
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4508//console

This message is automatically generated., ping., Refreshed a patch., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12666366/MAPREDUCE-5221.10.patch
  against trunk revision d9a03e2.

    {color:red}-1 @author{color}.  The patch appears to contain  @author tags which the Hadoop community has agreed to not allow in code contributions.

    {color:green}+1 tests included{color}.  The patch appears to include  new or modified test files.

    {color:red}-1 patch{color}.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4844//console

This message is automatically generated., It looks a bug of script for checking author tags. Let me submit same patch again...

{quote}
======================================================================
======================================================================
    Checking there are no @author tags in the patch.
======================================================================
======================================================================


/bin/grep: /home/jenkins/jenkins-slave/workspace/PreCommit-MAPREDUCE-Build/../patchprocess/patch: No such file or directory
There appear to be  @author tags in the patch.
/home/jenkins/jenkins-slave/workspace/PreCommit-MAPREDUCE-Build/dev-support/test-patch.sh: line 384: cd: /home/jenkins/jenkins-slave/workspace/PreCommit-MAPREDUCE-Build/conf: No such file or directory
ls: cannot access *.xml.template: No such file or directory
{quote}, {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12666386/MAPREDUCE-5221.10.patch
  against trunk revision 3a0142b.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 4 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4845//testReport/
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4845//console

This message is automatically generated., \\
\\
| (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | pre-patch |  14m 34s | Pre-patch trunk compilation is healthy. |
| {color:green}+1{color} | @author |   0m  0s | The patch does not contain any @author tags. |
| {color:green}+1{color} | tests included |   0m  0s | The patch appears to include 4 new or modified test files. |
| {color:red}-1{color} | javac |   4m  4s | The patch appears to cause the build to fail. |
\\
\\
|| Subsystem || Report/Notes ||
| Patch URL | http://issues.apache.org/jira/secure/attachment/12666386/MAPREDUCE-5221.10.patch |
| Optional Tests | javadoc javac unit findbugs checkstyle |
| git revision | trunk / 6ae2a0d |
| Console output | https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/5614/console |


This message was automatically generated., Looks like this was never committed and left to rot.  Any reason it didn't make it?  If we refresh it can we get it committed?, [~davelatham] thank you for pinging. I'm refreshing a patch soon., \\
\\
| (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | pre-patch |  16m 35s | Pre-patch trunk compilation is healthy. |
| {color:green}+1{color} | @author |   0m  0s | The patch does not contain any @author tags. |
| {color:green}+1{color} | tests included |   0m  0s | The patch appears to include 4 new or modified test files. |
| {color:red}-1{color} | javac |   4m  7s | The patch appears to cause the build to fail. |
\\
\\
|| Subsystem || Report/Notes ||
| Patch URL | http://issues.apache.org/jira/secure/attachment/12666386/MAPREDUCE-5221.10.patch |
| Optional Tests | javadoc javac unit findbugs checkstyle |
| git revision | trunk / 2eae130 |
| Console output | https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/5867/console |


This message was automatically generated., Sorry for the delay. Refreshing a patch for trunk., \\
\\
| (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | pre-patch |  17m 28s | Pre-patch trunk compilation is healthy. |
| {color:green}+1{color} | @author |   0m  0s | The patch does not contain any @author tags. |
| {color:green}+1{color} | tests included |   0m  0s | The patch appears to include 5 new or modified test files. |
| {color:green}+1{color} | javac |   8m  0s | There were no new javac warning messages. |
| {color:green}+1{color} | javadoc |  10m 11s | There were no new javadoc warning messages. |
| {color:green}+1{color} | release audit |   0m 23s | The applied patch does not increase the total number of release audit warnings. |
| {color:red}-1{color} | checkstyle |   1m  4s | The applied patch generated  9 new checkstyle issues (total was 258, now 263). |
| {color:red}-1{color} | whitespace |   0m  1s | The patch has 1  line(s) that end in whitespace. Use git apply --whitespace=fix. |
| {color:green}+1{color} | install |   1m 31s | mvn install still works. |
| {color:green}+1{color} | eclipse:eclipse |   0m 35s | The patch built with eclipse:eclipse. |
| {color:green}+1{color} | findbugs |   2m 17s | The patch does not introduce any new Findbugs (version 3.0.0) warnings. |
| {color:green}+1{color} | mapreduce tests |   1m 50s | Tests passed in hadoop-mapreduce-client-core. |
| {color:red}-1{color} | mapreduce tests | 117m 16s | Tests failed in hadoop-mapreduce-client-jobclient. |
| | | 160m 57s | |
\\
\\
|| Reason || Tests ||
| Timed out tests | org.apache.hadoop.mapreduce.lib.jobcontrol.TestMapReduceJobControl |
\\
\\
|| Subsystem || Report/Notes ||
| Patch URL | http://issues.apache.org/jira/secure/attachment/12753560/MAPREDUCE-5221.11.patch |
| Optional Tests | javadoc javac unit findbugs checkstyle |
| git revision | trunk / dd149ad |
| checkstyle |  https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/5962/artifact/patchprocess/diffcheckstylehadoop-mapreduce-client-core.txt |
| whitespace | https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/5962/artifact/patchprocess/whitespace.txt |
| hadoop-mapreduce-client-core test log | https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/5962/artifact/patchprocess/testrun_hadoop-mapreduce-client-core.txt |
| hadoop-mapreduce-client-jobclient test log | https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/5962/artifact/patchprocess/testrun_hadoop-mapreduce-client-jobclient.txt |
| Test Results | https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/5962/testReport/ |
| Java | 1.7.0_55 |
| uname | Linux asf905.gq1.ygridcore.net 3.13.0-36-lowlatency #63-Ubuntu SMP PREEMPT Wed Sep 3 21:56:12 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux |
| Console output | https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/5962/console |


This message was automatically generated., The patches until v11 should be fixed to work with both old API and new API. I will fix it soon.]