[As of now there are 2 ways to achieve this
# Create a file for every tracker in _system-dir_. Upon a (re)join, simply create the file and upon a lost tracker, simply delete the file (as the first step before changing jobtracker's data structures). So, upon restart, there will be 2 lists, one obtained from the history and one from the _system-dir_. Lose all the tracker that have file missing in the _system-dir_. The trackers should be lost before opening up the jobtracker for the trackers. Note that the file will be created in memory (of namenode) and will be part of the heartbeat (once every tracker [re] join) while the deletes will be happening in a thread.
Benefits :  No sync required i.e faster per tracker update
Drawbacks : Too many files 
 
# Maintain in a file, a list currently available tracker  with the jobtracker. Assume that the jobtracker waits for X (say mapred.tasktracker.expiry.interval) units of time before creating the first file. After which on every tracker update (join/delete) the tracker-file is updated ( a new file will be written and then renamed to the old filename). Note that the file operation is not just in memory and requires writing the file. Hence this solution requires the access has to be batched up and not inline with heartbeat (i.e a thread which does this writing). 
Benefits : Less files
Drawbacks : Every update requires writing the current list of tracker to the file and replacing the old with new.

Both these solution (should) guarantee that the tracker that were lost in the old jobtracker should be lost in the new tracker. Thoughts?, MAPREDUCE-873 invalidates this.]