[I am looking into the issue. Will be posting the patch soon., patch attached for trunk and branch2, {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12625107/MAPREDUCE-5688.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:red}-1 core tests{color}.  The patch failed these unit tests in hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app:

                  org.apache.hadoop.mapreduce.v2.app.TestRMContainerAllocator

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4336//testReport/
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4336//console

This message is automatically generated., TestRMContainerAllocator does not fail due to this patch.
Just to double check, I ran the TestRMContainerAllocator test with and without the patch and I found that the test fails in both cases., Mit, thanks for the patch. Couple of minor nits.
* Re-title this jira since this is not a test problem according to the patch, but a race condition in the MRAppMaster that is exposed most frequently via this test.
* Add your analysis to the jira so that the actual problem is documented and captured for future use.
* Please determine if the java7 label is still accurate based on your analysis, Thanks Jon for the Review!

bq. Re-title this jira since this is not a test problem according to the patch, but a race condition in the MRAppMaster that is exposed most frequently via this test.
I have renamed this JIRA accordingly. I would like to make one clarification here. I do not see this problem as a race. The bug is exposed by this test running with JDK7 and its random ordering.

bq. Add your analysis to the jira so that the actual problem is documented and captured for future use.
This failure is intermittent. It is only caused when the test TestStagingCleanup runs in a particular order. For example, testDeletionofStagingOnReboot() followed by testDeletionofStagingOnKillLastTry()

The reason for the failure is due to the notifyIsLastAMRetry(). When this function is called, it calls setForcejobCompletion(). If the appMaster.stop() is called after the setForcejobCompletion(), it tries to stop the appMaster which was already forced to stop. As a result, it gets an NPE trying to stop the appMaster. If the appMaster.stop() is called in the first place, we won't get the NPE when it tries forceJobCompletion as there already is a null check before it proceeds.

hook.run() is also called in testDeletionofStagingOnKill(). But we do not get the NPE in that case. The reason for this is, in this test, we have 4 app attempts. _MRAppMaster appMaster = new TestMRApp(attemptId, mockAlloc, 4);_
where as in testDeletionofStagingOnKillLastTry() we have only 1 attempt to make sure there is no retry. _MRAppMaster appMaster = new TestMRApp(attemptId, mockAlloc, 1); //no retry_

bq. Please determine if the java7 label is still accurate based on your analysis
We still need the java7 label as the TestStagingCleanup will not always fail without this fix. It only fails when the tests run in a particular order., Thank you Mit.
+1 patch is good. 
It will be great if you submit an updated version and get +1 from Hadoop QA.
, Thanks for the inputs, [~airbots]. 
The failure of TestRMContainerAllocator is due to MAPREDUCE-5743 which was fixed a day ago.

I think the same patch will be good to go. I have resubmitted it so that I get the HadoopQA comment again. And I think it will pass this time., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12625107/MAPREDUCE-5688.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4350//testReport/
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4350//console

This message is automatically generated., The test failure is due to the improper design in MRAppMaster. There will be no test changes for this JIRA, Attaching a new patch., Jon, I looked in the issue further more and found that there should not be a problem with MRAppMaster. It is a test issue and I have uploaded the patch that reflect it., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12630317/MAPREDUCE-5688-v2.patch
  against trunk revision .

    {color:red}-1 patch{color}.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4364//console

This message is automatically generated., Reattaching the patch., *Problems*
# The test _testDeletionofStagingOnKillLastTry_ runs fine if it  was run individually or when it runs after _testDeletionofStagingOnKill_ or _testNoDeletionofStaginigOnReboot_.
# The test fails only when it runs after _testDeletionofStagingOnReboot_, _testDeletionofStagingOnUnregisteredFailure_ and _testDeletionofStaging_
# When I ran the tests _testDeletionofStagingOnReboot_, _testDeletionofStagingOnUnregisteredFailure_ and _testDeletionofStaging_ individually, they passes. But on looking the logs, I found that these tests passed even though NPEs were reported during their execution. I think that the _testDeletionofStagingOnKillLastTry_ fails because of these NPEs.

*Cause*
There are two causes for the NPEs that come up in the test.
# The attemptId in _testDeletionofStaging_ starts with 0. When test proceeds it decrements the value by 1 and ends up with attemptId=-1. Cause for one of the NPE.
# The JobHistoryEventHandler will throw an NPE when _setSummarySlotSeconds_ tries to access the counters as there will be no reference to it., {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12630321/MAPREDUCE-5688-v2.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4365//testReport/
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4365//console

This message is automatically generated., SUCCESS: Integrated in Hadoop-trunk-Commit #5205 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/5205/])
MAPREDUCE-5688. TestStagingCleanup fails intermittently with JDK7 (Mit Desai via jeagles) (jeagles: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1570631)
* /hadoop/common/trunk/hadoop-mapreduce-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/v2/app/TestStagingCleanup.java
, SUCCESS: Integrated in Hadoop-Yarn-trunk #489 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk/489/])
MAPREDUCE-5688. TestStagingCleanup fails intermittently with JDK7 (Mit Desai via jeagles) (jeagles: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1570631)
* /hadoop/common/trunk/hadoop-mapreduce-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/v2/app/TestStagingCleanup.java
, FAILURE: Integrated in Hadoop-Hdfs-trunk #1681 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/1681/])
MAPREDUCE-5688. TestStagingCleanup fails intermittently with JDK7 (Mit Desai via jeagles) (jeagles: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1570631)
* /hadoop/common/trunk/hadoop-mapreduce-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/v2/app/TestStagingCleanup.java
, SUCCESS: Integrated in Hadoop-Mapreduce-trunk #1706 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/1706/])
MAPREDUCE-5688. TestStagingCleanup fails intermittently with JDK7 (Mit Desai via jeagles) (jeagles: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1570631)
* /hadoop/common/trunk/hadoop-mapreduce-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/v2/app/TestStagingCleanup.java
, I pulled this into branch-2.4 as well.]