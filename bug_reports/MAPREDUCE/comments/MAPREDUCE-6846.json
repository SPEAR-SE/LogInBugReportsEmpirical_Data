[Working on a v1 patch now., Unfortunately, it looks like wildcards was implemented on top of this bug (see MAPREDUCE-6719). Fixing this so that fragments are honored might be a little tricky when wildcards are being used because you would lose the per-path fragment information.

I can see two potential approaches so far:
# Only use a wildcard when there have been no fragments specified by the user. This would preserve the intended naming of resources, but would reduce the number of instances where wildcards could be used.
# Silently ignore fragments specified by libjars when wildcards are enabled - I am not a fan of this approach because the application could be expecting a specific resource name for libjars so that symlinks don't conflict when resources are localized.

I will start working on a v1 patch for #1. Thoughts [~templedf] and [~sjlee0]?, Thanks for finding this issue [~ctrezzo]. Personally I would prefer option #1..., Would it be easy to support wildcards working as expected but simply throwing an error when there is a naming conflict?  For example, if the user specifies myfavjar*.jar#fav.jar and myfavjar*.jar only ends up globbing to a single entry like myfavjar-1.2.3.jar then users would expect this to be equivalent to specifying myfavjar-1.2.3.jar#fav.jar.  However if it ends up globbing to more than one entry then we can throw an error explaining there is a naming conflict due to multiple matches mapping to the same fragment name., Thanks [~jlowe]! I wasn't even thinking about the wildcard parsing from the generic options parser... that will have to change as well. Currently it looks like wildcards are only supported if the path is a directory and the wildcard is at the end of the path (i.e. in the form {{/mydir/*}}). If the wildcard is anywhere else, it is an illegal argument.

I can change the parsing of the path so that it handles fragments as well. At that point we can check if the wildcard resolves to multiple jars and throw an exception if there are conflicts as you suggested. That handles the generic options parser part of it.

Additionally though, we still have to handle the wildcard portion that handles adding libjars to the distributed cache. Right now, if it is enabled, it will add all libjars in the staging directory using a wildcard (i.e. {{.staging/libjars/*}}) to reduce the size of the jobconf. To handle this part of it, I figure I can go with the approach specified above in #1. If there is a path with a fragment specified we can not use the wildcard feature, otherwise the fragment will not be honored when added to the distributed cache.

Let me know if that sounds good!, bq. Right now, if it is enabled, it will add all libjars in the staging directory using a wildcard (i.e. .staging/libjars/*) to reduce the size of the jobconf. To handle this part of it, I figure I can go with the approach specified above in #1.

I was under the impression that if the wildcard mapped to only one file then we would _not_ convey this as a wildcard through to the staging directory but instead remap it to the one entry that it globbed to (i.e.: as if the user had specified the one path directly rather than a glob to that one path)., bq. I was under the impression that if the wildcard mapped to only one file then we would not convey this as a wildcard through to the staging directory but instead remap it to the one entry that it globbed to (i.e.: as if the user had specified the one path directly rather than a glob to that one path).

True, once it is in the staging dir it will not look like a wildcard. That being said, there is a second part to the feature. I will attempt to explain my current understanding:

See {{JobResourceUploader#uploadLibJars}}:
{code:java}
  private void uploadLibJars(Configuration conf, Collection<String> libjars,
      Path submitJobDir, FsPermission mapredSysPerms, short submitReplication)
      throws IOException {
    Path libjarsDir = JobSubmissionFiles.getJobDistCacheLibjars(submitJobDir);
    if (!libjars.isEmpty()) {
      FileSystem.mkdirs(jtFs, libjarsDir, mapredSysPerms);
      for (String tmpjars : libjars) {
        Path tmp = new Path(tmpjars);
        Path newPath =
            copyRemoteFiles(libjarsDir, tmp, conf, submitReplication);

        // Add each file to the classpath
        DistributedCache.addFileToClassPath(
            new Path(newPath.toUri().getPath()), conf, jtFs, !useWildcard);
      }

      if (useWildcard) {
        // Add the whole directory to the cache
        Path libJarsDirWildcard =
            jtFs.makeQualified(new Path(libjarsDir, DistributedCache.WILDCARD));

        DistributedCache.addCacheFile(libJarsDirWildcard.toUri(), conf);
      }
    }
  }
{code}
{{useWildcard}} is set by the {{mapreduce.client.libjars.wildcard}} config parameter. If this is set to true, then we add the files individually to the classpath (i.e. {{mapreduce.job.classpath.files}}), but then we glob them all together when adding them to the distributed cache (i.e. {{mapreduce.job.cache.files}}). At that point, we would loose the fragment name because the LocalResource objects submitted to YARN are created based off of those paths.

As a side note, this method also contains the original bug that motivated this jira. This bug is due to the uploadLibJars method creating a path from tmpjars instead of a URI. The path constructor does not support fragments and we loose them at this point with or without wildcards., Ah, yes, sorry I misunderstood.  Agreed that we need to suppress using a wildcard in the launch context when the user has specified a fragment name that differs from the original filename.  So to sum up, I'd like wildcards specified by the user to work as much as we can make them work (i.e.: as long as there aren't any fragment conflicts), and the automatic wildcarding in the launch context needs to be suppressed when it would end up ignoring the user's specified fragments.
, Perfect! Thanks [~jlowe]!, Attached is a v1 patch for trunk. Here is a summary of the changes:
# Modified JobResourceUploader#uploadLibJars to handle fragments using URI's instead of paths.
# Modified JobResourceUploader#uploadLibJars to work with the wild card feature. We now keep track of the paths and only use the wild card feature if there are no fragments specified for any individual libjar resource.
# Added tests to TestJobResourceUploader to verify that paths are handled correctly for libjars, files, archives and the jobjar. These tests verify behavior with different combinations of path types. For example: fragments/no fragments, schemes/no schemes, absolute vs relative paths.
# Created a new builder in TestJobResourceUploader to make creation of new tests easier. This splits out the resource limit test configuration into a separate conf that extends the new base resource configuration. With these confs it is easy to set up a unit test with different numbers of resources and path types.

I will kick hadoop qa for a run., | (/) *{color:green}+1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue} 0m 25s {color} | {color:blue} Docker mode activated. {color} |
| {color:green}+1{color} | {color:green} @author {color} | {color:green} 0m 0s {color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:green}+1{color} | {color:green} test4tests {color} | {color:green} 0m 0s {color} | {color:green} The patch appears to include 1 new or modified test files. {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 13m 42s {color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 0m 26s {color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green} 0m 20s {color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green} 0m 29s {color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green} 0m 14s {color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green} 0m 55s {color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 0m 23s {color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 0m 25s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 0m 23s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green} 0m 23s {color} | {color:green} hadoop-mapreduce-project_hadoop-mapreduce-client_hadoop-mapreduce-client-core generated 0 new + 153 unchanged - 4 fixed = 153 total (was 157) {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green} 0m 17s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green} 0m 26s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green} 0m 12s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green} 0m 0s {color} | {color:green} The patch has no whitespace issues. {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green} 1m 0s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 0m 21s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} unit {color} | {color:green} 3m 0s {color} | {color:green} hadoop-mapreduce-client-core in the patch passed. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green} 0m 17s {color} | {color:green} The patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black} 23m 57s {color} | {color:black} {color} |
\\
\\
|| Subsystem || Report/Notes ||
| Docker |  Image:yetus/hadoop:a9ad5d6 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12857133/MAPREDUCE-6846-trunk.001.patch |
| JIRA Issue | MAPREDUCE-6846 |
| Optional Tests |  asflicense  compile  javac  javadoc  mvninstall  mvnsite  unit  findbugs  checkstyle  |
| uname | Linux 7c770da155dc 3.13.0-105-generic #152-Ubuntu SMP Fri Dec 2 15:37:11 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | /testptch/hadoop/patchprocess/precommit/personality/provided.sh |
| git revision | trunk / e96a0b8 |
| Default Java | 1.8.0_121 |
| findbugs | v3.0.0 |
|  Test Results | https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/6915/testReport/ |
| modules | C: hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core U: hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core |
| Console output | https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/6915/console |
| Powered by | Apache Yetus 0.3.0   http://yetus.apache.org |


This message was automatically generated.

, Thanks [~ctrezzo] for your patch! I'm generally fine with the approach taken in this patch. Just curious, was this always broken, or is it a regression? If the latter, could you add the JIRA that introduced the regression?

(JobResourceUploader.java)
- l.169: {{getPathURI()}} will always result in a URL with a fragment even if the original path did not have the fragment. This is not incorrect, but this would have an effect of bloating the distributed cache entries in the configuration which can be sizable in cases. Can we not add the fragment if the fragment is null and the original URL does not have the fragment either?
- l.171: nit: it can simply be {{foundFragment = tmpURI.getFragment() != null}}
- I'm wondering, would it lead to simpler code if we iterate over the list once to determine whether there is a fragment and iterate again to do the population of the distributed cache? It might be slightly more expensive, but may lead to code that's easier to understand/maintain. Thoughts?
, Thanks [~sjlee0] for the review!

bq. Just curious, was this always broken, or is it a regression?
I took a look through various branches and see that it has been broken at least back to branch-2.0.0-alpha. It seems that this has been broken for a very long time.

bq. Can we not add the fragment if the fragment is null and the original URL does not have the fragment either?
I can do that. That is existing behavior before this patch, but it seems like a low risk change.

bq. I'm wondering, would it lead to simpler code if we iterate over the list once to determine whether there is a fragment and iterate again to do the population of the distributed cache? It might be slightly more expensive, but may lead to code that's easier to understand/maintain. Thoughts?
Ack. I will do this as well. Originally I avoided this approach due to it being slightly more expensive (as you stated above), but I think you are right in that the gains probably don't outweigh the added complexity.

I will post an updated patch. Thanks!, bq. I took a look through various branches and see that it has been broken at least back to branch-2.0.0-alpha. It seems that this has been broken for a very long time.

That's interesting. We saw that terasort uses fragments. But I don't think it has been broken that long?, Good question. Terasort is unaffected by this because it adds these paths with fragments via the distributed cache api directly (See TeraSort.java). Resources that are already in the distributed cache do not go through the JobResourceUploader "upload" code path., Attaching v2 for trunk.

This version does the following:
# Addresses [~sjlee0]'s comments.
# Adds two tests to cover wildcards.
# Replaces some Assert.fail calls in TestJobResourceUploader with more specific Assert.true or Assert.false calls., | (/) *{color:green}+1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue} 0m 35s {color} | {color:blue} Docker mode activated. {color} |
| {color:green}+1{color} | {color:green} @author {color} | {color:green} 0m 0s {color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:green}+1{color} | {color:green} test4tests {color} | {color:green} 0m 0s {color} | {color:green} The patch appears to include 1 new or modified test files. {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 14m 32s {color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 0m 27s {color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green} 0m 19s {color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green} 0m 28s {color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green} 0m 14s {color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green} 0m 50s {color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 0m 23s {color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 0m 24s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 0m 22s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green} 0m 22s {color} | {color:green} hadoop-mapreduce-project_hadoop-mapreduce-client_hadoop-mapreduce-client-core generated 0 new + 153 unchanged - 4 fixed = 153 total (was 157) {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green} 0m 15s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green} 0m 25s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green} 0m 11s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green} 0m 0s {color} | {color:green} The patch has no whitespace issues. {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green} 0m 54s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 0m 18s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} unit {color} | {color:green} 2m 47s {color} | {color:green} hadoop-mapreduce-client-core in the patch passed. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green} 0m 19s {color} | {color:green} The patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black} 24m 34s {color} | {color:black} {color} |
\\
\\
|| Subsystem || Report/Notes ||
| Docker |  Image:yetus/hadoop:a9ad5d6 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12858799/MAPREDUCE-6846-trunk.002.patch |
| JIRA Issue | MAPREDUCE-6846 |
| Optional Tests |  asflicense  compile  javac  javadoc  mvninstall  mvnsite  unit  findbugs  checkstyle  |
| uname | Linux d7e3b54abc7a 3.13.0-106-generic #153-Ubuntu SMP Tue Dec 6 15:44:32 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | /testptch/hadoop/patchprocess/precommit/personality/provided.sh |
| git revision | trunk / cc1292e |
| Default Java | 1.8.0_121 |
| findbugs | v3.0.0 |
|  Test Results | https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/6917/testReport/ |
| modules | C: hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core U: hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core |
| Console output | https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/6917/console |
| Powered by | Apache Yetus 0.3.0   http://yetus.apache.org |


This message was automatically generated.

, Thanks, [~ctrezzo].  Here's my comments:

# I found this code to be a little confusing: {code}          URI pathURI = getPathURI(newPath, tmpURI.getFragment());
          if (!foundFragment) {
            foundFragment = pathURI.getFragment() != null;
          }
          DistributedCache.addFileToClassPath(new Path(pathURI.getPath()), conf,
              jtFs, false);
          libjarURIs.add(pathURI);{code}  It seems odd to create {{pathURI}} and then do nothing with it that you couldn't do with {{tmpURI}} until the end.  For me it would be clearer as:{code}          DistributedCache.addFileToClassPath(new Path(tmpURI.getPath()), conf,
              jtFs, false);
          if (!foundFragment) {
            foundFragment = tmpURI.getFragment() != null;
          }
          libjarURIs.add(getPathURI(newPath, tmpURI.getFragment()));{code}
# I really hate the practice of catching meaningful exceptions and rethrowing them wrapped in something generic, but in the case of the {{URISyntaxException}} that shoudn't happen, I don't see where the API gives you much choice.  Since it is an unexpected exception that we're going to deliver ultimately to the application client, it would be nice to be really explicit about what went wrong.  You're bundling the original exception, but that doesn't always make it all the way through to the end user.
# Looks like you're not qualifying the URIs before adding them, as was done before: {code}        for (URI uri : libjarURIs) {
          DistributedCache.addCacheFile(uri, conf);
        }{code}
# If you rearrange {{uploadLibJars()}} like I suggested above, I don't think you need the change to {{getPathURI()}}.  Or am I missing something?
# From the perspective of the person trying to understand the unit test failure report, I don't think replacing the {{fail()}} calls with {{assertTrue()}} and {{assertFalse()}} makes anything clearer.  The assert message is (correctly) a plain statement of misconfiguration, which doesn't make sense with an {{assertTrue()}}/{{assertFalse()}}.
# Why are you splitting the {{ResourceLimitsConf}} into two classes?  Inheritance among inner classes always strikes me as a strange thing to do.
# Given that the {{ResourceLimitsConf.Builder}} is an inner class of {{ResourceLimitsConf}}, I don't think that renaming it to {{ResourceLimitsConfBuilder}} is particularly needful, and it makes the code a bit more cluttered.  I assume it's because you now have two classes and two builders, and you want to separate them, but see the previous point.
# Tiny nit, but I'd rather you spell out distributed cache than use DC.
# Might be nice to add a comment to the stub's {{mkdirs()}} to say why it's OK that it doesn't actually do anything.  You also might want to add a comment to the {{JobResourceUploader.mkdirs()}} method to explain that it's there so that it can be overridden.
, Thanks for the review [~templedf]!

Quick question:

bq. It seems odd to create pathURI and then do nothing with it that you couldn't do with tmpURI until the end.

Can we actually use tmpURI in this case? It seems as though the URIs/paths we submit to the DistributedCache#addFileToClassPath and DistributedCache#addCacheFile methods should match. This is so that the symlink is correctly resolved in MRApps#addToClasspathIfNotJar for libjars that are not jars.

My understanding is that we need to use the path returned by copyRemoteFiles() for DistributedCache#addCacheFile otherwise the resource will not be found during localization. Because of this, we also need the pathURI so that the paths match and we honor user supplied fragments. I can move the addFileToClassPath call to the top, but would still need the pathURI. Is this what you had in mind?
{code}
        Path newPath =
            copyRemoteFiles(libjarsDir, tmp, conf, submitReplication);
        try {
          URI pathURI = getPathURI(newPath, tmpURI.getFragment());
          DistributedCache.addFileToClassPath(new Path(pathURI.getPath()), conf,
              jtFs, false);
          if (!foundFragment) {
            foundFragment = pathURI.getFragment() != null;
          }
          libjarURIs.add(pathURI);
        }
{code}

Please let me know if I am missing something! Thanks!, What I meant was: {code}
        Path newPath =
            copyRemoteFiles(libjarsDir, tmp, conf, submitReplication);
        try {
          DistributedCache.addFileToClassPath(newPath, conf, jtFs, false);
          if (!foundFragment) {
            foundFragment = tmpURI.getFragment() != null;
          }
          libjarURIs.add(getPathURI(newPath, tmpURI.getFragment()));
        }
{code} but after taking a second look, I'm fine with it as is., Attached is a trunk v3 patch addressing [~templedf]'s comments. Here are some high-level changes:
# In JobResourceUploader I modified IOException messages to explicitly call out URISyntaxException.
# Added makeQualify call to JobResourceUploader#copyRemoteFiles, since all newPaths returned from that method should be qualified using the jtFs.
# Refactored both TestJobResourceUploader#ResourceConf inner classes into a single class.
# In TestJobResourceUploader I reverted changing Assert.fail calls to Assert.true or Assert.false., | (/) *{color:green}+1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue} 0m 25s {color} | {color:blue} Docker mode activated. {color} |
| {color:green}+1{color} | {color:green} @author {color} | {color:green} 0m 0s {color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:green}+1{color} | {color:green} test4tests {color} | {color:green} 0m 0s {color} | {color:green} The patch appears to include 1 new or modified test files. {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 13m 47s {color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 0m 25s {color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green} 0m 17s {color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green} 0m 29s {color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green} 0m 13s {color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green} 0m 53s {color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 0m 21s {color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 0m 24s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 0m 23s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green} 0m 23s {color} | {color:green} hadoop-mapreduce-project_hadoop-mapreduce-client_hadoop-mapreduce-client-core generated 0 new + 153 unchanged - 4 fixed = 153 total (was 157) {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green} 0m 15s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green} 0m 27s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green} 0m 11s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green} 0m 0s {color} | {color:green} The patch has no whitespace issues. {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green} 0m 58s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 0m 19s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} unit {color} | {color:green} 2m 47s {color} | {color:green} hadoop-mapreduce-client-core in the patch passed. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green} 0m 15s {color} | {color:green} The patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black} 23m 26s {color} | {color:black} {color} |
\\
\\
|| Subsystem || Report/Notes ||
| Docker |  Image:yetus/hadoop:a9ad5d6 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12860497/MAPREDUCE-6846-trunk.003.patch |
| JIRA Issue | MAPREDUCE-6846 |
| Optional Tests |  asflicense  compile  javac  javadoc  mvninstall  mvnsite  unit  findbugs  checkstyle  |
| uname | Linux 42fb4b2673d9 3.13.0-106-generic #153-Ubuntu SMP Tue Dec 6 15:44:32 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | /testptch/hadoop/patchprocess/precommit/personality/provided.sh |
| git revision | trunk / 84ddedc |
| Default Java | 1.8.0_121 |
| findbugs | v3.0.0 |
|  Test Results | https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/6921/testReport/ |
| modules | C: hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core U: hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core |
| Console output | https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/6921/console |
| Powered by | Apache Yetus 0.3.0   http://yetus.apache.org |


This message was automatically generated.

, Any other comments or suggestions on this [~templedf] [~jlowe] [~sjlee0]? I have tested this on a pseudo distributed cluster as well. Thanks again for the reviews!, Overall looks good. Thanks [~ctrezzo] for working on this. Any idea if {{DistributedCache.addCacheFile}} in the following block is necessary?

{noformat}
      if (useWildcard && !foundFragment) {
          ...
      } else {
        for (URI uri : libjarURIs) {
          DistributedCache.addCacheFile(uri, conf);
        }
      }
{noformat}, Thanks [~mingma]! The DistributedCache.addCacheFile call is necessary because the call to DistributedCache.addFileToClassPath in the same method no longer adds the URIs to the distributed cache. See that the last parameter is set to false instead of !wildcard. Please let me know if I have missed something., Attached is a v4 rebase on trunk. Thanks!, | (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue} 0m 31s {color} | {color:blue} Docker mode activated. {color} |
| {color:green}+1{color} | {color:green} @author {color} | {color:green} 0m 0s {color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:green}+1{color} | {color:green} test4tests {color} | {color:green} 0m 0s {color} | {color:green} The patch appears to include 1 new or modified test files. {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 14m 12s {color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 0m 27s {color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green} 0m 19s {color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green} 0m 30s {color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green} 0m 15s {color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green} 0m 56s {color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 0m 24s {color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 0m 27s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 0m 24s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green} 0m 24s {color} | {color:green} hadoop-mapreduce-project_hadoop-mapreduce-client_hadoop-mapreduce-client-core generated 0 new + 153 unchanged - 4 fixed = 153 total (was 157) {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green} 0m 17s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green} 0m 26s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green} 0m 11s {color} | {color:green} the patch passed {color} |
| {color:red}-1{color} | {color:red} whitespace {color} | {color:red} 0m 0s {color} | {color:red} The patch has 2 line(s) that end in whitespace. Use git apply --whitespace=fix. {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green} 0m 59s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 0m 21s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} unit {color} | {color:green} 2m 38s {color} | {color:green} hadoop-mapreduce-client-core in the patch passed. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green} 0m 16s {color} | {color:green} The patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black} 24m 17s {color} | {color:black} {color} |
\\
\\
|| Subsystem || Report/Notes ||
| Docker |  Image:yetus/hadoop:a9ad5d6 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12861360/MAPREDUCE-6846-trunk.004.patch |
| JIRA Issue | MAPREDUCE-6846 |
| Optional Tests |  asflicense  compile  javac  javadoc  mvninstall  mvnsite  unit  findbugs  checkstyle  |
| uname | Linux 51496d972f4e 3.13.0-106-generic #153-Ubuntu SMP Tue Dec 6 15:44:32 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | /testptch/hadoop/patchprocess/precommit/personality/provided.sh |
| git revision | trunk / bf3fb58 |
| Default Java | 1.8.0_121 |
| findbugs | v3.0.0 |
| whitespace | https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/6942/artifact/patchprocess/whitespace-eol.txt |
|  Test Results | https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/6942/testReport/ |
| modules | C: hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core U: hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core |
| Console output | https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/6942/console |
| Powered by | Apache Yetus 0.3.0   http://yetus.apache.org |


This message was automatically generated.

, V5 posted to fix whitespace., | (/) *{color:green}+1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue} 0m 17s {color} | {color:blue} Docker mode activated. {color} |
| {color:green}+1{color} | {color:green} @author {color} | {color:green} 0m 0s {color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:green}+1{color} | {color:green} test4tests {color} | {color:green} 0m 0s {color} | {color:green} The patch appears to include 1 new or modified test files. {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 13m 36s {color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 0m 44s {color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green} 0m 27s {color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green} 0m 46s {color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green} 0m 22s {color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green} 1m 26s {color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 0m 39s {color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 0m 42s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 0m 34s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green} 0m 34s {color} | {color:green} hadoop-mapreduce-project_hadoop-mapreduce-client_hadoop-mapreduce-client-core generated 0 new + 153 unchanged - 4 fixed = 153 total (was 157) {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green} 0m 25s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green} 0m 43s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green} 0m 17s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green} 0m 0s {color} | {color:green} The patch has no whitespace issues. {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green} 1m 33s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 0m 29s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} unit {color} | {color:green} 3m 34s {color} | {color:green} hadoop-mapreduce-client-core in the patch passed. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green} 0m 21s {color} | {color:green} The patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black} 28m 2s {color} | {color:black} {color} |
\\
\\
|| Subsystem || Report/Notes ||
| Docker |  Image:yetus/hadoop:a9ad5d6 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12861465/MAPREDUCE-6846-trunk.005.patch |
| JIRA Issue | MAPREDUCE-6846 |
| Optional Tests |  asflicense  compile  javac  javadoc  mvninstall  mvnsite  unit  findbugs  checkstyle  |
| uname | Linux 53c6eb1ec14f 3.13.0-107-generic #154-Ubuntu SMP Tue Dec 20 09:57:27 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | /testptch/hadoop/patchprocess/precommit/personality/provided.sh |
| git revision | trunk / 4d1fac5 |
| Default Java | 1.8.0_121 |
| findbugs | v3.0.0 |
|  Test Results | https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/6943/testReport/ |
| modules | C: hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core U: hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core |
| Console output | https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/6943/console |
| Powered by | Apache Yetus 0.3.0   http://yetus.apache.org |


This message was automatically generated.

, +1. I will wait until EOD to commit in case [~daniel@cloudera.com] [~jlowe] [~sjlee0] have other suggestions., Sorry, I have a couple more nits:

# In {{uploadLibJars()}} you should use the diamond operator here:{code}      Collection<URI> libjarURIs = new LinkedList<URI>();{code}
# In {{uploadLibJars()}}, you have: {code}        try {
          tmpURI = new URI(tmpjars);
        } catch (URISyntaxException e) {
          throw new IllegalArgumentException(e);
        }{code}  Can we make the exception message as clear as the others?
# Call me old fashioned, but I'd rather you didn't change this line in {{uploadLibJars()}} to break on the dot instead of the space: {code}        Path libJarsDirWildcard = jtFs
            .makeQualified(new Path(libjarsDir, DistributedCache.WILDCARD));{code}

Thanks!, Thanks [~templedf] for the additional comments. Attached is v6 to address them., | (/) *{color:green}+1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue} 0m 41s {color} | {color:blue} Docker mode activated. {color} |
| {color:green}+1{color} | {color:green} @author {color} | {color:green} 0m 0s {color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:green}+1{color} | {color:green} test4tests {color} | {color:green} 0m 0s {color} | {color:green} The patch appears to include 1 new or modified test files. {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 12m 39s {color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 0m 23s {color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green} 0m 18s {color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green} 0m 25s {color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green} 0m 15s {color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green} 0m 45s {color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 0m 21s {color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 0m 21s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 0m 20s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green} 0m 20s {color} | {color:green} hadoop-mapreduce-project_hadoop-mapreduce-client_hadoop-mapreduce-client-core generated 0 new + 153 unchanged - 4 fixed = 153 total (was 157) {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green} 0m 14s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green} 0m 22s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green} 0m 10s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green} 0m 0s {color} | {color:green} The patch has no whitespace issues. {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green} 0m 49s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 0m 17s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} unit {color} | {color:green} 2m 39s {color} | {color:green} hadoop-mapreduce-client-core in the patch passed. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green} 0m 16s {color} | {color:green} The patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black} 21m 59s {color} | {color:black} {color} |
\\
\\
|| Subsystem || Report/Notes ||
| Docker |  Image:yetus/hadoop:a9ad5d6 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12861530/MAPREDUCE-6846-trunk.006.patch |
| JIRA Issue | MAPREDUCE-6846 |
| Optional Tests |  asflicense  compile  javac  javadoc  mvninstall  mvnsite  unit  findbugs  checkstyle  |
| uname | Linux 6cf621d8ec5a 4.4.0-43-generic #63-Ubuntu SMP Wed Oct 12 13:48:03 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | /testptch/hadoop/patchprocess/precommit/personality/provided.sh |
| git revision | trunk / 73835c7 |
| Default Java | 1.8.0_121 |
| findbugs | v3.0.0 |
|  Test Results | https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/6945/testReport/ |
| modules | C: hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core U: hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core |
| Console output | https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/6945/console |
| Powered by | Apache Yetus 0.3.0   http://yetus.apache.org |


This message was automatically generated.

, Any additional comments [~templedf]? Thanks!, The latest patch LGTM. [~daniel@cloudera.com] what do you think?, Latest changes look good to me.  I'd say that you should make sure to update the docs to reflect the new behavior, but there aren't any! ;), Thanks [~daniel@cloudera.com]! Would you do the honors of committing this?, Thanks for the patch, [~ctrezzo], and thanks for the reviews, [~sjlee0] and [~jlowe]!  Committed to trunk and branch-2., SUCCESS: Integrated in Jenkins build Hadoop-trunk-Commit #11537 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/11537/])
MAPREDUCE-6846. Fragments specified for libjar paths are not handled (templedf: rev fc0885da294490c3984c2231a4d35f89b3b520d4)
* (edit) hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/JobResourceUploader.java
* (edit) hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/test/java/org/apache/hadoop/mapreduce/TestJobResourceUploader.java
, Thanks everyone for the reviews and commit!, SUCCESS: Integrated in Jenkins build Hadoop-trunk-Commit #11591 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/11591/])
MAPREDUCE-6846. Fragments specified for libjar paths are not handled (templedf: rev fc0885da294490c3984c2231a4d35f89b3b520d4)
* (edit) hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/JobResourceUploader.java
* (edit) hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/test/java/org/apache/hadoop/mapreduce/TestJobResourceUploader.java
]