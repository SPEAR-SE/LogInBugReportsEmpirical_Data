[usual questions: which versions of hadoop, and can you supply the change as a .patch file, either from diff or git diff.

thanks, This seems like trunk and yes, I agree that if the job fails, then the job should return a proper error code, Patch with some changes from the original proposal

# check for {{job.isSuccess()}} performed in try/catch block, so that IOEs get caught.
# added new {{JOB_FAILED}} value; lets scripts & people interpret failure better 
I also took the opportunity to review the run method and patched the catch of Throwable in the parse phase to print Exception.toString, not Exception.getMessage, for the usual reasons.

Tests: no, none, {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12606282/MAPREDUCE-5549-001.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-tools/hadoop-distcp.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4079//testReport/
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4079//console

This message is automatically generated., +1. Looks good to me. Thanks Steve!, patch rebased against trunk; no other changes, {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12653802/MAPREDUCE-5549-002.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-tools/hadoop-distcp.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4709//testReport/
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4709//console

This message is automatically generated., We should also consider using setDefaultUncaughtExceptionHandler at least for the main thread to exit with another error code., Thanks a lot for the patch David and Steve. The return code should be -5 (in DistCpConstants.java) because -3 is already being used by ACLS_NOT_SUPPORTED. Other than that, the patch looks good and I'll be happy to commit it once that change is made., Just saw your comment Gera. Do you have a suggestion for how an exception in the main thread should be handled differently than it is now? From what I can see, Exception is being caught, LOG.error("Couldn't complete DistCp operation: ", e); and exitCode is being returned., Ravi the base class is {{Throwable}}, therefore is not sufficient to catch an exception. I find the way it's handled via {{setDefaultUncaughtExceptionHandler}} more elegant. There are a bunch of examples in Hadoop including MapReduce., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12653802/MAPREDUCE-5549-002.patch
  against trunk revision 7a346bc.

    {color:red}-1 patch{color}.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/5282//console

This message is automatically generated., Moving bugs out of previously closed releases into the next minor release 2.8.0., \\
\\
| (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:red}-1{color} | patch |   0m  0s | The patch command could not apply the patch during dryrun. |
\\
\\
|| Subsystem || Report/Notes ||
| Patch URL | http://issues.apache.org/jira/secure/attachment/12653802/MAPREDUCE-5549-002.patch |
| Optional Tests | javadoc javac unit findbugs checkstyle |
| git revision | trunk / d3797f9 |
| Console output | https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/5862/console |


This message was automatically generated.]