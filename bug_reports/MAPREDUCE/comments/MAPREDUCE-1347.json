[Here's a patch that attempts to solve this issue., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12471975/mapreduce.1347.r1.diff
  against trunk revision 1075670.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    -1 contrib tests.  The patch failed contrib unit tests.

    +1 system test framework.  The patch passed system test framework compile.

Test results: https://hudson.apache.org/hudson/job/PreCommit-MAPREDUCE-Build/106//testReport/
Findbugs warnings: https://hudson.apache.org/hudson/job/PreCommit-MAPREDUCE-Build/106//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://hudson.apache.org/hudson/job/PreCommit-MAPREDUCE-Build/106//console

This message is automatically generated., I don't think this double-checked locking is safe. One thread may be calling put() on the map while another is calling get() outside the synchronized section. This can cause the getter to throw an exception or sometimes even return the wrong entry., Hrm, I agree and apologize, that was _silly_. Would using a synchronized map solve this?, Maybe best to use Guava's MapMaker.makeComputingMap?
http://guava-libraries.googlecode.com/svn/trunk/javadoc/com/google/common/collect/MapMaker.html#makeComputingMap(com.google.common.base.Function)

Guava hasn't made it into trunk ivy yet, but there was a thread on the mailing list a while back where everyone seemed to agree it was a good idea., Patch that uses Guava's MapMaker.makeComputingMap., Tests added for multi-threaded exec of MultiTextOF., Note: Guava has been added as a dependency. A thread where it was agreed upon can be found here: http://search-hadoop.com/m/NrnW72tdHRD1/guava&subj=Add+Guava+as+a+dependency+, The last patch's test case data may not have been sufficient to test out the changes. Only test data contents have been changed in this new patch., +1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12480270/MAPREDUCE-1347.r3.diff
  against trunk revision 1126801.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

    +1 system test framework.  The patch passed system test framework compile.

Test results: https://builds.apache.org/hudson/job/PreCommit-MAPREDUCE-Build/300//testReport/
Findbugs warnings: https://builds.apache.org/hudson/job/PreCommit-MAPREDUCE-Build/300//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/hudson/job/PreCommit-MAPREDUCE-Build/300//console

This message is automatically generated., +1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12480270/MAPREDUCE-1347.r3.diff
  against trunk revision 1126801.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

    +1 system test framework.  The patch passed system test framework compile.

Test results: https://builds.apache.org/hudson/job/PreCommit-MAPREDUCE-Build/301//testReport/
Findbugs warnings: https://builds.apache.org/hudson/job/PreCommit-MAPREDUCE-Build/301//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/hudson/job/PreCommit-MAPREDUCE-Build/301//console

This message is automatically generated., - for the guava dependency, it should probably be conf="mapred->default" rather than releaseaudit (otherwise the jars won't end up in the built package)
- the constant for version should be "guava.version" to match the naming convention
- this test case seems unlikely to actually fail even if the bug persisted -- if you revert the fix and keep the test case, does it fail more than 50% of the time? Would it be possible to directly instantiate the outputformat with some mocks without having to go through running a whole job? Then you could hit it harder since you wouldn't have to touch disk.
- maybe add a comment explaining that the use of the computing map is to make sure this code is thread-safe?, 
-----------------------------------------------------------
This is an automatically generated e-mail. To reply, visit:
https://reviews.apache.org/r/953/
-----------------------------------------------------------

Review request for hadoop-mapreduce and Todd Lipcon.


Summary
-------

Used the makeComputingMap from Guava's MapMaker to provide a thread safe way of creating a RecordWriter cache.

For some reason, the map is not really caching it and is instead trying to apply() over and over again for the same key-value pairs.


This addresses bug MAPREDUCE-1347.
    http://issues.apache.org/jira/browse/MAPREDUCE-1347


Diffs
-----

  mapreduce/ivy.xml 85ee014 
  mapreduce/ivy/libraries.properties 9d40aaa 
  mapreduce/src/java/org/apache/hadoop/mapred/lib/MultipleOutputFormat.java b8944f1 
  mapreduce/src/test/mapred/org/apache/hadoop/mapred/TestMultipleTextOutputFormat.java 14c097d 

Diff: https://reviews.apache.org/r/953/diff


Testing
-------

Added a test case, but it fails with the current behavior of MapMaker's makeComputingMap() (would pass if its alright)


Thanks,

Harsh

, 
-----------------------------------------------------------
This is an automatically generated e-mail. To reply, visit:
https://reviews.apache.org/r/953/#review910
-----------------------------------------------------------


I think your issue with the test case is that you're calling tMOF.getRecordWriter() inside the thread. So, each thread has its own record writer and hence has its own computing map. You should call that from outside the thread, and just have the threads do the writing.

- Todd


On 2011-06-24 19:06:46, Harsh J wrote:
bq.  
bq.  -----------------------------------------------------------
bq.  This is an automatically generated e-mail. To reply, visit:
bq.  https://reviews.apache.org/r/953/
bq.  -----------------------------------------------------------
bq.  
bq.  (Updated 2011-06-24 19:06:46)
bq.  
bq.  
bq.  Review request for hadoop-mapreduce and Todd Lipcon.
bq.  
bq.  
bq.  Summary
bq.  -------
bq.  
bq.  Used the makeComputingMap from Guava's MapMaker to provide a thread safe way of creating a RecordWriter cache.
bq.  
bq.  For some reason, the map is not really caching it and is instead trying to apply() over and over again for the same key-value pairs.
bq.  
bq.  
bq.  This addresses bug MAPREDUCE-1347.
bq.      http://issues.apache.org/jira/browse/MAPREDUCE-1347
bq.  
bq.  
bq.  Diffs
bq.  -----
bq.  
bq.    mapreduce/ivy.xml 85ee014 
bq.    mapreduce/ivy/libraries.properties 9d40aaa 
bq.    mapreduce/src/java/org/apache/hadoop/mapred/lib/MultipleOutputFormat.java b8944f1 
bq.    mapreduce/src/test/mapred/org/apache/hadoop/mapred/TestMultipleTextOutputFormat.java 14c097d 
bq.  
bq.  Diff: https://reviews.apache.org/r/953/diff
bq.  
bq.  
bq.  Testing
bq.  -------
bq.  
bq.  Added a test case, but it fails with the current behavior of MapMaker's makeComputingMap() (would pass if its alright)
bq.  
bq.  
bq.  Thanks,
bq.  
bq.  Harsh
bq.  
bq.

, 

bq.  On 2011-06-24 19:39:07, Todd Lipcon wrote:
bq.  > I think your issue with the test case is that you're calling tMOF.getRecordWriter() inside the thread. So, each thread has its own record writer and hence has its own computing map. You should call that from outside the thread, and just have the threads do the writing.

/me bangs head on the wall.

Thanks for catching it! Tests fail/pass now (w/o and w/ old style sync).

Posting patch to JIRA in a bit, unless there are further comments beyond that?


- Harsh


-----------------------------------------------------------
This is an automatically generated e-mail. To reply, visit:
https://reviews.apache.org/r/953/#review910
-----------------------------------------------------------


On 2011-06-24 19:06:46, Harsh J wrote:
bq.  
bq.  -----------------------------------------------------------
bq.  This is an automatically generated e-mail. To reply, visit:
bq.  https://reviews.apache.org/r/953/
bq.  -----------------------------------------------------------
bq.  
bq.  (Updated 2011-06-24 19:06:46)
bq.  
bq.  
bq.  Review request for hadoop-mapreduce and Todd Lipcon.
bq.  
bq.  
bq.  Summary
bq.  -------
bq.  
bq.  Used the makeComputingMap from Guava's MapMaker to provide a thread safe way of creating a RecordWriter cache.
bq.  
bq.  For some reason, the map is not really caching it and is instead trying to apply() over and over again for the same key-value pairs.
bq.  
bq.  
bq.  This addresses bug MAPREDUCE-1347.
bq.      http://issues.apache.org/jira/browse/MAPREDUCE-1347
bq.  
bq.  
bq.  Diffs
bq.  -----
bq.  
bq.    mapreduce/ivy.xml 85ee014 
bq.    mapreduce/ivy/libraries.properties 9d40aaa 
bq.    mapreduce/src/java/org/apache/hadoop/mapred/lib/MultipleOutputFormat.java b8944f1 
bq.    mapreduce/src/test/mapred/org/apache/hadoop/mapred/TestMultipleTextOutputFormat.java 14c097d 
bq.  
bq.  Diff: https://reviews.apache.org/r/953/diff
bq.  
bq.  
bq.  Testing
bq.  -------
bq.  
bq.  Added a test case, but it fails with the current behavior of MapMaker's makeComputingMap() (would pass if its alright)
bq.  
bq.  
bq.  Thanks,
bq.  
bq.  Harsh
bq.  
bq.

, New patch, with multithread case test attached.

Patch uses the utility test functions from https://issues.apache.org/jira/browse/HADOOP-7298 to test with multiple threads.

Local testing easily has the older implementation failing (every attempt, with low conflict varience), while newer passes without a conflict., This issue is blocked until HADOOP-7298 is integrated to common., Updated patch to remove unused imports from the test…

(No code changes, just import cleanups), (Ready for reviewing), -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12483808/MAPREDUCE-1347.r5.diff
  against trunk revision 1139400.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    -1 javac.  The patch appears to cause tar ant target to fail.

    -1 findbugs.  The patch appears to cause Findbugs (version 1.3.9) to fail.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed these core unit tests:


    -1 contrib tests.  The patch failed contrib unit tests.

    -1 system test framework.  The patch failed system test framework compile.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/418//testReport/
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/418//console

This message is automatically generated., Please ignore Hudson comment (HADOOP-7298 not integrated yet)., Looks like there is a strange character on this line:
{code}
+      // Overriding to not use 'job', its unnecessary for the test caseÉ
{code}

bq. +      // Ideally, this method should get called ONLY once per "name".
I think the word "ideally" implies that it might not be that way. It should read "This method must be called only once...", Comment's comment issues addressed :)

The É thing was due to Mac's compose key, I'd typed a "…" there. Removed., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12484597/MAPREDUCE-1347.r6.diff
  against trunk revision 1140942.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    -1 javadoc.  The javadoc tool appears to have generated 1 warning messages.

    -1 javac.  The patch appears to cause tar ant target to fail.

    -1 findbugs.  The patch appears to cause Findbugs (version 1.3.9) to fail.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed these core unit tests:


    -1 contrib tests.  The patch failed contrib unit tests.

    -1 system test framework.  The patch failed system test framework compile.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/432//testReport/
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/432//console

This message is automatically generated., Trying again, not sure what went wrong last time., Oh oops, forgot about the blocker. Marking as in-progress., Update to incorporate the HADOOP-7298 classname changes., This should be good to go for a QA run now., Updating patch for trunk.

Hoping this goes in since its already been reviewed. Gets difficult updating patches since the trunk layouts are a storm.

The r7 patch can apply to 0.22 I believe, if it is required. r8 is basically r7 adapted to trunk., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12492886/MAPREDUCE-1347.r8.diff
  against trunk revision .

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    -1 findbugs.  The patch appears to introduce 8 new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed unit tests in hadoop-mapreduce-project.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/596//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/596//artifact/trunk/patchprocess/newPatchFindbugsWarningshadoop-yarn-common.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/596//artifact/trunk/patchprocess/newPatchFindbugsWarningshadoop-yarn-api.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/596//artifact/trunk/patchprocess/newPatchFindbugsWarningshadoop-yarn-server-common.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/596//artifact/trunk/patchprocess/newPatchFindbugsWarningshadoop-yarn-server-resourcemanager.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/596//artifact/trunk/patchprocess/newPatchFindbugsWarningshadoop-yarn-server-nodemanager.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/596//artifact/trunk/patchprocess/newPatchFindbugsWarningshadoop-mapreduce-client-app.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/596//artifact/trunk/patchprocess/newPatchFindbugsWarningshadoop-mapreduce-client-core.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/596//artifact/trunk/patchprocess/newPatchFindbugsWarningshadoop-mapreduce-client-common.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/596//artifact/trunk/patchprocess/newPatchFindbugsWarningshadoop-mapreduce-client-hs.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/596//artifact/trunk/patchprocess/newPatchFindbugsWarningshadoop-mapreduce-client-shuffle.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/596//artifact/trunk/patchprocess/newPatchFindbugsWarningshadoop-mapreduce-client-jobclient.html
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/596//console

This message is automatically generated., Bump, any more reviews on this one?, This bugfix can still make it to 0.23.x, any comments on the latest patch fix and test?, Looking at the patch the changes look good to me.  My only real concern is that the patch needs to be upmerged. TestMultipleTextOutputFormat.java has moved to a new location., Thanks for taking a look at this. Indeed the test now lies under the client-jobclient submodule, while the actual library is under client-core. Am I right in thinking thats highly unexpected, and that when rebasing I ought to move the file to the right place (Or instead do it as another JIRA)?, I didn't notice that.  Yes lets move the test to the same place as the code.  It may need to be on a different JIRA depending on if it uses the mini cluster or not.  If it uses the minicluster we may need to leave part of the test where it is and put in some real unit tests instead., Updated (rebased) patch that just fixes the issue and uses the right test location.

Removed ivy markers as those are irrelevant today (for guava is already available).

For moving the tests, since there seem to be lots of tests lying split like that, lets discuss/investigate it over at MAPREDUCE-4253 instead., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12526625/MAPREDUCE-1347.r9.diff
  against trunk revision .

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 1 new or modified test files.

    -1 javac.  The applied patch generated 1934 javac compiler warnings (more than the trunk's current 1933 warnings).

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 eclipse:eclipse.  The patch built with eclipse:eclipse.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed unit tests in hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/2382//testReport/
Javac warnings: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/2382//artifact/trunk/trunk/patchprocess/diffJavacWarnings.txt
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/2382//console

This message is automatically generated., bq. -1 javac. The applied patch generated 1934 javac compiler warnings (more than the trunk's current 1933 warnings).

Will investigate and fix this for the current patch. Most likely may be a now-deprecated use of APIs., New patch that removes the MapMaker API of Guava and moves to the CacheBuilder, to avoid the deprecation warning., {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12548160/MAPREDUCE-1347.r10.diff
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/2913//testReport/
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/2913//console

This message is automatically generated., Patch still applies cleanly to trunk. Any further comments atop jenkins' +1?, Since this patch makes a safe change with a properly working test (that fails without the fix, exposing the issue cleanly), and has been awaiting further review for long (has already addressed previous comments), I'll go ahead and commit it in by tomorrow EOD unless anyone else has any objections. Thanks! :), This appears to still be broken in 2.x Do we want to fix this?]