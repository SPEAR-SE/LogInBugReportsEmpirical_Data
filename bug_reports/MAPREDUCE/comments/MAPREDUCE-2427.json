[When initializing throwing IOException if 'history' is present and it is not a directory., When initializing job history throwing IOException if 'history' is present and it is not a directory.
, +1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12479605/MAPREDUCE-2427.patch
  against trunk revision 1104687.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

    +1 system test framework.  The patch passed system test framework compile.

Test results: https://builds.apache.org/hudson/job/PreCommit-MAPREDUCE-Build/265//testReport/
Findbugs warnings: https://builds.apache.org/hudson/job/PreCommit-MAPREDUCE-Build/265//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/hudson/job/PreCommit-MAPREDUCE-Build/265//console

This message is automatically generated., Hi Devaraj. This patch seems to address the case where the "history" location is a file at startup. But, if I understand Sammer correctly, the problem here is when users do something like rm -Rf the history/ directory while the JT is running. Then, next time (and all future times) that a file is moving into the history dir, it ends up replacing this file.

So, I think we need to change the place where the file gets renamed so that it checks/mkdirs the history/ directory first., Hi Todd,
    I don't see the code where it overwrites the history file.
   
{code:title=JobHistory.java|borderStyle=solid}

      FileSystem fs = logDir.getFileSystem(conf);
      if (!fs.exists(logDir)){
        if (!fs.mkdirs(logDir, new FsPermission(HISTORY_DIR_PERMISSION))) {
          throw new IOException("Mkdirs failed to create " + logDir.toString());
        }
      }
      conf.set("hadoop.job.history.location", LOG_DIR);
{code}
At the time initialization, it checks for the history if it doesn't present it will create history directory. It doesn't check existing history file is directory or not. If it is not a directory it will fail in the below line while creating a log file after job submission.



{code:title=JobHistory.java|borderStyle=solid}

   
   out = fs.create(logFile, 
                            new FsPermission(HISTORY_FILE_PERMISSION),
                            true, 
                            defaultBufferSize, 
                            fs.getDefaultReplication(), 
                            jobHistoryBlockSize, null);
{code}

 With the above line of code, if the history directory doesn't exist it will create. If the existing history file is not a directory it fails saying "java.io.IOException: Mkdirs failed to create".

, stale]