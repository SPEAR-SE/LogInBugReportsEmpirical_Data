[Attached patch fixes the NPE, though I haven't had a chance to test on an actual misconfigured cluster.

Is this the right approach or should we just do a stricter job of verifying the results of the topology mapping script to ensure that all hosts are the same level? Does anyone have a legitimate use case for locality of varying depths?, -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12454248/mapreduce-1740.txt
  against trunk revision 1075216.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    -1 javac.  The patch appears to cause tar ant target to fail.

    -1 findbugs.  The patch appears to cause Findbugs (version 1.3.9) to fail.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed these core unit tests:


    -1 contrib tests.  The patch failed contrib unit tests.

    -1 system test framework.  The patch failed system test framework compile.

Test results: https://hudson.apache.org/hudson/job/PreCommit-MAPREDUCE-Build/82//testReport/
Console output: https://hudson.apache.org/hudson/job/PreCommit-MAPREDUCE-Build/82//console

This message is automatically generated., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12454248/mapreduce-1740.txt
  against trunk revision 1079072.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    -1 javac.  The patch appears to cause tar ant target to fail.

    -1 findbugs.  The patch appears to cause Findbugs (version 1.3.9) to fail.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed these core unit tests:


    -1 contrib tests.  The patch failed contrib unit tests.

    -1 system test framework.  The patch failed system test framework compile.

Test results: https://hudson.apache.org/hudson/job/PreCommit-MAPREDUCE-Build/128//testReport/
Console output: https://hudson.apache.org/hudson/job/PreCommit-MAPREDUCE-Build/128//console

This message is automatically generated., Sorry to come in late, the patch has gone stale. Can you please rebase? Thanks.

Given this is not an issue with MRv2 should we still commit this? I'm happy to, but not sure it's useful. Thanks., This should be fixed for 1.x as it is pretty serious, and can bring the JT scheduler down on its knees.

One strace:
{code}
INFO org.apache.hadoop.ipc.Server: IPC Server handler 2 on 8021, call heartbeat(org.apache.hadoop.mapred.TaskTrackerStatus, false, false, true, ...) from xyzzy:abcdef: error: java.io.IOException: java.lang.NullPointerException
java.io.IOException: java.lang.NullPointerException
	at org.apache.hadoop.mapred.JobInProgress.getMatchingLevelForNodes(JobInProgress.java:1676)
	at org.apache.hadoop.mapred.JobInProgress.getLocalityLevel(JobInProgress.java:3354)
	at org.apache.hadoop.mapred.JobInProgress.addRunningTaskToTIP(JobInProgress.java:1752)
	at org.apache.hadoop.mapred.JobInProgress.obtainNewMapTask(JobInProgress.java:1341)
	at org.apache.hadoop.mapred.JobSchedulable.assignTask(JobSchedulable.java:142)
	at org.apache.hadoop.mapred.PoolSchedulable.assignTask(PoolSchedulable.java:160)
	at org.apache.hadoop.mapred.FairScheduler.assignTasks(FairScheduler.java:440)
	at org.apache.hadoop.mapred.JobTracker.heartbeat(JobTracker.java:3226)
	at sun.reflect.GeneratedMethodAccessor2.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.hadoop.ipc.RPC$Server.call(RPC.java:557)
	at org.apache.hadoop.ipc.Server$Handler$1.run(Server.java:1434)
	at org.apache.hadoop.ipc.Server$Handler$1.run(Server.java:1430)
	at java.security.AccessController.doPrivileged(Native Method)
	at javax.security.auth.Subject.doAs(Subject.java:396)
	at org.apache.hadoop.security.UserGroupInformation.doAs(UserGroupInformation.java:1127)
	at org.apache.hadoop.ipc.Server$Handler.run(Server.java:1428)
{code}, An updated patch for branch-1.0. Please review., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12517192/MAPREDUCE-1740.patch
  against trunk revision .

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    -1 patch.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/2010//console

This message is automatically generated., Looks OK on a quick review; will need to test a bit more.

(trunk only) {{AbstractDNSToSwitchMapping()}} has a {{getSwitchMap()}} method which can return the map of host->switch (or null in the base class), which could be used for more assertions. This class isn't in branch1, so these asserts will have to be left out there.

It also has {{dumpTopology()}} method to convert the map to a string, which can be used for diagnostics in logs or assertions.

style issues
 # please follow hadoop project spacing rules esp. in if () conditions
 # use LOG over {{System.out}} even in tests
 # some of the static fields used in the tests could be made final, Steve: not sure I follow what you mean about making use of getSwitchMap -- which assert are you suggesting this be used for?, Todd -it makes it possible to view the entire map of host -> switch. If the tests can avoid that, its better because then they will all work on 1.x too., Thanks Steve and Todd for the review! I am attaching an updated patch for branch-1.0 incorporating Steve's style comments. The patch mainly is to avoid the NPE that we are seeing with some users when the compared nodes are at different depth., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12517623/MAPREDUCE-1740_branch-1.0.patch
  against trunk revision .

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    -1 patch.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/2019//console

This message is automatically generated., Hi Ahmed. Can you attach a patch for trunk? We need to fix this in trunk as well, right? We can commit the 1.0 patch at the same time., Thanks Todd! Attached an updated version of the patch for trunk., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12518506/MAPREDUCE-1740_trunk.patch
  against trunk revision .

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 eclipse:eclipse.  The patch built with eclipse:eclipse.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed these unit tests:
                  org.apache.hadoop.mapred.TestWritableJobConf

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/2059//testReport/
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/2059//console

This message is automatically generated., The TestWritableJobConf failure doesn't look related to this patch. , +1, Thanks Ahmed. Committed to trunk and branch-1, This is nice to fix. However, we should look at HDFS too. Doing it in isolation in MR isn't sufficient., Integrated in Hadoop-Common-trunk-Commit #1907 (See [https://builds.apache.org/job/Hadoop-Common-trunk-Commit/1907/])
    MAPREDUCE-1740. NPE in getMatchingLevelForNodes when node locations are variable depth (ahmed via tucu) (Revision 1303076)

     Result = SUCCESS
tucu : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1303076
Files : 
* /hadoop/common/trunk/hadoop-mapreduce-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-mapreduce-project/src/java/org/apache/hadoop/mapred/JobInProgress.java
* /hadoop/common/trunk/hadoop-mapreduce-project/src/test/mapred/org/apache/hadoop/mapred/TestJobInProgress.java
, Integrated in Hadoop-Hdfs-trunk-Commit #1981 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk-Commit/1981/])
    MAPREDUCE-1740. NPE in getMatchingLevelForNodes when node locations are variable depth (ahmed via tucu) (Revision 1303076)

     Result = SUCCESS
tucu : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1303076
Files : 
* /hadoop/common/trunk/hadoop-mapreduce-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-mapreduce-project/src/java/org/apache/hadoop/mapred/JobInProgress.java
* /hadoop/common/trunk/hadoop-mapreduce-project/src/test/mapred/org/apache/hadoop/mapred/TestJobInProgress.java
, Integrated in Hadoop-Mapreduce-trunk #1025 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/1025/])
    MAPREDUCE-1740. NPE in getMatchingLevelForNodes when node locations are variable depth (ahmed via tucu) (Revision 1303076)

     Result = SUCCESS
tucu : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1303076
Files : 
* /hadoop/common/trunk/hadoop-mapreduce-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-mapreduce-project/src/java/org/apache/hadoop/mapred/JobInProgress.java
* /hadoop/common/trunk/hadoop-mapreduce-project/src/test/mapred/org/apache/hadoop/mapred/TestJobInProgress.java
, made FixedVersions compatible with commits
, Closed upon release of Hadoop-1.1.0.]