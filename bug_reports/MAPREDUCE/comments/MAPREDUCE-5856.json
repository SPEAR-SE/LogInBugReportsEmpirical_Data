[The problem is that Limits is looking for the mapred-site.xml in the classpath, or failing that, the defaults.  This is a problem for clients such as Oozie where we don't have mapred-site.xml on the classpath, and instead create a JobClient by passing it a Configuration object to use instead (where the counters limit is increased)., The fix is very simple; we just need to call {{Limits.init(...)}} from {{JobClient.init(...)}}.  

I couldn't do a unit test because the Configuration used by Limits is only loaded once, but I did verify that it fixes the problem and the fix is pretty trivial., One related issue with allowing jobs to increase the default is that it can blow the memory on the history server which caches recent jobs.  In other words, a few jobs with huge number of counters (and a correspondingly huge AM heaps to handle them) might run OK but then later cause an OOM on the historyserver as it tries to handle all those jobs., This won't remove the limit checking; it's still enforced.  The patch just makes it so that someone using a mapred-site.xml not on the classpath is still able to change the counter limit.  Without this, clients such as Oozie have no way of using a different limit.  

I imagine that the history server loads it's mapred-site.xml from the classpath anyway, so this patch won't affect it at all.  Even without the patch, if the counter limit is set too high, then it could get an OOM.  But that's the user's fault., Another way of looking at this: if I write the following code in my program:
{code:java}
Configuration conf = new Configuration();
conf.set(...);  // Set a bunch of properties or load from some files
JobClient client = new JobClient(conf);
{code}
The expected behavior is that everything {{client}} does will use the properties I set in {{conf}}.  If it doesn't, then that's a bug., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12641599/MAPREDUCE-5856.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4552//testReport/
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4552//console

This message is automatically generated., bq. One related issue with allowing jobs to increase the default is that it can blow the memory on the history server which caches recent jobs.
Fair point. To address this in a compatible way, we can add a global max for the number of counters that the admin can set. We can do this in a separate JIRA., MAPREDUCE-5875 fixes this use case, as well as some others.]