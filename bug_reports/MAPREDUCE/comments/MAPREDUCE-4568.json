[Is there any update on this? 
Thanks!, Ok, I spent an inordinate amount of time into this, but I finally am ready to give up.

Unfortunately none of the DistributedCache apis (i.e. DistributedCache.addCache(File|Archive) or Job.addCache(File|Archive) ) have an exception specification - this means we'll need to resort to throw RuntimeException or such which I'm not a fan of...

For now, I feel the best we can do (without breaking compat) is to just document this and leave it as it is... 

Thoughts?, I spoke with Virag about this before he filed the JIRA.  The main goal here is to provide a way for Oozie to be able to maintain a bit more of a semblance of backwards compatibility even after MAPREDUCE-4549 goes in.  They essentially want to de-dupe the entires in the dist cache that would cause an error.  We originally decided on having a exception thrown because it would allow for other errors/checks that may show up in the future to also be added in.  I don't think there would be a problem with adding in a new API that throws an exception if that API was also added into the 1.x line as well, but perhaps did not throw anything because there are not the same limitations.

I realize that adding in new APIs, especially since we already have 3 classes that have these types of APIs in them, is not ideal, but it is the only way to maintain backwards compatibility and evolve the API., In addition, it will be better, if there is a way of checking whether some file is already added in DC.
, Adding a true duplicate, exact same file multiple times, to the dist cache will not result in an error under YARN.  The MR client will just dedupe them before submitting the request to YARN.  The issue is when there are different files that will both map to the same key in the dist cache map (the key is the name of the symlink created in the working directory of the task/container).  Then is where it will throw an exception under 2.0, bq. In addition, it will be better, if there is a way of checking whether some file is already added in DC.

Would adding an interface so the client can query the contents of the DC before job submission be sufficient?  This seems like a reasonable enhancement that doesn't overlap with existing interfaces.  Or do you think it's still a requirement to throw early when adding a collision?  Throwing will require adding a new interface for adding to the DC which overlaps with existing functionality and adds to the pile of APIs we already have for adding things to the DC., Clients can already query contents of DC...]