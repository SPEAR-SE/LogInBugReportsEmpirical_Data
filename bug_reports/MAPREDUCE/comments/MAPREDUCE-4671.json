[This is a problem I'd questioned. Good to see the JIRA., Attaching a test that shows the problem along with a quick fix that passes the test., Thanks Bikas for filing this JIRA.

I think this issue can be addressed in two ways:
# As you suggest, the AM can inform the RM about the container requests that are no longer needed.
# Alternatively, we can augment the ResourceRequest API to allow the AM to convey that it needs (1) 'x' of the 'y' containers that it is requesting, and (2) if the RM can invalidate the remaining ('y' - 'x' ) container requests. This way, we can avoid (1) the communication overhead, and (2) redundant work on the RM side. 

What do you think?, +1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12545978/MAPREDUCE-4671.1.patch
  against trunk revision .

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 1 new or modified test files.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 eclipse:eclipse.  The patch built with eclipse:eclipse.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed unit tests in hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/2866//testReport/
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/2866//console

This message is automatically generated., Saying I need x out of y is done by saying I need x because the protocol is built around setting absolute ask values. Since the protocol is lossy wrt relationships between container requests, in general it would be hard (perhaps impossible in some cases) for the RM to figure out what the other requests were that it now needs to cancel unless that relationship information is passed in by the AM.
From what I see, communication overhead would be similar in both approaches (1 allocate message to send the information). I am not sure how RM side work would be less. Approach 1 seems simpler to me given that RM code does not need to be changed :) Though I might be wrong :P
Perhaps I might be missing something in your comments. A few examples would help., New patch ensures that there wont be duplicates in the ask set. 
I have left a question in comments for the committers., +1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12545987/MAPREDUCE-4671.2.patch
  against trunk revision .

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 1 new or modified test files.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 eclipse:eclipse.  The patch built with eclipse:eclipse.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed unit tests in hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/2867//testReport/
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/2867//console

This message is automatically generated., bq. // ??? shoudl this assert that the new value >= 0 ???
That does need to be checked before the decrement. There's a comment further up in the code which mentions a decrement coming in after this value has gone to 0. See {{containerFailedOnHost}}.

Looking at this and YARN-103 again, we're not really gaining much by keeping entries in the main request table - (remoteRequestsTable). To avoid duplicate requests, does it make sense to change ResourceRequest to ignore containerCount when computing {{equals}} and {{hashCode}}, or defining a local structure with the required implementation., I think we can assert that the value should never go below 0 because that would mean we are trying to remove more containers than we requested, which would be an app bug., iirc, blacklisting the node changes the request directly in the RMContainerRequestor. When the RMContainerAllocator removes a previous ask (assigned task, etc) - it includes the blacklisted host in this request.
Asserting the value never goes below 0 - will need to change this behaviour. Otherwise a simple check and ignore is sufficient., New patch.
Checking for resource request falling below zero.
Changing the ask list to have custom comparator to avoid duplication of resource requests., {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12548529/MAPREDUCE-4671.3.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/2923//testReport/
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/2923//console

This message is automatically generated., Ping, Attaching rebased patch., {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12551323/MAPREDUCE-4671.4.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/2973//testReport/
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/2973//console

This message is automatically generated., {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12551323/MAPREDUCE-4671.4.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/3313//testReport/
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/3313//console

This message is automatically generated., +1. This has been pending for a long time.

A variable name needs a minor fix in TestRMCotnaienrAllocator (lastAsk instead of lastAsk). Making this change as part of the commit. , patch with the variable name fix., Committed to trunk and branch-2. Thanks Bikas!, Integrated in Hadoop-trunk-Commit #3338 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/3338/])
    MAPREDUCE-4671. AM does not tell the RM about container requests which are no longer needed. Contributed by Bikas Saha. (Revision 1443323)

     Result = SUCCESS
sseth : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1443323
Files : 
* /hadoop/common/trunk/hadoop-mapreduce-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerRequestor.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/v2/app/TestRMContainerAllocator.java
, Integrated in Hadoop-Yarn-trunk #120 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk/120/])
    MAPREDUCE-4671. AM does not tell the RM about container requests which are no longer needed. Contributed by Bikas Saha. (Revision 1443323)

     Result = FAILURE
sseth : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1443323
Files : 
* /hadoop/common/trunk/hadoop-mapreduce-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerRequestor.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/v2/app/TestRMContainerAllocator.java
, Integrated in Hadoop-Hdfs-trunk #1309 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/1309/])
    MAPREDUCE-4671. AM does not tell the RM about container requests which are no longer needed. Contributed by Bikas Saha. (Revision 1443323)

     Result = FAILURE
sseth : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1443323
Files : 
* /hadoop/common/trunk/hadoop-mapreduce-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerRequestor.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/v2/app/TestRMContainerAllocator.java
, Integrated in Hadoop-Mapreduce-trunk #1337 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/1337/])
    MAPREDUCE-4671. AM does not tell the RM about container requests which are no longer needed. Contributed by Bikas Saha. (Revision 1443323)

     Result = SUCCESS
sseth : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1443323
Files : 
* /hadoop/common/trunk/hadoop-mapreduce-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerRequestor.java
* /hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/v2/app/TestRMContainerAllocator.java
, Integrated in Hadoop-Hdfs-0.23-Build #520 (See [https://builds.apache.org/job/Hadoop-Hdfs-0.23-Build/520/])
    MAPREDUCE-4671. AM does not tell the RM about container requests which are no longer needed. (Bikas Saha via tgraves) (Revision 1444157)

     Result = SUCCESS
tgraves : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1444157
Files : 
* /hadoop/common/branches/branch-0.23/hadoop-mapreduce-project/CHANGES.txt
* /hadoop/common/branches/branch-0.23/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerRequestor.java
* /hadoop/common/branches/branch-0.23/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/v2/app/TestRMContainerAllocator.java
]