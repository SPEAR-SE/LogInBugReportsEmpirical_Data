[Have attached the patch with the necesary synchronizations., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12507536/MAPREDUCE-3562.patch
  against trunk revision .

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 eclipse:eclipse.  The patch built with eclipse:eclipse.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed these unit tests:
                  org.apache.hadoop.mapreduce.v2.app.TestStagingCleanup
                  org.apache.hadoop.mapreduce.v2.app.TestJobEndNotifier

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/1460//testReport/
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/1460//console

This message is automatically generated., bq.-1 core tests. The patch failed these unit tests:
bq.org.apache.hadoop.mapreduce.v2.app.TestStagingCleanup
bq.org.apache.hadoop.mapreduce.v2.app.TestJobEndNotifier

The testcase failures are not related to this patch.
, -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12507536/MAPREDUCE-3562.patch
  against trunk revision .

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 eclipse:eclipse.  The patch built with eclipse:eclipse.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed unit tests in .

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/1615//testReport/
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/1615//console

This message is automatically generated., Why do we need close() to be synchronized though? Per the javadocs, one is supposed to call it in the cleanup stages alone - which removes need for it to be synchronized in practice right? I also don't see benefit of calling close several time - that'd just be doing things wrong (i.e. a user issue)?

I didn't look at the other parts yet though., I suppose one reason may be to counter the effect of adds when a close runs but the close is running only at end-stage so I don't see that being a problem?, @Harsh

I agree that the close should only be called when shutting down, and there should not be multiple threads calling it. But then what is the harm with synchronizing it?  From a defensive programming standpoint I would rather see it synchronized because it is simple to do, and could potentially prevent an error from happening in the future if someone uses the API incorrectly.

@Ravi

 # The patch needs to be upmerged the Counters part no longer applies.  
 # Inside JobControl getWaitingJobList, getRunningJobList, and getReadyJobsList really don't need to be synchronized because getJobsIn is already synchronized.  
 # Inside JobControl the synchronized statement in toList is unnecessary, and should be removed to clean things up.
 # I am a bit confused about the synchronization changes made to Counter.  CounterStrings.toEscapedCompactString appears to already handle the synchronization properly, although it is hidden in there.  I don't see why these changes are needed.
 # Also there appear to be a lot more threading issues in Counters, but I haven't had time to dig into it that deeply to be sure.  The big one I see is a potential deadlock in Counters.Counter.equals, which seems odd, because there appears to be no other synchronization anywhere else in that class, but I have not dug that deeply into its parent class which probably has some synchronization in it. Did you run into actual problems while running Hadoop or are these just from inspecting the code?

, bq. From a defensive programming standpoint I would rather see it synchronized because it is simple to do, and could potentially prevent an error from happening in the future if someone uses the API incorrectly.

Thanks Robert. Agreed on that. Lets also document the old API about when to call close() though, I don't see it doing that presently. New API is clear about it, however., bq. Lets also document the old API about when to call close() though, I don't see it doing that presently. New API is clear about it, however.
Agreed. Documenting the API contract would help remove any doubt about how it is intended to be used., About point 2, I would like to express another concurrency issue. I simply would like to print out the state of my JobControl ie its status but also the size of all jobs lists (and later the name of the jobs inside). My issue is that there is currently no way to have such consistent information from outside the job context (ie another thread).

Eg I call getRunningJobList() and then getSuccessfulJobList() : my job which was running before the first call, may be successful before the second call...

I assume that the user is responsible for running the JobControl in a separate Thread and stopping it when needed. I don't see any clean way to extend the current JobControl to have that consistent view.

About the pach, we agree adding synchronized would not help., Canceling patch until the review comments can be addressed.]