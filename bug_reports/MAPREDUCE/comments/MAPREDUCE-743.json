[Attaching patch fixing the issue.

Please review and provide your comments., Made some minor changes to the fix.
Added a testcase to verify map progress.

Please review and provide your comments., When compressed files are given as input to maps, the progress is not updated because the size of the input file(uncompressed size) is considered as Long.MAX_VALUE and thus the progress of map task with compressed file as input is ignored because of very small value 1/Long.MAX_VALUE. Progress values seen are of the order of 10^-17 to 10^-11.

I saw on the web   http://www.abeel.be/content/determine-uncompressed-size-gzip-file    that says that the last 4 bytes of gzipped file contain the uncompressed file size. But this works only if the size is < 4GB.

Any thoughts on getting the uncompressed file size of compressed files(at leaset for gzipped files) ?, Attaching new patch. Now testcase doesn't start a job but calls MapTask.run() directly(similar to LocalJobRunner) and uses custom TaskReporter that validates map phase progress.

This patch depends on patch of HADOOP-6163.

Please review and provide your comments., 1 unit test failed with previous patch because of an issue in LocalJobRunner.
Attaching new patch fixing the issue.

All unit tests passed on my local machine.

Please review and provide your comments., Attaching new patch cleaning up testcase code so that it directly calls mapTask.run() method and TestMapTask doesn't override run() method now but overrides new method startReporter().

Please review and provide your comments., Missed adding apache license header in the new testcase file.
Attaching new patch., when I included hadoop-core-0.21.0-dev.jar using the patch of HADOOP-6163,

Unit tests passed on my local machine.

ant test-patch gave

     [exec] +1 overall.
     [exec]
     [exec]     +1 @author.  The patch does not contain any @author tags.
     [exec]
     [exec]     +1 tests included.  The patch appears to include 3 new or modified tests.
     [exec]
     [exec]     +1 javadoc.  The javadoc tool did not generate any warning messages.
     [exec]
     [exec]     +1 javac.  The applied patch does not increase the total number of javac compiler warnings.
     [exec]
     [exec]     +1 findbugs.  The patch does not introduce any new Findbugs warnings.
     [exec]
     [exec]     +1 release audit.  The applied patch does not increase the total number of release audit warnings.
, Attaching patch that doesn't check if phases exist in TaskReporter.setProgress() as we don't have tasks that need to set progress and that don't have phases(both map tasks and reduce tasks have phases).
map phase in map tasks and reduce phase in reduce tasks use this TaskReporter.setProgress().

Please review and provide your comments., Unit tests passed on my local machine.

ant test-patch gave

     [exec] +1 overall.
     [exec]
     [exec]     +1 @author.  The patch does not contain any @author tags.
     [exec]
     [exec]     +1 tests included.  The patch appears to include 3 new or modified tests.
     [exec]
     [exec]     +1 javadoc.  The javadoc tool did not generate any warning messages.
     [exec]
     [exec]     +1 javac.  The applied patch does not increase the total number of javac compiler warnings.
     [exec]
     [exec]     +1 findbugs.  The patch does not introduce any new Findbugs warnings.
     [exec]
     [exec]     +1 release audit.  The applied patch does not increase the total number of release audit warnings., I just committed this. Thanks, Ravi!, Since test-patch is broken (see HADOOP-6124), the patch committed introduced a javac warning without being detected.
{noformat}
    [javac] d:\@sze\hadoop\mapreduce\m1\src\java\org\apache\hadoop\mapred\LocalJobRunner.java:74: warning: [unchecked]
 unchecked call to serialize(T) as a member of the raw type org.apache.hadoop.io.serializer.Serializer
    [javac]       serializer.serialize(splits.get(i));
    [javac]                           ^
{noformat}]