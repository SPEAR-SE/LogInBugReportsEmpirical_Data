[I am changing this to major because this is a serious problem for preemption.
The jobs which are supposed to be preempt (running task > fairshare) will actually generate negative tasksToPreempt.
That makes the total number of tasks to preemption go down.
This actually makes them able to escape from preemption., The patch simply check if tasksToPreempt is negative and set it back to zero.
The included unit test produced a negative number of tasksToPreempt before adding the fix., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12447520/MAPREDUCE-1845.20100717.txt
  against trunk revision 956171.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 2 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    -1 contrib tests.  The patch failed contrib unit tests.

Test results: http://hudson.zones.apache.org/hudson/job/Mapreduce-Patch-h6.grid.sp2.yahoo.net/579/testReport/
Findbugs warnings: http://hudson.zones.apache.org/hudson/job/Mapreduce-Patch-h6.grid.sp2.yahoo.net/579/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Checkstyle results: http://hudson.zones.apache.org/hudson/job/Mapreduce-Patch-h6.grid.sp2.yahoo.net/579/artifact/trunk/build/test/checkstyle-errors.html
Console output: http://hudson.zones.apache.org/hudson/job/Mapreduce-Patch-h6.grid.sp2.yahoo.net/579/console

This message is automatically generated., I am submitting this to hudson again because testReport is gone., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12447520/MAPREDUCE-1845.20100717.txt
  against trunk revision 957126.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 2 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    -1 contrib tests.  The patch failed contrib unit tests.

Test results: http://hudson.zones.apache.org/hudson/job/Mapreduce-Patch-h4.grid.sp2.yahoo.net/261/testReport/
Findbugs warnings: http://hudson.zones.apache.org/hudson/job/Mapreduce-Patch-h4.grid.sp2.yahoo.net/261/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Checkstyle results: http://hudson.zones.apache.org/hudson/job/Mapreduce-Patch-h4.grid.sp2.yahoo.net/261/artifact/trunk/build/test/checkstyle-errors.html
Console output: http://hudson.zones.apache.org/hudson/job/Mapreduce-Patch-h4.grid.sp2.yahoo.net/261/console

This message is automatically generated., The failed tests are not on the code path of the change., This looks good. Thanks for adding the unit tests too. We should check this into 0.21 as well, if that's not out yet.

The only concern I have is that the existing unit tests, such as testMinAndFairSharePreemption, work correctly. This seems to be because those pools either only test one type of preemption (min-share or fair-share), or they place the over-scheduled jobs in pools that have no min share set. This means that one of the values in max(tasksDueToMinShare, tasksDueToFairShare) is zero. Would you mind creating a second copy of testMinAndFairSharePreemption where job 1 is in a pool with a min share set (i.e. not in the default pool)?

A minor comment on clarity: rather than adding the line "tasksToPreempt = tasksToPreempt < 0 ? 0 : tasksToPreempt", it would be better to make sure that tasksDueToMinShare and tasksDueToFairShare are themselves never negative. You can do it by adding a max(0, ...) on the lines where they are computed (for example, tasksDueToMinShare = Math.max(0, target - sched.getRunningTasks()))., Thanks.
Good suggestions. I will update the patch., I have carefully read the code. I think this bug is not that easy to trigger.
Because when update tasksDueToMinShare and tasksDueToFairShare, tasksToPreempt will check
{code}
curTime - sched.getLastTimeAtMinShare() > minShareTimeout
curTime - sched.getLastTimeAtHalfFairShare() > fairShareTimeout
{code}

So they may turn negative only when they got the timeout and over-scheduled at the same time.
And this two thing must happen between update() and preemptIfNecessary():
{code}
update()
// spent lots of time here so we get timeout
// get over-scheduled tasks
preemptIfNecessary()
{code}

It is not likely to happen unless people set starving timeout to be very short.
But it is still good to fix it.
I will write a unit test to simulate this situation., Update. Change the patch according to Matei's suggestions.
, Submit to Hudson again., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12448140/MAPREDUCE-1845-v2.txt
  against trunk revision 958279.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    -1 contrib tests.  The patch failed contrib unit tests.

Test results: http://hudson.zones.apache.org/hudson/job/Mapreduce-Patch-h4.grid.sp2.yahoo.net/270/testReport/
Findbugs warnings: http://hudson.zones.apache.org/hudson/job/Mapreduce-Patch-h4.grid.sp2.yahoo.net/270/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Checkstyle results: http://hudson.zones.apache.org/hudson/job/Mapreduce-Patch-h4.grid.sp2.yahoo.net/270/artifact/trunk/build/test/checkstyle-errors.html
Console output: http://hudson.zones.apache.org/hudson/job/Mapreduce-Patch-h4.grid.sp2.yahoo.net/270/console

This message is automatically generated., +1, looks good to me. Let me know if you are ready to have it committed (or just have Dhruba commit it)., @Matei, The patch is ready. Could you help me commit it? Thanks., I've committed the patch to both trunk and 0.21. Thanks Scott!, Thanks for the help, Matei :)]