[Patch to release reference to output stream when disk map output is committed or aborted., {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12579479/MAPREDUCE-5168.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/3537//testReport/
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/3537//console

This message is automatically generated., Equivalent patch for branch-0.23.  I also tested this patch with a job that hit the OOM regularly during the shuffle and it completes successfully with this patch., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12579487/MAPREDUCE-5168-branch-0.23.patch
  against trunk revision .

    {color:red}-1 patch{color}.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/3538//console

This message is automatically generated., Looks good to me. +1., +1, harmless patch and looks good..

I'm surprised this is the only 'leak', there may be others we can find by digging through the code. Been a while since this code is touched..

Can commit it in a while or you can go ahead too. Tx., bq.  If enough of these on-disk outputs are queued up waiting to be merged, it can cause the reducer to OOM during the shuffle phase. 
Actually, thinking more, it doesn't look like your patch will solve this at all. As the streams are opened in the constructor which the patch isn't changing at all. I am now surprised that this patch helped at all. The MapOutput objects are GC'ed almost always immediately after abort/commit. May be I am missing something.

OTOH, delaying the creation of the output-stream till shuffling to disk is actually going to happen will fix the issue., Thanks for the reviews, Karthik and Vinod.

This is a case where 0.23 and branch-2/trunk have diverged.  Before MAPREDUCE-4808 the merge threads took a list of MapOutput objects to merge, and these objects could linger around for quite some time waiting to be merged.  Therefore this patch definitely helps on 0.23.  After MAPREDUCE-4808 the MapOutput objects are relatively short-lived, as they only exist for the duration of the file transfer.  I doubt moving the creation of the output-stream from the constructor to the shuffle method will help much, since the Fetcher thread moves straight from the MapOutput constructor to the shuffle phase without delay.

So this is an important fix for 0.23 and should be harmless for trunk/branch-2.  It's mostly preventative for the latter in case someone refactors the code and MapOutput objects could linger again.
, [~vinodkv], do you have any reservations about this going into trunk and branch-2?  I can commit this just to branch-0.23 if desired., Sorry, missed this one.

bq. This is a case where 0.23 and branch-2/trunk have diverged. Before MAPREDUCE-4808 the merge threads took a list of MapOutput objects to merge, and these objects could linger around for quite some time waiting to be merged.
Ah, that explains it. I was looking at trunk and like you said, this is hardly an issue in trunk.

bq. So this is an important fix for 0.23 and should be harmless for trunk/branch-2. It's mostly preventative for the latter in case someone refactors the code and MapOutput objects could linger again.
Yeah, please commit this to 0.23 only. Don't see a need for this in trunk/branch-2. Thanks., I committed this to branch-0.23.]