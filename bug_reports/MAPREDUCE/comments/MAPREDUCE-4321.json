[Attaching the patch., +1 Looks good!  One suggestion to maybe consider, would it in general help to create a {{Path#toFile()}} and {{Path(File)}} ctor?  I had consider the additional ctor change on HADOOP-8139 and I believe Doug liked the idea., Thanks Daryn!

bq. One suggestion to maybe consider, would it in general help to create a Path#toFile() and Path(File) ctor? I had consider the additional ctor change on HADOOP-8139 and I believe Doug liked the idea.
I also like the idea. Although, one can argue, instead of doing these conversions, why not just use File or Path across the board in that scenario (RawLocalFileSystem aside). What do you think about doing this in a separate Jira so that we can easily pull it out if needed?, It was a suggestion, so I'm perfectly fine with another jira if you think it would be useful.  {{Path}} allows hadoop methods to work seamlessly with either local or remote paths.  Adding {{File}} counterparts would be cumbersome, yet converting windows files to paths isn't as straight forward.  Someone will unknowingly do it wrong in the future and someone else will have to chase it down.  A ctor that takes a file reduces but doesn't eliminate the chance someone will do it wrong., Thanks Daryn, I opened HADOOP-8493 to track this., why cant we get away by changing
commandFile.makeQualified(fs).toUri().getPath();
to 
commandFile.toString();, {quote}why cant we get away by changing
commandFile.makeQualified(fs).toUri().getPath();
to 
commandFile.toString();{quote}
Thanks for commenting Bikas. In this case, we only want the path portion of the URI (no scheme/authority). {{Path#ToString}} could only work if there was no scheme/authority and in this case something like {{file:///C:/some/path/taskjvm.cmd}}. , Interesting, because I tried it in the debugger and it worked fine. It returned "c:/..../taskjvm.cmd", bq. Interesting, because I tried it in the debugger and it worked fine. It returned "c:/..../taskjvm.cmd"
Oh, I see, I read your comment differently. I did not want to change the semantics of the current code, as {{commandFile.makeQualified(fs)}} also resolves relative paths against the current working directory. What I meant to say is that {{commandFile.makeQualified(fs).toString()}} returns {{file:///c:/some/path/taskjvm.cmd}}. Make sense?, bq. Interesting, because I tried it in the debugger and it worked fine. It returned "c:/..../taskjvm.cmd"
Also, there are no guarantees that the input path to {{TaskController.writeCommand()}} does not have a scheme defined, right?, bq. Also, there are no guarantees that the input path to TaskController.writeCommand() does not have a scheme defined, right?
I will buy that!, I just committed this. Thanks Ivan for the patch and Bikas for the review.]