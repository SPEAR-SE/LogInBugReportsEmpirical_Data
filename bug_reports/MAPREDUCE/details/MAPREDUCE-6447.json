{"expand":"renderedFields,names,schema,operations,editmeta,changelog,versionedRepresentations","id":"12854117","self":"https://issues.apache.org/jira/rest/api/2/issue/12854117","key":"MAPREDUCE-6447","fields":{"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype","name":"Bug","subtask":false,"avatarId":21133},"timespent":null,"project":{"self":"https://issues.apache.org/jira/rest/api/2/project/12310941","id":"12310941","key":"MAPREDUCE","name":"Hadoop Map/Reduce","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/projectavatar?pid=12310941&avatarId=10096","24x24":"https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12310941&avatarId=10096","16x16":"https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12310941&avatarId=10096","32x32":"https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12310941&avatarId=10096"},"projectCategory":{"self":"https://issues.apache.org/jira/rest/api/2/projectCategory/10292","id":"10292","description":"Scalable Distributed Computing","name":"Hadoop"}},"fixVersions":[],"aggregatetimespent":null,"resolution":null,"customfield_12312322":null,"customfield_12310220":"2015-08-12T03:32:42.793+0000","customfield_12312520":null,"customfield_12312323":null,"customfield_12312521":"Thu Aug 31 03:56:32 UTC 2017","customfield_12310420":"9223372036854775807","customfield_12312320":null,"customfield_12310222":null,"customfield_12312321":null,"resolutiondate":null,"workratio":-1,"customfield_12312328":null,"customfield_12312329":null,"customfield_12312923":null,"customfield_12312326":null,"customfield_12312920":null,"customfield_12310300":null,"customfield_12312327":null,"customfield_12312921":null,"customfield_12312324":null,"customfield_12312720":null,"customfield_12312325":null,"lastViewed":null,"watches":{"self":"https://issues.apache.org/jira/rest/api/2/issue/MAPREDUCE-6447/watchers","watchCount":19,"isWatching":false},"created":"2015-08-11T09:36:29.750+0000","customfield_12310192":null,"customfield_12310191":null,"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/4","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/minor.svg","name":"Minor","id":"4"},"labels":[],"customfield_12312333":null,"customfield_12310230":null,"customfield_12312334":null,"customfield_12313422":"false","customfield_12310310":"0.0","customfield_12312331":null,"customfield_12312332":null,"timeestimate":null,"aggregatetimeoriginalestimate":null,"customfield_12311120":null,"customfield_12312330":null,"versions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12326265","id":"12326265","description":"2.5.0 release","name":"2.5.0","archived":false,"released":true,"releaseDate":"2014-08-11"},{"self":"https://issues.apache.org/jira/rest/api/2/version/12327180","id":"12327180","description":"2.6.0 release","name":"2.6.0","archived":false,"released":true,"releaseDate":"2014-11-18"},{"self":"https://issues.apache.org/jira/rest/api/2/version/12327747","id":"12327747","description":"2.5.1 release","name":"2.5.1","archived":false,"released":true,"releaseDate":"2014-09-05"},{"self":"https://issues.apache.org/jira/rest/api/2/version/12331978","id":"12331978","description":"2.7.1 release","name":"2.7.1","archived":false,"released":true,"releaseDate":"2015-07-06"}],"issuelinks":[],"customfield_12312339":null,"assignee":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=shuzhangyao","name":"shuzhangyao","key":"shuzhangyao","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"shuzhangyao","active":true,"timeZone":"Asia/Chongqing"},"customfield_12312337":null,"customfield_12312338":null,"updated":"2017-08-31T03:56:32.439+0000","customfield_12312335":null,"customfield_12312336":null,"status":{"self":"https://issues.apache.org/jira/rest/api/2/status/1","description":"The issue is open and ready for the assignee to start work on it.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/open.png","name":"Open","id":"1","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/2","id":2,"key":"new","colorName":"blue-gray","name":"To Do"}},"components":[],"timeoriginalestimate":null,"description":"2015-08-11 14:03:54,550 WARN [main] org.apache.hadoop.mapred.YarnChild: Exception running child : org.apache.hadoop.mapreduce.task.reduce.Shuffle$ShuffleError: error in shuffle in fetcher#10\n\tat org.apache.hadoop.mapreduce.task.reduce.Shuffle.run(Shuffle.java:134)\n\tat org.apache.hadoop.mapred.ReduceTask.run(ReduceTask.java:376)\n\tat org.apache.hadoop.mapred.YarnChild$2.run(YarnChild.java:168)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat javax.security.auth.Subject.doAs(Subject.java:415)\n\tat org.apache.hadoop.security.UserGroupInformation.doAs(UserGroupInformation.java:1614)\n\tat org.apache.hadoop.mapred.YarnChild.main(YarnChild.java:163)\nCaused by: java.lang.OutOfMemoryError: Java heap space\n\tat org.apache.hadoop.io.BoundedByteArrayOutputStream.<init>(BoundedByteArrayOutputStream.java:56)\n\tat org.apache.hadoop.io.BoundedByteArrayOutputStream.<init>(BoundedByteArrayOutputStream.java:46)\n\tat org.apache.hadoop.mapreduce.task.reduce.InMemoryMapOutput.<init>(InMemoryMapOutput.java:63)\n\tat org.apache.hadoop.mapreduce.task.reduce.MergeManagerImpl.unconditionalReserve(MergeManagerImpl.java:303)\n\tat org.apache.hadoop.mapreduce.task.reduce.MergeManagerImpl.reserve(MergeManagerImpl.java:293)\n\tat org.apache.hadoop.mapreduce.task.reduce.Fetcher.copyMapOutput(Fetcher.java:511)\n\tat org.apache.hadoop.mapreduce.task.reduce.Fetcher.copyFromHost(Fetcher.java:329)\n\tat org.apache.hadoop.mapreduce.task.reduce.Fetcher.run(Fetcher.java:193)","customfield_10010":null,"timetracking":{},"customfield_12312026":null,"customfield_12312023":null,"customfield_12310320":null,"customfield_12312024":null,"customfield_12312340":null,"attachment":[],"aggregatetimeestimate":null,"customfield_12312341":null,"customfield_12312220":null,"customfield_12312022":null,"customfield_12310921":null,"customfield_12310920":"9223372036854775807","customfield_12312823":null,"summary":"reduce shuffle throws \"java.lang.OutOfMemoryError: Java heap space\"","creator":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=shuzhangyao","name":"shuzhangyao","key":"shuzhangyao","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"shuzhangyao","active":true,"timeZone":"Asia/Chongqing"},"subtasks":[],"customfield_12310291":null,"reporter":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=shuzhangyao","name":"shuzhangyao","key":"shuzhangyao","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"shuzhangyao","active":true,"timeZone":"Asia/Chongqing"},"customfield_12310290":null,"aggregateprogress":{"progress":0,"total":0},"customfield_12311024":null,"environment":null,"customfield_12313520":null,"customfield_12311020":null,"duedate":null,"customfield_12310250":null,"progress":{"progress":0,"total":0},"comment":{"comments":[{"self":"https://issues.apache.org/jira/rest/api/2/issue/12854117/comment/14681538","id":"14681538","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=shuzhangyao","name":"shuzhangyao","key":"shuzhangyao","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"shuzhangyao","active":true,"timeZone":"Asia/Chongqing"},"body":"https://github.com/apache/hadoop/blob/trunk/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/MergeManagerImpl.java#L254  \n   return  (requestedSize < maxSingleShuffleLimit) ; =>  return (requestedSize < maxSingleShuffleLimit) &&((usedMemory +requestedSize)< memoryLimit) ;","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=shuzhangyao","name":"shuzhangyao","key":"shuzhangyao","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"shuzhangyao","active":true,"timeZone":"Asia/Chongqing"},"created":"2015-08-11T09:43:54.940+0000","updated":"2015-08-11T09:43:54.940+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12854117/comment/14692802","id":"14692802","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=shuzhangyao","name":"shuzhangyao","key":"shuzhangyao","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"shuzhangyao","active":true,"timeZone":"Asia/Chongqing"},"body":"the default  mapreduce.reduce.shuffle.input.buffer.percent is 0.9 ,and the default mapreduce.reduce.shuffle.memory.limit.percent is 0.25。\nif we want to avoid the issue，need to decrease the value。\n \neg: mapreduce.reduce.shuffle.input.buffer.percent =0.6","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=shuzhangyao","name":"shuzhangyao","key":"shuzhangyao","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"shuzhangyao","active":true,"timeZone":"Asia/Chongqing"},"created":"2015-08-12T02:28:31.119+0000","updated":"2015-08-12T02:28:31.119+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12854117/comment/14692856","id":"14692856","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=XiaopengLi","name":"XiaopengLi","key":"xiaopengli","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"XiaopengLi","active":true,"timeZone":"Etc/UTC"},"body":"Hi,shuzhangyao.I have shared the same experiences. I ever thought about  your method .This method is mandatory to limit within the memoryLimt.  It maybe is effective. But I think that the original code  is  reasonable .  We take the default parameter to calculate it.  maxSingleShuffleLinit = memorylimit  * 0.25. The number of Fetcher is 5. memorylimit =  Runtime.getRuntime().maxMemory() * 0.7 . While all fetcher is working, 5*0.25*0.7 <1,in theory,it does not occur the OutOfMemory of Java heap. Even though we do not add the code \"usedMemory +requestedSize)< memoryLimit\" ,in theory ,it should not occur this phenomenon of Outof Memory. We can talk about this problem. whether It be casued by Jvm and  unreasonable allocation of memory in  special data input ？\n\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=XiaopengLi","name":"XiaopengLi","key":"xiaopengli","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"XiaopengLi","active":true,"timeZone":"Etc/UTC"},"created":"2015-08-12T03:32:42.793+0000","updated":"2015-08-12T03:32:42.793+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12854117/comment/14692984","id":"14692984","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=shuzhangyao","name":"shuzhangyao","key":"shuzhangyao","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"shuzhangyao","active":true,"timeZone":"Asia/Chongqing"},"body":"the default mapreduce.reduce.shuffle.input.buffer.percent is 0.9,so memorylimit = Runtime.getRuntime().maxMemory() * 0.9 .\n0.9*0.25*5=1.125>1.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=shuzhangyao","name":"shuzhangyao","key":"shuzhangyao","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"shuzhangyao","active":true,"timeZone":"Asia/Chongqing"},"created":"2015-08-12T06:14:20.357+0000","updated":"2015-08-12T06:14:20.357+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12854117/comment/14692985","id":"14692985","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=shuzhangyao","name":"shuzhangyao","key":"shuzhangyao","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"shuzhangyao","active":true,"timeZone":"Asia/Chongqing"},"body":"the default mapreduce.reduce.shuffle.input.buffer.percent is 0.9,so memorylimit = Runtime.getRuntime().maxMemory() * 0.9 .\n0.9*0.25*5=1.125>1.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=shuzhangyao","name":"shuzhangyao","key":"shuzhangyao","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"shuzhangyao","active":true,"timeZone":"Asia/Chongqing"},"created":"2015-08-12T06:14:20.831+0000","updated":"2015-08-12T06:14:20.831+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12854117/comment/14692986","id":"14692986","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=shuzhangyao","name":"shuzhangyao","key":"shuzhangyao","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"shuzhangyao","active":true,"timeZone":"Asia/Chongqing"},"body":"the default mapreduce.reduce.shuffle.input.buffer.percent is 0.9,so memorylimit = Runtime.getRuntime().maxMemory() * 0.9 .\n0.9*0.25*5=1.125>1.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=shuzhangyao","name":"shuzhangyao","key":"shuzhangyao","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"shuzhangyao","active":true,"timeZone":"Asia/Chongqing"},"created":"2015-08-12T06:14:23.215+0000","updated":"2015-08-12T06:14:23.215+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12854117/comment/14693058","id":"14693058","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=ozawa","name":"ozawa","key":"ozawa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=ozawa&avatarId=21740","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=ozawa&avatarId=21740","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=ozawa&avatarId=21740","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=ozawa&avatarId=21740"},"displayName":"Tsuyoshi Ozawa","active":true,"timeZone":"America/Los_Angeles"},"body":"Hi guys, thank you for reporting this issue. Do you mean that should we fix the default value to avoid the exception on this jira?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=ozawa","name":"ozawa","key":"ozawa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=ozawa&avatarId=21740","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=ozawa&avatarId=21740","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=ozawa&avatarId=21740","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=ozawa&avatarId=21740"},"displayName":"Tsuyoshi Ozawa","active":true,"timeZone":"America/Los_Angeles"},"created":"2015-08-12T07:38:49.534+0000","updated":"2015-08-12T07:38:49.534+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12854117/comment/14693125","id":"14693125","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=shuzhangyao","name":"shuzhangyao","key":"shuzhangyao","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"shuzhangyao","active":true,"timeZone":"Asia/Chongqing"},"body":"yes","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=shuzhangyao","name":"shuzhangyao","key":"shuzhangyao","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"shuzhangyao","active":true,"timeZone":"Asia/Chongqing"},"created":"2015-08-12T08:33:41.820+0000","updated":"2015-08-12T08:33:41.820+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12854117/comment/15270120","id":"15270120","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=prateekrungta","name":"prateekrungta","key":"prateekrungta","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Prateek Rungta","active":true,"timeZone":"America/Los_Angeles"},"body":"for posterity, Jason Zhu does a pretty good job of root-causing this on his blog - [1]\n\ntl;dr - \n{quote}\nConsequently, the product of 'mapreduce.reduce.shuffle.input.buffer.percent' multiplies by 'mapreduce.reduce.shuffle.parallelcopies' should not be greater than 1, or, in the extreme case, OOM will be thrown provided all mappers complete at the same time and all the outputs is in the manner of in-memory shuffling.\n\nBut here's a compromise between OOM and throughput. The product can be greater than 1 if some OOMs is tolerable.\n{quote}\n\n[1]: http://jason4zhu.blogspot.com/2014/11/shuffle-error-by-java-lang-out-of-memory-error-java-heap-space.html","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=prateekrungta","name":"prateekrungta","key":"prateekrungta","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Prateek Rungta","active":true,"timeZone":"America/Los_Angeles"},"created":"2016-05-04T04:50:10.304+0000","updated":"2016-05-04T04:50:10.304+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12854117/comment/16040315","id":"16040315","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=asotona","name":"asotona","key":"asotona","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Adam Sotona","active":true,"timeZone":"Europe/Prague"},"body":"Hi guys,\nI'm experiencing exactly the same issue, even I decreased the values following way:\nmapreduce.reduce.shuffle.input.buffer.percent=0.70\nmapreduce.reduce.shuffle.memory.limit.percent=0.2\nmapreduce.reduce.shuffle.parallelcopies=4 \n\nAccording to the above calculations 0.7 * 0.2 * 4 = 0.56 < 1\n\nCould someone explain it?\n\n\nI'm running very long MapReduce process, where some of the reducers almost deterministically fail on OOME, repeated attempts still cause OOME and the whole restarted application with reduced shuffle parameters still fails (after several days of computation).\n\nIs there any reason why InMemoryMapOutput blindly allocates memory despite the actual situation?\nCould Fetcher.copyMapOutput recover from that situation by falling into an alternative MapOutput?\n\nThanks ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=asotona","name":"asotona","key":"asotona","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Adam Sotona","active":true,"timeZone":"Europe/Prague"},"created":"2017-06-07T06:49:19.311+0000","updated":"2017-06-07T06:49:19.311+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12854117/comment/16040517","id":"16040517","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=asotona","name":"asotona","key":"asotona","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Adam Sotona","active":true,"timeZone":"Europe/Prague"},"body":"With relation to this issue I have manually performed a kind of configuration \"bracketing\", where I manually altered the job configuration of a still running application before another attempt.\nTo do it manually is a bit complicated as you have to modify the job configuration in HDFS stagging folder of the application as well as on each data node in the local appcache/<app>/filecache.\n\nHowever what if there would be a mechanism to prepare such alternate configuration(s), which will be used for second and following attempts after a task fail?\n\nFor example in job configuration I would set:\nmapreduce.reduce.shuffle.input.buffer.percent=0.70\nmapreduce.reduce.shuffle.memory.limit.percent=0.4\nmapreduce.reduce.shuffle.parallelcopies=30\nattempt-2.mapreduce.reduce.shuffle.input.buffer.percent=0.70\nattempt-2.mapreduce.reduce.shuffle.memory.limit.percent=0.2\nattempt-2.mapreduce.reduce.shuffle.parallelcopies=4\nattempt-3.mapreduce.reduce.shuffle.input.buffer.percent=0.20\nattempt-3.mapreduce.reduce.shuffle.memory.limit.percent=0.2\nattempt-3.mapreduce.reduce.shuffle.parallelcopies=2\n\nSuch mechanism should not be hard to implement and it would allow to have alternate fail-over configurations prepared in advance instead of long-term repeated bug hunting.\n\nThanks","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=asotona","name":"asotona","key":"asotona","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Adam Sotona","active":true,"timeZone":"Europe/Prague"},"created":"2017-06-07T08:43:39.252+0000","updated":"2017-06-07T08:43:39.252+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12854117/comment/16148409","id":"16148409","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=wilfreds","name":"wilfreds","key":"wilfreds","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Wilfred Spiegelenburg","active":true,"timeZone":"Australia/Sydney"},"body":"[~prateekrungta] and [~shuzhangyao]: I have seen this same issue a number of times and people keep referring to this open MR issue.\nI have dug into this and have found that there is nothing wrong with the calculation and there is no need for a change in the way we handle this in the code. There is no guarantee that any method devised for the internal calculation will guarantee that you do not get an OOM error. In all cases I have run into I have been able to fix it with a configuration change in MR and the JVM.\n\nLet me explain what I have found and why the issue will not be solved by changing the internal calculations.\n\nWhen the JVM throws an OOM for a reducer I collected a heap dumps and looked at what was allocated at the point in time that the OOM was thrown. It most cases the OOM was not thrown due to the total heap being used. As an example: the JVM heap for the reducer was set to 9216MB or 9GB the heap dump showed only a 5896M heap usage. Looking at the usage of the heap it showed that the shuffle input buffer usage was well within its limits.\nWe then tried to lower the {{mapreduce.reduce.shuffle.input.buffer.percent}} from the default 0.9 to 0.6 and found that it did not solve the issue. There was still an OOM around the same point with approximately the same usage of the heap. Lowering it further to 0.4 allowed the job to finish but we saw that the JVM never peaked above about 60% of the assigned heap. This causes a lot of waste on the cluster and is thus not a solution we could accept.\nFurther checks of the GC logging showed that all heap usage was in the old generation for each of the OOM cases. That explains why the reducer was throwing an OOM and the heap dump: it had run out of space in the old generation, not the total heap. Within the heap the old generation can take about 2/3 of the total heap. This is based on the default settings for the generation sizing in the heap [1].\n\nThe question then became what caused the JVM to run out of old generation and not using its young generation? This could be explained by the logging from the reducer we had. The reducer logs showed that it was trying to allocate a large shuffle response. In my case about 1.9GB. Eventhough this is a large shuffle response it was within all the limit. The JVM will allocate large objects often directly in the old generation instead of allocating it in the young generation. This behaviour could cause an OOM error in the reducer while not using the full heap and just running out of old generation.\n\nBack to the calculations. In the buffer we load all the shuffle data but we set a maximum of 25% of the total buffer in one shuffle response. This is the in memory merge limit. If the shuffle response is larger than 25% of the buffer size we do not store it in the buffer but directly merge to disk. A shuffle response is only accepted and downloaded if we can fit it in memory or if it goes straight to disk. The check and increase of the buffer usage happens before we start the download. Locking makes sure only one thread does this at a time, the number of paralel copies is thus not important. Limiting could lead to a deadlock as explained in the comments in the code. Since we need to prevent deadlocks we allow one shuffle (one thread) to go over that limit. If we would not allow this we could deadlock the reducer. The reducer would be in a state that it can not download new data to reduce. There would also never be a trigger that would cause the data in memory to be merged/spilled and thus the buffer stays as full as it is.\n\nBased on all that the maximum size of all the data we could store in the shuffle buffer would be:\n{code}\nmapreduce.reduce.shuffle.input.buffer.percent = buffer% = 70%\nmapreduce.reduce.shuffle.memory.limit.percent = limit% = 25%\nheap size = 9GB\nmaximum used memory = ((buffer% * (1 + limit%)) * heap size) - 1 byte\n{code}\nIf that buffer does not fit in the old generation we could throw an OOM error without really running out of memory. This is especially true when the individual shuffle sizes are large but not hit the in memory limit. Everything is still properly calculated and limited. We also do not unknowningly use more than the configured buffer size. If we go over we know exactly how much.\n\nThe way we worked around the problem without increasing the size of the heap. We did this by changing the generations. The old generation inside the heap was changed by increasing the \"NewRatio\" setting from 2 (default) to 4. We also changed the \"input.buffer.percent\" setting to 65%. That worked in our case with the 9GB as the maximum heap for the reducer. Different heap sizes combined with a different \"memory.limit.percent\" might require a different \"Newratio\" setting.\n\n[1] https://docs.oracle.com/javase/8/docs/technotes/guides/vm/gctuning/sizing.html","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=wilfreds","name":"wilfreds","key":"wilfreds","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Wilfred Spiegelenburg","active":true,"timeZone":"Australia/Sydney"},"created":"2017-08-31T03:56:32.439+0000","updated":"2017-08-31T03:56:32.439+0000"}],"maxResults":12,"total":12,"startAt":0},"votes":{"self":"https://issues.apache.org/jira/rest/api/2/issue/MAPREDUCE-6447/votes","votes":3,"hasVoted":false},"worklog":{"startAt":0,"maxResults":20,"total":0,"worklogs":[]},"customfield_12311820":"0|i2ikx3:"}}