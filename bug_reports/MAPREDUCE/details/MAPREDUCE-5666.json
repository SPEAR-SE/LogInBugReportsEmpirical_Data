{"expand":"renderedFields,names,schema,operations,editmeta,changelog,versionedRepresentations","id":"12682621","self":"https://issues.apache.org/jira/rest/api/2/issue/12682621","key":"MAPREDUCE-5666","fields":{"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype","name":"Bug","subtask":false,"avatarId":21133},"timespent":null,"project":{"self":"https://issues.apache.org/jira/rest/api/2/project/12310941","id":"12310941","key":"MAPREDUCE","name":"Hadoop Map/Reduce","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/projectavatar?pid=12310941&avatarId=10096","24x24":"https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12310941&avatarId=10096","16x16":"https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12310941&avatarId=10096","32x32":"https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12310941&avatarId=10096"},"projectCategory":{"self":"https://issues.apache.org/jira/rest/api/2/projectCategory/10292","id":"10292","description":"Scalable Distributed Computing","name":"Hadoop"}},"fixVersions":[],"aggregatetimespent":null,"resolution":{"self":"https://issues.apache.org/jira/rest/api/2/resolution/6","id":"6","description":"The problem isn't valid and it can't be fixed.","name":"Invalid"},"customfield_12312322":null,"customfield_12310220":"2013-12-04T14:34:51.279+0000","customfield_12312520":null,"customfield_12312323":null,"customfield_12312521":"Wed Dec 04 14:34:51 UTC 2013","customfield_12310420":"361878","customfield_12312320":null,"customfield_12310222":"1_*:*_1_*:*_31556592_*|*_5_*:*_1_*:*_0","customfield_12312321":null,"resolutiondate":"2013-12-04T14:34:51.253+0000","workratio":-1,"customfield_12312328":null,"customfield_12312329":null,"customfield_12312923":null,"customfield_12312326":null,"customfield_12312920":null,"customfield_12310300":null,"customfield_12312327":null,"customfield_12312921":null,"customfield_12312324":null,"customfield_12312720":null,"customfield_12312325":null,"lastViewed":null,"watches":{"self":"https://issues.apache.org/jira/rest/api/2/issue/MAPREDUCE-5666/watchers","watchCount":2,"isWatching":false},"created":"2013-12-04T05:48:54.697+0000","customfield_12310192":null,"customfield_12310191":null,"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.svg","name":"Major","id":"3"},"labels":[],"customfield_12312333":null,"customfield_12310230":null,"customfield_12312334":null,"customfield_12313422":"false","customfield_12310310":"0.0","customfield_12312331":null,"customfield_12312332":null,"timeestimate":null,"aggregatetimeoriginalestimate":null,"customfield_12311120":null,"customfield_12312330":null,"versions":[],"issuelinks":[],"customfield_12312339":null,"assignee":null,"customfield_12312337":null,"customfield_12312338":null,"updated":"2013-12-04T14:34:51.285+0000","customfield_12312335":null,"customfield_12312336":null,"status":{"self":"https://issues.apache.org/jira/rest/api/2/status/5","description":"A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/resolved.png","name":"Resolved","id":"5","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Done"}},"components":[],"timeoriginalestimate":null,"description":"hi \n\nI have written the below code , and facing the issue. i am using hadoop 0.20 vesion and java 1.6 the issue is \n\norg/apache/hadoop/mapreduce/lib/input/FileInputFormat.java(org/apache/hadoop/mapreduce/lib/input:FileInputFormat.java):232: cannot find symbol\nsymbol  : method isDirectory()\nlocation: class org.apache.hadoop.fs.FileStatus\n          if (globStat.isDirectory()) {\n                      ^\norg/apache/hadoop/mapreduce/lib/output/FileOutputCommitter.java(org/apache/hadoop/mapreduce/lib/output:FileOutputCommitter.java):208: cannot find symbol\nsymbol  : method isDirectory()\nlocation: class org.apache.hadoop.fs.FileStatus\n    } else if(fs.getFileStatus(taskOutput).isDirectory()) {\n                                          ^\norg/apache/hadoop/mapred/JobConf.java(org/apache/hadoop/mapred:JobConf.java):433: cannot find symbol\nsymbol  : method getPattern(java.lang.String,java.util.regex.Pattern)\nlocation: class org.apache.hadoop.mapred.JobConf\n    return getPattern(JobContext.JAR_UNPACK_PATTERN, UNPACK_JAR_PATTERN_DEFAULT);\n           ^\norg/apache/hadoop/mapred/JobConf.java(org/apache/hadoop/mapred:JobConf.java):450: cannot find symbol\nsymbol  : method getTrimmedStrings(java.lang.String)\nlocation: class org.apache.hadoop.mapred.JobConf\n    return getTrimmedStrings(MRConfig.LOCAL_DIR);\n           ^\norg/apache/hadoop/mapred/FileInputFormat.java(org/apache/hadoop/mapred:FileInputFormat.java):165: cannot find symbol\nsymbol  : method isDirectory()\nlocation: class org.apache.hadoop.fs.FileStatus\n      if (stat.isDirectory()) {\n              ^\norg/apache/hadoop/mapred/FileInputFormat.java(org/apache/hadoop/mapred:FileInputFormat.java):215: cannot find symbol\nsymbol  : method isDirectory()\nlocation: class org.apache.hadoop.fs.FileStatus\n          if (globStat.isDirectory()) {\n                      ^\norg/apache/hadoop/mapred/FileInputFormat.java(org/apache/hadoop/mapred:FileInputFormat.java):218: cannot find symbol\nsymbol  : method isDirectory()\nlocation: class org.apache.hadoop.fs.FileStatus\n              if (recursive && stat.isDirectory()) {\n                                   ^\norg/apache/hadoop/mapred/FileInputFormat.java(org/apache/hadoop/mapred:FileInputFormat.java):258: cannot find symbol\nsymbol  : method isDirectory()\nlocation: class org.apache.hadoop.fs.FileStatus\n      if (file.isDirectory()) {\n              ^\norg/apache/hadoop/mapred/FileOutputCommitter.java(org/apache/hadoop/mapred:FileOutputCommitter.java):166: cannot find symbol\nsymbol  : method isDirectory()\nlocation: class org.apache.hadoop.fs.FileStatus\n    } else if(fs.getFileStatus(taskOutput).isDirectory()) {\n                                          ^\norg/apache/hadoop/mapred/LineRecordReader.java(org/apache/hadoop/mapred:LineRecordReader.java):100: incompatible types\nfound   : org.apache.hadoop.io.compress.SplitCompressionInputStream\nrequired: org.apache.hadoop.fs.Seekable\n        filePosition = cIn; // take pos from compressed stream\n                       ^\norg/apache/hadoop/mapreduce/lib/input/LineRecordReader.java(org/apache/hadoop/mapreduce/lib/input:LineRecordReader.java):98: incompatible types\nfound   : org.apache.hadoop.io.compress.SplitCompressionInputStream\nrequired: org.apache.hadoop.fs.Seekable\n        filePosition = cIn;\n\n\n\nI have attached the code \n\nimport java.io.DataInput;  \n\nimport java.io.DataOutput;  \n\nimport java.io.IOException;  \n\nimport java.util.StringTokenizer;  \n\nimport org.apache.hadoop.conf.Configured;  \n\nimport org.apache.hadoop.fs.FSDataInputStream;  \n\nimport org.apache.hadoop.fs.FileSystem;  \n\nimport org.apache.hadoop.fs.Path;  \n\nimport org.apache.hadoop.io.IntWritable;  \n\nimport org.apache.hadoop.io.Text;  \n\nimport org.apache.hadoop.io.WritableComparable;  \n\nimport org.apache.hadoop.mapreduce.InputSplit;  \n\nimport org.apache.hadoop.mapreduce.Job;  \n\nimport org.apache.hadoop.mapreduce.Mapper;  \n\nimport org.apache.hadoop.mapreduce.RecordReader;  \n\nimport org.apache.hadoop.mapreduce.TaskAttemptContext;  \n\nimport org.apache.hadoop.mapreduce.lib.input.CombineFileInputFormat;  \n\nimport org.apache.hadoop.mapreduce.lib.input.CombineFileRecordReader;  \n\nimport org.apache.hadoop.mapreduce.lib.input.CombineFileSplit;  \n\nimport org.apache.hadoop.mapreduce.lib.input.FileInputFormat;  \n\nimport org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;  \n\nimport org.apache.hadoop.mapreduce.lib.reduce.IntSumReducer;  \n\nimport org.apache.hadoop.util.LineReader;  \n\nimport org.apache.hadoop.util.Tool;  \n\nimport org.apache.hadoop.util.ToolRunner;  \n\n\n /**  \n\n  * MultiFileWordCount is an example to demonstrate the usage of   \n\n  * MultiFileInputFormat. This examples counts the occurrences of  \n\n  * words in the text files under the given input directory.  \n\n  */ \n\npublic class MultiFileWordCount extends Configured implements Tool {  \n\n   /**  \n\n    * This record keeps <filename,offset> pairs.  \n\n    */ \n\npublic static class WordOffset implements WritableComparable {  \n\n   private long offset;  \n\n   private String fileName;  \n  \n   public void readFields(DataInput in) throws IOException {  \n\n      this.offset = in.readLong();  \n\n      this.fileName = Text.readString(in);  \n\n     }  \n\n     public void write(DataOutput out) throws IOException {  \n\n       out.writeLong(offset);  \n\n       Text.writeString(out, fileName);  \n\n     }  \n\n      public int compareTo(Object o) {  \n\n       WordOffset that = (WordOffset)o;  \n\n       int f = this.fileName.compareTo(that.fileName);  \n\n       if(f == 0) {  \n\n         return (int)Math.signum((double)(this.offset - that.offset));  \n\n       }  \n\n       return f;  \n\n     }  \n\n     @Override \n\n     public boolean equals(Object obj) {  \n\n       if(obj instanceof WordOffset)  \n\n       return this.compareTo(obj) == 0;  \n\n       return false;  \n\n     }  \n\n     @Override \n\n     public int hashCode() {  \n\n     assert false : \"hashCode not designed\";  \n\n     return 42; //an arbitrary constant  \n\n     }  \n\n   }  \n\n   /**  \n\n    * To use {@link CombineFileInputFormat}, one should extend it, to return a   \n\n    * (custom) {@link RecordReader}. CombineFileInputFormat uses   \n\n    * {@link CombineFileSplit}s.   \n\n    */ \n\n   public static class MyInputFormat   \n\n     extends CombineFileInputFormat  {  \n\n     public RecordReader createRecordReader(InputSplit split,  \n\n      TaskAttemptContext context) throws IOException {  \n\n       return new CombineFileRecordReader(  \n\n         (CombineFileSplit)split, context, CombineFileLineRecordReader.class);  \n\n     }  \n\n   }  \n\n  \n   /**  \n\n    * RecordReader is responsible from extracting records from a chunk  \n\n    * of the CombineFileSplit.   \n\n    */ \n\n   public static class CombineFileLineRecordReader   \n\n     extends RecordReader {  \n\n     private long startOffset; //offset of the chunk;  \n\n     private long end; //end of the chunk;  \n\n     private long pos; // current pos   \n\n     private FileSystem fs;  \n\n     private Path path;  \n\n     private WordOffset key;  \n\n     private Text value;  \n\n     private FSDataInputStream fileIn;  \n\n     private LineReader reader;  \n\n     public CombineFileLineRecordReader(CombineFileSplit split,  \n\n         TaskAttemptContext context, Integer index) throws IOException {  \n      \n       this.path = split.getPath(index);  \n\n       fs = this.path.getFileSystem(context.getConfiguration());  \n\n       this.startOffset = split.getOffset(index);  \n\n       this.end = startOffset + split.getLength(index);  \n\n       boolean skipFirstLine = false;  \n\n       //open the file  \n\n       fileIn = fs.open(path);  \n\n       if (startOffset != 0) {  \n\n       skipFirstLine = true;  \n\n         --startOffset;  \n\n         fileIn.seek(startOffset);  \n\n       }  \n\n       reader = new LineReader(fileIn);  \n\n       if (skipFirstLine) {  // skip first line and re-establish \"startOffset\".  \n\n        startOffset += reader.readLine(new Text(), 0,  \n\n         (int)Math.min((long)Integer.MAX_VALUE, end - startOffset));  \n\n       }  \n\n       this.pos = startOffset;  \n\n     }  \n\n     public void initialize(InputSplit split, TaskAttemptContext context)  \n\n        throws IOException, InterruptedException {  \n\n     }\n     public void close() throws IOException { }  \n\n     public float getProgress() throws IOException {  \n\n       if (startOffset == end) {  \n\n        return 0.0f;  \n\n       } else {  \n\n       return Math.min(1.0f, (pos - startOffset) / (float)(end - startOffset));  \n\n       }  \n\n     }  \n\n    public boolean nextKeyValue() throws IOException {  \n\n       if (key == null) {  \n\n         key = new WordOffset();  \n\n         key.fileName = path.getName();  \n\n       }  \n\n       key.offset = pos;  \n\n       if (value == null) {  \n\n       value = new Text();  \n\n       }  \n\n       int newSize = 0;  \n\n       if (pos < end) {  \n\n        newSize = reader.readLine(value);  \n\n        pos += newSize;  \n\n       }  \n\n       if (newSize == 0) {  \n\n        key = null;  \n\n        value = null;  \n\n        return false;  \n\n       } else {  \n\n        return true;  \n\n       }  \n\n     }  \n\n         public WordOffset getCurrentKey()   \n\n         throws IOException, InterruptedException {  \n\n          return key;  \n\n     }  \n\n         public Text getCurrentValue() throws IOException, InterruptedException {  \n\n         return value;  \n\n     }  \n\n   }  \n\n  \n   /**  \n\n    * This Mapper is similar to the one in {@link WordCount.MapClass}.  \n\n    */ \n\n   public static class MapClass extends  \n\n       Mapper {  \n\n     private final static IntWritable one = new IntWritable(1);  \n\n     private Text word = new Text();  \n\n     public void map(WordOffset key, Text value, Context context)  \n\n         throws IOException, InterruptedException {  \n\n       String line = value.toString();  \n\n       StringTokenizer itr = new StringTokenizer(line);  \n\n       while (itr.hasMoreTokens()) {  \n\n         word.set(itr.nextToken());  \n\n         context.write(word, one);  \n\n       }  \n\n     }  \n\n   }  \n\n   private void printUsage() {  \n\n     System.out.println(\"Usage : multifilewc  \" );  \n\n   }  \n   public int run(String[] args) throws Exception {  \n\n     if(args.length < 2) {  \n\n       printUsage();  \n\n       return 2;  \n\n     }  \n\n     Job job = new Job(getConf());  \n\n     job.setJobName(\"MultiFileWordCount\");  \n\n     job.setJarByClass(MultiFileWordCount.class);  \n    \n     //set the InputFormat of the job to our InputFormat  \n\n     job.setInputFormatClass(MyInputFormat.class);  \n       \n     // the keys are words (strings)  \n\n     job.setOutputKeyClass(Text.class);  \n\n     // the values are counts (ints)  \n\n     job.setOutputValueClass(IntWritable.class);  \n \n     //use the defined mapper  \n\n     job.setMapperClass(MapClass.class);  \n\n     //use the WordCount Reducer  \n\n     job.setCombinerClass(IntSumReducer.class);  \n\n     job.setReducerClass(IntSumReducer.class);  \n   \n\n     FileInputFormat.addInputPaths(job, args[0]);  \n\n     FileOutputFormat.setOutputPath(job, new Path(args[1]));  \n\n     return job.waitForCompletion(true) ? 0 : 1;  \n\n   }  \n   \n   public static void main(String[] args) throws Exception {  \n\n     int ret = ToolRunner.run(new MultiFileWordCount(), args);  \n\n     System.exit(ret);  \n\n   }  \n\n } \n","customfield_10010":null,"timetracking":{},"customfield_12312026":null,"customfield_12312023":null,"customfield_12310320":null,"customfield_12312024":null,"customfield_12312340":null,"attachment":[],"aggregatetimeestimate":null,"customfield_12312341":null,"customfield_12312220":null,"customfield_12312022":null,"customfield_12310921":null,"customfield_12310920":"362173","customfield_12312823":null,"summary":"org/apache/hadoop/mapreduce/lib/input/FileInputFormat.java(org/apache/hadoop/mapreduce/lib/input:FileInputFormat.java):cannot find symbol","creator":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=ranjini+rathinam","name":"ranjini rathinam","key":"ranjini rathinam","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ranjini","active":true,"timeZone":"Etc/UTC"},"subtasks":[],"customfield_12310291":null,"reporter":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=ranjini+rathinam","name":"ranjini rathinam","key":"ranjini rathinam","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ranjini","active":true,"timeZone":"Etc/UTC"},"customfield_12310290":null,"aggregateprogress":{"progress":0,"total":0},"customfield_12311024":null,"environment":null,"customfield_12313520":null,"customfield_12311020":null,"duedate":null,"customfield_12310250":null,"progress":{"progress":0,"total":0},"comment":{"comments":[{"self":"https://issues.apache.org/jira/rest/api/2/issue/12682621/comment/13838929","id":"13838929","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jlowe","name":"jlowe","key":"jlowe","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jason Lowe","active":true,"timeZone":"America/Chicago"},"body":"As I mentioned in MAPREDUCE-5668, JIRA is not the avenue to use for questions like this.  Please use the [user@ mailing list|http://hadoop.apache.org/mailing_lists.html#User] for questions like this.  If after discussing on the mailing list it ends up being a bug in Hadoop then a JIRA can be filed at that time.\n\nThis is clearly a case of code being compiled against a release after 1.x but then run on a 0.20 or 1.x release.  The FileStatus.isDirectory() method was not present in the 0.20 or 1.x releases.  We cannot generally support compiling code against a later release and then running it on an earlier release because of new APIs that can be added.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jlowe","name":"jlowe","key":"jlowe","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jason Lowe","active":true,"timeZone":"America/Chicago"},"created":"2013-12-04T14:34:51.279+0000","updated":"2013-12-04T14:34:51.279+0000"}],"maxResults":1,"total":1,"startAt":0},"votes":{"self":"https://issues.apache.org/jira/rest/api/2/issue/MAPREDUCE-5666/votes","votes":0,"hasVoted":false},"worklog":{"startAt":0,"maxResults":20,"total":0,"worklogs":[]},"customfield_12311820":"0|i1qdo7:"}}