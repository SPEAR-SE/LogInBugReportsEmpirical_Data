{"expand":"renderedFields,names,schema,operations,editmeta,changelog,versionedRepresentations","id":"12491608","self":"https://issues.apache.org/jira/rest/api/2/issue/12491608","key":"MAPREDUCE-2205","fields":{"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype","name":"Bug","subtask":false,"avatarId":21133},"timespent":null,"project":{"self":"https://issues.apache.org/jira/rest/api/2/project/12310941","id":"12310941","key":"MAPREDUCE","name":"Hadoop Map/Reduce","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/projectavatar?pid=12310941&avatarId=10096","24x24":"https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12310941&avatarId=10096","16x16":"https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12310941&avatarId=10096","32x32":"https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12310941&avatarId=10096"},"projectCategory":{"self":"https://issues.apache.org/jira/rest/api/2/projectCategory/10292","id":"10292","description":"Scalable Distributed Computing","name":"Hadoop"}},"fixVersions":[],"aggregatetimespent":null,"resolution":{"self":"https://issues.apache.org/jira/rest/api/2/resolution/8","id":"8","description":"The described issue is not actually a problem - it is as designed.","name":"Not A Problem"},"customfield_12312322":null,"customfield_12310220":"2010-11-30T03:01:27.252+0000","customfield_12312520":null,"customfield_12312323":null,"customfield_12312521":"Thu Dec 16 19:51:29 UTC 2010","customfield_12310420":"150063","customfield_12312320":null,"customfield_12310222":"1_*:*_1_*:*_1445588796_*|*_5_*:*_1_*:*_0","customfield_12312321":null,"resolutiondate":"2010-12-16T19:51:52.168+0000","workratio":-1,"customfield_12312328":null,"customfield_12312329":null,"customfield_12312923":null,"customfield_12312326":null,"customfield_12312920":null,"customfield_12310300":null,"customfield_12312327":null,"customfield_12312921":null,"customfield_12312324":null,"customfield_12312720":null,"customfield_12312325":null,"lastViewed":null,"watches":{"self":"https://issues.apache.org/jira/rest/api/2/issue/MAPREDUCE-2205/watchers","watchCount":8,"isWatching":false},"created":"2010-11-30T02:18:43.372+0000","customfield_12310192":null,"customfield_12310191":null,"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.svg","name":"Major","id":"3"},"labels":[],"customfield_12312333":null,"customfield_12310230":null,"customfield_12312334":null,"customfield_12313422":"false","customfield_12310310":"0.0","customfield_12312331":null,"customfield_12312332":null,"timeestimate":null,"aggregatetimeoriginalestimate":null,"customfield_12311120":null,"customfield_12312330":null,"versions":[],"issuelinks":[{"id":"12336217","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12336217","type":{"id":"10030","name":"Reference","inward":"is related to","outward":"relates to","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"},"outwardIssue":{"id":"12440346","key":"MAPREDUCE-1204","self":"https://issues.apache.org/jira/rest/api/2/issue/12440346","fields":{"summary":"Fair Scheduler preemption may preempt tasks running in slots unusable by the preempting job","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/1","description":"The issue is open and ready for the assignee to start work on it.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/open.png","name":"Open","id":"1","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/2","id":2,"key":"new","colorName":"blue-gray","name":"To Do"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.svg","name":"Major","id":"3"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype","name":"Bug","subtask":false,"avatarId":21133}}}}],"customfield_12312339":null,"assignee":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=schen","name":"schen","key":"schen","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Scott Chen","active":true,"timeZone":"Etc/UTC"},"customfield_12312337":null,"customfield_12312338":null,"updated":"2010-12-16T19:51:52.119+0000","customfield_12312335":null,"customfield_12312336":null,"status":{"self":"https://issues.apache.org/jira/rest/api/2/status/5","description":"A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/resolved.png","name":"Resolved","id":"5","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Done"}},"components":[{"self":"https://issues.apache.org/jira/rest/api/2/component/12312901","id":"12312901","name":"contrib/fair-share"}],"timeoriginalestimate":null,"description":"We have hit a problem with the preemption implementation in the FairScheduler where the following happens:\n\n# job X runs short of fair share or min share and requests/causes N tasks to be preempted\n# when slots are then scheduled - tasks from some other job are actually scheduled\n# after preemption_interval has passed, job X finds it's still underscheduled and requests preemption. goto 1.\n\nThis has caused widespread preemption of tasks and the cluster going from high utilization to low utilization in a few minutes.\n\nAfter doing some analysis of the logs - one of the biggest contributing factors seems to be the scheduling of jobs when a heartbeat with multiple slots is advertised. currently it goes over all the jobs/pools (in sorted) order until all the slots are exhausted. this leads to lower priority jobs also getting scheduled (that may have just been preempted).","customfield_10010":null,"timetracking":{},"customfield_12312026":null,"customfield_12312023":null,"customfield_12310320":null,"customfield_12312024":null,"customfield_12312340":null,"attachment":[],"aggregatetimeestimate":null,"customfield_12312341":null,"customfield_12312220":null,"customfield_12312022":null,"customfield_12310921":null,"customfield_12310920":"111925","customfield_12312823":null,"summary":"FairScheduler should not re-schedule jobs that have just been preempted","creator":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jsensarma","name":"jsensarma","key":"jsensarma","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Joydeep Sen Sarma","active":true,"timeZone":"Asia/Kolkata"},"subtasks":[],"customfield_12310291":null,"reporter":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jsensarma","name":"jsensarma","key":"jsensarma","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Joydeep Sen Sarma","active":true,"timeZone":"Asia/Kolkata"},"customfield_12310290":null,"aggregateprogress":{"progress":0,"total":0},"customfield_12311024":null,"environment":null,"customfield_12313520":null,"customfield_12311020":null,"duedate":null,"customfield_12310250":null,"progress":{"progress":0,"total":0},"comment":{"comments":[{"self":"https://issues.apache.org/jira/rest/api/2/issue/12491608/comment/12965079","id":"12965079","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=matei","name":"matei","key":"matei","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Matei Zaharia","active":true,"timeZone":"America/Los_Angeles"},"body":"I'll have to look at this code in trunk more carefully, but I think you're right that cases can arise in which the wrong job is scheduled. The main one I notice is when several jobs are below their min or fair share and one of them times out. When this job times out, the FairShareComparator looks at all the jobs in order of min or fair share ratio and picks the one with the lowest one to launch. However, that job may itself have been launched quite a bit later than the one that timed out, so the timed out job needs to wait even longer. The issue is going to be worse if some pools have preemption enabled and some don't, or if pools have different preemption timeouts.\n\nI think fixing this might require a slightly different approach than you proposed because of the semantics we want for timeouts. We want preemption to occur only if a job (or pool) has not been serviced for X seconds, in which case the preempted resources should go to that job. If we just sort the jobs using FairShareComparator, we may miss the fact that a job later in the fair share order has actually timed out and requires preemption now. Instead, it would be better to change FairShareComparator (and its equivalent in Facebook's 0.20) to sort jobs by whether they are past their preemption timeout first. We should also think about whether it's best to do this in the comparator or outside of it. I think one of the cleaner solution would be to do this prioritization outside the comparator (i.e. sort the jobs and then pull out the starved ones), because this way, we don't need to modify all the comparators to take into account preemption timeouts.\n\nSo in summary, I'd propose the following approach:\n* In the FairScheduler object, keep track of which pools are currently starved and past their preemption timeouts. This could be as simple as calling tasksToPreempt() on each heartbeat or more complicated if we want to cache this value somehow.\n* In FairScheduler.assignTasks, subdivide the pools into timed-out and non-timed-out ones and prioritize assigning tasks to the former. We can still use the FairShareComparator to sort the pools of each type. At the end of the day, all pools should be put into a global order and the assignTasks method can proceed as normal.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=matei","name":"matei","key":"matei","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Matei Zaharia","active":true,"timeZone":"America/Los_Angeles"},"created":"2010-11-30T03:01:27.252+0000","updated":"2010-11-30T03:01:27.252+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12491608/comment/12965123","id":"12965123","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jsensarma","name":"jsensarma","key":"jsensarma","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Joydeep Sen Sarma","active":true,"timeZone":"Asia/Kolkata"},"body":"i am not proposing preempting for jobs that don't meet preemption criteria. Let me try to rephrase more accurately - assuming that there's one total ordering -L - of jobs at any time (for purposes of scheduling after taking min/fair shares into account).\n\nevery preemption_interval secs:\n* assume we can schedule N tasks from one preemption interval to the next\n* start walking L from beginning to end stopping when >= N schedulable tasks have been traversed\n** for each job J encountered if J.needsPreemption() - then bump up preemption count appropriately.\n\nN is a parameter to this protocol. If N is too aggressive - then we may kill tasks unnecessarily. i think we can make a fairly good guess of N based on past behavior. We can be a bit pessimistic - at worst this will delay preemption a bit.\n\n---\n\nAFAI understand - the faircomparator _should_ be placing the jobs with the most deficit in terms of fair/main share at the head of the sorted jobs list already. So i don't understand why we should go about changing it. The main issue i see is the duplication of job ordering logic in two different places (fairComparator and tasksToPreempt()) and i am hoping that by centralizing the ordering logic in one place - we will avoid inconsistency (and the code will be easier to understand and maintain).","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jsensarma","name":"jsensarma","key":"jsensarma","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Joydeep Sen Sarma","active":true,"timeZone":"Asia/Kolkata"},"created":"2010-11-30T06:55:13.287+0000","updated":"2010-11-30T06:55:13.287+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12491608/comment/12965125","id":"12965125","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jsensarma","name":"jsensarma","key":"jsensarma","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Joydeep Sen Sarma","active":true,"timeZone":"Asia/Kolkata"},"body":"to add - for any job J - there's no point preempting tasks from any other job J' that's ahead of J in the sorted list. \n\n(We have evidence of this happening internally (preempted tasks from a job and then scheduled them right back before scheduling the job requesting preemption) - although i am not sure it can happen in trunk code.)","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jsensarma","name":"jsensarma","key":"jsensarma","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Joydeep Sen Sarma","active":true,"timeZone":"Asia/Kolkata"},"created":"2010-11-30T06:58:42.281+0000","updated":"2010-11-30T06:58:42.281+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12491608/comment/12965430","id":"12965430","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=matei","name":"matei","key":"matei","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Matei Zaharia","active":true,"timeZone":"America/Los_Angeles"},"body":"What I was trying to say is not that we shouldn't look at the job ordering, but that we have to prioritize giving tasks to jobs that have required preemption. If we don't do this, then there's no guarantee that the jobs at the head of the ordering L will be the ones that actually require preemption. It's true that if we estimate N correctly, then we know that *eventually* jobs will get to launch tasks before the next preemption interval, but even that is not as good a guarantee as saying that as soon as your timeout passes, we will kill some tasks and give those slots directly to you.\n\nI think the scheme I proposed above is the simplest way to achieve this without requiring any sort of estimation of heuristics. It's exactly the same logic we have before, except that in assignTasks, we sort jobs first by whether they need preemption, and then by the fair share comparator. We don't need to change the comparator in any way, just to add a bit of extra logic to prioritize these needy jobs. We are also guaranteed this way that preempted tasks go directly to a job that needed preemption, and that you get your slots one or two heartbeats after your preemption timeout expires.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=matei","name":"matei","key":"matei","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Matei Zaharia","active":true,"timeZone":"America/Los_Angeles"},"created":"2010-11-30T20:52:03.325+0000","updated":"2010-11-30T20:52:03.325+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12491608/comment/12965432","id":"12965432","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=matei","name":"matei","key":"matei","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Matei Zaharia","active":true,"timeZone":"America/Los_Angeles"},"body":"Just to add a bit, one other complication with the \"walk down the ordering\" approach is that the ordering may change over time as jobs get slots and as their old tasks finish. It's hard to look at the ordering now and know exactly which jobs will launch tasks before the next preemption interval. In contrast, with the way I proposed, you don't need any such estimation. We just directly fix the issue that a timed-out job may not be at the head of the ordering. Does this make sense?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=matei","name":"matei","key":"matei","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Matei Zaharia","active":true,"timeZone":"America/Los_Angeles"},"created":"2010-11-30T20:55:26.632+0000","updated":"2010-11-30T20:55:26.632+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12491608/comment/12965456","id":"12965456","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jsensarma","name":"jsensarma","key":"jsensarma","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Joydeep Sen Sarma","active":true,"timeZone":"Asia/Kolkata"},"body":"> we have to prioritize giving tasks to jobs that have required preemption\n\ni don't follow - the fairsharecomparator is supposed to be doing this already. if not - we have a bigger problem on our hand. jobs that are furthest behind in fair/min share are at the head of the sorted list based on fairsharecomparator. the only reason a different set of jobs gets rights to preemption is because the tasksToPreempt() call is not using fairsharecomparator logic. if it was - there would be no problem to begin with. \n\ncan u explain why the fairsharecomparator is not doing the correct thing already?\n\na simple way of getting past the re-ordering issue is to invoke tasksToPreempt() very very frequently and make N (the max number of tasks to preempt) really small. I would hazard to say we can even do this every heartbeat (since we have a sorted list - we only need to see if the head of the queue needs preemption).","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jsensarma","name":"jsensarma","key":"jsensarma","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Joydeep Sen Sarma","active":true,"timeZone":"Asia/Kolkata"},"created":"2010-11-30T22:12:53.649+0000","updated":"2010-11-30T22:12:53.649+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12491608/comment/12970365","id":"12970365","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jsensarma","name":"jsensarma","key":"jsensarma","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Joydeep Sen Sarma","active":true,"timeZone":"Asia/Kolkata"},"body":"i think i phrased this jira very badly.\n\nhere's the real problem: job A preempts job B. after preemption, job B keeps getting slots before job A gets all the slots it has asked for. after sometime jobA requests even more preemption.\n\nNote that it's ok for some jobC to get slots (if it's higher than jobA in priority based on fair share). i don't want to get into reintroducing some kind of logic to handle starvation (which is what forcing jobA to be scheduled before jobC would basically amount to). We had deficits earlier to deal with starvation - but that was very difficult to explain/deal with. i am ok with the current behavior - ultimately resources will be taken from jobs that are overscheduled to those that are underscheduled.\n\nspent a fair bit of time looking at our logs on why this phenomenon might be happening. the biggest contributing factor (so far) seems to be the policy in FS.assignTasks() to cycle through jobs (in 0.20) while assigning tasks for a given heartbeat. we frequently get into situations where a TT is advertising multiple slots (because we are bottlenecked on JT and heartbeat processing is slow) and the JT will not give all the slots to the highest priority job. the faircomparator is doing the right thing (the logs indicate that jobB gets slots only after jobA has gotten the first slot from the heartbeat).\n\nSo we need to strike a better balance perhaps on having diversity of jobs on a machine versus giving higher priority jobs multiple slots when heartbeats arrive.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jsensarma","name":"jsensarma","key":"jsensarma","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Joydeep Sen Sarma","active":true,"timeZone":"Asia/Kolkata"},"created":"2010-12-11T02:10:31.053+0000","updated":"2010-12-11T02:10:31.053+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12491608/comment/12971073","id":"12971073","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jsensarma","name":"jsensarma","key":"jsensarma","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Joydeep Sen Sarma","active":true,"timeZone":"Asia/Kolkata"},"body":"rephrasing. the ordering of the jobs in faircomparator seems consistent with the logic that figures out what to preempt (contrary to my initial intuition).","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jsensarma","name":"jsensarma","key":"jsensarma","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Joydeep Sen Sarma","active":true,"timeZone":"Asia/Kolkata"},"created":"2010-12-13T23:13:15.583+0000","updated":"2010-12-13T23:13:15.583+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12491608/comment/12971562","id":"12971562","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jsensarma","name":"jsensarma","key":"jsensarma","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Joydeep Sen Sarma","active":true,"timeZone":"Asia/Kolkata"},"body":"Scott - all yours. \n\none additional observation is that the fact that we continue rotating across different jobs causes us to get into situations that require preemptions in the first place. we should do our best not to schedule jobs that are above their fair/min share if there are jobs that are below those thresholds in the queue.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jsensarma","name":"jsensarma","key":"jsensarma","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Joydeep Sen Sarma","active":true,"timeZone":"Asia/Kolkata"},"created":"2010-12-15T06:46:16.165+0000","updated":"2010-12-15T06:46:16.165+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12491608/comment/12971832","id":"12971832","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=schen","name":"schen","key":"schen","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Scott Chen","active":true,"timeZone":"Etc/UTC"},"body":"Joydeep: Thanks. I will submit a patch based on our discussion yesterday.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=schen","name":"schen","key":"schen","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Scott Chen","active":true,"timeZone":"Etc/UTC"},"created":"2010-12-15T20:55:23.209+0000","updated":"2010-12-15T20:55:23.209+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12491608/comment/12971862","id":"12971862","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=matei","name":"matei","key":"matei","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Matei Zaharia","active":true,"timeZone":"America/Los_Angeles"},"body":"Alright, please summarize what the fix is as well. I still believe that prioritizing jobs that require preemption in assignTasks will get around most of these problems in trunk (modulo heartbeats being super slow). The logic that only launches one task from each job per assignTasks is Facebook-specific as far as I know.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=matei","name":"matei","key":"matei","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Matei Zaharia","active":true,"timeZone":"America/Los_Angeles"},"created":"2010-12-15T22:01:14.398+0000","updated":"2010-12-15T22:01:14.398+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12491608/comment/12971873","id":"12971873","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jsensarma","name":"jsensarma","key":"jsensarma","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Joydeep Sen Sarma","active":true,"timeZone":"Asia/Kolkata"},"body":"@Matei - i checked the trunk code - i could be wrong - but it seemed to me that assignTasks was rotating across pools (although i don't know what happens inside each poolschedulable)\n\nnote that the problem precedes preemption. as i tried to point in my last update - the fact that we assign rotate across jobs contributes in the first place (where some jobs end up with way more than fairshare). so i would like to see a solution where we try not to assign tasks to jobs above fair/main share if there are jobs that are below fair/min share. that way we don't have/need a preemption specific solution. it's a generic problem.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jsensarma","name":"jsensarma","key":"jsensarma","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Joydeep Sen Sarma","active":true,"timeZone":"Asia/Kolkata"},"created":"2010-12-15T22:39:52.936+0000","updated":"2010-12-15T22:39:52.936+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12491608/comment/12971884","id":"12971884","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=matei","name":"matei","key":"matei","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Matei Zaharia","active":true,"timeZone":"America/Los_Angeles"},"body":"In trunk, there's a while(true) loop that is used to launch tasks. In this loop, we have a for loop across pools that finds the first pool in the scheduling order which has tasks to launch. So it's entirely possible for a pool to launch multiple tasks on an assignTasks() call as long as it remains at the top of the sort order. (Note that we also re-sort the pools after each task launched). I think this will do exactly what you wanted. As soon as the pool at the front of the queue hits its fair share, the next pool will go to the top of the ordering, and so on. Let me know if there's any case where this doesn't happen this way.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=matei","name":"matei","key":"matei","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Matei Zaharia","active":true,"timeZone":"America/Los_Angeles"},"created":"2010-12-15T23:13:23.573+0000","updated":"2010-12-15T23:13:23.573+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12491608/comment/12971886","id":"12971886","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jsensarma","name":"jsensarma","key":"jsensarma","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Joydeep Sen Sarma","active":true,"timeZone":"Asia/Kolkata"},"body":"looking at the code - it says:\n\n     List<PoolSchedulable> scheds = getPoolSchedulables(taskType);\n      for (Schedulable sched: scheds) { // This loop will assign only one task    \n\n\nthis seems similar to what we have internally. typically we have one pool per user except for admin stuff. so if one user is depriving another user of slots - then we will keep assigning to the user who has more than fair share if the heartbeat advertises multiple slots. (and assignMultiple is true which it is for us)\n\nnote that in high load scenarios (and particularly if a lot of tasks are killed at once) - heartbeats do end up advertising multiple slots. ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jsensarma","name":"jsensarma","key":"jsensarma","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Joydeep Sen Sarma","active":true,"timeZone":"Asia/Kolkata"},"created":"2010-12-15T23:25:02.332+0000","updated":"2010-12-15T23:25:02.332+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12491608/comment/12971951","id":"12971951","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=schen","name":"schen","key":"schen","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Scott Chen","active":true,"timeZone":"Etc/UTC"},"body":"I think Matei is right. The difference is that the trunk code always sort the jobs again for every task it assigned.\nAfter assigning one task, the loop will sort the pools again and inside PoolSchedulable.assignTask() jobs will be sorted again.\nOur internal code does round robin task assignment on the sorted jobs.\nSo this problem should better in the trunk code.\nBut this may still happen for trunk code because the higher order jobs may be all waiting for locality.\n\nThe other point is that we should immediately assign the tasks we just preempted to the job that triggers preemption.\nCurrently we may preempt for a job because it is starving but the preempted tasks may be assigned to other jobs.\nThen this job will keep killing tasks if it cannot get the tasks that it just killed.\nOne way to solve this is to remember the job that starved for tasks and give them higher priority in the comparator.\n\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=schen","name":"schen","key":"schen","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Scott Chen","active":true,"timeZone":"Etc/UTC"},"created":"2010-12-16T03:19:23.173+0000","updated":"2010-12-16T03:19:23.173+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12491608/comment/12971973","id":"12971973","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jsensarma","name":"jsensarma","key":"jsensarma","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Joydeep Sen Sarma","active":true,"timeZone":"Asia/Kolkata"},"body":"if we are comfortable assigning multiple tasks from one job to the same slot - then there is no jira to solve here. we can simply merge in the assigned job into the sorted list before trying to get the next job and mimic the behavior in trunk. (note we already merge assigned jobs back into the sorted array - we just do it at the end of the function and not after assigning every task).\n\ni was under the impression that there was a deliberate attempt (in our version) to assign tasks from different jobs to the same slot. i don't know whether this is a feature or a bug or what the history is here. any ideas?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jsensarma","name":"jsensarma","key":"jsensarma","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Joydeep Sen Sarma","active":true,"timeZone":"Asia/Kolkata"},"created":"2010-12-16T06:07:29.105+0000","updated":"2010-12-16T06:07:29.105+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12491608/comment/12972185","id":"12972185","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=schen","name":"schen","key":"schen","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Scott Chen","active":true,"timeZone":"Etc/UTC"},"body":"As we discussed, this should not be a problem for the trunk version.\nI am closing this now. We can reopen it if we observe it later.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=schen","name":"schen","key":"schen","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Scott Chen","active":true,"timeZone":"Etc/UTC"},"created":"2010-12-16T19:51:29.611+0000","updated":"2010-12-16T19:51:29.611+0000"}],"maxResults":17,"total":17,"startAt":0},"votes":{"self":"https://issues.apache.org/jira/rest/api/2/issue/MAPREDUCE-2205/votes","votes":0,"hasVoted":false},"worklog":{"startAt":0,"maxResults":20,"total":0,"worklogs":[]},"customfield_12311820":"0|i0jihj:"}}