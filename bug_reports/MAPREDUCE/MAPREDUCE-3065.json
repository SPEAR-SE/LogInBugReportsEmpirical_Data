{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "fields": {
        "aggregateprogress": {
            "progress": 0,
            "total": 0
        },
        "aggregatetimeestimate": null,
        "aggregatetimeoriginalestimate": null,
        "aggregatetimespent": null,
        "assignee": null,
        "components": [{
            "id": "12315341",
            "name": "nodemanager",
            "self": "https://issues.apache.org/jira/rest/api/2/component/12315341"
        }],
        "created": "2011-09-21T21:11:23.000+0000",
        "creator": {
            "active": true,
            "avatarUrls": {
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=criccomini&avatarId=27141",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=criccomini&avatarId=27141",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=criccomini&avatarId=27141",
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=criccomini&avatarId=27141"
            },
            "displayName": "Chris Riccomini",
            "key": "criccomini",
            "name": "criccomini",
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=criccomini",
            "timeZone": "America/Los_Angeles"
        },
        "customfield_10010": null,
        "customfield_12310191": null,
        "customfield_12310192": null,
        "customfield_12310220": "2011-09-21T21:21:59.828+0000",
        "customfield_12310222": "1_*:*_1_*:*_69583059_*|*_4_*:*_1_*:*_22428_*|*_5_*:*_2_*:*_130731586606",
        "customfield_12310230": null,
        "customfield_12310250": null,
        "customfield_12310290": null,
        "customfield_12310291": null,
        "customfield_12310300": null,
        "customfield_12310310": "0.0",
        "customfield_12310320": null,
        "customfield_12310420": "35505",
        "customfield_12310920": "52377",
        "customfield_12310921": null,
        "customfield_12311020": null,
        "customfield_12311024": null,
        "customfield_12311120": null,
        "customfield_12311820": "0|i09bzz:",
        "customfield_12312022": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "customfield_12312026": null,
        "customfield_12312220": null,
        "customfield_12312320": null,
        "customfield_12312321": null,
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312324": null,
        "customfield_12312325": null,
        "customfield_12312326": null,
        "customfield_12312327": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312330": null,
        "customfield_12312331": null,
        "customfield_12312332": null,
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12312335": null,
        "customfield_12312336": null,
        "customfield_12312337": null,
        "customfield_12312338": null,
        "customfield_12312339": null,
        "customfield_12312340": null,
        "customfield_12312341": null,
        "customfield_12312520": null,
        "customfield_12312521": "Fri Nov 13 18:51:15 UTC 2015",
        "customfield_12312720": null,
        "customfield_12312823": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "customfield_12312923": null,
        "customfield_12313422": "false",
        "customfield_12313520": null,
        "description": "> Hey Vinod,\n> \n> OK, so I have a little more clarity into this.\n> \n> When I bump my resource request for my AM to 4096, it runs. The important line in the NM logs is:\n> \n> 2011-09-21 13:43:44,366 INFO  monitor.ContainersMonitorImpl (ContainersMonitorImpl.java:run(402)) - Memory usage of ProcessTree 25656 for container-id container_1316637655278_0001_01_000001 : Virtual 2260938752 bytes, limit : 4294967296 bytes; Physical 120860672 bytes, limit -1 bytes\n> \n> The thing to note is the virtual memory, which is off the charts, even though my physical memory is almost nothing (12 megs). I'm still poking around the code, but I am noticing that there are two checks in the NM, one for virtual mem, and one for physical mem. The virtual memory check appears to be toggle-able, but is presumably defaulted to on.\n> \n> At this point I'm trying to figure out exactly what the VMEM check is for, why YARN thinks my app is taking 2 gigs, and how to fix this.\n> \n> Cheers,\n> Chris\n> ________________________________________\n> From: Chris Riccomini [criccomini@linkedin.com]\n> Sent: Wednesday, September 21, 2011 1:42 PM\n> To: mapreduce-dev@hadoop.apache.org\n> Subject: Re: ApplicationMaster Memory Usage\n> \n> For the record, I bumped to 4096 for memory resource request, and it works.\n> :(\n> \n> \n> On 9/21/11 1:32 PM, \"Chris Riccomini\" <criccomini@linkedin.com> wrote:\n> \n>> Hey Vinod,\n>> \n>> So, I ran my application master directly from the CLI. I commented out the\n>> YARN-specific code. It runs fine without leaking memory.\n>> \n>> I then ran it from YARN, with all YARN-specific code commented it. It again\n>> ran fine.\n>> \n>> I then uncommented JUST my registerWithResourceManager call. It then fails\n>> with OOM after a few seconds. I call registerWithResourceManager, and then go\n>> into a while(true) { println(\"yeh\") sleep(1000) }. Doing this prints:\n>> \n>> yeh\n>> yeh\n>> yeh\n>> yeh\n>> yeh\n>> \n>> At which point, it dies, and, in the NodeManager,I see:\n>> \n>> 2011-09-21 13:24:51,036 WARN  monitor.ContainersMonitorImpl\n>> (ContainersMonitorImpl.java:isProcessTreeOverLimit(289)) - Process tree for\n>> container: container_1316626117280_0005_01_000001 has processes older than 1\n>> iteration running over the configured limit. Limit=2147483648, current usage =\n>> 2192773120\n>> 2011-09-21 13:24:51,037 WARN  monitor.ContainersMonitorImpl\n>> (ContainersMonitorImpl.java:run(453)) - Container\n>> [pid=23852,containerID=container_1316626117280_0005_01_000001] is running\n>> beyond memory-limits. Current usage : 2192773120bytes. Limit :\n>> 2147483648bytes. Killing container.\n>> Dump of the process-tree for container_1316626117280_0005_01_000001 :\n>> |- PID PPID PGRPID SESSID CMD_NAME USER_MODE_TIME(MILLIS) SYSTEM_TIME(MILLIS)\n>> VMEM_USAGE(BYTES) RSSMEM_USAGE(PAGES) FULL_CMD_LINE\n>> |- 23852 20570 23852 23852 (bash) 0 0 108638208 303 /bin/bash -c java -Xmx512M\n>> -cp './package/*' kafka.yarn.ApplicationMaster\n>> /home/criccomi/git/kafka-yarn/dist/kafka-streamer.tgz 5 1 1316626117280\n>> com.linkedin.TODO 1\n>> 1>/tmp/logs/application_1316626117280_0005/container_1316626117280_0005_01_000\n>> 001/stdout\n>> 2>/tmp/logs/application_1316626117280_0005/container_1316626117280_0005_01_000\n>> 001/stderr\n>> |- 23855 23852 23852 23852 (java) 81 4 2084134912 14772 java -Xmx512M -cp\n>> ./package/* kafka.yarn.ApplicationMaster\n>> /home/criccomi/git/kafka-yarn/dist/kafka-streamer.tgz 5 1 1316626117280\n>> com.linkedin.TODO 1\n>> 2011-09-21 13:24:51,037 INFO  monitor.ContainersMonitorImpl\n>> (ContainersMonitorImpl.java:run(463)) - Removed ProcessTree with root 23852\n>> \n>> Either something is leaking in YARN, or my registerWithResourceManager code\n>> (see below) is doing something funky.\n>> \n>> I'm trying to avoid going through all the pain of attaching a remote debugger.\n>> Presumably things aren't leaking in YARN, which means it's likely that I'm\n>> doing something wrong in my registration code.\n>> \n>> Incidentally, my NodeManager is running with 1000 megs. My application master\n>> memory is set to 2048, and my -Xmx setting is 512M\n>> \n>> Cheers,\n>> Chris\n>> ________________________________________\n>> From: Vinod Kumar Vavilapalli [vinodkv@hortonworks.com]\n>> Sent: Wednesday, September 21, 2011 11:52 AM\n>> To: mapreduce-dev@hadoop.apache.org\n>> Subject: Re: ApplicationMaster Memory Usage\n>> \n>> Actually MAPREDUCE-2998 is only related to MRV2, so that isn't related.\n>> \n>> Somehow, your JVM itself is taking so much of virtual memory. Are you\n>> loading some native libs?\n>> \n>> And how many containers have already been allocated by the time the AM\n>> crashes. May be you are accumulating some per-container data. You can try\n>> dumping heap vai hprof.\n>> \n>> +Vinod\n>> \n>> \n>> On Wed, Sep 21, 2011 at 11:21 PM, Chris Riccomini\n>> <criccomini@linkedin.com>wrote:\n>> \n>>> Hey Vinod,\n>>> \n>>> I svn up'd, and rebuilt. My application's task (container) now runs!\n>>> \n>>> Unfortunately, my application master eventually gets killed by the\n>>> NodeManager anyway, and I'm still not clear as to why. The AM is just\n>>> running a loop, asking for a container, and executing a command in the\n>>> container. It keeps doing this over and over again. After a few iterations,\n>>> it gets killed with something like:\n>>> \n>>> 2011-09-21 10:42:40,869 INFO  monitor.ContainersMonitorImpl\n>>> (ContainersMonitorImpl.java:run(402)) - Memory usage of ProcessTree 21666\n>>> for container-id container_1316626117280_0002_01_000001 : Virtual 2260938752\n>>> bytes, limit : 2147483648 bytes; Physical 77398016 bytes, limit -1 bytes\n>>> 2011-09-21 10:42:40,869 WARN  monitor.ContainersMonitorImpl\n>>> (ContainersMonitorImpl.java:isProcessTreeOverLimit(289)) - Process tree for\n>>> container: container_1316626117280_0002_01_000001 has processes older than 1\n>>> iteration running over the configured limit. Limit=2147483648, current usage\n>>> = 2260938752\n>>> 2011-09-21 10:42:40,870 WARN  monitor.ContainersMonitorImpl\n>>> (ContainersMonitorImpl.java:run(453)) - Container\n>>> [pid=21666,containerID=container_1316626117280_0002_01_000001] is running\n>>> beyond memory-limits. Current usage : 2260938752bytes. Limit :\n>>> 2147483648bytes. Killing container.\n>>> Dump of the process-tree for container_1316626117280_0002_01_000001 :\n>>>        |- PID PPID PGRPID SESSID CMD_NAME USER_MODE_TIME(MILLIS)\n>>> SYSTEM_TIME(MILLIS) VMEM_USAGE(BYTES) RSSMEM_USAGE(PAGES) FULL_CMD_LINE\n>>>        |- 21669 21666 21666 21666 (java) 105 4 2152300544 18593 java\n>>> -Xmx512M -cp ./package/* kafka.yarn.ApplicationMaster\n>>> /home/criccomi/git/kafka-yarn/dist/kafka-streamer.tgz 2 1 1316626117280\n>>> com.linkedin.TODO 1\n>>>       |- 21666 20570 21666 21666 (bash) 0 0 108638208 303 /bin/bash -c\n>>> java -Xmx512M -cp './package/*' kafka.yarn.ApplicationMaster\n>>> /home/criccomi/git/kafka-yarn/dist/kafka-streamer.tgz 2 1 1316626117280\n>>> com.linkedin.TODO 1\n>>> 1>/tmp/logs/application_1316626117280_0002/container_1316626117280_0002_01_00\n>>> 0001/stdout\n>>> 2>/tmp/logs/application_1316626117280_0002/container_1316626117280_0002_01_00\n>>> 0001/stderr\n>>> \n>>> 2011-09-21 10:42:40,870 INFO  monitor.ContainersMonitorImpl\n>>> (ContainersMonitorImpl.java:run(463)) - Removed ProcessTree with root 21666\n>>> \n>>> I don't think that my AM is leaking memory. Full code paste after the break\n>>> \n>>> 1. Do I need to release a container in my AM even if the AM receives it as\n>>> a finished container in the resource request response?\n>>> 2. Do I need to free any other resources after a resource request (e.g.\n>>> ResourceRequest, AllocateRequest, etc)?\n>>> \n>>> Cheers,\n>>> Chris\n>>> \n>>> \n>>> def main(args: Array[String]) {\n>>>   // YARN will always give our ApplicationMaster\n>>>   // the first four parameters as: <package> <app id> <attempt id>\n>>> <timestamp>\n>>>   val packagePath = args(0)\n>>>   val appId = args(1).toInt\n>>>   val attemptId = args(2).toInt\n>>>   val timestamp = args(3).toLong\n>>> \n>>>   // these are our application master's parameters\n>>>   val streamerClass = args(4)\n>>>   val tasks = args(5).toInt\n>>> \n>>>   // TODO log params here\n>>> \n>>>   // start the application master helper\n>>>   val conf = new Configuration\n>>>   val applicationMasterHelper = new ApplicationMasterHelper(appId,\n>>> attemptId, timestamp, conf)\n>>>     .registerWithResourceManager\n>>> \n>>>   // start and manage the slaves\n>>>   val noReleases = List[ContainerId]()\n>>>   var runningContainers = 0\n>>> \n>>>   // keep going forever\n>>>   while (true) {\n>>>     val nonRunningTasks = tasks - runningContainers\n>>>     val response =\n>>> applicationMasterHelper.sendResourceRequest(nonRunningTasks, noReleases)\n>>> \n>>>     response.getAllocatedContainers.foreach(container => {\n>>>       new ContainerExecutor(packagePath, container)\n>>>         .addCommand(\"java -Xmx256M -cp './package/*'\n>>> kafka.yarn.StreamingTask \" + streamerClass + \" \"\n>>>           + \"1>\" + ApplicationConstants.LOG_DIR_EXPANSION_VAR + \"/stdout \"\n>>>           + \"2>\" + ApplicationConstants.LOG_DIR_EXPANSION_VAR +\n>>> \"/stderr\").execute(conf)\n>>>     })\n>>> \n>>>     runningContainers += response.getAllocatedContainers.length\n>>>     runningContainers -= response.getCompletedContainersStatuses.length\n>>> \n>>>     Thread.sleep(1000)\n>>>   }\n>>> \n>>>   applicationMasterHelper.unregisterWithResourceManager(\"SUCCESS\")\n>>> }\n>>> \n>>> \n>>> class ApplicationMasterHelper(iAppId: Int, iAppAttemptId: Int, lTimestamp:\n>>> Long, conf: Configuration) {\n>>> val rpc = YarnRPC.create(conf)\n>>> val appId = Records.newRecord(classOf[ApplicationId])\n>>> val appAttemptId = Records.newRecord(classOf[ApplicationAttemptId])\n>>> val rmAddress =\n>>> NetUtils.createSocketAddr(conf.get(YarnConfiguration.RM_SCHEDULER_ADDRESS,\n>>> YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS))\n>>> val resourceManager = rpc.getProxy(classOf[AMRMProtocol], rmAddress,\n>>> conf).asInstanceOf[AMRMProtocol]\n>>> var requestId = 0\n>>> \n>>> appId.setClusterTimestamp(lTimestamp)\n>>> appId.setId(iAppId)\n>>> appAttemptId.setApplicationId(appId)\n>>> appAttemptId.setAttemptId(iAppAttemptId)\n>>> \n>>> def registerWithResourceManager(): ApplicationMasterHelper = {\n>>>   val req = Records.newRecord(classOf[RegisterApplicationMasterRequest])\n>>>   req.setApplicationAttemptId(appAttemptId)\n>>>   // TODO not sure why these are blank- This is how spark does it\n>>>   req.setHost(\"\")\n>>>   req.setRpcPort(1)\n>>>   req.setTrackingUrl(\"\")\n>>>   resourceManager.registerApplicationMaster(req)\n>>>   this\n>>> }\n>>> \n>>> def unregisterWithResourceManager(state: String): ApplicationMasterHelper\n>>> = {\n>>>   val finReq = Records.newRecord(classOf[FinishApplicationMasterRequest])\n>>>   finReq.setAppAttemptId(appAttemptId)\n>>>   finReq.setFinalState(state)\n>>>   resourceManager.finishApplicationMaster(finReq)\n>>>   this\n>>> }\n>>> \n>>> def sendResourceRequest(containers: Int, release: List[ContainerId]):\n>>> AMResponse = {\n>>>   // TODO will need to make this more flexible for hostname requests, etc\n>>>   val request = Records.newRecord(classOf[ResourceRequest])\n>>>   val pri = Records.newRecord(classOf[Priority])\n>>>   val capability = Records.newRecord(classOf[Resource])\n>>>   val req = Records.newRecord(classOf[AllocateRequest])\n>>>   request.setHostName(\"*\")\n>>>   request.setNumContainers(containers)\n>>>   pri.setPriority(1)\n>>>   request.setPriority(pri)\n>>>   capability.setMemory(128)\n>>>   request.setCapability(capability)\n>>>   req.setResponseId(requestId)\n>>>   req.setApplicationAttemptId(appAttemptId)\n>>>   req.addAllAsks(Lists.newArrayList(request))\n>>>   req.addAllReleases(release)\n>>>   requestId += 1\n>>>   // TODO we might want to return a list of container executors here\n>>> instead of AMResponses\n>>>   resourceManager.allocate(req).getAMResponse\n>>> }\n>>> }\n>>> \n>>> \n>>> ________________________________________\n>>> From: Vinod Kumar Vavilapalli [vinodkv@hortonworks.com]\n>>> Sent: Wednesday, September 21, 2011 10:08 AM\n>>> To: mapreduce-dev@hadoop.apache.org\n>>> Subject: Re: ApplicationMaster Memory Usage\n>>> \n>>> Yes, the process-dump clearly tells that this is MAPREDUCE-2998.\n>>> \n>>> +Vinod\n>>> (With a smirk to see his container-memory-monitoring code in action)\n>>> \n>>> \n>>> On Wed, Sep 21, 2011 at 10:26 PM, Arun C Murthy <acm@hortonworks.com>\n>>> wrote:\n>>> \n>>>> I'll bet you are hitting MR-2998.\n>>>> \n>>>> From the changelog:\n>>>> \n>>>>   MAPREDUCE-2998. Fixed a bug in TaskAttemptImpl which caused it to fork\n>>>> bin/mapred too many times. Contributed by Vinod K V.\n>>>> \n>>>> Arun\n>>>> \n>>>> On Sep 21, 2011, at 9:52 AM, Chris Riccomini wrote:\n>>>> \n>>>>> Hey Guys,\n>>>>> \n>>>>> My ApplicationMaster is being killed by the NodeManager because of\n>>> memory\n>>>> consumption, and I don't understand why. I'm using -Xmx512M, and setting\n>>> my\n>>>> resource request to 2048.\n>>>>> \n>>>>> \n>>>>>   .addCommand(\"java -Xmx512M -cp './package/*'\n>>>> kafka.yarn.ApplicationMaster \" ...\n>>>>> \n>>>>>   ...\n>>>>> \n>>>>>   private var memory = 2048\n>>>>> \n>>>>>   resource.setMemory(memory)\n>>>>>   containerCtx.setResource(resource)\n>>>>>   containerCtx.setCommands(cmds.toList)\n>>>>>   containerCtx.setLocalResources(Collections.singletonMap(\"package\",\n>>>> packageResource))\n>>>>>   appCtx.setApplicationId(appId)\n>>>>>   appCtx.setUser(user.getShortUserName)\n>>>>>   appCtx.setAMContainerSpec(containerCtx)\n>>>>>   request.setApplicationSubmissionContext(appCtx)\n>>>>>   applicationsManager.submitApplication(request)\n>>>>> \n>>>>> When this runs, I see (in my NodeManager's logs):\n>>>>> \n>>>>> \n>>>>> 2011-09-21 09:35:19,112 INFO  monitor.ContainersMonitorImpl\n>>>> (ContainersMonitorImpl.java:run(402)) - Memory usage of ProcessTree 28134\n>>>> for container-id container_1316559026783_0003_01_000001 : Virtual\n>>> 2260938752\n>>>> bytes, limit : 2147483648 bytes; Physical 71540736 bytes, limit -1 bytes\n>>>>> 2011-09-21 09:35:19,112 WARN  monitor.ContainersMonitorImpl\n>>>> (ContainersMonitorImpl.java:isProcessTreeOverLimit(289)) - Process tree\n>>> for\n>>>> container: container_1316559026783_0003_01_000001 has processes older\n>>> than 1\n>>>> iteration running over the configured limit. Limit=2147483648, current\n>>> usage\n>>>> = 2260938752\n>>>>> 2011-09-21 09:35:19,113 WARN  monitor.ContainersMonitorImpl\n>>>> (ContainersMonitorImpl.java:run(453)) - Container\n>>>> [pid=28134,containerID=container_1316559026783_0003_01_000001] is running\n>>>> beyond memory-limits. Current usage : 2260938752bytes. Limit :\n>>>> 2147483648bytes. Killing container.\n>>>>> Dump of the process-tree for container_1316559026783_0003_01_000001 :\n>>>>>      |- PID PPID PGRPID SESSID CMD_NAME USER_MODE_TIME(MILLIS)\n>>>> SYSTEM_TIME(MILLIS) VMEM_USAGE(BYTES) RSSMEM_USAGE(PAGES) FULL_CMD_LINE\n>>>>>      |- 28134 25886 28134 28134 (bash) 0 0 108638208 303 /bin/bash -c\n>>>> java -Xmx512M -cp './package/*' kafka.yarn.ApplicationMaster 3 1\n>>>> 1316559026783 com.linkedin.TODO 1\n>>>> \n>>> 1>/tmp/logs/application_1316559026783_0003/container_1316559026783_0003_01_00\n>>> 0001/stdout\n>>>> \n>>> 2>/tmp/logs/application_1316559026783_0003/container_1316559026783_0003_01_00\n>>> 0001/stderr\n>>>>>      |- 28137 28134 28134 28134 (java) 92 3 2152300544 17163 java\n>>>> -Xmx512M -cp ./package/* kafka.yarn.ApplicationMaster 3 1 1316559026783\n>>>> com.linkedin.TODO 1\n>>>>> \n>>>>> 2011-09-21 09:35:19,113 INFO  monitor.ContainersMonitorImpl\n>>>> (ContainersMonitorImpl.java:run(463)) - Removed ProcessTree with root\n>>> 28134\n>>>>> \n>>>>> It appears that YARN is honoring my 2048 command, yet my process is\n>>>> somehow taking 2260938752 bytes. I don't think that I'm using nearly that\n>>>> much in permgen, and my heap is limited to 512. I don't have any JNI\n>>> stuff\n>>>> running (that I know of), so it's unclear to me what's going on here. The\n>>>> only thing that I can think of is that Java's Runtime exec is forking,\n>>> and\n>>>> copying its entire JVM memory footprint for the fork.\n>>>>> \n>>>>> Has anyone seen this? Am I doing something dumb?\n>>>>> \n>>>>> Thanks!\n>>>>> Chris\n>>>> \n>>>> \n>>> \n> \n",
        "duedate": null,
        "environment": null,
        "fixVersions": [],
        "issuelinks": [{
            "id": "12448669",
            "inwardIssue": {
                "fields": {
                    "issuetype": {
                        "avatarId": 21133,
                        "description": "A problem which impairs or prevents the functions of the product.",
                        "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
                        "id": "1",
                        "name": "Bug",
                        "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
                        "subtask": false
                    },
                    "priority": {
                        "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/blocker.svg",
                        "id": "1",
                        "name": "Blocker",
                        "self": "https://issues.apache.org/jira/rest/api/2/priority/1"
                    },
                    "status": {
                        "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
                        "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
                        "id": "6",
                        "name": "Closed",
                        "self": "https://issues.apache.org/jira/rest/api/2/status/6",
                        "statusCategory": {
                            "colorName": "green",
                            "id": 3,
                            "key": "done",
                            "name": "Done",
                            "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3"
                        }
                    },
                    "summary": "Should set MALLOC_ARENA_MAX for all YARN daemons and AMs/Containers"
                },
                "id": "12524237",
                "key": "MAPREDUCE-3068",
                "self": "https://issues.apache.org/jira/rest/api/2/issue/12524237"
            },
            "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12448669",
            "type": {
                "id": "12310000",
                "inward": "is duplicated by",
                "name": "Duplicate",
                "outward": "duplicates",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310000"
            }
        }],
        "issuetype": {
            "avatarId": 21133,
            "description": "A problem which impairs or prevents the functions of the product.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
            "id": "1",
            "name": "Bug",
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
            "subtask": false
        },
        "labels": [],
        "lastViewed": null,
        "priority": {
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "id": "3",
            "name": "Major",
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3"
        },
        "progress": {
            "progress": 0,
            "total": 0
        },
        "project": {
            "avatarUrls": {
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12310941&avatarId=10096",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12310941&avatarId=10096",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12310941&avatarId=10096",
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12310941&avatarId=10096"
            },
            "id": "12310941",
            "key": "MAPREDUCE",
            "name": "Hadoop Map/Reduce",
            "projectCategory": {
                "description": "Scalable Distributed Computing",
                "id": "10292",
                "name": "Hadoop",
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/10292"
            },
            "self": "https://issues.apache.org/jira/rest/api/2/project/12310941"
        },
        "reporter": {
            "active": true,
            "avatarUrls": {
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=criccomini&avatarId=27141",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=criccomini&avatarId=27141",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=criccomini&avatarId=27141",
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=criccomini&avatarId=27141"
            },
            "displayName": "Chris Riccomini",
            "key": "criccomini",
            "name": "criccomini",
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=criccomini",
            "timeZone": "America/Los_Angeles"
        },
        "resolution": {
            "description": "The problem is a duplicate of an existing issue.",
            "id": "3",
            "name": "Duplicate",
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/3"
        },
        "resolutiondate": "2015-11-13T18:51:15.000+0000",
        "status": {
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "id": "5",
            "name": "Resolved",
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "statusCategory": {
                "colorName": "green",
                "id": 3,
                "key": "done",
                "name": "Done",
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3"
            }
        },
        "subtasks": [],
        "summary": "ApplicationMaster killed by NodeManager due to excessive virtual memory consumption",
        "timeestimate": null,
        "timeoriginalestimate": null,
        "timespent": null,
        "updated": "2015-11-13T18:51:15.000+0000",
        "versions": [{
            "archived": false,
            "description": "hadoop-2.0.0-alpha release",
            "id": "12320354",
            "name": "2.0.0-alpha",
            "releaseDate": "2012-05-23",
            "released": true,
            "self": "https://issues.apache.org/jira/rest/api/2/version/12320354"
        }],
        "votes": {
            "hasVoted": false,
            "self": "https://issues.apache.org/jira/rest/api/2/issue/MAPREDUCE-3065/votes",
            "votes": 0
        },
        "watches": {
            "isWatching": false,
            "self": "https://issues.apache.org/jira/rest/api/2/issue/MAPREDUCE-3065/watchers",
            "watchCount": 2
        },
        "workratio": -1
    },
    "id": "12523922",
    "key": "MAPREDUCE-3065",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/12523922"
}