{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "fields": {
        "aggregateprogress": {
            "progress": 0,
            "total": 0
        },
        "aggregatetimeestimate": null,
        "aggregatetimeoriginalestimate": null,
        "aggregatetimespent": null,
        "assignee": null,
        "components": [],
        "created": "2017-07-26T04:05:57.000+0000",
        "creator": {
            "active": true,
            "avatarUrls": {
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452",
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452"
            },
            "displayName": "NING DING",
            "key": "iceberg565",
            "name": "iceberg565",
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=iceberg565",
            "timeZone": "Asia/Shanghai"
        },
        "customfield_10010": null,
        "customfield_12310191": null,
        "customfield_12310192": null,
        "customfield_12310220": "2017-07-26T16:19:04.607+0000",
        "customfield_12310222": null,
        "customfield_12310230": null,
        "customfield_12310250": null,
        "customfield_12310290": null,
        "customfield_12310291": null,
        "customfield_12310300": null,
        "customfield_12310310": "0.0",
        "customfield_12310320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12310920": "9223372036854775807",
        "customfield_12310921": null,
        "customfield_12311020": null,
        "customfield_12311024": null,
        "customfield_12311120": null,
        "customfield_12311820": "0|i3i0rz:",
        "customfield_12312022": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "customfield_12312026": null,
        "customfield_12312220": null,
        "customfield_12312320": null,
        "customfield_12312321": null,
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312324": null,
        "customfield_12312325": null,
        "customfield_12312326": null,
        "customfield_12312327": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312330": null,
        "customfield_12312331": null,
        "customfield_12312332": null,
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12312335": null,
        "customfield_12312336": null,
        "customfield_12312337": null,
        "customfield_12312338": null,
        "customfield_12312339": null,
        "customfield_12312340": null,
        "customfield_12312341": null,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Jul 26 16:19:04 UTC 2017",
        "customfield_12312720": null,
        "customfield_12312823": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "customfield_12312923": null,
        "customfield_12313422": "false",
        "customfield_12313520": null,
        "description": "The description of parameter mapreduce.job.speculative.slowtaskthreshold is as below.\n{code:xml}\n<property>\n  <name>mapreduce.job.speculative.slowtaskthreshold<\/name>\n  <value>1.0<\/value>\n  <description>The number of standard deviations by which a task's\n  ave progress-rates must be lower than the average of all running tasks'\n  for the task to be considered too slow.\n  <\/description>\n<\/property>\n{code}\n\nBut from the source code I find it has no effect for starting speculative task.\nThe call stack is as below.\nDefaultSpeculator.speculationValue -> StartEndTimesBase.thresholdRuntime -> DataStatistics.outlier\n{code:title=DefaultSpeculator.java|borderStyle=solid}\n  private TaskItem speculationValue(TaskId taskID, long now) {\n    TaskItem taskItem = new TaskItem();\n    Job job = context.getJob(taskID.getJobId());\n    Task task = job.getTask(taskID);\n    Map<TaskAttemptId, TaskAttempt> attempts = task.getAttempts();\n    long acceptableRuntime = Long.MIN_VALUE;\n    long speculationValue = Long.MIN_VALUE;\n\n    if (!mayHaveSpeculated.contains(taskID)) {\n      acceptableRuntime = estimator.thresholdRuntime(taskID);\n      if (acceptableRuntime == Long.MAX_VALUE) {\n        taskItem.setSpeculationValue(ON_SCHEDULE);\n        return taskItem;\n      }\n    }\n   ...\n  }\n{code}\n{code:title=StartEndTimesBase.java|borderStyle=solid}\n  public long thresholdRuntime(TaskId taskID) {\n    JobId jobID = taskID.getJobId();\n    Job job = context.getJob(jobID);\n\n    TaskType type = taskID.getTaskType();\n\n    DataStatistics statistics\n        = dataStatisticsForTask(taskID);\n\n    int completedTasksOfType\n        = type == TaskType.MAP\n            ? job.getCompletedMaps() : job.getCompletedReduces();\n\n    int totalTasksOfType\n        = type == TaskType.MAP\n            ? job.getTotalMaps() : job.getTotalReduces();\n\n    if (completedTasksOfType < MINIMUM_COMPLETE_NUMBER_TO_SPECULATE\n        || (((float)completedTasksOfType) / totalTasksOfType)\n              < MINIMUM_COMPLETE_PROPORTION_TO_SPECULATE ) {\n      return Long.MAX_VALUE;\n    }\n\n    long result =  statistics == null\n        ? Long.MAX_VALUE\n        : (long)statistics.outlier(slowTaskRelativeTresholds.get(job));\n    return result;\n  }\n{code}\n{code:title=DataStatistics.java|borderStyle=solid}\n  public synchronized double outlier(float sigma) {\n    if (count != 0.0) {\n      return mean() + std() * sigma;\n    }\n\n    return 0.0;\n  }\n{code}\n\nThe StartEndTimesBase.contextualize read mapreduce.job.speculative.slowtaskthreshold parameter value, then use it as outlier method parameter sigma value.\n{code:title=StartEndTimesBase.java|borderStyle=solid}\n  public void contextualize(Configuration conf, AppContext context) {\n    this.context = context;\n\n    Map<JobId, Job> allJobs = context.getAllJobs();\n\n    for (Map.Entry<JobId, Job> entry : allJobs.entrySet()) {\n      final Job job = entry.getValue();\n      mapperStatistics.put(job, new DataStatistics());\n      reducerStatistics.put(job, new DataStatistics());\n      slowTaskRelativeTresholds.put\n          (job, conf.getFloat(MRJobConfig.SPECULATIVE_SLOWTASK_THRESHOLD,1.0f));\n    }\n  }\n{code}\n\nI think the outlier return value is hard to be Long.MAX_VALUE no matter what the mapreduce.job.speculative.slowtaskthreshold parameter value is.\nThen it cannot affect the return value of DefaultSpeculator.speculationValue method.\nThen I run a test for this parameter. Test source code is as below.\n\n{code:title=TestSpeculativeTask.java|borderStyle=solid}\npackage test.speculation;\n\nimport org.apache.hadoop.conf.Configuration;\nimport org.apache.hadoop.conf.Configured;\nimport org.apache.hadoop.fs.Path;\nimport org.apache.hadoop.io.NullWritable;\nimport org.apache.hadoop.io.Text;\nimport org.apache.hadoop.mapreduce.Job;\nimport org.apache.hadoop.mapreduce.lib.input.FileInputFormat;\nimport org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;\nimport org.apache.hadoop.mapreduce.lib.output.TextOutputFormat;\nimport org.apache.hadoop.util.Tool;\nimport org.apache.hadoop.util.ToolRunner;\n\npublic class TestSpeculativeTask extends Configured implements Tool {\n\n  public TestSpeculativeTask() {\n\n  }\n\n  public int run(String[] args) throws Exception {\n    Configuration conf = getConf();\n    Job job = Job.getInstance(conf);\n    FileInputFormat.setInputPaths(job, args[0]);\n    job.setMapperClass(SpeculativeTestMapper.class);\n    job.setNumReduceTasks(0);\n    job.setJarByClass(SpeculativeTestMapper.class);\n    Path output = new Path(args[1]);\n    FileOutputFormat.setOutputPath(job, output);\n    job.setOutputFormatClass(TextOutputFormat.class);\n    job.setOutputKeyClass(Text.class);\n    job.setOutputValueClass(NullWritable.class);\n    job.waitForCompletion(true);\n    return 0;\n  }\n\n  public static void main(String[] args) throws Exception {\n    int res =\n        ToolRunner.run(new Configuration(), new TestSpeculativeTask(), args);\n    System.exit(res);\n  }\n}\n{code}\n\n{code:title=SpeculativeTestMapper.java|borderStyle=solid}\npackage test.speculation;\n\nimport java.io.IOException;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.hadoop.io.NullWritable;\nimport org.apache.hadoop.io.Text;\nimport org.apache.hadoop.mapreduce.Mapper;\n\npublic class SpeculativeTestMapper<K> extends\n    Mapper<K, Text, Text, NullWritable> {\n  private Log log = LogFactory.getLog(this.getClass());\n  public void map(K key, Text value, Context context) throws IOException,\n      InterruptedException {\n    String text = value.toString();\n    log.info(\"processing \" + text);\n    try {\n      Thread.sleep(60 * 1000);\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n    context.write(new Text(text), NullWritable.get());\n  }\n}\n{code}\nThe input path has 10 files in hdfs. Only one file has 10 lines and other files has one line.\nThe mapper task processing that file has 10 lines must be slow and cause speculative task attempt.\nThe test result is the speculative task start time has no obviouse difference for mapreduce.job.speculative.slowtaskthreshold=1 and mapreduce.job.speculative.slowtaskthreshold=10.\n\nIf any one find the same issue. Or I misunderstand mapreduce.job.speculative.slowtaskthreshold parameter.\n",
        "duedate": null,
        "environment": null,
        "fixVersions": [],
        "issuelinks": [],
        "issuetype": {
            "avatarId": 21133,
            "description": "A problem which impairs or prevents the functions of the product.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
            "id": "1",
            "name": "Bug",
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
            "subtask": false
        },
        "labels": [],
        "lastViewed": null,
        "priority": {
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
            "id": "4",
            "name": "Minor",
            "self": "https://issues.apache.org/jira/rest/api/2/priority/4"
        },
        "progress": {
            "progress": 0,
            "total": 0
        },
        "project": {
            "avatarUrls": {
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12310941&avatarId=10096",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12310941&avatarId=10096",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12310941&avatarId=10096",
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12310941&avatarId=10096"
            },
            "id": "12310941",
            "key": "MAPREDUCE",
            "name": "Hadoop Map/Reduce",
            "projectCategory": {
                "description": "Scalable Distributed Computing",
                "id": "10292",
                "name": "Hadoop",
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/10292"
            },
            "self": "https://issues.apache.org/jira/rest/api/2/project/12310941"
        },
        "reporter": {
            "active": true,
            "avatarUrls": {
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452",
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452"
            },
            "displayName": "NING DING",
            "key": "iceberg565",
            "name": "iceberg565",
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=iceberg565",
            "timeZone": "Asia/Shanghai"
        },
        "resolution": null,
        "resolutiondate": null,
        "status": {
            "description": "The issue is open and ready for the assignee to start work on it.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
            "id": "1",
            "name": "Open",
            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
            "statusCategory": {
                "colorName": "blue-gray",
                "id": 2,
                "key": "new",
                "name": "To Do",
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2"
            }
        },
        "subtasks": [],
        "summary": "Cannot find the effect of mapreduce.job.speculative.slowtaskthreshold parameter",
        "timeestimate": null,
        "timeoriginalestimate": null,
        "timespent": null,
        "updated": "2017-07-26T16:19:04.000+0000",
        "versions": [{
            "archived": false,
            "description": "2.7.1 release",
            "id": "12331978",
            "name": "2.7.1",
            "releaseDate": "2015-07-06",
            "released": true,
            "self": "https://issues.apache.org/jira/rest/api/2/version/12331978"
        }],
        "votes": {
            "hasVoted": false,
            "self": "https://issues.apache.org/jira/rest/api/2/issue/MAPREDUCE-6920/votes",
            "votes": 0
        },
        "watches": {
            "isWatching": false,
            "self": "https://issues.apache.org/jira/rest/api/2/issue/MAPREDUCE-6920/watchers",
            "watchCount": 2
        },
        "workratio": -1
    },
    "id": "13090115",
    "key": "MAPREDUCE-6920",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13090115"
}