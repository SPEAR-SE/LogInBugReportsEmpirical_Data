{"expand":"renderedFields,names,schema,operations,editmeta,changelog,versionedRepresentations","id":"12408665","self":"https://issues.apache.org/jira/rest/api/2/issue/12408665","key":"HIVE-65","fields":{"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype","name":"Bug","subtask":false,"avatarId":21133},"timespent":null,"project":{"self":"https://issues.apache.org/jira/rest/api/2/project/12310843","id":"12310843","key":"HIVE","name":"Hive","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/projectavatar?pid=12310843&avatarId=11935","24x24":"https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12310843&avatarId=11935","16x16":"https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12310843&avatarId=11935","32x32":"https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12310843&avatarId=11935"},"projectCategory":{"self":"https://issues.apache.org/jira/rest/api/2/projectCategory/10292","id":"10292","description":"Scalable Distributed Computing","name":"Hadoop"}},"fixVersions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12313637","id":"12313637","description":"released","name":"0.3.0","archived":false,"released":true,"releaseDate":"2009-04-30"}],"aggregatetimespent":null,"resolution":{"self":"https://issues.apache.org/jira/rest/api/2/resolution/1","id":"1","description":"A fix for this issue is checked into the tree and tested.","name":"Fixed"},"customfield_12312322":null,"customfield_12310220":"2008-12-01T19:59:13.053+0000","customfield_12312520":null,"customfield_12312323":null,"customfield_12312521":"Wed Jul 22 23:59:28 UTC 2009","customfield_12310420":"73808","customfield_12312320":null,"customfield_12310222":"1_*:*_1_*:*_21360666942_*|*_5_*:*_1_*:*_0","customfield_12312321":null,"resolutiondate":"2009-07-22T23:59:28.109+0000","workratio":-1,"customfield_12312328":null,"customfield_12312329":null,"customfield_12312923":null,"customfield_12312326":null,"customfield_12312920":null,"customfield_12310300":null,"customfield_12312327":null,"customfield_12312921":null,"customfield_12312324":null,"customfield_12312720":null,"customfield_12312325":null,"lastViewed":null,"watches":{"self":"https://issues.apache.org/jira/rest/api/2/issue/HIVE-65/watchers","watchCount":1,"isWatching":false},"created":"2008-11-17T18:28:21.167+0000","customfield_12310192":"HIVE-65. Rewrite typechecking to use the walker interface and add Resolvers to UDF and UDAF to support proper implicit casting in a manner similar to other RDBMSs. (athusoo)","customfield_12310191":[{"self":"https://issues.apache.org/jira/rest/api/2/customFieldOption/10343","value":"Reviewed","id":"10343"}],"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/2","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/critical.svg","name":"Critical","id":"2"},"labels":[],"customfield_12312333":null,"customfield_12310230":null,"customfield_12312334":null,"customfield_12313422":"false","customfield_12310310":"3.0","customfield_12312331":null,"customfield_12312332":null,"timeestimate":null,"aggregatetimeoriginalestimate":null,"customfield_12311120":null,"customfield_12312330":null,"versions":[],"issuelinks":[{"id":"12322721","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12322721","type":{"id":"10032","name":"Blocker","inward":"is blocked by","outward":"blocks","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/10032"},"inwardIssue":{"id":"12410943","key":"HIVE-186","self":"https://issues.apache.org/jira/rest/api/2/issue/12410943","fields":{"summary":"Refactor code to use a single graph, nodeprocessor, dispatcher and rule abstraction","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Done"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.svg","name":"Major","id":"3"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/4","id":"4","description":"An improvement or enhancement to an existing feature or task.","iconUrl":"https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype","name":"Improvement","subtask":false,"avatarId":21140}}}}],"customfield_12312339":null,"assignee":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=athusoo","name":"athusoo","key":"athusoo","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ashish Thusoo","active":true,"timeZone":"Etc/UTC"},"customfield_12312337":null,"customfield_12312338":null,"updated":"2011-12-17T00:08:37.812+0000","customfield_12312335":null,"customfield_12312336":null,"status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Done"}},"components":[{"self":"https://issues.apache.org/jira/rest/api/2/component/12312586","id":"12312586","name":"Query Processor","description":"Tracks issues dealing with query processing."}],"timeoriginalestimate":null,"description":"For a dynamic serde table that has a bigint column, implict conversion from int to bigint seems to be broken. I have not verified this for other tables.","customfield_10010":null,"timetracking":{},"customfield_12312026":null,"customfield_12312023":null,"customfield_12310320":null,"customfield_12312024":null,"customfield_12312340":null,"attachment":[{"self":"https://issues.apache.org/jira/rest/api/2/attachment/12398546","id":"12398546","filename":"patch-65_2.txt","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=athusoo","name":"athusoo","key":"athusoo","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ashish Thusoo","active":true,"timeZone":"Etc/UTC"},"created":"2009-01-23T11:33:25.710+0000","size":614274,"mimeType":"text/plain","content":"https://issues.apache.org/jira/secure/attachment/12398546/patch-65_2.txt"},{"self":"https://issues.apache.org/jira/rest/api/2/attachment/12398622","id":"12398622","filename":"patch-65_3.txt","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=athusoo","name":"athusoo","key":"athusoo","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ashish Thusoo","active":true,"timeZone":"Etc/UTC"},"created":"2009-01-24T01:07:13.976+0000","size":625731,"mimeType":"text/plain","content":"https://issues.apache.org/jira/secure/attachment/12398622/patch-65_3.txt"},{"self":"https://issues.apache.org/jira/rest/api/2/attachment/12398012","id":"12398012","filename":"patch-65.txt","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=athusoo","name":"athusoo","key":"athusoo","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ashish Thusoo","active":true,"timeZone":"Etc/UTC"},"created":"2009-01-15T21:11:30.911+0000","size":592587,"mimeType":"text/plain","content":"https://issues.apache.org/jira/secure/attachment/12398012/patch-65.txt"}],"aggregatetimeestimate":null,"customfield_12312341":null,"customfield_12312220":null,"customfield_12312022":null,"customfield_12310921":null,"customfield_12310920":"121887","customfield_12312823":null,"summary":"Implict conversion from integer to long broken for Dynamic Serde tables","creator":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=athusoo","name":"athusoo","key":"athusoo","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ashish Thusoo","active":true,"timeZone":"Etc/UTC"},"subtasks":[],"customfield_12310291":null,"reporter":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=athusoo","name":"athusoo","key":"athusoo","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ashish Thusoo","active":true,"timeZone":"Etc/UTC"},"customfield_12310290":null,"aggregateprogress":{"progress":0,"total":0},"customfield_12311024":null,"environment":null,"customfield_12313520":null,"customfield_12311020":null,"duedate":null,"customfield_12310250":null,"progress":{"progress":0,"total":0},"comment":{"comments":[{"self":"https://issues.apache.org/jira/rest/api/2/issue/12408665/comment/12648230","id":"12648230","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=athusoo","name":"athusoo","key":"athusoo","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ashish Thusoo","active":true,"timeZone":"Etc/UTC"},"body":"Test case is as follows:\n\nCREATE TABLE implicit_test1(a BIGINT, b STRING) ROW FORMAT SERDE 'org.apache.hadoop.hive.serde2.dynamic_type.DynamicSerDe' WITH SERDEPROPERTIES('serialization.format'= 'org.apache.hadoop.hive.serde2.thrift.TCTLSeparatedProtocol') STORED AS TEXTFILE;\n\n\nSELECT implicit_test1.*\nFROM implicit_test1\nWHERE implicit_test1.a <> 0;\n\n\nFails to do implicit conversion in the predicate implicit_test1.a <> 0 ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=athusoo","name":"athusoo","key":"athusoo","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ashish Thusoo","active":true,"timeZone":"Etc/UTC"},"created":"2008-11-17T18:29:23.066+0000","updated":"2008-11-17T18:29:23.066+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12408665/comment/12652111","id":"12652111","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=athusoo","name":"athusoo","key":"athusoo","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ashish Thusoo","active":true,"timeZone":"Etc/UTC"},"body":"Zheng, I was actually fixing this. I have a partial fix ready for this. One major problem with this is the fact that the implict conversion stuff is broken because of circular dependencies in the implict conversion graph (this should be a tree) when string to number types are involved..","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=athusoo","name":"athusoo","key":"athusoo","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ashish Thusoo","active":true,"timeZone":"Etc/UTC"},"created":"2008-12-01T19:32:33.666+0000","updated":"2008-12-01T19:32:33.666+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12408665/comment/12652133","id":"12652133","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=zshao","name":"zshao","key":"zshao","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=zshao&avatarId=14358","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=zshao&avatarId=14358","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=zshao&avatarId=14358","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=zshao&avatarId=14358"},"displayName":"Zheng Shao","active":true,"timeZone":"America/Los_Angeles"},"body":"Yep. The problem with this test case is an ambiguous call: evaluate(String, Number), evaluate(Number, String), and evaluate(Long, Long) all fit with one implicit conversion.\n\nI think we have to disallow the circular conversion.\n\nThis is what we discussed on the mailing list long time ago (This disallows number -> string implicit conversion)\nString -> byte -> int -> long -> double\nint -> float -> double\n\nIs this your plan for the fix?\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=zshao","name":"zshao","key":"zshao","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=zshao&avatarId=14358","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=zshao&avatarId=14358","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=zshao&avatarId=14358","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=zshao&avatarId=14358"},"displayName":"Zheng Shao","active":true,"timeZone":"America/Los_Angeles"},"created":"2008-12-01T19:59:13.053+0000","updated":"2008-12-01T19:59:13.053+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12408665/comment/12652141","id":"12652141","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=athusoo","name":"athusoo","key":"athusoo","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ashish Thusoo","active":true,"timeZone":"Etc/UTC"},"body":"yes.\n\nbasically what I have done is move string to be at the bottom of the hierarchy and disallow the implicit conversion from number to string and some of the tests fail because of that as we need to change them to do explicit conversion now.\n\nOn looking at some of the test cases that fail, I think it would make sense to convert from various types to strings as well, though I had thought otherwise in the discussion that we had originally on the email thread. We have actually some queries in our tests that do that .e.g\n\nconcat('My total: ', sum(t.c))\n\nA user could do that very easily to generate reporting strings with that kind of a sql. Without implict conversion, they would have to write a cast operator.\n\nIn light of that, I think we should revisit the decisions that we made.\n\nThoughts?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=athusoo","name":"athusoo","key":"athusoo","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ashish Thusoo","active":true,"timeZone":"Etc/UTC"},"created":"2008-12-01T20:26:16.567+0000","updated":"2008-12-01T20:26:16.567+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12408665/comment/12652182","id":"12652182","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jsensarma","name":"jsensarma","key":"jsensarma","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Joydeep Sen Sarma","active":true,"timeZone":"Asia/Kolkata"},"body":"if u can go both ways (string -> number and number -> string) - which way would u go? any rules we would come up with (perhaps based on context etc.) would become complicated. mysql does something even simpler than we proposed and people seem ok with that ..\n\nregarding the concat example - can't we make the function polymorphic? concat can take responsibilty for converting everything to string. ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jsensarma","name":"jsensarma","key":"jsensarma","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Joydeep Sen Sarma","active":true,"timeZone":"Asia/Kolkata"},"created":"2008-12-01T22:12:53.244+0000","updated":"2008-12-01T22:12:53.244+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12408665/comment/12652192","id":"12652192","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=athusoo","name":"athusoo","key":"athusoo","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ashish Thusoo","active":true,"timeZone":"Etc/UTC"},"body":"Actually mysql supports implicit conversions in both directions and that is what got me thinking that perhaps we should also be supporting both.\n\nhttp://dev.mysql.com/doc/refman/5.0/en/type-conversion.html\n\nIf we go the polymorphism route we would have to be very careful while adding UDFs. The UDF writers will have to really understand how for implicit conversion they have to implement functions with different signatures and that would just make it that much harder for them to write UDFs that can take advantage of implicit conversion. In fact polymorphism in the comparison function is the reason why we are hitting this problem in the\nfirst place. \n\n\nThe problem with going both ways is truly the one that caused us a lot of pain initially. However, that does not get solved by restricting the conversion possibilities. If for example we have a udf that takes two forms:\n\na) evaluate(string, string, int)\nb) evaluate(int, string, string)\n\nthen even if we only allow string to be converted to int and not vice versa we have an ambiguous match for\n\nevaluate(1, 'abc', 2)\n\nand we would not know which one to pick. This is what I mean by polymorphism causing these issues. The comparison functions are\npolymorphic and they are the ones that lead to the problem of ambiguity.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=athusoo","name":"athusoo","key":"athusoo","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ashish Thusoo","active":true,"timeZone":"Etc/UTC"},"created":"2008-12-01T22:55:42.329+0000","updated":"2008-12-01T22:55:42.329+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12408665/comment/12652332","id":"12652332","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=zshao","name":"zshao","key":"zshao","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=zshao&avatarId=14358","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=zshao&avatarId=14358","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=zshao&avatarId=14358","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=zshao&avatarId=14358"},"displayName":"Zheng Shao","active":true,"timeZone":"America/Los_Angeles"},"body":"> a) evaluate(string, string, int)\n> b) evaluate(int, string, string)\n\nThis problem even happens for strict-typed languages (replace string with double). So I don't think this is something we need to fix.\n\n\nIf we agree in most cases people convert string -> numeric, then all numeric->string can be done by udf itself through polymorphism.\nI think this is much cleaner than circular conversion.\n\nI am +1 to stick to the original solution (and leave the author of concat to implement Number->String conversion).\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=zshao","name":"zshao","key":"zshao","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=zshao&avatarId=14358","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=zshao&avatarId=14358","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=zshao&avatarId=14358","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=zshao&avatarId=14358"},"displayName":"Zheng Shao","active":true,"timeZone":"America/Los_Angeles"},"created":"2008-12-02T10:31:49.167+0000","updated":"2008-12-02T10:31:49.167+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12408665/comment/12652341","id":"12652341","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=athusoo","name":"athusoo","key":"athusoo","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ashish Thusoo","active":true,"timeZone":"Etc/UTC"},"body":"I am not sure what you mean by saying that the problem also happens with strict-typed languages. Can you elaborate?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=athusoo","name":"athusoo","key":"athusoo","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ashish Thusoo","active":true,"timeZone":"Etc/UTC"},"created":"2008-12-02T11:42:27.312+0000","updated":"2008-12-02T11:42:27.312+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12408665/comment/12652342","id":"12652342","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=zshao","name":"zshao","key":"zshao","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=zshao&avatarId=14358","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=zshao&avatarId=14358","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=zshao&avatarId=14358","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=zshao&avatarId=14358"},"displayName":"Zheng Shao","active":true,"timeZone":"America/Los_Angeles"},"body":"I mean, strict-typed languages will have ambiguity if the user calls evaluate(int, double, int), while there are 2 overloaded implementations: evaluate(double, double, int) and evaluate(int, double, double).\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=zshao","name":"zshao","key":"zshao","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=zshao&avatarId=14358","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=zshao&avatarId=14358","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=zshao&avatarId=14358","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=zshao&avatarId=14358"},"displayName":"Zheng Shao","active":true,"timeZone":"America/Los_Angeles"},"created":"2008-12-02T11:44:47.232+0000","updated":"2008-12-02T11:44:47.232+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12408665/comment/12652681","id":"12652681","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=zshao","name":"zshao","key":"zshao","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=zshao&avatarId=14358","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=zshao&avatarId=14358","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=zshao&avatarId=14358","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=zshao&avatarId=14358"},"displayName":"Zheng Shao","active":true,"timeZone":"America/Los_Angeles"},"body":"Namit's experiment with Oracle shows Oracle outputs ambiguity if UDF has both evaluate(double, double) and evaluate(string,string), and users calls udf(double, string).\n\nLet's stick with the following implicit conversion hierarchy and special-case comparison operators (they will prefer evaluate(double, double) to evaluate(string,string)):\nbyte -> short -> int -> long -> float -> double -> string, string -> double\n\nIn order to allow the special case, we can add a tag to the methods. If there are multiple methods with the same number of implicit conversions, then we choose the one with the maximum tag (if there are still many then we say ambiguity).\n\nThe reason that I think long -> float should be allowed is http://java.sun.com/docs/books/jls/third_edition/html/conversions.html#25214 This of course also simplify the code since it's a single line instead of a DAG.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=zshao","name":"zshao","key":"zshao","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=zshao&avatarId=14358","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=zshao&avatarId=14358","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=zshao&avatarId=14358","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=zshao&avatarId=14358"},"displayName":"Zheng Shao","active":true,"timeZone":"America/Los_Angeles"},"created":"2008-12-03T04:53:09.945+0000","updated":"2008-12-03T04:53:09.945+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12408665/comment/12652683","id":"12652683","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=zshao","name":"zshao","key":"zshao","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=zshao&avatarId=14358","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=zshao&avatarId=14358","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=zshao&avatarId=14358","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=zshao&avatarId=14358"},"displayName":"Zheng Shao","active":true,"timeZone":"America/Los_Angeles"},"body":"By using tag, we can get rid of the current hack (the evaluate(String, Number) and evaluate(Number, String) methods in the parent class) which caused the problem in this issue.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=zshao","name":"zshao","key":"zshao","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=zshao&avatarId=14358","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=zshao&avatarId=14358","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=zshao&avatarId=14358","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=zshao&avatarId=14358"},"displayName":"Zheng Shao","active":true,"timeZone":"America/Los_Angeles"},"created":"2008-12-03T04:57:10.281+0000","updated":"2008-12-03T04:57:10.281+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12408665/comment/12652988","id":"12652988","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=athusoo","name":"athusoo","key":"athusoo","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ashish Thusoo","active":true,"timeZone":"Etc/UTC"},"body":"I guess the following outlines how conversions are done for comparison operators for mysql\n\nhttp://dev.mysql.com/doc/refman/5.0/en/type-conversion.html\n\nI think we should just follow that for comparisons.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=athusoo","name":"athusoo","key":"athusoo","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ashish Thusoo","active":true,"timeZone":"Etc/UTC"},"created":"2008-12-03T21:46:53.863+0000","updated":"2008-12-03T21:46:53.863+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12408665/comment/12653005","id":"12653005","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jsensarma","name":"jsensarma","key":"jsensarma","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Joydeep Sen Sarma","active":true,"timeZone":"Asia/Kolkata"},"body":"@Zheng - i don't follow. i thought we discussed a while back that double->string conversion is non-intuitive in a comparison between double and string. it's almost always the case that the user in such a case would like the string to be treated as a double and hence we had talked about putting string at the base of the partial order. mysql type conversion agrees with this approach.\n\ni am ok with using mysql type conversion semantics as well - but i think what we had agreed was better (in terms of partial order and finding least common super-type to convert to). this actually has space consequences - for example in mysql string + int will produce double. which consumes double the space of int (which is the least common super-type).\n\ni still don't see the problem with this approach (and letting udf polymorphism take care of ambiguities)","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jsensarma","name":"jsensarma","key":"jsensarma","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Joydeep Sen Sarma","active":true,"timeZone":"Asia/Kolkata"},"created":"2008-12-03T22:22:39.734+0000","updated":"2008-12-03T22:22:39.734+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12408665/comment/12653090","id":"12653090","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=zshao","name":"zshao","key":"zshao","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=zshao&avatarId=14358","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=zshao&avatarId=14358","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=zshao&avatarId=14358","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=zshao&avatarId=14358"},"displayName":"Zheng Shao","active":true,"timeZone":"America/Los_Angeles"},"body":"@joydeep: There are 2 drawbacks:\n\n1. Authors of udf need to be aware of that.  In oracle, the system does take care of double -> string in udf so authors don't have to do it.\n2. string -> int is lossy. The result of '1.1' = 1 will be true under our agreed conversion partial order (string -> byte -> short -> int -> ... -> double). But both mysql and oracle output that as FALSE.\n\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=zshao","name":"zshao","key":"zshao","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=zshao&avatarId=14358","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=zshao&avatarId=14358","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=zshao&avatarId=14358","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=zshao&avatarId=14358"},"displayName":"Zheng Shao","active":true,"timeZone":"America/Los_Angeles"},"created":"2008-12-04T00:52:21.060+0000","updated":"2008-12-04T00:52:21.060+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12408665/comment/12653151","id":"12653151","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=athusoo","name":"athusoo","key":"athusoo","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ashish Thusoo","active":true,"timeZone":"Etc/UTC"},"body":"Description of implicit conversions in PL/SQL\n\nhttp://www-camden.rutgers.edu/HELP/Documentation/Oracle/server.815/a67842/02_funds.htm#3435\n\nDescription of implicit conversion in Postgres\n\nhttp://www.postgresql.org/docs/7.3/static/typeconv.html\n\nIn light of this and the mysql implicit conversion for comparison types\n\nI think fundamentally the model is as follows:\n\n1. For overloaded comparison operators (>,<, >=, <=, <>, =):\n      If both the operands have the same type, then we have an exact match\n      otherwise, If one of the operands is a date and the other is not, then convert the other to a date.\n      otherwise, If the two arguments are not of the same type, convert them both to double and do the comparison.\n      Note that we do not do this for LIKE, RLIKE and REGEXP as those operators are not overloaded and every type is convertible to string\n\n2. For overloaded arithmetic operators (+, -, *, /, %, &, |, ^):\n      If both the operands have the same types then we have an exact match\n      otherwise we convert everything to double\n      In this case the logical operators will just work as is as they are not overloaded in the sense that they do not have multiple evaluate functions.\n\nWe allow seemless conversions within numbers, from string to numbers and vice versa as well as from date to string and vice versa. We may allow seemless conversion between date and int at some point (once we support date more formally)\n\nWhen looking for a match in a generic overloaded function (which is user defined and not one of the cases enumerated above as we have already addressed those), we use the current mechanism of picking up an evaluate function that needs\nleast number of conversions, otherwise we throw an ambiguity.\n\nSo instead of encoding hierarchies, in the UDFTo... classes we will encode the conversion rules and then use the above to figure out the matches.\n\nI think this will give us the same results as mysql and other DBs as well.\n\nOne thing that is still not very clean in this is the bit operators...\n\nI think this somewhat addresses all the concerns except the storage one which Joy raised, but even Oracle there warns about the same issue and asks the user to casting properly. These set of rules are also hopefully much simpler to code and to explain to the users.\n\nThoughts? ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=athusoo","name":"athusoo","key":"athusoo","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ashish Thusoo","active":true,"timeZone":"Etc/UTC"},"created":"2008-12-04T03:56:19.929+0000","updated":"2008-12-04T03:56:19.929+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12408665/comment/12657650","id":"12657650","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=athusoo","name":"athusoo","key":"athusoo","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ashish Thusoo","active":true,"timeZone":"Etc/UTC"},"body":"The expression node generation code needs changes to fix this bug and that in turn depends on the unified graph traversal and rules framework.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=athusoo","name":"athusoo","key":"athusoo","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ashish Thusoo","active":true,"timeZone":"Etc/UTC"},"created":"2008-12-18T02:03:34.542+0000","updated":"2008-12-18T02:03:34.542+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12408665/comment/12664266","id":"12664266","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=athusoo","name":"athusoo","key":"athusoo","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ashish Thusoo","active":true,"timeZone":"Etc/UTC"},"body":"Uploading the patch for refactoing typechecking and fixing implict conversion problems. This is a rather big patch with a number of changes relating to:\n1. How we resolve udf and udaf evaluation functions or evaluators given the argument types.\n2. Changes to how we implement UDAFs to support overloaded UDAFs.\n3. Tree walker, dispatcher and processor code to make it more amenable to expression creation.\netc...\n\nWill update with a more detailed description of the changes after lunch.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=athusoo","name":"athusoo","key":"athusoo","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ashish Thusoo","active":true,"timeZone":"Etc/UTC"},"created":"2009-01-15T21:11:31.107+0000","updated":"2009-01-15T21:11:31.107+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12408665/comment/12664297","id":"12664297","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=athusoo","name":"athusoo","key":"athusoo","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ashish Thusoo","active":true,"timeZone":"Etc/UTC"},"body":"The patch contains the following changes: \n\n1. Interfaces to be able to plugin your own resolvers for UDFs and UDAFs. These are: \n - UDFMethodResolver for udfs -> Given the types of the arguments, this interface allows the compiler to retrieve which evaluate function to use. \n - UDAFEvaluatorResolver for udafs -> Given the types of the arguments, this interface allows the compiler to retrieve which UDAFEvaluator to use. \n\nWhat was UDAF previously in now the UDAFEvaluator interface. The function names have been changed somewhat. These are: \n1. init which was also init in the UDAF abstract class - for initializaing the state \n2. iterate which was aggregate in the UDAF abstract class - for updating the state for each passed in value of the arguments \n3. terminatePartial which was evaluatePartial in the UDAF abstract class - for returning the state after the partial aggregation has been done \n4. merge which was aggregatePartial in the UDAF abstract class - for merging the results of the terminatePartial while doing the final aggregation \n5. terminate which was evaluate in the UDAF abstract class - for retruning the final result of the aggregation. \n\nThe UDF and UDAF classes now encapsulate a resolver which is used for resolution for that particular class. \nThe different types of resolver implementation for UDFMethodResolver are: \n1. DefaultUDFMethodResolver - This is the default resolver and it uses the old rule of finding the evaluate function in the UDF that needs least number of \n    argument conversions. \n2. NumericOpMethodResolver - This is the resolver used by overloaded numeric operators (+, -, %, /, *). This implements the following resolution logic: \n  - If any of the arguments is Void (null) or String, then the evaluate(Double, Double) method is used. \n  - otherwise, if both the arguments are of the same type, then the evaluate(<arg Type>, <arg Type>) method is used. \n  - otherwise, evaluate(Double, Double) method is used. \n3. ComparisonOpMethodResolver - This is the resolver used by oveloaded comparison operators (>, <. >=. <=. =. <>). This implements the following resolution logic: \n  - If any of the arguments in Void (null), then the evaluate(Double, Double) method is used. \n  - otherwise, if both the arguments are of the same type, then the evaluate(<arg Type>, <arg Type>) method is used. \n  - otherwise, if one of the arguments is a Date, then evaluate(Date, Date) method is used. \n  - otherwise, evaluate(Double, Double) method is used. \n\nAbstract base classes for UDFs that use each of these resolvers are provided. These are: \n1. UDF has been modified to use DefaultUDFMethodResolver. \n2. UDFNumericOp is a new class which uses NumericOpMethodResolver. \n3. UDFBaseCompare has been modified to use ComparisonOpMethodResolver. \n\nSimilar to the UDFMethodResolvers decribed above, there are 2 implementation available for the UDAFEvaluatorResolvers. These are: \n1. DefaultUDAFEvaluatorResolver - on similar lines as DefaultUDFMethodResolver. \n2. NumericUDAFEvaluatorResolver - on similar lines as NumericOpMethodResolver. \n\nThe UDAF resolution logic is in getUDAF where as the UDF resolution logic is in getExprNodeDesc. This logic is the same as previously, though \nI think we should change this to allow conversions from any thing to any thing. I have change the UDF conversion operators to reflect that. In both \nthese locations, conversion operators are appropriately added for the arguments that need conversion. \n\nI have also moved the code to create exprNodeDesc to start using the tree walker infrastructure. Note the code in SemanticAnalyzer still remains \nbecause PartitionPruner depends on it and we can get rid of that only after we have refactored partition pruning which iteself depends on predicate \npush down - I will file a separate JIRA for this work. \nIn the Tree Walker framework, I have added the ability for the processor to return objects and I have also added the ability for the walker to pass \nwhat was returned for objects walked so far to the processor. This is usefull while creating expression node descriptors for a node from the \nexpression node descriptors of the children that have been visited preorder. Also I have removed the NodeProcessorCtx (this was Joy's comment \nin the previous review), it was anyway an empty abstract class and having that around was making it more involved to write the type checker \nbecause of Java's lack of support for multiple class inheritance. \nAccordingly, the type check processor and factory are implemented in: \n1. TypeCheckProcFactory \n2. TypeCheckCtx \n\nI have so far added 1 test relating to this JIRA. I am also going to add more tests for this. \n\nAs a result of the UDAFEvaluator framework, we are now able to support overloaded aggregate functions like max and min for strings as well. \nOne of the existing tests which was returning null previously (a wrong result!!) now outputs the correct result.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=athusoo","name":"athusoo","key":"athusoo","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ashish Thusoo","active":true,"timeZone":"Etc/UTC"},"created":"2009-01-15T22:33:25.341+0000","updated":"2009-01-15T22:33:25.341+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12408665/comment/12665506","id":"12665506","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=prasadc","name":"prasadc","key":"prasadc","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Prasad Chakka","active":true,"timeZone":"Etc/UTC"},"body":"haven't finished looking at all of them\nql/src/java/org/apache/hadoop/hive/ql/exec/UDAFEvaluator.java:21\tnit: that encapsulates?\nql/src/java/org/apache/hadoop/hive/ql/parse/TypeCheckProcFactory.java:128\tcan you put a comment explaining what is going on here\nql/src/java/org/apache/hadoop/hive/ql/parse/TypeCheckProcFactory.java:255\tdoes this work for complex columns? i think this should use getColAlias or some such function\nql/src/java/org/apache/hadoop/hive/ql/parse/TypeCheckProcFactory.java:393\thow do UDFs read struct object? how does it know the class?\nql/src/java/org/apache/hadoop/hive/ql/lib/NodeProcessorCtx.java:23\twhy is this removed? wouldn't it be useful so that arbitrary context objects are not passed around. or is that a requirement?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=prasadc","name":"prasadc","key":"prasadc","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Prasad Chakka","active":true,"timeZone":"Etc/UTC"},"created":"2009-01-20T19:11:24.243+0000","updated":"2009-01-20T19:11:24.243+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12408665/comment/12665680","id":"12665680","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=athusoo","name":"athusoo","key":"athusoo","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ashish Thusoo","active":true,"timeZone":"Etc/UTC"},"body":"I did not get the first comment. Can you elaborate on UDAFEvaluator.java:21?\n\nI removed NodeProcessorCtx.java because this was initially an abstract class with nothing inside it, so it was not serving any purpose as such (Joy had pointed that out in the previous JIRA code review)...\n\nLooking at other comments...\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=athusoo","name":"athusoo","key":"athusoo","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ashish Thusoo","active":true,"timeZone":"Etc/UTC"},"created":"2009-01-21T01:53:15.102+0000","updated":"2009-01-21T01:53:15.102+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12408665/comment/12666485","id":"12666485","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=athusoo","name":"athusoo","key":"athusoo","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ashish Thusoo","active":true,"timeZone":"Etc/UTC"},"body":"For TypeCheckProcFactory.java:255 - This is the same code as the one that appears in genExprNodeDescFromColRef today. Don;t completely understand how getColAlias helps here?\n\nFor 393: structs are just read to be of type Object. The only UDAF that I know of that does this is count.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=athusoo","name":"athusoo","key":"athusoo","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ashish Thusoo","active":true,"timeZone":"Etc/UTC"},"created":"2009-01-23T11:23:15.053+0000","updated":"2009-01-23T11:23:15.053+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12408665/comment/12666490","id":"12666490","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=athusoo","name":"athusoo","key":"athusoo","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ashish Thusoo","active":true,"timeZone":"Etc/UTC"},"body":"Resolved conflicts with latest changes from Prasad's checkin and cleaned out more stuff from SemanticAnalyzer\n\nThere was one comment in the code review of converting the MethodResolver into a static variable in the UDF class. Can someone refresh my memory as to what was needed there. I tried doing that but it seems that there is not much benefit there.\n\nAnother comment during the code review was with respect to the date type in the NumericOpMethodResolver. That code was actually in CompareOpMethodResolver and not in NumericOpMethodResolver as I had originally stated in the code review. So I did not have to change anything there..\n\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=athusoo","name":"athusoo","key":"athusoo","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ashish Thusoo","active":true,"timeZone":"Etc/UTC"},"created":"2009-01-23T11:33:25.737+0000","updated":"2009-01-23T11:33:25.737+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12408665/comment/12666817","id":"12666817","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=athusoo","name":"athusoo","key":"athusoo","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ashish Thusoo","active":true,"timeZone":"Etc/UTC"},"body":"Added NodeProcessorCtx back due to popular demand :)\n\nAlso addressed other review comments from Prasad and Zheng..\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=athusoo","name":"athusoo","key":"athusoo","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ashish Thusoo","active":true,"timeZone":"Etc/UTC"},"created":"2009-01-24T01:07:13.979+0000","updated":"2009-01-24T01:07:13.979+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12408665/comment/12666818","id":"12666818","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=zshao","name":"zshao","key":"zshao","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=zshao&avatarId=14358","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=zshao&avatarId=14358","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=zshao&avatarId=14358","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=zshao&avatarId=14358"},"displayName":"Zheng Shao","active":true,"timeZone":"America/Los_Angeles"},"body":"+1","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=zshao","name":"zshao","key":"zshao","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=zshao&avatarId=14358","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=zshao&avatarId=14358","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=zshao&avatarId=14358","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=zshao&avatarId=14358"},"displayName":"Zheng Shao","active":true,"timeZone":"America/Los_Angeles"},"created":"2009-01-24T01:10:33.621+0000","updated":"2009-01-24T01:10:33.621+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12408665/comment/12734394","id":"12734394","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=zshao","name":"zshao","key":"zshao","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=zshao&avatarId=14358","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=zshao&avatarId=14358","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=zshao&avatarId=14358","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=zshao&avatarId=14358"},"displayName":"Zheng Shao","active":true,"timeZone":"America/Los_Angeles"},"body":"Fixed long time ago. Thanks Ashish!","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=zshao","name":"zshao","key":"zshao","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=zshao&avatarId=14358","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=zshao&avatarId=14358","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=zshao&avatarId=14358","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=zshao&avatarId=14358"},"displayName":"Zheng Shao","active":true,"timeZone":"America/Los_Angeles"},"created":"2009-07-22T23:59:28.071+0000","updated":"2009-07-22T23:59:28.071+0000"}],"maxResults":25,"total":25,"startAt":0},"votes":{"self":"https://issues.apache.org/jira/rest/api/2/issue/HIVE-65/votes","votes":0,"hasVoted":false},"worklog":{"startAt":0,"maxResults":20,"total":0,"worklogs":[]},"customfield_12311820":"0|i0l7mv:"}}