{"expand":"renderedFields,names,schema,operations,editmeta,changelog,versionedRepresentations","id":"12737893","self":"https://issues.apache.org/jira/rest/api/2/issue/12737893","key":"HIVE-7914","fields":{"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype","name":"Bug","subtask":false,"avatarId":21133},"timespent":null,"project":{"self":"https://issues.apache.org/jira/rest/api/2/project/12310843","id":"12310843","key":"HIVE","name":"Hive","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/projectavatar?pid=12310843&avatarId=11935","24x24":"https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12310843&avatarId=11935","16x16":"https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12310843&avatarId=11935","32x32":"https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12310843&avatarId=11935"},"projectCategory":{"self":"https://issues.apache.org/jira/rest/api/2/projectCategory/10292","id":"10292","description":"Scalable Distributed Computing","name":"Hadoop"}},"fixVersions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12326450","id":"12326450","description":"released","name":"0.14.0","archived":false,"released":true,"releaseDate":"2014-11-12"}],"aggregatetimespent":null,"resolution":{"self":"https://issues.apache.org/jira/rest/api/2/resolution/1","id":"1","description":"A fix for this issue is checked into the tree and tested.","name":"Fixed"},"customfield_12312322":null,"customfield_12310220":"2014-10-12T20:49:36.045+0000","customfield_12312520":null,"customfield_12312323":null,"customfield_12312521":"Thu Nov 13 19:40:41 UTC 2014","customfield_12310420":"9223372036854775807","customfield_12312320":null,"customfield_12310222":"10002_*:*_1_*:*_396535658_*|*_1_*:*_1_*:*_3650763967_*|*_5_*:*_1_*:*_0","customfield_12312321":null,"resolutiondate":"2014-10-15T15:49:34.884+0000","workratio":-1,"customfield_12312328":null,"customfield_12312329":null,"customfield_12312923":null,"customfield_12312326":null,"customfield_12312920":null,"customfield_12310300":null,"customfield_12312327":null,"customfield_12312921":null,"customfield_12312324":null,"customfield_12312720":null,"customfield_12312325":null,"lastViewed":null,"watches":{"self":"https://issues.apache.org/jira/rest/api/2/issue/HIVE-7914/watchers","watchCount":4,"isWatching":false},"created":"2014-08-29T19:34:35.334+0000","customfield_12310192":null,"customfield_12310191":null,"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.svg","name":"Major","id":"3"},"labels":[],"customfield_12312333":null,"customfield_12310230":null,"customfield_12312334":null,"customfield_12313422":"false","customfield_12310310":"1.0","customfield_12312331":null,"customfield_12312332":null,"timeestimate":null,"aggregatetimeoriginalestimate":null,"customfield_12311120":null,"customfield_12312330":null,"versions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12326829","id":"12326829","description":"0.13 maintenance release 1","name":"0.13.1","archived":false,"released":true,"releaseDate":"2014-06-06"}],"issuelinks":[{"id":"12395519","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12395519","type":{"id":"10020","name":"Cloners","inward":"is cloned by","outward":"is a clone of","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/10020"},"outwardIssue":{"id":"12737866","key":"HIVE-7913","self":"https://issues.apache.org/jira/rest/api/2/issue/12737866","fields":{"summary":"Simplify filter predicates for CBO","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Done"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.svg","name":"Major","id":"3"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype","name":"Bug","subtask":false,"avatarId":21133}}}},{"id":"12403177","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12403177","type":{"id":"10030","name":"Reference","inward":"is related to","outward":"relates to","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"},"inwardIssue":{"id":"12760881","key":"HIVE-9069","self":"https://issues.apache.org/jira/rest/api/2/issue/12760881","fields":{"summary":"Simplify filter predicates for CBO","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Done"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.svg","name":"Major","id":"3"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype","name":"Bug","subtask":false,"avatarId":21133}}}},{"id":"12395521","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12395521","type":{"id":"10001","name":"dependent","inward":"is depended upon by","outward":"depends upon","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/10001"},"outwardIssue":{"id":"12731949","key":"HIVE-7614","self":"https://issues.apache.org/jira/rest/api/2/issue/12731949","fields":{"summary":"Find solution for closures containing writables [Spark Branch]","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/5","description":"A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/resolved.png","name":"Resolved","id":"5","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Done"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/1","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/blocker.svg","name":"Blocker","id":"1"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/7","id":"7","description":"The sub-task of the issue","iconUrl":"https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype","name":"Sub-task","subtask":true,"avatarId":21146}}}}],"customfield_12312339":null,"assignee":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jpullokkaran","name":"jpullokkaran","key":"jpullokkaran","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Laljo John Pullokkaran","active":true,"timeZone":"America/Los_Angeles"},"customfield_12312337":null,"customfield_12312338":null,"updated":"2014-12-10T22:35:44.210+0000","customfield_12312335":null,"customfield_12312336":null,"status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Done"}},"components":[{"self":"https://issues.apache.org/jira/rest/api/2/component/12323402","id":"12323402","name":"CBO","description":"All issues dealing with Hive's cost based optimizer and its interaction with Optiq"}],"timeoriginalestimate":null,"description":"Simplify join predicates for disjunctive predicates to avoid cross products.\n\nFor TPC-DS query 13 we generate a cross products.\nThe join predicate on (store_sales x customer_demographics) ,  (store_sales x household_demographics) and (store_sales x customer_address) can be pull up to avoid the cross products\n\n\n{code}\nselect avg(ss_quantity)\n       ,avg(ss_ext_sales_price)\n       ,avg(ss_ext_wholesale_cost)\n       ,sum(ss_ext_wholesale_cost)\n from store_sales\n     ,store\n     ,customer_demographics\n     ,household_demographics\n     ,customer_address\n     ,date_dim\n where store.s_store_sk = store_sales.ss_store_sk\n and  store_sales.ss_sold_date_sk = date_dim.d_date_sk and date_dim.d_year = 2001\n and((store_sales.ss_hdemo_sk=household_demographics.hd_demo_sk\n  and customer_demographics.cd_demo_sk = store_sales.ss_cdemo_sk\n  and customer_demographics.cd_marital_status = 'M'\n  and customer_demographics.cd_education_status = '4 yr Degree'\n  and store_sales.ss_sales_price between 100.00 and 150.00\n  and household_demographics.hd_dep_count = 3   \n     )or\n     (store_sales.ss_hdemo_sk=household_demographics.hd_demo_sk\n  and customer_demographics.cd_demo_sk = store_sales.ss_cdemo_sk\n  and customer_demographics.cd_marital_status = 'D'\n  and customer_demographics.cd_education_status = 'Primary'\n  and store_sales.ss_sales_price between 50.00 and 100.00   \n  and household_demographics.hd_dep_count = 1\n     ) or \n     (store_sales.ss_hdemo_sk=household_demographics.hd_demo_sk\n  and customer_demographics.cd_demo_sk = ss_cdemo_sk\n  and customer_demographics.cd_marital_status = 'U'\n  and customer_demographics.cd_education_status = 'Advanced Degree'\n  and store_sales.ss_sales_price between 150.00 and 200.00 \n  and household_demographics.hd_dep_count = 1  \n     ))\n and((store_sales.ss_addr_sk = customer_address.ca_address_sk\n  and customer_address.ca_country = 'United States'\n  and customer_address.ca_state in ('KY', 'GA', 'NM')\n  and store_sales.ss_net_profit between 100 and 200  \n     ) or\n     (store_sales.ss_addr_sk = customer_address.ca_address_sk\n  and customer_address.ca_country = 'United States'\n  and customer_address.ca_state in ('MT', 'OR', 'IN')\n  and store_sales.ss_net_profit between 150 and 300  \n     ) or\n     (store_sales.ss_addr_sk = customer_address.ca_address_sk\n  and customer_address.ca_country = 'United States'\n  and customer_address.ca_state in ('WI', 'MO', 'WV')\n  and store_sales.ss_net_profit between 50 and 250  \n     ))\n;\n\n{code}\n\n\nThis is the plan currently generated without any predicate simplification \n{code}\nWarning: Map Join MAPJOIN[59][bigTable=?] in task 'Map 8' is a cross product\nWarning: Map Join MAPJOIN[58][bigTable=?] in task 'Map 8' is a cross product\nWarning: Shuffle Join JOIN[29][tables = [$hdt$_5, $hdt$_6]] in Stage 'Reducer 2' is a cross product\nOK\nSTAGE DEPENDENCIES:\n  Stage-1 is a root stage\n  Stage-0 depends on stages: Stage-1\n\nSTAGE PLANS:\n  Stage: Stage-1\n    Tez\n      Edges:\n        Map 7 <- Map 8 (BROADCAST_EDGE)\n        Map 8 <- Map 5 (BROADCAST_EDGE), Map 6 (BROADCAST_EDGE)\n        Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 4 (BROADCAST_EDGE), Map 7 (SIMPLE_EDGE)\n        Reducer 3 <- Reducer 2 (SIMPLE_EDGE)\n      DagName: mmokhtar_20140828155050_7059c24b-501b-4683-86c0-4f3c023f0b0e:1\n      Vertices:\n        Map 1 \n            Map Operator Tree:\n                TableScan\n                  alias: customer_address\n                  Statistics: Num rows: 40000000 Data size: 40595195284 Basic stats: COMPLETE Column stats: NONE\n                  Select Operator\n                    expressions: ca_address_sk (type: int), ca_state (type: string), ca_country (type: string)\n                    outputColumnNames: _col0, _col1, _col2\n                    Statistics: Num rows: 40000000 Data size: 40595195284 Basic stats: COMPLETE Column stats: NONE\n                    Reduce Output Operator\n                      sort order: \n                      Statistics: Num rows: 40000000 Data size: 40595195284 Basic stats: COMPLETE Column stats: NONE\n                      value expressions: _col0 (type: int), _col1 (type: string), _col2 (type: string)\n            Execution mode: vectorized\n        Map 4 \n            Map Operator Tree:\n                TableScan\n                  alias: date_dim\n                  filterExpr: ((d_year = 2001) and d_date_sk is not null) (type: boolean)\n                  Statistics: Num rows: 73049 Data size: 81741831 Basic stats: COMPLETE Column stats: NONE\n                  Filter Operator\n                    predicate: ((d_year = 2001) and d_date_sk is not null) (type: boolean)\n                    Statistics: Num rows: 18262 Data size: 20435178 Basic stats: COMPLETE Column stats: NONE\n                    Select Operator\n                      expressions: d_date_sk (type: int)\n                      outputColumnNames: _col0\n                      Statistics: Num rows: 18262 Data size: 20435178 Basic stats: COMPLETE Column stats: NONE\n                      Reduce Output Operator\n                        key expressions: _col0 (type: int)\n                        sort order: +\n                        Map-reduce partition columns: _col0 (type: int)\n                        Statistics: Num rows: 18262 Data size: 20435178 Basic stats: COMPLETE Column stats: NONE\n            Execution mode: vectorized\n        Map 5 \n            Map Operator Tree:\n                TableScan\n                  alias: household_demographics\n                  Statistics: Num rows: 7200 Data size: 770400 Basic stats: COMPLETE Column stats: NONE\n                  Select Operator\n                    expressions: hd_demo_sk (type: int), hd_dep_count (type: int)\n                    outputColumnNames: _col0, _col1\n                    Statistics: Num rows: 7200 Data size: 770400 Basic stats: COMPLETE Column stats: NONE\n                    Reduce Output Operator\n                      sort order: \n                      Statistics: Num rows: 7200 Data size: 770400 Basic stats: COMPLETE Column stats: NONE\n                      value expressions: _col0 (type: int), _col1 (type: int)\n            Execution mode: vectorized\n        Map 6 \n            Map Operator Tree:\n                TableScan\n                  alias: store\n                  filterExpr: (true and s_store_sk is not null) (type: boolean)\n                  Statistics: Num rows: 1704 Data size: 3256276 Basic stats: COMPLETE Column stats: NONE\n                  Filter Operator\n                    predicate: s_store_sk is not null (type: boolean)\n                    Statistics: Num rows: 852 Data size: 1628138 Basic stats: COMPLETE Column stats: NONE\n                    Select Operator\n                      expressions: s_store_sk (type: int)\n                      outputColumnNames: _col0\n                      Statistics: Num rows: 852 Data size: 1628138 Basic stats: COMPLETE Column stats: NONE\n                      Reduce Output Operator\n                        sort order: \n                        Statistics: Num rows: 852 Data size: 1628138 Basic stats: COMPLETE Column stats: NONE\n                        value expressions: _col0 (type: int)\n            Execution mode: vectorized\n        Map 7 \n            Map Operator Tree:\n                TableScan\n                  alias: store_sales\n                  filterExpr: (ss_store_sk is not null and ss_sold_date_sk is not null) (type: boolean)\n                  Statistics: Num rows: 82510879939 Data size: 7203833257964 Basic stats: COMPLETE Column stats: NONE\n                  Filter Operator\n                    predicate: (ss_store_sk is not null and ss_sold_date_sk is not null) (type: boolean)\n                    Statistics: Num rows: 20627719985 Data size: 1800958314512 Basic stats: COMPLETE Column stats: NONE\n                    Select Operator\n                      expressions: ss_sold_date_sk (type: int), ss_cdemo_sk (type: int), ss_hdemo_sk (type: int), ss_addr_sk (type: int), ss_store_sk (type: int), ss_quantity (type: int), ss_sales_price (type: float), ss_ext_sales_price (type: float), ss_ext_wholesale_cost (type: float), ss_net_profit (type: float)\n                      outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9\n                      Statistics: Num rows: 20627719985 Data size: 1800958314512 Basic stats: COMPLETE Column stats: NONE\n                      Map Join Operator\n                        condition map:\n                             Inner Join 0 to 1\n                        condition expressions:\n                          0 {_col0} {_col1} {_col2} {_col4} {_col5}\n                          1 {_col0} {_col1} {_col2} {_col3} {_col5} {_col6} {_col7} {_col8} {_col9}\n                        keys:\n                          0 _col3 (type: int)\n                          1 _col4 (type: int)\n                        outputColumnNames: _col0, _col1, _col2, _col4, _col5, _col6, _col7, _col8, _col9, _col11, _col12, _col13, _col14, _col15\n                        input vertices:\n                          0 Map 8\n                        Statistics: Num rows: 22690492416 Data size: 1981054320640 Basic stats: COMPLETE Column stats: NONE\n                        Filter Operator\n                          predicate: (((_col8 = _col4) and ((_col0 = _col7) and ((_col1 = 'M') and ((_col2 = '4 yr Degree') and (_col12 BETWEEN 100 AND 150 and (_col5 = 3)))))) or (((_col8 = _col4) and ((_col0 = _col7) and ((_col1 = 'D') and ((_col2 = 'Primary') and (_col12 BETWEEN 50 AND 100 and (_col5 = 1)))))) or ((_col8 = _col4) and ((_col0 = _col7) and ((_col1 = 'U') and ((_col2 = 'Advanced Degree') and (_col12 BETWEEN 150 AND 200 and (_col5 = 1)))))))) (type: boolean)\n                          Statistics: Num rows: 1063616832 Data size: 92861921280 Basic stats: COMPLETE Column stats: NONE\n                          Select Operator\n                            expressions: _col6 (type: int), _col9 (type: int), _col11 (type: int), _col13 (type: float), _col14 (type: float), _col15 (type: float)\n                            outputColumnNames: _col0, _col3, _col5, _col7, _col8, _col9\n                            Statistics: Num rows: 1063616832 Data size: 92861921280 Basic stats: COMPLETE Column stats: NONE\n                            Reduce Output Operator\n                              sort order: \n                              Statistics: Num rows: 1063616832 Data size: 92861921280 Basic stats: COMPLETE Column stats: NONE\n                              value expressions: _col0 (type: int), _col3 (type: int), _col5 (type: int), _col7 (type: float), _col8 (type: float), _col9 (type: float)\n            Execution mode: vectorized\n        Map 8 \n            Map Operator Tree:\n                TableScan\n                  alias: customer_demographics\n                  Statistics: Num rows: 1920800 Data size: 718379200 Basic stats: COMPLETE Column stats: NONE\n                  Select Operator\n                    expressions: cd_demo_sk (type: int), cd_marital_status (type: string), cd_education_status (type: string)\n                    outputColumnNames: _col0, _col1, _col2\n                    Statistics: Num rows: 1920800 Data size: 718379200 Basic stats: COMPLETE Column stats: NONE\n                    Map Join Operator\n                      condition map:\n                           Inner Join 0 to 1\n                      condition expressions:\n                        0 {_col0} {_col1} {_col2}\n                        1 {_col0}\n                      keys:\n                        0 \n                        1 \n                      outputColumnNames: _col0, _col1, _col2, _col3\n                      input vertices:\n                        1 Map 6\n                      Statistics: Num rows: 2112880 Data size: 790217152 Basic stats: COMPLETE Column stats: NONE\n                      Map Join Operator\n                        condition map:\n                             Inner Join 0 to 1\n                        condition expressions:\n                          0 {_col0} {_col1} {_col2} {_col3}\n                          1 {_col0} {_col1}\n                        keys:\n                          0 \n                          1 \n                        outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5\n                        input vertices:\n                          1 Map 5\n                        Statistics: Num rows: 2324168 Data size: 869238912 Basic stats: COMPLETE Column stats: NONE\n                        Reduce Output Operator\n                          key expressions: _col3 (type: int)\n                          sort order: +\n                          Map-reduce partition columns: _col3 (type: int)\n                          Statistics: Num rows: 2324168 Data size: 869238912 Basic stats: COMPLETE Column stats: NONE\n                          value expressions: _col0 (type: int), _col1 (type: string), _col2 (type: string), _col4 (type: int), _col5 (type: int)\n            Execution mode: vectorized\n        Reducer 2 \n            Reduce Operator Tree:\n              Join Operator\n                condition map:\n                     Inner Join 0 to 1\n                condition expressions:\n                  0 {VALUE._col0} {VALUE._col3} {VALUE._col5} {VALUE._col7} {VALUE._col8} {VALUE._col9}\n                  1 {VALUE._col0} {VALUE._col1} {VALUE._col2}\n                outputColumnNames: _col0, _col3, _col5, _col7, _col8, _col9, _col16, _col17, _col18\n                Statistics: Num rows: 1169978496 Data size: 102148120576 Basic stats: COMPLETE Column stats: NONE\n                Filter Operator\n                  predicate: (((_col3 = _col16) and ((_col18 = 'United States') and ((_col17) IN ('KY', 'GA', 'NM') and _col9 BETWEEN 100 AND 200))) or (((_col3 = _col16) and ((_col18 = 'United States') and ((_col17) IN ('MT', 'OR', 'IN') and _col9 BETWEEN 150 AND 300))) or ((_col3 = _col16) and ((_col18 = 'United States') and ((_col17) IN ('WI', 'MO', 'WV') and _col9 BETWEEN 50 AND 250))))) (type: boolean)\n                  Statistics: Num rows: 219370968 Data size: 19152772608 Basic stats: COMPLETE Column stats: NONE\n                  Select Operator\n                    expressions: _col0 (type: int), _col5 (type: int), _col7 (type: float), _col8 (type: float)\n                    outputColumnNames: _col0, _col5, _col7, _col8\n                    Statistics: Num rows: 219370968 Data size: 19152772608 Basic stats: COMPLETE Column stats: NONE\n                    Map Join Operator\n                      condition map:\n                           Inner Join 0 to 1\n                      condition expressions:\n                        0 {_col5} {_col7} {_col8}\n                        1 \n                      keys:\n                        0 _col0 (type: int)\n                        1 _col0 (type: int)\n                      outputColumnNames: _col5, _col7, _col8\n                      input vertices:\n                        1 Map 4\n                      Statistics: Num rows: 241308080 Data size: 21068050432 Basic stats: COMPLETE Column stats: NONE\n                      Select Operator\n                        expressions: _col5 (type: int), _col7 (type: float), _col8 (type: float)\n                        outputColumnNames: _col0, _col1, _col2\n                        Statistics: Num rows: 241308080 Data size: 21068050432 Basic stats: COMPLETE Column stats: NONE\n                        Group By Operator\n                          aggregations: avg(_col0), avg(_col1), avg(_col2), sum(_col2)\n                          mode: hash\n                          outputColumnNames: _col0, _col1, _col2, _col3\n                          Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE\n                          Reduce Output Operator\n                            sort order: \n                            Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE\n                            value expressions: _col0 (type: struct<count:bigint,sum:double,input:int>), _col1 (type: struct<count:bigint,sum:double,input:float>), _col2 (type: struct<count:bigint,sum:double,input:float>), _col3 (type: double)\n        Reducer 3 \n            Reduce Operator Tree:\n              Group By Operator\n                aggregations: avg(VALUE._col0), avg(VALUE._col1), avg(VALUE._col2), sum(VALUE._col3)\n                mode: mergepartial\n                outputColumnNames: _col0, _col1, _col2, _col3\n                Statistics: Num rows: 1 Data size: 32 Basic stats: COMPLETE Column stats: NONE\n                Select Operator\n                  expressions: _col0 (type: double), _col1 (type: double), _col2 (type: double), _col3 (type: double)\n                  outputColumnNames: _col0, _col1, _col2, _col3\n                  Statistics: Num rows: 1 Data size: 32 Basic stats: COMPLETE Column stats: NONE\n                  File Output Operator\n                    compressed: false\n                    Statistics: Num rows: 1 Data size: 32 Basic stats: COMPLETE Column stats: NONE\n                    table:\n                        input format: org.apache.hadoop.mapred.TextInputFormat\n                        output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat\n                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe\n\n  Stage: Stage-0\n    Fetch Operator\n      limit: -1\n      Processor Tree:\n        ListSink\n\nTime taken: 7.681 seconds, Fetched: 227 row(s)\n\n{code}","customfield_10010":null,"timetracking":{},"customfield_12312026":null,"customfield_12312023":null,"customfield_12310320":null,"customfield_12312024":null,"customfield_12312340":null,"attachment":[{"self":"https://issues.apache.org/jira/rest/api/2/attachment/12674325","id":"12674325","filename":"HIVE-7914.patch","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jpullokkaran","name":"jpullokkaran","key":"jpullokkaran","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Laljo John Pullokkaran","active":true,"timeZone":"America/Los_Angeles"},"created":"2014-10-11T01:40:28.841+0000","size":1611,"mimeType":"text/plain","content":"https://issues.apache.org/jira/secure/attachment/12674325/HIVE-7914.patch"}],"aggregatetimeestimate":null,"customfield_12312341":null,"customfield_12312220":null,"customfield_12312022":null,"customfield_12310921":null,"customfield_12310920":"9223372036854775807","customfield_12312823":null,"summary":"Simplify join predicates for CBO to avoid cross products","creator":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mmokhtar","name":"mmokhtar","key":"mmokhtar","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=mmokhtar&avatarId=21863","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=mmokhtar&avatarId=21863","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=mmokhtar&avatarId=21863","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=mmokhtar&avatarId=21863"},"displayName":"Mostafa Mokhtar","active":true,"timeZone":"America/Los_Angeles"},"subtasks":[],"customfield_12310291":null,"reporter":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mmokhtar","name":"mmokhtar","key":"mmokhtar","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=mmokhtar&avatarId=21863","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=mmokhtar&avatarId=21863","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=mmokhtar&avatarId=21863","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=mmokhtar&avatarId=21863"},"displayName":"Mostafa Mokhtar","active":true,"timeZone":"America/Los_Angeles"},"customfield_12310290":null,"aggregateprogress":{"progress":0,"total":0},"customfield_12311024":null,"environment":null,"customfield_12313520":null,"customfield_12311020":null,"duedate":null,"customfield_12310250":null,"progress":{"progress":0,"total":0},"comment":{"comments":[{"self":"https://issues.apache.org/jira/rest/api/2/issue/12737893/comment/14161000","id":"14161000","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mmokhtar","name":"mmokhtar","key":"mmokhtar","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=mmokhtar&avatarId=21863","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=mmokhtar&avatarId=21863","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=mmokhtar&avatarId=21863","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=mmokhtar&avatarId=21863"},"displayName":"Mostafa Mokhtar","active":true,"timeZone":"America/Los_Angeles"},"body":"Issue still exists \n{code}\nhive> explain select avg(ss_quantity) ,avg(ss_ext_sales_price) ,avg(ss_ext_wholesale_cost) ,sum(ss_ext_wholesale_cost) from store_sales ,store ,customer_demographics ,household_demographics ,customer_address ,date_dim where store.s_store_sk = store_sales.ss_store_sk and store_sales.ss_sold_date_sk = date_dim.d_date_sk and date_dim.d_year = 2001 and((store_sales.ss_hdemo_sk=household_demographics.hd_demo_sk and customer_demographics.cd_demo_sk = store_sales.ss_cdemo_sk and customer_demographics.cd_marital_status = 'M' and customer_demographics.cd_education_status = '4 yr Degree' and store_sales.ss_sales_price between 100.00 and 150.00 and household_demographics.hd_dep_count = 3 )or (store_sales.ss_hdemo_sk=household_demographics.hd_demo_sk and customer_demographics.cd_demo_sk = store_sales.ss_cdemo_sk and customer_demographics.cd_marital_status = 'D' and customer_demographics.cd_education_status = 'Primary' and store_sales.ss_sales_price between 50.00 and 100.00 and household_demographics.hd_dep_count = 1 ) or (store_sales.ss_hdemo_sk=household_demographics.hd_demo_sk and customer_demographics.cd_demo_sk = ss_cdemo_sk and customer_demographics.cd_marital_status = 'U' and customer_demographics.cd_education_status = 'Advanced Degree' and store_sales.ss_sales_price between 150.00 and 200.00 and household_demographics.hd_dep_count = 1 )) and((store_sales.ss_addr_sk = customer_address.ca_address_sk and customer_address.ca_country = 'United States' and customer_address.ca_state in ('KY', 'GA', 'NM') and store_sales.ss_net_profit between 100 and 200 ) or (store_sales.ss_addr_sk = customer_address.ca_address_sk and customer_address.ca_country = 'United States' and customer_address.ca_state in ('MT', 'OR', 'IN') and store_sales.ss_net_profit between 150 and 300 ) or (store_sales.ss_addr_sk = customer_address.ca_address_sk and customer_address.ca_country = 'United States' and customer_address.ca_state in ('WI', 'MO', 'WV') and store_sales.ss_net_profit between 50 and 250 )) ;\nWarning: Map Join MAPJOIN[49][bigTable=?] in task 'Map 4' is a cross product\nWarning: Map Join MAPJOIN[48][bigTable=?] in task 'Map 4' is a cross product\nWarning: Map Join MAPJOIN[47][bigTable=?] in task 'Map 4' is a cross product\nOK\nSTAGE DEPENDENCIES:\n  Stage-1 is a root stage\n  Stage-0 depends on stages: Stage-1\n\nSTAGE PLANS:\n  Stage: Stage-1\n    Tez\n      Edges:\n        Map 4 <- Map 1 (BROADCAST_EDGE), Map 2 (BROADCAST_EDGE), Map 3 (BROADCAST_EDGE), Map 6 (BROADCAST_EDGE), Map 7 (BROADCAST_EDGE)\n        Reducer 5 <- Map 4 (SIMPLE_EDGE)\n      DagName: mmokhtar_20141006173232_992a372b-cc0e-40d5-b51f-7098561df464:3\n      Vertices:\n        Map 1\n            Map Operator Tree:\n                TableScan\n                  alias: household_demographics\n                  Statistics: Num rows: 7200 Data size: 770400 Basic stats: COMPLETE Column stats: NONE\n                  Reduce Output Operator\n                    sort order:\n                    Statistics: Num rows: 7200 Data size: 770400 Basic stats: COMPLETE Column stats: NONE\n                    value expressions: hd_demo_sk (type: int), hd_dep_count (type: int)\n            Execution mode: vectorized\n        Map 2\n            Map Operator Tree:\n                TableScan\n                  alias: store\n                  filterExpr: s_store_sk is not null (type: boolean)\n                  Statistics: Num rows: 212 Data size: 405680 Basic stats: COMPLETE Column stats: NONE\n                  Filter Operator\n                    predicate: s_store_sk is not null (type: boolean)\n                    Statistics: Num rows: 106 Data size: 202840 Basic stats: COMPLETE Column stats: NONE\n                    Reduce Output Operator\n                      key expressions: s_store_sk (type: int)\n                      sort order: +\n                      Map-reduce partition columns: s_store_sk (type: int)\n                      Statistics: Num rows: 106 Data size: 202840 Basic stats: COMPLETE Column stats: NONE\n            Execution mode: vectorized\n        Map 3\n            Map Operator Tree:\n                TableScan\n                  alias: customer_address\n                  Statistics: Num rows: 800000 Data size: 811903688 Basic stats: COMPLETE Column stats: NONE\n                  Reduce Output Operator\n                    sort order:\n                    Statistics: Num rows: 800000 Data size: 811903688 Basic stats: COMPLETE Column stats: NONE\n                    value expressions: ca_address_sk (type: int), ca_state (type: string), ca_country (type: string)\n            Execution mode: vectorized\n        Map 4\n            Map Operator Tree:\n                TableScan\n                  alias: store_sales\n                  filterExpr: ss_store_sk is not null (type: boolean)\n                  Statistics: Num rows: 550076554 Data size: 47370018896 Basic stats: COMPLETE Column stats: NONE\n                  Filter Operator\n                    predicate: ss_store_sk is not null (type: boolean)\n                    Statistics: Num rows: 275038277 Data size: 23685009448 Basic stats: COMPLETE Column stats: NONE\n                    Map Join Operator\n                      condition map:\n                           Inner Join 0 to 1\n                      condition expressions:\n                        0 {ss_cdemo_sk} {ss_hdemo_sk} {ss_addr_sk} {ss_store_sk} {ss_quantity} {ss_sales_price} {ss_ext_sales_price} {ss_ext_wholesale_cost} {ss_net_profit} {ss_sold_date_sk}\n                        1 {s_store_sk}\n                      keys:\n                        0 ss_store_sk (type: int)\n                        1 s_store_sk (type: int)\n                      outputColumnNames: _col3, _col4, _col5, _col6, _col9, _col12, _col14, _col15, _col21, _col22, _col26\n                      input vertices:\n                        1 Map 2\n                      Statistics: Num rows: 302542112 Data size: 26053511168 Basic stats: COMPLETE Column stats: NONE\n                      Map Join Operator\n                        condition map:\n                             Inner Join 0 to 1\n                        condition expressions:\n                          0 {_col3} {_col4} {_col5} {_col6} {_col9} {_col12} {_col14} {_col15} {_col21} {_col22} {_col26}\n                          1 {cd_demo_sk} {cd_marital_status} {cd_education_status}\n                        keys:\n                          0\n                          1\n                        outputColumnNames: _col3, _col4, _col5, _col6, _col9, _col12, _col14, _col15, _col21, _col22, _col26, _col58, _col60, _col61\n                        input vertices:\n                          1 Map 6\n                        Statistics: Num rows: 332796320 Data size: 28658862080 Basic stats: COMPLETE Column stats: NONE\n                        Map Join Operator\n                          condition map:\n                               Inner Join 0 to 1\n                          condition expressions:\n                            0 {_col3} {_col4} {_col5} {_col6} {_col9} {_col12} {_col14} {_col15} {_col21} {_col22} {_col26} {_col58} {_col60} {_col61}\n                            1 {hd_demo_sk} {hd_dep_count}\n                          keys:\n                            0\n                            1\n                          outputColumnNames: _col3, _col4, _col5, _col6, _col9, _col12, _col14, _col15, _col21, _col22, _col26, _col58, _col60, _col61, _col70, _col73\n                          input vertices:\n                            1 Map 1\n                          Statistics: Num rows: 366075968 Data size: 31524749312 Basic stats: COMPLETE Column stats: NONE\n                          Map Join Operator\n                            condition map:\n                                 Inner Join 0 to 1\n                            condition expressions:\n                              0 {_col3} {_col4} {_col5} {_col6} {_col9} {_col12} {_col14} {_col15} {_col21} {_col22} {_col26} {_col58} {_col60} {_col61} {_col70} {_col73}\n                              1 {ca_address_sk} {ca_state} {ca_country}\n                            keys:\n                              0\n                              1\n                            outputColumnNames: _col3, _col4, _col5, _col6, _col9, _col12, _col14, _col15, _col21, _col22, _col26, _col58, _col60, _col61, _col70, _col73, _col78, _col86, _col88\n                            input vertices:\n                              1 Map 3\n                            Statistics: Num rows: 402683584 Data size: 34677223424 Basic stats: COMPLETE Column stats: NONE\n                            Map Join Operator\n                              condition map:\n                                   Inner Join 0 to 1\n                              condition expressions:\n                                0 {_col3} {_col4} {_col5} {_col6} {_col9} {_col12} {_col14} {_col15} {_col21} {_col22} {_col26} {_col58} {_col60} {_col61} {_col70} {_col73} {_col78} {_col86} {_col88}\n                                1 {d_date_sk}\n                              keys:\n                                0 _col22 (type: int)\n                                1 d_date_sk (type: int)\n                              outputColumnNames: _col3, _col4, _col5, _col6, _col9, _col12, _col14, _col15, _col21, _col22, _col26, _col58, _col60, _col61, _col70, _col73, _col78, _col86, _col88, _col94\n                              input vertices:\n                                1 Map 7\n                              Statistics: Num rows: 442951968 Data size: 38144946176 Basic stats: COMPLETE Column stats: NONE\n                              Filter Operator\n                                predicate: ((((_col26 = _col6) and (_col22 = _col94)) and ((((((((_col4 = _col70) and (_col58 = _col3)) and (_col60 = 'M')) and (_col61 = '4 yr Degree')) and _col12 BETWEEN 100.0 AND 150.0) and (_col73 = 3)) or ((((((_col4 = _col70) and (_col58 = _col3)) and (_col60 = 'D')) and (_col61 = 'Primary')) and _col12 BETWEEN 50.0 AND 100.0) and (_col73 = 1))) or ((((((_col4 = _col70) and (_col58 = _col3)) and (_col60 = 'U')) and (_col61 = 'Advanced Degree')) and _col12 BETWEEN 150.0 AND 200.0) and (_col73 = 1)))) and ((((((_col5 = _col78) and (_col88 = 'United States')) and (_col86) IN ('KY', 'GA', 'NM')) and _col21 BETWEEN 100 AND 200) or ((((_col5 = _col78) and (_col88 = 'United States')) and (_col86) IN ('MT', 'OR', 'IN')) and _col21 BETWEEN 150 AND 300)) or ((((_col5 = _col78) and (_col88 = 'United States')) and (_col86) IN ('WI', 'MO', 'WV')) and _col21 BETWEEN 50 AND 250))) (type: boolean)\n                                Statistics: Num rows: 973281 Data size: 83814395 Basic stats: COMPLETE Column stats: NONE\n                                Select Operator\n                                  expressions: _col9 (type: int), _col14 (type: float), _col15 (type: float)\n                                  outputColumnNames: _col9, _col14, _col15\n                                  Statistics: Num rows: 973281 Data size: 83814395 Basic stats: COMPLETE Column stats: NONE\n                                  Group By Operator\n                                    aggregations: avg(_col9), avg(_col14), avg(_col15), sum(_col15)\n                                    mode: hash\n                                    outputColumnNames: _col0, _col1, _col2, _col3\n                                    Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE\n                                    Reduce Output Operator\n                                      sort order:\n                                      Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE\n                                      value expressions: _col0 (type: struct<count:bigint,sum:double,input:int>), _col1 (type: struct<count:bigint,sum:double,input:float>), _col2 (type: struct<count:bigint,sum:double,input:float>), _col3 (type: double)\n            Execution mode: vectorized\n        Map 6\n            Map Operator Tree:\n                TableScan\n                  alias: customer_demographics\n                  Statistics: Num rows: 1920800 Data size: 718379200 Basic stats: COMPLETE Column stats: NONE\n                  Reduce Output Operator\n                    sort order:\n                    Statistics: Num rows: 1920800 Data size: 718379200 Basic stats: COMPLETE Column stats: NONE\n                    value expressions: cd_demo_sk (type: int), cd_marital_status (type: string), cd_education_status (type: string)\n            Execution mode: vectorized\n        Map 7\n            Map Operator Tree:\n                TableScan\n                  alias: date_dim\n                  filterExpr: (d_date_sk is not null and (d_year = 2001)) (type: boolean)\n                  Statistics: Num rows: 73049 Data size: 81741831 Basic stats: COMPLETE Column stats: NONE\n                  Filter Operator\n                    predicate: (d_date_sk is not null and (d_year = 2001)) (type: boolean)\n                    Statistics: Num rows: 18262 Data size: 20435178 Basic stats: COMPLETE Column stats: NONE\n                    Reduce Output Operator\n                      key expressions: d_date_sk (type: int)\n                      sort order: +\n                      Map-reduce partition columns: d_date_sk (type: int)\n                      Statistics: Num rows: 18262 Data size: 20435178 Basic stats: COMPLETE Column stats: NONE\n                    Select Operator\n                      expressions: d_date_sk (type: int)\n                      outputColumnNames: _col0\n                      Statistics: Num rows: 18262 Data size: 20435178 Basic stats: COMPLETE Column stats: NONE\n                      Group By Operator\n                        keys: _col0 (type: int)\n                        mode: hash\n                        outputColumnNames: _col0\n                        Statistics: Num rows: 18262 Data size: 20435178 Basic stats: COMPLETE Column stats: NONE\n                        Dynamic Partitioning Event Operator\n                          Target Input: store_sales\n                          Partition key expr: ss_sold_date_sk\n                          Statistics: Num rows: 18262 Data size: 20435178 Basic stats: COMPLETE Column stats: NONE\n                          Target column: ss_sold_date_sk\n                          Target Vertex: Map 4\n            Execution mode: vectorized\n        Reducer 5\n            Reduce Operator Tree:\n              Group By Operator\n                aggregations: avg(VALUE._col0), avg(VALUE._col1), avg(VALUE._col2), sum(VALUE._col3)\n                mode: mergepartial\n                outputColumnNames: _col0, _col1, _col2, _col3\n                Statistics: Num rows: 1 Data size: 32 Basic stats: COMPLETE Column stats: NONE\n                Select Operator\n                  expressions: _col0 (type: double), _col1 (type: double), _col2 (type: double), _col3 (type: double)\n                  outputColumnNames: _col0, _col1, _col2, _col3\n                  Statistics: Num rows: 1 Data size: 32 Basic stats: COMPLETE Column stats: NONE\n                  File Output Operator\n                    compressed: false\n                    Statistics: Num rows: 1 Data size: 32 Basic stats: COMPLETE Column stats: NONE\n                    table:\n                        input format: org.apache.hadoop.mapred.TextInputFormat\n                        output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat\n                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe\n\n  Stage: Stage-0\n    Fetch Operator\n      limit: -1\n      Processor Tree:\n        ListSink\n\nTime taken: 3.31 seconds, Fetched: 203 row(s)\nhive>\n{code}","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mmokhtar","name":"mmokhtar","key":"mmokhtar","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=mmokhtar&avatarId=21863","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=mmokhtar&avatarId=21863","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=mmokhtar&avatarId=21863","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=mmokhtar&avatarId=21863"},"displayName":"Mostafa Mokhtar","active":true,"timeZone":"America/Los_Angeles"},"created":"2014-10-06T21:33:00.003+0000","updated":"2014-10-06T21:33:00.003+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12737893/comment/14168783","id":"14168783","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hiveqa","name":"hiveqa","key":"hiveqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hiveqa&avatarId=17060","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hiveqa&avatarId=17060","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hiveqa&avatarId=17060","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hiveqa&avatarId=17060"},"displayName":"Hive QA","active":true,"timeZone":"America/Chicago"},"body":"\n\n{color:red}Overall{color}: -1 at least one tests failed\n\nHere are the results of testing the latest attachment:\nhttps://issues.apache.org/jira/secure/attachment/12674325/HIVE-7914.patch\n\n{color:red}ERROR:{color} -1 due to 1 failed/errored test(s), 4137 tests executed\n*Failed tests:*\n{noformat}\norg.apache.hadoop.hive.cli.TestCliDriver.testCliDriver_tez_smb_1\n{noformat}\n\nTest results: http://ec2-174-129-184-35.compute-1.amazonaws.com/jenkins/job/PreCommit-HIVE-TRUNK-Build/1235/testReport\nConsole output: http://ec2-174-129-184-35.compute-1.amazonaws.com/jenkins/job/PreCommit-HIVE-TRUNK-Build/1235/console\nTest logs: http://ec2-174-129-184-35.compute-1.amazonaws.com/logs/PreCommit-HIVE-TRUNK-Build-1235/\n\nMessages:\n{noformat}\nExecuting org.apache.hive.ptest.execution.PrepPhase\nExecuting org.apache.hive.ptest.execution.ExecutionPhase\nExecuting org.apache.hive.ptest.execution.ReportingPhase\nTests exited with: TestsFailedException: 1 tests failed\n{noformat}\n\nThis message is automatically generated.\n\nATTACHMENT ID: 12674325","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hiveqa","name":"hiveqa","key":"hiveqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hiveqa&avatarId=17060","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hiveqa&avatarId=17060","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hiveqa&avatarId=17060","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hiveqa&avatarId=17060"},"displayName":"Hive QA","active":true,"timeZone":"America/Chicago"},"created":"2014-10-12T20:49:36.045+0000","updated":"2014-10-12T20:49:36.045+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12737893/comment/14171702","id":"14171702","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=ashutoshc","name":"ashutoshc","key":"ashutoshc","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ashutosh Chauhan","active":true,"timeZone":"America/Los_Angeles"},"body":"+1","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=ashutoshc","name":"ashutoshc","key":"ashutoshc","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ashutosh Chauhan","active":true,"timeZone":"America/Los_Angeles"},"created":"2014-10-14T23:24:56.804+0000","updated":"2014-10-14T23:24:56.804+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12737893/comment/14172494","id":"14172494","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=ashutoshc","name":"ashutoshc","key":"ashutoshc","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ashutosh Chauhan","active":true,"timeZone":"America/Los_Angeles"},"body":"Committed to trunk. Thanks, John!\n[~vikram.dixit] it will be good to have this in 0.14\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=ashutoshc","name":"ashutoshc","key":"ashutoshc","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ashutosh Chauhan","active":true,"timeZone":"America/Los_Angeles"},"created":"2014-10-15T15:49:34.920+0000","updated":"2014-10-15T15:49:34.920+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12737893/comment/14172736","id":"14172736","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mmokhtar","name":"mmokhtar","key":"mmokhtar","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=mmokhtar&avatarId=21863","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=mmokhtar&avatarId=21863","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=mmokhtar&avatarId=21863","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=mmokhtar&avatarId=21863"},"displayName":"Mostafa Mokhtar","active":true,"timeZone":"America/Los_Angeles"},"body":"Issue resolved \n{code}\n\nSTAGE DEPENDENCIES:\n  Stage-1 is a root stage\n  Stage-0 depends on stages: Stage-1\n\nSTAGE PLANS:\n  Stage: Stage-1\n    Tez\n      Edges:\n        Map 4 <- Map 1 (BROADCAST_EDGE), Map 2 (BROADCAST_EDGE), Map 3 (BROADCAST_EDGE), Map 6 (BROADCAST_EDGE), Map 7 (BROADCAST_EDGE)\n        Reducer 5 <- Map 4 (SIMPLE_EDGE)\n      DagName: mmokhtar_20141015124444_452c339a-3fa1-4ae4-99ed-0fb052342532:1\n      Vertices:\n        Map 1 \n            Map Operator Tree:\n                TableScan\n                  alias: household_demographics\n                  filterExpr: hd_demo_sk is not null (type: boolean)\n                  Statistics: Num rows: 7200 Data size: 770400 Basic stats: COMPLETE Column stats: COMPLETE\n                  Filter Operator\n                    predicate: hd_demo_sk is not null (type: boolean)\n                    Statistics: Num rows: 7200 Data size: 57600 Basic stats: COMPLETE Column stats: COMPLETE\n                    Select Operator\n                      expressions: hd_demo_sk (type: int), hd_dep_count (type: int)\n                      outputColumnNames: _col0, _col1\n                      Statistics: Num rows: 7200 Data size: 57600 Basic stats: COMPLETE Column stats: COMPLETE\n                      Reduce Output Operator\n                        key expressions: _col0 (type: int)\n                        sort order: +\n                        Map-reduce partition columns: _col0 (type: int)\n                        Statistics: Num rows: 7200 Data size: 57600 Basic stats: COMPLETE Column stats: COMPLETE\n                        value expressions: _col1 (type: int)\n            Execution mode: vectorized\n        Map 2 \n            Map Operator Tree:\n                TableScan\n                  alias: customer_address\n                  filterExpr: ((ca_country = 'United States') and ca_address_sk is not null) (type: boolean)\n                  Statistics: Num rows: 800000 Data size: 811903688 Basic stats: COMPLETE Column stats: COMPLETE\n                  Filter Operator\n                    predicate: ((ca_country = 'United States') and ca_address_sk is not null) (type: boolean)\n                    Statistics: Num rows: 400000 Data size: 74800000 Basic stats: COMPLETE Column stats: COMPLETE\n                    Select Operator\n                      expressions: ca_address_sk (type: int), ca_state (type: string)\n                      outputColumnNames: _col0, _col1\n                      Statistics: Num rows: 400000 Data size: 36000000 Basic stats: COMPLETE Column stats: COMPLETE\n                      Reduce Output Operator\n                        key expressions: _col0 (type: int)\n                        sort order: +\n                        Map-reduce partition columns: _col0 (type: int)\n                        Statistics: Num rows: 400000 Data size: 36000000 Basic stats: COMPLETE Column stats: COMPLETE\n                        value expressions: _col1 (type: string)\n            Execution mode: vectorized\n        Map 3 \n            Map Operator Tree:\n                TableScan\n                  alias: date_dim\n                  filterExpr: ((d_year = 2001) and d_date_sk is not null) (type: boolean)\n                  Statistics: Num rows: 73049 Data size: 81741831 Basic stats: COMPLETE Column stats: COMPLETE\n                  Filter Operator\n                    predicate: ((d_year = 2001) and d_date_sk is not null) (type: boolean)\n                    Statistics: Num rows: 652 Data size: 5216 Basic stats: COMPLETE Column stats: COMPLETE\n                    Select Operator\n                      expressions: d_date_sk (type: int)\n                      outputColumnNames: _col0\n                      Statistics: Num rows: 652 Data size: 2608 Basic stats: COMPLETE Column stats: COMPLETE\n                      Reduce Output Operator\n                        key expressions: _col0 (type: int)\n                        sort order: +\n                        Map-reduce partition columns: _col0 (type: int)\n                        Statistics: Num rows: 652 Data size: 2608 Basic stats: COMPLETE Column stats: COMPLETE\n                      Select Operator\n                        expressions: _col0 (type: int)\n                        outputColumnNames: _col0\n                        Statistics: Num rows: 652 Data size: 0 Basic stats: PARTIAL Column stats: COMPLETE\n                        Group By Operator\n                          keys: _col0 (type: int)\n                          mode: hash\n                          outputColumnNames: _col0\n                          Statistics: Num rows: 652 Data size: 0 Basic stats: PARTIAL Column stats: COMPLETE\n                          Dynamic Partitioning Event Operator\n                            Target Input: store_sales\n                            Partition key expr: ss_sold_date_sk\n                            Statistics: Num rows: 652 Data size: 0 Basic stats: PARTIAL Column stats: COMPLETE\n                            Target column: ss_sold_date_sk\n                            Target Vertex: Map 4\n            Execution mode: vectorized\n        Map 4 \n            Map Operator Tree:\n                TableScan\n                  alias: store_sales\n                  filterExpr: (((ss_hdemo_sk is not null and ss_store_sk is not null) and ss_cdemo_sk is not null) and ss_addr_sk is not null) (type: boolean)\n                  Statistics: Num rows: 550076554 Data size: 47370018896 Basic stats: COMPLETE Column stats: COMPLETE\n                  Filter Operator\n                    predicate: (((ss_hdemo_sk is not null and ss_store_sk is not null) and ss_cdemo_sk is not null) and ss_addr_sk is not null) (type: boolean)\n                    Statistics: Num rows: 500049144 Data size: 17577702756 Basic stats: COMPLETE Column stats: COMPLETE\n                    Select Operator\n                      expressions: ss_cdemo_sk (type: int), ss_hdemo_sk (type: int), ss_addr_sk (type: int), ss_store_sk (type: int), ss_quantity (type: int), ss_sales_price (type: float), ss_ext_sales_price (type: float), ss_ext_wholesale_cost (type: float), ss_net_profit (type: float), ss_sold_date_sk (type: int)\n                      outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9\n                      Statistics: Num rows: 500049144 Data size: 19577899332 Basic stats: COMPLETE Column stats: COMPLETE\n                      Map Join Operator\n                        condition map:\n                             Inner Join 0 to 1\n                        condition expressions:\n                          0 {_col0} {_col2} {_col3} {_col4} {_col5} {_col6} {_col7} {_col8} {_col9}\n                          1 {_col1}\n                        keys:\n                          0 _col1 (type: int)\n                          1 _col0 (type: int)\n                        outputColumnNames: _col0, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col11\n                        input vertices:\n                          1 Map 1\n                        Statistics: Num rows: 387176453 Data size: 13938352308 Basic stats: COMPLETE Column stats: COMPLETE\n                        Map Join Operator\n                          condition map:\n                               Inner Join 0 to 1\n                          condition expressions:\n                            0 {_col0} {_col2} {_col4} {_col5} {_col6} {_col7} {_col8} {_col9} {_col11}\n                            1 \n                          keys:\n                            0 _col3 (type: int)\n                            1 _col0 (type: int)\n                          outputColumnNames: _col0, _col2, _col4, _col5, _col6, _col7, _col8, _col9, _col11\n                          input vertices:\n                            1 Map 7\n                          Statistics: Num rows: 477217488 Data size: 15270959616 Basic stats: COMPLETE Column stats: COMPLETE\n                          Map Join Operator\n                            condition map:\n                                 Inner Join 0 to 1\n                            condition expressions:\n                              0 {_col2} {_col4} {_col5} {_col6} {_col7} {_col8} {_col9} {_col11}\n                              1 {_col1} {_col2}\n                            keys:\n                              0 _col0 (type: int)\n                              1 _col0 (type: int)\n                            outputColumnNames: _col2, _col4, _col5, _col6, _col7, _col8, _col9, _col11, _col14, _col15\n                            input vertices:\n                              1 Map 6\n                            Statistics: Num rows: 499302689 Data size: 103355656623 Basic stats: COMPLETE Column stats: COMPLETE\n                            Filter Operator\n                              predicate: (((_col14 = 'M') and ((_col15 = '4 yr Degree') and (_col5 BETWEEN 100.0 AND 150.0 and (_col11 = 3)))) or (((_col14 = 'D') and ((_col15 = 'Primary') and (_col5 BETWEEN 50.0 AND 100.0 and (_col11 = 1)))) or ((_col14 = 'U') and ((_col15 = 'Advanced Degree') and (_col5 BETWEEN 150.0 AND 200.0 and (_col11 = 1)))))) (type: boolean)\n                              Statistics: Num rows: 53496714 Data size: 11073819798 Basic stats: COMPLETE Column stats: COMPLETE\n                              Select Operator\n                                expressions: _col2 (type: int), _col4 (type: int), _col6 (type: float), _col7 (type: float), _col8 (type: float), _col9 (type: int)\n                                outputColumnNames: _col2, _col4, _col6, _col7, _col8, _col9\n                                Statistics: Num rows: 53496714 Data size: 1069934280 Basic stats: COMPLETE Column stats: COMPLETE\n                                Map Join Operator\n                                  condition map:\n                                       Inner Join 0 to 1\n                                  condition expressions:\n                                    0 {_col4} {_col6} {_col7} {_col8} {_col9}\n                                    1 {_col1}\n                                  keys:\n                                    0 _col2 (type: int)\n                                    1 _col0 (type: int)\n                                  outputColumnNames: _col4, _col6, _col7, _col8, _col9, _col17\n                                  input vertices:\n                                    1 Map 2\n                                  Statistics: Num rows: 60464319 Data size: 6409217814 Basic stats: COMPLETE Column stats: COMPLETE\n                                  Filter Operator\n                                    predicate: (((_col17) IN ('KY', 'GA', 'NM') and _col8 BETWEEN 100 AND 200) or (((_col17) IN ('MT', 'OR', 'IN') and _col8 BETWEEN 150 AND 300) or ((_col17) IN ('WI', 'MO', 'WV') and _col8 BETWEEN 50 AND 250))) (type: boolean)\n                                    Statistics: Num rows: 45348237 Data size: 4806913122 Basic stats: COMPLETE Column stats: COMPLETE\n                                    Select Operator\n                                      expressions: _col4 (type: int), _col6 (type: float), _col7 (type: float), _col9 (type: int)\n                                      outputColumnNames: _col4, _col6, _col7, _col9\n                                      Statistics: Num rows: 45348237 Data size: 725571792 Basic stats: COMPLETE Column stats: COMPLETE\n                                      Map Join Operator\n                                        condition map:\n                                             Inner Join 0 to 1\n                                        condition expressions:\n                                          0 {_col4} {_col6} {_col7}\n                                          1 \n                                        keys:\n                                          0 _col9 (type: int)\n                                          1 _col0 (type: int)\n                                        outputColumnNames: _col4, _col6, _col7\n                                        input vertices:\n                                          1 Map 3\n                                        Statistics: Num rows: 50628511 Data size: 607542132 Basic stats: COMPLETE Column stats: COMPLETE\n                                        Select Operator\n                                          expressions: _col4 (type: int), _col6 (type: float), _col7 (type: float)\n                                          outputColumnNames: _col0, _col1, _col2\n                                          Statistics: Num rows: 50628511 Data size: 607542132 Basic stats: COMPLETE Column stats: COMPLETE\n                                          Group By Operator\n                                            aggregations: avg(_col0), avg(_col1), avg(_col2), sum(_col2)\n                                            mode: hash\n                                            outputColumnNames: _col0, _col1, _col2, _col3\n                                            Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE\n                                            Reduce Output Operator\n                                              sort order: \n                                              Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE\n                                              value expressions: _col0 (type: struct<count:bigint,sum:double,input:int>), _col1 (type: struct<count:bigint,sum:double,input:float>), _col2 (type: struct<count:bigint,sum:double,input:float>), _col3 (type: double)\n            Execution mode: vectorized\n        Map 6 \n            Map Operator Tree:\n                TableScan\n                  alias: customer_demographics\n                  filterExpr: cd_demo_sk is not null (type: boolean)\n                  Statistics: Num rows: 1920800 Data size: 718379200 Basic stats: COMPLETE Column stats: COMPLETE\n                  Filter Operator\n                    predicate: cd_demo_sk is not null (type: boolean)\n                    Statistics: Num rows: 1920800 Data size: 351506400 Basic stats: COMPLETE Column stats: COMPLETE\n                    Select Operator\n                      expressions: cd_demo_sk (type: int), cd_marital_status (type: string), cd_education_status (type: string)\n                      outputColumnNames: _col0, _col1, _col2\n                      Statistics: Num rows: 1920800 Data size: 351506400 Basic stats: COMPLETE Column stats: COMPLETE\n                      Reduce Output Operator\n                        key expressions: _col0 (type: int)\n                        sort order: +\n                        Map-reduce partition columns: _col0 (type: int)\n                        Statistics: Num rows: 1920800 Data size: 351506400 Basic stats: COMPLETE Column stats: COMPLETE\n                        value expressions: _col1 (type: string), _col2 (type: string)\n            Execution mode: vectorized\n        Map 7 \n            Map Operator Tree:\n                TableScan\n                  alias: store\n                  filterExpr: s_store_sk is not null (type: boolean)\n                  Statistics: Num rows: 212 Data size: 405680 Basic stats: COMPLETE Column stats: COMPLETE\n                  Filter Operator\n                    predicate: s_store_sk is not null (type: boolean)\n                    Statistics: Num rows: 212 Data size: 848 Basic stats: COMPLETE Column stats: COMPLETE\n                    Select Operator\n                      expressions: s_store_sk (type: int)\n                      outputColumnNames: _col0\n                      Statistics: Num rows: 212 Data size: 848 Basic stats: COMPLETE Column stats: COMPLETE\n                      Reduce Output Operator\n                        key expressions: _col0 (type: int)\n                        sort order: +\n                        Map-reduce partition columns: _col0 (type: int)\n                        Statistics: Num rows: 212 Data size: 848 Basic stats: COMPLETE Column stats: COMPLETE\n            Execution mode: vectorized\n        Reducer 5 \n            Reduce Operator Tree:\n              Group By Operator\n                aggregations: avg(VALUE._col0), avg(VALUE._col1), avg(VALUE._col2), sum(VALUE._col3)\n                mode: mergepartial\n                outputColumnNames: _col0, _col1, _col2, _col3\n                Statistics: Num rows: 1 Data size: 32 Basic stats: COMPLETE Column stats: COMPLETE\n                Select Operator\n                  expressions: _col0 (type: double), _col1 (type: double), _col2 (type: double), _col3 (type: double)\n                  outputColumnNames: _col0, _col1, _col2, _col3\n                  Statistics: Num rows: 1 Data size: 32 Basic stats: COMPLETE Column stats: COMPLETE\n                  File Output Operator\n                    compressed: false\n                    Statistics: Num rows: 1 Data size: 32 Basic stats: COMPLETE Column stats: COMPLETE\n                    table:\n                        input format: org.apache.hadoop.mapred.TextInputFormat\n                        output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat\n                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe\n\n  Stage: Stage-0\n    Fetch Operator\n      limit: -1\n      Processor Tree:\n        ListSink\n{code}","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mmokhtar","name":"mmokhtar","key":"mmokhtar","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=mmokhtar&avatarId=21863","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=mmokhtar&avatarId=21863","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=mmokhtar&avatarId=21863","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=mmokhtar&avatarId=21863"},"displayName":"Mostafa Mokhtar","active":true,"timeZone":"America/Los_Angeles"},"created":"2014-10-15T18:34:18.074+0000","updated":"2014-10-15T18:34:18.074+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12737893/comment/14177174","id":"14177174","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=vikram.dixit","name":"vikram.dixit","key":"vikram.dixit","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Vikram Dixit K","active":true,"timeZone":"America/Los_Angeles"},"body":"+1 for 0.14","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=vikram.dixit","name":"vikram.dixit","key":"vikram.dixit","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Vikram Dixit K","active":true,"timeZone":"America/Los_Angeles"},"created":"2014-10-20T17:45:36.834+0000","updated":"2014-10-20T17:45:36.834+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12737893/comment/14177511","id":"14177511","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=ashutoshc","name":"ashutoshc","key":"ashutoshc","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ashutosh Chauhan","active":true,"timeZone":"America/Los_Angeles"},"body":"Committed to 0.14","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=ashutoshc","name":"ashutoshc","key":"ashutoshc","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ashutosh Chauhan","active":true,"timeZone":"America/Los_Angeles"},"created":"2014-10-20T21:36:04.429+0000","updated":"2014-10-20T21:36:04.429+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12737893/comment/14210405","id":"14210405","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=thejas","name":"thejas","key":"thejas","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=thejas&avatarId=15902","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=thejas&avatarId=15902","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=thejas&avatarId=15902","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=thejas&avatarId=15902"},"displayName":"Thejas M Nair","active":true,"timeZone":"America/Los_Angeles"},"body":"This has been fixed in 0.14 release. Please open new jira if you see any issues.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=thejas","name":"thejas","key":"thejas","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=thejas&avatarId=15902","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=thejas&avatarId=15902","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=thejas&avatarId=15902","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=thejas&avatarId=15902"},"displayName":"Thejas M Nair","active":true,"timeZone":"America/Los_Angeles"},"created":"2014-11-13T19:40:41.521+0000","updated":"2014-11-13T19:40:41.521+0000"}],"maxResults":8,"total":8,"startAt":0},"votes":{"self":"https://issues.apache.org/jira/rest/api/2/issue/HIVE-7914/votes","votes":0,"hasVoted":false},"worklog":{"startAt":0,"maxResults":20,"total":0,"worklogs":[]},"customfield_12311820":"0|i1zi2v:"}}