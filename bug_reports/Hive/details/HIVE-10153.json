{"expand":"renderedFields,names,schema,operations,editmeta,changelog,versionedRepresentations","id":"12786887","self":"https://issues.apache.org/jira/rest/api/2/issue/12786887","key":"HIVE-10153","fields":{"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype","name":"Bug","subtask":false,"avatarId":21133},"timespent":null,"project":{"self":"https://issues.apache.org/jira/rest/api/2/project/12310843","id":"12310843","key":"HIVE","name":"Hive","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/projectavatar?pid=12310843&avatarId=11935","24x24":"https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12310843&avatarId=11935","16x16":"https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12310843&avatarId=11935","32x32":"https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12310843&avatarId=11935"},"projectCategory":{"self":"https://issues.apache.org/jira/rest/api/2/projectCategory/10292","id":"10292","description":"Scalable Distributed Computing","name":"Hadoop"}},"fixVersions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12328724","id":"12328724","description":"Dev branch for Cost Based Optimization","name":"cbo-branch","archived":false,"released":false,"releaseDate":"2014-09-23"}],"aggregatetimespent":null,"resolution":null,"customfield_12312322":null,"customfield_12310220":"2016-08-04T06:52:44.660+0000","customfield_12312520":null,"customfield_12312323":null,"customfield_12312521":"Thu Aug 04 06:52:44 UTC 2016","customfield_12310420":"9223372036854775807","customfield_12312320":null,"customfield_12310222":null,"customfield_12312321":null,"resolutiondate":null,"workratio":-1,"customfield_12312328":null,"customfield_12312329":null,"customfield_12312923":null,"customfield_12312326":null,"customfield_12312920":null,"customfield_12310300":null,"customfield_12312327":null,"customfield_12312921":null,"customfield_12312324":null,"customfield_12312720":null,"customfield_12312325":null,"lastViewed":null,"watches":{"self":"https://issues.apache.org/jira/rest/api/2/issue/HIVE-10153/watchers","watchCount":2,"isWatching":false},"created":"2015-03-31T01:03:02.580+0000","customfield_12310192":null,"customfield_12310191":null,"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.svg","name":"Major","id":"3"},"labels":[],"customfield_12312333":null,"customfield_12310230":null,"customfield_12312334":null,"customfield_12313422":"false","customfield_12310310":"0.0","customfield_12312331":null,"customfield_12312332":null,"timeestimate":null,"aggregatetimeoriginalestimate":null,"customfield_12311120":null,"customfield_12312330":null,"versions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12328724","id":"12328724","description":"Dev branch for Cost Based Optimization","name":"cbo-branch","archived":false,"released":false,"releaseDate":"2014-09-23"}],"issuelinks":[],"customfield_12312339":null,"assignee":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jpullokkaran","name":"jpullokkaran","key":"jpullokkaran","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Laljo John Pullokkaran","active":true,"timeZone":"America/Los_Angeles"},"customfield_12312337":null,"customfield_12312338":null,"updated":"2016-08-04T06:52:45.018+0000","customfield_12312335":null,"customfield_12312336":null,"status":{"self":"https://issues.apache.org/jira/rest/api/2/status/1","description":"The issue is open and ready for the assignee to start work on it.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/open.png","name":"Open","id":"1","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/2","id":2,"key":"new","colorName":"blue-gray","name":"To Do"}},"components":[{"self":"https://issues.apache.org/jira/rest/api/2/component/12323402","id":"12323402","name":"CBO","description":"All issues dealing with Hive's cost based optimizer and its interaction with Optiq"}],"timeoriginalestimate":null,"description":"TPC-DS Q15 joins catalog_sales with date_dim last where it should be the first join.\n\nQuery \n{code}\nselect  ca_zip\n       ,sum(cs_sales_price)\n from catalog_sales\n     ,customer\n     ,customer_address\n     ,date_dim\n where catalog_sales.cs_bill_customer_sk = customer.c_customer_sk\n  and customer.c_current_addr_sk = customer_address.ca_address_sk \n  and ( substr(ca_zip,1,5) in ('85669', '86197','88274','83405','86475',\n                                   '85392', '85460', '80348', '81792')\n       or customer_address.ca_state in ('CA','WA','GA')\n       or catalog_sales.cs_sales_price > 500)\n  and catalog_sales.cs_sold_date_sk = date_dim.d_date_sk\n  and date_dim.d_qoy = 2 and date_dim.d_year = 2000\n group by ca_zip\n order by ca_zip\n limit 100;\n{code}\n\nLogical plan \n{code}\n\nHiveSort(fetch=[100]): rowcount = 7171.0, cumulative cost = {7.507729983730065E8 rows, 7.553113550983669E8 cpu, 9.08546638062188E10 io}, id = 2207\n  HiveSort(sort0=[$0], dir0=[ASC]): rowcount = 7171.0, cumulative cost = {7.502636967200102E8 rows, 7.553041840983669E8 cpu, 9.08546638062188E10 io}, id = 2205\n    HiveAggregate(group=[{0}], agg#0=[sum($1)]): rowcount = 7171.0, cumulative cost = {7.497543950670139E8 rows, 7.552970130983669E8 cpu, 9.08546638062188E10 io}, id = 2203\n      HiveProject($f0=[$7], $f1=[$1]): rowcount = 272862.9537571146, cumulative cost = {7.494815321132567E8 rows, 7.518816625578996E8 cpu, 8.75951724E10 io}, id = 2201\n        HiveJoin(condition=[=($2, $8)], joinType=[inner], joinAlgorithm=[map_join], cost=[{1.36661031991844E8 rows, 1.3666116243648687E8 cpu, 0.0 io}]): rowcount = 272862.9537571146, cumulative cost = {7.494815321132567E8 rows, 7.518816625578996E8 cpu, 8.75951724E10 io}, id = 2242\n          HiveFilter(condition=[OR(in(substr($7, 1, 5), '85669', '86197', '88274', '83405', '86475', '85392', '85460', '80348', '81792'), in($6, 'CA', 'WA', 'GA'), >($1, 5E2))]): rowcount = 1.3666090154720113E8, cumulative cost = {6.128205001214128E8 rows, 6.152205001214128E8 cpu, 8.75951724E10 io}, id = 2195\n            HiveJoin(condition=[=($4, $5)], joinType=[inner], joinAlgorithm=[map_join], cost=[{3.246707731214128E8 rows, 3.254707731214128E8 cpu, 4.91951724E10 io}]): rowcount = 3.6605287632468826E8, cumulative cost = {6.128205001214128E8 rows, 6.152205001214128E8 cpu, 8.75951724E10 io}, id = 2238\n              HiveJoin(condition=[=($0, $3)], joinType=[inner], joinAlgorithm=[map_join], cost=[{2.88149727E8 rows, 2.89749727E8 cpu, 3.84E10 io}]): rowcount = 3.238707731214128E8, cumulative cost = {2.88149727E8 rows, 2.89749727E8 cpu, 3.84E10 io}, id  = 2222\n                HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.catalog_sales]]): rowcount = 2.86549727E8, cumulative cost = {0}, id = 2134\n                HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.customer]]): rowcount = 1600000.0, cumulative cost = {0}, id = 2135\n              HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.customer_address]]): rowcount = 800000.0, cumulative cost = {0}, id = 2137\n          HiveFilter(condition=[AND(=($2, 2), =($1, 2000))]): rowcount = 130.44464285714287, cumulative cost = {0.0 rows, 0.0 cpu, 0.0 io}, id = 2197\n            HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.date_dim]]): rowcount = 73049.0, cumulative cost = {0}, id = 2140\n{code}\n\n— Re-write \n{code}\nwith cs as \n ( select cs_sales_price,cs_bill_customer_sk\n from catalog_sales\n     ,date_dim\nwhere      \n  cs_sold_date_sk = d_date_sk\n  and date_dim.d_qoy = 2 and d_year = 2000)\n  select  ca_zip\n       ,sum(cs_sales_price)\n from cs\n     ,customer\n     ,customer_address\n where cs.cs_bill_customer_sk = customer.c_customer_sk\n  and customer.c_current_addr_sk = customer_address.ca_address_sk \n  and ( substr(ca_zip,1,5) in ('85669', '86197','88274','83405','86475',\n                                   '85392', '85460', '80348', '81792')\n       or customer_address.ca_state in ('CA','WA','GA')\n       or cs.cs_sales_price > 500)\n group by ca_zip\n order by ca_zip\n limit 100\n {code}\n\n— plan for re-write \n{code}\nHiveSort(fetch=[100]): rowcount = 7171.0, cumulative cost = {2.9146011517152977E8 rows, 2.949706092384584E8 cpu, 3.261369809075945E9 io}, id = 1990\n  HiveSort(sort0=[$0], dir0=[ASC]): rowcount = 7171.0, cumulative cost = {2.909508135185335E8 rows, 2.949634382384584E8 cpu, 3.261369809075945E9 io}, id = 1988\n    HiveAggregate(group=[{0}], agg#0=[sum($1)]): rowcount = 7171.0, cumulative cost = {2.904415118655373E8 rows, 2.949562672384584E8 cpu, 3.261369809075945E9 io}, id = 1986\n      HiveProject($f0=[$6], $f1=[$0]): rowcount = 272862.9537571146, cumulative cost = {2.901686489117802E8 rows, 2.915409166979911E8 cpu, 1878402.8571428573 io}, id = 1984\n        HiveFilter(condition=[OR(in(substr($6, 1, 5), '85669', '86197', '88274', '83405', '86475', '85392', '85460', '80348', '81792'), in($5, 'CA', 'WA', 'GA'), >($0, 5E2))]): rowcount = 272862.9537571146, cumulative cost = {2.901686489117802E8 rows, 2.915409166979911E8 cpu, 1878402.8571428573 io}, id = 1982\n          HiveProject(cs_sales_price=[$5], cs_bill_customer_sk=[$6], c_customer_sk=[$3], c_current_addr_sk=[$4], ca_address_sk=[$0], ca_state=[$1], ca_zip=[$2]): rowcount = 730876.7023664336, cumulative cost = {2.901686489117802E8 rows, 2.915409166979911E8 cpu, 1878402.8571428573 io}, id = 2030\n            HiveJoin(condition=[=($4, $0)], joinType=[inner], joinAlgorithm=[map_join], cost=[{1446654.1255692376 rows, 2246654.1255692374 cpu, 0.0 io}]): rowcount = 730876.7023664336, cumulative cost = {2.901686489117802E8 rows, 2.915409166979911E8 cpu, 1878402.8571428573 io}, id = 2028\n              HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.customer_address]]): rowcount = 800000.0, cumulative cost = {0}, id = 1917\n              HiveJoin(condition=[=($3, $0)], joinType=[inner], joinAlgorithm=[map_join], cost=[{2172137.341568095 rows, 2744274.6831361903 cpu, 0.0 io}]): rowcount = 646654.1255692376, cumulative cost = {2.8872199478621095E8 rows, 2.8929426257242185E8 cpu, 1878402.8571428573 io}, id = 2012\n                HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.customer]]): rowcount = 1600000.0, cumulative cost = {0}, id = 1915\n                HiveProject(cs_sales_price=[$1], cs_bill_customer_sk=[$0]): rowcount = 572137.341568095, cumulative cost = {2.8654985744464284E8 rows, 2.865499878892857E8 cpu, 1878402.8571428573 io}, id = 1976\n                  HiveJoin(condition=[=($2, $3)], joinType=[inner], joinAlgorithm=[map_join], cost=[{2.8654985744464284E8 rows, 2.865499878892857E8 cpu, 1878402.8571428573 io}]): rowcount = 572137.341568095, cumulative cost = {2.8654985744464284E8 rows, 2.865499878892857E8 cpu, 1878402.8571428573 io}, id = 2005\n                    HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.catalog_sales]]): rowcount = 2.86549727E8, cumulative cost = {0}, id = 1910\n                    HiveFilter(condition=[AND(=($2, 2), =($1, 2000))]): rowcount = 130.44464285714287, cumulative cost = {0.0 rows, 0.0 cpu, 0.0 io}, id = 1972\n                      HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.date_dim]]): rowcount = 73049.0, cumulative cost = {0}, id = 1911\n{code}","customfield_10010":null,"timetracking":{},"customfield_12312026":null,"customfield_12312023":null,"customfield_12310320":null,"customfield_12312024":null,"customfield_12312340":null,"attachment":[],"aggregatetimeestimate":null,"customfield_12312341":null,"customfield_12312220":null,"customfield_12312022":null,"customfield_12310921":null,"customfield_12310920":"9223372036854775807","customfield_12312823":null,"summary":"CBO (Calcite Return Path): TPC-DS Q15 in-efficient join order ","creator":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mmokhtar","name":"mmokhtar","key":"mmokhtar","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=mmokhtar&avatarId=21863","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=mmokhtar&avatarId=21863","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=mmokhtar&avatarId=21863","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=mmokhtar&avatarId=21863"},"displayName":"Mostafa Mokhtar","active":true,"timeZone":"America/Los_Angeles"},"subtasks":[],"customfield_12310291":null,"reporter":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mmokhtar","name":"mmokhtar","key":"mmokhtar","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=mmokhtar&avatarId=21863","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=mmokhtar&avatarId=21863","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=mmokhtar&avatarId=21863","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=mmokhtar&avatarId=21863"},"displayName":"Mostafa Mokhtar","active":true,"timeZone":"America/Los_Angeles"},"customfield_12310290":null,"aggregateprogress":{"progress":0,"total":0},"customfield_12311024":null,"environment":null,"customfield_12313520":null,"customfield_12311020":null,"duedate":null,"customfield_12310250":null,"progress":{"progress":0,"total":0},"comment":{"comments":[{"self":"https://issues.apache.org/jira/rest/api/2/issue/12786887/comment/14387752","id":"14387752","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mmokhtar","name":"mmokhtar","key":"mmokhtar","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=mmokhtar&avatarId=21863","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=mmokhtar&avatarId=21863","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=mmokhtar&avatarId=21863","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=mmokhtar&avatarId=21863"},"displayName":"Mostafa Mokhtar","active":true,"timeZone":"America/Los_Angeles"},"body":"[~jpullokkaran]\n\nI looked at HiveJoin.java:chooseJoinAlgorithmAndGetCost and noticed catalog_sales x date_dim is not one of the joins that get costed, which means that re-ordering happened already and this join wasn't considered selective.\nAs you mentioned the catalog_sales x date_dim join must have been trimmed earlier.\n\n{code}\n2015-03-30 20:56:30,676 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(160)) - HiveJoin(condition=[=($0, $3)], joinType=[inner], joinAlgorithm=[none], cost=[null])\n  HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.catalog_sales]])\n  HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.customer]])\n\n2015-03-30 20:56:30,694 DEBUG [main]: stats.StatsUtils (StatsUtils.java:setUnknownRcDsToAverage(383)) - Estimated average row size: 8\n2015-03-30 20:56:31,030 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(169)) - COMMONJOIN possible 2\n2015-03-30 20:56:31,031 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(170)) - COMMONJOIN cost: {2.88149727E8 rows, 5.891110492737591E9 cpu, 3.1120170516E12 io}\n2015-03-30 20:56:31,046 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(180)) - MAPJOIN possible\n2015-03-30 20:56:31,046 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(181)) - MAPJOIN cost: {2.88149727E8 rows, 2.89749727E8 cpu, 3.84E10 io}\n2015-03-30 20:56:31,049 INFO  [main]: log.PerfLogger (PerfLogger.java:PerfLogBegin(121)) - <PERFLOG method=partition-retrieving from=org.apache.hadoop.hive.ql.optimizer.ppr.PartitionPruner>\n2015-03-30 20:56:31,049 INFO  [main]: log.PerfLogger (PerfLogger.java:PerfLogEnd(148)) - </PERFLOG method=partition-retrieving start=1427763391049 end=1427763391049 duration=0 from=org.apache.hadoop.hive.ql.optimizer.ppr.PartitionPruner>\n2015-03-30 20:56:31,072 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(160)) - HiveJoin(condition=[=($1, $2)], joinType=[inner], joinAlgorithm=[none], cost=[null])\n  HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.customer]])\n  HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.customer_address]])\n\n2015-03-30 20:56:31,093 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(169)) - COMMONJOIN possible 2\n2015-03-30 20:56:31,093 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(170)) - COMMONJOIN cost: {2400000.0 rows, 3.613071630485607E7 cpu, 2.89314882E10 io}\n2015-03-30 20:56:31,101 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(180)) - MAPJOIN possible\n2015-03-30 20:56:31,101 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(181)) - MAPJOIN cost: {2400000.0 rows, 3200000.0 cpu, 0.0 io}\n2015-03-30 20:56:31,108 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(160)) - HiveJoin(condition=[=($0, $3)], joinType=[inner], joinAlgorithm=[none], cost=[null])\n  HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.catalog_sales]])\n  HiveJoin(condition=[=($1, $2)], joinType=[inner], joinAlgorithm=[map_join], cost=[{2400000.0 rows, 3200000.0 cpu, 0.0 io}])\n    HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.customer]])\n    HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.customer_address]])\n\n2015-03-30 20:56:31,109 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(169)) - COMMONJOIN possible 2\n2015-03-30 20:56:31,109 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(170)) - COMMONJOIN cost: {2.88358116798421E8 rows, 5.894517244918468E9 cpu, 3.140605701919576E12 io}\n2015-03-30 20:56:31,117 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(180)) - MAPJOIN possible\n2015-03-30 20:56:31,117 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(181)) - MAPJOIN cost: {2.88358116798421E8 rows, 5.74907843798421E8 cpu, 1.82245626372E13 io}\n2015-03-30 20:56:31,123 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(160)) - HiveJoin(condition=[=($4, $5)], joinType=[inner], joinAlgorithm=[none], cost=[null])\n  HiveJoin(condition=[=($0, $3)], joinType=[inner], joinAlgorithm=[map_join], cost=[{2.88149727E8 rows, 2.89749727E8 cpu, 3.84E10 io}])\n    HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.catalog_sales]])\n    HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.customer]])\n  HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.customer_address]])\n\n2015-03-30 20:56:31,124 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(169)) - COMMONJOIN possible 2\n2015-03-30 20:56:31,125 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(170)) - COMMONJOIN cost: {3.246707731214128E8 rows, 6.6820694227737255E9 cpu, 7.007260187622517E12 io}\n2015-03-30 20:56:31,132 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(180)) - MAPJOIN possible\n2015-03-30 20:56:31,132 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(181)) - MAPJOIN cost: {3.246707731214128E8 rows, 3.254707731214128E8 cpu, 4.91951724E10 io}\n2015-03-30 20:56:31,138 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(160)) - HiveJoin(condition=[=($1, $2)], joinType=[inner], joinAlgorithm=[none], cost=[null])\n  HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.customer]])\n  HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.customer_address]])\n\n2015-03-30 20:56:31,139 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(169)) - COMMONJOIN possible 2\n2015-03-30 20:56:31,139 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(170)) - COMMONJOIN cost: {2400000.0 rows, 3.613071630485607E7 cpu, 2.89314882E10 io}\n2015-03-30 20:56:31,144 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(180)) - MAPJOIN possible\n2015-03-30 20:56:31,144 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(181)) - MAPJOIN cost: {2400000.0 rows, 3200000.0 cpu, 0.0 io}\n2015-03-30 20:56:31,149 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(160)) - HiveJoin(condition=[=($0, $3)], joinType=[inner], joinAlgorithm=[none], cost=[null])\n  HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.catalog_sales]])\n  HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.customer]])\n\n2015-03-30 20:56:31,150 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(169)) - COMMONJOIN possible 2\n2015-03-30 20:56:31,150 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(170)) - COMMONJOIN cost: {2.88149727E8 rows, 5.891110492737591E9 cpu, 3.1120170516E12 io}\n2015-03-30 20:56:31,156 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(180)) - MAPJOIN possible\n2015-03-30 20:56:31,156 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(181)) - MAPJOIN cost: {2.88149727E8 rows, 2.89749727E8 cpu, 3.84E10 io}\n2015-03-30 20:56:31,161 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(160)) - HiveJoin(condition=[=($4, $5)], joinType=[inner], joinAlgorithm=[none], cost=[null])\n  HiveJoin(condition=[=($0, $3)], joinType=[inner], joinAlgorithm=[map_join], cost=[{2.88149727E8 rows, 2.89749727E8 cpu, 3.84E10 io}])\n    HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.catalog_sales]])\n    HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.customer]])\n  HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.customer_address]])\n\n2015-03-30 20:56:31,162 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(169)) - COMMONJOIN possible 2\n2015-03-30 20:56:31,162 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(170)) - COMMONJOIN cost: {3.246707731214128E8 rows, 6.6820694227737255E9 cpu, 7.007260187622517E12 io}\n2015-03-30 20:56:31,168 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(180)) - MAPJOIN possible\n2015-03-30 20:56:31,168 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(181)) - MAPJOIN cost: {3.246707731214128E8 rows, 3.254707731214128E8 cpu, 4.91951724E10 io}\n2015-03-30 20:56:31,172 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(160)) - HiveJoin(condition=[=($0, $3)], joinType=[inner], joinAlgorithm=[none], cost=[null])\n  HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.catalog_sales]])\n  HiveJoin(condition=[=($1, $2)], joinType=[inner], joinAlgorithm=[map_join], cost=[{2400000.0 rows, 3200000.0 cpu, 0.0 io}])\n    HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.customer]])\n    HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.customer_address]])\n\n2015-03-30 20:56:31,173 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(169)) - COMMONJOIN possible 2\n2015-03-30 20:56:31,173 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(170)) - COMMONJOIN cost: {2.88358116798421E8 rows, 5.894517244918468E9 cpu, 3.140605701919576E12 io}\n2015-03-30 20:56:31,179 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(180)) - MAPJOIN possible\n2015-03-30 20:56:31,179 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(181)) - MAPJOIN cost: {2.88358116798421E8 rows, 5.74907843798421E8 cpu, 1.82245626372E13 io}\n2015-03-30 20:56:31,183 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(160)) - HiveJoin(condition=[=($1, $2)], joinType=[inner], joinAlgorithm=[none], cost=[null])\n  HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.customer]])\n  HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.customer_address]])\n\n2015-03-30 20:56:31,184 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(169)) - COMMONJOIN possible 2\n2015-03-30 20:56:31,185 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(170)) - COMMONJOIN cost: {2400000.0 rows, 3.613071630485607E7 cpu, 2.89314882E10 io}\n2015-03-30 20:56:31,189 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(180)) - MAPJOIN possible\n2015-03-30 20:56:31,190 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(181)) - MAPJOIN cost: {2400000.0 rows, 3200000.0 cpu, 0.0 io}\n2015-03-30 20:56:31,194 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(160)) - HiveJoin(condition=[=($0, $3)], joinType=[inner], joinAlgorithm=[none], cost=[null])\n  HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.catalog_sales]])\n  HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.customer]])\n\n2015-03-30 20:56:31,196 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(169)) - COMMONJOIN possible 2\n2015-03-30 20:56:31,196 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(170)) - COMMONJOIN cost: {2.88149727E8 rows, 5.891110492737591E9 cpu, 3.1120170516E12 io}\n2015-03-30 20:56:31,200 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(180)) - MAPJOIN possible\n2015-03-30 20:56:31,201 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(181)) - MAPJOIN cost: {2.88149727E8 rows, 2.89749727E8 cpu, 3.84E10 io}\n2015-03-30 20:56:31,205 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(160)) - HiveJoin(condition=[=($4, $5)], joinType=[inner], joinAlgorithm=[none], cost=[null])\n  HiveJoin(condition=[=($0, $3)], joinType=[inner], joinAlgorithm=[map_join], cost=[{2.88149727E8 rows, 2.89749727E8 cpu, 3.84E10 io}])\n    HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.catalog_sales]])\n    HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.customer]])\n  HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.customer_address]])\n\n2015-03-30 20:56:31,206 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(169)) - COMMONJOIN possible 2\n2015-03-30 20:56:31,206 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(170)) - COMMONJOIN cost: {3.246707731214128E8 rows, 6.6820694227737255E9 cpu, 7.007260187622517E12 io}\n2015-03-30 20:56:31,211 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(180)) - MAPJOIN possible\n2015-03-30 20:56:31,211 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(181)) - MAPJOIN cost: {3.246707731214128E8 rows, 3.254707731214128E8 cpu, 4.91951724E10 io}\n2015-03-30 20:56:31,215 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(160)) - HiveJoin(condition=[=($0, $3)], joinType=[inner], joinAlgorithm=[none], cost=[null])\n  HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.catalog_sales]])\n  HiveJoin(condition=[=($1, $2)], joinType=[inner], joinAlgorithm=[map_join], cost=[{2400000.0 rows, 3200000.0 cpu, 0.0 io}])\n    HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.customer]])\n    HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.customer_address]])\n\n2015-03-30 20:56:31,216 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(169)) - COMMONJOIN possible 2\n2015-03-30 20:56:31,216 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(170)) - COMMONJOIN cost: {2.88358116798421E8 rows, 5.894517244918468E9 cpu, 3.140605701919576E12 io}\n2015-03-30 20:56:31,220 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(180)) - MAPJOIN possible\n2015-03-30 20:56:31,221 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(181)) - MAPJOIN cost: {2.88358116798421E8 rows, 5.74907843798421E8 cpu, 1.82245626372E13 io}\n2015-03-30 20:56:31,231 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(160)) - HiveJoin(condition=[=($4, $5)], joinType=[inner], joinAlgorithm=[map_join], cost=[null])\n  HiveJoin(condition=[=($0, $3)], joinType=[inner], joinAlgorithm=[map_join], cost=[{2.88149727E8 rows, 2.89749727E8 cpu, 3.84E10 io}])\n    HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.catalog_sales]])\n    HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.customer]])\n  HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.customer_address]])\n\n2015-03-30 20:56:31,235 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(169)) - COMMONJOIN possible 2\n2015-03-30 20:56:31,235 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(170)) - COMMONJOIN cost: {3.246707731214128E8 rows, 6.6820694227737255E9 cpu, 7.007260187622517E12 io}\n2015-03-30 20:56:31,240 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(180)) - MAPJOIN possible\n2015-03-30 20:56:31,241 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(181)) - MAPJOIN cost: {3.246707731214128E8 rows, 3.254707731214128E8 cpu, 4.91951724E10 io}\n2015-03-30 20:56:31,244 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(160)) - HiveJoin(condition=[=($0, $3)], joinType=[inner], joinAlgorithm=[map_join], cost=[{2.88149727E8 rows, 2.89749727E8 cpu, 3.84E10 io}])\n  HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.catalog_sales]])\n  HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.customer]])\n\n2015-03-30 20:56:31,245 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(169)) - COMMONJOIN possible 2\n2015-03-30 20:56:31,246 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(170)) - COMMONJOIN cost: {2.88149727E8 rows, 5.891110492737591E9 cpu, 3.1120170516E12 io}\n2015-03-30 20:56:31,247 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(180)) - MAPJOIN possible\n2015-03-30 20:56:31,248 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(181)) - MAPJOIN cost: {2.88149727E8 rows, 2.89749727E8 cpu, 3.84E10 io}\n2015-03-30 20:56:31,320 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(160)) - HiveJoin(condition=[=($2, $8)], joinType=[inner], joinAlgorithm=[none], cost=[null])\n  HiveFilter(condition=[OR(in(substr($7, 1, 5), '85669', '86197', '88274', '83405', '86475', '85392', '85460', '80348', '81792'), in($6, 'CA', 'WA', 'GA'), >($1, 5E2))])\n    HiveProject(cs_bill_customer_sk=[$0], cs_sales_price=[$1], cs_sold_date_sk=[$2], c_customer_sk=[$3], c_current_addr_sk=[$4], ca_address_sk=[$5], ca_state=[$6], ca_zip=[$7])\n      HiveJoin(condition=[=($4, $5)], joinType=[inner], joinAlgorithm=[map_join], cost=[{3.246707731214128E8 rows, 3.254707731214128E8 cpu, 4.91951724E10 io}])\n        HiveJoin(condition=[=($0, $3)], joinType=[inner], joinAlgorithm=[map_join], cost=[{2.88149727E8 rows, 2.89749727E8 cpu, 3.84E10 io}])\n          HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.catalog_sales]])\n          HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.customer]])\n        HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.customer_address]])\n  HiveFilter(condition=[AND(=($2, 2), =($1, 2000))])\n    HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.date_dim]])\n\n2015-03-30 20:56:31,323 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(169)) - COMMONJOIN possible 2\n2015-03-30 20:56:31,323 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(170)) - COMMONJOIN cost: {1.36661031991844E8 rows, 2.6967321460432544E9 cpu, 4.942256188845978E12 io}\n2015-03-30 20:56:31,333 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(180)) - MAPJOIN possible\n2015-03-30 20:56:31,334 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(181)) - MAPJOIN cost: {1.36661031991844E8 rows, 1.3666116243648687E8 cpu, 0.0 io}\n2015-03-30 20:56:31,339 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(160)) - HiveJoin(condition=[=($2, $8)], joinType=[inner], joinAlgorithm=[none], cost=[null])\n  HiveFilter(condition=[OR(in(substr($7, 1, 5), '85669', '86197', '88274', '83405', '86475', '85392', '85460', '80348', '81792'), in($6, 'CA', 'WA', 'GA'), >($1, 5E2))])\n    HiveProject(cs_bill_customer_sk=[$0], cs_sales_price=[$1], cs_sold_date_sk=[$2], c_customer_sk=[$3], c_current_addr_sk=[$4], ca_address_sk=[$5], ca_state=[$6], ca_zip=[$7])\n      HiveJoin(condition=[=($4, $5)], joinType=[inner], joinAlgorithm=[map_join], cost=[{3.246707731214128E8 rows, 3.254707731214128E8 cpu, 4.91951724E10 io}])\n        HiveJoin(condition=[=($0, $3)], joinType=[inner], joinAlgorithm=[map_join], cost=[{2.88149727E8 rows, 2.89749727E8 cpu, 3.84E10 io}])\n          HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.catalog_sales]])\n          HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.customer]])\n        HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.customer_address]])\n  HiveFilter(condition=[AND(=($2, 2), =($1, 2000))])\n    HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.date_dim]])\n\n2015-03-30 20:56:31,340 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(169)) - COMMONJOIN possible 2\n2015-03-30 20:56:31,340 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(170)) - COMMONJOIN cost: {1.36661031991844E8 rows, 2.6967321460432544E9 cpu, 4.942256188845978E12 io}\n2015-03-30 20:56:31,345 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(180)) - MAPJOIN possible\n2015-03-30 20:56:31,346 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(181)) - MAPJOIN cost: {1.36661031991844E8 rows, 1.3666116243648687E8 cpu, 0.0 io}\n2015-03-30 20:56:31,353 DEBUG [main]: parse.CalcitePlanner (CalcitePlanner.java:apply(839)) - CBO Planning details:\n\n2015-03-30 20:56:31,355 DEBUG [main]: parse.CalcitePlanner (CalcitePlanner.java:apply(840)) - Original Plan:\nHiveSort(fetch=[100])\n  HiveSort(sort0=[$0], dir0=[ASC])\n    HiveProject(ca_zip=[$0], _o__c1=[$1])\n      HiveAggregate(group=[{0}], agg#0=[sum($1)])\n        HiveProject($f0=[$67], $f1=[$20])\n          HiveFilter(condition=[AND(=($2, $37), =($41, $58), OR(in(substr($67, 1, 5), '85669', '86197', '88274', '83405', '86475', '85392', '85460', '80348', '81792'), in($66, 'CA', 'WA', 'GA'), >($20, 5E2)), =($33, $74), =($84, 2), =($80, 2000))])\n            HiveJoin(condition=[true], joinType=[inner], joinAlgorithm=[none], cost=[null])\n              HiveJoin(condition=[true], joinType=[inner], joinAlgorithm=[none], cost=[null])\n                HiveJoin(condition=[true], joinType=[inner], joinAlgorithm=[none], cost=[null])\n                  HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.catalog_sales]])\n                  HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.customer]])\n                HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.customer_address]])\n              HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.date_dim]])\n\n2015-03-30 20:56:31,356 DEBUG [main]: parse.CalcitePlanner (CalcitePlanner.java:apply(841)) - Plan After PPD, PartPruning, ColumnPruning:\nHiveSort(fetch=[100])\n  HiveSort(sort0=[$0], dir0=[ASC])\n    HiveAggregate(group=[{0}], agg#0=[sum($1)])\n      HiveProject($f0=[$7], $f1=[$1])\n        HiveJoin(condition=[=($2, $8)], joinType=[inner], joinAlgorithm=[none], cost=[null])\n          HiveFilter(condition=[OR(in(substr($7, 1, 5), '85669', '86197', '88274', '83405', '86475', '85392', '85460', '80348', '81792'), in($6, 'CA', 'WA', 'GA'), >($1, 5E2))])\n            HiveJoin(condition=[=($4, $5)], joinType=[inner], joinAlgorithm=[none], cost=[null])\n              HiveJoin(condition=[=($0, $3)], joinType=[inner], joinAlgorithm=[none], cost=[null])\n                HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.catalog_sales]])\n                HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.customer]])\n              HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.customer_address]])\n          HiveFilter(condition=[AND(=($2, 2), =($1, 2000))])\n            HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.date_dim]])\n\n2015-03-30 20:56:31,376 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(160)) - HiveJoin(condition=[=($2, $8)], joinType=[inner], joinAlgorithm=[map_join], cost=[{1.36661031991844E8 rows, 1.3666116243648687E8 cpu, 0.0 io}])\n  HiveFilter(condition=[OR(in(substr($7, 1, 5), '85669', '86197', '88274', '83405', '86475', '85392', '85460', '80348', '81792'), in($6, 'CA', 'WA', 'GA'), >($1, 5E2))])\n    HiveJoin(condition=[=($4, $5)], joinType=[inner], joinAlgorithm=[map_join], cost=[{3.246707731214128E8 rows, 3.254707731214128E8 cpu, 4.91951724E10 io}])\n      HiveJoin(condition=[=($0, $3)], joinType=[inner], joinAlgorithm=[map_join], cost=[{2.88149727E8 rows, 2.89749727E8 cpu, 3.84E10 io}])\n        HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.catalog_sales]])\n        HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.customer]])\n      HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.customer_address]])\n  HiveFilter(condition=[AND(=($2, 2), =($1, 2000))])\n    HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.date_dim]])\n\n2015-03-30 20:56:31,377 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(169)) - COMMONJOIN possible 2\n2015-03-30 20:56:31,377 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(170)) - COMMONJOIN cost: {1.36661031991844E8 rows, 2.6967321460432544E9 cpu, 4.942256188845978E12 io}\n2015-03-30 20:56:31,378 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(180)) - MAPJOIN possible\n2015-03-30 20:56:31,379 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(181)) - MAPJOIN cost: {1.36661031991844E8 rows, 1.3666116243648687E8 cpu, 0.0 io}\n2015-03-30 20:56:31,382 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(160)) - HiveJoin(condition=[=($4, $5)], joinType=[inner], joinAlgorithm=[map_join], cost=[{3.246707731214128E8 rows, 3.254707731214128E8 cpu, 4.91951724E10 io}])\n  HiveJoin(condition=[=($0, $3)], joinType=[inner], joinAlgorithm=[map_join], cost=[{2.88149727E8 rows, 2.89749727E8 cpu, 3.84E10 io}])\n    HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.catalog_sales]])\n    HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.customer]])\n  HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.customer_address]])\n\n2015-03-30 20:56:31,383 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(169)) - COMMONJOIN possible 2\n2015-03-30 20:56:31,383 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(170)) - COMMONJOIN cost: {3.246707731214128E8 rows, 6.6820694227737255E9 cpu, 7.007260187622517E12 io}\n2015-03-30 20:56:31,384 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(180)) - MAPJOIN possible\n2015-03-30 20:56:31,385 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(181)) - MAPJOIN cost: {3.246707731214128E8 rows, 3.254707731214128E8 cpu, 4.91951724E10 io}\n2015-03-30 20:56:31,387 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(160)) - HiveJoin(condition=[=($0, $3)], joinType=[inner], joinAlgorithm=[map_join], cost=[{2.88149727E8 rows, 2.89749727E8 cpu, 3.84E10 io}])\n  HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.catalog_sales]])\n  HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.customer]])\n\n2015-03-30 20:56:31,388 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(169)) - COMMONJOIN possible 2\n2015-03-30 20:56:31,388 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(170)) - COMMONJOIN cost: {2.88149727E8 rows, 5.891110492737591E9 cpu, 3.1120170516E12 io}\n2015-03-30 20:56:31,389 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(180)) - MAPJOIN possible\n2015-03-30 20:56:31,390 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(181)) - MAPJOIN cost: {2.88149727E8 rows, 2.89749727E8 cpu, 3.84E10 io}\n{code}","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mmokhtar","name":"mmokhtar","key":"mmokhtar","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=mmokhtar&avatarId=21863","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=mmokhtar&avatarId=21863","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=mmokhtar&avatarId=21863","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=mmokhtar&avatarId=21863"},"displayName":"Mostafa Mokhtar","active":true,"timeZone":"America/Los_Angeles"},"created":"2015-03-31T01:09:18.831+0000","updated":"2015-03-31T01:09:18.831+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12786887/comment/15407306","id":"15407306","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=nemon","name":"nemon","key":"nemon","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=nemon&avatarId=22931","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=nemon&avatarId=22931","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=nemon&avatarId=22931","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=nemon&avatarId=22931"},"displayName":"Nemon Lou","active":true,"timeZone":"Asia/Shanghai"},"body":"This filter prevents joining date_dim first:\n{noformat}\n( substr(ca_zip,1,5) in ('85669', '86197','88274','83405','86475',\n '85392', '85460', '80348', '81792')\n or customer_address.ca_state in ('CA','WA','GA')\n or catalog_sales.cs_sales_price > 500)\n{noformat}\nWith this filter, table date_dim can not be combined into the same mutijoin RelNode with other 3 tables. \n{code}\n  private boolean canCombine(RelNode input, boolean nullGenerating) {\n    return input instanceof MultiJoin\n        && !((MultiJoin) input).isFullOuterJoin()\n        && !((MultiJoin) input).containsOuter()\n        && !nullGenerating;\n  }\n{code}\nThe input is a filter RelNode instead of MultiJoin.\n{noformat}\n2016-08-04 14:23:38,637 | DEBUG | HiveServer2-Handler-Pool: Thread-123 | Original Plan:\nHiveSort(fetch=[100])\n  HiveSort(sort0=[$0], dir0=[ASC])\n    HiveProject(ca_zip=[$0], _o__c1=[$1])\n      HiveAggregate(group=[{0}], agg#0=[sum($1)])\n        HiveProject($f0=[$67], $f1=[$20])\n          HiveFilter(condition=[AND(=($2, $37), =($41, $58), =($33, $74), OR(in(substr($67, 1, 5), '85669', '86197', '88274', '83405', '86475', '85392', '85460', '80348', '81792'), in($66, 'CA', 'WA', 'GA'), >($20, 5E2)), =($84, 2), =($80, 2000))])\n            HiveJoin(condition=[true], joinType=[inner], algorithm=[none], cost=[not available])\n              HiveJoin(condition=[true], joinType=[inner], algorithm=[none], cost=[not available])\n                HiveJoin(condition=[true], joinType=[inner], algorithm=[none], cost=[not available])\n                  HiveTableScan(table=[[tpcds_bin_partitioned_orc_10.catalog_sales]])\n                  HiveTableScan(table=[[tpcds_bin_partitioned_orc_10.customer]])\n                HiveTableScan(table=[[tpcds_bin_partitioned_orc_10.customer_address]])\n              HiveTableScan(table=[[tpcds_bin_partitioned_orc_10.date_dim]])\n | org.apache.hadoop.hive.ql.parse.CalcitePlanner$CalcitePlannerAction.apply(CalcitePlanner.java:911)\n2016-08-04 14:23:38,654 | DEBUG | HiveServer2-Handler-Pool: Thread-123 | Plan After PPD, PartPruning, ColumnPruning:\nHiveSort(fetch=[100])\n  HiveSort(sort0=[$0], dir0=[ASC])\n    HiveAggregate(group=[{0}], agg#0=[sum($1)])\n      HiveProject($f0=[$7], $f1=[$1])\n        HiveJoin(condition=[=($2, $8)], joinType=[inner], algorithm=[none], cost=[not available])\n          HiveFilter(condition=[OR(in(substr($7, 1, 5), '85669', '86197', '88274', '83405', '86475', '85392', '85460', '80348', '81792'), in($6, 'CA', 'WA', 'GA'), >($1, 5E2))])\n            HiveJoin(condition=[=($4, $5)], joinType=[inner], algorithm=[none], cost=[not available])\n              HiveJoin(condition=[=($0, $3)], joinType=[inner], algorithm=[none], cost=[not available])\n                HiveProject(cs_bill_customer_sk=[$2], cs_sales_price=[$20], cs_sold_date_sk=[$33])\n                  HiveTableScan(table=[[tpcds_bin_partitioned_orc_10.catalog_sales]])\n                HiveProject(c_customer_sk=[$0], c_current_addr_sk=[$4])\n                  HiveTableScan(table=[[tpcds_bin_partitioned_orc_10.customer]])\n              HiveProject(ca_address_sk=[$0], ca_state=[$8], ca_zip=[$9])\n                HiveTableScan(table=[[tpcds_bin_partitioned_orc_10.customer_address]])\n          HiveProject(d_date_sk=[$0], d_year=[$6], d_qoy=[$10])\n            HiveFilter(condition=[AND(=($10, 2), =($6, 2000))])\n              HiveTableScan(table=[[tpcds_bin_partitioned_orc_10.date_dim]])\n | org.apache.hadoop.hive.ql.parse.CalcitePlanner$CalcitePlannerAction.apply(CalcitePlanner.java:912)\n{noformat}\n\nReplacing 'or' with 'and' can help.\n{noformat}\n ( substr(ca_zip,1,5) in ('85669', '86197','88274','83405','86475',\n '85392', '85460', '80348', '81792')\n and customer_address.ca_state in ('CA','WA','GA')\n and catalog_sales.cs_sales_price > 500)\n{noformat}","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=nemon","name":"nemon","key":"nemon","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=nemon&avatarId=22931","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=nemon&avatarId=22931","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=nemon&avatarId=22931","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=nemon&avatarId=22931"},"displayName":"Nemon Lou","active":true,"timeZone":"Asia/Shanghai"},"created":"2016-08-04T06:52:44.660+0000","updated":"2016-08-04T06:52:44.660+0000"}],"maxResults":2,"total":2,"startAt":0},"votes":{"self":"https://issues.apache.org/jira/rest/api/2/issue/HIVE-10153/votes","votes":0,"hasVoted":false},"worklog":{"startAt":0,"maxResults":20,"total":0,"worklogs":[]},"customfield_12311820":"0|i27kgv:"}}