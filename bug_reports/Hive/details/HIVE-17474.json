{"expand":"renderedFields,names,schema,operations,editmeta,changelog,versionedRepresentations","id":"13100353","self":"https://issues.apache.org/jira/rest/api/2/issue/13100353","key":"HIVE-17474","fields":{"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype","name":"Bug","subtask":false,"avatarId":21133},"timespent":null,"project":{"self":"https://issues.apache.org/jira/rest/api/2/project/12310843","id":"12310843","key":"HIVE","name":"Hive","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/projectavatar?pid=12310843&avatarId=11935","24x24":"https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12310843&avatarId=11935","16x16":"https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12310843&avatarId=11935","32x32":"https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12310843&avatarId=11935"},"projectCategory":{"self":"https://issues.apache.org/jira/rest/api/2/projectCategory/10292","id":"10292","description":"Scalable Distributed Computing","name":"Hadoop"}},"fixVersions":[],"aggregatetimespent":null,"resolution":{"self":"https://issues.apache.org/jira/rest/api/2/resolution/8","id":"8","description":"The described issue is not actually a problem - it is as designed.","name":"Not A Problem"},"customfield_12312322":null,"customfield_12310220":"2017-09-13T02:32:03.044+0000","customfield_12312520":null,"customfield_12312323":null,"customfield_12312521":"Tue Sep 19 07:34:33 UTC 2017","customfield_12310420":"9223372036854775807","customfield_12312320":null,"customfield_12310222":"1_*:*_1_*:*_19109909_*|*_4_*:*_1_*:*_1189777763_*|*_5_*:*_2_*:*_429427738","customfield_12312321":null,"resolutiondate":"2017-09-26T02:28:39.542+0000","workratio":-1,"customfield_12312328":null,"customfield_12312329":null,"customfield_12312923":null,"customfield_12312326":null,"customfield_12312920":null,"customfield_12310300":null,"customfield_12312327":null,"customfield_12312921":null,"customfield_12312324":null,"customfield_12312720":null,"customfield_12312325":null,"lastViewed":null,"watches":{"self":"https://issues.apache.org/jira/rest/api/2/issue/HIVE-17474/watchers","watchCount":5,"isWatching":false},"created":"2017-09-07T03:23:24.238+0000","customfield_12310192":null,"customfield_12310191":null,"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.svg","name":"Major","id":"3"},"labels":[],"customfield_12312333":null,"customfield_12310230":null,"customfield_12312334":null,"customfield_12313422":"false","customfield_12310310":"3.0","customfield_12312331":null,"customfield_12312332":null,"timeestimate":null,"aggregatetimeoriginalestimate":null,"customfield_12311120":null,"customfield_12312330":null,"versions":[],"issuelinks":[],"customfield_12312339":null,"assignee":null,"customfield_12312337":null,"customfield_12312338":null,"updated":"2017-09-26T02:28:39.639+0000","customfield_12312335":null,"customfield_12312336":null,"status":{"self":"https://issues.apache.org/jira/rest/api/2/status/5","description":"A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/resolved.png","name":"Resolved","id":"5","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Done"}},"components":[],"timeoriginalestimate":null,"description":"in [DS/query70|https://github.com/kellyzly/hive-testbench/blob/hive14/sample-queries-tpcds/query70.sql]. {code}\nselect  \n    sum(ss_net_profit) as total_sum\n   ,s_state\n   ,s_county\n   ,grouping__id as lochierarchy\n   , rank() over(partition by grouping__id, case when grouping__id == 2 then s_state end order by sum(ss_net_profit)) as rank_within_parent\nfrom\n    store_sales ss join date_dim d1 on d1.d_date_sk = ss.ss_sold_date_sk\n    join store s on s.s_store_sk  = ss.ss_store_sk\n where\n    d1.d_month_seq between 1193 and 1193+11\n and s.s_state in\n             ( select s_state\n               from  (select s_state as s_state, sum(ss_net_profit),\n                             rank() over ( partition by s_state order by sum(ss_net_profit) desc) as ranking\n                      from   store_sales, store, date_dim\n                      where  d_month_seq between 1193 and 1193+11\n                            and date_dim.d_date_sk = store_sales.ss_sold_date_sk\n                            and store.s_store_sk  = store_sales.ss_store_sk\n                      group by s_state\n                     ) tmp1 \n               where ranking <= 5\n             )\n group by s_state,s_county with rollup\norder by\n   lochierarchy desc\n  ,case when lochierarchy = 0 then s_state end\n  ,rank_within_parent\n limit 100;\n{code}\n let's analyze the query,\npart1: it calculates the sub-query and get the result of the state which ss_net_profit is less than 5.\npart2: big table store_sales join small tables date_dim, store and get the result.\npart3: part1 join part2\nthe problem is on the part3, this is common join. The cardinality of part1 and part2 is low as there are not very different values about states( actually there are 30 different values in the table store).  If use common join, big data will go to the 30 reducers.","customfield_10010":null,"timetracking":{},"customfield_12312026":null,"customfield_12312023":null,"customfield_12310320":null,"customfield_12312024":null,"customfield_12312340":null,"attachment":[{"self":"https://issues.apache.org/jira/rest/api/2/attachment/12887837","id":"12887837","filename":"explain.70.after.analyze","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kellyzly","name":"kellyzly","key":"kellyzly","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"liyunzhang","active":true,"timeZone":"Asia/Shanghai"},"created":"2017-09-19T06:41:02.487+0000","size":19423,"mimeType":"application/octet-stream","content":"https://issues.apache.org/jira/secure/attachment/12887837/explain.70.after.analyze"},{"self":"https://issues.apache.org/jira/rest/api/2/attachment/12887836","id":"12887836","filename":"explain.70.before.analyze","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kellyzly","name":"kellyzly","key":"kellyzly","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"liyunzhang","active":true,"timeZone":"Asia/Shanghai"},"created":"2017-09-19T06:41:07.843+0000","size":21031,"mimeType":"application/octet-stream","content":"https://issues.apache.org/jira/secure/attachment/12887836/explain.70.before.analyze"},{"self":"https://issues.apache.org/jira/rest/api/2/attachment/12886590","id":"12886590","filename":"explain.70.vec","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kellyzly","name":"kellyzly","key":"kellyzly","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"liyunzhang","active":true,"timeZone":"Asia/Shanghai"},"created":"2017-09-12T08:14:12.004+0000","size":22182,"mimeType":"application/octet-stream","content":"https://issues.apache.org/jira/secure/attachment/12886590/explain.70.vec"}],"aggregatetimeestimate":null,"customfield_12312341":null,"customfield_12312220":null,"customfield_12312022":null,"customfield_12310921":null,"customfield_12310920":"9223372036854775807","customfield_12312823":null,"summary":"Poor Performance about subquery like DS/query70 on HoS","creator":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kellyzly","name":"kellyzly","key":"kellyzly","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"liyunzhang","active":true,"timeZone":"Asia/Shanghai"},"subtasks":[],"customfield_12310291":null,"reporter":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kellyzly","name":"kellyzly","key":"kellyzly","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"liyunzhang","active":true,"timeZone":"Asia/Shanghai"},"customfield_12310290":null,"aggregateprogress":{"progress":0,"total":0},"customfield_12311024":null,"environment":null,"customfield_12313520":null,"customfield_12311020":null,"duedate":null,"customfield_12310250":null,"progress":{"progress":0,"total":0},"comment":{"comments":[{"self":"https://issues.apache.org/jira/rest/api/2/issue/13100353/comment/16162657","id":"16162657","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kellyzly","name":"kellyzly","key":"kellyzly","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"liyunzhang","active":true,"timeZone":"Asia/Shanghai"},"body":"the execution plan of hive on spark about DS/query70 is [attached|https://issues.apache.org/jira/secure/attachment/12886590/explain.70.vec].\nInvestigate the problem, i found that several points\n1. the statistics for sub-query is not correct, it estimates nearly 36g about the result while actually the result is very small(nearly 30 rows about state info). Because of this, the join between part1 and part2(see jira description) is common join not map join. Maybe the calculation of statistics estimation need be more intelligent in such complex sub-query.\n{code}\n  Reducer 12 \n            Reduce Operator Tree:\n              Select Operator\n                expressions: KEY.reducesinkkey0 (type: string), KEY.reducesinkkey1 (type: double)\n                outputColumnNames: _col0, _col1\n                Statistics: Num rows: 4991930471 Data size: 109822470377 Basic stats: COMPLETE Column stats: NONE\n                PTF Operator\n                  Function definitions:\n                      Input definition\n                        input alias: ptf_0\n                        output shape: _col0: string, _col1: double\n                        type: WINDOWING\n                      Windowing table definition\n                        input alias: ptf_1\n                        name: windowingtablefunction\n                        order by: _col1 DESC NULLS LAST\n                        partition by: _col0\n                        raw input shape:\n                        window functions:\n                            window function definition\n                              alias: rank_window_0\n                              arguments: _col1\n                              name: rank\n                              window function: GenericUDAFRankEvaluator\n                              window frame: PRECEDING(MAX)~FOLLOWING(MAX)\n                              isPivotResult: true\n                  Statistics: Num rows: 4991930471 Data size: 109822470377 Basic stats: COMPLETE Column stats: NONE\n                  Filter Operator\n                    predicate: (rank_window_0 <= 5) (type: boolean)\n                    Statistics: Num rows: 1663976823 Data size: 36607490111 Basic stats: COMPLETE Column stats: NONE\n                    Select Operator\n                      expressions: _col0 (type: string)\n                      outputColumnNames: _col0\n                      Statistics: Num rows: 1663976823 Data size: 36607490111 Basic stats: COMPLETE Column stats: NONE\n                      Reduce Output Operator\n                        key expressions: _col0 (type: string)\n                        sort order: +\n                        Map-reduce partition columns: _col0 (type: string)\n                        Statistics: Num rows: 1663976823 Data size: 36607490111 Basic stats: COMPLETE Column stats: NONE\n{code}\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kellyzly","name":"kellyzly","key":"kellyzly","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"liyunzhang","active":true,"timeZone":"Asia/Shanghai"},"created":"2017-09-12T08:22:00.815+0000","updated":"2017-09-12T08:22:00.815+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13100353/comment/16162659","id":"16162659","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kellyzly","name":"kellyzly","key":"kellyzly","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"liyunzhang","active":true,"timeZone":"Asia/Shanghai"},"body":"[~xuefuz], [~lirui]: can you help view above issue. Thanks!","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kellyzly","name":"kellyzly","key":"kellyzly","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"liyunzhang","active":true,"timeZone":"Asia/Shanghai"},"created":"2017-09-12T08:23:40.318+0000","updated":"2017-09-12T08:23:40.318+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13100353/comment/16162687","id":"16162687","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kellyzly","name":"kellyzly","key":"kellyzly","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"liyunzhang","active":true,"timeZone":"Asia/Shanghai"},"body":"after debugging code, i found part2 join part1 is a map join in tez, this is the difference with hive on spark.Will update the detail reason later.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kellyzly","name":"kellyzly","key":"kellyzly","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"liyunzhang","active":true,"timeZone":"Asia/Shanghai"},"created":"2017-09-12T08:53:30.511+0000","updated":"2017-09-12T08:53:30.511+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13100353/comment/16163762","id":"16163762","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kellyzly","name":"kellyzly","key":"kellyzly","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"liyunzhang","active":true,"timeZone":"Asia/Shanghai"},"body":"[~lirui] , [~xuefuz]: after debugging in tez, found the part2 join part1 is common merge join(CommonMergeJoinOperator).\n{code}\n  Reducer 2 \n            Reduce Operator Tree:\n              Merge Join Operator\n                condition map:\n                     Inner Join 0 to 1\n                keys:\n                  0 _col7 (type: string)\n                  1 _col0 (type: string)\n\n{code}\n\n\nthe implementation of CommonMergeJoin. Does hive on spark enable CommonMergeJoin?\n{code}\n/*\n * With an aim to consolidate the join algorithms to either hash based joins (MapJoinOperator) or\n * sort-merge based joins, this operator is being introduced. This operator executes a sort-merge\n * based algorithm. It replaces both the JoinOperator and the SMBMapJoinOperator for the tez side of\n * things. It works in either the map phase or reduce phase.\n *\n * The basic algorithm is as follows:\n *\n * 1. The processOp receives a row from a \"big\" table.\n * 2. In order to process it, the operator does a fetch for rows from the other tables.\n * 3. Once we have a set of rows from the other tables (till we hit a new key), more rows are\n *    brought in from the big table and a join is performed.\n */\n{code}","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kellyzly","name":"kellyzly","key":"kellyzly","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"liyunzhang","active":true,"timeZone":"Asia/Shanghai"},"created":"2017-09-12T22:11:39.623+0000","updated":"2017-09-12T22:11:39.623+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13100353/comment/16164056","id":"16164056","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=lirui","name":"lirui","key":"lirui","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Rui Li","active":true,"timeZone":"Asia/Shanghai"},"body":"[~kellyzly], I think CommonMergeJoinOperator is specific to Tez and HoS doesn't use it. But seems CommonMergeJoinOperator is not map join for Tez - Tez also uses MapJoinOperator for map join. And you can also look at the edge type - I think map join will use a BROADCAST_EDGE.\n\nSo the problem is the estimated data size of Reducer12 is too big right? The graph is something like {{Map9 -> Reducer10 -> Reducer11 -> Reducer12}}. Do you know at which step the statistics begin to go incorrect?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=lirui","name":"lirui","key":"lirui","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Rui Li","active":true,"timeZone":"Asia/Shanghai"},"created":"2017-09-13T02:32:03.044+0000","updated":"2017-09-13T02:32:03.044+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13100353/comment/16164180","id":"16164180","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kellyzly","name":"kellyzly","key":"kellyzly","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"liyunzhang","active":true,"timeZone":"Asia/Shanghai"},"body":"[~lirui]: thanks for reply. I am debugging whether there is problem about statistics.\nBy the way,can we solve the problem by converting the common join to skewed join?\nAs  all keys in part2 is very big and the distinct key is very few(less than 30), can we think this is a  skew case? I have tried to set hive.optimize.skewjoin as true and hive.skewjoin.key as 100000. But it seems not effect.  I am very curious  why skew join does not have effect. From the doc, it seems will \n{code}\nA join B on A.id=B.id \nAnd A skews for id=1. Then we perform the following two joins: \n1.  A join B on A.id=B.id and A.id!=1 \n2.  A join B on A.id=B.id and A.id=1 \nIf B doesn’t skew on id=1, then #2 will be a map join.\n{code}\nI think after enabling skew join, all keys in part2 will be skewed keys, part2 will map join with part1. ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kellyzly","name":"kellyzly","key":"kellyzly","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"liyunzhang","active":true,"timeZone":"Asia/Shanghai"},"created":"2017-09-13T05:53:29.725+0000","updated":"2017-09-13T05:53:29.725+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13100353/comment/16164235","id":"16164235","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=lirui","name":"lirui","key":"lirui","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Rui Li","active":true,"timeZone":"Asia/Shanghai"},"body":"[~kellyzly], skew is detected by simply counting the size of each key group. If you set hive.skewjoin.key=100000, it means a key is considered skew if it appears at least 100000 times. You can check whether your data has such keys. Usually we consider the join as skewed if there're lots of rows that have the same key. So if part2 has lots of rows with only 30 distinct keys, skew join might help. On the other hand, if part2 only has a small number of rows, skew join might not be a good idea.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=lirui","name":"lirui","key":"lirui","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Rui Li","active":true,"timeZone":"Asia/Shanghai"},"created":"2017-09-13T07:13:00.134+0000","updated":"2017-09-13T07:13:00.134+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13100353/comment/16167233","id":"16167233","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kellyzly","name":"kellyzly","key":"kellyzly","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"liyunzhang","active":true,"timeZone":"Asia/Shanghai"},"body":"enlarged map join threshold size to cheat hive to think part1 is small table(in runtime, the size of part1 is very small). After that the execution plan changed, the execution time on 3TB is reduced from 12 min to 78 seconds. For such case where join on the data which keys are low cardinality, map join maybe the  best solution. ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kellyzly","name":"kellyzly","key":"kellyzly","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"liyunzhang","active":true,"timeZone":"Asia/Shanghai"},"created":"2017-09-15T02:03:58.930+0000","updated":"2017-09-15T02:03:58.930+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13100353/comment/16171184","id":"16171184","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kellyzly","name":"kellyzly","key":"kellyzly","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"liyunzhang","active":true,"timeZone":"Asia/Shanghai"},"body":"I found that we need execute\n\"analyze table xxx compute statistics for columns\" before executing the query.\nAttach the different explain([before_analyze|https://issues.apache.org/jira/secure/attachment/12887836/explain.70.before.analyze],[after_analyze|https://issues.apache.org/jira/secure/attachment/12887837/explain.70.after.analyze] )\ngive an example to show the influence of column statistics \n{code}(select s_state as s_state, sum(ss_net_profit),\n                             rank() over ( partition by s_state order by sum(ss_net_profit) desc) as ranking\n                      from   store_sales, store, date_dim\n                      where  d_month_seq between 1193 and 1193+11\n                            and date_dim.d_date_sk = store_sales.ss_sold_date_sk\n                            and store.s_store_sk  = store_sales.ss_store_sk\n                      group by s_state\n                     ) {code}\nbefore compute column statistics\n{code}\n Map 9 \n            Map Operator Tree:\n                TableScan\n                  alias: store_sales\n                  filterExpr: (ss_store_sk is not null and ss_sold_date_sk is not null) (type: boolean)\n                  Statistics: Num rows: 27504814 Data size: 825144420 Basic stats: COMPLETE Column stats: PARTIAL\n                  Filter Operator\n                    predicate: ss_store_sk is not null (type: boolean)\n                    Statistics: Num rows: 27504814 Data size: 220038512 Basic stats: COMPLETE Column stats: PARTIAL\n                    Select Operator\n                      expressions: ss_store_sk (type: bigint), ss_net_profit (type: double), ss_sold_date_sk (type: bigint)\n                      outputColumnNames: _col0, _col1, _col2\n                      Statistics: Num rows: 27504814 Data size: 220038512 Basic stats: COMPLETE Column stats: PARTIAL\n                      Map Join Operator\n                        condition map:\n                             Inner Join 0 to 1\n                        keys:\n                          0 _col0 (type: bigint)\n                          1 _col0 (type: bigint)\n                        outputColumnNames: _col1, _col2, _col4\n                        input vertices:\n                          1 Map 12\n                        Statistics: Num rows: 30255296 Data size: 242042368 Basic stats: COMPLETE Column stats: NONE\n                        Map Join Operator\n                          condition map:\n                               Inner Join 0 to 1\n                          keys:\n                            0 _col2 (type: bigint)\n                            1 _col0 (type: bigint)\n                          outputColumnNames: _col1, _col4\n                          input vertices:\n                            1 Map 13\n                          Statistics: Num rows: 33280826 Data size: 266246610 Basic stats: COMPLETE Column stats: NONE\n                          Select Operator\n                            expressions: _col4 (type: string), _col1 (type: double)\n                            outputColumnNames: _col4, _col1\n                            Statistics: Num rows: 33280826 Data size: 266246610 Basic stats: COMPLETE Column stats: NONE\n                            Group By Operator\n                              aggregations: sum(_col1)\n                              keys: _col4 (type: string)\n                              mode: hash\n                              outputColumnNames: _col0, _col1\n                              Statistics: Num rows: 33280826 Data size: 266246610 Basic stats: COMPLETE Column stats: NONE\n                              Reduce Output Operator\n                                key expressions: _col0 (type: string)\n                                sort order: +\n                                Map-reduce partition columns: _col0 (type: string)\n                                Statistics: Num rows: 33280826 Data size: 266246610 Basic stats: COMPLETE Column stats: NONE\n                                value expressions: _col1 (type: double)\n\n{code}\nthe data size is 266246610\n\nAfter computing column statistics\n{code}\n  Map 7 \n            Map Operator Tree:\n                TableScan\n                  alias: store_sales\n                  filterExpr: (ss_store_sk is not null and ss_sold_date_sk is not null) (type: boolean)\n                  Statistics: Num rows: 27504814 Data size: 649740104 Basic stats: COMPLETE Column stats: PARTIAL\n                  Filter Operator\n                    predicate: ss_store_sk is not null (type: boolean)\n                    Statistics: Num rows: 26856871 Data size: 634433888 Basic stats: COMPLETE Column stats: PARTIAL\n                    Select Operator\n                      expressions: ss_store_sk (type: bigint), ss_net_profit (type: double), ss_sold_date_sk (type: bigint)\n                      outputColumnNames: _col0, _col1, _col2\n                      Statistics: Num rows: 26856871 Data size: 634433888 Basic stats: COMPLETE Column stats: PARTIAL\n                      Map Join Operator\n                        condition map:\n                             Inner Join 0 to 1\n                        keys:\n                          0 _col2 (type: bigint)\n                          1 _col0 (type: bigint)\n                        outputColumnNames: _col0, _col1\n                        input vertices:\n                          1 Map 10\n                        Statistics: Num rows: 2983893 Data size: 47742288 Basic stats: COMPLETE Column stats: PARTIAL\n                        Map Join Operator\n                          condition map:\n                               Inner Join 0 to 1\n                          keys:\n                            0 _col0 (type: bigint)\n                            1 _col0 (type: bigint)\n                          outputColumnNames: _col1, _col6\n                          input vertices:\n                            1 Map 11\n                          Statistics: Num rows: 2983893 Data size: 280485942 Basic stats: COMPLETE Column stats: PARTIAL\n                          Group By Operator\n                            aggregations: sum(_col1)\n                            keys: _col6 (type: string)\n                            mode: hash\n                            outputColumnNames: _col0, _col1\n                            Statistics: Num rows: 9 Data size: 846 Basic stats: COMPLETE Column stats: PARTIAL\n                            Reduce Output Operator\n                              key expressions: _col0 (type: string)\n                              sort order: +\n                              Map-reduce partition columns: _col0 (type: string)\n                              Statistics: Num rows: 9 Data size: 846 Basic stats: COMPLETE Column stats: PARTIAL\n                              value expressions: _col1 (type: double)\n{code}\nthe datasize is 846\n\n without analyzing column statistics, the cardinaltiy is parentNumRows and the datasize is parentDataSize\n [here|https://github.com/kellyzly/hive/blob/master/ql/src/java/org/apache/hadoop/hive/ql/optimizer/stats/annotation/StatsRulesProcFactory.java#L1204]\n {code}\n  // Case 1: NO column stats, NO hash aggregation, NO grouping sets\n                cardinality = parentNumRows;\n {code}\n with analyzing column statistics\n [here|https://github.com/kellyzly/hive/blob/master/ql/src/java/org/apache/hadoop/hive/ql/optimizer/stats/annotation/StatsRulesProcFactory.java#L1132] to calculate the cardinality of the Group By Operator, actually it use {{StatsUtils.safeMult(ndvProduct, parallelism)}}(ndvProduct is 3, parallelism is 3, parentNumRows is 2983893, cardinality=Math.min(2983893/2, 3*3)=9)\n the ndvProduct means the distinct value count of table store.Because the distinct value count of store is very small,thus the cardinality is very small. The new datasize is updated to smaller value 846.\n {code}\n  // Case 3: column stats, hash aggregation, NO grouping sets\n   cardinality = Math.min(parentNumRows / 2, StatsUtils.safeMult(ndvProduct, parallelism));\n {code}\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kellyzly","name":"kellyzly","key":"kellyzly","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"liyunzhang","active":true,"timeZone":"Asia/Shanghai"},"created":"2017-09-19T06:39:08.130+0000","updated":"2017-09-19T06:47:46.797+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13100353/comment/16171238","id":"16171238","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=lirui","name":"lirui","key":"lirui","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Rui Li","active":true,"timeZone":"Asia/Shanghai"},"body":"Thanks [~kellyzly] for the update. Good to know we can get the stats right with the analyze command.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=lirui","name":"lirui","key":"lirui","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Rui Li","active":true,"timeZone":"Asia/Shanghai"},"created":"2017-09-19T07:34:33.319+0000","updated":"2017-09-19T07:34:33.319+0000"}],"maxResults":10,"total":10,"startAt":0},"votes":{"self":"https://issues.apache.org/jira/rest/api/2/issue/HIVE-17474/votes","votes":0,"hasVoted":false},"worklog":{"startAt":0,"maxResults":20,"total":0,"worklogs":[]},"customfield_12311820":"0|i3jqtb:"}}