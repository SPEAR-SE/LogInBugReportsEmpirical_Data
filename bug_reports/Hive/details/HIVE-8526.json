{"expand":"renderedFields,names,schema,operations,editmeta,changelog,versionedRepresentations","id":"12749378","self":"https://issues.apache.org/jira/rest/api/2/issue/12749378","key":"HIVE-8526","fields":{"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype","name":"Bug","subtask":false,"avatarId":21133},"timespent":null,"project":{"self":"https://issues.apache.org/jira/rest/api/2/project/12310843","id":"12310843","key":"HIVE","name":"Hive","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/projectavatar?pid=12310843&avatarId=11935","24x24":"https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12310843&avatarId=11935","16x16":"https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12310843&avatarId=11935","32x32":"https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12310843&avatarId=11935"},"projectCategory":{"self":"https://issues.apache.org/jira/rest/api/2/projectCategory/10292","id":"10292","description":"Scalable Distributed Computing","name":"Hadoop"}},"fixVersions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12326450","id":"12326450","description":"released","name":"0.14.0","archived":false,"released":true,"releaseDate":"2014-11-12"}],"aggregatetimespent":null,"resolution":{"self":"https://issues.apache.org/jira/rest/api/2/resolution/3","id":"3","description":"The problem is a duplicate of an existing issue.","name":"Duplicate"},"customfield_12312322":null,"customfield_12310220":"2014-10-28T01:05:36.209+0000","customfield_12312520":null,"customfield_12312323":null,"customfield_12312521":"Thu Nov 13 19:40:25 UTC 2014","customfield_12310420":"9223372036854775807","customfield_12312320":null,"customfield_12310222":"10002_*:*_1_*:*_248369797_*|*_1_*:*_1_*:*_689151917_*|*_5_*:*_1_*:*_0","customfield_12312321":null,"resolutiondate":"2014-10-31T19:21:45.672+0000","workratio":-1,"customfield_12312328":null,"customfield_12312329":null,"customfield_12312923":null,"customfield_12312326":null,"customfield_12312920":null,"customfield_12310300":null,"customfield_12312327":null,"customfield_12312921":null,"customfield_12312324":null,"customfield_12312720":null,"customfield_12312325":null,"lastViewed":null,"watches":{"self":"https://issues.apache.org/jira/rest/api/2/issue/HIVE-8526/watchers","watchCount":6,"isWatching":false},"created":"2014-10-20T22:56:24.039+0000","customfield_12310192":null,"customfield_12310191":null,"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/2","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/critical.svg","name":"Critical","id":"2"},"labels":[],"customfield_12312333":null,"customfield_12310230":null,"customfield_12312334":null,"customfield_12313422":"false","customfield_12310310":"1.0","customfield_12312331":null,"customfield_12312332":null,"timeestimate":null,"aggregatetimeoriginalestimate":null,"customfield_12311120":null,"customfield_12312330":null,"versions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12326450","id":"12326450","description":"released","name":"0.14.0","archived":false,"released":true,"releaseDate":"2014-11-12"}],"issuelinks":[{"id":"12400240","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12400240","type":{"id":"12310000","name":"Duplicate","inward":"is duplicated by","outward":"duplicates","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/12310000"},"inwardIssue":{"id":"12751480","key":"HIVE-8653","self":"https://issues.apache.org/jira/rest/api/2/issue/12751480","fields":{"summary":"CBO: Push Semi Join through, Project/Filter/Join","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Done"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/2","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/critical.svg","name":"Critical","id":"2"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/7","id":"7","description":"The sub-task of the issue","iconUrl":"https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype","name":"Sub-task","subtask":true,"avatarId":21146}}}}],"customfield_12312339":null,"assignee":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rhbutani","name":"rhbutani","key":"rhbutani","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Harish Butani","active":true,"timeZone":"America/Los_Angeles"},"customfield_12312337":null,"customfield_12312338":null,"updated":"2014-11-13T19:40:25.581+0000","customfield_12312335":null,"customfield_12312336":null,"status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Done"}},"components":[{"self":"https://issues.apache.org/jira/rest/api/2/component/12323402","id":"12323402","name":"CBO","description":"All issues dealing with Hive's cost based optimizer and its interaction with Optiq"}],"timeoriginalestimate":null,"description":"The join order has Item joined last where it should be joined first\n\nQuery \n{code}\nselect  ca_zip, ca_county, sum(ws_sales_price)\n from\n    web_sales\n    JOIN customer ON web_sales.ws_bill_customer_sk = customer.c_customer_sk\n    JOIN customer_address ON customer.c_current_addr_sk = customer_address.ca_address_sk \n    JOIN date_dim ON web_sales.ws_sold_date_sk = date_dim.d_date_sk\n    JOIN item ON web_sales.ws_item_sk = item.i_item_sk \n where\n        ( item.i_item_id in (select i_item_id\n                             from item i2\n                             where i2.i_item_sk in (2, 3, 5, 7, 11, 13, 17, 19, 23, 29)\n                             )\n            )\n        and d_qoy = 2 and d_year = 2000\n group by ca_zip, ca_county\n order by ca_zip, ca_county\n limit 100\n{code}\n\nPlan\n{code}\n2014-10-20 18:43:16,521 DEBUG [main]: parse.SemanticAnalyzer (SemanticAnalyzer.java:apply(12330)) - HiveSortRel(fetch=[100]): rowcount = 1.710158597922807E7, cumulative cost = {7.169080587598123E10 rows, 3.420317295845614E7 cpu, 0.0 io}, id = 579\n  HiveSortRel(sort0=[$0], sort1=[$1], dir0=[ASC], dir1=[ASC]): rowcount = 1.710158597922807E7, cumulative cost = {6.827294821015483E10 rows, 1.710158697922807E7 cpu, 0.0 io}, id = 577\n    HiveProjectRel(ca_zip=[$0], ca_county=[$1], _o__c2=[$2]): rowcount = 1.710158597922807E7, cumulative cost = {6.485509054432843E10 rows, 1.0 cpu, 0.0 io}, id = 575\n      HiveAggregateRel(group=[{0, 1}], agg#0=[sum($2)]): rowcount = 1.710158597922807E7, cumulative cost = {6.485509054432843E10 rows, 1.0 cpu, 0.0 io}, id = 573\n        HiveProjectRel($f0=[$2], $f1=[$1], $f2=[$0]): rowcount = 6.0197670310147226E7, cumulative cost = {6.485509054432843E10 rows, 1.0 cpu, 0.0 io}, id = 571\n          HiveProjectRel(ws_sales_price=[$2], ca_county=[$7], ca_zip=[$8]): rowcount = 6.0197670310147226E7, cumulative cost = {6.485509054432843E10 rows, 1.0 cpu, 0.0 io}, id = 569\n            HiveFilterRel(condition=[AND(=($11, 2), =($10, 2000))]): rowcount = 6.0197670310147226E7, cumulative cost = {6.485509054432843E10 rows, 1.0 cpu, 0.0 io}, id = 567\n              SemiJoinRel(condition=[=($13, $14)], joinType=[inner]): rowcount = 3.371069537368245E10, cumulative cost = {6.485509054432843E10 rows, 1.0 cpu, 0.0 io}, id = 565\n                HiveProjectRel(ws_item_sk=[$0], ws_bill_customer_sk=[$1], ws_sales_price=[$2], ws_sold_date_sk=[$3], c_customer_sk=[$9], c_current_addr_sk=[$10], ca_address_sk=[$11], ca_county=[$12], ca_zip=[$13], d_date_sk=[$6], d_year=[$7], d_qoy=[$8], i_item_sk=[$4], i_item_id=[$5]): rowcount = 3.371069537368245E10, cumulative cost = {6.485509054332843E10 rows, 0.0 cpu, 0.0 io}, id = 669\n                  HiveJoinRel(condition=[=($1, $9)], joinType=[inner]): rowcount = 3.371069537368245E10, cumulative cost = {6.485509054332843E10 rows, 0.0 cpu, 0.0 io}, id = 667\n                    HiveJoinRel(condition=[=($3, $6)], joinType=[inner]): rowcount = 2.1594638446E10, cumulative cost = {4.3189811941E10 rows, 0.0 cpu, 0.0 io}, id = 664\n                      HiveJoinRel(condition=[=($0, $4)], joinType=[inner]): rowcount = 2.1594638446E10, cumulative cost = {2.1595100446E10 rows, 0.0 cpu, 0.0 io}, id = 601\n                        HiveProjectRel(ws_item_sk=[$2], ws_bill_customer_sk=[$3], ws_sales_price=[$20], ws_sold_date_sk=[$33]): rowcount = 2.1594638446E10, cumulative cost = {0.0 rows, 0.0 cpu, 0.0 io}, id = 497\n                          HiveTableScanRel(table=[[tpcds_bin_partitioned_orc_30000.web_sales]]): rowcount = 2.1594638446E10, cumulative cost = {0}, id = 341\n                        HiveProjectRel(i_item_sk=[$0], i_item_id=[$1]): rowcount = 462000.0, cumulative cost = {0.0 rows, 0.0 cpu, 0.0 io}, id = 555\n                          HiveTableScanRel(table=[[tpcds_bin_partitioned_orc_30000.item]]): rowcount = 462000.0, cumulative cost = {0}, id = 340\n                      HiveProjectRel(d_date_sk=[$0], d_year=[$6], d_qoy=[$10]): rowcount = 73049.0, cumulative cost = {0.0 rows, 0.0 cpu, 0.0 io}, id = 551\n                        HiveTableScanRel(table=[[tpcds_bin_partitioned_orc_30000.date_dim]]): rowcount = 73049.0, cumulative cost = {0}, id = 342\n                    HiveJoinRel(condition=[=($1, $2)], joinType=[inner]): rowcount = 7.064015632843196E7, cumulative cost = {1.2E8 rows, 0.0 cpu, 0.0 io}, id = 598\n                      HiveProjectRel(c_customer_sk=[$0], c_current_addr_sk=[$4]): rowcount = 8.0E7, cumulative cost = {0.0 rows, 0.0 cpu, 0.0 io}, id = 500\n                        HiveTableScanRel(table=[[tpcds_bin_partitioned_orc_30000.customer]]): rowcount = 8.0E7, cumulative cost = {0}, id = 343\n                      HiveProjectRel(ca_address_sk=[$0], ca_county=[$7], ca_zip=[$9]): rowcount = 4.0E7, cumulative cost = {0.0 rows, 0.0 cpu, 0.0 io}, id = 547\n                        HiveTableScanRel(table=[[tpcds_bin_partitioned_orc_30000.customer_address]]): rowcount = 4.0E7, cumulative cost = {0}, id = 339\n                HiveProjectRel(i_item_id=[$1]): rowcount = 1.05119214745814, cumulative cost = {0.0 rows, 0.0 cpu, 0.0 io}, id = 563\n                  HiveProjectRel(i_item_sk=[$0], i_item_id=[$1]): rowcount = 1.05119214745814, cumulative cost = {0.0 rows, 0.0 cpu, 0.0 io}, id = 561\n                    HiveFilterRel(condition=[in($0, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29)]): rowcount = 1.05119214745814, cumulative cost = {0.0 rows, 0.0 cpu, 0.0 io}, id = 559\n                      HiveTableScanRel(table=[[tpcds_bin_partitioned_orc_30000.item]]): rowcount = 462000.0, cumulative cost = {0}, id = 340\n{code}\n\n\nThen I rewrote the query trying to force CBO to generate the correct join order\n{code}\nwith items as (select i_item_sk from \nitem  where\n        ( item.i_item_id in (select i_item_id\n                             from item i2\n                             where i2.i_item_sk in (2, 3, 5, 7, 11, 13, 17, 19, 23, 29)\n                             )\n            )\n)\n\nselect  ca_zip, ca_county, sum(ws_sales_price)\n from\n    web_sales\n    JOIN items ON web_sales.ws_item_sk = items.i_item_sk \n    JOIN customer ON web_sales.ws_bill_customer_sk = customer.c_customer_sk\n    JOIN customer_address ON customer.c_current_addr_sk = customer_address.ca_address_sk \n    JOIN date_dim ON web_sales.ws_sold_date_sk = date_dim.d_date_sk\n where\n d_qoy = 2 and d_year = 2000\n group by ca_zip, ca_county\n order by ca_zip, ca_county\n limit 100\n{code}\n\nBut the correct join order wasn't generated because CE for item x item + filter has a selectivity of 1.\n{code}\n2014-10-20 18:46:27,120 DEBUG [main]: parse.SemanticAnalyzer (SemanticAnalyzer.java:apply(12330)) - HiveSortRel(fetch=[100]): rowcount = 1.6595391288544238E7, cumulative cost = {2.8364280421639153E10 rows, 3.3190782577088475E7 cpu, 0.0 io}, id = 1291\n  HiveSortRel(sort0=[$0], sort1=[$1], dir0=[ASC], dir1=[ASC]): rowcount = 1.6595391288544238E7, cumulative cost = {2.505357243157397E10 rows, 1.6595391288544238E7 cpu, 0.0 io}, id = 1289\n    HiveProjectRel(ca_zip=[$0], ca_county=[$1], _o__c2=[$2]): rowcount = 1.6595391288544238E7, cumulative cost = {2.174286444150879E10 rows, 0.0 cpu, 0.0 io}, id = 1287\n      HiveAggregateRel(group=[{0, 1}], agg#0=[sum($2)]): rowcount = 1.6595391288544238E7, cumulative cost = {2.174286444150879E10 rows, 0.0 cpu, 0.0 io}, id = 1285\n        HiveProjectRel($f0=[$9], $f1=[$8], $f2=[$2]): rowcount = 6.019767031014723E7, cumulative cost = {2.174286444150879E10 rows, 0.0 cpu, 0.0 io}, id = 1283\n          HiveProjectRel(ws_item_sk=[$5], ws_bill_customer_sk=[$6], ws_sales_price=[$7], ws_sold_date_sk=[$8], i_item_sk=[$12], c_customer_sk=[$0], c_current_addr_sk=[$1], ca_address_sk=[$2], ca_county=[$3], ca_zip=[$4], d_date_sk=[$9], d_year=[$10], d_qoy=[$11]): rowcount = 6.019767031014723E7, cumulative cost = {2.174286444150879E10 rows, 0.0 cpu, 0.0 io}, id = 1380\n            HiveJoinRel(condition=[=($6, $0)], joinType=[inner]): rowcount = 6.019767031014723E7, cumulative cost = {2.174286444150879E10 rows, 0.0 cpu, 0.0 io}, id = 1378\n              HiveJoinRel(condition=[=($1, $2)], joinType=[inner]): rowcount = 7.064015632843196E7, cumulative cost = {1.2E8 rows, 0.0 cpu, 0.0 io}, id = 1309\n                HiveProjectRel(c_customer_sk=[$0], c_current_addr_sk=[$4]): rowcount = 8.0E7, cumulative cost = {0.0 rows, 0.0 cpu, 0.0 io}, id = 1269\n                  HiveTableScanRel(table=[[tpcds_bin_partitioned_orc_30000.customer]]): rowcount = 8.0E7, cumulative cost = {0}, id = 1035\n                HiveProjectRel(ca_address_sk=[$0], ca_county=[$7], ca_zip=[$9]): rowcount = 4.0E7, cumulative cost = {0.0 rows, 0.0 cpu, 0.0 io}, id = 1273\n                  HiveTableScanRel(table=[[tpcds_bin_partitioned_orc_30000.customer_address]]): rowcount = 4.0E7, cumulative cost = {0}, id = 1032\n              HiveJoinRel(condition=[=($0, $7)], joinType=[inner]): rowcount = 3.856185436785714E7, cumulative cost = {2.16336624308125E10 rows, 0.0 cpu, 0.0 io}, id = 1376\n                HiveJoinRel(condition=[=($3, $4)], joinType=[inner]): rowcount = 3.856185436785714E7, cumulative cost = {2.159463857644464E10 rows, 0.0 cpu, 0.0 io}, id = 1316\n                  HiveProjectRel(ws_item_sk=[$2], ws_bill_customer_sk=[$3], ws_sales_price=[$20], ws_sold_date_sk=[$33]): rowcount = 2.1594638446E10, cumulative cost = {0.0 rows, 0.0 cpu, 0.0 io}, id = 1205\n                    HiveTableScanRel(table=[[tpcds_bin_partitioned_orc_30000.web_sales]]): rowcount = 2.1594638446E10, cumulative cost = {0}, id = 1033\n                  HiveProjectRel(d_date_sk=[$0], d_year=[$6], d_qoy=[$10]): rowcount = 130.44464285714287, cumulative cost = {0.0 rows, 0.0 cpu, 0.0 io}, id = 1279\n                    HiveFilterRel(condition=[AND(=($10, 2), =($6, 2000))]): rowcount = 130.44464285714287, cumulative cost = {0.0 rows, 0.0 cpu, 0.0 io}, id = 1277\n                      HiveTableScanRel(table=[[tpcds_bin_partitioned_orc_30000.date_dim]]): rowcount = 73049.0, cumulative cost = {0}, id = 1034\n                HiveProjectRel(i_item_sk=[$0]): rowcount = 462000.0, cumulative cost = {1.0 rows, 1.0 cpu, 0.0 io}, id = 1265\n                  HiveFilterRel(condition=[=(1, 1)]): rowcount = 462000.0, cumulative cost = {1.0 rows, 1.0 cpu, 0.0 io}, id = 1263\n                    SemiJoinRel(condition=[=($1, $2)], joinType=[inner]): rowcount = 462000.0, cumulative cost = {1.0 rows, 1.0 cpu, 0.0 io}, id = 1261\n                      HiveProjectRel(i_item_sk=[$0], i_item_id=[$1]): rowcount = 462000.0, cumulative cost = {0.0 rows, 0.0 cpu, 0.0 io}, id = 1253\n                        HiveTableScanRel(table=[[tpcds_bin_partitioned_orc_30000.item]]): rowcount = 462000.0, cumulative cost = {0}, id = 1024\n                      HiveProjectRel(i_item_id=[$1]): rowcount = 1.05119214745814, cumulative cost = {0.0 rows, 0.0 cpu, 0.0 io}, id = 1259\n                        HiveProjectRel(i_item_sk=[$0], i_item_id=[$1]): rowcount = 1.05119214745814, cumulative cost = {0.0 rows, 0.0 cpu, 0.0 io}, id = 1257\n                          HiveFilterRel(condition=[in($0, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29)]): rowcount = 1.05119214745814, cumulative cost = {0.0 rows, 0.0 cpu, 0.0 io}, id = 1255\n                            HiveTableScanRel(table=[[tpcds_bin_partitioned_orc_30000.item]]): rowcount = 462000.0, cumulative cost = {0}, id = 1024\n{code}\n\n\nThis query generates the correct join order \n{code}\n with items as (select i_item_sk from \nitem  where\n         item.i_item_id in (select i_item_id\n                             from item i2\n                             where i2.i_item_sk in (2, 3, 5, 7, 11, 13, 17, 19, 23, 29)\n                             )\n            \n),\n  ws as (\n select ws_bill_customer_sk,ws_sales_price,ws_sold_date_sk\nfrom  web_sales\n    JOIN items ON web_sales.ws_item_sk = items.i_item_sk \n )\n select  ca_zip, ca_county, sum(ws_sales_price)\n from ws \n    JOIN customer ON ws.ws_bill_customer_sk = customer.c_customer_sk\n    JOIN customer_address ON customer.c_current_addr_sk = customer_address.ca_address_sk \n    JOIN date_dim ON ws.ws_sold_date_sk = date_dim.d_date_sk\n where d_qoy = 2 and d_year = 2000\n group by ca_zip, ca_county\n order by ca_zip, ca_county\n limit 100\n{code}\n\nPlan \n{code}\n2014-10-20 19:13:15,989 DEBUG [main]: parse.SemanticAnalyzer (SemanticAnalyzer.java:apply(12330)) - HiveSortRel(fetch=[100]): rowcount = 1.6595391288544238E7, cumulative cost = {4.99203570142713E10 rows, 3.3190783577088475E7 cpu, 0.0 io}, id = 4367\n  HiveSortRel(sort0=[$0], sort1=[$1], dir0=[ASC], dir1=[ASC]): rowcount = 1.6595391288544238E7, cumulative cost = {4.6609649024206116E10 rows, 1.6595392288544238E7 cpu, 0.0 io}, id = 4365\n    HiveProjectRel(ca_zip=[$0], ca_county=[$1], _o__c2=[$2]): rowcount = 1.6595391288544238E7, cumulative cost = {4.329894103414093E10 rows, 1.0 cpu, 0.0 io}, id = 4363\n      HiveAggregateRel(group=[{0, 1}], agg#0=[sum($2)]): rowcount = 1.6595391288544238E7, cumulative cost = {4.329894103414093E10 rows, 1.0 cpu, 0.0 io}, id = 4361\n        HiveProjectRel($f0=[$7], $f1=[$6], $f2=[$1]): rowcount = 6.019767031014723E7, cumulative cost = {4.329894103414093E10 rows, 1.0 cpu, 0.0 io}, id = 4359\n          HiveProjectRel(ws_bill_customer_sk=[$5], ws_sales_price=[$6], ws_sold_date_sk=[$7], c_customer_sk=[$0], c_current_addr_sk=[$1], ca_address_sk=[$2], ca_county=[$3], ca_zip=[$4], d_date_sk=[$8], d_year=[$9], d_qoy=[$10]): rowcount = 6.019767031014723E7, cumulative cost = {4.329894103414093E10 rows, 1.0 cpu, 0.0 io}, id = 4426\n            HiveJoinRel(condition=[=($5, $0)], joinType=[inner]): rowcount = 6.019767031014723E7, cumulative cost = {4.329894103414093E10 rows, 1.0 cpu, 0.0 io}, id = 4424\n              HiveJoinRel(condition=[=($1, $2)], joinType=[inner]): rowcount = 7.064015632843196E7, cumulative cost = {1.2E8 rows, 0.0 cpu, 0.0 io}, id = 4392\n                HiveProjectRel(c_customer_sk=[$0], c_current_addr_sk=[$4]): rowcount = 8.0E7, cumulative cost = {0.0 rows, 0.0 cpu, 0.0 io}, id = 4345\n                  HiveTableScanRel(table=[[tpcds_bin_partitioned_orc_30000.customer]]): rowcount = 8.0E7, cumulative cost = {0}, id = 4101\n                HiveProjectRel(ca_address_sk=[$0], ca_county=[$7], ca_zip=[$9]): rowcount = 4.0E7, cumulative cost = {0.0 rows, 0.0 cpu, 0.0 io}, id = 4349\n                  HiveTableScanRel(table=[[tpcds_bin_partitioned_orc_30000.customer_address]]): rowcount = 4.0E7, cumulative cost = {0}, id = 4099\n              HiveJoinRel(condition=[=($2, $3)], joinType=[inner]): rowcount = 3.856185436785714E7, cumulative cost = {4.318973902344464E10 rows, 1.0 cpu, 0.0 io}, id = 4395\n                HiveProjectRel(ws_bill_customer_sk=[$1], ws_sales_price=[$2], ws_sold_date_sk=[$3]): rowcount = 2.1594638446E10, cumulative cost = {2.1595100447E10 rows, 1.0 cpu, 0.0 io}, id = 4343\n                  HiveProjectRel(ws_item_sk=[$0], ws_bill_customer_sk=[$1], ws_sales_price=[$2], ws_sold_date_sk=[$3], i_item_sk=[$4]): rowcount = 2.1594638446E10, cumulative cost = {2.1595100447E10 rows, 1.0 cpu, 0.0 io}, id = 4388\n                    HiveJoinRel(condition=[=($0, $4)], joinType=[inner]): rowcount = 2.1594638446E10, cumulative cost = {2.1595100447E10 rows, 1.0 cpu, 0.0 io}, id = 4383\n                      HiveProjectRel(ws_item_sk=[$2], ws_bill_customer_sk=[$3], ws_sales_price=[$20], ws_sold_date_sk=[$33]): rowcount = 2.1594638446E10, cumulative cost = {0.0 rows, 0.0 cpu, 0.0 io}, id = 4277\n                        HiveTableScanRel(table=[[tpcds_bin_partitioned_orc_30000.web_sales]]): rowcount = 2.1594638446E10, cumulative cost = {0}, id = 4096\n                      HiveProjectRel(i_item_sk=[$0]): rowcount = 462000.0, cumulative cost = {1.0 rows, 1.0 cpu, 0.0 io}, id = 4339\n                        HiveFilterRel(condition=[=(1, 1)]): rowcount = 462000.0, cumulative cost = {1.0 rows, 1.0 cpu, 0.0 io}, id = 4337\n                          SemiJoinRel(condition=[=($1, $2)], joinType=[inner]): rowcount = 462000.0, cumulative cost = {1.0 rows, 1.0 cpu, 0.0 io}, id = 4335\n                            HiveProjectRel(i_item_sk=[$0], i_item_id=[$1]): rowcount = 462000.0, cumulative cost = {0.0 rows, 0.0 cpu, 0.0 io}, id = 4327\n                              HiveTableScanRel(table=[[tpcds_bin_partitioned_orc_30000.item]]): rowcount = 462000.0, cumulative cost = {0}, id = 4088\n                            HiveProjectRel(i_item_id=[$1]): rowcount = 1.05119214745814, cumulative cost = {0.0 rows, 0.0 cpu, 0.0 io}, id = 4333\n                              HiveProjectRel(i_item_sk=[$0], i_item_id=[$1]): rowcount = 1.05119214745814, cumulative cost = {0.0 rows, 0.0 cpu, 0.0 io}, id = 4331\n                                HiveFilterRel(condition=[in($0, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29)]): rowcount = 1.05119214745814, cumulative cost = {0.0 rows, 0.0 cpu, 0.0 io}, id = 4329\n                                  HiveTableScanRel(table=[[tpcds_bin_partitioned_orc_30000.item]]): rowcount = 462000.0, cumulative cost = {0}, id = 4088\n                HiveProjectRel(d_date_sk=[$0], d_year=[$6], d_qoy=[$10]): rowcount = 130.44464285714287, cumulative cost = {0.0 rows, 0.0 cpu, 0.0 io}, id = 4355\n                  HiveFilterRel(condition=[AND(=($10, 2), =($6, 2000))]): rowcount = 130.44464285714287, cumulative cost = {0.0 rows, 0.0 cpu, 0.0 io}, id = 4353\n                    HiveTableScanRel(table=[[tpcds_bin_partitioned_orc_30000.date_dim]]): rowcount = 73049.0, cumulative cost = {0}, id = 4100\n\n{code}","customfield_10010":null,"timetracking":{},"customfield_12312026":null,"customfield_12312023":null,"customfield_12310320":null,"customfield_12312024":null,"customfield_12312340":null,"attachment":[{"self":"https://issues.apache.org/jira/rest/api/2/attachment/12677477","id":"12677477","filename":"HIVE-8526.1.patch","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rhbutani","name":"rhbutani","key":"rhbutani","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Harish Butani","active":true,"timeZone":"America/Los_Angeles"},"created":"2014-10-28T01:02:13.196+0000","size":1722,"mimeType":"text/plain","content":"https://issues.apache.org/jira/secure/attachment/12677477/HIVE-8526.1.patch"}],"aggregatetimeestimate":null,"customfield_12312341":null,"customfield_12312220":null,"customfield_12312022":null,"customfield_12310921":null,"customfield_12310920":"9223372036854775807","customfield_12312823":null,"summary":"Hive : CBO incorrect join order in TPC-DS Q45 as self join selectivity has incorrect CE","creator":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mmokhtar","name":"mmokhtar","key":"mmokhtar","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=mmokhtar&avatarId=21863","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=mmokhtar&avatarId=21863","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=mmokhtar&avatarId=21863","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=mmokhtar&avatarId=21863"},"displayName":"Mostafa Mokhtar","active":true,"timeZone":"America/Los_Angeles"},"subtasks":[],"customfield_12310291":null,"reporter":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mmokhtar","name":"mmokhtar","key":"mmokhtar","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=mmokhtar&avatarId=21863","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=mmokhtar&avatarId=21863","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=mmokhtar&avatarId=21863","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=mmokhtar&avatarId=21863"},"displayName":"Mostafa Mokhtar","active":true,"timeZone":"America/Los_Angeles"},"customfield_12310290":null,"aggregateprogress":{"progress":0,"total":0},"customfield_12311024":null,"environment":null,"customfield_12313520":null,"customfield_12311020":null,"duedate":null,"customfield_12310250":null,"progress":{"progress":0,"total":0},"comment":{"comments":[{"self":"https://issues.apache.org/jira/rest/api/2/issue/12749378/comment/14186160","id":"14186160","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rhbutani","name":"rhbutani","key":"rhbutani","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Harish Butani","active":true,"timeZone":"America/Los_Angeles"},"body":"The patch fixes the issue with the Selectivity estimate for SemiJoins.\nBut as far as i can tell, Optiq MultiJoinRel doesn't handle SemiJoins. So for the query above, you are not going to get the optimal order.\n[~julianhyde] can you confirm that MultiJoinRel doesn't support SemiJoins.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rhbutani","name":"rhbutani","key":"rhbutani","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Harish Butani","active":true,"timeZone":"America/Los_Angeles"},"created":"2014-10-28T01:05:36.209+0000","updated":"2014-10-28T01:05:36.209+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12749378/comment/14186374","id":"14186374","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mmokhtar","name":"mmokhtar","key":"mmokhtar","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=mmokhtar&avatarId=21863","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=mmokhtar&avatarId=21863","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=mmokhtar&avatarId=21863","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=mmokhtar&avatarId=21863"},"displayName":"Mostafa Mokhtar","active":true,"timeZone":"America/Los_Angeles"},"body":"[~rhbutani]\nUsing the patch the wrong join order is still generated\n\n{code}\n2014-10-28 01:08:59,970 DEBUG [main]: parse.SemanticAnalyzer (SemanticAnalyzer.java:apply(12601)) - Plan After Join Reordering:\nHiveSortRel(fetch=[100]): rowcount = 319777.48643073987, cumulative cost = {2.4340839576240274E8 rows, 639555.9728614797 cpu, 0.0 io}, id = 616\n  HiveSortRel(sort0=[$0], sort1=[$1], dir0=[ASC], dir1=[ASC]): rowcount = 319777.48643073987, cumulative cost = {1.9476877928923708E8 rows, 319778.48643073987 cpu, 0.0 io}, id = 614\n    HiveProjectRel(ca_zip=[$0], ca_county=[$1], _o__c2=[$2]): rowcount = 319777.48643073987, cumulative cost = {1.4612916281607142E8 rows, 1.0 cpu, 0.0 io}, id = 612\n      HiveAggregateRel(group=[{0, 1}], agg#0=[sum($2)]): rowcount = 319777.48643073987, cumulative cost = {1.4612916281607142E8 rows, 1.0 cpu, 0.0 io}, id = 610\n        HiveProjectRel($f0=[$2], $f1=[$1], $f2=[$0]): rowcount = 8.94102670242874, cumulative cost = {1.4612916281607142E8 rows, 1.0 cpu, 0.0 io}, id = 608\n          HiveProjectRel(ws_sales_price=[$2], ca_county=[$7], ca_zip=[$8]): rowcount = 8.94102670242874, cumulative cost = {1.4612916281607142E8 rows, 1.0 cpu, 0.0 io}, id = 606\n            SemiJoinRel(condition=[=($13, $14)], joinType=[inner]): rowcount = 8.94102670242874, cumulative cost = {1.4612916281607142E8 rows, 1.0 cpu, 0.0 io}, id = 604\n              HiveProjectRel(ws_item_sk=[$5], ws_bill_customer_sk=[$6], ws_sales_price=[$7], ws_sold_date_sk=[$8], c_customer_sk=[$0], c_current_addr_sk=[$1], ca_address_sk=[$2], ca_county=[$3], ca_zip=[$4], d_date_sk=[$9], d_year=[$10], d_qoy=[$11], i_item_sk=[$12], i_item_id=[$13]): rowcount = 429169.2817165796, cumulative cost = {1.4612916181607142E8 rows, 0.0 cpu, 0.0 io}, id = 703\n                HiveJoinRel(condition=[=($6, $0)], joinType=[inner]): rowcount = 429169.2817165796, cumulative cost = {1.4612916181607142E8 rows, 0.0 cpu, 0.0 io}, id = 701\n                  HiveJoinRel(condition=[=($1, $2)], joinType=[inner]): rowcount = 1600000.0, cumulative cost = {2400000.0 rows, 0.0 cpu, 0.0 io}, id = 634\n                    HiveProjectRel(c_customer_sk=[$0], c_current_addr_sk=[$4]): rowcount = 1600000.0, cumulative cost = {0.0 rows, 0.0 cpu, 0.0 io}, id = 537\n                      HiveTableScanRel(table=[[tpcds_bin_partitioned_orc_200_orig.customer]]): rowcount = 1600000.0, cumulative cost = {0}, id = 360\n                    HiveProjectRel(ca_address_sk=[$0], ca_county=[$7], ca_zip=[$9]): rowcount = 800000.0, cumulative cost = {0.0 rows, 0.0 cpu, 0.0 io}, id = 584\n                      HiveTableScanRel(table=[[tpcds_bin_partitioned_orc_200_orig.customer_address]]): rowcount = 800000.0, cumulative cost = {0}, id = 356\n                  HiveJoinRel(condition=[=($0, $7)], joinType=[inner]): rowcount = 257083.68571428573, cumulative cost = {1.4427207813035715E8 rows, 0.0 cpu, 0.0 io}, id = 699\n                    HiveJoinRel(condition=[=($3, $4)], joinType=[inner]): rowcount = 257083.68571428573, cumulative cost = {1.4396699444464287E8 rows, 0.0 cpu, 0.0 io}, id = 637\n                      HiveProjectRel(ws_item_sk=[$2], ws_bill_customer_sk=[$3], ws_sales_price=[$20], ws_sold_date_sk=[$33]): rowcount = 1.43966864E8, cumulative cost = {0.0 rows, 0.0 cpu, 0.0 io}, id = 534\n                        HiveTableScanRel(table=[[tpcds_bin_partitioned_orc_200_orig.web_sales]]): rowcount = 1.43966864E8, cumulative cost = {0}, id = 358\n                      HiveProjectRel(d_date_sk=[$0], d_year=[$6], d_qoy=[$10]): rowcount = 130.44464285714287, cumulative cost = {0.0 rows, 0.0 cpu, 0.0 io}, id = 590\n                        HiveFilterRel(condition=[AND(=($10, 2), =($6, 2000))]): rowcount = 130.44464285714287, cumulative cost = {0.0 rows, 0.0 cpu, 0.0 io}, id = 588\n                          HiveTableScanRel(table=[[tpcds_bin_partitioned_orc_200_orig.date_dim]]): rowcount = 73049.0, cumulative cost = {0}, id = 359\n                    HiveProjectRel(i_item_sk=[$0], i_item_id=[$1]): rowcount = 48000.0, cumulative cost = {0.0 rows, 0.0 cpu, 0.0 io}, id = 594\n                      HiveTableScanRel(table=[[tpcds_bin_partitioned_orc_200_orig.item]]): rowcount = 48000.0, cumulative cost = {0}, id = 357\n              HiveProjectRel(i_item_id=[$1]): rowcount = 1.0, cumulative cost = {0.0 rows, 0.0 cpu, 0.0 io}, id = 602\n                HiveProjectRel(i_item_sk=[$0], i_item_id=[$1]): rowcount = 1.0, cumulative cost = {0.0 rows, 0.0 cpu, 0.0 io}, id = 600\n                  HiveFilterRel(condition=[in($0, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29)]): rowcount = 1.0, cumulative cost = {0.0 rows, 0.0 cpu, 0.0 io}, id = 598\n                    HiveTableScanRel(table=[[tpcds_bin_partitioned_orc_200_orig.item]]): rowcount = 48000.0, cumulative cost = {0}, id = 357\n{code}","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mmokhtar","name":"mmokhtar","key":"mmokhtar","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=mmokhtar&avatarId=21863","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=mmokhtar&avatarId=21863","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=mmokhtar&avatarId=21863","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=mmokhtar&avatarId=21863"},"displayName":"Mostafa Mokhtar","active":true,"timeZone":"America/Los_Angeles"},"created":"2014-10-28T05:13:25.366+0000","updated":"2014-10-28T05:13:25.366+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12749378/comment/14188107","id":"14188107","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hiveqa","name":"hiveqa","key":"hiveqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hiveqa&avatarId=17060","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hiveqa&avatarId=17060","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hiveqa&avatarId=17060","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hiveqa&avatarId=17060"},"displayName":"Hive QA","active":true,"timeZone":"America/Chicago"},"body":"\n\n{color:red}Overall{color}: -1 at least one tests failed\n\nHere are the results of testing the latest attachment:\nhttps://issues.apache.org/jira/secure/attachment/12677477/HIVE-8526.1.patch\n\n{color:red}ERROR:{color} -1 due to 2 failed/errored test(s), 6587 tests executed\n*Failed tests:*\n{noformat}\norg.apache.hadoop.hive.cli.TestMiniTezCliDriver.testCliDriver_optimize_nullscan\norg.apache.hive.minikdc.TestJdbcWithMiniKdc.testNegativeTokenAuth\n{noformat}\n\nTest results: http://ec2-174-129-184-35.compute-1.amazonaws.com/jenkins/job/PreCommit-HIVE-TRUNK-Build/1517/testReport\nConsole output: http://ec2-174-129-184-35.compute-1.amazonaws.com/jenkins/job/PreCommit-HIVE-TRUNK-Build/1517/console\nTest logs: http://ec2-174-129-184-35.compute-1.amazonaws.com/logs/PreCommit-HIVE-TRUNK-Build-1517/\n\nMessages:\n{noformat}\nExecuting org.apache.hive.ptest.execution.PrepPhase\nExecuting org.apache.hive.ptest.execution.ExecutionPhase\nExecuting org.apache.hive.ptest.execution.ReportingPhase\nTests exited with: TestsFailedException: 2 tests failed\n{noformat}\n\nThis message is automatically generated.\n\nATTACHMENT ID: 12677477 - PreCommit-HIVE-TRUNK-Build","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hiveqa","name":"hiveqa","key":"hiveqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hiveqa&avatarId=17060","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hiveqa&avatarId=17060","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hiveqa&avatarId=17060","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hiveqa&avatarId=17060"},"displayName":"Hive QA","active":true,"timeZone":"America/Chicago"},"created":"2014-10-29T07:31:00.507+0000","updated":"2014-10-29T07:31:00.507+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12749378/comment/14192259","id":"14192259","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mmokhtar","name":"mmokhtar","key":"mmokhtar","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=mmokhtar&avatarId=21863","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=mmokhtar&avatarId=21863","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=mmokhtar&avatarId=21863","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=mmokhtar&avatarId=21863"},"displayName":"Mostafa Mokhtar","active":true,"timeZone":"America/Los_Angeles"},"body":"[~rhbutani] [~hagleitn] [~jpullokkaran]\n\nIssue resolved in latest build \n{code}\nSTAGE PLANS:\n  Stage: Stage-1\n    Tez\n      Edges:\n        Map 1 <- Map 8 (BROADCAST_EDGE)\n        Map 6 <- Map 5 (BROADCAST_EDGE), Map 9 (BROADCAST_EDGE)\n        Map 9 <- Map 7 (BROADCAST_EDGE)\n        Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 6 (SIMPLE_EDGE)\n        Reducer 3 <- Reducer 2 (SIMPLE_EDGE)\n        Reducer 4 <- Reducer 3 (SIMPLE_EDGE)\n      DagName: mmokhtar_20141031145858_4f12c0f7-13ef-46e8-9535-81b02cc8a937:1\n      Vertices:\n        Map 1\n            Map Operator Tree:\n                TableScan\n                  alias: customer_address\n                  filterExpr: ca_address_sk is not null (type: boolean)\n                  Statistics: Num rows: 40000000 Data size: 40595195284 Basic stats: COMPLETE Column stats: COMPLETE\n                  Filter Operator\n                    predicate: ca_address_sk is not null (type: boolean)\n                    Statistics: Num rows: 40000000 Data size: 7640000000 Basic stats: COMPLETE Column stats: COMPLETE\n                    Select Operator\n                      expressions: ca_address_sk (type: int), ca_county (type: string), ca_zip (type: string)\n                      outputColumnNames: _col0, _col1, _col2\n                      Statistics: Num rows: 40000000 Data size: 7640000000 Basic stats: COMPLETE Column stats: COMPLETE\n                      Map Join Operator\n                        condition map:\n                             Inner Join 0 to 1\n                        condition expressions:\n                          0 {_col0}\n                          1 {_col1} {_col2}\n                        keys:\n                          0 _col1 (type: int)\n                          1 _col0 (type: int)\n                        outputColumnNames: _col0, _col3, _col4\n                        input vertices:\n                          0 Map 8\n                        Statistics: Num rows: 80000000 Data size: 14960000000 Basic stats: COMPLETE Column stats: COMPLETE\n                        Reduce Output Operator\n                          key expressions: _col0 (type: int)\n                          sort order: +\n                          Map-reduce partition columns: _col0 (type: int)\n                          Statistics: Num rows: 80000000 Data size: 14960000000 Basic stats: COMPLETE Column stats: COMPLETE\n                          value expressions: _col3 (type: string), _col4 (type: string)\n            Execution mode: vectorized\n        Map 5\n            Map Operator Tree:\n                TableScan\n                  alias: date_dim\n                  filterExpr: (((d_qoy = 2) and (d_year = 2000)) and d_date_sk is not null) (type: boolean)\n                  Statistics: Num rows: 73049 Data size: 81741831 Basic stats: COMPLETE Column stats: COMPLETE\n                  Filter Operator\n                    predicate: (((d_qoy = 2) and (d_year = 2000)) and d_date_sk is not null) (type: boolean)\n                    Statistics: Num rows: 635 Data size: 7620 Basic stats: COMPLETE Column stats: COMPLETE\n                    Select Operator\n                      expressions: d_date_sk (type: int)\n                      outputColumnNames: _col0\n                      Statistics: Num rows: 635 Data size: 2540 Basic stats: COMPLETE Column stats: COMPLETE\n                      Reduce Output Operator\n                        key expressions: _col0 (type: int)\n                        sort order: +\n                        Map-reduce partition columns: _col0 (type: int)\n                        Statistics: Num rows: 635 Data size: 2540 Basic stats: COMPLETE Column stats: COMPLETE\n                      Select Operator\n                        expressions: _col0 (type: int)\n                        outputColumnNames: _col0\n                        Statistics: Num rows: 635 Data size: 2540 Basic stats: COMPLETE Column stats: COMPLETE\n                        Group By Operator\n                          keys: _col0 (type: int)\n                          mode: hash\n                          outputColumnNames: _col0\n                          Statistics: Num rows: 317 Data size: 1268 Basic stats: COMPLETE Column stats: COMPLETE\n                          Dynamic Partitioning Event Operator\n                            Target Input: web_sales\n                            Partition key expr: ws_sold_date_sk\n                            Statistics: Num rows: 317 Data size: 1268 Basic stats: COMPLETE Column stats: COMPLETE\n                            Target column: ws_sold_date_sk\n                            Target Vertex: Map 6\n            Execution mode: vectorized\n        Map 6\n            Map Operator Tree:\n                TableScan\n                  alias: web_sales\n                  filterExpr: (ws_item_sk is not null and ws_bill_customer_sk is not null) (type: boolean)\n                  Statistics: Num rows: 21594638446 Data size: 2850189889652 Basic stats: COMPLETE Column stats: COMPLETE\n                  Filter Operator\n                    predicate: (ws_item_sk is not null and ws_bill_customer_sk is not null) (type: boolean)\n                    Statistics: Num rows: 21591944812 Data size: 345449542868 Basic stats: COMPLETE Column stats: COMPLETE\n                    Select Operator\n                      expressions: ws_item_sk (type: int), ws_bill_customer_sk (type: int), ws_sales_price (type: float), ws_sold_date_sk (type: int)\n                      outputColumnNames: _col0, _col1, _col2, _col3\n                      Statistics: Num rows: 21591944812 Data size: 345449542868 Basic stats: COMPLETE Column stats: COMPLETE\n                      Map Join Operator\n                        condition map:\n                             Inner Join 0 to 1\n                        condition expressions:\n                          0 {_col0} {_col1} {_col2}\n                          1\n                        keys:\n                          0 _col3 (type: int)\n                          1 _col0 (type: int)\n                        outputColumnNames: _col0, _col1, _col2\n                        input vertices:\n                          1 Map 5\n                        Statistics: Num rows: 24138881964 Data size: 289666583568 Basic stats: COMPLETE Column stats: COMPLETE\n                        Map Join Operator\n                          condition map:\n                               Inner Join 0 to 1\n                          condition expressions:\n                            0 {_col1} {_col2}\n                            1\n                          keys:\n                            0 _col0 (type: int)\n                            1 _col0 (type: int)\n                          outputColumnNames: _col1, _col2\n                          input vertices:\n                            1 Map 9\n                          Statistics: Num rows: 6034720256 Data size: 48277762048 Basic stats: COMPLETE Column stats: COMPLETE\n                          Select Operator\n                            expressions: _col1 (type: int), _col2 (type: float)\n                            outputColumnNames: _col1, _col2\n                            Statistics: Num rows: 6034720256 Data size: 48277762048 Basic stats: COMPLETE Column stats: COMPLETE\n                            Reduce Output Operator\n                              key expressions: _col1 (type: int)\n                              sort order: +\n                              Map-reduce partition columns: _col1 (type: int)\n                              Statistics: Num rows: 6034720256 Data size: 48277762048 Basic stats: COMPLETE Column stats: COMPLETE\n                              value expressions: _col2 (type: float)\n            Execution mode: vectorized\n        Map 7\n            Map Operator Tree:\n                TableScan\n                  alias: item\n                  filterExpr: ((i_item_sk) IN (2, 3, 5, 7, 11, 13, 17, 19, 23, 29) and i_item_id is not null) (type: boolean)\n                  Statistics: Num rows: 462000 Data size: 663862160 Basic stats: COMPLETE Column stats: COMPLETE\n                  Filter Operator\n                    predicate: ((i_item_sk) IN (2, 3, 5, 7, 11, 13, 17, 19, 23, 29) and i_item_id is not null) (type: boolean)\n                    Statistics: Num rows: 231000 Data size: 24024000 Basic stats: COMPLETE Column stats: COMPLETE\n                    Select Operator\n                      expressions: i_item_id (type: string)\n                      outputColumnNames: _col0\n                      Statistics: Num rows: 231000 Data size: 23100000 Basic stats: COMPLETE Column stats: COMPLETE\n                      Group By Operator\n                        keys: _col0 (type: string)\n                        mode: hash\n                        outputColumnNames: _col0\n                        Statistics: Num rows: 115500 Data size: 11550000 Basic stats: COMPLETE Column stats: COMPLETE\n                        Reduce Output Operator\n                          key expressions: _col0 (type: string)\n                          sort order: +\n                          Map-reduce partition columns: _col0 (type: string)\n                          Statistics: Num rows: 115500 Data size: 11550000 Basic stats: COMPLETE Column stats: COMPLETE\n            Execution mode: vectorized\n        Map 8\n            Map Operator Tree:\n                TableScan\n                  alias: customer\n                  filterExpr: (c_current_addr_sk is not null and c_customer_sk is not null) (type: boolean)\n                  Statistics: Num rows: 80000000 Data size: 68801615852 Basic stats: COMPLETE Column stats: COMPLETE\n                  Filter Operator\n                    predicate: (c_current_addr_sk is not null and c_customer_sk is not null) (type: boolean)\n                    Statistics: Num rows: 80000000 Data size: 640000000 Basic stats: COMPLETE Column stats: COMPLETE\n                    Select Operator\n                      expressions: c_customer_sk (type: int), c_current_addr_sk (type: int)\n                      outputColumnNames: _col0, _col1\n                      Statistics: Num rows: 80000000 Data size: 640000000 Basic stats: COMPLETE Column stats: COMPLETE\n                      Reduce Output Operator\n                        key expressions: _col1 (type: int)\n                        sort order: +\n                        Map-reduce partition columns: _col1 (type: int)\n                        Statistics: Num rows: 80000000 Data size: 640000000 Basic stats: COMPLETE Column stats: COMPLETE\n                        value expressions: _col0 (type: int)\n            Execution mode: vectorized\n        Map 9\n            Map Operator Tree:\n                TableScan\n                  alias: item\n                  filterExpr: (i_item_id is not null and i_item_sk is not null) (type: boolean)\n                  Statistics: Num rows: 462000 Data size: 663862160 Basic stats: COMPLETE Column stats: COMPLETE\n                  Filter Operator\n                    predicate: (i_item_id is not null and i_item_sk is not null) (type: boolean)\n                    Statistics: Num rows: 462000 Data size: 48048000 Basic stats: COMPLETE Column stats: COMPLETE\n                    Select Operator\n                      expressions: i_item_sk (type: int), i_item_id (type: string)\n                      outputColumnNames: _col0, _col1\n                      Statistics: Num rows: 462000 Data size: 48048000 Basic stats: COMPLETE Column stats: COMPLETE\n                      Map Join Operator\n                        condition map:\n                             Left Semi Join 0 to 1\n                        condition expressions:\n                          0 {_col0}\n                          1\n                        keys:\n                          0 _col1 (type: string)\n                          1 _col0 (type: string)\n                        outputColumnNames: _col0\n                        input vertices:\n                          1 Map 7\n                        Statistics: Num rows: 343407 Data size: 1373628 Basic stats: COMPLETE Column stats: COMPLETE\n                        Select Operator\n                          expressions: _col0 (type: int)\n                          outputColumnNames: _col0\n                          Statistics: Num rows: 343407 Data size: 1373628 Basic stats: COMPLETE Column stats: COMPLETE\n                          Reduce Output Operator\n                            key expressions: _col0 (type: int)\n                            sort order: +\n                            Map-reduce partition columns: _col0 (type: int)\n                            Statistics: Num rows: 343407 Data size: 1373628 Basic stats: COMPLETE Column stats: COMPLETE\n            Execution mode: vectorized\n        Reducer 2\n            Reduce Operator Tree:\n              Merge Join Operator\n                condition map:\n                     Inner Join 0 to 1\n                condition expressions:\n                  0 {VALUE._col2} {VALUE._col3}\n                  1 {VALUE._col1}\n                outputColumnNames: _col3, _col4, _col7\n                Statistics: Num rows: 137325482305 Data size: 26229167120255 Basic stats: COMPLETE Column stats: COMPLETE\n                Select Operator\n                  expressions: _col4 (type: string), _col3 (type: string), _col7 (type: float)\n                  outputColumnNames: _col0, _col1, _col2\n                  Statistics: Num rows: 137325482305 Data size: 26229167120255 Basic stats: COMPLETE Column stats: COMPLETE\n                  Group By Operator\n                    aggregations: sum(_col2)\n                    keys: _col0 (type: string), _col1 (type: string)\n                    mode: hash\n                    outputColumnNames: _col0, _col1, _col2\n                    Statistics: Num rows: 137325482305 Data size: 26778469049475 Basic stats: COMPLETE Column stats: COMPLETE\n                    Reduce Output Operator\n                      key expressions: _col0 (type: string), _col1 (type: string)\n                      sort order: ++\n                      Map-reduce partition columns: _col0 (type: string), _col1 (type: string)\n                      Statistics: Num rows: 137325482305 Data size: 26778469049475 Basic stats: COMPLETE Column stats: COMPLETE\n                      value expressions: _col2 (type: double)\n        Reducer 3\n            Reduce Operator Tree:\n              Group By Operator\n                aggregations: sum(VALUE._col0)\n                keys: KEY._col0 (type: string), KEY._col1 (type: string)\n                mode: mergepartial\n                outputColumnNames: _col0, _col1, _col2\n                Statistics: Num rows: 137325482305 Data size: 27190445496390 Basic stats: COMPLETE Column stats: COMPLETE\n                Select Operator\n                  expressions: _col0 (type: string), _col1 (type: string), _col2 (type: double)\n                  outputColumnNames: _col0, _col1, _col2\n                  Statistics: Num rows: 137325482305 Data size: 27190445496390 Basic stats: COMPLETE Column stats: COMPLETE\n                  Reduce Output Operator\n                    key expressions: _col0 (type: string), _col1 (type: string)\n                    sort order: ++\n                    Statistics: Num rows: 137325482305 Data size: 27190445496390 Basic stats: COMPLETE Column stats: COMPLETE\n                    TopN Hash Memory Usage: 0.04\n                    value expressions: _col2 (type: double)\n            Execution mode: vectorized\n        Reducer 4\n            Reduce Operator Tree:\n              Select Operator\n                expressions: KEY.reducesinkkey0 (type: string), KEY.reducesinkkey1 (type: string), VALUE._col0 (type: double)\n                outputColumnNames: _col0, _col1, _col2\n                Statistics: Num rows: 137325482305 Data size: 27190445496390 Basic stats: COMPLETE Column stats: COMPLETE\n                Limit\n                  Number of rows: 100\n                  Statistics: Num rows: 100 Data size: 19800 Basic stats: COMPLETE Column stats: COMPLETE\n                  File Output Operator\n                    compressed: false\n                    Statistics: Num rows: 100 Data size: 19800 Basic stats: COMPLETE Column stats: COMPLETE\n                    table:\n                        input format: org.apache.hadoop.mapred.TextInputFormat\n                        output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat\n                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe\n            Execution mode: vectorized\n\n  Stage: Stage-0\n    Fetch Operator\n      limit: 100\n      Processor Tree:\n        ListSink\n{code}","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mmokhtar","name":"mmokhtar","key":"mmokhtar","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=mmokhtar&avatarId=21863","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=mmokhtar&avatarId=21863","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=mmokhtar&avatarId=21863","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=mmokhtar&avatarId=21863"},"displayName":"Mostafa Mokhtar","active":true,"timeZone":"America/Los_Angeles"},"created":"2014-10-31T19:01:54.897+0000","updated":"2014-10-31T19:01:54.897+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12749378/comment/14192295","id":"14192295","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hagleitn","name":"hagleitn","key":"hagleitn","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hagleitn&avatarId=16035","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hagleitn&avatarId=16035","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hagleitn&avatarId=16035","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hagleitn&avatarId=16035"},"displayName":"Gunther Hagleitner","active":true,"timeZone":"America/Los_Angeles"},"body":"HIVE-8653 fixes the problem. Closing as duplicate.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hagleitn","name":"hagleitn","key":"hagleitn","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hagleitn&avatarId=16035","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hagleitn&avatarId=16035","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hagleitn&avatarId=16035","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hagleitn&avatarId=16035"},"displayName":"Gunther Hagleitner","active":true,"timeZone":"America/Los_Angeles"},"created":"2014-10-31T19:21:24.652+0000","updated":"2014-10-31T19:21:24.652+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12749378/comment/14210358","id":"14210358","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=thejas","name":"thejas","key":"thejas","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=thejas&avatarId=15902","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=thejas&avatarId=15902","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=thejas&avatarId=15902","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=thejas&avatarId=15902"},"displayName":"Thejas M Nair","active":true,"timeZone":"America/Los_Angeles"},"body":"This has been fixed in 0.14 release. Please open new jira if you see any issues.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=thejas","name":"thejas","key":"thejas","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=thejas&avatarId=15902","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=thejas&avatarId=15902","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=thejas&avatarId=15902","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=thejas&avatarId=15902"},"displayName":"Thejas M Nair","active":true,"timeZone":"America/Los_Angeles"},"created":"2014-11-13T19:40:25.562+0000","updated":"2014-11-13T19:40:25.562+0000"}],"maxResults":6,"total":6,"startAt":0},"votes":{"self":"https://issues.apache.org/jira/rest/api/2/issue/HIVE-8526/votes","votes":0,"hasVoted":false},"worklog":{"startAt":0,"maxResults":20,"total":0,"worklogs":[]},"customfield_12311820":"0|i21dp3:"}}