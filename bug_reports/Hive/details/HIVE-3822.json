{"expand":"renderedFields,names,schema,operations,editmeta,changelog,versionedRepresentations","id":"12624690","self":"https://issues.apache.org/jira/rest/api/2/issue/12624690","key":"HIVE-3822","fields":{"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype","name":"Bug","subtask":false,"avatarId":21133},"timespent":null,"project":{"self":"https://issues.apache.org/jira/rest/api/2/project/12310843","id":"12310843","key":"HIVE","name":"Hive","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/projectavatar?pid=12310843&avatarId=11935","24x24":"https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12310843&avatarId=11935","16x16":"https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12310843&avatarId=11935","32x32":"https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12310843&avatarId=11935"},"projectCategory":{"self":"https://issues.apache.org/jira/rest/api/2/projectCategory/10292","id":"10292","description":"Scalable Distributed Computing","name":"Hadoop"}},"fixVersions":[],"aggregatetimespent":null,"resolution":null,"customfield_12312322":null,"customfield_12310220":"2013-01-05T09:42:05.163+0000","customfield_12312520":null,"customfield_12312323":null,"customfield_12312521":"Tue Jun 18 03:12:17 UTC 2013","customfield_12310420":"300558","customfield_12312320":null,"customfield_12310222":null,"customfield_12312321":null,"resolutiondate":null,"workratio":-1,"customfield_12312328":null,"customfield_12312329":null,"customfield_12312923":null,"customfield_12312326":null,"customfield_12312920":null,"customfield_12310300":null,"customfield_12312327":null,"customfield_12312921":null,"customfield_12312324":null,"customfield_12312720":null,"customfield_12312325":null,"lastViewed":null,"watches":{"self":"https://issues.apache.org/jira/rest/api/2/issue/HIVE-3822/watchers","watchCount":4,"isWatching":false},"created":"2012-12-19T19:36:55.758+0000","customfield_12310192":null,"customfield_12310191":null,"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.svg","name":"Major","id":"3"},"labels":[],"customfield_12312333":null,"customfield_12310230":null,"customfield_12312334":null,"customfield_12313422":"false","customfield_12310310":"0.0","customfield_12312331":null,"customfield_12312332":null,"timeestimate":null,"aggregatetimeoriginalestimate":null,"customfield_12311120":null,"customfield_12312330":null,"versions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12317742","id":"12317742","description":"released","name":"0.9.0","archived":false,"released":true,"releaseDate":"2012-04-30"}],"issuelinks":[{"id":"12362433","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12362433","type":{"id":"12310000","name":"Duplicate","inward":"is duplicated by","outward":"duplicates","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/12310000"},"outwardIssue":{"id":"12607355","key":"HIVE-3454","self":"https://issues.apache.org/jira/rest/api/2/issue/12607355","fields":{"summary":"Problem with CAST(BIGINT as TIMESTAMP)","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Done"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.svg","name":"Major","id":"3"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype","name":"Bug","subtask":false,"avatarId":21133}}}},{"id":"12362414","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12362414","type":{"id":"10030","name":"Reference","inward":"is related to","outward":"relates to","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"},"inwardIssue":{"id":"12625434","key":"HIVE-3844","self":"https://issues.apache.org/jira/rest/api/2/issue/12625434","fields":{"summary":"Unix timestamps don't seem to be read correctly from HDFS as Timestamp column","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/1","description":"The issue is open and ready for the assignee to start work on it.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/open.png","name":"Open","id":"1","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/2","id":2,"key":"new","colorName":"blue-gray","name":"To Do"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.svg","name":"Major","id":"3"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype","name":"Bug","subtask":false,"avatarId":21133}}}}],"customfield_12312339":null,"assignee":null,"customfield_12312337":null,"customfield_12312338":null,"updated":"2017-04-08T19:51:17.424+0000","customfield_12312335":null,"customfield_12312336":null,"status":{"self":"https://issues.apache.org/jira/rest/api/2/status/1","description":"The issue is open and ready for the assignee to start work on it.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/open.png","name":"Open","id":"1","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/2","id":2,"key":"new","colorName":"blue-gray","name":"To Do"}},"components":[],"timeoriginalestimate":null,"description":"{code}\nselect cast(1355944339 as timestamp) from decimal_3 limit 1;\n1970-01-16 08:39:04.339\n\nselect cast(1355944339000 as timestamp) from decimal_3 limit 1;\n2012-12-19 11:12:19\n\nselect cast(1355944339.123456789 as timestamp) from decimal_3 limit 1;\n2012-12-19 11:12:19.1234567\n{code}\n\nIf specifying the unixTimestamp without a decimal point, we need to specify the millisecond timestamp. If specifying with a decimal point, we need to specify only the second timestamp and the rest goes after decimal. Moreover, it seems like some precision is lost (notice '89' are lost in the last query.","customfield_10010":null,"timetracking":{},"customfield_12312026":null,"customfield_12312023":null,"customfield_12310320":null,"customfield_12312024":null,"customfield_12312340":null,"attachment":[],"aggregatetimeestimate":null,"customfield_12312341":null,"customfield_12312220":null,"customfield_12312022":null,"customfield_12310921":null,"customfield_12310920":"245958","customfield_12312823":null,"summary":"Casting from double to timestamp type seems inconsistent","creator":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mgrover","name":"mgrover","key":"mgrover","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mark Grover","active":true,"timeZone":"America/Los_Angeles"},"subtasks":[],"customfield_12310291":null,"reporter":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mgrover","name":"mgrover","key":"mgrover","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mark Grover","active":true,"timeZone":"America/Los_Angeles"},"customfield_12310290":null,"aggregateprogress":{"progress":0,"total":0},"customfield_12311024":null,"environment":null,"customfield_12313520":null,"customfield_12311020":null,"duedate":null,"customfield_12310250":null,"progress":{"progress":0,"total":0},"comment":{"comments":[{"self":"https://issues.apache.org/jira/rest/api/2/issue/12624690/comment/13544642","id":"13544642","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rharris","name":"rharris","key":"rharris","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ryan Harris","active":true,"timeZone":"America/Los_Angeles"},"body":"Shouldn't these tests have returned:\nWed, 19 Dec 2012 19:12:19\n?\n\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rharris","name":"rharris","key":"rharris","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ryan Harris","active":true,"timeZone":"America/Los_Angeles"},"created":"2013-01-05T09:42:05.163+0000","updated":"2013-01-05T09:42:05.163+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12624690/comment/13544761","id":"13544761","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mgrover","name":"mgrover","key":"mgrover","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mark Grover","active":true,"timeZone":"America/Los_Angeles"},"body":"The short answer is no. \nHere is why:\nThat particular unix timestamp represents Wed, 19 Dec 2012 19:12:19 GMT. The Hive timestamp datatype is a based on [TimestampWritable| https://github.com/apache/hive/blob/trunk/serde/src/java/org/apache/hadoop/hive/serde2/io/TimestampWritable.java] which is a essentially a wrapper around [java.sql.Timestamp| https://github.com/apache/hive/blob/trunk/serde/src/java/org/apache/hadoop/hive/serde2/io/TimestampWritable.java#L67]. java.sql.Timestamp as you know is timezone-less. It's more or less equivalent to a unix timestamp. Consequently, Hive timestamps are inherently timezone-less. The tricky bit though is when you have to print this timestamp in a human-readable form where you need use a particular timezone. As you will see in the code, the [DateFormat | https://github.com/apache/hive/blob/trunk/serde/src/java/org/apache/hadoop/hive/serde2/io/TimestampWritable.java#L65] specifies no particular timezone when [formatting the Timestamp object to a human-readable string| https://github.com/apache/hive/blob/trunk/serde/src/java/org/apache/hadoop/hive/serde2/io/TimestampWritable.java#L318], so it ends up using the default timezone of the JVM which is the same as the system's default timezone unless specifically overriden. \n\nTo summarize, when we print a timestamp object in Hive as a human-readable string, the default JVM/system timezone is used. In my case, the above Hive queries were run on PST machine (GMT-8), so 2012-12-19 11:12:19 is the correct expected output instead of 2012-12-19 19:12:19\n\nHope that helps!","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mgrover","name":"mgrover","key":"mgrover","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mark Grover","active":true,"timeZone":"America/Los_Angeles"},"created":"2013-01-05T17:07:08.318+0000","updated":"2013-01-05T17:07:08.318+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12624690/comment/13544798","id":"13544798","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rharris","name":"rharris","key":"rharris","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ryan Harris","active":true,"timeZone":"America/Los_Angeles"},"body":"I understand that is the way the code *does* work, the question, in my mind...is that the way it *should* work?\n\nI understand that timestamps are inherently timezone-less, and if you want/need to deal with timezone conversions that is the reason the from_utc_timestamp() and to_utc_timestamp() functions were created.\n\nIn this case, the result of the query is going to change/depend on the local timezone of the cluster you are running the query against.\n\nIn my opinion the result of a query should NOT depend on the time configuration of your server/cluster.\n\nIf you WANT/NEED to alter the conversion of the timestamp to account for a specific timezone, shouldn't you use from_utc_timestamp()? \n\nAs it is, because of the implicit cast() conversion that is occurring when to_utc_timestamp() is called, the results of: to_utc_timestamp(1355944339.0, 'GMT')\nSTILL varies based on the timezone of the JVM/cluster where the function is called...that makes NO sense.\n\nIMO, the cast() function should assume that the epoch integer/double passed to it is timezone-less and NOT apply any skew/adjustment based on the whatever the local timezone of the JVM might be.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rharris","name":"rharris","key":"rharris","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ryan Harris","active":true,"timeZone":"America/Los_Angeles"},"created":"2013-01-05T19:41:14.719+0000","updated":"2013-01-05T19:41:14.719+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12624690/comment/13544808","id":"13544808","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mgrover","name":"mgrover","key":"mgrover","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mark Grover","active":true,"timeZone":"America/Los_Angeles"},"body":"bq. In my opinion the result of a query should NOT depend on the time configuration of your server/cluster.\n\nRyan, that's presently not the case. And, that's not just Hive but other databases as well. MySQL, for example, uses the default timezone of the system for unix timestamp to human-readable conversions as well.\n\nWhat you are saying about to_utc_timestamp() is most likely a bug in the UDF code itself. If so, please file a separate JIRA for that. In my personal opinion, a bug in how to_utc_timestamp works doesn't warrant changing the behavior of Timestamp type to use GMT timezone when converting to human readable format instead of the default system time zone.\n\nI haven't looked at the code but I would expect to_utc_timestamp() to return the same result as long as the first parameter represents the same logical timestamp regardless of how it is expressed - integer timestamp or timestamp type. Are you saying the result is different depending on the representation being passed as the first parameter?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mgrover","name":"mgrover","key":"mgrover","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mark Grover","active":true,"timeZone":"America/Los_Angeles"},"created":"2013-01-05T20:19:42.695+0000","updated":"2013-01-05T20:19:42.695+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12624690/comment/13544959","id":"13544959","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rharris","name":"rharris","key":"rharris","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ryan Harris","active":true,"timeZone":"America/Los_Angeles"},"body":"I'm still not sure that I agree with you on the time conversion issue...\nI'm not sure what the \"correct\" answer is, but I'm experiencing inconsistent/unexpected behavior depending on how I convert the timestamp.\n\nFrom my point of view, if a timezone isn't specified then 0 = 1970-01-01 00:00:00\n\nselect cast(0.0 as timestamp) from test limit 1\n1969-12-31 17:00:00\n\nselect cast('1970-01-01 00:00:00' as timestamp) from test limit 1\n1970-01-01 00:00:00\n\nShouldn't those two results be the same?\nThis is the \"inconsistency\" I reference.\n\nselect to_utc_timestamp(0.0,'GMT') from test limit 1\n1969-12-31 17:00:00\n\nselect to_utc_timestamp('1970-01-01 00:00:00','GMT') from test limit 1\n1970-01-01 00:00:00\n\nThe same inconsistency is produced here....but the behavior seemed to be related to the cast() conversion taking place in to_utc_timestamp, not in the UDF itself...if you still think that this is actually an issue with the UDF itself I can file a separate JIRA for that, but to me, all of this seems to be related back to cast()\n\nIn this case, my cluster is set to America/Denver timezone, so if I attempted to set a local epoch time to a timestamp in what to me is a logical approach, this *appears* to work:\nselect to_utc_timestamp(0.0,'America/Denver') from test limit 1\n1970-01-01 00:00:00\n\nHowever, I say that it \"appears\" to work, because if I the retrieve that same stored timestamp using the from_utc_timestamp() UDF:\nselect from_utc_timestamp(to_utc_timestamp(0.0,'America/Denver'),'America/Denver') from test limit 1\n1969-12-31 17:00:00\n\nwhich again is different than if I had done:\n\"select from_utc_timestamp(to_utc_timestamp('1970-01-01 00:00:00','America/Denver'),'America/Denver') from test limit 1\n1970-01-01 00:00:00\n\n\nThe problem is that cast(STRING datetime to TIMESTAMP) produces different results from cast(int/float datetime to TIMESTAMP)\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rharris","name":"rharris","key":"rharris","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ryan Harris","active":true,"timeZone":"America/Los_Angeles"},"created":"2013-01-05T20:46:27.349+0000","updated":"2013-01-05T20:46:27.349+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12624690/comment/13545161","id":"13545161","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rharris","name":"rharris","key":"rharris","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ryan Harris","active":true,"timeZone":"America/Los_Angeles"},"body":"Also, \nselect from_utc_timestamp(to_utc_timestamp('1970-01-01 00:00:00','GMT'),'America/Denver') from test limit 1\n1969-12-31 17:00:00\n\nis an expected result..\n\nselect from_utc_timestamp(to_utc_timestamp(0.0,'GMT'),'America/Denver') from test limit 1\n1969-12-31 10:00:00\n\nis VERY unexpected...","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rharris","name":"rharris","key":"rharris","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ryan Harris","active":true,"timeZone":"America/Los_Angeles"},"created":"2013-01-05T20:52:12.331+0000","updated":"2013-01-05T20:52:12.331+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12624690/comment/13545169","id":"13545169","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mgrover","name":"mgrover","key":"mgrover","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mark Grover","active":true,"timeZone":"America/Los_Angeles"},"body":"{quote}\nselect cast(0.0 as timestamp) from test limit 1\n1969-12-31 17:00:00\nselect cast('1970-01-01 00:00:00' as timestamp) from test limit 1\n1970-01-01 00:00:00\n{quote}\n\nWe can't talk about human readable timestamps without referring to a particular timezone. When your query is {{select cast('1970-01-01 00:00:00' as timestamp) from test limit 1}}, you are implicitly referring to your default timezone (you can make an argument that implicit reference should be to GMT timezone here but like I said before that's historically not been the case with database systems) and therefore the results are different. The first query creates a query that's 01/01/1970 midnight in UTC while the second creates the same time but in Denver.\n\nbq. The problem is that cast(STRING datetime to TIMESTAMP) produces different results from cast(int/float datetime to TIMESTAMP)\n\nThat would always be the case (unless your system timezone is UTC) since the STRING datetime refers to your system timezone while the int/float datetime always refers to UTC timezone.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mgrover","name":"mgrover","key":"mgrover","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mark Grover","active":true,"timeZone":"America/Los_Angeles"},"created":"2013-01-05T21:06:06.822+0000","updated":"2013-01-05T21:06:06.822+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12624690/comment/13545184","id":"13545184","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rharris","name":"rharris","key":"rharris","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ryan Harris","active":true,"timeZone":"America/Los_Angeles"},"body":"I don't have enough experience with this operation on other database systems to have clear expectations of how things should work in Hive.\n\nI initially noticed the inconsistency when using to_utc_timestamp() and then identified that the behavior seemed to come from the cast() conversion\n\nIf you are saying that the behavior of cast() is expected and appropriate, then it would seem that to_utc_timestamp() is producing unexpected results....\n\nHowever, to_utc_timestamp(timestamp,string) expects a timestamp (not integer/float) value...thus cast() is being used to get the int/float submitted, INTO a timestamp, which is why\n\nselect from_utc_timestamp(to_utc_timestamp(0.0,'GMT'),'GMT') from test limit 1\nand\nselect from_utc_timestamp(to_utc_timestamp(cast(0.0 as timestamp),'GMT'),'GMT') from test limit 1\nboth return the same (wrong) result:\n1969-12-31 17:00:00\n\n\nHere is my question....\nIf you are processing a log file that contains a GMT epoch formatted date value, what is the appropriate way to process/store that value in a timestamp field and get the same stored timestamp regardless of the timezone setting of the cluster processing the file?\n\nWhat should be changed to ensure that:\n\nselect from_utc_timestamp(to_utc_timestamp(0.0,'GMT'),'GMT') from test limit 1\n\nALWAYS returns 1970-01-01 00:00:00 as it should, no matter what the system timezone is set for?\n\n\n\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rharris","name":"rharris","key":"rharris","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ryan Harris","active":true,"timeZone":"America/Los_Angeles"},"created":"2013-01-05T21:40:02.077+0000","updated":"2013-01-05T21:40:02.077+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12624690/comment/13686337","id":"13686337","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=ariforu","name":"ariforu","key":"ariforu","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Arijit Banerjee","active":true,"timeZone":"America/Havana"},"body":"I think a good approach would be to fix it in a way that it can work with both double and long values. This is what I did and works for me. Let me know what you think. I also suggested this in the duplicate issue #HIVE-3454.\n\nIn org.apache.hadoop.hive.serde2.objectinspector.primitive PrimitiveObjectInspectorUtils.java edit getTimestamp method and convert the long object to double.\n\ngetTimestamp(Object o, PrimitiveObjectInspector oi)\n\ncase LONG:\n//Timestamp conversion from LONG is messy. Converting to double.\nlong tsLongPrimitive=((LongObjectInspector) oi).get(o);\nresult =TimestampWritable.doubleToTimestamp(tsLongPrimitive*1.0);\nbreak;\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=ariforu","name":"ariforu","key":"ariforu","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Arijit Banerjee","active":true,"timeZone":"America/Havana"},"created":"2013-06-18T03:12:17.184+0000","updated":"2013-06-18T03:12:17.184+0000"}],"maxResults":9,"total":9,"startAt":0},"votes":{"self":"https://issues.apache.org/jira/rest/api/2/issue/HIVE-3822/votes","votes":1,"hasVoted":false},"worklog":{"startAt":0,"maxResults":20,"total":0,"worklogs":[]},"customfield_12311820":"0|i16hfz:"}}