{"expand":"renderedFields,names,schema,operations,editmeta,changelog,versionedRepresentations","id":"12411699","self":"https://issues.apache.org/jira/rest/api/2/issue/12411699","key":"HIVE-207","fields":{"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype","name":"Bug","subtask":false,"avatarId":21133},"timespent":null,"project":{"self":"https://issues.apache.org/jira/rest/api/2/project/12310843","id":"12310843","key":"HIVE","name":"Hive","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/projectavatar?pid=12310843&avatarId=11935","24x24":"https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12310843&avatarId=11935","16x16":"https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12310843&avatarId=11935","32x32":"https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12310843&avatarId=11935"},"projectCategory":{"self":"https://issues.apache.org/jira/rest/api/2/projectCategory/10292","id":"10292","description":"Scalable Distributed Computing","name":"Hadoop"}},"fixVersions":[],"aggregatetimespent":null,"resolution":null,"customfield_12312322":null,"customfield_12310220":"2009-01-05T17:59:12.799+0000","customfield_12312520":null,"customfield_12312323":null,"customfield_12312521":"Thu Jan 08 23:42:32 UTC 2009","customfield_12310420":"42881","customfield_12312320":null,"customfield_12310222":null,"customfield_12312321":null,"resolutiondate":null,"workratio":-1,"customfield_12312328":null,"customfield_12312329":null,"customfield_12312923":null,"customfield_12312326":null,"customfield_12312920":null,"customfield_12310300":null,"customfield_12312327":null,"customfield_12312921":null,"customfield_12312324":null,"customfield_12312720":null,"customfield_12312325":null,"lastViewed":null,"watches":{"self":"https://issues.apache.org/jira/rest/api/2/issue/HIVE-207/watchers","watchCount":6,"isWatching":false},"created":"2009-01-05T17:21:18.012+0000","customfield_12310192":null,"customfield_12310191":null,"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.svg","name":"Major","id":"3"},"labels":["optimization"],"customfield_12312333":null,"customfield_12310230":null,"customfield_12312334":null,"customfield_12313422":"false","customfield_12310310":"0.0","customfield_12312331":null,"customfield_12312332":null,"timeestimate":null,"aggregatetimeoriginalestimate":null,"customfield_12311120":null,"customfield_12312330":null,"versions":[],"issuelinks":[],"customfield_12312339":null,"assignee":null,"customfield_12312337":null,"customfield_12312338":null,"updated":"2011-04-05T23:13:06.427+0000","customfield_12312335":null,"customfield_12312336":null,"status":{"self":"https://issues.apache.org/jira/rest/api/2/status/1","description":"The issue is open and ready for the assignee to start work on it.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/open.png","name":"Open","id":"1","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/2","id":2,"key":"new","colorName":"blue-gray","name":"To Do"}},"components":[{"self":"https://issues.apache.org/jira/rest/api/2/component/12312586","id":"12312586","name":"Query Processor","description":"Tracks issues dealing with query processing."},{"self":"https://issues.apache.org/jira/rest/api/2/component/12312585","id":"12312585","name":"Serializers/Deserializers","description":"Tracks issues dealing with serdes"}],"timeoriginalestimate":null,"description":"A deserializer shouldn't have to deserialize columns that are never used by the query processor.  A serializer shouldn't have to examine unused columns that are known to always be null.\n\nAs an example, we store data as a Protocol Buffer structure with ~60 fields.  Running a \"select count(1)\" currently requires deserializing all fields, which includes checking if they exist and formatting the data appropriately.  This is expensive and unnecessary.","customfield_10010":null,"timetracking":{},"customfield_12312026":null,"customfield_12312023":null,"customfield_12310320":null,"customfield_12312024":null,"customfield_12312340":null,"attachment":[],"aggregatetimeestimate":null,"customfield_12312341":null,"customfield_12312220":null,"customfield_12312022":null,"customfield_12310921":null,"customfield_12310920":"122030","customfield_12312823":null,"summary":"Change SerDe API to allow skipping unused columns","creator":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=electrum","name":"electrum","key":"electrum","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"David Phillips","active":true,"timeZone":"America/Los_Angeles"},"subtasks":[],"customfield_12310291":null,"reporter":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=electrum","name":"electrum","key":"electrum","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"David Phillips","active":true,"timeZone":"America/Los_Angeles"},"customfield_12310290":null,"aggregateprogress":{"progress":0,"total":0},"customfield_12311024":null,"environment":null,"customfield_12313520":null,"customfield_12311020":null,"duedate":null,"customfield_12310250":null,"progress":{"progress":0,"total":0},"comment":{"comments":[{"self":"https://issues.apache.org/jira/rest/api/2/issue/12411699/comment/12660832","id":"12660832","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jsensarma","name":"jsensarma","key":"jsensarma","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Joydeep Sen Sarma","active":true,"timeZone":"Asia/Kolkata"},"body":"the deserializer api does get one column at a time. the deserialize() call doesn't have to do anything - it only has to return a handle back for lazy deserialization (where for example - the handle can contain a reference to a byte array). later on specific operators will invoke ObjectInspector interfaces to get access to particular columns - and at this point the objectinspector interface can be implemented to deserialize the relevant part of the byte array (for example).\n\nthe default reflection based objectinspector does not work this way - but this is a matter of implementation (we just haven't gotten around to lazy deserialization - and anyway it's dependent on the serialization format).\n\nif u can try and implement lazy deserialization for protocol buffers - that will tell us what else needs to be added in terms of interfaces (right now i am confident that we have enough interfaces, to for example, do lazy deserialization of delimited string format).","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jsensarma","name":"jsensarma","key":"jsensarma","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Joydeep Sen Sarma","active":true,"timeZone":"Asia/Kolkata"},"created":"2009-01-05T17:59:12.799+0000","updated":"2009-01-05T17:59:12.799+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12411699/comment/12660922","id":"12660922","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=electrum","name":"electrum","key":"electrum","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"David Phillips","active":true,"timeZone":"America/Los_Angeles"},"body":"Thanks, I'll give that a try.\n\nI haven't dug into the ObjectInspector stuff, but my initial impression is that it feels overly complex and backwards.  Perhaps part of it is the standard deserializers being spread over multiple classes.  It also seems strange that the deserializer can override the declared column types of the table.  My deserializer returns a MetadataListStructObjectInspector, causing all column types to be string.\n\nHere's a rough idea for a new interface:\n\n{noformat}\ninterface ColumnSet {\n  String[] getTableColumnNames();\n  ColumnType[] getTableColumnTypes();\n  int[] getUsedColumns();\n  void setColumnValue(int n, Object o);\n}\n\ninterface Deserializer {\n  void initialize(Configuration conf, Properties tbl, ColumnSet cols);\n  void deserialize(Writable blob, ColumnSet cols);\n}\n{noformat}\n\nThe deserializer would call setColumnValue() for each non-null column from getUsedColumns() index list.  The ColumnSet would be pre-initialized to null for all values.  The deserializer wouldn't need to worry about caching objects, implementing complex interfaces, etc.  It simply makes a single call for each column value.\n\nThere might be an overloaded setColumnValue() for standard types like int, Integer, String, etc.  Creating the actual ColumnSet object dynamically at runtime might have some performance advantages.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=electrum","name":"electrum","key":"electrum","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"David Phillips","active":true,"timeZone":"America/Los_Angeles"},"created":"2009-01-05T20:55:59.090+0000","updated":"2009-01-05T20:55:59.090+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12411699/comment/12660950","id":"12660950","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jsensarma","name":"jsensarma","key":"jsensarma","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Joydeep Sen Sarma","active":true,"timeZone":"Asia/Kolkata"},"body":"one thing about the SerDe/Objectinspector stuff is that the schema is dictated by the serde. Essentially - the DDL in hive is just a way to create configuration for the native serde (dynamic serde). At this point - what the serde returns whatever the DDL defines.\n\nHowever - the DDL is not required for all tables. Tables just need to have a SerDe - and the schema will be obtained from the Serde. There is a create table command that just takes in a serde specification (although i can't recount ths syntax off the bat - and there may be issues). We have lots of custom formatted tables in our environment for which the schema is not obtained from a DDL - but from a serde implementation. \n\nThe objectinspector stuff is also complicated because we support complex and nested types. So the ObjectInspector interfaces are somewhat similar to Java Reflection apis and are recursive.\n\nRegarding the specific proposal for the columnset - i think this is implementable inside the objectinspector framework. I take it that the data model is a flat set of columns. the deserialize() implementation will just populate the equivalent of the columnset structure (which is part of ur implementation) and will return a container with reference to the underlying serialized buffer and the columnset structure. You would have to implement a StructObjectInspector (which is what the getObjectInspector() should return). If u look at the methods in this (comments on what the implementation might have to do):\n\n  public List<? extends StructField> getAllStructFieldRefs(); \n  // this is just getTableColumnNames() from ur columnset struct\n\n  public StructField getStructFieldRef(String fieldName);\n  // this is whatever is required to extract  a field from a underlying buffer - for example some offset or index\n\n  public Object getStructFieldData(Object data, StructField fieldRef);\n  // this actually retrieves the field from the buffer. At this point - you can used information about used/unused columns to return nulls as required.\n\n  public List<Object> getStructFieldsDataAsList(Object data);\n  // this is just a transformation function - i am not entirely sure when this is invoked - but the implementation is obvious\n\nhope this explains things somewhat .. (unfortunately the design/scope of the serde stuff is not that well documented ..)\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jsensarma","name":"jsensarma","key":"jsensarma","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Joydeep Sen Sarma","active":true,"timeZone":"Asia/Kolkata"},"created":"2009-01-05T22:07:36.257+0000","updated":"2009-01-05T22:07:36.257+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12411699/comment/12660963","id":"12660963","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=zshao","name":"zshao","key":"zshao","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=zshao&avatarId=14358","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=zshao&avatarId=14358","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=zshao&avatarId=14358","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=zshao&avatarId=14358"},"displayName":"Zheng Shao","active":true,"timeZone":"America/Los_Angeles"},"body":"Our current SerDe framework is designed for allowing lazy initialization. That's why we allow the objects inside the memory to be heterogeneous and allow users to specify the object inspector to get the fields out of the object.\n\nThe major difficulty that you will see when implementing a new SerDe is probably you need to parse and understand the DDL (which is in thrift). The only easy way for that is to reuse the DynamicSerDe code, and write a new Protocol instead of a new serde. Then you can reuse the code in DynamicSerDe to parse the thrift DDL. You may want to take a look at TBinaryProtocol. (Let us know if you have any other good ideas to represent the types of columns without thrift DDL).\n\nYour idea of skipping columns is an alternative way of achieving efficiency. The good thing is that you can still enjoy the majority of the efficiencies (through pruning columns) while have a simple homogeneous in-memory representation. The bad thing is that there are some potential optimizations that your framework won't be able to do: 1. for different rows, we might want to deserialize different columns because there is an IF or CASE statement; 2. there are some operations that can be calculated without deserializing the whole field: size of the list, sub-field of a field, which are very common if the field is of complex type.\n\nAs a result, the use of ObjectInspector provides the best potential performance.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=zshao","name":"zshao","key":"zshao","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=zshao&avatarId=14358","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=zshao&avatarId=14358","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=zshao&avatarId=14358","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=zshao&avatarId=14358"},"displayName":"Zheng Shao","active":true,"timeZone":"America/Los_Angeles"},"created":"2009-01-05T22:31:13.722+0000","updated":"2009-01-05T22:31:13.722+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12411699/comment/12660987","id":"12660987","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jsensarma","name":"jsensarma","key":"jsensarma","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Joydeep Sen Sarma","active":true,"timeZone":"Asia/Kolkata"},"body":"@Zheng - can we get lazy deserialization using Dynamic Serde without changing the Dynamic Serde code (and writing a new protocol only?)?\n\nalternatively - we could ignore the whole DDL thing right now and create a table with a custom serde for protocol buffers and put the schema information in the serde properties (which the create table command should support).\n\nInstead of forcing people to use dynamic serde (when they want to use DDL) - one extensibility hook we can add is to generate serde configuration from the parsed DDL information using a callback. Perhaps this can be an optional method in the SerDe. That way - people can add Hive DDL to Protocol Buffer configuration (for example) without having to use Dynamic Serde.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jsensarma","name":"jsensarma","key":"jsensarma","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Joydeep Sen Sarma","active":true,"timeZone":"Asia/Kolkata"},"created":"2009-01-05T23:33:32.438+0000","updated":"2009-01-05T23:33:32.438+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12411699/comment/12661371","id":"12661371","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=electrum","name":"electrum","key":"electrum","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"David Phillips","active":true,"timeZone":"America/Los_Angeles"},"body":"Thank you for the detailed explanations.  I now have a much better understanding of SerDe's purpose and scope.  The design of ObjectInspector also makes sense now.  To summarize:\n\n1) SerDe, not the DDL, defines the table schema.  Some SerDe implementations use the DDL for configuration.\n2) Column types can be arbitrarily nested arrays, maps and structures.\n3) The callback design of ObjectInspector allows lazy deserialization with CASE/IF or when using complex or nested types.\n\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=electrum","name":"electrum","key":"electrum","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"David Phillips","active":true,"timeZone":"America/Los_Angeles"},"created":"2009-01-06T23:30:42.700+0000","updated":"2009-01-06T23:30:42.700+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12411699/comment/12661380","id":"12661380","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hammer","name":"hammer","key":"hammer","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jeff Hammerbacher","active":true,"timeZone":"Etc/UTC"},"body":"I learned a lot, too. Could someone with a handle on Hive compress this discussion into reusable documentation and post it to the Hive site?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hammer","name":"hammer","key":"hammer","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jeff Hammerbacher","active":true,"timeZone":"Etc/UTC"},"created":"2009-01-06T23:49:21.718+0000","updated":"2009-01-06T23:49:21.718+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12411699/comment/12661424","id":"12661424","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=zshao","name":"zshao","key":"zshao","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=zshao&avatarId=14358","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=zshao&avatarId=14358","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=zshao&avatarId=14358","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=zshao&avatarId=14358"},"displayName":"Zheng Shao","active":true,"timeZone":"America/Los_Angeles"},"body":"@Joydeep - Yes DynamicSerDe is just a parser for thrift DDL. It calls the respective methods of the protocol for each field. As a result, it's possible to write a protocol without a modifying the Dynamic SerDe code. I don't get your idea of the extensibility hook. I guess the hook is just the same as DynamicSerDe and its Protocols?\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=zshao","name":"zshao","key":"zshao","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=zshao&avatarId=14358","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=zshao&avatarId=14358","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=zshao&avatarId=14358","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=zshao&avatarId=14358"},"displayName":"Zheng Shao","active":true,"timeZone":"America/Los_Angeles"},"created":"2009-01-07T03:29:51.285+0000","updated":"2009-01-07T03:29:51.285+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12411699/comment/12661462","id":"12661462","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=prasadc","name":"prasadc","key":"prasadc","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Prasad Chakka","active":true,"timeZone":"Etc/UTC"},"body":"may be make DDL available to serde through TypeInfo interface (by moving it into serde package) instead of just exposing thrift ddl. joydeep, is that what you meant?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=prasadc","name":"prasadc","key":"prasadc","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Prasad Chakka","active":true,"timeZone":"Etc/UTC"},"created":"2009-01-07T06:33:21.516+0000","updated":"2009-01-07T06:33:21.516+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12411699/comment/12661859","id":"12661859","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jsensarma","name":"jsensarma","key":"jsensarma","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Joydeep Sen Sarma","active":true,"timeZone":"Asia/Kolkata"},"body":"@Zheng - i finally grokked at the Dynamic SerDe code a bit. as i suspected - it reads all the fields in one shot in the deserialize code. this is natural given that the protocol is a thrift protocol and thrift reads all fields in one shot. while it can skip fields - the skipping itself has a cost (ie. if there was a format smart enough to store offsets for each field and go directly to a particular field - dynamic serde would not be able to leverage it).\n\ni did mean what Prasad inferred. that whatever data structures are used to represent type information from the ddl are exposed via a public interface. an additional method call in the serde can be optionally implemented that can take this data structure in and popularte configuration keys (that can then be stored as serdeproperties). it would be trivial to convert the dynamic serde <-> DDL interaction to follow this model as well. \n\n(will try to educate myself a bit on protocol buffers - a jist would be greatly appreciated though - especially as far as how the serialization lends itself to efficient retrieval of specific fields?)","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jsensarma","name":"jsensarma","key":"jsensarma","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Joydeep Sen Sarma","active":true,"timeZone":"Asia/Kolkata"},"created":"2009-01-08T06:55:07.588+0000","updated":"2009-01-08T06:55:07.588+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12411699/comment/12662103","id":"12662103","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=zshao","name":"zshao","key":"zshao","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=zshao&avatarId=14358","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=zshao&avatarId=14358","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=zshao&avatarId=14358","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=zshao&avatarId=14358"},"displayName":"Zheng Shao","active":true,"timeZone":"America/Los_Angeles"},"body":"@Jeff: see http://wiki.apache.org/hadoop/Hive/DeveloperGuide#head-075e4c5524138d2674250e664dfb0f40ed57f9ca\n\n@Joydeep: I see. You mean to make the \"SQL DDL\" -> hierarchical type information (TypeInfo classes) translation a job of the shared utility code? I like this idea. It saves developer a lot of time in understanding \"thrift DDL\".\n\n{code}\nclass DDLColumnInfo {\n  String columnName;\n  TypeInfo columnType;\n}\n\ninterface SerDe {\n  /** List<DDLColumnInfo> will provide the column information from SQL DDL.\n   *  If the user created the table with no column information, we will pass null.\n   *  The ObjectInspector returned by getObjectInspector() needs to have the same column names and types as the List<DDLColumnInfo> (if not null).\n   */\n  void intialize(Configuration, Properties, List<DDLColumnInfo> );\n\n  ObjectInspector getObjectInspector() throws SerDeException;\n}\n{code}\n\nBy adding an additional parameter List<DDLColumnInfo>, the developers of SerDe do not need to parse the SQL DDL or Thrift DDL.\n\nWe already have TypeInfo classes and we just need to move them from ql to serde. It seems trivial to do and all future SerDe can take advantage of List<DDLColumnInfo>. (Although I don't want to change DynamicSerDe at this point unless necessary).\n\nCan you confirm this is what we want?\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=zshao","name":"zshao","key":"zshao","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=zshao&avatarId=14358","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=zshao&avatarId=14358","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=zshao&avatarId=14358","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=zshao&avatarId=14358"},"displayName":"Zheng Shao","active":true,"timeZone":"America/Los_Angeles"},"created":"2009-01-08T20:14:23.885+0000","updated":"2009-01-08T20:14:23.885+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12411699/comment/12662106","id":"12662106","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=prasadc","name":"prasadc","key":"prasadc","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Prasad Chakka","active":true,"timeZone":"Etc/UTC"},"body":"another way of doing this is \n\nadd a new function to SerDe interface that returns list of ColumnInfo (why DDL?) objects. And provide a static utility method that takes a thrift DDL and converts to ColumnInfo/TypeInfo classes and any serde that wants to use DDL in this form can call this function. Others needn't do this.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=prasadc","name":"prasadc","key":"prasadc","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Prasad Chakka","active":true,"timeZone":"Etc/UTC"},"created":"2009-01-08T20:27:59.459+0000","updated":"2009-01-08T20:27:59.459+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12411699/comment/12662130","id":"12662130","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=zshao","name":"zshao","key":"zshao","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=zshao&avatarId=14358","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=zshao&avatarId=14358","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=zshao&avatarId=14358","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=zshao&avatarId=14358"},"displayName":"Zheng Shao","active":true,"timeZone":"America/Los_Angeles"},"body":"It's not trivial to write a thrift DDL to ColumnInfo/TypeInfo converter.  Why don't we directly go from SQL DDL to TypeInfo?\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=zshao","name":"zshao","key":"zshao","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=zshao&avatarId=14358","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=zshao&avatarId=14358","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=zshao&avatarId=14358","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=zshao&avatarId=14358"},"displayName":"Zheng Shao","active":true,"timeZone":"America/Los_Angeles"},"created":"2009-01-08T21:46:40.067+0000","updated":"2009-01-08T21:46:40.067+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12411699/comment/12662133","id":"12662133","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=prasadc","name":"prasadc","key":"prasadc","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Prasad Chakka","active":true,"timeZone":"Etc/UTC"},"body":"i thought we could pull some code from DynamicSerDe to do that, or may some thrift code. \n\ncouple of reasons are:\n1) simpler interface (imo) \n2) How do deserializers get initialized in task trackers? we need to transport ColumnInfo objects as javabeans?\n\nBut none of these are blocking are critical, so if it is really difficult to convert thrift DDL into TypeInfo then we can do it the way you proposed.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=prasadc","name":"prasadc","key":"prasadc","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Prasad Chakka","active":true,"timeZone":"Etc/UTC"},"created":"2009-01-08T21:58:46.737+0000","updated":"2009-01-08T21:58:46.737+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12411699/comment/12662175","id":"12662175","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jsensarma","name":"jsensarma","key":"jsensarma","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Joydeep Sen Sarma","active":true,"timeZone":"Asia/Kolkata"},"body":"I like Zheng's proposal.\n\nThe only thing that concerns me is whether the SerDe might find it expensive to bootstrap off DDLColumnInfo. for example - the following would be equivalent - but would allow the SerDe to cache some transformed/serialized version off the DDLInfo in it's own properties that  might be easier (ie. cheaper) for the SerDe to bootstrap off:\n\n- at table creation time - we know the serde/deserializer\n- we call a new method in the Deserializer that translates DDLInfo to some properties:\n\ninterface SerDe {\n...\nProperties schemaToProperties(List<DDLColumnInfo) throws UnsupportedSchemaException;\n...\n}\n\nwe store the returned Properties as part of SerDeProperties in metastore (that's available in the serde initialize call). The initialize() call signature can be what Zheng proposed. But if the SerDe wants - it can cache a serialized version of the schema in the properties that it finds easier to handle. This will also provide an opportunity for the SerDe to reject any Hive Schemas that it cannot support (for example - if a SerDe cannot support maps - it can reject DDL statements with maps in this step).\n\nThoughts?\n\n\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jsensarma","name":"jsensarma","key":"jsensarma","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Joydeep Sen Sarma","active":true,"timeZone":"Asia/Kolkata"},"created":"2009-01-08T23:42:32.498+0000","updated":"2009-01-08T23:42:32.498+0000"}],"maxResults":15,"total":15,"startAt":0},"votes":{"self":"https://issues.apache.org/jira/rest/api/2/issue/HIVE-207/votes","votes":3,"hasVoted":false},"worklog":{"startAt":0,"maxResults":20,"total":0,"worklogs":[]},"customfield_12311820":"0|i0l8in:"}}