{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "fields": {
        "aggregateprogress": {
            "percent": 0,
            "progress": 0,
            "total": 18000
        },
        "aggregatetimeestimate": 18000,
        "aggregatetimeoriginalestimate": 18000,
        "aggregatetimespent": null,
        "assignee": null,
        "components": [{
            "id": "12325007",
            "name": "Hive",
            "self": "https://issues.apache.org/jira/rest/api/2/component/12325007"
        }],
        "created": "2017-07-31T08:34:29.000+0000",
        "creator": {
            "active": true,
            "avatarUrls": {
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452",
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452"
            },
            "displayName": "Saihiel Bakshi",
            "key": "saihiel",
            "name": "saihiel",
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=saihiel",
            "timeZone": "Etc/UTC"
        },
        "customfield_10010": null,
        "customfield_12310191": null,
        "customfield_12310192": null,
        "customfield_12310220": null,
        "customfield_12310222": null,
        "customfield_12310230": "hive, hadoop, UDTF, ArrayIndexOutOfBounds",
        "customfield_12310250": [{
            "id": "10431",
            "self": "https://issues.apache.org/jira/rest/api/2/customFieldOption/10431",
            "value": "Important"
        }],
        "customfield_12310290": null,
        "customfield_12310291": null,
        "customfield_12310300": null,
        "customfield_12310310": "0.0",
        "customfield_12310320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12310920": "9223372036854775807",
        "customfield_12310921": null,
        "customfield_12311020": null,
        "customfield_12311024": null,
        "customfield_12311120": null,
        "customfield_12311820": "0|i3i6xr:",
        "customfield_12312022": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "customfield_12312026": null,
        "customfield_12312220": null,
        "customfield_12312320": null,
        "customfield_12312321": null,
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312324": null,
        "customfield_12312325": null,
        "customfield_12312326": null,
        "customfield_12312327": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312330": null,
        "customfield_12312331": null,
        "customfield_12312332": null,
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12312335": null,
        "customfield_12312336": null,
        "customfield_12312337": null,
        "customfield_12312338": null,
        "customfield_12312339": null,
        "customfield_12312340": null,
        "customfield_12312341": null,
        "customfield_12312520": null,
        "customfield_12312521": "Fri Aug 11 07:23:21 UTC 2017",
        "customfield_12312720": null,
        "customfield_12312823": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "customfield_12312923": null,
        "customfield_12313422": "false",
        "customfield_12313520": null,
        "description": "This is the Java code I am using: \nI am trying to take in a row and return either the same row split into two rows or only of the the two rows from the split. \n\n\npackage com;\n \nimport java.util.ArrayList;\n\n \nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Random;\n\n\nimport org.apache.hadoop.hive.ql.exec.UDFArgumentException;\nimport org.apache.hadoop.hive.ql.metadata.HiveException;\nimport org.apache.hadoop.hive.ql.udf.generic.GenericUDTF;\nimport org.apache.hadoop.hive.serde2.objectinspector.ObjectInspector;\nimport org.apache.hadoop.hive.serde2.objectinspector.ObjectInspectorFactory;\nimport org.apache.hadoop.hive.serde2.objectinspector.PrimitiveObjectInspector;\nimport org.apache.hadoop.hive.serde2.objectinspector.StructObjectInspector;\nimport org.apache.hadoop.hive.serde2.objectinspector.primitive.PrimitiveObjectInspectorFactory;\n\nimport info.debatty.java.stringsimilarity.*;\n\npublic class similarity_report extends GenericUDTF \n{\n\t  private PrimitiveObjectInspector stringOI = null;\n\n\t  @Override\n\t  public StructObjectInspector initialize(ObjectInspector[] args) throws UDFArgumentException\n\t  {\n\n\t    //if (args.length != 1) \n\t   // {\n\t //     throw new UDFArgumentException(\"similarityReport() takes exactly one argument\");\n\t//    }\n\n\t    if (args[0].getCategory() != ObjectInspector.Category.PRIMITIVE\n\t        && ((PrimitiveObjectInspector) args[0]).getPrimitiveCategory() != PrimitiveObjectInspector.PrimitiveCategory.STRING) \n\t    {\n\t      throw new UDFArgumentException(\"similarityReport() takes a string as a parameter\");\n\t    }\n\t    \n\t    stringOI = (PrimitiveObjectInspector) args[0];\n\t    \n\t    List<String> fieldNames = new ArrayList<String>(41);\n\t    List<ObjectInspector> fieldOIs = new ArrayList<ObjectInspector>(41);\n\t    fieldNames.add(\"NAME_x\");\n\t    fieldNames.add(\"VOTER ID_x\");\n\t    fieldNames.add(\"FATHERS' NAME_x\");\n\t    fieldNames.add(\"PIN CODE_x\");\n\t    fieldNames.add(\"AREA_x\");\n\t    fieldNames.add(\"TEHSIL_x\");\n\t    fieldNames.add(\"DISTRICT_x\");\n\t    fieldNames.add(\"POLICE STATION_x\");\n\t    fieldNames.add(\"AGE_x\");\n\t    fieldNames.add(\"Y-O-B_x\");\n\t    fieldNames.add(\"GENDER_x\");\n\t    fieldNames.add(\"HOUSE NUMBER_x\");\n\t    fieldNames.add(\"STREET ADDRESS_x\");\n\t    fieldNames.add(\"UNIQUE ID_x\");\n\t    fieldNames.add(\"EDIT MAX_x\");\n\t    fieldNames.add(\"MATCH ID_x\");\n\t    fieldNames.add(\"FAKE MAX_x\");\n\t    \n\t    fieldNames.add(\"NAME_y\");\n\t    fieldNames.add(\"VOTER ID_y\");\n\t    fieldNames.add(\"FATHERS' NAME_y\");\n\t    fieldNames.add(\"PIN CODE_y\");\n\t    fieldNames.add(\"AREA_y\");\n\t    fieldNames.add(\"TEHSIL_y\");\n\t    fieldNames.add(\"DISTRICT_y\");\n\t    fieldNames.add(\"POLICE STATION_y\");\n\t    fieldNames.add(\"AGE_y\");\n\t    fieldNames.add(\"Y-O-B_y\");\n\t    fieldNames.add(\"GENDER_y\");\n\t    fieldNames.add(\"HOUSE NUMBER_y\");\n\t    fieldNames.add(\"STREET ADDRESS_y\");\n\t    fieldNames.add(\"UNIQUE ID_y\");\n\t    fieldNames.add(\"EDIT MAX_y\");\n\t    fieldNames.add(\"MATCH ID_y\");\n\t    fieldNames.add(\"FAKE MAX_y\");\n\t    \n\t    fieldNames.add(\"NAME SCORE\");\n\t    fieldNames.add(\"ADDRESS SCORE\");\n\t    fieldNames.add(\"CITY MATCH\");\n\t    fieldNames.add(\"ZIP MATCH\");\n\t    fieldNames.add(\"RELATIVE NAME SCORE\");\n\t    fieldNames.add(\"VOTER ID MATCH\");\n\t    \n\t    fieldNames.add(\"KEY\");\n\t    \n\t    fieldOIs.add(PrimitiveObjectInspectorFactory.javaStringObjectInspector);\n\t    fieldOIs.add(PrimitiveObjectInspectorFactory.javaStringObjectInspector);\n\t    fieldOIs.add(PrimitiveObjectInspectorFactory.javaStringObjectInspector);\n\t    fieldOIs.add(PrimitiveObjectInspectorFactory.javaStringObjectInspector);\n\t    fieldOIs.add(PrimitiveObjectInspectorFactory.javaStringObjectInspector);\n\t    fieldOIs.add(PrimitiveObjectInspectorFactory.javaStringObjectInspector);\n\t    fieldOIs.add(PrimitiveObjectInspectorFactory.javaStringObjectInspector);\n\t    fieldOIs.add(PrimitiveObjectInspectorFactory.javaStringObjectInspector);\n\t    fieldOIs.add(PrimitiveObjectInspectorFactory.javaStringObjectInspector);\n\t    fieldOIs.add(PrimitiveObjectInspectorFactory.javaStringObjectInspector);\n\t    fieldOIs.add(PrimitiveObjectInspectorFactory.javaStringObjectInspector);\n\t    fieldOIs.add(PrimitiveObjectInspectorFactory.javaStringObjectInspector);\n\t    fieldOIs.add(PrimitiveObjectInspectorFactory.javaStringObjectInspector);\n\t    fieldOIs.add(PrimitiveObjectInspectorFactory.javaStringObjectInspector);\n\t    fieldOIs.add(PrimitiveObjectInspectorFactory.javaStringObjectInspector);\n\t    fieldOIs.add(PrimitiveObjectInspectorFactory.javaStringObjectInspector);\n\t    fieldOIs.add(PrimitiveObjectInspectorFactory.javaStringObjectInspector);\n\t    \n\t    fieldOIs.add(PrimitiveObjectInspectorFactory.javaStringObjectInspector);\n\t    fieldOIs.add(PrimitiveObjectInspectorFactory.javaStringObjectInspector);\n\t    fieldOIs.add(PrimitiveObjectInspectorFactory.javaStringObjectInspector);\n\t    fieldOIs.add(PrimitiveObjectInspectorFactory.javaStringObjectInspector);\n\t    fieldOIs.add(PrimitiveObjectInspectorFactory.javaStringObjectInspector);\n\t    fieldOIs.add(PrimitiveObjectInspectorFactory.javaStringObjectInspector);\n\t    fieldOIs.add(PrimitiveObjectInspectorFactory.javaStringObjectInspector);\n\t    fieldOIs.add(PrimitiveObjectInspectorFactory.javaStringObjectInspector);\n\t    fieldOIs.add(PrimitiveObjectInspectorFactory.javaStringObjectInspector);\n\t    fieldOIs.add(PrimitiveObjectInspectorFactory.javaStringObjectInspector);\n\t    fieldOIs.add(PrimitiveObjectInspectorFactory.javaStringObjectInspector);\n\t    fieldOIs.add(PrimitiveObjectInspectorFactory.javaStringObjectInspector);\n\t    fieldOIs.add(PrimitiveObjectInspectorFactory.javaStringObjectInspector);\n\t    fieldOIs.add(PrimitiveObjectInspectorFactory.javaStringObjectInspector);\n\t    fieldOIs.add(PrimitiveObjectInspectorFactory.javaStringObjectInspector);\n\t    fieldOIs.add(PrimitiveObjectInspectorFactory.javaStringObjectInspector);\n\t    fieldOIs.add(PrimitiveObjectInspectorFactory.javaStringObjectInspector);\n\t    \n\t    fieldOIs.add(PrimitiveObjectInspectorFactory.javaStringObjectInspector);\n\t    fieldOIs.add(PrimitiveObjectInspectorFactory.javaStringObjectInspector);\n\t    fieldOIs.add(PrimitiveObjectInspectorFactory.javaStringObjectInspector);\n\t    fieldOIs.add(PrimitiveObjectInspectorFactory.javaStringObjectInspector);\n\t    fieldOIs.add(PrimitiveObjectInspectorFactory.javaStringObjectInspector);\n\t    fieldOIs.add(PrimitiveObjectInspectorFactory.javaStringObjectInspector);\n\t    fieldOIs.add(PrimitiveObjectInspectorFactory.javaStringObjectInspector);\n\t    \n\t    return ObjectInspectorFactory.getStandardStructObjectInspector(fieldNames, fieldOIs);\n\t  \n\t  }\n\t  public ArrayList<Object[]> processInputRecord(String row)\n\t  {\n\t\t    ArrayList<Object[]> result = new ArrayList<Object[]>();\n\t\t    //ensure none of the fields are empty\n\t\t    String[] tokens = row.split(\"\\t\");\n\t\t    \n\t\t    String Name_x = tokens[0];\n\t\t    String VoterID_x = tokens[1];\n\t\t    String FathersName_x = tokens[2];\n\t\t    String PinCode_x = tokens[3];\n\t\t    String Area_x = tokens[4];\n\t\t    String Tehsil_x = tokens[5];\n\t\t    String District_x = tokens[6];\n\t\t    String PoliceStation_x = tokens[7];\n\t\t    String Age_x = tokens[8];\n\t\t    String YOB_x = tokens[9];\n\t\t    String Gender_x = tokens[10];\n\t\t    String HouseNumber_x = tokens[11];\n\t\t    String StreetAddress_x = tokens[12];\n\t\t    String UniqueID_x = tokens[1];\n\t\t    String EditMax_x = tokens[14];\n\t\t    String MatchID_x = tokens[15];\n\t\t    String FakeMax_x = tokens[16];\n\t\t    \n\t\t    String Name_y = tokens[17];\n\t\t    String VoterID_y = tokens[18];\n\t\t    String FathersName_y = tokens[19];\n\t\t    String PinCode_y = tokens[20];\n\t\t    String Area_y = tokens[21];\n\t\t    String Tehsil_y = tokens[22];\n\t\t    String District_y = tokens[23];\n\t\t    String PoliceStation_y = tokens[24];\n\t\t    String Age_y = tokens[25];\n\t\t    String YOB_y = tokens[26];\n\t\t    String Gender_y = tokens[27];\n\t\t    String HouseNumber_y = tokens[28];\n\t\t    String StreetAddress_y = tokens[29];\n\t\t    String UniqueID_y = tokens[18];\n\t\t    String EditMax_y = tokens[31];\n\t\t    String MatchID_y = tokens[32];\n\t\t    String FakeMax_y = tokens[33];\n\t\t    \n\t\t    String NameScore = tokens[34];\n\t\t    String AddressScore = tokens[35];\n\t\t    String CityMatch = tokens[36];\n\t\t    String ZipMatch = tokens[37];\n\t\t    String RelativeNameScore = tokens[38];\n\t\t    String VoterIDMatch = tokens[39];\n\t\t    String Key = tokens[40];\n\t\t    \n\t\t    String Address_x;\n\t\t    String Address_y;\n\t\t    \n\t\t    String matchType = \"\";\n\t\t    \n\t\t    if (HouseNumber_x != null) \n\t\t    {\n\t\t    \t Address_x = HouseNumber_x + StreetAddress_x;\n\t\t    }\n\t\t    else\n\t\t    {\n\t\t    \t Address_x = StreetAddress_x;\n\t\t    }\n\t\t    \n\t\t    if (HouseNumber_y != null) \n\t\t    {\n\t\t    \t Address_y = HouseNumber_y + StreetAddress_y;\n\t\t    }\n\t\t    else\n\t\t    {\n\t\t    \t Address_y = StreetAddress_y;\n\t\t    }\n\t\t    \n\t\t    NormalizedLevenshtein l = new NormalizedLevenshtein();\n\t\t    double lDistance = l.distance(Name_x, Name_y);\n\t\t    double lSimilarity = 1 - lDistance;\n\t\t    NameScore = Double.toString(lSimilarity);\n\n\t\t    double lRDistance = l.distance(FathersName_x, FathersName_y);\n\t\t    double lRSimilarity = 1 - lRDistance;\n\t\t    RelativeNameScore = Double.toString(lRSimilarity);\n\t\t    \n\t\t    NGram twogram = new NGram(2);\n\t\t    double biGramDistance = twogram.distance(Address_x, Address_y);\n\t\t    AddressScore = Double.toString(biGramDistance);\n\t\t    \n\t\t    if (Area_x != null && Area_y != null)\n\t\t    {\n\t\t    \tif (Area_x == Area_y)\n\t\t    \t{\n\t\t    \t\tCityMatch = \"1\";\n\t\t    \t}\n\t\t    \telse \n\t\t    \t{\n\t\t    \t\tCityMatch = \"0\";\n\t\t    \t}\n\t\t    \t\n\t\t    }\n\t\t    else if (District_x != null && District_y != null)\n\t\t    {\n\t\t    \tif (District_x == District_y)\n\t\t    \t{\n\t\t    \t\tCityMatch = \"1\";\n\t\t    \t}\n\t\t    \telse \n\t\t    \t{\n\t\t    \t\tCityMatch = \"0\";\n\t\t    \t}\n\t\t    }\n\t\t    \n\t\t    if (PinCode_x != null && PinCode_y != null)\n\t\t    {\n\t\t    \tif (PinCode_x == PinCode_y)\n\t\t    \t{\n\t\t    \t\tZipMatch = \"1\";\n\t\t    \t}\n\t\t    \telse \n\t\t    \t{\n\t\t    \t\tZipMatch = \"0\";\n\t\t    \t}\n\t\t    \t\n\t\t    }\n\t\t    \n\t\t    if (VoterID_x != null && VoterID_y != null)\n\t\t    {\n\t\t    \tif (VoterID_x == VoterID_y)\n\t\t    \t{\n\t\t    \t\tVoterIDMatch = \"1\";\n\t\t    \t}\n\t\t    \telse \n\t\t    \t{\n\t\t    \t\tVoterIDMatch = \"0\";\n\t\t    \t}\n\t\t    \t\n\t\t    }\n\t\t    \n\t\t    \n\t\t    //rule 1\n\t\t    if (Name_x != null && Name_y != null && Address_x != null && Address_y != null && FathersName_x != null && FathersName_y != null && VoterID_x != null && VoterID_y != null && PinCode_x != null && PinCode_y != null)\n\t\t    {\t//returns both rows with max\n\t\t    \tif (Integer.parseInt(NameScore) >= 0.85 && Integer.parseInt(AddressScore) >= 0.45 && Integer.parseInt(RelativeNameScore) >= 0.85 && Integer.parseInt(VoterIDMatch) == 1 && Integer.parseInt(ZipMatch) == 1)\n\t\t    \t{\n\t\t    \t\tEditMax_x = \"1\";\n\t\t    \t\tEditMax_y = \"1\";\n\t\t    \t\t\n\t\t    \t\tRandom rnd = new Random();\n\t\t    \t\tint n = 100000000 + rnd.nextInt(900000000);\n\t\t    \t\tint m = 100000000 + rnd.nextInt(900000000);\n\t\t    \t\tlong rand = n + m;\n\t\t    \t\tMatchID_x = Long.toString(rand);\n\t\t    \t\tMatchID_y = MatchID_x;\n\t\t    \t\t\n\t\t    \t\tFakeMax_x = \"1\";\n\t\t    \t\tFakeMax_y = \"0\";\n\t\t    \t\t\n\t\t    \t\tmatchType = \"similar\";\n\t\t    \t\t\n\t\t    \t}\n\t\t    \t//if identical match, only return one row with low max\n\t\t    \tif (Integer.parseInt(NameScore) == 1 && Integer.parseInt(AddressScore) == 1 && Integer.parseInt(RelativeNameScore) == 1 && Integer.parseInt(VoterIDMatch) == 1 && Integer.parseInt(ZipMatch) == 1)\n\t\t    \t{\n\t\t    \t\tEditMax_x = \"0\";\n\t\t    \t\tEditMax_y = \"0\";\n\t\t    \t\t\n\t\t    \t\tRandom rnd = new Random();\n\t\t    \t\tint n = 100000000 + rnd.nextInt(900000000);\n\t\t    \t\tint m = 100000000 + rnd.nextInt(900000000);\n\t\t    \t\tlong rand = n + m;\n\t\t    \t\tMatchID_x = Long.toString(rand);\n\t\t    \t\tMatchID_y = MatchID_x;\n\t\t    \t\t\n\t\t    \t\tFakeMax_x = \"1\";\n\t\t    \t\tFakeMax_y = \"0\";\n\t\t    \t\t\n\t\t    \t\tmatchType = \"identical\";\n\t\t    \t\t\n\t\t    \t}\n\t\t    \t//if non-similar rows, return both rows with low max\n\t\t    \tif (Integer.parseInt(NameScore) < 0.85 && Integer.parseInt(AddressScore) < 0.45 && Integer.parseInt(RelativeNameScore) < 0.85 && Integer.parseInt(VoterIDMatch) == 0 && Integer.parseInt(ZipMatch) == 0)\n\t\t    \t{\n\t\t    \t\tEditMax_x = \"0\";\n\t\t    \t\tEditMax_y = \"0\";\n\t\t    \t\t\n\t\t    \t\tRandom rnd = new Random();\n\t\t    \t\tint n = 100000000 + rnd.nextInt(900000000);\n\t\t    \t\tint m = 100000000 + rnd.nextInt(900000000);\n\t\t    \t\tMatchID_x = Long.toString(n);\n\t\t    \t\tMatchID_y = Long.toString(m);\n\t\t    \t\t\n\t\t    \t\tFakeMax_x = \"0\";\n\t\t    \t\tFakeMax_y = \"0\";\n\t\t    \t\t\n\t\t    \t\tmatchType = \"different\";\n\t\t    \t\t\n\t\t    \t}\n\t\t    \t\n\t\t    }\n\t\t    //rule 2\n\t\t    else if (Name_x != null && Name_y != null && Address_x != null && Address_y != null && FathersName_x != null && FathersName_y != null && VoterID_x != null && VoterID_y != null)\n\t\t    {\t//returns both rows with max\n\t\t    \tif (Integer.parseInt(NameScore) >= 0.85 && Integer.parseInt(AddressScore) >= 0.45 && Integer.parseInt(RelativeNameScore) >= 0.85 && Integer.parseInt(VoterIDMatch) == 1)\n\t\t    \t{\n\t\t    \t\tEditMax_x = \"1\";\n\t\t    \t\tEditMax_y = \"1\";\n\t\t    \t\t\n\t\t    \t\tRandom rnd = new Random();\n\t\t    \t\tint n = 100000000 + rnd.nextInt(900000000);\n\t\t    \t\tint m = 100000000 + rnd.nextInt(900000000);\n\t\t    \t\tlong rand = n + m;\n\t\t    \t\tMatchID_x = Long.toString(rand);\n\t\t    \t\tMatchID_y = MatchID_x;\n\t\t    \t\t\n\t\t    \t\tFakeMax_x = \"1\";\n\t\t    \t\tFakeMax_y = \"0\";\n\t\t    \t\t\n\t\t    \t\tmatchType = \"similar\";\n\t\t    \t\t\n\t\t    \t}\n\t\t    \t//if identical match, only return one row with low max\n\t\t    \tif (Integer.parseInt(NameScore) == 1 && Integer.parseInt(AddressScore) == 1 && Integer.parseInt(RelativeNameScore) == 1 && Integer.parseInt(VoterIDMatch) == 1)\n\t\t    \t{\n\t\t    \t\tEditMax_x = \"0\";\n\t\t    \t\tEditMax_y = \"0\";\n\t\t    \t\t\n\t\t    \t\tRandom rnd = new Random();\n\t\t    \t\tint n = 100000000 + rnd.nextInt(900000000);\n\t\t    \t\tint m = 100000000 + rnd.nextInt(900000000);\n\t\t    \t\tlong rand = n + m;\n\t\t    \t\tMatchID_x = Long.toString(rand);\n\t\t    \t\tMatchID_y = MatchID_x;\n\t\t    \t\t\n\t\t    \t\tFakeMax_x = \"1\";\n\t\t    \t\tFakeMax_y = \"0\";\n\t\t    \t\t\n\t\t    \t\tmatchType = \"identical\";\n\t\t    \t\t\n\t\t    \t}\n\t\t    \t//if non-similar rows, return both rows with low max\n\t\t    \tif (Integer.parseInt(NameScore) < 0.85 && Integer.parseInt(AddressScore) < 0.45 && Integer.parseInt(RelativeNameScore) < 0.85 && Integer.parseInt(VoterIDMatch) == 0)\n\t\t    \t{\n\t\t    \t\tEditMax_x = \"0\";\n\t\t    \t\tEditMax_y = \"0\";\n\t\t    \t\t\n\t\t    \t\tRandom rnd = new Random();\n\t\t    \t\tint n = 100000000 + rnd.nextInt(900000000);\n\t\t    \t\tint m = 100000000 + rnd.nextInt(900000000);\n\t\t    \t\tMatchID_x = Long.toString(n);\n\t\t    \t\tMatchID_y = Long.toString(m);\n\t\t    \t\t\n\t\t    \t\tFakeMax_x = \"0\";\n\t\t    \t\tFakeMax_y = \"0\";\n\t\t    \t\t\n\t\t    \t\tmatchType = \"different\";\n\t\t    \t\t\n\t\t    \t}\n\t\t    \t\n\t\t    }\n\t\t    //rule 3\n\t\t    else if (Name_x != null && Name_y != null && Address_x != null && Address_y != null && FathersName_x != null && FathersName_y != null)\n\t\t    {\t//returns both rows with max\n\t\t    \tif (Integer.parseInt(NameScore) >= 0.85 && Integer.parseInt(AddressScore) >= 0.45 && Integer.parseInt(RelativeNameScore) >= 0.85)\n\t\t    \t{\n\t\t    \t\tEditMax_x = \"1\";\n\t\t    \t\tEditMax_y = \"1\";\n\t\t    \t\t\n\t\t    \t\tRandom rnd = new Random();\n\t\t    \t\tint n = 100000000 + rnd.nextInt(900000000);\n\t\t    \t\tint m = 100000000 + rnd.nextInt(900000000);\n\t\t    \t\tlong rand = n + m;\n\t\t    \t\tMatchID_x = Long.toString(rand);\n\t\t    \t\tMatchID_y = MatchID_x;\n\t\t    \t\t\n\t\t    \t\tFakeMax_x = \"1\";\n\t\t    \t\tFakeMax_y = \"0\";\n\t\t    \t\t\n\t\t    \t\tmatchType = \"similar\";\n\t\t    \t\t\n\t\t    \t}\n\t\t    \t//if identical match, only return one row with low max\n\t\t    \tif (Integer.parseInt(NameScore) == 1 && Integer.parseInt(AddressScore) == 1 && Integer.parseInt(RelativeNameScore) == 1)\n\t\t    \t{\n\t\t    \t\tEditMax_x = \"0\";\n\t\t    \t\tEditMax_y = \"0\";\n\t\t    \t\t\n\t\t    \t\tRandom rnd = new Random();\n\t\t    \t\tint n = 100000000 + rnd.nextInt(900000000);\n\t\t    \t\tint m = 100000000 + rnd.nextInt(900000000);\n\t\t    \t\tlong rand = n + m;\n\t\t    \t\tMatchID_x = Long.toString(rand);\n\t\t    \t\tMatchID_y = MatchID_x;\n\t\t    \t\t\n\t\t    \t\tFakeMax_x = \"1\";\n\t\t    \t\tFakeMax_y = \"0\";\n\t\t    \t\t\n\t\t    \t\tmatchType = \"identical\";\n\t\t    \t\t\n\t\t    \t}\n\t\t    \t//if non-similar rows, return both rows with low max\n\t\t    \tif (Integer.parseInt(NameScore) < 0.85 && Integer.parseInt(AddressScore) < 0.45 && Integer.parseInt(RelativeNameScore) < 0.85)\n\t\t    \t{\n\t\t    \t\tEditMax_x = \"0\";\n\t\t    \t\tEditMax_y = \"0\";\n\t\t    \t\t\n\t\t    \t\tRandom rnd = new Random();\n\t\t    \t\tint n = 100000000 + rnd.nextInt(900000000);\n\t\t    \t\tint m = 100000000 + rnd.nextInt(900000000);\n\t\t    \t\tMatchID_x = Long.toString(n);\n\t\t    \t\tMatchID_y = Long.toString(m);\n\t\t    \t\t\n\t\t    \t\tFakeMax_x = \"0\";\n\t\t    \t\tFakeMax_y = \"0\";\n\t\t    \t\t\n\t\t    \t\tmatchType = \"different\";\n\t\t    \t\t\n\t\t    \t}\n\t\t    \t\n\t\t    }\n\t\t  //rule 4\n\t\t    else if (Name_x != null && Name_y != null && Address_x != null && Address_y != null)\n\t\t    {\t//returns both rows with max\n\t\t    \tif (Integer.parseInt(NameScore) >= 0.85 && Integer.parseInt(AddressScore) >= 0.45)\n\t\t    \t{\n\t\t    \t\tEditMax_x = \"1\";\n\t\t    \t\tEditMax_y = \"1\";\n\t\t    \t\t\n\t\t    \t\tRandom rnd = new Random();\n\t\t    \t\tint n = 100000000 + rnd.nextInt(900000000);\n\t\t    \t\tint m = 100000000 + rnd.nextInt(900000000);\n\t\t    \t\tlong rand = n + m;\n\t\t    \t\tMatchID_x = Long.toString(rand);\n\t\t    \t\tMatchID_y = MatchID_x;\n\t\t    \t\t\n\t\t    \t\tFakeMax_x = \"1\";\n\t\t    \t\tFakeMax_y = \"0\";\n\t\t    \t\t\n\t\t    \t\tmatchType = \"similar\";\n\t\t    \t\t\n\t\t    \t}\n\t\t    \t//if identical match, only return one row with low max\n\t\t    \tif (Integer.parseInt(NameScore) == 1 && Integer.parseInt(AddressScore) == 1)\n\t\t    \t{\n\t\t    \t\tEditMax_x = \"0\";\n\t\t    \t\tEditMax_y = \"0\";\n\t\t    \t\t\n\t\t    \t\tRandom rnd = new Random();\n\t\t    \t\tint n = 100000000 + rnd.nextInt(900000000);\n\t\t    \t\tint m = 100000000 + rnd.nextInt(900000000);\n\t\t    \t\tlong rand = n + m;\n\t\t    \t\tMatchID_x = Long.toString(rand);\n\t\t    \t\tMatchID_y = MatchID_x;\n\t\t    \t\t\n\t\t    \t\tFakeMax_x = \"1\";\n\t\t    \t\tFakeMax_y = \"0\";\n\t\t    \t\t\n\t\t    \t\tmatchType = \"identical\";\n\t\t    \t\t\n\t\t    \t}\n\t\t    \t//if non-similar rows, return both rows with low max\n\t\t    \tif (Integer.parseInt(NameScore) < 0.85 && Integer.parseInt(AddressScore) < 0.45)\n\t\t    \t{\n\t\t    \t\tEditMax_x = \"0\";\n\t\t    \t\tEditMax_y = \"0\";\n\t\t    \t\t\n\t\t    \t\tRandom rnd = new Random();\n\t\t    \t\tint n = 100000000 + rnd.nextInt(900000000);\n\t\t    \t\tint m = 100000000 + rnd.nextInt(900000000);\n\t\t    \t\tMatchID_x = Long.toString(n);\n\t\t    \t\tMatchID_y = Long.toString(m);\n\t\t    \t\t\n\t\t    \t\tFakeMax_x = \"0\";\n\t\t    \t\tFakeMax_y = \"0\";\n\t\t    \t\t\n\t\t    \t\tmatchType = \"different\";\n\t\t    \t\t\n\t\t    \t}\n\t\t    \t\n\t\t    }\n\t\t  //rule 5\n\t\t    else if (Name_x != null && Name_y != null && Address_x != null && Address_y != null && VoterID_x != null && VoterID_y != null)\n\t\t    {\t//returns both rows with max\n\t\t    \tif (Integer.parseInt(NameScore) >= 0.85 && Integer.parseInt(AddressScore) >= 0.45 && Integer.parseInt(VoterIDMatch) == 1)\n\t\t    \t{\n\t\t    \t\tEditMax_x = \"1\";\n\t\t    \t\tEditMax_y = \"1\";\n\t\t    \t\t\n\t\t    \t\tRandom rnd = new Random();\n\t\t    \t\tint n = 100000000 + rnd.nextInt(900000000);\n\t\t    \t\tint m = 100000000 + rnd.nextInt(900000000);\n\t\t    \t\tlong rand = n + m;\n\t\t    \t\tMatchID_x = Long.toString(rand);\n\t\t    \t\tMatchID_y = MatchID_x;\n\t\t    \t\t\n\t\t    \t\tFakeMax_x = \"1\";\n\t\t    \t\tFakeMax_y = \"0\";\n\t\t    \t\t\n\t\t    \t\tmatchType = \"similar\";\n\t\t    \t\t\n\t\t    \t}\n\t\t    \t//if identical match, only return one row with low max\n\t\t    \tif (Integer.parseInt(NameScore) == 1 && Integer.parseInt(AddressScore) == 1 && Integer.parseInt(VoterIDMatch) == 1)\n\t\t    \t{\n\t\t    \t\tEditMax_x = \"0\";\n\t\t    \t\tEditMax_y = \"0\";\n\t\t    \t\t\n\t\t    \t\tRandom rnd = new Random();\n\t\t    \t\tint n = 100000000 + rnd.nextInt(900000000);\n\t\t    \t\tint m = 100000000 + rnd.nextInt(900000000);\n\t\t    \t\tlong rand = n + m;\n\t\t    \t\tMatchID_x = Long.toString(rand);\n\t\t    \t\tMatchID_y = MatchID_x;\n\t\t    \t\t\n\t\t    \t\tFakeMax_x = \"1\";\n\t\t    \t\tFakeMax_y = \"0\";\n\t\t    \t\t\n\t\t    \t\tmatchType = \"identical\";\n\t\t    \t\t\n\t\t    \t}\n\t\t    \t//if non-similar rows, return both rows with low max\n\t\t    \tif (Integer.parseInt(NameScore) < 0.85 && Integer.parseInt(AddressScore) < 0.45 && Integer.parseInt(VoterIDMatch) == 0)\n\t\t    \t{\n\t\t    \t\tEditMax_x = \"0\";\n\t\t    \t\tEditMax_y = \"0\";\n\t\t    \t\t\n\t\t    \t\tRandom rnd = new Random();\n\t\t    \t\tint n = 100000000 + rnd.nextInt(900000000);\n\t\t    \t\tint m = 100000000 + rnd.nextInt(900000000);\n\t\t    \t\tMatchID_x = Long.toString(n);\n\t\t    \t\tMatchID_y = Long.toString(m);\n\t\t    \t\t\n\t\t    \t\tFakeMax_x = \"0\";\n\t\t    \t\tFakeMax_y = \"0\";\n\t\t    \t\t\n\t\t    \t\tmatchType = \"different\";\n\t\t    \t\t\n\t\t    \t}\n\t\t    \t\n\t\t    }\n\t\t    \n\t\t    \n\t\t    if (matchType == \"similar\")\n\t\t    {\n\t\t    \t \n\t\t    \tresult.add(new Object[] { Name_x, VoterID_x, FathersName_x, PinCode_x, Area_x, Tehsil_x, District_x,\n\t\t    \t\t\tPoliceStation_x, Age_x, YOB_x, Gender_x, HouseNumber_x, StreetAddress_x, UniqueID_x,\n\t\t    \t\t\tEditMax_x, MatchID_x, FakeMax_x, NameScore, AddressScore, CityMatch, ZipMatch, RelativeNameScore,\n\t\t    \t\t\tVoterIDMatch, Key});\n\t\t    \tresult.add(new Object[] { Name_y, VoterID_y, FathersName_y, PinCode_y, Area_y, Tehsil_y, District_y,\n\t\t    \t\t\tPoliceStation_y, Age_y, YOB_y, Gender_y, HouseNumber_y, StreetAddress_y, UniqueID_y,\n\t\t    \t\t\tEditMax_y, MatchID_y, FakeMax_y, NameScore, AddressScore, CityMatch, ZipMatch, RelativeNameScore,\n\t\t    \t\t\tVoterIDMatch, Key});\n\t\t    \t \n\t\t    }\n\t\t    \t \n\t\t    else if (matchType == \"identical\")\n\t\t    {\n\t\t    \t \n\t\t    \tresult.add(new Object[] { Name_x, VoterID_x, FathersName_x, PinCode_x, Area_x, Tehsil_x, District_x,\n\t\t    \t\t\tPoliceStation_x, Age_x, YOB_x, Gender_x, HouseNumber_x, StreetAddress_x, UniqueID_x,\n\t\t    \t\t\tEditMax_x, MatchID_x, FakeMax_x, NameScore, AddressScore, CityMatch, ZipMatch, RelativeNameScore,\n\t\t    \t\t\tVoterIDMatch, Key});\n\t\t    \t \n\t\t    }\n\t\t    else if (matchType == \"different\")\n\t\t    {\n\t\t    \t \n\t\t    \tresult.add(new Object[] { Name_x, VoterID_x, FathersName_x, PinCode_x, Area_x, Tehsil_x, District_x,\n\t\t    \t\t\tPoliceStation_x, Age_x, YOB_x, Gender_x, HouseNumber_x, StreetAddress_x, UniqueID_x,\n\t\t    \t\t\tEditMax_x, MatchID_x, FakeMax_x, NameScore, AddressScore, CityMatch, ZipMatch, RelativeNameScore,\n\t\t    \t\t\tVoterIDMatch, Key});\n\t\t    \tresult.add(new Object[] { Name_y, VoterID_y, FathersName_y, PinCode_y, Area_y, Tehsil_y, District_y,\n\t\t    \t\t\tPoliceStation_y, Age_y, YOB_y, Gender_y, HouseNumber_y, StreetAddress_y, UniqueID_y,\n\t\t    \t\t\tEditMax_y, MatchID_y, FakeMax_y, NameScore, AddressScore, CityMatch, ZipMatch, RelativeNameScore,\n\t\t    \t\t\tVoterIDMatch, Key});\n\t\t    \t \n\t\t    }\n\t\t    \n\t\t    return result;\n\t\t    \n\t  }\n     @Override\n \n      public void process(Object[] record) throws HiveException \n    {\n \n    \t final String row = stringOI.getPrimitiveJavaObject(record[0]).toString();\n \n    \t ArrayList<Object[]> results = processInputRecord(row);\n \n    \t Iterator<Object[]> it = results.iterator();\n \n    \t while (it.hasNext())\n    \t {\n \n    \t\t Object[] r = it.next();\n \n    \t\t forward(r);\n \n    \t }\n \n     }\n\n     @Override\n \n      public void close() throws HiveException {\n \n    \t // do nothing\n \n     }\n \n}\n    \nThis is the Hive Code to Process above code on a hive table:\n\nset mapred.job.queue.name=buanlst;\n \nCREATE DATABASE IF NOT EXISTS saihieldb;\n \nUSE saihieldb;\n \nCREATE TABLE datafile_to_dedupe (name_x String, voterid_x String, fathersname_x String, pincode_x String, area_x String, tehsil_x String, district_x String, policestation_x String, age_x String, yob_x String, gender_x String, housenumber_x String, streetaddress_x String)\nROW FORMAT DELIMITED\nFIELDS TERMINATED BY '\\t'\nLINES TERMINATED BY '\\n'\nSTORED AS TEXTFILE;\n \nLOAD DATA LOCAL INPATH '/idn/home/sbaks31/APRIORI_MUMBAI_SAMPLE_TAB_DELIMITED.txt' OVERWRITE INTO TABLE datafile_to_dedupe;\n \nALTER TABLE datafile_to_dedupe ADD COLUMNS (uniqueid_x String, editmax_x String, matchid_x String, fakemax_x String);\n \nCREATE TABLE datafile_to_dedupe1 (name_y String, voterid_y String, fathersname_y String, pincode_y String, area_y String, tehsil_y String, district_y String, policestation_y String, age_y String, yob_y String, gender_y String, housenumber_y String, streetaddress_y String)\nROW FORMAT DELIMITED\nFIELDS TERMINATED BY '\\t'\nLINES TERMINATED BY '\\n'\nSTORED AS TEXTFILE;\n \nLOAD DATA LOCAL INPATH '/idn/home/sbaks31/APRIORI_MUMBAI_SAMPLE_TAB_DELIMITED.txt' OVERWRITE INTO TABLE datafile_to_dedupe1;\n \nALTER TABLE datafile_to_dedupe ADD COLUMNS (uniqueid_y String, editmax_y String, matchid_y String, fakemax_y String);\n \nCREATE TABLE crossed (name_x String, voterid_x String, fathersname_x String, pincode_x String, area_x String, tehsil_x String, district_x String, policestation_x String, age_x String, yob_x String, gender_x String, housenumber_x String, streetaddress_x String, uniqueid_x String, editmax_x String, matchid_x String, fakemax_x String, name_y String, voterid_y String, fathersname_y String, pincode_y String, area_y String, tehsil_y String, district_y String, policestation_y String, age_y String, yob_y String, gender_y String, housenumber_y String, streetaddress_y String, uniqueid_y String, editmax_y String, matchid_y String, fakemax_y String)\nROW FORMAT DELIMITED\nFIELDS TERMINATED BY '\\t'\nLINES TERMINATED BY '\\n'\nSTORED AS TEXTFILE;\n \nINSERT OVERWRITE TABLE crossed SELECT * FROM saihieldb.datafile_to_dedupe CROSS JOIN saihieldb.datafile_to_dedupe1 on (datafile_to_dedupe.name_x = datafile_to_dedupe1.name_y);\n \nALTER TABLE crossed ADD COLUMNS (namescore String, addressscore String, citymatch String, zipmatch String, relativenamescore String, voteridmatch String, Key String);\n \nadd jar /idn/home/sbaks31/DedupeFinal1.jar.filepart;\n \ncreate temporary function fun3 as 'com.similarity_report';\n \nCREATE VIEW newview4 AS select fun3(name_x, voterid_x, fathersname_x, pincode_x, area_x, tehsil_x, district_x, policestation_x, age_x, yob_x, gender_x, housenumber_x, streetaddress_x, uniqueid_x, editmax_x, matchid_x, fakemax_x, name_y, voterid_y, fathersname_y, pincode_y, area_y, tehsil_y, district_y, policestation_y, age_y, yob_y, gender_y, housenumber_y, streetaddress_y, uniqueid_y, editmax_y, matchid_y, fakemax_y, namescore, addressscore, citymatch, zipmatch, relativenamescore, voteridmatch, Key) from saihieldb.crossed;\n\nselect * from newview4 limit 10;\n^^This is where i recieve the error.  please let me know what is going wrong??\n",
        "duedate": "2017-08-10",
        "environment": "Using apache hive UDTF function from java, after running temporary function it is constantly returning ArrayIndexOutofBounds: 1",
        "fixVersions": [],
        "issuelinks": [],
        "issuetype": {
            "avatarId": 21133,
            "description": "A problem which impairs or prevents the functions of the product.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
            "id": "1",
            "name": "Bug",
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
            "subtask": false
        },
        "labels": [
            "Arrayindex",
            "Hive",
            "Java",
            "UDTF"
        ],
        "lastViewed": null,
        "priority": {
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "id": "3",
            "name": "Major",
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3"
        },
        "progress": {
            "percent": 0,
            "progress": 0,
            "total": 18000
        },
        "project": {
            "avatarUrls": {
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12310843&avatarId=11935",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12310843&avatarId=11935",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12310843&avatarId=11935",
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12310843&avatarId=11935"
            },
            "id": "12310843",
            "key": "HIVE",
            "name": "Hive",
            "projectCategory": {
                "description": "Scalable Distributed Computing",
                "id": "10292",
                "name": "Hadoop",
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/10292"
            },
            "self": "https://issues.apache.org/jira/rest/api/2/project/12310843"
        },
        "reporter": {
            "active": true,
            "avatarUrls": {
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452",
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452"
            },
            "displayName": "Saihiel Bakshi",
            "key": "saihiel",
            "name": "saihiel",
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=saihiel",
            "timeZone": "Etc/UTC"
        },
        "resolution": null,
        "resolutiondate": null,
        "status": {
            "description": "The issue is open and ready for the assignee to start work on it.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
            "id": "1",
            "name": "Open",
            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
            "statusCategory": {
                "colorName": "blue-gray",
                "id": 2,
                "key": "new",
                "name": "To Do",
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2"
            }
        },
        "subtasks": [],
        "summary": "Failed With Exception java.io.IOException:java.lang.ArrayIndexOutOfBoundsException: 1 Using Java UDTF for Hive",
        "timeestimate": 18000,
        "timeoriginalestimate": 18000,
        "timespent": null,
        "updated": "2017-08-11T07:23:21.000+0000",
        "versions": [{
            "archived": false,
            "description": "Hive 2.0.0",
            "id": "12332641",
            "name": "2.0.0",
            "releaseDate": "2016-02-15",
            "released": true,
            "self": "https://issues.apache.org/jira/rest/api/2/version/12332641"
        }],
        "votes": {
            "hasVoted": false,
            "self": "https://issues.apache.org/jira/rest/api/2/issue/HIVE-17210/votes",
            "votes": 0
        },
        "watches": {
            "isWatching": false,
            "self": "https://issues.apache.org/jira/rest/api/2/issue/HIVE-17210/watchers",
            "watchCount": 1
        },
        "workratio": 0
    },
    "id": "13091120",
    "key": "HIVE-17210",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13091120"
}