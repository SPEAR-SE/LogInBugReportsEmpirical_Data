[The root cause of the issue is that if the LogRunnable is interrupted before started then there is no InterruptedException thrown, and the {{showRemainingLogsIfAny}} is not called. 

{code}
  private Runnable createLogRunnable(final Statement statement) {
    if (statement instanceof HiveStatement) {
      final HiveStatement hiveStatement = (HiveStatement) statement;

      Runnable runnable = new Runnable() {
        @Override
        public void run() {
          while (hiveStatement.hasMoreLogs() && !Thread.currentThread().isInterrupted()) {
            try {
              // fetch the log periodically and output to beeline console
              for (String log : hiveStatement.getQueryLog()) {
                if (!beeLine.isTestMode()) {
                  beeLine.info(log);
                } else {
                  // In test mode print the logs to the output
                  beeLine.output(log);
                }
              }
              Thread.sleep(DEFAULT_QUERY_PROGRESS_INTERVAL);
            } catch (SQLException e) {
              beeLine.error(new SQLWarning(e));
              return;
            } catch (InterruptedException e) {
              beeLine.debug("Getting log thread is interrupted, since query is done!");
              showRemainingLogsIfAny(statement);              <-- We expect to print the logs here, but if no exception, no logs
              return;
            }
          }
        }
      };
      return runnable;
    } else {
[..]
    }
  }
{code}

The log printed when the ResultSet is queried, or in the finally stage.
{code}
          do {
            ResultSet rs = stmnt.getResultSet();
            try {
              int count = beeLine.print(rs);
              long end = System.currentTimeMillis();

              beeLine.info(
                  beeLine.loc("rows-selected", count) + " " + beeLine.locElapsedTime(end - start));
            } finally {
              if (logThread != null) {
                logThread.join(DEFAULT_QUERY_PROGRESS_THREAD_TIMEOUT);
                showRemainingLogsIfAny(stmnt);
                logThread = null;
              }
              rs.close();
            }
          } while (BeeLine.getMoreResults(stmnt));
{code}

{code}
      } finally {
        if (logThread != null) {
          if (!logThread.isInterrupted()) {
            logThread.interrupt();
          }
          logThread.join(DEFAULT_QUERY_PROGRESS_THREAD_TIMEOUT);
          showRemainingLogsIfAny(stmnt);
        }
        if (stmnt != null) {
          stmnt.close();
        }
      }
{code}, Ok. I was looking at old code. This was solved by HIVE-15473]