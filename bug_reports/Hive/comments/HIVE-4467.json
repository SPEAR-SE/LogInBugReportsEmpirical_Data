[Attaching patch, I have made the functions straightforward and not preserved the boolean in the UtilsverifySuccess() methods. I am unsure where TStatusCode.SUCCESS_WITH_INFO_STATUS is set in the HS2 code and couldn't find any occurrences. Is there any reason/intention for checking for that status?, Uploaded patch to phabricator: https://reviews.facebook.net/D10629, The HS2 API is modeled on the [SQL/CLI standard|http://en.wikipedia.org/wiki/SQL/CLI]. In most cases SQL/CLI is interchangeable with ODBC, so most answers about why things are structured the way they are can be answered by consulting the ODBC API documentation. Here's the relevant page for SUCCESS_WITH_INFO: http://msdn.microsoft.com/en-us/library/windows/desktop/ms716219(v=vs.85).aspx

, [~cwsteinbach], the issue is with the condition in the verifySuccess method:

if ((status.getStatusCode() != TStatusCode.SUCCESS_STATUS) &&
    (withInfo && (status.getStatusCode() != TStatusCode.SUCCESS_WITH_INFO_STATUS)))

when withInfo is false this condition will always be false. We have seen the case where the status code is an error and because withInfo is false there is no exception thrown.

Thiruvel's patch addresses this case., I found a more concise explanation here: http://www.easysoft.com/developer/interfaces/odbc/diagnostics_error_status_codes.html

{quote}
Virtually all ODBC functions can return two values which indicate success

* SQL_SUCCESS
* SQL_SUCCESS_WITH_INFO

Both of these returns cause the SQL_SUCCEEDED macro to result in 1.

If a function returns SQL_SUCCESS_WITH_INFO it means that the call succeeded but an informational message was produced.

e.g. with some drivers you might set the cursor type, prepare a statement and then execute it. When SQLExecute is called the statement is acted upon but the driver might change the cursor type to something else. In this case, SQLExecute would return SQL_SUCCESS_WITH_INFO and the driver would add a diagnostic indicating the cursor type had been changed.

You should note that a few ODBC functions return a status which fails the SQL_SUCCEEDED macro but do not indicate an error as such.

e.g. SQLFetch can return SQL_NO_DATA indicating there is no further rows in the result set, this is not necessarily an error.
{quote}
, I added a comment on phabricator. Thanks., [~cdrome] I understand that. I was trying to answer the question Thiruvel raised in his first comment. In short, I don't think any functions return SUCCESS_WITH_INFO_STATUS right now, but in the future we probably will want to do this, and it's a lot easier to support it at the outset than to add it in later., My bad. I misunderstood the context of your comment., Updated patch on phabricator and https://reviews.facebook.net/D10629 and also uploaded here (HIVE-4467_1.patch)., [~cwsteinbach] Does the updated patch look good?, Changes look good to me. +1.,  ant clean package && ant test -Dtestcase=TestBeeLineWithArgs -Dmodule=beeline fails after applying this patch.]