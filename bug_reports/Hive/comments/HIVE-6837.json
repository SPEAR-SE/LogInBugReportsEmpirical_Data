[I see the same error when the following is specified in hive-site.xml:
<property>
<name>hadoop.proxyuser.hrt_qa.hosts</name>
<value>myhostname</value>
</property>
Workaround is to use * instead of myhostname.

The hive.log is attached., [~taksaito] Thanks for the log and additional testing info Tak!

This is caused by threadlocals lying all over the place. There are 2 set of threadlocals for storing ip address, usernames (one in TSetIpAddressProcessor and the other in HadoopThriftAuthBridge20S.Server). I think it makes sense to access those through one interface, otherwise similar problems will pop up again. , [~rhbutani] [~thejas] This is a bug for 13. I'll have a patch ready by tomorrow., [~thejas] Once HIVE-6738 is in, I can submit an RB request. Without this patch, ip address checks will fail for trusted proxy user (in both binary & http mode) unless the value is set to *. I've tested the fix on a secure cluster in both modes. Thanks!, Patch based on trunk, 

{color:green}Overall{color}: +1 all checks pass

Here are the results of testing the latest attachment:
https://issues.apache.org/jira/secure/attachment/12638909/HIVE-6837.3.patch

{color:green}SUCCESS:{color} +1 5548 tests passed

Test results: http://bigtop01.cloudera.org:8080/job/PreCommit-HIVE-Build/2152/testReport
Console output: http://bigtop01.cloudera.org:8080/job/PreCommit-HIVE-Build/2152/console

Messages:
{noformat}
Executing org.apache.hive.ptest.execution.PrepPhase
Executing org.apache.hive.ptest.execution.ExecutionPhase
Executing org.apache.hive.ptest.execution.ReportingPhase
{noformat}

This message is automatically generated.

ATTACHMENT ID: 12638909, +1

Vaibhav,
I remember you had suggested that TSetIpAddressProcessor also use SessionManager thread local, in a different jira. I think that makes sense, it would be cleaner. We should do that in a followup jira.
, [~thejas] Thanks for taking a look.

Sure, I'll do that. There's another issue that I noticed caused in SessionManager#openSession as a result of this:
{code}
public SessionHandle openSession(TProtocolVersion protocol, String username, String password,
      Map<String, String> sessionConf, boolean withImpersonation, String delegationToken)
          throws HiveSQLException {
    HiveSession session;
    if (withImpersonation) {
      HiveSessionImplwithUGI hiveSessionUgi = new HiveSessionImplwithUGI(protocol, username, password,
        hiveConf, sessionConf, TSetIpAddressProcessor.getUserIpAddress(), delegationToken);
      session = HiveSessionProxy.getProxy(hiveSessionUgi, hiveSessionUgi.getSessionUgi());
      hiveSessionUgi.setProxySession(session);
    } else {
      session = new HiveSessionImpl(protocol, username, password, hiveConf, sessionConf,
          TSetIpAddressProcessor.getUserIpAddress());
    }
    session.setSessionManager(this);
    session.setOperationManager(operationManager);
    session.open();
    handleToSession.put(session.getSessionHandle(), session);

    try {
      executeSessionHooks(session);
    } catch (Exception e) {
      throw new HiveSQLException("Failed to execute session hooks", e);
    }
    return session.getSessionHandle();
  }
{code}

Notice that if withImpersonation is set to true, we're using TSetIpAddressProcessor.getUserIpAddress() to get the IP address which is wrong for a kerberized setup (should use HiveAuthFactory#getIpAddress).

Also, in case of a kerberized setup, we're wrapping the transport in a doAs (with UGI of the HiveServer2 process) which doesn't make sense to me: https://github.com/apache/hive/blob/trunk/shims/common-secure/src/main/java/org/apache/hadoop/hive/thrift/HadoopThriftAuthBridge20S.java#L335. , +1 for 0.13, Patch committed to 0.13 branch and trunk. I made a minor edit to apply on 0.13 branch.
Thanks for the contribution Vaibhav. Thanks for the review Dilli.
]