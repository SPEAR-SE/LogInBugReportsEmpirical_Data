[Fix for the bug.

There was a bug in way the the aggregation list was being generated for the map side aggregation. As a result the ordering of the aggregations in the map side groupby operator and the reduce side groupby operator would differ leading to this problem. Ideally, we should be using the row schema information to generate the order but that needs a much larger refactor of  how we generate plans in the group by case. For now this patch should fix the problem.

There are prexisting tests that test this (groupby2_map.q and groupby3_map.q). The test case however relies on an internal hashmap giving the keys in a certain order. The bug was easily reproducible with the patch in HIVE-179. I have tested it with that patch.
, submitting patch., looks good +1

though it doesn't guarantee that HashMap will return objects in the same order in both the functions. , Committed revision 734008. Thanks Ashish!
, Is there any value to adding the testcase from HIVE-215?]