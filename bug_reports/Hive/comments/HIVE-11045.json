[[~raj_velu] Can you provide some more information here so as to help debug this issue? Can you share the query and if possible a sample data set so that I can repro this issue. Also any configuration settings used would be helpful.

Thanks
Vikram., Vikram, 

I face this issue only with Hive on Tez, my data is in json format and I use JsonSerde from https://github.com/rcongiu/Hive-JSON-Serde,
The query runs perfectly fine on Hive. This only occurs with Tez.
Data set is huge and I have no clue on which records this exception arises, 

The query is as below,
SELECT t1.return_id AS return_id,
       t1.approve_date AS approve_date,
       t1.approve_date_key AS approve_date_key,
       t1.cancel_date AS cancel_date,
       t1.cancel_date_key AS cancel_date_key,
       t1.complete_date AS complete_date,
       t1.complete_date_key AS complete_date_key,
       t1.init_cancellation_date AS init_cancellation_date,
       t1.init_cancellation_date_key AS init_cancellation_date_key,
       t1.reject_date AS reject_date,
       t1.reject_date_key AS reject_date_key,
       t1.unhold_date AS unhold_date,
       t1.unhold_date_key AS unhold_date_key,
       t1.request_service_date AS request_service_date,
       t1.request_service_date_key AS request_service_date_key,
       t1.service_approve_return_date AS service_approve_return_date,
       t1.service_approve_return_date_key AS service_approve_return_date_key,
       CASE
           WHEN t2.action_override_status_time IS NULL THEN 0
           ELSE 1
       END AS flag_action_override,
       CASE
           WHEN t2.action_override_status_time IS NULL THEN NULL
           ELSE t2.action_override_status_time
       END AS action_override_status_time,
       CASE
           WHEN t2.action_override_user_login IS NULL THEN 'NA'
           ELSE t2.action_override_user_login
       END AS action_override_user_login,
       CASE
           WHEN t2.action_override_change_reason IS NULL THEN 'NA'
           ELSE t2.action_override_change_reason
       END AS action_override_change_reason,
       CASE
           WHEN t2.action_override_change_sub_reason IS NULL THEN 'NA'
           ELSE t2.action_override_change_sub_reason
       END AS action_override_change_sub_reason,
       CASE
           WHEN t2.action_override_count IS NULL THEN cast(0 AS bigint)
           ELSE t2.action_override_count
       END AS action_override_count,
       CASE
           WHEN t2.action_change_data IS NULL THEN 'NA'
           ELSE t2.action_change_data
       END AS action_change_data,
       CASE
           WHEN t3.policy_override_status_time IS NULL THEN 0
           ELSE 1
       END AS flag_policy_override,
       CASE
           WHEN t3.policy_override_status_time IS NULL THEN NULL
           ELSE t3.policy_override_status_time
       END AS policy_override_status_time,
       CASE
           WHEN t3.policy_override_user_login IS NULL THEN 'NA'
           ELSE t3.policy_override_user_login
       END AS policy_override_user_login,
       CASE
           WHEN t3.policy_override_change_reason IS NULL THEN 'NA'
           ELSE t3.policy_override_change_reason
       END AS policy_override_change_reason,
       CASE
           WHEN t3.policy_override_change_sub_reason IS NULL THEN 'NA'
           ELSE t3.policy_override_change_sub_reason
       END AS policy_override_change_sub_reason,
       CASE
           WHEN t3.policy_override_count IS NULL THEN cast(0 AS bigint)
           ELSE t3.policy_override_count
       END AS policy_override_count,
       CASE
           WHEN t3.policy_change_data IS NULL THEN 'NA'
           ELSE t3.policy_change_data
       END AS policy_change_data,
       cast(0 AS bigint) AS temp_flag,
       CASE
           WHEN t3.policy_override_status_date_key IS NULL THEN 0
           ELSE t3.policy_override_status_date_key
       END AS policy_override_status_date_key,
       CASE
           WHEN t2.action_override_status_date_key IS NULL THEN 0
           ELSE t2.action_override_status_date_key
       END AS action_override_status_date_key,
       t1.user_approved_by AS user_approved_by,
       t1.user_rejected_by AS user_rejected_by,
       t1.user_cancelled_by AS user_cancelled_by,
       t1.reject_reason AS reject_reason,
       t1.reject_sub_reason AS reject_sub_reason,
       t1.reject_change_data AS reject_change_data
FROM
  (SELECT rh1.`data`.return_id,
          MIN (CASE WHEN rh1.`data`.event = 'approve' THEN rh1.`data`.status_time ELSE NULL END) AS approve_date,
                                                                                                    MIN (CASE WHEN rh1.`data`.event = 'cancel' THEN rh1.`data`.status_time ELSE NULL END) AS cancel_date,
                                                                                                                                                                                             MIN (CASE WHEN rh1.`data`.event = 'complete' THEN rh1.`data`.status_time ELSE NULL END) AS complete_date,
MIN (CASE WHEN rh1.`data`.event = 'init_cancellation' THEN rh1.`data`.status_time ELSE NULL END) AS init_cancellation_date,
                                                                                                    MIN (CASE WHEN rh1.`data`.event = 'reject' THEN rh1.`data`.status_time ELSE NULL END) AS reject_date,
                                                                                                                                                                                             MIN (CASE WHEN rh1.`data`.event = 'unhold' THEN rh1.`data`.status_time ELSE NULL END) AS unhold_date,
MIN (CASE WHEN rh1.`data`.event = 'request_service' THEN rh1.`data`.status_time ELSE NULL END) AS request_service_date,
                                                                                                  MIN (CASE WHEN rh1.`data`.event = 'service_approve_return' THEN rh1.`data`.status_time ELSE NULL END) AS service_approve_return_date,
MIN (CASE WHEN rh1.`data`.event = 'approve' THEN lookup_date(rh1.`data`.status_time) ELSE NULL END) AS approve_date_key,
                                                                                                       MIN (CASE WHEN rh1.`data`.event = 'cancel' THEN lookup_date(rh1.`data`.status_time) ELSE NULL END) AS cancel_date_key,
MIN (CASE WHEN rh1.`data`.event = 'complete' THEN lookup_date(rh1.`data`.status_time) ELSE NULL END) AS complete_date_key,
                                                                                                        MIN (CASE WHEN rh1.`data`.event = 'init_cancellation' THEN lookup_date(rh1.`data`.status_time) ELSE NULL END) AS init_cancellation_date_key,
MIN (CASE WHEN rh1.`data`.event = 'reject' THEN lookup_date(rh1.`data`.status_time) ELSE NULL END) AS reject_date_key,
                                                                                                      MIN (CASE WHEN rh1.`data`.event = 'unhold' THEN lookup_date(rh1.`data`.status_time) ELSE NULL END) AS unhold_date_key,
MIN (CASE WHEN rh1.`data`.event = 'request_service' THEN lookup_date(rh1.`data`.status_time) ELSE NULL END) AS request_service_date_key,
                                                                                                               MIN (CASE WHEN rh1.`data`.event = 'service_approve_return' THEN lookup_date(rh1.`data`.status_time) ELSE NULL END) AS service_approve_return_date_key,
MIN (CASE WHEN rh1.`data`.event = 'approve' THEN rh1.`data`.user_login ELSE NULL END) AS user_approved_by,
                                                                                         MIN (CASE WHEN rh1.`data`.event = 'cancel' THEN rh1.`data`.user_login ELSE NULL END) AS user_cancelled_by,
                                                                                                                                                                                 MIN (CASE WHEN rh1.`data`.event = 'reject' THEN rh1.`data`.user_login ELSE NULL END) AS user_rejected_by,
MIN (CASE WHEN rh1.`data`.event = 'reject' THEN rh1.`data`.change_data ELSE NULL END) AS reject_change_data,
                                                                                         MIN (CASE WHEN rh1.`data`.event = 'reject' THEN rh1.`data`.change_reason ELSE NULL END) AS reject_reason,
                                                                                                                                                                                    MIN (CASE WHEN rh1.`data`.event = 'reject' THEN rh1.`data`.change_sub_reason ELSE NULL END) AS reject_sub_reason
   FROM dart_fkint_scp_rrr_return_history_1_0_view rh1
   GROUP BY rh1.`data`.return_id) t1
LEFT OUTER JOIN
(SELECT rh2.`data`.return_id,
        max(rh2.`data`.status_time) AS action_override_status_time,
                                       max(lookup_date(rh2.`data`.status_time)) AS action_override_status_date_key,
                                                                                   max(rh2.`data`.user_login) AS action_override_user_login,
                                                                                                                 max(rh2.`data`.change_reason) AS action_override_change_reason,
                                                                                                                                                  max(rh2.`data`.change_sub_reason) AS action_override_change_sub_reason,
                                                                                                                                                                                       max(rh2.`data`.change_data) AS action_change_data,
count(DISTINCT rh2.`data`.status_time) AS action_override_count
 FROM dart_fkint_scp_rrr_return_history_1_0_view rh2
WHERE rh2.`data`.change_reason='action_override'
 GROUP BY rh2.`data`.return_id) t2 ON t1.return_id = t2.return_id
LEFT OUTER JOIN
(SELECT rh3.`data`.return_id,
        max(rh3.`data`.status_time) AS policy_override_status_time,
                                       max(lookup_date(rh3.`data`.status_time)) AS policy_override_status_date_key,
                                                                                   max(rh3.`data`.user_login) AS policy_override_user_login,
                                                                                                                 max(rh3.`data`.change_reason) AS policy_override_change_reason,
                                                                                                                                                  max(rh3.`data`.change_sub_reason) AS policy_override_change_sub_reason,
                                                                                                                                                                                       max(rh3.`data`.change_data) AS policy_change_data,
count(DISTINCT rh3.`data`.status_time) AS policy_override_count
 FROM dart_fkint_scp_rrr_return_history_1_0_view rh3
WHERE rh3.`data`.change_reason='policy_override'
 GROUP BY rh3.`data`.return_id) t3 ON t1.return_id = t3.return_id ;, this exception does not occur anymore, I was using tez snapshot, switched to released version and it works fine. we can close this., As noted, this has already been fixed., HIVE-13282]