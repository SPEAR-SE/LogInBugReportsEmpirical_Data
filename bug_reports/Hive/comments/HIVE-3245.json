[example JP data, example of test shown in SQLSquirrel, I got into some trouble with the JDBC driver on Hive 0.7.1 as well. I did some poking around too but couldn't spend much time. While doing so, I got to org.apache.hadoop.hive.jdbc.HiveQueryResultSet class. Inside next(), the code has:

{code:title=HiveQueryResultSet.java|borderStyle=solid}
Object data = serde.deserialize(new BytesWritable(rowStr.getBytes()));
{code}

Now, getBytes() comes in two variants, one that takes no parameters and uses the default encoding (like in the above row) or one that explicitly takes the encoding as parameter. I have a hunch that this could be a problem and that the encoding should be sent as a parameter. However, I haven't gotten the chance to verify/refute my hunch., I created the table as described in the JIRA and ran select * both from beeline and my own java program embedding the JDBC driver.  In both instances, the Japanese characters displayed correctly:

0: jdbc:hive2://localhost:10000> select * from japan_j;
+-------+------------------------------------------------+------+
| rnum  |                       c1                       | ord  |
+-------+------------------------------------------------+------+
| 11    | (1)ｲﾝﾃﾞｯｸｽ                                     | 36   |
| 12    | <5>Switches                                    | 37   |
| 10    | 400ｒａｎｋｕ                                       | 39   |
| 9     | 666Sink                                        | 40   |
| 14    | P-Cabels                                       | 35   |
| 13    | R-Bench                                        | 38   |
| 27    | エコー                                            | 34   |
| 26    | エチャント                                          | 24   |
| 25    | ガード                                            | 4    |
| 28    | コート                                            | 3    |
| 29    | ゴム                                             | 1    |
| 41    | ざぶと                                            | 2    |
| 40    | さんしょう                                          | 6    |
| 31    | ズボン                                            | 5    |
| 30    | スワップ                                           | 41   |
| 37    | せっけい                                           | 42   |
| 36    | せんたくざい                                         | 46   |
| 32    | ダイエル                                           | 45   |
| 39    | はっぽ                                            | 43   |
| 38    | はつ剤                                            | 44   |
| 34    | ファイル                                           | 48   |
| 33    | フィルター                                          | 50   |
| 35    | フッコク                                           | 49   |
| 8     | 「２」計画                                          | 47   |
| 46    | 暗視                                             | 9    |
| 45    | 音楽                                             | 8    |
| 47    | 音声認識                                           | 7    |
| 44    | 記載                                             | 10   |
| 43    | 記録機                                            | 11   |
| 42    | 高機能                                            | 15   |
| 50    | 国家利益                                           | 14   |
| 48    | 国立公園                                           | 18   |
| 49    | 国立大学                                           | 22   |
| 7     | ⑤号線路                                           | 21   |
| 5     | （Ⅰ）番号列                                         | 23   |
| 1     | ３５６CAL                                         | 17   |
| 2     | ９８０Series                                      | 16   |
| 6     | ＜ⅸ＞Pattern                                     | 20   |
| 3     | ＰＶＤＦ                                           | 19   |
| 4     | ＲＯＭＡＮ-８                                        | 13   |
| 15    | ｱﾝｶｰ                                           | 12   |
| 16    | ｴﾝｼﾞﾝ                                          | 30   |
| 19    | ｶｯﾄﾏｼﾝ                                         | 29   |
| 20    | ｶｰﾄﾞ                                           | 28   |
| 18    | ｺｰﾗ                                            | 26   |
| 17    | ｺﾞｰﾙﾄﾞ                                         | 25   |
| 24    | ｻｲﾌ                                            | 27   |
| 21    | ﾂｰｳｨﾝｸﾞ                                        | 32   |
| 23    | ﾌｫﾙﾀﾞｰ                                         | 33   |
| 22    | ﾏﾝﾎﾞ                                           | 31   |
+-------+------------------------------------------------+------+


I tested with the new JDBCDriver (org.apache.hive.jdbc.HiveDriver) against HiveServer2.  

The platform running Beeline should be set to utf8 ("echo $LANG"), or any other java application using JDBC driver should have be started with utf-8 JVM args ("java -Dfile.encoding=UTF-8").  That should already be a requirement for client's wishing to display utf-8 characters.

The code that Mark Grover mentioned does not apply anymore, as new JDBCDriver gets results from HiveServer directly via ThriftString field, and does not do another round of serialization/deserialization on client side, where it is said the error occurred.  So in my opinion, the issue can be closed for Hive driver., Re the prior comment. If encoding information has to be specified, it should be expressed via the connection URL as a name-value property and not assuming that a mid-tier application will be started with a collection of -D options.
, [~the6campbells] I thought that initially too, but from my observation there is no code that specifies encoding in the JDBC driver.

As far as i can tell, in the read case, we need to specify encoding in only two places, none of which are in JDBC driver.
1. when we construct the string from input bytes (done on hive-server2)
2. when we attempt to display the string using Java PrintStream (done in consuming java application, like beeline)

The driver receives each column value from Hive-Server2 already in the form of a Thrift string, and passes it on as is to the application as is, when resultSet.getString() is called.  That is different from old JDBC driver in which there was code (as pointed out by Mark Grover), that did do some decoding and re-encoding.  Thats why I don't see anything needed to be done now at JDBC layer.  Let me know if I am missing something.

My comment about making sure your java application is properly configured addresses the final display of the string (2nd point above).
]