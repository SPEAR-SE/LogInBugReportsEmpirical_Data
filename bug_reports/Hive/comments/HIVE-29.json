[Copy of the paper: http://icme2007.org/~jrzhou/pub/Scope.pdf.

First Example:

SELECT Ra, Rb 
FROM R 
WHERE Rb < 100 AND (Ra > 5 OR EXISTS(SELECT * FROM S WHERE Sa < 20 AND Sc = Rc)) 

Here is an equivalent script in SCOPE. 

SQ = SELECT DISTINCT Sc FROM S WHERE Sa < 20; 
M1 = SELECT Ra, Rb, Rc FROM R WHERE Rb < 100; 
M2 = SELECT Ra, Rb, Rc, Sc FROM M1 LEFT OUTER JOIN SQ ON Rc == Sc; 
Q  = SELECT Ra, Rb FROM M2 WHERE Ra > 5 OR Rc != Sc;  
R1 = SELECT A+C AS ac, B.Trim() AS B1 FROM R WHERE StringOccurs(C, "xyz") > 2;

Second Example:

e = EXTRACT query FROM "search.log" USING LogExtractor; 
s1 = SELECT query, COUNT(*) as count FROM e GROUP BY query; 
s2 = SELECT query, count FROM s1 WHERE count > 1000; 
s3 = SELECT query, count FROM s2 ORDER BY count DESC; 
OUTPUT s3 TO "qcount.result";
, The example script from section 3.5:

{noformat}
E = EXTRACT query
    FROM @@logfile@@
    USING LogExtractor ;

EXPORT
R = SELECT query, COUNT() AS count
    FROM E
    GROUP BY query
    HAVING count > @@mincount@@;
{noformat}

Using the above script:

{noformat}
Q1 = IMPORT "MyView.script"
     PARAMS logfile="Queries_Jan.log",
            limit=1000 ;

Q2 = IMPORT "MyView.script"
     PARAMS logfile="Queries_Feb.log",
            limit=1000 ;

JQ = SELECT Q1.query, Q2.count-Q1.count AS diff,
            Q1.count AS jan_cnt,
            Q2.count AS feb_count,
     FROM Q1 LEFT OUTER JOIN Q2
          ON Q1.query == Q2.query
     ORDER BY diff DESC;
{noformat}

, Some of the things that we had discussed at FB a while back that could be a step in this direction include:

1. Support variables and variable substitution in Hive cli to support things like @@logfile@@ as shown int the example above.
2. Support the ability to create data flows using data variables such as mentioned in the example above. We also mentioned that it would be cool to support such a syntax natively in a programming language like python, perl etc. and provide client side libraries to compile such chains into optimal hive queries. Note that writing the operations as shown in the example above it another way of composing queries that appeals well to programmers as opposed to nesting in the from clause that appeals well to SQL programmers. There is no reason why these cannot be combined and together, so that the first approach rewrites to nested SQL which is what hive understands. Key thing would be to do this natively as python/perl - other libraries so programmers do not have to learn yet another language..., Updated link for the SCOPE paper since the one above expired:

http://research.microsoft.com/en-us/um/people/jrzhou/pub/scope.pdf
]