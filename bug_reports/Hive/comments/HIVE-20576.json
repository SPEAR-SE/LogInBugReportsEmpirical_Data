[From the plan changes I think the most notable is that the number of Semi Joins have increased...it might be related
{code}
$ git diff|grep Join|grep -i semi
                        Left Semi Join 0 to 1
+                       Left Semi Join 0 to 1
                        Left Semi Join 0 to 1
+                       Left Semi Join 0 to 1
+                       Left Semi Join 0 to 1
+                       Left Semi Join 0 to 1
-                             Left Semi Join 0 to 1
-                             Left Semi Join 0 to 1
+                       Left Semi Join 0 to 1
+                       Left Semi Join 0 to 1
{code}, seems like having the following 3 options enable at the same time may lead to incorrect results:

* {{hive.auto.convert.join}}
* {{hive.transpose.aggr.join}}
* {{hive.vectorized.execution.enabled}}, the plan looks right; toggling vectorization doesn't change the plan - but it causes incorrect results to appear

{code}
--! qt:dataset:src

set hive.transpose.aggr.join=true;
set hive.vectorized.execution.enabled=true;

set hive.auto.convert.join=true;
set hive.auto.convert.join.noconditionaltask.size=10000000;
-- HIVE-5891 Alias conflict when merging multiple mapjoin tasks into their common
-- child mapred task
EXPLAIN
SELECT x.key FROM (
  SELECT c.key FROM
    (SELECT a.key FROM src a JOIN src b ON a.key=b.key GROUP BY a.key) tmp
    JOIN src c ON tmp.key=c.key
  UNION ALL
  SELECT c.key FROM
    (SELECT a.key FROM src a JOIN src b ON a.key=b.key GROUP BY a.key) tmp
    JOIN src c ON tmp.key=c.key
) x order by x.key;

SELECT x.key FROM (
  SELECT c.key FROM
    (SELECT a.key FROM src a JOIN src b ON a.key=b.key GROUP BY a.key) tmp
    JOIN src c ON tmp.key=c.key
  UNION ALL
  SELECT c.key FROM
    (SELECT a.key FROM src a JOIN src b ON a.key=b.key GROUP BY a.key) tmp
    JOIN src c ON tmp.key=c.key
) x order by x.key;
{code}, seems like part of the issue is that the overflow batch is transmitted; while it contains only invalid data...
when the size is incremented; {{bigTableRetainedVectorCopy}} is actually null - I think if that would be right; then the resultset would became okay.

https://github.com/apache/hive/blob/366eaceffb819cd984b2cb3b005817feb3050bca/ql/src/java/org/apache/hadoop/hive/ql/exec/vector/mapjoin/VectorMapJoinInnerBigOnlyGenerateResultOperator.java#L262

the fact that bigTableRetainedVectorCopy is null seemed to be a little bit connected to HIVE-18908 

https://github.com/apache/hive/blob/366eaceffb819cd984b2cb3b005817feb3050bca/ql/src/java/org/apache/hadoop/hive/ql/optimizer/physical/Vectorizer.java#L3918

but reverting HIVE-18908 doesn't fix it...

fyi: [~teddy.choi],[~mmccline]
]