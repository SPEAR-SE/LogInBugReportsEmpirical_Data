[[~jpullokkaran]

I looked at HiveJoin.java:chooseJoinAlgorithmAndGetCost and noticed catalog_sales x date_dim is not one of the joins that get costed, which means that re-ordering happened already and this join wasn't considered selective.
As you mentioned the catalog_sales x date_dim join must have been trimmed earlier.

{code}
2015-03-30 20:56:30,676 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(160)) - HiveJoin(condition=[=($0, $3)], joinType=[inner], joinAlgorithm=[none], cost=[null])
  HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.catalog_sales]])
  HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.customer]])

2015-03-30 20:56:30,694 DEBUG [main]: stats.StatsUtils (StatsUtils.java:setUnknownRcDsToAverage(383)) - Estimated average row size: 8
2015-03-30 20:56:31,030 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(169)) - COMMONJOIN possible 2
2015-03-30 20:56:31,031 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(170)) - COMMONJOIN cost: {2.88149727E8 rows, 5.891110492737591E9 cpu, 3.1120170516E12 io}
2015-03-30 20:56:31,046 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(180)) - MAPJOIN possible
2015-03-30 20:56:31,046 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(181)) - MAPJOIN cost: {2.88149727E8 rows, 2.89749727E8 cpu, 3.84E10 io}
2015-03-30 20:56:31,049 INFO  [main]: log.PerfLogger (PerfLogger.java:PerfLogBegin(121)) - <PERFLOG method=partition-retrieving from=org.apache.hadoop.hive.ql.optimizer.ppr.PartitionPruner>
2015-03-30 20:56:31,049 INFO  [main]: log.PerfLogger (PerfLogger.java:PerfLogEnd(148)) - </PERFLOG method=partition-retrieving start=1427763391049 end=1427763391049 duration=0 from=org.apache.hadoop.hive.ql.optimizer.ppr.PartitionPruner>
2015-03-30 20:56:31,072 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(160)) - HiveJoin(condition=[=($1, $2)], joinType=[inner], joinAlgorithm=[none], cost=[null])
  HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.customer]])
  HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.customer_address]])

2015-03-30 20:56:31,093 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(169)) - COMMONJOIN possible 2
2015-03-30 20:56:31,093 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(170)) - COMMONJOIN cost: {2400000.0 rows, 3.613071630485607E7 cpu, 2.89314882E10 io}
2015-03-30 20:56:31,101 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(180)) - MAPJOIN possible
2015-03-30 20:56:31,101 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(181)) - MAPJOIN cost: {2400000.0 rows, 3200000.0 cpu, 0.0 io}
2015-03-30 20:56:31,108 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(160)) - HiveJoin(condition=[=($0, $3)], joinType=[inner], joinAlgorithm=[none], cost=[null])
  HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.catalog_sales]])
  HiveJoin(condition=[=($1, $2)], joinType=[inner], joinAlgorithm=[map_join], cost=[{2400000.0 rows, 3200000.0 cpu, 0.0 io}])
    HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.customer]])
    HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.customer_address]])

2015-03-30 20:56:31,109 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(169)) - COMMONJOIN possible 2
2015-03-30 20:56:31,109 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(170)) - COMMONJOIN cost: {2.88358116798421E8 rows, 5.894517244918468E9 cpu, 3.140605701919576E12 io}
2015-03-30 20:56:31,117 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(180)) - MAPJOIN possible
2015-03-30 20:56:31,117 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(181)) - MAPJOIN cost: {2.88358116798421E8 rows, 5.74907843798421E8 cpu, 1.82245626372E13 io}
2015-03-30 20:56:31,123 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(160)) - HiveJoin(condition=[=($4, $5)], joinType=[inner], joinAlgorithm=[none], cost=[null])
  HiveJoin(condition=[=($0, $3)], joinType=[inner], joinAlgorithm=[map_join], cost=[{2.88149727E8 rows, 2.89749727E8 cpu, 3.84E10 io}])
    HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.catalog_sales]])
    HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.customer]])
  HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.customer_address]])

2015-03-30 20:56:31,124 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(169)) - COMMONJOIN possible 2
2015-03-30 20:56:31,125 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(170)) - COMMONJOIN cost: {3.246707731214128E8 rows, 6.6820694227737255E9 cpu, 7.007260187622517E12 io}
2015-03-30 20:56:31,132 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(180)) - MAPJOIN possible
2015-03-30 20:56:31,132 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(181)) - MAPJOIN cost: {3.246707731214128E8 rows, 3.254707731214128E8 cpu, 4.91951724E10 io}
2015-03-30 20:56:31,138 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(160)) - HiveJoin(condition=[=($1, $2)], joinType=[inner], joinAlgorithm=[none], cost=[null])
  HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.customer]])
  HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.customer_address]])

2015-03-30 20:56:31,139 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(169)) - COMMONJOIN possible 2
2015-03-30 20:56:31,139 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(170)) - COMMONJOIN cost: {2400000.0 rows, 3.613071630485607E7 cpu, 2.89314882E10 io}
2015-03-30 20:56:31,144 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(180)) - MAPJOIN possible
2015-03-30 20:56:31,144 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(181)) - MAPJOIN cost: {2400000.0 rows, 3200000.0 cpu, 0.0 io}
2015-03-30 20:56:31,149 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(160)) - HiveJoin(condition=[=($0, $3)], joinType=[inner], joinAlgorithm=[none], cost=[null])
  HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.catalog_sales]])
  HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.customer]])

2015-03-30 20:56:31,150 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(169)) - COMMONJOIN possible 2
2015-03-30 20:56:31,150 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(170)) - COMMONJOIN cost: {2.88149727E8 rows, 5.891110492737591E9 cpu, 3.1120170516E12 io}
2015-03-30 20:56:31,156 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(180)) - MAPJOIN possible
2015-03-30 20:56:31,156 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(181)) - MAPJOIN cost: {2.88149727E8 rows, 2.89749727E8 cpu, 3.84E10 io}
2015-03-30 20:56:31,161 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(160)) - HiveJoin(condition=[=($4, $5)], joinType=[inner], joinAlgorithm=[none], cost=[null])
  HiveJoin(condition=[=($0, $3)], joinType=[inner], joinAlgorithm=[map_join], cost=[{2.88149727E8 rows, 2.89749727E8 cpu, 3.84E10 io}])
    HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.catalog_sales]])
    HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.customer]])
  HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.customer_address]])

2015-03-30 20:56:31,162 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(169)) - COMMONJOIN possible 2
2015-03-30 20:56:31,162 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(170)) - COMMONJOIN cost: {3.246707731214128E8 rows, 6.6820694227737255E9 cpu, 7.007260187622517E12 io}
2015-03-30 20:56:31,168 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(180)) - MAPJOIN possible
2015-03-30 20:56:31,168 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(181)) - MAPJOIN cost: {3.246707731214128E8 rows, 3.254707731214128E8 cpu, 4.91951724E10 io}
2015-03-30 20:56:31,172 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(160)) - HiveJoin(condition=[=($0, $3)], joinType=[inner], joinAlgorithm=[none], cost=[null])
  HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.catalog_sales]])
  HiveJoin(condition=[=($1, $2)], joinType=[inner], joinAlgorithm=[map_join], cost=[{2400000.0 rows, 3200000.0 cpu, 0.0 io}])
    HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.customer]])
    HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.customer_address]])

2015-03-30 20:56:31,173 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(169)) - COMMONJOIN possible 2
2015-03-30 20:56:31,173 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(170)) - COMMONJOIN cost: {2.88358116798421E8 rows, 5.894517244918468E9 cpu, 3.140605701919576E12 io}
2015-03-30 20:56:31,179 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(180)) - MAPJOIN possible
2015-03-30 20:56:31,179 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(181)) - MAPJOIN cost: {2.88358116798421E8 rows, 5.74907843798421E8 cpu, 1.82245626372E13 io}
2015-03-30 20:56:31,183 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(160)) - HiveJoin(condition=[=($1, $2)], joinType=[inner], joinAlgorithm=[none], cost=[null])
  HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.customer]])
  HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.customer_address]])

2015-03-30 20:56:31,184 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(169)) - COMMONJOIN possible 2
2015-03-30 20:56:31,185 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(170)) - COMMONJOIN cost: {2400000.0 rows, 3.613071630485607E7 cpu, 2.89314882E10 io}
2015-03-30 20:56:31,189 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(180)) - MAPJOIN possible
2015-03-30 20:56:31,190 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(181)) - MAPJOIN cost: {2400000.0 rows, 3200000.0 cpu, 0.0 io}
2015-03-30 20:56:31,194 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(160)) - HiveJoin(condition=[=($0, $3)], joinType=[inner], joinAlgorithm=[none], cost=[null])
  HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.catalog_sales]])
  HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.customer]])

2015-03-30 20:56:31,196 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(169)) - COMMONJOIN possible 2
2015-03-30 20:56:31,196 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(170)) - COMMONJOIN cost: {2.88149727E8 rows, 5.891110492737591E9 cpu, 3.1120170516E12 io}
2015-03-30 20:56:31,200 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(180)) - MAPJOIN possible
2015-03-30 20:56:31,201 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(181)) - MAPJOIN cost: {2.88149727E8 rows, 2.89749727E8 cpu, 3.84E10 io}
2015-03-30 20:56:31,205 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(160)) - HiveJoin(condition=[=($4, $5)], joinType=[inner], joinAlgorithm=[none], cost=[null])
  HiveJoin(condition=[=($0, $3)], joinType=[inner], joinAlgorithm=[map_join], cost=[{2.88149727E8 rows, 2.89749727E8 cpu, 3.84E10 io}])
    HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.catalog_sales]])
    HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.customer]])
  HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.customer_address]])

2015-03-30 20:56:31,206 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(169)) - COMMONJOIN possible 2
2015-03-30 20:56:31,206 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(170)) - COMMONJOIN cost: {3.246707731214128E8 rows, 6.6820694227737255E9 cpu, 7.007260187622517E12 io}
2015-03-30 20:56:31,211 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(180)) - MAPJOIN possible
2015-03-30 20:56:31,211 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(181)) - MAPJOIN cost: {3.246707731214128E8 rows, 3.254707731214128E8 cpu, 4.91951724E10 io}
2015-03-30 20:56:31,215 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(160)) - HiveJoin(condition=[=($0, $3)], joinType=[inner], joinAlgorithm=[none], cost=[null])
  HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.catalog_sales]])
  HiveJoin(condition=[=($1, $2)], joinType=[inner], joinAlgorithm=[map_join], cost=[{2400000.0 rows, 3200000.0 cpu, 0.0 io}])
    HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.customer]])
    HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.customer_address]])

2015-03-30 20:56:31,216 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(169)) - COMMONJOIN possible 2
2015-03-30 20:56:31,216 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(170)) - COMMONJOIN cost: {2.88358116798421E8 rows, 5.894517244918468E9 cpu, 3.140605701919576E12 io}
2015-03-30 20:56:31,220 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(180)) - MAPJOIN possible
2015-03-30 20:56:31,221 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(181)) - MAPJOIN cost: {2.88358116798421E8 rows, 5.74907843798421E8 cpu, 1.82245626372E13 io}
2015-03-30 20:56:31,231 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(160)) - HiveJoin(condition=[=($4, $5)], joinType=[inner], joinAlgorithm=[map_join], cost=[null])
  HiveJoin(condition=[=($0, $3)], joinType=[inner], joinAlgorithm=[map_join], cost=[{2.88149727E8 rows, 2.89749727E8 cpu, 3.84E10 io}])
    HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.catalog_sales]])
    HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.customer]])
  HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.customer_address]])

2015-03-30 20:56:31,235 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(169)) - COMMONJOIN possible 2
2015-03-30 20:56:31,235 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(170)) - COMMONJOIN cost: {3.246707731214128E8 rows, 6.6820694227737255E9 cpu, 7.007260187622517E12 io}
2015-03-30 20:56:31,240 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(180)) - MAPJOIN possible
2015-03-30 20:56:31,241 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(181)) - MAPJOIN cost: {3.246707731214128E8 rows, 3.254707731214128E8 cpu, 4.91951724E10 io}
2015-03-30 20:56:31,244 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(160)) - HiveJoin(condition=[=($0, $3)], joinType=[inner], joinAlgorithm=[map_join], cost=[{2.88149727E8 rows, 2.89749727E8 cpu, 3.84E10 io}])
  HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.catalog_sales]])
  HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.customer]])

2015-03-30 20:56:31,245 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(169)) - COMMONJOIN possible 2
2015-03-30 20:56:31,246 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(170)) - COMMONJOIN cost: {2.88149727E8 rows, 5.891110492737591E9 cpu, 3.1120170516E12 io}
2015-03-30 20:56:31,247 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(180)) - MAPJOIN possible
2015-03-30 20:56:31,248 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(181)) - MAPJOIN cost: {2.88149727E8 rows, 2.89749727E8 cpu, 3.84E10 io}
2015-03-30 20:56:31,320 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(160)) - HiveJoin(condition=[=($2, $8)], joinType=[inner], joinAlgorithm=[none], cost=[null])
  HiveFilter(condition=[OR(in(substr($7, 1, 5), '85669', '86197', '88274', '83405', '86475', '85392', '85460', '80348', '81792'), in($6, 'CA', 'WA', 'GA'), >($1, 5E2))])
    HiveProject(cs_bill_customer_sk=[$0], cs_sales_price=[$1], cs_sold_date_sk=[$2], c_customer_sk=[$3], c_current_addr_sk=[$4], ca_address_sk=[$5], ca_state=[$6], ca_zip=[$7])
      HiveJoin(condition=[=($4, $5)], joinType=[inner], joinAlgorithm=[map_join], cost=[{3.246707731214128E8 rows, 3.254707731214128E8 cpu, 4.91951724E10 io}])
        HiveJoin(condition=[=($0, $3)], joinType=[inner], joinAlgorithm=[map_join], cost=[{2.88149727E8 rows, 2.89749727E8 cpu, 3.84E10 io}])
          HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.catalog_sales]])
          HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.customer]])
        HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.customer_address]])
  HiveFilter(condition=[AND(=($2, 2), =($1, 2000))])
    HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.date_dim]])

2015-03-30 20:56:31,323 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(169)) - COMMONJOIN possible 2
2015-03-30 20:56:31,323 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(170)) - COMMONJOIN cost: {1.36661031991844E8 rows, 2.6967321460432544E9 cpu, 4.942256188845978E12 io}
2015-03-30 20:56:31,333 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(180)) - MAPJOIN possible
2015-03-30 20:56:31,334 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(181)) - MAPJOIN cost: {1.36661031991844E8 rows, 1.3666116243648687E8 cpu, 0.0 io}
2015-03-30 20:56:31,339 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(160)) - HiveJoin(condition=[=($2, $8)], joinType=[inner], joinAlgorithm=[none], cost=[null])
  HiveFilter(condition=[OR(in(substr($7, 1, 5), '85669', '86197', '88274', '83405', '86475', '85392', '85460', '80348', '81792'), in($6, 'CA', 'WA', 'GA'), >($1, 5E2))])
    HiveProject(cs_bill_customer_sk=[$0], cs_sales_price=[$1], cs_sold_date_sk=[$2], c_customer_sk=[$3], c_current_addr_sk=[$4], ca_address_sk=[$5], ca_state=[$6], ca_zip=[$7])
      HiveJoin(condition=[=($4, $5)], joinType=[inner], joinAlgorithm=[map_join], cost=[{3.246707731214128E8 rows, 3.254707731214128E8 cpu, 4.91951724E10 io}])
        HiveJoin(condition=[=($0, $3)], joinType=[inner], joinAlgorithm=[map_join], cost=[{2.88149727E8 rows, 2.89749727E8 cpu, 3.84E10 io}])
          HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.catalog_sales]])
          HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.customer]])
        HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.customer_address]])
  HiveFilter(condition=[AND(=($2, 2), =($1, 2000))])
    HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.date_dim]])

2015-03-30 20:56:31,340 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(169)) - COMMONJOIN possible 2
2015-03-30 20:56:31,340 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(170)) - COMMONJOIN cost: {1.36661031991844E8 rows, 2.6967321460432544E9 cpu, 4.942256188845978E12 io}
2015-03-30 20:56:31,345 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(180)) - MAPJOIN possible
2015-03-30 20:56:31,346 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(181)) - MAPJOIN cost: {1.36661031991844E8 rows, 1.3666116243648687E8 cpu, 0.0 io}
2015-03-30 20:56:31,353 DEBUG [main]: parse.CalcitePlanner (CalcitePlanner.java:apply(839)) - CBO Planning details:

2015-03-30 20:56:31,355 DEBUG [main]: parse.CalcitePlanner (CalcitePlanner.java:apply(840)) - Original Plan:
HiveSort(fetch=[100])
  HiveSort(sort0=[$0], dir0=[ASC])
    HiveProject(ca_zip=[$0], _o__c1=[$1])
      HiveAggregate(group=[{0}], agg#0=[sum($1)])
        HiveProject($f0=[$67], $f1=[$20])
          HiveFilter(condition=[AND(=($2, $37), =($41, $58), OR(in(substr($67, 1, 5), '85669', '86197', '88274', '83405', '86475', '85392', '85460', '80348', '81792'), in($66, 'CA', 'WA', 'GA'), >($20, 5E2)), =($33, $74), =($84, 2), =($80, 2000))])
            HiveJoin(condition=[true], joinType=[inner], joinAlgorithm=[none], cost=[null])
              HiveJoin(condition=[true], joinType=[inner], joinAlgorithm=[none], cost=[null])
                HiveJoin(condition=[true], joinType=[inner], joinAlgorithm=[none], cost=[null])
                  HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.catalog_sales]])
                  HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.customer]])
                HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.customer_address]])
              HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.date_dim]])

2015-03-30 20:56:31,356 DEBUG [main]: parse.CalcitePlanner (CalcitePlanner.java:apply(841)) - Plan After PPD, PartPruning, ColumnPruning:
HiveSort(fetch=[100])
  HiveSort(sort0=[$0], dir0=[ASC])
    HiveAggregate(group=[{0}], agg#0=[sum($1)])
      HiveProject($f0=[$7], $f1=[$1])
        HiveJoin(condition=[=($2, $8)], joinType=[inner], joinAlgorithm=[none], cost=[null])
          HiveFilter(condition=[OR(in(substr($7, 1, 5), '85669', '86197', '88274', '83405', '86475', '85392', '85460', '80348', '81792'), in($6, 'CA', 'WA', 'GA'), >($1, 5E2))])
            HiveJoin(condition=[=($4, $5)], joinType=[inner], joinAlgorithm=[none], cost=[null])
              HiveJoin(condition=[=($0, $3)], joinType=[inner], joinAlgorithm=[none], cost=[null])
                HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.catalog_sales]])
                HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.customer]])
              HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.customer_address]])
          HiveFilter(condition=[AND(=($2, 2), =($1, 2000))])
            HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.date_dim]])

2015-03-30 20:56:31,376 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(160)) - HiveJoin(condition=[=($2, $8)], joinType=[inner], joinAlgorithm=[map_join], cost=[{1.36661031991844E8 rows, 1.3666116243648687E8 cpu, 0.0 io}])
  HiveFilter(condition=[OR(in(substr($7, 1, 5), '85669', '86197', '88274', '83405', '86475', '85392', '85460', '80348', '81792'), in($6, 'CA', 'WA', 'GA'), >($1, 5E2))])
    HiveJoin(condition=[=($4, $5)], joinType=[inner], joinAlgorithm=[map_join], cost=[{3.246707731214128E8 rows, 3.254707731214128E8 cpu, 4.91951724E10 io}])
      HiveJoin(condition=[=($0, $3)], joinType=[inner], joinAlgorithm=[map_join], cost=[{2.88149727E8 rows, 2.89749727E8 cpu, 3.84E10 io}])
        HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.catalog_sales]])
        HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.customer]])
      HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.customer_address]])
  HiveFilter(condition=[AND(=($2, 2), =($1, 2000))])
    HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.date_dim]])

2015-03-30 20:56:31,377 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(169)) - COMMONJOIN possible 2
2015-03-30 20:56:31,377 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(170)) - COMMONJOIN cost: {1.36661031991844E8 rows, 2.6967321460432544E9 cpu, 4.942256188845978E12 io}
2015-03-30 20:56:31,378 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(180)) - MAPJOIN possible
2015-03-30 20:56:31,379 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(181)) - MAPJOIN cost: {1.36661031991844E8 rows, 1.3666116243648687E8 cpu, 0.0 io}
2015-03-30 20:56:31,382 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(160)) - HiveJoin(condition=[=($4, $5)], joinType=[inner], joinAlgorithm=[map_join], cost=[{3.246707731214128E8 rows, 3.254707731214128E8 cpu, 4.91951724E10 io}])
  HiveJoin(condition=[=($0, $3)], joinType=[inner], joinAlgorithm=[map_join], cost=[{2.88149727E8 rows, 2.89749727E8 cpu, 3.84E10 io}])
    HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.catalog_sales]])
    HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.customer]])
  HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.customer_address]])

2015-03-30 20:56:31,383 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(169)) - COMMONJOIN possible 2
2015-03-30 20:56:31,383 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(170)) - COMMONJOIN cost: {3.246707731214128E8 rows, 6.6820694227737255E9 cpu, 7.007260187622517E12 io}
2015-03-30 20:56:31,384 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(180)) - MAPJOIN possible
2015-03-30 20:56:31,385 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(181)) - MAPJOIN cost: {3.246707731214128E8 rows, 3.254707731214128E8 cpu, 4.91951724E10 io}
2015-03-30 20:56:31,387 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(160)) - HiveJoin(condition=[=($0, $3)], joinType=[inner], joinAlgorithm=[map_join], cost=[{2.88149727E8 rows, 2.89749727E8 cpu, 3.84E10 io}])
  HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.catalog_sales]])
  HiveTableScan(table=[[tpcds_bin_partitioned_orc_200_1.customer]])

2015-03-30 20:56:31,388 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(169)) - COMMONJOIN possible 2
2015-03-30 20:56:31,388 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(170)) - COMMONJOIN cost: {2.88149727E8 rows, 5.891110492737591E9 cpu, 3.1120170516E12 io}
2015-03-30 20:56:31,389 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(180)) - MAPJOIN possible
2015-03-30 20:56:31,390 DEBUG [main]: reloperators.HiveJoin (HiveJoin.java:chooseJoinAlgorithmAndGetCost(181)) - MAPJOIN cost: {2.88149727E8 rows, 2.89749727E8 cpu, 3.84E10 io}
{code}, This filter prevents joining date_dim first:
{noformat}
( substr(ca_zip,1,5) in ('85669', '86197','88274','83405','86475',
 '85392', '85460', '80348', '81792')
 or customer_address.ca_state in ('CA','WA','GA')
 or catalog_sales.cs_sales_price > 500)
{noformat}
With this filter, table date_dim can not be combined into the same mutijoin RelNode with other 3 tables. 
{code}
  private boolean canCombine(RelNode input, boolean nullGenerating) {
    return input instanceof MultiJoin
        && !((MultiJoin) input).isFullOuterJoin()
        && !((MultiJoin) input).containsOuter()
        && !nullGenerating;
  }
{code}
The input is a filter RelNode instead of MultiJoin.
{noformat}
2016-08-04 14:23:38,637 | DEBUG | HiveServer2-Handler-Pool: Thread-123 | Original Plan:
HiveSort(fetch=[100])
  HiveSort(sort0=[$0], dir0=[ASC])
    HiveProject(ca_zip=[$0], _o__c1=[$1])
      HiveAggregate(group=[{0}], agg#0=[sum($1)])
        HiveProject($f0=[$67], $f1=[$20])
          HiveFilter(condition=[AND(=($2, $37), =($41, $58), =($33, $74), OR(in(substr($67, 1, 5), '85669', '86197', '88274', '83405', '86475', '85392', '85460', '80348', '81792'), in($66, 'CA', 'WA', 'GA'), >($20, 5E2)), =($84, 2), =($80, 2000))])
            HiveJoin(condition=[true], joinType=[inner], algorithm=[none], cost=[not available])
              HiveJoin(condition=[true], joinType=[inner], algorithm=[none], cost=[not available])
                HiveJoin(condition=[true], joinType=[inner], algorithm=[none], cost=[not available])
                  HiveTableScan(table=[[tpcds_bin_partitioned_orc_10.catalog_sales]])
                  HiveTableScan(table=[[tpcds_bin_partitioned_orc_10.customer]])
                HiveTableScan(table=[[tpcds_bin_partitioned_orc_10.customer_address]])
              HiveTableScan(table=[[tpcds_bin_partitioned_orc_10.date_dim]])
 | org.apache.hadoop.hive.ql.parse.CalcitePlanner$CalcitePlannerAction.apply(CalcitePlanner.java:911)
2016-08-04 14:23:38,654 | DEBUG | HiveServer2-Handler-Pool: Thread-123 | Plan After PPD, PartPruning, ColumnPruning:
HiveSort(fetch=[100])
  HiveSort(sort0=[$0], dir0=[ASC])
    HiveAggregate(group=[{0}], agg#0=[sum($1)])
      HiveProject($f0=[$7], $f1=[$1])
        HiveJoin(condition=[=($2, $8)], joinType=[inner], algorithm=[none], cost=[not available])
          HiveFilter(condition=[OR(in(substr($7, 1, 5), '85669', '86197', '88274', '83405', '86475', '85392', '85460', '80348', '81792'), in($6, 'CA', 'WA', 'GA'), >($1, 5E2))])
            HiveJoin(condition=[=($4, $5)], joinType=[inner], algorithm=[none], cost=[not available])
              HiveJoin(condition=[=($0, $3)], joinType=[inner], algorithm=[none], cost=[not available])
                HiveProject(cs_bill_customer_sk=[$2], cs_sales_price=[$20], cs_sold_date_sk=[$33])
                  HiveTableScan(table=[[tpcds_bin_partitioned_orc_10.catalog_sales]])
                HiveProject(c_customer_sk=[$0], c_current_addr_sk=[$4])
                  HiveTableScan(table=[[tpcds_bin_partitioned_orc_10.customer]])
              HiveProject(ca_address_sk=[$0], ca_state=[$8], ca_zip=[$9])
                HiveTableScan(table=[[tpcds_bin_partitioned_orc_10.customer_address]])
          HiveProject(d_date_sk=[$0], d_year=[$6], d_qoy=[$10])
            HiveFilter(condition=[AND(=($10, 2), =($6, 2000))])
              HiveTableScan(table=[[tpcds_bin_partitioned_orc_10.date_dim]])
 | org.apache.hadoop.hive.ql.parse.CalcitePlanner$CalcitePlannerAction.apply(CalcitePlanner.java:912)
{noformat}

Replacing 'or' with 'and' can help.
{noformat}
 ( substr(ca_zip,1,5) in ('85669', '86197','88274','83405','86475',
 '85392', '85460', '80348', '81792')
 and customer_address.ca_state in ('CA','WA','GA')
 and catalog_sales.cs_sales_price > 500)
{noformat}]