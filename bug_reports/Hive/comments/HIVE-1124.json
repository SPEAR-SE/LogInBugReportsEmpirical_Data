[The problem turned out to be with the way we resolve common subexpressions for matching expressions in the SELECT list and GROUP BY.  As soon as we saw the match, we were skipping over the SELECT item subtree without performing any translations, leading to the inconsistency later on when the view was referenced.

The fix in this patch is a bit involved, since I had to make the UnparseTranslator capable of copying the translations for the common subexpressions.

I have not yet run through all tests yet, but the patch is available for review now.
, Ran through all tests successfully.
, Patch line 993:
{code}
-        ColumnInfo paraExprInfo = groupByInputRowResolver.get("", text);
+        ColumnInfo paraExprInfo = groupByInputRowResolver.get("", entry.getKey());
{code}

Shall we use getExpression?

Otherwise it looks good.
, Updated patch with Zheng's suggestion.  (I had left two calls to get("") unchanged because I wasn't sure how the key/value pairs in the aggregation map were being constucted, but it looks like the text and ASTNode are already 1-to-1 there.), +1. Will test and commit., Can you make the query result deterministic by adding an "order by" at the end? Otherwise the tests might fail.

{code}
    [junit] diff -a -I file: -I /tmp/ -I invalidscheme: -I lastUpdateTime -I lastAccessTime -I owner -I transient_lastDdlTime /data/users/zshao/hadoop_hive_trunk/.ptest_0/build/ql/test/logs\
/clientpositive/create_view.q.out /data/users/zshao/hadoop_hive_trunk/.ptest_0/ql/src/test/results/clientpositive/create_view.q.out
    [junit] 869d868
    [junit] < 401       5
    [junit] 871,873c870
    [junit] < 489       4
    [junit] < 169       4
    [junit] < 277       4
    [junit] ---
    [junit] > 401       5
    [junit] 875a873,875
    [junit] > 277       4
    [junit] > 489       4
    [junit] > 169       4
{code}
, Whoops, I had an ORDER BY, but only a subset of the full key., .3.patch fixes the ORDER BY.
, Committed. Thanks John!]