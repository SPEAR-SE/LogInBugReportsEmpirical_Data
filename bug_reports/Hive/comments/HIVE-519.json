[Attaching a thread dump from one of the map tasks.

Example query that triggers this behaviour:
select remote_ip, count(1) from weblogs  where insertdate='2009-05-26' group by remote_ip limit 10;, Can you upload the line of data that caused the trouble?, For debugging, please try
{code}
(?:^| )(("|\[|\])(?:[^("|\[|\])]+|("|\[|\])("|\[|\]))*("|\[|\])|[^ ]*)
{code}
and
your line of log
on
http://www.fileformat.info/tool/regex.htm, 127.0.0.1 - - [26/May/2009:00:00:00 +0000] "GET /someurl/?track=Blabla(Main) HTTP/1.1" 200 5864 - "Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US) AppleWebKit/525.19 (KHTML, like Gecko) Chrome/1.0.154.65 Safari/525.19"

Example of a line that takes 15 seconds to process on my machine, it does eventually complete though. If I remove the (Main) part of the url it takes 29 milliseconds to finish., To reiterate -- the behaviour reported is that records with certain character sequences (in this example: an HTTP request line with parentheses in the requested path) take many orders of magnitude longer to process than usual. 

This looks like it's a result of Java's regex implementation using a Non-deterministic Finite Automaton, which performs badly in worst-case scenarios (like probably this one.) Check e.g. http://weblogs.java.net/blog/tomwhite/archive/2006/03/a_faster_java_r.html for some background.

There are essentially two options to avoid this: Alter the expression, or use a different regex library. There may be a way to do the former. 

I'll use TestTCTLSeparatedProtocol.test1ApacheLogFormat() as an example.

This is the pattern generated for this test: (?:^| )(("|\[|\])(?:[^("|\[|\])]+|("|\[|\])("|\[|\]))*("|\[|\])|[^ ]*)
Note the sub-expression: ...[^("|\[|\])]+...

I.e., it builds a pattern for a negating character class ("[^...]") that unfortunately doesn't contain a list of characters, but instead another pattern group in parentheses. Namely, the value of QUOTE_CHAR: ("|\[|\])

After I manually converted this sub-expression to the legitimate "[^"\[\]]+" character class the pattern matcher performed admirably against Johan's test case.

Tbh I'm not sure if the character class that currently gets generated is valid; at minimum it may have some unintended side-effects. To implement this properly the pattern builder would need to have access to two different representations of the QUOTE_CHAR parameter (as a grouped expression and as a character class) when there currently only is one. 

(You probably need to apply HIVE-520 first to make the TestTCTLSeparatedProtocol unit test run.)
, Fixed as part of HIVE-167. Please see HIVE-662 for the example query for apache web log files., By the way, we plan to deprecate DynamicSerDe (with all protocols) at some time, because a lot of protocols (like TCTLSeparatedProtocol) are not real Thrift Protocols and it's overly complicated to fit these serialization methods into Thrift.  We will still support the "ThriftDeserializer" which supports statically generated java classes.

What do you guys think? Are there any dependencies on DynamicSerDe on your end?
, We don't depend on DynamicSerDe, so we don't mind if it is deprecated.]