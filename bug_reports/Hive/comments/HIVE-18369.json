[[~ZhongyuWang]: can you turn off the Tez DPP and confirm this happens only due to that optimizer

{code}
set hive.tez.dynamic.partition.pruning=false;
{code} , Yes, we also trace the sourcecode , set hive.tez.dynamic.partition.pruning=false or set hive.optimize.constant.propagation=false can avoid this issue., From a quick look this is a simple case of a "Void but not constant" evaluation in the cast codepath, which can only be hit by the constant prop.

{code}
--- serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/PrimitiveObjectInspectorConverter.java
+++ serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/PrimitiveObjectInspectorConverter.java
@@ -566,6 +566,8 @@ public Object convert(Object input) {
         return null;
       }
       switch (inputOI.getPrimitiveCategory()) {
+        case VOID:
+          return null;
         case BOOLEAN:
           return outputOI.set(hc,
               ((BooleanObjectInspector) inputOI).get(input) ?
{code}

The "proper" fix would be to fail the 1st create table.

{code}
create table testTezVoid as select null as a1,null as b1 from events5;
{code}

should throw an error because it is materializing a void type column, which is not supported in all the file formats in Hive., I can't understand that...but hive document shows Allowed Implicit Conversions (void to varchar) 
https://cwiki.apache.org/confluence/display/Hive/LanguageManual+Types

, Yes, only from a constant, because it is a psuedo-type - it exists only as the type for "null" the constant, not the void type within storage.

For instance, try doing {{create table foo (x void);}} in Postgres/Oracle/MSSQL., But why we can run it when using MR?, That's a bug too - this was fixed in HIVE-11217

With that fix in place, you should be getting the right error for this mistake.

{code}
FAILED: SemanticException [Error 10305]: CREATE-TABLE-AS-SELECT creates a VOID type, please use CAST to specify the type, near field:  a1
{code}]