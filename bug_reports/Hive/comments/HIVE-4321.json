[[~sarahparra]: Can you post a review request on phabricator or review board? Please remove the files that are auto generated by the thrift compiler in the review request. Thanks., Removed the patch attachment because I am updating it, and will then post a review request as noted above. , Updated patch being sent to review board., Submitted review to Review Board: https://reviews.apache.org/r/10425/, @Sarah: are you planning to add some test coverage?, Yes, I will add tests soon. We just didn't have them completed yet and still wanted to get this posted for review to get some initial feedback., The thrift api change looks good to me. [~cwsteinbach] do you have any comments on the new API ?
, The Thrift API, as well as the CLIService API, is closely modeled on the ODBC API (and by extension JDBC). ODBC uses the term "Prepare" instead of "Compile", and I think we should do the same thing here. In other words, the new Thrift method should be called PrepareStatement() instead of Compile().

I think we also need to consider how this will impact OperationState and TOperationState. For example, do we need to add additional states? ODBC and JDBC allow a prepared statement to be executed multiple times, and they also support the ability to bind input parameters after the statement has been compiled. We don't have to support that right now, but any API changes we make should take this use case into account.

I plan to look at this more closely over the weekend and will probably have some more feedback at that point., bq.  ODBC uses the term "Prepare" instead of "Compile", and I think we should do the same thing here.

It would make sense to use 'prepare' if we are trying to address the 'prepare' + 'executePrepared' use case. Unlike OLTP oriented databases, where prepare+executePrepared are going to be useful for doing things like large number of single row inserts, it is not going to be as useful in hive. 
My main worry is that this use case would add more state to be stored in hive server. Once we add support for high-availability, maintaining additional state on hive server 2 would come at additional costs (I am worried about costs of storing the whole plan in something like an rdbms or zookeeper).
Also, calling it 'prepare' without supporting 'prepare' + 'executePrepared' use case is going to be misleading. I think the feature supported by this api is better conveyed by 'compile'.

HS2 is now a single point of failure in the system, I think we should start considering high-availability issues while adding features. Keeping state in client instead of server will help with that.


, bq. It would make sense to use 'prepare' if we are trying to address the 'prepare' + 'executePrepared' use case. Unlike OLTP oriented databases, where prepare+executePrepared are going to be useful for doing things like large number of single row inserts, it is not going to be as useful in hive. 

In the ODBC/JDBC world "prepare" is synonymous with "compile", e.g. here's a direct quote from Microsoft's ODBC docs:

{quote}
Prepared execution is an efficient way to execute a statement more than once. The statement is first compiled, or prepared, into an access plan. The access plan is then executed one or more times at a later time. For more information about access plans, see Processing an SQL Statement.
{quote}
Ref: http://msdn.microsoft.com/en-us/library/windows/desktop/ms716365(v=vs.85).aspx

In case I didn't make this clear I'm not suggesting that we support a BindParameter() call, but I also don't think we should use Compile() instead of Prepare() just because we don't plan on supporting parameter binding.

bq. My main worry is that this use case would add more state to be stored in hive server. Once we add support for high-availability, maintaining additional state on hive server 2 would come at additional costs (I am worried about costs of storing the whole plan in something like an rdbms or zookeeper).

How much additional state we plan to maintain is entirely up to us. Supporting the ability to execute a prepared statement multiple times does not mean that we have to save the query plan in between calls to execute(). I think the Hive JDBC driver already supports PreparedStatements, and we're basically just faking it. The fact that we're faking it doesn't matter because, as you mentioned, Hive is not an OLTP database.

Anyway, I'm getting a little off topic. The main reason I think we should call this "Prepare" instead of "Compile" is so that we maintain the close relationship between the CLIService API and the ODBC API. I designed it this way for the following reasons:

# People who are familiar with ODBC can look at the CLIService API and quickly understand how it works.
# We can reference the ODBC documentation instead of having to write our own. We already take advantage of this in the TCliService.thrift IDL file (though in some cases we also reference JDBC).
# Getting APIs right is tough. ODBC has gone through a bunch of revisions for precisely this reason. It still has bugs, but at least those bugs are well understood. As soon as we diverge significantly from ODBC we risk inventing new bugs, and then we will have the added challenge of figuring out how to reconcile our API bugs with the ODBC API bugs.

bq. HS2 is now a single point of failure in the system, I think we should start considering high-availability issues while adding features. Keeping state in client instead of server will help with that.

I agree that we should start thinking about HA, but I don't understand the part about maintaining state in the client. Wouldn't that imply that the client has to be HA as well? There are some security problems with this as well.

, HiveServer1 will be deprecated in next major release (hive-0.15.0 or hive-1.0)]