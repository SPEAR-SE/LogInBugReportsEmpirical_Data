[[~jcamachorodriguez] Would you like to take a look? Seems like either HIVE-11251 or HIVE-11223 broke it?, [~ashutoshc], actually it was the interaction of HIVE-11252 and HIVE-11223, and I didn't realize as the QA run on both at the same time. This patch solves the issue., 

{color:red}Overall{color}: -1 at least one tests failed

Here are the results of testing the latest attachment:
https://issues.apache.org/jira/secure/attachment/12745846/HIVE-11284.patch

{color:red}ERROR:{color} -1 due to 1 failed/errored test(s), 9225 tests executed
*Failed tests:*
{noformat}
org.apache.hive.hcatalog.streaming.TestStreaming.testTransactionBatchCommit_Json
{noformat}

Test results: http://ec2-174-129-184-35.compute-1.amazonaws.com/jenkins/job/PreCommit-HIVE-TRUNK-Build/4638/testReport
Console output: http://ec2-174-129-184-35.compute-1.amazonaws.com/jenkins/job/PreCommit-HIVE-TRUNK-Build/4638/console
Test logs: http://ec2-174-129-184-35.compute-1.amazonaws.com/logs/PreCommit-HIVE-TRUNK-Build-4638/

Messages:
{noformat}
Executing org.apache.hive.ptest.execution.PrepPhase
Executing org.apache.hive.ptest.execution.ExecutionPhase
Executing org.apache.hive.ptest.execution.ReportingPhase
Tests exited with: TestsFailedException: 1 tests failed
{noformat}

This message is automatically generated.

ATTACHMENT ID: 12745846 - PreCommit-HIVE-TRUNK-Build, Can you briefly explain what was the issue and how is patch fixing it?, Sure.

==
Background:
When RT is on, HiveJoinToMultiJoinRule is responsible for creating MultiJoin operators out of Join operators (if possible). But the plan might be the following:
{noformat}
Join(...)
    Project(...)
        Join(...)
            ...
    Filter(...)
        ...
{noformat} 
Thus, first we need to pull up the Project operator(s) through Join(s) using HiveJoinProjectTransposeRule, to obtain:
{noformat}
Project(...)
    Join(...)
        Join(...)
            ...
    Filter(...)
        ...
{noformat} 
Then, HiveJoinToMultiJoinRule will find both Join operators and merge them. Finally, the Project operator(s) will be pushed down again throw the tree (this is done by HiveRelTrimmer).

==
Problem:
HIVE-11223 enabled the return path for the cbo_rp_join0.q test.
At the same time, HIVE-11252 changed the application of the rules.
- Before HIVE-11252, HiveJoinToMultiJoinRule was applied first, then HiveJoinProjectTransposeRule + HiveJoinToMultiJoinRule. This was merging the operators correctly, because no projects were found in between the Joins.
- After HIVE-11252, only HiveJoinToMultiJoinRule + HiveJoinProjectTransposeRule are applied (this is correct). The problem is that 1) HiveJoinProjectTransposeRule.LEFT and HiveJoinProjectTransposeRule.RIGHT were not enabled, and 2) even if they were enabled, they were not working as expected (more on this below). That's why the test failed.

==
Solution:
HiveJoinProjectTransposeRule.LEFT and HiveJoinProjectTransposeRule.RIGHT get enabled in the patch. In addition, JoinProjectTransposeRule was only working on inner joins, but we need it to work also on outer joins in Hive. That's why I had to bring so much code from the Calcite superclass (JoinProjectTransposeRule) to the Hive subclass (HiveJoinProjectTransposeRule) to solve the issue. I plan to create a Calcite patch so we can use JoinProjectTransposeRule with all kind of Joins. , Cool. +1, Pushed to master.]