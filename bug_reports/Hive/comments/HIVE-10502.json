[Beeline seems not use log4j at all and jline2 has its own logging implementation., Hey Chaoyu, did you check the static initialization of the VersionInfo class, as I posted in the stack?  It does attempt to read the log4j.properties file and picks a random one.  But you might be right, it may not log at all via log4j, can you verify with a few commands whether log4j is ever called?, [~szehon] I see the issue. What you did is to invoke Beeline application from the shell script 'beeline'. I think in hive shell script, which beeline uses, calls hadoop cmd to check HADOOP_VERSION if it is not found in env:
HADOOP_VERSION=$($HADOOP version | awk '{if (NR == 1) {print $2;}}');

In script hadoop, it calls java org.apache.hadoop.util.VersionInfo, and try to locate the log4j.properties file in the path. 

Actually in beeline script, log4j.properties is specified as beeline-log4j.properties and passed to hadoop jar application for Beeline:
export HADOOP_CLIENT_OPTS="$HADOOP_CLIENT_OPTS -Dlog4j.configuration=beeline-log4j.properties "

So you might specify the beeline log4j.properties via 
HADOOP_CLIENT_OPTS=-Dlog4j.configuration=anypath/anyfile.properties ?

 , Thanks for the confirmation, Chaoyu.  The first part is quite unfortunate, seems it will affect all the hive scripts and lead to 'hadoop version' printing out a debug message in a random log4j location (whatever it picks up).

So the second part, I tracked it down to HIVE-8772.  [~thejas], the JIRA makes it so that the log4j properties is hard-coded as 'beeline-log4j.properties' in conf file, which I don't feel is well-known, at this point would it be valuable to have it configurable by initializing Log4j in Beeline java code to have the same user experience as other hive components (--hiveconf hive.log4j.file)?, Note that  beeline-log4j.properties gets packaged into beeline jar, so only if some user needs to customize the logs for beeline, they need to be aware of it.

I haven't seen useful messages at INFO level from beeline, so having it at WARN level in beeline seemed like a good option.  hive-log4j.properties is used by servers as well, so having INFO as default for them seems to be appropriate.

Note that the logging returned from HS2 does not get controlled by the log4j settings of beeline.

Sure, you can make the log4j location configurable for beeline, if you think that is useful. But is that really the case ?
, I thought you had started to see some zookeeper logs for service discovery mode in the original JIRA (HIVE-8772) from beeline that users might want to customize?, The idea was that almost all users would not want to get that noise from zookeeper code. WARN level logging in beeline seems appropriate, but INFO level looks appropriate for HS2, metastore etc. So a different beeline specific log file I feel is useful.
I am not against making log file name configurable, I am just trying to understand what you expect users to point it to.
, In general, I feel the fewer knobs the better. But if you strongly feel a need for that knob, feel free to add it.
, OK its fine for now, I was just trying to understand the motivation, thanks., Here is an option that worked for me:

1) Created a log4j config in a folder. (should be beeline-log4j.properties exactly)

/root/mypreferredclasses/beeline-log4j.properties

--

log4j.rootLogger=TRACE, console

######## console appender ########
log4j.appender.console=org.apache.log4j.ConsoleAppender
log4j.appender.console.target=System.err
log4j.appender.console.layout=org.apache.log4j.PatternLayout
log4j.appender.console.layout.ConversionPattern=### magic here ### %d{yy/MM/dd HH:mm:ss} [%t]: %p %c{2}: %m%n
log4j.appender.console.encoding=UTF-8

2) Called the beeline command by adding this folder into the beginning of the beeline classpath:
export HADOOP_USER_CLASSPATH_FIRST=true; export HADOOP_CLASSPATH=/root/mypreferredclasses; beeline -u jdbc:hive2://nosuchhost:10000
scan complete in 2ms
Connecting to jdbc:hive2://nosuchhost:10000
### magic here ### 16/04/29 05:44:42 [main]: INFO jdbc.Utils: Supplied authorities: nosuchhost:10000
### magic here ### 16/04/29 05:44:42 [main]: INFO jdbc.Utils: Resolved authority: nosuchhost:10000
### magic here ### 16/04/29 05:44:42 [main]: INFO jdbc.HiveConnection: Will try to open client transport with JDBC Uri: jdbc:hive2://nosuchhost:10000
### magic here ### 16/04/29 05:44:42 [main]: DEBUG transport.TSaslTransport: opening transport org.apache.thrift.transport.TSaslClientTransport@2977cbf7
### magic here ### 16/04/29 05:44:42 [main]: INFO jdbc.HiveConnection: Could not open client transport with JDBC Uri: jdbc:hive2://nosuchhost:10000
Error: Could not open client transport with JDBC Uri: jdbc:hive2://nosuchhost:10000: java.net.UnknownHostException: nosuchhost (state=08S01,code=0)
Beeline version 1.1.0-cdh5.4.5 by Apache Hive
0: jdbc:hive2://nosuchhost:10000 (closed)>]