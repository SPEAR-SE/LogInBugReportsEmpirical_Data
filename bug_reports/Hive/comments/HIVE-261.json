[{code}
sed 's@msgs.push("\(.*\)");@System.out.println("msgs size=" + msgs.size() + " \1"); msgs.push("\1");@g' ./ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g
{code}

It seems there is a missing pop or something:

{code}
    [junit] msgs size=1756954 selection target
    [junit] msgs size=1756955 select expression
    [junit] msgs size=1756956 expression specification
    [junit] msgs size=1756957 function specification
    [junit] msgs size=1756958 function name
    [junit] msgs size=1756959 table column identifier
    [junit] msgs size=1756960 table column identifier
    [junit] msgs size=1756961 function specification
    [junit] msgs size=1756962 function name
    [junit] msgs size=1756963 table column identifier
    [junit] msgs size=1756964 table column identifier
    [junit] msgs size=1756965 function specification
    [junit] msgs size=1756966 function name
    [junit] msgs size=1756967 table column identifier
    [junit] msgs size=1756968 table column identifier
    [junit] msgs size=1756969 expression specification
    [junit] msgs size=1756970 function specification
    [junit] msgs size=1756971 function name
    [junit] msgs size=1756972 table column identifier
    [junit] msgs size=1756973 table column identifier
    [junit] msgs size=1756974 function specification
    [junit] msgs size=1756975 function name
    [junit] msgs size=1756976 table column identifier
    [junit] msgs size=1756977 table column identifier
    [junit] msgs size=1756978 function specification
    [junit] msgs size=1756979 function name
    [junit] msgs size=1756980 table column identifier
    [junit] msgs size=1756981 table column identifier
    [junit] msgs size=1756982 selection target
    [junit] msgs size=1756983 select expression
    [junit] msgs size=1756984 expression specification
    [junit] msgs size=1756985 function specification
    [junit] msgs size=1756986 function name
    [junit] msgs size=1756987 table column identifier
    [junit] msgs size=1756988 table column identifier
    [junit] msgs size=1756989 function specification
    [junit] msgs size=1756990 function name
    [junit] msgs size=1756991 table column identifier
    [junit] msgs size=1756992 table column identifier
    [junit] msgs size=1756993 function specification
    [junit] msgs size=1756994 function name
    [junit] msgs size=1756995 table column identifier
    [junit] msgs size=1756996 table column identifier
    [junit] msgs size=1756997 expression specification
    [junit] msgs size=1756998 function specification
    [junit] msgs size=1756999 function name
    [junit] msgs size=1757000 table column identifier
    [junit] msgs size=1757001 table column identifier
    [junit] msgs size=1757002 function specification
    [junit] msgs size=1757003 function name
    [junit] msgs size=1757004 table column identifier
    [junit] msgs size=1757005 table column identifier
    [junit] msgs size=1757006 function specification
    [junit] msgs size=1757007 function name
    [junit] msgs size=1757008 table column identifier
    [junit] msgs size=1757009 table column identifier
    [junit] msgs size=1757010 select list
    [junit] msgs size=1757011 selection target
    [junit] msgs size=1757012 select expression
{code}


My query:
{code}
explain
  select count(1) FROM (

select s1.key as key, s1.value as value from src s1 UNION ALL
select s1.key as key, s1.value as value from src s1 UNION ALL
select s1.key as key, s1.value as value from src s1 UNION ALL
select s1.key as key, s1.value as value from src s1 UNION ALL
select s1.key as key, s1.value as value from src s1 UNION ALL

select s1.key as key, s1.value as value from src s1 UNION ALL
select s1.key as key, s1.value as value from src s1 UNION ALL
select s1.key as key, s1.value as value from src s1 UNION ALL
select s1.key as key, s1.value as value from src s1 UNION ALL
select s1.key as key, s1.value as value from src s1 UNION ALL

select s1.key as key, s1.value as value from src s1 UNION ALL
select s1.key as key, s1.value as value from src s1 UNION ALL
select s1.key as key, s1.value as value from src s1 UNION ALL
select s1.key as key, s1.value as value from src s1 UNION ALL
select s1.key as key, s1.value as value from src s1 UNION ALL

select s1.key as key, s1.value as value from src s1 UNION ALL
select s1.key as key, s1.value as value from src s1 UNION ALL
select s1.key as key, s1.value as value from src s1 UNION ALL
select s1.key as key, s1.value as value from src s1 UNION ALL
select s1.key as key, s1.value as value from src s1 UNION ALL

select s1.key as key, s1.value as value from src s1 UNION ALL
select s1.key as key, s1.value as value from src s1 UNION ALL
select s1.key as key, s1.value as value from src s1 UNION ALL
select s1.key as key, s1.value as value from src s1 UNION ALL
select s1.key as key, s1.value as value from src s1 UNION ALL

select s2.key as key, s2.value as value from src s2) unionsrc;

{code}
, I am very surprised at the number of levels that antlr needs to go through to parse this query.
Also it seems msgs.pop() was not executed for some reason.
, Antlr does not put the code in @after in every return statement.

{code}
    ./build/ql/gen-java/org/apache/hadoop/hive/ql/parse/HiveParser.java

    public final explainStatement_return explainStatement() throws RecognitionException {
        explainStatement_return retval = new explainStatement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token isExtended=null;
        Token KW_EXPLAIN5=null;
        execStatement_return execStatement6 = null;


        CommonTree isExtended_tree=null;
        CommonTree KW_EXPLAIN5_tree=null;
        RewriteRuleTokenStream stream_KW_EXTENDED=new RewriteRuleTokenStream(adaptor,"token KW_EXTENDED");
        RewriteRuleTokenStream stream_KW_EXPLAIN=new RewriteRuleTokenStream(adaptor,"token KW_EXPLAIN");
        RewriteRuleSubtreeStream stream_execStatement=new RewriteRuleSubtreeStream(adaptor,"rule execStatement");
         System.out.println("msgs size=" + msgs.size() + " explain statement"); msgs.push("explain statement");
        try {
            // /data/users/zshao/sync/apache-trunk-HIVE-261/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:157:2: ( KW_EXPLAIN (isExtended= KW_EXTENDED )? execStatement -> ^( TOK_EXPLAI\
N execStatement ( $isExtended)? ) )
            // /data/users/zshao/sync/apache-trunk-HIVE-261/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:157:4: KW_EXPLAIN (isExtended= KW_EXTENDED )? execStatement
            {
            KW_EXPLAIN5=(Token)input.LT(1);
            match(input,KW_EXPLAIN,FOLLOW_KW_EXPLAIN_in_explainStatement448); if (failed) return retval;
            if ( backtracking==0 ) stream_KW_EXPLAIN.add(KW_EXPLAIN5);

            // /data/users/zshao/sync/apache-trunk-HIVE-261/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:157:15: (isExtended= KW_EXTENDED )?
            int alt2=2;
            int LA2_0 = input.LA(1);

{code}
, duplicate of jira 318]