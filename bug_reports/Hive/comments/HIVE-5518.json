[Lets look into this. I do not see a reason why the auxpath and add jar list can not be combined. It sure would make many things easier., bq. It sure would make many things easier.

+1

The combination of auxpath, classpath, and jar list makes this stuff pretty opaque. How do each of these impact the operations I want to run, which omissions cause immediate failure and which won't fail until I'm into the 3rd job in my plan? Seems most people I talk to populate their jars everywhere and cross their fingers., Anecdotally. Anything required as part of an input format needs to be on the aux_path. They are needed to read the data, where as UDFs need not be on the aux_path as they are used inside operators. It would be great if we could unify these concepts without making the classpath needed to launch every job very large. , For mapreduce jobs involving HBase, we expect the client classpath will contain all of the necessary jars. We have a utility for determining which should be shipped to the cluster based on job parameters ([TableMapReduceUtils#addDependencyJars|https://github.com/apache/hbase/blob/a6c89bac930216c1afc0ce2d6b518f3eb690ab31/hbase-server/src/main/java/org/apache/hadoop/hbase/mapreduce/TableMapReduceUtil.java#L519-L584]). The user can also explicitly call these methods to add additional jars by a contained class.

IMHO, it would be nice if a Hive user didn't have to distinguish between jars needed locally and jars needed by the jobs. Just toss them all in and let the system sort it out., A related question: what's the precise behavior of using {{ADD JAR}} ? Does it copy the file from the client local machine up to the job's distributed cache and include it on the task classpaths?]