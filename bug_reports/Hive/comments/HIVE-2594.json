[
UDFLike does not correctly handle patterns where an escaped '\' precedes '%':

{noformat}
% cat /home/carl/Work/repos/hive-test/data/files/pattern/*
aaaaaa
aaa\bbb
aaa\\ccc
aaa\\\ddd
aaa%aaa

% hive

hive> CREATE TABLE test (a STRING)
      STORED AS TEXTFILE
      LOCATION '/home/carl/Work/repos/hive-test/data/files/pattern';

OK

hive> SELECT * FROM test;
OK
aaaaaa
aaa\bbb
aaa\\ccc
aaa\\\ddd
aaa%aaa

hive> SELECT * FROM test WHERE a LIKE 'aaa%'; -- Should match everything. WORKS!
OK
aaaaaa
aaa\bbb
aaa\\ccc
aaa\\\ddd
aaa%aaa

hive> SELECT * from test WHERE a LIKE 'aaa\%%'; -- Should match 'aaa%aaa'. WORKS!
OK
aaa%aaa

hive> SELECT * FROM test WHERE a LIKE 'aaa\\%'; -- Should match 'aaa\bbb', 'aaa\\ccc', and 'aaa\\\ddd'. FAILURE!
OK

hive> SELECT * FROM test WHERE a LIKE 'aaa\\b%'; -- Should match 'aaa\bbb'. Works!
OK
aaa\bbb

hive> quit;
{noformat}


, It's interesting.. Literals are decoded like below.
{code}
'aaa\%' --> 'aaa\%'
'aaa\\%' --> 'aaa\%'
'aaa\\\%' --> 'aaa\\%'
'aaa\\\\%' --> 'aaa\\%'
{code}

Basically all literals are escaped in SemanticAnalyzer. So other entities like 'UDFLike' might not have to try escape, IMHO. But BaseSemanticAnalyzer#unescapeSQLString keeps preceding back slash as-is in some cases like 'bs%' or 'bs_' which make impossible to identify whether it(=bs) is a escape or a character. ]