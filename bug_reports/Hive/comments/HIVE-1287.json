[I think we should support the following query:
{code}
insert overwrite table sink select CAST(foo AS struct<y: string>) from source;
{code}

This is better than directly converting them, because there can be confusions (There are 2 ways to convert from struct<x: string, y: string> and struct<y: string, x: string>, and Hive is taking one of them).
, Thanks for your comment Zheng.

I can see how the {{CAST}} would work, but believe that we need a stronger type checking semantic. Traditionally, a {{CAST}} is used to bypass compile time checks. While this is very powerful concept, it can lead to data corrpution if not used with caution.

An alternative to using the {{CAST}} approach would be to use compile time type checking without regard to the field names. This is similar to function signatures in say Java - where it does not matter what the parameter names are, as long as they are specified in the correct order. This can be achieved by thinking of field names as aliases for the datatypes of that field.

For example - the columns defined as {{struct < a : string >}} and {{struct < b : string >}} are type-equivalent because they are both of the type {{struct < ? : string >}}. 
, > Traditionally, a CAST is used to bypass compile time checks. While this is very powerful concept, it can lead to data corrpution if not used with caution.

The semantics of type equivalence as you mentioned is weaker than the current one. It can also lead to data corrpution if not used with caution.
Asking users to use "CAST" is safer than implicitly treating struct<a:string> and struct<b:string> to be the same type.

Does that make sense?
, I think I understand your point of view. Let me explain mine:

Right now there is no consistent type checking. What we have is implicit type conversion where possible - such as converting a struct to string but not the other way around. In other places this implicit type conversion leads to internal error. In case of struct to struct conversion however the check is rigid to the field names. This is not consistent.

My suggestion is to provide type equivalence semantics within the query language framework. Doing this will help in the following ways:
- Implicit type conversion would not be allowed and would require explicit CAST to convert to another type. 
- The query compiler would ensure that the data types are equivalent and therefore allow data to flow without having to invoke any UDF for every row. This should help us gain performance relative to the current approach.
- Providing type equivalence checks will also be fundamental to building higher-level UD*Fs which would otherwise have to deal with cast semantics. 
, @Zheng, I don't get how implicit casting from struct<a:string> to struct<b:string> can cause data corruption. 
It would be great to see this fixed in a future Hive release.]