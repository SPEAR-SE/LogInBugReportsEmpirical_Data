[FYI [~jcoffey] [~xuefuz], FYI [~szehon], https://reviews.apache.org/r/20048/, add a new qtest for changing type, 

{color:green}Overall{color}: +1 all checks pass

Here are the results of testing the latest attachment:
https://issues.apache.org/jira/secure/attachment/12638877/HIVE-6784.2.patch.txt

{color:green}SUCCESS:{color} +1 5550 tests passed

Test results: http://bigtop01.cloudera.org:8080/job/PreCommit-HIVE-Build/2147/testReport
Console output: http://bigtop01.cloudera.org:8080/job/PreCommit-HIVE-Build/2147/console

Messages:
{noformat}
Executing org.apache.hive.ptest.execution.PrepPhase
Executing org.apache.hive.ptest.execution.ExecutionPhase
Executing org.apache.hive.ptest.execution.ReportingPhase
{noformat}

This message is automatically generated.

ATTACHMENT ID: 12638877, -1 on this patch.

Looping on the arraywriteable in deserialize() will cause a performance penalty at read time, and running parseXxxx(obj.toString) in the event of a type mismatch is also painful.

Changing types of columns is a rare event, we shouldn't write code that will cause performance penalties to handle it.  Users should recreate the table with the new type and load it from the old table casting and converting as appropriate in their query., Not allowing changing types of columns would be negative for adopting parquet --- at least this is a different behavior from using other file format. 

Regarding performance penalty, 

1) if you look at current implementation of LazyInteger, LayzLong etc (from LazySimpleSerDe, in package org.apache.hadoop.hive.serde2.lazy), they try to parseInt, parseLong for every column (all initially represented as string, the parsing overhead occurs even if the type is expected).  This is how hive achieves change types of columns ("schema on read");  in another word, the similar performance penalty is already there for other SerDe in order to achieve "schema on read".

  /** 
   *Parses the string argument as if it was an int value and returns the
   * result. Throws NumberFormatException if the string does not represent an
   * int quantity.
   ...
    public static int parseInt(byte[] bytes, int start, int length, int radix) {


   /**
   * Parses the string argument as if it was a long value and returns the
   * result. Throws NumberFormatException if the string does not represent a
   * long quantity.
   ....
   public static long parseLong(byte[] bytes, int start, int length, int radix) {


2) In he patch for this jira, the extra overhead is to list the top level element of ArrayWritable to inspect whether there is a type change or not. A new converted object is created ONLY IF the type is changed.

    I agree that there would be some overhead to list the element of ArrayWritable, but it is a tradeoff.

3) The patch in this jira would actually help performance when serializing (in time of writing) ArrayWritable. The old approach is to create a new object for every single writable element; with this patch, it only creates new a new object when there is type change.

, You've cited a "lazy" serde.  Parquet is not "lazy".  It is similar to ORC.

Have a look ORC's deserialize() method (org.apache.hadoop.hive.ql.io.orc.OrcSerde):
{code}
  @Override
  public Object deserialize(Writable writable) throws SerDeException {
    return writable;
  }
{code}

A quick look through ORC code indicates to me that they don't do any reparsing (though I might have missed something).

Looking through other serde's not a single one (that I checked) reparses values.  Value parsing is handled in ObjectInspectors (poke around org.apache.hadoop.hive.serde2.objectinspector.primitive.PrimitiveObjectInspectorUtils).

In my opinion, the *substantial* performance penalty that you are introducing with this patch is going to be a much bigger negative to adopting parquet than obliging people to rebuild their data set in the rare event that you have to change a type.

And if you do need to change a type, insert overwrite table is a good work around.

-1, OK, I will cancel this patch.

The exception raised from changing type actually only happens to non-partitioned tables.  For partitioned tables, if there is type change in table level, there will be an ObjectInspectorConverter (in parquet's case --- StructConverter) to convert type between partition and table. For non-partitioned tables, the ObjectInspectorConverter is always IdentityConverter, which passes the deserialized object as it is, causing type mismatch between object and ObjectInspector.

For now, we can live with the workaround (insert overwrite table) given that it is only affecting non-partitioned tables and relatively rare.


, @ [~tongjie] ,

bq. The exception raised from changing type actually only happens to non-partitioned tables. For partitioned tables, if there is type change in table level, there will be an ObjectInspectorConverter (in parquet's case â€” StructConverter) to convert type between partition and table. 

I've test changing type with parquet partitioned table in hive 0.13 and found that this issue also existed in partitioned tables.  After changing type, when I query old partition data, it would throw following exception:
{code}
 Cannot inspect java.util.ArrayList
        at org.apache.hadoop.hive.ql.io.parquet.serde.ArrayWritableObjectInspector.getStructFieldData(ArrayWritableObjectInspector.java:139)
        at org.apache.hadoop.hive.serde2.objectinspector.UnionStructObjectInspector.getStructFieldData(UnionStructObjectInspector.java:135)
        at org.apache.hadoop.hive.serde2.SerDeUtils.buildJSONString(SerDeUtils.java:349)
        at org.apache.hadoop.hive.serde2.SerDeUtils.getJSONString(SerDeUtils.java:193)
        at org.apache.hadoop.hive.serde2.SerDeUtils.getJSONString(SerDeUtils.java:179)
        at org.apache.hadoop.hive.ql.exec.MapOperator.process(MapOperator.java:545)
        at org.apache.hadoop.hive.ql.exec.mr.ExecMapper.map(ExecMapper.java:177)
        at org.apache.hadoop.mapred.MapRunner.run(MapRunner.java:54)
        at org.apache.hadoop.mapred.MapTask.runOldMapper(MapTask.java:429)
        at org.apache.hadoop.mapred.MapTask.run(MapTask.java:341)
        at org.apache.hadoop.mapred.YarnChild$2.run(YarnChild.java:162)
        at java.security.AccessController.doPrivileged(Native Method)
        at javax.security.auth.Subject.doAs(Subject.java:415)
        at org.apache.hadoop.security.UserGroupInformation.doAs(UserGroupInformation.java:1491)
        at org.apache.hadoop.mapred.YarnChild.main(YarnChild.java:157)
{code}

, if you backport this jira, it will be OK.
https://issues.apache.org/jira/browse/HIVE-6785, This has been fixed in 0.14 release. Please open new jira if you see any issues.
]