[Problem is:
- Column Pruning is not pruning past the Limit Operator. So the first MR job has the FilterOp whose inputSchema has the all the columns but its outputSchema is the pruned column list.
- But at runtime we assume the Operators on the Reduce side have the same schema as the ExtractOperator, unless you hit a SelectOperator. So in this case the FilterOp and subsequent FileSink output rows with all the columns.
- So you end up in a state: where the 2nd job is expecting a pruned row, but gets rows with all columns.

This is probably because we didn't expect to see queries with OrderBy/Limit in SubQuery blocks. So ColumnPruner is not handling this case correctly. Investigating some more on this point...
, Attached a preliminary patch. If the FIletrOp follows a Order or Limit inject a SelectOp to handle outputting only the columns expected by FiletrOp.

But [~ashutoshc] pointed out that HIVE-4904 is related and may already cover this issue. It seems to address the issue of ReduceSink ignoring the pruned list for this case. Will look into it shortly.]