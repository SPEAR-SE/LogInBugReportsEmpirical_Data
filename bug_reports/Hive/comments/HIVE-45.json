[Please see HIVE-164 for the interface of GenericUDF., Some considerations for this design:

* UDFTemplate authors will have to understand the ObjectInspector stuff. Another way would be to pass java Objects as parameters and function return values, and let the authors use reflection. However that means we cannot pass Objects without a concrete Java class to these template functions.
* I put the restriction that "If the ObjectInspectors of the parameters do not change, then result.oi cannot change as well." because we expect the type of the result of a template function call to remain the same if the parameter types are not changed.
, I plan to add a new package: ql.udf.template for this.
CASE and IF will be implemented as a subclass of this UDFTemplate.

This will also allow functions with dynamic number of parameters.
, This issue is fixed as part of HIVE-164., I just put in a Jira for [https://issues.apache.org/jira/browse/HIVE-471]. I realize this jira adds support for some if not all of the things I was looking to do. 

Without getting over generic I would have liked to support. 

{noformat}
evalautate(String, String,Object[])
{noformat}

As well as 

{noformat}
 evaluate(  evalautate(String, String,Object[]), "getName", "this", "that")
{noformat}

It seems like what you are doing here makes that possible.


]