[I am +1 on the concept.   Many times /tmp can be a ramdisk or mounted with some size restrictions. This type of bug an be very painful to track down when it happens., The general idea of why we put temp files and directories under /tmp is two fold:
 1) it allows easy clean up in case of any unexpected interruptions to the JVM. In the regular exits, these temp files/directories should be removed by JVM by deleteOnExit(), but if the JVM was killed/interrupted unexpected, these temp files could eventually take up all disk spaces and make the whole cluster hard to recover (imagine finding these temp files in thousands of machines). By putting it in /tmp, all these will be automatically removed whenever the machine is restarted, or cleaned up manually by just removing all files in /tmp. That's much easier in terms of Hadoop administration. 
 2) /tmp seems to be a universally writable mounted point on all unix-based systems. So it should be a safe place to put the temporary files. But I agree that it would a good idea to introduce a new Hive parameter to let the user choose a customizable tmp directory, which should address Edward's point. 
 
I think we use File.createTempFile() previously and Yongqiang added another directory structure (parentFile). I think we can use File.createTempFile to create this directory as well (Yongqiang, please correct me if I'm wrong), there there are several questions about the patch:

1) File.createTempFile() will by default create temp files in java.io.tmpdir (/tmp or /var/tmp) according to JDK. I suspect most of the case JVM on Linux will use /tmp as the java.io.tmpdir, so in that caes your change won't achieve your purpose in most cases. 
2) the random number generator is not needed if you can use File.createTempFile to create parentFile, because File.createTempFile guarantees its uniqueness for this JVM. The only case you need to prevent is the collision between different JVMs. This is why there is a check for parentFile.mkdir(). It actually acts like a write lock to the directory so that other JVM won't overwrite it. So parentFile.delete() should not be added because it may delete the directory created by another JVM who is still running.
, 
In my brief experiments, I found that File.createTempFile() used the work/tmp path for the individual task (in Hadoop).  I suspect that the java.io.tmpdir is being set by the TaskTracker.  This has the advantage of letting Hadoop do the temporary file cleanup when the task cleanup happens.  I think it would be great if this was the default behavior, but admins could override that with a hive specific parameter.

I don't have any attachment to the actual implementation.  I can spend more time to produce a different patch if needed, but I suspected someone would want to implement it differently., I guess this is due to https://issues.apache.org/jira/browse/HADOOP-2735 which set java.io.tmpdir to be dependent on mapred.tmp.dir. In that case the change of using createTempFile looks fine with me. Also can you remove the parentFile.delete() in your patch? If we set java.io.tmpdir to work/tmp then we don't have file name conflicts, But if the user choose to use shared /tmp then it may remove files created by other tasks. 

Yongqiang, any further comments?, Agreed with Ning, looks fine to me., 
The reason the parentFile.delete() call is there is because the File.createTempFile method actually creates a file. The code, as it currently is, creates a temporary directory to hold the rowcontainer file and I made the smallest change possible to continue to support this behavior.

Looking at the code, it appears that the createTempFile mechanism is used several lines down to actually create the temporary file (within the new temporary directory). I'm not sure why a temporary directory is created first, but I'll submit a new patch which doesn't try to create a temporary directory at all.
, 
Hmm, on second thought, the parentFile (directory) is referenced in several places.  I'm not familiar enough with Hive to know what these lines do:

          HiveConf.setVar(jobCloneUsingLocalFs,
              HiveConf.ConfVars.HADOOPMAPREDINPUTDIR,
              org.apache.hadoop.util.StringUtils.escapeString(parentFile
              .getAbsolutePath()));

If it weren't for these lines I could remove the parentFile variable all together.

, Michael, the temporary directory is needed for a conditional task to handle skewed joins (that's why the JobConf is cloned but with a different path). The idea here is that whenever there many too many rows for a particular job key to be held in memory, they will be first write to local disk via RowContainer. If there are still too many rows to local disk, they will be write to a DFS location and a contitional task will be triggered to handle this skewed key. So if we create a temp directory in local disk and let all mappers write their temp files in that directory, then later when we want to move the data to HDFS, we just move the whole directory instead of moving individual files.

+1 on v2. Will commit if tests pass. 
, Committed. Thanks Michael!, Hey,

Could a Hive committer assign this issue to Michael in order to keep the JIRA metadata up to date?

Thanks,
Jeff]