[What is the current status/thinking on this issue? Is it something that we should be addressing and are there any thoughts on how it should be prevented/restricted, etc?, [~lmccay] The first approach to authorization was client side. [~sushanth] has also enabled this on the server side (HCatalog/Metastore) through HIVE-3705.

We enable these features on our HCatalog deployments. Even if the user unsets these properties, server side changes still take effect and the user can't drop tables etc. We have tested this for HDFS based authorization. The properties we used on the HCatalog server are:

<property>
  <name>hive.security.metastore.authorization.manager</name>
  <value>org.apache.hadoop.hive.ql.security.authorization.StorageBasedAuthorizationProvider</value>
</property>

<property>
  <name>hive.security.metastore.authenticator.manager</name>
  <value>org.apache.hadoop.hive.ql.security.HadoopDefaultMetastoreAuthenticator</value>
</property>

<property>
  <name>hive.metastore.pre.event.listeners</name>
  <value>org.apache.hadoop.hive.ql.security.authorization.AuthorizationPreEventListener</value>
</property>, Okay, so this is already resolved - correct?


On Wed, Aug 21, 2013 at 7:07 PM, Thiruvel Thirumoolan (JIRA) <

, Good spot, Larry. That's one more thing to address about client-side authorization, and much more basic than the issue of any user being able to grant themselves permissions for anything. :D

[~ashutoshc] mentions that we have a notion of restrict-lists for HiveServer2, wherein it rejects attempts wherein users try set commands on restricted config parameters, and it might be a good idea to extend that notion to the hive client as well.

It still leaves open the case where the end user is able to edit their hive-site.xml to simply set the parameter there, rather than in-script or in-commandline, but that is protectable by admin policies for deployments, and might be a reasonable compromise.

That said, all of these still leave open the notion of being able edit/compile hive sources leaving out these protections on the client side, and thus, your metadata is not truly secure (data can be made secure by hdfs perms) unless you're using metastore-side authorization., [~lmccay] : I wouldn't say "resolved", per se - the issue you bring is a valid one, but one that does not fit the original hive security design (designed to prevent people from accidentally doing something dangerous, as opposed to being designed to prevent malicious users). For the security-conscious, there is currently a work-around(metastore-side security) for the intermediate case where stronger security is needed.

I think this is an important data point though, for us to consider when trying to nail down hive security, and there is some intermediate work possible for this in the short run as well(the above restricted conf idea), I was looking at the restrictList earlier for this. I'll look into it further. Thanks for the insight!, It appears that System properties can override conf vars too. I assume that we should leverage the restrictList there as well.]