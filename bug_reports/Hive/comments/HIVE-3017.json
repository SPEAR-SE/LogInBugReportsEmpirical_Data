[I agree having same classes in two different jars is confusing. I don't think it was intentional in HIVE-2646 work to change the content of jar files. I think we should revert to original contents and thus remove any classes which got added in exec jar which were not there earlier., I just checked the contents of [hive-exec-0.8.0.jar|http://search.maven.org/remotecontent?filepath=org/apache/hive/hive-exec/0.8.0/hive-exec-0.8.0.jar] which is the earliest version available in Maven. HIVE-2646 has fix version 0.9.1.

Looking in the 0.8.0 jar we do see the serde2 classes listed above. So it seems they've been bundled into hive-exec for some time.

While providing the same classes in two jars is janky, I don't think this behavior has changed in a while. With that in mind, think we should close this? At least you can depend on {{hive-serde2}} directly if you want (unlike ql which are only in the exec jar)., Something this bad should be fixed. It's particularly vexing when trying to develop against Hive and needing to update two jars for one class.  Fat-jarring (which this esesentially is) is evil. If the intention is to provide a convenient package for deployment, can't that be done in maven by declaring a meta project with the other jars?, I figured that hive-exec also contains all the classes from hive-shims-0.10.0-SNAPSHOT.jar, hive-common-0.10.0-SNAPSHOT.jar etc.
I haven't checked what else it duplicates. Having the same class present in two jars lead to confusion and is more error prone. In case we have both the jars in classpath and they don't contain the same version of a class, wouldn't know which class got used.

(Edited the title), The core issue is that hive needs things to work. Example hive might use CommonUtil.String.isEmpty() from 2.5. Well some user code might require CommonUtil.String.isEmpty() from 2.6. The only full proof solution is that hive will have to shade (or rename every class or) everything it uses so it will not possibly conflict with anything in the world. 

For example, I use hive+cassandra both have different versions of thrift at the moment, both have different versions of antlr as well. The only answer is upgrade one projects so the libs match or make a fat jar and rename all the conflicts.


These options have come up and been discussed before. , From my perspective I don't see an issue with {{hive-exec.jar}} being a fat jar, since it really simplifies running Hive queries. With all dependencies repackaged as a fat jar there's nothing else to "add jar" or put on your classpath.

It is challenging to build tools on top of Hive though because of the fat jar classpath surprises. The area I think could be improved is publishing jars of each subproject independently, as well as hive-exec. For example, I think users would get a lot of value from publishing {{hive-ql.jar}} for use by other project that integrate with Hive.

Hive queries would continue to work as they do today, and people building tools on top of Hive could also control their classpath. Thoughts?, It is more then just a fat jar issue. If you are living in the same class loader you can only load a class once. So if hive-ql uses common-util-X.Y.Z and some other piece of code uses commun-util-X.Y.G and there is a breaking change in common-util you can not satisfy that. 

Now as to the fat jar issue. You have a choice fat jar or use hadoops -distjar. Either produces the same result all the jars are on the classpath. 

I am not saying there is no way out of this problem, but it is like this purposely. Other solutions have been proposed but there is no follow through. Some other tickets talk about this but I do not have the number off hand., I suggest to have hive-ql jar which has related to hive-ql and hive-exec could have ql and shade jars(jackson,thrift..etc)

In one of our app, we have latest jackson which has conflicts to hive-exec jar (shade jackson classes) , our app doesn't work if we include hive-exec, also we cannot remove from dependency as it is shaded jar. we have remove the jackson class from the jar and manually pack it make them available to the app, so that app is working as expected

]