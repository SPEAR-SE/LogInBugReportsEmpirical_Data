[We've run into the same issue as well.  Stack trace (below) is against the Hive 1.0.0 release.  

Looks like it was introduced here:
https://github.com/apache/hive/commit/d466a4a266cad48a875cb78fc706c03878bfbfa3#diff-96eaae2c03bb93befeba9bf598597704L181

Apparently the assumption of when partitions may be null was incorrect.  From the stack trace, the Driver is explicitly passing in null on this SELECT query:
https://github.com/apache/hive/blob/release-1.0.0/ql/src/java/org/apache/hadoop/hive/ql/Driver.java#L638

I don't know the ramifications, but I just reverted the diff to perform the original check on the table and fixes this particular issue at least.

{code}
hive> select * from hive_table limit 5;
FAILED: HiveException java.security.AccessControlException: action WRITE not permitted on path hdfs://cluster/hive_table for user <user>
15/02/16 09:37:06 ERROR ql.Driver: FAILED: HiveException java.security.AccessControlException: action WRITE not permitted on path hdfs://cluster/hive_table for user <user>
org.apache.hadoop.hive.ql.metadata.HiveException: java.security.AccessControlException: action WRITE not permitted on path hdfs://cluster/hive_table for user <user>
	at org.apache.hadoop.hive.ql.security.authorization.StorageBasedAuthorizationProvider.checkPermissions(StorageBasedAuthorizationProvider.java:393)
	at org.apache.hadoop.hive.ql.security.authorization.StorageBasedAuthorizationProvider.checkPermissions(StorageBasedAuthorizationProvider.java:357)
	at org.apache.hadoop.hive.ql.security.authorization.StorageBasedAuthorizationProvider.authorize(StorageBasedAuthorizationProvider.java:331)
	at org.apache.hadoop.hive.ql.security.authorization.StorageBasedAuthorizationProvider.authorize(StorageBasedAuthorizationProvider.java:180)
	at org.apache.hadoop.hive.ql.security.authorization.StorageBasedAuthorizationProvider.authorize(StorageBasedAuthorizationProvider.java:231)
	at org.apache.hadoop.hive.ql.security.authorization.StorageBasedAuthorizationProvider.authorize(StorageBasedAuthorizationProvider.java:253)
	at org.apache.hadoop.hive.ql.Driver.doAuthorization(Driver.java:638)
	at org.apache.hadoop.hive.ql.Driver.compile(Driver.java:455)
	at org.apache.hadoop.hive.ql.Driver.compile(Driver.java:303)
	at org.apache.hadoop.hive.ql.Driver.compileInternal(Driver.java:1067)
	at org.apache.hadoop.hive.ql.Driver.runInternal(Driver.java:1129)
	at org.apache.hadoop.hive.ql.Driver.run(Driver.java:1004)
	at org.apache.hadoop.hive.ql.Driver.run(Driver.java:994)
	at org.apache.hadoop.hive.cli.CliDriver.processLocalCmd(CliDriver.java:201)
	at org.apache.hadoop.hive.cli.CliDriver.processCmd(CliDriver.java:153)
	at org.apache.hadoop.hive.cli.CliDriver.processLine(CliDriver.java:364)
	at org.apache.hadoop.hive.cli.CliDriver.executeDriver(CliDriver.java:712)
	at org.apache.hadoop.hive.cli.CliDriver.run(CliDriver.java:631)
	at org.apache.hadoop.hive.cli.CliDriver.main(CliDriver.java:570)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.apache.hadoop.util.RunJar.main(RunJar.java:212)
Caused by: java.security.AccessControlException: action WRITE not permitted on path hdfs://cluster/hive_table for user <user>
	at org.apache.hadoop.fs.DefaultFileAccess.checkFileAccess(DefaultFileAccess.java:88)
	at org.apache.hadoop.fs.DefaultFileAccess.checkFileAccess(DefaultFileAccess.java:55)
	at org.apache.hadoop.hive.shims.Hadoop23Shims.checkFileAccess(Hadoop23Shims.java:790)
	at org.apache.hadoop.hive.common.FileUtils.checkFileAccessWithImpersonation(FileUtils.java:381)
	at org.apache.hadoop.hive.ql.security.authorization.StorageBasedAuthorizationProvider.checkPermissions(StorageBasedAuthorizationProvider.java:384)
	... 23 more
{code}, [~Alexandre LINTE]
Do you also have following set ? (either via hive-site.xml or hiveserver2-site.xml )
{code}
<property>
   <name>hive.security.authorization.enabled</name>
   <value>true</value>
</property>

<property>
   <name>hive.security.authorization.manager</name>
   <value>org.apache.hadoop.hive.ql.security.authorization.StorageBasedAuthorizationProvider</value>
</property>
{code}

Looks like this happens only when StorageBasedAuthorization is enabled at compile time.
The recommended place for enabling StorageBasedAuthorization is in hive metastore.  [see SBA metastore instructions|https://cwiki.apache.org/confluence/display/Hive/Storage+Based+Authorization+in+the+Metastore+Server]
Setting this for compile time is redundant and not something I would recommend.
I would recommend compile time authorization being enabled only if you want to  use fine grained authorization such as SQL Standards based authorization or Apache Ranger.
, Thejas M Nair, yes I have the same configuration.
But I don't activate anything at compile time to enforce StorageBasedAuthorization (maybe I  misunderstood what you call "compile time").

Regards,, [~Alexandre LINTE] I would recommend setting hive.security.authorization.enabled=false and enabling SBA in metastore [see instructions|https://cwiki.apache.org/confluence/display/Hive/Storage+Based+Authorization+in+the+Metastore+Server] .
Enabling it in metastore is more secure.  When hive.security.authorization.enabled=true and hive.security.authorization.manager=org.apache.hadoop.hive.ql.security.authorization.StorageBasedAuthorizationProvider, you are having an additional SBA check during query compile time as well. That is redundant, and hits the bug mentioned in this jira.
]