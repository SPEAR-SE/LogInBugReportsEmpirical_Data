[This fixes all sorts of casts from decimal.
Seems like vectorized casts are still broken for smaller types, presumably because LongCV is converted to smaller types in a different place, and the decimal is only cast to long., [~mmccline] can you comment on the vectorized parts?
cc [~jdere] [~hagleitn], Checkout CastDecimalToLong.  It even as a "lossy" TODO

AnyIntegerFromDecimalTreeReader in ConvertTreeReader has a lossy comment, too, but actually the downCastAnyInteger some of the right thing and makes it a null if the long doesn't fit.  However, if the longValue function of HiveDecimal returns a truncated long value, then we do the wrong thing., The patch actually fixes that.
But after that, the values that are between max_int and max_long for int, for example, still get converted to bogus values somewhere else; I assume that is not in treereader
, line 387 in the patch should say intValueExact, So this is taking care of decimal conversion to other numeric types, what's the behavior for other numeric type conversion, does that have to be looked at too?, They would not be affected by the same issue... the issue here is the usage of longValue()/etc methods on BigDecimal, that return truncated values by design, unlike e.g. longValueExact().
There may be problems with downcasting ints, in fact judging by the vectorized results in the out files there are problems at least on that path.
, 

Here are the results of testing the latest attachment:
https://issues.apache.org/jira/secure/attachment/12831185/HIVE-14863.patch

{color:green}SUCCESS:{color} +1 due to 1 test(s) being added or modified.

{color:red}ERROR:{color} -1 due to 11 failed/errored test(s), 10653 tests executed
*Failed tests:*
{noformat}
org.apache.hadoop.hive.cli.TestCliDriver.testCliDriver[acid_mapjoin]
org.apache.hadoop.hive.cli.TestCliDriver.testCliDriver[ctas]
org.apache.hadoop.hive.cli.TestCliDriver.testCliDriver[decimal_11]
org.apache.hadoop.hive.cli.TestCliDriver.testCliDriver[decimal_2]
org.apache.hadoop.hive.cli.TestCliDriver.testCliDriver[vector_join_part_col_char]
org.apache.hadoop.hive.cli.TestMiniLlapCliDriver.testCliDriver[schema_evol_text_nonvec_part_all_primitive]
org.apache.hadoop.hive.cli.TestMiniLlapCliDriver.testCliDriver[schema_evol_text_vec_part_all_primitive]
org.apache.hadoop.hive.cli.TestMiniLlapCliDriver.testCliDriver[schema_evol_text_vecrow_part_all_primitive]
org.apache.hadoop.hive.cli.TestMiniTezCliDriver.testCliDriver[explainuser_3]
org.apache.hadoop.hive.metastore.TestMetaStoreMetrics.testMetaDataCounts
org.apache.hive.jdbc.TestJdbcWithMiniHS2.testAddJarConstructorUnCaching
{noformat}

Test results: https://builds.apache.org/job/PreCommit-HIVE-Build/1367/testReport
Console output: https://builds.apache.org/job/PreCommit-HIVE-Build/1367/console
Test logs: http://ec2-204-236-174-241.us-west-1.compute.amazonaws.com/logs/PreCommit-HIVE-Build-1367/

Messages:
{noformat}
Executing org.apache.hive.ptest.execution.TestCheckPhase
Executing org.apache.hive.ptest.execution.PrepPhase
Executing org.apache.hive.ptest.execution.ExecutionPhase
Executing org.apache.hive.ptest.execution.ReportingPhase
Tests exited with: TestsFailedException: 11 tests failed
{noformat}

This message is automatically generated.

ATTACHMENT ID: 12831185 - PreCommit-HIVE-Build, Updated the tests, [~jdere] [~mmccline] ping?, Results look different between vectorized/non-vectorized in decimal_11.q, That's because vectorized has a separate bug somewhere else, I'll file a follow-up jira, Filed HIVE-14893, I am ok on the non-vectorized changes, but would like to know what is going on with  HIVE-14893 to make sure we get consistent vectorized/non-vectorized behavior., Well, the reason for a separate jira is to fix it separately. It seems like an issue that could affect other expressions, so the fix would probably be unrelated., Consider moving the vectorization conversions methods out of HiveDecimal so it isn't attached to the ColumnVector types.

Have you verified the concern "can we fail SARG?".  Does it pass the failed row up?

In PrimitiveObjectInspectorUtils.java:

{code}
try {
       result = hd.intValue();
} catch (ArithmeticException ex) {
       throw new NumberFormatException("Can't convert " + hd + " to int");
 }
{code}

doesn't intValue need to be intValueExact?
Are we sure we want to be throwing exceptions for int and long conversion issues here?

Not sure where you and Jason are on the Q file test., Yes, the vectorized cast logic currently does not check for truncation/corruption.  I don't think there was a JIRA -- so Sergey's new HIVE-14893 may cover this.

What are all the schema_evol_text_nonvec_part_all_primitive.q.out changes?

, [~mmccline] they fix some existing corrupted values, as far as I can tell., [~mmccline] [~jdere] ping? , [~mmccline] ping? [~jdere] said he feels it's blocked on your feedback iirc]