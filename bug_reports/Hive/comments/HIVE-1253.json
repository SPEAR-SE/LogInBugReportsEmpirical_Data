[To get to the bottom of this, the formatter (SimpleDateFormat) interprets the time string as local time zone, when it sets the calendar, it is PDT time zone (7 hours difference from UTC), and when it substracts 7 days and convert back to formatter string, it converts UTC to PST (still the local time zone, but different time zone now, and 8 hours difference from UTC).

For the purpose of this function, since it is doing simple date_sub function, there is no need to consider time zone at all, and all time zone should give the same result for this kind of computation. For this reason, using default time zone would be fine, and we have to use default time zone because formatter is using it., date_sub and date_add used both a Calendar and a SimpleDateFormat object; however, the UTC timezone was only set for the Calendar object.  This causes the computation to sometimes be incorrect when the date ranges cross daylight savings time changes.

The patch removes specifying the UTC timezone for the Calendar object so that both Calendar and the SimpleDateFormat will use the default timezone.  This should allow the date math to be consistent with other potential date math functions as long as they all use the default timezone.

If the user wishes to use a specific timezone that is not the system default, it can be set using the normal java ways (e.g. setting user.timezone, etc.).
, Patch includes new JUnit tests for UDFDateSub, UDFDateAdd and UDFDateDiff to test correctness over daylight savings time changes., +1. Will test and commit., Committed. Thanks Bryan!]