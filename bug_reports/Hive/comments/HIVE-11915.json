[The patch. The optional WIP patch contains strong black magic that we can try if the weak one fails., [~hsubramaniyan] [~sushanth] can you take a look at the smaller patch?, [~sershe] +1 for the smaller patch which I believe should not cause performance degradation in any case.

Thanks
Hari, [~taksaito] Can you please include the details of the exception in this jira ?

[~sershe]
Looking at the bonecp code, it does not look like config.setMaxConnectionAgeInSeconds(0) will have an impact in our case. The default is 0 and that wasn't being modified.
Looks like markPossiblyBroken is called on exception anyway. Should we just catch SQLException and retry instead of using reflection ?
, There's no SQLException, there's simply a closed connection being returned. The exception happens later when Hive code tries to use it., I am not entirely sure but the following is what I understood from a quick glance. 

It looks like what Sergey is trying to do in the bigger patch is to workaround the BoneCP dangling connection bug at the Hive side. i.e. flag the connection as broken in getDbConn() if it detects is an already closed connection. This way the retry mechanism kicks in(based on getConnAttemptCount) and will hopefully get a free connection in the next iteration. Without this invocation to dbConn.markPossiblyBroken(), the already broken connection may not be destroyed and BoneCP might wrongly still return the existing broken connection when connPool.getConnection() is called the second time. [~sershe], does my understanding make any sense.

Thanks
Hari, 

{color:red}Overall{color}: -1 at least one tests failed

Here are the results of testing the latest attachment:
https://issues.apache.org/jira/secure/attachment/12761553/HIVE-11915.patch

{color:red}ERROR:{color} -1 due to 2 failed/errored test(s), 9562 tests executed
*Failed tests:*
{noformat}
TestEncryptedHDFSCliDriver - did not produce a TEST-*.xml file
org.apache.hive.hcatalog.api.TestHCatClient.testTableSchemaPropagation
{noformat}

Test results: http://ec2-174-129-184-35.compute-1.amazonaws.com/jenkins/job/PreCommit-HIVE-TRUNK-Build/5376/testReport
Console output: http://ec2-174-129-184-35.compute-1.amazonaws.com/jenkins/job/PreCommit-HIVE-TRUNK-Build/5376/console
Test logs: http://ec2-174-129-184-35.compute-1.amazonaws.com/logs/PreCommit-HIVE-TRUNK-Build-5376/

Messages:
{noformat}
Executing org.apache.hive.ptest.execution.PrepPhase
Executing org.apache.hive.ptest.execution.ExecutionPhase
Executing org.apache.hive.ptest.execution.ReportingPhase
Tests exited with: TestsFailedException: 2 tests failed
{noformat}

This message is automatically generated.

ATTACHMENT ID: 12761553 - PreCommit-HIVE-TRUNK-Build, bq. There's no SQLException, there's simply a closed connection being returned. The exception happens later when Hive code tries to use it.

Thats the SQL exception I was referring to. In bonecp code, whenever the connection class throws an exception (in setAutoCommit for example), it calls markPossiblyBroken ,
ie, something like the following generic code should work - 
{code}
  protected Connection getDbConn(int isolationLevel) throws SQLException {
  while(true) {
   try {
    Connection dbConn = connPool.getConnection();
    dbConn.setAutoCommit(false);
    dbConn.setTransactionIsolation(isolationLevel);
    return dbConn;
    } catch (SQLException e){
      if(max num of retries is not exceeded ) {
       log.warn(e);
      }
      else {
       throw e;
      }
    }
  }
{code}, That makes sense; however there's no plan to commit WIP patch right now. As for the main patch, I am setting the 0 setting according to random reports of that fixing the issue for some people :) As per jira description. It definitely wouldn't hurt., [~thejas] ping?, Patch, Review comments -
 - please remove the 2 imports that are no longer relevant to the change
 - Change -  LOG.error("BONECP returned a closed connection " + e.getMessage());  to -  LOG.warn("Error setting up new connection, getting another connection from pool", e);
 (the pool used might not be boncep; error might not be due to closed connection; should be warn not error; and should indicate it is being retried; full exception stack trace can be very useful).
-  getConnAttemptCount = 10;  Should we keep that generic and have it set to 10 in all cases and not bonecp specific ? It shouldn't hurt., 

{color:red}Overall{color}: -1 at least one tests failed

Here are the results of testing the latest attachment:
https://issues.apache.org/jira/secure/attachment/12762283/HIVE-11915.01.patch

{color:red}ERROR:{color} -1 due to 3 failed/errored test(s), 9620 tests executed
*Failed tests:*
{noformat}
org.apache.hadoop.hive.cli.TestCliDriver.testCliDriver_vector_groupby_reduce
org.apache.hadoop.hive.cli.TestMiniTezCliDriver.testCliDriver_vector_groupby_reduce
org.apache.hive.hcatalog.api.TestHCatClient.testTableSchemaPropagation
{noformat}

Test results: http://ec2-174-129-184-35.compute-1.amazonaws.com/jenkins/job/PreCommit-HIVE-TRUNK-Build/5431/testReport
Console output: http://ec2-174-129-184-35.compute-1.amazonaws.com/jenkins/job/PreCommit-HIVE-TRUNK-Build/5431/console
Test logs: http://ec2-174-129-184-35.compute-1.amazonaws.com/logs/PreCommit-HIVE-TRUNK-Build-5431/

Messages:
{noformat}
Executing org.apache.hive.ptest.execution.PrepPhase
Executing org.apache.hive.ptest.execution.ExecutionPhase
Executing org.apache.hive.ptest.execution.ReportingPhase
Tests exited with: TestsFailedException: 3 tests failed
{noformat}

This message is automatically generated.

ATTACHMENT ID: 12762283 - PreCommit-HIVE-TRUNK-Build, wrt log - it's only set for BoneCP.
wrt retries for other pools - I don't think it's a good idea... The exception can easily be non-recoverable, and this will introduce a delay. We should deal with these on case by case basis., The retries are being set only for bonecp, but basing the log message on that seems very brittle. Other developers might add retries for other connection pooling types by setting getConnAttemptCount, and easily overlook updating the log message.

Even in case of bonecp exceptions, in some cases the error can be non-recoverable. This is a fatal error and should be rare. The delay due to retries likely to be very small (not easily noticeable to the user). I think that delay would be acceptable for the circumstance.
This looks like a tradeoff between more easy to maintain code and a delay that users are unlikely to notice.
, Updated the patch; fixed the log, moved the retry logic closer to the code.
I disagree about extra retries just-in-case - that's what retrying object store and ms client do, and 90% of the cases when I see these (and 100% for the former) is when it blindly retries for some non-recoverable exceptions.
DBCP has been around for a while and doesn't merit doing things just in case, esp. if there's no way to tell what is recoverable... at least with BONECP we know what we are trying to fix., Thanks for the update. Can you also update the log message to also indicate that there is going to be a retry ? Otherwise, users might not realize that the issue was not fatal. Also, please update it to include the full exception stack trace. That can be very useful for debugging.
, Updated., +1, Committed to master and branch-1, Could we update the "affected version" please?, Hmm.. not exactly sure what we put there. All versions are probably affected, but it's a relatively rare bug. It was reported online since 2013 for users of BoneCP. I'll just put the latest released version.]