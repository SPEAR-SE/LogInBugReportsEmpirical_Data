[Yes. There is a bug in HiveFileFormatUtils.getPartitionDescFromPathRecursively

{noformat}
    if (part == null
        && (dir.toUri().getScheme() == null || dir.toUri().getScheme().trim()
            .equals(""))) {
{noformat}

We need to remove 
{noformat}
&& (dir.toUri().getScheme() == null || dir.toUri().getScheme().trim()
            .equals(""))
{noformat}

Sammy, can you help post a fix? You can add a testcase in TestHiveFileFormatUtils., You will have to forgive my ignorance since this is my first time looking at Hive source code.

I can validate that removing the additional check on the scheme works, however the original test case in TestHiveFileFormatUtils fails now.    The third assertion in first group fails for testGetPartitionDescFromPathRecursively.

I suspect that the root of the issue is that there is an additional :8020 part in the key of the pathToPartitionInfo table.  With the changes populateNewPartitionDesc would remove everything but the path so that it works.  I am wondering if the best approach is to make doGetPartitionDescFromPath aware of scheme.  I've attached a hack for this approach with the additional test case.  Please note it doesn't know anything about default ports for a given scheme.
, 1.
just remove 
{noformat}
&& (dir.toUri().getScheme() == null || dir.toUri().getScheme().trim()
            .equals(""))
{noformat}

will make things work.

2. you need to use svn (not git) to generate the patch., Yongqiang, thanks for taking a look at this.

If I take out the URI scheme checks, the original TestHiveFileFormatUtils.testGetPartitionDescFromPathRecursively test case fails:

    [junit] Running org.apache.hadoop.hive.ql.io.TestHiveFileFormatUtils
    [junit] junit.framework.TestListener: tests to run: 2
    [junit] junit.framework.TestListener: startTest(testGetPartitionDescFromPathRecursively)
    [junit] junit.framework.TestListener: addFailure(testGetPartitionDescFromPathRecursively, hdfs:///tbl/par1/part2/part3 should return null expected:<true> but was:<false>)
    [junit] junit.framework.TestListener: endTest(testGetPartitionDescFromPathRecursively)
    [junit] junit.framework.TestListener: startTest(testGetPartitionDescFromPathWithPort)
    [junit] junit.framework.TestListener: endTest(testGetPartitionDescFromPathWithPort)
    [junit] Tests run: 2, Failures: 1, Errors: 0, Time elapsed: 0.091 sec
    [junit] Test org.apache.hadoop.hive.ql.io.TestHiveFileFormatUtils FAILED

hdfs:///tbl/par1/part2/part3 should not match any PartitionDesc since the path in the map is file:///tbl/par1/part2/part3.  I will attach the svn version of the patch shortly.



, Sammy, the only change in TestHiveFileFormatUtils is to remove URI scheme checks (1 line change). 
You actually added some lines of code which were removed by HIVE-1510, and this is the reason the testcase fails. , Sammy, we can not fix this issue by just removing the schema check. 
If the input URI's path part is the same with one partition's path, but their schema is different, we should still return NULL.

For your case, the main problem is the port, which is contained in the partitionDesc but not in the input path.

Is it possible if we just ignore the port? I mean is there a case that two different instances share the same address but use different port?, He,  yes that's what the original 0002 patch does (it adds an additional check to ignore the port as well as test case for it).   I'm not sure why there's a disparity in the port being there in the first place.  I'll regenerate 0002 patch for svn against trunk@993445.  Thanks!
, Sammy, there are mainly 2 problems. 
1) going over the map is not efficient, and 2) using startWith to do prefix match is a bug fixed in HIVE-1510.

Sammy, can you change the logic as follows:

right now, hive generates another pathToPartitionInfo map by removing the path's schema information, and put it in a cacheMap. 
We can keep the same logic but change the new pathToPartitionInfo map's value to be an array of PartitionDesc. 
And then we can just remove the schema check, and once we get a match, we go through the array of PartitionDesc to find the best one.

this can also solve another problem. If there are 2 partitionDesc which's path part is same but the schema is different, only one is contained in the new pathToPartitionInfo map. 

About how to go through the array of PartitionDesc to find the best one:
if the array contains only 1 element, return array.get(0);
1) if the original input does not have any schema information:  if the array contains more then 1 element, report error.
2) if the original input contains schema information: 1) if the array contains an element which's the exact match (also contains schema and port, and the same with input), return the exact match. 2) ignore port part but keep the schema and address, and go through the array. 

what do you think?]