[After digging, AuthorizationException is thrown inside HdfsAuthorizationProvider.checkPermissions(final FileSystem fs...) because permissions to operate on DB path are not met. FileStatus.getOwner gives out name of group, not user name expected for permission check going through. e.g. Administrators, not xzhou. 

FileStatus.getGroup also returns group like machine-name\None, which does not match group the user running program belongs to, operation on the path not permitted.

, This is a bug from HDFS, I guess. 
It was reported that permissions check would go through if a dedicated user detached from administrators group is used to login windows and run the unit tests. I will try that and get back., Hi, [~xiaobingo].  Yes, this is something particular to Windows.  If you're logged in as a user in the administrators group, then files you create on the local file system will be owned by the administrators group, not your individual user.  Here is an example running winutils ls on a file I created while logged in as a member of the administrators group:

{code}
C:\test>C:\hdc\hadoop-common-project\hadoop-common\target\bin\winutils.exe ls C:\test\hello
-rwx------ 1 BUILTIN\Administrators CNAUROTH-VM-1\None 8 Jan 14 2014 C:\test\hello
{code}

Here is the same thing run on a different VM, where my user is not a member of the administrators group:

{code}
C:\test>C:\hdc\hadoop-common-project\hadoop-common\target\bin\winutils.exe ls C:\test\hello
-rwx------ 1 WIN-NCDLEQLC13J\cnauroth WIN-NCDLEQLC13J\None 8 Jun 26 2014 C:\test\hello
{code}

There isn't really any way to change code to work around this.  The only workaround is to run unit tests as a user who is not a member of the administrators group.

Note that when you set up a non-admin user for yourself, you'll need to make sure that user has Create Symbolic Links permission.  The code in Hadoop core relies on creating symlinks for a couple of important things, notably {{MiniYARNCluster}}.  Admins get this permission automatically, but regular users don't.  This page describes how to grant the permission to a regular user:

http://superuser.com/questions/104845/permission-to-make-symbolic-links-in-windows-7

Hope this helps.
, Thanks [~cnauroth]. 

Since this is Windows specific, we can use this code snippet for work-around.

 if (user.equals(stat.getOwner())) {
        if (dirPerms.getUserAction().implies(action)) {
          continue;
        }
      }

if (ArrayUtils.contains(groups, stat.getGroup())) {
        if (dirPerms.getGroupAction().implies(action)) {
          continue;
        }
      }

 if (dirPerms.getOtherAction().implies(action)) {
        continue;
      }

//windows specific add-on
if (Shell.WINDOWS) {
        if (ArrayUtils.contains(groups, stat.getOwner())) { //stat.getOwner returns administrators 
          if (dirPerms.getUserAction().implies(action)) {
            continue;
          }
        }
      }


This passes all failed test cases affected, even if login user is a member of admin group.

   , Hi, [~xiaobingo].  Overall, I recommend running tests as a non-admin user.  If you really prefer to put a workaround in the code, then I recommend limiting the scope of the special case.  This code won't be capable of telling the difference between a user named "foo" and a group named "foo".  It's common for files to have greater permissions for the owner vs. the group, so if an attacker named "bar" somehow manages to sneak "foo" into his group memberships, then it could cause elevation of privileges.  (This is probably unlikely, but I wanted to point it out.)

A couple of suggestions:
# Only trigger the special case if running on Windows and the {{FileSystem}} represents a local file system.  This Administrators special case does not apply to other file systems (HDFS or S3 for example).
# Only allow it for Administrators, not any group.  This behavior of setting ownership of new files to Administrators is a special case for members of the Administrators group only.

BTW, there is also a Windows policy setting that can be changed so that it won't automatically set ownership of new files to Administrators.  This might be another option if you prefer to keep running tests as an admin., Thanks [~cnauroth] for pointing-out.
Not setting ownership of new files to Administrators is preferable, this is loose constraint as compared.]