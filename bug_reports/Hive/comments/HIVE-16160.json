[Looking at the heap dump that Kavan provided me for this, it appears we have a large number of leftover objects in a DN WeakValueMap from ClassLoaderResolverImpl, and is an issue similar to HIVE-11499.

The underlying issue is not that there is necessarily a leak as much as that the ClassLoaderResolverImpl winds up having a WeakValueMap<String,Class>, where all the values are stored as WeakReferences with a ReferenceQueue tracking expiry. Thus, at load time, after it's done loading all the classes, the key list alone is enough for us to wind up going to about 200megs, even if all the values are GCed, because the keys are not removed till after a reap() is called on the WeakValueMap, which does not wind up getting called because we don't use that map after a while. More to the point, the map that is large is the "unloadedClasses" map of the ClassLoaderResolverImpl.

I'll upload more details (screenshots of the memory analysis at least, since the dump itself is huge), and a resolution soon., Attaching screenshot of a heapdump illustrating the WeakValueMap(unloadedClasses) growth after about a day of running., Patch attached., +1 pending test., Note : Tests completed for this - unsure why Hive QA did not autoreply to jira : https://builds.apache.org/job/PreCommit-HIVE-Build/4160/

It looks like there was 1 failure, but that was unrelated, from TestSparkCliDriver., Looks like something is up with the Hive QA automation bot that it didn't comment after the tests ran. But, based on the results, I'm going to go ahead and commit., Committed to master. Thanks, [~daijy]]