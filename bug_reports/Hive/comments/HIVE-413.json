[GenMRRedSink1.process calls GenMapRedUtils.initPlan calls GenMapRedUtils.setTaskPlan calls GenMapRedUtils.setKeyAndValueDesc.
GenMRRedSink1.process calls GenMapRedUtils.splitPlan calls GenMapRedUtils.splitTasks calls GenMapRedUtils.setKeyAndValueDesc.

In setKeyAndValueDesc (shown below, from GenMapRedUtils.java:236) we are walking down the operator tree to get all reachable reduceSinkOperators, even reduceSinkOperators of another MapRedTask (since the Operator Graph is not split yet).

Instead of doing GenMapRedUtils.setKeyAndValueDesc inline in GenMapRedUtils.setTaskPlan and GenMapRedUtils.splitTasks, we should first break up all MapRedTasks, then for each task, for all topOps, call GenMapRedUtils.setKeyAndValueDesc.

{code}
  public static void setKeyAndValueDesc(mapredWork plan, Operator<? extends Serializable> topOp) {
    if (topOp instanceof ReduceSinkOperator) {
      ReduceSinkOperator rs = (ReduceSinkOperator)topOp;
      plan.setKeyDesc(rs.getConf().getKeySerializeInfo());
      int tag = Math.max(0, rs.getConf().getTag());
      List<tableDesc> tagToSchema = plan.getTagToValueDesc();
      while (tag + 1 > tagToSchema.size()) {
        tagToSchema.add(null);
      }
      tagToSchema.set(tag, rs.getConf().getValueSerializeInfo());
    } else {
      List<Operator<? extends Serializable>> children = topOp.getChildOperators(); 
      if (children != null) {
        for(Operator<? extends Serializable> op: children) {
          setKeyAndValueDesc(plan, op);
        }
      }
    }
  }
{code}, The above approach will not work, as in case of sub-queries there are no topOps to start with.
A simpler solution is to pass the reduce sink operator and use that to perform setKeyAndValueDesc(), Committed. Thanks Namit!]