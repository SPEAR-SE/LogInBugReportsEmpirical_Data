[I have noted this on HIVE-13380, pasting it here again on course of action I am suggesting:

bq. I think correct course of action here is to treat literal constants as big decimal instead of current choice of double. That will get us consistent behavior. I checked on MySQL and its doing the same thing. , Heh, I am about to do that as part of some other bugfix, I'll use this JIRA to add a test., Sorry for chiming in late, but I'm wonder what's focal debate here?

As [~jdere] pointed out, Hive has a specific decimal syntax, and a numeric such as 0.06 is treated as double. I don't see anything wrong with that. Making 0.06 literal as decimal is another concern for b/c.

Regarding operation ordering, I think we all agree that nonexact type operating with exact type produces nonexact time. This should apply to comparison as well. However, b/c is a valid concern and should be called out as pointed out in HIVE-13380., Well, per ANSI literals like 0.06 should be treated as decimal. Treating them double in filters also causes surprising query results.
In fact, HIVE-13945 changed the treatment on master. I think the idea of this JIRA was now to add a test. We also need to check that all the active branches either have both or neither of these patches, for consistency., Thanks for the clarification. Regarding ANSI, we don't claim that Hive is ANSI compliant. Hive is already treating 0.06 as double always, and I'd say b/c is more important than a motivation to make it ANSI-compliant. Again, Hive uses 0.06BD as decimal literal., Well, HIVE-13945 has the motivation to change it... :) And there are other similar issues (that's why we reverted HIVE-13380 from 2.1 before 2.1 release - it broke some TPCDS/H queries due to double arithmetic).
Also I thought Hive does strive to be ANSI compliant? :)
Wrt special form, that is preserved, I also added 0.06D for double., RE. Also I thought Hive does strive to be ANSI compliant

Yeah, but there are limits on what we can do, especially when b/c is a concern., [~sershe] and [~xuefuz], will this go into 2.2.0? Thanks, We reverted it from 2.1, because it breaks TPCDS/H and also ANSI compliance. Some reexamination is necessary, either it should be reverted or fixed. By now I don't remember if there's reason to not revert it, except for b/c (of note is that it was not released in 2.1 so I am not sure what the concern with that was)., Let's move that to 3.0 before you can remember the reason..., I don't remember the reason for objections. The patch breaks queries in benchmarks and also ANSI. So by default, we should revert., [~sershe], is there anybody working on this?, I'll take a look the coming week, FWIW SQL standard states any precise numeric type has higher precedence than any approximate numeric type

In the SQL:2011 spec see section 9.7, Syntax Rule 9b.

So I'm in favor of reverting., I've read the original discussions on multiple JIRAs... I'm going to see if the combination of HIVE-13380 and HIVE-13945 produces the correct behavior for literals.
[~cartershanklin] does it apply to literals, or also in other cases e.g. arithmetic?

cc [~ashutoshc], My assumption this is a non-issue after HIVE-13945, May be an issue, I thought decimal + double in explicitly typed case should go to double, but I'm not sure based on the above comment
Also its good to have a test, The test.
Seems to be ok assuming explicit decimal minus explicit double should be double. Although changing that would actually break b/c, this is more about implicit types., [~sershe] [~ashutoshc]

Great if this is not an issue now. Wanted to mention a few other SQL spec things in case they are helpful.

Drawing from Section 5.3 (SQL:2011 here not SQL:2016):
With respect to literals: number.number is some implementation-defined exact numeric. Approximate numerics are specified as mantissa E exponent. Lower case e is also considered standard.

As for arithmetic:
Section 6.27: If the declared type of either operand of a dyadic arithmetic operator is approximate numeric, then the declared type of the result is an implementation-defined approximate numeric type.
, Cool, so we are compliant right now.
Irony here is if you revert HIVE-13380 system won't be compliant any more : )

+1 for test patch., Is the description on HIVE-13380 wrong? HIVE-13380 says DECIMAL should have lower precedence than DOUBLE PRECISION which is not per the standard. See note from this morning., it's higher precedence in operators, and lower in literals as per the combination of the 2 patches, 

Here are the results of testing the latest attachment:
https://issues.apache.org/jira/secure/attachment/12860760/HIVE-14077.patch

{color:green}SUCCESS:{color} +1 due to 1 test(s) being added or modified.

{color:red}ERROR:{color} -1 due to 2 failed/errored test(s), 10515 tests executed
*Failed tests:*
{noformat}
org.apache.hadoop.hive.cli.TestCliDriver.testCliDriver[comments] (batchId=35)
org.apache.hive.hcatalog.api.TestHCatClient.testTransportFailure (batchId=172)
{noformat}

Test results: https://builds.apache.org/job/PreCommit-HIVE-Build/4403/testReport
Console output: https://builds.apache.org/job/PreCommit-HIVE-Build/4403/console
Test logs: http://104.198.109.242/logs/PreCommit-HIVE-Build-4403/

Messages:
{noformat}
Executing org.apache.hive.ptest.execution.TestCheckPhase
Executing org.apache.hive.ptest.execution.PrepPhase
Executing org.apache.hive.ptest.execution.ExecutionPhase
Executing org.apache.hive.ptest.execution.ReportingPhase
Tests exited with: TestsFailedException: 2 tests failed
{noformat}

This message is automatically generated.

ATTACHMENT ID: 12860760 - PreCommit-HIVE-Build, [~sershe] ready to commit?, Just committed actually ;) Thanks for the review and discussion., Hive 3.0.0 has been released so closing this jira.]