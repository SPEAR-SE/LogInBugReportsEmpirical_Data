[Not sure what's happening here. It will be great if you can provide a testcase to reproduce.
The parameter "hive.mapjoin.cache.numrows" (default 25K) is used to control when to flush the in-memory hashmap (which's value object is MapJoinObjectValue). You may want to use a small number for this parameter in your testcase.

A guess for this issue is maybe we should do a 
{noformat} 
out.flush();
{noformat} 
in MapjoinObjectValue's writeExternal method. (MapjoinObjectValue line 131), Viraj, any update on this jira? thanks., Hi Yongqiang, 
 Sorry for my late reply, Thiruvel from the Bangalore team is looking into it. I have passed him the use case and datasets for reproducing the issue.
Is there a way we can assign it to him.
Viraj, Great! Assigned to Thiruvel. 
I think he is already in the contributor list, and he can just assign jiras to himself now., I am able to reproduce the problem with a smaller dataset (from the examples). 

In a MAPJOIN, when no columns are selected from the MAPJOINed table and if hive.mapjoin.cache.numrows < rowcount(MAPJOINed table), one can simulate the problem Viraj saw.

set hive.mapjoin.cache.numrows=100;
select /*+ MAPJOIN(invites) */ pokes.bar from pokes join invites on (pokes.bar = invites.bar);

The same happens when I MAPJOIN with pokes and select columns from invites. So this doesn't have to do with partitioning.

However, when I increase hive.mapjoin.cache.numrows to 500 OR select invites.bar instead, I am not able to reproduce the problem.

Hive - Running from trunk, may be a day old.
Hadoop - 20.2, HIVE-1670 fixes the EOF issue and I dont see the problem with the queries I used above. Hence closing this one.

However, I see different results when MAPJOIN is used. Will open another JIRA for the same., > However, I see different results when MAPJOIN is used. Will open another JIRA for the same.

Have opened HIVE-1682 for the same.]