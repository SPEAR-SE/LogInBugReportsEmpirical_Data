[If I understand correctly, the "workaround" mentioned is what a user is expected to be doing. The partition key has string as type, so the constant value for the key should be string literals instead of integers. Further, Hive allows implicit conversions, such the case demonstrated, which is common in many DBs. Disallowing that is too restrictive and less usable.

In my opinion, user should be aware of the implicit conversion and its consequence. If not sure, match the type explicitly., Xuefu, you are right that using string literal is the correct way. 

I suppose previously implicit conversion was actually supported in some sense, because the literal 01 was actually treated as string. However, in 0.12, even though hour partition column is STRING, when i specify hour=01, the literal 01 is not converted implicitly into string, but instead is treated as int.

i digged into this a bit more and suspect that this change in behavior is related to commit for HIVE-2702, which adds support for integral partition columns. Previously, all partition filter value literals were always treated as string. Now, both integral and string types are supported.

I think the best fix would be to support implicit conversion behavior again. At least, a type check and subsequent error should be thrown, so that when user specifies hour=01, query fails and user can fix his/her query, though this will be more disruptive change for end users.

, [~pala] Thanks for the clarification. It seems there is some issue about data conversion. Your partition column has a type of string, so, if implicit conversion is due, the integer literals should be converted to strings. It's wrong to treat your partition column as integer type if that's what's happening. Without further investigation, it's hard to draw conclusion yet. Throwing a semantic error for a case like this is probably something Hive shouldn't do, as hr=02 is a valid expression because the data types can be implicitly converted.

This seems to be bug somewhere, which needs more research. If you'd like to work on this, please feel free to submit a patch. Otherwise, as a workaround, you may just use string literals for now., hmm, I cannot repro this on trunk, Filter is not added to the plan for either "'00'" or just "00" (w/o quotes)
I think Filter might actually be culprit, rather than partition filtering. Let me try something...

, No, filter works (on trunk) with non-partition string column. It has the same condition (expr: (col1 = 1)), but it matches 01.
[~pala] can you attach debug logs from client and metastore?, Yeah nm I built 12 and can repro. Yeah it seems to be the root cause of the issue; 12 does validation on the client and apparently doesn't check that types are compatible, only that both are supported (this is the root cause). Then it uses getPartitionsByFilter to query partitions and filter being sent (expression.getExprString) is changed to "hour = 0", which fails.
Of course you could say that SemanticAnalyzer should have caught this earlier, what is 00? It doesn't look like it should be treated like a valid string to me.

Trunk uses getPartitionsByExpr, and validates on server that column and value type are compatible. As far as I understand hive doesn't do sub-releases; how should this jira be handled, closed as already fixed in 13? 
Or do we want to change SemanticAnalyzer to be less lenient?

, Thanks for following up Sergey Shelukhin. Regarding 00, its just a convention we follow in partition names, hour=00 to hour=23. 

Is there a commit in trunk that we could cherry pick and apply on Hive 0.12 to fix this issue?, Wrt 00, my point is that 00 is not a valid string so it should not work.
Depending on opinion it should either give an error (string-int compare), or not match (as it doesn't in 0.12) because column type is string, and 00 to me is an integer 0, so if type is coerced to type of the column, '00' != '0' . 
Can you work around by using properly quoted strings, e.g. '00'?

As for commit, that would be HIVE-4914, but it's quite a large one, it may have some dependencies and bugfixes.
, E.g. postgres:

{noformat}
sergey=# select * from foo where s = 01;
ERROR:  operator does not exist: character varying = integer
LINE 1: select * from foo where s = 01;
                                  ^
HINT:  No operator matches the given name and argument type(s). You might need to add explicit type casts.
{noformat}

, Sergey, the same thing above works in hive 12, for a regular string column (as opposed to partition column). 

In any case, given the cost of fix vs severity, we will avoid depending on type coercion and use proper literals., Yeah, I agree that this is breakage in 12 compared to 11. Sorry for that. Good to know that the workaround works.

I will resolve as dup of 4914, as the fix is contained therein.]