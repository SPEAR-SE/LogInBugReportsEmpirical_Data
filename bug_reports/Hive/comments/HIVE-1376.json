[Some more details on this:

* In the case of a full-table aggregation (no group by key) where no rows exist (or all get filtered out), the aggregation framework sends a row of all nulls to the aggregator.  I don't know why this is necessary, since all of the existing aggregators ignore the null anyway.

* Since the percentile UDAF uses a primitive double for the parameter type to the iterate method (rather than a Double or a DoubleWritable), Java reflection throws an IllegalArgumentException because it can't convert a null to a primitive.

There are three possible solutions:

(1) change percentile to use a non-primitive type

(2) add more reflection and skip the attempt to send the null to iterate in the case where the parameter type is primitive

(3) avoid sending the null in the first place (unless someone can explain why it's needed, or some regression test fails when we try it)
, I think (3) makes the most sense.  If (3) does not work for whatever hard-to-fix reason, we can do (1).
In any case, the change should be pretty simple.
, Attaching a patch for review. This patch also fixes HIVE-1674 (count(*) returning wrong results). 

Tests are still running. Will upload a new patch if there are more changes. 

This patch implements 3) as suggest and SELECT PERCENTILE(col, 0.5) from src where false; will return a single row with NULL as value. , The previous patch failed on several test, particularly count(*) queries. Attaching a new patch for percentile only and will update a patch for HIVE-1674 separately. , will take a look. , the patch looks good. is there the same problem in other udafs? If yes, should we fix them one by one or fix them in the group by operator?, sorry, did not see the previous comments. John and Zheng have already discussed this problem. I will start running tests., I just committed! Thanks Ning!, This patch only did (1), not (3).  I think we'll still need a followup to avoid the problem for arbitrary UDAF's (unless we require them to avoid primitive types).]