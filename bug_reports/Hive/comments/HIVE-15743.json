[cc [~mmccline]

We can probably just c/p parts of FloatingDecimal - merge the parsing and doubleValue, and change them to operate on byte array. It only needs to recognize like 6-8 letters aside from normal numeric stuff (nan and infinity aside), so we should be safe since we always use utf8, Wow that is a high percentage!

Ya, I looked at some of those Java runtime classes recently (when I was doing FastDecimal) and it is doable.  All numeric related characters are UTF-8.   There is considerable magic code around exponents, etc in them though but because of that I doubt few people are brave enough to change it.  So, our transformed version would be "relatively safe"., The CPU cache counters for this issue is available here 

http://people.apache.org/~gopalv/llap-perf.tar.bz2, Most of the OpenJDK code is licensed under GPL. I'm not sure whether we can just copy and paste then fix it in ASL., This is an initial implementation. Copy/pasted, and merged code. And made it to use byte arrays. It already showed some performance improvements. I will look deeper for more optimizations., We cannot copy-paste it.
I think the crucial aspect of a new implementation should be avoiding allocations. Java does at least 3 - String, FloatingDecimal, Double; maybe more, I didn't read it too closely.
It would be good to go straight from byte[] to double.

cc [~gopalv], bq. I'm not sure whether we can just copy and paste then fix it in ASL.

No, we can't - this is not a gray area at all. If the implementation is from GPL licensed code, it cannot be committed into Apache at all.

This feature requires porting a standard dtoa.c from an MIT licensed project, like Mozilla nspr or Python., [~teddy.choi]: left one comment on RB anyway - we need to move to a model like your earlier patch, with a DoubleParser object allocated at the start of init for LazySimpleDeserializeRead., A quick look for a similar API for Double parsing showed up (BSD Licensed)

https://github.com/bourgesl/jnumbers/tree/master/src/main/java/org/jnumbers, [~gopalv], Its first page notes that "Note: accuracy of Double/Float parsing is not as good as JDK (1/2 ulp) but is correct (and enough for all-purposes) ~ 2 ulps (ie 5e-16 relative error)". Will it be okay? Meanwhile, I will try to port strtod from C in BSD. Thank you., I made a patch by porting strtod() in C in BSD. It's 10x faster, but it has 5e-16 relative errors. I made its unit test to fail to reflect these errors. It will take relatively longer time to make the smallest error in parsing., does there have to be a string, as well as toCharArray? The original code has bytes as input. String creation is actually more than half of the cost of going from byte[] to double (see picture).

Also, I am not sure how important the precision issue is; however, one thing to suggest, if it's rare and easy to detect, is to handle the 99% cases fast, and fall back to Double.parse(new String) in exotic/rare cases.
, 
> String creation is actually more than half of the cost of going from byte[] to double (see picture).

Specifically, it is a TLAB alloc miss. The code which is there is already ~10x faster, but we can do better by giving up String & assuming utf8 bytes always. 

Also a MutableDouble::parse() would let the system return a (Success, Value) tuple, which should allow for the fall back re-execution pathway to kick in for any failures.

> if it's rare and easy to detect, is to handle the 99% cases fast, and fall back to Double.parse(new String) in exotic/rare cases.

I ran through all the data examples I have from various cases. The largest number of digits in raw data was 18 digits (15,2), with the most common Decimal source pattern hovering around (9,2).

None of them would be hit by a 2 ULP error, but we can always fall back to original parser for digits > 18., [~gopalv], that's a practical idea!, This patch uses a byte array to skip encoding. When it gets a number with shorter digits than 16, then it parses faster with double arithmetics. Otherwise, it parses slower with Double.parseDouble. It also has unit tests and a benchmark test., 

Here are the results of testing the latest attachment:
https://issues.apache.org/jira/secure/attachment/12850813/HIVE-15743.3.patch

{color:green}SUCCESS:{color} +1 due to 1 test(s) being added or modified.

{color:red}ERROR:{color} -1 due to 5 failed/errored test(s), 10212 tests executed
*Failed tests:*
{noformat}
TestDerbyConnector - did not produce a TEST-*.xml file (likely timed out) (batchId=235)
org.apache.hadoop.hive.cli.TestEncryptedHDFSCliDriver.testCliDriver[encryption_join_with_different_encryption_keys] (batchId=159)
org.apache.hadoop.hive.cli.TestMiniSparkOnYarnCliDriver.org.apache.hadoop.hive.cli.TestMiniSparkOnYarnCliDriver (batchId=162)
org.apache.hadoop.hive.cli.TestPerfCliDriver.testCliDriver[query14] (batchId=223)
org.apache.hadoop.hive.llap.daemon.impl.TestTaskExecutorService.testWaitQueuePreemption (batchId=278)
{noformat}

Test results: https://builds.apache.org/job/PreCommit-HIVE-Build/3357/testReport
Console output: https://builds.apache.org/job/PreCommit-HIVE-Build/3357/console
Test logs: http://104.198.109.242/logs/PreCommit-HIVE-Build-3357/

Messages:
{noformat}
Executing org.apache.hive.ptest.execution.TestCheckPhase
Executing org.apache.hive.ptest.execution.PrepPhase
Executing org.apache.hive.ptest.execution.ExecutionPhase
Executing org.apache.hive.ptest.execution.ReportingPhase
Tests exited with: TestsFailedException: 5 tests failed
{noformat}

This message is automatically generated.

ATTACHMENT ID: 12850813 - PreCommit-HIVE-Build, This patch applies Sergey's feedback. It uses a trimed string for precision check, and limits strtod(String) for testing only., 

Here are the results of testing the latest attachment:
https://issues.apache.org/jira/secure/attachment/12851060/HIVE-15743.4.patch

{color:green}SUCCESS:{color} +1 due to 1 test(s) being added or modified.

{color:red}ERROR:{color} -1 due to 7 failed/errored test(s), 10225 tests executed
*Failed tests:*
{noformat}
TestDerbyConnector - did not produce a TEST-*.xml file (likely timed out) (batchId=235)
org.apache.hadoop.hive.cli.TestEncryptedHDFSCliDriver.testCliDriver[encryption_join_with_different_encryption_keys] (batchId=159)
org.apache.hadoop.hive.cli.TestMiniLlapLocalCliDriver.testCliDriver[schema_evol_text_vec_table] (batchId=147)
org.apache.hadoop.hive.cli.TestMiniLlapLocalCliDriver.testCliDriver[vector_varchar_simple] (batchId=153)
org.apache.hadoop.hive.cli.TestPerfCliDriver.testCliDriver[query14] (batchId=223)
org.apache.hadoop.hive.cli.TestSparkNegativeCliDriver.org.apache.hadoop.hive.cli.TestSparkNegativeCliDriver (batchId=230)
org.apache.hadoop.hive.llap.daemon.impl.TestTaskExecutorService.testWaitQueuePreemption (batchId=277)
{noformat}

Test results: https://builds.apache.org/job/PreCommit-HIVE-Build/3381/testReport
Console output: https://builds.apache.org/job/PreCommit-HIVE-Build/3381/console
Test logs: http://104.198.109.242/logs/PreCommit-HIVE-Build-3381/

Messages:
{noformat}
Executing org.apache.hive.ptest.execution.TestCheckPhase
Executing org.apache.hive.ptest.execution.PrepPhase
Executing org.apache.hive.ptest.execution.ExecutionPhase
Executing org.apache.hive.ptest.execution.ReportingPhase
Tests exited with: TestsFailedException: 7 tests failed
{noformat}

This message is automatically generated.

ATTACHMENT ID: 12851060 - PreCommit-HIVE-Build, +1 cc [~gopalv], Hmm... should this be committed?, [~sershe], please proceed. Thank you., Committed to master. Thanks for the patch!]