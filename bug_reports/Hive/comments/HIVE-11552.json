[Attaching the patch with regenerated thrift , as well as the one without generated code, [~alangates] [~sushanth] can you take a look?, Updated nogen patch to remove some spurious changes, +cc [~thejas], is "cc" equivalent to "1" in some encoding? :), No, sorry - it is more that I think Thejas would be currently more familiar with this than I, so I added him to the watchers list. :), I can review it., I was going to re-gen thrift files after master merge to make patch less huge, but due to issue discussed in HIVE-11591 the re-gen is still going to touch all Java files. nogen patch is ready for review, attaching a new generated patch after merge, [~alangates] ping?, +1

One small comment, given that you don't expect many RawStore implementations to have this would it make sense to add a implementsFileMetadataCache() call to RawStore that ObjectStore could then return false to?  This way the calling code could bail early and not try to call the cache., The way code is currently implemented, the method already bails fast
{noformat}
      List<Long> fileIds = req.getFileIds();
      ByteBuffer[] metadatas = getMS().getFileMetadata(fileIds);
      GetFileMetadataResult result = new GetFileMetadataResult();
      result.setIsSupported(metadatas != null);
      if (metadatas != null) {
[snip]
      }
      return result;
{noformat}

It will be the same path with extra call otherwise.
For put and clear, the methods in ObjectStore are just a no-op., There's an issue with ASF LDAP server somewhere, will commit when I can...]