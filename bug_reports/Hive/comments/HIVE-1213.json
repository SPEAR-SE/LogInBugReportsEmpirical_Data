[
set hive.enforce.bucketing = true;
set hive.enforce.sorting = true;

drop table bucketmapjoin6_1;
CREATE TABLE bucketmapjoin6_1(key int, value string) CLUSTERED BY (key) SORTED BY (key) INTO 2 BUCKETS;

drop table bucketmapjoin6_2;
CREATE TABLE bucketmapjoin6_2(key int, value string) CLUSTERED BY (key) SORTED BY (key) INTO 2 BUCKETS;

drop table bucketmapjoin6_3;
CREATE TABLE bucketmapjoin6_3(key int, value string) CLUSTERED BY (key) SORTED BY (key) INTO 2 BUCKETS;

insert overwrite table bucketmapjoin6_1
select * from src where key < 100 and key != 44 and key != 28 and key != 15;

select * from bucketmapjoin6_1;


insert overwrite table bucketmapjoin6_2
select * from src where key > 20 and key < 50;

select * from bucketmapjoin6_2;

insert overwrite table bucketmapjoin6_3
select * from src where key > 10 and key < 30;

select * from bucketmapjoin6_3;

explain
select * from
(
select
  CASE
    WHEN M.key is not null THEN M.key
    ELSE S.key
  END as key,
  M.value as Mvalue, S.value as Svalue from
(select * from bucketmapjoin6_1 where (key <= 20 or key >= 50) ) M full outer join bucketmapjoin6_2 S on
M.key = S.key
) subq2
full outer join
bucketmapjoin6_3 L
on subq2.key = L.key;


set hive.optimize.bucketmapjoin = true;
set hive.optimize.bucketmapjoin.sortedmerge = true;

explain
select /*+ MAPJOIN(L) */ * from
(
select /*+ MAPJOIN(S) */
  CASE
    WHEN M.key is not null THEN M.key
    ELSE S.key
  END as key,
  M.value as Mvalue, S.value as Svalue from
(select * from bucketmapjoin6_1 where (key <= 20 or key >= 50) ) M full outer join bucketmapjoin6_2 S on
M.key = S.key
) subq2
full outer join
bucketmapjoin6_3 L
on subq2.key = L.key;

set hive.optimize.bucketmapjoin = false;
select * from
(
select
  CASE
    WHEN M.key is not null THEN M.key
    ELSE S.key
  END as key,
  M.value as Mvalue, S.value as Svalue from
(select * from bucketmapjoin6_1 where (key <= 20 or key >= 50) ) M full outer join bucketmapjoin6_2 S on
M.key = S.key
) subq2
full outer join
bucketmapjoin6_3 L
on subq2.key = L.key;

---

The mapjoin query should be executed as a single map-only job, Still need one more change to convert the mapjoin to a sorted merge map join. Will update the patch after that change., A new patch. join32 and join33 fails with this patch. , A patch ready for review., Hive-1213.6.patch has no code change. only added one more testcase which has a dummy transform in a subquery., got some diffs

bucketmapjoin_subquery.q, input2.q and input3.q

Also, test TestHashMapWrapper failed with a NPE, fixed the bucketmapjoin_subquery.q diff, and added some comments in code. Thanks Namit!, Consider the query;


select /*+ MAPJOIN(c) */ ...
from

(

select /*+ MAPJOIN(b) */ .. from a join b on k1

) subq
join 
c
on k2


Even if k1 and k2 are not same, this can be done in a singe map-only job. Note that this has nothing to do with sorting/bucketing etc.
, Integrated Namit's comment about subquery mapjoin. Thanks Namit!, some logic is moved to HIVE-1246. update the patch., The patch does not apply cleanly]