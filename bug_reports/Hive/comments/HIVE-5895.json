[For division only, consider doing a final pass over the vector and count the infinity values. If it is 0, do nothing. This is the common case. 

If it is non-zero, then do another pass and conditionally convert the infinities to NULL.

This avoids an if/else check in the inner loop for the common case.

Eric, Yeah, that's what I'm doing, On second thought, the "counting" would require a conditional anyway. So just a final pass to conditionally convert infinity to NULL for division should be fine., probably it can piggyback on the pass already done by NullUtil, Sounds good. It would be best to make it conditional in the template expansion or a once-per-vector check so extra work for each vector element is only done for the divide operator., Actually regular division can also produce infinities according to the spec, so in order to preserve the logic that avoids the null-value-setting loop when batch has no nulls, one would have to also pass in input to do the if for entire batch anyway if there's at least one 0 on the right side. So there will be a lot of code change for this case., Patch later today..., I understand that the current division can possibly return infinity or NaN. However, this seems to me a bug (or bad behavior) rather than norm. To me, they provide no more information than NULL. Such complication comes due to hive having no consistent error handling. HIVE-5348 and HIVE-5660 are to address those issues. For this particular case, I wouldn't be crying if NULL is returned for both infinity or NaN, especially if it makes the life easier., here's the patch with test, [~xuefuz] infinity can be returned from valid double division if the value is too large to be represented iirc. So it would be a valid value, rb at https://reviews.apache.org/r/15869/, This is looking good overall. Please see my review comments., 

{color:red}Overall{color}: -1 at least one tests failed

Here are the results of testing the latest attachment:
https://issues.apache.org/jira/secure/attachment/12615978/HIVE-5895.patch

{color:red}ERROR:{color} -1 due to 2 failed/errored test(s), 4741 tests executed
*Failed tests:*
{noformat}
org.apache.hadoop.hive.ql.exec.vector.expressions.TestVectorArithmeticExpressions.testLongColDivideLongColumn
org.apache.hadoop.hive.ql.exec.vector.expressions.TestVectorScalarColArithmetic.testScalarLongDivide
{noformat}

Test results: http://bigtop01.cloudera.org:8080/job/PreCommit-HIVE-Build/470/testReport
Console output: http://bigtop01.cloudera.org:8080/job/PreCommit-HIVE-Build/470/console

Messages:
{noformat}
Executing org.apache.hive.ptest.execution.PrepPhase
Executing org.apache.hive.ptest.execution.ExecutionPhase
Executing org.apache.hive.ptest.execution.ReportingPhase
Tests exited with: TestsFailedException: 2 tests failed
{noformat}

This message is automatically generated.

ATTACHMENT ID: 12615978, See my new comments on ReviewBoard, writing the test as it is now depends on HIVE-5918 and  HIVE-5919, the patch itself doesn't, so far, limited the test for cases where deletion actually vectorizes, 

{color:red}Overall{color}: -1 at least one tests failed

Here are the results of testing the latest attachment:
https://issues.apache.org/jira/secure/attachment/12616674/HIVE-5895.01.patch

{color:red}ERROR:{color} -1 due to 2 failed/errored test(s), 4450 tests executed
*Failed tests:*
{noformat}
org.apache.hadoop.hive.cli.TestCliDriver.testCliDriver_vectorization_div0
org.apache.hadoop.hive.ql.exec.vector.expressions.TestVectorScalarColArithmetic.testScalarLongDivide
{noformat}

Test results: http://bigtop01.cloudera.org:8080/job/PreCommit-HIVE-Build/493/testReport
Console output: http://bigtop01.cloudera.org:8080/job/PreCommit-HIVE-Build/493/console

Messages:
{noformat}
Executing org.apache.hive.ptest.execution.PrepPhase
Executing org.apache.hive.ptest.execution.ExecutionPhase
Executing org.apache.hive.ptest.execution.ReportingPhase
Tests exited with: TestsFailedException: 2 tests failed
{noformat}

This message is automatically generated.

ATTACHMENT ID: 12616674, hmm, seemed to have passed on my box yesterday... let me update, fixed unit test; enforced ordering in the q test, appears to be different on hadoop1 and 2 otherwise, See my comments on RB, Are you sure selectedInUse and isRepeating are compatible? I'd have to check quite a bit of code to confirm, Yes., E.g. you could have a vectorized row batch with 1024 entries, and only items (rows) 0 and 2 are selected. Then if you do an operation like col/0, the result column will be repeating and null. But only items 0 and 2 will be selected. The selected array tells you which rows in the batch are selected. , 

{color:green}Overall{color}: +1 all checks pass

Here are the results of testing the latest attachment:
https://issues.apache.org/jira/secure/attachment/12616854/HIVE-5895.02.patch

{color:green}SUCCESS:{color} +1 4450 tests passed

Test results: http://bigtop01.cloudera.org:8080/job/PreCommit-HIVE-Build/502/testReport
Console output: http://bigtop01.cloudera.org:8080/job/PreCommit-HIVE-Build/502/console

Messages:
{noformat}
Executing org.apache.hive.ptest.execution.PrepPhase
Executing org.apache.hive.ptest.execution.ExecutionPhase
Executing org.apache.hive.ptest.execution.ReportingPhase
{noformat}

This message is automatically generated.

ATTACHMENT ID: 12616854, +1, 

{color:green}Overall{color}: +1 all checks pass

Here are the results of testing the latest attachment:
https://issues.apache.org/jira/secure/attachment/12616877/HIVE-5895.03.patch

{color:green}SUCCESS:{color} +1 4450 tests passed

Test results: http://bigtop01.cloudera.org:8080/job/PreCommit-HIVE-Build/503/testReport
Console output: http://bigtop01.cloudera.org:8080/job/PreCommit-HIVE-Build/503/console

Messages:
{noformat}
Executing org.apache.hive.ptest.execution.PrepPhase
Executing org.apache.hive.ptest.execution.ExecutionPhase
Executing org.apache.hive.ptest.execution.ReportingPhase
{noformat}

This message is automatically generated.

ATTACHMENT ID: 12616877, Committed to trunk. Thanks Sergey!]