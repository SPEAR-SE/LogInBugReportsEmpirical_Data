[Thanks for reporting the issue [~vihangk1]. "aclEntries" can be precomputed for the destination file status and can be passed on to "HdfsUtils.setFullFileStatus" with minor refactoring., Thanks [~rajesh.balamohan] for the suggestion. I had a similar solution which worked fine in our testing. I had created a synchronized method in Hadoop23Shims which gets a copy of aclEntries and setFullFileStatus calls it. I think your solution may be better. I will try it out and create a patch for it today. , Attaching the patch for the issue. The patch uses an idea similar to what [~rajesh.balamohan] suggested but instead of passing a copy of List<AclEntry> to {{setFullFileStatus}}, the list is derived from within the method itself. Passing the List<AclEntry> might not be very helpful considering that it is possible to still access it from {{sourceStatus.getAclStatus().getEntries()}}. Also, {{sourceStatus}} argument cannot be removed since it is required for obtaining other information from within the method., Some comments:

* Is {{Collections.unmodifiableList(...)}} null safe, what happens if {{aclStatus.getEntries()}} returns null
* Test {{HdfsUtils.HadoopStatus.getAclEntries()}} could be as simple as invoking the method, trying the modify it, and then expecting an {{UnsupportedOperationException}}
* Tests for {{HdfsUtils.setFullFileStatus}} may be trickier, one idea is to pass in a mock {{HadoopFileStatus}} and ensure that {{getAclEntries}} is invoked, but not {{getAclStatus().getEntries()}}, {{Collections.unmodifiableList(...)}} is not null safe but {{aclStatus.getEntries()}} should never return null. AclStatus objects can only be created using {{AclStatus.Builder}} class and it initializes entries to a newArrayList(). I can add the check if you think its still a good idea but seems like a redundant check to me.

I will look into the testing ideas you gave above. Thanks a lot., 

Here are the results of testing the latest attachment:
https://issues.apache.org/jira/secure/attachment/12841819/HIVE-15355.01.patch

{color:red}ERROR:{color} -1 due to no test(s) being added or modified.

{color:red}ERROR:{color} -1 due to 8 failed/errored test(s), 10766 tests executed
*Failed tests:*
{noformat}
org.apache.hadoop.hive.cli.TestCliDriver.testCliDriver[sample2] (batchId=5)
org.apache.hadoop.hive.cli.TestCliDriver.testCliDriver[sample4] (batchId=15)
org.apache.hadoop.hive.cli.TestCliDriver.testCliDriver[sample6] (batchId=61)
org.apache.hadoop.hive.cli.TestCliDriver.testCliDriver[sample7] (batchId=60)
org.apache.hadoop.hive.cli.TestCliDriver.testCliDriver[sample9] (batchId=38)
org.apache.hadoop.hive.cli.TestMiniLlapCliDriver.testCliDriver[transform_ppr2] (batchId=134)
org.apache.hadoop.hive.cli.TestMiniLlapLocalCliDriver.testCliDriver[stats_based_fetch_decision] (batchId=150)
org.apache.hadoop.hive.cli.TestMiniTezCliDriver.testCliDriver[explainanalyze_2] (batchId=92)
{noformat}

Test results: https://builds.apache.org/job/PreCommit-HIVE-Build/2426/testReport
Console output: https://builds.apache.org/job/PreCommit-HIVE-Build/2426/console
Test logs: http://104.198.109.242/logs/PreCommit-HIVE-Build-2426/

Messages:
{noformat}
Executing org.apache.hive.ptest.execution.TestCheckPhase
Executing org.apache.hive.ptest.execution.PrepPhase
Executing org.apache.hive.ptest.execution.ExecutionPhase
Executing org.apache.hive.ptest.execution.ReportingPhase
Tests exited with: TestsFailedException: 8 tests failed
{noformat}

This message is automatically generated.

ATTACHMENT ID: 12841819 - PreCommit-HIVE-Build, Updating the patch with a simple test case to check that AclEntries within HadoopFileStatus is unmodifiable. This will prevent inadvertent  future code changes which directly try to modify List<AclEntries> from setFullFileStatus.

Also, checked the test failures above. They seem be to be unrelated since they are failing without the patch on the master too. Also, some of the other recent JIRAs also show the same test failures.

[~spena] [~rajesh.balamohan] Can you please review the patch? Thanks., 

Here are the results of testing the latest attachment:
https://issues.apache.org/jira/secure/attachment/12841883/HIVE-15355.02.patch

{color:green}SUCCESS:{color} +1 due to 1 test(s) being added or modified.

{color:red}ERROR:{color} -1 due to 9 failed/errored test(s), 10769 tests executed
*Failed tests:*
{noformat}
org.apache.hadoop.hive.cli.TestCliDriver.testCliDriver[auto_sortmerge_join_2] (batchId=44)
org.apache.hadoop.hive.cli.TestCliDriver.testCliDriver[sample2] (batchId=5)
org.apache.hadoop.hive.cli.TestCliDriver.testCliDriver[sample4] (batchId=15)
org.apache.hadoop.hive.cli.TestCliDriver.testCliDriver[sample6] (batchId=61)
org.apache.hadoop.hive.cli.TestCliDriver.testCliDriver[sample7] (batchId=60)
org.apache.hadoop.hive.cli.TestCliDriver.testCliDriver[sample9] (batchId=38)
org.apache.hadoop.hive.cli.TestMiniLlapCliDriver.testCliDriver[transform_ppr2] (batchId=134)
org.apache.hadoop.hive.cli.TestMiniLlapLocalCliDriver.testCliDriver[columnstats_part_coltype] (batchId=149)
org.apache.hadoop.hive.cli.TestMiniLlapLocalCliDriver.testCliDriver[stats_based_fetch_decision] (batchId=150)
{noformat}

Test results: https://builds.apache.org/job/PreCommit-HIVE-Build/2435/testReport
Console output: https://builds.apache.org/job/PreCommit-HIVE-Build/2435/console
Test logs: http://104.198.109.242/logs/PreCommit-HIVE-Build-2435/

Messages:
{noformat}
Executing org.apache.hive.ptest.execution.TestCheckPhase
Executing org.apache.hive.ptest.execution.PrepPhase
Executing org.apache.hive.ptest.execution.ExecutionPhase
Executing org.apache.hive.ptest.execution.ReportingPhase
Tests exited with: TestsFailedException: 9 tests failed
{noformat}

This message is automatically generated.

ATTACHMENT ID: 12841883 - PreCommit-HIVE-Build, The patch looks good. I see you are creating a copy of {{List<AclEntry>}} so that it is modified only by the thread calling {{setFullFileStatus}}. This avoids concurrency issues.

+1

The tests are not related. I had issues with them in another patch., Thanks for the review [~spena], Thanks [~vihangk1] for your contribution. I committed this patch to master., Hmm... doesn't the latest patch have a race because the list is accessed twice, so it can be changed to null after the null check?
{noformat}
+      if (sourceStatus.getAclEntries() != null) {
+        LOG.trace(sourceStatus.aclStatus.toString());
+        aclEntries = new ArrayList<>(sourceStatus.getAclEntries());
{noformat}, Hi [~sershe] Do you mean {{if (sourceStatus.getAclEntries() != null) }} check? If you look at the implementation of {{HadoopFileStatus}} its the aclEntries is derived from {{aclStatus}} which is a final member of the object and it returns a unmodifiable collection. Can you give an example of the race condition? Also, interestingly enough, I don't see the code which calls this method in parallel now. Not sure if some patch changed the parallel implementation later., This bugfix seems to imply that aclStatus can change; calling sourceStatus.getAclEntries() twice may return lists derived from different aclStatus.
So, if ... gets some list, background thread sets aclStatus to null, so aclEntries = ... line gets the null value.]