[If hive.auto.convert.join.noconditionaltask.size is used by spark regardless of hive.auto.convert.join.noconditionaltask, we should probably have a different property. Reusing the same property while overwriting its meaning could cause confusion for either existing users or new users., Well its not overriding the meaning, the value means the same thing (size of small-tables), except for the clause that it depends on the first property.  The name also makes sense as we don't use a conditional task in Spark.  So I think having a Spark-only property for size of small-tables in mapjoin might be more confusing, as users will need to set both properties to get the same behavior in different execution engines.
, For backup task (HIVE-9103), I'm thinking about reusing hive.auto.convert.join.noconditionaltask to specify whether backup task is needed.
This is slightly misleading, but we can add some description to the property. Thoughts?, I'm not sure of the difference between backup task and the "conditional task" that these two properties are referring to, but I don't feel we need a property to control whether to have a backup task. As long as we auto converted a join, we should have a backup task., In MR, both conditional task AND backup task are used, but for us, only backup task is needed, since no decision needs to be made (only one mapjoin task). If we always use backup task for auto converted join, it will add overhead to plan compilation, because to generate a backup task we need to clone the whole operator tree., Yeah, Hive has long reached to a point where the properties are confusing and sometimes contradicting and duplicating. These two properties plus hive.auto.convert.join are an example. The two properties are meant to be used together. Ignoring one while taking the other doesn't seem to be a clean solution. While it's already a legacy for MR and Tez, I'd like to have a cleaner solution for Spark since we still have the chance. If we want to be consistent across engines, I'd rather fix Spark to be consistent with MR., I see. I guess the overhead is bearable. It gives much better a user experience than if we auto convert the task and the query fails, leaving the user in the blue.]