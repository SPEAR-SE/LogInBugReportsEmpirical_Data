[After HIVE-3403, an auto sortmerge join can be performed.
However, consider the following scenario:
T1 - big table: 3 partitions : big partitions
T2 - small table: 1 partition
both T1 and T2 are sorted/bucketed on the same key.
If a join is being performed between T1 and T2, with HIVE-3403, T2 would be picked up as the table on which the mapper would run.
Ideally, if T2 is so small that it can fit in memory, a better approach would be map-join. 
The physical optimizer should change the sort-merge join task into a backup task, with all tables being candidates for map-join
(similar to auto convert mapjoin)., https://reviews.facebook.net/D8439, tests pass, The tests passed, Hi Namit,

In case of the test auto_sortmerge_join_1.q, I see the output does not seem to be an SMB join on the partitioned table. I am seeing similar behavior when I run on a partitioned table as well. Is there any reason why we are not converting the join to an SMB map-join in the case of partitioned table?

Thanks
Vikram., [~vikram.dixit], I am confused.

Look at line 965 of auto_sortmerge_join_1.q.out, it is a SMB.

Going in more detail: (line 486-492)

  Stage-5 is a root stage , consists of Stage-6, Stage-7, Stage-1
  Stage-6 has a backup stage: Stage-1
  Stage-3 depends on stages: Stage-6
  Stage-7 has a backup stage: Stage-1
  Stage-4 depends on stages: Stage-7
  Stage-1
  Stage-0 is a root stage

Stage6 and 7 are mapjoin jobs, whereas Stage1 is a SMB join.
This is the purpose of this jira. If a mapjoin can be performed, that
gets priority over SMB join., Hi Namit,

I have added some more variations to the queries in auto_sortmerge_join_1.q. I originally did not catch that there was a SMB map join in stage-1. That as you say is correct. One thing I see is that if I try to join sorted, bucketed tables on different keys (last join in the attached file), I see a SMB Map join operator followed by a reduce side join. It seems like the reduce side join could actually become a map join operator. Is this possible?

Thanks
Vikram., Yes, that is true even before my patch
, I verified the last query in the attached file in trunk, and got the same results, Hi Namit,

Can you please create a review request. I see one issue in the AbstractSMBJoinProcessor. The 

{noformat}
String joinAlias =
      bigTablePosition == 0 ?
        joinCtx.getLeftAlias() : joinCtx.getRightAliases()[bigTablePosition - 1];
{noformat}

The joinCtx.getRightAliases() array size would be at most 2 in case of joining against different keys. However the code that produces the bigTablePosition traverses all the tables. If the big table position comes up as 2 in a multi-way join, this code will cause an ArrayOutOfBounds exception. This needs to be addressed.

Thanks
Vikram., What I mean is right aliases can be only 1 (position 0; in case of join on different keys) so if the bigTablePosition comes out as 2, the code looks to find something in position 1 causing a failure., The review request is there : https://reviews.facebook.net/D8439

I will get back to you on the comment, I dont see any change in AbstractSMBJoinProc in this patch, Hey Namit,

I thought that this was the patch that changed something in AbstractSMBJoinProcessor. I think this was done as part of HIVE-3403. Just caught this while doing some testing with this patch.

Thanks
Vikram., I didn't understand your case.

A join B on A.key = B.key join C on A.key = C.key

or

A join B on A.key = B.key join C on A.value = C.value, Both of them should work., Hi Namit,

The test case I have is very similar to the star join case. I have a 4 way join with 3 dimension tables and 1 fact table. All the joins are on different keys. By default, the average partition size is used as the tie breaker for the choice of big table. However when I run this query, I get the array out of bounds exception as it chose the table from the 2nd join (T3 from below) as the big table (index = 2). However, the joinCtx right alias has only one table. So this resulted in a crash.

{noformat}
T1 \
      J1.out \
T2 /           J2.out \
          T3 /          J3.out (Final)
                   T4 /
{noformat}

Thanks
Vikram., I think all this needs is SizeBasedBigTableSelectorForAutoSMJ to have the following additional snippet:

{noformat}

if (parentOp instanceof TableScanOperator) {
topOps.add(parentOp);

<b>else if (parentOp instanceof CommonJoinOperator) {
  return;
}
</b>
else {
...

{noformat}

We shouldn't be taking that operation all the way to the top of the operator tree which is what is happening. Let me know what you think? 

Thanks
Vikram., canConvertJoinToBucketMapJoin:

   The join should be rejected by:

    // This has already been inspected and rejected
    if (context.getRejectedJoinOps().contains(joinOp)) {
      return false;
    }


Can you open a separate jira for this ?
We should never run into this scenario.
, This is a existing bug, and we need to debug this, but not as part of this patch., +1 (non-binding) for this patch.

Raised HIVE-4106 for the issue discussed here., +1 running tests., Test auto_sortmerge_join_9.q failed, likely because of HIVE-948 where you need to update .q.out file. 
Also, patch doesn't apply cleanly anymore because of commit of HIVE-4146.
I also have few comments which I left on phabricator. , [~namitjain] Could you refresh this patch.

Thanks
Vikram., Updated patch. 
* Rebased with trunk.
* Merged in changes from HIVE-4146
* Merged in changes from HIVE-4078
* Took care of my own review comments.
* Renamed the flag to  hive.auto.convert.sortmerge.join.to.mapjoin
* Set its default value to true.

[~namit] Can you take a look?, [~ashutoshc], will do, I am refreshing https://reviews.facebook.net/D8439 with your latest patch, will keep that in sync for latest reviews, [~ashutoshc], it might be a good idea to get https://issues.apache.org/jira/browse/HIVE-4241 and https://issues.apache.org/jira/browse/HIVE-4328 first.
This should be turned off, if HIVE-4241 optimization has triggered., Otherwise, the refreshed patch looks good.
Can you take a look at the above patches (HIVE-4241 and HIVE-4328) first ?
As soon as they are in, we can refresh and finish HIVE-3891., Wait till HIVE-4167 is confirmed.
If it is a problem anyway, the HIVE-3891 can be independently merged, otherwise need to resolve HIVE-4167 first, refreshing again and resolving conflicts, [~ashutoshc], all the tests passed. Since this was accepted sometime back, can you take a look again ?, Left some comments on Phabricator., Refreshed, addressed comments, ran tests.
Can you take a look again ?
cc [~ashutoshc], comments, Committed to trunk. Thanks, Namit!, Integrated in Hive-trunk-h0.21 #2076 (See [https://builds.apache.org/job/Hive-trunk-h0.21/2076/])
    HIVE-3891 : physical optimizer changes for auto sort-merge join (Namit Jain via Ashutosh Chauhan) (Revision 1471224)

     Result = FAILURE
hashutosh : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1471224
Files : 
* /hive/trunk/common/src/java/org/apache/hadoop/hive/conf/HiveConf.java
* /hive/trunk/conf/hive-default.xml.template
* /hive/trunk/ql/src/java/org/apache/hadoop/hive/ql/exec/AbstractMapJoinOperator.java
* /hive/trunk/ql/src/java/org/apache/hadoop/hive/ql/exec/JoinOperator.java
* /hive/trunk/ql/src/java/org/apache/hadoop/hive/ql/exec/Operator.java
* /hive/trunk/ql/src/java/org/apache/hadoop/hive/ql/exec/Task.java
* /hive/trunk/ql/src/java/org/apache/hadoop/hive/ql/exec/UnionOperator.java
* /hive/trunk/ql/src/java/org/apache/hadoop/hive/ql/optimizer/BucketingSortingReduceSinkOptimizer.java
* /hive/trunk/ql/src/java/org/apache/hadoop/hive/ql/optimizer/MapJoinProcessor.java
* /hive/trunk/ql/src/java/org/apache/hadoop/hive/ql/optimizer/physical/AbstractJoinTaskDispatcher.java
* /hive/trunk/ql/src/java/org/apache/hadoop/hive/ql/optimizer/physical/CommonJoinResolver.java
* /hive/trunk/ql/src/java/org/apache/hadoop/hive/ql/optimizer/physical/CommonJoinTaskDispatcher.java
* /hive/trunk/ql/src/java/org/apache/hadoop/hive/ql/optimizer/physical/PhysicalOptimizer.java
* /hive/trunk/ql/src/java/org/apache/hadoop/hive/ql/optimizer/physical/SortMergeJoinResolver.java
* /hive/trunk/ql/src/java/org/apache/hadoop/hive/ql/optimizer/physical/SortMergeJoinTaskDispatcher.java
* /hive/trunk/ql/src/java/org/apache/hadoop/hive/ql/plan/ConditionalResolverCommonJoin.java
* /hive/trunk/ql/src/java/org/apache/hadoop/hive/ql/plan/FileSinkDesc.java
* /hive/trunk/ql/src/test/queries/clientnegative/auto_sortmerge_join_1.q
* /hive/trunk/ql/src/test/queries/clientpositive/auto_sortmerge_join_1.q
* /hive/trunk/ql/src/test/queries/clientpositive/auto_sortmerge_join_10.q
* /hive/trunk/ql/src/test/queries/clientpositive/auto_sortmerge_join_13.q
* /hive/trunk/ql/src/test/queries/clientpositive/auto_sortmerge_join_14.q
* /hive/trunk/ql/src/test/queries/clientpositive/auto_sortmerge_join_2.q
* /hive/trunk/ql/src/test/queries/clientpositive/auto_sortmerge_join_3.q
* /hive/trunk/ql/src/test/queries/clientpositive/auto_sortmerge_join_4.q
* /hive/trunk/ql/src/test/queries/clientpositive/auto_sortmerge_join_5.q
* /hive/trunk/ql/src/test/queries/clientpositive/auto_sortmerge_join_6.q
* /hive/trunk/ql/src/test/queries/clientpositive/auto_sortmerge_join_7.q
* /hive/trunk/ql/src/test/queries/clientpositive/auto_sortmerge_join_8.q
* /hive/trunk/ql/src/test/queries/clientpositive/auto_sortmerge_join_9.q
* /hive/trunk/ql/src/test/queries/clientpositive/bucketsortoptimize_insert_1.q
* /hive/trunk/ql/src/test/queries/clientpositive/bucketsortoptimize_insert_2.q
* /hive/trunk/ql/src/test/queries/clientpositive/bucketsortoptimize_insert_3.q
* /hive/trunk/ql/src/test/queries/clientpositive/bucketsortoptimize_insert_4.q
* /hive/trunk/ql/src/test/queries/clientpositive/bucketsortoptimize_insert_5.q
* /hive/trunk/ql/src/test/queries/clientpositive/bucketsortoptimize_insert_6.q
* /hive/trunk/ql/src/test/queries/clientpositive/bucketsortoptimize_insert_7.q
* /hive/trunk/ql/src/test/queries/clientpositive/bucketsortoptimize_insert_8.q
* /hive/trunk/ql/src/test/results/clientnegative/auto_sortmerge_join_1.q.out
* /hive/trunk/ql/src/test/results/clientpositive/auto_sortmerge_join_1.q.out
* /hive/trunk/ql/src/test/results/clientpositive/auto_sortmerge_join_13.q.out
* /hive/trunk/ql/src/test/results/clientpositive/auto_sortmerge_join_14.q.out
* /hive/trunk/ql/src/test/results/clientpositive/auto_sortmerge_join_2.q.out
* /hive/trunk/ql/src/test/results/clientpositive/auto_sortmerge_join_3.q.out
* /hive/trunk/ql/src/test/results/clientpositive/auto_sortmerge_join_4.q.out
* /hive/trunk/ql/src/test/results/clientpositive/auto_sortmerge_join_5.q.out
* /hive/trunk/ql/src/test/results/clientpositive/auto_sortmerge_join_6.q.out
* /hive/trunk/ql/src/test/results/clientpositive/auto_sortmerge_join_7.q.out
* /hive/trunk/ql/src/test/results/clientpositive/auto_sortmerge_join_8.q.out
* /hive/trunk/ql/src/test/results/clientpositive/auto_sortmerge_join_9.q.out
* /hive/trunk/ql/src/test/results/clientpositive/bucketsortoptimize_insert_2.q.out
* /hive/trunk/ql/src/test/results/clientpositive/bucketsortoptimize_insert_4.q.out
* /hive/trunk/ql/src/test/results/clientpositive/bucketsortoptimize_insert_5.q.out
* /hive/trunk/ql/src/test/results/clientpositive/bucketsortoptimize_insert_6.q.out
, Integrated in Hive-trunk-hadoop2 #173 (See [https://builds.apache.org/job/Hive-trunk-hadoop2/173/])
    HIVE-3891 : physical optimizer changes for auto sort-merge join (Namit Jain via Ashutosh Chauhan) (Revision 1471224)

     Result = FAILURE
hashutosh : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1471224
Files : 
* /hive/trunk/common/src/java/org/apache/hadoop/hive/conf/HiveConf.java
* /hive/trunk/conf/hive-default.xml.template
* /hive/trunk/ql/src/java/org/apache/hadoop/hive/ql/exec/AbstractMapJoinOperator.java
* /hive/trunk/ql/src/java/org/apache/hadoop/hive/ql/exec/JoinOperator.java
* /hive/trunk/ql/src/java/org/apache/hadoop/hive/ql/exec/Operator.java
* /hive/trunk/ql/src/java/org/apache/hadoop/hive/ql/exec/Task.java
* /hive/trunk/ql/src/java/org/apache/hadoop/hive/ql/exec/UnionOperator.java
* /hive/trunk/ql/src/java/org/apache/hadoop/hive/ql/optimizer/BucketingSortingReduceSinkOptimizer.java
* /hive/trunk/ql/src/java/org/apache/hadoop/hive/ql/optimizer/MapJoinProcessor.java
* /hive/trunk/ql/src/java/org/apache/hadoop/hive/ql/optimizer/physical/AbstractJoinTaskDispatcher.java
* /hive/trunk/ql/src/java/org/apache/hadoop/hive/ql/optimizer/physical/CommonJoinResolver.java
* /hive/trunk/ql/src/java/org/apache/hadoop/hive/ql/optimizer/physical/CommonJoinTaskDispatcher.java
* /hive/trunk/ql/src/java/org/apache/hadoop/hive/ql/optimizer/physical/PhysicalOptimizer.java
* /hive/trunk/ql/src/java/org/apache/hadoop/hive/ql/optimizer/physical/SortMergeJoinResolver.java
* /hive/trunk/ql/src/java/org/apache/hadoop/hive/ql/optimizer/physical/SortMergeJoinTaskDispatcher.java
* /hive/trunk/ql/src/java/org/apache/hadoop/hive/ql/plan/ConditionalResolverCommonJoin.java
* /hive/trunk/ql/src/java/org/apache/hadoop/hive/ql/plan/FileSinkDesc.java
* /hive/trunk/ql/src/test/queries/clientnegative/auto_sortmerge_join_1.q
* /hive/trunk/ql/src/test/queries/clientpositive/auto_sortmerge_join_1.q
* /hive/trunk/ql/src/test/queries/clientpositive/auto_sortmerge_join_10.q
* /hive/trunk/ql/src/test/queries/clientpositive/auto_sortmerge_join_13.q
* /hive/trunk/ql/src/test/queries/clientpositive/auto_sortmerge_join_14.q
* /hive/trunk/ql/src/test/queries/clientpositive/auto_sortmerge_join_2.q
* /hive/trunk/ql/src/test/queries/clientpositive/auto_sortmerge_join_3.q
* /hive/trunk/ql/src/test/queries/clientpositive/auto_sortmerge_join_4.q
* /hive/trunk/ql/src/test/queries/clientpositive/auto_sortmerge_join_5.q
* /hive/trunk/ql/src/test/queries/clientpositive/auto_sortmerge_join_6.q
* /hive/trunk/ql/src/test/queries/clientpositive/auto_sortmerge_join_7.q
* /hive/trunk/ql/src/test/queries/clientpositive/auto_sortmerge_join_8.q
* /hive/trunk/ql/src/test/queries/clientpositive/auto_sortmerge_join_9.q
* /hive/trunk/ql/src/test/queries/clientpositive/bucketsortoptimize_insert_1.q
* /hive/trunk/ql/src/test/queries/clientpositive/bucketsortoptimize_insert_2.q
* /hive/trunk/ql/src/test/queries/clientpositive/bucketsortoptimize_insert_3.q
* /hive/trunk/ql/src/test/queries/clientpositive/bucketsortoptimize_insert_4.q
* /hive/trunk/ql/src/test/queries/clientpositive/bucketsortoptimize_insert_5.q
* /hive/trunk/ql/src/test/queries/clientpositive/bucketsortoptimize_insert_6.q
* /hive/trunk/ql/src/test/queries/clientpositive/bucketsortoptimize_insert_7.q
* /hive/trunk/ql/src/test/queries/clientpositive/bucketsortoptimize_insert_8.q
* /hive/trunk/ql/src/test/results/clientnegative/auto_sortmerge_join_1.q.out
* /hive/trunk/ql/src/test/results/clientpositive/auto_sortmerge_join_1.q.out
* /hive/trunk/ql/src/test/results/clientpositive/auto_sortmerge_join_13.q.out
* /hive/trunk/ql/src/test/results/clientpositive/auto_sortmerge_join_14.q.out
* /hive/trunk/ql/src/test/results/clientpositive/auto_sortmerge_join_2.q.out
* /hive/trunk/ql/src/test/results/clientpositive/auto_sortmerge_join_3.q.out
* /hive/trunk/ql/src/test/results/clientpositive/auto_sortmerge_join_4.q.out
* /hive/trunk/ql/src/test/results/clientpositive/auto_sortmerge_join_5.q.out
* /hive/trunk/ql/src/test/results/clientpositive/auto_sortmerge_join_6.q.out
* /hive/trunk/ql/src/test/results/clientpositive/auto_sortmerge_join_7.q.out
* /hive/trunk/ql/src/test/results/clientpositive/auto_sortmerge_join_8.q.out
* /hive/trunk/ql/src/test/results/clientpositive/auto_sortmerge_join_9.q.out
* /hive/trunk/ql/src/test/results/clientpositive/bucketsortoptimize_insert_2.q.out
* /hive/trunk/ql/src/test/results/clientpositive/bucketsortoptimize_insert_4.q.out
* /hive/trunk/ql/src/test/results/clientpositive/bucketsortoptimize_insert_5.q.out
* /hive/trunk/ql/src/test/results/clientpositive/bucketsortoptimize_insert_6.q.out
, This issue has been fixed and released as part of 0.12 release. If you find further issues, please create a new jira and link it to this one., Doc note:  This adds *hive.auto.convert.sortmerge.join.to.mapjoin* to HiveConf.java in release 0.12.0, so it needs to be documented in the wiki.

* [Configuration Properties -- Query and DDL Execution | https://cwiki.apache.org/confluence/display/Hive/Configuration+Properties#ConfigurationProperties-QueryandDDLExecution]

Added a TODOC12 label.]