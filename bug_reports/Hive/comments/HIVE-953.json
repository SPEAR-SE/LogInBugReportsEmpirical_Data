[Strange, that test is working fine on my end. Inside script_broken_pipe3.q, partial consumption is enabled with a set command, so it should work regardless of what the setting for partial consumption was beforehand. 

However, script_broken_pipe1.q and script_broken_pipe2.q, were written with having partial consumption disabled as per defaults and lack a set command. So those tests should fail if partial consumption is enabled by default - can you check if that is the case?, Just to clarify - on my end, script_broken_pipe1.q and script_broken_pipe2.q are failing with partial consumption enabled by default. I wanted to see if that's the case with your setup., They are run as part of negative tests - for me 1/2 are broken as expected - I mean, they dont lead to diffs

3 as it stood before I changed it yesterday was leading to diffs, Could I take a look at your log files? When I say 'failed', I don't necessarily see diffs - I see something like the following:

{code}
    [junit] Exception: Client Execution failed with error code = 0
    [junit] junit.framework.AssertionFailedError: Client Execution failed with error code = 0
    [junit]     at junit.framework.Assert.fail(Assert.java:47)
    [junit]     at org.apache.hadoop.hive.cli.TestNegativeCliDriver.testNegativeCliDriver_script_broken_pipe2(TestNegativeCliDriver.java:51)
    [junit]     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    [junit]     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
    [junit]     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
    [junit]     at java.lang.reflect.Method.invoke(Method.java:597)
    [junit]     at junit.framework.TestCase.runTest(TestCase.java:154)
    [junit]     at junit.framework.TestCase.runBare(TestCase.java:127)
    [junit]     at junit.framework.TestResult$1.protect(TestResult.java:106)
    [junit]     at junit.framework.TestResult.runProtected(TestResult.java:124)
    [junit]     at junit.framework.TestResult.run(TestResult.java:109)
    [junit]     at junit.framework.TestCase.run(TestCase.java:118)
    [junit]     at junit.framework.TestSuite.runTest(TestSuite.java:208)
    [junit]     at junit.framework.TestSuite.run(TestSuite.java:203)
    [junit]     at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:420)
    [junit]     at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.launch(JUnitTestRunner.java:911)
    [junit]     at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.main(JUnitTestRunner.java:768)
    [junit] Tests run: 1, Failures: 1, Errors: 0, Time elapsed: 12.676 sec
    [junit] Test org.apache.hadoop.hive.cli.TestNegativeCliDriver FAILED
{code}
, I dont have them anymore - but run with
test.silent=false


ant test ..... -Dtest.silent=false


It will print more info.

, With respect to pipe3, I still was not able to produce an error. I've attached the output of the test run on my checkout. Can you try running that test again?

In any case, I've fixed the tests for pipe1 and pipe2 to run correctly with partial consumption enabled in the attached patch., Sorry for the confusion - there were changes to the open source repository that weren't propagated to the FB repository.

Anyway, the problem is that there was a change to ScriptOperator that broke the test. The change always reported the exit value of the script as 0, meaning that it was always successful. Since the test was expecting the script to fail with an error code, the negative test broke. Removing 'set hive.exec.script.allow.partial.consumption = true' allowed the negative test to pass as disallowing partial consumption would result in a broken pipe exception and masked the fact that the error code was incorrect.

In the 2nd patch, I fixed this and included the modifications for the other two tests as well., +1

will merge if the tests pass, Committed. Thanks Paul]