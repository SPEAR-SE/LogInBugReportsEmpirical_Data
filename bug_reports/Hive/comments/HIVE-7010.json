[Done:

* [WebHCat Reference |https://cwiki.apache.org/confluence/display/Hive/WebHCat+Reference]
* [GET queue |https://cwiki.apache.org/confluence/display/Hive/WebHCat+Reference+JobIDs]
* [GET queue/:jobid |https://cwiki.apache.org/confluence/display/Hive/WebHCat+Reference+JobInfo]
* [DELETE queue/:jobid |https://cwiki.apache.org/confluence/display/Hive/WebHCat+Reference+DeleteJob]
* [GET jobs |https://cwiki.apache.org/confluence/display/Hive/WebHCat+Reference+Jobs]
* [GET jobs/:jobid |https://cwiki.apache.org/confluence/display/Hive/WebHCat+Reference+Job]
* [DELETE jobs/:jobid |https://cwiki.apache.org/confluence/display/Hive/WebHCat+Reference+DeleteJobID], +1
Thanks!, Hi [~leftylev] - I am curious whether the v1 is going to be bumped up to v2 in response to the contract change. I believe that it is easier for consuming projects - such as Apache Knox - to be able to multiplex across expected APIs with specific version indicators.
, [~ekoifman], can you answer [~lmccay]'s question?  Because I don't know., I think the general idea for bumping version number is when we introduce some backwards incompatible change to an existing end point.  This is arguable not the case here.  So, no, we were not planning to introduce v2 at this point., Hmmmm... so this change is backwards compatible then? What happens when a client calls the removed API?, The general rule in HCat/WebHCat is to keep deprecated API for 2 releases.  That is why it has been removed now.  
If we had added templeton/v2/jobs instead of templeton/v1/jobs, this would not help the client once v1 is desupported.  So we'd have to support deprecated API for ever...

I think the fundamental issue is that API evolution is not well defined in WebHCat, as you can see it's still at v1.

Is this change something that Knox can handle or should we restore the API?  (The change was made in trunk, so we can still restore it before 0.14 ships), [~ekoifman] - thanks for the insight. I am still getting my head around how Knox will handle contract changes across the entire ecosystem. I don't think that asking you to revert it will help that in general but getting some sense of how the APIs evolve will inform how we should track those changes. It seems that that we will need to support component versioning rather than API versioning. If this is how APIs evolve across the other components as well then the version indicator in the URL doesn't seem very meaningful to me., I think one possibility is that whenever any backward incompatible change is made, to bump the version and make sure all the currently supported endpoints are available there.  So that every client either only makes v1 calls, or v2 calls, etc but not some mix across versions.  Then when time comes, entire v1 namespace is removed.  I'm not sure how much easier this is for clients.  If you have suggestions, please let me know., That was the behavior that I expected actually.
Getting all components to adhere to this would like be difficult but I think that it makes sense for all components that do support the version indicator to take that approach. Some components don't actually even have a version indicator in their APIs.]