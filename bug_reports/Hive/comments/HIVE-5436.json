[Since Hive current has only one mode (default) for error handling, null is expected for all error cases such as overflow, divide by zero, etc. Hive needs to be consistent on that. However, in the future, other modes may be introduced to demonstrate different behaviours., As a fyi 
#1 and #3 will be addressed in a global context in HIVE-5660.
#4 and #5 should be address in a global context in HIVE-5655., Thanks [~xuefuz] for the update. Can you please let me know if HIVE-5660 is in progress? Else, I will look at it. This is required before I make further changes to HIVE-5382 ( to cover all the edge cases). , [~hsubramaniyan] I haven't started working on HIVE-5660. However, I expect that the work will be mostly on numeric UDFs, such as UDFOPPlus. As part of HIVE-3976 and its child task HIVE-5356, these UDFs will be re-written. Thus, I'm afraid that any work done on those UDFs will be thrown away. HIVE-5356 is in progress.

Could you please explain why you need this for HIVE-5382? I expect HIVE-5660 will be in 0.13. Let me know if you need it before that and see how we can coordinate., [~xuefu] Reasons why I thought of fixing the consistency first:
1. I wanted to see how the intermediate results are handled in case of numericals. For example, for tiny int (1228+1228)/20 will lead to a in-range result, where as the intermediate result 1228+1228 will be a non tiny int.  This scenario will be very common in case of exponential notation.
2. HIVE-5382 will need a baseline to compare the string cast results with non-string cast results. My plan was to use testcases like this :
select cast('-1.5e2' as int)-cast(-1.5e2 as int) from tmp and verify that the result is always 0. This will ensure consistency across cast from string->numericals (and will expose any existing bugs which is fixed in future for only one of the cast types since the non-string cast and string cast are handled separately)., [~xuefuz] Please see the comment above and let me know if you have any questions., [~hsubramaniyan] thanks for your explanation. Personally I think for HIVE-5382, current focus might be on making iin-range casting work as expected and letting error handling cases be unified until HIVE-5660. Per interdeciate result, Hive evaluates on an expression tree. In general, the moment a node evaluates to null, the parent operator evaluates to null also.

Feel free to work on HIVE-5660 if you like. I'm just a little bit concerned that the work you done will probably be thrown away because of HIVE-5356. This is why I planned to work on it after HIVE-5356, which I'm current working on. Pleases. let me know your plan. Thank, [~xuefuz] I am closing this issue based on your previous comments.

Thanks
Hari, Not present in the latest version of hive.]