[ok with the change in the metastore. DB.java also has a reference to METASTOREWAREHOUSEDIR - but not clear that it's being used at all.

the change in LoadSemanticAnalyzer is probably not necessary (a test case might have made this clear). if i am reading this right - the net effect being desired is that the the from path should use fs.default.name for scheme/authority - right?

but this was already happening, a little twined but reading the (current) code:

    fs = FileSystem.get(fromURI, conf);
    String fromAuthority = null;

    // fall back to configuration based scheme if necessary
    if(StringUtils.isEmpty(fromScheme)) {
      fromScheme = fs.getUri().getScheme();
      fromAuthority = fs.getUri().getAuthority();
    }

    if(fromScheme.equals("hdfs")) {
      fromAuthority = StringUtils.isEmpty(fromURI.getAuthority()) ?
        fs.getUri().getAuthority() : fromURI.getAuthority();
    }

the fs initialization will get the scheme and authority from fs.default.name if the fromURI does not supply them. Then we test one by one if scheme and authority are already supplied - if not - we use the one supplied by fs (so use fs.default.name for both of these as a default).

unless i am missing something - we are just trying to do the same thing in a slightly different way?


, The reference in DB.java will go away after removing old metastore code.

when input path is just simply '/user/hive/warehouse/dir1' then the FileSystem.get() call doesn't know which the scheme/auth to use. It doesn't use the config  param fs.default.name value. That is the reason why Josh/Jeremy were getting errors when 'hdfs://localhost:9000' wasn't in the load inpath file name.

May be I could just set fromAuthority in local mode to be null and if the scheme is hdfs then it to be what ever is given in the input URI or the fs.default.name's authority instead of determining it from fs.getURI().getAuthority().

, hmm - i don't understand this. maybe we need to ping dhruba. fs object has to have scheme auth - otherwise how does it know what file system to talk to (and the fs object has already been instantiated - it's either a DistributedFileSystem object or a LocalFileSystem based object). 

Is this reproducible (with a populated fs.default.name)?, yeah, it is reproducible on our production cluster. i think it becomes null which is local file system i think. we can confirm it with dhruba/code tomorrow., it can't default to local file system (that's the whole point of fs.default.name). but perhaps the uri/scheme are populated later on on demand ..

if that is the case (and the current code is not working) - i am ok with the changes.

man - we would be able to regression test this kind of stuff if we had the minimr/dfs stuff setup .., I think FileSystem.get() does return the configured default scheme and authority. Here is the updated patch with just the change to make hdfs relative paths to work and the metastore.warehouse param to work properly., +1

do we have a good explanation for what was happening in Josh's case then?, fusion mount truncated my previous patch. reattaching the file., I just committed this. Thanks Prasad!]