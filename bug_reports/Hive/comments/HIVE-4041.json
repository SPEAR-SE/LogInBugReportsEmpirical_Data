[attached Design notes, Went through the design doc. Thanks, Harish for writing this up. 
In light of discussion over on HIVE-4108 you may want to update section 3. Also, section 4 needs to be updated because of it. I believe because of dropping of implicit partitioning concept, design (and thus implementation) will be cleaner (and thus easier), which is a good thing., hbutani requested code review of "HIVE-4041 [jira] Support multiple partitionings in a single Query".

Reviewers: JIRA, ashutoshc

add support for multiple partitioning

Currently we disallow queries if the partition specifications of all Wdw fns are not the same. We can relax this by generating multiple PTFOps based on the unique partitionings in a Query. For partitionings that only differ in sort, we can introduce a sort step in between PTFOps, which can happen in the same Reduce task.

TEST PLAN
  added tests to windowing_multipartitioning.q

REVISION DETAIL
  https://reviews.facebook.net/D9381

AFFECTED FILES
  data/files/flights_tiny.txt
  data/files/part.rc
  data/files/part.seq
  ql/src/java/org/apache/hadoop/hive/ql/optimizer/ColumnPrunerProcFactory.java
  ql/src/java/org/apache/hadoop/hive/ql/optimizer/ReduceSinkDeDuplication.java
  ql/src/java/org/apache/hadoop/hive/ql/parse/PTFInvocationSpec.java
  ql/src/java/org/apache/hadoop/hive/ql/parse/PTFTranslator.java
  ql/src/java/org/apache/hadoop/hive/ql/parse/SemanticAnalyzer.java
  ql/src/java/org/apache/hadoop/hive/ql/parse/WindowingComponentizer.java
  ql/src/java/org/apache/hadoop/hive/ql/parse/WindowingSpec.java
  ql/src/test/queries/clientpositive/windowing_multipartitioning.q
  ql/src/test/results/clientpositive/windowing_multipartitioning.q.out

MANAGE HERALD RULES
  https://reviews.facebook.net/herald/view/differential/

WHY DID I GET THIS EMAIL?
  https://reviews.facebook.net/herald/transcript/22545/

To: JIRA, ashutoshc, hbutani
, ashutoshc has commented on the revision "HIVE-4041 [jira] Support multiple partitionings in a single Query".

  First pass through patch. Some initial questions.

INLINE COMMENTS
  ql/src/java/org/apache/hadoop/hive/ql/optimizer/ReduceSinkDeDuplication.java:415 Why do we need to do this null check here ?
  ql/src/java/org/apache/hadoop/hive/ql/optimizer/ReduceSinkDeDuplication.java:425 Same question.
  ql/src/java/org/apache/hadoop/hive/ql/parse/PTFTranslator.java:482 This will set Order on all queries ?
  Consider query like sum(i) over (partition by si) ... this doesn't need an ordering, right ?
  ql/src/java/org/apache/hadoop/hive/ql/optimizer/ColumnPrunerProcFactory.java:212 Why do we need to change this function?

REVISION DETAIL
  https://reviews.facebook.net/D9381

To: JIRA, ashutoshc, hbutani
, hbutani has commented on the revision "HIVE-4041 [jira] Support multiple partitionings in a single Query".

INLINE COMMENTS
  ql/src/java/org/apache/hadoop/hive/ql/optimizer/ColumnPrunerProcFactory.java:212 We need to maintain the order of the original columns. This is because at runtime we reconstruct the OIs using the serde props map which has the column names and types.
  ql/src/java/org/apache/hadoop/hive/ql/optimizer/ReduceSinkDeDuplication.java:415 because ExprNodeConstantDesc returns a null for the getCols() call.
  for the over() case we add a Constant expression to the Partition list
  ql/src/java/org/apache/hadoop/hive/ql/optimizer/ReduceSinkDeDuplication.java:425 same reason as above
  ql/src/java/org/apache/hadoop/hive/ql/parse/PTFTranslator.java:482 What we are doing today is adding the partition columns as a prefix to the order expressions. Functionally it should not matter; but it is not needed and probably has a performance impact. I need to test that removal.
  Was planning to do this for Jira 4109. Didn't want to change this behavior in this Jira. But with the refactoring it is quite easy to remove the prefixing code.

REVISION DETAIL
  https://reviews.facebook.net/D9381

To: JIRA, ashutoshc, hbutani
, ashutoshc has commented on the revision "HIVE-4041 [jira] Support multiple partitionings in a single Query".

  Some more questions.

INLINE COMMENTS
  ql/src/java/org/apache/hadoop/hive/ql/optimizer/ReduceSinkDeDuplication.java:415 I see. I thought with following query I can simulate the same problem even on trunk.
  select 1 from over10k group by 1;

  But this didn't result in NPE and query ran successfully. Is this query good approximation to simulate this path ? My motivation is somehow to simulate this code path without over clause and thus expose bug on trunk and fix it there, so we don't need to do this in branch.
  ql/src/java/org/apache/hadoop/hive/ql/optimizer/ColumnPrunerProcFactory.java:212 Hmm. I think we hold on to the schema for PTFOp way too early in semantic phase. Apart from changes required here, this holding on to the schema is not playing well with other compile time optimization which hive does after semantic analysis. Other operators don't do this. I think we need to spend a bit of time on this. Can you point to me where we hold on to schema in SemanticAnalyzer and why is it necessary?
  ql/src/java/org/apache/hadoop/hive/ql/parse/PTFTranslator.java:482 I am fine with doing it in follow-up. But if possible we should get rid of this. This probably result in runtime perf impact since I think this will force hadoop secondary sort so that values for a given key come out sorted. Further, adding extra constraints will lessen the opportunity to do compile time optimizations like filter push down (see my comments on HIVE-4180).
  ql/src/java/org/apache/hadoop/hive/ql/parse/WindowingComponentizer.java:38 It will be good to define group more concretely. If I am getting this right, this is group of over functions which has same partitioning. Is that correct ?
  So, a group may have multiple functions associated with it (but all on same partitioning). So, group -> one PTFOp on which there will be multiple functions working? Or a group implies multiple PTFOp chained in same reducer one after other each working on their own function.
  ql/src/java/org/apache/hadoop/hive/ql/parse/WindowingComponentizer.java:85 Which filter this is? Is this having clause ? But I thought we already removed support for that. If not, I think we should. Or this regular where clause. If later, we should not consume other operators of query in PTOperator.
  ql/src/test/queries/clientpositive/windowing_multipartitioning.q:21 It will be good to add more tests from the google document which I shared with you. It has multipartitioning tests towards the end.

REVISION DETAIL
  https://reviews.facebook.net/D9381

To: JIRA, ashutoshc, hbutani
, hbutani has commented on the revision "HIVE-4041 [jira] Support multiple partitionings in a single Query".

INLINE COMMENTS
  ql/src/java/org/apache/hadoop/hive/ql/optimizer/ColumnPrunerProcFactory.java:212 Yes the translation code could do with your review.
  We were not paying much attention to optimization at the time we wrote it.
  So the TableFuncDef holds onto ShapeDetails(input, output..)
  The Shape class has Serde props that we use to reconstruct the OIs during runtime.
  This happens in PTFTranslator. Read the translate for WindowingSpec method (line 138) in PTFTranslator.
  ql/src/java/org/apache/hadoop/hive/ql/optimizer/ReduceSinkDeDuplication.java:415 Just added a Jira 4186 for this.
  ql/src/java/org/apache/hadoop/hive/ql/parse/PTFTranslator.java:482 yes I agree. I just don't want to make these changes in this Jira. Want to only add multi partition support here.
  ql/src/java/org/apache/hadoop/hive/ql/parse/WindowingComponentizer.java:38 I will add more comments. So there is:
  - 1 PTFOp
  - It can contain one or more PTF invocations.
  - When the PTF is WindowTableFunc, it can contain 1 or more UDAFs; they have the same partitioning.
  - During translation we create a WindowingSpec for each destination with Windowing(over clauses).
  - Here we then componentize the single WindowingSpec into multiple WindowingSpecs based on the partitioning.
  ql/src/java/org/apache/hadoop/hive/ql/parse/WindowingComponentizer.java:85 Yes the having is to be removed. Haven't gotten around to it. Again didn't want to make this change in this Jira. It is on my todo.
  ql/src/test/queries/clientpositive/windowing_multipartitioning.q:21 I added all the multipartition tests from the spreadsheet except the ones that have no order. Those I will add once we resolve how to handle no order.

REVISION DETAIL
  https://reviews.facebook.net/D9381

To: JIRA, ashutoshc, hbutani
, ashutoshc has accepted the revision "HIVE-4041 [jira] Support multiple partitionings in a single Query".

  Changes look good. I will commit this once HIVE-4186 is in trunk and after I have merged trunk into branch.

INLINE COMMENTS
  ql/src/java/org/apache/hadoop/hive/ql/parse/PTFTranslator.java:482 Can you file a follow-up jira for this?
  ql/src/java/org/apache/hadoop/hive/ql/parse/WindowingComponentizer.java:85 Can you file a follow-up jira for this?
  ql/src/test/queries/clientpositive/windowing_multipartitioning.q:21 Can you file a follow-up jira for this?

REVISION DETAIL
  https://reviews.facebook.net/D9381

BRANCH
  HIVE-4041

ARCANIST PROJECT
  hive

To: JIRA, ashutoshc, hbutani
, hbutani updated the revision "HIVE-4041 [jira] Support multiple partitionings in a single Query".

    - Merge branch 'ptf' into HIVE-4041
    - updates for 4041

Reviewers: ashutoshc, JIRA

REVISION DETAIL
  https://reviews.facebook.net/D9381

CHANGE SINCE LAST DIFF
  https://reviews.facebook.net/D9381?vs=29775&id=30057#toc

BRANCH
  HIVE-4041

ARCANIST PROJECT
  hive

AFFECTED FILES
  data/files/flights_tiny.txt
  data/files/part.rc
  data/files/part.seq
  ql/src/java/org/apache/hadoop/hive/ql/optimizer/ColumnPrunerProcFactory.java
  ql/src/java/org/apache/hadoop/hive/ql/parse/PTFInvocationSpec.java
  ql/src/java/org/apache/hadoop/hive/ql/parse/PTFTranslator.java
  ql/src/java/org/apache/hadoop/hive/ql/parse/SemanticAnalyzer.java
  ql/src/java/org/apache/hadoop/hive/ql/parse/WindowingComponentizer.java
  ql/src/java/org/apache/hadoop/hive/ql/parse/WindowingSpec.java
  ql/src/test/queries/clientpositive/windowing_multipartitioning.q
  ql/src/test/results/clientpositive/windowing_multipartitioning.q.out

To: JIRA, ashutoshc, hbutani
, Thanks Ashutosh. I have
- removed change to ReduceSinkDeDuplication
- added comments to WindowingComponentizer., Following negative tests failed:
* ptf_negative_IncompatibleDistributeClause.q
* ptf_negative_IncompatibleOrderInWindowDefs.q
* ptf_negative_IncompatiblePartitionInWindowDefs.q
* ptf_negative_IncompatibleSortClause.q
* ptf_negative_InvalidValueBoundary.q, All the +ve tests did pass., hbutani updated the revision "HIVE-4041 [jira] Support multiple partitionings in a single Query".

    - remove negative tests, that are valid now; expose underlying error when componentization fails

Reviewers: ashutoshc, JIRA

REVISION DETAIL
  https://reviews.facebook.net/D9381

CHANGE SINCE LAST DIFF
  https://reviews.facebook.net/D9381?vs=30057&id=30159#toc

BRANCH
  HIVE-4041

ARCANIST PROJECT
  hive

AFFECTED FILES
  data/files/flights_tiny.txt
  data/files/part.rc
  data/files/part.seq
  ql/src/java/org/apache/hadoop/hive/ql/optimizer/ColumnPrunerProcFactory.java
  ql/src/java/org/apache/hadoop/hive/ql/parse/PTFInvocationSpec.java
  ql/src/java/org/apache/hadoop/hive/ql/parse/PTFTranslator.java
  ql/src/java/org/apache/hadoop/hive/ql/parse/SemanticAnalyzer.java
  ql/src/java/org/apache/hadoop/hive/ql/parse/WindowingComponentizer.java
  ql/src/java/org/apache/hadoop/hive/ql/parse/WindowingSpec.java
  ql/src/test/queries/clientnegative/ptf_negative_IncompatibleDistributeClause.q
  ql/src/test/queries/clientnegative/ptf_negative_IncompatibleOrderInWindowDefs.q
  ql/src/test/queries/clientnegative/ptf_negative_IncompatiblePartitionInWindowDefs.q
  ql/src/test/queries/clientnegative/ptf_negative_IncompatibleSortClause.q
  ql/src/test/queries/clientnegative/ptf_negative_InvalidValueBoundary.q
  ql/src/test/queries/clientpositive/windowing_multipartitioning.q
  ql/src/test/results/clientnegative/ptf_negative_IncompatibleDistributeClause.q.out
  ql/src/test/results/clientnegative/ptf_negative_IncompatibleOrderInWindowDefs.q.out
  ql/src/test/results/clientnegative/ptf_negative_IncompatiblePartitionInWindowDefs.q.out
  ql/src/test/results/clientnegative/ptf_negative_IncompatibleSortClause.q.out
  ql/src/test/results/clientnegative/ptf_negative_InvalidValueBoundary.q.out
  ql/src/test/results/clientpositive/windowing_multipartitioning.q.out

To: JIRA, ashutoshc, hbutani
, Committed to branch. Thanks, Harish!]