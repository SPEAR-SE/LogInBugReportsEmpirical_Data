[I'm not sure how setting the default value to true violates SQL compliance. As far as I know, for this Hive doesn't complain about any syntax error.

My further concern is about flipping this back and forth, which confuses users and complicates admin's job., [~xuefuz], obviously it does, because if this is set to true, queries with cartesian product throw an error.

{code:sql}
SELECT * FROM
mytable src1, mytable src2;
{code}
{quote}
org.apache.hadoop.hive.ql.parse.SemanticException: Cartesian products are disabled for safety reasons. If you know what you are doing, please make sure that hive.strict.checks.cartesian.product is set to false and that hive.mapred.mode is not set to 'strict' to enable them.
{quote}

I do not not know if this property was actually ever changed, but IMO it makes sense to set it by default to _false_ and if a user wants to have more control over his query workload, then he can enable it., [~jcamachorodriguez] this was enabled by default in HIVE-12413, I don't think erring out and saying that "Cartesian products are disabled for safety reasons" violates compliance. Further I'd argue that being compliant is not our ultimate goal.

As to b/c, the default has been true since HIVE-12727, which is released in 2.0. I don't think we should make existing user suffer just to make new users happier., [~sershe], thank you for pointing that out; I did not remember that.

Then I agree with [~xuefuz] that a conscious decision should be made so we do not flip this back and forth as he said. Probably it all depends on the direction that we want to give to the project..., [~xuefuz], OK, then it does not violate compliance... but I would argue it is better to disable it by default and let the admin decide whether users should be able to execute cartesian products or not. That would give us better tests coverage and the possibility to run randomly a cartesian product if we want to.

Btw, cartesian product does not need to be specified explicitly; it might be produced by the Calcite optimizer too e.g. if we can prune with a filter on a constant equality both inputs of a join.]