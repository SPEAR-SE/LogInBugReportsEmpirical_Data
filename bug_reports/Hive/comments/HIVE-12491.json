[band-aid fix.

{code}
              // To avoid denominator getting larger and aggressively reducing
              // number of rows, we will ease out denominator.
              denom = getEasedOutDenominator(new ArrayList<Long>(new HashSet<Long>(distinctVals)));
{code}, Actually, this might be a candidate for the PK-FK case, since _col0 there is a primary key., [~jcamachorodriguez]: since Calcite has a similar rule internally - what would be the right heuristic here?, [~gopalv] In CBO, we use same logic for easedOutDenominator which is here in StatsRuleProcFactory. Check out : HiveRelMdSelectivity::exponentialBackoff()
However, PK-FK inference is only done for a single key case currently in StatsRuleProcFactory. Are you thinking extending that to multiple keys will help us in getting better row estimates for this particular query?
I am not sure why is it currently restricted to 1 key. [~pxiong] might know more if there are any gotchas in lifting that restriction ?, PK-FK inference in StatsRuleProcFactory is not limited to a single PK and a single FK. It is limited to a single PK only. That is, we allow single PK and multiple FKs. In a single PK and multiple FKs case, we first use PK-FK relationship to estimate the row count, NDV, etc and then join with other FKs without PK-FK inference. Hope it helps., I guess what Gopal is pointing out is multiple PK case is missing which might help this use case. (as demonstrated in his WIP patch). 
Other thing is we failed to recognize that out of 3 columns, two are different udfs on same column, so we incorrectly computed denom for that. Ideally, we need to fix both but doing atleast one of these two will help., [~gopalv] If you have minimal query which repros the effect, can you post it here?, Added a minimal query which demonstrates the issue., NDVs for UDFs is currently assumed to be worst case which is the number of rows. Ideally, for built-in UDFs, if the UDFType is non-deterministic then we should assume the above worst case (ex. UDFRand) as we cannot estimate the output NDV. But if the UDF is deterministic like UDFMonth then we should instead use the NDV of the column referenced in the UDF. , For the example in the description, NDV for year(_col2) is 821974390 and NDV for month(_col2) is 821974390. I am guessing this value came from number of rows of the relation that _col2 belongs to. Since, year and month are built-in UDFs and are deterministic we should instead get the NDV of _col2. This will automatically ease out the denominator and will provide better estimates., [~prasanth_j] Could you take a look?, LGTM, +1. Pending tests. Any idea what's the estimate for the query that [~gopalv] posted?, looks like a good heuristic for NDV estimation of UDFs. +1. Btw, could you move 
{code}
1280	         if (countDistincts > numRows) {
1281	           countDistincts = numRows;
1282	         }
{code}
to the inside of the previous for loop and break when countDistincts is over numRows? It may save some CPU cycles. , Addressed comments and little bit of refactoring in StatsRuleProcFactory (no logic change there) for better readability., https://reviews.apache.org/r/40827/, We can exploit semantic information about known udfs which have bounded NDVs., 

Here are the results of testing the latest attachment:
https://issues.apache.org/jira/secure/attachment/12775220/HIVE-12491.5.patch

{color:red}ERROR:{color} -1 due to no test(s) being added or modified.

{color:red}ERROR:{color} -1 due to 13 failed/errored test(s), 9869 tests executed
*Failed tests:*
{noformat}
TestHWISessionManager - did not produce a TEST-*.xml file
org.apache.hadoop.hive.cli.TestCliDriver.testCliDriver_orc_llap
org.apache.hadoop.hive.cli.TestCliDriver.testCliDriver_union17
org.apache.hadoop.hive.cli.TestMiniLlapCliDriver.testCliDriver_dynamic_partition_pruning
org.apache.hadoop.hive.cli.TestMiniLlapCliDriver.testCliDriver_tez_union_multiinsert
org.apache.hadoop.hive.cli.TestMiniLlapCliDriver.testCliDriver_vectorized_dynamic_partition_pruning
org.apache.hadoop.hive.cli.TestMiniTezCliDriver.testCliDriver_explainuser_2
org.apache.hadoop.hive.cli.TestMiniTezCliDriver.testCliDriver_mergejoin
org.apache.hadoop.hive.cli.TestMiniTezCliDriver.testCliDriver_tez_union_multiinsert
org.apache.hadoop.hive.cli.TestNegativeCliDriver.testNegativeCliDriver_authorization_uri_import
org.apache.hadoop.hive.cli.TestSparkCliDriver.testCliDriver_union17
org.apache.hadoop.hive.metastore.TestHiveMetaStorePartitionSpecs.testGetPartitionSpecs_WithAndWithoutPartitionGrouping
org.apache.hive.jdbc.TestSSL.testSSLVersion
{noformat}

Test results: http://ec2-174-129-184-35.compute-1.amazonaws.com/jenkins/job/PreCommit-HIVE-TRUNK-Build/6195/testReport
Console output: http://ec2-174-129-184-35.compute-1.amazonaws.com/jenkins/job/PreCommit-HIVE-TRUNK-Build/6195/console
Test logs: http://ec2-174-129-184-35.compute-1.amazonaws.com/logs/PreCommit-HIVE-TRUNK-Build-6195/

Messages:
{noformat}
Executing org.apache.hive.ptest.execution.TestCheckPhase
Executing org.apache.hive.ptest.execution.PrepPhase
Executing org.apache.hive.ptest.execution.ExecutionPhase
Executing org.apache.hive.ptest.execution.ReportingPhase
Tests exited with: TestsFailedException: 13 tests failed
{noformat}

This message is automatically generated.

ATTACHMENT ID: 12775220 - PreCommit-HIVE-TRUNK-Build, Test failures are either unrelated or stats update. Pushed to master.]