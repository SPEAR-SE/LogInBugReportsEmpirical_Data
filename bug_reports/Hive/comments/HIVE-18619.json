[Note that session based temporary table is only visible to its session. 
Thus there is no possible issues in Concurrency and Isolation., Talked with Vineet regarding generating failure in INSERT. Probably using debugger might be the best option. , A possible test case scenario for this jira is:
1. Start a Session
2. CREATE TEMPORARY TABLE mm_tab in MM(Micro-managed).
3. INSERT INTO mm_tab  -- SUCCEEDED
4. INSERT INTO mm_tab -- FAILED and should leave the current statement's delta directory which should be recognized as aborted
5. SELECT FROM mm_tab -- Should only return the data at 3.
This simple test case may verify basic case for atomicity of operations on TEMPORARY MM table. 

The patch for writeId for Replication HIVE-18192 may will affect the behavior when checked in., to test this in UT you can use HiveConf.HIVETESTMODEROLLBACKTXN

after you set it, commit will fail - it's used simulate failures, Using the flag by Eugene we can roll back a transaction in the local TxnManager instance inside the Driver (as Hadoop and Metastore client) 
in a JUnit based unit test. 
The same basic scenario I mentioned 5 days ago works fine. 
Each reader from SELECT gets ValidTxnList that includes aborted transaction id so as to figure out aborted delta directories.
I will add a simple test as a patch for this jira.

Gopal mentioned we need to delete the global transaction entries for the temporary table commands which are left over after Hive-18192 is checked in.
The current IMetaStoreClient implementation for temporary table, 
SessionHiveMetaStoreClient, extends HiveMetaStoreClient and so rollback() method to update 
the MetaStore DB is there but whether the state of the transaction is in the place call that 
function in the state machine is questionable. 
]