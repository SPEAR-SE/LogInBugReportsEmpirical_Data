[

{color:red}Overall{color}: -1 at least one tests failed

Here are the results of testing the latest attachment:
https://issues.apache.org/jira/secure/attachment/12690992/HIVE-9322.1.patch

{color:red}ERROR:{color} -1 due to 3 failed/errored test(s), 6739 tests executed
*Failed tests:*
{noformat}
org.apache.hadoop.hive.cli.TestCliDriver.testCliDriver_udaf_percentile_approx_23
org.apache.hadoop.hive.cli.TestMiniTezCliDriver.testCliDriver_optimize_nullscan
org.apache.hive.hcatalog.streaming.TestStreaming.testEndpointConnection
{noformat}

Test results: http://ec2-174-129-184-35.compute-1.amazonaws.com/jenkins/job/PreCommit-HIVE-TRUNK-Build/2309/testReport
Console output: http://ec2-174-129-184-35.compute-1.amazonaws.com/jenkins/job/PreCommit-HIVE-TRUNK-Build/2309/console
Test logs: http://ec2-174-129-184-35.compute-1.amazonaws.com/logs/PreCommit-HIVE-TRUNK-Build-2309/

Messages:
{noformat}
Executing org.apache.hive.ptest.execution.PrepPhase
Executing org.apache.hive.ptest.execution.ExecutionPhase
Executing org.apache.hive.ptest.execution.ReportingPhase
Tests exited with: TestsFailedException: 3 tests failed
{noformat}

This message is automatically generated.

ATTACHMENT ID: 12690992 - PreCommit-HIVE-TRUNK-Build, +1,  This alters the semantics by allowing to have null keys in map which were disallowed earlier. [~mithun], I remember we had similar discussion previously about null-keys-in-map I forgot which ticket was it and what we decided. If you remember, can you point me to that ticket. Just want to make sure we are consistent with our earlier decision.

Also as a side note, performance wise its not free, since it adds a if-else branch in inner most loop of parsing while reading data., @[~ashutoshc]: You're right about the deja vu. :]
https://issues.apache.org/jira/browse/HIVE-6389?focusedCommentId=13917716&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13917716

(The problem in HIVE-6389 was that we were returning -1, when the data was NULL, even if it wasn't an integer-map. We discussed the data vs key null-check as an aside.)

At the moment, the semantics aren't uniform across OIs. {{LazyBinaryMapOI}} and {{DeepParquetHiveMapOI}} already guard against null-keys, while the others don't. Wouldn't uniformity be best? In light of your performance concern, should we consider removing the null-checks in all MapOIs?

I don't think we're changing semantics of what can be stored in a Map because I'd expect an NPE when writing a null-key (although I might be mistaken). We're only guarding against non-deterministic behaviour for stuff like:

{code:sql}
SELECT map_column[ string_column ] FROM my_table; 
{code}

... in cases where {{string_column IS NULL}}., I see, changes are concerned with read side only. I think it makes sense to have this null check, incase underlying map implementation changes for these OIs. Problem is java's map interface which most of OIs uses is lax about nulls as keys. As a data point, HashMap allows it while ConcurrentHashMap doesnt (throws NPE). Since keys here is provided by user its better that Hive returns null in those cases, instead of throwing NPE. Performance consideration is secondary, we should be concentrating on what semantics we want to provide to users.

+1, Committed to trunk. Thanks, Mithun!, This issue has been fixed and released as part of the 1.2.0 release. If you find an issue which seems to be related to this one, please create a new jira and link this one with new jira.]