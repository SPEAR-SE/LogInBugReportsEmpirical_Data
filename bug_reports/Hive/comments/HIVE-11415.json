[[~hsubramaniyan]/[~mmccline] fyi.., The right fix for this is to go ahead and take a ~8000 OR tree and turn it into a balanced tree ~14 levels deep.

Failing to convert the tree to vectorization would be a bad idea in general, because this error can be progressively bypassed by running, 
The example could be viewed as an extension of SQL's IN clause

{code}
column_name IN (value1,value2,...)
{code}

where we extend it to support struct constants/tuples in IN:

{code}
(t, si) IN ((1,2), (2,3), (3,4), (4,5), ...)
{code}

Rather than evaluating 8,000 OR expression nodes, do a single hash table lookup.

When there are lots of OR expressions with different columns / expressions, then vectorized OR operator could be generalized to ANY (as Gopal suggested) so it could in one evaluate look at more than 2 conditions.  I share Gopal's concern though that the planner may make subtle assumptions about there just being 2 arguments for OR.

Note: today vectorization does not support structs., [~jvaria] FYI., Will look into balancing tree instead., Vectorized support for Multi-OR and Multi-AND.

Specifically, the FilterExprOrExpr and FilterExprAndExpr.]