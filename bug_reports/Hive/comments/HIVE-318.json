[Hey Namit,

Quick comment: would it be easier to track these issues if they were filed as separate tickets? Perhaps you are preparing a solution as a single patch, or they are all manifestations of the same root issue, but otherwise, this seems like a ticket that could be busted up.

Later,
Jeff, ql/src/java/org/apache/hadoop/hive/ql/exec/Operator.java:325
 why are you catching an exception that is never thrown?

ql/src/java/org/apache/hadoop/hive/ql/exec/FileSinkOperator.java:67
 shouldn't you throw an error if the file exists instead of asserting?
 convert some of the the info log messages to error

ql/src/java/org/apache/hadoop/hive/ql/exec/Utilities.java:134, 153
 remove the System.out

ql/src/java/org/apache/hadoop/hive/ql/lib/DefaultRuleDispatcher.java:80
 can you make stack to be 3rd parameter to the process function since most process function don't use this param

ql/src/java/org/apache/hadoop/hive/ql/plan/fileSinkDesc.java:35 &47
 javadoc?

ql/src/java/org/apache/hadoop/hive/ql/plan/unionDesc.java
 empty class? add a comment

unit tests:
can you add comments so that which unit test so that it is easy to figure out what case of union it is testing

will add more comments later..



, Hi Jeff, all the issues are pretty similar, and their fixes would touch the same code. That's why it would be much easier to merge them in a single fix together. Infact, the fix for all sub-cases
for 4 is the same - I just listed all the issues for clarity. The basic idea was that union is broken currently, and I was just wanted to list all the scenarios that are not working.

, incorporate prasad's comments, - make the union transform before the column pruner. i will make predicate pushdown to happen after union transform so that it can get the benefit of pushing filters up.

- ql/src/java/org/apache/hadoop/hive/ql/optimizer/unionproc/UnionProcFactory.java:42
use indexOf() instead of for loop to make it simple

- ql/src/java/org/apache/hadoop/hive/ql/lib/PreOrderWalker.java
should subclass the Default walker and override only the walk() method. all the other code is common to both walkers, Will do 2 and 3 in the list above (use indexof and change PreOrderWalker).

However, 1 cannot be done since ColumnPruner creates the tree again - so state of the union will be lost.
It doesnt matter - predicate pushdown can happen anywhere (either before of after the union). Union does not change the tree,
it just stores some state about which branch is map-side and which branch is root, incorporated Prasad's comments, There seems to be a conflict in union.q.xml. Can you regenerate the patch.
, resolve conflicts, Looked at this in a lot more detail with Namit. The following are the review comments:

1. The state maintained in the union operator context can be moved to the ParseContext to be consistent with the model that we have today.
2. The init and state code can be moved to Operator.java and the reset logic can be refactored to work on those states. There is no need for another reinit state. Init after close should be transparently allowed.
3. We can change the plan to generate two different file sink operators on the parents of the union operator while breaking the into map/reduce jobs. If we follow that strategy, we can undo the changes to FileSinkOperator
and remove the special case code.
4. Please check indentation in UnionProcessor.java , incorporated comments, resolve conflicts, Added comments in various places and uploaded the new patch.
Also, filed various follow-up jiras


https://issues.apache.org/jira/browse/HIVE-368
https://issues.apache.org/jira/browse/HIVE-369
https://issues.apache.org/jira/browse/HIVE-370
https://issues.apache.org/jira/browse/HIVE-371
, +1. Testing now., Committed revision 758494.]