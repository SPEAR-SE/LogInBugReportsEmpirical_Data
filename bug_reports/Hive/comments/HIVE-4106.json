[Fixes failures in SMB joins., As we discussed in HIVE-3891,

Namit Jain added a comment - 01/Mar/13 12:28
canConvertJoinToBucketMapJoin:
The join should be rejected by:
// This has already been inspected and rejected
if (context.getRejectedJoinOps().contains(joinOp))
{ return false; }
Can you open a separate jira for this ?
We should never run into this scenario.


this needs to be debugged.

Can you upload the faling testcase ?, Hi Namit,

The test case is not from our set of files/tables/TestCliDriver tests. I had to get lucky to catch this issue. The issue can be reproduced if we have a partitioned table with average size being in some range so that getBigTablePosition in the AvgPartitionSizeBasedBigTableSelectorForAutoSMJ returns a position not in the joinContext. This will cause the exception. In my setup, I got lucky to have such a partition combination. I am not sure how I can reproduce this issue with our current partitioned tables set in the TestCliDriver. I will try it with some combinations to see if it can be produced.

If we say this type of join has to be rejected, we will not convert this join to an SMB Map-join even if it is possible right? That seems extreme. Also, I do not see any references to setRejectedJoinOps in the code either. Please let me know.

Thanks
Vikram.,   // check if the join operator encountered is a candidate for being converted
  // to a sort-merge join
  private NodeProcessor getCheckCandidateJoin() {
    return new NodeProcessor() {
      @Override
      public Object process(Node nd, Stack<Node> stack, NodeProcessorCtx procCtx,
        Object... nodeOutputs) throws SemanticException {
        SortBucketJoinProcCtx smbJoinContext = (SortBucketJoinProcCtx)procCtx;
        JoinOperator joinOperator = (JoinOperator)nd;
        int size = stack.size();
        if (!(stack.get(size-1) instanceof JoinOperator) ||
            !(stack.get(size-2) instanceof ReduceSinkOperator)) {
          smbJoinContext.getRejectedJoinOps().add(joinOperator);
          return null;
        }

        // If any operator in the stack does not support a auto-conversion, this join should
        // not be converted.
        for (int pos = size -3; pos >= 0; pos--) {
          Operator<? extends OperatorDesc> op = (Operator<? extends OperatorDesc>)stack.get(pos);
          if (!op.supportAutomaticSortMergeJoin()) {
            smbJoinContext.getRejectedJoinOps().add(joinOperator);
            return null;
          }
        }

        return null;
      }
    };
  }


It should be done above - file SortedMergeBucketMapJoinOptimizer.java.
Can you try your testcase, and see if it being added to rejectJoinOps ?, Hi Namit,

I am able to reproduce this issue using this query. I see that the particular join (last join) is not getting added to the reject list because it does not match the conditions in the stack. In fact it is inverted. Let me know how to go about fixing this issue.

Thanks
Vikram., This test somehow feels awkward to me. It produces the issue but the test I have is slightly different. I am trying to come up with a better test for this., [~namit] / [~vikram.dixit] Any update on this one. Would be good to have this in 0.11 ?, I think this is a blocker for 0.11.
[~vikram.dixit], do you have any testcase that fails ?, [~vikram.dixit], can you load the failing query ?, [~namit]
{noformat}
select i_item_id
       ,i_item_desc
       ,i_current_price
 from item i
      join inventory inv on (inv.inv_item_sk = i.i_item_sk)
      join date_dim d on (d.d_date_sk = inv.inv_date_sk)
      join store_sales ss on (ss.ss_item_sk = i.i_item_sk)
 where i_current_price between 62 and 62+30.0
 and d_date between '2000-05-25' and '2000-07-27'
 and i_manufact_id in (129,270,821,423)
 and inv_quantity_on_hand between 100 and 500
 group by i_item_id,i_item_desc,i_current_price
 order by i_item_id
 limit 100;
{noformat}

This is the TPC-DS benchmark query (scale 1 but this does not matter) where store_sales and inventory are sorted as follows:

store_sales: sorted by ss_item_sk, partitioned on ss_sold_date, clustered by ss_item_sk
inventory: partitioned by (inv_date string) clustered by (inv_item_sk) sorted by (inv_item_sk)
item: non-partitioned, bucketed clustered by (i_item_sk) sorted by (i_item_sk)
date_dim: non-partitioned, non-bucketed., This should not a mutli-way SMB join - this is due to HIVE-4167.
Can you apply the patch for 4167 and check if this works ?, [~vikram.dixit], can you confirm ?, I am going to try this and provide an update in a bit.

Thanks
Vikram.

, Hi [~namit]

I am still able to reproduce this issue. The testcase provided in this jira still produces this issue as well.

Thanks
Vikram., {noformat}
java.lang.ArrayIndexOutOfBoundsException: 1
  at org.apache.hadoop.hive.ql.optimizer.AbstractSMBJoinProc.canConvertJoinToBucketMapJoin(AbstractSMBJoinProc.java:476)
  at org.apache.hadoop.hive.ql.optimizer.AbstractSMBJoinProc.canConvertJoinToSMBJoin(AbstractSMBJoinProc.java:431)
  at org.apache.hadoop.hive.ql.optimizer.SortedMergeJoinProc.process(SortedMergeJoinProc.java:46)
  at org.apache.hadoop.hive.ql.lib.DefaultRuleDispatcher.dispatch(DefaultRuleDispatcher.java:89)
  at org.apache.hadoop.hive.ql.lib.DefaultGraphWalker.dispatch(DefaultGraphWalker.java:87)
  at org.apache.hadoop.hive.ql.lib.DefaultGraphWalker.walk(DefaultGraphWalker.java:124)
  at org.apache.hadoop.hive.ql.lib.DefaultGraphWalker.startWalking(DefaultGraphWalker.java:101)
  at org.apache.hadoop.hive.ql.optimizer.SortedMergeBucketMapJoinOptimizer.transform(SortedMergeBucketMapJoinOptimizer.java:109)
...
{noformat}, https://issues.apache.org/jira/secure/attachment/12572229/auto_sortmerge_join_12.q

Do you mean the above ?, Yes. When I run the auto_sortmerge_join_12.q on latest trunk, I see the above exception. I tried to see if my patch addresses the issue, but I am seeing a different issue with the latest trunk which I am looking into. If you have any suggestions, I would like to explore that route as well.

Thanks
Vikram., Let me take a look., The last query is wrong:

explain select count(*) FROM bucket_small a JOIN bucket_medium b ON a.key = b.key JOIN bucket_big c ON c.key = b.key JOIN bucket_medium d ON c.key = b.key;

Most probably, the intention was:

explain select count(*) FROM bucket_small a JOIN bucket_medium b ON a.key = b.key JOIN bucket_big c ON c.key = b.key JOIN bucket_medium d ON c.key = d.key;

Having said that, it should not die., https://reviews.facebook.net/D10293, [~ashutoshc], can you take a look ?, Isn't HIVE-4371 a proper fix for it?
Does the test-case still fails after applying HIVE-4371?, I think it would still fail - I havent't tried it, but am nearly sure.
Basically, it assumes the left aliases and right aliases in a certain way, and that assumption has been changed by the join merge now.
It only matters in this peculiar case - when the table being joined 'd' does not show up in the join condition -- should not be a common case., [~ashutoshc], confirmed that the test still failed after HIVE-4371, [~namit] Sorry, it was a different NPE. Fixed that., [~navis] Didn't get you. You mean this jira is a non-issue after your latest patch on HIVE-4371.  
, Fixed as part of HIVE-4371, This issue has been fixed and released as part of 0.12 release. If you find further issues, please create a new jira and link it to this one.]