[@Tim: Thanks for following up on this!, Problem
=======
Several classes have many parameters in constructor and it doesn't scale well.

Solution
========
After reviewing design patterns (factory method/abstract factory/builder/static factory) in GOF and builder pattern in Joshua's Effective in JAVA (Item #2), feel builder pattern in effective in Java is a good fit since it is designed to solve our problem.

Details on each instance
========================
1. MStorageDescriptor.java
   use builder pattern
2. ColumnInfo.java
   # of parameter is not big yet but the number of references to the constructors is huge: 40+. risk is high to change them all.
   solution is use javabean pattern (setter/getter) for new parameters in hive 3072
3. ParseContext.java
   use builder pattern
4. CreateTableDesc.java
   use builder pattern
5. ExprNodeColumnDesc.java
   same as #2, second thought on MStorageDescriptor.java. It's model class for JDO and let's keep it simple. we can use setter/getter here., https://reviews.facebook.net/D4719, Patch is ready for review in both jira and phabricator., @Carl: thank you for giving me the opportunities to work on it. Initially have natural resistance due to work plan but quickly realize it is good thing to do and will make HIVE better which is my goal. I enjoy this refactor with them in mind. have a good weekend., @Tim: Thanks for taking time to look into this.

I recommended using the builder pattern because these constructors are unreadable due to the large number of input parameters. Replacing a twenty-one parameter constructor (i.e. CreateTableDesc()) with a builder object that takes 21 input parameters doesn't really solve the problem. Here's a quote from chapter2 of Bloch's Effective Java book:

{quote}
Instead of making the desired object directly, the client calls a constructor (or static factory) with all of the the *required parameters* and gets a builder object. Then the client calls setter-like methods on the builder object to set each *optional parameter* of interest. Finally, the client calls a parameterless build() method to generate the object, which is *immutable*.
{quote}

Taking CreateTableDesc as an example, I think the only *required* parameters are tableName and cols. Everything else should have a default value that can optionally be overridden using a setter exposed by the Builder.

Another problem with many of these objects (including CreateTableDesc) is that they should be immutable, but currently aren't. This is a consequence of the fact that many of the getters return references to mutable instance variables. For example, CreateTableDesc.getPartCols() returns a reference to the internal list, which means that if I add an element to the list I actually modified the internal state of the CreateTableDesc object. The workaround for this problem is to return a copy of the internal list instead of the list itself.

Also, I saw a lot of raw types on the LHS (e.g. ArrayList instead of List).
, @Carl, great! will address them and have a patch ready before noon. thanks, Patch is available in both jira and phabricator. Some explannations in phabricator., comments on phabricator]