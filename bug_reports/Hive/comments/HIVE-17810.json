[I put this in the TestHCatClient class:
{code}
/**
   * This test tests that a Create Table statement without columns works
   * @throws Exception
   */
  @Test
  public void testNoColumnTableInstantiation() throws Exception {
    HCatClient client = HCatClient.create(new Configuration(hcatConf));


    String dbName = "default";
    String tblName = "testNoColumnTableInstantiation";
    ArrayList<HCatFieldSchema> cols = new ArrayList<HCatFieldSchema>();
    HCatTable table = new HCatTable(dbName, tblName)
                                .cols(cols)
                                .serdeLib(AvroSerDe.class.getName())
                                .tblProps(ImmutableMap.of("avro.schema.literal", "{\"type\": \"record\"," +
                                        "\"namespace\": \"com.example\"," +
                                        "\"name\": \"FullName\"," +
                                        "\"fields\": [{ \"name\": \"first\", \"type\": \"string\" }] }"))
                                .inputFileFormat(AvroContainerInputFormat.class.getName())
                                .outputFileFormat(AvroContainerOutputFormat.class.getName());

    client.dropTable(dbName, tblName, true);
    try {
      // Create an avro table with no columns
      client.createTable(HCatCreateTableDesc
              .create(table, false)
              .build());
    }catch (Throwable e){
      fail("An error occurred creating Columnless table: "+e.getMessage());
    }
  }
{code}, I can't seem to attach a file, but here's a patch:

{noformat}
diff --git hcatalog/webhcat/java-client/src/main/java/org/apache/hive/hcatalog/api/HCatTable.java hcatalog/webhcat/java-client/src/main/java/org/apache/hive/hcatalog/api/HCatTable.java
index 99af291..070fb48 100644
--- hcatalog/webhcat/java-client/src/main/java/org/apache/hive/hcatalog/api/HCatTable.java
+++ hcatalog/webhcat/java-client/src/main/java/org/apache/hive/hcatalog/api/HCatTable.java
@@ -18,11 +18,7 @@
  */
 package org.apache.hive.hcatalog.api;
 
-import java.util.ArrayList;
-import java.util.EnumSet;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
+import java.util.*;
 
 import com.google.common.collect.Maps;
 import org.apache.commons.lang.StringUtils;
@@ -131,6 +127,7 @@ public HCatTable(String dbName, String tableName) {
     this.sd.getSerdeInfo().setSerializationLib(DEFAULT_SERDE_CLASS);
     this.sd.getSerdeInfo().setParameters(new HashMap<String, String>());
     this.sd.getSerdeInfo().getParameters().put(serdeConstants.SERIALIZATION_FORMAT, "1"); // Default serialization format.
+    this.sd.setCols(new ArrayList<FieldSchema>());
   }
 
   HCatTable(Table hiveTable) throws HCatException {
diff --git hcatalog/webhcat/java-client/src/test/java/org/apache/hive/hcatalog/api/TestHCatClient.java hcatalog/webhcat/java-client/src/test/java/org/apache/hive/hcatalog/api/TestHCatClient.java
index 78e767e..85697ba 100644
--- hcatalog/webhcat/java-client/src/test/java/org/apache/hive/hcatalog/api/TestHCatClient.java
+++ hcatalog/webhcat/java-client/src/test/java/org/apache/hive/hcatalog/api/TestHCatClient.java
@@ -30,7 +30,9 @@
 import java.util.Random;
 
 import com.google.common.base.Function;
+import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.Iterables;
+import org.apache.avro.Schema;
 import org.apache.hadoop.conf.Configuration;
 import org.apache.hadoop.fs.Path;
 import org.apache.hadoop.hive.conf.HiveConf;
@@ -43,11 +45,14 @@
 import org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat;
 import org.apache.hadoop.hive.ql.io.RCFileInputFormat;
 import org.apache.hadoop.hive.ql.io.RCFileOutputFormat;
+import org.apache.hadoop.hive.ql.io.avro.AvroContainerInputFormat;
+import org.apache.hadoop.hive.ql.io.avro.AvroContainerOutputFormat;
 import org.apache.hadoop.hive.ql.io.orc.OrcInputFormat;
 import org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat;
 import org.apache.hadoop.hive.ql.io.orc.OrcSerde;
 import org.apache.hadoop.hive.ql.metadata.Table;
 import org.apache.hadoop.hive.serde.serdeConstants;
+import org.apache.hadoop.hive.serde2.avro.AvroSerDe;
 import org.apache.hadoop.hive.serde2.columnar.LazyBinaryColumnarSerDe;
 import org.apache.hadoop.hive.shims.Utils;
 import org.apache.hadoop.mapred.TextInputFormat;
@@ -225,7 +230,7 @@ public void testBasicDDLCommands() throws Exception {
       table2.getSerdeParams().get(serdeConstants.COLLECTION_DELIM));
     assertEquals("checking " + serdeConstants.SERIALIZATION_NULL_FORMAT, Character.toString('\006'),
       table2.getSerdeParams().get(serdeConstants.SERIALIZATION_NULL_FORMAT));
-    
+
     assertTrue(table2.getLocation().toLowerCase().matches(".*" + ("/" + db + ".db/" + tableTwo).toLowerCase()));
 
     HCatCreateTableDesc tableDesc3 = HCatCreateTableDesc.create(db,
@@ -285,6 +290,39 @@ public void testEmptyTableInstantiation() throws Exception {
   }
 
   /**
+   * This test tests that a Create Table statement without columns works
+   * @throws Exception
+   */
+  @Test
+  public void testNoColumnTableInstantiation() throws Exception {
+    HCatClient client = HCatClient.create(new Configuration(hcatConf));
+
+
+    String dbName = "default";
+    String tblName = "testNoColumnTableInstantiation";
+    ArrayList<HCatFieldSchema> cols = new ArrayList<HCatFieldSchema>();
+    HCatTable table = new HCatTable(dbName, tblName)
+                                .cols(cols)
+                                .serdeLib(AvroSerDe.class.getName())
+                                .tblProps(ImmutableMap.of("avro.schema.literal", "{\"type\": \"record\"," +
+                                        "\"namespace\": \"com.example\"," +
+                                        "\"name\": \"FullName\"," +
+                                        "\"fields\": [{ \"name\": \"first\", \"type\": \"string\" }] }"))
+                                .inputFileFormat(AvroContainerInputFormat.class.getName())
+                                .outputFileFormat(AvroContainerOutputFormat.class.getName());
+
+    client.dropTable(dbName, tblName, true);
+    try {
+      // Create an avro table with no columns
+      client.createTable(HCatCreateTableDesc
+              .create(table, false)
+              .build());
+    }catch (Throwable e){
+      fail("An error occurred creating Columnless table: "+e.getMessage());
+    }
+  }
+
+  /**
    * Verifies that an inner map is present inside an outer map, with
    * all values being equal.
    */
{noformat}]