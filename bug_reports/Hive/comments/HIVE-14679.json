[[~Ferd] - would you be open to picking this one up?, Thanks Brock, I will take a look., Section 2.6 of RFC 4180 says:
"Fields containing line breaks (CRLF), double quotes, and commas should be enclosed in double-quotes."

It seems strange, then, to disable quoting for the csv2 output format by default.

What's also strange is that when quoting is disabled, values are in fact still 'quoted' with a null character (00), rather than no character at all (as described in [~ngangam]'s comment on HIVE-9788). This doesn't appear to be mentioned anywhere in RFC 4180.

May I suggest that:
- Quoting should be enabled by default for csv2, tsv2 and dsv.
- Disabling quoting should be possible using a beeline argument.
- Disabling quoting should not result in the output of a null character in place of a visible quote - there should simply be no quote character at all in this case., Its my understanding that quoting is NOT optional for csv2/tsv2 formats. These formats were introduced specifically to rid the quotes around the column values. Since we could not just change the original csv/tsv formats to not wrap values in quotes for backward compatibility reasons, we had to introduce new output formats.

Its been a while but I believe HIVE-9788 makes it optional for the original sv formats and not affect the csv2/tsv2 formats. [~Ferd] please correct me if I am wrong., bq. It optional for the original sv formats and not affect the csv2/tsv2 formats

You can see the code for HIVE-9788 that by default the quoting is disabled. And it is about csv2/tsv2 as the release note said I think. But it has been a while and need double check. [~JonnyR], can you please confirm this?
{noformat}
+  private boolean isQuotingDisabled() {
+    String quotingDisabledStr = System.getProperty(SeparatedValuesOutputFormat.DISABLE_QUOTING_FOR_SV);
+    if (quotingDisabledStr == null || quotingDisabledStr.isEmpty()) {
+      // default is disabling the double quoting for separated value
+      return true;
+    }
+    String parsedOptionStr = quotingDisabledStr.toLowerCase();
+    if (parsedOptionStr.equals("false") || parsedOptionStr.equals("true")) {
+      return Boolean.valueOf(parsedOptionStr);
+    } else {
+      beeLine.error("System Property disable.quoting.for.sv is now " + parsedOptionStr
+          + " which only accepts boolean value");
+      return true;
+    }
+  }
{noformat}

, Thanks for your suggestions. I have finished the part of "Disabling quoting should be possible using a beeline argument". Next, I'll resolve your 3rd suggestion.
, Hi, Kenneth MacArthur. It looks difficult to implement "there should simply be no quote character at all when quoting is disabled". As we can see from the below code, the first parameter of *Builder* method is a character, but unfortunately we can't implement an empty character in java as *""* in String.
{code:borderStyle=solid}
unquotedCsvPreference = new CsvPreference.Builder('\0', separator, "").build();
{code}
How do you think about this above?, What you said about "not affect the csv2/tsv2 formats" is correct, and that is exactly what I'm working forward to. Thanks for your opinion! Please wait for my patch which will be updated. , Commands like "more" choke on these null characters. View a CSV file with nulls instead of quotes and you'll see - the line is truncated. Even in "vi", you see some bizarre character that makes you think there's something wrong with the character set of the file.

It's all very confusing (and, more importantly, time-wasting) for the user.

I would say user convenience should trump implementation convenience. ;)

What do you say?, Agree. It really looks confusing and strange with null character. Let me find a suitable solution. Thanks., I have updated the latest patch on the [Review Board|https://reviews.apache.org/r/52981/], [~brocknoland], [~kennethmac2000], [~ngangam], could you please help me review this latest patch? Looking forward to your precious opinion. Thanks a lot!]