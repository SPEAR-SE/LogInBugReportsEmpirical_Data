[I believe [~ashutoshc] took a look and found the optimization to work properly with CBO., It doesn't work in all cases according to the query. , [~sershe] - can you please attach the plan/diff fragement that you think isn't in line with the optimization?, Simplest query I found that reproes is:
{noformat}
select src.key from src left outer join srcpart on src.key = srcpart.key where false;
{noformat}
The reason seems to be that CBO pushes filter thru join, and nullscan optimizer no longer sees it.

Original plan is
{noformat}
HiveProjectRel(key=[$0])
  HiveFilterRel(condition=[false])
    HiveJoinRel(condition=[=($0, $5)], joinType=[left])
      HiveTableScanRel(table=[[default.src]])
      HiveTableScanRel(table=[[default.srcpart]])
{noformat}

After PPD it becomes
{noformat}
HiveProjectRel(key=[$0])
  HiveJoinRel(condition=[=($0, $1)], joinType=[left])
    HiveProjectRel(key=[$0])
      HiveFilterRel(condition=[false])
        HiveTableScanRel(table=[[default.src]])
    HiveProjectRel(key=[$0])
      HiveTableScanRel(table=[[default.srcpart]])
{noformat}

and final plan is
{noformat}
 HiveProjectRel(src.key=[$0])
  HiveProjectRel(key=[$1], key0=[$0])
    HiveJoinRel(condition=[=($1, $0)], joinType=[right])
      HiveProjectRel(key=[$0])
        HiveTableScanRel(table=[[default.srcpart]])
      HiveProjectRel(key=[$0])
        HiveFilterRel(condition=[false])
          HiveTableScanRel(table=[[default.src]])
{noformat}
(as an unrelated side note, I wonder why CBO changes left joins to right joins, and the other way around, in all the queries)

Not sure if there's a good fix for this. We can also make nullscan optimizer aware of joins? Don't push false filters?
It's probably useless for any real query though, so we can just ignore this., [~ashutoshc] thoughts?,  [~hagleitn] Seems like this is only an issue on Tez. On the last run of HIVE-8395 http://ec2-174-129-184-35.compute-1.amazonaws.com/jenkins/job/PreCommit-HIVE-TRUNK-Build/1556/testReport/ this test failed only for MiniTezCliDriver and passed for CliDriver. This is surprising since optimization itself is not aware of execution engine, but this is possible since on Tez, we have different set of physical optimizations than on MR. However,  I am not able to repro this. After enabling hive.cbo.enable, only diffs that I get is:
{code}
diff --git a/ql/src/test/results/clientpositive/tez/optimize_nullscan.q.out b/ql/src/test/results/clientpositive/tez/optimize_nullscan.q.out
index c45f0db..4228cec 100644
--- a/ql/src/test/results/clientpositive/tez/optimize_nullscan.q.out
+++ b/ql/src/test/results/clientpositive/tez/optimize_nullscan.q.out
@@ -1815,9 +1815,9 @@ STAGE PLANS:
                       value expressions: key (type: string)
                       auto parallelism: true
             Path -> Alias:
-              -mr-10003default.src{} [s2]
+              -mr-10002default.src{} [s2]
             Path -> Partition:
-              -mr-10003default.src{} 
+              -mr-10002default.src{} 
                 Partition
                   base file name: src
                   input format: org.apache.hadoop.hive.ql.io.OneNullRowInputFormat
@@ -1862,7 +1862,7 @@ STAGE PLANS:
                     name: default.src
                   name: default.src
             Truncated Path -> Alias:
-              -mr-10003default.src{} [s2]
+              -mr-10002default.src{} [s2]
         Map 3 
             Map Operator Tree:
                 TableScan
@@ -1882,9 +1882,9 @@ STAGE PLANS:
                       value expressions: key (type: string)
                       auto parallelism: true
             Path -> Alias:
-              -mr-10002default.src{} [s1]
+              -mr-10003default.src{} [s1]
             Path -> Partition:
-              -mr-10002default.src{} 
+              -mr-10003default.src{} 
{code}

[~sershe] This optimizer dont care whether join is present in query or not. It looks for TS->FIL pattern with FIL being where false. So, final plan as you have printed after CBO is exactly of its liking. In Hive, PPD makes sure we get that pattern.  
Whats different on Tez is really intriguing. I will dig more., I think optimize_nullscan out for non-tez was committed by accident, I've just replaced it back.
So it happens in both., It seems difference here stems of what rules Hive follows for PPD vs what are followed in Calcite. Hive PPD pushes filter through both branches of join to table scans, whereas Calcite is pushing filter only to outer table. 
Later in compilation, NullScanOptimizer found that filter only on side and converted to null-scan, but didnt filter on other side, so didnt do anything with it.

Also, Calcite changed left outer join to right outer join and swapped tables on both sides, along with filter., I think issue here is Calcite doesn't recognizes always false filter as a a special case and doesn't push it both ways., Removing fix version of 1.2.0 in preparation of release, since this is not a blocker for 1.2.0.]