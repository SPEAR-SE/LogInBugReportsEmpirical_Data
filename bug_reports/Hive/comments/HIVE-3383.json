[I collected stack traces multiple times while test was in hang state. I always found main thread in following stack:
{code}
"main" prio=10 tid=0x08800000 nid=0x52cf waiting on condition [0xf72fa000]
   java.lang.Thread.State: TIMED_WAITING (sleeping)
	at java.lang.Thread.sleep(Native Method)
	at org.apache.hadoop.mapred.MiniMRCluster.startJobTracker(MiniMRCluster.java:638)
	at org.apache.hadoop.mapred.MiniMRCluster.startJobTracker(MiniMRCluster.java:609)
	at org.apache.hadoop.mapred.MiniMRCluster.<init>(MiniMRCluster.java:507)
	at org.apache.hadoop.mapred.MiniMRCluster.<init>(MiniMRCluster.java:462)
	at org.apache.hadoop.mapred.MiniMRCluster.<init>(MiniMRCluster.java:454)
	at org.apache.hadoop.mapred.MiniMRCluster.<init>(MiniMRCluster.java:446)
	at org.apache.hadoop.mapred.MiniMRCluster.<init>(MiniMRCluster.java:436)
	at org.apache.hadoop.mapred.MiniMRCluster.<init>(MiniMRCluster.java:426)
	at org.apache.hadoop.mapred.MiniMRCluster.<init>(MiniMRCluster.java:417)
	at org.apache.hadoop.hive.ql.QTestUtil.<init>(QTestUtil.java:278)
	at org.apache.hadoop.hive.cli.TestMinimrCliDriver.<clinit>(TestMinimrCliDriver.java:51)
	at java.lang.Class.forName0(Native Method)
	at java.lang.Class.forName(Class.java:169)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:373)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.launch(JUnitTestRunner.java:1052)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.main(JUnitTestRunner.java:906)
{code}

Whats happening here is JobTracker is in wait state (forever). Further analysis showed that JT makes an RPC call to NN, NN is trying to load a class which it fails to find and then keep on throwing ClassNotFoundException. Then DFSClient (embedded in JT) keeps on retrying and system remains in hang state. Fix is to download the missing jar file (http://mirrors.ibiblio.org/pub/mirrors/maven2/javax/ws/rs/jsr311-api/1.0/jsr311-api-1.0.jar) and place it in ivy/lib/default dir after compilation but before starting test run. I am not sure whether its a bug in a hive build system wherein it should download this jar file or in hadoop build system, where it should have declared this jar as its dependency in its pom file, so that downstream project will pull in this jar while pulling in hadoop and its dependency. , I ran into the same problem today with simple {{ant test}} on trunk., If i remember correctly, problem was because of incorrect pom files published by hadoop because of which hive was not downloading correct jars. This has been fixed in subsequent hadoop releases which Hive has upgraded to.]