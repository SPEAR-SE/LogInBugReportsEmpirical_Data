[Thanks to [~cnauroth] for analysis of the issue -

It looks like exports run some logic that hard-codes the URI scheme to "hdfs", but then pulls the authority (host) from the default file system:

https://github.com/apache/hive/blob/rel/release-2.1.0/ql/src/java/org/apache/hadoop/hive/ql/parse/ExportSemanticAnalyzer.java#L68
https://github.com/apache/hive/blob/rel/release-2.1.0/ql/src/java/org/apache/hadoop/hive/ql/parse/EximUtil.java#L94-L99
{code}
      // set correct scheme and authority
      if (StringUtils.isEmpty(scheme)) {
        if (testMode) {
          scheme = "pfile";
        } else {
          scheme = "hdfs";
        }
      }

      // if scheme is specified but not authority then use the default
      // authority
      if (StringUtils.isEmpty(authority)) {
        URI defaultURI = FileSystem.get(conf).getUri();
        authority = defaultURI.getAuthority();
      }
{code}

I think that's our problem.  This logic is definitely wrong for the case of exporting to any file system that is not HDFS., I am not working on this at this time, feel free to take this on.
, [~thejas] - Does this happen with {{hive.exim.uri.scheme.whitelist=hdfs,pfile,s3a}} ? I tried adding s3a to the whitelist and was able to proceed with export., [~rajesh.balamohan] Thanks for checking. I realized my description wasn't accurate. 
This happens if no scheme is used with export uri.
, hi [~thejas], i found that HIVE-15333's patch had resolved this issue. {{hdfs}} hard code does not exist. Is is right ?, Yes, changes made by [~vgumashta] in HIVE-15333 seems to address this as well.
Thanks for looking into it!
]