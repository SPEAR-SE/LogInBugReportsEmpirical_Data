[[~alangates] [~daijy] fyi, Here's the motivation and what I was trying to achieve:
* Each thread in HiveMetaStore will have an instance of RawStore, hence of HBaseStore and HBaseReadWrite
* Each instance needs a copy of the config file, but they should all have the same copy.  Thus the attempt to set it up front with a static call.
* Not all places that need an instance of HBaseReadWrite will have a reference on hand nor will they have the proper config file.  Thus they need to be able to get the instance without the config file, and they need to get the right instance for the thread they are running in.  Hence the calls to getInstance with no config and the reference being threadlocal.

 So first, a question.  Why are we seeing different threads have different config files?  I certainly didn't expect that.  Is there a valid reason for it?

I've attached a proposed patch that deals with this by moving getInstance(conf) to setConf(conf) and only having getInstance().  Does this look reasonable?, Will look at the patch after lunch :) 
The problems arise only with embedded metastore (including embedded in HS2). For the test, it appears that the different configs might have been caused by the issue fixed in HIVE-12062, where config in testing util is reset after HBase minicluster config is set, so all subsequent code uses a different config.
Another scenario is for embedded metastore usage for any service that gets different configs, like Tez AM. Tez AM should not rely on default config to create metastore and should instead rely on config of the query; I had problems with that before due to some static call to metastore where Tez AM would create ObjectStore even though it was configured later to connect to remote metastore via a query config. 
For HS2, I don't know if we support connecting to multiple metastores. However, accessing embedded metastore from multiple threads may cause a thread safety problem.
Also a static like that seems pretty brittle in an abstract sense, and the API get(conf) is misleading, because it will return the instance with potentially different conf, and only set up the conf for the next call. 

If we assume the same conf perhaps we should not reset staticConf if already set, and should throw if it's a different conf
, Patch looks good. One question - if the semantics are that we setConf once and then always use it, should it detect cases when setConf is called with different conf and fail?, bq. if the semantics are that we setConf once and then always use it, should it detect cases when setConf is called with different conf and fail?
Probably, but I was worried about the cost of comparing configs.  I was also wondering if there was a single place we could set it so that any subsequent call to setConf was an error, but I couldn't think of such a place., Well right now it's just ignored, perhaps it should at least emit a log warning, Other than that, +1, Second version of the patch, it adds an info message if the config has already been set.  I chose info instead of warning because each thread in the metastore or HS2 will end up calling this, so that would be a lot of warnings for nothing., +1, 

Here are the results of testing the latest attachment:
https://issues.apache.org/jira/secure/attachment/12767843/HIVE-12170.2.patch

{color:green}SUCCESS:{color} +1 due to 4 test(s) being added or modified.

{color:red}ERROR:{color} -1 due to 3 failed/errored test(s), 9697 tests executed
*Failed tests:*
{noformat}
org.apache.hive.hcatalog.api.TestHCatClient.testTableSchemaPropagation
org.apache.hive.jdbc.TestSSL.testSSLFetchHttp
org.apache.hive.jdbc.TestSSL.testSSLVersion
{noformat}

Test results: http://ec2-174-129-184-35.compute-1.amazonaws.com/jenkins/job/PreCommit-HIVE-TRUNK-Build/5726/testReport
Console output: http://ec2-174-129-184-35.compute-1.amazonaws.com/jenkins/job/PreCommit-HIVE-TRUNK-Build/5726/console
Test logs: http://ec2-174-129-184-35.compute-1.amazonaws.com/logs/PreCommit-HIVE-TRUNK-Build-5726/

Messages:
{noformat}
Executing org.apache.hive.ptest.execution.TestCheckPhase
Executing org.apache.hive.ptest.execution.PrepPhase
Executing org.apache.hive.ptest.execution.ExecutionPhase
Executing org.apache.hive.ptest.execution.ReportingPhase
Tests exited with: TestsFailedException: 3 tests failed
{noformat}

This message is automatically generated.

ATTACHMENT ID: 12767843 - PreCommit-HIVE-TRUNK-Build, Patch 2 committed.  Thanks Sergey for the review.]