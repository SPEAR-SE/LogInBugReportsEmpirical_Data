[org.apache.hadoop.hive.ql.parse.SemanticAnalyzer.getGenericUDAFEvaluator is called by three methods, org.apache.hadoop.hive.ql.parse.SemanticAnalyzer.genGroupByPlanGroupByOperator, org.apache.hadoop.hive.ql.parse.SemanticAnalyzer.genGroupByPlanGroupByOperator1, and org.apache.hadoop.hive.ql.parse.SemanticAnalyzer.genGroupByPlanMapGroupByOperator. genExprNodeDesc is used only by genGroupByPlanMapGroupByOperator. For other two methods, they just create an ExprNodeColumnDesc. We cannot simply use genExprNodeDesc for all cases, because genExprNodeDesc will return an ExprNodeColumnDesc directly when it can find the ColumnInfo through groupByInputRowResolver, which is the case for genGroupByPlanGroupByOperator and genGroupByPlanGroupByOperator1 (otherwise, a SemanticException will be thrown).

any suggestion?, Just looked at this problem in details. Here is the reason...
if we set map-side-aggregation to false (set hive.map.aggr=false;) (to make my point clear, let's also assume hive.groupby.skewindata is false), in org.apache.hadoop.hive.ql.parse.SemanticAnalyzer.genBodyPlan, genGroupByPlan1MR will be used to generate the ReduceSinkOperator (through genGroupByPlanReduceSinkOperator) and GroupByOperator (genGroupByPlanGroupByOperator). Since in this case, there is no map-side-aggregation, inside getReduceValuesForReduceSinkNoMapAgg, getReduceValuesForReduceSinkNoMapAgg will be called to generate reduce values by looking at the every children in every aggregation tree. You can see, inside getReduceValuesForReduceSinkNoMapAgg, genExprNodeDesc is called to generate the ExprNodeDesc and for the case I described in the description, ExprNodeConstantDesc will be used for those constant parameters. For every children in every aggregation tree, a entry from the parameter to a ColumnInfo will be added into the reduceSinkOutputRowResolver. However, based on the code, it seems that when an ASTNode has ColumnInfo, ExprNodeColumnDesc will be used for this Node (when a node has ColumnInfo, the class of ExprNodeDesc should be ExprNodeColumnDesc). Thus, in genGroupByPlanGroupByOperator, when all children of all aggregation trees are being converted to aggParameters, ExprNodeColumnDesc will be used because all parameters (no matter what it is) have their own ColumnInfos. Thus, we will get the error. 

To solve this problem, we can have two ways.
1) We extend the class of ColumnInfo to record ExprNodeDesc not just the typeInfo.
2) For ExprNodeDesc other than ExprNodeColumnDesc, do not create ColumnInfo and thus, RowResolver will not have a match. Then, we use genExprNodeDesc to generate ExprNodeDesc in genGroupByPlanGroupByOperator and genGroupByPlanGroupByOperator1.

Seems the second option is the right way since it has a clear meaning. Will do that first. , please ignore above two options for solving this problem. This case is more complicated than I thought before. , patch uploaded. In genGroupByPlanGroupByOperator and genGroupByPlanGroupByOperator1, if a parameter is a constant (ExprNodeDesc's WritableObjectInspector is an instance of ConstantObjectInspector), we will use its original ExprNodeDesc, instead of generating a ExprNodeColumnDesc. , bug fix + updated test results. This patch is ready for review. Since arc does work for me, I created a request at https://reviews.apache.org/r/7221/, Would it be possible not to hand over constant values from RS to GBY?, [~navis]
I am sorry. I am not very clear about your question. You meant to clone those objects?, [~yhuai]
In the above example, constant 0.5 seemed attached every output of map process and handed over as a value column, which is not needed to be., [~navis]
I see. Yes, constant values are generated as the map output with every row... I just checked trunk and found it has the same behavior. You can see the plan in https://github.com/apache/hive/blob/trunk/ql/src/test/results/clientpositive/count.q.out, for count(1), if map-side-aggregation is disabled, '1' will be attached to every map output... Probably we should open a separate issue to solve this problem., [~navis]
Just found HIVE-757 was opened to solve the problem you described. Also, HIVE-746 is another related issue., [~yhuai]
Ah, thanks. I'll check those., patch updated. All queries in udaf_percentile_approx.q are tested twice with disabled and enabled map-side aggregation, respectively. 

btw, I have a question. Since we want to make sure that two runs of a query can generate the same result, is there any good way to do that?, comments, address Namit's comments., +1

running tests, Committed. Thanks Yin, Integrated in Hive-trunk-h0.21 #1715 (See [https://builds.apache.org/job/Hive-trunk-h0.21/1715/])
    HIVE-3495 For UDAFs, when generating a plan without map-side-aggregation, constant 
agg parameters will be replaced by ExprNodeColumnDesc (Yin Huai via namit) (Revision 1392761)

     Result = FAILURE
namit : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1392761
Files : 
* /hive/trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/SemanticAnalyzer.java
* /hive/trunk/ql/src/test/queries/clientpositive/udaf_percentile_approx.q
* /hive/trunk/ql/src/test/results/clientpositive/count.q.out
* /hive/trunk/ql/src/test/results/clientpositive/nullgroup.q.out
* /hive/trunk/ql/src/test/results/clientpositive/nullgroup2.q.out
* /hive/trunk/ql/src/test/results/clientpositive/nullgroup4.q.out
* /hive/trunk/ql/src/test/results/clientpositive/nullgroup4_multi_distinct.q.out
* /hive/trunk/ql/src/test/results/clientpositive/udaf_percentile_approx.q.out
, Integrated in Hive-trunk-hadoop2 #54 (See [https://builds.apache.org/job/Hive-trunk-hadoop2/54/])
    HIVE-3495 For UDAFs, when generating a plan without map-side-aggregation, constant 
agg parameters will be replaced by ExprNodeColumnDesc (Yin Huai via namit) (Revision 1392761)

     Result = ABORTED
namit : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1392761
Files : 
* /hive/trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/SemanticAnalyzer.java
* /hive/trunk/ql/src/test/queries/clientpositive/udaf_percentile_approx.q
* /hive/trunk/ql/src/test/results/clientpositive/count.q.out
* /hive/trunk/ql/src/test/results/clientpositive/nullgroup.q.out
* /hive/trunk/ql/src/test/results/clientpositive/nullgroup2.q.out
* /hive/trunk/ql/src/test/results/clientpositive/nullgroup4.q.out
* /hive/trunk/ql/src/test/results/clientpositive/nullgroup4_multi_distinct.q.out
* /hive/trunk/ql/src/test/results/clientpositive/udaf_percentile_approx.q.out
, This issue is fixed and released as part of 0.10.0 release. If you find an issue which seems to be related to this one, please create a new jira and link this one with new jira.]