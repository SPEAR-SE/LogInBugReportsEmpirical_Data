[I have verified the change by cancelling the SQL query while it's executed. Without the change, the query was not able to be cancelled (see details in the JIRA description). With the change the cancellation worked. Note that we need to set fairness to true when creating the lock, otherwise the effect is similar to the original synchronized block.

[~daijy] Can you please review this change?, cc [~gopalv] in case there is any perf concern. Forcing the fairness does hurt the throughput, compared with no fairness, according to: https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/locks/ReentrantLock.html, 

Here are the results of testing the latest attachment:
https://issues.apache.org/jira/secure/attachment/12857262/HIVE-16172.1.patch

{color:red}ERROR:{color} -1 due to no test(s) being added or modified.

{color:green}SUCCESS:{color} +1 due to 10336 tests passed

Test results: https://builds.apache.org/job/PreCommit-HIVE-Build/4062/testReport
Console output: https://builds.apache.org/job/PreCommit-HIVE-Build/4062/console
Test logs: http://104.198.109.242/logs/PreCommit-HIVE-Build-4062/

Messages:
{noformat}
Executing org.apache.hive.ptest.execution.TestCheckPhase
Executing org.apache.hive.ptest.execution.PrepPhase
Executing org.apache.hive.ptest.execution.ExecutionPhase
Executing org.apache.hive.ptest.execution.ReportingPhase
{noformat}

This message is automatically generated.

ATTACHMENT ID: 12857262 - PreCommit-HIVE-Build, +1 on the change. [~gopalv] you might want to take a look as well., I don't think there's enough contention on this lock from many threads - last I counted it was just 2 threads, so the performance should remain relatively identical.

bq. Without the change, the query was not able to be cancelled (see details in the JIRA description).

Even if this is a slight performance hit, correctness over performance., [~gopalv] Thanks for the feedback. I'll commit this shortly., Committed. Thanks [~taoli-hwx]]