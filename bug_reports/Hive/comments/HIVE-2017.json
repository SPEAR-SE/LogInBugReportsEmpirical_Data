[taskCleanup() is calling System.exit(9) it will exit from JVM. Here instead of calling 
System.exit(9) we need to kill the map-reduce & non MR processes, Yeah, see my comments in HIVE-1872 regarding the brokenness of the System.exit, while processing two parallel tasks if one of the task fails the Driver.taskCleanup() will call system.exit() this will shutdown the jvm so it is replaced with the logic to stop the remaining tasks.. Here need to cleanup 2 kinds of tasks one is non-mr tasks and  mr tasks. For stopping non-mr tasks used the thread.interrupt() because every non-mr task will be executed as a thread and for mr tasks maintained a variable called jobKillUri's this variable will track the spawned job kill uri, in taskCleanup() if it is a mr task using this variable kill the job. , 
-----------------------------------------------------------
This is an automatically generated e-mail. To reply, visit:
https://reviews.apache.org/r/1609/
-----------------------------------------------------------

Review request for hive, John Sichi and Ning Zhang.


Summary
-------

while processing two parallel tasks if one of the task fails the Driver.taskCleanup() will call system.exit() this will shutdown the jvm so it is replaced with the logic to stop the remaining tasks.. Here need to cleanup 2 kinds of tasks one is non-mr tasks and  mr tasks. For stopping non-mr tasks used the thread.interrupt() because every non-mr task will be executed as a thread and for mr tasks maintained a variable called jobKillUri's this variable will track the spawned job kill uri, in taskCleanup() if it is a mr task using this variable kill the job. 


This addresses bug HIVE-2017.
    https://issues.apache.org/jira/browse/HIVE-2017


Diffs
-----

  trunk/ql/src/java/org/apache/hadoop/hive/ql/Driver.java 1160102 
  trunk/ql/src/java/org/apache/hadoop/hive/ql/exec/ExecDriver.java 1160102 
  trunk/ql/src/java/org/apache/hadoop/hive/ql/exec/HadoopJobExecHelper.java 1160102 
  trunk/ql/src/java/org/apache/hadoop/hive/ql/exec/Task.java 1160102 
  trunk/ql/src/java/org/apache/hadoop/hive/ql/io/rcfile/merge/BlockMergeTask.java 1160102 
  trunk/ql/src/test/queries/clientnegative/alter_exit.q PRE-CREATION 
  trunk/ql/src/test/results/clientnegative/alter_exit.q.out PRE-CREATION 

Diff: https://reviews.apache.org/r/1609/diff


Testing
-------

Added test case for this scenario.  Ran existing test cases


Thanks,

chinna

, Patch become stale i will rebase the patch and i will upload, 
-----------------------------------------------------------
This is an automatically generated e-mail. To reply, visit:
https://reviews.apache.org/r/1609/
-----------------------------------------------------------

(Updated 2011-09-16 17:33:41.236186)


Review request for hive, John Sichi and Ning Zhang.


Changes
-------

Rebased the patch on the latest trunk


Summary
-------

while processing two parallel tasks if one of the task fails the Driver.taskCleanup() will call system.exit() this will shutdown the jvm so it is replaced with the logic to stop the remaining tasks.. Here need to cleanup 2 kinds of tasks one is non-mr tasks and  mr tasks. For stopping non-mr tasks used the thread.interrupt() because every non-mr task will be executed as a thread and for mr tasks maintained a variable called jobKillUri's this variable will track the spawned job kill uri, in taskCleanup() if it is a mr task using this variable kill the job. 


This addresses bug HIVE-2017.
    https://issues.apache.org/jira/browse/HIVE-2017


Diffs (updated)
-----

  trunk/ql/src/java/org/apache/hadoop/hive/ql/exec/HadoopJobExecHelper.java 1170977 
  trunk/ql/src/java/org/apache/hadoop/hive/ql/exec/Task.java 1170977 
  trunk/ql/src/java/org/apache/hadoop/hive/ql/io/rcfile/merge/BlockMergeTask.java 1170977 
  trunk/ql/src/test/queries/clientnegative/alter_exit.q PRE-CREATION 
  trunk/ql/src/test/results/clientnegative/alter_exit.q.out PRE-CREATION 
  trunk/ql/src/java/org/apache/hadoop/hive/ql/Driver.java 1170977 
  trunk/ql/src/java/org/apache/hadoop/hive/ql/exec/ExecDriver.java 1170977 

Diff: https://reviews.apache.org/r/1609/diff


Testing
-------

Added test case for this scenario.  Ran existing test cases


Thanks,

chinna

, 
-----------------------------------------------------------
This is an automatically generated e-mail. To reply, visit:
https://reviews.apache.org/r/1609/
-----------------------------------------------------------

(Updated 2011-11-03 16:01:16.713162)


Review request for hive, John Sichi and Ning Zhang.


Changes
-------

Patch becomes stale so rebased


Summary
-------

while processing two parallel tasks if one of the task fails the Driver.taskCleanup() will call system.exit() this will shutdown the jvm so it is replaced with the logic to stop the remaining tasks.. Here need to cleanup 2 kinds of tasks one is non-mr tasks and  mr tasks. For stopping non-mr tasks used the thread.interrupt() because every non-mr task will be executed as a thread and for mr tasks maintained a variable called jobKillUri's this variable will track the spawned job kill uri, in taskCleanup() if it is a mr task using this variable kill the job. 


This addresses bug HIVE-2017.
    https://issues.apache.org/jira/browse/HIVE-2017


Diffs (updated)
-----

  trunk/ql/src/java/org/apache/hadoop/hive/ql/Driver.java 1197183 
  trunk/ql/src/java/org/apache/hadoop/hive/ql/exec/ExecDriver.java 1197183 
  trunk/ql/src/java/org/apache/hadoop/hive/ql/exec/HadoopJobExecHelper.java 1197183 
  trunk/ql/src/java/org/apache/hadoop/hive/ql/exec/Task.java 1197183 
  trunk/ql/src/java/org/apache/hadoop/hive/ql/io/rcfile/merge/BlockMergeTask.java 1197183 
  trunk/ql/src/test/queries/clientnegative/alter_exit.q PRE-CREATION 
  trunk/ql/src/test/results/clientnegative/alter_exit.q.out PRE-CREATION 

Diff: https://reviews.apache.org/r/1609/diff


Testing
-------

Added test case for this scenario.  Ran existing test cases


Thanks,

chinna

, @Chinna, can you refresh it again ?
This is leading to conflicts - I will look at it, I will rebase now and i will upload patch., Hi Namit,


Here need to cleanup 2 kinds of tasks one is non-mr tasks and mr tasks. For stopping non-mr tasks used the thread.interrupt() because every non-mr task will be executed as a thread and for mr tasks maintained a variable called jobKillUri's this variable will track the spawned job kill uri, in taskCleanup() if it is a mr task using this variable kill the job.

Here for the non-mr tasks thread.interrupt() may not help completely because they can catch InterruptedException and continue  and in some scenarios nothing it will do (As per API documentation)  other than just setting interrupt status to true for the thread these cases it will not stop the thread.

So we can add one variable like "isInterrupted" in Task.java and set it to true when we want to stop this (Ex in taskCleanup()) while execution of task before doing any major operation check this variable isInterrupted and if it is true return immediately  but with this approach we need add more checks for isInterrupted statements in all tasks.

So we need to add statements for checking  isInterrupted is set or not  in all the tasks before doing any operation it will take some good amount of time(Ex in ExecDriver before submitting the job) pls give u r inputs on this..
, This is an old issue. This is not an issue on the master.]