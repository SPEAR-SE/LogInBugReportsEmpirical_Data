[Does ANSI SQL specify how this should behave?, I took a look, it does not specify 'greatest' functions in the SQL standard as far as I can find.

But I think it makes more sense, as NULL means unknown, so if any argument is unknown then result is unknown.  What do you think?, compare predicates in ANSI SQL do evaluate to UNKNOWN, which is presumably NULL. I wonder though if Hive evaluates the 3-value logic after that correctly... anyway makes sense to change those to null, Yea that's what I found too.  

It looks like Hive is already good in terms of comparison operators (like '>'), just broken from 'Greatest' and 'Least'

{noformat}
hive> SELECT 10Y > null
    > FROM test
    > ;
OK
NULL

hive> select greatest(null, 1) from test;
OK
1
{noformat}

I'll try to refactor the greatest/least operator class to use the same logics as those, only difference is its a multi-way comparison., Review board : [https://reviews.apache.org/r/39248/|https://reviews.apache.org/r/39248/], [~xuefuz], [~jdere] can you guys help review this?  Thanks., 

Here are the results of testing the latest attachment:
https://issues.apache.org/jira/secure/attachment/12766217/HIVE-12082.patch

{color:red}ERROR:{color} -1 due to build exiting with an error

Test results: http://ec2-174-129-184-35.compute-1.amazonaws.com/jenkins/job/PreCommit-HIVE-TRUNK-Build/5623/testReport
Console output: http://ec2-174-129-184-35.compute-1.amazonaws.com/jenkins/job/PreCommit-HIVE-TRUNK-Build/5623/console
Test logs: http://ec2-174-129-184-35.compute-1.amazonaws.com/logs/PreCommit-HIVE-TRUNK-Build-5623/

Messages:
{noformat}
Executing org.apache.hive.ptest.execution.TestCheckPhase
Executing org.apache.hive.ptest.execution.PrepPhase
Executing org.apache.hive.ptest.execution.ExecutionPhase
Executing org.apache.hive.ptest.execution.ReportingPhase
Tests exited with: TestsFailedException: 5 tests failed
{noformat}

This message is automatically generated.

ATTACHMENT ID: 12766217 - PreCommit-HIVE-TRUNK-Build, Patch looks good. Some minor comments on RB., Address review comments., 

Here are the results of testing the latest attachment:
https://issues.apache.org/jira/secure/attachment/12766446/HIVE-12082.2.patch

{color:green}SUCCESS:{color} +1 due to 5 test(s) being added or modified.

{color:red}ERROR:{color} -1 due to 3 failed/errored test(s), 9685 tests executed
*Failed tests:*
{noformat}
org.apache.hive.hcatalog.api.TestHCatClient.testTableSchemaPropagation
org.apache.hive.jdbc.TestJdbcWithMiniHS2.testAddJarDataNucleusUnCaching
org.apache.hive.jdbc.TestSSL.testSSLVersion
{noformat}

Test results: http://ec2-174-129-184-35.compute-1.amazonaws.com/jenkins/job/PreCommit-HIVE-TRUNK-Build/5643/testReport
Console output: http://ec2-174-129-184-35.compute-1.amazonaws.com/jenkins/job/PreCommit-HIVE-TRUNK-Build/5643/console
Test logs: http://ec2-174-129-184-35.compute-1.amazonaws.com/logs/PreCommit-HIVE-TRUNK-Build-5643/

Messages:
{noformat}
Executing org.apache.hive.ptest.execution.TestCheckPhase
Executing org.apache.hive.ptest.execution.PrepPhase
Executing org.apache.hive.ptest.execution.ExecutionPhase
Executing org.apache.hive.ptest.execution.ReportingPhase
Tests exited with: TestsFailedException: 3 tests failed
{noformat}

This message is automatically generated.

ATTACHMENT ID: 12766446 - PreCommit-HIVE-TRUNK-Build, +1, Committed to master, thanks [~xuefuz] for taking time to review., This changes the behavior of greatest/least UDF's, adding label, FYI [~leftylev]

Currently they are listed here:  [https://cwiki.apache.org/confluence/display/Hive/LanguageManual+UDF#LanguageManualUDF-ConditionalFunctions|https://cwiki.apache.org/confluence/display/Hive/LanguageManual+UDF#LanguageManualUDF-ConditionalFunctions].

Actually I wonder if they are conditional functions, maybe should be in section 'mathematical functions'?, You're right [~szehon], they belong with the mathematical functions.  My bad -- I'm the one who suggested putting them in the conditional section in a comment on HIVE-9402.  (Dunno what I was thinking.)  Thanks., Fixed the doc, thanks Lefty for confirming moving the description., This behavior will be propagated to branch-1 as part of HIVE-14189. Not sure if I should add to fixVersion since I'm not committing the actual patch..., I'm not sure either, but the doc should mention 1.3.0 so I'll add a TODOC1.3 label to HIVE-14189.  Here's the doc link:

* [Mathematical Functions (greatest & least are at end of table) | https://cwiki.apache.org/confluence/display/Hive/LanguageManual+UDF#LanguageManualUDF-MathematicalFunctions], [~leftylev], you were actually right in the first place. 
The functions _least_ and _greatest_ are not (just) mathematical functions, they work for every primitive type and therefore should be documented in the conditional section.

e.g., 

{code}
select greatest ('goodbye','yellow','brick','road');                       -- yellow
select least    (date '2017-03-25',date '2017-01-17',date '2017-01-02');   -- 2017-01-02
{code}
, [~szehon] [~sershe] -

_GREATEST_ and _LEAST_ return _NULL_ if one their argument is _NULL_, on every database I'm familiar with.
However, I strongly feel this is a bad design that does not fit realistic use-cases.
SQL users tends to use _GREATEST_ /_LEAST_ as an horizontal _MAX_/_MIN_, which in that case makes a lot of sense to ignore _NULL_ values .
The is a work-around _NULLS_ but it is cumbersome and error-prone, e.g. -
{code}
GREATEST (coalesce(x,-999999999),coalesce(y,-999999999),coalesce(z,-999999999))
{code}

I would like to suggest 2 possible options to handle this function differently:
1. configuration: something like _hive.greatest.least.ignore.null_ with default value of _false_.
2. Enhanced syntax : {code}GREATEST/LEAST (...) [IGNORE NULLS]{code}

What say you?



]