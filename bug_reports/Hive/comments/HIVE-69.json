[General comment - need a lot of javadocs and documentation of how the state machine works. I think it works correctly but lets document as I have indicated below.

Also the state should not be maintained in the plan but should be in the treewalker. The state is never really used in the execution time and we should only try to put things that are used in the execution time in the plan.

Otherwise, this looks much cleaner than the pervious monolithic blob that we had. Thanks...
Inline Comments
ql/src/java/org/apache/hadoop/hive/ql/exec/TableScanOperator.java:32	Is this just a place holder right now?
ql/src/java/org/apache/hadoop/hive/ql/exec/Task.java:112	Lets add proper javadocs!!
ql/src/java/org/apache/hadoop/hive/ql/exec/Task.java:132	javadocs. What is this used for?
ql/src/java/org/apache/hadoop/hive/ql/parse/GenMapRedTaskProcessor.java:57	Move the new into the constructor?
ql/src/java/org/apache/hadoop/hive/ql/parse/GenMapRedTaskProcessor.java:1	javadocs needed.
ql/src/java/org/apache/hadoop/hive/ql/parse/GenMapRedTaskProcessor.java:117	Please put a comment on how this state machine works. What are the transitions, how the transitions are made and what are the actions taken by each transition.
ql/src/java/org/apache/hadoop/hive/ql/plan/mapredWork.java:28	This is purely compile time information that is used to generate the plan (cut the plan into multiple map reduce plans), so we should not be storing this in the plan. This seems to be specific to the GenMapRedPlanWalker, so I think we should be maintaining this state there in a hashmap.
ql/src/java/org/apache/hadoop/hive/ql/parse/SemanticAnalyzer.java:2986	Looks much cleaner with the walker stuff... This is cool...
ql/src/java/org/apache/hadoop/hive/ql/parse/GenMapRedWalker.java:44	I thought we were going to move this logic into the dispatcher? no?
ql/src/java/org/apache/hadoop/hive/ql/parse/GenMapRedTaskProcessor.java:116	Also a description of the call stack that leads to there transitions would be very helpful.
, ql/src/java/org/apache/hadoop/hive/ql/parse/GenMapRedTaskProcessor.java:128 As we discussed, this switch statement can be replaced with a more scalable framework for rules. You would then have a tree pattern matcher (actually just a path matcher initially) and a lookup for the associated transformer. With this switch statement code structure, adding a new rule would either mean writing a new visitor (duplicated code) or adding more cases to this switch statement (resulting in huge functions)., 
The following query will not work:

select count(1) FROM ( select a.x as x from x  UNION  ALL  select b.x as x from b ) out;

Union followed by reduce sink will not work  - since we have already made the child of reduce sink null.

It can be easily fixed in the new framework since tree walking/splitting etc. are independent




, Namit,

Can you upload the patch here. The following are my comments on the latest patch 

+1

some minor issues are indicated below. Lets create separate JIRAs to address those...

mostly minor comments.
Inline Comments
ql/src/java/org/apache/hadoop/hive/ql/exec/FileSinkOperator.java:169	should add @Override here.
ql/src/java/org/apache/hadoop/hive/ql/exec/TableScanOperator.java:51	nitpick - start with a capital letter.
ql/src/java/org/apache/hadoop/hive/ql/exec/Task.java:112	nitpick - please fix the comment here.
ql/src/java/org/apache/hadoop/hive/ql/parse/DefaultDispatcher.java:26	imported twice?
ql/src/java/org/apache/hadoop/hive/ql/parse/DefaultOpGraphWalker.java:69	should stack be parametrized here?
ql/src/java/org/apache/hadoop/hive/ql/parse/RuleRegExp.java:34	javadocs for all of these...
hadoop/hive/ql/parse/SemanticAnalyzer.java:2999	These can be packaged into ParseContext.
hadoop/hive/ql/parse/OperatorProcessor.java:52	Since all the process calls are being made using reflection, we can get rid of all the process functions.
hadoop/hive/ql/parse/OperatorProcessor.java:40	This can be made an interface instead of a class.
hadoop/hive/ql/parse/SemanticAnalyzer.java:3035	Ideally this could also be done through a second pass walker, or it could be done in the same walker as above?
hadoop/hive/ql/parse/RuleRegExp.java:39	Some description would help.
hadoop/hive/ql/parse/DefaultDispatcher.java:26	double inclusion!!
hadoop/hive/ql/parse/DefaultDispatcher.java:63	probably this can just be OperatorProcessorContext.class instead of taking the class name and then getting the class out of it.
hadoop/hive/ql/parse/DefaultRuleDispatcher.java:40	javadocs for each of these variables.
hadoop/hive/ql/optimizer/GenMRFileSink1.java:37	javadocs
hadoop/hive/ql/optimizer/GenMRFileSink1.java:68	Why is there a mapping from null to currTask.
hadoop/hive/ql/optimizer/GenMRFileSink1.java:62	Can you explain what is being done here. In the original SemanticAnalyzer, we were just setting up the dependency from the MR task to move task when we saw the FileSinkOperator. What is the rest of the logic for?, 
    [junit] compare to    =234  firstString^AsecondString firstKey^D1^AsecondKey^D2>
    [junit] o class = class java.util.ArrayList
    [junit] o size = 3
    [junit] o[0] class = class java.lang.Integer
    [junit] o[1] class = class java.util.ArrayList
    [junit] o[2] class = class java.util.HashMap
    [junit] o = [234, [firstString, secondString], {firstKey=1, secondKey=2}]
    [junit] bytes in text =234  firstString^AsecondString firstKey^D1^AsecondKey^D2>
    [junit] compare to    =234  firstString^AsecondString firstKey^D1^AsecondKey^D2>
    [junit] o class = class java.util.ArrayList
    [junit] o size = 3
    [junit] o = [234, null, {firstKey=1, secondKey=2}]
    [junit] Tests run: 9, Failures: 0, Errors: 0, Time elapsed: 0.498 sec
    [junit] Running org.apache.hadoop.hive.serde2.objectinspector.TestObjectInspectorUtils
    [junit] Tests run: 1, Failures: 0, Errors: 0, Time elapsed: 0.191 sec
    [junit] Running org.apache.hadoop.hive.serde2.objectinspector.TestReflectionObjectInspectors
    [junit] Tests run: 1, Failures: 0, Errors: 0, Time elapsed: 0.172 sec
    [junit] Running org.apache.hadoop.hive.serde2.objectinspector.TestStandardObjectInspectors
    [junit] Tests run: 4, Failures: 0, Errors: 0, Time elapsed: 0.175 sec
    [junit] Running org.apache.hadoop.hive.serde2.objectinspector.TestThriftObjectInspectors
    [junit] Tests run: 1, Failures: 0, Errors: 0, Time elapsed: 0.181 sec
    [junit] Running org.apache.hadoop.hive.serde2.objectinspector.TestUnionStructObjectInspector
    [junit] Tests run: 1, Failures: 0, Errors: 0, Time elapsed: 0.165 sec

BUILD SUCCESSFUL
Total time: 15 minutes 27 seconds
[njain@dev119 trunk]$ pwd
/home/njain/workspace/hadoophive/trunk
[njain@dev119 trunk]$ svn diff > /tmp/patch.txt


The tests ran successfully, HIVE-69. genMapRedTasks uses tree walker. (Namit through zshao)
, Committed revision 722723. Thanks Namit. 

]