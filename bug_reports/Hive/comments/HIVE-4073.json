[sql spec allows empty specification in over clause. Currently, our parser fails to parse this query. We have order-by optional but we do need user to specify a partitioning spec. We should relax that requirement and if user chose not to specify the partitioning column than partition by some constant value which achieves desired effect., OK after digging in a bit I understand the issue here and will work on implementing it., [~ashutoshc]

When OVER() with no partition column is specified, we will partition by some constant. In that case, there is only a need for a single reducer.  Should this change force the single reducer? Not sure how how I would do that yet., Attached patch not for commit, but it does work. I'll add some tests tomorrow and then think about forcing one reducer. When I manually set more than one reducer the patch still worked since the partition key was the same for a records., Just about got this done. Just fixing the fact that it allows invalid queries such as:

{noformat}
hive> select p_mfgr, 
    > sum(p_retailprice) as s1  
    > from part;
{noformat}

I think I will forgo forcing a single reducer at this point. In the future we can do that if desired., [~ashutoshc]

Attached patch seems to work fine but ptf_negative_AggrFuncsWithNoGBYNoPartDef fails ,due to this change, which needs to be resolved somehow. Quick question about which direction I should take in implementation:

TL;DR: Should the query "select sum(p_retailprice) as s1 from part;" throw a SemanticException?

I assumed yes as postgres does not allow it and there is a test for it ptf_negative_AggrFuncsWithNoGBYNoPartDef. However, it looks like the behavior of moving aggregates with no group by op to window ops was specifically allowed based on the two comments below:
https://github.com/apache/hive/blob/ptf-windowing/ql/src/java/org/apache/hadoop/hive/ql/parse/SemanticAnalyzer.java#L858
https://github.com/apache/hive/blob/ptf-windowing/ql/src/java/org/apache/hadoop/hive/ql/parse/SemanticAnalyzer.java#L10561, No this query shouldn't be allowed. Should raise an exception. Comments says queries which has windowing in those cases we can do this. But query in question clearly has no windowing spec.

It will be good to force number of reducers to 1, else it will be wastage of resources. But is probably fine to do later since this empty over clause is kind of a corner case anyways., Sounds good!, The ptf_negative_AggrFuncsWithNoGBYNoPartDef query is

select p_mfgr, 
sum(p_retailprice) as s1  
from part

Which should fail, right?

Changing ensureWindowingSourceHasPartitioning may not work. Its tied to how we infer windowing for aggregation invocation that don't have an explicit over clause.

The more direct fix maybe to do the partition on constant idea in SemanticAnalyzer::processWindowSpec.
The ASTTree for over() is ^(TOK_WINDOWSPEC) so this function should be invoked.
If hasPartSpec is false add the PartitionSpec on '0'
Does this make sense? 

Changing ensureWindowingSourceHasPartitioning will probably also affect how we handle multiple partitions. So i have another reason to try to avoid changing its logic :), Got it, makes sense! Thx!, Attached patch seems to work well. All the ptf tests pass and the query discussed above fails., Latest patch, Committed to branch. Thanks, Brock!, Thank you guys for pointing me the right direction! :)]