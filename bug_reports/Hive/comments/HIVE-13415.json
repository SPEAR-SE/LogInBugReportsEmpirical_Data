[Created https://reviews.apache.org/r/45738/, Taking patch from reviewboard and attaching, [~cwsteinbach] Can you please review. Thanks.
, The patch seems merely reverting HIVE-9601. I'm wondering what's the plan to address the problem that HIVE-9601 is solving. Thanks., There's some great discussion about HIVE-9601 there.

I think the discussion makes sense, I agree with Carl and in hindsight that HIVE-9601 made some physical assumption about the session that may not apply for all sessions.  I wonder can this piece of code can be made configurable to solve this use-case?  The point of HIVE-9601 is that a large number of HS2 clients (for example, Beeline) do want to close the session after disconnect, as they are never going to come back for it.  If this is reverted without making it configurable, there will be quite some resource leaks of session-level resources, which is also quite terrible., Understood. So shall I make this configurable at HiveServer2 level and keep the default as it is right now?

, That would be a good compromise for me.  You could also have session-level config that could override it.

Just wondering about this use-case, so when your client disconnects after submitting async job, another client instance will come back to check the job results?, Making this behavior configurable on a per-session basis sounds like the right approach to me.

[~prongs], thanks for working on this. I really appreciate it., Maybe we should consider closing any synchronous operation if client connection is declared lost and close the whole session if there are no live asynch ops. This seems universally true as there is no way for the client to retried the orphaned operation, and keeping them around seems just wasteful in resources. For asynchronous ops, they can live until expiration since client has a handle to further deal with them. 

For other DBs such as oracle or mysql, client loses the session when it disconnects from the server. It's more complicated for Hive as Hive allows async ops, which is why I proposed above.

, I'm not sure if I understand this right, but this would still lead to some wasted resource for BeeLine usage like HIVE-9601 (until expiration), as BeeLine does not come back once connection is lost.

HiveStatement.execute() uses async submission today, and hence BeeLiine by extension will keep the session open until expiration, even if it dies?, 

Here are the results of testing the latest attachment:
https://issues.apache.org/jira/secure/attachment/12797040/HIVE-13415.01.patch

{color:green}SUCCESS:{color} +1 due to 1 test(s) being added or modified.

{color:red}ERROR:{color} -1 due to 39 failed/errored test(s), 9898 tests executed
*Failed tests:*
{noformat}
TestMiniTezCliDriver-auto_sortmerge_join_8.q-schema_evol_orc_nonvec_mapwork_table.q-insert_update_delete.q-and-8-more - did not produce a TEST-*.xml file
TestMiniTezCliDriver-schema_evol_orc_acidvec_mapwork_part.q-vector_partitioned_date_time.q-vector_non_string_partition.q-and-12-more - did not produce a TEST-*.xml file
TestMiniTezCliDriver-vector_acid3.q-vector_decimal_trailing.q-lvj_mapjoin.q-and-12-more - did not produce a TEST-*.xml file
org.apache.hadoop.hive.cli.TestCliDriver.testCliDriver_ivyDownload
org.apache.hadoop.hive.cli.TestMiniSparkOnYarnCliDriver.testCliDriver_index_bitmap3
org.apache.hadoop.hive.metastore.TestAuthzApiEmbedAuthorizerInRemote.org.apache.hadoop.hive.metastore.TestAuthzApiEmbedAuthorizerInRemote
org.apache.hadoop.hive.metastore.TestFilterHooks.org.apache.hadoop.hive.metastore.TestFilterHooks
org.apache.hadoop.hive.metastore.TestHiveMetaStorePartitionSpecs.testAddPartitions
org.apache.hadoop.hive.metastore.TestHiveMetaStorePartitionSpecs.testFetchingPartitionsWithDifferentSchemas
org.apache.hadoop.hive.metastore.TestHiveMetaStorePartitionSpecs.testGetPartitionSpecs_WithAndWithoutPartitionGrouping
org.apache.hadoop.hive.metastore.TestMetaStoreEndFunctionListener.testEndFunctionListener
org.apache.hadoop.hive.metastore.TestMetaStoreEventListenerOnlyOnCommit.testEventStatus
org.apache.hadoop.hive.metastore.TestMetaStoreInitListener.testMetaStoreInitListener
org.apache.hadoop.hive.metastore.TestPartitionNameWhitelistValidation.testAddPartitionWithValidPartVal
org.apache.hadoop.hive.metastore.TestPartitionNameWhitelistValidation.testAppendPartitionWithCommas
org.apache.hadoop.hive.metastore.TestPartitionNameWhitelistValidation.testAppendPartitionWithUnicode
org.apache.hadoop.hive.metastore.TestPartitionNameWhitelistValidation.testAppendPartitionWithValidCharacters
org.apache.hadoop.hive.ql.lockmgr.TestDbTxnManager.testLockTimeout
org.apache.hadoop.hive.ql.security.TestClientSideAuthorizationProvider.testSimplePrivileges
org.apache.hadoop.hive.ql.security.TestExtendedAcls.org.apache.hadoop.hive.ql.security.TestExtendedAcls
org.apache.hadoop.hive.ql.security.TestFolderPermissions.org.apache.hadoop.hive.ql.security.TestFolderPermissions
org.apache.hadoop.hive.ql.security.TestMetastoreAuthorizationProvider.testSimplePrivileges
org.apache.hadoop.hive.ql.security.TestMultiAuthorizationPreEventListener.org.apache.hadoop.hive.ql.security.TestMultiAuthorizationPreEventListener
org.apache.hadoop.hive.ql.security.TestStorageBasedMetastoreAuthorizationDrops.testDropPartition
org.apache.hadoop.hive.ql.security.TestStorageBasedMetastoreAuthorizationProvider.testSimplePrivileges
org.apache.hadoop.hive.ql.security.TestStorageBasedMetastoreAuthorizationProviderWithACL.testSimplePrivileges
org.apache.hadoop.hive.ql.security.TestStorageBasedMetastoreAuthorizationReads.testReadDbFailure
org.apache.hadoop.hive.ql.security.TestStorageBasedMetastoreAuthorizationReads.testReadDbSuccess
org.apache.hadoop.hive.ql.security.TestStorageBasedMetastoreAuthorizationReads.testReadTableFailure
org.apache.hadoop.hive.ql.security.TestStorageBasedMetastoreAuthorizationReads.testReadTableSuccess
org.apache.hadoop.hive.ql.security.TestStorageBasedMetastoreAuthorizationReads.testReadTableSuccessWithReadOnly
org.apache.hadoop.hive.thrift.TestHadoopAuthBridge23.testDelegationTokenSharedStore
org.apache.hadoop.hive.thrift.TestHadoopAuthBridge23.testMetastoreProxyUser
org.apache.hadoop.hive.thrift.TestHadoopAuthBridge23.testSaslWithHiveMetaStore
org.apache.hive.hcatalog.listener.TestDbNotificationListener.dropDatabase
org.apache.hive.hcatalog.mapreduce.TestHCatMultiOutputFormat.org.apache.hive.hcatalog.mapreduce.TestHCatMultiOutputFormat
org.apache.hive.jdbc.TestSSL.testSSLFetchHttp
org.apache.hive.service.TestHS2ImpersonationWithRemoteMS.org.apache.hive.service.TestHS2ImpersonationWithRemoteMS
org.apache.hive.spark.client.TestSparkClient.testSyncRpc
{noformat}

Test results: http://ec2-174-129-184-35.compute-1.amazonaws.com/jenkins/job/PreCommit-HIVE-TRUNK-Build/7482/testReport
Console output: http://ec2-174-129-184-35.compute-1.amazonaws.com/jenkins/job/PreCommit-HIVE-TRUNK-Build/7482/console
Test logs: http://ec2-174-129-184-35.compute-1.amazonaws.com/logs/PreCommit-HIVE-TRUNK-Build-7482/

Messages:
{noformat}
Executing org.apache.hive.ptest.execution.TestCheckPhase
Executing org.apache.hive.ptest.execution.PrepPhase
Executing org.apache.hive.ptest.execution.ExecutionPhase
Executing org.apache.hive.ptest.execution.ReportingPhase
Tests exited with: TestsFailedException: 39 tests failed
{noformat}

This message is automatically generated.

ATTACHMENT ID: 12797040 - PreCommit-HIVE-TRUNK-Build, It's important for hive to allow async ops, since it fires a sequence of M/R jobs which might take hours. For DBs it's acceptable, since, in the average case, the queries are so small that they return in seconds, maybe minutes in some cases, but not usually hours. 

Secondly, I'll put a purist point of view. I think Beeline is just one client of hive server out of many clients. Any change in Hive Server that's being done just for Beeline should be thought again, since sooner or later that's bound to introduce tight coupling between hive server and beeline. It might break a client that the community doesn't even know about, and I think that's not a good server design. Until Beeline isn't the only way to talk to hive, it shouldn't inspire changes in server. , So my use case is an application which has a lifecycle and as a part of the lifecycle, some queries are fired on hive server. The application has a restart capability. So the queries fired on hive server are persisted(as operation handles) as the application stops and are read back when the application starts up again. Now, I need those operations to not fail while my restart is complete. I have the handles and expect handles to still be valid when I connect to hive server again. For this, we need:

* the connection session coupling to go away
* The asynchronous queries to not fail, as discussed somewhat on HIVE-11485

As mentioned in another comment, for hive server where an operation can take a long time to finish, recoverability is an important feature for clients to use. , Have made closing of session configurable. Please take a look. , This just seems to remove it without making it configurable?, [~szehon], Not sure which one you looked at, but latest version on review board seems fine., Sorry, I'd updated on reviewboard, but not here. Will attach patch too. , Taking patch from reviewboard and attaching, Cancelling patch to upload a new patch, Taking patch from reviewboard and attaching, [~cwsteinbach] [~szehon] Can you guys take a look? patch is also available on reviewboard. , +1 works for me, looks like it is configurable at session-level., +1 for https://issues.apache.org/jira/secure/attachment/12798463/HIVE-13415.05.patch, 

Here are the results of testing the latest attachment:
https://issues.apache.org/jira/secure/attachment/12798463/HIVE-13415.05.patch

{color:green}SUCCESS:{color} +1 due to 1 test(s) being added or modified.

{color:red}ERROR:{color} -1 due to 24 failed/errored test(s), 9967 tests executed
*Failed tests:*
{noformat}
TestJdbcWithMiniHS2 - did not produce a TEST-*.xml file
org.apache.hadoop.hive.cli.TestCliDriver.testCliDriver_index_compact_2
org.apache.hadoop.hive.cli.TestCliDriver.testCliDriver_llap_partitioned
org.apache.hadoop.hive.cli.TestCliDriver.testCliDriver_non_ascii_literal2
org.apache.hadoop.hive.cli.TestCliDriver.testCliDriver_vector_grouping_sets
org.apache.hadoop.hive.cli.TestCliDriver.testCliDriver_vector_interval_mapjoin
org.apache.hadoop.hive.cli.TestCliDriver.testCliDriver_vector_join_filters
org.apache.hadoop.hive.cli.TestMiniSparkOnYarnCliDriver.testCliDriver_index_bitmap3
org.apache.hadoop.hive.cli.TestMiniTezCliDriver.org.apache.hadoop.hive.cli.TestMiniTezCliDriver
org.apache.hadoop.hive.cli.TestMiniTezCliDriver.testCliDriver_dynamic_partition_pruning_2
org.apache.hadoop.hive.cli.TestMiniTezCliDriver.testCliDriver_schema_evol_orc_acidvec_mapwork_part
org.apache.hadoop.hive.cli.TestMiniTezCliDriver.testCliDriver_vector_char_simple
org.apache.hadoop.hive.metastore.TestHiveMetaStorePartitionSpecs.testAddPartitions
org.apache.hadoop.hive.metastore.TestHiveMetaStorePartitionSpecs.testFetchingPartitionsWithDifferentSchemas
org.apache.hadoop.hive.metastore.TestHiveMetaStorePartitionSpecs.testGetPartitionSpecs_WithAndWithoutPartitionGrouping
org.apache.hadoop.hive.ql.lockmgr.TestDbTxnManager.concurrencyFalse
org.apache.hadoop.hive.ql.lockmgr.TestDbTxnManager.testDDLExclusive
org.apache.hadoop.hive.ql.lockmgr.TestDbTxnManager.testDelete
org.apache.hadoop.hive.ql.lockmgr.TestDbTxnManager.testLockTimeout
org.apache.hadoop.hive.ql.lockmgr.TestDbTxnManager.testRollback
org.apache.hadoop.hive.ql.lockmgr.TestDbTxnManager.testSingleReadPartition
org.apache.hadoop.hive.ql.lockmgr.TestDbTxnManager.testSingleWriteTable
org.apache.hadoop.hive.ql.lockmgr.TestDbTxnManager.testUpdate
org.apache.hadoop.hive.ql.lockmgr.TestDbTxnManager.testWriteDynamicPartition
{noformat}

Test results: http://ec2-174-129-184-35.compute-1.amazonaws.com/jenkins/job/PreCommit-HIVE-TRUNK-Build/7596/testReport
Console output: http://ec2-174-129-184-35.compute-1.amazonaws.com/jenkins/job/PreCommit-HIVE-TRUNK-Build/7596/console
Test logs: http://ec2-174-129-184-35.compute-1.amazonaws.com/logs/PreCommit-HIVE-TRUNK-Build-7596/

Messages:
{noformat}
Executing org.apache.hive.ptest.execution.TestCheckPhase
Executing org.apache.hive.ptest.execution.PrepPhase
Executing org.apache.hive.ptest.execution.ExecutionPhase
Executing org.apache.hive.ptest.execution.ReportingPhase
Tests exited with: TestsFailedException: 24 tests failed
{noformat}

This message is automatically generated.

ATTACHMENT ID: 12798463 - PreCommit-HIVE-TRUNK-Build, After running the tests locally, org.apache.hadoop.hive.ql.lockmgr.TestDbTxnManager passes completely, so does org.apache.hadoop.hive.metastore.TestHiveMetaStorePartitionSpecs. Running the MiniTezCliDriver tests with overwrite output=true doesn't change any files. , Committed. Thanks [~prongs], Doc note:  Added a TODOC2.1 label so that *hive.server2.close.session.on.disconnect* will be documented in the HiveServer2 section of Configuration Properties for the 2.1.0 release.  (If more explanation is needed, it should go in Setting Up HiveServer2.)

* [Configuration Properties -- HiveServer2 | https://cwiki.apache.org/confluence/display/Hive/Configuration+Properties#ConfigurationProperties-HiveServer2]
* [Setting Up HiveServer2 | https://cwiki.apache.org/confluence/display/Hive/Setting+Up+HiveServer2], I see this behavior in hive 2.1.0.

Could not find the property recommended "hive.server2.close.session.on.disconnect" in the release notes or docs., This is documented now.  [~vihangk1] added a section to HiveServer2 Clients (thanks, Vihang) and I put *hive.server2.close.session.on.disconnect* in Configuration Properties:

* [HiveServer2 Clients -- Cancelling the Query | https://cwiki.apache.org/confluence/display/Hive/HiveServer2+Clients#HiveServer2Clients-CancellingtheQuery]
* [hive.server2.close.session.on.disconnect | https://cwiki.apache.org/confluence/display/Hive/Configuration+Properties#ConfigurationProperties-hive.server2.close.session.on.disconnect]

Removed the TODOC2.1 label., Thanks [~leftylev]]