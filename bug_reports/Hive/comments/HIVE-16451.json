[Confirmed by adding sleep between the two method, like this:
{code:title=HiveStatement.runAsyncOnServer}
  private void runAsyncOnServer(String sql) throws SQLException {
    checkConnection("execute");

    closeClientOperation();
    try {
      Thread.currentThread().sleep(8000L);
    } catch (Exception e) {
      e.printStackTrace();
    }
    initFlags();
[..]
  }
{code}

This reproduced the errors., A patch to solve the current problem.

Create a new method {{closeStatementIfNeeded}}, which only closes the statement, but does not touch the flags.

Using this method should solve the problem, since the flags are not flip-flopping any more., 

Here are the results of testing the latest attachment:
https://issues.apache.org/jira/secure/attachment/12863475/HIVE-16451.patch

{color:red}ERROR:{color} -1 due to no test(s) being added or modified.

{color:red}ERROR:{color} -1 due to 14 failed/errored test(s), 10551 tests executed
*Failed tests:*
{noformat}
TestSSL - did not produce a TEST-*.xml file (likely timed out) (batchId=220)
org.apache.hadoop.hive.cli.TestMiniLlapLocalCliDriver.testCliDriver[vector_if_expr] (batchId=143)
org.apache.hadoop.hive.cli.TestSparkCliDriver.org.apache.hadoop.hive.cli.TestSparkCliDriver (batchId=100)
org.apache.hadoop.hive.ql.TestMetaStoreLimitPartitionRequest.testMoreComplexQueryWithDirectSqlTooManyPartitions (batchId=214)
org.apache.hadoop.hive.ql.TestMetaStoreLimitPartitionRequest.testQueryWithFallbackToORMTooManyPartitions1 (batchId=214)
org.apache.hadoop.hive.ql.TestMetaStoreLimitPartitionRequest.testQueryWithFallbackToORMTooManyPartitions2 (batchId=214)
org.apache.hadoop.hive.ql.TestMetaStoreLimitPartitionRequest.testQueryWithFallbackToORMTooManyPartitions3 (batchId=214)
org.apache.hadoop.hive.ql.TestMetaStoreLimitPartitionRequest.testQueryWithFallbackToORMTooManyPartitions4 (batchId=214)
org.apache.hadoop.hive.ql.TestMetaStoreLimitPartitionRequest.testQueryWithInWithFallbackToORMTooManyPartitions (batchId=214)
org.apache.hadoop.hive.ql.TestMetaStoreLimitPartitionRequest.testQueryWithInWithFallbackToORMTooManyPartitions2 (batchId=214)
org.apache.hadoop.hive.ql.TestMetaStoreLimitPartitionRequest.testQueryWithLikeWithFallbackToORMTooManyPartitions (batchId=214)
org.apache.hadoop.hive.ql.TestMetaStoreLimitPartitionRequest.testSimpleQueryWithDirectSqlTooManyPartitions (batchId=214)
org.apache.hive.jdbc.authorization.TestJdbcWithSQLAuthUDFBlacklist.testBlackListedUdfUsage (batchId=223)
org.apache.hive.jdbc.authorization.TestJdbcWithSQLAuthorization.testBlackListedUdfUsage (batchId=223)
{noformat}

Test results: https://builds.apache.org/job/PreCommit-HIVE-Build/4697/testReport
Console output: https://builds.apache.org/job/PreCommit-HIVE-Build/4697/console
Test logs: http://104.198.109.242/logs/PreCommit-HIVE-Build-4697/

Messages:
{noformat}
Executing org.apache.hive.ptest.execution.TestCheckPhase
Executing org.apache.hive.ptest.execution.PrepPhase
Executing org.apache.hive.ptest.execution.ExecutionPhase
Executing org.apache.hive.ptest.execution.ReportingPhase
Tests exited with: TestsFailedException: 14 tests failed
{noformat}

This message is automatically generated.

ATTACHMENT ID: 12863475 - PreCommit-HIVE-Build, Addressed test failures, 

Here are the results of testing the latest attachment:
https://issues.apache.org/jira/secure/attachment/12863506/HIVE-16451.02.patch

{color:red}ERROR:{color} -1 due to no test(s) being added or modified.

{color:red}ERROR:{color} -1 due to 3 failed/errored test(s), 10578 tests executed
*Failed tests:*
{noformat}
org.apache.hadoop.hive.cli.TestCliDriver.testCliDriver[vector_order_null] (batchId=27)
org.apache.hadoop.hive.cli.TestMiniLlapLocalCliDriver.testCliDriver[vector_if_expr] (batchId=143)
org.apache.hive.jdbc.TestJdbcDriver2.testSelectExecAsync2 (batchId=221)
{noformat}

Test results: https://builds.apache.org/job/PreCommit-HIVE-Build/4700/testReport
Console output: https://builds.apache.org/job/PreCommit-HIVE-Build/4700/console
Test logs: http://104.198.109.242/logs/PreCommit-HIVE-Build-4700/

Messages:
{noformat}
Executing org.apache.hive.ptest.execution.TestCheckPhase
Executing org.apache.hive.ptest.execution.PrepPhase
Executing org.apache.hive.ptest.execution.ExecutionPhase
Executing org.apache.hive.ptest.execution.ReportingPhase
Tests exited with: TestsFailedException: 3 tests failed
{noformat}

This message is automatically generated.

ATTACHMENT ID: 12863506 - PreCommit-HIVE-Build, Retriggering the precommit with the same file, to check again.

, 

Here are the results of testing the latest attachment:
https://issues.apache.org/jira/secure/attachment/12863540/HIVE-16451.03.patch

{color:red}ERROR:{color} -1 due to no test(s) being added or modified.

{color:red}ERROR:{color} -1 due to 3 failed/errored test(s), 10579 tests executed
*Failed tests:*
{noformat}
org.apache.hadoop.hive.cli.TestCliDriver.testCliDriver[vector_order_null] (batchId=27)
org.apache.hadoop.hive.cli.TestMiniLlapLocalCliDriver.testCliDriver[vector_if_expr] (batchId=143)
org.apache.hadoop.hive.cli.TestSparkCliDriver.testCliDriver[vector_count_distinct] (batchId=109)
{noformat}

Test results: https://builds.apache.org/job/PreCommit-HIVE-Build/4703/testReport
Console output: https://builds.apache.org/job/PreCommit-HIVE-Build/4703/console
Test logs: http://104.198.109.242/logs/PreCommit-HIVE-Build-4703/

Messages:
{noformat}
Executing org.apache.hive.ptest.execution.TestCheckPhase
Executing org.apache.hive.ptest.execution.PrepPhase
Executing org.apache.hive.ptest.execution.ExecutionPhase
Executing org.apache.hive.ptest.execution.ReportingPhase
Tests exited with: TestsFailedException: 3 tests failed
{noformat}

This message is automatically generated.

ATTACHMENT ID: 12863540 - PreCommit-HIVE-Build, This 2 are known flaky:
- HIVE-15776 - Flaky test: TestMiniLlapLocalCliDriver vector_if_expr
- HIVE-16362- Flaky test: TestMiniLlapLocalCliDriver.testCliDriver[vector_count_distinct]

Registered 2 new flaky:
- HIVE-16466 - Flaky test: TestJdbcDriver2.testSelectExecAsync2
- HIVE-16467 - Flaky test: TestCliDriver.testCliDriver[vector_order_null]

So I think the test failures are not related.

[~vgumashta], [~thejas]: Could you please review, since this patch affects Ambari specific code as well in {{HiveStatement.executeAsync}}.

Thanks,
Peter, [~vihangk1], [~ychena] could you please take a look?

Thanks,
Peter, Thanks for finding this out [~pvary]. Although I didn't quite get how the patch fixes the race condition. The way I understand the issue is that there is a Logging thread and the thread executing the HiveStatement. Both these threads are accessing isLogBeingGenerated, isCancelled, isQueryClosed flags in the same HiveStatement object. None of these getters and setters are thread safe. I think there could be more undiscovered race-conditions in this execution path., Thanks [~vihangk1] for taking the time to look at this!

Currently during the {{HiveStatement.runAsyncOnServer}} the {{isQueryClosed}} flag is flipping:
- Constructor sets initially sets it to true
- The call {{closeClientOperation}} sets it to false
- The call {{initFlags}} sets it to true again

This happens even on the happy path, when there is no cancellation or errors, and could generate the "Method getQueryLog() failed. The statement has been closed or cancelled." warning message.

The getQueryLog, and runAsyncOnServer currently used parallel in very limited situations, which might not lead to race conditions in other cases. At least I have to find any concrete example, so I concentrated on the current problem.

Changing the HiveStatement to a thread safe one would be a big change. I could do that, but was not sure that the community would agree with that - Shall we do that [~vihangk1], [~ychena]? Would it worth the performance impact? Might worth a letter to the dev list....

Thanks,
Peter

 , On the weekend I did some thinking, and I realized that HiveStatement could not be made to thread safe (see execute, and getResultSet could be called from different threads and cause problems).

We can not make the HiveStatement thread safe, but we should at least make sure that calling getQueryLog will not cause problems if it is called parallel with any of the followings: cancel, close, execute, executeAsync, executeQuery, executeUpdate, getUpdateCount and more interestingly for the HiveQueryResultSet.next too. It is a quiet complex problem for the first glance, so I created a new jira for it: HIVE-16517 - HiveStatement thread safety issues.

In the meantime this patch could solve the problems which can arise during the happy path.

, [~anishek]: Could you please take a look at it, if you have time?

Thanks,
Peter, [~pvary] The way i see the problem, query logs should not be requested until the query request is submitted. Additionally since HiveStatement is not thread safe  ==> dont think getting logs in a separate thread via LogRunnable is a great idea, to this end i had created HIVE-15940 a while back, which will bring back the processing to a single thread, but this will require some time to implement and is not trivial. 

For now your changes look good. 

Thanks
anishek, Thanks for the review [~anishek]!, [~ychena]: Could you please review and commit? This causing flaky TestBeeLineDriver tests.

Thanks,
Peter, [~pvary], it is a good fix, but I am not sure it is very effective if not thread safe. Anyway it is good to have for now.  +1, Committed the fix into master. Thanks [~pvary] for your contribution. , Thanks [~ychena], [~anishek] and [~vihangk1] for the review and the commit!, Hive 3.0.0 has been released so closing this jira.]