[RelDataTypeFactoryImpl's LoadingCache seem to create Fields with indices based on the current row ordering. 

But in AggregateProjectPullUpConstantsRule, the navigable map that stores the constants seem to hash it against the original ordinal. So when iterating over the fieldlist of aggregate row types to create, to create the projection again, wrong datatypes are getting mapped against the column names.

In this particular example shared, the original type is a(bigint), c(integer), d(varchar). But post the transformation the type ends up as  a(bigint), c(varchar), d(integer) failing in type equivalence. , With just calcite libraries, the same table def and query works. The issue comes only with hive classes overriding calcite's.

We have mitigated this currently by capturing the AssertionError and skipping the optimization.]