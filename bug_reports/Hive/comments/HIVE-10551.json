[Snapshot shows 680 MB of data already present, and it ends up throwing OOM when it tries to allocate 1800+MB for sorter.  , [~rajesh.balamohan]

Can you please attach the explain plan?
Also what was hive.auto.convert.join.noconditionaltask.size set to?

I tend to not increase io.sort.mb beyond 1024., hive.auto.convert.join.noconditionaltask.size=128000000.  I will attach the plan as an attachment., [~rajesh.balamohan]
How many Sort threads are used?
I am wondering if it has a multiplying factor on o.sort.mb, [~mmokhtar] - Default of 2 with pipelinedsorter is used. No, io.sort.mb is not multiplied in PipelinedSorter., [~rajesh.balamohan] This OOM is happening in the mapper? Is this when re-using a container that was used in the mapper phase? What is the Xmx value used for the container? Can you provide the heap dump for this please. From the looks of it, the group by operator probably decided to flush its results and that could have resulted in the ReduceSinkOperator requesting for the sort buffers which could have pushed this over the edge. Can you also post the stack trace here for reference please., [~vikram.dixit] - OOM happens in Map-1 (tried again with apr 29 build commit:0cad50a193ba777f9271808f057caae674738817. i.e close to the date on which this JIRA was reported).  This happens irrespective of container reuse.  Posting the stacktrace of the OOM (but it could be misleading since it didn't have enough space to allocate to sorter)
{noformat}
Error: Failure while running task:java.lang.RuntimeException: java.lang.OutOfMemoryError: Java heap space
at org.apache.hadoop.hive.ql.exec.tez.TezProcessor.initializeAndRunProcessor(TezProcessor.java:157)
at org.apache.hadoop.hive.ql.exec.tez.TezProcessor.run(TezProcessor.java:137)
at org.apache.tez.runtime.LogicalIOProcessorRuntimeTask.run(LogicalIOProcessorRuntimeTask.java:345)
at org.apache.tez.runtime.task.TezTaskRunner$TaskRunnerCallable$1.run(TezTaskRunner.java:179)
at org.apache.tez.runtime.task.TezTaskRunner$TaskRunnerCallable$1.run(TezTaskRunner.java:171)
at java.security.AccessController.doPrivileged(Native Method)
at javax.security.auth.Subject.doAs(Subject.java:422)
at org.apache.hadoop.security.UserGroupInformation.doAs(UserGroupInformation.java:1628)
at org.apache.tez.runtime.task.TezTaskRunner$TaskRunnerCallable.callInternal(TezTaskRunner.java:171)
at org.apache.tez.runtime.task.TezTaskRunner$TaskRunnerCallable.callInternal(TezTaskRunner.java:167)
at org.apache.tez.common.CallableWithNdc.call(CallableWithNdc.java:36)
at java.util.concurrent.FutureTask.run(FutureTask.java:266)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
at java.lang.Thread.run(Thread.java:745)
Caused by: java.lang.OutOfMemoryError: Java heap space
at java.nio.HeapByteBuffer.(HeapByteBuffer.java:57)
at java.nio.ByteBuffer.allocate(ByteBuffer.java:335)
at org.apache.tez.runtime.library.common.sort.impl.PipelinedSorter.(PipelinedSorter.java:152)
at org.apache.tez.runtime.library.common.sort.impl.PipelinedSorter.(PipelinedSorter.java:117)
at org.apache.tez.runtime.library.output.OrderedPartitionedKVOutput.start(OrderedPartitionedKVOutput.java:143)
at org.apache.hadoop.hive.ql.exec.tez.MapRecordProcessor.init(MapRecordProcessor.java:141)
at org.apache.hadoop.hive.ql.exec.tez.TezProcessor.initializeAndRunProcessor(TezProcessor.java:147)
... 14 more
{noformat}, [~mmccline] for your reference.]