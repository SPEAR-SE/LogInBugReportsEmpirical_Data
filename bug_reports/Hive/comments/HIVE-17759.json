[I would like to recommend to evaluate the following options:

* rethink the whole HiveConf...to use some annotation level thing like:
{code}
@HiveConfVariable{ name="hive.main.asd",
description = "long story",
altNames = {"hadoop.sql.main.sql","hadoop.hive.sql" }
}
Integer asd = 5; // this is the default value
// the type is the field type...can go wrong..
{code}
altought these fields are not entirely used just to collect the informations; I think it would feel natural...
this might alsp open up the possibility to add some validators to the conf values...because currently we can't easily specify that something can't be negative...
* introduce some templating if possible....(should HiveConf be tied to an enum?
* or....add some getters which check the current "type" of the conf variable
, HiveConf already supports validators (see confvars that declare one).
HiveConf.ConfVars is also already an ENUM :)
It also has getIntVar/etc. getters (incl. static ones that don't require a HiveConf object).
The pattern of usage in the linked jira is clearly very brittle, so I think we should just hide these fields and add a getter with a type check., I feel that the current enum  doesn't entirely serve its purpose...however; I'm not sure.
Its great that HiveConf already has support for validators; but I've seen (and bumped into) the caveats of some options which's value was  used as an enum; but only checked using a string equals. the most annoying is that when someone typoes a non-trival setting value like: "strict" to "srtict" ....the conf currently doesn't check that the value is expected or not...it interprets it as a false or something; and silently sweeps it under the rug....declaring the accepted values could also enable to document them more easily. I feel that adding everything to the enum constructor is a bit too much..

I'm not against extending the existing; but the accepted values should be declared in a mandatory manner for every option. If an option is set to an unknown value; that should raise an exception - and prevent the misuse/misinterpretation of it..., Well, there are many options that don't have a fixed set of values - any number/etc.; any file path/URL/user name/ZK path/etc.
It's possible to add validators to existing options... We could also remove ctors that do not supply a validator argument so that it cannot be skipped, and add a NoopValidator, so that skipping validation is a more conscious decision.]