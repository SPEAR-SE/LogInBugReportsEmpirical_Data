[Prior to HIVE-13040, selecting on such a table fails with NPE in split generation. With HIVE-13040, the select returns properly. But I'm not sure if it 100% solves the problem because this isn't the original goal of HIVE-13040.

The root cause is in {{CompactorOutputCommitter::commitJob}}, we 're calling rename to move output from tmp location to final location. However, if the final location already exists, i.e. computed by another compaction task, the rename will merge the two outputs, resulting the nested base dir we see.
A mitigation is to delete the existing final location before the rename. But I guess it won't 100% solve the race condition here., [~ashutoshc], would you mind share your ideas on this? Thank you!, Also pinging [~ekoifman]. Seems you're quite knowledgeable about transactions :), The right solution would be not to allow 2 concurrent compactions on the same partition., [~ekoifman], is there any plan to implement this on Hive side? Or do you mean users have to avoid such concurrent compactions themselves?, When compactions are triggered by the system automatically they have logic to avoid concurrent invocations but not when triggered by the user.  It should and will be fixed (almost certainly before 2.2 is released), Thank you [~ekoifman]. That's great to know., Hi [~ekoifman], looking at your suggestions in HIVE-14980, is the idea to use </db/table/partition> as the primary key for the compaction queue? So we can avoid redundant compact request when inserting them right?, That would not work.  COMPACTION_QUEUE has CQ_STATE so it's valid to have multiple entries for the same db/table/partition (in fact in some cases even db/table/partiton/cq_state need not be unique), Thanks for the explanations [~ekoifman]! Do you have any other solutions in mind? I guess another way is to acquire some kind of lock before read/write COMPACTION_QUEUE?, 

Here are the results of testing the latest attachment:
https://issues.apache.org/jira/secure/attachment/12840914/HIVE-15202.01.patch

{color:green}SUCCESS:{color} +1 due to 1 test(s) being added or modified.

{color:red}ERROR:{color} -1 due to 6 failed/errored test(s), 10747 tests executed
*Failed tests:*
{noformat}
org.apache.hadoop.hive.cli.TestCliDriver.testCliDriver[sample2] (batchId=5)
org.apache.hadoop.hive.cli.TestCliDriver.testCliDriver[sample4] (batchId=15)
org.apache.hadoop.hive.cli.TestCliDriver.testCliDriver[sample6] (batchId=60)
org.apache.hadoop.hive.cli.TestCliDriver.testCliDriver[sample7] (batchId=59)
org.apache.hadoop.hive.cli.TestCliDriver.testCliDriver[sample9] (batchId=38)
org.apache.hadoop.hive.cli.TestMiniLlapCliDriver.testCliDriver[transform_ppr2] (batchId=133)
{noformat}

Test results: https://builds.apache.org/job/PreCommit-HIVE-Build/2328/testReport
Console output: https://builds.apache.org/job/PreCommit-HIVE-Build/2328/console
Test logs: http://104.198.109.242/logs/PreCommit-HIVE-Build-2328/

Messages:
{noformat}
Executing org.apache.hive.ptest.execution.TestCheckPhase
Executing org.apache.hive.ptest.execution.PrepPhase
Executing org.apache.hive.ptest.execution.ExecutionPhase
Executing org.apache.hive.ptest.execution.ReportingPhase
Tests exited with: TestsFailedException: 6 tests failed
{noformat}

This message is automatically generated.

ATTACHMENT ID: 12840914 - PreCommit-HIVE-Build, All failures have age > 1

[~wzheng] could you review please, Patch looks good. Although I think an alternative way to define the CompactionResponse can be {id, state, isNew (boolean)}

+1, Yes, that's a better way.  Made this change in patch 3, 

Here are the results of testing the latest attachment:
https://issues.apache.org/jira/secure/attachment/12840974/HIVE-15202.03.patch

{color:green}SUCCESS:{color} +1 due to 1 test(s) being added or modified.

{color:red}ERROR:{color} -1 due to 8 failed/errored test(s), 10749 tests executed
*Failed tests:*
{noformat}
org.apache.hadoop.hive.cli.TestCliDriver.testCliDriver[sample2] (batchId=5)
org.apache.hadoop.hive.cli.TestCliDriver.testCliDriver[sample4] (batchId=15)
org.apache.hadoop.hive.cli.TestCliDriver.testCliDriver[sample6] (batchId=60)
org.apache.hadoop.hive.cli.TestCliDriver.testCliDriver[sample7] (batchId=59)
org.apache.hadoop.hive.cli.TestCliDriver.testCliDriver[sample9] (batchId=38)
org.apache.hadoop.hive.cli.TestMiniLlapCliDriver.testCliDriver[orc_ppd_schema_evol_3a] (batchId=133)
org.apache.hadoop.hive.cli.TestMiniLlapCliDriver.testCliDriver[transform_ppr2] (batchId=133)
org.apache.hadoop.hive.cli.TestMiniTezCliDriver.testCliDriver[explainanalyze_2] (batchId=91)
{noformat}

Test results: https://builds.apache.org/job/PreCommit-HIVE-Build/2336/testReport
Console output: https://builds.apache.org/job/PreCommit-HIVE-Build/2336/console
Test logs: http://104.198.109.242/logs/PreCommit-HIVE-Build-2336/

Messages:
{noformat}
Executing org.apache.hive.ptest.execution.TestCheckPhase
Executing org.apache.hive.ptest.execution.PrepPhase
Executing org.apache.hive.ptest.execution.ExecutionPhase
Executing org.apache.hive.ptest.execution.ReportingPhase
Tests exited with: TestsFailedException: 8 tests failed
{noformat}

This message is automatically generated.

ATTACHMENT ID: 12840974 - PreCommit-HIVE-Build, explainanalyze_2  is flaky per HIVE-15084, the rest have age > 1
[~wzheng] could you review please, Hi [~ekoifman], I have one question. Suppose we have a compaction in READY_FOR_CLEANING state, then we enqueue another compaction on the same partition. Is it possible that the cleaner removes the files that are supposed to be compacted by the 2nd compaction?, Patch 3 looks good. +1, It's not.  The cleaner can only remove files that are obsolete, i.e. there is another (better/wider) delta/base that includes the same data.  No reader (including compaction) reads obsolete data.
AcidUtils.getAcidState() encapsulates this, I see. Thanks for the explanations Eugene :), Committed to master
Thanks Wei for the review]