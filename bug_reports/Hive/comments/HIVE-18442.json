[The issue seems to related to class loading. FileSystem uses ServiceLoader to load FS implementations. But it will only load once. So if hive-exec.jar is not loaded by the context class loader when {{FileSystem::loadFileSystems}} is called, the NullScanFileSystem will not be loaded and thus the failure.

The issue is specific to cluster mode. I don't see it in client mode.

I think we can set {{fs.nullscan.impl}} in JobConf to fix it., I didn't add a qtest for this because we have hive-exec.jar in driver's extra class path in the test, which can solve the issue. But since we can't expect this in real deployment, code change is still needed., | (/) *{color:green}+1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
|| || || || {color:brown} Prechecks {color} ||
| {color:blue}0{color} | {color:blue} findbugs {color} | {color:blue}  0m  0s{color} | {color:blue} Findbugs executables are not available. {color} |
| {color:green}+1{color} | {color:green} @author {color} | {color:green}  0m  0s{color} | {color:green} The patch does not contain any @author tags. {color} |
|| || || || {color:brown} master Compile Tests {color} ||
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green}  7m  5s{color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green}  0m 57s{color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  0m 31s{color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 51s{color} | {color:green} master passed {color} |
|| || || || {color:brown} Patch Compile Tests {color} ||
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green}  1m 19s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green}  0m 57s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green}  0m 57s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  0m 32s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green}  0m  0s{color} | {color:green} The patch has no whitespace issues. {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 51s{color} | {color:green} the patch passed {color} |
|| || || || {color:brown} Other Tests {color} ||
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green}  0m 11s{color} | {color:green} The patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black} 13m 25s{color} | {color:black} {color} |
\\
\\
|| Subsystem || Report/Notes ||
| Optional Tests |  asflicense  javac  javadoc  findbugs  checkstyle  compile  |
| uname | Linux hiveptest-server-upstream 3.16.0-4-amd64 #1 SMP Debian 3.16.36-1+deb8u1 (2016-09-03) x86_64 GNU/Linux |
| Build tool | maven |
| Personality | /data/hiveptest/working/yetus/dev-support/hive-personality.sh |
| git revision | master / 6938fca |
| Default Java | 1.8.0_111 |
| modules | C: ql U: ql |
| Console output | http://104.198.109.242/logs//PreCommit-HIVE-Build-8618/yetus.txt |
| Powered by | Apache Yetus    http://yetus.apache.org |


This message was automatically generated.

, 

Here are the results of testing the latest attachment:
https://issues.apache.org/jira/secure/attachment/12906094/HIVE-18442.1.patch

{color:red}ERROR:{color} -1 due to no test(s) being added or modified.

{color:red}ERROR:{color} -1 due to 18 failed/errored test(s), 11559 tests executed
*Failed tests:*
{noformat}
org.apache.hadoop.hive.cli.TestCliDriver.testCliDriver[mapjoin_hook] (batchId=12)
org.apache.hadoop.hive.cli.TestCliDriver.testCliDriver[ppd_join5] (batchId=35)
org.apache.hadoop.hive.cli.TestMiniLlapCliDriver.testCliDriver[llap_smb] (batchId=151)
org.apache.hadoop.hive.cli.TestMiniLlapLocalCliDriver.testCliDriver[bucket_map_join_tez1] (batchId=170)
org.apache.hadoop.hive.cli.TestMiniLlapLocalCliDriver.testCliDriver[bucketsortoptimize_insert_2] (batchId=152)
org.apache.hadoop.hive.cli.TestMiniLlapLocalCliDriver.testCliDriver[hybridgrace_hashjoin_2] (batchId=157)
org.apache.hadoop.hive.cli.TestMiniLlapLocalCliDriver.testCliDriver[insert_values_orig_table_use_metadata] (batchId=165)
org.apache.hadoop.hive.cli.TestMiniLlapLocalCliDriver.testCliDriver[llap_acid] (batchId=169)
org.apache.hadoop.hive.cli.TestMiniLlapLocalCliDriver.testCliDriver[llap_acid_fast] (batchId=160)
org.apache.hadoop.hive.cli.TestMiniLlapLocalCliDriver.testCliDriver[mergejoin] (batchId=165)
org.apache.hadoop.hive.cli.TestMiniLlapLocalCliDriver.testCliDriver[sysdb] (batchId=160)
org.apache.hadoop.hive.cli.TestNegativeCliDriver.testCliDriver[authorization_part] (batchId=94)
org.apache.hadoop.hive.cli.TestSparkCliDriver.testCliDriver[ppd_join5] (batchId=121)
org.apache.hadoop.hive.metastore.TestEmbeddedHiveMetaStore.testTransactionalValidation (batchId=214)
org.apache.hadoop.hive.ql.io.TestDruidRecordWriter.testWrite (batchId=255)
org.apache.hive.jdbc.TestSSL.testConnectionMismatch (batchId=232)
org.apache.hive.jdbc.TestSSL.testConnectionWrongCertCN (batchId=232)
org.apache.hive.jdbc.TestSSL.testMetastoreConnectionWrongCertCN (batchId=232)
{noformat}

Test results: https://builds.apache.org/job/PreCommit-HIVE-Build/8618/testReport
Console output: https://builds.apache.org/job/PreCommit-HIVE-Build/8618/console
Test logs: http://104.198.109.242/logs/PreCommit-HIVE-Build-8618/

Messages:
{noformat}
Executing org.apache.hive.ptest.execution.TestCheckPhase
Executing org.apache.hive.ptest.execution.PrepPhase
Executing org.apache.hive.ptest.execution.YetusPhase
Executing org.apache.hive.ptest.execution.ExecutionPhase
Executing org.apache.hive.ptest.execution.ReportingPhase
Tests exited with: TestsFailedException: 18 tests failed
{noformat}

This message is automatically generated.

ATTACHMENT ID: 12906094 - PreCommit-HIVE-Build, The failures are not related.

[~stakiar] [~xuefuz] could you take a look? Thanks.

 , Hi [~lirui], thanks for working on this. Just curious, the stacktrace shows that ql package is loaded and this package is in hive-exec.jar, right. If nullscan class in in hive-exec.jar, how come it's not found?, Hi [~xuefuz], I believe it's related to how hive-exec.jar is added to driver's classpath. FileSystem uses ServiceLoader to [load FS implementations|https://github.com/apache/hadoop/blob/release-2.8.3-RC0/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileSystem.java#L2757]. This method is only called once. For NullScanFileSystem to be loaded, we have to make sure hive-exec.jar is loaded when the method is called. Alternatively, we can set the implementation class in JobConf, which is what the patch is doing.
It seems hive-exec is added differently between yarn-client and yarn-cluster mode. I can do some more investigation into that., In yarn-cluster mode, the user jar (i.e. hive-exec.jar) won't be put in the AM's system class path:
 [https://github.com/apache/spark/blob/v2.2.0/resource-managers/yarn/src/main/scala/org/apache/spark/deploy/yarn/Client.scala#L1229]
 Unless it's added to the driver's extra class path or we enable {{spark.yarn.user.classpath.first}}.

The AM in yarn-cluster mode is ApplicationMaster. It loads the hive-exec.jar and runs our RemoteDriver in dedicated thread. However, ApplicationMaster somehow triggers {{FileSystem::loadFileSystems}} before it launches this thread. So that we missed the chance to register the NullScanFileSystem.

 

Yarn-client mode also faces the same potential issue because hive-exec.jar is not in system class path when the JVM starts (in yarn-client, the RemoteDriver runs in SparkSubmit). But SparkSubmit doesn't trigger {{FileSystem::loadFileSystems}} before it runs RemoteDriver, which means we're just lucky in that case., Hi [~lirui], Thanks for the explanation. The patch looks fine. I'm wondering if there could be other similar issues. Thus, would either of the two options you mentioned works better?
{quote}
Unless it's added to the driver's extra class path or we enable {{spark.yarn.user.classpath.first}}.
{quote}, [~xuefuz], the two options achieve the same purpose: add hive-exec.jar to class path when launching the JVM. It means we'll add hive-exec.jar twice, which I think is OK because we've been doing this in our test.
I'll upload a patch to use extra driver class path, {{spark.yarn.user.classpath.first}} is not a documented property so I prefer not to use it., Regarding loading the jar twice, since we are loading it when JMV starts, can we get rid of the other loading?, I made a mistake about spark.driver.extraClassPath: it can only contain jars that are locally available to all nodes in the cluster, and thus not suitable to fix the issue. I'll explore other options., Hi [~xuefuz], I still can't find a way to add hive-exec to system class path except the {{spark.yarn.user.classpath.first}} config. So I prefer to go with patch v1 instead of hacking around class paths. We can revisit this if there's indeed other class loading issues in the future. What do you think?, [~lirui] Since it's a hack any way, is it okay just to use {{spark.yarn.user.classpath.first}} configuration? I know it's not ideal., [~xuefuz], my concern about {{spark.yarn.user.classpath.first}} is it's not a public config. On the other hand, setting {{fs.SCHEME.impl}} in the configuration is somehow a more "official" solution -- at least the java doc implies the filesystem binding will be checked in the conf when getting a FileSystem instance:
https://github.com/apache/hadoop/blob/release-3.0.0-beta1-RC0/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileSystem.java#L3237, Okay. It's fine to use {{fs.nullscan.impl}} to solve the problem. However, I don't quite follow how it solves the classpath issue if hive-exec.jar isn't loadede. Can you shed some light on this? , [~xuefuz], it doesn't change the class path, but it adds the binding to the configuration. So that FileSystem knows the implementing class for scheme "nullscan" -- FileSystem get FS instances either by ServiceLoader or configuration., +1 to patch #1., Pushed to master. Thanks Xuefu for the review., This jira is resolved and released with Hive 3.0 If you find an issue with it, please create a new jira.]