[I totally agree that these redundant columns violate database normalization rules and cause a lot of inconvenience. I also suffered a lot before. It seems to be a big change? also cc'ing [~ashutoshc] and [~alangates] to watch if it will affect HBase based metastore? Thanks., Have you considered the perf impact on fetching column stats? In theory it should be small but I don't know what datanucleus would do, In ORM, DataNucleus will generate a SQL query with joined tables (TAB_COL_STATS/PART_COL_STATS, DBS, TBLS, PARTITIONS) instead of only one table TAB_COL_STATS/PART_COL_STATS. In DirectSQL, we need also modify the queries accordingly. 
Though query to only one table might run faster than that to multiple joined tables in the DBs that HMS supports, the performance impact should be very small given that the tables are joined via their keys. , Makes sense, Submit patch for pre-commit test, Patch has been uploaded to https://reviews.apache.org/r/38429/. [~sershe], [~xuefuz], [~ashutoshc], could you help review it? Thanks., 

{color:red}Overall{color}: -1 at least one tests failed

Here are the results of testing the latest attachment:
https://issues.apache.org/jira/secure/attachment/12756158/HIVE-11786.patch

{color:red}ERROR:{color} -1 due to 6 failed/errored test(s), 9445 tests executed
*Failed tests:*
{noformat}
org.apache.hadoop.hive.cli.TestMinimrCliDriver.testCliDriver_index_bitmap3
org.apache.hadoop.hive.cli.TestMinimrCliDriver.testCliDriver_stats_counter_partitioned
org.apache.hadoop.hive.ql.txn.compactor.TestCompactor.testStatsAfterCompactionPartTbl
org.apache.hive.hcatalog.api.TestHCatClient.testTableSchemaPropagation
org.apache.hive.hcatalog.streaming.TestStreaming.testInterleavedTransactionBatchCommits
org.apache.hive.hcatalog.streaming.TestStreaming.testTransactionBatchEmptyCommit
{noformat}

Test results: http://ec2-174-129-184-35.compute-1.amazonaws.com/jenkins/job/PreCommit-HIVE-TRUNK-Build/5301/testReport
Console output: http://ec2-174-129-184-35.compute-1.amazonaws.com/jenkins/job/PreCommit-HIVE-TRUNK-Build/5301/console
Test logs: http://ec2-174-129-184-35.compute-1.amazonaws.com/logs/PreCommit-HIVE-TRUNK-Build-5301/

Messages:
{noformat}
Executing org.apache.hive.ptest.execution.PrepPhase
Executing org.apache.hive.ptest.execution.ExecutionPhase
Executing org.apache.hive.ptest.execution.ReportingPhase
Tests exited with: TestsFailedException: 6 tests failed
{noformat}

This message is automatically generated.

ATTACHMENT ID: 12756158 - PreCommit-HIVE-TRUNK-Build, Left some comments on RB. The test failures (except HCat and streaming) may be related., Updated the patch based on [~sershe] review (Thanks! Sergey) and also fixed the failed test (TestCompactor#testStatsAfterCompactionPartTbl). But I was not able to reproduce the failures for MiniMR tests index_bitmap3.q, stats_counter_partitioned.q in my local machine. I wonder if they are the flaky tests and submit patch to see if they could be reproduced in precommit build., [~sershe] I uploaded a new patch to RB for review. Thanks, Looks like that the pre-commit test has not been queued. Reattached the patch., 

{color:red}Overall{color}: -1 at least one tests failed

Here are the results of testing the latest attachment:
https://issues.apache.org/jira/secure/attachment/12757121/HIVE-11786.1.patch

{color:red}ERROR:{color} -1 due to 41 failed/errored test(s), 9450 tests executed
*Failed tests:*
{noformat}
org.apache.hadoop.hive.cli.TestMiniSparkOnYarnCliDriver.testCliDriver_bucket4
org.apache.hadoop.hive.cli.TestMiniSparkOnYarnCliDriver.testCliDriver_bucket5
org.apache.hadoop.hive.cli.TestMiniSparkOnYarnCliDriver.testCliDriver_bucket6
org.apache.hadoop.hive.cli.TestMiniSparkOnYarnCliDriver.testCliDriver_bucketizedhiveinputformat
org.apache.hadoop.hive.cli.TestMiniSparkOnYarnCliDriver.testCliDriver_bucketmapjoin6
org.apache.hadoop.hive.cli.TestMiniSparkOnYarnCliDriver.testCliDriver_bucketmapjoin7
org.apache.hadoop.hive.cli.TestMiniSparkOnYarnCliDriver.testCliDriver_constprog_partitioner
org.apache.hadoop.hive.cli.TestMiniSparkOnYarnCliDriver.testCliDriver_empty_dir_in_table
org.apache.hadoop.hive.cli.TestMiniSparkOnYarnCliDriver.testCliDriver_external_table_with_space_in_location_path
org.apache.hadoop.hive.cli.TestMiniSparkOnYarnCliDriver.testCliDriver_index_bitmap3
org.apache.hadoop.hive.cli.TestMiniSparkOnYarnCliDriver.testCliDriver_index_bitmap_auto
org.apache.hadoop.hive.cli.TestMiniSparkOnYarnCliDriver.testCliDriver_infer_bucket_sort_bucketed_table
org.apache.hadoop.hive.cli.TestMiniSparkOnYarnCliDriver.testCliDriver_infer_bucket_sort_map_operators
org.apache.hadoop.hive.cli.TestMiniSparkOnYarnCliDriver.testCliDriver_infer_bucket_sort_merge
org.apache.hadoop.hive.cli.TestMiniSparkOnYarnCliDriver.testCliDriver_infer_bucket_sort_num_buckets
org.apache.hadoop.hive.cli.TestMiniSparkOnYarnCliDriver.testCliDriver_infer_bucket_sort_reducers_power_two
org.apache.hadoop.hive.cli.TestMiniSparkOnYarnCliDriver.testCliDriver_leftsemijoin_mr
org.apache.hadoop.hive.cli.TestMiniSparkOnYarnCliDriver.testCliDriver_list_bucket_dml_10
org.apache.hadoop.hive.cli.TestMiniSparkOnYarnCliDriver.testCliDriver_parallel_orderby
org.apache.hadoop.hive.cli.TestMiniSparkOnYarnCliDriver.testCliDriver_ql_rewrite_gbtoidx
org.apache.hadoop.hive.cli.TestMiniSparkOnYarnCliDriver.testCliDriver_ql_rewrite_gbtoidx_cbo_1
org.apache.hadoop.hive.cli.TestMiniSparkOnYarnCliDriver.testCliDriver_quotedid_smb
org.apache.hadoop.hive.cli.TestMiniSparkOnYarnCliDriver.testCliDriver_reduce_deduplicate
org.apache.hadoop.hive.cli.TestMiniSparkOnYarnCliDriver.testCliDriver_remote_script
org.apache.hadoop.hive.cli.TestMiniSparkOnYarnCliDriver.testCliDriver_root_dir_external_table
org.apache.hadoop.hive.cli.TestMiniSparkOnYarnCliDriver.testCliDriver_schemeAuthority
org.apache.hadoop.hive.cli.TestMiniSparkOnYarnCliDriver.testCliDriver_schemeAuthority2
org.apache.hadoop.hive.cli.TestMiniSparkOnYarnCliDriver.testCliDriver_scriptfile1
org.apache.hadoop.hive.cli.TestMiniSparkOnYarnCliDriver.testCliDriver_smb_mapjoin_8
org.apache.hadoop.hive.cli.TestMiniSparkOnYarnCliDriver.testCliDriver_stats_counter
org.apache.hadoop.hive.cli.TestMiniSparkOnYarnCliDriver.testCliDriver_stats_counter_partitioned
org.apache.hadoop.hive.cli.TestMiniSparkOnYarnCliDriver.testCliDriver_truncate_column_buckets
org.apache.hadoop.hive.cli.TestMiniSparkOnYarnCliDriver.testCliDriver_uber_reduce
org.apache.hive.hcatalog.api.TestHCatClient.testTableSchemaPropagation
org.apache.hive.spark.client.TestSparkClient.testAddJarsAndFiles
org.apache.hive.spark.client.TestSparkClient.testCounters
org.apache.hive.spark.client.TestSparkClient.testErrorJob
org.apache.hive.spark.client.TestSparkClient.testJobSubmission
org.apache.hive.spark.client.TestSparkClient.testMetricsCollection
org.apache.hive.spark.client.TestSparkClient.testSimpleSparkJob
org.apache.hive.spark.client.TestSparkClient.testSyncRpc
{noformat}

Test results: http://ec2-174-129-184-35.compute-1.amazonaws.com/jenkins/job/PreCommit-HIVE-TRUNK-Build/5329/testReport
Console output: http://ec2-174-129-184-35.compute-1.amazonaws.com/jenkins/job/PreCommit-HIVE-TRUNK-Build/5329/console
Test logs: http://ec2-174-129-184-35.compute-1.amazonaws.com/logs/PreCommit-HIVE-TRUNK-Build-5329/

Messages:
{noformat}
Executing org.apache.hive.ptest.execution.PrepPhase
Executing org.apache.hive.ptest.execution.ExecutionPhase
Executing org.apache.hive.ptest.execution.ReportingPhase
Tests exited with: TestsFailedException: 41 tests failed
{noformat}

This message is automatically generated.

ATTACHMENT ID: 12757121 - PreCommit-HIVE-TRUNK-Build, Reattached the patch to kick off another round of precommit tests since the test failures look to me not related to the patch.
These failed tests are most TestMiniSparkOnYarnCliDriver tests and has a common cause like:
==
2015-09-18 15:21:07,237 INFO  [stdout-redir-1] client.SparkClientImpl (SparkClientImpl.java:run(588)) - java.io.IOException: Failed to create local dir in /tmp/spark-01dba71e-0baf-473a-9fec-977803eac958/blockmgr-b5ff096e-b567-497d-94ee-a78bdf96cf31/32.
2015-09-18 15:21:07,237 INFO  [stdout-redir-1] client.SparkClientImpl (SparkClientImpl.java:run(588)) - 	at org.apache.spark.storage.DiskBlockManager.getFile(DiskBlockManager.scala:73)
==
In addition, I was not able to reproduce the tests in my local machine.

The tests (MiniMR tests index_bitmap3.q, stats_counter_partitioned.q) initially failed in 1st round of precommit tests did not fail in this round.
, 

{color:red}Overall{color}: -1 at least one tests failed

Here are the results of testing the latest attachment:
https://issues.apache.org/jira/secure/attachment/12761244/HIVE-11786.1.patch

{color:red}ERROR:{color} -1 due to 3 failed/errored test(s), 9452 tests executed
*Failed tests:*
{noformat}
org.apache.hive.hcatalog.api.TestHCatClient.testTableSchemaPropagation
org.apache.hive.hcatalog.streaming.TestStreaming.testRemainingTransactions
org.apache.hive.hcatalog.streaming.TestStreaming.testTransactionBatchEmptyCommit
{noformat}

Test results: http://ec2-174-129-184-35.compute-1.amazonaws.com/jenkins/job/PreCommit-HIVE-TRUNK-Build/5348/testReport
Console output: http://ec2-174-129-184-35.compute-1.amazonaws.com/jenkins/job/PreCommit-HIVE-TRUNK-Build/5348/console
Test logs: http://ec2-174-129-184-35.compute-1.amazonaws.com/logs/PreCommit-HIVE-TRUNK-Build-5348/

Messages:
{noformat}
Executing org.apache.hive.ptest.execution.PrepPhase
Executing org.apache.hive.ptest.execution.ExecutionPhase
Executing org.apache.hive.ptest.execution.ReportingPhase
Tests exited with: TestsFailedException: 3 tests failed
{noformat}

This message is automatically generated.

ATTACHMENT ID: 12761244 - PreCommit-HIVE-TRUNK-Build, The three failed tests seem not related to this patch., [~sershe] [~xuefuz] and [~ashutoshc] Could you review the patch on https://reviews.apache.org/r/38429/ to see if the change makes sense? Thanks, attached a new rebased patch. [~sershe],  [~ashutoshc], and [~xuefuz], could you review the patch and let me know if there is any issue to remove these columns from TAB_COL_STATS/PART_COL_STATS? Using a join via K/FKey instead a direct query to these tables I think should not be a big concern to the performance.
HIVE-11788 is depending on this JIRA. Otherwise, I need look for other ways to fix HIVE-11788. Thanks, Posting on behalf of HiveQA which was locked out:

{color:red}Overall{color}: -1 at least one tests failed

Here are the results of testing the latest attachment:
https://issues.apache.org/jira/secure/attachment/12764455/HIVE-11786.2.patch

{color:red}ERROR:{color} -1 due to 1 failed/errored test(s), 9640 tests executed
*Failed tests:*
{noformat}
org.apache.hive.hcatalog.api.TestHCatClient.testTableSchemaPropagation
{noformat}

Test results: http://ec2-174-129-184-35.compute-1.amazonaws.com/jenkins/job/PreCommit-HIVE-TRUNK-Build/5487/testReport
Console output: http://ec2-174-129-184-35.compute-1.amazonaws.com/jenkins/job/PreCommit-HIVE-TRUNK-Build/5487/console
Test logs: http://ec2-174-129-184-35.compute-1.amazonaws.com/logs/PreCommit-HIVE-TRUNK-Build-5487/

Messages:
{noformat}
Executing org.apache.hive.ptest.execution.PrepPhase
Executing org.apache.hive.ptest.execution.ExecutionPhase
Executing org.apache.hive.ptest.execution.ReportingPhase
Tests exited with: TestsFailedException: 1 tests failed
{noformat}, The test failure is not related to the patch., Chatted with Chaoyu offline, this change actually looks good to me, +1.  

It is a big change, but Chaoyu gave a good explanation of performance impact of the join, and there stands to be more gain for cases like changing the part/table names.  And there seems to be good coverage via the qtests., Committed to Hive 2.0.0 and 1.3.0. Thank [~szehon] and [~sershe] for reviewing the patch., This patch seems to have caused a pretty big performance regression on the client.

With the patch
{code}
2015-10-06T17:25:01,133 INFO  [main([])]: log.PerfLogger (PerfLogger.java:PerfLogBegin(117)) - <PERFLOG method=get_aggr_stats_for from=org.apache.hadoop.hive.metastore.RetryingHMSHandler>
2015-10-06T17:25:21,237 INFO  [main([])]: log.PerfLogger (PerfLogger.java:PerfLogEnd(157)) - </PERFLOG method=get_aggr_stats_for start=1444166701133 end=1444166721237 duration=20104 from=org.apache.hadoop.hive.metastore.RetryingHMSHandler threadId=0 retryCount=0 error=false>
2015-10-06T17:25:21,248 INFO  [main([])]: log.PerfLogger (PerfLogger.java:PerfLogBegin(117)) - <PERFLOG method=get_aggr_stats_for from=org.apache.hadoop.hive.metastore.RetryingHMSHandler>
2015-10-06T17:25:41,074 INFO  [main([])]: log.PerfLogger (PerfLogger.java:PerfLogEnd(157)) - </PERFLOG method=get_aggr_stats_for start=1444166721248 end=1444166741074 duration=19826 from=org.apache.hadoop.hive.metastore.RetryingHMSHandler threadId=0 retryCount=0 error=false>
2015-10-06T17:25:41,170 INFO  [main([])]: log.PerfLogger (PerfLogger.java:PerfLogBegin(117)) - <PERFLOG method=get_aggr_stats_for from=org.apache.hadoop.hive.metastore.RetryingHMSHandler>
2015-10-06T17:26:59,585 INFO  [main([])]: log.PerfLogger (PerfLogger.java:PerfLogEnd(157)) - </PERFLOG method=get_aggr_stats_for start=1444166741170 end=1444166819585 duration=78415 from=org.apache.hadoop.hive.metastore.RetryingHMSHandler threadId=0 retryCount=0 error=false>
2015-10-06T17:27:01,439 INFO  [main([])]: log.PerfLogger (PerfLogger.java:PerfLogBegin(117)) - <PERFLOG method=get_aggr_stats_for from=org.apache.hadoop.hive.metastore.RetryingHMSHandler>
2015-10-06T17:27:01,662 INFO  [main([])]: log.PerfLogger (PerfLogger.java:PerfLogEnd(157)) - </PERFLOG method=get_aggr_stats_for start=1444166821439 end=1444166821662 duration=223 from=org.apache.hadoop.hive.metastore.RetryingHMSHandler threadId=0 retryCount=0 error=false>
{code}

Without the patch.
{code}
2015-10-06T17:04:51,205 INFO  [main([])]: log.PerfLogger (PerfLogger.java:PerfLogBegin(117)) - <PERFLOG method=get_aggr_stats_for from=org.apache.hadoop.hive.metastore.RetryingHMSHandler>
2015-10-06T17:04:51,440 INFO  [main([])]: log.PerfLogger (PerfLogger.java:PerfLogEnd(157)) - </PERFLOG method=get_aggr_stats_for start=1444165491205 end=1444165491439 duration=234 from=org.apache.hadoop.hive.metastore.RetryingHMSHandler threadId=0 retryCount=0 error=false>
2015-10-06T17:04:51,450 INFO  [main([])]: log.PerfLogger (PerfLogger.java:PerfLogBegin(117)) - <PERFLOG method=get_aggr_stats_for from=org.apache.hadoop.hive.metastore.RetryingHMSHandler>
2015-10-06T17:04:51,655 INFO  [main([])]: log.PerfLogger (PerfLogger.java:PerfLogEnd(157)) - </PERFLOG method=get_aggr_stats_for start=1444165491450 end=1444165491655 duration=205 from=org.apache.hadoop.hive.metastore.RetryingHMSHandler threadId=0 retryCount=0 error=false>
2015-10-06T17:04:51,751 INFO  [main([])]: log.PerfLogger (PerfLogger.java:PerfLogBegin(117)) - <PERFLOG method=get_aggr_stats_for from=org.apache.hadoop.hive.metastore.RetryingHMSHandler>
2015-10-06T17:04:52,355 INFO  [main([])]: log.PerfLogger (PerfLogger.java:PerfLogEnd(157)) - </PERFLOG method=get_aggr_stats_for start=1444165491751 end=1444165492355 duration=604 from=org.apache.hadoop.hive.metastore.RetryingHMSHandler threadId=0 retryCount=0 error=false>
2015-10-06T17:04:54,224 INFO  [main([])]: log.PerfLogger (PerfLogger.java:PerfLogBegin(117)) - <PERFLOG method=get_aggr_stats_for from=org.apache.hadoop.hive.metastore.RetryingHMSHandler>
2015-10-06T17:04:54,624 INFO  [main([])]: log.PerfLogger (PerfLogger.java:PerfLogEnd(157)) - </PERFLOG method=get_aggr_stats_for start=1444165494224 end=1444165494624 duration=400 from=org.apache.hadoop.hive.metastore.RetryingHMSHandler threadId=0 retryCount=0 error=false>
{code}

This is running against a MySQL database with a client-embedded metastore.

Are there specific log lines which would help to debug this ? I have logs with debug logging for org.apache.hadoop.hive.metastore, cc [~sershe], and thanks for pointing me to this jira for the perf regression. Reverting just this patch fixes things., The expensive queries.
{code}
2015-10-06T17:25:20,120 DEBUG [main([])]: metastore.MetaStoreDirectSql (MetaStoreDirectSql.java:timingTrace(819)) - Direct SQL query in 18756.556801ms + 0.055911ms, the query is [select "COLUMN_NAME", "COLUMN_TYPE", min("LONG_LOW_VALUE"), max("LONG_HIGH_VALUE"), min("DOUBLE_LOW_VALUE"), max("DOUBLE_HIGH_VALUE"), min(cast("BIG_DECIMAL_LOW_VALUE" as decimal)), max(cast("BIG_DECIMAL_HIGH_VALUE" as decimal)), sum("NUM_NULLS"), max("NUM_DISTINCTS"), max("AVG_COL_LEN"), max("MAX_COL_LEN"), sum("NUM_TRUES"), sum("NUM_FALSES"), avg(("LONG_HIGH_VALUE"-"LONG_LOW_VALUE")/cast("NUM_DISTINCTS" as decimal)),avg(("DOUBLE_HIGH_VALUE"-"DOUBLE_LOW_VALUE")/"NUM_DISTINCTS"),avg((cast("BIG_DECIMAL_HIGH_VALUE" as decimal)-cast("BIG_DECIMAL_LOW_VALUE" as decimal))/"NUM_DISTINCTS"),sum("NUM_DISTINCTS") from (SELECT "DBS"."NAME" "DB_NAME", "TBLS"."TBL_NAME" "TABLE_NAME", "PARTITIONS"."PART_NAME" "PARTITION_NAME", "PCS"."COLUMN_NAME", "PCS"."COLUMN_TYPE", "PCS"."LONG_LOW_VALUE", "PCS"."LONG_HIGH_VALUE", "PCS"."DOUBLE_HIGH_VALUE", "PCS"."DOUBLE_LOW_VALUE", "PCS"."BIG_DECIMAL_LOW_VALUE", "PCS"."BIG_DECIMAL_HIGH_VALUE", "PCS"."NUM_NULLS", "PCS"."NUM_DISTINCTS", "PCS"."AVG_COL_LEN","PCS"."MAX_COL_LEN", "PCS"."NUM_TRUES", "PCS"."NUM_FALSES","PCS"."LAST_ANALYZED" FROM "PART_COL_STATS" "PCS" JOIN "PARTITIONS" ON ("PCS"."PART_ID" = "PARTITIONS"."PART_ID") JOIN "TBLS" ON ("PARTITIONS"."TBL_ID" = "TBLS"."TBL_ID") JOIN "DBS" ON ("TBLS"."DB_ID" = "DBS"."DB_ID")) VW  where "DB_NAME" = ? and "TABLE_NAME" = ?  and "COLUMN_NAME" in (?) and "PARTITION_NAME" ingroup by "COLUMN_NAME", "COLUMN_TYPE"]
{code}

{code}
2015-10-06T17:25:39,938 DEBUG [main([])]: metastore.MetaStoreDirectSql (MetaStoreDirectSql.java:timingTrace(819)) - Direct SQL query in 18442.878558ms + 0.050024ms, the query is [select "COLUMN_NAME", "COLUMN_TYPE", min("LONG_LOW_VALUE"), max("LONG_HIGH_VALUE"), min("DOUBLE_LOW_VALUE"), max("DOUBLE_HIGH_VALUE"), min(cast("BIG_DECIMAL_LOW_VALUE" as decimal)), max(cast("BIG_DECIMAL_HIGH_VALUE" as decimal)), sum("NUM_NULLS"), max("NUM_DISTINCTS"), max("AVG_COL_LEN"), max("MAX_COL_LEN"), sum("NUM_TRUES"), sum("NUM_FALSES"), avg(("LONG_HIGH_VALUE"-"LONG_LOW_VALUE")/cast("NUM_DISTINCTS" as decimal)),avg(("DOUBLE_HIGH_VALUE"-"DOUBLE_LOW_VALUE")/"NUM_DISTINCTS"),avg((cast("BIG_DECIMAL_HIGH_VALUE" as decimal)-cast("BIG_DECIMAL_LOW_VALUE" as decimal))/"NUM_DISTINCTS"),sum("NUM_DISTINCTS") from (SELECT "DBS"."NAME" "DB_NAME", "TBLS"."TBL_NAME" "TABLE_NAME", "PARTITIONS"."PART_NAME" "PARTITION_NAME", "PCS"."COLUMN_NAME", "PCS"."COLUMN_TYPE", "PCS"."LONG_LOW_VALUE", "PCS"."LONG_HIGH_VALUE", "PCS"."DOUBLE_HIGH_VALUE", "PCS"."DOUBLE_LOW_VALUE", "PCS"."BIG_DECIMAL_LOW_VALUE", "PCS"."BIG_DECIMAL_HIGH_VALUE", "PCS"."NUM_NULLS", "PCS"."NUM_DISTINCTS", "PCS"."AVG_COL_LEN","PCS"."MAX_COL_LEN", "PCS"."NUM_TRUES", "PCS"."NUM_FALSES","PCS"."LAST_ANALYZED" FROM "PART_COL_STATS" "PCS" JOIN "PARTITIONS" ON ("PCS"."PART_ID" = "PARTITIONS"."PART_ID") JOIN "TBLS" ON ("PARTITIONS"."TBL_ID" = "TBLS"."TBL_ID") JOIN "DBS" ON ("TBLS"."DB_ID" = "DBS"."DB_ID")) VW  where "DB_NAME" = ? and "TABLE_NAME" = ?  and "COLUMN_NAME" in (?) and "PARTITION_NAME" in
{code}

{code}
2015-10-06T17:25:59,859 DEBUG [main([])]: metastore.MetaStoreDirectSql (MetaStoreDirectSql.java:timingTrace(819)) - Direct SQL query in 18496.68169ms + 0.050946ms, the query is [select "COLUMN_NAME", "COLUMN_TYPE", min("LONG_LOW_VALUE"), max("LONG_HIGH_VALUE"), min("DOUBLE_LOW_VALUE"), max("DOUBLE_HIGH_VALUE"), min(cast("BIG_DECIMAL_LOW_VALUE" as decimal)), max(cast("BIG_DECIMAL_HIGH_VALUE" as decimal)), sum("NUM_NULLS"), max("NUM_DISTINCTS"), max("AVG_COL_LEN"), max("MAX_COL_LEN"), sum("NUM_TRUES"), sum("NUM_FALSES"), avg(("LONG_HIGH_VALUE"-"LONG_LOW_VALUE")/cast("NUM_DISTINCTS" as decimal)),avg(("DOUBLE_HIGH_VALUE"-"DOUBLE_LOW_VALUE")/"NUM_DISTINCTS"),avg((cast("BIG_DECIMAL_HIGH_VALUE" as decimal)-cast("BIG_DECIMAL_LOW_VALUE" as decimal))/"NUM_DISTINCTS"),sum("NUM_DISTINCTS") from (SELECT "DBS"."NAME" "DB_NAME", "TBLS"."TBL_NAME" "TABLE_NAME", "PARTITIONS"."PART_NAME" "PARTITION_NAME", "PCS"."COLUMN_NAME", "PCS"."COLUMN_TYPE", "PCS"."LONG_LOW_VALUE", "PCS"."LONG_HIGH_VALUE", "PCS"."DOUBLE_HIGH_VALUE", "PCS"."DOUBLE_LOW_VALUE", "PCS"."BIG_DECIMAL_LOW_VALUE", "PCS"."BIG_DECIMAL_HIGH_VALUE", "PCS"."NUM_NULLS", "PCS"."NUM_DISTINCTS", "PCS"."AVG_COL_LEN","PCS"."MAX_COL_LEN", "PCS"."NUM_TRUES", "PCS"."NUM_FALSES","PCS"."LAST_ANALYZED" FROM "PART_COL_STATS" "PCS" JOIN "PARTITIONS" ON ("PCS"."PART_ID" = "PARTITIONS"."PART_ID") JOIN "TBLS" ON ("PARTITIONS"."TBL_ID" = "TBLS"."TBL_ID") JOIN "DBS" ON ("TBLS"."DB_ID" = "DBS"."DB_ID")) VW  where "DB_NAME" = ? and "TABLE_NAME" = ?  and "COLUMN_NAME" in (?) and "PARTITION_NAME" in (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,? ...
{code}
{code}
015-10-06T17:26:00,994 DEBUG [main([])]: metastore.MetaStoreDirectSql (MetaStoreDirectSql.java:timingTrace(819)) - Direct SQL query in 1133.352123ms + 0.065074ms, the query is [SET @@session.sql_mode=ANSI_QUOTES]
2015-10-06T17:26:19,519 DEBUG [main([])]: metastore.MetaStoreDirectSql (MetaStoreDirectSql.java:timingTrace(819)) - Direct SQL query in 18522.793353ms + 0.049948ms, the query is [select "COLUMN_NAME", "COLUMN_TYPE", min("LONG_LOW_VALUE"), max("LONG_HIGH_VALUE"), min("DOUBLE_LOW_VALUE"), max("DOUBLE_HIGH_VALUE"), min(cast("BIG_DECIMAL_LOW_VALUE" as decimal)), max(cast("BIG_DECIMAL_HIGH_VALUE" as decimal)), sum("NUM_NULLS"), max("NUM_DISTINCTS"), max("AVG_COL_LEN"), max("MAX_COL_LEN"), sum("NUM_TRUES"), sum("NUM_FALSES"), avg(("LONG_HIGH_VALUE"-"LONG_LOW_VALUE")/cast("NUM_DISTINCTS" as decimal)),avg(("DOUBLE_HIGH_VALUE"-"DOUBLE_LOW_VALUE")/"NUM_DISTINCTS"),avg((cast("BIG_DECIMAL_HIGH_VALUE" as decimal)-cast("BIG_DECIMAL_LOW_VALUE" as decimal))/"NUM_DISTINCTS"),sum("NUM_DISTINCTS") from (SELECT "DBS"."NAME" "DB_NAME", "TBLS"."TBL_NAME" "TABLE_NAME", "PARTITIONS"."PART_NAME" "PARTITION_NAME", "PCS"."COLUMN_NAME", "PCS"."COLUMN_TYPE", "PCS"."LONG_LOW_VALUE", "PCS"."LONG_HIGH_VALUE", "PCS"."DOUBLE_HIGH_VALUE", "PCS"."DOUBLE_LOW_VALUE", "PCS"."BIG_DECIMAL_LOW_VALUE", "PCS"."BIG_DECIMAL_HIGH_VALUE", "PCS"."NUM_NULLS", "PCS"."NUM_DISTINCTS", "PCS"."AVG_COL_LEN","PCS"."MAX_COL_LEN", "PCS"."NUM_TRUES", "PCS"."NUM_FALSES","PCS"."LAST_ANALYZED" FROM "PART_COL_STATS" "PCS" JOIN "PARTITIONS" ON ("PCS"."PART_ID" = "PARTITIONS"."PART_ID") JOIN "TBLS" ON ("PARTITIONS"."TBL_ID" = "TBLS"."TBL_ID") JOIN "DBS" ON ("TBLS"."DB_ID" = "DBS"."DB_ID")) VW  where "DB_NAME" = ? and "TABLE_NAME" = ?  and "COLUMN_NAME" in (?) and "PARTITION_NAME" in (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,
{code}
{code}
2015-10-06T17:26:20,651 DEBUG [main([])]: metastore.MetaStoreDirectSql (MetaStoreDirectSql.java:timingTrace(819)) - Direct SQL query in 1131.35695ms + 0.054133ms, the query is [SET @@session.sql_mode=ANSI_QUOTES]
2015-10-06T17:26:39,111 DEBUG [main([])]: metastore.MetaStoreDirectSql (MetaStoreDirectSql.java:timingTrace(819)) - Direct SQL query in 18457.449922ms + 0.049541ms, the query is [select "COLUMN_NAME", "COLUMN_TYPE", min("LONG_LOW_VALUE"), max("LONG_HIGH_VALUE"), min("DOUBLE_LOW_VALUE"), max("DOUBLE_HIGH_VALUE"), min(cast("BIG_DECIMAL_LOW_VALUE" as decimal)), max(cast("BIG_DECIMAL_HIGH_VALUE" as decimal)), sum("NUM_NULLS"), max("NUM_DISTINCTS"), max("AVG_COL_LEN"), max("MAX_COL_LEN"), sum("NUM_TRUES"), sum("NUM_FALSES"), avg(("LONG_HIGH_VALUE"-"LONG_LOW_VALUE")/cast("NUM_DISTINCTS" as decimal)),avg(("DOUBLE_HIGH_VALUE"-"DOUBLE_LOW_VALUE")/"NUM_DISTINCTS"),avg((cast("BIG_DECIMAL_HIGH_VALUE" as decimal)-cast("BIG_DECIMAL_LOW_VALUE" as decimal))/"NUM_DISTINCTS"),sum("NUM_DISTINCTS") from (SELECT "DBS"."NAME" "DB_NAME", "TBLS"."TBL_NAME" "TABLE_NAME", "PARTITIONS"."PART_NAME" "PARTITION_NAME", "PCS"."COLUMN_NAME", "PCS"."COLUMN_TYPE", "PCS"."LONG_LOW_VALUE", "PCS"."LONG_HIGH_VALUE", "PCS"."DOUBLE_HIGH_VALUE", "PCS"."DOUBLE_LOW_VALUE", "PCS"."BIG_DECIMAL_LOW_VALUE", "PCS"."BIG_DECIMAL_HIGH_VALUE", "PCS"."NUM_NULLS", "PCS"."NUM_DISTINCTS", "PCS"."AVG_COL_LEN","PCS"."MAX_COL_LEN", "PCS"."NUM_TRUES", "PCS"."NUM_FALSES","PCS"."LAST_ANALYZED" FROM "PART_COL_STATS" "PCS" JOIN "PARTITIONS" ON ("PCS"."PART_ID" = "PARTITIONS"."PART_ID") JOIN "TBLS" ON ("PARTITIONS"."TBL_ID" = "TBLS"."TBL_ID") JOIN "DBS" ON ("TBLS"."DB_ID" = "DBS"."DB_ID")) VW  where "DB_NAME" = ? and "TABLE_NAME" = ?  and "COLUMN_NAME" in (?) and "PARTITION_NAME" in (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,
{code}
{code}
2015-10-06T17:26:40,220 DEBUG [main([])]: metastore.MetaStoreDirectSql (MetaStoreDirectSql.java:timingTrace(819)) - Direct SQL query in 1107.582286ms + 0.086248ms, the query is [SET @@session.sql_mode=ANSI_QUOTES]
2015-10-06T17:26:58,459 DEBUG [main([])]: metastore.MetaStoreDirectSql (MetaStoreDirectSql.java:timingTrace(819)) - Direct SQL query in 18237.480371ms + 0.054382ms, the query is [select "COLUMN_NAME", "COLUMN_TYPE", min("LONG_LOW_VALUE"), max("LONG_HIGH_VALUE"), min("DOUBLE_LOW_VALUE"), max("DOUBLE_HIGH_VALUE"), min(cast("BIG_DECIMAL_LOW_VALUE" as decimal)), max(cast("BIG_DECIMAL_HIGH_VALUE" as decimal)), sum("NUM_NULLS"), max("NUM_DISTINCTS"), max("AVG_COL_LEN"), max("MAX_COL_LEN"), sum("NUM_TRUES"), sum("NUM_FALSES"), avg(("LONG_HIGH_VALUE"-"LONG_LOW_VALUE")/cast("NUM_DISTINCTS" as decimal)),avg(("DOUBLE_HIGH_VALUE"-"DOUBLE_LOW_VALUE")/"NUM_DISTINCTS"),avg((cast("BIG_DECIMAL_HIGH_VALUE" as decimal)-cast("BIG_DECIMAL_LOW_VALUE" as decimal))/"NUM_DISTINCTS"),sum("NUM_DISTINCTS") from (SELECT "DBS"."NAME" "DB_NAME", "TBLS"."TBL_NAME" "TABLE_NAME", "PARTITIONS"."PART_NAME" "PARTITION_NAME", "PCS"."COLUMN_NAME", "PCS"."COLUMN_TYPE", "PCS"."LONG_LOW_VALUE", "PCS"."LONG_HIGH_VALUE", "PCS"."DOUBLE_HIGH_VALUE", "PCS"."DOUBLE_LOW_VALUE", "PCS"."BIG_DECIMAL_LOW_VALUE", "PCS"."BIG_DECIMAL_HIGH_VALUE", "PCS"."NUM_NULLS", "PCS"."NUM_DISTINCTS", "PCS"."AVG_COL_LEN","PCS"."MAX_COL_LEN", "PCS"."NUM_TRUES", "PCS"."NUM_FALSES","PCS"."LAST_ANALYZED" FROM "PART_COL_STATS" "PCS" JOIN "PARTITIONS" ON ("PCS"."PART_ID" = "PARTITIONS"."PART_ID") JOIN "TBLS" ON ("PARTITIONS"."TBL_ID" = "TBLS"."TBL_ID") JOIN "DBS" ON ("TBLS"."DB_ID" = "DBS"."DB_ID")) VW  where "DB_NAME" = ? and "TABLE_NAME" = ?  and "COLUMN_NAME" in (?) and "PARTITION_NAME" in (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,
{code}

, [~ctang.ma] can you take a look at those queries and see if there are faster ways to do it?  (Maybe need to check mysql to see why its slow).  The assumption was that these are joining on indexed columns., See partition getting and how its separated into two queries with a big comment. That might help.
Or maybe index in name is needed., [~szehon] Yes, all joins occur on primary keys and indexed foreign keys. But some columns (like column_name etc) have not been indexed but they are used in the query filters, which I wonder if is the main cause.
Before trying splitting a big query to two small ones, [~sseth], could you help to run the queries again with following indexes created in MySQL test bed?
{code}
CREATE INDEX COLNAME_TBLID_IDX ON TAB_COL_STATS (COLUMN_NAME, TBL_ID);
CREATE INDEX COLNAME_IDX ON TAB_COL_STATS (COLUMN_NAME);
CREATE INDEX COLNAME_PARTID_IDX ON PART_COL_STATS (COLUMN_NAME, PART_ID);
CREATE INDEX COLNAME_IDX ON PART_COL_STATS (COLUMN_NAME);
CREATE INDEX PARTNAME_IDX ON PARTITIONS (PART_NAME);
CREATE INDEX TBLNAME_IDX ON TBLS (TBL_NAME);
{code}
if it works, I can create a patch for all RDBMS. Thanks, Quick note. 
I created the following indexes.
{code}
CREATE INDEX COLNAME_TBLID_IDX ON TAB_COL_STATS (COLUMN_NAME, TBL_ID);
CREATE INDEX COLNAME_PARTID_IDX ON PART_COL_STATS (COLUMN_NAME, PART_ID);
CREATE INDEX PARTNAME_IDX ON PARTITIONS (PART_NAME);
CREATE INDEX TBLNAME_IDX ON TBLS (TBL_NAME);
{code}
This did not improve performance.

I'm creating the remaining 2 indexes (even though I don't think they're required given they're part of a multi column index) right now. Will post an update once the index creation is done., Thank [~sseth] very much for the help. yes, the remaining two have been covered by the composite index. But anyway, please give it a try and let me know. If that does not help, I will rewrite the query as [~sershe] suggested, which is also being used in directsql for getPartition., No difference with the remaining indexes.
(The index creation takes a long time btw - and may impact stat generation ?)

{code}
2015-10-07T18:38:09,444 DEBUG [main([])]: metastore.MetaStoreDirectSql (MetaStoreDirectSql.java:timingTrace(819)) - Direct SQL query in 16195.018669ms + 0.058186ms, the query is [select "COLUMN_NAME", "COLUMN_TYPE", min("LONG_LOW_VALUE"), max("LONG_HIGH_VALUE"), min("DOUBLE_LOW_VALUE"), max("DOUBLE_HIGH_VALUE"), min(cast("BIG_DECIMAL_LOW_VALUE" as decimal)), max(cast("BIG_DECIMAL_HIGH_VALUE" as decimal)), sum("NUM_NULLS"), max("NUM_DISTINCTS"), max("AVG_COL_LEN"), max("MAX_COL_LEN"), sum("NUM_TRUES"), sum("NUM_FALSES"), avg(("LONG_HIGH_VALUE"-"LONG_LOW_VALUE")/cast("NUM_DISTINCTS" as decimal)),avg(("DOUBLE_HIGH_VALUE"-"DOUBLE_LOW_VALUE")/"NUM_DISTINCTS"),avg((cast("BIG_DECIMAL_HIGH_VALUE" as decimal)-cast("BIG_DECIMAL_LOW_VALUE" as decimal))/"NUM_DISTINCTS"),sum("NUM_DISTINCTS") from (SELECT "DBS"."NAME" "DB_NAME", "TBLS"."TBL_NAME" "TABLE_NAME", "PARTITIONS"."PART_NAME" "PARTITION_NAME", "PCS"."COLUMN_NAME", "PCS"."COLUMN_TYPE", "PCS"."LONG_LOW_VALUE", "PCS"."LONG_HIGH_VALUE", "PCS"."DOUBLE_HIGH_VALUE", "PCS"."DOUBLE_LOW_VALUE", "PCS"."BIG_DECIMAL_LOW_VALUE", "PCS"."BIG_DECIMAL_HIGH_VALUE", "PCS"."NUM_NULLS", "PCS"."NUM_DISTINCTS", "PCS"."AVG_COL_LEN","PCS"."MAX_COL_LEN", "PCS"."NUM_TRUES", "PCS"."NUM_FALSES","PCS"."LAST_ANALYZED" FROM "PART_COL_STATS" "PCS" JOIN "PARTITIONS" ON ("PCS"."PART_ID" = "PARTITIONS"."PART_ID") JOIN "TBLS" ON ("PARTITIONS"."TBL_ID" = "TBLS"."TBL_ID") JOIN "DBS" ON ("TBLS"."DB_ID" = "DBS"."DB_ID")) VW  where "DB_NAME" = ? and "TABLE_NAME" = ?  and "COLUMN_NAME" in (?) and "PARTITION_NAME" in (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?
{code}

{code}
2015-10-07T18:38:29,309 DEBUG [main([])]: metastore.MetaStoreDirectSql (MetaStoreDirectSql.java:timingTrace(819)) - Direct SQL query in 18651.1996ms + 0.050665ms, the query is [select "COLUMN_NAME", "COLUMN_TYPE", min("LONG_LOW_VALUE"), max("LONG_HIGH_VALUE"), min("DOUBLE_LOW_VALUE"), max("DOUBLE_HIGH_VALUE"), min(cast("BIG_DECIMAL_LOW_VALUE" as decimal)), max(cast("BIG_DECIMAL_HIGH_VALUE" as decimal)), sum("NUM_NULLS"), max("NUM_DISTINCTS"), max("AVG_COL_LEN"), max("MAX_COL_LEN"), sum("NUM_TRUES"), sum("NUM_FALSES"), avg(("LONG_HIGH_VALUE"-"LONG_LOW_VALUE")/cast("NUM_DISTINCTS" as decimal)),avg(("DOUBLE_HIGH_VALUE"-"DOUBLE_LOW_VALUE")/"NUM_DISTINCTS"),avg((cast("BIG_DECIMAL_HIGH_VALUE" as decimal)-cast("BIG_DECIMAL_LOW_VALUE" as decimal))/"NUM_DISTINCTS"),sum("NUM_DISTINCTS") from (SELECT "DBS"."NAME" "DB_NAME", "TBLS"."TBL_NAME" "TABLE_NAME", "PARTITIONS"."PART_NAME" "PARTITION_NAME", "PCS"."COLUMN_NAME", "PCS"."COLUMN_TYPE", "PCS"."LONG_LOW_VALUE", "PCS"."LONG_HIGH_VALUE", "PCS"."DOUBLE_HIGH_VALUE", "PCS"."DOUBLE_LOW_VALUE", "PCS"."BIG_DECIMAL_LOW_VALUE", "PCS"."BIG_DECIMAL_HIGH_VALUE", "PCS"."NUM_NULLS", "PCS"."NUM_DISTINCTS", "PCS"."AVG_COL_LEN","PCS"."MAX_COL_LEN", "PCS"."NUM_TRUES", "PCS"."NUM_FALSES","PCS"."LAST_ANALYZED" FROM "PART_COL_STATS" "PCS" JOIN "PARTITIONS" ON ("PCS"."PART_ID" = "PARTITIONS"."PART_ID") JOIN "TBLS" ON ("PARTITIONS"."TBL_ID" = "TBLS"."TBL_ID") JOIN "DBS" ON ("TBLS"."DB_ID" = "DBS"."DB_ID")) VW  where "DB_NAME" = ? and "TABLE_NAME" = ?  and "COLUMN_NAME" in (?) and "PARTITION_NAME" in (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?
{code}, Thanks [~sseth]. Maybe there are a large number of rows in TAB_COL_STATS/PART_COL_STATS, so it took a long time to create the index on their column "COLUMN_NAME". I am going to change the query to see if it is helpful. BTW, I have created a JIRA HIVE-12053 for the performance regression you found., Yes.  There's a large number of entries - 2million+ in PART_COL_STATS. The number of new entries there is what I was worried about - how many new entries per table / partition, and whether that can have a significant impact. IAC, if the query is being re-written - maybe the indexes will not be required., If the query is rewritten to get PART_ID first and then use PART_ID and COLUMN_NAME to query PART_COL_STATS table, probably a new index on COLUMN_NAME, PART_ID  (CREATE INDEX COLNAME_PARTID_IDX ON PART_COL_STATS (COLUMN_NAME, PART_ID)) is still needed. I am going to work on the new queries.]