[{{SemanticAnalyzer.parseJoinCondPopulateAlias}} doesn't handle {{TOK_NULL}} and eventually results into an exception. If we add a case for {{TOK_NULL}} we eventually run into runtime error
{noformat}
Vertex failed, vertexName=Reducer 2, vertexId=vertex_1490758435339_0001_1_02, diagnostics=[Task failed, taskId=task_1490758435339_0001_1_02_000000, diagnostics=[TaskAttempt 0 failed, info=[Error: Error while running task ( failure ) : attempt_1490758435339_0001_1_02_000000_0:java.lang.RuntimeException: java.lang.RuntimeException: Hive Runtime Error while closing operators: java.lang.Integer cannot be cast to java.lang.Boolean
	at org.apache.hadoop.hive.ql.exec.tez.TezProcessor.initializeAndRunProcessor(TezProcessor.java:211)
	at org.apache.hadoop.hive.ql.exec.tez.TezProcessor.run(TezProcessor.java:168)
	at org.apache.tez.runtime.LogicalIOProcessorRuntimeTask.run(LogicalIOProcessorRuntimeTask.java:370)
	at org.apache.tez.runtime.task.TaskRunner2Callable$1.run(TaskRunner2Callable.java:73)
	at org.apache.tez.runtime.task.TaskRunner2Callable$1.run(TaskRunner2Callable.java:61)
	at java.security.AccessController.doPrivileged(Native Method)
	at javax.security.auth.Subject.doAs(Subject.java:422)
	at org.apache.hadoop.security.UserGroupInformation.doAs(UserGroupInformation.java:1657)
	at org.apache.tez.runtime.task.TaskRunner2Callable.callInternal(TaskRunner2Callable.java:61)
	at org.apache.tez.runtime.task.TaskRunner2Callable.callInternal(TaskRunner2Callable.java:37)
	at org.apache.tez.common.CallableWithNdc.call(CallableWithNdc.java:36)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
Caused by: java.lang.RuntimeException: Hive Runtime Error while closing operators: java.lang.Integer cannot be cast to java.lang.Boolean
{noformat}

If I try simplified query {code:SQL} select a.key from src a join src b on 2{code} I see the following error with MR
{noformat}
java.lang.Exception: java.lang.RuntimeException: org.apache.hadoop.hive.ql.metadata.HiveException: Hive Runtime Error while processing row {"key":"238","value":"val_238"}
	at org.apache.hadoop.mapred.LocalJobRunner$Job.runTasks(LocalJobRunner.java:462) ~[hadoop-mapreduce-client-common-2.7.2.jar:?]
	at org.apache.hadoop.mapred.LocalJobRunner$Job.run(LocalJobRunner.java:522) [hadoop-mapreduce-client-common-2.7.2.jar:?]
Caused by: java.lang.RuntimeException: org.apache.hadoop.hive.ql.metadata.HiveException: Hive Runtime Error while processing row {"key":"238","value":"val_238"}
	at org.apache.hadoop.hive.ql.exec.mr.ExecMapper.map(ExecMapper.java:169) ~[hive-exec-2.2.0-SNAPSHOT.jar:2.2.0-SNAPSHOT]
	at org.apache.hadoop.mapred.MapRunner.run(MapRunner.java:54) ~[hadoop-mapreduce-client-core-2.7.2.jar:?]
	at org.apache.hadoop.mapred.MapTask.runOldMapper(MapTask.java:453) ~[hadoop-mapreduce-client-core-2.7.2.jar:?]
	at org.apache.hadoop.mapred.MapTask.run(MapTask.java:343) ~[hadoop-mapreduce-client-core-2.7.2.jar:?]
	at org.apache.hadoop.mapred.LocalJobRunner$Job$MapTaskRunnable.run(LocalJobRunner.java:243) ~[hadoop-mapreduce-client-common-2.7.2.jar:?]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_101]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_101]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) ~[?:1.8.0_101]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) ~[?:1.8.0_101]
	at java.lang.Thread.run(Thread.java:745) ~[?:1.8.0_101]
Caused by: org.apache.hadoop.hive.ql.metadata.HiveException: Hive Runtime Error while processing row {"key":"238","value":"val_238"}
	at org.apache.hadoop.hive.ql.exec.MapOperator.process(MapOperator.java:562) ~[hive-exec-2.2.0-SNAPSHOT.jar:2.2.0-SNAPSHOT]
	at org.apache.hadoop.hive.ql.exec.mr.ExecMapper.map(ExecMapper.java:160) ~[hive-exec-2.2.0-SNAPSHOT.jar:2.2.0-SNAPSHOT]
	at org.apache.hadoop.mapred.MapRunner.run(MapRunner.java:54) ~[hadoop-mapreduce-client-core-2.7.2.jar:?]
	at org.apache.hadoop.mapred.MapTask.runOldMapper(MapTask.java:453) ~[hadoop-mapreduce-client-core-2.7.2.jar:?]
	at org.apache.hadoop.mapred.MapTask.run(MapTask.java:343) ~[hadoop-mapreduce-client-core-2.7.2.jar:?]
	at org.apache.hadoop.mapred.LocalJobRunner$Job$MapTaskRunnable.run(LocalJobRunner.java:243) ~[hadoop-mapreduce-client-common-2.7.2.jar:?]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_101]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_101]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) ~[?:1.8.0_101]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) ~[?:1.8.0_101]
	at java.lang.Thread.run(Thread.java:745) ~[?:1.8.0_101]
Caused by: java.lang.ClassCastException: java.lang.Integer cannot be cast to java.lang.Boolean
	at org.apache.hadoop.hive.ql.exec.FilterOperator.process(FilterOperator.java:124) ~[hive-exec-2.2.0-SNAPSHOT.jar:2.2.0-SNAPSHOT]
	at org.apache.hadoop.hive.ql.exec.Operator.forward(Operator.java:897) ~[hive-exec-2.2.0-SNAPSHOT.jar:2.2.0-SNAPSHOT]
	at org.apache.hadoop.hive.ql.exec.SelectOperator.process(SelectOperator.java:95) ~[hive-exec-2.2.0-SNAPSHOT.jar:2.2.0-SNAPSHOT]
	at org.apache.hadoop.hive.ql.exec.Operator.forward(Operator.java:897) ~[hive-exec-2.2.0-SNAPSHOT.jar:2.2.0-SNAPSHOT]
	at org.apache.hadoop.hive.ql.exec.TableScanOperator.process(TableScanOperator.java:130) ~[hive-exec-2.2.0-SNAPSHOT.jar:2.2.0-SNAPSHOT]
	at org.apache.hadoop.hive.ql.exec.MapOperator$MapOpCtx.forward(MapOperator.java:148) ~[hive-exec-2.2.0-SNAPSHOT.jar:2.2.0-SNAPSHOT]
	at org.apache.hadoop.hive.ql.exec.MapOperator.process(MapOperator.java:547) ~[hive-exec-2.2.0-SNAPSHOT.jar:2.2.0-SNAPSHOT]
	at org.apache.hadoop.hive.ql.exec.mr.ExecMapper.map(ExecMapper.java:160) ~[hive-exec-2.2.0-SNAPSHOT.jar:2.2.0-SNAPSHOT]
	at org.apache.hadoop.mapred.MapRunner.run(MapRunner.java:54) ~[hadoop-mapreduce-client-core-2.7.2.jar:?]
	at org.apache.hadoop.mapred.MapTask.runOldMapper(MapTask.java:453) ~[hadoop-mapreduce-client-core-2.7.2.jar:?]
	at org.apache.hadoop.mapred.MapTask.run(MapTask.java:343) ~[hadoop-mapreduce-client-core-2.7.2.jar:?]
	at org.apache.hadoop.mapred.LocalJobRunner$Job$MapTaskRunnable.run(LocalJobRunner.java:243) ~[hadoop-mapreduce-client-common-2.7.2.jar:?]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_101]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_101]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) ~[?:1.8.0_101]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) ~[?:1.8.0_101]
	at java.lang.Thread.run(Thread.java:745) ~[?:1.8.0_101]
{noformat}

So even with the compiler fix looks like our runtime is not able to handle non-boolean join conditions., The original query31 has a more complex where clause that gets pulled into the JOIN by CBO and this cause CBO to fail:

{noformat}
explain with ss as (
   select ca_county,d_qoy, d_year,sum(ss_ext_sales_price) as store_sales 
   from store_sales,date_dim,customer_address 
   where ss_sold_date_sk = d_date_sk and ss_addr_sk=ca_address_sk
   group by ca_county,d_qoy, d_year), 
ws as (
  select ca_county,d_qoy, d_year,sum(ws_ext_sales_price) as web_sales 
  from web_sales,date_dim,customer_address 
  where ws_sold_date_sk = d_date_sk and ws_bill_addr_sk=ca_address_sk 
  group by ca_county,d_qoy, d_year) 
select ss1.ca_county ,ss1.d_year ,ws2.web_sales/ws1.web_sales web_q1_q2_increase ,ss2.store_sales/ss1.store_sales store_q1_q2_increase ,ws3.web_sales/ws2.web_sales web_q2_q3_increase ,ss3.store_sales/ss2.store_sales store_q2_q3_increase 
from ss ss1 ,ss ss2 ,ss ss3 ,ws ws1 ,ws ws2 ,ws ws3 
where ss1.d_qoy = 1 and 
  ss1.d_year = 1998 and 
  ss1.ca_county = ss2.ca_county and 
  ss2.d_qoy = 2 and 
  ss2.d_year = 1998 and 
  ss2.ca_county = ss3.ca_county and 
  ss3.d_qoy = 3 and 
  ss3.d_year = 1998 and 
  ss1.ca_county = ws1.ca_county and 
  ws1.d_qoy = 1 and 
  ws1.d_year = 1998 and 
  ws1.ca_county = ws2.ca_county and 
  ws2.d_qoy = 2 and 
  ws2.d_year = 1998 and 
  ws1.ca_county = ws3.ca_county and 
  ws3.d_qoy = 3 and 
  ws3.d_year =1998 and 
  case when ws1.web_sales > 0 then ws2.web_sales/ws1.web_sales else null end > 
    case when ss1.store_sales > 0 then ss2.store_sales/ss1.store_sales else null end and 
 case when ws2.web_sales > 0 then ws3.web_sales/ws2.web_sales else null end > 
   case when ss2.store_sales > 0 then ss3.store_sales/ss2.store_sales else null end 
order by web_q1_q2_increase;
{noformat}
, [~rusanu] Since this is a regression after upgrade, you may wanna take a look?, Patch 01, fixes TOK_NULL and updates query31 plan., https://reviews.apache.org/r/58531/, I created separate HIVE-16479 for the non-boolean join issue, 

Here are the results of testing the latest attachment:
https://issues.apache.org/jira/secure/attachment/12863989/HIVE-16317.01.patch

{color:red}ERROR:{color} -1 due to no test(s) being added or modified.

{color:green}SUCCESS:{color} +1 due to 10581 tests passed

Test results: https://builds.apache.org/job/PreCommit-HIVE-Build/4757/testReport
Console output: https://builds.apache.org/job/PreCommit-HIVE-Build/4757/console
Test logs: http://104.198.109.242/logs/PreCommit-HIVE-Build-4757/

Messages:
{noformat}
Executing org.apache.hive.ptest.execution.TestCheckPhase
Executing org.apache.hive.ptest.execution.PrepPhase
Executing org.apache.hive.ptest.execution.ExecutionPhase
Executing org.apache.hive.ptest.execution.ReportingPhase
{noformat}

This message is automatically generated.

ATTACHMENT ID: 12863989 - PreCommit-HIVE-Build, +1, Looks good., Committed to master https://git-wip-us.apache.org/repos/asf?p=hive.git;a=commit;h=fa24d4b9b99b5e81b65d781f379679dcf916e2e2, Hive 3.0.0 has been released so closing this jira.]