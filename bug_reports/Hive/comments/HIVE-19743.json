[UDFToString(col) = <constant>

instead of 

col = cast(<constant> as varchar(n)), this seems to be an intentional change as part of https://issues.apache.org/jira/browse/HIVE-13831, should not be treated varchar equivalent to string?, The 13831 change is actually about Hive sort-order vs Hbase sort-order - the issue here is more related to how hive handles mismatched types when you do (varchar(n) = String), it converts both to String, even if the rhs is a constant., [https://github.com/apache/hive/blob/master/hbase-handler/src/java/org/apache/hadoop/hive/hbase/HBaseStorageHandler.java#L420]

In HIVE-13831, it checks for the same type, if there is mismatch it calculates residualPredicate which hive has to handle.

 , Yes, that is correct because varchar() != string, does it work right when you cast the constants to the right type?

{code}
hive> explain select count(1) from foo where y = cast('1' as varchar(10));
OK
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 2 <- Map 1 (CUSTOM_SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 2 vectorized, llap
      File Output Operator [FS_14]
        Group By Operator [GBY_13] (rows=1 width=102)
          Output:["_col0"],aggregations:["count(VALUE._col0)"]
        <-Map 1 [CUSTOM_SIMPLE_EDGE] vectorized, llap
          PARTITION_ONLY_SHUFFLE [RS_12]
            Group By Operator [GBY_11] (rows=1 width=102)
              Output:["_col0"],aggregations:["count()"]
              Select Operator [SEL_10] (rows=1 width=94)
                Filter Operator [FIL_9] (rows=1 width=94)
                  predicate:(y = '1')
                  TableScan [TS_0] (rows=1 width=94)
                    default@foo,foo,Tbl:COMPLETE,Col:NONE,Output:["y"]

Time taken: 0.177 seconds, Fetched: 23 row(s)
{code}
, varchar() != string - that make sense, closing this jira, Thanks for your help.]