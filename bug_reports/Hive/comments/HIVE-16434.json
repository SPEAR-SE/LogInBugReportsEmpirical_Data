[Currently, following returns NULL, whereas postgres and sql server (via its datetime type) can successfully parse these:
{code}
select cast ('2011/01/01' as timestamp); 
select cast ('2011.01.01' as timestamp);
select cast ('March 8, 1999' as timestamp);
select cast ('1/8/1999' as timestamp);
 select cast ('01/02/03' as timestamp);
  select cast ('1999-Jan-08' as timestamp);
   select cast ('08-Jan-1999' as timestamp);
   select cast ('08-Jan-99' as timestamp);
   select cast ('19990108' as timestamp);
    select cast ('990108' as timestamp);

    select cast ('04 Mar 2013' as timestamp);
    select cast('2012-02-03 04:0' as timestamp);
        select cast('2012-02-03 04:05' as timestamp);
    
{code}, This should be supported both as constant literal in query text as well in Text File Format (via LazySimpleSerde)., This should be supported both as constant literal in query text as well in Text File Format (via LazySimpleSerde)., SQL:2016 adds parsing templates and a format keyword as:

CAST(<datetime> AS <char string type> [FORMAT <template>])
CAST(<char string> AS <datetime type> [FORMAT <template>])

The formats include:
YYYY | YYY | YY | Y: Year
RRRR | RR: Rounded Year
MM: Month
DD: Day of month
DDD: Day of year
HH | HH12: 12 hour
HH24: 24 hour
MI: Minute
SS: Second of minute
SSSSS: Second of day
FF1 | â€¦ | FF9: Fraction
A.M. | P.M.: AM or PM
TZH: Time zone hour
TZM: Time zone minute

So if I had source data of the form month/day/year with 2-digit years in a CSV file I could import it using

... cast(column as date format 'MM/DD/YY') ...

Which is a fairly straightforward thing to do, although maybe not as automated as what you get with other DBs. This approach is worth considering as it is standardized now and we should see other databases begin to adopt it.

See also: https://modern-sql.com/blog/2017-06/whats-new-in-sql-2016]