[I don't believe this is a bug. Hive variables are specific for a Hive user session and variable substitution happens on the server side. Beeline can establish connections to multiple servers, so there can be multiple sessions, each having its own variables. Now if you wan to substitute your shell command at the client side, which variable value would you use? Therefore, doing so can have semantic difficulty., Thanks [~xuefuz] good to hear from you.
Good point. However, looking at the patch from 
https://issues.apache.org/jira/secure/attachment/12742071/HIVE-6791.5-beeline-cli.patch
it appears the substitution for the shell commands seems to occurring on the client side (beeline) in Commands.substituteVariables() which is using the variables returned by "set" statement (from getConfInternal()) which should return variables set for that session (specific HS2 instance).
Is my understanding incorrect? Thanks, Hi [~ngangam], I think the code you're referring to is for embedded beeline serving as a replacement for Hive CLI. In that context, there is at most one connection, so there is no such confusion.

This problem appeared in the past a couple of times. Frankly, I don't have a good answer for this (other than pointing to the problem). :), Hi [~xuefuz],
Do you know why these are being treated as session-specific variables as opposed to beeline-instance specific variables? What if we treat them similar to a Unix shell where anything that is set using "export or set" is specific to that shell and is not visible from another shell (that not a child of this original shell).
In other words, should these variables, for substitution, be stored locally in the beeline JVM and be applicable for all connections, current and future, initiated from this beeline instance? Thanks  , I think this is by design. The main question was really where the substitution should happen, client vs server. This has significant difference. For instance, if $OS_NAME is used in user's query, then the value can be complete different in the client host or hiveserver2 host. For hive CLI, this doesn't matter, but does for beeline/hiveserver2.

Since shell command is executed at the client host, substitution should happen at client host as well. Thus, the question comes about which values to use to do the substitution. Maybe we need a new type of variable for this.

, [~xuefuz] [~ngangam] We could do what shell scripts do with global and local variables. Local variables override global variables while you're in a function.

For Hive, if a user sets a OS_NAME variable on Beeline, then Beeline should use the user value instead of the HS2 value while you are in the Beeline session. If it is not set, then just tell HS2 to substitute the value on its side. Isn't that better rather than create a new type of variable? This is a normal behavior even on Linux systems, where a variable can be changed on a user-session, and then go back to the linux-session once user logout. , That's an alternative, but I think this is going to be a backward incompatibility change. It can potentially break user existing queries., What variables are used for substitution? Doesn't the user provide such variables (as a sql script or command parameter) when running beeline? If so, then they need to be aware that those variables may be used for substitution when running their queries (even on beeline), don't they?, There are 4 kinds of variables, including system variables and env variables. which can exist in both hosts and are not always defined by the user. Thus, user query can potentially pick up the wrong value by substitution., Got it. That make sense.

What about just substituting the variables set by beeline? is there a way to differentiate a variable set through beeline (like hivevar or hiveconf) between other variables, such as system and env btw?]