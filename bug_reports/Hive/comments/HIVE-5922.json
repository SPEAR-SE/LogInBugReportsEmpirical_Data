[For the first trace, the desired position is 21496054 and the second range is "range 2 = 20447466 to 1048588". For the second trace, the desired position is 20447466 and the sixth range is "range 6 = 18612437 to 1835029". 

When I turned off predicate pushdown or I used predicate pushdown with uncompressed data, I did not see this problem., I got a similar Exception  ( on seeking to row 9,103,258 )

java.io.IOException: Seek outside of data in compressed stream Stream for column 65 kind DATA position: 1572882 length: 2116178 range: 1 offset: 1048588 limit: 1048588 range 0 = 0 to 0;  range 1 = 524294 to 1048588;  range 2 = 1835029 to 262147 uncompressed: 1048588 to 1048588 to 1572882
	at org.apache.hadoop.hive.ql.io.orc.InStream$CompressedStream.seek(InStream.java:277)
	at org.apache.hadoop.hive.ql.io.orc.InStream$CompressedStream.readHeader(InStream.java:153)
	at org.apache.hadoop.hive.ql.io.orc.InStream$CompressedStream.read(InStream.java:197)
	at org.apache.hadoop.hive.ql.io.orc.SerializationUtils.readInts(SerializationUtils.java:450)
	at org.apache.hadoop.hive.ql.io.orc.RunLengthIntegerReaderV2.readPatchedBaseValues(RunLengthIntegerReaderV2.java:161)
	at org.apache.hadoop.hive.ql.io.orc.RunLengthIntegerReaderV2.readValues(RunLengthIntegerReaderV2.java:54)
	at org.apache.hadoop.hive.ql.io.orc.RunLengthIntegerReaderV2.skip(RunLengthIntegerReaderV2.java:318)
	at org.apache.hadoop.hive.ql.io.orc.RecordReaderImpl$IntTreeReader.skipRows(RecordReaderImpl.java:427)
	at org.apache.hadoop.hive.ql.io.orc.RecordReaderImpl$StructTreeReader.skipRows(RecordReaderImpl.java:1181)
	at org.apache.hadoop.hive.ql.io.orc.RecordReaderImpl.advanceToNextRow(RecordReaderImpl.java:2183)
	at org.apache.hadoop.hive.ql.io.orc.RecordReaderImpl.seekToRow(RecordReaderImpl.java:2284)

Some observations
----
1. I have used Snappy for compression 

2. there are 75 columns in the file (mostly numbers - int,long,byte,short  and a few strings). Exception always happens for column 65 which is an int. If I remove this column from include column list, seek works fine . 

2. This issue happens only when I am seeking to row using RecordReader.seekToRow(long). In this flow the RecordReader is created using  Reader.rows(long, long, boolean[], SearchArgument, String[]). The SearchArgument is using "IN" construct with 200 long values which are actually the row numbers I want to retrieve   (SearchArgument.FACTORY.newBuilder().startOr().in(colName, 200 Long Values).end().build()). Exception happens for seek to row 9103258 (file has about 13 million rows). I tried SearchArgument with just one IN value of 9103258.... BINGO .. got the same Exception. This problem can be reproduced for any rowSeek between 9103258 and 9103279. Rows after this seem to work fine .

3. I face no Exceptions if the RecordReader is created using Reader.rows(null), and the entire file is iterated using RecordReader.hasNext() and RecordReader.next()

4. I face no Exceptions if the RecordReader is created using  Reader.rows(long, long, boolean[], SearchArgument, String[]) and SearchArgument is passed null. Then the required data (about 200 rows) is retrieved using RecordReader.seekToRow(long) and RecordReader.next()

5.Obvious WorkAround is not to use predicate push down . In may case since I know the row numbers to be seeked to, the performance let down is not very drastic. 
	Read/SeekTO 167 rows in (ms)3609   : Existing usage with predicate push down in ORC  
	Read/SeekTo 167 rows in (ms)4626   : WorkAround without predicate/Search-Argument pushdown
	   >>>> Difference of  1017 ms  = approx 7 ms per row let down in performance (arounf 80% values are fetched from different strides)
, Hi Puneeth

The issue might be related to https://issues.apache.org/jira/browse/HIVE-6320 or https://issues.apache.org/jira/browse/HIVE-6287 depends on whether you have enable vectorization or not. Is this issue happening in trunk?, Hi Prasanth

I am using Hive Binary from "hive-0.12.0-bin.tar.gz"
http://apache.claz.org/hive/hive-0.12.0/

I am using only the ORC file format part to store my data . Its not used along with Hive . , From what is know 0.12.0 does not have vectorization support .So that can not be the issue.  Also this happens only on seeking while predicate push-down is enabled . Normal iteration is fine . , same issue here and I am using Apache Hive 1.2.1.

, [~puneet884]/[~frankluo] Are you using the ORC writer APIs directly or using custom MapReduce program to write ORC files? If so can you make sure the row that you are writing to ORC is not null. Recently observed similar issue with a customer and looks like they were using a custom MR program that writes to ORC file. The value passed to writer.addRow() seems to have been null. Orc writer does not expect null as a row. The columns within a row can be null though. This can be verified from orcfiledump. If you guys can provide me orcfiledump output I can confirm if that's the case. 

{code}
writer.addRow(null); // invalid
writer.addRow([a, b, null, d]); // valid
writer.addRow([null, null, null, null]); // valid
{code}
We are planning to fix this in the writer API documentation and code to make sure users does not pass null row.]