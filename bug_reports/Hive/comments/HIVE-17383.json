[[~lirui]:  can you help to verify whether ArrayIndexOutOfBoundsException appear or not in above query? in my env(hive version:f86878b). No similar exception is thrown, this query passes. If there is a RS follows the GBY, the exception will not be thrown.
, [~kellyzly], I can reproduce the issue with latest master., [~lirui]: this passes in latest master(6be50b7) in my tez env. If there is some wrong with the configuration, tell me!
query
{code}
set hive.cbo.enable=false;
set hive.user.install.directory=file:///tmp;
set fs.default.name=file:///;
set fs.defaultFS=file:///;
set tez.staging-dir=/tmp;
set tez.ignore.lib.uris=true;
set tez.runtime.optimize.local.fetch=true;
set tez.local.mode=true;
set hive.explain.user=false;
explain select count(*) from (select key from src group by key) s where s.key='98';
{code}
explain
{code}
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
      DagId: root_20170828023743_be3df7bf-49cc-4c71-a4a7-25814558804c:1
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
        Reducer 3 <- Reducer 2 (CUSTOM_SIMPLE_EDGE)
      DagName: root_20170828023743_be3df7bf-49cc-4c71-a4a7-25814558804c:1
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: src
                  Statistics: Num rows: 2906 Data size: 5812 Basic stats: COMPLETE Column stats: NONE
                  Filter Operator
                    predicate: (key = '98') (type: boolean)
                    Statistics: Num rows: 1453 Data size: 2906 Basic stats: COMPLETE Column stats: NONE
                    Select Operator
                      Statistics: Num rows: 1453 Data size: 2906 Basic stats: COMPLETE Column stats: NONE
                      Group By Operator
                        keys: '98' (type: string)
                        mode: hash
                        outputColumnNames: _col0
                        Statistics: Num rows: 1453 Data size: 2906 Basic stats: COMPLETE Column stats: NONE
                        Reduce Output Operator
                          key expressions: '98' (type: string)
                          sort order: +
                          Map-reduce partition columns: '98' (type: string)
                          Statistics: Num rows: 1453 Data size: 2906 Basic stats: COMPLETE Column stats: NONE
        Reducer 2 
            Reduce Operator Tree:
              Group By Operator
                keys: '98' (type: string)
                mode: mergepartial
                outputColumnNames: _col0
                Statistics: Num rows: 726 Data size: 1452 Basic stats: COMPLETE Column stats: NONE
                Select Operator
                  Statistics: Num rows: 726 Data size: 1452 Basic stats: COMPLETE Column stats: NONE
                  Group By Operator
                    aggregations: count()
                    mode: hash
                    outputColumnNames: _col0
                    Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      sort order: 
                      Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col0 (type: bigint)
        Reducer 3 
            Reduce Operator Tree:
              Group By Operator
                aggregations: count(VALUE._col0)
                mode: mergepartial
                outputColumnNames: _col0
                Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                File Output Operator
                  compressed: false
                  Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

{code}, [~kellyzly], I don't see the works shown as vectorized in your explain. Have you enabled vectorization?, [~lirui]: after enable vectorization, it throws ArrayIndexOutOfBoundsException.
query
{code}
set hive.cbo.enable=false;
set hive.user.install.directory=file:///tmp;
set fs.default.name=file:///;
set fs.defaultFS=file:///;
set tez.staging-dir=/tmp;
set tez.ignore.lib.uris=true;
set tez.runtime.optimize.local.fetch=true;
set tez.local.mode=true;
set hive.explain.user=false;
set hive.vectorized.execution.enabled=true;
select count(*) from (select key from src group by key) s where s.key='98';
{code}
the explain
{code}
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
      DagId: root_20170828025707_7b882df3-3e96-47f0-b189-9b6919d44512:1
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
        Reducer 3 <- Reducer 2 (CUSTOM_SIMPLE_EDGE)
      DagName: root_20170828025707_7b882df3-3e96-47f0-b189-9b6919d44512:1
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: src
                  Statistics: Num rows: 2906 Data size: 5812 Basic stats: COMPLETE Column stats: NONE
                  Filter Operator
                    predicate: (key = '98') (type: boolean)
                    Statistics: Num rows: 1453 Data size: 2906 Basic stats: COMPLETE Column stats: NONE
                    Select Operator
                      Statistics: Num rows: 1453 Data size: 2906 Basic stats: COMPLETE Column stats: NONE
                      Group By Operator
                        keys: '98' (type: string)
                        mode: hash
                        outputColumnNames: _col0
                        Statistics: Num rows: 1453 Data size: 2906 Basic stats: COMPLETE Column stats: NONE
                        Reduce Output Operator
                          key expressions: '98' (type: string)
                          sort order: +
                          Map-reduce partition columns: '98' (type: string)
                          Statistics: Num rows: 1453 Data size: 2906 Basic stats: COMPLETE Column stats: NONE
            Execution mode: vectorized
        Reducer 2 
            Execution mode: vectorized
            Reduce Operator Tree:
              Group By Operator
                keys: '98' (type: string)
                mode: mergepartial
                outputColumnNames: _col0
                Statistics: Num rows: 726 Data size: 1452 Basic stats: COMPLETE Column stats: NONE
                Select Operator
                  Statistics: Num rows: 726 Data size: 1452 Basic stats: COMPLETE Column stats: NONE
                  Group By Operator
                    aggregations: count()
                    mode: hash
                    outputColumnNames: _col0
                    Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      sort order: 
                      Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                      value expressions: _col0 (type: bigint)
        Reducer 3 
            Execution mode: vectorized
            Reduce Operator Tree:
              Group By Operator
                aggregations: count(VALUE._col0)
                mode: mergepartial
                outputColumnNames: _col0
                Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                File Output Operator
                  compressed: false
                  Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink
{code}, Patch v1 uses the key index (instead of the vector expression's column index) for the output batch. Not sure if this the right way to go, trigger tests., 

Here are the results of testing the latest attachment:
https://issues.apache.org/jira/secure/attachment/12884629/HIVE-17383.1.patch

{color:red}ERROR:{color} -1 due to no test(s) being added or modified.

{color:red}ERROR:{color} -1 due to 6 failed/errored test(s), 11005 tests executed
*Failed tests:*
{noformat}
TestTxnCommandsBase - did not produce a TEST-*.xml file (likely timed out) (batchId=280)
org.apache.hadoop.hive.cli.TestCliDriver.testCliDriver[insert_values_orig_table_use_metadata] (batchId=61)
org.apache.hadoop.hive.cli.TestMiniSparkOnYarnCliDriver.testCliDriver[spark_vectorized_dynamic_partition_pruning] (batchId=169)
org.apache.hadoop.hive.cli.TestMiniTezCliDriver.testCliDriver[explainanalyze_2] (batchId=100)
org.apache.hadoop.hive.cli.TestPerfCliDriver.testCliDriver[query14] (batchId=234)
org.apache.hadoop.hive.cli.TestSparkCliDriver.org.apache.hadoop.hive.cli.TestSparkCliDriver (batchId=103)
{noformat}

Test results: https://builds.apache.org/job/PreCommit-HIVE-Build/6617/testReport
Console output: https://builds.apache.org/job/PreCommit-HIVE-Build/6617/console
Test logs: http://104.198.109.242/logs/PreCommit-HIVE-Build-6617/

Messages:
{noformat}
Executing org.apache.hive.ptest.execution.TestCheckPhase
Executing org.apache.hive.ptest.execution.PrepPhase
Executing org.apache.hive.ptest.execution.ExecutionPhase
Executing org.apache.hive.ptest.execution.ReportingPhase
Tests exited with: TestsFailedException: 6 tests failed
{noformat}

This message is automatically generated.

ATTACHMENT ID: 12884629 - PreCommit-HIVE-Build, The failures can't be reproduced locally.
[~mmccline], [~ashutoshc], [~gopalv] could you take a look? Thanks., why say "The failures can't be reproduced locally.". Actually it can be reproduced in my env. Do you mean in latest master, this is fixed?


Not very well understand the logic of vectorization.
why {{firstOutputColumnIndex}} starts from {{initialColumnNames.length}}.  for example,if have 1 column, the {{firstOutputColumnIndex}} is from 1( normally the index is from 0).  When we construct the output batch, the column is from 1, is this right?
{code}
// Convenient constructor for initial batch creation takes
  // a list of columns names and maps them to 0..n-1 indices.
  public VectorizationContext(String contextName, List<String> initialColumnNames,
      HiveConf hiveConf) {
    this.contextName = contextName;
    level = 0;
    this.initialColumnNames = initialColumnNames;
    this.projectionColumnNames = initialColumnNames;

    projectedColumns = new ArrayList<Integer>();
    projectionColumnMap = new HashMap<String, Integer>();
    for (int i = 0; i < this.projectionColumnNames.size(); i++) {
      projectedColumns.add(i);
      projectionColumnMap.put(projectionColumnNames.get(i), i);
    }

    int firstOutputColumnIndex = projectedColumns.size();
    this.ocm = new OutputColumnManager(firstOutputColumnIndex);
    this.firstOutputColumnIndex = firstOutputColumnIndex;
    vMap = new VectorExpressionDescriptor();

    if (hiveConf != null) {
      setHiveConfVars(hiveConf);
    }
  }
{code}
, [~kellyzly], I mean the failures with age 1. Can you reproduce any of them with the patch in your env?]