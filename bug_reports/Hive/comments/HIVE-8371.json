[[~sushanth] Lemme know what do you think about this., The main goal of HIVE-6405 was to unify expected behaviour between hive and hcatalog, and making the default for HCatStorer different from the default for hive defeats that purpose. To that end, I disagree that it should fail by default unless you are also saying hive should also fail by default inserting into a partition that already exists.

I fully see the need for data quality issues needing the immutability aspect when jobs are not written assuming idempotency, and that's why HIVE-6406 added a table-wide property to do exactly that, and default append behaviour can currently be turned off table-wide by setting "immutable"="true" as a table property, and my suggestion would be to use that on tables with jobs that you expect to hit this problem.

If your requirement is to have a job-level property that handles this, then, allowing for the "keeping in-sync with hive default behaviour" principle then leads me to the following behaviour :

a) If no special argument is provided, stick to defaults for the table - i.e., hive defaults, and overridable by the "immutable" property, which also overrides the default behaviour for hive.
b) org.apache.hive.hcatalog.pig.HCatStorer('partspec', '', ' -immutable') => ignore immutable setting, disallow append.
c) org.apache.hive.hcatalog.pig.HCatStorer('partspec', '', ' -append') => ignore immutable setting, allow append. 

Now, thinking more about this, if we were to have a job-level override, to be honest, I am not comfortable with (c), since it's possible for a end user to write a pig script that ignores the table-level immutability property if set, and have it cause data quality issues later, even if a user tries to control it for that table using the "immutable" property. Thus, I think we should not implement (c) in this case. I am okay with implementing (b) if you want to have a safeguard default.

I would further say, btw, that I would also be okay with making the default value for the "immutable" table property (i.e. what value it'll have if it isn't set) be made configurable on a warehouse-wide level from hive-site.xml. That would also solve your problem without needing you to go set it for each table.
, Edit:

{quote}
I am okay with implementing (b) if you want to have a safeguard default.
{quote}

Err, that bit should instead read :

{quote}
I am okay with implementing (b) if you want to have the ability to invoke HCatStorer that always maintains that safeguard.
{quote}
, Having a warehouse level property which basically sets default value of immutable property will only help restore HCatalog behavior. Isn't that going to flip the behavior of Hive?

I am very concerned that the default HCatStorer behavior has changed after it has been out for a very long time., It is going to flip the hive behaviour in that it will disallow insert-into if there is already data - that was intentional, to be consistent between hive and hcatalog. The question is - do we want to allow appends to data? If so, hive and hcatalog should both allow it. If not, hive and hcatalog should both deny it.

I do understand the concern that HCatStorer behaviour has changed after being out for a long time, but from that same perspective, this new behaviour of HCatStorer has also been out for a while now, for publicly released hive.

This could still be preserved with yet another warehouse-level parameter for legacy behaviour that makes HCatStorer default to immutable, and hive default to mutable, but honestly, I think that's ugly and will cause more problems going forward for maintainability.]