[If I had to hazard a guess I would say that the original implementation was about supporting thrift structures. Possibly if thrift does not support this case that design was not carried over.

Personally I think we SHOULD support NULL key and NULL value in maps. The map need not be sorted., It sounds like b is the simplest and safest solution and would effectively make ORC work consistently with RC files.  

In Data Base semantics, NULL is a special value, so for example, NULL does not match NULL.  Hence I don't know what it means to have a NULL key, or to try to do a lookup with a NULL key.  I think such a lookup should never return a value, regardless of what is in the map.  It may be okay to have NULL values in a map., I tend to agree with David that having a NULL key is dubious at best.  Though it's worth pointing out that SQL's semantics around NULL aren't consistent (NULL = NULL does not evaluate to true (nor false) but when grouping NULLs are collected together).  

The real question from an HCat perspective is "What does Hive do?"  If Hive allows you to have null keys (with ORC), then HCat should.  The question of whether Hive should have that is a bigger topic for a different day. , Sorry for the late response to this jira, and thanks for the input, all. I'd initially wanted to give it time for more people to respond, and then this fell by the wayside.

Thrift structures do not support map null keys. I agree that sortedness is not important for maps, and in fact, we should not guarantee it for something that's just called a map.

And while I'd like to see a usecase for nulls in keys supported, it looks like the conventional hive semantics for maps ignores null keys, and changing rcfile users so that they suddenly start getting null keys is a recipe for trouble for a lot of users. So having orc map to rc behaviour, and make that the standard "hive" behaviour might make more sense. [~owen.omalley]/[~prasanth_j], could you comment on what you think the impact of changing orc behaviour that way might be?

HCat should adopt whatever behaviour we standardize on for hive, and can follow after that., I find the following comments in LazyMap.java: 
// LazyMap stores a map of Primitive LazyObjects to LazyObjects. Note that the
// keys of the map cannot contain null.

This could be the reason when I try to load null map key from RC file, I end up with an infinite loop. 

To be safe, it seems we shall disallow null map key. Even if we fix LazyMap, there could be other places we made the same assumption.]