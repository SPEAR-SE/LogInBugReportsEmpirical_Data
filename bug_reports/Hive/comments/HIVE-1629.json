[+    long v = Double.doubleToLongBits(value);
+    return (int) (v ^ (v >>> 32));

won't this return 0 for all long values less than 2^32?

Search on the web and it seems the following 64 bit to 32 bit hash is a good one

http://www.cris.com/~ttwang/tech/inthash.htm, Hi

The doubleToLongBits converts the double value into IEEE 754 floating-point "double format" bit layout.
Furthermore the XOR operator prevents returning 0 for values less than 2^32.

This is the hashCode function used by standard java implementation.

I was noticing unexpected delay in one of the operations related to double data types.
After some debugging I realized that the HashMap puts and gets were extremely slow.
That pointed me to the hashCode implementatoin in DoubleWritable which turned out to be the cause of slow HashMap IO.

That is why I propose to use the standard java implmenetation of HashCode for double type.

Thanks
Vaibhav, +1 Will commit if tests pass., Ning, does this change introduce incompatibility with any persistent storage (e.g. bucketing)?
, Committed. Thanks Vaibhav!, Good question John. I think this patch doesn't affect bucketing, which is implemented using ObjectInspectorUtils.hashCode(). Actually the hash function used there for Double is the same as the one provided in this patch. But I'll double check with Zheng/Namit tomorrow. ]