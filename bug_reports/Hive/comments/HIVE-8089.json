[At first glance it seems by design... ordering of the table is not preserved (or at least there's no guarantee about ordering) when one selects from a table w/o order by. So, why should it be preserved from subquery?, We support order in subquery when limit is present; but ordering fails only when a limit is specified in outer query., it seems that ordering in the subquery should have no effect on any outer limits, and outer limits cannot have effect on nested query.
So if I have numbers 1..10, and so select N from (select N order by N limit 5), that should return 1..5.
If we have select N from (select N order by N) limit 5 we can return any 5 numbers in any order, because it's just like insert into T select N order by N, then select N from T limit 5 - table happens to be sorted and so result may be 1..5, but no order is guaranteed and so it can be anything, strictly speaking...
I will take a look if this is easy to make this behavior more "user-friendly", Seems to be caused by addition of a stage.
{noformat}
select key, value
  from (select key, value
    from src order by value limit 5)t1;

select key, value
    from (select key, value
      from src order by value limit 5)t1 limit 5;
{noformat}
doesn't exhibit the issue and two queries have very similar plan; wrapping both with 
{noformat}
select * from (...)t1
{noformat}
causes the 2nd query to add another stage with tablescan and limit, and causes the results to differ., I double checked on Tez; stage is also added there. Even though reducesink of the first stage sends data in the order of the subquery, it arrives at the first select of the next stage in different order.
Heavily reformatted logs from logging added to ReduceSink, FileSink and Select - time, container id, part of log line (number for select is just Java object id):
{noformat}
18:36:57,719,1411004090043_0003_01_000003,1807797632 selecting 0, val_0, 
18:36:57,730,1411004090043_0003_01_000003,Reducesinking 0, val_0, 
18:36:57,751,1411004090043_0003_01_000003,1807797632 selecting 0, val_0, 
18:36:57,763,1411004090043_0003_01_000003,Reducesinking 0, val_0, 
18:36:57,784,1411004090043_0003_01_000003,1807797632 selecting 0, val_0, 
18:36:57,795,1411004090043_0003_01_000003,Reducesinking 0, val_0, 
18:36:57,818,1411004090043_0003_01_000003,1807797632 selecting 10, val_10, 
18:36:57,830,1411004090043_0003_01_000003,Reducesinking 10, val_10, 
18:36:57,852,1411004090043_0003_01_000003,1807797632 selecting 100, val_100, 
18:36:57,863,1411004090043_0003_01_000003,Reducesinking 100, val_100, 


18:36:58,096,1411004090043_0003_01_000002,107130125 selecting 100, val_100, 
18:36:58,107,1411004090043_0003_01_000002,1473175752 selecting 100, val_100, 
18:36:58,147,1411004090043_0003_01_000002,Filesinking 100, val_100, 
18:36:58,159,1411004090043_0003_01_000002,107130125 selecting 10, val_10, 
18:36:58,169,1411004090043_0003_01_000002,1473175752 selecting 10, val_10, 
18:36:58,180,1411004090043_0003_01_000002,Filesinking 10, val_10, 
18:36:58,191,1411004090043_0003_01_000002,107130125 selecting 0, val_0, 
18:36:58,202,1411004090043_0003_01_000002,1473175752 selecting 0, val_0, 
18:36:58,213,1411004090043_0003_01_000002,Filesinking 0, val_0, 
18:36:58,224,1411004090043_0003_01_000002,107130125 selecting 0, val_0, 
18:36:58,235,1411004090043_0003_01_000002,1473175752 selecting 0, val_0, 
18:36:58,246,1411004090043_0003_01_000002,Filesinking 0, val_0, 
18:36:58,258,1411004090043_0003_01_000002,107130125 selecting 0, val_0, 
18:36:58,269,1411004090043_0003_01_000002,1473175752 selecting 0, val_0, 
18:36:58,280,1411004090043_0003_01_000002,Filesinking 0, val_0, 
{noformat}

It's good that this came up in q files because on the cluster, with multiple containers potentially in each stage, ordering will not be possible to enforce.

The issue happens just because stage is added, not because of limit specifically.
So, if order is needed, it needs to be enforced... in current hive contract that doesn't happen.

If CBO moves limits around in such manner it (or Hive) also needs to propagate order by so it is enforced between stages.
We could do a hacky patch to prevent limit from adding a stage in this case, but I suspect other cases can also happen...]