[Failure appears to be related to use of IMetaStoreClient in HCatUtil, which was done in https://issues.apache.org/jira/browse/HIVE-9582.
It looks like one simple fix for this issue is to avoid using HCatUtil.assertNotNull() in HCatFieldSchema, since it looks like the error is coming from HCatUtil., I'm not sure that the original stack trace is from an environment that's set up correctly, since it seems to ultimately be complaining of a NoClassDefFoundError, and hcatalog does have a hard dependency on hive-metastore, which IMetaStoreClient is part of.

That said, I'm still +1 to the patch - moving from assert to an IllegalArgumentException is the right call in general here, I think, since as far as the HCatFieldSchema is concerned, it is an illegal argument to pass in a null typeinfo.
, if we build hive running
{code}
$ mvn clean install -DskipTests -Phadoop-2,dist
{code}
then we will see that packaging/target/apache-hive-1.3.0-SNAPSHOT-bin/apache-hive-1.3.0-SNAPSHOT-bin/lib does not have hive-hcatalog-core-1.3.0-SNAPSHOT.jar

if we start hive by
{code}
$ cd <HIVE_PROJ_HOME>/packaging/target/apache-hive-1.3.0-SNAPSHOT-bin/apache-hive-1.3.0-SNAPSHOT-bin
$ bin/hive
{code}
and try to create the table then create table statements (which refers to 'org.apache.hive.hcatalog.data.JsonSerDe') will fail because hive can not find JsonSerDe class  (because hive-hcatalog-core.jar it's not in hive/lib)

In order to solve this problem we need to add hive-hcatalog-core-1.3.0-SNAPSHOT.jar as a resource
{code}
hive> ADD JARS <HIVE_PROJ_HOME>/hcatalog/core/target/hive-hcatalog-core-1.3.0-SNAPSHOT.jar;
{code}

after adding hive-hcatalog-core.jar we can create the table and try to run 'analyze table'.
Analyze table MR job will fail 
{code}
Number of reduce tasks is set to 0 since there's no reduce operator
Starting Job = job_1431383083931_0004, Tracking URL = http://c11.example.com:8088/proxy/application_1431383083931_0004/
Kill Command = /usr/lib/hadoop-2.6.0/bin/hadoop job  -kill job_1431383083931_0004
Hadoop job information for Stage-0: number of mappers: 1; number of reducers: 0
2015-05-11 15:43:48,524 Stage-0 map = 0%,  reduce = 0%
2015-05-11 15:44:13,937 Stage-0 map = 100%,  reduce = 0%
Ended Job = job_1431383083931_0004 with errors
...
Caused by: java.lang.ClassNotFoundException: org.apache.hadoop.hive.metastore.IMetaStoreClient
	at java.net.URLClassLoader$1.run(URLClassLoader.java:366)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:355)
	at java.security.AccessController.doPrivileged(Native Method)
{code}

This problem also can be solved by adding another jar hive-metastore-1.3.0-SNAPSHOT.jar as a resource
{code}
hive> ADD JARS <HIVE_PROJ_HOME>/metastore/target/hive-metastore-1.3.0-SNAPSHOT.jar;
{code}

if we look at hive/lib folder we can see that hive-metastore-1.3.0-SNAPSHOT.jar exists in the folder.
But for some reason hive-metastore-1.3.0-SNAPSHOT.jar is not included to MapReduce classpath.

First question. Should hive-metastore.jar be included to MR classpath by default?

If yes then we need to find the place in hive which controls what jars are added to MR classpath and add hive-metastore.jar into it.
Otherwise we have to manually add hive-metastore.jar as a resource.

, I believe the hive-metadata has been purposely left out from the list of dependencies available at task time during query execution, possibly to prevent Hive from accidentally doing something bad like firing metastore queries from lots of map/reduce tasks at the same time. That's why you'll see things like how hive-exec has its own version of Table class to avoid having to reference the metastore version of the class. If it weren't for this, hive-exec would have likely pulled the hive-metastore classes into itself (hive-exec.jar is a shaded uber jar)., 

{color:red}Overall{color}: -1 at least one tests failed

Here are the results of testing the latest attachment:
https://issues.apache.org/jira/secure/attachment/12732024/HIVE-10672.1.patch

{color:red}ERROR:{color} -1 due to 1 failed/errored test(s), 8921 tests executed
*Failed tests:*
{noformat}
org.apache.hadoop.hive.cli.TestEncryptedHDFSCliDriver.testCliDriver_encryption_insert_partition_static
{noformat}

Test results: http://ec2-174-129-184-35.compute-1.amazonaws.com/jenkins/job/PreCommit-HIVE-TRUNK-Build/3854/testReport
Console output: http://ec2-174-129-184-35.compute-1.amazonaws.com/jenkins/job/PreCommit-HIVE-TRUNK-Build/3854/console
Test logs: http://ec2-174-129-184-35.compute-1.amazonaws.com/logs/PreCommit-HIVE-TRUNK-Build-3854/

Messages:
{noformat}
Executing org.apache.hive.ptest.execution.PrepPhase
Executing org.apache.hive.ptest.execution.ExecutionPhase
Executing org.apache.hive.ptest.execution.ReportingPhase
Tests exited with: TestsFailedException: 1 tests failed
{noformat}

This message is automatically generated.

ATTACHMENT ID: 12732024 - PreCommit-HIVE-TRUNK-Build, +1, Btw, I would suggest, as a general practice, in this case, in addition to this patch, that if you add hcatalog-core to your aux jars, then you should add the metastore jar to it as well. We should capture this in documentation, adding a doc todo task for that., Committed to master.
I would also like to commit this to branch-1.2 after 1.2.0 is released., Committed to branch-1.2, Here are some ideas for where it could be documented in the wiki:
* [LanguageManual Cli - Hive Resources | https://cwiki.apache.org/confluence/display/Hive/LanguageManual+Cli#LanguageManualCli-HiveResources]
* [HCatalog InputOutput - Running MapReduce with HCatalog | https://cwiki.apache.org/confluence/display/Hive/HCatalog+InputOutput#HCatalogInputOutput-RunningMapReducewithHCatalog]
* [HCatalog LoadStore - Jars and Configuration Files | https://cwiki.apache.org/confluence/display/Hive/HCatalog+LoadStore#HCatalogLoadStore-JarsandConfigurationFiles]
* [StatsDev - Existing Tables - ANALYZE | https://cwiki.apache.org/confluence/display/Hive/StatsDev#StatsDev-ExistingTables%E2%80%93ANALYZE]]