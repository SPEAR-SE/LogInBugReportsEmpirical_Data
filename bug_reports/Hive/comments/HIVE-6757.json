[I assume they are there for compatibility, but they should be put into the parquet jars if they are necessary., bq. I assume they are there for compatibility

That is correct.

bq. Apache shouldn't release projects with files outside of the org.apache namespace.

The shell classes simply for compatibility and are ASL 2.0 licensed. Is there documentation saying this is against Apache policy? , There's no ASF-wide policy requiring every Java source code file to be in an org.apache sub-package.  Certainly that is preferred, but sometimes, usually for back-compatibility, code in non-Apache packages continues to be released from Apache TLPs for some time.  For example, Subversion still releases org.tigris code.

http://subversion.apache.org/docs/javahl/1.7/org/tigris/subversion/javahl/package-summary.html
, There is no pressing need for them to be in Hive's jar. They are brand new classes and can easily be put in to the parquet jars that are distributed by parquet., bq. There is no pressing need for them to be in Hive's jar

There is no pressing need to remove them either., If we look at precedence for this in hive community, there has lot of work put into keeping the package structure clean.  All the hcatalog classes were moved into org.apache.hive. They old packaging is being deprecated in hive 0.14. And that already in org.apache.* . 

cc [~cwsteinbach]
, I'm not sure what the motivation is. The inclusion of the code violates no bylaws of either Hive or Apache. For those who don't use Parquet, they probably never deal with these classes, but for those who do, these are important to them. I'm not sure what we gain by removing them.

If we think this is important for Hive, I'd be open to consider amending the current by-laws to apply going forward. In absence of such bylaw, I don't see a strong argument for the removal.

As to the case of HCat, I'm wondering how many releases have passed before it lands on the current package structure., I am not sure if we need to have by-laws for things like this. For example we don't have by-law for indentation in code, or adding tests with patches.

, Regarding hcat, it was added in 0.11 , there is a patch out there to remove the old deprecated classes in 0.14 .
, Yeah, I think it makes more sense to remove these deprecated parquet classes in certain future release. , From Hive's point of view, they are unused classes that have never been released. The right time to remove them is now before 0.13 is released., Just delete the entire directory. No other code change is necessary., bq. From Hive's point of view, they are unused classes that have never been released. 

I disagree. These class names are stored by many hive users in the metastore., {quote}
I disagree. These class names are stored by many hive users in the metastore.
{quote}

Actually, these have never been released so there are *NO* Hive users yet. That is exactly why this needs to be fixed before 0.13., bq. Actually, these have never been released so there are NO Hive users yet.

This is not true. Many Hive users used the Parquet Serde before it was contributed to the Hive project. Those Hive users are extremely interested in having their existing tables work when they go to 0.13., {quote}
 Many Hive users used the Parquet Serde before it was contributed to the Hive project. 
{quote}
They can continue to use their jar and it will continue to work. That isn't motivation for putting these jars into Hive., bq. They can continue to use their jar and it will continue to work. That isn't motivation for putting these jars into Hive.

They cannot continue to use their jars because many of the Hive interfaces changed in 0.12 and 0.13. This was one of the reasons that the Parquet developers agreed to contribute their work to Hive. I am quite surprised you marked this as a blocker considering:

* There is no apache or hive policy against this code
* This work was done a long time ago
* You are watching the JIRA in which this work was completed
* It's a tiny amount of code (all wrappers), impacting no one

I do not agree with removing this code for the 0.13 release., Hive does *not* have a need to maintain backwards compatibility with third party jars. The user installed third party jars and needs new versions to work with the current version of Hive. That doesn't mean that Hive should start publishing source code in the parquet namespace. 

There can't be any technical reason to block this patch. 
  * It removes unused java files. 
  * It does not break compatibility with any release of Hive
  * It prevents creating a new public API that starts deprecated.

This is straight forward goodness. It breaks no one and prevents downstream problems. I strongly encourage you to work with the parquet team to create a new version of their jar with these four compatibility classes., bq. Hive does not have a need to maintain backwards compatibility with third party jars. 

Simply because we do not have to, does not mean we cannot. More simply there is no policy saying we cannot maintain backwards compatibility with existing Parquet users. The work was done by the Hive developer community for the Hive user community.

bq. There can't be any technical reason to block this patch.

Breaking Hive users, part of the Hive community, is a technical reason., {quote}
Breaking Hive users, part of the Hive community, is a technical reason.
{quote}

You haven't demonstrated how it breaks any Hive users. Any user that downloaded the Parquet jars still has the Parquet jars and should download updated ones that work with their current release. This doesn't present a problem. It certainly isn't worth creating more confusion by releasing files outside of the org.apache namespace., [~brocknoland], sorry, I don't quite follow the issue here.  I get that you want current Hive users who are using Parquet to not experience a non-backward compatible change.  That's reasonable.  If these parquet.hive.... classes are placed in the parquet jars and pulled via maven that should still be achieved, correct?  I'm missing how having these in Hive rather than parquet is a backwards compatibility issue., Brock, here is a patch that creates a separate project parquet-hive.jar that users can slip into replace their old ones., Owen, the solution your proposing means that there is no seamless upgrade path for existing parquet-hive users and that somewhere on the hive wiki there will have to be a call out "attention existing parquet users, you must include the parquet-hive.jar when upgrading to hive 13.  we're sorry, but this is the price you have to pay for being an early adopter and driving functionality".

One of the goals of the #HIVE-5783 patch was to make the lives of parquet users easier (there were of course many other reasons, but ease of use is a good goal in and of itself).  The classes as they are do no harm and it's hard to see how they pollute the code base of Hive in any significant way.  This patch kinda sorta seems a tiny bit punitive if you ask me.

Please don't take any of this the wrong way, but I believe this is what a fair chunk of the parquet-hive community might think if this patch is committed., Great points Justin. Many folks in the Hive community want this code, which is not against any Apache or Hive policy., Justin,
   They already have parquet-hive.jar that they've manually added to their installation. Giving them an upgraded jar to work with Hive 0.13 is a better answer than making conflicting classes in Hive itself.

In fact, the way that HIVE-5783 was done imposes a significant chance that class conflicts will occur for users that have manually installed the parquet jars. I'm not trying to force reverting HIVE-5783 out of Hive 0.13, but leaving these classes in the parquet jars and not in Hive is a much better answer. , If removing the code helps Hive functionally or performance-widely, I may be convinced by the proposal of removing this small piece of code. Based on what we gain by doing this removal, it's hard to be convincing that this benefits anything if at all, while discouraging some hive/parquet users who really care. For most of other Hive users, who cares about the extra two classes they don't need to bother with., I guess my point is simply that early adopters are penalized for life whereas new users get the full benefit of the patch.  I agree that the penalty is pretty small, but the two classes kicking around in the parquet package are even less of a penalty to the hive code base.  Thus I remain against pulling them out., The point is that these files are *CREATING* a new *PUBLIC* api for Hive. That API is starting deprecated. That just creates confusion and noise. The users already need to update their manually installed parquet jars. This is the time that imposes the *LEAST* disruption on the users of Apache Hive. If we release them then there is user confusion over duplicated classes. Hive users won't expect to see classes in parquet.* in the hive-exec jar. *THAT* will create brand new user confusion., Hi Justin, Brock,

Couple of questions/thoughts:

1.
What if we include the parquet-hive.jar in the hive-exec shaded jar? Does this mitigate the upgrade issues for existing users? 

2. 
If they choose to how will existing users migrate to the new classes? Do we provide metadata upgrade scripts? Do we have to support their existing sql code: for e.g. we add checks in the hive parsing layer to replace old parquet class references with new classes.
So the migration process when we remove(now or in the future) the deprecated classes is not clear. Can you guys please help me understand how this will play out.  , Hi,

The work that was done in HIVE-5783, by the Hive community, ensured that it was backwards compatible for Parquet Hive users, also members of the Hive community. There would be no issue with a patch that kept the backwards compatibility work.

The simplest solution would be to update the serde, input, and output class names in the metastore via the upgrade scripts.

Brock, I can +1 [~brocknoland]'s solution if that flies for everyone else.  Actually, we joked about this in one of our review sessions here thinking that it was a bit of a brute force solution, but if this works for everyone it works for us (FYI, for one table we expect to have 47K partitions to update)., Having the upgrade script convert the names is great as long as we can remove the deprecated classes outside of org.apache., I find that to be an acceptable compromise.

consensus :)., Took a stab at creating the upgrade script.
Please review. This is the first time I am doing an upgrade script, so I apologize if I missed something.  

I tested this on derby: 
- created a table with the old syntax and classes.
- applied the upgrade on my instance
- With this patch applied could run a select on the table.

Hopefully this is good enough for existing parquet users., 

{color:red}Overall{color}: -1 at least one tests failed

Here are the results of testing the latest attachment:
https://issues.apache.org/jira/secure/attachment/12638894/HIVE-6757.2.patch

{color:red}ERROR:{color} -1 due to 1 failed/errored test(s), 5548 tests executed
*Failed tests:*
{noformat}
org.apache.hive.service.cli.thrift.TestThriftHttpCLIService.testExecuteStatementAsync
{noformat}

Test results: http://bigtop01.cloudera.org:8080/job/PreCommit-HIVE-Build/2156/testReport
Console output: http://bigtop01.cloudera.org:8080/job/PreCommit-HIVE-Build/2156/console

Messages:
{noformat}
Executing org.apache.hive.ptest.execution.PrepPhase
Executing org.apache.hive.ptest.execution.ExecutionPhase
Executing org.apache.hive.ptest.execution.ReportingPhase
Tests exited with: TestsFailedException: 1 tests failed
{noformat}

This message is automatically generated.

ATTACHMENT ID: 12638894, +1. The patch looks good to me. Thanks to Harish for taking on this., +1
Thank you Harish!!, much appreciated Harish!, +1 thanks Harish!
, Committed to trunk and 0.13
thanks Owen, Xuefu, Brock, Justin., This should have a release note, and the wiki needs usage information.

* [LanguageManual - File Formats - Parquet |https://cwiki.apache.org/confluence/display/Hive/Parquet]]