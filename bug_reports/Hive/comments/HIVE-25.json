[Attached is the proposed code changes. Fix for this seems to be more complex that I originally thought.

This fix will work for below type of queries. The fix attempts to make all column references with in a parenthesis refer to tables specified in the from clause.

SELECT x.*  FROM SRC x CLUSTER BY x.key;

SELECT y.* from (SELECT x.* FROM SRC x CLUSTER BY key) y where y.key = 20;

SELECT y.* from (SELECT x.* FROM SRC x CLUSTER BY x.key) y where y.key = 20;

Would appreciate your thoughts on this.
, this contains changes to tests as well..., In Hive.g the change to the rule for columnNameOrder will also change the ddl (the tablebuckets rule) and there we clearly do not have a notion of tableColumn as there is no table alias. 

We need to think a bit to see if we really want to lift this restriction. The reason it was modeled like this was because of the transform operator. Basically, the cluster by clause addresses the alias list instead of the select expressions. There are no tangible select expressions in the transform case. 

Thoughts?, I will change Hive.g so that sortOrder in DDL can only have identifiers and not column refs.

The way I want to do this is to allow select columns to be referenced in cluster/distributed/sort clauses according to following rules

1) column has an alias in the select clause. this column can only be referred with the alias in the above 3 clauses
2) column doesn't have an alias but it may have table alias. this column can be referred with the columnName or tabAlias.columnName in the above 3 clauses.

where clause can only contain tabAlias.columnName and is different from above rules.

I will upload modified patch with tests for all the above conditions. How about it?, here is the correct patch with the changes mentioned above.

cluster.q contains following queries and clustern1.q and clustern2.q contains negative testcases

EXPLAIN
SELECT x.key, x.value as v1, y.*  FROM SRC x JOIN SRC y ON (x.key = y.key) CLUSTER BY v1;

EXPLAIN
SELECT x.key, x.value as v1, y.*  FROM SRC x JOIN SRC y ON (x.key = y.key) CLUSTER BY x.key;

EXPLAIN
SELECT x.key, x.value as v1, y.key as yk  FROM SRC x JOIN SRC y ON (x.key = y.key) CLUSTER BY key;

EXPLAIN
SELECT * FROM SRC x CLUSTER BY x.key;

EXPLAIN
SELECT * FROM SRC x CLUSTER BY key;

EXPLAIN
SELECT x.* FROM SRC x CLUSTER BY key;

EXPLAIN
SELECT x.*  FROM SRC x CLUSTER BY x.key;

EXPLAIN
SELECT x.key, x.value as v1 FROM SRC x CLUSTER BY key;

EXPLAIN
SELECT x.key, x.value as v1 FROM SRC x CLUSTER BY x.key;

EXPLAIN
SELECT x.key, x.value as v1  FROM SRC x CLUSTER BY v1;

, Comments from the code review with Prasad:

1. Please run the queries also apart from the explain plans in the test cases
2. Union all case should also be added to the tests
3. In SemanticAnalyzer.java:1085 the check for identifier is not needed.
4. getColAliasFromRef does nothing so it can be removed.

Also as we discussed, bigger changes are needed to support:
1. select a.key, a.key from a
2. complex columns are broken in the query because the table alias is optional.

Please file separate JIRAs for those.
, queries of the form 'select a.key. a.key from a' seem to be working.

i will upload patch that adds the new testcases as suggested., added more tests as suggested, +1

looks good to me.
, I am seeing a number of test failures both in clientpositive and clientnegative...

Can you rerun and check that all the tests are passing., couple of new tests were added that were breaking which i fixed them.
remove CliDriver.java which got into previous patch by mistake and which was breaking TestNegativeCliDriver tests., committed. Thanks Prasad!!
]