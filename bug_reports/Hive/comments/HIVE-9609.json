[Ideally, I'd like to fix this by changing AddPartitionEvent.getPartitions() to return an Iterable<Partition>, and make that work either way, but I'm not certain if I will tread on any toes if I change that, since this has been public interface for a while - also, I'm not certain if expecting "null" from getPartitions might be used in any code to determine if this is a List<Partition> based or PartitionSpec-based AddPartitionEvent. So, I've not messed with the current implementation of getPartitions. That said, [~mithun], could you please comment if you're okay with me fixing getPartitions so that it doesn't return null in the case where it has been instantiated from a PartitionSpec? I could at the very least do that.

Also, to handle the base problem, we should fix AddPartitionEvent.getPartitionIterator to correctly work in correctly in both cases - this should at least not be controversial.

After that, we should change MessageFactory.buildAddPartitionMessage to work on Iterator<Partition> rather than List<Partition> - this is trivially fixable, and have JSONMessageFactory use that instead, thereby solving our initial problem of getPartitions call from AddPartitionEvent not being usable in cases of events fired with PartitionSpec rather than List<Partition>, Patch attached., 

{color:red}Overall{color}: -1 no tests executed

Here are the results of testing the latest attachment:
https://issues.apache.org/jira/secure/attachment/12697307/HIVE-9609.patch

Test results: http://ec2-174-129-184-35.compute-1.amazonaws.com/jenkins/job/PreCommit-HIVE-TRUNK-Build/2706/testReport
Console output: http://ec2-174-129-184-35.compute-1.amazonaws.com/jenkins/job/PreCommit-HIVE-TRUNK-Build/2706/console
Test logs: http://ec2-174-129-184-35.compute-1.amazonaws.com/logs/PreCommit-HIVE-TRUNK-Build-2706/

Messages:
{noformat}
Executing org.apache.hive.ptest.execution.PrepPhase
Executing org.apache.hive.ptest.execution.ExecutionPhase
Tests exited with: ExecutionException: org.apache.hive.ptest.execution.ssh.SSHExecutionException: RSyncResult [localFile=/data/hive-ptest/logs/PreCommit-HIVE-TRUNK-Build-2706/succeeded/TestHBaseMinimrCliDriver, remoteFile=/home/hiveptest/54.196.66.93-hiveptest-0/logs/, getExitCode()=12, getException()=null, getUser()=hiveptest, getHost()=54.196.66.93, getInstance()=0]: 'Address 54.196.66.93 maps to ec2-54-196-66-93.compute-1.amazonaws.com, but this does not map back to the address - POSSIBLE BREAK-IN ATTEMPT!
receiving incremental file list
./
TEST-TestHBaseMinimrCliDriver-TEST-org.apache.hadoop.hive.cli.TestHBaseMinimrCliDriver.xml
           0   0%    0.00kB/s    0:00:00
        4839 100%    4.61MB/s    0:00:00 (xfer#1, to-check=3/5)
hive.log
           0   0%    0.00kB/s    0:00:00
    44040192  22%   42.00MB/s    0:00:03
rsync: write failed on "/data/hive-ptest/logs/PreCommit-HIVE-TRUNK-Build-2706/succeeded/TestHBaseMinimrCliDriver/hive.log": No space left on device (28)
rsync error: error in file IO (code 11) at receiver.c(301) [receiver=3.0.6]
rsync: connection unexpectedly closed (213 bytes received so far) [generator]
rsync error: error in rsync protocol data stream (code 12) at io.c(600) [generator=3.0.6]
Address 54.196.66.93 maps to ec2-54-196-66-93.compute-1.amazonaws.com, but this does not map back to the address - POSSIBLE BREAK-IN ATTEMPT!
receiving incremental file list
./
hive.log
           0   0%    0.00kB/s    0:00:00
rsync: write failed on "/data/hive-ptest/logs/PreCommit-HIVE-TRUNK-Build-2706/succeeded/TestHBaseMinimrCliDriver/hive.log": No space left on device (28)
rsync error: error in file IO (code 11) at receiver.c(301) [receiver=3.0.6]
rsync: connection unexpectedly closed (213 bytes received so far) [generator]
rsync error: error in rsync protocol data stream (code 12) at io.c(600) [generator=3.0.6]
Address 54.196.66.93 maps to ec2-54-196-66-93.compute-1.amazonaws.com, but this does not map back to the address - POSSIBLE BREAK-IN ATTEMPT!
receiving incremental file list
./
hive.log
           0   0%    0.00kB/s    0:00:00
rsync: write failed on "/data/hive-ptest/logs/PreCommit-HIVE-TRUNK-Build-2706/succeeded/TestHBaseMinimrCliDriver/hive.log": No space left on device (28)
rsync error: error in file IO (code 11) at receiver.c(301) [receiver=3.0.6]
rsync: connection unexpectedly closed (213 bytes received so far) [generator]
rsync error: error in rsync protocol data stream (code 12) at io.c(600) [generator=3.0.6]
Address 54.196.66.93 maps to ec2-54-196-66-93.compute-1.amazonaws.com, but this does not map back to the address - POSSIBLE BREAK-IN ATTEMPT!
receiving incremental file list
./
hive.log
           0   0%    0.00kB/s    0:00:00
rsync: write failed on "/data/hive-ptest/logs/PreCommit-HIVE-TRUNK-Build-2706/succeeded/TestHBaseMinimrCliDriver/hive.log": No space left on device (28)
rsync error: error in file IO (code 11) at receiver.c(301) [receiver=3.0.6]
rsync: connection unexpectedly closed (213 bytes received so far) [generator]
rsync error: error in rsync protocol data stream (code 12) at io.c(600) [generator=3.0.6]
Address 54.196.66.93 maps to ec2-54-196-66-93.compute-1.amazonaws.com, but this does not map back to the address - POSSIBLE BREAK-IN ATTEMPT!
receiving incremental file list
./
hive.log
           0   0%    0.00kB/s    0:00:00
rsync: write failed on "/data/hive-ptest/logs/PreCommit-HIVE-TRUNK-Build-2706/succeeded/TestHBaseMinimrCliDriver/hive.log": No space left on device (28)
rsync error: error in file IO (code 11) at receiver.c(301) [receiver=3.0.6]
rsync: connection unexpectedly closed (213 bytes received so far) [generator]
rsync error: error in rsync protocol data stream (code 12) at io.c(600) [generator=3.0.6]
'
{noformat}

This message is automatically generated.

ATTACHMENT ID: 12697307 - PreCommit-HIVE-TRUNK-Build, Hey, Sush. I heartily agree with the intention. It would be good to remove cases where all the partitions need to be loaded into memory at once. And for this, it makes sense to have AddPartitionEvent initializable only with an Iterator<Partition>. 

I like the idea of the Iterable<Partition>. Perhaps the PartitionSpecProxy should have implemented Iterable<Partition>. :/

I did run into a problem (that I can't completely recollect). You'll notice that {{PartitionSpecProxy.PartitionIterator}} has functionality that ideally belongs in {{Partition}}, such as {{setCreateTime()}}, {{putToParameters()}}, etc. The reason is that subclasses (such as {{PartitionSpecWithSharedSDProxy}}) construct Partition instances as needed, and won't be able to propagate setter-actions on Partitions to the underlying implementation. (At least, not without subclassing {{Partition}} itself.)

I'm fine with changing the MessageFactory interface, and AddPartitionEvent initializers, to eschew {{List<Partition>}} objects. We'll also need to change {{HiveMetaStore.fireMetaStoreAddPartitionEvent()}} to conform to this., Attaching more aggressive v2, removes the getPartitions() call altogether, removes PartitionSpecProxy usage and List<Partition> usage from MessageFactory., Oh, one more thing. Changing HiveMetaStore.fireMetaStoreAddPartitionEvent() to eschew List<Partition> does not help us, unless we remove add_partitions itself, since we were sent in the List<Partition> already, and that is a call on which we should not break backward compatibility.

I'm retaining AddPartitionEvent as effectively a union of List<Partition>/PartitionSpec as it currently stands - but I am changing it so that the "one true way" of accessing AddPartitionEvent is through getPartitionIterator, which works correctly for both cases. In addition, I'm outright removing the getPartitions() method that was there earlier and forcing use of the iterator, since that will not cause a PSpec-based add partitions to fail when the event is processed., Sorry for the delay. I'm going to need a little more time to study the second patch. I'd like to get my head around

But on first glance, I appreciate how streamlined {{AddPartitionEvent}}'s interface is now. I'm even more taken by {{Iterators}}.

Minor nitpicks:
1. Should we also change {{JSONMessageFactory.getPartitionKeyValues()}} to return {{Iterator<Map<String,String>>}}? Also, appropriately change {{JSONAddPartitionMessage}} constructor? Perhaps not a big deal, given that these are just names. But then again, perhaps every little counts?
2. Shall we split {{JSONAddPartitionMessage.partitions}} to include only part-values, and avoid the repetition of partition-key-names.
3. JSONMessageFactory.java imports "java.util.*". That's likely my (code-editor's) doing. Could I please bother you to fix that?

I'd like to do a similar change for DropPartitionEvent/Message. I'll raise a JIRA shortly., Actually, splitting out {{JSONAddPartitionMessage.partitions}} into a {{List<PartitionKeyName>}} and {{List<List<PartitionValues>>}} will be fairly intrusive. Separate JIRA, methinks.

The JSONMessageDeserializer will need to provide backward compatibility, etc. Let's hold off on that change., Also, could we remove the unnecessary null-checks in DbNotificationListener? The changes are in HIVE-9679., Also also, could we please change {{AuthorizationPreEventListener.authorizeAddPartition}} to use {{PartitionWrapper}}'s first constructor, so that the table isn't fetched every time?, Attaching updated patch., Mithun, per your previous comments:

a) Making a change to JSONMessageFactory.getPartitionKeyValues() to Iterator semantics is more work than I thought initially, because it requires quite a bit of testing if we change the AddPartitionMessage also to use an Iterator instead of a List, since we're using automatic JSON generation in the JSONAddPartitionMessage, and that can handle Lists properly, but with Iterators, it might require more testing. If that does not itself change, then changing this signature from List to Iterator gains us nothing. It's definitely worth experimenting, and I will try to take another stab at it later. Also, if we're converting from Iterator to List at some point, Lists.newArrayList is supposed to be a pretty low-cost way of doing that.
b) Splitting JSONAddPartitionMessage.partitions, equally, is a lot more complex. Again, for a future jira.
c) Changing java.util.* - fixed. It was there from earlier, but good catch on it. It's better to remove these where we find it.

In addition, there are some new tests that need fixing, I've fixed those., @[~sushanth]: 

1-2. I agree with you, and hence, me again. (?!) {{List<List<PartVal>>}} might be doable, but we can hit that with a separate JIRA. The rest of the iterator stuff is pretty neat. I'll read through the updated patch more closely before +1-ing.
3. That was likely my (IDE's) doing. Much obliged, and many simultaneous apologies.

I had recommended a change to {{AuthorizationPreEventListener.authorizeAddPartition}} to use the alternative {{PartitionWrapper}} constructor. (It's way faster.) But again, it's possible that that change distracts from our objective here. Separate JIRA?, Agreed on the separate jira - I don't want to get into changing AuthorizationPreEventListener here, if possible. :D, Looking good, sir. +1.

FYI, I've raised HIVE-10250 for the {{AuthPreEventListener}} problem. I'll rebase HIVE-10250 and HIVE-9674 after we commit this one., Thanks, Mithun.

[~alangates], could I bug you for a review of this too?, 

{color:red}Overall{color}: -1 at least one tests failed

Here are the results of testing the latest attachment:
https://issues.apache.org/jira/secure/attachment/12723732/HIVE-9609.3.patch

{color:red}ERROR:{color} -1 due to 14 failed/errored test(s), 8663 tests executed
*Failed tests:*
{noformat}
TestMinimrCliDriver-bucketmapjoin6.q-constprog_partitioner.q-infer_bucket_sort_dyn_part.q-and-1-more - did not produce a TEST-*.xml file
TestMinimrCliDriver-external_table_with_space_in_location_path.q-infer_bucket_sort_merge.q-auto_sortmerge_join_16.q-and-1-more - did not produce a TEST-*.xml file
TestMinimrCliDriver-groupby2.q-import_exported_table.q-bucketizedhiveinputformat.q-and-1-more - did not produce a TEST-*.xml file
TestMinimrCliDriver-index_bitmap3.q-stats_counter_partitioned.q-temp_table_external.q-and-1-more - did not produce a TEST-*.xml file
TestMinimrCliDriver-infer_bucket_sort_map_operators.q-join1.q-bucketmapjoin7.q-and-1-more - did not produce a TEST-*.xml file
TestMinimrCliDriver-infer_bucket_sort_num_buckets.q-disable_merge_for_bucketing.q-uber_reduce.q-and-1-more - did not produce a TEST-*.xml file
TestMinimrCliDriver-infer_bucket_sort_reducers_power_two.q-scriptfile1.q-scriptfile1_win.q-and-1-more - did not produce a TEST-*.xml file
TestMinimrCliDriver-leftsemijoin_mr.q-load_hdfs_file_with_space_in_the_name.q-root_dir_external_table.q-and-1-more - did not produce a TEST-*.xml file
TestMinimrCliDriver-list_bucket_dml_10.q-bucket_num_reducers.q-bucket6.q-and-1-more - did not produce a TEST-*.xml file
TestMinimrCliDriver-load_fs2.q-file_with_header_footer.q-ql_rewrite_gbtoidx_cbo_1.q-and-1-more - did not produce a TEST-*.xml file
TestMinimrCliDriver-parallel_orderby.q-reduce_deduplicate.q-ql_rewrite_gbtoidx_cbo_2.q-and-1-more - did not produce a TEST-*.xml file
TestMinimrCliDriver-ql_rewrite_gbtoidx.q-smb_mapjoin_8.q - did not produce a TEST-*.xml file
TestMinimrCliDriver-schemeAuthority2.q-bucket4.q-input16_cc.q-and-1-more - did not produce a TEST-*.xml file
org.apache.hadoop.hive.cli.TestCliDriver.testCliDriver_index_bitmap_auto_partitioned
{noformat}

Test results: http://ec2-174-129-184-35.compute-1.amazonaws.com/jenkins/job/PreCommit-HIVE-TRUNK-Build/3324/testReport
Console output: http://ec2-174-129-184-35.compute-1.amazonaws.com/jenkins/job/PreCommit-HIVE-TRUNK-Build/3324/console
Test logs: http://ec2-174-129-184-35.compute-1.amazonaws.com/logs/PreCommit-HIVE-TRUNK-Build-3324/

Messages:
{noformat}
Executing org.apache.hive.ptest.execution.PrepPhase
Executing org.apache.hive.ptest.execution.ExecutionPhase
Executing org.apache.hive.ptest.execution.ReportingPhase
Tests exited with: TestsFailedException: 14 tests failed
{noformat}

This message is automatically generated.

ATTACHMENT ID: 12723732 - PreCommit-HIVE-TRUNK-Build, Tests failures noted here are unconnected with this fix., +1, Committed to trunk, thanks for the reviews, Alan & Mithun!, This issue has been fixed and released as part of the 1.2.0 release. If you find an issue which seems to be related to this one, please create a new jira and link this one with new jira.]