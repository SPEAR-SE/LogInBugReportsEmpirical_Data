[I further narrowed down the issue by adding below debug code in "process" function:
{code}
                for (int i=1; i < args.length; i++) {
                        PrimitiveObjectInspector tmpExtraColumnOI = (PrimitiveObjectInspector) extraColumnList.get(i-1);
                        System.out.println("DEBUG: class for tmpExtraColumnOI is " + tmpExtraColumnOI.getClass().getName());
                        System.out.println("DEBUG: class for args[i] is " + args[i].getClass().getName());
                        String extraColumnString = (String) tmpExtraColumnOI.getPrimitiveJavaObject(args[i]);
                        outputColumnAddList.add(extraColumnString);
                }
{code}

In Hive 0.12 (Working fine):
{code}
DEBUG: class for tmpExtraColumnOI is org.apache.hadoop.hive.serde2.lazy.objectinspector.primitive.LazyStringObjectInspector
DEBUG: class for args[i] is org.apache.hadoop.hive.serde2.lazy.LazyString
{code}

In Hive 0.13(failed):
{code}
DEBUG: class for tmpExtraColumnOI is org.apache.hadoop.hive.serde2.objectinspector.primitive.WritableStringObjectInspector
DEBUG: class for args[i] is org.apache.hadoop.hive.serde2.lazy.LazyString
{code}

Is there any hive code change which may change the class from LazyStringObjectInspector to WritableStringObjectInspector?
, Finally we figured out the issue.
In my previous source code,  below field is initialized before "initialize" function of UDTF:
{code}
	private List<PrimitiveObjectInspector> extraColumnList = new ArrayList<PrimitiveObjectInspector>();
{code}

Eg:
{code}
public class DoubleColumn extends GenericUDTF {
	private List<PrimitiveObjectInspector> extraColumnList = new ArrayList<PrimitiveObjectInspector>();
	@Override
	public StructObjectInspector initialize(ObjectInspector[] args) throws UDFArgumentException {
.....
}
{code}

Then in Hive 0.13, right after "initialize", the size of extraColumnList becomes 1. And the 1st element's type is WritableStringObjectInspector....
In Hive 0.12, right after "initialize",the size of extraColumnList is always 0(empty).
This could be due to the changes in GenericUDTF.java starting in Hive 0.13:
{code}
  public StructObjectInspector initialize(StructObjectInspector argOIs)
      throws UDFArgumentException {
    List<? extends StructField> inputFields = argOIs.getAllStructFieldRefs();
    ObjectInspector[] udtfInputOIs = new ObjectInspector[inputFields.size()];
    for (int i = 0; i < inputFields.size(); i++) {
      udtfInputOIs[i] = inputFields.get(i).getFieldObjectInspector();
    }
    return initialize(udtfInputOIs);
  }
{code}

How to fix?
In Hive 0.13, we have to put extraColumnList's initialization in function "initialize".
eg:
{code}
public class DoubleColumn extends GenericUDTF {
        private List<PrimitiveObjectInspector> extraColumnList ;

        @Override
        public StructObjectInspector initialize(ObjectInspector[] args) throws UDFArgumentException {
                extraColumnList = new ArrayList<PrimitiveObjectInspector>();
{code}

After that ,the UDTF works fine now in both hive 0.12 and 0.13.
]