[We'd still need some mechanism to say that stats do not precisely match the data, i.e. don't answer queries from them but they are good enough for query planning.

 

 , I think the plan is to make this a breaking change for 4.0, should be ok for a major version - there will no longer be json or even stats storage as part of table parameters, and there won't be a runtime backward compat that would generate json values from normalized storage.
There will be an upgrade option to transfer the json object into the new fields; given that the consequence of not running the upgrade script is a one-time loss of accurate stats, this should be acceptable.
I'm looking at the code to see how easy it is to normalize table stats storage into a separate table, so that the TBLS and PARTITIONS are not even affected by stats changes (that is good for CachedStore).
Regardless, as is already the case with column stats, the basic stats state will be updated via a separate API from alter table to make it more explicit.
, WIP patch. This turned out to be a much larger feature than I anticipated since many paths require different structure due to the location of the flags changing (e.g. flag is for each stat now and not entire partition, etc.), as well as some other non trivial changes (non-trivial as in my brain hurts reading this code, actually all the changes are very simple logically).
Remaining areas (marked with TODO# comments):
1) Aggregate stats. Purely mechanical task to propagate and verify lists, but painful.
2) Cached store. Mostly mechanical.
3) Conversion script. The existing code is in the comment that needs to be converted into a tool.
4) Fixing test failures that alter stats with alter table, and numerous small bugs that no doubt exist.

I may return to this patch week after next...]