[+1

looks good, Committed. Thanks John, reopening. i think the bug still exists:

jc.getJob(rj.getJobID()) can return null if the jobtracker has retired the job by the time we poll for it. this happens very rarely. we are setting the returned value in the execdriver handle. and then trying to dereference it later on.

if we have a valid runningjob reference - i don't think we have seen the getCounters call return null (in the past)., i looked at the hadoop source for 20 a bit. looks like both getCounters() and getJob() can return null (in case the job cannot be found). on 0.20 - completed jobs are looked up from persistent store - so i think this is pretty hard to happen (if it does - it seems like a hadoop bug). but for 17 (and maybe other versions in between) - we need to guard against these., more hadoop goriness - i think John your fix was pretty spot on:

- there are three levels of job storage: 
   a. fully in memory (can get status and counters)
   b. partially in memory (a la retired - can get status and not counters)
   c. on disk (completed jobs)

so what is happening is that we are hitting case b. jobstatus is available - but not counters. we should probably anticipate the null jobstatus (which we used to get in 0.17 before b. and c. were available).

what is the effect of not having final counter values available in Hive? Local mode also doesn't report counters i think., Counters are used in for reporting fatal errors from tasks to Driver so that it can kill the job. Currently fatal errors can be thrown from dynamic partition (when there are too many partitions created by a mapper) or map-side join when the threshold of # of rows of the small table has encountered. I think the fatal error mechanism is only enabled for the first case (DP) by default. , - cleaned up ExecDriver a bit - removed some dead code, some unnecessary global vars and throw better exception if JT has lost job
- fixed HIVE-1493 here as well. it's a one line fix in a printf

running tests., Will take a look., damn - this uncovered a bug in the tests and fixed an unncessary throws declaration., The previous patch still put fatal.q* to clientpositive/. Moving them to clientnegative/., Committed. Thanks Joydeep!]