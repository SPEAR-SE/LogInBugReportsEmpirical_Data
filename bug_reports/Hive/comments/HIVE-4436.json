[Small self-contained test.

To use, run 

hive -i create.sql -f test.sql, I saw similar exceptions on long running hive-server sometimes (InterruptedException on mkdirs or delete). I couldn't find why those threads are interrupted, so made a proxy FileSystem on HDFS, de-interrupting thread before calling FS APIs., I tried writing a multi-threaded fs.mkdirs() test for hdfs, which doesn't seem to be erroring out.

Any ideas on reproducing the same behaviour without hive?, Tracking down unexpected interrupt calls for TaskRunner threads.

{code}
java.lang.Exception: Stack trace
        at java.lang.Thread.dumpStack(Thread.java:1249)
        at org.apache.hadoop.hive.ql.exec.TaskRunner.interrupt(TaskRunner.java:53)
        at org.apache.derby.iapi.services.context.ContextService$1.run(Unknown Source)
        at java.security.AccessController.doPrivileged(Native Method)
        at org.apache.derby.iapi.services.context.ContextService.notifyAllActiveThreads(Unknown Source)
        at org.apache.derby.impl.db.DatabaseContextImpl.cleanupOnError(Unknown Source)
        at org.apache.derby.iapi.services.context.ContextManager.cleanupOnError(Unknown Source)
        at org.apache.derby.impl.jdbc.TransactionResourceImpl.cleanupOnError(Unknown Source)
        at org.apache.derby.impl.jdbc.EmbedConnection.<init>(Unknown Source)
        at org.apache.derby.impl.jdbc.EmbedConnection30.<init>(Unknown Source)
        at org.apache.derby.impl.jdbc.EmbedConnection40.<init>(Unknown Source)
        at org.apache.derby.jdbc.Driver40.getNewEmbedConnection(Unknown Source)
        at org.apache.derby.jdbc.InternalDriver.connect(Unknown Source)
        at org.apache.derby.jdbc.AutoloadedDriver.connect(Unknown Source)
        at java.sql.DriverManager.getConnection(DriverManager.java:582)
        at java.sql.DriverManager.getConnection(DriverManager.java:207)
        at org.apache.hadoop.hive.ql.stats.jdbc.JDBCStatsPublisher.closeConnection(JDBCStatsPublisher.java:241)
        at org.apache.hadoop.hive.ql.stats.jdbc.JDBCStatsPublisher.init(JDBCStatsPublisher.java:279)
        at org.apache.hadoop.hive.ql.exec.ExecDriver.execute(ExecDriver.java:437)
        at org.apache.hadoop.hive.ql.exec.MapRedTask.execute(MapRedTask.java:138)
        at org.apache.hadoop.hive.ql.exec.Task.executeTask(Task.java:145)
        at org.apache.hadoop.hive.ql.exec.TaskRunner.runSequential(TaskRunner.java:65)
        at org.apache.hadoop.hive.ql.exec.TaskRunner.run(TaskRunner.java:48)
{code}, Confirmed - disabling stats gathering, prevents this issue from occurring., DriverManager is not guaranteed to be thread-safe.

The derby implementation causes errors when db shutdowns are performed, while other connections are alive & querying., all test pass on (git bdd257f71bc0b65100dbd41425d7f8250ae27e57 + patch), I've seen the same problem with 0.9.0 via CDH4. (http://www.sinking.in/blog/hive-multi-insert-and-parallel-execution-problem/). Today I intended to reproduce on a more recent hive so I could report it, but find this report already covers it.

I've confirmed that applying the patch to Hive 0.9.0 fixes the simplified test case I was working with (which is effectively the same as Gopal V's just not as nicely packaged). , [~gopalv] Could you include a test case and make a phabricator or review board entry? Thanks., [~navis] will add a clientpositive testcase and will update the reviewboard entry - https://reviews.apache.org/r/10993/, Wrote a test-case, but the bug is not reproducible in TestCliDriver & needs a single node hadoop cluster.

The file spray with the multi-insert is within the single reducer, but the sorting & bucketing of each of those files spawns off a separate job ending up with 4 potentially parallel tasks.

The tasks are being executed in the local mode in a single thread and do not have the same timing to trigger the race condition., +1, looks good., a trivial comment in RB., [~gopalv] Would you like to take a look at Navis's suggestion?, I have replied to Navis on RB. I tried to add more logging to the code, but it proved to be useless at giving any real debuggable info

I added some code to the main thread (running Driver) to check for interruptions and log it, but it prints the useless information that the Thread.sleep was interrupted from the following code

{code} 
 public TaskResult pollTasks(Set<TaskResult> results)
...
      // In this loop, nothing was found
      // Sleep 10 seconds and restart
      try {
        Thread.sleep(SLEEP_TIME);
      } catch (InterruptedException ie) {
        // Do Nothing
        ;
      }
{code}

I will have to modify that loop to exit cleanly on interruptions, which does change existing behaviour of the code.

But as for the other comment, it is a bad idea to reset interrupted status on threads unconditionally.

De-interrupting threads unconditionally by ignoring the cause of the interruption is not a fix to any problem we have today - almost like that empty catch-all block in the code.

It at best a wall-paper fix, which just ignores the cracks in the implementation & ignores all consequences of a valid interruption.

Since the patch fixes the bug described above cleanly and without test-failures, I have no more updates to this patch., Makes sense. Thanks, Gopal for digging in. +1, I just thought interrupt in one task should not affect other (child) task. (I was thinking of throwing exception to client). But I respect your idea. +1, Thanks [~navis]!

I wanted to fix the issue with the minimum of side-effects in the rest of the impl.

And for [~mbrooks], the easy work-around for this is to do "set hive.stats.autogather=false;" in the CLI.
, Committed to trunk. Thanks Gopal!, Integrated in Hive-trunk-h0.21 #2175 (See [https://builds.apache.org/job/Hive-trunk-h0.21/2175/])
    HIVE-4436 : hive.exec.parallel=true doesn't work on hadoop-2
 (Gopal V via Navis) (Revision 1498773)

     Result = FAILURE
navis : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1498773
Files : 
* /hive/trunk/ql/src/java/org/apache/hadoop/hive/ql/stats/jdbc/JDBCStatsPublisher.java
, Integrated in Hive-trunk-hadoop2 #269 (See [https://builds.apache.org/job/Hive-trunk-hadoop2/269/])
    HIVE-4436 : hive.exec.parallel=true doesn't work on hadoop-2
 (Gopal V via Navis) (Revision 1498773)

     Result = FAILURE
navis : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1498773
Files : 
* /hive/trunk/ql/src/java/org/apache/hadoop/hive/ql/stats/jdbc/JDBCStatsPublisher.java
, This issue has been fixed and released as part of 0.12 release. If you find further issues, please create a new jira and link it to this one.]