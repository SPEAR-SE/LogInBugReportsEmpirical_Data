[[~ruili], any thoughts on this?, [~lirui], could you  check on this?, I think we can remove the synchronization if {{RpcServer}} is thread safe, which I'm not sure about.
[~vanzin] do you have any ideas on this?, There needs to be a synchronization block to access the {{server}} field; otherwise, it's probably safe to call the {{SparkClientImpl}} constructor outside of a synchronized block, as long as {{SparkClientFactory.stop()}} is not called before it finishes. Something like:

{code}
  public static SparkClient createClient(Map<String, String> sparkConf, HiveConf hiveConf)
      throws IOException, SparkException {
    RpcServer _server;
    synchronized (SparkClientFactory.class) {
      Preconditions.checkState(server != null, "initialize() not called.");
      _server = server;
    }
    return new SparkClientImpl(_server, sparkConf, hiveConf);
  }
{code}

Or maybe just making the {{server}} variable volatile would suffice, too (and then no synchronization is needed in {{createClient}})., [~vanzin] consider the server is initialized one time and stopped only hiveserver shutting down,  seems no concurrent scenarios.  still require mark server variable volatile?, Thanks very much [~vanzin] for your inputs. Like [~wenli] said, SparkClientFactory is stopped only when hiveserver2 shuts down, so we don't have to worry about {{server}} is null while we creating the client.
What I'm not sure is that {{server}} is used to generate the secret and register the RemoteDriver, during creating the SparkClientImpl. Without synchronization, we need the {{server}} to be thread safe., [~lirui] generate secret has no cocurrent issue,nothing is shared,  and register RemoteDirver seems also thread safe, not !00% sure, maybe [~vanzin] can give some input?   thank you all very much., Fixed via HIVE-16854. Close this one as dup.]