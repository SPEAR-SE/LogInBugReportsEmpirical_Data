[What is the expected values for 'bitfld'?, WIP Patch.
Can be reviewed at : https://reviews.apache.org/r/14121/
, 

{color:red}Overall{color}: -1 no tests executed

Here are the results of testing the latest attachment:
https://issues.apache.org/jira/secure/attachment/12602980/HIVE-5221.1.patch

Test results: https://builds.apache.org/job/PreCommit-HIVE-Build/731/testReport
Console output: https://builds.apache.org/job/PreCommit-HIVE-Build/731/console

Messages:
{noformat}
Executing org.apache.hive.ptest.execution.PrepPhase
Tests failed with: NonZeroExitCodeException: Command 'bash /data/hive-ptest/working/scratch/source-prep.sh' failed with exit status 1 and output '+ [[ -n '' ]]
+ export 'ANT_OPTS=-Xmx1g -XX:MaxPermSize=256m -Dhttp.proxyHost=localhost -Dhttp.proxyPort=3128'
+ ANT_OPTS='-Xmx1g -XX:MaxPermSize=256m -Dhttp.proxyHost=localhost -Dhttp.proxyPort=3128'
+ cd /data/hive-ptest/working/
+ tee /data/hive-ptest/logs/PreCommit-HIVE-Build-731/source-prep.txt
+ mkdir -p maven ivy
+ [[ svn = \s\v\n ]]
+ [[ -n '' ]]
+ [[ -d apache-svn-trunk-source ]]
+ [[ ! -d apache-svn-trunk-source/.svn ]]
+ [[ ! -d apache-svn-trunk-source ]]
+ cd apache-svn-trunk-source
+ svn revert -R .
Reverted 'data/files/datatypes.txt'
Reverted 'serde/src/java/org/apache/hadoop/hive/serde2/lazy/LazyUtils.java'
Reverted 'serde/src/java/org/apache/hadoop/hive/serde2/lazy/LazyFactory.java'
Reverted 'serde/src/java/org/apache/hadoop/hive/serde2/lazy/objectinspector/primitive/LazyPrimitiveObjectInspectorFactory.java'
Reverted 'serde/src/java/org/apache/hadoop/hive/serde2/binarysortable/BinarySortableSerDe.java'
Reverted 'serde/src/java/org/apache/hadoop/hive/serde2/lazybinary/LazyBinaryUtils.java'
Reverted 'serde/src/java/org/apache/hadoop/hive/serde2/lazybinary/LazyBinarySerDe.java'
Reverted 'serde/src/java/org/apache/hadoop/hive/serde2/lazybinary/LazyBinaryFactory.java'
Reverted 'serde/src/java/org/apache/hadoop/hive/serde2/typeinfo/TypeInfoFactory.java'
Reverted 'serde/src/java/org/apache/hadoop/hive/serde2/typeinfo/ParameterizedPrimitiveTypeUtils.java'
Reverted 'serde/src/java/org/apache/hadoop/hive/serde2/typeinfo/TypeInfo.java'
Reverted 'serde/src/java/org/apache/hadoop/hive/serde2/typeinfo/TypeInfoUtils.java'
Reverted 'serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/ObjectInspectorConverters.java'
Reverted 'serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/PrimitiveObjectInspector.java'
Reverted 'serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/ObjectInspectorUtils.java'
Reverted 'serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/PrimitiveObjectInspectorUtils.java'
Reverted 'serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/PrimitiveObjectInspectorConverter.java'
Reverted 'serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/PrimitiveObjectInspectorFactory.java'
Reverted 'serde/src/java/org/apache/hadoop/hive/serde2/SerDeUtils.java'
Reverted 'serde/src/java/org/apache/hadoop/hive/serde2/io/DoubleWritable.java'
Reverted 'serde/src/java/org/apache/hadoop/hive/serde2/avro/AvroObjectInspectorGenerator.java'
Reverted 'serde/src/gen/thrift/gen-py/org_apache_hadoop_hive_serde/constants.py'
Reverted 'serde/src/gen/thrift/gen-cpp/serde_constants.cpp'
Reverted 'serde/src/gen/thrift/gen-cpp/serde_constants.h'
Reverted 'serde/src/gen/thrift/gen-rb/serde_constants.rb'
Reverted 'serde/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/serde/test/ThriftTestObj.java'
Reverted 'serde/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/serde/serdeConstants.java'
Reverted 'serde/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/serde2/thrift/test/Complex.java'
Reverted 'serde/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/serde2/thrift/test/MegaStruct.java'
Reverted 'serde/src/gen/thrift/gen-php/org/apache/hadoop/hive/serde/Types.php'
Reverted 'serde/if/serde.thrift'
Reverted 'ql/src/test/org/apache/hadoop/hive/ql/exec/TestFunctionRegistry.java'
Reverted 'ql/src/java/org/apache/hadoop/hive/ql/plan/CreateTableDesc.java'
Reverted 'ql/src/java/org/apache/hadoop/hive/ql/plan/ExprNodeConstantDesc.java'
Reverted 'ql/src/java/org/apache/hadoop/hive/ql/parse/TypeCheckProcFactory.java'
Reverted 'ql/src/java/org/apache/hadoop/hive/ql/parse/HiveParser.g'
Reverted 'ql/src/java/org/apache/hadoop/hive/ql/parse/HiveLexer.g'
Reverted 'ql/src/java/org/apache/hadoop/hive/ql/parse/BaseSemanticAnalyzer.java'
Reverted 'ql/src/java/org/apache/hadoop/hive/ql/parse/ParseUtils.java'
Reverted 'ql/src/java/org/apache/hadoop/hive/ql/parse/DDLSemanticAnalyzer.java'
Reverted 'ql/src/java/org/apache/hadoop/hive/ql/exec/FunctionRegistry.java'
Reverted 'ql/src/java/org/apache/hadoop/hive/ql/udf/GenericUDFEncode.java'
Reverted 'ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFStringToMap.java'
Reverted 'ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDAFComputeStats.java'
Reverted 'ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFUtils.java'
Reverted 'ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFToDate.java'
Reverted 'ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFConcatWS.java'
Reverted 'ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFBaseCompare.java'
Reverted 'ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFReflect2.java'
Reverted 'ql/src/java/org/apache/hadoop/hive/ql/udf/UDFToString.java'
++ awk '{print $2}'
++ egrep -v '^X|^Performing status on external'
++ svn status --no-ignore
+ rm -rf build data/files/vc1.txt hcatalog/build hcatalog/core/build hcatalog/storage-handlers/hbase/build hcatalog/server-extensions/build hcatalog/webhcat/svr/build hcatalog/webhcat/java-client/build hcatalog/hcatalog-pig-adapter/build common/src/gen common/src/test/org/apache/hadoop/hive/common/type common/src/java/org/apache/hadoop/hive/common/type/HiveVarchar.java common/src/java/org/apache/hadoop/hive/common/type/HiveBaseChar.java serde/src/test/org/apache/hadoop/hive/serde2/typeinfo serde/src/java/org/apache/hadoop/hive/serde2/lazy/LazyHiveVarchar.java serde/src/java/org/apache/hadoop/hive/serde2/lazy/objectinspector/primitive/LazyHiveVarcharObjectInspector.java serde/src/java/org/apache/hadoop/hive/serde2/lazybinary/LazyBinaryHiveVarchar.java serde/src/java/org/apache/hadoop/hive/serde2/typeinfo/VarcharTypeParams.java serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/SettableHiveVarcharObjectInspector.java serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/HiveVarcharObjectInspector.java serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/JavaHiveVarcharObjectInspector.java serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/WritableHiveVarcharObjectInspector.java serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/WritableConstantHiveVarcharObjectInspector.java serde/src/java/org/apache/hadoop/hive/serde2/io/HiveVarcharWritable.java ql/src/test/results/clientnegative/invalid_varchar_length_3.q.out ql/src/test/results/clientnegative/invalid_varchar_length_1.q.out ql/src/test/results/clientnegative/invalid_varchar_length_2.q.out ql/src/test/results/clientpositive/varchar_union1.q.out ql/src/test/results/clientpositive/varchar_cast.q.out ql/src/test/results/clientpositive/alter_varchar1.q.out ql/src/test/results/clientpositive/varchar_udf1.q.out ql/src/test/results/clientpositive/varchar_2.q.out ql/src/test/results/clientpositive/partition_varchar1.q.out ql/src/test/results/clientpositive/varchar_nested_types.q.out ql/src/test/results/clientpositive/varchar_join1.q.out ql/src/test/results/clientpositive/varchar_comparison.q.out ql/src/test/results/clientpositive/ctas_varchar.q.out ql/src/test/results/clientpositive/varchar_1.q.out ql/src/test/queries/clientnegative/invalid_varchar_length_1.q ql/src/test/queries/clientnegative/invalid_varchar_length_2.q ql/src/test/queries/clientnegative/invalid_varchar_length_3.q ql/src/test/queries/clientpositive/varchar_cast.q ql/src/test/queries/clientpositive/varchar_join1.q ql/src/test/queries/clientpositive/alter_varchar1.q ql/src/test/queries/clientpositive/varchar_1.q ql/src/test/queries/clientpositive/partition_varchar1.q ql/src/test/queries/clientpositive/varchar_comparison.q ql/src/test/queries/clientpositive/ctas_varchar.q ql/src/test/queries/clientpositive/varchar_2.q ql/src/test/queries/clientpositive/varchar_nested_types.q ql/src/test/queries/clientpositive/varchar_udf1.q ql/src/test/queries/clientpositive/varchar_union1.q ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFToVarchar.java
+ svn update

Fetching external item into 'hcatalog/src/test/e2e/harness'
External at revision 1523203.

At revision 1523203.
+ patchCommandPath=/data/hive-ptest/working/scratch/smart-apply-patch.sh
+ patchFilePath=/data/hive-ptest/working/scratch/build.patch
+ [[ -f /data/hive-ptest/working/scratch/build.patch ]]
+ chmod +x /data/hive-ptest/working/scratch/smart-apply-patch.sh
+ /data/hive-ptest/working/scratch/smart-apply-patch.sh /data/hive-ptest/working/scratch/build.patch
The patch does not appear to apply with p0 to p2
+ exit 1
'
{noformat}

This message is automatically generated., Thinking more about this. I think better approach here is to never do encoding or decoding in serdes. Further, on second thought even serde properties doesnt look like a good idea. I think, serdes should never deal with encoding, they should just read raw bytes. If user has data in some specific encoding which he wants to decode, he should be using a udf (which we already have in our software)., So you are asking not to decode/encode by default. Give the raw bytes.
In this case, we need to just remove the conditional decoding, right?

Will it break any backward compatibility?


, yup.. No default decoding. Just remove conditional decoding. This will break backward compat, but user can just use udf to get the desired behavior. We currently we have a bug, I don't think there is any advantage of being backward-bug-compatible. That is just backwards : ), ok. I will update the patch., Updated with Ashutosh's comment., We can wait for HiveQA but it looks like a test in TestLazySimpleSerDe might fail as it's encoding base 64 data and expecting it to be decoded?

One more question, which perhaps isn't related, but it looks like LazyUtils.writePrimitiveUTF8 is also encoding data as Base64.  Thinking about it... doesn't Lazy Serde have to use base64 to store BINARY data?, bq. doesn't Lazy Serde have to use base64 to store BINARY data?

meaning when dealing with text files isn't base64 required for BINARY., 

{color:red}Overall{color}: -1 at least one tests failed

Here are the results of testing the latest attachment:
https://issues.apache.org/jira/secure/attachment/12611731/HIVE-5221.2.patch

{color:red}ERROR:{color} -1 due to 16 failed/errored test(s), 4551 tests executed
*Failed tests:*
{noformat}
org.apache.hadoop.hive.cli.TestCliDriver.testCliDriver_ba_table1
org.apache.hadoop.hive.cli.TestCliDriver.testCliDriver_ba_table2
org.apache.hadoop.hive.cli.TestCliDriver.testCliDriver_ba_table3
org.apache.hadoop.hive.cli.TestCliDriver.testCliDriver_ba_table_udfs
org.apache.hadoop.hive.cli.TestCliDriver.testCliDriver_ba_table_union
org.apache.hadoop.hive.cli.TestCliDriver.testCliDriver_binary_table_bincolserde
org.apache.hadoop.hive.cli.TestCliDriver.testCliDriver_binary_table_colserde
org.apache.hadoop.hive.cli.TestCliDriver.testCliDriver_compute_stats_binary
org.apache.hadoop.hive.cli.TestCliDriver.testCliDriver_load_binary_data
org.apache.hadoop.hive.cli.TestCliDriver.testCliDriver_udf_printf
org.apache.hadoop.hive.cli.TestCliDriver.testCliDriver_udf_reflect2
org.apache.hadoop.hive.cli.TestCliDriver.testCliDriver_udf_substr
org.apache.hadoop.hive.serde2.lazy.TestLazyPrimitive.testLazyBinary
org.apache.hcatalog.pig.TestHCatStorer.testStoreFuncAllSimpleTypes
org.apache.hive.hcatalog.pig.TestHCatStorer.testStoreFuncAllSimpleTypes
org.apache.hive.jdbc.TestJdbcDriver2.testDataTypes
{noformat}

Test results: http://bigtop01.cloudera.org:8080/job/PreCommit-HIVE-Build/134/testReport
Console output: http://bigtop01.cloudera.org:8080/job/PreCommit-HIVE-Build/134/console

Messages:
{noformat}
Executing org.apache.hive.ptest.execution.PrepPhase
Executing org.apache.hive.ptest.execution.ExecutionPhase
Executing org.apache.hive.ptest.execution.ReportingPhase
Tests failed with: TestsFailedException: 16 tests failed
{noformat}

This message is automatically generated.

ATTACHMENT ID: 12611731, [~brocknoland] I think you have a valid point. I think we should do same on write side as we are now doing on read side, ie if user wants to store binary data in text file (which is weird, but anyways) he need to use an udf to encode it before passing it to serde. Than, we are consistent on both read and write side, asking user to use appropriate udfs for encoding/decoding and setting serde free from any assumptions.
[~kamrul] Can you make changes in LazyUtils.writePrimitiveUtf8 so that it doesn't do any encoding?]