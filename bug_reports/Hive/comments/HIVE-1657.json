[Here is a usecase:
{noformat}
hive> select * from table1;
12      35
NULL    36
48      40
40      40
NULL    45
100     100

hive> select * from myinput1;
12      35
NULL    40
48      NULL
100     100

hive> SELECT * from table1 a RIGHT OUTER JOIN myinput1 b ON (a.value=b.value) LEFT OUTER JOIN table1 c ON (b.key=c.key);
NULL    40      48      40      NULL    NULL
NULL    40      40      40      NULL    NULL
12      35      12      35      12      35
48      NULL    NULL    NULL    48      40
100     100     100     100     100     100

{noformat}, I've confirmed this as a bug by comparing the behavior with MySQL.

{noformat}
mysql> select * from table1;
+------+------+
| k    | v    |
+------+------+
|   12 |   35 | 
| NULL |   36 | 
|   48 |   40 | 
|   40 |   40 | 
| NULL |   45 | 
|  100 |  100 | 
+------+------+
6 rows in set (0.00 sec)

mysql> select * from myinput1;
+------+------+
| k    | v    |
+------+------+
|   12 |   35 | 
| NULL |   40 | 
|   48 | NULL | 
|  100 |  100 | 
+------+------+
4 rows in set (0.00 sec)

mysql> select * from table1 a right outer join myinput1 b on (a.v=b.v) left outer join table1 c on (b.k=c.k);
+------+------+------+------+------+------+
| k    | v    | k    | v    | k    | v    |
+------+------+------+------+------+------+
|   12 |   35 |   12 |   35 |   12 |   35 | 
|   48 |   40 | NULL |   40 | NULL | NULL | 
|   40 |   40 | NULL |   40 | NULL | NULL | 
| NULL | NULL |   48 | NULL |   48 |   40 | 
|  100 |  100 |  100 |  100 |  100 |  100 | 
+------+------+------+------+------+------+
5 rows in set (0.00 sec)
{noformat}
, The problem is in generating "select \*" plan. Currently, select \* looks at the row resolver of the previous operator and adds all the columns to the output. Instead, it should add them in the order of aliases/table-names specified in the query., Here is a patch to add the output columns for select plan in the order of aliases specified in the query., +1

The changes look good - will commit if the tests pass, Committed. Thanks Amareshwari]