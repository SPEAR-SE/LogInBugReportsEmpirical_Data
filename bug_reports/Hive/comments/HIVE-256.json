[can you give a description of the bug? How is it triggered?, where is the aggrPositions variable used? Seems like it is not used anywhere..., It is used to keep track of the aggregation classes using variable length fields. There were few bugs there, which were getting hidden because the reflection API getFields() only shows public fields, whereas getDeclaredFields() shows all fields.

For example, max has a string variable whose size is not fixed, it is sampled at runtime, got it..

+1

Running tests now and will check in if everything passes.
, is this the source of the count(1) issue?, yes, ran that on the production successfully, committed. Thanks Namit!!, man - the commits are fast! 

i had some questions:

Curious - 

-    if ((numEntries % NUMROWSESTIMATESIZE) == 0) {
+    if ((numEntriesHashTable == 0) || ((numEntries % NUMROWSESTIMATESIZE) == 0)) {

Guessing this was the critical change - but couldn't follow how numEntriesHashTable could ever be 0 without numEntries being 0 as well.

Also - I couldn't understand this code fragment (quoting the old code since it doesn't matter):

      Field[] fArr = agg.getFields();
      for (Field f : fArr) 
        fixedRowSize += getSize(i, agg, f);

the getSize() call doesn't even look at the Field - it seems to base it's decision on the class type of agg - and I think will default to unknowntype (which is a whopping 256 bytes)?

(sorry - unrelated to this bug - just generally curious since looking at this code in detail for first time)

, From what Namit told me, there were 3 bugs:

1. aggrPositions was not being initialized so we were not tracking the variable length fields properly.
2. Instead of getFields he had to use getDeclaredFields as the former only gives public fields where as most of our fields are private.
3. The numEntries stuff which would not let the code kick in if there were less thatn NUMROWESTIMATESIZE of rows...

We had used 256 as a heuristic for unknown types..., the getSize() call ignores the field altogether. it looks at the aggregation class. the code seems to indicate that the intent was to sum up the sizes of the fields in the aggregation class - so something amiss there. perhaps we should just open a separate jira since the issue here is resolved.

ok - got it on the numEntries thing - seems like we never call shouldFlushed with hashsize of zero.]