[Thanks for the patch [~taoli-hwx]!
Some comments on 1.patch -
 * The 'final string' can be in the tryAcquireCompileLock method itself as they are not being referenced from anywhere else. Maybe we don't even need those variables, as they are just used once within the functions. Thats easier to read.
 * "a call to tryLock() will immediately acquire the lock if it is available, whether or not other threads are currently waiting for the lock. " https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/locks/ReentrantLock.html#tryLock(). Looks like  tryLock(0, TimeUnit.SECONDS) is the better call to make
 * Use SessionState.getConsole().logInfo instead of ol.writeOperationLog. I see that ol.writeOperationLog is being used at few other places, that should be cleaned up. SessionState.getConsole().* methods are used in almost all places for information . We can cleanup the usage of ol.writeOperationLog in a separate patch.
 *   LOG.debug(waitingForLockMsg + ": " + command)  can be removed once SessionState.getConsole().logInfo is used. It will print to the HS2 log as well.
 * If the 'waiting for lock' is printed, its useful to also have the 'acquired lock' message printed. How about replacing  LOG.debug(lockAcquiredMsg); with SessionState.getConsole().logInfo(lockAcquiredMsg) ?
, Thanks for your comments [~thejas].

Regarding #2, according to [doc|https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/locks/ReentrantLock.html#tryLock()] about tryLock, "If you want to honor the fairness setting for this lock, then use tryLock(0, TimeUnit.SECONDS) which is almost equivalent (it also detects interruption)." The only difference between tryLock() and tryLock(0, TimeUnit.SECONDS) is that the latter throws a InterruptionException. I don't think we really need to use tryLock(0, TimeUnit.SECONDS) except there is a convention there.

Regarding #5, I intentionally left out the "lock acquired" message to minimize the number of rows of messages before displaying the query result, since I think that's a little bit intrusive to the users. The original purpose of this change is to indicate the waiting status to the end users when the compilation task is waiting for the lock. So as long as we print out the waiting message, it should satisfy that purpose. In normal cases the query result should be displayed after lock is acquired, so I don't think the "lock acquired" message is really useful/necessary for the beeline users.

I will make changes based on other comments. They are good points.   , Regarding tryLock. tryLock() doesn't honor the waiting queue, ie it jumps in middle of the queue. So even if there are 10 other threads blocked on the lock call, a newer query might get the lock. Giving priority to ones that have been waiting longer would result in more predictable behavior for user.

Regagrding "lock acquired" message, for queries that don't immediately return results or print another message, the users (and hadoop admins) are likely to suspect that it is still stuck at waiting for lock. But it might be stuck somewhere else (maybe an issue with yarn for example).
Hopefully, the cases where query waits on the compile lock won't be that common.
, Regarding tryLock. tryLock() doesn't honor the waiting queue, ie it jumps in middle of the queue. So even if there are 10 other threads blocked on the lock call, a newer query might get the lock. Giving priority to ones that have been waiting longer would result in more predictable behavior for user.

Regagrding "lock acquired" message, for queries that don't immediately return results or print another message, the users (and hadoop admins) are likely to suspect that it is still stuck at waiting for lock. But it might be stuck somewhere else (maybe an issue with yarn for example).
Hopefully, the cases where query waits on the compile lock won't be that common.
, That makes sense. I will make the changes. Thanks!, Looks like the message pipe from HS to beeline client is broken (for master branch) and thus calling SessionState.getConsole().logInfo() does not result in any messages on beeline. So I will stick with the operational log for now., 

Here are the results of testing the latest attachment:
https://issues.apache.org/jira/secure/attachment/12819731/HIVE-14263.2.patch

{color:red}ERROR:{color} -1 due to no test(s) being added or modified.

{color:red}ERROR:{color} -1 due to 9 failed/errored test(s), 10342 tests executed
*Failed tests:*
{noformat}
TestMsgBusConnection - did not produce a TEST-*.xml file
org.apache.hadoop.hive.cli.TestCliDriver.testCliDriver_acid_globallimit
org.apache.hadoop.hive.cli.TestCliDriver.testCliDriver_stats_list_bucket
org.apache.hadoop.hive.cli.TestCliDriver.testCliDriver_subquery_multiinsert
org.apache.hadoop.hive.cli.TestMiniTezCliDriver.testCliDriver_acid_globallimit
org.apache.hadoop.hive.llap.daemon.impl.TestLlapTokenChecker.testCheckPermissions
org.apache.hadoop.hive.llap.daemon.impl.TestLlapTokenChecker.testGetToken
org.apache.hadoop.hive.metastore.TestMetaStoreMetrics.testConnections
org.apache.hadoop.hive.metastore.txn.TestCompactionTxnHandler.testRevokeTimedOutWorkers
{noformat}

Test results: https://builds.apache.org/job/PreCommit-HIVE-MASTER-Build/606/testReport
Console output: https://builds.apache.org/job/PreCommit-HIVE-MASTER-Build/606/console
Test logs: http://ec2-204-236-174-241.us-west-1.compute.amazonaws.com/logs/PreCommit-HIVE-MASTER-Build-606/

Messages:
{noformat}
Executing org.apache.hive.ptest.execution.TestCheckPhase
Executing org.apache.hive.ptest.execution.PrepPhase
Executing org.apache.hive.ptest.execution.ExecutionPhase
Executing org.apache.hive.ptest.execution.ReportingPhase
Tests exited with: TestsFailedException: 9 tests failed
{noformat}

This message is automatically generated.

ATTACHMENT ID: 12819731 - PreCommit-HIVE-MASTER-Build, The test failures are not related.
Thanks for the patch [~taoli-hwx]!
Patch committed to master and branch-2.1
, Thanks [~thejas] for the help!, [~taoli-hwx]
I think this would be useful for hive-1 as well. Can you please contribute a patch for hive1 ?
]