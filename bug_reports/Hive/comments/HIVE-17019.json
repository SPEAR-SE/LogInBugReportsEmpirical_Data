[

Here are the results of testing the latest attachment:
https://issues.apache.org/jira/secure/attachment/12875614/HIVE-17019.01.patch

{color:green}SUCCESS:{color} +1 due to 3 test(s) being added or modified.

{color:red}ERROR:{color} -1 due to 40 failed/errored test(s), 10498 tests executed
*Failed tests:*
{noformat}
org.apache.hadoop.hive.cli.TestBeeLineDriver.testCliDriver[insert_overwrite_local_directory_1] (batchId=237)
org.apache.hadoop.hive.cli.TestEncryptedHDFSCliDriver.org.apache.hadoop.hive.cli.TestEncryptedHDFSCliDriver (batchId=162)
org.apache.hadoop.hive.cli.TestEncryptedHDFSCliDriver.org.apache.hadoop.hive.cli.TestEncryptedHDFSCliDriver (batchId=163)
org.apache.hadoop.hive.cli.TestEncryptedHDFSCliDriver.org.apache.hadoop.hive.cli.TestEncryptedHDFSCliDriver (batchId=164)
org.apache.hadoop.hive.cli.TestEncryptedHDFSCliDriver.org.apache.hadoop.hive.cli.TestEncryptedHDFSCliDriver (batchId=165)
org.apache.hadoop.hive.cli.TestEncryptedHDFSCliDriver.org.apache.hadoop.hive.cli.TestEncryptedHDFSCliDriver (batchId=166)
org.apache.hadoop.hive.cli.TestMiniLlapCliDriver.org.apache.hadoop.hive.cli.TestMiniLlapCliDriver (batchId=139)
org.apache.hadoop.hive.cli.TestMiniLlapCliDriver.org.apache.hadoop.hive.cli.TestMiniLlapCliDriver (batchId=140)
org.apache.hadoop.hive.cli.TestMiniLlapCliDriver.org.apache.hadoop.hive.cli.TestMiniLlapCliDriver (batchId=141)
org.apache.hadoop.hive.cli.TestMiniLlapCliDriver.org.apache.hadoop.hive.cli.TestMiniLlapCliDriver (batchId=142)
org.apache.hadoop.hive.cli.TestMiniLlapCliDriver.org.apache.hadoop.hive.cli.TestMiniLlapCliDriver (batchId=143)
org.apache.hadoop.hive.cli.TestMiniLlapLocalCliDriver.testCliDriver[vector_if_expr] (batchId=145)
org.apache.hadoop.hive.cli.TestMiniSparkOnYarnCliDriver.org.apache.hadoop.hive.cli.TestMiniSparkOnYarnCliDriver (batchId=167)
org.apache.hadoop.hive.cli.TestMiniSparkOnYarnCliDriver.org.apache.hadoop.hive.cli.TestMiniSparkOnYarnCliDriver (batchId=168)
org.apache.hadoop.hive.cli.TestMiniSparkOnYarnCliDriver.org.apache.hadoop.hive.cli.TestMiniSparkOnYarnCliDriver (batchId=169)
org.apache.hadoop.hive.cli.TestMiniTezCliDriver.org.apache.hadoop.hive.cli.TestMiniTezCliDriver (batchId=98)
org.apache.hadoop.hive.cli.TestMiniTezCliDriver.org.apache.hadoop.hive.cli.TestMiniTezCliDriver (batchId=99)
org.apache.hadoop.hive.cli.TestMinimrCliDriver.org.apache.hadoop.hive.cli.TestMinimrCliDriver (batchId=86)
org.apache.hadoop.hive.cli.TestMinimrCliDriver.org.apache.hadoop.hive.cli.TestMinimrCliDriver (batchId=87)
org.apache.hadoop.hive.cli.TestNegativeMinimrCliDriver.org.apache.hadoop.hive.cli.TestNegativeMinimrCliDriver (batchId=91)
org.apache.hadoop.hive.cli.TestPerfCliDriver.org.apache.hadoop.hive.cli.TestPerfCliDriver (batchId=232)
org.apache.hadoop.hive.cli.TestSparkCliDriver.org.apache.hadoop.hive.cli.TestSparkCliDriver (batchId=102)
org.apache.hive.beeline.TestBeeLineWithArgs.org.apache.hive.beeline.TestBeeLineWithArgs (batchId=220)
org.apache.hive.hcatalog.api.TestHCatClient.testPartitionRegistrationWithCustomSchema (batchId=177)
org.apache.hive.hcatalog.api.TestHCatClient.testPartitionSpecRegistrationWithCustomSchema (batchId=177)
org.apache.hive.hcatalog.api.TestHCatClient.testTableSchemaPropagation (batchId=177)
org.apache.hive.hcatalog.hbase.TestPigHBaseStorageHandler.org.apache.hive.hcatalog.hbase.TestPigHBaseStorageHandler (batchId=230)
org.apache.hive.hcatalog.mapreduce.TestHCatMultiOutputFormat.org.apache.hive.hcatalog.mapreduce.TestHCatMultiOutputFormat (batchId=187)
org.apache.hive.hcatalog.mapreduce.TestHCatPartitionPublish.org.apache.hive.hcatalog.mapreduce.TestHCatPartitionPublish (batchId=182)
org.apache.hive.hcatalog.mapreduce.TestMultiOutputFormat.org.apache.hive.hcatalog.mapreduce.TestMultiOutputFormat (batchId=187)
org.apache.hive.jdbc.TestJdbcWithLocalClusterSpark.org.apache.hive.jdbc.TestJdbcWithLocalClusterSpark (batchId=226)
org.apache.hive.jdbc.TestJdbcWithMiniHA.org.apache.hive.jdbc.TestJdbcWithMiniHA (batchId=225)
org.apache.hive.jdbc.TestJdbcWithMiniLlap.org.apache.hive.jdbc.TestJdbcWithMiniLlap (batchId=226)
org.apache.hive.jdbc.TestMultiSessionsHS2WithLocalClusterSpark.org.apache.hive.jdbc.TestMultiSessionsHS2WithLocalClusterSpark (batchId=226)
org.apache.hive.jdbc.TestSchedulerQueue.testFairSchedulerPrimaryQueueMapping (batchId=229)
org.apache.hive.jdbc.TestSchedulerQueue.testFairSchedulerQueueMapping (batchId=229)
org.apache.hive.jdbc.TestSchedulerQueue.testFairSchedulerSecondaryQueueMapping (batchId=229)
org.apache.hive.jdbc.TestSchedulerQueue.testQueueMappingCheckDisabled (batchId=229)
org.apache.hive.service.TestHS2ImpersonationWithRemoteMS.org.apache.hive.service.TestHS2ImpersonationWithRemoteMS (batchId=222)
org.apache.hive.service.cli.operation.TestOperationLoggingAPIWithTez.org.apache.hive.service.cli.operation.TestOperationLoggingAPIWithTez (batchId=221)
{noformat}

Test results: https://builds.apache.org/job/PreCommit-HIVE-Build/5880/testReport
Console output: https://builds.apache.org/job/PreCommit-HIVE-Build/5880/console
Test logs: http://104.198.109.242/logs/PreCommit-HIVE-Build-5880/

Messages:
{noformat}
Executing org.apache.hive.ptest.execution.TestCheckPhase
Executing org.apache.hive.ptest.execution.PrepPhase
Executing org.apache.hive.ptest.execution.ExecutionPhase
Executing org.apache.hive.ptest.execution.ReportingPhase
Tests exited with: TestsFailedException: 40 tests failed
{noformat}

This message is automatically generated.

ATTACHMENT ID: 12875614 - PreCommit-HIVE-Build, Thanks for posting the patch. Will be useful to get relevant data for a query.
- Change the top level package from llap-debug to tez-debug? (Works with both I believe) [~ashutoshc], [~thejas] - any recommendations on whether the code gets a top level module, or goes under an existing module. This allows downloading of various debug artifacts for a tez job - logs, metrics for llap, hiveserver2 logs (soon), tez am logs, ATS data for the query (hive and tez).
- In the new pom.xml, dependency on hive-llap-server. 1) Is it required?, 2) Will need to exclude some dependent artifacts. See service/pom.xml llap-server dependency handling
- LogDownloadServlet - Should this throw an error as soon as the filename pattern validation fails?
- LogDownloadServlet - change to dagId/queryId validation instead
- LogDownloadServlet - thread being created inside of the request handler? This should be limited outside of the request? so that only a controlled number of parallel artifact downloads can run.
- LogDownloadServlet - what happens in case of aggregator failure? Exception back to the user?
- LogDownloadServlet - seems to be generating the file to disk and then streaming it over. Can this be streamed over directly instead. Otherwise there's the possibility of leaking files. (Artifact.downloadIntoStream or some such?) Guessing this is complicated further by the multi-threaded artifact downloader.
Alternately need to have a cleanup mechanism. 
- Timeout on the tests
- Apache header needs to be added to files where it is missing.
- Main - Please rename to something more indicative of what the tool does.
- Main - Likely a follow up jira - parse using a standard library, instead of trying to parse the arguments to main directly.
- Server - Enabling the artifact should be controlled via a config. Does not always need to be hosted in HS2 (Default disabled, at least till security can be sorted out)
- Is it possible to support a timeout on the downloads? (Can be a follow up jira)
- ArtifactAggregator - I believe this does 2 stages of dependent artifacts / downloads? Stage1 - download whatever it can. Information from this should should be adequate for stage2 downloads ?
- For the ones not implemented yet (DummyArtifact) - think it's better to just comment out the code, instead of invoking the DummyArtifacts downloader
- Security - ACL enforcement required on secure clusters to make sure users can only download what they have access to. This is a must fix before this can be enabled by default.
- Security - this can work around yarn restrictions on log downloads, since the files are being accessed by the hive user.
Could you please add some details on cluster testing., Thanks [~sseth].

- Change the top level package from llap-debug to tez-debug? (Works with both I believe) [~ashutoshc], [~thejas] - any recommendations on whether the code gets a top level module, or goes under an existing module. This allows downloading of various debug artifacts for a tez job - logs, metrics for llap, hiveserver2 logs (soon), tez am logs, ATS data for the query (hive and tez).

Will change the directory.

- In the new pom.xml, dependency on hive-llap-server. 1) Is it required?, 2) Will need to exclude some dependent artifacts. See service/pom.xml llap-server dependency handling

The llap status is fetched using LlapStatusServiceDriver which is part of hive-llap-server.

- LogDownloadServlet - Should this throw an error as soon as the filename pattern validation fails?

The filename check is to prevent any injection attack into the file name/http header, not to validate the id.

- LogDownloadServlet - change to dagId/queryId validation instead

Can do, but it will be sensitive to changes to the id format. Currently its passed down to ATS and nothing will be retrieved for it.

- LogDownloadServlet - thread being created inside of the request handler? This should be limited outside of the request? so that only a controlled number of parallel artifact downloads can run.

Creating a shared executor, does it make sense to use Guava's direct executor, which will schedule task in current thread.

- LogDownloadServlet - what happens in case of aggregator failure? Exception back to the user?

Jetty will handle the exception, returning 500 to the user. Not sure if exception trace is part of it. Will try and see.

- LogDownloadServlet - seems to be generating the file to disk and then streaming it over. Can this be streamed over directly instead. Otherwise there's the possibility of leaking files. (Artifact.downloadIntoStream or some such?) Guessing this is complicated further by the multi-threaded artifact downloader.
Alternately need to have a cleanup mechanism.

For streaming directly, it would not be possible because of multithreading. If its single threaded then I can use a ZipOutputStream and add entry one at a time.

Oops, sorry the finally got moved down since aggregator had to be closed before streaming the file. I'll handle it using a try finally to cleanup.

- Timeout on the tests

Setting timeouts on tests.

- Apache header needs to be added to files where it is missing.

Sorry, will add the licence header to all files.

- Main - Please rename to something more indicative of what the tool does.

I was planning to remove this and integrate with hive cli, --service <download_logs>. This does not work without lot of classpath fixes, or I'll have to create a script to add hive jars.

- Main - Likely a follow up jira - parse using a standard library, instead of trying to parse the arguments to main directly.

Will check a few libs, apache commons OptionBuilder uses a static instance in its builder. Should be ok, for a cli based invoke once app, but will look at something better on lines of python argparse.

- Server - Enabling the artifact should be controlled via a config. Does not always need to be hosted in HS2 (Default disabled, at least till security can be sorted out)

I'll add a config.

- Is it possible to support a timeout on the downloads? (Can be a follow up jira)

Sure, will do. Global or per download or both?

- ArtifactAggregator - I believe this does 2 stages of dependent artifacts / downloads? Stage1 - download whatever it can. Information from this should should be adequate for stage2 downloads ?

It could be more stages:
Ex: given dag_id
stage 1: will fetch tez ats info which is used to extract hive id, task container/node list.
stage 2: will fetch hive ats info, tez container log list.
stage 3: llap containers log list, tez task logs.
stage 4: llap container logs.

aggregator iterates through the list of sources and finds those which can download using info in the params.
It schedules the sources and waits for them to complete everything and the repeats.
Stop if no new sources could download or all sources are exhausted.


- For the ones not implemented yet (DummyArtifact) - think it's better to just comment out the code, instead of invoking the DummyArtifacts downloader

Sorry, will do.

- Security - ACL enforcement required on secure clusters to make sure users can only download what they have access to. This is a must fix before this can be enabled by default.

Working on this.

- Security - this can work around yarn restrictions on log downloads, since the files are being accessed by the hive user.

Yes this should work.

Could you please add some details on cluster testing.

I'll add another comment with the details of testing.
, bq. The llap status is fetched using LlapStatusServiceDriver which is part of hive-llap-server.
OK. llap-status should really be under it's own module. Anyway, that can be changed later. Another alternate is to have llap-status hosted as a webservice. That can happen in a follow up. Would be really good to skip the llap-server dependency, which in turn pulls in a lot of others.

bq. Creating a shared executor, does it make sense to use Guava's direct executor, which will schedule task in current thread.
Sure. It could just be done inline otherwise? The main question is how the total number of downloads are restricted. Restricting the number of handlers on the web interface does not help, since that serves out a lot more than download debug artifacts.

bq. For streaming directly, it would not be possible because of multithreading. If its single threaded then I can use a ZipOutputStream and add entry one at a time.
Think this is ok as long as files are cleaned up. May want to cap file sizes as well, since logs can get really large.

bq. I was planning to remove this and integrate with hive cli, --service <download_logs>. This does not work without lot of classpath fixes, or I'll have to create a script to add hive jars.
Sounds good.

bq. Will check a few libs, apache commons OptionBuilder uses a static instance in its builder. Should be ok, for a cli based invoke once app, but will look at something better on lines of python argparse.
Sounds good. Maybe in a follow up jira to get this in faster?

bq. Sure, will do. Global or per download or both?
Global, defined by the server.

bq. Stop if no new sources could download or all sources are exhausted.
Sounds good. I misread the code, sorry.

bq. Jetty will handle the exception, returning 500 to the user. Not sure if exception trace is part of it. Will try and see.
Think this is ok as long as the error has enough information to let the user know what happened.



, * Addressing review comments from [~sseth]
* Adding a new service to hive --service command.
* Adding support to download and check acls., 

Here are the results of testing the latest attachment:
https://issues.apache.org/jira/secure/attachment/12877805/HIVE-17019.02.patch

{color:green}SUCCESS:{color} +1 due to 3 test(s) being added or modified.

{color:red}ERROR:{color} -1 due to 41 failed/errored test(s), 10737 tests executed
*Failed tests:*
{noformat}
TestSSL - did not produce a TEST-*.xml file (likely timed out) (batchId=225)
org.apache.hadoop.hive.cli.TestBeeLineDriver.testCliDriver[insert_overwrite_local_directory_1] (batchId=239)
org.apache.hadoop.hive.cli.TestEncryptedHDFSCliDriver.org.apache.hadoop.hive.cli.TestEncryptedHDFSCliDriver (batchId=162)
org.apache.hadoop.hive.cli.TestEncryptedHDFSCliDriver.org.apache.hadoop.hive.cli.TestEncryptedHDFSCliDriver (batchId=163)
org.apache.hadoop.hive.cli.TestEncryptedHDFSCliDriver.org.apache.hadoop.hive.cli.TestEncryptedHDFSCliDriver (batchId=164)
org.apache.hadoop.hive.cli.TestEncryptedHDFSCliDriver.org.apache.hadoop.hive.cli.TestEncryptedHDFSCliDriver (batchId=165)
org.apache.hadoop.hive.cli.TestEncryptedHDFSCliDriver.org.apache.hadoop.hive.cli.TestEncryptedHDFSCliDriver (batchId=166)
org.apache.hadoop.hive.cli.TestMiniLlapCliDriver.org.apache.hadoop.hive.cli.TestMiniLlapCliDriver (batchId=139)
org.apache.hadoop.hive.cli.TestMiniLlapCliDriver.org.apache.hadoop.hive.cli.TestMiniLlapCliDriver (batchId=140)
org.apache.hadoop.hive.cli.TestMiniLlapCliDriver.org.apache.hadoop.hive.cli.TestMiniLlapCliDriver (batchId=141)
org.apache.hadoop.hive.cli.TestMiniLlapCliDriver.org.apache.hadoop.hive.cli.TestMiniLlapCliDriver (batchId=142)
org.apache.hadoop.hive.cli.TestMiniLlapCliDriver.org.apache.hadoop.hive.cli.TestMiniLlapCliDriver (batchId=143)
org.apache.hadoop.hive.cli.TestMiniLlapLocalCliDriver.testCliDriver[vector_if_expr] (batchId=145)
org.apache.hadoop.hive.cli.TestMiniSparkOnYarnCliDriver.org.apache.hadoop.hive.cli.TestMiniSparkOnYarnCliDriver (batchId=167)
org.apache.hadoop.hive.cli.TestMiniSparkOnYarnCliDriver.org.apache.hadoop.hive.cli.TestMiniSparkOnYarnCliDriver (batchId=168)
org.apache.hadoop.hive.cli.TestMiniSparkOnYarnCliDriver.org.apache.hadoop.hive.cli.TestMiniSparkOnYarnCliDriver (batchId=169)
org.apache.hadoop.hive.cli.TestMiniSparkOnYarnCliDriver.org.apache.hadoop.hive.cli.TestMiniSparkOnYarnCliDriver (batchId=170)
org.apache.hadoop.hive.cli.TestMiniTezCliDriver.org.apache.hadoop.hive.cli.TestMiniTezCliDriver (batchId=98)
org.apache.hadoop.hive.cli.TestMiniTezCliDriver.org.apache.hadoop.hive.cli.TestMiniTezCliDriver (batchId=99)
org.apache.hadoop.hive.cli.TestMinimrCliDriver.org.apache.hadoop.hive.cli.TestMinimrCliDriver (batchId=86)
org.apache.hadoop.hive.cli.TestMinimrCliDriver.org.apache.hadoop.hive.cli.TestMinimrCliDriver (batchId=87)
org.apache.hadoop.hive.cli.TestNegativeMinimrCliDriver.org.apache.hadoop.hive.cli.TestNegativeMinimrCliDriver (batchId=91)
org.apache.hadoop.hive.cli.TestPerfCliDriver.org.apache.hadoop.hive.cli.TestPerfCliDriver (batchId=234)
org.apache.hive.beeline.TestBeeLineWithArgs.org.apache.hive.beeline.TestBeeLineWithArgs (batchId=222)
org.apache.hive.hcatalog.api.TestHCatClient.testPartitionRegistrationWithCustomSchema (batchId=178)
org.apache.hive.hcatalog.api.TestHCatClient.testPartitionSpecRegistrationWithCustomSchema (batchId=178)
org.apache.hive.hcatalog.api.TestHCatClient.testTableSchemaPropagation (batchId=178)
org.apache.hive.hcatalog.hbase.TestPigHBaseStorageHandler.org.apache.hive.hcatalog.hbase.TestPigHBaseStorageHandler (batchId=232)
org.apache.hive.hcatalog.mapreduce.TestHCatMultiOutputFormat.org.apache.hive.hcatalog.mapreduce.TestHCatMultiOutputFormat (batchId=188)
org.apache.hive.hcatalog.mapreduce.TestHCatPartitionPublish.org.apache.hive.hcatalog.mapreduce.TestHCatPartitionPublish (batchId=183)
org.apache.hive.hcatalog.mapreduce.TestMultiOutputFormat.org.apache.hive.hcatalog.mapreduce.TestMultiOutputFormat (batchId=188)
org.apache.hive.jdbc.TestJdbcWithLocalClusterSpark.org.apache.hive.jdbc.TestJdbcWithLocalClusterSpark (batchId=228)
org.apache.hive.jdbc.TestJdbcWithMiniHA.org.apache.hive.jdbc.TestJdbcWithMiniHA (batchId=227)
org.apache.hive.jdbc.TestJdbcWithMiniLlap.org.apache.hive.jdbc.TestJdbcWithMiniLlap (batchId=228)
org.apache.hive.jdbc.TestMultiSessionsHS2WithLocalClusterSpark.org.apache.hive.jdbc.TestMultiSessionsHS2WithLocalClusterSpark (batchId=228)
org.apache.hive.jdbc.TestSchedulerQueue.testFairSchedulerPrimaryQueueMapping (batchId=231)
org.apache.hive.jdbc.TestSchedulerQueue.testFairSchedulerQueueMapping (batchId=231)
org.apache.hive.jdbc.TestSchedulerQueue.testFairSchedulerSecondaryQueueMapping (batchId=231)
org.apache.hive.jdbc.TestSchedulerQueue.testQueueMappingCheckDisabled (batchId=231)
org.apache.hive.service.TestHS2ImpersonationWithRemoteMS.org.apache.hive.service.TestHS2ImpersonationWithRemoteMS (batchId=224)
org.apache.hive.service.cli.operation.TestOperationLoggingAPIWithTez.org.apache.hive.service.cli.operation.TestOperationLoggingAPIWithTez (batchId=223)
{noformat}

Test results: https://builds.apache.org/job/PreCommit-HIVE-Build/6073/testReport
Console output: https://builds.apache.org/job/PreCommit-HIVE-Build/6073/console
Test logs: http://104.198.109.242/logs/PreCommit-HIVE-Build-6073/

Messages:
{noformat}
Executing org.apache.hive.ptest.execution.TestCheckPhase
Executing org.apache.hive.ptest.execution.PrepPhase
Executing org.apache.hive.ptest.execution.ExecutionPhase
Executing org.apache.hive.ptest.execution.ReportingPhase
Tests exited with: TestsFailedException: 41 tests failed
{noformat}

This message is automatically generated.

ATTACHMENT ID: 12877805 - PreCommit-HIVE-Build, Investigating test case failures, one of them seem to be because of guice version mismatch., Downgrading guice version to 3.0., 

Here are the results of testing the latest attachment:
https://issues.apache.org/jira/secure/attachment/12877960/HIVE-17019.03.patch

{color:green}SUCCESS:{color} +1 due to 3 test(s) being added or modified.

{color:red}ERROR:{color} -1 due to 17 failed/errored test(s), 11084 tests executed
*Failed tests:*
{noformat}
org.apache.hadoop.hive.cli.TestBeeLineDriver.testCliDriver[create_merge_compressed] (batchId=239)
org.apache.hadoop.hive.cli.TestBeeLineDriver.testCliDriver[insert_overwrite_local_directory_1] (batchId=239)
org.apache.hadoop.hive.cli.TestBeeLineDriver.testCliDriver[smb_mapjoin_1] (batchId=239)
org.apache.hadoop.hive.cli.TestMiniLlapCliDriver.testCliDriver[llap_smb] (batchId=143)
org.apache.hadoop.hive.cli.TestMiniLlapLocalCliDriver.testCliDriver[vector_if_expr] (batchId=145)
org.apache.hadoop.hive.cli.TestMiniSparkOnYarnCliDriver.testCliDriver[spark_dynamic_partition_pruning] (batchId=167)
org.apache.hadoop.hive.cli.TestMiniSparkOnYarnCliDriver.testCliDriver[spark_dynamic_partition_pruning_2] (batchId=169)
org.apache.hadoop.hive.cli.TestMiniSparkOnYarnCliDriver.testCliDriver[spark_explainuser_1] (batchId=168)
org.apache.hadoop.hive.cli.TestMiniSparkOnYarnCliDriver.testCliDriver[spark_use_op_stats] (batchId=167)
org.apache.hadoop.hive.cli.TestMiniSparkOnYarnCliDriver.testCliDriver[spark_use_ts_stats_for_mapjoin] (batchId=168)
org.apache.hadoop.hive.cli.TestMiniSparkOnYarnCliDriver.testCliDriver[spark_vectorized_dynamic_partition_pruning] (batchId=167)
org.apache.hadoop.hive.cli.TestPerfCliDriver.testCliDriver[query14] (batchId=234)
org.apache.hadoop.hive.cli.TestPerfCliDriver.testCliDriver[query23] (batchId=234)
org.apache.hive.hcatalog.api.TestHCatClient.testPartitionRegistrationWithCustomSchema (batchId=178)
org.apache.hive.hcatalog.api.TestHCatClient.testPartitionSpecRegistrationWithCustomSchema (batchId=178)
org.apache.hive.hcatalog.api.TestHCatClient.testTableSchemaPropagation (batchId=178)
org.apache.hive.service.cli.session.TestSessionManagerMetrics.testAbandonedSessionMetrics (batchId=194)
{noformat}

Test results: https://builds.apache.org/job/PreCommit-HIVE-Build/6086/testReport
Console output: https://builds.apache.org/job/PreCommit-HIVE-Build/6086/console
Test logs: http://104.198.109.242/logs/PreCommit-HIVE-Build-6086/

Messages:
{noformat}
Executing org.apache.hive.ptest.execution.TestCheckPhase
Executing org.apache.hive.ptest.execution.PrepPhase
Executing org.apache.hive.ptest.execution.ExecutionPhase
Executing org.apache.hive.ptest.execution.ReportingPhase
Tests exited with: TestsFailedException: 17 tests failed
{noformat}

This message is automatically generated.

ATTACHMENT ID: 12877960 - PreCommit-HIVE-Build, Re-looked at the patch. Mostly looks good. Some comments and questions.
- How is the context set up for LogDownloadServlet. e.g.CONF_LOG_DOWNLODER_NUM_EXECUTORS. The config should likely be set up in HiveConf in some way.
- init for the servlet will happen once at startup? So if there's multiple requests to download, and the limit is hit, all webserver threads will block? Should we just return an error if there's too many parallel downloads, so that other parts of the UI continue to be functional.
- In terms of the security - this becomes interesting. Essentially says that the feature will only work if authentication is enabled on secure clusters.
- Timeout for the downloads as a separate jira?
- Are any credentials required on the HttpClient created to download artifacts from various end points?
- For Constants like TIMELINE_PATH_PREFIX - any chance YARN has a helper method? Otherwise we should file a jira to ask yarn to expose such utilities.
- Both dagId and queryId cannot be specified at the same time?
]