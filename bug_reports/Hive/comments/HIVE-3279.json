[bq. There's an issue though, because Table.getEmptyTable initializes cols to an empty array, which of course is not null, causing the above feature to not work as expected.

I am not sure if this really is the case.
{code}
hive> create table tt (a string) partitioned by (b string);
OK
Time taken: 7.907 seconds
hive> describe tt ;                     
OK
a	string	
b	string	
Time taken: 0.073 seconds
hive> alter table tt add partition(b='part1');
OK
Time taken: 0.848 seconds
hive> describe tt partition (b='part1');          
OK
a	string	
b	string	
Time taken: 0.071 seconds
hive> 
{code}

Above suggests that partition did inherit the columns from table. If the bug as you described is present, then partition won't have column information?, I believe the issue happens with serde-reported columns; it works correctly as you pointed out when explicit columns are sued.

Consider the following. I believe the correct behavior is for part1 to inherit the table columns. Here we see part1 only has the partition key.

{code}
hive> create external table int_string
  partitioned by (b string)
  row format serde "org.apache.hadoop.hive.serde2.thrift.ThriftDeserializer"
  with serdeproperties (
    "serialization.class"="org.apache.hadoop.hive.serde2.thrift.test.IntString",
    "serialization.format"="org.apache.thrift.protocol.TBinaryProtocol");
OK
Time taken: 0.203 seconds
hive> describe int_string;
OK
myint	int	from deserializer
mystring	string	from deserializer
underscore_int	int	from deserializer
b	string	
Time taken: 0.098 seconds
hive> alter table int_string add partition (b='part1');
OK
Time taken: 0.154 seconds
hive> describe int_string partition (b='part1');       
OK
b	string	
Time taken: 0.072 seconds
hive> 
{code}, Applying the above change and rerunning these statements causes the partition to have dynamically-reported columns:

{code:title=Proposed behavior: partition has correct columns with above change}
hive> create external table int_string
    >   partitioned by (b string)
    >   row format serde "org.apache.hadoop.hive.serde2.thrift.ThriftDeserializer"
    >   with serdeproperties (
    >     "serialization.class"="org.apache.hadoop.hive.serde2.thrift.test.IntString",
    >     "serialization.format"="org.apache.thrift.protocol.TBinaryProtocol");
OK
Time taken: 0.085 seconds
hive> alter table int_string add partition (b='part1');
OK
Time taken: 0.128 seconds
hive> describe int_string partition (b='part1');     
OK
myint	int	from deserializer
mystring	string	from deserializer
underscore_int	int	from deserializer
b	string	
Time taken: 0.09 seconds
hive> 
{code}, Interesting. There seems to be no code in {{ql.metadata}} that can bring this kind of discrepancy, so wondering why difference in behavior for serde reported columns Vs regular code., Looking at [Table.getEmptyTable|https://github.com/apache/hive/blob/trunk/ql/src/java/org/apache/hadoop/hive/ql/metadata/Table.java#L121] we see:

{code}
sd.setCols(new ArrayList<FieldSchema>());
{code}

What I believe happens is a new empty table is created, which initializes an empty list of columns. No columns are actually set, because the serde reports them at runtime.

Later, when initializing a Partition we check if the storage descriptor has null for its columns. It actually has the empty list copied from the empty table (not null) and we do not copy the table schema into the partition.

Typically tables/partitions have an explicitly defined schema so maybe this use-case just hasn't come up? If you explicitly define the schema things work as expected., bq. Later, when initializing a Partition we check if the storage descriptor has null for its columns. It actually has the empty list copied from the empty table (not null) and we do not copy the table schema into the partition.

This is true even for regular columns, not only for serde reported columns. How in non-serde case, partition gets the columns from table then ?, In both the serde-reported & non-serde cases, the table schema is copied into the partition storage descriptor. If the schema was explicitly defined, there's no need to copy it from the table so things work correctly.

I can't actually generate a test case where the partition storage descriptor cols are null – its either the list of explicitly defined fields, or an empty list when serde-reported.

Any ideas how to explicitly define fields for the table, but not have them copied into the partition storage descriptor?

To double-check - do you think the current serde-reported schema behavior is a bug? If so, I'm very interested in helping figure this one out. It feels like a simple issue where perhaps the table cols should be initialized to null instead of an empty list, or the empty list should be accommodated when choosing to copy the table schema., Hey [~ashutoshc] - fixing this issue is pretty high priority for me, any thoughts on next steps?, @Travis,
Yeah, this fix is required. Can you prepare a patch for it. Also, include the testcase which you have in https://issues.apache.org/jira/browse/HIVE-3279?focusedCommentId=13420724&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13420724 in the patch, Differential review: https://reviews.facebook.net/D4329, +1 running tests., Committed to trunk. Thanks, Travis!, Integrated in Hive-trunk-h0.21 #1569 (See [https://builds.apache.org/job/Hive-trunk-h0.21/1569/])
    HIVE-3279: Table schema not being copied to Partitions with no columns (Travis Crawford via Ashutosh Chauhan) (Revision 1366058)

     Result = FAILURE
hashutosh : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1366058
Files : 
* /hive/trunk/ql/src/java/org/apache/hadoop/hive/ql/metadata/Partition.java
* /hive/trunk/ql/src/test/queries/clientpositive/serde_reported_schema.q
* /hive/trunk/ql/src/test/results/clientpositive/serde_reported_schema.q.out
, Integrated in Hive-trunk-hadoop2 #54 (See [https://builds.apache.org/job/Hive-trunk-hadoop2/54/])
    HIVE-3279: Table schema not being copied to Partitions with no columns (Travis Crawford via Ashutosh Chauhan) (Revision 1366058)

     Result = ABORTED
hashutosh : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1366058
Files : 
* /hive/trunk/ql/src/java/org/apache/hadoop/hive/ql/metadata/Partition.java
* /hive/trunk/ql/src/test/queries/clientpositive/serde_reported_schema.q
* /hive/trunk/ql/src/test/results/clientpositive/serde_reported_schema.q.out
, This issue is fixed and released as part of 0.10.0 release. If you find an issue which seems to be related to this one, please create a new jira and link this one with new jira.]