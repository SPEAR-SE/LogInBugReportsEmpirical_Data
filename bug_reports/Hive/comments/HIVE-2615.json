[I see this as three different issues:

# The NULL literal produces a VOID type.
# Tables with a VOID type cannot be queried at all.
# Queries for tables with a VOID type fail at execution time rather than compile time.

Some potential solutions:

# Treat a VOID type as always being NULL.  This is a non-backwards-compatible object inspector change that require changes all over the place, including third party code.
# Pick a type for a NULL literal in CTAS.  There is no obvious choice for the type, but STRING seems like the best option.
# Have the CTAS error out at compile time with a hint for the user to use CAST to specify the type.
, I think option 3 is the better choice, from [~david.phillips] says.
Is any body working on this issue?, Attach a patch.
The checks after result schema is generated.
if CTAS and contains void, it raise an exception and ask user to cast the type., https://reviews.apache.org/r/11622/, Would any committer review this issue?, Instead of in SemanticAnalyzer, better place to do this check is in TypeCheckProcFactory.java, An example of what the cast would look like: 

create table <new_table> as select <column>, cast(null as <type>) <column_name> from <table_name>;

create table null_test as select user, cast(null as bigint) test from a;, This has been fixed via HIVE-4172. Resolving as duplicate.]