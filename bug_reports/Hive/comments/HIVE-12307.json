[[~alangates] could you review please, HiveEndPoint.TransactionBatchImpl:
* I'm +1 on making this package level, but does it do any good to make the class non-private and leave the constructor private?
* Why did you make the isClosed value volatile?  Are you assuming users will use this in a multi-threaded way?  I think this class is thread safe in as much as users can have per-thread instances, but I don't think the class is re-entrant itself.  I see in other comments you're expecting heartbeating to be done in a separate thread.  Is that the only case you think this will be used?  If so, it seems we should comment this well so people know what is and isn't safe to do multi-threaded.
* write()
** I don't understand why when the code gets a SerializationError it should still declare success and re-throw.  I see re-throwing so the user can see the error, but don't we still need to mark the batch a failure and abort?  How can the caller recover here?
** Since the logic here is getting more complex I would suggest that we refactor write(byte) to be simply: write(Collections.singleList(byte)).  This way we only have the logic in one place.
** A thought on the produceFault() calls.  Would it be better to create a special RecordWriter implementation that wraps other RecordWriters and throws when you want it to?  That way you don't have to pollute this code with produceFault() calls and you can eventually test errors at more locations.
* abortImpl()
** We should look at adding a call to rollback a group of transactions, so that large aborted batches don't cause a storm of metastore calls.  That obviously doesn't need to be part of this patch.

, bq. I'm +1 on making this package level, but does it do any good to make the class non-private and leave the constructor private?
The class is made package level for testing only.  Private c'tor ensures that it's only constructed via factory methods as originally implemented.
bq. Why did you make the isClosed value volatile? 
heartbeating is commonly done from separate thread, for example, Storm does it this way.  Also, it's not unusual for  application clean up logic to come from a different thread (for example calling close() as a form of cancel).  So this is volatile to make sure this works properly regardless of how the client is implemented.
I didn't try any more general thread safety issues in this patch.  Judging by https://cwiki.apache.org/confluence/display/Hive/Streaming+Data+Ingest#StreamingDataIngest-Exampleâ€“Non-secureMode the original intent was to NOT to have multiple threads in a StreamingConnection.  It's worthwhile to do a thread safety review but was not my goal here.  

bq. write()
I'll refactor this



bq. SerializationError
This is was meant to indicate that a particular row is bad.  For example missing columns, etc.  This gives the client ability to drop this row (or send to dead letter queue) since replaying it won't help.  Unfortunately, w/o my changes here the client never sees SerializationError - it gets wrapped in other exceptions.
bq. abortImpl()
there is https://issues.apache.org/jira/browse/HIVE-12440 for that, [~alangates], I uploaded a new patch with refactored write() and using your wrapper/delegator idea, which makes things look much cleaner., +1

bq. It's worthwhile to do a thread safety review but was not my goal here.
Agreed, I'm not trying to add a thread safety review to this patch.

I've created HIVE-12521 to start tracking javadoc issues in Hive streaming.  I've put in there that we should document the assumptions about thread safety and the meaning of SerializationError.  If there are other issues you are aware of in here that need documenting feel free to add to that JIRA.  I've assigned it to myself so I don't forget about it but feel free to take it on if you want.



, 

Here are the results of testing the latest attachment:
https://issues.apache.org/jira/secure/attachment/12774201/HIVE-12307.2.patch

{color:green}SUCCESS:{color} +1 due to 1 test(s) being added or modified.

{color:red}ERROR:{color} -1 due to 3 failed/errored test(s), 9865 tests executed
*Failed tests:*
{noformat}
TestHWISessionManager - did not produce a TEST-*.xml file
org.apache.hadoop.hive.cli.TestNegativeCliDriver.testNegativeCliDriver_authorization_uri_import
org.apache.hive.jdbc.TestSSL.testSSLVersion
{noformat}

Test results: http://ec2-174-129-184-35.compute-1.amazonaws.com/jenkins/job/PreCommit-HIVE-TRUNK-Build/6131/testReport
Console output: http://ec2-174-129-184-35.compute-1.amazonaws.com/jenkins/job/PreCommit-HIVE-TRUNK-Build/6131/console
Test logs: http://ec2-174-129-184-35.compute-1.amazonaws.com/logs/PreCommit-HIVE-TRUNK-Build-6131/

Messages:
{noformat}
Executing org.apache.hive.ptest.execution.TestCheckPhase
Executing org.apache.hive.ptest.execution.PrepPhase
Executing org.apache.hive.ptest.execution.ExecutionPhase
Executing org.apache.hive.ptest.execution.ReportingPhase
Tests exited with: TestsFailedException: 3 tests failed
{noformat}

This message is automatically generated.

ATTACHMENT ID: 12774201 - PreCommit-HIVE-TRUNK-Build]