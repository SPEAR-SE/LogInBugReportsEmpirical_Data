[If the input tables are bucketed/sorted on the join keys, and we convert
the join to sort-merge bucketed map join, the only drawback is that we will
use BucketizedHiveInputFormat (or one mapper per file), which may restrict the
parallelism if the input files are large.

In most of the cases, the advantages of sort merge join (and no reducer) should
overweigh the reduced parallelism. I can add a configurable parameter for this
behavior to be triggered, if need be.

In general, it seems a good idea to automatically use sort-merge join whenever possible., https://reviews.facebook.net/D5325, This is a patch in progress.

Please review.

[~navis], it would be really helpful if you can review it thoroughly. Others are also welcome.
I will let HIVE-3283 go in first., @Namit Jain;
I've just released from HIVE-3381. Let's start looking into this.

I think this patch tries to solve two issues simultaneously. One is for merging two config to single one as mentioned above, and the other is for extending SMBOptimizer by additional conversion rule (JOIN to SMBJOIN directly), which is great. Is it possible to use it with hive.auto.convert.join=true? , [~navis], Thanks for looking into this.

I like the idea of using it with hive.auto.convert.join.
But, do you think we should do it in a follow-up ? I mean, let this stabilize and then change.
But, then we will have a backward compatibility issue - OK, I will change it to use hive.auto.convert.join, [~navis], thinking more about it - I am not sure.
If we go the route of hive.auto.convert.join, do we risk deployment ?
I mean, hive.auto.convert.join is a very stable feature and should be set to true
in most of the installations. Do we want to risk a new functionality on this one ?

I would say - let us have an additional config. for now, but once we are more confident of
it's functionality, we can add this behavior in hive.auto.convert.join., Had an offline review with Kevin - the following came out of that:

1. The policy to choose the big table should take the average size of the partition into account.
   We dont need to change the existing policy, can add a new policy.
2. The new policy should give preference to a table with no partitions/ 1 partition.
3. If one of the tables is small enough to fit in memory, there is no need to perform sort-merge join. The
   policy should check that. Eventually, that check should be removed, and that should be handled by the physical
   optimizer - will file a new jira for that.
, Sorry for joining the party a little late.

Just a thought: we already have a property hive.optimize.bucketmapjoin that deals with the same question - whether or not to use BucketizedHiveInputFormat. Would it make sense to use the same property? I would go as far as saying, most people who would want to auto-convert their joins to bucketed joins would be interested in converting their joins to sort-merge bucketed joins (if data is sorted per join keys).

What do you think?, [~mgrover], typically we have erred on the side on having more configurable parameters in hive, rather than over-loading a parameter.
There is no correct answer for this, but I would prefer to have an additional conf. Moreover, hive.optimize.bucketmapjoin, only converts map-joins to
bucketized map joins, whenever possible. However, here, the user is not giving any hints, and we are converting the query to use sort-merge joins., Fair enough. I am ok with a new parameter., Added tests - this is ready for review, Comments on Phabricator., addressed comments, If one of the tables is small enough to fit in memory, there is no need to perform sort-merge join. The
policy should check that. Eventually, that check should be removed, and that should be handled by the physical
optimizer - will file a new jira for that.

I had filed https://issues.apache.org/jira/browse/HIVE-3598 for that, but since sub-query support for map-joins
has gone in, this change is more complicated. Will do the backup task in a new jira., https://issues.apache.org/jira/secure/attachment/12564394/hive.3403.12.patch contains the changes with the backup task.
Will clean it up, remove the backup task from HIVE-3403., The tests run fine, [~kevinwilfong], can u take a look ?, [~navis], can you take a look at this patch, since you very familiar with join code ?, The support for sub-queries has also been added in this., waiting for HIVE-3784 first, To help	in review, the class hierarchy is:

AbstractBucketJoinProc
       subclass1 : AbstractSMBJoinProc
             subclass1 : subclass1 : SortedMergeBucketMapjoinProc
             subclass1: subclass2: SortedMergeJoinProc
       subclass2: BucketMapjoinOptProc


The context needed is:

BucketJoinOptProcCtx
       subclass1: SortBucketJoinOptProcCtx

Most of the code in AbstractBucketJoinProc and AbstractSMBJoinProc is old code moved.
BucketMapjoinOptProc is also old code â€“ but there has been little refactoring to break it up into context.

As such, the only new code is SortedMergeJoinProc. Due to the refactoring, I am	able to	re-use a lot of	code
between	map-join and join processing.
, All tests passed, Left some comments on phabricator., comments addressed + tests pass, I concur with Mark's above comments. I don't agree that erring on the side of more configs is a good idea. e.g., the if-else ladder after this patch will look like following:

{code}
if user specifies map join hint && hive.optimize.bucketmapjoin is true, than a map-join may be converted to BMJ.

if user specifies map join hint && hive.optimize.bucketmapjoin is true && hive.optimize.sortedmerge is true, than a map-join may be converted to SMBJ.

if user doesn't specify map join hint && hive.optimize.bucketmapjoin && hive.optimize.sortedmerge is true && hive.optimize.auto.convert.sortmerge.join is true, than a regular may be converted may be converted to SMBJ.

... and than there is hive.auto.covert.join, hive.auto.convert.join.noconditionaltask and many others...
{code}

instead of simplifying the life of user which I believe is the original goal of jira, we are making his life complicated by introducing even more config which he needs to understand. Btw, I am not 100% even if I got the above settings right. Further, the fact that default value for every optimization is false means user ends up in worst of both worlds where none of the optimization kicks in and query runs slow. 
To improve from state of art, my suggestions are following:
a) Lets get rid of hints altogether, i.e., we never construct logical plan with a MapJoin/SMBJoin/BJoin operator but always with regular join operator. And than in optimization phase we convert regular join to most optimal join implementation depending on sorting/bucketing properties and sizes of tables. This will simplify the codebase since we always see regular join in our operator tree in logical phase, thus eliminating need of handling MapJoin operator at logical level. Also, this simplifies the interaction of hints and configs like user provided hint but config is off.. kind of scenarios...
b) We should compress all these different configs to lower number of configs.
c) We should set the default value true for all these configs.

Namit, do you think its possible to do this or do you see any problem in this plan? , Thinking more about my point a) above, there are three potential join optimization opportunities:
a) Convert a JoinOperator to non-bucketed MapJoinOperator.
b) Convert a JoinOperator to bucketed MapJoinOpperator.
c) Convert a JoinOperator to sort-merge-bucketed MapJoinOperator.
 
Among these c) doesn't need to buffer data in memory, so can be determined completely at compile time, which this patch enables. a) and b) buffers data in memory so need to be done at run time. a) is already taken care of in HIVE-3784. 
So, we are left with b) now. With this patch, we will convert a Join Operator to bucketed MapJoin Operator at compile time by attempting to convert a map-join operator (which will be there because user provided the hint). But ideally this should also be done at runtime just like a). At run-time we should see first if tables are bucketed than check if the size of required buckets of smaller table can fit in memory and if they do than convert a JoinOperator to BMJ. If table is not bucketed than check size of whole of small table and than convert it into non-bucketed map-join. If we do this than we can completely get rid of map-join hints. If we get there, that will be advantageous to users since they never have to provide hints in their queries, hive optimizer will generate most optimal plan possible. It will be advantageous to hive devs since they will never have to bother about map-join operators in query compilation phase because map-join operator will never be part of plan at compile time. It will only appear at run-time if Join Operator is optimized to MapJoin Operator. This will simplify semantic analysis, plan generation and compile time optimizations a lot.
Namit, is this analysis correct? 
, Yes, but we need to get there slowly - the idea is to get rid of the map-join hint eventually, and this jira is a step in that direction.
c) above will be achieved with this jira. 

With HIVE-3891 (which is also patch available), a backup task will be created for the map-join, just like a) above.

I agree, I am adding more config. variables right now - the idea behind them is to test them slowly in deployment.
In case there are bugs, it would be easy to turn them off. Although there are more configs, it is still much easier than
hints - once these configs are stabilized, we can change the defaults of these configs, and we dont need to specify anything
(hint) per query.

Doing b) automatically requires most work, among a), b) and c), since we need to load all the buckets - theoritically, we can
load the largest bucket and decide based on that. That is definitely a big enough patch, and should not be part of this jira., Make sense. I am not suggesting to include all that in this jira, but wanted to make sure we are on same page as to where are heading.
Though, w.r.t, configs I can see your point about adding more configs, but I still think by default optimization configs should be on. Whole point of release is to ship stable codebase. By definition trunk is not considered stable (as stable as in making release out of it), so time we get between committing to trunk and releasing is for stablizing new codebase, but if by default configs are off, bugs lurking in new codebase will never be exposed.  , In the patch, the auto_sortmerge_join_6.q is missing.
, I run with a modified version of the auto_sortmerge_join_1.q file (attached to the JIRA) and create a query where 2 of the tables in a join are sorted and bucketed and the 3rd table is not sorted. I have enabled the auto map join convert config. I am seeing this exception:

FAILED: ClassCastException org.apache.hadoop.hive.ql.exec.SMBMapJ
oinOperator cannot be cast to org.apache.hadoop.hive.ql.exec.MapJoinOperator

I do not see the exception if I set the noConditionalTask.size to a size greater than the size of the 2 small tables (src1 and small_table) for e.g. 500., Thanks Vikram, I will take a look., [~ashutoshc], I can change the default in a follow-up. Again, wanted to be conservative, [~vikram.dixit], I am still trying - not able to get to the root cause., Tests passed.

Added a new test for the scenario encountered by Vikram, What was the bug?, Look at the changes in SMBJoinOperator.java.
Previously, SMB followed by Join was performed in 2MR jobs. With the cleanup, we can perform
that in a single MR., I see. We were unnecessarily dealing with SMBJOp in the mapper which was streaming through records for third table of Join. Ideally, each mapper(and reducer) should just have a plan for itself and not the global plan, ie mapper for third table shouldn't see SMBJOp at all. But thats a quite fundamental change, given that at the moment we generate uniform plan for whole of MR job. 
This patch is already outstanding for more than 6 months. Lets get this in. 
+1 Namit, can you commit this. 
Also would you like to take up follow on HIVE-3980 ?, [~ashutoshc], will address HIVE-3980 after this ?, Filed HIVE-4038 for the mapper/reducer individual plan., Committed. Thanks Ashutosh , Integrated in hive-trunk-hadoop1 #91 (See [https://builds.apache.org/job/hive-trunk-hadoop1/91/])
    HIVE-3403 user should not specify mapjoin to perform sort-merge bucketed join
(Namit Jain via Ashutosh) (Revision 1447593)

     Result = ABORTED
namit : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1447593
Files : 
* /hive/trunk/common/src/java/org/apache/hadoop/hive/conf/HiveConf.java
* /hive/trunk/conf/hive-default.xml.template
* /hive/trunk/data/files/smallsrcsortbucket1outof4.txt
* /hive/trunk/data/files/smallsrcsortbucket2outof4.txt
* /hive/trunk/data/files/smallsrcsortbucket3outof4.txt
* /hive/trunk/data/files/smallsrcsortbucket4outof4.txt
* /hive/trunk/ql/src/java/org/apache/hadoop/hive/ql/exec/FilterOperator.java
* /hive/trunk/ql/src/java/org/apache/hadoop/hive/ql/exec/Operator.java
* /hive/trunk/ql/src/java/org/apache/hadoop/hive/ql/exec/SMBMapJoinOperator.java
* /hive/trunk/ql/src/java/org/apache/hadoop/hive/ql/exec/SelectOperator.java
* /hive/trunk/ql/src/java/org/apache/hadoop/hive/ql/exec/TableScanOperator.java
* /hive/trunk/ql/src/java/org/apache/hadoop/hive/ql/optimizer/AbstractBucketJoinProc.java
* /hive/trunk/ql/src/java/org/apache/hadoop/hive/ql/optimizer/AbstractSMBJoinProc.java
* /hive/trunk/ql/src/java/org/apache/hadoop/hive/ql/optimizer/AvgPartitionSizeBasedBigTableSelectorForAutoSMJ.java
* /hive/trunk/ql/src/java/org/apache/hadoop/hive/ql/optimizer/BigTableSelectorForAutoSMJ.java
* /hive/trunk/ql/src/java/org/apache/hadoop/hive/ql/optimizer/BucketJoinProcCtx.java
* /hive/trunk/ql/src/java/org/apache/hadoop/hive/ql/optimizer/BucketMapJoinOptimizer.java
* /hive/trunk/ql/src/java/org/apache/hadoop/hive/ql/optimizer/BucketMapjoinProc.java
* /hive/trunk/ql/src/java/org/apache/hadoop/hive/ql/optimizer/LeftmostBigTableSelectorForAutoSMJ.java
* /hive/trunk/ql/src/java/org/apache/hadoop/hive/ql/optimizer/Optimizer.java
* /hive/trunk/ql/src/java/org/apache/hadoop/hive/ql/optimizer/SizeBasedBigTableSelectorForAutoSMJ.java
* /hive/trunk/ql/src/java/org/apache/hadoop/hive/ql/optimizer/SortBucketJoinProcCtx.java
* /hive/trunk/ql/src/java/org/apache/hadoop/hive/ql/optimizer/SortedMergeBucketMapJoinOptimizer.java
* /hive/trunk/ql/src/java/org/apache/hadoop/hive/ql/optimizer/SortedMergeBucketMapjoinProc.java
* /hive/trunk/ql/src/java/org/apache/hadoop/hive/ql/optimizer/SortedMergeJoinProc.java
* /hive/trunk/ql/src/java/org/apache/hadoop/hive/ql/optimizer/TableSizeBasedBigTableSelectorForAutoSMJ.java
* /hive/trunk/ql/src/java/org/apache/hadoop/hive/ql/optimizer/physical/CommonJoinResolver.java
* /hive/trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/ParseContext.java
* /hive/trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/SemanticAnalyzer.java
* /hive/trunk/ql/src/java/org/apache/hadoop/hive/ql/plan/SMBJoinDesc.java
* /hive/trunk/ql/src/test/queries/clientnegative/smb_mapjoin_14.q
* /hive/trunk/ql/src/test/queries/clientpositive/auto_smb_mapjoin_14.q
* /hive/trunk/ql/src/test/queries/clientpositive/auto_sortmerge_join_1.q
* /hive/trunk/ql/src/test/queries/clientpositive/auto_sortmerge_join_10.q
* /hive/trunk/ql/src/test/queries/clientpositive/auto_sortmerge_join_2.q
* /hive/trunk/ql/src/test/queries/clientpositive/auto_sortmerge_join_3.q
* /hive/trunk/ql/src/test/queries/clientpositive/auto_sortmerge_join_4.q
* /hive/trunk/ql/src/test/queries/clientpositive/auto_sortmerge_join_5.q
* /hive/trunk/ql/src/test/queries/clientpositive/auto_sortmerge_join_6.q
* /hive/trunk/ql/src/test/queries/clientpositive/auto_sortmerge_join_7.q
* /hive/trunk/ql/src/test/queries/clientpositive/auto_sortmerge_join_8.q
* /hive/trunk/ql/src/test/queries/clientpositive/auto_sortmerge_join_9.q
* /hive/trunk/ql/src/test/results/clientpositive/auto_smb_mapjoin_14.q.out
* /hive/trunk/ql/src/test/results/clientpositive/auto_sortmerge_join_1.q.out
* /hive/trunk/ql/src/test/results/clientpositive/auto_sortmerge_join_10.q.out
* /hive/trunk/ql/src/test/results/clientpositive/auto_sortmerge_join_2.q.out
* /hive/trunk/ql/src/test/results/clientpositive/auto_sortmerge_join_3.q.out
* /hive/trunk/ql/src/test/results/clientpositive/auto_sortmerge_join_4.q.out
* /hive/trunk/ql/src/test/results/clientpositive/auto_sortmerge_join_5.q.out
* /hive/trunk/ql/src/test/results/clientpositive/auto_sortmerge_join_6.q.out
* /hive/trunk/ql/src/test/results/clientpositive/auto_sortmerge_join_7.q.out
* /hive/trunk/ql/src/test/results/clientpositive/auto_sortmerge_join_8.q.out
* /hive/trunk/ql/src/test/results/clientpositive/auto_sortmerge_join_9.q.out
, Integrated in Hive-trunk-hadoop2 #128 (See [https://builds.apache.org/job/Hive-trunk-hadoop2/128/])
    HIVE-3403 user should not specify mapjoin to perform sort-merge bucketed join
(Namit Jain via Ashutosh) (Revision 1447593)

     Result = FAILURE
namit : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1447593
Files : 
* /hive/trunk/common/src/java/org/apache/hadoop/hive/conf/HiveConf.java
* /hive/trunk/conf/hive-default.xml.template
* /hive/trunk/data/files/smallsrcsortbucket1outof4.txt
* /hive/trunk/data/files/smallsrcsortbucket2outof4.txt
* /hive/trunk/data/files/smallsrcsortbucket3outof4.txt
* /hive/trunk/data/files/smallsrcsortbucket4outof4.txt
* /hive/trunk/ql/src/java/org/apache/hadoop/hive/ql/exec/FilterOperator.java
* /hive/trunk/ql/src/java/org/apache/hadoop/hive/ql/exec/Operator.java
* /hive/trunk/ql/src/java/org/apache/hadoop/hive/ql/exec/SMBMapJoinOperator.java
* /hive/trunk/ql/src/java/org/apache/hadoop/hive/ql/exec/SelectOperator.java
* /hive/trunk/ql/src/java/org/apache/hadoop/hive/ql/exec/TableScanOperator.java
* /hive/trunk/ql/src/java/org/apache/hadoop/hive/ql/optimizer/AbstractBucketJoinProc.java
* /hive/trunk/ql/src/java/org/apache/hadoop/hive/ql/optimizer/AbstractSMBJoinProc.java
* /hive/trunk/ql/src/java/org/apache/hadoop/hive/ql/optimizer/AvgPartitionSizeBasedBigTableSelectorForAutoSMJ.java
* /hive/trunk/ql/src/java/org/apache/hadoop/hive/ql/optimizer/BigTableSelectorForAutoSMJ.java
* /hive/trunk/ql/src/java/org/apache/hadoop/hive/ql/optimizer/BucketJoinProcCtx.java
* /hive/trunk/ql/src/java/org/apache/hadoop/hive/ql/optimizer/BucketMapJoinOptimizer.java
* /hive/trunk/ql/src/java/org/apache/hadoop/hive/ql/optimizer/BucketMapjoinProc.java
* /hive/trunk/ql/src/java/org/apache/hadoop/hive/ql/optimizer/LeftmostBigTableSelectorForAutoSMJ.java
* /hive/trunk/ql/src/java/org/apache/hadoop/hive/ql/optimizer/Optimizer.java
* /hive/trunk/ql/src/java/org/apache/hadoop/hive/ql/optimizer/SizeBasedBigTableSelectorForAutoSMJ.java
* /hive/trunk/ql/src/java/org/apache/hadoop/hive/ql/optimizer/SortBucketJoinProcCtx.java
* /hive/trunk/ql/src/java/org/apache/hadoop/hive/ql/optimizer/SortedMergeBucketMapJoinOptimizer.java
* /hive/trunk/ql/src/java/org/apache/hadoop/hive/ql/optimizer/SortedMergeBucketMapjoinProc.java
* /hive/trunk/ql/src/java/org/apache/hadoop/hive/ql/optimizer/SortedMergeJoinProc.java
* /hive/trunk/ql/src/java/org/apache/hadoop/hive/ql/optimizer/TableSizeBasedBigTableSelectorForAutoSMJ.java
* /hive/trunk/ql/src/java/org/apache/hadoop/hive/ql/optimizer/physical/CommonJoinResolver.java
* /hive/trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/ParseContext.java
* /hive/trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/SemanticAnalyzer.java
* /hive/trunk/ql/src/java/org/apache/hadoop/hive/ql/plan/SMBJoinDesc.java
* /hive/trunk/ql/src/test/queries/clientnegative/smb_mapjoin_14.q
* /hive/trunk/ql/src/test/queries/clientpositive/auto_smb_mapjoin_14.q
* /hive/trunk/ql/src/test/queries/clientpositive/auto_sortmerge_join_1.q
* /hive/trunk/ql/src/test/queries/clientpositive/auto_sortmerge_join_10.q
* /hive/trunk/ql/src/test/queries/clientpositive/auto_sortmerge_join_2.q
* /hive/trunk/ql/src/test/queries/clientpositive/auto_sortmerge_join_3.q
* /hive/trunk/ql/src/test/queries/clientpositive/auto_sortmerge_join_4.q
* /hive/trunk/ql/src/test/queries/clientpositive/auto_sortmerge_join_5.q
* /hive/trunk/ql/src/test/queries/clientpositive/auto_sortmerge_join_6.q
* /hive/trunk/ql/src/test/queries/clientpositive/auto_sortmerge_join_7.q
* /hive/trunk/ql/src/test/queries/clientpositive/auto_sortmerge_join_8.q
* /hive/trunk/ql/src/test/queries/clientpositive/auto_sortmerge_join_9.q
* /hive/trunk/ql/src/test/results/clientpositive/auto_smb_mapjoin_14.q.out
* /hive/trunk/ql/src/test/results/clientpositive/auto_sortmerge_join_1.q.out
* /hive/trunk/ql/src/test/results/clientpositive/auto_sortmerge_join_10.q.out
* /hive/trunk/ql/src/test/results/clientpositive/auto_sortmerge_join_2.q.out
* /hive/trunk/ql/src/test/results/clientpositive/auto_sortmerge_join_3.q.out
* /hive/trunk/ql/src/test/results/clientpositive/auto_sortmerge_join_4.q.out
* /hive/trunk/ql/src/test/results/clientpositive/auto_sortmerge_join_5.q.out
* /hive/trunk/ql/src/test/results/clientpositive/auto_sortmerge_join_6.q.out
* /hive/trunk/ql/src/test/results/clientpositive/auto_sortmerge_join_7.q.out
* /hive/trunk/ql/src/test/results/clientpositive/auto_sortmerge_join_8.q.out
* /hive/trunk/ql/src/test/results/clientpositive/auto_sortmerge_join_9.q.out
, Integrated in Hive-trunk-h0.21 #1976 (See [https://builds.apache.org/job/Hive-trunk-h0.21/1976/])
    HIVE-3403 user should not specify mapjoin to perform sort-merge bucketed join
(Namit Jain via Ashutosh) (Revision 1447593)

     Result = FAILURE
namit : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1447593
Files : 
* /hive/trunk/common/src/java/org/apache/hadoop/hive/conf/HiveConf.java
* /hive/trunk/conf/hive-default.xml.template
* /hive/trunk/data/files/smallsrcsortbucket1outof4.txt
* /hive/trunk/data/files/smallsrcsortbucket2outof4.txt
* /hive/trunk/data/files/smallsrcsortbucket3outof4.txt
* /hive/trunk/data/files/smallsrcsortbucket4outof4.txt
* /hive/trunk/ql/src/java/org/apache/hadoop/hive/ql/exec/FilterOperator.java
* /hive/trunk/ql/src/java/org/apache/hadoop/hive/ql/exec/Operator.java
* /hive/trunk/ql/src/java/org/apache/hadoop/hive/ql/exec/SMBMapJoinOperator.java
* /hive/trunk/ql/src/java/org/apache/hadoop/hive/ql/exec/SelectOperator.java
* /hive/trunk/ql/src/java/org/apache/hadoop/hive/ql/exec/TableScanOperator.java
* /hive/trunk/ql/src/java/org/apache/hadoop/hive/ql/optimizer/AbstractBucketJoinProc.java
* /hive/trunk/ql/src/java/org/apache/hadoop/hive/ql/optimizer/AbstractSMBJoinProc.java
* /hive/trunk/ql/src/java/org/apache/hadoop/hive/ql/optimizer/AvgPartitionSizeBasedBigTableSelectorForAutoSMJ.java
* /hive/trunk/ql/src/java/org/apache/hadoop/hive/ql/optimizer/BigTableSelectorForAutoSMJ.java
* /hive/trunk/ql/src/java/org/apache/hadoop/hive/ql/optimizer/BucketJoinProcCtx.java
* /hive/trunk/ql/src/java/org/apache/hadoop/hive/ql/optimizer/BucketMapJoinOptimizer.java
* /hive/trunk/ql/src/java/org/apache/hadoop/hive/ql/optimizer/BucketMapjoinProc.java
* /hive/trunk/ql/src/java/org/apache/hadoop/hive/ql/optimizer/LeftmostBigTableSelectorForAutoSMJ.java
* /hive/trunk/ql/src/java/org/apache/hadoop/hive/ql/optimizer/Optimizer.java
* /hive/trunk/ql/src/java/org/apache/hadoop/hive/ql/optimizer/SizeBasedBigTableSelectorForAutoSMJ.java
* /hive/trunk/ql/src/java/org/apache/hadoop/hive/ql/optimizer/SortBucketJoinProcCtx.java
* /hive/trunk/ql/src/java/org/apache/hadoop/hive/ql/optimizer/SortedMergeBucketMapJoinOptimizer.java
* /hive/trunk/ql/src/java/org/apache/hadoop/hive/ql/optimizer/SortedMergeBucketMapjoinProc.java
* /hive/trunk/ql/src/java/org/apache/hadoop/hive/ql/optimizer/SortedMergeJoinProc.java
* /hive/trunk/ql/src/java/org/apache/hadoop/hive/ql/optimizer/TableSizeBasedBigTableSelectorForAutoSMJ.java
* /hive/trunk/ql/src/java/org/apache/hadoop/hive/ql/optimizer/physical/CommonJoinResolver.java
* /hive/trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/ParseContext.java
* /hive/trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/SemanticAnalyzer.java
* /hive/trunk/ql/src/java/org/apache/hadoop/hive/ql/plan/SMBJoinDesc.java
* /hive/trunk/ql/src/test/queries/clientnegative/smb_mapjoin_14.q
* /hive/trunk/ql/src/test/queries/clientpositive/auto_smb_mapjoin_14.q
* /hive/trunk/ql/src/test/queries/clientpositive/auto_sortmerge_join_1.q
* /hive/trunk/ql/src/test/queries/clientpositive/auto_sortmerge_join_10.q
* /hive/trunk/ql/src/test/queries/clientpositive/auto_sortmerge_join_2.q
* /hive/trunk/ql/src/test/queries/clientpositive/auto_sortmerge_join_3.q
* /hive/trunk/ql/src/test/queries/clientpositive/auto_sortmerge_join_4.q
* /hive/trunk/ql/src/test/queries/clientpositive/auto_sortmerge_join_5.q
* /hive/trunk/ql/src/test/queries/clientpositive/auto_sortmerge_join_6.q
* /hive/trunk/ql/src/test/queries/clientpositive/auto_sortmerge_join_7.q
* /hive/trunk/ql/src/test/queries/clientpositive/auto_sortmerge_join_8.q
* /hive/trunk/ql/src/test/queries/clientpositive/auto_sortmerge_join_9.q
* /hive/trunk/ql/src/test/results/clientpositive/auto_smb_mapjoin_14.q.out
* /hive/trunk/ql/src/test/results/clientpositive/auto_sortmerge_join_1.q.out
* /hive/trunk/ql/src/test/results/clientpositive/auto_sortmerge_join_10.q.out
* /hive/trunk/ql/src/test/results/clientpositive/auto_sortmerge_join_2.q.out
* /hive/trunk/ql/src/test/results/clientpositive/auto_sortmerge_join_3.q.out
* /hive/trunk/ql/src/test/results/clientpositive/auto_sortmerge_join_4.q.out
* /hive/trunk/ql/src/test/results/clientpositive/auto_sortmerge_join_5.q.out
* /hive/trunk/ql/src/test/results/clientpositive/auto_sortmerge_join_6.q.out
* /hive/trunk/ql/src/test/results/clientpositive/auto_sortmerge_join_7.q.out
* /hive/trunk/ql/src/test/results/clientpositive/auto_sortmerge_join_8.q.out
* /hive/trunk/ql/src/test/results/clientpositive/auto_sortmerge_join_9.q.out
, Doc note:  This adds *hive.auto.convert.sortmerge.join* and *hive.auto.convert.sortmerge.join.bigtable.selection.policy* to HiveConf.java in release 0.11.0, so they need to be documented in the wiki.

* [Configuration Properties -- Query and DDL Execution | https://cwiki.apache.org/confluence/display/Hive/Configuration+Properties#ConfigurationProperties-QueryandDDLExecution]

Added a TODOC11 label.]