[Am facing similar issue when using ORC storage format with decimal datatypes in columns. Few additional quirks noticed were
select * from table1 where col1  = '7799999990000003210009' - WORKING
select * from table1 where col1  IN ('7799999990000003210009') - NOT WORKING
select * from table1 where CAST(col1 as varchar(100))  IN ('7799999990000003210009'); - WORKING, [~mmccline] any insights on this one?, This looks like a problem with free integers with digits > 18.

What happens when you explicitly force a decimal by doing = 7799999990000003210009BD ?

(FYI, the explain should show the broken case like so)

{code}
            predicate:(customer_id) IN (1.0000000000000031E21) (type: boolean)
{code}

While the explicit decimal test shows

{code}
explain select * from customer_link where customer_id in (1000000000000003210009BD);
...
            predicate:(customer_id) IN (1000000000000003210009) (type: boolean)
{code}, [~gopalv] That clears few doubts. But still the behaviour with numeral within quotes (') in unclear. When checking the explain plan for both of them, it seems to be not approximating for numbers greater than 18 digits.

eg. 1
select * from tab1 where col1 in ('1010000000421400010101');
`filterExpr: (col1) IN ('1010000000421400010101') (type: boolean)`

eg. 2
select * from tab1 where col1 = ('1010000000421400010101');
`filterExpr: (col1 = '1010000000421400010101') (type: boolean)`

Above, 1st example gives no output while the 2nd one gives expected return.
, I'm not able to reproduce the IN clause problem in 1.2.x branch

{code}
create temporary table customer_link (customer_id decimal(25,0)) stored as orc;
insert into customer_link values('1010000000421400010101');
select * from customer_link where customer_id in ('1010000000421400010101');

OK
1010000000421400010101
{code}

But 

{code}
hive> select * from customer_link where customer_id in (1010000000421400010101);
OK
Time taken: 0.17 seconds
{code}

fails, due to the loss of exact types., Just tried to run the following query which failed also.  


{code:title=query-with-no-results.hql|borderStyle=solid}
     select * from customer.customer_link where customer_id = member_id;
{code}


There should be at least 1 million records in the result.  I'm about to pull down the 1.2.x branch and debug locally.]