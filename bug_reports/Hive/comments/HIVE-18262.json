[Here is my guess about what could happen:
The exception is coming from the QueryPlan.extractCounters method
{code}
  private void extractCounters() throws IOException {
    Queue<Task<? extends Serializable>> tasksToVisit =
      new LinkedList<Task<? extends Serializable>>();
    Set<Task<? extends Serializable>> tasksVisited =
      new HashSet<Task<? extends Serializable>>();
    tasksToVisit.addAll(rootTasks);
    while (tasksToVisit.peek() != null) {
      Task<? extends Serializable> task = tasksToVisit.remove();
      tasksVisited.add(task);
      // add children to tasksToVisit
      if (task.getChildTasks() != null) {
        for (Task<? extends Serializable> childTask : task.getChildTasks()) {
          if (!tasksVisited.contains(childTask)) {
            tasksToVisit.add(childTask);
          }
        }
      }
      if (task.getId() == null) {
        continue;
      }
      if (started.contains(task.getId()) && done.contains(task.getId())) {
        continue;
      }

      // get the counters for the task
      counters.put(task.getId(), task.getCounters());

      // check if task is started
      if (task.started()) {
        started.add(task.getId());
      }
      if (task.done()) {
        done.add(task.getId());
      }
      if (task instanceof ExecDriver) {
        ExecDriver mrTask = (ExecDriver) task;
        if (mrTask.mapStarted()) {
          started.add(task.getId() + "_MAP");
        }
        if (mrTask.mapDone()) {
          done.add(task.getId() + "_MAP");
        }
        if (mrTask.hasReduce()) {
          if (mrTask.reduceStarted()) {
            started.add(task.getId() + "_REDUCE");
          }
          if (mrTask.reduceDone()) {
            done.add(task.getId() + "_REDUCE");
          }
        }
      } else if (task instanceof ConditionalTask) {
        ConditionalTask cTask = (ConditionalTask) task;
        for (Task<? extends Serializable> listTask : cTask.getListTasks()) {
          if (!tasksVisited.contains(listTask)) {
            tasksToVisit.add(listTask);
          }
        }
      }
    }
  }
{code}

This is the line where the exception occurs:
{code}
List<Task<? extends Serializable>> childTasks = task.getChildTasks();
{code}

This method will always go through the rootTasks which is an instance variable of the QueryPlan class. And this method is called from the Driver.launchTask method through these methods:
Driver.launchTask -> Utilities.setWorkflowAdjacencies -> plan.getQueryPlan -> extractCounters

In the Driver class we start different task runners for each tasks. (The number of parallel task runners depends on the hive.exec.parallel.thread.number config.) 
{code}
        while ((task = driverCxt.getRunnable(maxthreads)) != null) {
          TaskRunner runner = launchTask(task, queryId, noName, jobname, jobs, driverCxt);
          if (!runner.isRunning()) {
            break;
          }
        }
{code}
And each of these launchTask calls will also call the extractCounters method where the exception happens.
If a running task is a ConditionalTask, it can happen that the list of children tasks is modified, in the part I marked in the next code snippet:
{code}
  private void resolveTask(DriverContext driverContext) throws HiveException {
    for (Task<? extends Serializable> tsk : getListTasks()) {
      if (!resTasks.contains(tsk)) {
        driverContext.remove(tsk);
        console.printInfo(tsk.getId() + " is filtered out by condition resolver.");
        if (tsk.isMapRedTask()) {
          driverContext.incCurJobNo(1);
        }
        //recursively remove this task from its children's parent task
        tsk.removeFromChildrenTasks();
      } else {
>>>>>>>>>>>>>>>>>> THIS PART CAN MODIFY THE TASK'S CHILD LIST
        if (getParentTasks() != null) {
          // This makes it so that we can go back up the tree later
          for (Task<? extends Serializable> task : getParentTasks()) {
            task.addDependentTask(tsk);
          }
        }
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
        // resolved task
        if (driverContext.addToRunnable(tsk)) {
          console.printInfo(tsk.getId() + " is selected by condition resolver.");
        }
      }
    }
  }
{code}

As none of these methods or collections are thread safe, I think what happens is that a running ConditionalTask modifies the child list of the task in the moment when trying to iterate over it. ]