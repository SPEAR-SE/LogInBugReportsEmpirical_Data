[Simple patch, Doesn't help with anything. Style choice as far as I'm concerned. We should not commit this., It's not a style choice... it removes a lot of cruft. Why are all these objects needed? Since when cannot we remove unneeded code?

When I found code that returned two objects by doing new HashMap, put(k, v), return map.iterator.next(), should I have kept it in place because it's a style choice?, 

Here are the results of testing the latest attachment:
https://issues.apache.org/jira/secure/attachment/12858555/HIVE-16191.patch

{color:red}ERROR:{color} -1 due to build exiting with an error

Test results: https://builds.apache.org/job/PreCommit-HIVE-Build/4112/testReport
Console output: https://builds.apache.org/job/PreCommit-HIVE-Build/4112/console
Test logs: http://104.198.109.242/logs/PreCommit-HIVE-Build-4112/

Messages:
{noformat}
Executing org.apache.hive.ptest.execution.TestCheckPhase
Executing org.apache.hive.ptest.execution.PrepPhase
Tests exited with: NonZeroExitCodeException
Command 'bash /data/hiveptest/working/scratch/source-prep.sh' failed with exit status 1 and output '+ date '+%Y-%m-%d %T.%3N'
2017-03-14 02:28:20.825
+ [[ -n /usr/lib/jvm/java-8-openjdk-amd64 ]]
+ export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64
+ JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64
+ export PATH=/usr/lib/jvm/java-8-openjdk-amd64/bin/:/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games
+ PATH=/usr/lib/jvm/java-8-openjdk-amd64/bin/:/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games
+ export 'ANT_OPTS=-Xmx1g -XX:MaxPermSize=256m '
+ ANT_OPTS='-Xmx1g -XX:MaxPermSize=256m '
+ export 'MAVEN_OPTS=-Xmx1g '
+ MAVEN_OPTS='-Xmx1g '
+ cd /data/hiveptest/working/
+ tee /data/hiveptest/logs/PreCommit-HIVE-Build-4112/source-prep.txt
+ [[ false == \t\r\u\e ]]
+ mkdir -p maven ivy
+ [[ git = \s\v\n ]]
+ [[ git = \g\i\t ]]
+ [[ -z master ]]
+ [[ -d apache-github-source-source ]]
+ [[ ! -d apache-github-source-source/.git ]]
+ [[ ! -d apache-github-source-source ]]
+ date '+%Y-%m-%d %T.%3N'
2017-03-14 02:28:20.827
+ cd apache-github-source-source
+ git fetch origin
From https://github.com/apache/hive
   57a48ce..b802d1b  hive-14535 -> origin/hive-14535
+ git reset --hard HEAD
HEAD is now at 82d3468 HIVE-16104 : LLAP: preemption may be too aggressive if the pre-empted task doesn't die immediately (Sergey Shelukhin, reviewed by Siddharth Seth)
+ git clean -f -d
+ git checkout master
Already on 'master'
Your branch is up-to-date with 'origin/master'.
+ git reset --hard origin/master
HEAD is now at 82d3468 HIVE-16104 : LLAP: preemption may be too aggressive if the pre-empted task doesn't die immediately (Sergey Shelukhin, reviewed by Siddharth Seth)
+ git merge --ff-only origin/master
Already up-to-date.
+ date '+%Y-%m-%d %T.%3N'
2017-03-14 02:28:22.181
+ patchCommandPath=/data/hiveptest/working/scratch/smart-apply-patch.sh
+ patchFilePath=/data/hiveptest/working/scratch/build.patch
+ [[ -f /data/hiveptest/working/scratch/build.patch ]]
+ chmod +x /data/hiveptest/working/scratch/smart-apply-patch.sh
+ /data/hiveptest/working/scratch/smart-apply-patch.sh /data/hiveptest/working/scratch/build.patch
error: patch failed: llap-server/src/java/org/apache/hadoop/hive/llap/daemon/impl/TaskExecutorService.java:87
error: llap-server/src/java/org/apache/hadoop/hive/llap/daemon/impl/TaskExecutorService.java: patch does not apply
The patch does not appear to apply with p0, p1, or p2
+ exit 1
'
{noformat}

This message is automatically generated.

ATTACHMENT ID: 12858555 - PreCommit-HIVE-Build, bq. It's not a style choice... it removes a lot of cruft. Why are all these objects needed? Since when cannot we remove unneeded code?
Opinion. If I were to add a single thread in new code for similar functionality, I'd do it the same way it exists today (This particular case, I'm not sure who added this single ThreadPool). One possible change would be to convert it into a little helper, which automatically does the onCompletion additions. Something like
startNewBackgroundThread(Callable c, String context).
Also, if I were reviewing a patch which contained either an ExecutorService with a single thread, or a single thread created separately - I don't think I'll comment on 'fixing' something like this.
Removing unneeded code - I'm sure there's plenty elsewhere, which actually causes harm, or is not used which can be removed.

bq. When I found code that returned two objects by doing new HashMap, put(k, v), return map.iterator.next(), should I have kept it in place because it's a style choice?
In this particular case, I'd agree with you, and will be in favor of removing the HashMap., It is over-engineering - extra classes, extra LOC, extra objects to achieve the exact same goal. If you want to create one permanent thread, create one permanent thread. If you have to create TWO executors, one executor wrapper, a future, a and a callback class, to manage one thread, it's just poor engineering. Of course, if your opinion is in favor of poor engineering or you prefer the "enterprise" low-quality style in small details, it doesn't matter...
Hive codebase has plenty of cruft, so I don't care enough to pursue this JIRA, but I will definitely -1 this type of code in future., There's one executor, and one wrapper class over that, and a callback. If you want to cut LOC - do that in one line. However, I think that is bad practice.
bq. you prefer the "enterprise" low-quality style in small details
Not sure what this means., Yeah, so it's 3 useless objects (also the future); plus it uses an existing executor for the callback. That's not the LOC I had in mind - that's just object cruft.
One way to cut on lines would be to remove the entire callback class and replace it with a little-known java feature know—Ç as "a finally block" :)

What I meant was something like this http://thedailywtf.com/articles/The-Enterprise-User-Agent ; the fact that it "does the job" doesn't mean everything else is a style choice... Anyway, it doesn't matter here.]