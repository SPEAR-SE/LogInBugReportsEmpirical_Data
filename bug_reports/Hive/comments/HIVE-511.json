[Changed hash code implementation., 

I am not sure I follow - what if if it a Text Writable Object.

Wont it go to default case, and error out, Text and String are both "STRING" primitive type.
The relationship between Text and String are the same as that between IntWritable and Integer - they will have WritableStringOI and JavaStringOI, which both implements StringOI.
, I dont think this change works well for longs with the code in UDFDefaultSampleHashFn since we just call o.hashCode(). Long.hashCode() returns (int)(value ^ (value >>> 32)) which is not the same as what you are doing. Notice '>>>' instead of '>>'. Also, maybe you want to change UDFDefaultSampleHashFn to use your hashCode method as well., This patch moves hash function to GenericUDF. Now we supports variable number of arguments in the hash function.
,  r = r * 31 + ObjectInspectorUtils.hashCode(arguments[i].get(), argumentOIs[i]);
Wont this overflow?

Maybe change it to something like the following?

r = r ^ ObjectInspectorUtils.hashCode(arguments[i].get(), argumentOIs[i]);, Sorry I should have put a comment.
We are using http://java.sun.com/j2se/1.4.2/docs/api/java/util/List.html#hashCode() here.
, Added a comment for the hash function., +1

looks good. will commit once tests pass., Committed. Thanks Zheng!]