[On my machine the build consistently fails during execution of the ql build-grammar target
with the following error:

{code}
build-grammar:
     [echo] Project: ql
     [echo] Building Grammar /Users/carl/Work/repos/hive-test/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g  ....
     [java] ANTLR Parser Generator  Version 3.0.1 (August 13, 2007)  1989-2007
     [java] /Users/carl/Work/repos/hive-test/ql/src/java/org/apache/hadoop/hive/ql/parse/HiveLexer.g
     [java] /Users/carl/Work/repos/hive-test/ql/src/java/org/apache/hadoop/hive/ql/parse/HiveParser.g
     [java] error(100): /Users/carl/Work/repos/hive-test/ql/src/java/org/apache/hadoop/hive/ql/parse/HiveParser.g:27:8: syntax error: antlr: /Users/carl/Work/repos/hive-test/ql/src/java/org/apache/hadoop/hive/ql/parse/HiveParser.g:27:8: unexpected token: SelectClauseParser
     [java] error(100): /Users/carl/Work/repos/hive-test/ql/src/java/org/apache/hadoop/hive/ql/parse/HiveParser.g:27:44: syntax error: antlr: /Users/carl/Work/repos/hive-test/ql/src/java/org/apache/hadoop/hive/ql/parse/HiveParser.g:27:44: unexpected token: ,
{code}

This error was introduced by HIVE-4148. It appears that the changes in
HIVE-4148 cause Ant to put antlr-3.0.1.jar on the classpath instead of
antlr-3.4.jar

I'm using Ant 1.8.1
, Looking at this right now. Not sure how to reproduce. Can you share how you build? Is it just "ant clean package"?, Downgraded my ant version to 1.8.1. Cleared all caches and built. Still don't see the problem., Yes, I use 'ant clean package'. , As far as I can tell the changes that were made in HIVE-4148
don't make the build any faster. I also think that relying on
Ivy's transitive dependency resolution mechanism to resolve
direct dependencies is a really bad idea, and actually makes
the build harder to maintain. Please let me know if you have
evidence to the contrary. Otherwise I would appreciate it if
you would resolve this problem by reverting HIVE-4148., I saw your comments on HIVE-4148 as well. Yes, I see your point, but I do think that dependencies specified in fewer places leads to something that's easier to maintain. 

My thinking was:

- I believe the modules aren't/can't be built in isolation anyways, so why duplicate all the deps 
- Nothing seems to enforce that each module has a complete set of deps, so it's best effort at best
- I see duplicated "hacks" and "broken pom file" stuff in the ivy scripts that I'd rather have in one place. 

The build speed is secondary, but I also don't understand how your system is faster with more dependencies to resolve than with fewer.

I am not married to HIVE-4148 either, although if the decision is to enforce that each module specifies all it deps directly, I'd like to go over the patch again and see what can and can't be removed rather than just reverting.

Having said that, I was simply jumping on this one first, because a broken build seems more urgent and I want to fix that right away. However, in order to do that I would like to know how your build is broken. Ivy should pick up the right version, the build machine doesn't have the problem and I can't reproduce it. Do you have any pointers?, @Carl
Brokenness in building grammar was introduced by HIVE-701 and we are discussing to improve the situation on HIVE-4067 Though it seems like you are getting different errors. I am not able to reproduce the error either with ant very-clean package.

I agree with Gunther's reasoning., Also, apache build machines are not hitting this problem either. So, it seems like this is something specific to your environment., bq. I do think that dependencies specified in fewer places leads to something that's easier to maintain.

Clearly we're incapable of maintaining the discipline necessary to keep these files up to date. What you're proposing sounds like the most pragmatic alternative. However, we should do this the right way instead of abusing transitive dependencies. Ivy has supported a parent descriptor inheritance mechanism since version 2.2 that would allow us to consolidate all of the submodule dependencies into a single parent file. More details are here: http://ant.apache.org/ivy/history/latest-milestone/ivyfile/extends.html

bq. Having said that, I was simply jumping on this one first, because a broken build seems more urgent and I want to fix that right away. However, in order to do that I would like to know how your build is broken. Ivy should pick up the right version, the build machine doesn't have the problem and I can't reproduce it. Do you have any pointers?

The root cause of this problem is that Ivy and/or Ant is failing to enforce a deterministic ordering for elements in the generated classpath. This wouldn't be an issue if we managed our dependencies correctly, but obviously we don't:
{code}
% ant clean package
...
% find . -name "antlr*.jar"
./build/ivy/lib/default/antlr-2.7.7.jar
./build/ivy/lib/default/antlr-3.0.1.jar
./build/ivy/lib/default/antlr-3.4.jar
./build/ivy/lib/default/antlr-runtime-3.0.1.jar
./build/ivy/lib/default/antlr-runtime-3.4.jar
{code}

Version 3.4 is the only thing we should be retrieving, but because of a transitive dependency we're also pulling down 3.0.1 and 2.7.7. HIVE-4148 did not cause this problem -- it was already there -- but on my machine it seems to have caused Ant/Ivy to alter the way it orders elements in the classpath. I think it should be pretty easy to find the offending transitive dependency by looking at the reports in build/ivy/report.

bq. A pure-red diff! Nothing better than removing code.
bq. Nice! Nothing like a patch that is entire deletes

I agree that removing unnecessary code has a lot of benefits. The problem is that HIVE-4148 removed metadata, not code. The metadata that was removed were statements of fact of the form "module A directly depends on module B". If we decide that we're incapable of adequately maintaining these facts on a per-module basis then I'm fine with using a global set of facts instead. I also have no objection to removing inaccurate facts. However, I strongly object to removing facts simply to make these files shorter.
, I've tracked down why antlr 2.7.7 is included. The antlr POM file is broken. It depends on ST4 and stringtemplate which depend on antlr 2.7.7. Cute. Patch .1 resolves that by manually pulling in antlrs transitive dependencies. With the patch applied:

{noformat}
% find . -name "*antlr*jar"
./build/dist/lib/antlr-runtime-3.4.jar
./build/ivy/lib/default/antlr-3.4.jar
./build/ivy/lib/default/antlr-runtime-3.4.jar
./build/ivy/lib/test/antlr-3.4.jar
./build/ivy/lib/test/antlr-runtime-3.4.jar
{noformat}

No idea where you are getting 3.0.1 from. But with 2.7.7 gone, that should at least fix the build issue.

I like the single parent file/ivy inheritance approach. Is everyone onboard with that? Can I open a new jira and start consolidating?

, @Gunther: Thanks for providing a patch! I verified that it fixes the problem.

If you add stringtemplate.version and ST4.version to ivy/libraries.properties I will +1 and commit this patch.

bq. I like the single parent file/ivy inheritance approach. Is everyone onboard with that? Can I open a new jira and start consolidating?

+1
, As requested: Now with variables for ST4 + stringtemplate version., +1. Will commit if tests pass., Committed to trunk. Thanks Gunther!, Integrated in Hive-trunk-h0.21 #2025 (See [https://builds.apache.org/job/Hive-trunk-h0.21/2025/])
    HIVE-4187. QL build-grammar target fails after HIVE-4148 (Gunther Hagleitner via cws) (Revision 1459014)

     Result = FAILURE
cws : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1459014
Files : 
* /hive/trunk/ivy/libraries.properties
* /hive/trunk/metastore/ivy.xml
, Integrated in Hive-trunk-hadoop2 #138 (See [https://builds.apache.org/job/Hive-trunk-hadoop2/138/])
    HIVE-4187. QL build-grammar target fails after HIVE-4148 (Gunther Hagleitner via cws) (Revision 1459014)

     Result = FAILURE
cws : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1459014
Files : 
* /hive/trunk/ivy/libraries.properties
* /hive/trunk/metastore/ivy.xml
]