[[~taksaito]: this possibly a WONTFIX scenario - the char() columns are encoded in TextFile by padding it with extra spaces. You can probably verify that the HDFS file actually contains extra spaces., Thanks for the suggestion, [~gopalv]
Yes, HDFS contains extra spaces:
{noformat}
0: jdbc:hive2://ts-0531-1.openstacklocal:2181> dfs -cat hdfs://ts-0531-5.openstacklocal:8020/apps/hive/warehouse/test_text/000000_0
0: jdbc:hive2://ts-0531-1.openstacklocal:2181> ;
+-------------------+--+
|    DFS Output     |
+-------------------+--+
| horton works      |
+-------------------+--+
{noformat}
Cc: [~mmccline], Well, well.

You might be amazed to know this issue *cannot be fixed*!

It only happens for tables and not for partitioned tables.  With tables there is no original schema kept like you get with the original schema being kept as the partition schema.  So, there is no way to know that the original table was written as CHAR and thus no way to know the STRING value needs to be white space trimmed.  And, we cannot indiscriminately trim all STRING fields., The bigger thing it points to is that Schema Evolution is *very treacherous* for TEXTFILE format on tables., On refresh, I see Gopal's prediction.  It is correct., Thanks for your explanation. I have a follow-up question. If non-partitioned table does not keep original schema, how does conversion of type happen in such a case? I'm  just trying to understand better. Thanks!, Good question.  There is no "conversion" -- just a different interpretation of the text fields!   For the table with a CHAR changed to STRING, the original CHAR field is just interpreted as a STRING (hence the extra blanks).]