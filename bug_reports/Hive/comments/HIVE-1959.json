[In startQuery() of HiveHistory.java  QueryInfo object  put in to  queryInfoMap and while executing the query QueryInfo object is used after getting from the queryInfoMap But this object is not removed from the map so these objects are keep on increasing in the map and resulted the memory leak. This object can be removed from the map in endQuery() of HiveHistory.java

Same thing is happening for TaskInfo objects also.
The TaskInfo objects can be removed from the map in endTask() of HiveHistory.java, How about using WeakHashMap in place of using HashMap instead of explicitly removing from the map! The WeakHashMap can be used for both the fields- queryInfoMap and taskInfoMap of HiveHistory.java class., +1 on WeakHashMap. HiveHistory.endQuery() is called at the finally clause of Driver.execute(). There are some early exits (should be changed in my opinion. I will file another JIRA to fix this) in the loop of execute() which will bypass the finally clause. Using WeakHashMap can prevent leaks in this case.  , Thanks Ning Zhang & ಕರಿಯ  for the comments. 

If we use WeakHashMap when no one have the reference for the QueryInfo or TaskInfo objects other than weakhashmap if GC happens these objects will be garbage collected.

But in our case the QueryInfo or TaskInfo objects will be accessed in different stages like StartQuery ,setQueryProperty and  EndQuery etc.

For Ex some queries will execute more time (May be some hours), At the time of start query it will put the data in to weakhashmap after long time endQuery() is executed in between some times it will accesses the weakhashmap from the methods like 
setQueryProperty().

But by that time if GC triggered there is a chance to garbage collect these objects(QueryInfo & TaskInfo). This case we will lose the information of QueryInfo & TaskInfo objects. Here we don't have control, GC will have the control to remove the objects.

Using HashMap and removing objects from the map through code, this case we will have control.

@Ning Zhang : There are some early exits (should be changed in my opinion. I will file another JIRA to fix this) in the loop of execute() which will bypass the finally clause.
This case we have to change the implementation, present implementation is calling System.exit(9) it will exit from JVM. I will provide a patch for this issue., Sorry Chinna, I must have missed your last comment. 

Yeah, I think it will work with the current patch. I will start testing and commit if it passes. , While WeakHashMap may work logically it may not be our best option. If we only find one instance of a class in the entire code base I generally believe that is breaking some un-established internal coding standards and introducing a behaviour that is not in line with the rest of the systems. (A two mile view), Comitted. Thanks Chinna!]