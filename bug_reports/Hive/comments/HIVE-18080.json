[[~teddy.choi]: Can you help view it as you are familiar with the code, thanks!, [~teddy.choi]: I retested {{VectorizedLogicBench#IfExprLongColumnLongColumnBench}},{{VectorizedLogicBench#IfExprRepeatingLongColumnLongColumnBench}} and
{{VectorizedLogicBench#IfExprLongColumnRepeatingLongColumnBench}} in AVX1 and AVX2
the result is 
AVX1
{code}
o.a.h.b.v.VectorizedLogicBench.IfExprLongColumnLongColumnBench.bench             avgt       20  1595748.343 Â± 16887.073  us/op
o.a.h.b.v.VectorizedLogicBench.IfExprLongColumnRepeatingLongColumnBench.bench    avgt       20  1735827.809 Â± 18129.173  us/op
o.a.h.b.v.VectorizedLogicBench.IfExprRepeatingLongColumnLongColumnBench.bench    avgt       20  1768004.314 Â± 14489.511  us/op
{code}

AVX2
{code}
o.a.h.b.v.VectorizedLogicBench.IfExprLongColumnLongColumnBench.bench             avgt       20  1691559.843 Â± 118986.372  us/op
o.a.h.b.v.VectorizedLogicBench.IfExprLongColumnRepeatingLongColumnBench.bench    avgt       20  1837327.456 Â±  76084.038  us/op
o.a.h.b.v.VectorizedLogicBench.IfExprRepeatingLongColumnLongColumnBench.bench    avgt       20  1760544.684 Â±  93512.838  us/op
{code}

the test script I used
{code}
export JAVA_HOME=/home/zly/sr601/jmh/jdk-9.0.1/
export PATH=$JAVA_HOME/bin:$PATH
export LD_LIBRARY_PATH=/home/zly/sr601/jmh/jdk-9.0.1/mylib
for i in 0 1 2; do
java -server -XX:UseAVX=1 -jar benchmarks.jar org.apache.hive.benchmark.vectorization.VectorizedLogicBench * -wi 10 -i 20 -f 1 -bm avgt -tu us >log.logic.avx1.single.$i & export pid=$!
taskset -cp 1 $pid
wait $pid
done

for i in 0 1 2; do
java -server -XX:UseAVX=2 -jar benchmarks.jar org.apache.hive.benchmark.vectorization.VectorizedLogicBench * -wi 10 -i 20 -f 1 -bm avgt -tu us >log.logic.avx2.single.$i & export pid=$!
taskset -cp 1 $pid
wait $pid
done
{code}

It seems that no much improvement comparing AVX1 and AVX2.  Can you spend some time to help find the root cause? Thanks!
, [~mmccline]: can you help see the issue? very thanks!, [~kellyzly]: post the output for "-XX:PrintAssembly" so that we can compare the AVX1 and AVX2 native code.

See comments on HIVE-10180 which have the relevant output for a different benchmark., [~gopalv]: use
{code}
java  -XX:+UseSuperWord -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly -Xcomp -XX:CompileCommand=*IfExprLongColumnLongColumn.evaluate  -server -XX:UseAVX=1 -jar benchmarks.jar org.apache.hive.benchmark.vectorization.VectorizedLogicBench * -wi 10 -i 5 -f 2 -bm avgt -tu us > log_logic.avx1 2>&1
{code}

 the output of AVX1 is attached, sorry i'm not very understand the assembly code. Can you help to view it, thanks!, the output of AVX1 will be uploaded later., the output of the -XX:+PrintAssembly is too much, I attached part of the output as log_logic.avx1.part. The problem here is to 
locate the assembly code related to the expression used in IfExprLongColumnLongColumnBench
{code}
  outputVector[i] = (~(vector1[i] - 1) & vector2[i]) | ((vector1[i] - 1) & vector3[i]);
{code}

Not very understand assembly, need time to investigate.
, [~kellyzly]: If you're running this on a linux machine, can you please use -prof perfasm in JMH?, [~gopalv]: using following command with {{-prof perfasm}} to run the VectorizedLogicBench#IfExprLongColumnLongColumnBench in AVX1
{code}
export JAVA_HOME=/home/zly/sr601/jdk-9.0.1/
export PATH=$JAVA_HOME/bin:$PATH
export LD_LIBRARY_PATH=/home/zly/sr601/jdk-9.0.1/mylib
i=0
java -server -XX:UseAVX=1 -jar benchmarks.jar  -prof perfasm org.apache.hive.benchmark.vectorization.VectorizedLogicBench * -wi 10 -i 20 -f 1 -bm avgt -tu us >log.logic.avx1.single.$i & export pid=$!
taskset -cp 1 $pid
wait $pid
{code}

the [log.logic.avx1.single.0|https://issues.apache.org/jira/secure/attachment/12898421/log.logic.avx1.single.0] attached, find some warning
{code}
PrintAssembly processed: 51105 total address lines.
Perf output processed (skipped 1.020 seconds):
 Column 1: cycles (0 events)
 Column 2: instructions (0 events)

....[Hottest Regions]...............................................................................
....................................................................................................
                  <totals>

....[Hottest Methods (after inlining)]..............................................................
....................................................................................................
                  <totals>

....[Distribution by Area]..........................................................................
....................................................................................................
                  <totals>

WARNING: The perf event count is suspiciously low (0). The performance data might be
inaccurate or misleading. Try to do the profiling again, or tune up the sampling frequency.
{code}, [~gopalv]:
{{-prof perfasm}} depends [PrintAssembly|https://wiki.openjdk.java.net/display/HotSpot/PrintAssembly] while PrintAssembly depends on [Kenai project|http://www.oracle.com/splash/kenai.com/decommissioning/index.html]. Oracle closes 
Kenai project. I download hsdis.so from others. Not sure this outdated hsdis.so can print assembly the instruction of AVX512 or not.
, I use vtune to see the assembly code of following code(If expression)
{code}
import java.util.Random;

/**
 *  * Created by lzhang66 on 11/13/2017.
 *   */
public class If {
  static long[] in1, in2,in3,out;
  public static void main(String[] args){
    if( args.length == 3){
      long warmIter=Long.parseLong(args[0]);
      System.out.println("warmIter num:"+warmIter);
      long iter=Long.parseLong(args[1]);
      System.out.println("iter num:"+iter);
      boolean enableHive10238= Boolean.parseBoolean(args[2]);
      long startTime = System.currentTimeMillis();
      calc(warmIter, iter,enableHive10238);
      long endTime   = System.currentTimeMillis();
      long totalTime = endTime - startTime;
      System.out.println("Total time:"+totalTime);
    }else{
      System.out.println("2 parameter need. Like java ReductionInt [warmIter] [iter] [enable");
      System.exit(0);
    }

  }

  public static void calc(long warmIter, long iter, boolean enableHive10238)
  {
    in1 = new long [1026];
    in2 = new long [1026];
    in3 = new long [1026];

    Random rand = new Random(435437646);
    for(int i=0; i<in1.length; i++)
    {
      in1[i] = rand.nextLong();
    }

    for(int i=0; i<in2.length; i++)
    {
      in2[i] = rand.nextLong();
    }

    for (int j = 0; j < warmIter; j++)
    {
       reduction_kernel(in1, in2, in1.length, enableHive10238);
    }

    long start = System.currentTimeMillis();
    for (int j = 0; j < iter; j++)
    {
      reduction_kernel(in1, in2, in1.length, enableHive10238);
    }

    long elapsedTimeMillis = System.currentTimeMillis()-start;
    System.out.println("Iterations Per milli Second:" + (iter)/elapsedTimeMillis+" ipms");
  }

  private static void reduction_kernel(long[] in1, long[] in2, int length, boolean enableHive10238) {
    out = new long[1026];
    if (enableHive10238) {
      for (int i1 = 0; i1 < in1.length; i1++) {
        out[i1] = (~(in1[i1] - 1L) & in2[i1]) |(( in1[i1] - 1L)& in3[i1]);
      }
    } else {
      for (int i1 = 0; i1 < in1.length; i1++) {
        out[i1] = (in1[i1] - 1L)>0? in2[i1]: in3[i1];
      }
    }
  }
}
{code}

run {{java If 5000 50000 true}} to enable the patch of HIVE-10238  and run {{java  If 5000 50000 false}} to disable the patch of HIVE-10238. Here there is three parameters, para1 means warmIter number, para2 means  Iter number, para3 means with/wot HIVE-10238's patch.  In the attached picture, I saw AVX2 instructions of if expression( {code}(in1[i1] - 1L)>0? in2[i1]: in3[i1]{code}).]