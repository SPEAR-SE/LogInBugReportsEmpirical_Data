[[~sseth] can you please take a look? https://reviews.apache.org/r/62048/ 
Just to make sure there isn't some hidden behavior that I'm missing. The tests appear to pass., 

Here are the results of testing the latest attachment:
https://issues.apache.org/jira/secure/attachment/12885036/HIVE-17431.patch

{color:green}SUCCESS:{color} +1 due to 2 test(s) being added or modified.

{color:red}ERROR:{color} -1 due to 7 failed/errored test(s), 11031 tests executed
*Failed tests:*
{noformat}
TestTxnCommandsBase - did not produce a TEST-*.xml file (likely timed out) (batchId=280)
org.apache.hadoop.hive.cli.TestBeeLineDriver.testCliDriver[create_merge_compressed] (batchId=239)
org.apache.hadoop.hive.cli.TestCliDriver.testCliDriver[auto_sortmerge_join_2] (batchId=46)
org.apache.hadoop.hive.cli.TestCliDriver.testCliDriver[insert_values_orig_table_use_metadata] (batchId=61)
org.apache.hadoop.hive.cli.TestMiniSparkOnYarnCliDriver.testCliDriver[spark_vectorized_dynamic_partition_pruning] (batchId=169)
org.apache.hadoop.hive.cli.TestMiniTezCliDriver.testCliDriver[explainanalyze_2] (batchId=100)
org.apache.hadoop.hive.cli.TestPerfCliDriver.testCliDriver[query14] (batchId=234)
{noformat}

Test results: https://builds.apache.org/job/PreCommit-HIVE-Build/6653/testReport
Console output: https://builds.apache.org/job/PreCommit-HIVE-Build/6653/console
Test logs: http://104.198.109.242/logs/PreCommit-HIVE-Build-6653/

Messages:
{noformat}
Executing org.apache.hive.ptest.execution.TestCheckPhase
Executing org.apache.hive.ptest.execution.PrepPhase
Executing org.apache.hive.ptest.execution.ExecutionPhase
Executing org.apache.hive.ptest.execution.ReportingPhase
Tests exited with: TestsFailedException: 7 tests failed
{noformat}

This message is automatically generated.

ATTACHMENT ID: 12885036 - PreCommit-HIVE-Build, test failures are unrelated, {code}
refreshLocalResourcesFromConf(conf);
{code}
in openInternal seems to be a potential problem area. Either it is missing LRs for the new session, or this code should not exist anymore.

For the most part, I suspect some of the other parameters in this class can be made final as well.

Unrelated to the patch:
- There's places where the queue apparently gets changed from TezSessionPool. Didn't know a single SessionState could be moved across queues. Seems unnecessary.
- replaceSession - maybe simpler to move the implementation into TezSessionState itself. e.g. additionLocalResourcesNotFromConf is fetched and then passed back in to the open method..., W.r.t. the logical problems (the other stuff I will address in due course) - looking at code in branch-2, before all the fancy changes, I see many paths where the user config would be applied; however, those are all for a new, or failed and reopened, session.
The main pool use path goes like this:
TezTask calls getSession with its unique config. That calls canWork..., that only checks doAs and queue name; then calls the private getSession/2. That again checks doAs and queue, also validates the config; however, if doAs and queue check out, it returns the session from the pool without ever using conf again.
Then, the only way conf interacts with the session is if it's not open (shouldn't happen with pool sessions on main path), or to add resources. Adding resources passes the conf from TezTask around, and doesn't interact with session's own config. Only resources are changed based on the external (to the session) conf object.
So, on this path the user config is never applied (beyond what's sent with the DAG, if anything).

So it seems like it's inconsistent between special cases (custom queue, doAs, reopen, pool session not open - the new session will be opened with the new conf from TezTask) and the normal case where the session will not get the new config, it will just come from the pool with whatever config it had. When the files are missing it looks like they are added without reopen (first in in TezTask::updateSession, and then eventually via calling addAppMasterLocalFiles in submit).
Given that the normal case appears to work, I think the whole new config propagation is unnecessary (beyond doAs, queue, and file list verification). Does this make sense?

cc [~hagleitn] [~vikram.dixit] [~sseth] I'm not sure who's more familiar with this logic :)


, So. new sessions use new configs (and there's enough checks in place to reset these sessions / launch new ones if sufficient context changes), and when there's not sufficient context change, then local reources are added for the DAG?
Makes sense]