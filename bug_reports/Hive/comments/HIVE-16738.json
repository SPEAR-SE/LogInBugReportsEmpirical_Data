[[~anishek], not sure I understand. Note that ObjectStore/RawStore is a thread local (see HiveMetaStore.java). , [~mohitsabharwal], i am looking at use cases where we have two separate instances of HS2 running in different machines(say HS1 and HS2)  with both of them connecting to a common hive metastore and the clients re connecting to one of the hive server 2 machines randomly, 

client 1 connects to HS1
client 2 connects to hs2

threads on HS1 and HS2 should be able to get a lock on {{NOTIFICATION_TBL_LOCK}} at the same time => hence entering the critical section to update the notification Event which would read the notification sequence entry with primary key 1 in both cases and update to the same value for possibly two events ?, mvn 
{code}
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>3.5</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>5.1.42</version>
        </dependency>
{code}

start mysql with *--innodb-lock-wait-timeout=10*

{code}
import com.google.common.util.concurrent.ThreadFactoryBuilder;
import org.apache.commons.lang3.exception.ExceptionUtils;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Date;
import java.util.concurrent.BrokenBarrierException;
import java.util.concurrent.CyclicBarrier;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;

public class TwoConnections {

  static {
    try {
      Class.forName("com.mysql.jdbc.Driver");
    } catch (ClassNotFoundException e) {
      throw new RuntimeException(e);
    }
  }

  interface Function {
    void execute(Connection connection) throws SQLException;
  }

  private static void process(Function function) throws SQLException {
    try (Connection con = DriverManager.getConnection(
        "jdbc:mysql://localhost:3306/anishek", "root", "")) {
      con.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);
      function.execute(con);
      return;
    } catch (Exception e) {
      System.out.println("on thread: " + Thread.currentThread().getName());
      e.printStackTrace();
    }
    throw new RuntimeException("Failure in Execution");
  }

  static abstract class BaseFunction implements Function {
    String threadName = Thread.currentThread().getName();

    void log(String message) {
      System.out.println(threadName + " :: " + message);
    }

    long read(Connection connection) throws SQLException {
      try (Statement statement = connection.createStatement()) {
        ResultSet resultSet =
            statement.executeQuery("select NEXT_EVENT_ID from NOTIFICATION_SEQUENCE;");
        if (resultSet.next()) {
          return resultSet.getLong(1);
        }
      }
      throw new RuntimeException(
          "could not read the value in " + Thread.currentThread().getName());
    }
  }

  static class UpdateNotificationFunction extends BaseFunction {

    private final CyclicBarrier barrier;

    UpdateNotificationFunction(CyclicBarrier barrier) {
      this.barrier = barrier;
    }

    @Override
    public void execute(Connection connection) throws SQLException {
      try {
        barrier.await(15L, TimeUnit.SECONDS);
      } catch (InterruptedException | BrokenBarrierException | TimeoutException e) {
        System.out.printf(
            "Barrier Exception :: " + Thread.currentThread().getName() + " :: " + ExceptionUtils
                .getStackTrace(e));
      }
      connection.setAutoCommit(false);
      long current = read(connection);
      log("Read value: " + current);
      Statement statement = connection.createStatement();
      String value = String.valueOf(current + 1);
      statement.execute(
          "update NOTIFICATION_SEQUENCE set NEXT_EVENT_ID=" + value
              + " where NNI_ID=1");
      connection.commit();
      log("committed " + value + " :: " + new Date());
    }
  }

  public static void main(String[] args)
      throws ClassNotFoundException, SQLException, InterruptedException {

    int numberOfThreads = 20;
    CyclicBarrier barrier = new CyclicBarrier(numberOfThreads, () -> System.out
        .println("all threads reached the barrier , they will start executing now"));

    ExecutorService service = Executors.newFixedThreadPool(
        numberOfThreads,
        new ThreadFactoryBuilder().setNameFormat("thread-%d").build()
    );

    for (int i = 0; i < numberOfThreads; i++) {
      int localTemp = i;
      service.submit(() -> {
        try {
          process(new UpdateNotificationFunction(barrier));
        } catch (SQLException e) {
          System.out.println(String.valueOf(localTemp) + " :: failed with exception + " +
              ExceptionUtils.getStackTrace(e));
        }
      });
    }

    service.shutdown();
    service.awaitTermination(1, TimeUnit.MINUTES);
  }
}
{code}, [~anishek] I think the NOTIFICATION_TBL_LOCK is acquired on the HMS server instead of the HS2 server. The DbNotificationListener is run by the HiveMetaStore.java, not the HMS client., [~spena] true its the HMS server, I was just thinking of the use case where the metastore server is run as embedded within HS2., Ah, thanks, I forgot bout the embedded metastore.  So this is issue is the same as HIVE-16886 then. Btw, are you working on this patch? I was thinking about providing a patch for HIVE-16886, but if you have some work in progress, then I'll wait., No, I havent started on this one, please go ahead., Hive 3.0.0 has been released so closing this jira.]