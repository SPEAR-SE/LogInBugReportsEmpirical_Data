[HIVE-6907.1.patch - Doing an explicit doAs() asynchronous thread with the user in the thrift thread solves the problem.
, HIVE-6907.2.patch - minor error message improvement
, Dupe of HIVE-6245 ?, bq. Dupe of HIVE-6245 ?
HIVE-6245 was talking about issue when remote metastore is used. There have been changes that should fix the issue for remote metastore as I commented there just now.
This fixes the case when embedded metastore is used in hive server2.
, cc [~vaibhavgumashta] [~prasadm] [~jnp] [~ashutoshc] [~xuefuz] [~rhbutani]
Since we are going to need another 0.13 rc because pom.xml was not included, I would like to get this in into the new rc. This is a serious concurrency issue, I think we should include in 0.13 .
Also, I am hoping we can avoid the 24 hr wait before commit for this one, otherwise we will end up delaying the RC further.
Can one or more people review it ? (Or at least approve including it without 24 hr commit wait period).
, +1 (non-binding). 

I've tested the fix with following 7 combinations:
*Binary mode*
1. Secure MR: 291 passed in 2061.69 seconds
2. Unsecure MR: 334 passed in 2011.29 seconds
3. Secure Tez:	 2 failed, 378 passed in 2016.36 seconds (All create index failures - known issue)
4. Unsecure Tez: 4 failed, 435 passed in 1997.65 seconds (All create index failures - known issue)

*Http mode*
5. Secure MR: 287 passed in 2161.14 seconds
6. Secure Tez:	 1 failed, 369 passed in 2142.57 seconds(All create index failures - known issue)
7. Unsecure Tez: 3 failed, 429 passed in 2137.11 seconds (All create index failures - known issue)

My setup: Ran tests for 30 mins, with 20 test threads (firing different queries in parallel; [~deepesh], [~taksaito] thanks for the test code) and HS2 running only 10 async threads., [~thejas] Thanks for fixing the issue.

Here is the root cause: ideally when a foreground thread creates a background thread, the thread's Access Control Context is inherited (http://docs.oracle.com/javase/7/docs/technotes/guides/security/spec/security-spec.doc4.html). However, in our case, we're using a thread pool; so threads are not necessarily created by the foreground thread. Therefore, an explicit doAs is necessary when switching to background thread., +1. looks good to me.

A minor comment.
bq. runInternal(getConfigForOperation());
  If opConfig is final, the call to get the config may not be needed., HIVE-6907.3.patch - addressing review comment
, +1 Root cause identified by [~vgumashta] seems like plausible explanation. , +1 for 0.13, I have run the tests and results look good.
[~ashutoshc] Can you commit this patch ? I have trouble doing that after the password reset.
, Committed to trunk and 0.13
Thanks Thejas, Vaibhav, Jitendra, Ashutosh., [~thejas] Doesn't this break use case for doAs disabled?, [~navis] If doAs is disabled, then the HS2 user would end up doing a doAs as itself.  I need to check if hadoop allows that without proxy user configuration. Let me check. Thats a good question. Do let me know if you know about that. 
cc [~jnp], I remember in that case (no proxy user), unix ugi who started CLI or hiveserver would be used. 

Below is some part of patch fixing similar issue in our product version (HiveMetaStoreClient).
{noformat}
+            SessionBase session = SessionBase.get();
             // Call set_ugi, only in unsecure mode.
             try {
-              UserGroupInformation ugi = shim.getUGIForConf(conf);
+              UserGroupInformation ugi;
+              if (session != null) {
+                ugi = shim.createRemoteUser(session.getUserName(), session.getGroupNames());
+              } else {
+                ugi = shim.getUGIForConf(conf);
+              }
{noformat}, I ran some tests to verify it works with doAs=false and no proxy user setting for the hive server2 process user. (Also added some logging to verify that this code path is used - which was useful as it reminded me that this code path doesn't get used with hive 0.12 jdbc driver!)

I have verified that this patch works with unsecure mode, but I haven't yet verified the behavior with kerberos secured cluster.

{code}
beeline> !connect jdbc:hive2://localhost:10000/ user fakepwd org.apache.hive.jdbc.HiveDriver
Connecting to jdbc:hive2://localhost:10000/
Connected to: Apache Hive (version 0.13.0)
Driver: Hive JDBC (version 0.13.0)
Transaction isolation: TRANSACTION_REPEATABLE_READ

0: jdbc:hive2://localhost:10000/> set hive.server2.enable.doAs;                                                      
+---------------------------------+
|               set               |
+---------------------------------+
| hive.server2.enable.doAs=false  |
+---------------------------------+
1 row selected (0.007 seconds)
0: jdbc:hive2://localhost:10000/> set hadoop.proxyuser.hive.groups;                                                  
+--------------------------------------------+
|                    set                     |
+--------------------------------------------+
| hadoop.proxyuser.hive.groups is undefined  |
+--------------------------------------------+
1 row selected (0.009 seconds)
0: jdbc:hive2://localhost:10000/> set hadoop.proxyuser.hive.hosts;    
+-------------------------------------------+
|                    set                    |
+-------------------------------------------+
| hadoop.proxyuser.hive.hosts is undefined  |
+-------------------------------------------+
1 row selected (0.007 seconds)
0: jdbc:hive2://localhost:10000/> set hadoop.proxyuser.oozie.hosts;
+---------------------------------+
|               set               |
+---------------------------------+
| hadoop.proxyuser.oozie.hosts=*  |
+---------------------------------+
1 row selected (0.007 seconds)
0: jdbc:hive2://localhost:10000/> select count(*) from sample_07 ;                                                   
+------+
| _c0  |
+------+
| 823  |
+------+

{code}, [~vaibhavgumashta] Also verified with a secure cluster that this patch works with doAs disabled and no proxy entries for hive server2 user in core-site.xml . Thanks Vaibhav!
Also talked to [~jnp] (who has done lot of security work in core hadoop), this doAs as same user does not require any proxy user entries.
So we have both experimental and theoretical validation! :)
, Sorry, I've been strayed a little (security always makes me). The code above I've shown in above comment is not for fixing this. The problem is that when we uses authorization with AuthorizationPreEventListener in metastore with doAs disabled. With this configuration, metastore would always try authorize privileges of HS2 user. , When doAs is disabled, aren't the metastore actions already taking place as HS2 user (without this change)? With doAs disabled, HiveSessionProxy is not used in SessionManager, so metastore actions would be taking place as HS2 user. Isn't that the behavior you would expect from doAs being disabled (ie actions take place as HS2 user)?
, Yes, it's related to HIVE-6478, not to this issue. Some authorizations is taken place in metastore and, in stand-alone mode, we cannot hand-over username in SessionState to metastore because SessionState is in hive-exec which is not accessible from hive-metastore. Also in remote metastore, current set_ugi hands over HS2 user instead of user in session state.

Should we fix this, too?]