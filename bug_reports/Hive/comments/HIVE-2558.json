[Hi Robert,

In the above query, timestamp is used as a column datatype of the table rrt.
So when u want to use the timestamp in the where clause of select statement, we should be able to tell that the data we are searching is a timestamp value.
Giving the field value in single/double quote will be treated as a string value and not timestamp value.
So when u wanted to retreive the results that satisfy the timestamp value you are specifying in where clause, the query should be

select * from rrt where r = unix_timestamp('1970-01-01 00:00:01');

This would be interpreted as data u r searching is a timestamp. 
Hope it helps 


Thanks,
Priya, In the query:

select * from rrt where r = '1970-01-01 00:00:01';

you say that the problem is that the field is treated as a string not as a time stamp but if it is treated as a string then either there should be a proper conversion of the string to timestamp (or vice versa) to do the compare or an error should be raised, you cannot just compare the bytes (or what ever hive is doing) and return an invalid answer.

The first query:

select * from rrt where r in ('1970-01-01 00:00:01');

does the right thing:
FAILED: Error in semantic analysis: Line 1:26 Wrong arguments ''1970-01-01 00:00:01'': The arguments for IN should be the same type! Types are: {timestamp IN (string)}
, Actually I misunderstood what hive is doing.  It is converting the string to a number and then comparing it to the timestamp:

select * from rrt where r = '28801';
OK
1970-01-01 00:00:01

While this does pass the reasonability test, I don't think its the right thing to do.  It would be much better to implicitly cast the string constant to a timestamp., This has changed as of HIVE-5204 - the comparison is done as string]