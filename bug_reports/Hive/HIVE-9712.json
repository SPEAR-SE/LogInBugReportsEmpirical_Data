{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "fields": {
        "aggregateprogress": {
            "progress": 0,
            "total": 0
        },
        "aggregatetimeestimate": null,
        "aggregatetimeoriginalestimate": null,
        "aggregatetimespent": null,
        "assignee": {
            "active": true,
            "avatarUrls": {
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452",
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452"
            },
            "displayName": "Prasanth Jayachandran",
            "key": "prasanth_j",
            "name": "prasanth_j",
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=prasanth_j",
            "timeZone": "America/Los_Angeles"
        },
        "components": [{
            "description": "Optimizations which are dependent on runtime",
            "id": "12323401",
            "name": "Physical Optimizer",
            "self": "https://issues.apache.org/jira/rest/api/2/component/12323401"
        }],
        "created": "2015-02-18T02:47:20.000+0000",
        "creator": {
            "active": true,
            "avatarUrls": {
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=mmokhtar&avatarId=21863",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=mmokhtar&avatarId=21863",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=mmokhtar&avatarId=21863",
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=mmokhtar&avatarId=21863"
            },
            "displayName": "Mostafa Mokhtar",
            "key": "mmokhtar",
            "name": "mmokhtar",
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=mmokhtar",
            "timeZone": "America/Los_Angeles"
        },
        "customfield_10010": null,
        "customfield_12310191": null,
        "customfield_12310192": null,
        "customfield_12310220": null,
        "customfield_12310222": "1_*:*_1_*:*_6198497467_*|*_5_*:*_1_*:*_0",
        "customfield_12310230": null,
        "customfield_12310250": null,
        "customfield_12310290": null,
        "customfield_12310291": null,
        "customfield_12310300": null,
        "customfield_12310310": "0.0",
        "customfield_12310320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12310920": "9223372036854775807",
        "customfield_12310921": null,
        "customfield_12311020": null,
        "customfield_12311024": null,
        "customfield_12311120": null,
        "customfield_12311820": "0|i25r2v:",
        "customfield_12312022": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "customfield_12312026": null,
        "customfield_12312220": null,
        "customfield_12312320": null,
        "customfield_12312321": null,
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312324": null,
        "customfield_12312325": null,
        "customfield_12312326": null,
        "customfield_12312327": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312330": null,
        "customfield_12312331": null,
        "customfield_12312332": null,
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12312335": null,
        "customfield_12312336": null,
        "customfield_12312337": null,
        "customfield_12312338": null,
        "customfield_12312339": null,
        "customfield_12312340": null,
        "customfield_12312341": null,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Apr 30 20:35:37 UTC 2015",
        "customfield_12312720": null,
        "customfield_12312823": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "customfield_12312923": null,
        "customfield_12313422": "false",
        "customfield_12313520": null,
        "description": "TPC-DS Q66 generates and in-efficient plan because cardinality estimate of dimension table gets set to 9223372036854775807.\n\n{code}\n    Map 10 \n            Map Operator Tree:\n                TableScan\n                  alias: ship_mode\n                  filterExpr: ((sm_carrier) IN ('DIAMOND', 'AIRBORNE') and sm_ship_mode_sk is not null) (type: boolean)\n                  Statistics: Num rows: 0 Data size: 47 Basic stats: PARTIAL Column stats: COMPLETE\n                  Filter Operator\n                    predicate: ((sm_carrier) IN ('DIAMOND', 'AIRBORNE') and sm_ship_mode_sk is not null) (type: boolean)\n                    Statistics: Num rows: 9223372036854775807 Data size: 9223372036854775807 Basic stats: COMPLETE Column stats: COMPLETE\n                    Select Operator\n                      expressions: sm_ship_mode_sk (type: int)\n                      outputColumnNames: _col0\n                      Statistics: Num rows: 9223372036854775807 Data size: 9223372036854775807 Basic stats: COMPLETE Column stats: COMPLETE\n                      Reduce Output Operator\n                        key expressions: _col0 (type: int)\n                        sort order: +\n                        Map-reduce partition columns: _col0 (type: int)\n                        Statistics: Num rows: 9223372036854775807 Data size: 9223372036854775807 Basic stats: COMPLETE Column stats: COMPLETE\n            Execution mode: vectorized\n{code}\n\nFull plan \n{code}\nexplain  \n\nselect   \n         w_warehouse_name\n \t,w_warehouse_sq_ft\n \t,w_city\n \t,w_county\n \t,w_state\n \t,w_country\n        ,ship_carriers\n        ,year\n \t,sum(jan_sales) as jan_sales\n \t,sum(feb_sales) as feb_sales\n \t,sum(mar_sales) as mar_sales\n \t,sum(apr_sales) as apr_sales\n \t,sum(may_sales) as may_sales\n \t,sum(jun_sales) as jun_sales\n \t,sum(jul_sales) as jul_sales\n \t,sum(aug_sales) as aug_sales\n \t,sum(sep_sales) as sep_sales\n \t,sum(oct_sales) as oct_sales\n \t,sum(nov_sales) as nov_sales\n \t,sum(dec_sales) as dec_sales\n \t,sum(jan_sales/w_warehouse_sq_ft) as jan_sales_per_sq_foot\n \t,sum(feb_sales/w_warehouse_sq_ft) as feb_sales_per_sq_foot\n \t,sum(mar_sales/w_warehouse_sq_ft) as mar_sales_per_sq_foot\n \t,sum(apr_sales/w_warehouse_sq_ft) as apr_sales_per_sq_foot\n \t,sum(may_sales/w_warehouse_sq_ft) as may_sales_per_sq_foot\n \t,sum(jun_sales/w_warehouse_sq_ft) as jun_sales_per_sq_foot\n \t,sum(jul_sales/w_warehouse_sq_ft) as jul_sales_per_sq_foot\n \t,sum(aug_sales/w_warehouse_sq_ft) as aug_sales_per_sq_foot\n \t,sum(sep_sales/w_warehouse_sq_ft) as sep_sales_per_sq_foot\n \t,sum(oct_sales/w_warehouse_sq_ft) as oct_sales_per_sq_foot\n \t,sum(nov_sales/w_warehouse_sq_ft) as nov_sales_per_sq_foot\n \t,sum(dec_sales/w_warehouse_sq_ft) as dec_sales_per_sq_foot\n \t,sum(jan_net) as jan_net\n \t,sum(feb_net) as feb_net\n \t,sum(mar_net) as mar_net\n \t,sum(apr_net) as apr_net\n \t,sum(may_net) as may_net\n \t,sum(jun_net) as jun_net\n \t,sum(jul_net) as jul_net\n \t,sum(aug_net) as aug_net\n \t,sum(sep_net) as sep_net\n \t,sum(oct_net) as oct_net\n \t,sum(nov_net) as nov_net\n \t,sum(dec_net) as dec_net\n from (\n    select \n \tw_warehouse_name\n \t,w_warehouse_sq_ft\n \t,w_city\n \t,w_county\n \t,w_state\n \t,w_country\n \t,concat('DIAMOND', ',', 'AIRBORNE') as ship_carriers\n        ,d_year as year\n \t,sum(case when d_moy = 1 \n \t\tthen ws_sales_price* ws_quantity else 0 end) as jan_sales\n \t,sum(case when d_moy = 2 \n \t\tthen ws_sales_price* ws_quantity else 0 end) as feb_sales\n \t,sum(case when d_moy = 3 \n \t\tthen ws_sales_price* ws_quantity else 0 end) as mar_sales\n \t,sum(case when d_moy = 4 \n \t\tthen ws_sales_price* ws_quantity else 0 end) as apr_sales\n \t,sum(case when d_moy = 5 \n \t\tthen ws_sales_price* ws_quantity else 0 end) as may_sales\n \t,sum(case when d_moy = 6 \n \t\tthen ws_sales_price* ws_quantity else 0 end) as jun_sales\n \t,sum(case when d_moy = 7 \n \t\tthen ws_sales_price* ws_quantity else 0 end) as jul_sales\n \t,sum(case when d_moy = 8 \n \t\tthen ws_sales_price* ws_quantity else 0 end) as aug_sales\n \t,sum(case when d_moy = 9 \n \t\tthen ws_sales_price* ws_quantity else 0 end) as sep_sales\n \t,sum(case when d_moy = 10 \n \t\tthen ws_sales_price* ws_quantity else 0 end) as oct_sales\n \t,sum(case when d_moy = 11\n \t\tthen ws_sales_price* ws_quantity else 0 end) as nov_sales\n \t,sum(case when d_moy = 12\n \t\tthen ws_sales_price* ws_quantity else 0 end) as dec_sales\n \t,sum(case when d_moy = 1 \n \t\tthen ws_net_paid_inc_tax * ws_quantity else 0 end) as jan_net\n \t,sum(case when d_moy = 2\n \t\tthen ws_net_paid_inc_tax * ws_quantity else 0 end) as feb_net\n \t,sum(case when d_moy = 3 \n \t\tthen ws_net_paid_inc_tax * ws_quantity else 0 end) as mar_net\n \t,sum(case when d_moy = 4 \n \t\tthen ws_net_paid_inc_tax * ws_quantity else 0 end) as apr_net\n \t,sum(case when d_moy = 5 \n \t\tthen ws_net_paid_inc_tax * ws_quantity else 0 end) as may_net\n \t,sum(case when d_moy = 6 \n \t\tthen ws_net_paid_inc_tax * ws_quantity else 0 end) as jun_net\n \t,sum(case when d_moy = 7 \n \t\tthen ws_net_paid_inc_tax * ws_quantity else 0 end) as jul_net\n \t,sum(case when d_moy = 8 \n \t\tthen ws_net_paid_inc_tax * ws_quantity else 0 end) as aug_net\n \t,sum(case when d_moy = 9 \n \t\tthen ws_net_paid_inc_tax * ws_quantity else 0 end) as sep_net\n \t,sum(case when d_moy = 10 \n \t\tthen ws_net_paid_inc_tax * ws_quantity else 0 end) as oct_net\n \t,sum(case when d_moy = 11\n \t\tthen ws_net_paid_inc_tax * ws_quantity else 0 end) as nov_net\n \t,sum(case when d_moy = 12\n \t\tthen ws_net_paid_inc_tax * ws_quantity else 0 end) as dec_net\n     from\n          web_sales\n         ,warehouse\n         ,date_dim\n         ,time_dim\n \t  ,ship_mode\n     where\n            web_sales.ws_warehouse_sk =  warehouse.w_warehouse_sk\n        and web_sales.ws_sold_date_sk = date_dim.d_date_sk\n        and web_sales.ws_sold_time_sk = time_dim.t_time_sk\n \tand web_sales.ws_ship_mode_sk = ship_mode.sm_ship_mode_sk\n        and d_year = 2002\n \tand t_time between 49530 and 49530+28800 \n \tand sm_carrier in ('DIAMOND','AIRBORNE')\n     group by \n        w_warehouse_name\n \t,w_warehouse_sq_ft\n \t,w_city\n \t,w_county\n \t,w_state\n \t,w_country\n       ,d_year\n union all\n    select \n \tw_warehouse_name\n \t,w_warehouse_sq_ft\n \t,w_city\n \t,w_county\n \t,w_state\n \t,w_country\n        ,concat('DIAMOND', ',', 'AIRBORNE') as ship_carriers\n       ,d_year as year\n \t,sum(case when d_moy = 1 \n \t\tthen cs_ext_sales_price* cs_quantity else 0 end) as jan_sales\n \t,sum(case when d_moy = 2 \n \t\tthen cs_ext_sales_price* cs_quantity else 0 end) as feb_sales\n \t,sum(case when d_moy = 3 \n \t\tthen cs_ext_sales_price* cs_quantity else 0 end) as mar_sales\n \t,sum(case when d_moy = 4 \n \t\tthen cs_ext_sales_price* cs_quantity else 0 end) as apr_sales\n \t,sum(case when d_moy = 5 \n \t\tthen cs_ext_sales_price* cs_quantity else 0 end) as may_sales\n \t,sum(case when d_moy = 6 \n \t\tthen cs_ext_sales_price* cs_quantity else 0 end) as jun_sales\n \t,sum(case when d_moy = 7 \n \t\tthen cs_ext_sales_price* cs_quantity else 0 end) as jul_sales\n \t,sum(case when d_moy = 8 \n \t\tthen cs_ext_sales_price* cs_quantity else 0 end) as aug_sales\n \t,sum(case when d_moy = 9 \n \t\tthen cs_ext_sales_price* cs_quantity else 0 end) as sep_sales\n \t,sum(case when d_moy = 10 \n \t\tthen cs_ext_sales_price* cs_quantity else 0 end) as oct_sales\n \t,sum(case when d_moy = 11\n \t\tthen cs_ext_sales_price* cs_quantity else 0 end) as nov_sales\n \t,sum(case when d_moy = 12\n \t\tthen cs_ext_sales_price* cs_quantity else 0 end) as dec_sales\n \t,sum(case when d_moy = 1 \n \t\tthen cs_net_paid_inc_ship_tax * cs_quantity else 0 end) as jan_net\n \t,sum(case when d_moy = 2 \n \t\tthen cs_net_paid_inc_ship_tax * cs_quantity else 0 end) as feb_net\n \t,sum(case when d_moy = 3 \n \t\tthen cs_net_paid_inc_ship_tax * cs_quantity else 0 end) as mar_net\n \t,sum(case when d_moy = 4 \n \t\tthen cs_net_paid_inc_ship_tax * cs_quantity else 0 end) as apr_net\n \t,sum(case when d_moy = 5 \n \t\tthen cs_net_paid_inc_ship_tax * cs_quantity else 0 end) as may_net\n \t,sum(case when d_moy = 6 \n \t\tthen cs_net_paid_inc_ship_tax * cs_quantity else 0 end) as jun_net\n \t,sum(case when d_moy = 7 \n \t\tthen cs_net_paid_inc_ship_tax * cs_quantity else 0 end) as jul_net\n \t,sum(case when d_moy = 8 \n \t\tthen cs_net_paid_inc_ship_tax * cs_quantity else 0 end) as aug_net\n \t,sum(case when d_moy = 9 \n \t\tthen cs_net_paid_inc_ship_tax * cs_quantity else 0 end) as sep_net\n \t,sum(case when d_moy = 10 \n \t\tthen cs_net_paid_inc_ship_tax * cs_quantity else 0 end) as oct_net\n \t,sum(case when d_moy = 11\n \t\tthen cs_net_paid_inc_ship_tax * cs_quantity else 0 end) as nov_net\n \t,sum(case when d_moy = 12\n \t\tthen cs_net_paid_inc_ship_tax * cs_quantity else 0 end) as dec_net\n     from\n          catalog_sales\n         ,warehouse\n         ,date_dim\n         ,time_dim\n \t ,ship_mode\n     where\n            catalog_sales.cs_warehouse_sk =  warehouse.w_warehouse_sk\n        and catalog_sales.cs_sold_date_sk = date_dim.d_date_sk\n        and catalog_sales.cs_sold_time_sk = time_dim.t_time_sk\n \tand catalog_sales.cs_ship_mode_sk = ship_mode.sm_ship_mode_sk\n        and d_year = 2002\n \tand t_time between 49530 AND 49530+28800 \n \tand sm_carrier in ('DIAMOND','AIRBORNE')\n     group by \n        w_warehouse_name\n \t,w_warehouse_sq_ft\n \t,w_city\n \t,w_county\n \t,w_state\n \t,w_country\n       ,d_year\n ) x\n group by \n        w_warehouse_name\n \t,w_warehouse_sq_ft\n \t,w_city\n \t,w_county\n \t,w_state\n \t,w_country\n \t,ship_carriers\n       ,year\n order by w_warehouse_name\n limit 100\nOK\nSTAGE DEPENDENCIES:\n  Stage-1 is a root stage\n  Stage-0 depends on stages: Stage-1\n\nSTAGE PLANS:\n  Stage: Stage-1\n    Tez\n      Edges:\n        Map 12 <- Map 15 (BROADCAST_EDGE), Map 16 (BROADCAST_EDGE)\n        Map 2 <- Map 8 (BROADCAST_EDGE), Map 9 (BROADCAST_EDGE)\n        Reducer 13 <- Map 11 (BROADCAST_EDGE), Map 12 (SIMPLE_EDGE), Map 17 (SIMPLE_EDGE)\n        Reducer 14 <- Reducer 13 (SIMPLE_EDGE), Union 5 (CONTAINS)\n        Reducer 3 <- Map 1 (BROADCAST_EDGE), Map 10 (SIMPLE_EDGE), Map 2 (SIMPLE_EDGE)\n        Reducer 4 <- Reducer 3 (SIMPLE_EDGE), Union 5 (CONTAINS)\n        Reducer 6 <- Union 5 (SIMPLE_EDGE)\n        Reducer 7 <- Reducer 6 (SIMPLE_EDGE)\n      DagName: mmokhtar_20150211222424_0df571ed-82d9-426e-9eb9-52f95f022fa1:1\n      Vertices:\n        Map 1 \n            Map Operator Tree:\n                TableScan\n                  alias: date_dim\n                  filterExpr: ((d_year = 2002) and d_date_sk is not null) (type: boolean)\n                  Statistics: Num rows: 73049 Data size: 81741831 Basic stats: COMPLETE Column stats: COMPLETE\n                  Filter Operator\n                    predicate: ((d_year = 2002) and d_date_sk is not null) (type: boolean)\n                    Statistics: Num rows: 652 Data size: 7824 Basic stats: COMPLETE Column stats: COMPLETE\n                    Select Operator\n                      expressions: d_date_sk (type: int), d_moy (type: int)\n                      outputColumnNames: _col0, _col2\n                      Statistics: Num rows: 652 Data size: 5216 Basic stats: COMPLETE Column stats: COMPLETE\n                      Reduce Output Operator\n                        key expressions: _col0 (type: int)\n                        sort order: +\n                        Map-reduce partition columns: _col0 (type: int)\n                        Statistics: Num rows: 652 Data size: 5216 Basic stats: COMPLETE Column stats: COMPLETE\n                        value expressions: _col2 (type: int)\n            Execution mode: vectorized\n        Map 10 \n            Map Operator Tree:\n                TableScan\n                  alias: ship_mode\n                  filterExpr: ((sm_carrier) IN ('DIAMOND', 'AIRBORNE') and sm_ship_mode_sk is not null) (type: boolean)\n                  Statistics: Num rows: 0 Data size: 47 Basic stats: PARTIAL Column stats: COMPLETE\n                  Filter Operator\n                    predicate: ((sm_carrier) IN ('DIAMOND', 'AIRBORNE') and sm_ship_mode_sk is not null) (type: boolean)\n                    Statistics: Num rows: 9223372036854775807 Data size: 9223372036854775807 Basic stats: COMPLETE Column stats: COMPLETE\n                    Select Operator\n                      expressions: sm_ship_mode_sk (type: int)\n                      outputColumnNames: _col0\n                      Statistics: Num rows: 9223372036854775807 Data size: 9223372036854775807 Basic stats: COMPLETE Column stats: COMPLETE\n                      Reduce Output Operator\n                        key expressions: _col0 (type: int)\n                        sort order: +\n                        Map-reduce partition columns: _col0 (type: int)\n                        Statistics: Num rows: 9223372036854775807 Data size: 9223372036854775807 Basic stats: COMPLETE Column stats: COMPLETE\n            Execution mode: vectorized\n        Map 11 \n            Map Operator Tree:\n                TableScan\n                  alias: date_dim\n                  filterExpr: ((d_year = 2002) and d_date_sk is not null) (type: boolean)\n                  Statistics: Num rows: 73049 Data size: 81741831 Basic stats: COMPLETE Column stats: COMPLETE\n                  Filter Operator\n                    predicate: ((d_year = 2002) and d_date_sk is not null) (type: boolean)\n                    Statistics: Num rows: 652 Data size: 7824 Basic stats: COMPLETE Column stats: COMPLETE\n                    Select Operator\n                      expressions: d_date_sk (type: int), d_moy (type: int)\n                      outputColumnNames: _col0, _col2\n                      Statistics: Num rows: 652 Data size: 5216 Basic stats: COMPLETE Column stats: COMPLETE\n                      Reduce Output Operator\n                        key expressions: _col0 (type: int)\n                        sort order: +\n                        Map-reduce partition columns: _col0 (type: int)\n                        Statistics: Num rows: 652 Data size: 5216 Basic stats: COMPLETE Column stats: COMPLETE\n                        value expressions: _col2 (type: int)\n            Execution mode: vectorized\n        Map 12 \n            Map Operator Tree:\n                TableScan\n                  alias: catalog_sales\n                  filterExpr: (((cs_warehouse_sk is not null and cs_sold_time_sk is not null) and cs_ship_mode_sk is not null) and cs_sold_date_sk is not null) (type: boolean)\n                  Statistics: Num rows: 286549727 Data size: 65825832570 Basic stats: COMPLETE Column stats: COMPLETE\n                  Filter Operator\n                    predicate: (((cs_warehouse_sk is not null and cs_sold_time_sk is not null) and cs_ship_mode_sk is not null) and cs_sold_date_sk is not null) (type: boolean)\n                    Statistics: Num rows: 284394646 Data size: 7948760032 Basic stats: COMPLETE Column stats: COMPLETE\n                    Select Operator\n                      expressions: cs_sold_date_sk (type: int), cs_sold_time_sk (type: int), cs_ship_mode_sk (type: int), cs_warehouse_sk (type: int), cs_quantity (type: int), cs_ext_sales_price (type: float), cs_net_paid_inc_ship_tax (type: float)\n                      outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6\n                      Statistics: Num rows: 284394646 Data size: 7948760032 Basic stats: COMPLETE Column stats: COMPLETE\n                      Map Join Operator\n                        condition map:\n                             Inner Join 0 to 1\n                        keys:\n                          0 _col3 (type: int)\n                          1 _col0 (type: int)\n                        outputColumnNames: _col0, _col1, _col2, _col4, _col5, _col6, _col8, _col9, _col10, _col11, _col12, _col13\n                        input vertices:\n                          1 Map 15\n                        Statistics: Num rows: 284394656 Data size: 142766117312 Basic stats: COMPLETE Column stats: COMPLETE\n                        Map Join Operator\n                          condition map:\n                               Inner Join 0 to 1\n                          keys:\n                            0 _col1 (type: int)\n                            1 _col0 (type: int)\n                          outputColumnNames: _col0, _col2, _col4, _col5, _col6, _col8, _col9, _col10, _col11, _col12, _col13\n                          input vertices:\n                            1 Map 16\n                          Statistics: Num rows: 142197328 Data size: 70814269344 Basic stats: COMPLETE Column stats: COMPLETE\n                          Reduce Output Operator\n                            key expressions: _col2 (type: int)\n                            sort order: +\n                            Map-reduce partition columns: _col2 (type: int)\n                            Statistics: Num rows: 142197328 Data size: 70814269344 Basic stats: COMPLETE Column stats: COMPLETE\n                            value expressions: _col0 (type: int), _col4 (type: int), _col5 (type: float), _col6 (type: float), _col8 (type: string), _col9 (type: int), _col10 (type: string), _col11 (type: string), _col12 (type: string), _col13 (type: string)\n            Execution mode: vectorized\n        Map 15 \n            Map Operator Tree:\n                TableScan\n                  alias: warehouse\n                  filterExpr: w_warehouse_sk is not null (type: boolean)\n                  Statistics: Num rows: 6 Data size: 6166 Basic stats: COMPLETE Column stats: COMPLETE\n                  Filter Operator\n                    predicate: w_warehouse_sk is not null (type: boolean)\n                    Statistics: Num rows: 6 Data size: 2888 Basic stats: COMPLETE Column stats: COMPLETE\n                    Select Operator\n                      expressions: w_warehouse_sk (type: int), w_warehouse_name (type: string), w_warehouse_sq_ft (type: int), w_city (type: string), w_county (type: string), w_state (type: string), w_country (type: string)\n                      outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6\n                      Statistics: Num rows: 6 Data size: 2888 Basic stats: COMPLETE Column stats: COMPLETE\n                      Reduce Output Operator\n                        key expressions: _col0 (type: int)\n                        sort order: +\n                        Map-reduce partition columns: _col0 (type: int)\n                        Statistics: Num rows: 6 Data size: 2888 Basic stats: COMPLETE Column stats: COMPLETE\n                        value expressions: _col1 (type: string), _col2 (type: int), _col3 (type: string), _col4 (type: string), _col5 (type: string), _col6 (type: string)\n            Execution mode: vectorized\n        Map 16 \n            Map Operator Tree:\n                TableScan\n                  alias: time_dim\n                  filterExpr: (t_time BETWEEN 49530 AND 78330 and t_time_sk is not null) (type: boolean)\n                  Statistics: Num rows: 86400 Data size: 40694400 Basic stats: COMPLETE Column stats: COMPLETE\n                  Filter Operator\n                    predicate: (t_time BETWEEN 49530 AND 78330 and t_time_sk is not null) (type: boolean)\n                    Statistics: Num rows: 43200 Data size: 345600 Basic stats: COMPLETE Column stats: COMPLETE\n                    Select Operator\n                      expressions: t_time_sk (type: int)\n                      outputColumnNames: _col0\n                      Statistics: Num rows: 43200 Data size: 172800 Basic stats: COMPLETE Column stats: COMPLETE\n                      Reduce Output Operator\n                        key expressions: _col0 (type: int)\n                        sort order: +\n                        Map-reduce partition columns: _col0 (type: int)\n                        Statistics: Num rows: 43200 Data size: 172800 Basic stats: COMPLETE Column stats: COMPLETE\n            Execution mode: vectorized\n        Map 17 \n            Map Operator Tree:\n                TableScan\n                  alias: ship_mode\n                  filterExpr: ((sm_carrier) IN ('DIAMOND', 'AIRBORNE') and sm_ship_mode_sk is not null) (type: boolean)\n                  Statistics: Num rows: 0 Data size: 47 Basic stats: PARTIAL Column stats: COMPLETE\n                  Filter Operator\n                    predicate: ((sm_carrier) IN ('DIAMOND', 'AIRBORNE') and sm_ship_mode_sk is not null) (type: boolean)\n                    Statistics: Num rows: 9223372036854775807 Data size: 9223372036854775807 Basic stats: COMPLETE Column stats: COMPLETE\n                    Select Operator\n                      expressions: sm_ship_mode_sk (type: int)\n                      outputColumnNames: _col0\n                      Statistics: Num rows: 9223372036854775807 Data size: 9223372036854775807 Basic stats: COMPLETE Column stats: COMPLETE\n                      Reduce Output Operator\n                        key expressions: _col0 (type: int)\n                        sort order: +\n                        Map-reduce partition columns: _col0 (type: int)\n                        Statistics: Num rows: 9223372036854775807 Data size: 9223372036854775807 Basic stats: COMPLETE Column stats: COMPLETE\n            Execution mode: vectorized\n        Map 2 \n            Map Operator Tree:\n                TableScan\n                  alias: web_sales\n                  filterExpr: (((ws_warehouse_sk is not null and ws_sold_time_sk is not null) and ws_ship_mode_sk is not null) and ws_sold_date_sk is not null) (type: boolean)\n                  Statistics: Num rows: 143966864 Data size: 33110363004 Basic stats: COMPLETE Column stats: COMPLETE\n                  Filter Operator\n                    predicate: (((ws_warehouse_sk is not null and ws_sold_time_sk is not null) and ws_ship_mode_sk is not null) and ws_sold_date_sk is not null) (type: boolean)\n                    Statistics: Num rows: 143912967 Data size: 4029131264 Basic stats: COMPLETE Column stats: COMPLETE\n                    Select Operator\n                      expressions: ws_sold_date_sk (type: int), ws_sold_time_sk (type: int), ws_ship_mode_sk (type: int), ws_warehouse_sk (type: int), ws_quantity (type: int), ws_sales_price (type: float), ws_net_paid_inc_tax (type: float)\n                      outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6\n                      Statistics: Num rows: 143912967 Data size: 4029131264 Basic stats: COMPLETE Column stats: COMPLETE\n                      Map Join Operator\n                        condition map:\n                             Inner Join 0 to 1\n                        keys:\n                          0 _col3 (type: int)\n                          1 _col0 (type: int)\n                        outputColumnNames: _col0, _col1, _col2, _col4, _col5, _col6, _col8, _col9, _col10, _col11, _col12, _col13\n                        input vertices:\n                          1 Map 8\n                        Statistics: Num rows: 143912960 Data size: 72244305920 Basic stats: COMPLETE Column stats: COMPLETE\n                        Map Join Operator\n                          condition map:\n                               Inner Join 0 to 1\n                          keys:\n                            0 _col1 (type: int)\n                            1 _col0 (type: int)\n                          outputColumnNames: _col0, _col2, _col4, _col5, _col6, _col8, _col9, _col10, _col11, _col12, _col13\n                          input vertices:\n                            1 Map 9\n                          Statistics: Num rows: 71956480 Data size: 35834327040 Basic stats: COMPLETE Column stats: COMPLETE\n                          Reduce Output Operator\n                            key expressions: _col2 (type: int)\n                            sort order: +\n                            Map-reduce partition columns: _col2 (type: int)\n                            Statistics: Num rows: 71956480 Data size: 35834327040 Basic stats: COMPLETE Column stats: COMPLETE\n                            value expressions: _col0 (type: int), _col4 (type: int), _col5 (type: float), _col6 (type: float), _col8 (type: string), _col9 (type: int), _col10 (type: string), _col11 (type: string), _col12 (type: string), _col13 (type: string)\n            Execution mode: vectorized\n        Map 8 \n            Map Operator Tree:\n                TableScan\n                  alias: warehouse\n                  filterExpr: w_warehouse_sk is not null (type: boolean)\n                  Statistics: Num rows: 6 Data size: 6166 Basic stats: COMPLETE Column stats: COMPLETE\n                  Filter Operator\n                    predicate: w_warehouse_sk is not null (type: boolean)\n                    Statistics: Num rows: 6 Data size: 2888 Basic stats: COMPLETE Column stats: COMPLETE\n                    Select Operator\n                      expressions: w_warehouse_sk (type: int), w_warehouse_name (type: string), w_warehouse_sq_ft (type: int), w_city (type: string), w_county (type: string), w_state (type: string), w_country (type: string)\n                      outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6\n                      Statistics: Num rows: 6 Data size: 2888 Basic stats: COMPLETE Column stats: COMPLETE\n                      Reduce Output Operator\n                        key expressions: _col0 (type: int)\n                        sort order: +\n                        Map-reduce partition columns: _col0 (type: int)\n                        Statistics: Num rows: 6 Data size: 2888 Basic stats: COMPLETE Column stats: COMPLETE\n                        value expressions: _col1 (type: string), _col2 (type: int), _col3 (type: string), _col4 (type: string), _col5 (type: string), _col6 (type: string)\n            Execution mode: vectorized\n        Map 9 \n            Map Operator Tree:\n                TableScan\n                  alias: time_dim\n                  filterExpr: (t_time BETWEEN 49530 AND 78330 and t_time_sk is not null) (type: boolean)\n                  Statistics: Num rows: 86400 Data size: 40694400 Basic stats: COMPLETE Column stats: COMPLETE\n                  Filter Operator\n                    predicate: (t_time BETWEEN 49530 AND 78330 and t_time_sk is not null) (type: boolean)\n                    Statistics: Num rows: 43200 Data size: 345600 Basic stats: COMPLETE Column stats: COMPLETE\n                    Select Operator\n                      expressions: t_time_sk (type: int)\n                      outputColumnNames: _col0\n                      Statistics: Num rows: 43200 Data size: 172800 Basic stats: COMPLETE Column stats: COMPLETE\n                      Reduce Output Operator\n                        key expressions: _col0 (type: int)\n                        sort order: +\n                        Map-reduce partition columns: _col0 (type: int)\n                        Statistics: Num rows: 43200 Data size: 172800 Basic stats: COMPLETE Column stats: COMPLETE\n            Execution mode: vectorized\n        Reducer 13 \n            Reduce Operator Tree:\n              Merge Join Operator\n                condition map:\n                     Inner Join 0 to 1\n                keys:\n                  0 _col2 (type: int)\n                  1 _col0 (type: int)\n                outputColumnNames: _col0, _col4, _col5, _col6, _col8, _col9, _col10, _col11, _col12, _col13\n                Statistics: Num rows: 9223372036854775807 Data size: 9223372036854775807 Basic stats: COMPLETE Column stats: COMPLETE\n                Select Operator\n                  expressions: _col0 (type: int), _col10 (type: string), _col11 (type: string), _col12 (type: string), _col13 (type: string), _col4 (type: int), _col5 (type: float), _col6 (type: float), _col8 (type: string), _col9 (type: int)\n                  outputColumnNames: _col0, _col10, _col11, _col12, _col13, _col4, _col5, _col6, _col8, _col9\n                  Statistics: Num rows: 9223372036854775807 Data size: 9223372036854775807 Basic stats: COMPLETE Column stats: COMPLETE\n                  Map Join Operator\n                    condition map:\n                         Inner Join 0 to 1\n                    keys:\n                      0 _col0 (type: int)\n                      1 _col0 (type: int)\n                    outputColumnNames: _col2, _col7, _col8, _col9, _col11, _col12, _col13, _col14, _col15, _col16\n                    input vertices:\n                      0 Map 11\n                    Statistics: Num rows: 82323356149350400 Data size: 9223372036854775807 Basic stats: COMPLETE Column stats: COMPLETE\n                    Select Operator\n                      expressions: _col11 (type: string), _col12 (type: int), _col13 (type: string), _col14 (type: string), _col15 (type: string), _col16 (type: string), 2002 (type: int), CASE WHEN ((_col2 = 1)) THEN ((_col8 * UDFToFloat(_col7))) ELSE (0) END (type: float), CASE WHEN ((_col2 = 2)) THEN ((_col8 * UDFToFloat(_col7))) ELSE (0) END (type: float), CASE WHEN ((_col2 = 3)) THEN ((_col8 * UDFToFloat(_col7))) ELSE (0) END (type: float), CASE WHEN ((_col2 = 4)) THEN ((_col8 * UDFToFloat(_col7))) ELSE (0) END (type: float), CASE WHEN ((_col2 = 5)) THEN ((_col8 * UDFToFloat(_col7))) ELSE (0) END (type: float), CASE WHEN ((_col2 = 6)) THEN ((_col8 * UDFToFloat(_col7))) ELSE (0) END (type: float), CASE WHEN ((_col2 = 7)) THEN ((_col8 * UDFToFloat(_col7))) ELSE (0) END (type: float), CASE WHEN ((_col2 = 8)) THEN ((_col8 * UDFToFloat(_col7))) ELSE (0) END (type: float), CASE WHEN ((_col2 = 9)) THEN ((_col8 * UDFToFloat(_col7))) ELSE (0) END (type: float), CASE WHEN ((_col2 = 10)) THEN ((_col8 * UDFToFloat(_col7))) ELSE (0) END (type: float), CASE WHEN ((_col2 = 11)) THEN ((_col8 * UDFToFloat(_col7))) ELSE (0) END (type: float), CASE WHEN ((_col2 = 12)) THEN ((_col8 * UDFToFloat(_col7))) ELSE (0) END (type: float), CASE WHEN ((_col2 = 1)) THEN ((_col9 * UDFToFloat(_col7))) ELSE (0) END (type: float), CASE WHEN ((_col2 = 2)) THEN ((_col9 * UDFToFloat(_col7))) ELSE (0) END (type: float), CASE WHEN ((_col2 = 3)) THEN ((_col9 * UDFToFloat(_col7))) ELSE (0) END (type: float), CASE WHEN ((_col2 = 4)) THEN ((_col9 * UDFToFloat(_col7))) ELSE (0) END (type: float), CASE WHEN ((_col2 = 5)) THEN ((_col9 * UDFToFloat(_col7))) ELSE (0) END (type: float), CASE WHEN ((_col2 = 6)) THEN ((_col9 * UDFToFloat(_col7))) ELSE (0) END (type: float), CASE WHEN ((_col2 = 7)) THEN ((_col9 * UDFToFloat(_col7))) ELSE (0) END (type: float), CASE WHEN ((_col2 = 8)) THEN ((_col9 * UDFToFloat(_col7))) ELSE (0) END (type: float), CASE WHEN ((_col2 = 9)) THEN ((_col9 * UDFToFloat(_col7))) ELSE (0) END (type: float), CASE WHEN ((_col2 = 10)) THEN ((_col9 * UDFToFloat(_col7))) ELSE (0) END (type: float), CASE WHEN ((_col2 = 11)) THEN ((_col9 * UDFToFloat(_col7))) ELSE (0) END (type: float), CASE WHEN ((_col2 = 12)) THEN ((_col9 * UDFToFloat(_col7))) ELSE (0) END (type: float)\n                      outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13, _col14, _col15, _col16, _col17, _col18, _col19, _col20, _col21, _col22, _col23, _col24, _col25, _col26, _col27, _col28, _col29, _col30\n                      Statistics: Num rows: 82323356149350400 Data size: 9223372036854775807 Basic stats: COMPLETE Column stats: COMPLETE\n                      Group By Operator\n                        aggregations: sum(_col7), sum(_col8), sum(_col9), sum(_col10), sum(_col11), sum(_col12), sum(_col13), sum(_col14), sum(_col15), sum(_col16), sum(_col17), sum(_col18), sum(_col19), sum(_col20), sum(_col21), sum(_col22), sum(_col23), sum(_col24), sum(_col25), sum(_col26), sum(_col27), sum(_col28), sum(_col29), sum(_col30)\n                        keys: _col0 (type: string), _col1 (type: int), _col2 (type: string), _col3 (type: string), _col4 (type: string), _col5 (type: string), _col6 (type: int)\n                        mode: hash\n                        outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13, _col14, _col15, _col16, _col17, _col18, _col19, _col20, _col21, _col22, _col23, _col24, _col25, _col26, _col27, _col28, _col29, _col30\n                        Statistics: Num rows: 2147483647 Data size: 1447403978078 Basic stats: COMPLETE Column stats: COMPLETE\n                        Reduce Output Operator\n                          key expressions: _col0 (type: string), _col1 (type: int), _col2 (type: string), _col3 (type: string), _col4 (type: string), _col5 (type: string), _col6 (type: int)\n                          sort order: +++++++\n                          Map-reduce partition columns: _col0 (type: string), _col1 (type: int), _col2 (type: string), _col3 (type: string), _col4 (type: string), _col5 (type: string), _col6 (type: int)\n                          Statistics: Num rows: 2147483647 Data size: 1447403978078 Basic stats: COMPLETE Column stats: COMPLETE\n                          value expressions: _col7 (type: double), _col8 (type: double), _col9 (type: double), _col10 (type: double), _col11 (type: double), _col12 (type: double), _col13 (type: double), _col14 (type: double), _col15 (type: double), _col16 (type: double), _col17 (type: double), _col18 (type: double), _col19 (type: double), _col20 (type: double), _col21 (type: double), _col22 (type: double), _col23 (type: double), _col24 (type: double), _col25 (type: double), _col26 (type: double), _col27 (type: double), _col28 (type: double), _col29 (type: double), _col30 (type: double)\n        Reducer 14 \n            Reduce Operator Tree:\n              Group By Operator\n                aggregations: sum(VALUE._col0), sum(VALUE._col1), sum(VALUE._col2), sum(VALUE._col3), sum(VALUE._col4), sum(VALUE._col5), sum(VALUE._col6), sum(VALUE._col7), sum(VALUE._col8), sum(VALUE._col9), sum(VALUE._col10), sum(VALUE._col11), sum(VALUE._col12), sum(VALUE._col13), sum(VALUE._col14), sum(VALUE._col15), sum(VALUE._col16), sum(VALUE._col17), sum(VALUE._col18), sum(VALUE._col19), sum(VALUE._col20), sum(VALUE._col21), sum(VALUE._col22), sum(VALUE._col23)\n                keys: KEY._col0 (type: string), KEY._col1 (type: int), KEY._col2 (type: string), KEY._col3 (type: string), KEY._col4 (type: string), KEY._col5 (type: string), KEY._col6 (type: int)\n                mode: mergepartial\n                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13, _col14, _col15, _col16, _col17, _col18, _col19, _col20, _col21, _col22, _col23, _col24, _col25, _col26, _col27, _col28, _col29, _col30\n                Select Operator\n                  expressions: _col0 (type: string), _col1 (type: int), _col2 (type: string), _col3 (type: string), _col4 (type: string), _col5 (type: string), 'DIAMOND,AIRBORNE' (type: string), _col6 (type: int), _col7 (type: double), _col8 (type: double), _col9 (type: double), _col10 (type: double), _col11 (type: double), _col12 (type: double), _col13 (type: double), _col14 (type: double), _col15 (type: double), _col16 (type: double), _col17 (type: double), _col18 (type: double), _col19 (type: double), _col20 (type: double), _col21 (type: double), _col22 (type: double), _col23 (type: double), _col24 (type: double), _col25 (type: double), _col26 (type: double), _col27 (type: double), _col28 (type: double), _col29 (type: double), _col30 (type: double)\n                  outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13, _col14, _col15, _col16, _col17, _col18, _col19, _col20, _col21, _col22, _col23, _col24, _col25, _col26, _col27, _col28, _col29, _col30, _col31\n                  Select Operator\n                    expressions: _col0 (type: string), _col1 (type: int), _col2 (type: string), _col3 (type: string), _col4 (type: string), _col5 (type: string), _col6 (type: string), _col7 (type: int), _col8 (type: double), _col9 (type: double), _col10 (type: double), _col11 (type: double), _col12 (type: double), _col13 (type: double), _col14 (type: double), _col15 (type: double), _col16 (type: double), _col17 (type: double), _col18 (type: double), _col19 (type: double), (_col8 / UDFToDouble(_col1)) (type: double), (_col9 / UDFToDouble(_col1)) (type: double), (_col10 / UDFToDouble(_col1)) (type: double), (_col11 / UDFToDouble(_col1)) (type: double), (_col12 / UDFToDouble(_col1)) (type: double), (_col13 / UDFToDouble(_col1)) (type: double), (_col14 / UDFToDouble(_col1)) (type: double), (_col15 / UDFToDouble(_col1)) (type: double), (_col16 / UDFToDouble(_col1)) (type: double), (_col17 / UDFToDouble(_col1)) (type: double), (_col18 / UDFToDouble(_col1)) (type: double), (_col19 / UDFToDouble(_col1)) (type: double), _col20 (type: double), _col21 (type: double), _col22 (type: double), _col23 (type: double), _col24 (type: double), _col25 (type: double), _col26 (type: double), _col27 (type: double), _col28 (type: double), _col29 (type: double), _col30 (type: double), _col31 (type: double)\n                    outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13, _col14, _col15, _col16, _col17, _col18, _col19, _col20, _col21, _col22, _col23, _col24, _col25, _col26, _col27, _col28, _col29, _col30, _col31, _col32, _col33, _col34, _col35, _col36, _col37, _col38, _col39, _col40, _col41, _col42, _col43\n                    Group By Operator\n                      aggregations: sum(_col8), sum(_col9), sum(_col10), sum(_col11), sum(_col12), sum(_col13), sum(_col14), sum(_col15), sum(_col16), sum(_col17), sum(_col18), sum(_col19), sum(_col20), sum(_col21), sum(_col22), sum(_col23), sum(_col24), sum(_col25), sum(_col26), sum(_col27), sum(_col28), sum(_col29), sum(_col30), sum(_col31), sum(_col32), sum(_col33), sum(_col34), sum(_col35), sum(_col36), sum(_col37), sum(_col38), sum(_col39), sum(_col40), sum(_col41), sum(_col42), sum(_col43)\n                      keys: _col0 (type: string), _col1 (type: int), _col2 (type: string), _col3 (type: string), _col4 (type: string), _col5 (type: string), _col6 (type: string), _col7 (type: int)\n                      mode: hash\n                      outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13, _col14, _col15, _col16, _col17, _col18, _col19, _col20, _col21, _col22, _col23, _col24, _col25, _col26, _col27, _col28, _col29, _col30, _col31, _col32, _col33, _col34, _col35, _col36, _col37, _col38, _col39, _col40, _col41, _col42, _col43\n                      Reduce Output Operator\n                        key expressions: _col0 (type: string), _col1 (type: int), _col2 (type: string), _col3 (type: string), _col4 (type: string), _col5 (type: string), _col6 (type: string), _col7 (type: int)\n                        sort order: ++++++++\n                        Map-reduce partition columns: _col0 (type: string), _col1 (type: int), _col2 (type: string), _col3 (type: string), _col4 (type: string), _col5 (type: string), _col6 (type: string), _col7 (type: int)\n                        value expressions: _col8 (type: double), _col9 (type: double), _col10 (type: double), _col11 (type: double), _col12 (type: double), _col13 (type: double), _col14 (type: double), _col15 (type: double), _col16 (type: double), _col17 (type: double), _col18 (type: double), _col19 (type: double), _col20 (type: double), _col21 (type: double), _col22 (type: double), _col23 (type: double), _col24 (type: double), _col25 (type: double), _col26 (type: double), _col27 (type: double), _col28 (type: double), _col29 (type: double), _col30 (type: double), _col31 (type: double), _col32 (type: double), _col33 (type: double), _col34 (type: double), _col35 (type: double), _col36 (type: double), _col37 (type: double), _col38 (type: double), _col39 (type: double), _col40 (type: double), _col41 (type: double), _col42 (type: double), _col43 (type: double)\n        Reducer 3 \n            Reduce Operator Tree:\n              Merge Join Operator\n                condition map:\n                     Inner Join 0 to 1\n                keys:\n                  0 _col2 (type: int)\n                  1 _col0 (type: int)\n                outputColumnNames: _col0, _col4, _col5, _col6, _col8, _col9, _col10, _col11, _col12, _col13\n                Statistics: Num rows: 9223372036854775807 Data size: 9223372036854775807 Basic stats: COMPLETE Column stats: COMPLETE\n                Select Operator\n                  expressions: _col0 (type: int), _col10 (type: string), _col11 (type: string), _col12 (type: string), _col13 (type: string), _col4 (type: int), _col5 (type: float), _col6 (type: float), _col8 (type: string), _col9 (type: int)\n                  outputColumnNames: _col0, _col10, _col11, _col12, _col13, _col4, _col5, _col6, _col8, _col9\n                  Statistics: Num rows: 9223372036854775807 Data size: 9223372036854775807 Basic stats: COMPLETE Column stats: COMPLETE\n                  Map Join Operator\n                    condition map:\n                         Inner Join 0 to 1\n                    keys:\n                      0 _col0 (type: int)\n                      1 _col0 (type: int)\n                    outputColumnNames: _col2, _col7, _col8, _col9, _col11, _col12, _col13, _col14, _col15, _col16\n                    input vertices:\n                      0 Map 1\n                    Statistics: Num rows: 82323356149350400 Data size: 9223372036854775807 Basic stats: COMPLETE Column stats: COMPLETE\n                    Select Operator\n                      expressions: _col11 (type: string), _col12 (type: int), _col13 (type: string), _col14 (type: string), _col15 (type: string), _col16 (type: string), 2002 (type: int), CASE WHEN ((_col2 = 1)) THEN ((_col8 * UDFToFloat(_col7))) ELSE (0) END (type: float), CASE WHEN ((_col2 = 2)) THEN ((_col8 * UDFToFloat(_col7))) ELSE (0) END (type: float), CASE WHEN ((_col2 = 3)) THEN ((_col8 * UDFToFloat(_col7))) ELSE (0) END (type: float), CASE WHEN ((_col2 = 4)) THEN ((_col8 * UDFToFloat(_col7))) ELSE (0) END (type: float), CASE WHEN ((_col2 = 5)) THEN ((_col8 * UDFToFloat(_col7))) ELSE (0) END (type: float), CASE WHEN ((_col2 = 6)) THEN ((_col8 * UDFToFloat(_col7))) ELSE (0) END (type: float), CASE WHEN ((_col2 = 7)) THEN ((_col8 * UDFToFloat(_col7))) ELSE (0) END (type: float), CASE WHEN ((_col2 = 8)) THEN ((_col8 * UDFToFloat(_col7))) ELSE (0) END (type: float), CASE WHEN ((_col2 = 9)) THEN ((_col8 * UDFToFloat(_col7))) ELSE (0) END (type: float), CASE WHEN ((_col2 = 10)) THEN ((_col8 * UDFToFloat(_col7))) ELSE (0) END (type: float), CASE WHEN ((_col2 = 11)) THEN ((_col8 * UDFToFloat(_col7))) ELSE (0) END (type: float), CASE WHEN ((_col2 = 12)) THEN ((_col8 * UDFToFloat(_col7))) ELSE (0) END (type: float), CASE WHEN ((_col2 = 1)) THEN ((_col9 * UDFToFloat(_col7))) ELSE (0) END (type: float), CASE WHEN ((_col2 = 2)) THEN ((_col9 * UDFToFloat(_col7))) ELSE (0) END (type: float), CASE WHEN ((_col2 = 3)) THEN ((_col9 * UDFToFloat(_col7))) ELSE (0) END (type: float), CASE WHEN ((_col2 = 4)) THEN ((_col9 * UDFToFloat(_col7))) ELSE (0) END (type: float), CASE WHEN ((_col2 = 5)) THEN ((_col9 * UDFToFloat(_col7))) ELSE (0) END (type: float), CASE WHEN ((_col2 = 6)) THEN ((_col9 * UDFToFloat(_col7))) ELSE (0) END (type: float), CASE WHEN ((_col2 = 7)) THEN ((_col9 * UDFToFloat(_col7))) ELSE (0) END (type: float), CASE WHEN ((_col2 = 8)) THEN ((_col9 * UDFToFloat(_col7))) ELSE (0) END (type: float), CASE WHEN ((_col2 = 9)) THEN ((_col9 * UDFToFloat(_col7))) ELSE (0) END (type: float), CASE WHEN ((_col2 = 10)) THEN ((_col9 * UDFToFloat(_col7))) ELSE (0) END (type: float), CASE WHEN ((_col2 = 11)) THEN ((_col9 * UDFToFloat(_col7))) ELSE (0) END (type: float), CASE WHEN ((_col2 = 12)) THEN ((_col9 * UDFToFloat(_col7))) ELSE (0) END (type: float)\n                      outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13, _col14, _col15, _col16, _col17, _col18, _col19, _col20, _col21, _col22, _col23, _col24, _col25, _col26, _col27, _col28, _col29, _col30\n                      Statistics: Num rows: 82323356149350400 Data size: 9223372036854775807 Basic stats: COMPLETE Column stats: COMPLETE\n                      Group By Operator\n                        aggregations: sum(_col7), sum(_col8), sum(_col9), sum(_col10), sum(_col11), sum(_col12), sum(_col13), sum(_col14), sum(_col15), sum(_col16), sum(_col17), sum(_col18), sum(_col19), sum(_col20), sum(_col21), sum(_col22), sum(_col23), sum(_col24), sum(_col25), sum(_col26), sum(_col27), sum(_col28), sum(_col29), sum(_col30)\n                        keys: _col0 (type: string), _col1 (type: int), _col2 (type: string), _col3 (type: string), _col4 (type: string), _col5 (type: string), _col6 (type: int)\n                        mode: hash\n                        outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13, _col14, _col15, _col16, _col17, _col18, _col19, _col20, _col21, _col22, _col23, _col24, _col25, _col26, _col27, _col28, _col29, _col30\n                        Statistics: Num rows: 2147483647 Data size: 1447403978078 Basic stats: COMPLETE Column stats: COMPLETE\n                        Reduce Output Operator\n                          key expressions: _col0 (type: string), _col1 (type: int), _col2 (type: string), _col3 (type: string), _col4 (type: string), _col5 (type: string), _col6 (type: int)\n                          sort order: +++++++\n                          Map-reduce partition columns: _col0 (type: string), _col1 (type: int), _col2 (type: string), _col3 (type: string), _col4 (type: string), _col5 (type: string), _col6 (type: int)\n                          Statistics: Num rows: 2147483647 Data size: 1447403978078 Basic stats: COMPLETE Column stats: COMPLETE\n                          value expressions: _col7 (type: double), _col8 (type: double), _col9 (type: double), _col10 (type: double), _col11 (type: double), _col12 (type: double), _col13 (type: double), _col14 (type: double), _col15 (type: double), _col16 (type: double), _col17 (type: double), _col18 (type: double), _col19 (type: double), _col20 (type: double), _col21 (type: double), _col22 (type: double), _col23 (type: double), _col24 (type: double), _col25 (type: double), _col26 (type: double), _col27 (type: double), _col28 (type: double), _col29 (type: double), _col30 (type: double)\n        Reducer 4 \n            Reduce Operator Tree:\n              Group By Operator\n                aggregations: sum(VALUE._col0), sum(VALUE._col1), sum(VALUE._col2), sum(VALUE._col3), sum(VALUE._col4), sum(VALUE._col5), sum(VALUE._col6), sum(VALUE._col7), sum(VALUE._col8), sum(VALUE._col9), sum(VALUE._col10), sum(VALUE._col11), sum(VALUE._col12), sum(VALUE._col13), sum(VALUE._col14), sum(VALUE._col15), sum(VALUE._col16), sum(VALUE._col17), sum(VALUE._col18), sum(VALUE._col19), sum(VALUE._col20), sum(VALUE._col21), sum(VALUE._col22), sum(VALUE._col23)\n                keys: KEY._col0 (type: string), KEY._col1 (type: int), KEY._col2 (type: string), KEY._col3 (type: string), KEY._col4 (type: string), KEY._col5 (type: string), KEY._col6 (type: int)\n                mode: mergepartial\n                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13, _col14, _col15, _col16, _col17, _col18, _col19, _col20, _col21, _col22, _col23, _col24, _col25, _col26, _col27, _col28, _col29, _col30\n                Select Operator\n                  expressions: _col0 (type: string), _col1 (type: int), _col2 (type: string), _col3 (type: string), _col4 (type: string), _col5 (type: string), 'DIAMOND,AIRBORNE' (type: string), _col6 (type: int), _col7 (type: double), _col8 (type: double), _col9 (type: double), _col10 (type: double), _col11 (type: double), _col12 (type: double), _col13 (type: double), _col14 (type: double), _col15 (type: double), _col16 (type: double), _col17 (type: double), _col18 (type: double), _col19 (type: double), _col20 (type: double), _col21 (type: double), _col22 (type: double), _col23 (type: double), _col24 (type: double), _col25 (type: double), _col26 (type: double), _col27 (type: double), _col28 (type: double), _col29 (type: double), _col30 (type: double)\n                  outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13, _col14, _col15, _col16, _col17, _col18, _col19, _col20, _col21, _col22, _col23, _col24, _col25, _col26, _col27, _col28, _col29, _col30, _col31\n                  Select Operator\n                    expressions: _col0 (type: string), _col1 (type: int), _col2 (type: string), _col3 (type: string), _col4 (type: string), _col5 (type: string), _col6 (type: string), _col7 (type: int), _col8 (type: double), _col9 (type: double), _col10 (type: double), _col11 (type: double), _col12 (type: double), _col13 (type: double), _col14 (type: double), _col15 (type: double), _col16 (type: double), _col17 (type: double), _col18 (type: double), _col19 (type: double), (_col8 / UDFToDouble(_col1)) (type: double), (_col9 / UDFToDouble(_col1)) (type: double), (_col10 / UDFToDouble(_col1)) (type: double), (_col11 / UDFToDouble(_col1)) (type: double), (_col12 / UDFToDouble(_col1)) (type: double), (_col13 / UDFToDouble(_col1)) (type: double), (_col14 / UDFToDouble(_col1)) (type: double), (_col15 / UDFToDouble(_col1)) (type: double), (_col16 / UDFToDouble(_col1)) (type: double), (_col17 / UDFToDouble(_col1)) (type: double), (_col18 / UDFToDouble(_col1)) (type: double), (_col19 / UDFToDouble(_col1)) (type: double), _col20 (type: double), _col21 (type: double), _col22 (type: double), _col23 (type: double), _col24 (type: double), _col25 (type: double), _col26 (type: double), _col27 (type: double), _col28 (type: double), _col29 (type: double), _col30 (type: double), _col31 (type: double)\n                    outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13, _col14, _col15, _col16, _col17, _col18, _col19, _col20, _col21, _col22, _col23, _col24, _col25, _col26, _col27, _col28, _col29, _col30, _col31, _col32, _col33, _col34, _col35, _col36, _col37, _col38, _col39, _col40, _col41, _col42, _col43\n                    Group By Operator\n                      aggregations: sum(_col8), sum(_col9), sum(_col10), sum(_col11), sum(_col12), sum(_col13), sum(_col14), sum(_col15), sum(_col16), sum(_col17), sum(_col18), sum(_col19), sum(_col20), sum(_col21), sum(_col22), sum(_col23), sum(_col24), sum(_col25), sum(_col26), sum(_col27), sum(_col28), sum(_col29), sum(_col30), sum(_col31), sum(_col32), sum(_col33), sum(_col34), sum(_col35), sum(_col36), sum(_col37), sum(_col38), sum(_col39), sum(_col40), sum(_col41), sum(_col42), sum(_col43)\n                      keys: _col0 (type: string), _col1 (type: int), _col2 (type: string), _col3 (type: string), _col4 (type: string), _col5 (type: string), _col6 (type: string), _col7 (type: int)\n                      mode: hash\n                      outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13, _col14, _col15, _col16, _col17, _col18, _col19, _col20, _col21, _col22, _col23, _col24, _col25, _col26, _col27, _col28, _col29, _col30, _col31, _col32, _col33, _col34, _col35, _col36, _col37, _col38, _col39, _col40, _col41, _col42, _col43\n                      Reduce Output Operator\n                        key expressions: _col0 (type: string), _col1 (type: int), _col2 (type: string), _col3 (type: string), _col4 (type: string), _col5 (type: string), _col6 (type: string), _col7 (type: int)\n                        sort order: ++++++++\n                        Map-reduce partition columns: _col0 (type: string), _col1 (type: int), _col2 (type: string), _col3 (type: string), _col4 (type: string), _col5 (type: string), _col6 (type: string), _col7 (type: int)\n                        value expressions: _col8 (type: double), _col9 (type: double), _col10 (type: double), _col11 (type: double), _col12 (type: double), _col13 (type: double), _col14 (type: double), _col15 (type: double), _col16 (type: double), _col17 (type: double), _col18 (type: double), _col19 (type: double), _col20 (type: double), _col21 (type: double), _col22 (type: double), _col23 (type: double), _col24 (type: double), _col25 (type: double), _col26 (type: double), _col27 (type: double), _col28 (type: double), _col29 (type: double), _col30 (type: double), _col31 (type: double), _col32 (type: double), _col33 (type: double), _col34 (type: double), _col35 (type: double), _col36 (type: double), _col37 (type: double), _col38 (type: double), _col39 (type: double), _col40 (type: double), _col41 (type: double), _col42 (type: double), _col43 (type: double)\n        Reducer 6 \n            Reduce Operator Tree:\n              Group By Operator\n                aggregations: sum(VALUE._col0), sum(VALUE._col1), sum(VALUE._col2), sum(VALUE._col3), sum(VALUE._col4), sum(VALUE._col5), sum(VALUE._col6), sum(VALUE._col7), sum(VALUE._col8), sum(VALUE._col9), sum(VALUE._col10), sum(VALUE._col11), sum(VALUE._col12), sum(VALUE._col13), sum(VALUE._col14), sum(VALUE._col15), sum(VALUE._col16), sum(VALUE._col17), sum(VALUE._col18), sum(VALUE._col19), sum(VALUE._col20), sum(VALUE._col21), sum(VALUE._col22), sum(VALUE._col23), sum(VALUE._col24), sum(VALUE._col25), sum(VALUE._col26), sum(VALUE._col27), sum(VALUE._col28), sum(VALUE._col29), sum(VALUE._col30), sum(VALUE._col31), sum(VALUE._col32), sum(VALUE._col33), sum(VALUE._col34), sum(VALUE._col35)\n                keys: KEY._col0 (type: string), KEY._col1 (type: int), KEY._col2 (type: string), KEY._col3 (type: string), KEY._col4 (type: string), KEY._col5 (type: string), KEY._col6 (type: string), KEY._col7 (type: int)\n                mode: mergepartial\n                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13, _col14, _col15, _col16, _col17, _col18, _col19, _col20, _col21, _col22, _col23, _col24, _col25, _col26, _col27, _col28, _col29, _col30, _col31, _col32, _col33, _col34, _col35, _col36, _col37, _col38, _col39, _col40, _col41, _col42, _col43\n                Statistics: Num rows: 1 Data size: 288 Basic stats: COMPLETE Column stats: COMPLETE\n                Reduce Output Operator\n                  key expressions: _col0 (type: string)\n                  sort order: +\n                  Statistics: Num rows: 1 Data size: 288 Basic stats: COMPLETE Column stats: COMPLETE\n                  TopN Hash Memory Usage: 0.04\n                  value expressions: _col1 (type: int), _col2 (type: string), _col3 (type: string), _col4 (type: string), _col5 (type: string), _col6 (type: string), _col7 (type: int), _col8 (type: double), _col9 (type: double), _col10 (type: double), _col11 (type: double), _col12 (type: double), _col13 (type: double), _col14 (type: double), _col15 (type: double), _col16 (type: double), _col17 (type: double), _col18 (type: double), _col19 (type: double), _col20 (type: double), _col21 (type: double), _col22 (type: double), _col23 (type: double), _col24 (type: double), _col25 (type: double), _col26 (type: double), _col27 (type: double), _col28 (type: double), _col29 (type: double), _col30 (type: double), _col31 (type: double), _col32 (type: double), _col33 (type: double), _col34 (type: double), _col35 (type: double), _col36 (type: double), _col37 (type: double), _col38 (type: double), _col39 (type: double), _col40 (type: double), _col41 (type: double), _col42 (type: double), _col43 (type: double)\n        Reducer 7 \n            Reduce Operator Tree:\n              Select Operator\n                expressions: KEY.reducesinkkey0 (type: string), VALUE._col0 (type: int), VALUE._col1 (type: string), VALUE._col2 (type: string), VALUE._col3 (type: string), VALUE._col4 (type: string), VALUE._col5 (type: string), VALUE._col6 (type: int), VALUE._col7 (type: double), VALUE._col8 (type: double), VALUE._col9 (type: double), VALUE._col10 (type: double), VALUE._col11 (type: double), VALUE._col12 (type: double), VALUE._col13 (type: double), VALUE._col14 (type: double), VALUE._col15 (type: double), VALUE._col16 (type: double), VALUE._col17 (type: double), VALUE._col18 (type: double), VALUE._col19 (type: double), VALUE._col20 (type: double), VALUE._col21 (type: double), VALUE._col22 (type: double), VALUE._col23 (type: double), VALUE._col24 (type: double), VALUE._col25 (type: double), VALUE._col26 (type: double), VALUE._col27 (type: double), VALUE._col28 (type: double), VALUE._col29 (type: double), VALUE._col30 (type: double), VALUE._col31 (type: double), VALUE._col32 (type: double), VALUE._col33 (type: double), VALUE._col34 (type: double), VALUE._col35 (type: double), VALUE._col36 (type: double), VALUE._col37 (type: double), VALUE._col38 (type: double), VALUE._col39 (type: double), VALUE._col40 (type: double), VALUE._col41 (type: double), VALUE._col42 (type: double)\n                outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13, _col14, _col15, _col16, _col17, _col18, _col19, _col20, _col21, _col22, _col23, _col24, _col25, _col26, _col27, _col28, _col29, _col30, _col31, _col32, _col33, _col34, _col35, _col36, _col37, _col38, _col39, _col40, _col41, _col42, _col43\n                Statistics: Num rows: 1 Data size: 288 Basic stats: COMPLETE Column stats: COMPLETE\n                Limit\n                  Number of rows: 100\n                  Statistics: Num rows: 1 Data size: 288 Basic stats: COMPLETE Column stats: COMPLETE\n                  File Output Operator\n                    compressed: false\n                    Statistics: Num rows: 1 Data size: 288 Basic stats: COMPLETE Column stats: COMPLETE\n                    table:\n                        input format: org.apache.hadoop.mapred.TextInputFormat\n                        output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat\n                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe\n        Union 5 \n            Vertex: Union 5\n\n  Stage: Stage-0\n    Fetch Operator\n      limit: 100\n      Processor Tree:\n        ListSink\n\n{code}",
        "duedate": null,
        "environment": null,
        "fixVersions": [],
        "issuelinks": [],
        "issuetype": {
            "avatarId": 21133,
            "description": "A problem which impairs or prevents the functions of the product.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
            "id": "1",
            "name": "Bug",
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
            "subtask": false
        },
        "labels": [],
        "lastViewed": null,
        "priority": {
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "id": "3",
            "name": "Major",
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3"
        },
        "progress": {
            "progress": 0,
            "total": 0
        },
        "project": {
            "avatarUrls": {
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12310843&avatarId=11935",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12310843&avatarId=11935",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12310843&avatarId=11935",
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12310843&avatarId=11935"
            },
            "id": "12310843",
            "key": "HIVE",
            "name": "Hive",
            "projectCategory": {
                "description": "Scalable Distributed Computing",
                "id": "10292",
                "name": "Hadoop",
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/10292"
            },
            "self": "https://issues.apache.org/jira/rest/api/2/project/12310843"
        },
        "reporter": {
            "active": true,
            "avatarUrls": {
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=mmokhtar&avatarId=21863",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=mmokhtar&avatarId=21863",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=mmokhtar&avatarId=21863",
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=mmokhtar&avatarId=21863"
            },
            "displayName": "Mostafa Mokhtar",
            "key": "mmokhtar",
            "name": "mmokhtar",
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=mmokhtar",
            "timeZone": "America/Los_Angeles"
        },
        "resolution": {
            "description": "All attempts at reproducing this issue failed, or not enough information was available to reproduce the issue. Reading the code produces no clues as to why this behavior would occur. If more information appears later, please reopen the issue.",
            "id": "5",
            "name": "Cannot Reproduce",
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/5"
        },
        "resolutiondate": "2015-04-30T20:35:37.000+0000",
        "status": {
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "id": "5",
            "name": "Resolved",
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "statusCategory": {
                "colorName": "green",
                "id": 3,
                "key": "done",
                "name": "Done",
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3"
            }
        },
        "subtasks": [],
        "summary": "Row count and data size are set to LONG.MAX when source table has 0 rows",
        "timeestimate": null,
        "timeoriginalestimate": null,
        "timespent": null,
        "updated": "2015-04-30T20:35:37.000+0000",
        "versions": [{
            "archived": false,
            "description": "released",
            "id": "12326450",
            "name": "0.14.0",
            "releaseDate": "2014-11-12",
            "released": true,
            "self": "https://issues.apache.org/jira/rest/api/2/version/12326450"
        }],
        "votes": {
            "hasVoted": false,
            "self": "https://issues.apache.org/jira/rest/api/2/issue/HIVE-9712/votes",
            "votes": 0
        },
        "watches": {
            "isWatching": false,
            "self": "https://issues.apache.org/jira/rest/api/2/issue/HIVE-9712/watchers",
            "watchCount": 1
        },
        "workratio": -1
    },
    "id": "12775800",
    "key": "HIVE-9712",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/12775800"
}