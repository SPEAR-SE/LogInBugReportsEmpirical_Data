[Following is the report from blockscanner UI

{code}
Block report for block pool: BP-1421388031-10.18.52.55-1338462688154

Total Blocks                 :   5025
Verified in last hour        :   2658
Verified in last day         :   4940
Verified in last week        :   4940
Verified in last four weeks  :   4940
Verified in SCAN_PERIOD      :   4940
Not yet verified             :     85
Verified since restart       :   4940
Scans since restart          :   4940
Scan errors since restart    :      0
Transient scan errors        :      0
Current scan rate limit KBps :   1024
Progress this period         :     98%
Time left in cur period      : 100.00%
{code}

, This problem can occur in the following scenario 

when a new block is added to DN addBlock() in BPSC will generate a lastScanTime as
{code}
private synchronized long getNewBlockScanTime() {
    /* If there are a lot of blocks, this returns a random time with in
     * the scan period. Otherwise something sooner.
     */
    long period = Math.min(scanPeriod,
                           Math.max(blockMap.size(),1) * 600 * 1000L);
    int periodInt = Math.abs((int)period);
    return System.currentTimeMillis() - scanPeriod +
        DFSUtil.getRandom().nextInt(periodInt);
  }
{code}

Now when the block is being added to blockInfoSet (TreeSet) which will compare all the blocks already present in the blockInfoSet and add the blocks.

All the unscanned blocks will be added to the head of the blockInfoSet after scanning it will be moved to tail end of blockInfoSet.

When the scan() is scanning for the blocks, it will scan for all the blocks from the head to tail till it gets any already scanned block in the previous iteration from isFirstBlockProcessed().

We are adding a random number to initial scan time if the random number manages the scantime greater than that of other blocks then this block will be added to the tail end after the scanned blocks which will cause the blocks to starve for block scanning.
, Currently we are adding some random time when the block is getting added into blockInfoSet, this randomization will be for a very short period of time i.e, till the block is scanned for the first time, after first scan it will update the exact time of scan so I thought of removing the random and verified the block scanning for 75K blocks which worked fine.

I tried to write a test for the same but couldn't since I can't determine the random number generated and added.

@Suja can u just apply the patch and test the same, -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12531266/HDFS-3512.patch
  against trunk revision .

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 eclipse:eclipse.  The patch built with eclipse:eclipse.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed unit tests in hadoop-hdfs-project/hadoop-hdfs.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HDFS-Build/2613//testReport/
Console output: https://builds.apache.org/job/PreCommit-HDFS-Build/2613//console

This message is automatically generated., Thank You Amith for taking a look. I have applied the patch and tested with around 6 lakh blocks in my cluster and scanning is happening as expected., Thanks Suja for verifying the patch., @Amith, This is intentional from the code. If there are many blocks then it will give some random number. So, scan should happen with that period time anyway. So, I am not seeing big issue here. do you agree?, \\
\\
| (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:red}-1{color} | patch |   0m  0s | The patch command could not apply the patch during dryrun. |
\\
\\
|| Subsystem || Report/Notes ||
| Patch URL | http://issues.apache.org/jira/secure/attachment/12531266/HDFS-3512.patch |
| Optional Tests | javadoc javac unit findbugs checkstyle |
| git revision | trunk / f1a152c |
| Console output | https://builds.apache.org/job/PreCommit-HDFS-Build/10542/console |


This message was automatically generated., \\
\\
| (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:red}-1{color} | patch |   0m  0s | The patch command could not apply the patch during dryrun. |
\\
\\
|| Subsystem || Report/Notes ||
| Patch URL | http://issues.apache.org/jira/secure/attachment/12531266/HDFS-3512.patch |
| Optional Tests | javadoc javac unit findbugs checkstyle |
| git revision | trunk / f1a152c |
| Console output | https://builds.apache.org/job/PreCommit-HDFS-Build/10561/console |


This message was automatically generated., Agree with [~umamaheswararao]
Closing as not a problem. Feel free to reopen]