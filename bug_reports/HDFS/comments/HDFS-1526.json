[Here comes the patch., Hairong, using a random number (with time as a seed) for getting a unique filename reminds me of an old old data corruption bug we looked at.  When dfsclient was writing to temporary file before Dhruba's HADOOP-1707, we had cases of multiple tasks using the same seed/time resulting in data corruption.  Wouldn't your patch have the same problem?, Koji, your comment makes sense if all threads happen to have the same seed. Another option for this problem is to concatenate the thread id, which might be a safer., -1 on random without some sort of check for uniqueness
+1 on thread id if it is guaranteed to be unique

... and this sounds like it should be a blocker for 0.22 and 0.21.1.

, To address Allen's comments, we should make the Random object be a static object so that the generated random numbers do not repeat within the same DistributedFileSystem object. , This patch makes random number generator to be static and concatenates a random number and the thread id to the client name., I think you attached the wrong patch to this JIRA, Oops, here is the right one., +1. I do not think we need any unit tests for this one.

, was just thinking abt this, would it be better for log parsing if both the DFSClient names looked the same? Meaning with and without mapreduce? 

something like:

DFSClient_applicationid_randomint_threadid (where applicationid = mapred.task.id or else = "null" or some other constant).

I dont know much abt the dfsclient code so dont know if this would be useful or not.

, I agree with Mahadev, we could follow his suggestion., Which constant string we should choose? null seems not user friendly. How about an empty string or "NONMAPREDUCE"?, agreed. NONMAPREDUCE seems fine (or you can use MAHADEV, just kidding!!  :) ), Here is the patch that uses "NONMAPREDUCE" as app name for dfs clients that are not mapreduce tasks. (MAHADEV sounds good to me too. :), +1 the patch looks good. , resubmitting for hudson.,      [exec] -1 overall.  
     [exec] 
     [exec]     +1 @author.  The patch does not contain any @author tags.
     [exec] 
     [exec]     -1 tests included.  The patch doesn't appe
     [exec] ar to include any new or modified tests.
     [exec]                         Please justify why no new tests are needed for this patch.
     [exec]                         Also please list what manual steps were performed to verify this patch.
     [exec] 
     [exec]     +1 javadoc.  The javadoc tool did not generate any warning messages.
     [exec] 
     [exec]     +1 javac.  The applied patch does not increase the total number of javac compiler warnings.
     [exec] 
     [exec]     +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.
     [exec] 
     [exec]     +1 release audit.  The applied patch does not increase the total number of release audit warnings.
     [exec] 
     [exec]     +1 system test framework.  The patch passed system test framework compile, All unit tests passed except for known failed ones., I just committed this!, Integrated in Hadoop-Hdfs-trunk #643 (See [https://builds.apache.org/hudson/job/Hadoop-Hdfs-trunk/643/])
    , Noticed this today while poking around with 0.23.0:

If its not mapreduce, labelling it as 'NONMAPREDUCE' only makes it harder to grep, cause there's still some 'MAPREDUCE' in it? Its a nitpick (cause IDs don't carry that string), but perhaps you may consider switching to something more 'REGULAR'?]