[Here is a simple patch to just return if persistsBlocks already enabled., Hi Uma,

I'm not super familiar with the write path, but I was wondering: how are readers updated of the new block length after an {{hsync/hflush}} if we're skipping the {{fsync}}? Isn't that part of the {{hsync/hflush}} semantics?

Having an explanatory comment on the if/return might be nice., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12571449/HDFS-4526.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-hdfs-project/hadoop-hdfs.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HDFS-Build/4017//testReport/
Console output: https://builds.apache.org/job/PreCommit-HDFS-Build/4017//console

This message is automatically generated., Hi Andrew, Thanks a lot for taking a look.

Actually if see the hsync call, it will not pass any length to NN right now. So, eventhough you call hsync, NN will not know the length of the block as client would have written the data to DN but DNs will not report intermittently again to NN with the length for every flush.

Hsync ensures all the packets should stream to DN and persist the block details. Here block length still would be 0 in NN. 

When readers trying to read the block, client will directly talk to DN for the last block length. 

Also you can see the code path at client side, that we will call fsync to NN only once per the block. Here my proposal is, if we enable persistBlocks feature, addBlock call itself persisting the blocks in NN. then there is no need to explicite fsync call to NN at all. Only we have to ensure is that, Client should stream all packets to DN till the fsync length., Thanks for the in-depth explanation Uma, it really helped me know where to look. I read through {{FSNamesystem#addBlock}} and {{DFSOutputStream}} more closely, and everything checks out.

Patch LGTM!, Ok, thanks Andrew for your time on this patch review! So, you are +1 on this patch? Any other comments on this patch? If there are no comments I will go ahead and commit this patch based on Andrew's +1.
 , Hi Uma,
In HDFS-4213 we support updating the length of block under construction from the client side. I think this patch will disable that functionality?, Ah, I did not notice that the fsync call is carrying length now. see my above comments also on it. In that case, we need not do this optimization now. Let's close this as invalid. Thanks a lot Jing for pointing me that. I was on 2.0.2 and directly genrated on trunk. To keep this fsync call as is, I have another proposal in HDFS-4516 to have fsync call explicitely after pipeline establishment. Do mind take a look at it?]