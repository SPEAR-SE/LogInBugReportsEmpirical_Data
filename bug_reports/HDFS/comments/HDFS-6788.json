[Upload patch 001.
, {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12658673/HDFS-6788.001.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:red}-1 core tests{color}.  The patch failed these unit tests in hadoop-hdfs-project/hadoop-hdfs:

                  org.apache.hadoop.hdfs.TestRollingUpgrade

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HDFS-Build/7500//testReport/
Console output: https://builds.apache.org/job/PreCommit-HDFS-Build/7500//console

This message is automatically generated., HI [~arpitagarwal], thanks for your help on the other jiras I worked on earlier. I could you could help again on reviewing this one. The fix here is simply to replace the synchronized methods with read write lock, I believe it will hep performance. I did not provide a unit test case here, I wonder whether you think it's really needed after you look at the change. Thanks a lot!
, "I could" should read as "I wish":-) BTW, the failed test seems irrelevant to the patch here. thanks.
, HI Arpit, this is trying to address an important issue. I know that you might be too busy right now. I will get some help from other folks for reviewing in case you won't be able to get to it soon. thanks.

, A few quick stylistic comments:

* Extra newline in imports section
* We could go all the way and implement RwLock like we do in FSNamesystem, but more reasonable is to have readLock() and writeLock() wrappers like we do in FSDirectory

Besides that, +1 from me. The change is pretty straightforward when viewed with {{git diff -w}}., The reentrant behavior of ReentrantReadWriteLock is different from synchronized. A synchronized method can always call another synchronized method, however a read lock holder will block if it attempts to get the write lock. From a quick look I did not find any issues with this patch however I have not reviewed it carefully enough yet., Thanks [~andrew.wang] and [~arpitagarwal] a lot for the review! 

Based on the info Arpit provided, I do see a place that need to be changed. Let me look more thoroughly. I will address the comments from both of you in next revision. Thanks.


, I thought I made a mistake in earlier patch after seeing Arpit's comment, but after careful reviewing, it looks fine to me. 
 
Hi [~andrew.wang], 

I uploaded a patch to address the second comments of yours. For the extra newline in the imports section, it's added by eclipse to separate the imports comp.google and org.apache into different sections , and I think it's not bad and didn't change it. Would you please take a look at the new revision? Thanks.  

Hi [~arpitagarwal], thanks for reviewing it earlier, if you have time, I will appreciate that you look at it again.

BTW Andrew, I saw that both FSDirection and FSNameSystem's lock code have quite some indirection (thus a bit more runtime) when making a call, say,
{code}
  void readLock() {
    this.dirLock.readLock().lock();
  }
{code}
It go through several "." and each of them is an indirection. This can be improved. For example,  we can create a class member, e.g., {{mReadLock = this.dirLock.readLock();}}, then modify the readLock() methods to
{code}
 void readLock() {
    mReadLock.lock();
 }
{code}
I can create a jira to change both classes if you agree. Thanks.
, I don't see any cases where a thread with the read lock would try to get the write lock. The four methods that take the read lock are getNamespaceInfo, getActiveNN, getBlockPoolId, and toString, and they all look safe.

+1 pending Jenkins from me.

Yongjun, for the indirection, it's probably not a big deal since the JIT is pretty likely to inline it. Unless we see this crop up as an issue, I'm inclined not to bother since we have much bigger perf issues (for instance, that there is a global RW lock)., Thanks Andrew/Yongjun for verifying the lock order correctness.

Just reviewed and +1 from me also, pending Jenkins., It looks like precommit isn't picking this up for some reason. I manually
triggered a build.


On Thu, Jul 31, 2014 at 5:41 PM, Arpit Agarwal (JIRA) <jira@apache.org>

, Hi Andrew and Arpit,  Thanks a lot for reviewing and addressing my question, and even taking care of triggering the build! 


, {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12659043/HDFS-6788.002.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:red}-1 core tests{color}.  The patch failed these unit tests in hadoop-hdfs-project/hadoop-hdfs:

                  org.apache.hadoop.hdfs.server.namenode.ha.TestPipelinesFailover
                  org.apache.hadoop.hdfs.TestLeaseRecovery2

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HDFS-Build/7524//testReport/
Console output: https://builds.apache.org/job/PreCommit-HDFS-Build/7524//console

This message is automatically generated., The TestPipelinesFailover.testPipelineRecoveryStress  failure is reported in HDFS-6694. The TestLeaseRecovery2 failures appear to be intermittent and unrelated (I ran it locally for several times and didn't see failure).  Thanks.

, I ran these failed tests locally, look like unrelated flakies. Committing this shortly., Committed to trunk and branch-2, thanks for the patch Yongjun and thanks Arpit for the reviews., FAILURE: Integrated in Hadoop-trunk-Commit #5998 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/5998/])
HDFS-6788. Improve synchronization in BPOfferService with read write lock. Contributed by Yongjun Zhang. (wang: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1615190)
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/CHANGES.txt
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BPOfferService.java
, Many thanks [~andrew.wang] and [~arpitagarwal]!
, As an FYI, I just did a quick revert + fix for the branch-2 version of this since the SVN merge messed up (a brace was in the wrong place, but no conflict)., FAILURE: Integrated in Hadoop-Yarn-trunk #631 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk/631/])
HDFS-6788. Improve synchronization in BPOfferService with read write lock. Contributed by Yongjun Zhang. (wang: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1615190)
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/CHANGES.txt
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BPOfferService.java
, SUCCESS: Integrated in Hadoop-Hdfs-trunk #1825 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/1825/])
HDFS-6788. Improve synchronization in BPOfferService with read write lock. Contributed by Yongjun Zhang. (wang: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1615190)
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/CHANGES.txt
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BPOfferService.java
, SUCCESS: Integrated in Hadoop-Mapreduce-trunk #1850 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/1850/])
HDFS-6788. Improve synchronization in BPOfferService with read write lock. Contributed by Yongjun Zhang. (wang: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1615190)
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/CHANGES.txt
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BPOfferService.java
]