[Code was split from HDFS-7433.  Changed hash regeneration to be a bit more thread-safe - compute in a temp & assign so racing threads generate an idempotent hash.  It's a bit of a folly though since the class is already not thread safe at all..., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12684454/HDFS-7457.patch
  against trunk revision c732ed7.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:red}-1 core tests{color}.  The patch failed these unit tests in hadoop-hdfs-project/hadoop-hdfs:

                  org.apache.hadoop.hdfs.tools.TestDFSAdminWithHA

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HDFS-Build/8881//testReport/
Console output: https://builds.apache.org/job/PreCommit-HDFS-Build/8881//console

This message is automatically generated., +1 patch looks good., [~daryn] This is an interesting finding and thanks for working on it.

I just have a small question:

{code:java}
            if (hashCode == -1) {
	      int newHashCode = xferAddr.hashCode() ^ datanodeUuid.hashCode();
	      hashCode = newHashCode & Integer.MAX_VALUE;
	    }
	    return hashCode;
{code}

Do we need to change this? {{int}} in {{hashCode}}, as primitive,  should not be garbage collected. 

Other than that, this patch looks very good overall. , It's not the int that is subject to GC, but the dynamic construction of the xferAddr string per the description.  This caches the string and recomputes the hash if/when it changes., SUCCESS: Integrated in Hadoop-trunk-Commit #6872 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/6872/])
HDFS-7457. DatanodeID generates excessive garbage. Contributed by Daryn Sharp. (kihwal: rev 780a6bf14562fd9d1070a7c8e756fa1c3bc65d32)
* hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/DatanodeID.java
* hadoop-hdfs-project/hadoop-hdfs/CHANGES.txt
, FAILURE: Integrated in Hadoop-Yarn-trunk-Java8 #75 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk-Java8/75/])
HDFS-7457. DatanodeID generates excessive garbage. Contributed by Daryn Sharp. (kihwal: rev 780a6bf14562fd9d1070a7c8e756fa1c3bc65d32)
* hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/DatanodeID.java
* hadoop-hdfs-project/hadoop-hdfs/CHANGES.txt
, FAILURE: Integrated in Hadoop-Yarn-trunk #809 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk/809/])
HDFS-7457. DatanodeID generates excessive garbage. Contributed by Daryn Sharp. (kihwal: rev 780a6bf14562fd9d1070a7c8e756fa1c3bc65d32)
* hadoop-hdfs-project/hadoop-hdfs/CHANGES.txt
* hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/DatanodeID.java
, FAILURE: Integrated in Hadoop-Hdfs-trunk #2007 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/2007/])
HDFS-7457. DatanodeID generates excessive garbage. Contributed by Daryn Sharp. (kihwal: rev 780a6bf14562fd9d1070a7c8e756fa1c3bc65d32)
* hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/DatanodeID.java
* hadoop-hdfs-project/hadoop-hdfs/CHANGES.txt
, FAILURE: Integrated in Hadoop-Hdfs-trunk-Java8 #72 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk-Java8/72/])
HDFS-7457. DatanodeID generates excessive garbage. Contributed by Daryn Sharp. (kihwal: rev 780a6bf14562fd9d1070a7c8e756fa1c3bc65d32)
* hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/DatanodeID.java
* hadoop-hdfs-project/hadoop-hdfs/CHANGES.txt
, FAILURE: Integrated in Hadoop-Mapreduce-trunk-Java8 #76 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk-Java8/76/])
HDFS-7457. DatanodeID generates excessive garbage. Contributed by Daryn Sharp. (kihwal: rev 780a6bf14562fd9d1070a7c8e756fa1c3bc65d32)
* hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/DatanodeID.java
* hadoop-hdfs-project/hadoop-hdfs/CHANGES.txt
, FAILURE: Integrated in Hadoop-Mapreduce-trunk #2026 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/2026/])
HDFS-7457. DatanodeID generates excessive garbage. Contributed by Daryn Sharp. (kihwal: rev 780a6bf14562fd9d1070a7c8e756fa1c3bc65d32)
* hadoop-hdfs-project/hadoop-hdfs/CHANGES.txt
* hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/DatanodeID.java
]