[A further thought.

The exception reported was thrown here
{code}
      if (finishedReceiving && received != advertisedSize) {
        // only throw this exception if we think we read all of it on our end
        // -- otherwise a client-side IOException would be masked by this
        // exception that makes it look like a server-side problem!
        deleteTmpFiles(localPaths);
        throw new IOException("File " + url + " received length " + received +
            " is not of the advertised size " + advertisedSize +
            ". Fsimage name: " + fsImageName + " lastReceived: " + num);
      }
{code}
where {{finishedReceiving}} is true. It's only true when the loop finishes
{code}
    byte[] buf = new byte[IO_FILE_BUFFER_SIZE];
      while (num > 0) {
        num = stream.read(buf);
        if (num > 0) {
          received += num;
          for (FileOutputStream fos : outputStreams) {
            fos.write(buf, 0, num);
          }
          if (throttler != null) {
            throttler.throttle(num);
          }
        }
      }
      finishedReceiving = true;
{code}

It's puzzling: if there is socket time out exception, it should be thrown in the above loop, and {{finishedReceiving}} should not have been set to true. If {{finishedReceiving}}  is set to true, then no exception is expected to have been thrown in the above loop presumably.




]