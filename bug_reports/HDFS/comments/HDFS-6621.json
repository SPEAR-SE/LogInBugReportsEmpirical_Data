[Hi [~bbowman410], could you come up with a patch for this JIRA?, {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12653835/HDFS-6621.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-hdfs-project/hadoop-hdfs.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HDFS-Build/7307//testReport/
Console output: https://builds.apache.org/job/PreCommit-HDFS-Build/7307//console

This message is automatically generated., We have also experience this problem with Balancer.
The problem in general is that balancer will prematurely finish iteration due to noPendingBlockIteration >= 5.
I was about to create JIRA ticket for this - but I have noticed this ticket.
The solutions that, we have applied is to:
 1. noPendingBlockIteration = 0 when pendingBlock != null, exactly the way you did
 2. notify only on source object when block transfer finishes 

Problem/Solutions 1 is well described above.
Problem/Solutions 2:

In org/apache/hadoop/hdfs/server/balancer/Balancer:
{code}
private void dispatch() {
     ...
     synchronized (Balancer.this) {
         Balancer.this.notifyAll();
     }
}
{code}
this will notify all scheduling threads, even the ones that are waiting and still have all 5 transfer threads occupied.
When occupied task wakes up, it will try to get next block to move, but because all 5 transfer threads are occupied
it will get null as next block to move - which will increase noPendingBlockIteration, and we are in the problem 1.

The solution is to notify threads waiting on source object and reset PendingBlockMove object afterwords.
Should I provide patch in this ticket, or create a separate ticket?
, I would suggest that you provide a patch in this ticket.  The approach sounds similar to our approach and would provide a more fully-formed solution., [~ravwojdyla] - If you are still working on this, would you be posting your patch for the issue here for review soon?, I may be experiencing this as well.  Does the balancer process actually exit, or does it just hang?  It's moved around 900 blocks in the first iteration and stops.  A jstack shows it has been in the waitForMoveCompletion loop for 4+ hours., HI [~ravwojdyla], 

Thanks for your earlier work on this issue. Seems you already have the completed solution for both issues you described, would you mind post the patch here? Thanks a lot.

BTW, thanks [~bbowman410] for reporting the issue here.
, Hi [~yzhangal],

The patch is pretty simple - but it's hard to reproduce it unit tests in sane fashion.
Working on it., Hello [~ravwojdyla],

Thanks for your quick response! Would you mind post a version without the unit test first? Thanks.

, HI [~ravwojdyla], 

I can see the challenge of writing a test for this one. My understanding is that, if writing a test is not feasible, the fix can still be committed, if it is tested locally to see the problem is fixed, and the code review looks good. Would you please post the patch without the test first? 

BTW, once you post the patch, I can think about how to test it too.

thanks.



, {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12665572/HDFS-6621.patch_2
  against trunk revision 0f34e6f.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:red}-1 findbugs{color}.  The patch appears to introduce 1 new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:red}-1 core tests{color}.  The patch failed these unit tests in hadoop-hdfs-project/hadoop-hdfs:

                  org.apache.hadoop.hdfs.server.namenode.ha.TestPipelinesFailover
                  org.apache.hadoop.hdfs.server.balancer.TestBalancerWithEncryptedTransfer

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HDFS-Build/7862//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-HDFS-Build/7862//artifact/trunk/patchprocess/newPatchFindbugsWarningshadoop-hdfs.html
Console output: https://builds.apache.org/job/PreCommit-HDFS-Build/7862//console

This message is automatically generated., HI [~ravwojdyla],

Thanks for uploading the patch and sorry for getting back late. I studied the change you made, I certainly see the change you made for problem 1 is good. But I have some questions about problem/solution 2
{quote} 
2. notify only on source object when block transfer finishes
{quote}

In addition to the place you changed for problem 2,  I saw the threads that can block on the source object via Souce's parent class'  StorageGroup's synchronized methods:

{code}
     /** Decide if still need to move more bytes */
      synchronized boolean hasSpaceForScheduling() {
        return availableSizeToMove() > 0L;
      }   
          
      /** @return the total number of bytes that need to be moved */
      synchronized long availableSizeToMove() {
        return maxSize2Move - scheduledSize;
      }     
          
      /** increment scheduled size */
      synchronized void incScheduledSize(long size) {
        scheduledSize += size; 
      } 
          
      /** @return scheduled size */
      synchronized long getScheduledSize() {
        return scheduledSize;
      } 
        
      /** Reset scheduled size to zero. */
      synchronized void resetScheduledSize() {
        scheduledSize = 0L;
      }   
{code}

All these methods are pretty small thus can be executed quickly. So it looks to me that not many threads would be blocked waiting on "source" object. My question is, will the change you made for 2 end up not to notify some threads that are blocked on Dispatcher.this but not on source, even if they need to be notified?

Thanks a lot.

, BTW,
I wonder if it's a hole that some methods in {{class Source}}  like {{private void removeMovedBlocks()}} are not synchronized.

HI [~szetszwo], I wonder if you could help explain a bit here? would you please also help taking a look at the posted patch and comment? it's a small one and hopefully it won't need too much of your time. Many thanks.

, I took a quick look at this, and I'm wondering about the change to {{notifyAll}} on a Source rather than Dispatcher. I don't see anything waiting on a Source, so this change essentially makes it into a no-op. I haven't looked into the Balancer deeply enough to figure out the right change though, so maybe someone else can comment., Thanks [~andrew.wang].

HI [~ravwojdyla], couple of more questions, you said that the old code {{will notify all scheduling threads, even the ones that are waiting and still have all 5 transfer threads occupied}}.  Would you please explain how your fix  of problem 2 detects the scheduling threads that still have 5 transfer threads occupied so not to notify them?

BTW, have you tried to test with the fix of problem 1 only? Or you have to apply fixes for both problem 1 and 2 to see it works?

Thanks.
, Hi [~ravwojdyla],

I studied it a bit more, and it seems to me that on top of the changes you made, we need to replace the {{Dispather.this}} in the following code with {{this}}, 
{code}
        try {
          synchronized (Dispatcher.this) {
            Dispatcher.this.wait(1000); // wait for targets/sources to be idle
          }
        } catch (InterruptedException ignored) {
        }
{code}
so to make the scheduling threads with all five transfer threads occupied/unfinished block on its {{source}}, then later if one transfer thread finishes, it would notify this blocked scheduling thread (by your change for problem 2) that a slot is available now.

If this makes sense to you, would please try it out with the testing you have done?

Again, the first problem seems to be important to fix, but I don't know how important the second one is (see question asked in my last comment). If the fix of problem 1 is good enough, then we can go with it alone. Otherwise, my above suggested change can be explored.

Would you please comment?

Thanks a lot.





, Hi [~yzhangal]

Thanks for comments, sorry for delay.

First of all - I agree that first problem is more important, and we should just merge it in.

About solution to second problem, do we agree that the problem exists? Especially with big number of threads such waking up for some threads may be lethal even with fix for first problem. Is that correct?

It's been a while since I've made this change, and afair I tested both problems/solutions and it they were separate problems, both of them cause premature exists. First problem was more lethal tho.

About your comment with waiting - your are completely right! I missed this in the patch. Now I see even more the value of pushing-patches/creating-tickets right away ... not waiting till you have a bunch of changes. , {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12667080/HDFS-6621.patch_3
  against trunk revision d1fa582.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:red}-1 findbugs{color}.  The patch appears to introduce 1 new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:red}-1 core tests{color}.  The patch failed these unit tests in hadoop-hdfs-project/hadoop-hdfs:

                  org.apache.hadoop.hdfs.web.TestWebHdfsFileSystemContract
                  org.apache.hadoop.hdfs.server.namenode.ha.TestPipelinesFailover

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HDFS-Build/7934//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-HDFS-Build/7934//artifact/trunk/patchprocess/newPatchFindbugsWarningshadoop-hdfs.html
Console output: https://builds.apache.org/job/PreCommit-HDFS-Build/7934//console

This message is automatically generated., Hi [~ravwojdyla], 

Thanks a lot for the info and new rev. I meant to change both occurrences of {{Dispather.this}} in the quoted code but seems you only changed one. The unchanged one is actually the key, because it's where the block is synchronized upon. Would you please make that change? 

Since you mentioned that both problems are real, I think it's worth pursuing both. It would be great if you could still reproduce and test the fix in real clusters. I hope this is still feasible, would you please comment?  Thanks.


, BTW, thanks [~andrew.wang] for the review and comments, which helped me to look further.
, [~yzhangal] you're correct :D Sorry.
Reproducing error on real cluster - that's still feasible, reproducing this in unit tests is kinda hard, I will try to come back with proof based on logs - is that fine?, Hi Rafal, 

Thanks for the quick response, and that's great to hear! What about we do this:

1. Have a setup to see the problem with the fix at all, to demonstrate the symptom.
2. Try the fix of problem 1 only, to see if there is still problem, and we should try to demonstrate the remaining problem
3. Try the fix of both problems (rev 4), to see if all problems are gone

Thanks again!

, Sorry, one typo in item 1 of last comment: "with" meant "without".
, {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12667093/HDFS-6621.patch_4
  against trunk revision a23144f.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:red}-1 findbugs{color}.  The patch appears to introduce 1 new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:red}-1 core tests{color}.  The patch failed these unit tests in hadoop-hdfs-project/hadoop-hdfs:

                  org.apache.hadoop.hdfs.server.blockmanagement.TestBlockTokenWithDFS

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HDFS-Build/7942//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-HDFS-Build/7942//artifact/trunk/patchprocess/newPatchFindbugsWarningshadoop-hdfs.html
Console output: https://builds.apache.org/job/PreCommit-HDFS-Build/7942//console

This message is automatically generated., Hi [~ravwojdyla],

Thanks for earlier discussion. Would you please providing a patch for problem 1 alone here as soon as possible? and then file a separate jira for problem 2 and we continue the discussion from there? thanks a lot.

BTW, if you had luck reproducing the issue, I'd love to hear.

Hi [~andrew.wang], thanks for your earlier review. I think it would be a good idea to commit the problem 1 fix first. Need your help to review and commit problem 1 fix once Rafal uploads it. The credit of problem 1 fix should go to both [~bbowman410] and [~ravwojdyla]. Thanks Benjamin for filing this jira, and thanks both of them for the fix.

, HI [~szetszwo], 

Need some of your help here. Rev 4 is a result of our discussion to address this issue. The change is pretty small, I wonder if you could quickly browse through and share some insight whether the fix makes sense to you? 

Thanks a lot and really appreciate your help!

, Sure, I will take a look., Many thanks [~szetszwo], really appreciate it!

HI [~ravwojdyla], I wonder if you had any luck reproducing the issue and verifying the fix as we discussed earlier? thanks a lot!


, I agree with Yongjun that let's only fix problem 1 here.

For problem 2, let's create another JIRA for it.  It seems that the original wait-notify code is not very useful since the wait timeout is only 1 second.  How about simply replacing it with sleep(..)?, Thank you so much [~szetszwo]! 

HI [~ravwojdyla] and [~bbowman410], wonder if any of you could provide a patch for the first problem here soon? If you won't get to it soon, hope you don't mind that I put one on your behalf. And we will continue discussing what's the right approach for problem 2 in a new jira.  Thanks a lot.






, [~yzhangal] for problem 1 - patch is in [^HDFS-6621.patch], HI [~ravwojdyla], thanks for your quick response, would you please rebase to latest trunk and submit new rev? it doesn't apply currently.

Hi [~szetszwo], since the fix is a quite intuitive one liner, and it's pretty challenging to write a test case, do you think we can just commit the fix after jenkins? thanks.
, {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12667795/HDFS-6621_problem1.patch
  against trunk revision b67d5ba.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:red}-1 core tests{color}.  The test build failed in hadoop-hdfs-project/hadoop-hdfs 

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HDFS-Build/7987//testReport/
Console output: https://builds.apache.org/job/PreCommit-HDFS-Build/7987//console

This message is automatically generated., +1 LGTM, I'll commit this shortly., Committed to trunk and branch-2. Thanks Rafal and Benjamin for code, Yongjun and Nicholas for reviewing. Let's file a follow-on for the second part of the problem., Filed HDFS-7048 for problem 2, hopefully I captured the problem statement correctly in the JIRA description. Thanks again all., Thanks [~andrew.wang], and all of you!

, FAILURE: Integrated in Hadoop-Yarn-trunk #678 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk/678/])
HDFS-6621. Hadoop Balancer prematurely exits iterations. Contributed by Rafal Wodjdyla and Benjamin Bowman. (wang: rev d1dab6cc63abf5d44533ad9b39e32c582327627b)
* hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/balancer/Dispatcher.java
* hadoop-hdfs-project/hadoop-hdfs/CHANGES.txt
, FAILURE: Integrated in Hadoop-Mapreduce-trunk #1894 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/1894/])
HDFS-6621. Hadoop Balancer prematurely exits iterations. Contributed by Rafal Wodjdyla and Benjamin Bowman. (wang: rev d1dab6cc63abf5d44533ad9b39e32c582327627b)
* hadoop-hdfs-project/hadoop-hdfs/CHANGES.txt
* hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/balancer/Dispatcher.java
, SUCCESS: Integrated in Hadoop-Hdfs-trunk #1869 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/1869/])
HDFS-6621. Hadoop Balancer prematurely exits iterations. Contributed by Rafal Wodjdyla and Benjamin Bowman. (wang: rev d1dab6cc63abf5d44533ad9b39e32c582327627b)
* hadoop-hdfs-project/hadoop-hdfs/CHANGES.txt
* hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/balancer/Dispatcher.java
]