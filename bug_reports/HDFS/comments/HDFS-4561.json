[Attaching a simple unit test to illuminate this issue. You can run it and see the error by running: mvn clean test -Dtest=TestDFSSymlinks., In the unit test you can see that it tests FileContext first, passes, and fails when doing the same command in DistributedFileSystem.

From the unit test error dump you can see that it fails with UnresolvedLinkException on line 66 of my test, where DFS calls getFileStatus on a symlink: FileStatus fsStats = fs.getFileStatus(link);

Here is the shortened error dump:
Running org.apache.hadoop.hdfs.TestDFSSymlinks
Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 3.102 sec <<< FAILURE!
testSymlinkToFile(org.apache.hadoop.hdfs.TestDFSSymlinks)  Time elapsed: 3034 sec  <<< ERROR!
org.apache.hadoop.hdfs.protocol.UnresolvedPathException: /test/hadoop/file
	at org.apache.hadoop.hdfs.server.namenode.INodeDirectory.getExistingPathINodes(INodeDirectory.java:216)
	at org.apache.hadoop.hdfs.server.namenode.INodeDirectory.getNode(INodeDirectory.java:132)
	at org.apache.hadoop.hdfs.server.namenode.INodeDirectory.getNode(INodeDirectory.java:141)
	...
	at org.apache.hadoop.ipc.RemoteException.unwrapRemoteException(RemoteException.java:57)
	at org.apache.hadoop.hdfs.DFSClient.getFileInfo(DFSClient.java:1561)
	at org.apache.hadoop.hdfs.DistributedFileSystem.getFileStatus(DistributedFileSystem.java:811)
	at org.apache.hadoop.hdfs.TestDFSSymlinks.testSymlinkToFile(TestDFSSymlinks.java:66), [~zero45] symlinks are not supported through FileSystem API. It is accessible only using FileContext., this is a duplicate of HADOOP-8040, the project to get symlinks working on FileSystem.  DistributedFileSystem is a subclass of FileSystem., Thanks for the updates; makes sense. Is it safe to close this issue as it is being handled by HADOOP-8040?, Marking as dupe of HADOOP-8040.]